
smart_intercom2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000281f8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0006147c  080283e0  080283e0  000383e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0808985c  0808985c  000a00c4  2**0
                  CONTENTS
  4 .ARM          00000008  0808985c  0808985c  0009985c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08089864  08089864  000a00c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08089864  08089864  00099864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08089868  08089868  00099868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c4  20000000  0808986c  000a0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00047ef0  200000c4  08089930  000a00c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20047fb4  08089930  000a7fb4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000a00c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   003ae26d  00000000  00000000  000a00f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00023727  00000000  00000000  0044e361  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 0000a9d0  00000000  00000000  00471a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 0000a4d0  00000000  00000000  0047c458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00045260  00000000  00000000  00486928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0009550e  00000000  00000000  004cbb88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001e0b3e  00000000  00000000  00561096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00741bd4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00031024  00000000  00000000  00741c28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200000c4 	.word	0x200000c4
 80001fc:	00000000 	.word	0x00000000
 8000200:	080283c0 	.word	0x080283c0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200000c8 	.word	0x200000c8
 800021c:	080283c0 	.word	0x080283c0

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strcmp>:
 80002c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002c8:	2a01      	cmp	r2, #1
 80002ca:	bf28      	it	cs
 80002cc:	429a      	cmpcs	r2, r3
 80002ce:	d0f7      	beq.n	80002c0 <strcmp>
 80002d0:	1ad0      	subs	r0, r2, r3
 80002d2:	4770      	bx	lr

080002d4 <strlen>:
 80002d4:	4603      	mov	r3, r0
 80002d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002da:	2a00      	cmp	r2, #0
 80002dc:	d1fb      	bne.n	80002d6 <strlen+0x2>
 80002de:	1a18      	subs	r0, r3, r0
 80002e0:	3801      	subs	r0, #1
 80002e2:	4770      	bx	lr

080002e4 <__aeabi_drsub>:
 80002e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e8:	e002      	b.n	80002f0 <__adddf3>
 80002ea:	bf00      	nop

080002ec <__aeabi_dsub>:
 80002ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002f0 <__adddf3>:
 80002f0:	b530      	push	{r4, r5, lr}
 80002f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002fa:	ea94 0f05 	teq	r4, r5
 80002fe:	bf08      	it	eq
 8000300:	ea90 0f02 	teqeq	r0, r2
 8000304:	bf1f      	itttt	ne
 8000306:	ea54 0c00 	orrsne.w	ip, r4, r0
 800030a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000312:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000316:	f000 80e2 	beq.w	80004de <__adddf3+0x1ee>
 800031a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000322:	bfb8      	it	lt
 8000324:	426d      	neglt	r5, r5
 8000326:	dd0c      	ble.n	8000342 <__adddf3+0x52>
 8000328:	442c      	add	r4, r5
 800032a:	ea80 0202 	eor.w	r2, r0, r2
 800032e:	ea81 0303 	eor.w	r3, r1, r3
 8000332:	ea82 0000 	eor.w	r0, r2, r0
 8000336:	ea83 0101 	eor.w	r1, r3, r1
 800033a:	ea80 0202 	eor.w	r2, r0, r2
 800033e:	ea81 0303 	eor.w	r3, r1, r3
 8000342:	2d36      	cmp	r5, #54	; 0x36
 8000344:	bf88      	it	hi
 8000346:	bd30      	pophi	{r4, r5, pc}
 8000348:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800034c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000350:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000354:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x70>
 800035a:	4240      	negs	r0, r0
 800035c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000360:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000364:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000368:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800036c:	d002      	beq.n	8000374 <__adddf3+0x84>
 800036e:	4252      	negs	r2, r2
 8000370:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000374:	ea94 0f05 	teq	r4, r5
 8000378:	f000 80a7 	beq.w	80004ca <__adddf3+0x1da>
 800037c:	f1a4 0401 	sub.w	r4, r4, #1
 8000380:	f1d5 0e20 	rsbs	lr, r5, #32
 8000384:	db0d      	blt.n	80003a2 <__adddf3+0xb2>
 8000386:	fa02 fc0e 	lsl.w	ip, r2, lr
 800038a:	fa22 f205 	lsr.w	r2, r2, r5
 800038e:	1880      	adds	r0, r0, r2
 8000390:	f141 0100 	adc.w	r1, r1, #0
 8000394:	fa03 f20e 	lsl.w	r2, r3, lr
 8000398:	1880      	adds	r0, r0, r2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	4159      	adcs	r1, r3
 80003a0:	e00e      	b.n	80003c0 <__adddf3+0xd0>
 80003a2:	f1a5 0520 	sub.w	r5, r5, #32
 80003a6:	f10e 0e20 	add.w	lr, lr, #32
 80003aa:	2a01      	cmp	r2, #1
 80003ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003b0:	bf28      	it	cs
 80003b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b6:	fa43 f305 	asr.w	r3, r3, r5
 80003ba:	18c0      	adds	r0, r0, r3
 80003bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c4:	d507      	bpl.n	80003d6 <__adddf3+0xe6>
 80003c6:	f04f 0e00 	mov.w	lr, #0
 80003ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003da:	d31b      	bcc.n	8000414 <__adddf3+0x124>
 80003dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003e0:	d30c      	bcc.n	80003fc <__adddf3+0x10c>
 80003e2:	0849      	lsrs	r1, r1, #1
 80003e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003ec:	f104 0401 	add.w	r4, r4, #1
 80003f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f8:	f080 809a 	bcs.w	8000530 <__adddf3+0x240>
 80003fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000400:	bf08      	it	eq
 8000402:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000406:	f150 0000 	adcs.w	r0, r0, #0
 800040a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040e:	ea41 0105 	orr.w	r1, r1, r5
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000418:	4140      	adcs	r0, r0
 800041a:	eb41 0101 	adc.w	r1, r1, r1
 800041e:	3c01      	subs	r4, #1
 8000420:	bf28      	it	cs
 8000422:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000426:	d2e9      	bcs.n	80003fc <__adddf3+0x10c>
 8000428:	f091 0f00 	teq	r1, #0
 800042c:	bf04      	itt	eq
 800042e:	4601      	moveq	r1, r0
 8000430:	2000      	moveq	r0, #0
 8000432:	fab1 f381 	clz	r3, r1
 8000436:	bf08      	it	eq
 8000438:	3320      	addeq	r3, #32
 800043a:	f1a3 030b 	sub.w	r3, r3, #11
 800043e:	f1b3 0220 	subs.w	r2, r3, #32
 8000442:	da0c      	bge.n	800045e <__adddf3+0x16e>
 8000444:	320c      	adds	r2, #12
 8000446:	dd08      	ble.n	800045a <__adddf3+0x16a>
 8000448:	f102 0c14 	add.w	ip, r2, #20
 800044c:	f1c2 020c 	rsb	r2, r2, #12
 8000450:	fa01 f00c 	lsl.w	r0, r1, ip
 8000454:	fa21 f102 	lsr.w	r1, r1, r2
 8000458:	e00c      	b.n	8000474 <__adddf3+0x184>
 800045a:	f102 0214 	add.w	r2, r2, #20
 800045e:	bfd8      	it	le
 8000460:	f1c2 0c20 	rsble	ip, r2, #32
 8000464:	fa01 f102 	lsl.w	r1, r1, r2
 8000468:	fa20 fc0c 	lsr.w	ip, r0, ip
 800046c:	bfdc      	itt	le
 800046e:	ea41 010c 	orrle.w	r1, r1, ip
 8000472:	4090      	lslle	r0, r2
 8000474:	1ae4      	subs	r4, r4, r3
 8000476:	bfa2      	ittt	ge
 8000478:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800047c:	4329      	orrge	r1, r5
 800047e:	bd30      	popge	{r4, r5, pc}
 8000480:	ea6f 0404 	mvn.w	r4, r4
 8000484:	3c1f      	subs	r4, #31
 8000486:	da1c      	bge.n	80004c2 <__adddf3+0x1d2>
 8000488:	340c      	adds	r4, #12
 800048a:	dc0e      	bgt.n	80004aa <__adddf3+0x1ba>
 800048c:	f104 0414 	add.w	r4, r4, #20
 8000490:	f1c4 0220 	rsb	r2, r4, #32
 8000494:	fa20 f004 	lsr.w	r0, r0, r4
 8000498:	fa01 f302 	lsl.w	r3, r1, r2
 800049c:	ea40 0003 	orr.w	r0, r0, r3
 80004a0:	fa21 f304 	lsr.w	r3, r1, r4
 80004a4:	ea45 0103 	orr.w	r1, r5, r3
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	f1c4 040c 	rsb	r4, r4, #12
 80004ae:	f1c4 0220 	rsb	r2, r4, #32
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 f304 	lsl.w	r3, r1, r4
 80004ba:	ea40 0003 	orr.w	r0, r0, r3
 80004be:	4629      	mov	r1, r5
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	fa21 f004 	lsr.w	r0, r1, r4
 80004c6:	4629      	mov	r1, r5
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	f094 0f00 	teq	r4, #0
 80004ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004d2:	bf06      	itte	eq
 80004d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d8:	3401      	addeq	r4, #1
 80004da:	3d01      	subne	r5, #1
 80004dc:	e74e      	b.n	800037c <__adddf3+0x8c>
 80004de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e2:	bf18      	it	ne
 80004e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e8:	d029      	beq.n	800053e <__adddf3+0x24e>
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	d005      	beq.n	8000502 <__adddf3+0x212>
 80004f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004fa:	bf04      	itt	eq
 80004fc:	4619      	moveq	r1, r3
 80004fe:	4610      	moveq	r0, r2
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	ea91 0f03 	teq	r1, r3
 8000506:	bf1e      	ittt	ne
 8000508:	2100      	movne	r1, #0
 800050a:	2000      	movne	r0, #0
 800050c:	bd30      	popne	{r4, r5, pc}
 800050e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000512:	d105      	bne.n	8000520 <__adddf3+0x230>
 8000514:	0040      	lsls	r0, r0, #1
 8000516:	4149      	adcs	r1, r1
 8000518:	bf28      	it	cs
 800051a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051e:	bd30      	pop	{r4, r5, pc}
 8000520:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000524:	bf3c      	itt	cc
 8000526:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800052a:	bd30      	popcc	{r4, r5, pc}
 800052c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000530:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000534:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000538:	f04f 0000 	mov.w	r0, #0
 800053c:	bd30      	pop	{r4, r5, pc}
 800053e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000542:	bf1a      	itte	ne
 8000544:	4619      	movne	r1, r3
 8000546:	4610      	movne	r0, r2
 8000548:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800054c:	bf1c      	itt	ne
 800054e:	460b      	movne	r3, r1
 8000550:	4602      	movne	r2, r0
 8000552:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000556:	bf06      	itte	eq
 8000558:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800055c:	ea91 0f03 	teqeq	r1, r3
 8000560:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	bf00      	nop

08000568 <__aeabi_ui2d>:
 8000568:	f090 0f00 	teq	r0, #0
 800056c:	bf04      	itt	eq
 800056e:	2100      	moveq	r1, #0
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000578:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800057c:	f04f 0500 	mov.w	r5, #0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e750      	b.n	8000428 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_i2d>:
 8000588:	f090 0f00 	teq	r0, #0
 800058c:	bf04      	itt	eq
 800058e:	2100      	moveq	r1, #0
 8000590:	4770      	bxeq	lr
 8000592:	b530      	push	{r4, r5, lr}
 8000594:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000598:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800059c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005a0:	bf48      	it	mi
 80005a2:	4240      	negmi	r0, r0
 80005a4:	f04f 0100 	mov.w	r1, #0
 80005a8:	e73e      	b.n	8000428 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_f2d>:
 80005ac:	0042      	lsls	r2, r0, #1
 80005ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005ba:	bf1f      	itttt	ne
 80005bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c8:	4770      	bxne	lr
 80005ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ce:	bf08      	it	eq
 80005d0:	4770      	bxeq	lr
 80005d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d6:	bf04      	itt	eq
 80005d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005dc:	4770      	bxeq	lr
 80005de:	b530      	push	{r4, r5, lr}
 80005e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005ec:	e71c      	b.n	8000428 <__adddf3+0x138>
 80005ee:	bf00      	nop

080005f0 <__aeabi_ul2d>:
 80005f0:	ea50 0201 	orrs.w	r2, r0, r1
 80005f4:	bf08      	it	eq
 80005f6:	4770      	bxeq	lr
 80005f8:	b530      	push	{r4, r5, lr}
 80005fa:	f04f 0500 	mov.w	r5, #0
 80005fe:	e00a      	b.n	8000616 <__aeabi_l2d+0x16>

08000600 <__aeabi_l2d>:
 8000600:	ea50 0201 	orrs.w	r2, r0, r1
 8000604:	bf08      	it	eq
 8000606:	4770      	bxeq	lr
 8000608:	b530      	push	{r4, r5, lr}
 800060a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060e:	d502      	bpl.n	8000616 <__aeabi_l2d+0x16>
 8000610:	4240      	negs	r0, r0
 8000612:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000616:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800061a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000622:	f43f aed8 	beq.w	80003d6 <__adddf3+0xe6>
 8000626:	f04f 0203 	mov.w	r2, #3
 800062a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062e:	bf18      	it	ne
 8000630:	3203      	addne	r2, #3
 8000632:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000636:	bf18      	it	ne
 8000638:	3203      	addne	r2, #3
 800063a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063e:	f1c2 0320 	rsb	r3, r2, #32
 8000642:	fa00 fc03 	lsl.w	ip, r0, r3
 8000646:	fa20 f002 	lsr.w	r0, r0, r2
 800064a:	fa01 fe03 	lsl.w	lr, r1, r3
 800064e:	ea40 000e 	orr.w	r0, r0, lr
 8000652:	fa21 f102 	lsr.w	r1, r1, r2
 8000656:	4414      	add	r4, r2
 8000658:	e6bd      	b.n	80003d6 <__adddf3+0xe6>
 800065a:	bf00      	nop

0800065c <__aeabi_dmul>:
 800065c:	b570      	push	{r4, r5, r6, lr}
 800065e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000662:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000666:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800066a:	bf1d      	ittte	ne
 800066c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000670:	ea94 0f0c 	teqne	r4, ip
 8000674:	ea95 0f0c 	teqne	r5, ip
 8000678:	f000 f8de 	bleq	8000838 <__aeabi_dmul+0x1dc>
 800067c:	442c      	add	r4, r5
 800067e:	ea81 0603 	eor.w	r6, r1, r3
 8000682:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000686:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800068a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068e:	bf18      	it	ne
 8000690:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000694:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000698:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800069c:	d038      	beq.n	8000710 <__aeabi_dmul+0xb4>
 800069e:	fba0 ce02 	umull	ip, lr, r0, r2
 80006a2:	f04f 0500 	mov.w	r5, #0
 80006a6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006aa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006ae:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006b2:	f04f 0600 	mov.w	r6, #0
 80006b6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006ba:	f09c 0f00 	teq	ip, #0
 80006be:	bf18      	it	ne
 80006c0:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006cc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006d0:	d204      	bcs.n	80006dc <__aeabi_dmul+0x80>
 80006d2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d6:	416d      	adcs	r5, r5
 80006d8:	eb46 0606 	adc.w	r6, r6, r6
 80006dc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006e0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006ec:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006f0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f4:	bf88      	it	hi
 80006f6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006fa:	d81e      	bhi.n	800073a <__aeabi_dmul+0xde>
 80006fc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000700:	bf08      	it	eq
 8000702:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000706:	f150 0000 	adcs.w	r0, r0, #0
 800070a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070e:	bd70      	pop	{r4, r5, r6, pc}
 8000710:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000714:	ea46 0101 	orr.w	r1, r6, r1
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	ea81 0103 	eor.w	r1, r1, r3
 8000720:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000724:	bfc2      	ittt	gt
 8000726:	ebd4 050c 	rsbsgt	r5, r4, ip
 800072a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072e:	bd70      	popgt	{r4, r5, r6, pc}
 8000730:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000734:	f04f 0e00 	mov.w	lr, #0
 8000738:	3c01      	subs	r4, #1
 800073a:	f300 80ab 	bgt.w	8000894 <__aeabi_dmul+0x238>
 800073e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000742:	bfde      	ittt	le
 8000744:	2000      	movle	r0, #0
 8000746:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800074a:	bd70      	pople	{r4, r5, r6, pc}
 800074c:	f1c4 0400 	rsb	r4, r4, #0
 8000750:	3c20      	subs	r4, #32
 8000752:	da35      	bge.n	80007c0 <__aeabi_dmul+0x164>
 8000754:	340c      	adds	r4, #12
 8000756:	dc1b      	bgt.n	8000790 <__aeabi_dmul+0x134>
 8000758:	f104 0414 	add.w	r4, r4, #20
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f305 	lsl.w	r3, r0, r5
 8000764:	fa20 f004 	lsr.w	r0, r0, r4
 8000768:	fa01 f205 	lsl.w	r2, r1, r5
 800076c:	ea40 0002 	orr.w	r0, r0, r2
 8000770:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000774:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	fa21 f604 	lsr.w	r6, r1, r4
 8000780:	eb42 0106 	adc.w	r1, r2, r6
 8000784:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000788:	bf08      	it	eq
 800078a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078e:	bd70      	pop	{r4, r5, r6, pc}
 8000790:	f1c4 040c 	rsb	r4, r4, #12
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f304 	lsl.w	r3, r0, r4
 800079c:	fa20 f005 	lsr.w	r0, r0, r5
 80007a0:	fa01 f204 	lsl.w	r2, r1, r4
 80007a4:	ea40 0002 	orr.w	r0, r0, r2
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007b0:	f141 0100 	adc.w	r1, r1, #0
 80007b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b8:	bf08      	it	eq
 80007ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007be:	bd70      	pop	{r4, r5, r6, pc}
 80007c0:	f1c4 0520 	rsb	r5, r4, #32
 80007c4:	fa00 f205 	lsl.w	r2, r0, r5
 80007c8:	ea4e 0e02 	orr.w	lr, lr, r2
 80007cc:	fa20 f304 	lsr.w	r3, r0, r4
 80007d0:	fa01 f205 	lsl.w	r2, r1, r5
 80007d4:	ea43 0302 	orr.w	r3, r3, r2
 80007d8:	fa21 f004 	lsr.w	r0, r1, r4
 80007dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e0:	fa21 f204 	lsr.w	r2, r1, r4
 80007e4:	ea20 0002 	bic.w	r0, r0, r2
 80007e8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007f0:	bf08      	it	eq
 80007f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f6:	bd70      	pop	{r4, r5, r6, pc}
 80007f8:	f094 0f00 	teq	r4, #0
 80007fc:	d10f      	bne.n	800081e <__aeabi_dmul+0x1c2>
 80007fe:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000802:	0040      	lsls	r0, r0, #1
 8000804:	eb41 0101 	adc.w	r1, r1, r1
 8000808:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800080c:	bf08      	it	eq
 800080e:	3c01      	subeq	r4, #1
 8000810:	d0f7      	beq.n	8000802 <__aeabi_dmul+0x1a6>
 8000812:	ea41 0106 	orr.w	r1, r1, r6
 8000816:	f095 0f00 	teq	r5, #0
 800081a:	bf18      	it	ne
 800081c:	4770      	bxne	lr
 800081e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000822:	0052      	lsls	r2, r2, #1
 8000824:	eb43 0303 	adc.w	r3, r3, r3
 8000828:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800082c:	bf08      	it	eq
 800082e:	3d01      	subeq	r5, #1
 8000830:	d0f7      	beq.n	8000822 <__aeabi_dmul+0x1c6>
 8000832:	ea43 0306 	orr.w	r3, r3, r6
 8000836:	4770      	bx	lr
 8000838:	ea94 0f0c 	teq	r4, ip
 800083c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000840:	bf18      	it	ne
 8000842:	ea95 0f0c 	teqne	r5, ip
 8000846:	d00c      	beq.n	8000862 <__aeabi_dmul+0x206>
 8000848:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084c:	bf18      	it	ne
 800084e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000852:	d1d1      	bne.n	80007f8 <__aeabi_dmul+0x19c>
 8000854:	ea81 0103 	eor.w	r1, r1, r3
 8000858:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000866:	bf06      	itte	eq
 8000868:	4610      	moveq	r0, r2
 800086a:	4619      	moveq	r1, r3
 800086c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000870:	d019      	beq.n	80008a6 <__aeabi_dmul+0x24a>
 8000872:	ea94 0f0c 	teq	r4, ip
 8000876:	d102      	bne.n	800087e <__aeabi_dmul+0x222>
 8000878:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800087c:	d113      	bne.n	80008a6 <__aeabi_dmul+0x24a>
 800087e:	ea95 0f0c 	teq	r5, ip
 8000882:	d105      	bne.n	8000890 <__aeabi_dmul+0x234>
 8000884:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000888:	bf1c      	itt	ne
 800088a:	4610      	movne	r0, r2
 800088c:	4619      	movne	r1, r3
 800088e:	d10a      	bne.n	80008a6 <__aeabi_dmul+0x24a>
 8000890:	ea81 0103 	eor.w	r1, r1, r3
 8000894:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000898:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800089c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008a0:	f04f 0000 	mov.w	r0, #0
 80008a4:	bd70      	pop	{r4, r5, r6, pc}
 80008a6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008aa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008ae:	bd70      	pop	{r4, r5, r6, pc}

080008b0 <__aeabi_ddiv>:
 80008b0:	b570      	push	{r4, r5, r6, lr}
 80008b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008be:	bf1d      	ittte	ne
 80008c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c4:	ea94 0f0c 	teqne	r4, ip
 80008c8:	ea95 0f0c 	teqne	r5, ip
 80008cc:	f000 f8a7 	bleq	8000a1e <__aeabi_ddiv+0x16e>
 80008d0:	eba4 0405 	sub.w	r4, r4, r5
 80008d4:	ea81 0e03 	eor.w	lr, r1, r3
 80008d8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008e0:	f000 8088 	beq.w	80009f4 <__aeabi_ddiv+0x144>
 80008e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008ec:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008f0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008fc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000900:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000904:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000908:	429d      	cmp	r5, r3
 800090a:	bf08      	it	eq
 800090c:	4296      	cmpeq	r6, r2
 800090e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000912:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000916:	d202      	bcs.n	800091e <__aeabi_ddiv+0x6e>
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	1ab6      	subs	r6, r6, r2
 8000920:	eb65 0503 	sbc.w	r5, r5, r3
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000932:	ebb6 0e02 	subs.w	lr, r6, r2
 8000936:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093a:	bf22      	ittt	cs
 800093c:	1ab6      	subcs	r6, r6, r2
 800093e:	4675      	movcs	r5, lr
 8000940:	ea40 000c 	orrcs.w	r0, r0, ip
 8000944:	085b      	lsrs	r3, r3, #1
 8000946:	ea4f 0232 	mov.w	r2, r2, rrx
 800094a:	ebb6 0e02 	subs.w	lr, r6, r2
 800094e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000952:	bf22      	ittt	cs
 8000954:	1ab6      	subcs	r6, r6, r2
 8000956:	4675      	movcs	r5, lr
 8000958:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800095c:	085b      	lsrs	r3, r3, #1
 800095e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000962:	ebb6 0e02 	subs.w	lr, r6, r2
 8000966:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096a:	bf22      	ittt	cs
 800096c:	1ab6      	subcs	r6, r6, r2
 800096e:	4675      	movcs	r5, lr
 8000970:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000974:	085b      	lsrs	r3, r3, #1
 8000976:	ea4f 0232 	mov.w	r2, r2, rrx
 800097a:	ebb6 0e02 	subs.w	lr, r6, r2
 800097e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000982:	bf22      	ittt	cs
 8000984:	1ab6      	subcs	r6, r6, r2
 8000986:	4675      	movcs	r5, lr
 8000988:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800098c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000990:	d018      	beq.n	80009c4 <__aeabi_ddiv+0x114>
 8000992:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000996:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800099a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009a2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009aa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ae:	d1c0      	bne.n	8000932 <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	d10b      	bne.n	80009ce <__aeabi_ddiv+0x11e>
 80009b6:	ea41 0100 	orr.w	r1, r1, r0
 80009ba:	f04f 0000 	mov.w	r0, #0
 80009be:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009c2:	e7b6      	b.n	8000932 <__aeabi_ddiv+0x82>
 80009c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c8:	bf04      	itt	eq
 80009ca:	4301      	orreq	r1, r0
 80009cc:	2000      	moveq	r0, #0
 80009ce:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009d2:	bf88      	it	hi
 80009d4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d8:	f63f aeaf 	bhi.w	800073a <__aeabi_dmul+0xde>
 80009dc:	ebb5 0c03 	subs.w	ip, r5, r3
 80009e0:	bf04      	itt	eq
 80009e2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ea:	f150 0000 	adcs.w	r0, r0, #0
 80009ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009f2:	bd70      	pop	{r4, r5, r6, pc}
 80009f4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009fc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a00:	bfc2      	ittt	gt
 8000a02:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a06:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a0a:	bd70      	popgt	{r4, r5, r6, pc}
 8000a0c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a10:	f04f 0e00 	mov.w	lr, #0
 8000a14:	3c01      	subs	r4, #1
 8000a16:	e690      	b.n	800073a <__aeabi_dmul+0xde>
 8000a18:	ea45 0e06 	orr.w	lr, r5, r6
 8000a1c:	e68d      	b.n	800073a <__aeabi_dmul+0xde>
 8000a1e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a22:	ea94 0f0c 	teq	r4, ip
 8000a26:	bf08      	it	eq
 8000a28:	ea95 0f0c 	teqeq	r5, ip
 8000a2c:	f43f af3b 	beq.w	80008a6 <__aeabi_dmul+0x24a>
 8000a30:	ea94 0f0c 	teq	r4, ip
 8000a34:	d10a      	bne.n	8000a4c <__aeabi_ddiv+0x19c>
 8000a36:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a3a:	f47f af34 	bne.w	80008a6 <__aeabi_dmul+0x24a>
 8000a3e:	ea95 0f0c 	teq	r5, ip
 8000a42:	f47f af25 	bne.w	8000890 <__aeabi_dmul+0x234>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e72c      	b.n	80008a6 <__aeabi_dmul+0x24a>
 8000a4c:	ea95 0f0c 	teq	r5, ip
 8000a50:	d106      	bne.n	8000a60 <__aeabi_ddiv+0x1b0>
 8000a52:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a56:	f43f aefd 	beq.w	8000854 <__aeabi_dmul+0x1f8>
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	e722      	b.n	80008a6 <__aeabi_dmul+0x24a>
 8000a60:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a64:	bf18      	it	ne
 8000a66:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a6a:	f47f aec5 	bne.w	80007f8 <__aeabi_dmul+0x19c>
 8000a6e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a72:	f47f af0d 	bne.w	8000890 <__aeabi_dmul+0x234>
 8000a76:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a7a:	f47f aeeb 	bne.w	8000854 <__aeabi_dmul+0x1f8>
 8000a7e:	e712      	b.n	80008a6 <__aeabi_dmul+0x24a>

08000a80 <__gedf2>:
 8000a80:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a84:	e006      	b.n	8000a94 <__cmpdf2+0x4>
 8000a86:	bf00      	nop

08000a88 <__ledf2>:
 8000a88:	f04f 0c01 	mov.w	ip, #1
 8000a8c:	e002      	b.n	8000a94 <__cmpdf2+0x4>
 8000a8e:	bf00      	nop

08000a90 <__cmpdf2>:
 8000a90:	f04f 0c01 	mov.w	ip, #1
 8000a94:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	bf18      	it	ne
 8000aa6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aaa:	d01b      	beq.n	8000ae4 <__cmpdf2+0x54>
 8000aac:	b001      	add	sp, #4
 8000aae:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000ab2:	bf0c      	ite	eq
 8000ab4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab8:	ea91 0f03 	teqne	r1, r3
 8000abc:	bf02      	ittt	eq
 8000abe:	ea90 0f02 	teqeq	r0, r2
 8000ac2:	2000      	moveq	r0, #0
 8000ac4:	4770      	bxeq	lr
 8000ac6:	f110 0f00 	cmn.w	r0, #0
 8000aca:	ea91 0f03 	teq	r1, r3
 8000ace:	bf58      	it	pl
 8000ad0:	4299      	cmppl	r1, r3
 8000ad2:	bf08      	it	eq
 8000ad4:	4290      	cmpeq	r0, r2
 8000ad6:	bf2c      	ite	cs
 8000ad8:	17d8      	asrcs	r0, r3, #31
 8000ada:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ade:	f040 0001 	orr.w	r0, r0, #1
 8000ae2:	4770      	bx	lr
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__cmpdf2+0x64>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d107      	bne.n	8000b04 <__cmpdf2+0x74>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d1d6      	bne.n	8000aac <__cmpdf2+0x1c>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d0d3      	beq.n	8000aac <__cmpdf2+0x1c>
 8000b04:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <__aeabi_cdrcmple>:
 8000b0c:	4684      	mov	ip, r0
 8000b0e:	4610      	mov	r0, r2
 8000b10:	4662      	mov	r2, ip
 8000b12:	468c      	mov	ip, r1
 8000b14:	4619      	mov	r1, r3
 8000b16:	4663      	mov	r3, ip
 8000b18:	e000      	b.n	8000b1c <__aeabi_cdcmpeq>
 8000b1a:	bf00      	nop

08000b1c <__aeabi_cdcmpeq>:
 8000b1c:	b501      	push	{r0, lr}
 8000b1e:	f7ff ffb7 	bl	8000a90 <__cmpdf2>
 8000b22:	2800      	cmp	r0, #0
 8000b24:	bf48      	it	mi
 8000b26:	f110 0f00 	cmnmi.w	r0, #0
 8000b2a:	bd01      	pop	{r0, pc}

08000b2c <__aeabi_dcmpeq>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff fff4 	bl	8000b1c <__aeabi_cdcmpeq>
 8000b34:	bf0c      	ite	eq
 8000b36:	2001      	moveq	r0, #1
 8000b38:	2000      	movne	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmplt>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffea 	bl	8000b1c <__aeabi_cdcmpeq>
 8000b48:	bf34      	ite	cc
 8000b4a:	2001      	movcc	r0, #1
 8000b4c:	2000      	movcs	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmple>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffe0 	bl	8000b1c <__aeabi_cdcmpeq>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpge>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffce 	bl	8000b0c <__aeabi_cdrcmple>
 8000b70:	bf94      	ite	ls
 8000b72:	2001      	movls	r0, #1
 8000b74:	2000      	movhi	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpgt>:
 8000b7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b80:	f7ff ffc4 	bl	8000b0c <__aeabi_cdrcmple>
 8000b84:	bf34      	ite	cc
 8000b86:	2001      	movcc	r0, #1
 8000b88:	2000      	movcs	r0, #0
 8000b8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8e:	bf00      	nop

08000b90 <__aeabi_d2iz>:
 8000b90:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b94:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b98:	d215      	bcs.n	8000bc6 <__aeabi_d2iz+0x36>
 8000b9a:	d511      	bpl.n	8000bc0 <__aeabi_d2iz+0x30>
 8000b9c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba4:	d912      	bls.n	8000bcc <__aeabi_d2iz+0x3c>
 8000ba6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000baa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bae:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bb2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bb6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bba:	bf18      	it	ne
 8000bbc:	4240      	negne	r0, r0
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bca:	d105      	bne.n	8000bd8 <__aeabi_d2iz+0x48>
 8000bcc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd0:	bf08      	it	eq
 8000bd2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <__aeabi_d2uiz>:
 8000be0:	004a      	lsls	r2, r1, #1
 8000be2:	d211      	bcs.n	8000c08 <__aeabi_d2uiz+0x28>
 8000be4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be8:	d211      	bcs.n	8000c0e <__aeabi_d2uiz+0x2e>
 8000bea:	d50d      	bpl.n	8000c08 <__aeabi_d2uiz+0x28>
 8000bec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bf4:	d40e      	bmi.n	8000c14 <__aeabi_d2uiz+0x34>
 8000bf6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bfe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c02:	fa23 f002 	lsr.w	r0, r3, r2
 8000c06:	4770      	bx	lr
 8000c08:	f04f 0000 	mov.w	r0, #0
 8000c0c:	4770      	bx	lr
 8000c0e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c12:	d102      	bne.n	8000c1a <__aeabi_d2uiz+0x3a>
 8000c14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c18:	4770      	bx	lr
 8000c1a:	f04f 0000 	mov.w	r0, #0
 8000c1e:	4770      	bx	lr

08000c20 <__aeabi_d2f>:
 8000c20:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c24:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c28:	bf24      	itt	cs
 8000c2a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c2e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c32:	d90d      	bls.n	8000c50 <__aeabi_d2f+0x30>
 8000c34:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c38:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c3c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c40:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c44:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c48:	bf08      	it	eq
 8000c4a:	f020 0001 	biceq.w	r0, r0, #1
 8000c4e:	4770      	bx	lr
 8000c50:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c54:	d121      	bne.n	8000c9a <__aeabi_d2f+0x7a>
 8000c56:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c5a:	bfbc      	itt	lt
 8000c5c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c60:	4770      	bxlt	lr
 8000c62:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c66:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c6a:	f1c2 0218 	rsb	r2, r2, #24
 8000c6e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c72:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c76:	fa20 f002 	lsr.w	r0, r0, r2
 8000c7a:	bf18      	it	ne
 8000c7c:	f040 0001 	orrne.w	r0, r0, #1
 8000c80:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c84:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c88:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c8c:	ea40 000c 	orr.w	r0, r0, ip
 8000c90:	fa23 f302 	lsr.w	r3, r3, r2
 8000c94:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c98:	e7cc      	b.n	8000c34 <__aeabi_d2f+0x14>
 8000c9a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c9e:	d107      	bne.n	8000cb0 <__aeabi_d2f+0x90>
 8000ca0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ca4:	bf1e      	ittt	ne
 8000ca6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000caa:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cae:	4770      	bxne	lr
 8000cb0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cb4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop

08000cc0 <__aeabi_uldivmod>:
 8000cc0:	b953      	cbnz	r3, 8000cd8 <__aeabi_uldivmod+0x18>
 8000cc2:	b94a      	cbnz	r2, 8000cd8 <__aeabi_uldivmod+0x18>
 8000cc4:	2900      	cmp	r1, #0
 8000cc6:	bf08      	it	eq
 8000cc8:	2800      	cmpeq	r0, #0
 8000cca:	bf1c      	itt	ne
 8000ccc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cd0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cd4:	f000 b9a4 	b.w	8001020 <__aeabi_idiv0>
 8000cd8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cdc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce0:	f000 f83c 	bl	8000d5c <__udivmoddi4>
 8000ce4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cec:	b004      	add	sp, #16
 8000cee:	4770      	bx	lr

08000cf0 <__aeabi_d2lz>:
 8000cf0:	b538      	push	{r3, r4, r5, lr}
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	4604      	mov	r4, r0
 8000cf8:	460d      	mov	r5, r1
 8000cfa:	f7ff ff21 	bl	8000b40 <__aeabi_dcmplt>
 8000cfe:	b928      	cbnz	r0, 8000d0c <__aeabi_d2lz+0x1c>
 8000d00:	4620      	mov	r0, r4
 8000d02:	4629      	mov	r1, r5
 8000d04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d08:	f000 b80a 	b.w	8000d20 <__aeabi_d2ulz>
 8000d0c:	4620      	mov	r0, r4
 8000d0e:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d12:	f000 f805 	bl	8000d20 <__aeabi_d2ulz>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	bd38      	pop	{r3, r4, r5, pc}
 8000d1e:	bf00      	nop

08000d20 <__aeabi_d2ulz>:
 8000d20:	b5d0      	push	{r4, r6, r7, lr}
 8000d22:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <__aeabi_d2ulz+0x34>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	4606      	mov	r6, r0
 8000d28:	460f      	mov	r7, r1
 8000d2a:	f7ff fc97 	bl	800065c <__aeabi_dmul>
 8000d2e:	f7ff ff57 	bl	8000be0 <__aeabi_d2uiz>
 8000d32:	4604      	mov	r4, r0
 8000d34:	f7ff fc18 	bl	8000568 <__aeabi_ui2d>
 8000d38:	4b07      	ldr	r3, [pc, #28]	; (8000d58 <__aeabi_d2ulz+0x38>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	f7ff fc8e 	bl	800065c <__aeabi_dmul>
 8000d40:	4602      	mov	r2, r0
 8000d42:	460b      	mov	r3, r1
 8000d44:	4630      	mov	r0, r6
 8000d46:	4639      	mov	r1, r7
 8000d48:	f7ff fad0 	bl	80002ec <__aeabi_dsub>
 8000d4c:	f7ff ff48 	bl	8000be0 <__aeabi_d2uiz>
 8000d50:	4621      	mov	r1, r4
 8000d52:	bdd0      	pop	{r4, r6, r7, pc}
 8000d54:	3df00000 	.word	0x3df00000
 8000d58:	41f00000 	.word	0x41f00000

08000d5c <__udivmoddi4>:
 8000d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d60:	9d08      	ldr	r5, [sp, #32]
 8000d62:	4604      	mov	r4, r0
 8000d64:	468c      	mov	ip, r1
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	f040 8083 	bne.w	8000e72 <__udivmoddi4+0x116>
 8000d6c:	428a      	cmp	r2, r1
 8000d6e:	4617      	mov	r7, r2
 8000d70:	d947      	bls.n	8000e02 <__udivmoddi4+0xa6>
 8000d72:	fab2 f282 	clz	r2, r2
 8000d76:	b142      	cbz	r2, 8000d8a <__udivmoddi4+0x2e>
 8000d78:	f1c2 0020 	rsb	r0, r2, #32
 8000d7c:	fa24 f000 	lsr.w	r0, r4, r0
 8000d80:	4091      	lsls	r1, r2
 8000d82:	4097      	lsls	r7, r2
 8000d84:	ea40 0c01 	orr.w	ip, r0, r1
 8000d88:	4094      	lsls	r4, r2
 8000d8a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d8e:	0c23      	lsrs	r3, r4, #16
 8000d90:	fbbc f6f8 	udiv	r6, ip, r8
 8000d94:	fa1f fe87 	uxth.w	lr, r7
 8000d98:	fb08 c116 	mls	r1, r8, r6, ip
 8000d9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da0:	fb06 f10e 	mul.w	r1, r6, lr
 8000da4:	4299      	cmp	r1, r3
 8000da6:	d909      	bls.n	8000dbc <__udivmoddi4+0x60>
 8000da8:	18fb      	adds	r3, r7, r3
 8000daa:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000dae:	f080 8119 	bcs.w	8000fe4 <__udivmoddi4+0x288>
 8000db2:	4299      	cmp	r1, r3
 8000db4:	f240 8116 	bls.w	8000fe4 <__udivmoddi4+0x288>
 8000db8:	3e02      	subs	r6, #2
 8000dba:	443b      	add	r3, r7
 8000dbc:	1a5b      	subs	r3, r3, r1
 8000dbe:	b2a4      	uxth	r4, r4
 8000dc0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc4:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dcc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd0:	45a6      	cmp	lr, r4
 8000dd2:	d909      	bls.n	8000de8 <__udivmoddi4+0x8c>
 8000dd4:	193c      	adds	r4, r7, r4
 8000dd6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dda:	f080 8105 	bcs.w	8000fe8 <__udivmoddi4+0x28c>
 8000dde:	45a6      	cmp	lr, r4
 8000de0:	f240 8102 	bls.w	8000fe8 <__udivmoddi4+0x28c>
 8000de4:	3802      	subs	r0, #2
 8000de6:	443c      	add	r4, r7
 8000de8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dec:	eba4 040e 	sub.w	r4, r4, lr
 8000df0:	2600      	movs	r6, #0
 8000df2:	b11d      	cbz	r5, 8000dfc <__udivmoddi4+0xa0>
 8000df4:	40d4      	lsrs	r4, r2
 8000df6:	2300      	movs	r3, #0
 8000df8:	e9c5 4300 	strd	r4, r3, [r5]
 8000dfc:	4631      	mov	r1, r6
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	b902      	cbnz	r2, 8000e06 <__udivmoddi4+0xaa>
 8000e04:	deff      	udf	#255	; 0xff
 8000e06:	fab2 f282 	clz	r2, r2
 8000e0a:	2a00      	cmp	r2, #0
 8000e0c:	d150      	bne.n	8000eb0 <__udivmoddi4+0x154>
 8000e0e:	1bcb      	subs	r3, r1, r7
 8000e10:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e14:	fa1f f887 	uxth.w	r8, r7
 8000e18:	2601      	movs	r6, #1
 8000e1a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e1e:	0c21      	lsrs	r1, r4, #16
 8000e20:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e28:	fb08 f30c 	mul.w	r3, r8, ip
 8000e2c:	428b      	cmp	r3, r1
 8000e2e:	d907      	bls.n	8000e40 <__udivmoddi4+0xe4>
 8000e30:	1879      	adds	r1, r7, r1
 8000e32:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0xe2>
 8000e38:	428b      	cmp	r3, r1
 8000e3a:	f200 80e9 	bhi.w	8001010 <__udivmoddi4+0x2b4>
 8000e3e:	4684      	mov	ip, r0
 8000e40:	1ac9      	subs	r1, r1, r3
 8000e42:	b2a3      	uxth	r3, r4
 8000e44:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e48:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e4c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e50:	fb08 f800 	mul.w	r8, r8, r0
 8000e54:	45a0      	cmp	r8, r4
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x10c>
 8000e58:	193c      	adds	r4, r7, r4
 8000e5a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x10a>
 8000e60:	45a0      	cmp	r8, r4
 8000e62:	f200 80d9 	bhi.w	8001018 <__udivmoddi4+0x2bc>
 8000e66:	4618      	mov	r0, r3
 8000e68:	eba4 0408 	sub.w	r4, r4, r8
 8000e6c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e70:	e7bf      	b.n	8000df2 <__udivmoddi4+0x96>
 8000e72:	428b      	cmp	r3, r1
 8000e74:	d909      	bls.n	8000e8a <__udivmoddi4+0x12e>
 8000e76:	2d00      	cmp	r5, #0
 8000e78:	f000 80b1 	beq.w	8000fde <__udivmoddi4+0x282>
 8000e7c:	2600      	movs	r6, #0
 8000e7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000e82:	4630      	mov	r0, r6
 8000e84:	4631      	mov	r1, r6
 8000e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e8a:	fab3 f683 	clz	r6, r3
 8000e8e:	2e00      	cmp	r6, #0
 8000e90:	d14a      	bne.n	8000f28 <__udivmoddi4+0x1cc>
 8000e92:	428b      	cmp	r3, r1
 8000e94:	d302      	bcc.n	8000e9c <__udivmoddi4+0x140>
 8000e96:	4282      	cmp	r2, r0
 8000e98:	f200 80b8 	bhi.w	800100c <__udivmoddi4+0x2b0>
 8000e9c:	1a84      	subs	r4, r0, r2
 8000e9e:	eb61 0103 	sbc.w	r1, r1, r3
 8000ea2:	2001      	movs	r0, #1
 8000ea4:	468c      	mov	ip, r1
 8000ea6:	2d00      	cmp	r5, #0
 8000ea8:	d0a8      	beq.n	8000dfc <__udivmoddi4+0xa0>
 8000eaa:	e9c5 4c00 	strd	r4, ip, [r5]
 8000eae:	e7a5      	b.n	8000dfc <__udivmoddi4+0xa0>
 8000eb0:	f1c2 0320 	rsb	r3, r2, #32
 8000eb4:	fa20 f603 	lsr.w	r6, r0, r3
 8000eb8:	4097      	lsls	r7, r2
 8000eba:	fa01 f002 	lsl.w	r0, r1, r2
 8000ebe:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ec2:	40d9      	lsrs	r1, r3
 8000ec4:	4330      	orrs	r0, r6
 8000ec6:	0c03      	lsrs	r3, r0, #16
 8000ec8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ecc:	fa1f f887 	uxth.w	r8, r7
 8000ed0:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ed4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ed8:	fb06 f108 	mul.w	r1, r6, r8
 8000edc:	4299      	cmp	r1, r3
 8000ede:	fa04 f402 	lsl.w	r4, r4, r2
 8000ee2:	d909      	bls.n	8000ef8 <__udivmoddi4+0x19c>
 8000ee4:	18fb      	adds	r3, r7, r3
 8000ee6:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000eea:	f080 808d 	bcs.w	8001008 <__udivmoddi4+0x2ac>
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	f240 808a 	bls.w	8001008 <__udivmoddi4+0x2ac>
 8000ef4:	3e02      	subs	r6, #2
 8000ef6:	443b      	add	r3, r7
 8000ef8:	1a5b      	subs	r3, r3, r1
 8000efa:	b281      	uxth	r1, r0
 8000efc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f00:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f04:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f08:	fb00 f308 	mul.w	r3, r0, r8
 8000f0c:	428b      	cmp	r3, r1
 8000f0e:	d907      	bls.n	8000f20 <__udivmoddi4+0x1c4>
 8000f10:	1879      	adds	r1, r7, r1
 8000f12:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f16:	d273      	bcs.n	8001000 <__udivmoddi4+0x2a4>
 8000f18:	428b      	cmp	r3, r1
 8000f1a:	d971      	bls.n	8001000 <__udivmoddi4+0x2a4>
 8000f1c:	3802      	subs	r0, #2
 8000f1e:	4439      	add	r1, r7
 8000f20:	1acb      	subs	r3, r1, r3
 8000f22:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f26:	e778      	b.n	8000e1a <__udivmoddi4+0xbe>
 8000f28:	f1c6 0c20 	rsb	ip, r6, #32
 8000f2c:	fa03 f406 	lsl.w	r4, r3, r6
 8000f30:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f34:	431c      	orrs	r4, r3
 8000f36:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000f3e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f42:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f46:	431f      	orrs	r7, r3
 8000f48:	0c3b      	lsrs	r3, r7, #16
 8000f4a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f4e:	fa1f f884 	uxth.w	r8, r4
 8000f52:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f56:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f5a:	fb09 fa08 	mul.w	sl, r9, r8
 8000f5e:	458a      	cmp	sl, r1
 8000f60:	fa02 f206 	lsl.w	r2, r2, r6
 8000f64:	fa00 f306 	lsl.w	r3, r0, r6
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x220>
 8000f6a:	1861      	adds	r1, r4, r1
 8000f6c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000f70:	d248      	bcs.n	8001004 <__udivmoddi4+0x2a8>
 8000f72:	458a      	cmp	sl, r1
 8000f74:	d946      	bls.n	8001004 <__udivmoddi4+0x2a8>
 8000f76:	f1a9 0902 	sub.w	r9, r9, #2
 8000f7a:	4421      	add	r1, r4
 8000f7c:	eba1 010a 	sub.w	r1, r1, sl
 8000f80:	b2bf      	uxth	r7, r7
 8000f82:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f86:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f8a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f8e:	fb00 f808 	mul.w	r8, r0, r8
 8000f92:	45b8      	cmp	r8, r7
 8000f94:	d907      	bls.n	8000fa6 <__udivmoddi4+0x24a>
 8000f96:	19e7      	adds	r7, r4, r7
 8000f98:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f9c:	d22e      	bcs.n	8000ffc <__udivmoddi4+0x2a0>
 8000f9e:	45b8      	cmp	r8, r7
 8000fa0:	d92c      	bls.n	8000ffc <__udivmoddi4+0x2a0>
 8000fa2:	3802      	subs	r0, #2
 8000fa4:	4427      	add	r7, r4
 8000fa6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000faa:	eba7 0708 	sub.w	r7, r7, r8
 8000fae:	fba0 8902 	umull	r8, r9, r0, r2
 8000fb2:	454f      	cmp	r7, r9
 8000fb4:	46c6      	mov	lr, r8
 8000fb6:	4649      	mov	r1, r9
 8000fb8:	d31a      	bcc.n	8000ff0 <__udivmoddi4+0x294>
 8000fba:	d017      	beq.n	8000fec <__udivmoddi4+0x290>
 8000fbc:	b15d      	cbz	r5, 8000fd6 <__udivmoddi4+0x27a>
 8000fbe:	ebb3 020e 	subs.w	r2, r3, lr
 8000fc2:	eb67 0701 	sbc.w	r7, r7, r1
 8000fc6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fca:	40f2      	lsrs	r2, r6
 8000fcc:	ea4c 0202 	orr.w	r2, ip, r2
 8000fd0:	40f7      	lsrs	r7, r6
 8000fd2:	e9c5 2700 	strd	r2, r7, [r5]
 8000fd6:	2600      	movs	r6, #0
 8000fd8:	4631      	mov	r1, r6
 8000fda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fde:	462e      	mov	r6, r5
 8000fe0:	4628      	mov	r0, r5
 8000fe2:	e70b      	b.n	8000dfc <__udivmoddi4+0xa0>
 8000fe4:	4606      	mov	r6, r0
 8000fe6:	e6e9      	b.n	8000dbc <__udivmoddi4+0x60>
 8000fe8:	4618      	mov	r0, r3
 8000fea:	e6fd      	b.n	8000de8 <__udivmoddi4+0x8c>
 8000fec:	4543      	cmp	r3, r8
 8000fee:	d2e5      	bcs.n	8000fbc <__udivmoddi4+0x260>
 8000ff0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ff4:	eb69 0104 	sbc.w	r1, r9, r4
 8000ff8:	3801      	subs	r0, #1
 8000ffa:	e7df      	b.n	8000fbc <__udivmoddi4+0x260>
 8000ffc:	4608      	mov	r0, r1
 8000ffe:	e7d2      	b.n	8000fa6 <__udivmoddi4+0x24a>
 8001000:	4660      	mov	r0, ip
 8001002:	e78d      	b.n	8000f20 <__udivmoddi4+0x1c4>
 8001004:	4681      	mov	r9, r0
 8001006:	e7b9      	b.n	8000f7c <__udivmoddi4+0x220>
 8001008:	4666      	mov	r6, ip
 800100a:	e775      	b.n	8000ef8 <__udivmoddi4+0x19c>
 800100c:	4630      	mov	r0, r6
 800100e:	e74a      	b.n	8000ea6 <__udivmoddi4+0x14a>
 8001010:	f1ac 0c02 	sub.w	ip, ip, #2
 8001014:	4439      	add	r1, r7
 8001016:	e713      	b.n	8000e40 <__udivmoddi4+0xe4>
 8001018:	3802      	subs	r0, #2
 800101a:	443c      	add	r4, r7
 800101c:	e724      	b.n	8000e68 <__udivmoddi4+0x10c>
 800101e:	bf00      	nop

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800102a:	463b      	mov	r3, r7
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001036:	4b19      	ldr	r3, [pc, #100]	; (800109c <MX_ADC1_Init+0x78>)
 8001038:	4a19      	ldr	r2, [pc, #100]	; (80010a0 <MX_ADC1_Init+0x7c>)
 800103a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800103c:	4b17      	ldr	r3, [pc, #92]	; (800109c <MX_ADC1_Init+0x78>)
 800103e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001042:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001044:	4b15      	ldr	r3, [pc, #84]	; (800109c <MX_ADC1_Init+0x78>)
 8001046:	2200      	movs	r2, #0
 8001048:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800104a:	4b14      	ldr	r3, [pc, #80]	; (800109c <MX_ADC1_Init+0x78>)
 800104c:	2201      	movs	r2, #1
 800104e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001050:	4b12      	ldr	r3, [pc, #72]	; (800109c <MX_ADC1_Init+0x78>)
 8001052:	2200      	movs	r2, #0
 8001054:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001056:	4b11      	ldr	r3, [pc, #68]	; (800109c <MX_ADC1_Init+0x78>)
 8001058:	2200      	movs	r2, #0
 800105a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800105e:	4b0f      	ldr	r3, [pc, #60]	; (800109c <MX_ADC1_Init+0x78>)
 8001060:	2200      	movs	r2, #0
 8001062:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001064:	4b0d      	ldr	r3, [pc, #52]	; (800109c <MX_ADC1_Init+0x78>)
 8001066:	4a0f      	ldr	r2, [pc, #60]	; (80010a4 <MX_ADC1_Init+0x80>)
 8001068:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800106a:	4b0c      	ldr	r3, [pc, #48]	; (800109c <MX_ADC1_Init+0x78>)
 800106c:	2200      	movs	r2, #0
 800106e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001070:	4b0a      	ldr	r3, [pc, #40]	; (800109c <MX_ADC1_Init+0x78>)
 8001072:	2202      	movs	r2, #2
 8001074:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001076:	4b09      	ldr	r3, [pc, #36]	; (800109c <MX_ADC1_Init+0x78>)
 8001078:	2200      	movs	r2, #0
 800107a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800107e:	4b07      	ldr	r3, [pc, #28]	; (800109c <MX_ADC1_Init+0x78>)
 8001080:	2201      	movs	r2, #1
 8001082:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001084:	4805      	ldr	r0, [pc, #20]	; (800109c <MX_ADC1_Init+0x78>)
 8001086:	f003 f915 	bl	80042b4 <HAL_ADC_Init>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001090:	f001 f998 	bl	80023c4 <Error_Handler>
//  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001094:	bf00      	nop
 8001096:	3710      	adds	r7, #16
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	20047c4c 	.word	0x20047c4c
 80010a0:	40012000 	.word	0x40012000
 80010a4:	0f000001 	.word	0x0f000001

080010a8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b08a      	sub	sp, #40	; 0x28
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b0:	f107 0314 	add.w	r3, r7, #20
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
 80010be:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a17      	ldr	r2, [pc, #92]	; (8001124 <HAL_ADC_MspInit+0x7c>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d127      	bne.n	800111a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	613b      	str	r3, [r7, #16]
 80010ce:	4b16      	ldr	r3, [pc, #88]	; (8001128 <HAL_ADC_MspInit+0x80>)
 80010d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d2:	4a15      	ldr	r2, [pc, #84]	; (8001128 <HAL_ADC_MspInit+0x80>)
 80010d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010d8:	6453      	str	r3, [r2, #68]	; 0x44
 80010da:	4b13      	ldr	r3, [pc, #76]	; (8001128 <HAL_ADC_MspInit+0x80>)
 80010dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010e2:	613b      	str	r3, [r7, #16]
 80010e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	60fb      	str	r3, [r7, #12]
 80010ea:	4b0f      	ldr	r3, [pc, #60]	; (8001128 <HAL_ADC_MspInit+0x80>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	4a0e      	ldr	r2, [pc, #56]	; (8001128 <HAL_ADC_MspInit+0x80>)
 80010f0:	f043 0301 	orr.w	r3, r3, #1
 80010f4:	6313      	str	r3, [r2, #48]	; 0x30
 80010f6:	4b0c      	ldr	r3, [pc, #48]	; (8001128 <HAL_ADC_MspInit+0x80>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = TOUCH_XR_Pin;
 8001102:	2304      	movs	r3, #4
 8001104:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001106:	2303      	movs	r3, #3
 8001108:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TOUCH_XR_GPIO_Port, &GPIO_InitStruct);
 800110e:	f107 0314 	add.w	r3, r7, #20
 8001112:	4619      	mov	r1, r3
 8001114:	4805      	ldr	r0, [pc, #20]	; (800112c <HAL_ADC_MspInit+0x84>)
 8001116:	f004 f99d 	bl	8005454 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800111a:	bf00      	nop
 800111c:	3728      	adds	r7, #40	; 0x28
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40012000 	.word	0x40012000
 8001128:	40023800 	.word	0x40023800
 800112c:	40020000 	.word	0x40020000

08001130 <tflite_micro_setup>:
	loop();
}

//=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~
void tflite_micro_setup()
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
	setup();
 8001134:	f011 fe42 	bl	8012dbc <setup>
}
 8001138:	bf00      	nop
 800113a:	bd80      	pop	{r7, pc}

0800113c <app_main_init>:
//=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~
void app_main_init()
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
	unsigned int l,ll = 0;
 8001142:	2300      	movs	r3, #0
 8001144:	603b      	str	r3, [r7, #0]

	//HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_SET);

	NT35510_Init();
 8001146:	f000 fc5d 	bl	8001a04 <NT35510_Init>

	LCD_ClearScreen(0xFFFFU);
 800114a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800114e:	f000 fb59 	bl	8001804 <LCD_ClearScreen>
	LCD_SetDirection(HORIZONTAL_RIGHT);
 8001152:	2003      	movs	r0, #3
 8001154:	f000 fafe 	bl	8001754 <LCD_SetDirection>

	//==~~==~~==~~==~~==~~==~~==~~==~~==~~==~~==~~==~~==~~==~~==~~==~~==~~==~~==~~==~~==~~==~~==~~
	// ~=~=~ FERI logo ~=~=~
	LCD_ClearScreen(0xFFFFU);
 8001158:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800115c:	f000 fb52 	bl	8001804 <LCD_ClearScreen>
	LCD_SetWindow(240, 184, 240 + FERI_LOGO_IMG_W -1, 184 + FERI_LOGO_IMG_H -1);
 8001160:	f44f 7393 	mov.w	r3, #294	; 0x126
 8001164:	f240 222f 	movw	r2, #559	; 0x22f
 8001168:	21b8      	movs	r1, #184	; 0xb8
 800116a:	20f0      	movs	r0, #240	; 0xf0
 800116c:	f000 fa8a 	bl	8001684 <LCD_SetWindow>
	for(l = 0; l < FERI_LOGO_IMG_SIZE; l+=2)
 8001170:	2300      	movs	r3, #0
 8001172:	607b      	str	r3, [r7, #4]
 8001174:	e013      	b.n	800119e <app_main_init+0x62>
	{
		FSMC_WR_DAT(((g_feri_logo_image[l] << 8) & 0xFF00U) | (g_feri_logo_image[l+1] & 0x00FFU));
 8001176:	4a20      	ldr	r2, [pc, #128]	; (80011f8 <app_main_init+0xbc>)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	4413      	add	r3, r2
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	b29b      	uxth	r3, r3
 8001180:	021b      	lsls	r3, r3, #8
 8001182:	b29a      	uxth	r2, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	3301      	adds	r3, #1
 8001188:	491b      	ldr	r1, [pc, #108]	; (80011f8 <app_main_init+0xbc>)
 800118a:	5ccb      	ldrb	r3, [r1, r3]
 800118c:	b29b      	uxth	r3, r3
 800118e:	4313      	orrs	r3, r2
 8001190:	b29b      	uxth	r3, r3
 8001192:	4618      	mov	r0, r3
 8001194:	f000 fa64 	bl	8001660 <FSMC_WR_DAT>
	for(l = 0; l < FERI_LOGO_IMG_SIZE; l+=2)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	3302      	adds	r3, #2
 800119c:	607b      	str	r3, [r7, #4]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a16      	ldr	r2, [pc, #88]	; (80011fc <app_main_init+0xc0>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d9e7      	bls.n	8001176 <app_main_init+0x3a>
	for(l = 0; l < FERI_LOGO_IMG_SIZE; l+=2)
	{
		FSMC_WR_DAT(((g_feri_logo_image[l] << 8) & 0xFF00U) | (g_feri_logo_image[l+1] & 0x00FFU));
	}
	HAL_Delay(1000);
*/	LCD_SetWindow(0, 0, 799, 479);
 80011a6:	f240 13df 	movw	r3, #479	; 0x1df
 80011aa:	f240 321f 	movw	r2, #799	; 0x31f
 80011ae:	2100      	movs	r1, #0
 80011b0:	2000      	movs	r0, #0
 80011b2:	f000 fa67 	bl	8001684 <LCD_SetWindow>
	LCD_ClearScreen(0x1CFCU);
 80011b6:	f641 40fc 	movw	r0, #7420	; 0x1cfc
 80011ba:	f000 fb23 	bl	8001804 <LCD_ClearScreen>
	OV7670_RST_HIGH;
	HAL_Delay(300);

	ov7670_initialization();*/

	ov7670_init1();
 80011be:	f001 faa3 	bl	8002708 <ov7670_init1>
	HAL_Delay(300);
 80011c2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80011c6:	f003 f851 	bl	800426c <HAL_Delay>

	TIM1->DIER |= TIM_DIER_TDE;
 80011ca:	4b0d      	ldr	r3, [pc, #52]	; (8001200 <app_main_init+0xc4>)
 80011cc:	68db      	ldr	r3, [r3, #12]
 80011ce:	4a0c      	ldr	r2, [pc, #48]	; (8001200 <app_main_init+0xc4>)
 80011d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011d4:	60d3      	str	r3, [r2, #12]
	HAL_TIM_Base_Start(&htim1);
 80011d6:	480b      	ldr	r0, [pc, #44]	; (8001204 <app_main_init+0xc8>)
 80011d8:	f007 fe10 	bl	8008dfc <HAL_TIM_Base_Start>

	HAL_NVIC_SetPriority(OV7670_VSYNC_EXTI_IRQn, 0, 0);
 80011dc:	2200      	movs	r2, #0
 80011de:	2100      	movs	r1, #0
 80011e0:	2007      	movs	r0, #7
 80011e2:	f003 fd42 	bl	8004c6a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(OV7670_VSYNC_EXTI_IRQn);
 80011e6:	2007      	movs	r0, #7
 80011e8:	f003 fd5b 	bl	8004ca2 <HAL_NVIC_EnableIRQ>

	touch_init();
 80011ec:	f002 f892 	bl	8003314 <touch_init>

}
 80011f0:	bf00      	nop
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	0802e0ac 	.word	0x0802e0ac
 80011fc:	0001157f 	.word	0x0001157f
 8001200:	40010000 	.word	0x40010000
 8001204:	20047de0 	.word	0x20047de0

08001208 <app_main_loop>:



//=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~
void app_main_loop()
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b08e      	sub	sp, #56	; 0x38
 800120c:	af00      	add	r7, sp, #0
	uint8_t buff[15] = {0};
 800120e:	2300      	movs	r3, #0
 8001210:	607b      	str	r3, [r7, #4]
 8001212:	f107 0308 	add.w	r3, r7, #8
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	605a      	str	r2, [r3, #4]
 800121c:	f8c3 2007 	str.w	r2, [r3, #7]
	uint32_t milis = 0;
 8001220:	2300      	movs	r3, #0
 8001222:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t milis2 = 0;
 8001224:	2300      	movs	r3, #0
 8001226:	633b      	str	r3, [r7, #48]	; 0x30
	int i=0;
 8001228:	2300      	movs	r3, #0
 800122a:	62fb      	str	r3, [r7, #44]	; 0x2c
	int j,z = 0;
 800122c:	2300      	movs	r3, #0
 800122e:	627b      	str	r3, [r7, #36]	; 0x24
	int k = -2;
 8001230:	f06f 0301 	mvn.w	r3, #1
 8001234:	623b      	str	r3, [r7, #32]



	LCD_SetDirection(HORIZONTAL_RIGHT);
 8001236:	2003      	movs	r0, #3
 8001238:	f000 fa8c 	bl	8001754 <LCD_SetDirection>
	//LCD_SetWindow(20, 20, 340-1, 260-1); // 320 x 240
	tflite_micro_setup();
 800123c:	f7ff ff78 	bl	8001130 <tflite_micro_setup>
		else
			sprintf(buff, " ");
		sprintf(buff + strlen(buff),"%03d",abs(g_no_person_score));
		LCD_PrintStr(120, 320, 0xffff, 0x0000, buff, 5);
*/
		uart_tx_process();
 8001240:	f002 f900 	bl	8003444 <uart_tx_process>
		uart_rx_process();
 8001244:	f002 fa2a 	bl	800369c <uart_rx_process>
		touch_process();
 8001248:	f002 f884 	bl	8003354 <touch_process>
//				k = 0;
//
//			FSMC_WR_DAT(graysc);
//		}
		//*********************************************************************************************************************
		uint8_t hb = 0;
 800124c:	2300      	movs	r3, #0
 800124e:	77fb      	strb	r3, [r7, #31]
		uint8_t lb = 0;
 8001250:	2300      	movs	r3, #0
 8001252:	77bb      	strb	r3, [r7, #30]
		int a = 0;
 8001254:	2300      	movs	r3, #0
 8001256:	61bb      	str	r3, [r7, #24]

		LCD_SetWindow(20, 0, 20+320*2-1, 240*2-1); // 320 x 240
 8001258:	f240 13df 	movw	r3, #479	; 0x1df
 800125c:	f240 2293 	movw	r2, #659	; 0x293
 8001260:	2100      	movs	r1, #0
 8001262:	2014      	movs	r0, #20
 8001264:	f000 fa0e 	bl	8001684 <LCD_SetWindow>
		j=0;
 8001268:	2300      	movs	r3, #0
 800126a:	62bb      	str	r3, [r7, #40]	; 0x28
		for(i=0; i < QVGA_HEIGHT; i++)
 800126c:	2300      	movs	r3, #0
 800126e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001270:	e069      	b.n	8001346 <app_main_loop+0x13e>
		{
			for(j=j; j <= QVGA_WIDTH*2 + i*QVGA_WIDTH*2; j+=2)
			{
				FSMC_WR_DAT(((g_cam_buff[j] << 8) & 0xFF00U) | (g_cam_buff[j+1] & 0x00FFU));
 8001272:	4a67      	ldr	r2, [pc, #412]	; (8001410 <app_main_loop+0x208>)
 8001274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001276:	4413      	add	r3, r2
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	b29b      	uxth	r3, r3
 800127c:	021b      	lsls	r3, r3, #8
 800127e:	b29a      	uxth	r2, r3
 8001280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001282:	3301      	adds	r3, #1
 8001284:	4962      	ldr	r1, [pc, #392]	; (8001410 <app_main_loop+0x208>)
 8001286:	5ccb      	ldrb	r3, [r1, r3]
 8001288:	b29b      	uxth	r3, r3
 800128a:	4313      	orrs	r3, r2
 800128c:	b29b      	uxth	r3, r3
 800128e:	4618      	mov	r0, r3
 8001290:	f000 f9e6 	bl	8001660 <FSMC_WR_DAT>
				FSMC_WR_DAT(((g_cam_buff[j] << 8) & 0xFF00U) | (g_cam_buff[j+1] & 0x00FFU));
 8001294:	4a5e      	ldr	r2, [pc, #376]	; (8001410 <app_main_loop+0x208>)
 8001296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001298:	4413      	add	r3, r2
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	b29b      	uxth	r3, r3
 800129e:	021b      	lsls	r3, r3, #8
 80012a0:	b29a      	uxth	r2, r3
 80012a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012a4:	3301      	adds	r3, #1
 80012a6:	495a      	ldr	r1, [pc, #360]	; (8001410 <app_main_loop+0x208>)
 80012a8:	5ccb      	ldrb	r3, [r1, r3]
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	4313      	orrs	r3, r2
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	4618      	mov	r0, r3
 80012b2:	f000 f9d5 	bl	8001660 <FSMC_WR_DAT>
			for(j=j; j <= QVGA_WIDTH*2 + i*QVGA_WIDTH*2; j+=2)
 80012b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012b8:	3302      	adds	r3, #2
 80012ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80012bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012be:	1c5a      	adds	r2, r3, #1
 80012c0:	4613      	mov	r3, r2
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	4413      	add	r3, r2
 80012c6:	01db      	lsls	r3, r3, #7
 80012c8:	461a      	mov	r2, r3
 80012ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012cc:	4293      	cmp	r3, r2
 80012ce:	ddd0      	ble.n	8001272 <app_main_loop+0x6a>
			}

			//j-=QVGA_WIDTH*2;

			for(j=j-(QVGA_WIDTH*2+2); j <= QVGA_WIDTH*2 + i*QVGA_WIDTH*2; j+=2)
 80012d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012d2:	f2a3 2382 	subw	r3, r3, #642	; 0x282
 80012d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80012d8:	e024      	b.n	8001324 <app_main_loop+0x11c>
			{
				FSMC_WR_DAT(((g_cam_buff[j] << 8) & 0xFF00U) | (g_cam_buff[j+1] & 0x00FFU));
 80012da:	4a4d      	ldr	r2, [pc, #308]	; (8001410 <app_main_loop+0x208>)
 80012dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012de:	4413      	add	r3, r2
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	021b      	lsls	r3, r3, #8
 80012e6:	b29a      	uxth	r2, r3
 80012e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012ea:	3301      	adds	r3, #1
 80012ec:	4948      	ldr	r1, [pc, #288]	; (8001410 <app_main_loop+0x208>)
 80012ee:	5ccb      	ldrb	r3, [r1, r3]
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	4313      	orrs	r3, r2
 80012f4:	b29b      	uxth	r3, r3
 80012f6:	4618      	mov	r0, r3
 80012f8:	f000 f9b2 	bl	8001660 <FSMC_WR_DAT>
				FSMC_WR_DAT(((g_cam_buff[j] << 8) & 0xFF00U) | (g_cam_buff[j+1] & 0x00FFU));
 80012fc:	4a44      	ldr	r2, [pc, #272]	; (8001410 <app_main_loop+0x208>)
 80012fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001300:	4413      	add	r3, r2
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	b29b      	uxth	r3, r3
 8001306:	021b      	lsls	r3, r3, #8
 8001308:	b29a      	uxth	r2, r3
 800130a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800130c:	3301      	adds	r3, #1
 800130e:	4940      	ldr	r1, [pc, #256]	; (8001410 <app_main_loop+0x208>)
 8001310:	5ccb      	ldrb	r3, [r1, r3]
 8001312:	b29b      	uxth	r3, r3
 8001314:	4313      	orrs	r3, r2
 8001316:	b29b      	uxth	r3, r3
 8001318:	4618      	mov	r0, r3
 800131a:	f000 f9a1 	bl	8001660 <FSMC_WR_DAT>
			for(j=j-(QVGA_WIDTH*2+2); j <= QVGA_WIDTH*2 + i*QVGA_WIDTH*2; j+=2)
 800131e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001320:	3302      	adds	r3, #2
 8001322:	62bb      	str	r3, [r7, #40]	; 0x28
 8001324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001326:	1c5a      	adds	r2, r3, #1
 8001328:	4613      	mov	r3, r2
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	4413      	add	r3, r2
 800132e:	01db      	lsls	r3, r3, #7
 8001330:	461a      	mov	r2, r3
 8001332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001334:	4293      	cmp	r3, r2
 8001336:	ddd0      	ble.n	80012da <app_main_loop+0xd2>
			}
			j=j+QVGA_WIDTH*2;
 8001338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800133a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800133e:	62bb      	str	r3, [r7, #40]	; 0x28
		for(i=0; i < QVGA_HEIGHT; i++)
 8001340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001342:	3301      	adds	r3, #1
 8001344:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001348:	2bef      	cmp	r3, #239	; 0xef
 800134a:	ddb7      	ble.n	80012bc <app_main_loop+0xb4>





		if(HAL_GetTick() > milis + 1000)
 800134c:	f002 ff82 	bl	8004254 <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001354:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001358:	429a      	cmp	r2, r3
 800135a:	d90d      	bls.n	8001378 <app_main_loop+0x170>
		{
			milis = HAL_GetTick();
 800135c:	f002 ff7a 	bl	8004254 <HAL_GetTick>
 8001360:	6378      	str	r0, [r7, #52]	; 0x34
			if(milis >= (0xFFFFFFFFU - 1000U))
 8001362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001364:	f46f 727a 	mvn.w	r2, #1000	; 0x3e8
 8001368:	4293      	cmp	r3, r2
 800136a:	d302      	bcc.n	8001372 <app_main_loop+0x16a>
			{
				milis = 0;
 800136c:	2300      	movs	r3, #0
 800136e:	637b      	str	r3, [r7, #52]	; 0x34
 8001370:	e002      	b.n	8001378 <app_main_loop+0x170>
			}
			else
			{// every second
				uart_write("hello\r\n");
 8001372:	4828      	ldr	r0, [pc, #160]	; (8001414 <app_main_loop+0x20c>)
 8001374:	f002 f8de 	bl	8003534 <uart_write>
			}
		}
		if(HAL_GetTick() > milis2 + 10)
 8001378:	f002 ff6c 	bl	8004254 <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001380:	330a      	adds	r3, #10
 8001382:	429a      	cmp	r2, r3
 8001384:	f67f af5c 	bls.w	8001240 <app_main_loop+0x38>
		{
			milis2 = HAL_GetTick();
 8001388:	f002 ff64 	bl	8004254 <HAL_GetTick>
 800138c:	6338      	str	r0, [r7, #48]	; 0x30
			if(milis2 >= (0xFFFFFFFFU - 100U)) //?
 800138e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001390:	f113 0f66 	cmn.w	r3, #102	; 0x66
 8001394:	d902      	bls.n	800139c <app_main_loop+0x194>
			{
				milis2 = 0;
 8001396:	2300      	movs	r3, #0
 8001398:	633b      	str	r3, [r7, #48]	; 0x30
 800139a:	e751      	b.n	8001240 <app_main_loop+0x38>
			}
			else
			{// every 10 miliseconds

				uint16_t x = (800.0 / 3880) * (g_touch_coordinates.x - 380);//3880,350
 800139c:	4b1e      	ldr	r3, [pc, #120]	; (8001418 <app_main_loop+0x210>)
 800139e:	881b      	ldrh	r3, [r3, #0]
 80013a0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff f8ef 	bl	8000588 <__aeabi_i2d>
 80013aa:	a315      	add	r3, pc, #84	; (adr r3, 8001400 <app_main_loop+0x1f8>)
 80013ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b0:	f7ff f954 	bl	800065c <__aeabi_dmul>
 80013b4:	4602      	mov	r2, r0
 80013b6:	460b      	mov	r3, r1
 80013b8:	4610      	mov	r0, r2
 80013ba:	4619      	mov	r1, r3
 80013bc:	f7ff fc10 	bl	8000be0 <__aeabi_d2uiz>
 80013c0:	4603      	mov	r3, r0
 80013c2:	82fb      	strh	r3, [r7, #22]
				uint16_t y = (480.0 / 3570) * (g_touch_coordinates.y - 480);//3640,480
 80013c4:	4b14      	ldr	r3, [pc, #80]	; (8001418 <app_main_loop+0x210>)
 80013c6:	885b      	ldrh	r3, [r3, #2]
 80013c8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff f8db 	bl	8000588 <__aeabi_i2d>
 80013d2:	a30d      	add	r3, pc, #52	; (adr r3, 8001408 <app_main_loop+0x200>)
 80013d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d8:	f7ff f940 	bl	800065c <__aeabi_dmul>
 80013dc:	4602      	mov	r2, r0
 80013de:	460b      	mov	r3, r1
 80013e0:	4610      	mov	r0, r2
 80013e2:	4619      	mov	r1, r3
 80013e4:	f7ff fbfc 	bl	8000be0 <__aeabi_d2uiz>
 80013e8:	4603      	mov	r3, r0
 80013ea:	82bb      	strh	r3, [r7, #20]
				LCD_DrawPoint(y, 800 - x, 0, 4);
 80013ec:	8afb      	ldrh	r3, [r7, #22]
 80013ee:	f5c3 7348 	rsb	r3, r3, #800	; 0x320
 80013f2:	b299      	uxth	r1, r3
 80013f4:	8ab8      	ldrh	r0, [r7, #20]
 80013f6:	2304      	movs	r3, #4
 80013f8:	2200      	movs	r2, #0
 80013fa:	f000 fa1d 	bl	8001838 <LCD_DrawPoint>
	{
 80013fe:	e71f      	b.n	8001240 <app_main_loop+0x38>
 8001400:	e59bb61a 	.word	0xe59bb61a
 8001404:	3fca6449 	.word	0x3fca6449
 8001408:	1135c811 	.word	0x1135c811
 800140c:	3fc135c8 	.word	0x3fc135c8
 8001410:	200000f4 	.word	0x200000f4
 8001414:	080283e0 	.word	0x080283e0
 8001418:	200258fc 	.word	0x200258fc

0800141c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	607b      	str	r3, [r7, #4]
 8001426:	4b09      	ldr	r3, [pc, #36]	; (800144c <MX_DMA_Init+0x30>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	4a08      	ldr	r2, [pc, #32]	; (800144c <MX_DMA_Init+0x30>)
 800142c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001430:	6313      	str	r3, [r2, #48]	; 0x30
 8001432:	4b06      	ldr	r3, [pc, #24]	; (800144c <MX_DMA_Init+0x30>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800143a:	607b      	str	r3, [r7, #4]
 800143c:	687b      	ldr	r3, [r7, #4]

}
 800143e:	bf00      	nop
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	40023800 	.word	0x40023800

08001450 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b08e      	sub	sp, #56	; 0x38
 8001454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001456:	f107 031c 	add.w	r3, r7, #28
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	605a      	str	r2, [r3, #4]
 8001460:	609a      	str	r2, [r3, #8]
 8001462:	60da      	str	r2, [r3, #12]
 8001464:	611a      	str	r2, [r3, #16]
 8001466:	615a      	str	r2, [r3, #20]
 8001468:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 800146a:	463b      	mov	r3, r7
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
 8001476:	611a      	str	r2, [r3, #16]
 8001478:	615a      	str	r2, [r3, #20]
 800147a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 800147c:	4b30      	ldr	r3, [pc, #192]	; (8001540 <MX_FSMC_Init+0xf0>)
 800147e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001482:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001484:	4b2e      	ldr	r3, [pc, #184]	; (8001540 <MX_FSMC_Init+0xf0>)
 8001486:	4a2f      	ldr	r2, [pc, #188]	; (8001544 <MX_FSMC_Init+0xf4>)
 8001488:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800148a:	4b2d      	ldr	r3, [pc, #180]	; (8001540 <MX_FSMC_Init+0xf0>)
 800148c:	2200      	movs	r2, #0
 800148e:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001490:	4b2b      	ldr	r3, [pc, #172]	; (8001540 <MX_FSMC_Init+0xf0>)
 8001492:	2200      	movs	r2, #0
 8001494:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001496:	4b2a      	ldr	r3, [pc, #168]	; (8001540 <MX_FSMC_Init+0xf0>)
 8001498:	2200      	movs	r2, #0
 800149a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800149c:	4b28      	ldr	r3, [pc, #160]	; (8001540 <MX_FSMC_Init+0xf0>)
 800149e:	2210      	movs	r2, #16
 80014a0:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80014a2:	4b27      	ldr	r3, [pc, #156]	; (8001540 <MX_FSMC_Init+0xf0>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80014a8:	4b25      	ldr	r3, [pc, #148]	; (8001540 <MX_FSMC_Init+0xf0>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80014ae:	4b24      	ldr	r3, [pc, #144]	; (8001540 <MX_FSMC_Init+0xf0>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80014b4:	4b22      	ldr	r3, [pc, #136]	; (8001540 <MX_FSMC_Init+0xf0>)
 80014b6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014ba:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80014bc:	4b20      	ldr	r3, [pc, #128]	; (8001540 <MX_FSMC_Init+0xf0>)
 80014be:	2200      	movs	r2, #0
 80014c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 80014c2:	4b1f      	ldr	r3, [pc, #124]	; (8001540 <MX_FSMC_Init+0xf0>)
 80014c4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014c8:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80014ca:	4b1d      	ldr	r3, [pc, #116]	; (8001540 <MX_FSMC_Init+0xf0>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80014d0:	4b1b      	ldr	r3, [pc, #108]	; (8001540 <MX_FSMC_Init+0xf0>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80014d6:	4b1a      	ldr	r3, [pc, #104]	; (8001540 <MX_FSMC_Init+0xf0>)
 80014d8:	2200      	movs	r2, #0
 80014da:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 80014dc:	4b18      	ldr	r3, [pc, #96]	; (8001540 <MX_FSMC_Init+0xf0>)
 80014de:	2200      	movs	r2, #0
 80014e0:	641a      	str	r2, [r3, #64]	; 0x40
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80014e2:	4b17      	ldr	r3, [pc, #92]	; (8001540 <MX_FSMC_Init+0xf0>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 9;
 80014e8:	2309      	movs	r3, #9
 80014ea:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80014ec:	230f      	movs	r3, #15
 80014ee:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 5;
 80014f0:	2305      	movs	r3, #5
 80014f2:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 1;
 80014f4:	2301      	movs	r3, #1
 80014f6:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 80014f8:	2310      	movs	r3, #16
 80014fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 80014fc:	2311      	movs	r3, #17
 80014fe:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001500:	2300      	movs	r3, #0
 8001502:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 2;
 8001504:	2302      	movs	r3, #2
 8001506:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8001508:	230f      	movs	r3, #15
 800150a:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 3;
 800150c:	2303      	movs	r3, #3
 800150e:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 1;
 8001510:	2301      	movs	r3, #1
 8001512:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8001514:	2310      	movs	r3, #16
 8001516:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8001518:	2311      	movs	r3, #17
 800151a:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 800151c:	2300      	movs	r3, #0
 800151e:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8001520:	463a      	mov	r2, r7
 8001522:	f107 031c 	add.w	r3, r7, #28
 8001526:	4619      	mov	r1, r3
 8001528:	4805      	ldr	r0, [pc, #20]	; (8001540 <MX_FSMC_Init+0xf0>)
 800152a:	f007 fbd3 	bl	8008cd4 <HAL_SRAM_Init>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_FSMC_Init+0xe8>
  {
    Error_Handler( );
 8001534:	f000 ff46 	bl	80023c4 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001538:	bf00      	nop
 800153a:	3738      	adds	r7, #56	; 0x38
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	20047c94 	.word	0x20047c94
 8001544:	a0000104 	.word	0xa0000104

08001548 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001548:	b580      	push	{r7, lr}
 800154a:	b086      	sub	sp, #24
 800154c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800154e:	1d3b      	adds	r3, r7, #4
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	605a      	str	r2, [r3, #4]
 8001556:	609a      	str	r2, [r3, #8]
 8001558:	60da      	str	r2, [r3, #12]
 800155a:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 800155c:	4b2c      	ldr	r3, [pc, #176]	; (8001610 <HAL_FSMC_MspInit+0xc8>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d151      	bne.n	8001608 <HAL_FSMC_MspInit+0xc0>
    return;
  }
  FSMC_Initialized = 1;
 8001564:	4b2a      	ldr	r3, [pc, #168]	; (8001610 <HAL_FSMC_MspInit+0xc8>)
 8001566:	2201      	movs	r2, #1
 8001568:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	603b      	str	r3, [r7, #0]
 800156e:	4b29      	ldr	r3, [pc, #164]	; (8001614 <HAL_FSMC_MspInit+0xcc>)
 8001570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001572:	4a28      	ldr	r2, [pc, #160]	; (8001614 <HAL_FSMC_MspInit+0xcc>)
 8001574:	f043 0301 	orr.w	r3, r3, #1
 8001578:	6393      	str	r3, [r2, #56]	; 0x38
 800157a:	4b26      	ldr	r3, [pc, #152]	; (8001614 <HAL_FSMC_MspInit+0xcc>)
 800157c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	603b      	str	r3, [r7, #0]
 8001584:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001586:	f64f 7380 	movw	r3, #65408	; 0xff80
 800158a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158c:	2302      	movs	r3, #2
 800158e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001590:	2300      	movs	r3, #0
 8001592:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001594:	2303      	movs	r3, #3
 8001596:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001598:	230c      	movs	r3, #12
 800159a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800159c:	1d3b      	adds	r3, r7, #4
 800159e:	4619      	mov	r1, r3
 80015a0:	481d      	ldr	r0, [pc, #116]	; (8001618 <HAL_FSMC_MspInit+0xd0>)
 80015a2:	f003 ff57 	bl	8005454 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80015a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015aa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ac:	2302      	movs	r3, #2
 80015ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b4:	2303      	movs	r3, #3
 80015b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80015b8:	230c      	movs	r3, #12
 80015ba:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015bc:	1d3b      	adds	r3, r7, #4
 80015be:	4619      	mov	r1, r3
 80015c0:	4816      	ldr	r0, [pc, #88]	; (800161c <HAL_FSMC_MspInit+0xd4>)
 80015c2:	f003 ff47 	bl	8005454 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14
 80015c6:	f64c 63b0 	movw	r3, #52912	; 0xceb0
 80015ca:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015cc:	2302      	movs	r3, #2
 80015ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d0:	2300      	movs	r3, #0
 80015d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d4:	2303      	movs	r3, #3
 80015d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80015d8:	230c      	movs	r3, #12
 80015da:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015dc:	1d3b      	adds	r3, r7, #4
 80015de:	4619      	mov	r1, r3
 80015e0:	480f      	ldr	r0, [pc, #60]	; (8001620 <HAL_FSMC_MspInit+0xd8>)
 80015e2:	f003 ff37 	bl	8005454 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80015e6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80015ea:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ec:	2302      	movs	r3, #2
 80015ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f0:	2300      	movs	r3, #0
 80015f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f4:	2303      	movs	r3, #3
 80015f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80015f8:	230a      	movs	r3, #10
 80015fa:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015fc:	1d3b      	adds	r3, r7, #4
 80015fe:	4619      	mov	r1, r3
 8001600:	4808      	ldr	r0, [pc, #32]	; (8001624 <HAL_FSMC_MspInit+0xdc>)
 8001602:	f003 ff27 	bl	8005454 <HAL_GPIO_Init>
 8001606:	e000      	b.n	800160a <HAL_FSMC_MspInit+0xc2>
    return;
 8001608:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800160a:	3718      	adds	r7, #24
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	200000e0 	.word	0x200000e0
 8001614:	40023800 	.word	0x40023800
 8001618:	40021000 	.word	0x40021000
 800161c:	40020400 	.word	0x40020400
 8001620:	40020c00 	.word	0x40020c00
 8001624:	40020800 	.word	0x40020800

08001628 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001630:	f7ff ff8a 	bl	8001548 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001634:	bf00      	nop
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <FSMC_WR_REG>:
 * function   :
 * parameters :
 * retvalue   :N/A
 *******************************************************************************************************************************/
void FSMC_WR_REG(uint32_t Reg)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
	LCD_FSMC->REG = Reg;
 8001644:	4b05      	ldr	r3, [pc, #20]	; (800165c <FSMC_WR_REG+0x20>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	687a      	ldr	r2, [r7, #4]
 800164a:	b292      	uxth	r2, r2
 800164c:	801a      	strh	r2, [r3, #0]
}
 800164e:	bf00      	nop
 8001650:	370c      	adds	r7, #12
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	20000000 	.word	0x20000000

08001660 <FSMC_WR_DAT>:
* function   :
* parameters :N/A
* retvalue   :N/A
*******************************************************************************************************************************/
void FSMC_WR_DAT(uint16_t Dat)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	4603      	mov	r3, r0
 8001668:	80fb      	strh	r3, [r7, #6]
	LCD_FSMC->DAT = Dat;
 800166a:	4b05      	ldr	r3, [pc, #20]	; (8001680 <FSMC_WR_DAT+0x20>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	88fa      	ldrh	r2, [r7, #6]
 8001670:	805a      	strh	r2, [r3, #2]
}
 8001672:	bf00      	nop
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	20000000 	.word	0x20000000

08001684 <LCD_SetWindow>:
							LCD_SetDirection function. It calls to FSMC_WR_REG(RAMWR) function at the end.
* parameters :XS(x start address), YS(y start address), XE(x end address) and YE(y end address)
* retvalue   :N/A
*******************************************************************************************************************************/
void LCD_SetWindow(uint16_t Xs, uint16_t Ys, uint16_t Xe, uint16_t Ye)
{
 8001684:	b590      	push	{r4, r7, lr}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	4604      	mov	r4, r0
 800168c:	4608      	mov	r0, r1
 800168e:	4611      	mov	r1, r2
 8001690:	461a      	mov	r2, r3
 8001692:	4623      	mov	r3, r4
 8001694:	80fb      	strh	r3, [r7, #6]
 8001696:	4603      	mov	r3, r0
 8001698:	80bb      	strh	r3, [r7, #4]
 800169a:	460b      	mov	r3, r1
 800169c:	807b      	strh	r3, [r7, #2]
 800169e:	4613      	mov	r3, r2
 80016a0:	803b      	strh	r3, [r7, #0]
	FSMC_WR_REG(CASET_XS_H);		FSMC_WR_DAT(Xs >> 8);
 80016a2:	f44f 5028 	mov.w	r0, #10752	; 0x2a00
 80016a6:	f7ff ffc9 	bl	800163c <FSMC_WR_REG>
 80016aa:	88fb      	ldrh	r3, [r7, #6]
 80016ac:	0a1b      	lsrs	r3, r3, #8
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7ff ffd5 	bl	8001660 <FSMC_WR_DAT>
	FSMC_WR_REG(CASET_XS_L);		FSMC_WR_DAT(Xs & 0x00FFU);
 80016b6:	f642 2001 	movw	r0, #10753	; 0x2a01
 80016ba:	f7ff ffbf 	bl	800163c <FSMC_WR_REG>
 80016be:	88fb      	ldrh	r3, [r7, #6]
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff ffcb 	bl	8001660 <FSMC_WR_DAT>
	FSMC_WR_REG(CASET_XE_H);		FSMC_WR_DAT(Xe >> 8);
 80016ca:	f642 2002 	movw	r0, #10754	; 0x2a02
 80016ce:	f7ff ffb5 	bl	800163c <FSMC_WR_REG>
 80016d2:	887b      	ldrh	r3, [r7, #2]
 80016d4:	0a1b      	lsrs	r3, r3, #8
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff ffc1 	bl	8001660 <FSMC_WR_DAT>
	FSMC_WR_REG(CASET_XE_L);		FSMC_WR_DAT(Xe & 0x00FFU);
 80016de:	f642 2003 	movw	r0, #10755	; 0x2a03
 80016e2:	f7ff ffab 	bl	800163c <FSMC_WR_REG>
 80016e6:	887b      	ldrh	r3, [r7, #2]
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	b29b      	uxth	r3, r3
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff ffb7 	bl	8001660 <FSMC_WR_DAT>
	FSMC_WR_REG(RASET_YS_H);		FSMC_WR_DAT(Ys >> 8);
 80016f2:	f44f 502c 	mov.w	r0, #11008	; 0x2b00
 80016f6:	f7ff ffa1 	bl	800163c <FSMC_WR_REG>
 80016fa:	88bb      	ldrh	r3, [r7, #4]
 80016fc:	0a1b      	lsrs	r3, r3, #8
 80016fe:	b29b      	uxth	r3, r3
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff ffad 	bl	8001660 <FSMC_WR_DAT>
	FSMC_WR_REG(RASET_YS_L);		FSMC_WR_DAT(Ys & 0x00FFU);
 8001706:	f642 3001 	movw	r0, #11009	; 0x2b01
 800170a:	f7ff ff97 	bl	800163c <FSMC_WR_REG>
 800170e:	88bb      	ldrh	r3, [r7, #4]
 8001710:	b2db      	uxtb	r3, r3
 8001712:	b29b      	uxth	r3, r3
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff ffa3 	bl	8001660 <FSMC_WR_DAT>
	FSMC_WR_REG(RASET_YE_H);		FSMC_WR_DAT(Ye >> 8);
 800171a:	f642 3002 	movw	r0, #11010	; 0x2b02
 800171e:	f7ff ff8d 	bl	800163c <FSMC_WR_REG>
 8001722:	883b      	ldrh	r3, [r7, #0]
 8001724:	0a1b      	lsrs	r3, r3, #8
 8001726:	b29b      	uxth	r3, r3
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff ff99 	bl	8001660 <FSMC_WR_DAT>
	FSMC_WR_REG(RASET_YE_L);		FSMC_WR_DAT(Ye & 0x00FFU);
 800172e:	f642 3003 	movw	r0, #11011	; 0x2b03
 8001732:	f7ff ff83 	bl	800163c <FSMC_WR_REG>
 8001736:	883b      	ldrh	r3, [r7, #0]
 8001738:	b2db      	uxtb	r3, r3
 800173a:	b29b      	uxth	r3, r3
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff ff8f 	bl	8001660 <FSMC_WR_DAT>

	FSMC_WR_REG(RAMWR);
 8001742:	f44f 5030 	mov.w	r0, #11264	; 0x2c00
 8001746:	f7ff ff79 	bl	800163c <FSMC_WR_REG>
}
 800174a:	bf00      	nop
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	bd90      	pop	{r4, r7, pc}
	...

08001754 <LCD_SetDirection>:
							the selected orientation.
* parameters :Direction(Use Orientation Direction Definitions defined in FSMC_NT35510.h)
* retvalue   :N/A
*******************************************************************************************************************************/
void LCD_SetDirection(uint8_t Direction)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	71fb      	strb	r3, [r7, #7]
	switch(Direction)
 800175e:	79fb      	ldrb	r3, [r7, #7]
 8001760:	2b03      	cmp	r3, #3
 8001762:	d84b      	bhi.n	80017fc <LCD_SetDirection+0xa8>
 8001764:	a201      	add	r2, pc, #4	; (adr r2, 800176c <LCD_SetDirection+0x18>)
 8001766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800176a:	bf00      	nop
 800176c:	0800177d 	.word	0x0800177d
 8001770:	0800179d 	.word	0x0800179d
 8001774:	080017bd 	.word	0x080017bd
 8001778:	080017dd 	.word	0x080017dd
	{
		case 0:

			FSMC_WR_REG(MADCTL); FSMC_WR_DAT(0x0000U);
 800177c:	f44f 5058 	mov.w	r0, #13824	; 0x3600
 8001780:	f7ff ff5c 	bl	800163c <FSMC_WR_REG>
 8001784:	2000      	movs	r0, #0
 8001786:	f7ff ff6b 	bl	8001660 <FSMC_WR_DAT>
			LCD_SetWindow(0, 0, 479, 799);
 800178a:	f240 331f 	movw	r3, #799	; 0x31f
 800178e:	f240 12df 	movw	r2, #479	; 0x1df
 8001792:	2100      	movs	r1, #0
 8001794:	2000      	movs	r0, #0
 8001796:	f7ff ff75 	bl	8001684 <LCD_SetWindow>
		break;
 800179a:	e02f      	b.n	80017fc <LCD_SetDirection+0xa8>
		case 1:

			FSMC_WR_REG(MADCTL); FSMC_WR_DAT(0x00C0U);
 800179c:	f44f 5058 	mov.w	r0, #13824	; 0x3600
 80017a0:	f7ff ff4c 	bl	800163c <FSMC_WR_REG>
 80017a4:	20c0      	movs	r0, #192	; 0xc0
 80017a6:	f7ff ff5b 	bl	8001660 <FSMC_WR_DAT>
			LCD_SetWindow(0, 0, 479, 799);
 80017aa:	f240 331f 	movw	r3, #799	; 0x31f
 80017ae:	f240 12df 	movw	r2, #479	; 0x1df
 80017b2:	2100      	movs	r1, #0
 80017b4:	2000      	movs	r0, #0
 80017b6:	f7ff ff65 	bl	8001684 <LCD_SetWindow>
		break;
 80017ba:	e01f      	b.n	80017fc <LCD_SetDirection+0xa8>
		case 2:

			FSMC_WR_REG(MADCTL); FSMC_WR_DAT(0x0060U);
 80017bc:	f44f 5058 	mov.w	r0, #13824	; 0x3600
 80017c0:	f7ff ff3c 	bl	800163c <FSMC_WR_REG>
 80017c4:	2060      	movs	r0, #96	; 0x60
 80017c6:	f7ff ff4b 	bl	8001660 <FSMC_WR_DAT>
			LCD_SetWindow(0, 0, 799, 479);
 80017ca:	f240 13df 	movw	r3, #479	; 0x1df
 80017ce:	f240 321f 	movw	r2, #799	; 0x31f
 80017d2:	2100      	movs	r1, #0
 80017d4:	2000      	movs	r0, #0
 80017d6:	f7ff ff55 	bl	8001684 <LCD_SetWindow>
		break;
 80017da:	e00f      	b.n	80017fc <LCD_SetDirection+0xa8>
		case 3:

			FSMC_WR_REG(MADCTL); FSMC_WR_DAT(0x00A0U);
 80017dc:	f44f 5058 	mov.w	r0, #13824	; 0x3600
 80017e0:	f7ff ff2c 	bl	800163c <FSMC_WR_REG>
 80017e4:	20a0      	movs	r0, #160	; 0xa0
 80017e6:	f7ff ff3b 	bl	8001660 <FSMC_WR_DAT>
			LCD_SetWindow(0, 0, 799, 479);
 80017ea:	f240 13df 	movw	r3, #479	; 0x1df
 80017ee:	f240 321f 	movw	r2, #799	; 0x31f
 80017f2:	2100      	movs	r1, #0
 80017f4:	2000      	movs	r0, #0
 80017f6:	f7ff ff45 	bl	8001684 <LCD_SetWindow>
		break;
 80017fa:	bf00      	nop
	}
}
 80017fc:	bf00      	nop
 80017fe:	3708      	adds	r7, #8
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <LCD_ClearScreen>:
							orientation direction change.
* parameters :Color(Desired screen color)
* retvalue   :N/A
*******************************************************************************************************************************/
void LCD_ClearScreen(uint16_t Color)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	80fb      	strh	r3, [r7, #6]
  uint32_t i;

	for(i=0; i<(480*800); i++)
 800180e:	2300      	movs	r3, #0
 8001810:	60fb      	str	r3, [r7, #12]
 8001812:	e006      	b.n	8001822 <LCD_ClearScreen+0x1e>
	{
		FSMC_WR_DAT(Color);
 8001814:	88fb      	ldrh	r3, [r7, #6]
 8001816:	4618      	mov	r0, r3
 8001818:	f7ff ff22 	bl	8001660 <FSMC_WR_DAT>
	for(i=0; i<(480*800); i++)
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	3301      	adds	r3, #1
 8001820:	60fb      	str	r3, [r7, #12]
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	4a03      	ldr	r2, [pc, #12]	; (8001834 <LCD_ClearScreen+0x30>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d9f4      	bls.n	8001814 <LCD_ClearScreen+0x10>
	}
}
 800182a:	bf00      	nop
 800182c:	bf00      	nop
 800182e:	3710      	adds	r7, #16
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	0005dbff 	.word	0x0005dbff

08001838 <LCD_DrawPoint>:
* parameters :X(x address of the center of the point), Y(y address of the center of the point)
							Color(point color), Size(point size)
* retvalue   :N/A
*******************************************************************************************************************************/
void LCD_DrawPoint(uint16_t X, uint16_t Y, uint16_t Color, uint8_t Size)
{
 8001838:	b590      	push	{r4, r7, lr}
 800183a:	b085      	sub	sp, #20
 800183c:	af00      	add	r7, sp, #0
 800183e:	4604      	mov	r4, r0
 8001840:	4608      	mov	r0, r1
 8001842:	4611      	mov	r1, r2
 8001844:	461a      	mov	r2, r3
 8001846:	4623      	mov	r3, r4
 8001848:	80fb      	strh	r3, [r7, #6]
 800184a:	4603      	mov	r3, r0
 800184c:	80bb      	strh	r3, [r7, #4]
 800184e:	460b      	mov	r3, r1
 8001850:	807b      	strh	r3, [r7, #2]
 8001852:	4613      	mov	r3, r2
 8001854:	707b      	strb	r3, [r7, #1]
  uint32_t i;
	LCD_SetWindow(X, Y, X + (Size - 1), Y + (Size - 1));
 8001856:	787b      	ldrb	r3, [r7, #1]
 8001858:	b29a      	uxth	r2, r3
 800185a:	88fb      	ldrh	r3, [r7, #6]
 800185c:	4413      	add	r3, r2
 800185e:	b29b      	uxth	r3, r3
 8001860:	3b01      	subs	r3, #1
 8001862:	b29c      	uxth	r4, r3
 8001864:	787b      	ldrb	r3, [r7, #1]
 8001866:	b29a      	uxth	r2, r3
 8001868:	88bb      	ldrh	r3, [r7, #4]
 800186a:	4413      	add	r3, r2
 800186c:	b29b      	uxth	r3, r3
 800186e:	3b01      	subs	r3, #1
 8001870:	b29b      	uxth	r3, r3
 8001872:	88b9      	ldrh	r1, [r7, #4]
 8001874:	88f8      	ldrh	r0, [r7, #6]
 8001876:	4622      	mov	r2, r4
 8001878:	f7ff ff04 	bl	8001684 <LCD_SetWindow>
	for(i=0; i < (Size) * (Size); i++)
 800187c:	2300      	movs	r3, #0
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	e006      	b.n	8001890 <LCD_DrawPoint+0x58>
	{
		FSMC_WR_DAT(Color);
 8001882:	887b      	ldrh	r3, [r7, #2]
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff feeb 	bl	8001660 <FSMC_WR_DAT>
	for(i=0; i < (Size) * (Size); i++)
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	3301      	adds	r3, #1
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	787b      	ldrb	r3, [r7, #1]
 8001892:	787a      	ldrb	r2, [r7, #1]
 8001894:	fb02 f303 	mul.w	r3, r2, r3
 8001898:	461a      	mov	r2, r3
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	4293      	cmp	r3, r2
 800189e:	d3f0      	bcc.n	8001882 <LCD_DrawPoint+0x4a>
	}
}
 80018a0:	bf00      	nop
 80018a2:	bf00      	nop
 80018a4:	3714      	adds	r7, #20
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd90      	pop	{r4, r7, pc}
	...

080018ac <LCD_PrintCh>:
* parameters :X(x start address), Y(y start address), Color(character color), Bcolor(background
							color), Character(use standard ASCII values for characters) and Size(characters size)
* retvalue   :N/A
********************************************************************************************************************************/
void LCD_PrintCh(uint16_t X, uint16_t Y, uint16_t Color, uint16_t Bcolor, uint8_t Character, uint8_t Size)
{
 80018ac:	b590      	push	{r4, r7, lr}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	4604      	mov	r4, r0
 80018b4:	4608      	mov	r0, r1
 80018b6:	4611      	mov	r1, r2
 80018b8:	461a      	mov	r2, r3
 80018ba:	4623      	mov	r3, r4
 80018bc:	80fb      	strh	r3, [r7, #6]
 80018be:	4603      	mov	r3, r0
 80018c0:	80bb      	strh	r3, [r7, #4]
 80018c2:	460b      	mov	r3, r1
 80018c4:	807b      	strh	r3, [r7, #2]
 80018c6:	4613      	mov	r3, r2
 80018c8:	803b      	strh	r3, [r7, #0]
	uint8_t i, j, k, p=0;
 80018ca:	2300      	movs	r3, #0
 80018cc:	733b      	strb	r3, [r7, #12]
	uint16_t c=0;
 80018ce:	2300      	movs	r3, #0
 80018d0:	817b      	strh	r3, [r7, #10]
	LCD_SetWindow(X, Y, X+(8 * Size - 1), Y+(8  *Size - 1));									// Define area by character size.
 80018d2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	00db      	lsls	r3, r3, #3
 80018da:	b29a      	uxth	r2, r3
 80018dc:	88fb      	ldrh	r3, [r7, #6]
 80018de:	4413      	add	r3, r2
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	3b01      	subs	r3, #1
 80018e4:	b29c      	uxth	r4, r3
 80018e6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	00db      	lsls	r3, r3, #3
 80018ee:	b29a      	uxth	r2, r3
 80018f0:	88bb      	ldrh	r3, [r7, #4]
 80018f2:	4413      	add	r3, r2
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	3b01      	subs	r3, #1
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	88b9      	ldrh	r1, [r7, #4]
 80018fc:	88f8      	ldrh	r0, [r7, #6]
 80018fe:	4622      	mov	r2, r4
 8001900:	f7ff fec0 	bl	8001684 <LCD_SetWindow>

	for(i=0; i<8; i++)																							// 8 row-loops because there are 8 row-bytes per character.
 8001904:	2300      	movs	r3, #0
 8001906:	73fb      	strb	r3, [r7, #15]
 8001908:	e03c      	b.n	8001984 <LCD_PrintCh+0xd8>
	{
		for(j=0; j < Size; j++)																					// Print each row size times.
 800190a:	2300      	movs	r3, #0
 800190c:	73bb      	strb	r3, [r7, #14]
 800190e:	e031      	b.n	8001974 <LCD_PrintCh+0xc8>
		{
			for(k=0; k < 8; k++)																					// 8 column-loops because there are 8 column-bits per row-byte
 8001910:	2300      	movs	r3, #0
 8001912:	737b      	strb	r3, [r7, #13]
 8001914:	e028      	b.n	8001968 <LCD_PrintCh+0xbc>
			{
				if((ASCIItable[Character][i]>>(7-k)) & 0x01)
 8001916:	f897 2020 	ldrb.w	r2, [r7, #32]
 800191a:	7bfb      	ldrb	r3, [r7, #15]
 800191c:	491d      	ldr	r1, [pc, #116]	; (8001994 <LCD_PrintCh+0xe8>)
 800191e:	00d2      	lsls	r2, r2, #3
 8001920:	440a      	add	r2, r1
 8001922:	4413      	add	r3, r2
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	461a      	mov	r2, r3
 8001928:	7b7b      	ldrb	r3, [r7, #13]
 800192a:	f1c3 0307 	rsb	r3, r3, #7
 800192e:	fa42 f303 	asr.w	r3, r2, r3
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	2b00      	cmp	r3, #0
 8001938:	d002      	beq.n	8001940 <LCD_PrintCh+0x94>
					c=Color;
 800193a:	887b      	ldrh	r3, [r7, #2]
 800193c:	817b      	strh	r3, [r7, #10]
 800193e:	e001      	b.n	8001944 <LCD_PrintCh+0x98>
				else
					c=Bcolor;
 8001940:	883b      	ldrh	r3, [r7, #0]
 8001942:	817b      	strh	r3, [r7, #10]
				for(p = 0; p < Size; p++)																			// Print each column-bit size times.
 8001944:	2300      	movs	r3, #0
 8001946:	733b      	strb	r3, [r7, #12]
 8001948:	e006      	b.n	8001958 <LCD_PrintCh+0xac>
				{
					FSMC_WR_DAT(c);
 800194a:	897b      	ldrh	r3, [r7, #10]
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff fe87 	bl	8001660 <FSMC_WR_DAT>
				for(p = 0; p < Size; p++)																			// Print each column-bit size times.
 8001952:	7b3b      	ldrb	r3, [r7, #12]
 8001954:	3301      	adds	r3, #1
 8001956:	733b      	strb	r3, [r7, #12]
 8001958:	7b3a      	ldrb	r2, [r7, #12]
 800195a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800195e:	429a      	cmp	r2, r3
 8001960:	d3f3      	bcc.n	800194a <LCD_PrintCh+0x9e>
			for(k=0; k < 8; k++)																					// 8 column-loops because there are 8 column-bits per row-byte
 8001962:	7b7b      	ldrb	r3, [r7, #13]
 8001964:	3301      	adds	r3, #1
 8001966:	737b      	strb	r3, [r7, #13]
 8001968:	7b7b      	ldrb	r3, [r7, #13]
 800196a:	2b07      	cmp	r3, #7
 800196c:	d9d3      	bls.n	8001916 <LCD_PrintCh+0x6a>
		for(j=0; j < Size; j++)																					// Print each row size times.
 800196e:	7bbb      	ldrb	r3, [r7, #14]
 8001970:	3301      	adds	r3, #1
 8001972:	73bb      	strb	r3, [r7, #14]
 8001974:	7bba      	ldrb	r2, [r7, #14]
 8001976:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800197a:	429a      	cmp	r2, r3
 800197c:	d3c8      	bcc.n	8001910 <LCD_PrintCh+0x64>
	for(i=0; i<8; i++)																							// 8 row-loops because there are 8 row-bytes per character.
 800197e:	7bfb      	ldrb	r3, [r7, #15]
 8001980:	3301      	adds	r3, #1
 8001982:	73fb      	strb	r3, [r7, #15]
 8001984:	7bfb      	ldrb	r3, [r7, #15]
 8001986:	2b07      	cmp	r3, #7
 8001988:	d9bf      	bls.n	800190a <LCD_PrintCh+0x5e>
				}
			}
		}
	}
}
 800198a:	bf00      	nop
 800198c:	bf00      	nop
 800198e:	3714      	adds	r7, #20
 8001990:	46bd      	mov	sp, r7
 8001992:	bd90      	pop	{r4, r7, pc}
 8001994:	0803f62c 	.word	0x0803f62c

08001998 <LCD_PrintStr>:
							color), string(pointer to an array of characters, standard ASCII values) and size
							(character size)
* retvalue   :N/A
********************************************************************************************************************************/
void LCD_PrintStr(uint16_t X, uint16_t Y, uint16_t Color, uint16_t Bcolor, uint8_t* String, uint8_t Size)
{
 8001998:	b5b0      	push	{r4, r5, r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af02      	add	r7, sp, #8
 800199e:	4604      	mov	r4, r0
 80019a0:	4608      	mov	r0, r1
 80019a2:	4611      	mov	r1, r2
 80019a4:	461a      	mov	r2, r3
 80019a6:	4623      	mov	r3, r4
 80019a8:	80fb      	strh	r3, [r7, #6]
 80019aa:	4603      	mov	r3, r0
 80019ac:	80bb      	strh	r3, [r7, #4]
 80019ae:	460b      	mov	r3, r1
 80019b0:	807b      	strh	r3, [r7, #2]
 80019b2:	4613      	mov	r3, r2
 80019b4:	803b      	strh	r3, [r7, #0]
	X=X-8*Size;
 80019b6:	7f3b      	ldrb	r3, [r7, #28]
 80019b8:	b29b      	uxth	r3, r3
 80019ba:	00db      	lsls	r3, r3, #3
 80019bc:	b29b      	uxth	r3, r3
 80019be:	88fa      	ldrh	r2, [r7, #6]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	80fb      	strh	r3, [r7, #6]
	while(*String)
 80019c4:	e015      	b.n	80019f2 <LCD_PrintStr+0x5a>
		LCD_PrintCh(X = X + 8 * Size, Y, Color, Bcolor, *String++, Size);
 80019c6:	7f3b      	ldrb	r3, [r7, #28]
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	00db      	lsls	r3, r3, #3
 80019cc:	b29a      	uxth	r2, r3
 80019ce:	88fb      	ldrh	r3, [r7, #6]
 80019d0:	4413      	add	r3, r2
 80019d2:	80fb      	strh	r3, [r7, #6]
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	1c5a      	adds	r2, r3, #1
 80019d8:	61ba      	str	r2, [r7, #24]
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	883d      	ldrh	r5, [r7, #0]
 80019de:	887c      	ldrh	r4, [r7, #2]
 80019e0:	88b9      	ldrh	r1, [r7, #4]
 80019e2:	88f8      	ldrh	r0, [r7, #6]
 80019e4:	7f3a      	ldrb	r2, [r7, #28]
 80019e6:	9201      	str	r2, [sp, #4]
 80019e8:	9300      	str	r3, [sp, #0]
 80019ea:	462b      	mov	r3, r5
 80019ec:	4622      	mov	r2, r4
 80019ee:	f7ff ff5d 	bl	80018ac <LCD_PrintCh>
	while(*String)
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d1e5      	bne.n	80019c6 <LCD_PrintStr+0x2e>
}
 80019fa:	bf00      	nop
 80019fc:	bf00      	nop
 80019fe:	3708      	adds	r7, #8
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bdb0      	pop	{r4, r5, r7, pc}

08001a04 <NT35510_Init>:
 * function   :
 * parameters :
 * retvalue   :N/A
 *******************************************************************************************************************************/
void NT35510_Init(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim3);
 8001a08:	48fb      	ldr	r0, [pc, #1004]	; (8001df8 <NT35510_Init+0x3f4>)
 8001a0a:	f007 f9f7 	bl	8008dfc <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001a0e:	2104      	movs	r1, #4
 8001a10:	48f9      	ldr	r0, [pc, #996]	; (8001df8 <NT35510_Init+0x3f4>)
 8001a12:	f007 faab 	bl	8008f6c <HAL_TIM_PWM_Start>

	NRST_LOW;													// Reset on.
 8001a16:	2200      	movs	r2, #0
 8001a18:	2140      	movs	r1, #64	; 0x40
 8001a1a:	48f8      	ldr	r0, [pc, #992]	; (8001dfc <NT35510_Init+0x3f8>)
 8001a1c:	f003 feae 	bl	800577c <HAL_GPIO_WritePin>
	HAL_Delay(300);											// Short delay needed on power up
 8001a20:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001a24:	f002 fc22 	bl	800426c <HAL_Delay>
	NRST_HIGH;													// Reset off.
 8001a28:	2201      	movs	r2, #1
 8001a2a:	2140      	movs	r1, #64	; 0x40
 8001a2c:	48f3      	ldr	r0, [pc, #972]	; (8001dfc <NT35510_Init+0x3f8>)
 8001a2e:	f003 fea5 	bl	800577c <HAL_GPIO_WritePin>
	HAL_Delay(800);											// Short delay needed on power up
 8001a32:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001a36:	f002 fc19 	bl	800426c <HAL_Delay>

	// Manufacture Command Set selection
	FSMC_WR_REG(MAUCCTR_0);			FSMC_WR_DAT(0x0055U);
 8001a3a:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8001a3e:	f7ff fdfd 	bl	800163c <FSMC_WR_REG>
 8001a42:	2055      	movs	r0, #85	; 0x55
 8001a44:	f7ff fe0c 	bl	8001660 <FSMC_WR_DAT>
	FSMC_WR_REG(MAUCCTR_1);			FSMC_WR_DAT(0x00AAU);
 8001a48:	f24f 0001 	movw	r0, #61441	; 0xf001
 8001a4c:	f7ff fdf6 	bl	800163c <FSMC_WR_REG>
 8001a50:	20aa      	movs	r0, #170	; 0xaa
 8001a52:	f7ff fe05 	bl	8001660 <FSMC_WR_DAT>
	FSMC_WR_REG(MAUCCTR_2);			FSMC_WR_DAT(0x0052U);
 8001a56:	f24f 0002 	movw	r0, #61442	; 0xf002
 8001a5a:	f7ff fdef 	bl	800163c <FSMC_WR_REG>
 8001a5e:	2052      	movs	r0, #82	; 0x52
 8001a60:	f7ff fdfe 	bl	8001660 <FSMC_WR_DAT>
	FSMC_WR_REG(MAUCCTR_3);			FSMC_WR_DAT(0x0008U);		// Enable Manufacture Command Set
 8001a64:	f24f 0003 	movw	r0, #61443	; 0xf003
 8001a68:	f7ff fde8 	bl	800163c <FSMC_WR_REG>
 8001a6c:	2008      	movs	r0, #8
 8001a6e:	f7ff fdf7 	bl	8001660 <FSMC_WR_DAT>
	FSMC_WR_REG(MAUCCTR_4);			FSMC_WR_DAT(0x0001U);		// Select page 1
 8001a72:	f24f 0004 	movw	r0, #61444	; 0xf004
 8001a76:	f7ff fde1 	bl	800163c <FSMC_WR_REG>
 8001a7a:	2001      	movs	r0, #1
 8001a7c:	f7ff fdf0 	bl	8001660 <FSMC_WR_DAT>

	// AVDD 5.2V
	FSMC_WR_REG(SETAVDD_NORM);		FSMC_WR_DAT(0x000DU);
 8001a80:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 8001a84:	f7ff fdda 	bl	800163c <FSMC_WR_REG>
 8001a88:	200d      	movs	r0, #13
 8001a8a:	f7ff fde9 	bl	8001660 <FSMC_WR_DAT>
	FSMC_WR_REG(SETAVDD_IDLE);		FSMC_WR_DAT(0x000DU);
 8001a8e:	f24b 0001 	movw	r0, #45057	; 0xb001
 8001a92:	f7ff fdd3 	bl	800163c <FSMC_WR_REG>
 8001a96:	200d      	movs	r0, #13
 8001a98:	f7ff fde2 	bl	8001660 <FSMC_WR_DAT>
	FSMC_WR_REG(SETAVDD_PART);		FSMC_WR_DAT(0x000DU);
 8001a9c:	f24b 0002 	movw	r0, #45058	; 0xb002
 8001aa0:	f7ff fdcc 	bl	800163c <FSMC_WR_REG>
 8001aa4:	200d      	movs	r0, #13
 8001aa6:	f7ff fddb 	bl	8001660 <FSMC_WR_DAT>

	// AVDD ratio
	FSMC_WR_REG(BT1CTR_NORM);		FSMC_WR_DAT(0x0034U);
 8001aaa:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 8001aae:	f7ff fdc5 	bl	800163c <FSMC_WR_REG>
 8001ab2:	2034      	movs	r0, #52	; 0x34
 8001ab4:	f7ff fdd4 	bl	8001660 <FSMC_WR_DAT>
	FSMC_WR_REG(BT1CTR_IDLE);		FSMC_WR_DAT(0x0034U);
 8001ab8:	f24b 6001 	movw	r0, #46593	; 0xb601
 8001abc:	f7ff fdbe 	bl	800163c <FSMC_WR_REG>
 8001ac0:	2034      	movs	r0, #52	; 0x34
 8001ac2:	f7ff fdcd 	bl	8001660 <FSMC_WR_DAT>
	FSMC_WR_REG(BT1CTR_PART);		FSMC_WR_DAT(0x0034U);
 8001ac6:	f24b 6002 	movw	r0, #46594	; 0xb602
 8001aca:	f7ff fdb7 	bl	800163c <FSMC_WR_REG>
 8001ace:	2034      	movs	r0, #52	; 0x34
 8001ad0:	f7ff fdc6 	bl	8001660 <FSMC_WR_DAT>

	// AVEE  -5.2V
	FSMC_WR_REG(SETAVEE_NORM);		FSMC_WR_DAT(0x000DU);
 8001ad4:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 8001ad8:	f7ff fdb0 	bl	800163c <FSMC_WR_REG>
 8001adc:	200d      	movs	r0, #13
 8001ade:	f7ff fdbf 	bl	8001660 <FSMC_WR_DAT>
	FSMC_WR_REG(SETAVEE_IDLE);		FSMC_WR_DAT(0x000DU);
 8001ae2:	f24b 1001 	movw	r0, #45313	; 0xb101
 8001ae6:	f7ff fda9 	bl	800163c <FSMC_WR_REG>
 8001aea:	200d      	movs	r0, #13
 8001aec:	f7ff fdb8 	bl	8001660 <FSMC_WR_DAT>
	FSMC_WR_REG(SETAVEE_PART);		FSMC_WR_DAT(0x000DU);
 8001af0:	f24b 1002 	movw	r0, #45314	; 0xb102
 8001af4:	f7ff fda2 	bl	800163c <FSMC_WR_REG>
 8001af8:	200d      	movs	r0, #13
 8001afa:	f7ff fdb1 	bl	8001660 <FSMC_WR_DAT>

	// AVEE ratio
	FSMC_WR_REG(BT2CTR_NORM);		FSMC_WR_DAT(0x0034U);
 8001afe:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8001b02:	f7ff fd9b 	bl	800163c <FSMC_WR_REG>
 8001b06:	2034      	movs	r0, #52	; 0x34
 8001b08:	f7ff fdaa 	bl	8001660 <FSMC_WR_DAT>
	FSMC_WR_REG(BT2CTR_IDLE);		FSMC_WR_DAT(0x0034U);
 8001b0c:	f24b 7001 	movw	r0, #46849	; 0xb701
 8001b10:	f7ff fd94 	bl	800163c <FSMC_WR_REG>
 8001b14:	2034      	movs	r0, #52	; 0x34
 8001b16:	f7ff fda3 	bl	8001660 <FSMC_WR_DAT>
	FSMC_WR_REG(BT2CTR_PART);		FSMC_WR_DAT(0x0034U);
 8001b1a:	f24b 7002 	movw	r0, #46850	; 0xb702
 8001b1e:	f7ff fd8d 	bl	800163c <FSMC_WR_REG>
 8001b22:	2034      	movs	r0, #52	; 0x34
 8001b24:	f7ff fd9c 	bl	8001660 <FSMC_WR_DAT>

	// VCL  -2.5V
	FSMC_WR_REG(SETVCL_NORM);		FSMC_WR_DAT(0x0000U);
 8001b28:	f44f 4032 	mov.w	r0, #45568	; 0xb200
 8001b2c:	f7ff fd86 	bl	800163c <FSMC_WR_REG>
 8001b30:	2000      	movs	r0, #0
 8001b32:	f7ff fd95 	bl	8001660 <FSMC_WR_DAT>
	FSMC_WR_REG(SETVCL_IDLE);		FSMC_WR_DAT(0x0000U);
 8001b36:	f24b 2001 	movw	r0, #45569	; 0xb201
 8001b3a:	f7ff fd7f 	bl	800163c <FSMC_WR_REG>
 8001b3e:	2000      	movs	r0, #0
 8001b40:	f7ff fd8e 	bl	8001660 <FSMC_WR_DAT>
	FSMC_WR_REG(SETVCL_PART);		FSMC_WR_DAT(0x0000U);
 8001b44:	f24b 2002 	movw	r0, #45570	; 0xb202
 8001b48:	f7ff fd78 	bl	800163c <FSMC_WR_REG>
 8001b4c:	2000      	movs	r0, #0
 8001b4e:	f7ff fd87 	bl	8001660 <FSMC_WR_DAT>

	// VCL ratio
	FSMC_WR_REG(BT3CTR_NORM);		FSMC_WR_DAT(0x0024U);
 8001b52:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 8001b56:	f7ff fd71 	bl	800163c <FSMC_WR_REG>
 8001b5a:	2024      	movs	r0, #36	; 0x24
 8001b5c:	f7ff fd80 	bl	8001660 <FSMC_WR_DAT>
	FSMC_WR_REG(BT3CTR_IDLE);		FSMC_WR_DAT(0x0024U);
 8001b60:	f64b 0001 	movw	r0, #47105	; 0xb801
 8001b64:	f7ff fd6a 	bl	800163c <FSMC_WR_REG>
 8001b68:	2024      	movs	r0, #36	; 0x24
 8001b6a:	f7ff fd79 	bl	8001660 <FSMC_WR_DAT>
	FSMC_WR_REG(BT3CTR_PART);		FSMC_WR_DAT(0x0024U);
 8001b6e:	f64b 0002 	movw	r0, #47106	; 0xb802
 8001b72:	f7ff fd63 	bl	800163c <FSMC_WR_REG>
 8001b76:	2024      	movs	r0, #36	; 0x24
 8001b78:	f7ff fd72 	bl	8001660 <FSMC_WR_DAT>

	// VGH  15V
	FSMC_WR_REG(VGHCTR);			FSMC_WR_DAT(0x01);
 8001b7c:	f44f 403f 	mov.w	r0, #48896	; 0xbf00
 8001b80:	f7ff fd5c 	bl	800163c <FSMC_WR_REG>
 8001b84:	2001      	movs	r0, #1
 8001b86:	f7ff fd6b 	bl	8001660 <FSMC_WR_DAT>
	FSMC_WR_REG(SETVGH_NORM);		FSMC_WR_DAT(0x000FU);
 8001b8a:	f44f 4033 	mov.w	r0, #45824	; 0xb300
 8001b8e:	f7ff fd55 	bl	800163c <FSMC_WR_REG>
 8001b92:	200f      	movs	r0, #15
 8001b94:	f7ff fd64 	bl	8001660 <FSMC_WR_DAT>
	FSMC_WR_REG(SETVGH_IDLE);		FSMC_WR_DAT(0x000FU);
 8001b98:	f24b 3001 	movw	r0, #45825	; 0xb301
 8001b9c:	f7ff fd4e 	bl	800163c <FSMC_WR_REG>
 8001ba0:	200f      	movs	r0, #15
 8001ba2:	f7ff fd5d 	bl	8001660 <FSMC_WR_DAT>
	FSMC_WR_REG(SETVGH_PART);		FSMC_WR_DAT(0x000FU);
 8001ba6:	f24b 3002 	movw	r0, #45826	; 0xb302
 8001baa:	f7ff fd47 	bl	800163c <FSMC_WR_REG>
 8001bae:	200f      	movs	r0, #15
 8001bb0:	f7ff fd56 	bl	8001660 <FSMC_WR_DAT>

	// VGH  ratio
	FSMC_WR_REG(BT4CTR_NORM);		FSMC_WR_DAT(0x0034U);
 8001bb4:	f44f 4039 	mov.w	r0, #47360	; 0xb900
 8001bb8:	f7ff fd40 	bl	800163c <FSMC_WR_REG>
 8001bbc:	2034      	movs	r0, #52	; 0x34
 8001bbe:	f7ff fd4f 	bl	8001660 <FSMC_WR_DAT>
	FSMC_WR_REG(BT4CTR_IDLE);		FSMC_WR_DAT(0x0034U);
 8001bc2:	f64b 1001 	movw	r0, #47361	; 0xb901
 8001bc6:	f7ff fd39 	bl	800163c <FSMC_WR_REG>
 8001bca:	2034      	movs	r0, #52	; 0x34
 8001bcc:	f7ff fd48 	bl	8001660 <FSMC_WR_DAT>
	FSMC_WR_REG(BT4CTR_PART);		FSMC_WR_DAT(0x0034U);
 8001bd0:	f64b 1002 	movw	r0, #47362	; 0xb902
 8001bd4:	f7ff fd32 	bl	800163c <FSMC_WR_REG>
 8001bd8:	2034      	movs	r0, #52	; 0x34
 8001bda:	f7ff fd41 	bl	8001660 <FSMC_WR_DAT>

	// VGL_REG  -10V
	FSMC_WR_REG(0xB500);			FSMC_WR_DAT(0x0008U);
 8001bde:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 8001be2:	f7ff fd2b 	bl	800163c <FSMC_WR_REG>
 8001be6:	2008      	movs	r0, #8
 8001be8:	f7ff fd3a 	bl	8001660 <FSMC_WR_DAT>
	FSMC_WR_REG(0xB500);			FSMC_WR_DAT(0x0008U);
 8001bec:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 8001bf0:	f7ff fd24 	bl	800163c <FSMC_WR_REG>
 8001bf4:	2008      	movs	r0, #8
 8001bf6:	f7ff fd33 	bl	8001660 <FSMC_WR_DAT>
	FSMC_WR_REG(0xB501);			FSMC_WR_DAT(0x0008U);
 8001bfa:	f24b 5001 	movw	r0, #46337	; 0xb501
 8001bfe:	f7ff fd1d 	bl	800163c <FSMC_WR_REG>
 8001c02:	2008      	movs	r0, #8
 8001c04:	f7ff fd2c 	bl	8001660 <FSMC_WR_DAT>
	FSMC_WR_REG(0xC200);			FSMC_WR_DAT(0x0003U);
 8001c08:	f44f 4042 	mov.w	r0, #49664	; 0xc200
 8001c0c:	f7ff fd16 	bl	800163c <FSMC_WR_REG>
 8001c10:	2003      	movs	r0, #3
 8001c12:	f7ff fd25 	bl	8001660 <FSMC_WR_DAT>

	// VGLX  ratio
	FSMC_WR_REG(BT5CTR_NORM);		FSMC_WR_DAT(0x0024U);
 8001c16:	f44f 403a 	mov.w	r0, #47616	; 0xba00
 8001c1a:	f7ff fd0f 	bl	800163c <FSMC_WR_REG>
 8001c1e:	2024      	movs	r0, #36	; 0x24
 8001c20:	f7ff fd1e 	bl	8001660 <FSMC_WR_DAT>
	FSMC_WR_REG(BT5CTR_IDLE);		FSMC_WR_DAT(0x0024U);
 8001c24:	f64b 2001 	movw	r0, #47617	; 0xba01
 8001c28:	f7ff fd08 	bl	800163c <FSMC_WR_REG>
 8001c2c:	2024      	movs	r0, #36	; 0x24
 8001c2e:	f7ff fd17 	bl	8001660 <FSMC_WR_DAT>
	FSMC_WR_REG(BT5CTR_PART);		FSMC_WR_DAT(0x0024U);
 8001c32:	f64b 2002 	movw	r0, #47618	; 0xba02
 8001c36:	f7ff fd01 	bl	800163c <FSMC_WR_REG>
 8001c3a:	2024      	movs	r0, #36	; 0x24
 8001c3c:	f7ff fd10 	bl	8001660 <FSMC_WR_DAT>

	// VGMP/VGSP 4.5V/0V
	FSMC_WR_REG(SETVGP_0);			FSMC_WR_DAT(0x0000U);
 8001c40:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8001c44:	f7ff fcfa 	bl	800163c <FSMC_WR_REG>
 8001c48:	2000      	movs	r0, #0
 8001c4a:	f7ff fd09 	bl	8001660 <FSMC_WR_DAT>
	FSMC_WR_REG(SETVGP_1);			FSMC_WR_DAT(0x0078U);
 8001c4e:	f64b 4001 	movw	r0, #48129	; 0xbc01
 8001c52:	f7ff fcf3 	bl	800163c <FSMC_WR_REG>
 8001c56:	2078      	movs	r0, #120	; 0x78
 8001c58:	f7ff fd02 	bl	8001660 <FSMC_WR_DAT>
	FSMC_WR_REG(SETVGP_2);			FSMC_WR_DAT(0x0000U);
 8001c5c:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8001c60:	f7ff fcec 	bl	800163c <FSMC_WR_REG>
 8001c64:	2000      	movs	r0, #0
 8001c66:	f7ff fcfb 	bl	8001660 <FSMC_WR_DAT>

	// VGMN/VGSN -4.5V/0V
	FSMC_WR_REG(SETVGN_0);			FSMC_WR_DAT(0x0000U);
 8001c6a:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
 8001c6e:	f7ff fce5 	bl	800163c <FSMC_WR_REG>
 8001c72:	2000      	movs	r0, #0
 8001c74:	f7ff fcf4 	bl	8001660 <FSMC_WR_DAT>
	FSMC_WR_REG(SETVGN_1);			FSMC_WR_DAT(0x0078U);
 8001c78:	f64b 5001 	movw	r0, #48385	; 0xbd01
 8001c7c:	f7ff fcde 	bl	800163c <FSMC_WR_REG>
 8001c80:	2078      	movs	r0, #120	; 0x78
 8001c82:	f7ff fced 	bl	8001660 <FSMC_WR_DAT>
	FSMC_WR_REG(SETVGN_2);			FSMC_WR_DAT(0x0000U);
 8001c86:	f64b 5002 	movw	r0, #48386	; 0xbd02
 8001c8a:	f7ff fcd7 	bl	800163c <FSMC_WR_REG>
 8001c8e:	2000      	movs	r0, #0
 8001c90:	f7ff fce6 	bl	8001660 <FSMC_WR_DAT>

	// VCOM  -1.325V
	FSMC_WR_REG(SETVCMOFF_0);		FSMC_WR_DAT(0x0000);
 8001c94:	f44f 403e 	mov.w	r0, #48640	; 0xbe00
 8001c98:	f7ff fcd0 	bl	800163c <FSMC_WR_REG>
 8001c9c:	2000      	movs	r0, #0
 8001c9e:	f7ff fcdf 	bl	8001660 <FSMC_WR_DAT>
	FSMC_WR_REG(SETVCMOFF_1);		FSMC_WR_DAT(0x0089);
 8001ca2:	f64b 6001 	movw	r0, #48641	; 0xbe01
 8001ca6:	f7ff fcc9 	bl	800163c <FSMC_WR_REG>
 8001caa:	2089      	movs	r0, #137	; 0x89
 8001cac:	f7ff fcd8 	bl	8001660 <FSMC_WR_DAT>
	FSMC_WR_REG(GMBCTR2_BASE | 0x0033U);    FSMC_WR_DAT(0x007FU);
*/
	//**************************************************************************************************************************//

	// Select Page 0
	FSMC_WR_REG(MAUCCTR_0);			FSMC_WR_DAT(0x0055U);
 8001cb0:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8001cb4:	f7ff fcc2 	bl	800163c <FSMC_WR_REG>
 8001cb8:	2055      	movs	r0, #85	; 0x55
 8001cba:	f7ff fcd1 	bl	8001660 <FSMC_WR_DAT>
	FSMC_WR_REG(MAUCCTR_1);			FSMC_WR_DAT(0x00AAU);
 8001cbe:	f24f 0001 	movw	r0, #61441	; 0xf001
 8001cc2:	f7ff fcbb 	bl	800163c <FSMC_WR_REG>
 8001cc6:	20aa      	movs	r0, #170	; 0xaa
 8001cc8:	f7ff fcca 	bl	8001660 <FSMC_WR_DAT>
	FSMC_WR_REG(MAUCCTR_2);			FSMC_WR_DAT(0x0052U);
 8001ccc:	f24f 0002 	movw	r0, #61442	; 0xf002
 8001cd0:	f7ff fcb4 	bl	800163c <FSMC_WR_REG>
 8001cd4:	2052      	movs	r0, #82	; 0x52
 8001cd6:	f7ff fcc3 	bl	8001660 <FSMC_WR_DAT>
	FSMC_WR_REG(MAUCCTR_3);			FSMC_WR_DAT(0x0008U);		// Enable Manufacture Command Set
 8001cda:	f24f 0003 	movw	r0, #61443	; 0xf003
 8001cde:	f7ff fcad 	bl	800163c <FSMC_WR_REG>
 8001ce2:	2008      	movs	r0, #8
 8001ce4:	f7ff fcbc 	bl	8001660 <FSMC_WR_DAT>
	FSMC_WR_REG(MAUCCTR_4);			FSMC_WR_DAT(0x0000U);		// Select page 0
 8001ce8:	f24f 0004 	movw	r0, #61444	; 0xf004
 8001cec:	f7ff fca6 	bl	800163c <FSMC_WR_REG>
 8001cf0:	2000      	movs	r0, #0
 8001cf2:	f7ff fcb5 	bl	8001660 <FSMC_WR_DAT>

	// DISPLAY CONTROL
	FSMC_WR_REG(DOPCTR_0);			FSMC_WR_DAT(0x00CCU);
 8001cf6:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 8001cfa:	f7ff fc9f 	bl	800163c <FSMC_WR_REG>
 8001cfe:	20cc      	movs	r0, #204	; 0xcc
 8001d00:	f7ff fcae 	bl	8001660 <FSMC_WR_DAT>
	FSMC_WR_REG(DOPCTR_1);			FSMC_WR_DAT(0x0000U);
 8001d04:	f24b 1001 	movw	r0, #45313	; 0xb101
 8001d08:	f7ff fc98 	bl	800163c <FSMC_WR_REG>
 8001d0c:	2000      	movs	r0, #0
 8001d0e:	f7ff fca7 	bl	8001660 <FSMC_WR_DAT>

	FSMC_WR_REG(DPRSLCTR);			FSMC_WR_DAT(0x0050U);			// Display Resolution 480RGB x 800
 8001d12:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 8001d16:	f7ff fc91 	bl	800163c <FSMC_WR_REG>
 8001d1a:	2050      	movs	r0, #80	; 0x50
 8001d1c:	f7ff fca0 	bl	8001660 <FSMC_WR_DAT>

	// SOURCE HOLD TIME
	FSMC_WR_REG(SDHDTCTR);			FSMC_WR_DAT(0x0005U);
 8001d20:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 8001d24:	f7ff fc8a 	bl	800163c <FSMC_WR_REG>
 8001d28:	2005      	movs	r0, #5
 8001d2a:	f7ff fc99 	bl	8001660 <FSMC_WR_DAT>

	// Set Gate EQ
	FSMC_WR_REG(GSEQCTR_ST);		FSMC_WR_DAT(0x0070U);
 8001d2e:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8001d32:	f7ff fc83 	bl	800163c <FSMC_WR_REG>
 8001d36:	2070      	movs	r0, #112	; 0x70
 8001d38:	f7ff fc92 	bl	8001660 <FSMC_WR_DAT>
	FSMC_WR_REG(GSEQCTR_CK);		FSMC_WR_DAT(0x0070U);
 8001d3c:	f24b 7001 	movw	r0, #46849	; 0xb701
 8001d40:	f7ff fc7c 	bl	800163c <FSMC_WR_REG>
 8001d44:	2070      	movs	r0, #112	; 0x70
 8001d46:	f7ff fc8b 	bl	8001660 <FSMC_WR_DAT>

	// Source EQ control (Mode 2)
	FSMC_WR_REG(SDEQCTR_MOD );	FSMC_WR_DAT(0x0001U);
 8001d4a:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 8001d4e:	f7ff fc75 	bl	800163c <FSMC_WR_REG>
 8001d52:	2001      	movs	r0, #1
 8001d54:	f7ff fc84 	bl	8001660 <FSMC_WR_DAT>
	FSMC_WR_REG(SDEQCTR_EQS1);	FSMC_WR_DAT(0x0003U);
 8001d58:	f64b 0001 	movw	r0, #47105	; 0xb801
 8001d5c:	f7ff fc6e 	bl	800163c <FSMC_WR_REG>
 8001d60:	2003      	movs	r0, #3
 8001d62:	f7ff fc7d 	bl	8001660 <FSMC_WR_DAT>
	FSMC_WR_REG(SDEQCTR_EQS2);	FSMC_WR_DAT(0x0003U);
 8001d66:	f64b 0002 	movw	r0, #47106	; 0xb802
 8001d6a:	f7ff fc67 	bl	800163c <FSMC_WR_REG>
 8001d6e:	2003      	movs	r0, #3
 8001d70:	f7ff fc76 	bl	8001660 <FSMC_WR_DAT>
	FSMC_WR_REG(SDEQCTR_EQS3);	FSMC_WR_DAT(0x0003U);
 8001d74:	f64b 0003 	movw	r0, #47107	; 0xb803
 8001d78:	f7ff fc60 	bl	800163c <FSMC_WR_REG>
 8001d7c:	2003      	movs	r0, #3
 8001d7e:	f7ff fc6f 	bl	8001660 <FSMC_WR_DAT>

	// INVERSION MODE
	FSMC_WR_REG(INVCTR_NORM);		FSMC_WR_DAT(0x0002U);
 8001d82:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8001d86:	f7ff fc59 	bl	800163c <FSMC_WR_REG>
 8001d8a:	2002      	movs	r0, #2
 8001d8c:	f7ff fc68 	bl	8001660 <FSMC_WR_DAT>
	FSMC_WR_REG(INVCTR_IDLE);		FSMC_WR_DAT(0x0000U);
 8001d90:	f64b 4001 	movw	r0, #48129	; 0xbc01
 8001d94:	f7ff fc52 	bl	800163c <FSMC_WR_REG>
 8001d98:	2000      	movs	r0, #0
 8001d9a:	f7ff fc61 	bl	8001660 <FSMC_WR_DAT>
	FSMC_WR_REG(INVCTR_PART);		FSMC_WR_DAT(0x0000U);
 8001d9e:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8001da2:	f7ff fc4b 	bl	800163c <FSMC_WR_REG>
 8001da6:	2000      	movs	r0, #0
 8001da8:	f7ff fc5a 	bl	8001660 <FSMC_WR_DAT>

	// Timing control
	FSMC_WR_REG(0xC900);				FSMC_WR_DAT(0x00D0U);
 8001dac:	f44f 4049 	mov.w	r0, #51456	; 0xc900
 8001db0:	f7ff fc44 	bl	800163c <FSMC_WR_REG>
 8001db4:	20d0      	movs	r0, #208	; 0xd0
 8001db6:	f7ff fc53 	bl	8001660 <FSMC_WR_DAT>
	FSMC_WR_REG(0xC901);				FSMC_WR_DAT(0x0002U);
 8001dba:	f64c 1001 	movw	r0, #51457	; 0xc901
 8001dbe:	f7ff fc3d 	bl	800163c <FSMC_WR_REG>
 8001dc2:	2002      	movs	r0, #2
 8001dc4:	f7ff fc4c 	bl	8001660 <FSMC_WR_DAT>
	FSMC_WR_REG(0xC902);				FSMC_WR_DAT(0x0050U);
 8001dc8:	f64c 1002 	movw	r0, #51458	; 0xc902
 8001dcc:	f7ff fc36 	bl	800163c <FSMC_WR_REG>
 8001dd0:	2050      	movs	r0, #80	; 0x50
 8001dd2:	f7ff fc45 	bl	8001660 <FSMC_WR_DAT>
	FSMC_WR_REG(0xC903);				FSMC_WR_DAT(0x0050U);
 8001dd6:	f64c 1003 	movw	r0, #51459	; 0xc903
 8001dda:	f7ff fc2f 	bl	800163c <FSMC_WR_REG>
 8001dde:	2050      	movs	r0, #80	; 0x50
 8001de0:	f7ff fc3e 	bl	8001660 <FSMC_WR_DAT>
	FSMC_WR_REG(0xC904);				FSMC_WR_DAT(0x0050U);
 8001de4:	f64c 1004 	movw	r0, #51460	; 0xc904
 8001de8:	f7ff fc28 	bl	800163c <FSMC_WR_REG>
 8001dec:	2050      	movs	r0, #80	; 0x50
 8001dee:	f7ff fc37 	bl	8001660 <FSMC_WR_DAT>

	//**************************************************************************************************************************//
	// User Command Set
	FSMC_WR_REG(TEON);   				FSMC_WR_DAT(0x0000U);			// V-Blanking information only
 8001df2:	f44f 5054 	mov.w	r0, #13568	; 0x3500
 8001df6:	e003      	b.n	8001e00 <NT35510_Init+0x3fc>
 8001df8:	20047d38 	.word	0x20047d38
 8001dfc:	40020800 	.word	0x40020800
 8001e00:	f7ff fc1c 	bl	800163c <FSMC_WR_REG>
 8001e04:	2000      	movs	r0, #0
 8001e06:	f7ff fc2b 	bl	8001660 <FSMC_WR_DAT>


	FSMC_WR_REG(COLMOD);   			FSMC_WR_DAT(0x0055U);		// RGB and MCU Interface Data format 16-Bits
 8001e0a:	f44f 5068 	mov.w	r0, #14848	; 0x3a00
 8001e0e:	f7ff fc15 	bl	800163c <FSMC_WR_REG>
 8001e12:	2055      	movs	r0, #85	; 0x55
 8001e14:	f7ff fc24 	bl	8001660 <FSMC_WR_DAT>
	FSMC_WR_REG(MADCTL);   			FSMC_WR_DAT(0x0000U);		// MADCTL: MY MX MV RGB MH RSMX RSMY
 8001e18:	f44f 5058 	mov.w	r0, #13824	; 0x3600
 8001e1c:	f7ff fc0e 	bl	800163c <FSMC_WR_REG>
 8001e20:	2000      	movs	r0, #0
 8001e22:	f7ff fc1d 	bl	8001660 <FSMC_WR_DAT>


	FSMC_WR_REG(SLPOUT);   						// Sleep Out
 8001e26:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 8001e2a:	f7ff fc07 	bl	800163c <FSMC_WR_REG>

	HAL_Delay(120);
 8001e2e:	2078      	movs	r0, #120	; 0x78
 8001e30:	f002 fa1c 	bl	800426c <HAL_Delay>

	FSMC_WR_REG(DISPON);   						// Display On
 8001e34:	f44f 5024 	mov.w	r0, #10496	; 0x2900
 8001e38:	f7ff fc00 	bl	800163c <FSMC_WR_REG>

	HAL_Delay(200);
 8001e3c:	20c8      	movs	r0, #200	; 0xc8
 8001e3e:	f002 fa15 	bl	800426c <HAL_Delay>

	LCD_SetDirection(VERTICAL_UP);		// Vertical-up display orientation as default
 8001e42:	2000      	movs	r0, #0
 8001e44:	f7ff fc86 	bl	8001754 <LCD_SetDirection>
}
 8001e48:	bf00      	nop
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <MX_GPIO_Init>:

/** Configure pins
     PC9   ------> RCC_MCO_2
*/
void MX_GPIO_Init(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b08c      	sub	sp, #48	; 0x30
 8001e50:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e52:	f107 031c 	add.w	r3, r7, #28
 8001e56:	2200      	movs	r2, #0
 8001e58:	601a      	str	r2, [r3, #0]
 8001e5a:	605a      	str	r2, [r3, #4]
 8001e5c:	609a      	str	r2, [r3, #8]
 8001e5e:	60da      	str	r2, [r3, #12]
 8001e60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e62:	2300      	movs	r3, #0
 8001e64:	61bb      	str	r3, [r7, #24]
 8001e66:	4b8c      	ldr	r3, [pc, #560]	; (8002098 <MX_GPIO_Init+0x24c>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6a:	4a8b      	ldr	r2, [pc, #556]	; (8002098 <MX_GPIO_Init+0x24c>)
 8001e6c:	f043 0310 	orr.w	r3, r3, #16
 8001e70:	6313      	str	r3, [r2, #48]	; 0x30
 8001e72:	4b89      	ldr	r3, [pc, #548]	; (8002098 <MX_GPIO_Init+0x24c>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e76:	f003 0310 	and.w	r3, r3, #16
 8001e7a:	61bb      	str	r3, [r7, #24]
 8001e7c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e7e:	2300      	movs	r3, #0
 8001e80:	617b      	str	r3, [r7, #20]
 8001e82:	4b85      	ldr	r3, [pc, #532]	; (8002098 <MX_GPIO_Init+0x24c>)
 8001e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e86:	4a84      	ldr	r2, [pc, #528]	; (8002098 <MX_GPIO_Init+0x24c>)
 8001e88:	f043 0320 	orr.w	r3, r3, #32
 8001e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e8e:	4b82      	ldr	r3, [pc, #520]	; (8002098 <MX_GPIO_Init+0x24c>)
 8001e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e92:	f003 0320 	and.w	r3, r3, #32
 8001e96:	617b      	str	r3, [r7, #20]
 8001e98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	613b      	str	r3, [r7, #16]
 8001e9e:	4b7e      	ldr	r3, [pc, #504]	; (8002098 <MX_GPIO_Init+0x24c>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea2:	4a7d      	ldr	r2, [pc, #500]	; (8002098 <MX_GPIO_Init+0x24c>)
 8001ea4:	f043 0304 	orr.w	r3, r3, #4
 8001ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eaa:	4b7b      	ldr	r3, [pc, #492]	; (8002098 <MX_GPIO_Init+0x24c>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eae:	f003 0304 	and.w	r3, r3, #4
 8001eb2:	613b      	str	r3, [r7, #16]
 8001eb4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	60fb      	str	r3, [r7, #12]
 8001eba:	4b77      	ldr	r3, [pc, #476]	; (8002098 <MX_GPIO_Init+0x24c>)
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ebe:	4a76      	ldr	r2, [pc, #472]	; (8002098 <MX_GPIO_Init+0x24c>)
 8001ec0:	f043 0301 	orr.w	r3, r3, #1
 8001ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ec6:	4b74      	ldr	r3, [pc, #464]	; (8002098 <MX_GPIO_Init+0x24c>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	60fb      	str	r3, [r7, #12]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	60bb      	str	r3, [r7, #8]
 8001ed6:	4b70      	ldr	r3, [pc, #448]	; (8002098 <MX_GPIO_Init+0x24c>)
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eda:	4a6f      	ldr	r2, [pc, #444]	; (8002098 <MX_GPIO_Init+0x24c>)
 8001edc:	f043 0302 	orr.w	r3, r3, #2
 8001ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ee2:	4b6d      	ldr	r3, [pc, #436]	; (8002098 <MX_GPIO_Init+0x24c>)
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee6:	f003 0302 	and.w	r3, r3, #2
 8001eea:	60bb      	str	r3, [r7, #8]
 8001eec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001eee:	2300      	movs	r3, #0
 8001ef0:	607b      	str	r3, [r7, #4]
 8001ef2:	4b69      	ldr	r3, [pc, #420]	; (8002098 <MX_GPIO_Init+0x24c>)
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef6:	4a68      	ldr	r2, [pc, #416]	; (8002098 <MX_GPIO_Init+0x24c>)
 8001ef8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001efc:	6313      	str	r3, [r2, #48]	; 0x30
 8001efe:	4b66      	ldr	r3, [pc, #408]	; (8002098 <MX_GPIO_Init+0x24c>)
 8001f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f06:	607b      	str	r3, [r7, #4]
 8001f08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	603b      	str	r3, [r7, #0]
 8001f0e:	4b62      	ldr	r3, [pc, #392]	; (8002098 <MX_GPIO_Init+0x24c>)
 8001f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f12:	4a61      	ldr	r2, [pc, #388]	; (8002098 <MX_GPIO_Init+0x24c>)
 8001f14:	f043 0308 	orr.w	r3, r3, #8
 8001f18:	6313      	str	r3, [r2, #48]	; 0x30
 8001f1a:	4b5f      	ldr	r3, [pc, #380]	; (8002098 <MX_GPIO_Init+0x24c>)
 8001f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1e:	f003 0308 	and.w	r3, r3, #8
 8001f22:	603b      	str	r3, [r7, #0]
 8001f24:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCP73831_PROG_GPIO_Port, MCP73831_PROG_Pin, GPIO_PIN_SET);
 8001f26:	2201      	movs	r2, #1
 8001f28:	2108      	movs	r1, #8
 8001f2a:	485c      	ldr	r0, [pc, #368]	; (800209c <MX_GPIO_Init+0x250>)
 8001f2c:	f003 fc26 	bl	800577c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OV7670_PWDN_Pin|OV7670_NRST_Pin|MIC5357_2V8_EN_Pin|FSMC_NRST_Pin, GPIO_PIN_RESET);
 8001f30:	2200      	movs	r2, #0
 8001f32:	2147      	movs	r1, #71	; 0x47
 8001f34:	485a      	ldr	r0, [pc, #360]	; (80020a0 <MX_GPIO_Init+0x254>)
 8001f36:	f003 fc21 	bl	800577c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, USER_LED_Pin|TOUCH_YD_Pin|TOUCH_XL_Pin, GPIO_PIN_RESET);
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	2132      	movs	r1, #50	; 0x32
 8001f3e:	4859      	ldr	r0, [pc, #356]	; (80020a4 <MX_GPIO_Init+0x258>)
 8001f40:	f003 fc1c 	bl	800577c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BOOT0_EN_Pin|PB5_GPIO_Pin, GPIO_PIN_RESET);
 8001f44:	2200      	movs	r2, #0
 8001f46:	2122      	movs	r1, #34	; 0x22
 8001f48:	4857      	ldr	r0, [pc, #348]	; (80020a8 <MX_GPIO_Init+0x25c>)
 8001f4a:	f003 fc17 	bl	800577c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MCP73831_STAT_Pin;
 8001f4e:	2304      	movs	r3, #4
 8001f50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f52:	2300      	movs	r3, #0
 8001f54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f56:	2300      	movs	r3, #0
 8001f58:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MCP73831_STAT_GPIO_Port, &GPIO_InitStruct);
 8001f5a:	f107 031c 	add.w	r3, r7, #28
 8001f5e:	4619      	mov	r1, r3
 8001f60:	484e      	ldr	r0, [pc, #312]	; (800209c <MX_GPIO_Init+0x250>)
 8001f62:	f003 fa77 	bl	8005454 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MCP73831_PROG_Pin;
 8001f66:	2308      	movs	r3, #8
 8001f68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001f6a:	2311      	movs	r3, #17
 8001f6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f72:	2300      	movs	r3, #0
 8001f74:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(MCP73831_PROG_GPIO_Port, &GPIO_InitStruct);
 8001f76:	f107 031c 	add.w	r3, r7, #28
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	4847      	ldr	r0, [pc, #284]	; (800209c <MX_GPIO_Init+0x250>)
 8001f7e:	f003 fa69 	bl	8005454 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = OV7670_D0_Pin|OV7670_D1_Pin|OV7670_D2_Pin|OV7670_D3_Pin
 8001f82:	23ff      	movs	r3, #255	; 0xff
 8001f84:	61fb      	str	r3, [r7, #28]
                          |OV7670_D4_Pin|OV7670_D5_Pin|OV7670_D6_Pin|OV7670_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f86:	2300      	movs	r3, #0
 8001f88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f8e:	f107 031c 	add.w	r3, r7, #28
 8001f92:	4619      	mov	r1, r3
 8001f94:	4845      	ldr	r0, [pc, #276]	; (80020ac <MX_GPIO_Init+0x260>)
 8001f96:	f003 fa5d 	bl	8005454 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = OV7670_PWDN_Pin|MIC5357_2V8_EN_Pin|FSMC_NRST_Pin;
 8001f9a:	2345      	movs	r3, #69	; 0x45
 8001f9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001faa:	f107 031c 	add.w	r3, r7, #28
 8001fae:	4619      	mov	r1, r3
 8001fb0:	483b      	ldr	r0, [pc, #236]	; (80020a0 <MX_GPIO_Init+0x254>)
 8001fb2:	f003 fa4f 	bl	8005454 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OV7670_NRST_Pin;
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001fba:	2311      	movs	r3, #17
 8001fbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OV7670_NRST_GPIO_Port, &GPIO_InitStruct);
 8001fc6:	f107 031c 	add.w	r3, r7, #28
 8001fca:	4619      	mov	r1, r3
 8001fcc:	4834      	ldr	r0, [pc, #208]	; (80020a0 <MX_GPIO_Init+0x254>)
 8001fce:	f003 fa41 	bl	8005454 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USER_LED_Pin|TOUCH_YD_Pin|TOUCH_XL_Pin;
 8001fd2:	2332      	movs	r3, #50	; 0x32
 8001fd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fe2:	f107 031c 	add.w	r3, r7, #28
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	482e      	ldr	r0, [pc, #184]	; (80020a4 <MX_GPIO_Init+0x258>)
 8001fea:	f003 fa33 	bl	8005454 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOUCH_YU_Pin;
 8001fee:	2308      	movs	r3, #8
 8001ff0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ff2:	4b2f      	ldr	r3, [pc, #188]	; (80020b0 <MX_GPIO_Init+0x264>)
 8001ff4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TOUCH_YU_GPIO_Port, &GPIO_InitStruct);
 8001ffa:	f107 031c 	add.w	r3, r7, #28
 8001ffe:	4619      	mov	r1, r3
 8002000:	4828      	ldr	r0, [pc, #160]	; (80020a4 <MX_GPIO_Init+0x258>)
 8002002:	f003 fa27 	bl	8005454 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT0_EN_Pin;
 8002006:	2302      	movs	r3, #2
 8002008:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800200a:	2301      	movs	r3, #1
 800200c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200e:	2300      	movs	r3, #0
 8002010:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002012:	2300      	movs	r3, #0
 8002014:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BOOT0_EN_GPIO_Port, &GPIO_InitStruct);
 8002016:	f107 031c 	add.w	r3, r7, #28
 800201a:	4619      	mov	r1, r3
 800201c:	4822      	ldr	r0, [pc, #136]	; (80020a8 <MX_GPIO_Init+0x25c>)
 800201e:	f003 fa19 	bl	8005454 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OV7670_HREF_Pin;
 8002022:	2301      	movs	r3, #1
 8002024:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002026:	4b22      	ldr	r3, [pc, #136]	; (80020b0 <MX_GPIO_Init+0x264>)
 8002028:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202a:	2300      	movs	r3, #0
 800202c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OV7670_HREF_GPIO_Port, &GPIO_InitStruct);
 800202e:	f107 031c 	add.w	r3, r7, #28
 8002032:	4619      	mov	r1, r3
 8002034:	481f      	ldr	r0, [pc, #124]	; (80020b4 <MX_GPIO_Init+0x268>)
 8002036:	f003 fa0d 	bl	8005454 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OV7670_VSYNC_Pin;
 800203a:	2302      	movs	r3, #2
 800203c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800203e:	4b1e      	ldr	r3, [pc, #120]	; (80020b8 <MX_GPIO_Init+0x26c>)
 8002040:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002042:	2300      	movs	r3, #0
 8002044:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OV7670_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8002046:	f107 031c 	add.w	r3, r7, #28
 800204a:	4619      	mov	r1, r3
 800204c:	4819      	ldr	r0, [pc, #100]	; (80020b4 <MX_GPIO_Init+0x268>)
 800204e:	f003 fa01 	bl	8005454 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OV7670_XCLK_Pin;
 8002052:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002056:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002058:	2302      	movs	r3, #2
 800205a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205c:	2300      	movs	r3, #0
 800205e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002060:	2303      	movs	r3, #3
 8002062:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002064:	2300      	movs	r3, #0
 8002066:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OV7670_XCLK_GPIO_Port, &GPIO_InitStruct);
 8002068:	f107 031c 	add.w	r3, r7, #28
 800206c:	4619      	mov	r1, r3
 800206e:	480c      	ldr	r0, [pc, #48]	; (80020a0 <MX_GPIO_Init+0x254>)
 8002070:	f003 f9f0 	bl	8005454 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PB5_GPIO_Pin;
 8002074:	2320      	movs	r3, #32
 8002076:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002078:	2311      	movs	r3, #17
 800207a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207c:	2300      	movs	r3, #0
 800207e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002080:	2300      	movs	r3, #0
 8002082:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(PB5_GPIO_GPIO_Port, &GPIO_InitStruct);
 8002084:	f107 031c 	add.w	r3, r7, #28
 8002088:	4619      	mov	r1, r3
 800208a:	4807      	ldr	r0, [pc, #28]	; (80020a8 <MX_GPIO_Init+0x25c>)
 800208c:	f003 f9e2 	bl	8005454 <HAL_GPIO_Init>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);*/

}
 8002090:	bf00      	nop
 8002092:	3730      	adds	r7, #48	; 0x30
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	40023800 	.word	0x40023800
 800209c:	40021000 	.word	0x40021000
 80020a0:	40020800 	.word	0x40020800
 80020a4:	40020000 	.word	0x40020000
 80020a8:	40020400 	.word	0x40020400
 80020ac:	40021400 	.word	0x40021400
 80020b0:	10210000 	.word	0x10210000
 80020b4:	40021800 	.word	0x40021800
 80020b8:	10310000 	.word	0x10310000

080020bc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80020c0:	4b12      	ldr	r3, [pc, #72]	; (800210c <MX_I2C1_Init+0x50>)
 80020c2:	4a13      	ldr	r2, [pc, #76]	; (8002110 <MX_I2C1_Init+0x54>)
 80020c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80020c6:	4b11      	ldr	r3, [pc, #68]	; (800210c <MX_I2C1_Init+0x50>)
 80020c8:	4a12      	ldr	r2, [pc, #72]	; (8002114 <MX_I2C1_Init+0x58>)
 80020ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80020cc:	4b0f      	ldr	r3, [pc, #60]	; (800210c <MX_I2C1_Init+0x50>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 66;
 80020d2:	4b0e      	ldr	r3, [pc, #56]	; (800210c <MX_I2C1_Init+0x50>)
 80020d4:	2242      	movs	r2, #66	; 0x42
 80020d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020d8:	4b0c      	ldr	r3, [pc, #48]	; (800210c <MX_I2C1_Init+0x50>)
 80020da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80020de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80020e0:	4b0a      	ldr	r3, [pc, #40]	; (800210c <MX_I2C1_Init+0x50>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80020e6:	4b09      	ldr	r3, [pc, #36]	; (800210c <MX_I2C1_Init+0x50>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020ec:	4b07      	ldr	r3, [pc, #28]	; (800210c <MX_I2C1_Init+0x50>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 80020f2:	4b06      	ldr	r3, [pc, #24]	; (800210c <MX_I2C1_Init+0x50>)
 80020f4:	2280      	movs	r2, #128	; 0x80
 80020f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80020f8:	4804      	ldr	r0, [pc, #16]	; (800210c <MX_I2C1_Init+0x50>)
 80020fa:	f003 fb71 	bl	80057e0 <HAL_I2C_Init>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002104:	f000 f95e 	bl	80023c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002108:	bf00      	nop
 800210a:	bd80      	pop	{r7, pc}
 800210c:	20047ce4 	.word	0x20047ce4
 8002110:	40005400 	.word	0x40005400
 8002114:	00061a80 	.word	0x00061a80

08002118 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b08a      	sub	sp, #40	; 0x28
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002120:	f107 0314 	add.w	r3, r7, #20
 8002124:	2200      	movs	r2, #0
 8002126:	601a      	str	r2, [r3, #0]
 8002128:	605a      	str	r2, [r3, #4]
 800212a:	609a      	str	r2, [r3, #8]
 800212c:	60da      	str	r2, [r3, #12]
 800212e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a1d      	ldr	r2, [pc, #116]	; (80021ac <HAL_I2C_MspInit+0x94>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d134      	bne.n	80021a4 <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800213a:	2300      	movs	r3, #0
 800213c:	613b      	str	r3, [r7, #16]
 800213e:	4b1c      	ldr	r3, [pc, #112]	; (80021b0 <HAL_I2C_MspInit+0x98>)
 8002140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002142:	4a1b      	ldr	r2, [pc, #108]	; (80021b0 <HAL_I2C_MspInit+0x98>)
 8002144:	f043 0302 	orr.w	r3, r3, #2
 8002148:	6313      	str	r3, [r2, #48]	; 0x30
 800214a:	4b19      	ldr	r3, [pc, #100]	; (80021b0 <HAL_I2C_MspInit+0x98>)
 800214c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214e:	f003 0302 	and.w	r3, r3, #2
 8002152:	613b      	str	r3, [r7, #16]
 8002154:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = OV7670_SIOC_Pin|OV7670_SIOD_Pin;
 8002156:	f44f 7340 	mov.w	r3, #768	; 0x300
 800215a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800215c:	2312      	movs	r3, #18
 800215e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002160:	2301      	movs	r3, #1
 8002162:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002164:	2303      	movs	r3, #3
 8002166:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002168:	2304      	movs	r3, #4
 800216a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800216c:	f107 0314 	add.w	r3, r7, #20
 8002170:	4619      	mov	r1, r3
 8002172:	4810      	ldr	r0, [pc, #64]	; (80021b4 <HAL_I2C_MspInit+0x9c>)
 8002174:	f003 f96e 	bl	8005454 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002178:	2300      	movs	r3, #0
 800217a:	60fb      	str	r3, [r7, #12]
 800217c:	4b0c      	ldr	r3, [pc, #48]	; (80021b0 <HAL_I2C_MspInit+0x98>)
 800217e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002180:	4a0b      	ldr	r2, [pc, #44]	; (80021b0 <HAL_I2C_MspInit+0x98>)
 8002182:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002186:	6413      	str	r3, [r2, #64]	; 0x40
 8002188:	4b09      	ldr	r3, [pc, #36]	; (80021b0 <HAL_I2C_MspInit+0x98>)
 800218a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002190:	60fb      	str	r3, [r7, #12]
 8002192:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002194:	2200      	movs	r2, #0
 8002196:	2100      	movs	r1, #0
 8002198:	201f      	movs	r0, #31
 800219a:	f002 fd66 	bl	8004c6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800219e:	201f      	movs	r0, #31
 80021a0:	f002 fd7f 	bl	8004ca2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80021a4:	bf00      	nop
 80021a6:	3728      	adds	r7, #40	; 0x28
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	40005400 	.word	0x40005400
 80021b0:	40023800 	.word	0x40023800
 80021b4:	40020400 	.word	0x40020400

080021b8 <i2c_read_reg>:
//extern I2C_HandleTypeDef hi2c1;


//=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~
uint8_t i2c_read_reg(uint8_t address, uint8_t reg)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af02      	add	r7, sp, #8
 80021be:	4603      	mov	r3, r0
 80021c0:	460a      	mov	r2, r1
 80021c2:	71fb      	strb	r3, [r7, #7]
 80021c4:	4613      	mov	r3, r2
 80021c6:	71bb      	strb	r3, [r7, #6]
	tx_data[0] = reg;
 80021c8:	4a0d      	ldr	r2, [pc, #52]	; (8002200 <i2c_read_reg+0x48>)
 80021ca:	79bb      	ldrb	r3, [r7, #6]
 80021cc:	7013      	strb	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&hi2c1, 0x42U, tx_data, 1, 10);
 80021ce:	230a      	movs	r3, #10
 80021d0:	9300      	str	r3, [sp, #0]
 80021d2:	2301      	movs	r3, #1
 80021d4:	4a0a      	ldr	r2, [pc, #40]	; (8002200 <i2c_read_reg+0x48>)
 80021d6:	2142      	movs	r1, #66	; 0x42
 80021d8:	480a      	ldr	r0, [pc, #40]	; (8002204 <i2c_read_reg+0x4c>)
 80021da:	f003 fc45 	bl	8005a68 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, 0x42U, rx_data, 1, 10);
 80021de:	230a      	movs	r3, #10
 80021e0:	9300      	str	r3, [sp, #0]
 80021e2:	2301      	movs	r3, #1
 80021e4:	4a08      	ldr	r2, [pc, #32]	; (8002208 <i2c_read_reg+0x50>)
 80021e6:	2142      	movs	r1, #66	; 0x42
 80021e8:	4806      	ldr	r0, [pc, #24]	; (8002204 <i2c_read_reg+0x4c>)
 80021ea:	f003 fd3b 	bl	8005c64 <HAL_I2C_Master_Receive>
	HAL_Delay(1);
 80021ee:	2001      	movs	r0, #1
 80021f0:	f002 f83c 	bl	800426c <HAL_Delay>
	return rx_data[0];
 80021f4:	4b04      	ldr	r3, [pc, #16]	; (8002208 <i2c_read_reg+0x50>)
 80021f6:	781b      	ldrb	r3, [r3, #0]
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3708      	adds	r7, #8
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	200000e4 	.word	0x200000e4
 8002204:	20047ce4 	.word	0x20047ce4
 8002208:	200000ec 	.word	0x200000ec

0800220c <i2c_write_reg>:



//=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~
void i2c_write_reg(uint8_t address, uint8_t reg, uint8_t data)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af02      	add	r7, sp, #8
 8002212:	4603      	mov	r3, r0
 8002214:	71fb      	strb	r3, [r7, #7]
 8002216:	460b      	mov	r3, r1
 8002218:	71bb      	strb	r3, [r7, #6]
 800221a:	4613      	mov	r3, r2
 800221c:	717b      	strb	r3, [r7, #5]
	tx_data[0] = reg;
 800221e:	4a0a      	ldr	r2, [pc, #40]	; (8002248 <i2c_write_reg+0x3c>)
 8002220:	79bb      	ldrb	r3, [r7, #6]
 8002222:	7013      	strb	r3, [r2, #0]
	tx_data[1] = data;
 8002224:	4a08      	ldr	r2, [pc, #32]	; (8002248 <i2c_write_reg+0x3c>)
 8002226:	797b      	ldrb	r3, [r7, #5]
 8002228:	7053      	strb	r3, [r2, #1]
	HAL_I2C_Master_Transmit(&hi2c1, 0x42U, tx_data, 2, 10);
 800222a:	230a      	movs	r3, #10
 800222c:	9300      	str	r3, [sp, #0]
 800222e:	2302      	movs	r3, #2
 8002230:	4a05      	ldr	r2, [pc, #20]	; (8002248 <i2c_write_reg+0x3c>)
 8002232:	2142      	movs	r1, #66	; 0x42
 8002234:	4805      	ldr	r0, [pc, #20]	; (800224c <i2c_write_reg+0x40>)
 8002236:	f003 fc17 	bl	8005a68 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 800223a:	2001      	movs	r0, #1
 800223c:	f002 f816 	bl	800426c <HAL_Delay>
}
 8002240:	bf00      	nop
 8002242:	3708      	adds	r7, #8
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	200000e4 	.word	0x200000e4
 800224c:	20047ce4 	.word	0x20047ce4

08002250 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002254:	f001 ff98 	bl	8004188 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002258:	f000 f816 	bl	8002288 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800225c:	f7ff fdf6 	bl	8001e4c <MX_GPIO_Init>
  MX_DMA_Init();
 8002260:	f7ff f8dc 	bl	800141c <MX_DMA_Init>
  MX_TIM1_Init();
 8002264:	f000 fc6c 	bl	8002b40 <MX_TIM1_Init>
  MX_FSMC_Init();
 8002268:	f7ff f8f2 	bl	8001450 <MX_FSMC_Init>
  MX_I2C1_Init();
 800226c:	f7ff ff26 	bl	80020bc <MX_I2C1_Init>
  MX_TIM3_Init();
 8002270:	f000 fcbc 	bl	8002bec <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8002274:	f001 fee2 	bl	800403c <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8002278:	f7fe fed4 	bl	8001024 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  app_main_init();
 800227c:	f7fe ff5e 	bl	800113c <app_main_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  app_main_loop();
 8002280:	f7fe ffc2 	bl	8001208 <app_main_loop>
 8002284:	e7fc      	b.n	8002280 <main+0x30>
	...

08002288 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b0aa      	sub	sp, #168	; 0xa8
 800228c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800228e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002292:	2234      	movs	r2, #52	; 0x34
 8002294:	2100      	movs	r1, #0
 8002296:	4618      	mov	r0, r3
 8002298:	f024 fdd0 	bl	8026e3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800229c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]
 80022a4:	605a      	str	r2, [r3, #4]
 80022a6:	609a      	str	r2, [r3, #8]
 80022a8:	60da      	str	r2, [r3, #12]
 80022aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022ac:	f107 0308 	add.w	r3, r7, #8
 80022b0:	2258      	movs	r2, #88	; 0x58
 80022b2:	2100      	movs	r1, #0
 80022b4:	4618      	mov	r0, r3
 80022b6:	f024 fdc1 	bl	8026e3c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80022ba:	2300      	movs	r3, #0
 80022bc:	607b      	str	r3, [r7, #4]
 80022be:	4b3f      	ldr	r3, [pc, #252]	; (80023bc <_Z18SystemClock_Configv+0x134>)
 80022c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c2:	4a3e      	ldr	r2, [pc, #248]	; (80023bc <_Z18SystemClock_Configv+0x134>)
 80022c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022c8:	6413      	str	r3, [r2, #64]	; 0x40
 80022ca:	4b3c      	ldr	r3, [pc, #240]	; (80023bc <_Z18SystemClock_Configv+0x134>)
 80022cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022d2:	607b      	str	r3, [r7, #4]
 80022d4:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80022d6:	2300      	movs	r3, #0
 80022d8:	603b      	str	r3, [r7, #0]
 80022da:	4b39      	ldr	r3, [pc, #228]	; (80023c0 <_Z18SystemClock_Configv+0x138>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a38      	ldr	r2, [pc, #224]	; (80023c0 <_Z18SystemClock_Configv+0x138>)
 80022e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022e4:	6013      	str	r3, [r2, #0]
 80022e6:	4b36      	ldr	r3, [pc, #216]	; (80023c0 <_Z18SystemClock_Configv+0x138>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80022ee:	603b      	str	r3, [r7, #0]
 80022f0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80022f2:	2302      	movs	r3, #2
 80022f4:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022f6:	2301      	movs	r3, #1
 80022f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80022fc:	2310      	movs	r3, #16
 80022fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002302:	2302      	movs	r3, #2
 8002304:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002308:	2300      	movs	r3, #0
 800230a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLM = 8;
 800230e:	2308      	movs	r3, #8
 8002310:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLN = 100;
 8002314:	2364      	movs	r3, #100	; 0x64
 8002316:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800231a:	2302      	movs	r3, #2
 800231c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002320:	2302      	movs	r3, #2
 8002322:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002326:	2302      	movs	r3, #2
 8002328:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800232c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002330:	4618      	mov	r0, r3
 8002332:	f006 fa4b 	bl	80087cc <HAL_RCC_OscConfig>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	bf14      	ite	ne
 800233c:	2301      	movne	r3, #1
 800233e:	2300      	moveq	r3, #0
 8002340:	b2db      	uxtb	r3, r3
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <_Z18SystemClock_Configv+0xc2>
  {
    Error_Handler();
 8002346:	f000 f83d 	bl	80023c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800234a:	230f      	movs	r3, #15
 800234c:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800234e:	2302      	movs	r3, #2
 8002350:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002352:	2300      	movs	r3, #0
 8002354:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002356:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800235a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800235c:	2300      	movs	r3, #0
 800235e:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002360:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002364:	2103      	movs	r1, #3
 8002366:	4618      	mov	r0, r3
 8002368:	f005 fd6c 	bl	8007e44 <HAL_RCC_ClockConfig>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	bf14      	ite	ne
 8002372:	2301      	movne	r3, #1
 8002374:	2300      	moveq	r3, #0
 8002376:	b2db      	uxtb	r3, r3
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <_Z18SystemClock_Configv+0xf8>
  {
    Error_Handler();
 800237c:	f000 f822 	bl	80023c4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_TIM;
 8002380:	2304      	movs	r3, #4
 8002382:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 8002384:	2301      	movs	r3, #1
 8002386:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800238a:	f107 0308 	add.w	r3, r7, #8
 800238e:	4618      	mov	r0, r3
 8002390:	f005 ff90 	bl	80082b4 <HAL_RCCEx_PeriphCLKConfig>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	bf14      	ite	ne
 800239a:	2301      	movne	r3, #1
 800239c:	2300      	moveq	r3, #0
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d001      	beq.n	80023a8 <_Z18SystemClock_Configv+0x120>
  {
    Error_Handler();
 80023a4:	f000 f80e 	bl	80023c4 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_SYSCLK, RCC_MCODIV_5);
 80023a8:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 80023ac:	2100      	movs	r1, #0
 80023ae:	2001      	movs	r0, #1
 80023b0:	f005 fe2e 	bl	8008010 <HAL_RCC_MCOConfig>
}
 80023b4:	bf00      	nop
 80023b6:	37a8      	adds	r7, #168	; 0xa8
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	40023800 	.word	0x40023800
 80023c0:	40007000 	.word	0x40007000

080023c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023c8:	b672      	cpsid	i
}
 80023ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023cc:	e7fe      	b.n	80023cc <Error_Handler+0x8>

080023ce <ov7670_frame_control>:

/*=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~
*
=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~*/
void ov7670_frame_control(int16_t hStart, int16_t hStop, int16_t vStart, int16_t vStop) // 154 14
{
 80023ce:	b590      	push	{r4, r7, lr}
 80023d0:	b083      	sub	sp, #12
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	4604      	mov	r4, r0
 80023d6:	4608      	mov	r0, r1
 80023d8:	4611      	mov	r1, r2
 80023da:	461a      	mov	r2, r3
 80023dc:	4623      	mov	r3, r4
 80023de:	80fb      	strh	r3, [r7, #6]
 80023e0:	4603      	mov	r3, r0
 80023e2:	80bb      	strh	r3, [r7, #4]
 80023e4:	460b      	mov	r3, r1
 80023e6:	807b      	strh	r3, [r7, #2]
 80023e8:	4613      	mov	r3, r2
 80023ea:	803b      	strh	r3, [r7, #0]
	//int hStop = (hStart + 640) % 784; // 10
	ov7670_write_register(OV7670_HSTART,	hStart >> 3);//0x15); 17
 80023ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023f0:	10db      	asrs	r3, r3, #3
 80023f2:	b21b      	sxth	r3, r3
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	4619      	mov	r1, r3
 80023f8:	2017      	movs	r0, #23
 80023fa:	f000 f8b3 	bl	8002564 <ov7670_write_register>
	ov7670_write_register(OV7670_HSTOP,		hStop >> 3);//0x03);  18
 80023fe:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002402:	10db      	asrs	r3, r3, #3
 8002404:	b21b      	sxth	r3, r3
 8002406:	b2db      	uxtb	r3, r3
 8002408:	4619      	mov	r1, r3
 800240a:	2018      	movs	r0, #24
 800240c:	f000 f8aa 	bl	8002564 <ov7670_write_register>
	ov7670_write_register(OV7670_HREF, 		((hStop & 0b111) << 3) | (hStart & 0b111));//0x80); 32
 8002410:	88bb      	ldrh	r3, [r7, #4]
 8002412:	00db      	lsls	r3, r3, #3
 8002414:	b25b      	sxtb	r3, r3
 8002416:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800241a:	b25a      	sxtb	r2, r3
 800241c:	88fb      	ldrh	r3, [r7, #6]
 800241e:	b25b      	sxtb	r3, r3
 8002420:	f003 0307 	and.w	r3, r3, #7
 8002424:	b25b      	sxtb	r3, r3
 8002426:	4313      	orrs	r3, r2
 8002428:	b25b      	sxtb	r3, r3
 800242a:	b2db      	uxtb	r3, r3
 800242c:	4619      	mov	r1, r3
 800242e:	2032      	movs	r0, #50	; 0x32
 8002430:	f000 f898 	bl	8002564 <ov7670_write_register>

	//int vStop = (vStart + 480); // 494
	ov7670_write_register(OV7670_VSTART, 	vStart >> 2);//0x03); 19
 8002434:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002438:	109b      	asrs	r3, r3, #2
 800243a:	b21b      	sxth	r3, r3
 800243c:	b2db      	uxtb	r3, r3
 800243e:	4619      	mov	r1, r3
 8002440:	2019      	movs	r0, #25
 8002442:	f000 f88f 	bl	8002564 <ov7670_write_register>
	ov7670_write_register(OV7670_VSTOP, 	vStop >> 2);//0x7b);  1a
 8002446:	f9b7 3000 	ldrsh.w	r3, [r7]
 800244a:	109b      	asrs	r3, r3, #2
 800244c:	b21b      	sxth	r3, r3
 800244e:	b2db      	uxtb	r3, r3
 8002450:	4619      	mov	r1, r3
 8002452:	201a      	movs	r0, #26
 8002454:	f000 f886 	bl	8002564 <ov7670_write_register>
	ov7670_write_register(OV7670_VREF, 		((vStop & 0b11) << 2) | (vStart & 0b11));//0x00); 03
 8002458:	883b      	ldrh	r3, [r7, #0]
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	b25b      	sxtb	r3, r3
 800245e:	f003 030c 	and.w	r3, r3, #12
 8002462:	b25a      	sxtb	r2, r3
 8002464:	887b      	ldrh	r3, [r7, #2]
 8002466:	b25b      	sxtb	r3, r3
 8002468:	f003 0303 	and.w	r3, r3, #3
 800246c:	b25b      	sxtb	r3, r3
 800246e:	4313      	orrs	r3, r2
 8002470:	b25b      	sxtb	r3, r3
 8002472:	b2db      	uxtb	r3, r3
 8002474:	4619      	mov	r1, r3
 8002476:	2003      	movs	r0, #3
 8002478:	f000 f874 	bl	8002564 <ov7670_write_register>

}
 800247c:	bf00      	nop
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	bd90      	pop	{r4, r7, pc}

08002484 <ov7670_scaling_control>:
*
* A value of 0x20 or below indicates 1x scaling ratio and value of 0x40 or higher
* indicates 0.5x scaling ratio.
=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~*/
void ov7670_scaling_control(uint16_t width, uint16_t height)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	4603      	mov	r3, r0
 800248c:	460a      	mov	r2, r1
 800248e:	80fb      	strh	r3, [r7, #6]
 8002490:	4613      	mov	r3, r2
 8002492:	80bb      	strh	r3, [r7, #4]
	uint16_t scl_xsc = 32 * ((float)g_ov7670_info.frame_params.width / width);
 8002494:	4b31      	ldr	r3, [pc, #196]	; (800255c <ov7670_scaling_control+0xd8>)
 8002496:	88db      	ldrh	r3, [r3, #6]
 8002498:	ee07 3a90 	vmov	s15, r3
 800249c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024a0:	88fb      	ldrh	r3, [r7, #6]
 80024a2:	ee07 3a90 	vmov	s15, r3
 80024a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024ae:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8002560 <ov7670_scaling_control+0xdc>
 80024b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024ba:	ee17 3a90 	vmov	r3, s15
 80024be:	81fb      	strh	r3, [r7, #14]
	if(scl_xsc > 0x40) scl_xsc = 0x40;
 80024c0:	89fb      	ldrh	r3, [r7, #14]
 80024c2:	2b40      	cmp	r3, #64	; 0x40
 80024c4:	d902      	bls.n	80024cc <ov7670_scaling_control+0x48>
 80024c6:	2340      	movs	r3, #64	; 0x40
 80024c8:	81fb      	strh	r3, [r7, #14]
 80024ca:	e004      	b.n	80024d6 <ov7670_scaling_control+0x52>
	else if(scl_xsc < 0x20) scl_xsc = 0x20;
 80024cc:	89fb      	ldrh	r3, [r7, #14]
 80024ce:	2b1f      	cmp	r3, #31
 80024d0:	d801      	bhi.n	80024d6 <ov7670_scaling_control+0x52>
 80024d2:	2320      	movs	r3, #32
 80024d4:	81fb      	strh	r3, [r7, #14]

	uint16_t scl_ysc = 32 * ((float)g_ov7670_info.frame_params.height / height);
 80024d6:	4b21      	ldr	r3, [pc, #132]	; (800255c <ov7670_scaling_control+0xd8>)
 80024d8:	891b      	ldrh	r3, [r3, #8]
 80024da:	ee07 3a90 	vmov	s15, r3
 80024de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024e2:	88bb      	ldrh	r3, [r7, #4]
 80024e4:	ee07 3a90 	vmov	s15, r3
 80024e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024f0:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002560 <ov7670_scaling_control+0xdc>
 80024f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024fc:	ee17 3a90 	vmov	r3, s15
 8002500:	81bb      	strh	r3, [r7, #12]
	if(scl_ysc > 0x40) scl_ysc = 0x40;
 8002502:	89bb      	ldrh	r3, [r7, #12]
 8002504:	2b40      	cmp	r3, #64	; 0x40
 8002506:	d902      	bls.n	800250e <ov7670_scaling_control+0x8a>
 8002508:	2340      	movs	r3, #64	; 0x40
 800250a:	81bb      	strh	r3, [r7, #12]
 800250c:	e004      	b.n	8002518 <ov7670_scaling_control+0x94>
	else if(scl_ysc < 0x20) scl_ysc = 0x20;
 800250e:	89bb      	ldrh	r3, [r7, #12]
 8002510:	2b1f      	cmp	r3, #31
 8002512:	d801      	bhi.n	8002518 <ov7670_scaling_control+0x94>
 8002514:	2320      	movs	r3, #32
 8002516:	81bb      	strh	r3, [r7, #12]

	g_ov7670_info.frame_params.width = width;
 8002518:	4a10      	ldr	r2, [pc, #64]	; (800255c <ov7670_scaling_control+0xd8>)
 800251a:	88fb      	ldrh	r3, [r7, #6]
 800251c:	80d3      	strh	r3, [r2, #6]
	g_ov7670_info.frame_params.height = height;
 800251e:	4a0f      	ldr	r2, [pc, #60]	; (800255c <ov7670_scaling_control+0xd8>)
 8002520:	88bb      	ldrh	r3, [r7, #4]
 8002522:	8113      	strh	r3, [r2, #8]

	ov7670_write_register(OV7670_COM3, ov7670_read_register(OV7670_COM3) | COM3_SCLEN);
 8002524:	200c      	movs	r0, #12
 8002526:	f000 f82f 	bl	8002588 <ov7670_read_register>
 800252a:	4603      	mov	r3, r0
 800252c:	f043 0308 	orr.w	r3, r3, #8
 8002530:	b2db      	uxtb	r3, r3
 8002532:	4619      	mov	r1, r3
 8002534:	200c      	movs	r0, #12
 8002536:	f000 f815 	bl	8002564 <ov7670_write_register>
	ov7670_write_register(OV7670_SCL_XSC, scl_xsc);
 800253a:	89fb      	ldrh	r3, [r7, #14]
 800253c:	b2db      	uxtb	r3, r3
 800253e:	4619      	mov	r1, r3
 8002540:	2070      	movs	r0, #112	; 0x70
 8002542:	f000 f80f 	bl	8002564 <ov7670_write_register>
	ov7670_write_register(OV7670_SCL_YSC, scl_ysc);
 8002546:	89bb      	ldrh	r3, [r7, #12]
 8002548:	b2db      	uxtb	r3, r3
 800254a:	4619      	mov	r1, r3
 800254c:	2071      	movs	r0, #113	; 0x71
 800254e:	f000 f809 	bl	8002564 <ov7670_write_register>
}
 8002552:	bf00      	nop
 8002554:	3710      	adds	r7, #16
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	20000004 	.word	0x20000004
 8002560:	42000000 	.word	0x42000000

08002564 <ov7670_write_register>:

/*=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~
*
=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~*/
void ov7670_write_register(unsigned char reg, unsigned char val)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	4603      	mov	r3, r0
 800256c:	460a      	mov	r2, r1
 800256e:	71fb      	strb	r3, [r7, #7]
 8002570:	4613      	mov	r3, r2
 8002572:	71bb      	strb	r3, [r7, #6]
	i2c_write_reg(0x42U, reg, val);
 8002574:	79ba      	ldrb	r2, [r7, #6]
 8002576:	79fb      	ldrb	r3, [r7, #7]
 8002578:	4619      	mov	r1, r3
 800257a:	2042      	movs	r0, #66	; 0x42
 800257c:	f7ff fe46 	bl	800220c <i2c_write_reg>
}
 8002580:	bf00      	nop
 8002582:	3708      	adds	r7, #8
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}

08002588 <ov7670_read_register>:

/*=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~
*
=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~*/
uint8_t ov7670_read_register(unsigned char reg)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	4603      	mov	r3, r0
 8002590:	71fb      	strb	r3, [r7, #7]
	return i2c_read_reg(0x42U, reg);
 8002592:	79fb      	ldrb	r3, [r7, #7]
 8002594:	4619      	mov	r1, r3
 8002596:	2042      	movs	r0, #66	; 0x42
 8002598:	f7ff fe0e 	bl	80021b8 <i2c_read_reg>
 800259c:	4603      	mov	r3, r0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <ov7670_write_array>:

/*=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~
*
=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~*/
void ov7670_write_array(ov7670_regval_list_t *list)
{
 80025a6:	b580      	push	{r7, lr}
 80025a8:	b082      	sub	sp, #8
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
	while((list->address != 0xFFU) && (list->value != 0xFFU))
 80025ae:	e00a      	b.n	80025c6 <ov7670_write_array+0x20>
	{
		ov7670_write_register(list->address, list->value);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	781a      	ldrb	r2, [r3, #0]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	785b      	ldrb	r3, [r3, #1]
 80025b8:	4619      	mov	r1, r3
 80025ba:	4610      	mov	r0, r2
 80025bc:	f7ff ffd2 	bl	8002564 <ov7670_write_register>
		list++;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	3302      	adds	r3, #2
 80025c4:	607b      	str	r3, [r7, #4]
	while((list->address != 0xFFU) && (list->value != 0xFFU))
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	2bff      	cmp	r3, #255	; 0xff
 80025cc:	d003      	beq.n	80025d6 <ov7670_write_array+0x30>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	785b      	ldrb	r3, [r3, #1]
 80025d2:	2bff      	cmp	r3, #255	; 0xff
 80025d4:	d1ec      	bne.n	80025b0 <ov7670_write_array+0xa>
	}
}
 80025d6:	bf00      	nop
 80025d8:	3708      	adds	r7, #8
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
	...

080025e0 <ov7670_set_mode>:

/*=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~
*
=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~*/
void ov7670_set_mode(uint16_t exposure)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	4603      	mov	r3, r0
 80025e8:	80fb      	strh	r3, [r7, #6]
	ov7670_write_register(OV7670_COM7,	COM7_RESET);	// 12, all registers default
 80025ea:	2180      	movs	r1, #128	; 0x80
 80025ec:	2012      	movs	r0, #18
 80025ee:	f7ff ffb9 	bl	8002564 <ov7670_write_register>
	HAL_Delay(3);
 80025f2:	2003      	movs	r0, #3
 80025f4:	f001 fe3a 	bl	800426c <HAL_Delay>

	// CLOCK
	ov7670_write_register(OV7670_CLKRC,	0x80U);			// 11, No clock prescaler + MAGIC RSVD
 80025f8:	2180      	movs	r1, #128	; 0x80
 80025fa:	2011      	movs	r0, #17
 80025fc:	f7ff ffb2 	bl	8002564 <ov7670_write_register>
	ov7670_write_register(OV7670_COM11,	COM11_AD56HZ | COM11_50HZ | COM11_EXPLES);	// 3b, Enable auto 50Hz detect + exposure timing can be less
 8002600:	211a      	movs	r1, #26
 8002602:	203b      	movs	r0, #59	; 0x3b
 8002604:	f7ff ffae 	bl	8002564 <ov7670_write_register>


	// FRAME FMT
	ov7670_write_register(OV7670_COM3, 			COM3_DCWEN);	// 0c DCW enable
 8002608:	2104      	movs	r1, #4
 800260a:	200c      	movs	r0, #12
 800260c:	f7ff ffaa 	bl	8002564 <ov7670_write_register>
	ov7670_write_array(ov7670_FFMT_regval_list[g_ov7670_info.frame_params.format]);
 8002610:	4b39      	ldr	r3, [pc, #228]	; (80026f8 <ov7670_set_mode+0x118>)
 8002612:	791b      	ldrb	r3, [r3, #4]
 8002614:	00db      	lsls	r3, r3, #3
 8002616:	4a39      	ldr	r2, [pc, #228]	; (80026fc <ov7670_set_mode+0x11c>)
 8002618:	4413      	add	r3, r2
 800261a:	4618      	mov	r0, r3
 800261c:	f7ff ffc3 	bl	80025a6 <ov7670_write_array>
	ov7670_write_register(OV7670_SCL_PCLK_DLY, 	0x02);	// a2
 8002620:	2102      	movs	r1, #2
 8002622:	20a2      	movs	r0, #162	; 0xa2
 8002624:	f7ff ff9e 	bl	8002564 <ov7670_write_register>
	ov7670_frame_control(
			g_ov7670_info.frame_params.hStart,
 8002628:	4b33      	ldr	r3, [pc, #204]	; (80026f8 <ov7670_set_mode+0x118>)
 800262a:	8a1b      	ldrh	r3, [r3, #16]
	ov7670_frame_control(
 800262c:	b218      	sxth	r0, r3
			g_ov7670_info.frame_params.hStop,
 800262e:	4b32      	ldr	r3, [pc, #200]	; (80026f8 <ov7670_set_mode+0x118>)
 8002630:	8a5b      	ldrh	r3, [r3, #18]
	ov7670_frame_control(
 8002632:	b219      	sxth	r1, r3
			g_ov7670_info.frame_params.vStart,
 8002634:	4b30      	ldr	r3, [pc, #192]	; (80026f8 <ov7670_set_mode+0x118>)
 8002636:	8a9b      	ldrh	r3, [r3, #20]
	ov7670_frame_control(
 8002638:	b21a      	sxth	r2, r3
			g_ov7670_info.frame_params.vStop);
 800263a:	4b2f      	ldr	r3, [pc, #188]	; (80026f8 <ov7670_set_mode+0x118>)
 800263c:	8adb      	ldrh	r3, [r3, #22]
	ov7670_frame_control(
 800263e:	b21b      	sxth	r3, r3
 8002640:	f7ff fec5 	bl	80023ce <ov7670_frame_control>

	ov7670_write_register(OV7670_COM10, 	0x20U); 	// 15 No PCLK during horiz. blank
 8002644:	2120      	movs	r1, #32
 8002646:	2015      	movs	r0, #21
 8002648:	f7ff ff8c 	bl	8002564 <ov7670_write_register>


	// COLOR FMT
	ov7670_write_array(ov7670_CFMT_regval_list[g_ov7670_info.color_fmt]);
 800264c:	4b2a      	ldr	r3, [pc, #168]	; (80026f8 <ov7670_set_mode+0x118>)
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	461a      	mov	r2, r3
 8002652:	4613      	mov	r3, r2
 8002654:	00db      	lsls	r3, r3, #3
 8002656:	1a9b      	subs	r3, r3, r2
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	4a29      	ldr	r2, [pc, #164]	; (8002700 <ov7670_set_mode+0x120>)
 800265c:	4413      	add	r3, r2
 800265e:	4618      	mov	r0, r3
 8002660:	f7ff ffa1 	bl	80025a6 <ov7670_write_array>
	ov7670_write_array(ov7670_CMTX_regval_list[g_ov7670_info.color_fmt == CFMT_GRB422 ? 1:0]);
 8002664:	4b24      	ldr	r3, [pc, #144]	; (80026f8 <ov7670_set_mode+0x118>)
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	2b03      	cmp	r3, #3
 800266a:	bf0c      	ite	eq
 800266c:	2301      	moveq	r3, #1
 800266e:	2300      	movne	r3, #0
 8002670:	b2db      	uxtb	r3, r3
 8002672:	011b      	lsls	r3, r3, #4
 8002674:	4a23      	ldr	r2, [pc, #140]	; (8002704 <ov7670_set_mode+0x124>)
 8002676:	4413      	add	r3, r2
 8002678:	4618      	mov	r0, r3
 800267a:	f7ff ff94 	bl	80025a6 <ov7670_write_array>
		//ov7670_write_register(OV7670_COM14,	ov7670_read_register(OV7670_COM14)-1);	// GRB422 has 4bytes per pixel??. COM14 is first set by ov7670_write_array(ov7670_FFMT_regval_list[])
		//ov7670_write_register(OV7670_SCL_PCLK_DIV, 0xF8);	// Bypass clock divider for DSP scale contro
	}


	ov7670_write_register(0xB0U, 			0x84U); // something for colors
 800267e:	2184      	movs	r1, #132	; 0x84
 8002680:	20b0      	movs	r0, #176	; 0xb0
 8002682:	f7ff ff6f 	bl	8002564 <ov7670_write_register>
	//ov7670_saturation(0);
	ov7670_write_register(OV7670_COM8,		0xE7U); // 13 AGC AWB AEC on
 8002686:	21e7      	movs	r1, #231	; 0xe7
 8002688:	2013      	movs	r0, #19
 800268a:	f7ff ff6b 	bl	8002564 <ov7670_write_register>
	ov7670_write_register(OV7670_AWBCTR0,	0x9FU); // 6f AWB
 800268e:	219f      	movs	r1, #159	; 0x9f
 8002690:	206f      	movs	r0, #111	; 0x6f
 8002692:	f7ff ff67 	bl	8002564 <ov7670_write_register>
	ov7670_write_register(OV7670_CLKRC, 	0x80U);	// 11
 8002696:	2180      	movs	r1, #128	; 0x80
 8002698:	2011      	movs	r0, #17
 800269a:	f7ff ff63 	bl	8002564 <ov7670_write_register>

	HAL_Delay(50);
 800269e:	2032      	movs	r0, #50	; 0x32
 80026a0:	f001 fde4 	bl	800426c <HAL_Delay>

	uint8_t com1 = exposure & 0x03U;				// AEC[1:0]
 80026a4:	88fb      	ldrh	r3, [r7, #6]
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	f003 0303 	and.w	r3, r3, #3
 80026ac:	73fb      	strb	r3, [r7, #15]
	uint8_t aech = (exposure >> 2) & 0xFFU;			// AEC[9:2]
 80026ae:	88fb      	ldrh	r3, [r7, #6]
 80026b0:	089b      	lsrs	r3, r3, #2
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	73bb      	strb	r3, [r7, #14]
	uint8_t aechh = (exposure >> 10) & 0xFFU;		// AEC[15:10]
 80026b6:	88fb      	ldrh	r3, [r7, #6]
 80026b8:	0a9b      	lsrs	r3, r3, #10
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	737b      	strb	r3, [r7, #13]

	ov7670_write_register(OV7670_COM1, 		(ov7670_read_register(OV7670_COM1) & ~0x03U) | com1);//04
 80026be:	2004      	movs	r0, #4
 80026c0:	f7ff ff62 	bl	8002588 <ov7670_read_register>
 80026c4:	4603      	mov	r3, r0
 80026c6:	f023 0303 	bic.w	r3, r3, #3
 80026ca:	b2da      	uxtb	r2, r3
 80026cc:	7bfb      	ldrb	r3, [r7, #15]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	4619      	mov	r1, r3
 80026d4:	2004      	movs	r0, #4
 80026d6:	f7ff ff45 	bl	8002564 <ov7670_write_register>
	ov7670_write_register(OV7670_AECH, 		aech);//10
 80026da:	7bbb      	ldrb	r3, [r7, #14]
 80026dc:	4619      	mov	r1, r3
 80026de:	2010      	movs	r0, #16
 80026e0:	f7ff ff40 	bl	8002564 <ov7670_write_register>
	ov7670_write_register(OV7670_AECHH, 	aechh);//07
 80026e4:	7b7b      	ldrb	r3, [r7, #13]
 80026e6:	4619      	mov	r1, r3
 80026e8:	2007      	movs	r0, #7
 80026ea:	f7ff ff3b 	bl	8002564 <ov7670_write_register>
}
 80026ee:	bf00      	nop
 80026f0:	3710      	adds	r7, #16
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	20000004 	.word	0x20000004
 80026fc:	0803faa4 	.word	0x0803faa4
 8002700:	0803fad4 	.word	0x0803fad4
 8002704:	0803fb38 	.word	0x0803fb38

08002708 <ov7670_init1>:

/*=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~
*
=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~*/
void ov7670_init1()
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
	OV7670_PWR_ON;
 800270c:	2201      	movs	r2, #1
 800270e:	2104      	movs	r1, #4
 8002710:	4817      	ldr	r0, [pc, #92]	; (8002770 <ov7670_init1+0x68>)
 8002712:	f003 f833 	bl	800577c <HAL_GPIO_WritePin>

	OV7670_NRST_LOW;
 8002716:	2200      	movs	r2, #0
 8002718:	2102      	movs	r1, #2
 800271a:	4815      	ldr	r0, [pc, #84]	; (8002770 <ov7670_init1+0x68>)
 800271c:	f003 f82e 	bl	800577c <HAL_GPIO_WritePin>
	HAL_Delay(300);
 8002720:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002724:	f001 fda2 	bl	800426c <HAL_Delay>
	OV7670_NRST_HIGH;
 8002728:	2201      	movs	r2, #1
 800272a:	2102      	movs	r1, #2
 800272c:	4810      	ldr	r0, [pc, #64]	; (8002770 <ov7670_init1+0x68>)
 800272e:	f003 f825 	bl	800577c <HAL_GPIO_WritePin>
	HAL_Delay(300);
 8002732:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002736:	f001 fd99 	bl	800426c <HAL_Delay>

	ov7670_set_mode(300);
 800273a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800273e:	f7ff ff4f 	bl	80025e0 <ov7670_set_mode>
	HAL_Delay(300);
 8002742:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002746:	f001 fd91 	bl	800426c <HAL_Delay>

	// Enable timer trigger DMA request
	TIM1->DIER |= TIM_DIER_TDE;
 800274a:	4b0a      	ldr	r3, [pc, #40]	; (8002774 <ov7670_init1+0x6c>)
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	4a09      	ldr	r2, [pc, #36]	; (8002774 <ov7670_init1+0x6c>)
 8002750:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002754:	60d3      	str	r3, [r2, #12]
	HAL_TIM_Base_Start(&htim1);
 8002756:	4808      	ldr	r0, [pc, #32]	; (8002778 <ov7670_init1+0x70>)
 8002758:	f006 fb50 	bl	8008dfc <HAL_TIM_Base_Start>

	HAL_NVIC_SetPriority(OV7670_VSYNC_EXTI_IRQn, 0, 0);
 800275c:	2200      	movs	r2, #0
 800275e:	2100      	movs	r1, #0
 8002760:	2007      	movs	r0, #7
 8002762:	f002 fa82 	bl	8004c6a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(OV7670_VSYNC_EXTI_IRQn);
 8002766:	2007      	movs	r0, #7
 8002768:	f002 fa9b 	bl	8004ca2 <HAL_NVIC_EnableIRQ>
}
 800276c:	bf00      	nop
 800276e:	bd80      	pop	{r7, pc}
 8002770:	40020800 	.word	0x40020800
 8002774:	40010000 	.word	0x40010000
 8002778:	20047de0 	.word	0x20047de0

0800277c <EXTI0_HREF_Callback>:

/*=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~
*
=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~*/
void EXTI0_HREF_Callback()
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
	// Falling edge
	HAL_DMA_Abort(&hdma_tim1_trig);
 8002780:	4810      	ldr	r0, [pc, #64]	; (80027c4 <EXTI0_HREF_Callback+0x48>)
 8002782:	f002 fbae 	bl	8004ee2 <HAL_DMA_Abort>
	HAL_DMA_Start(
			&hdma_tim1_trig,
			OV7670_DATA_PORT_ADD,
			(uint32_t)(g_cam_buff + g_offset),
 8002786:	4b10      	ldr	r3, [pc, #64]	; (80027c8 <EXTI0_HREF_Callback+0x4c>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a10      	ldr	r2, [pc, #64]	; (80027cc <EXTI0_HREF_Callback+0x50>)
 800278c:	4413      	add	r3, r2
	HAL_DMA_Start(
 800278e:	461a      	mov	r2, r3
			g_ov7670_info.frame_params.width * 2);
 8002790:	4b0f      	ldr	r3, [pc, #60]	; (80027d0 <EXTI0_HREF_Callback+0x54>)
 8002792:	88db      	ldrh	r3, [r3, #6]
 8002794:	005b      	lsls	r3, r3, #1
	HAL_DMA_Start(
 8002796:	490f      	ldr	r1, [pc, #60]	; (80027d4 <EXTI0_HREF_Callback+0x58>)
 8002798:	480a      	ldr	r0, [pc, #40]	; (80027c4 <EXTI0_HREF_Callback+0x48>)
 800279a:	f002 fb67 	bl	8004e6c <HAL_DMA_Start>
	if(g_cam_buff + g_offset >= g_cam_buff + OV7670_FRAME_SIZE_QVGA - 640)
 800279e:	4b0a      	ldr	r3, [pc, #40]	; (80027c8 <EXTI0_HREF_Callback+0x4c>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a0a      	ldr	r2, [pc, #40]	; (80027cc <EXTI0_HREF_Callback+0x50>)
 80027a4:	4413      	add	r3, r2
 80027a6:	4a0c      	ldr	r2, [pc, #48]	; (80027d8 <EXTI0_HREF_Callback+0x5c>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d303      	bcc.n	80027b4 <EXTI0_HREF_Callback+0x38>
		g_offset = 0;
 80027ac:	4b06      	ldr	r3, [pc, #24]	; (80027c8 <EXTI0_HREF_Callback+0x4c>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	601a      	str	r2, [r3, #0]
	else
		g_offset += 640;	// Always +=640 because we want to point in a 'new row'
}
 80027b2:	e005      	b.n	80027c0 <EXTI0_HREF_Callback+0x44>
		g_offset += 640;	// Always +=640 because we want to point in a 'new row'
 80027b4:	4b04      	ldr	r3, [pc, #16]	; (80027c8 <EXTI0_HREF_Callback+0x4c>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80027bc:	4a02      	ldr	r2, [pc, #8]	; (80027c8 <EXTI0_HREF_Callback+0x4c>)
 80027be:	6013      	str	r3, [r2, #0]
}
 80027c0:	bf00      	nop
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	20047d80 	.word	0x20047d80
 80027c8:	200258f4 	.word	0x200258f4
 80027cc:	200000f4 	.word	0x200000f4
 80027d0:	20000004 	.word	0x20000004
 80027d4:	40021410 	.word	0x40021410
 80027d8:	20025674 	.word	0x20025674

080027dc <EXTI1_VSYNC_Callback>:

/*=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~
*
=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~*/
void EXTI1_VSYNC_Callback()
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
	// Rising edge
	if(OV7670_VSYNC_GPIO_Port->IDR & OV7670_VSYNC_Pin)
 80027e0:	4b12      	ldr	r3, [pc, #72]	; (800282c <EXTI1_VSYNC_Callback+0x50>)
 80027e2:	691b      	ldr	r3, [r3, #16]
 80027e4:	f003 0302 	and.w	r3, r3, #2
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d006      	beq.n	80027fa <EXTI1_VSYNC_Callback+0x1e>
	{
		HAL_DMA_Abort(&hdma_tim1_trig);
 80027ec:	4810      	ldr	r0, [pc, #64]	; (8002830 <EXTI1_VSYNC_Callback+0x54>)
 80027ee:	f002 fb78 	bl	8004ee2 <HAL_DMA_Abort>
		HAL_NVIC_DisableIRQ(OV7670_HREF_EXTI_IRQn);
 80027f2:	2006      	movs	r0, #6
 80027f4:	f002 fa63 	bl	8004cbe <HAL_NVIC_DisableIRQ>
				OV7670_DATA_PORT_ADD,
				(uint32_t)g_cam_buff,
				g_ov7670_info.frame_params.width * 2); // first line
		g_offset = 640;
	}
}
 80027f8:	e016      	b.n	8002828 <EXTI1_VSYNC_Callback+0x4c>
		HAL_NVIC_SetPriority(OV7670_HREF_EXTI_IRQn, 0, 0);
 80027fa:	2200      	movs	r2, #0
 80027fc:	2100      	movs	r1, #0
 80027fe:	2006      	movs	r0, #6
 8002800:	f002 fa33 	bl	8004c6a <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(OV7670_HREF_EXTI_IRQn);
 8002804:	2006      	movs	r0, #6
 8002806:	f002 fa4c 	bl	8004ca2 <HAL_NVIC_EnableIRQ>
		HAL_DMA_Abort(&hdma_tim1_trig);// todo: ?
 800280a:	4809      	ldr	r0, [pc, #36]	; (8002830 <EXTI1_VSYNC_Callback+0x54>)
 800280c:	f002 fb69 	bl	8004ee2 <HAL_DMA_Abort>
		HAL_DMA_Start(
 8002810:	4a08      	ldr	r2, [pc, #32]	; (8002834 <EXTI1_VSYNC_Callback+0x58>)
				g_ov7670_info.frame_params.width * 2); // first line
 8002812:	4b09      	ldr	r3, [pc, #36]	; (8002838 <EXTI1_VSYNC_Callback+0x5c>)
 8002814:	88db      	ldrh	r3, [r3, #6]
 8002816:	005b      	lsls	r3, r3, #1
		HAL_DMA_Start(
 8002818:	4908      	ldr	r1, [pc, #32]	; (800283c <EXTI1_VSYNC_Callback+0x60>)
 800281a:	4805      	ldr	r0, [pc, #20]	; (8002830 <EXTI1_VSYNC_Callback+0x54>)
 800281c:	f002 fb26 	bl	8004e6c <HAL_DMA_Start>
		g_offset = 640;
 8002820:	4b07      	ldr	r3, [pc, #28]	; (8002840 <EXTI1_VSYNC_Callback+0x64>)
 8002822:	f44f 7220 	mov.w	r2, #640	; 0x280
 8002826:	601a      	str	r2, [r3, #0]
}
 8002828:	bf00      	nop
 800282a:	bd80      	pop	{r7, pc}
 800282c:	40021800 	.word	0x40021800
 8002830:	20047d80 	.word	0x20047d80
 8002834:	200000f4 	.word	0x200000f4
 8002838:	20000004 	.word	0x20000004
 800283c:	40021410 	.word	0x40021410
 8002840:	200258f4 	.word	0x200258f4

08002844 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800284a:	2300      	movs	r3, #0
 800284c:	607b      	str	r3, [r7, #4]
 800284e:	4b10      	ldr	r3, [pc, #64]	; (8002890 <HAL_MspInit+0x4c>)
 8002850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002852:	4a0f      	ldr	r2, [pc, #60]	; (8002890 <HAL_MspInit+0x4c>)
 8002854:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002858:	6453      	str	r3, [r2, #68]	; 0x44
 800285a:	4b0d      	ldr	r3, [pc, #52]	; (8002890 <HAL_MspInit+0x4c>)
 800285c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800285e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002862:	607b      	str	r3, [r7, #4]
 8002864:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002866:	2300      	movs	r3, #0
 8002868:	603b      	str	r3, [r7, #0]
 800286a:	4b09      	ldr	r3, [pc, #36]	; (8002890 <HAL_MspInit+0x4c>)
 800286c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286e:	4a08      	ldr	r2, [pc, #32]	; (8002890 <HAL_MspInit+0x4c>)
 8002870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002874:	6413      	str	r3, [r2, #64]	; 0x40
 8002876:	4b06      	ldr	r3, [pc, #24]	; (8002890 <HAL_MspInit+0x4c>)
 8002878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800287e:	603b      	str	r3, [r7, #0]
 8002880:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002882:	bf00      	nop
 8002884:	370c      	adds	r7, #12
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	40023800 	.word	0x40023800

08002894 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002898:	e7fe      	b.n	8002898 <NMI_Handler+0x4>

0800289a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800289a:	b480      	push	{r7}
 800289c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800289e:	e7fe      	b.n	800289e <HardFault_Handler+0x4>

080028a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028a4:	e7fe      	b.n	80028a4 <MemManage_Handler+0x4>

080028a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028a6:	b480      	push	{r7}
 80028a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028aa:	e7fe      	b.n	80028aa <BusFault_Handler+0x4>

080028ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028b0:	e7fe      	b.n	80028b0 <UsageFault_Handler+0x4>

080028b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028b2:	b480      	push	{r7}
 80028b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028b6:	bf00      	nop
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028c4:	bf00      	nop
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr

080028ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028ce:	b480      	push	{r7}
 80028d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028d2:	bf00      	nop
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028e0:	f001 fca4 	bl	800422c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028e4:	bf00      	nop
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80028ec:	2001      	movs	r0, #1
 80028ee:	f002 ff5f 	bl	80057b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80028f2:	bf00      	nop
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80028fa:	2002      	movs	r0, #2
 80028fc:	f002 ff58 	bl	80057b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002900:	bf00      	nop
 8002902:	bd80      	pop	{r7, pc}

08002904 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8002908:	2008      	movs	r0, #8
 800290a:	f002 ff51 	bl	80057b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800290e:	bf00      	nop
 8002910:	bd80      	pop	{r7, pc}
	...

08002914 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002918:	4802      	ldr	r0, [pc, #8]	; (8002924 <I2C1_EV_IRQHandler+0x10>)
 800291a:	f003 fbc9 	bl	80060b0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800291e:	bf00      	nop
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	20047ce4 	.word	0x20047ce4

08002928 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	if((USART3->SR & USART_SR_RXNE) && (USART3->CR1 & USART_CR1_RXNEIE))
 800292c:	4b09      	ldr	r3, [pc, #36]	; (8002954 <USART3_IRQHandler+0x2c>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0320 	and.w	r3, r3, #32
 8002934:	2b00      	cmp	r3, #0
 8002936:	d007      	beq.n	8002948 <USART3_IRQHandler+0x20>
 8002938:	4b06      	ldr	r3, [pc, #24]	; (8002954 <USART3_IRQHandler+0x2c>)
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	f003 0320 	and.w	r3, r3, #32
 8002940:	2b00      	cmp	r3, #0
 8002942:	d001      	beq.n	8002948 <USART3_IRQHandler+0x20>
		uart_rx_callback();
 8002944:	f000 ff52 	bl	80037ec <uart_rx_callback>
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002948:	4803      	ldr	r0, [pc, #12]	; (8002958 <USART3_IRQHandler+0x30>)
 800294a:	f007 f967 	bl	8009c1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800294e:	bf00      	nop
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	40004800 	.word	0x40004800
 8002958:	20047f5c 	.word	0x20047f5c

0800295c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
//=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
 8002962:	4603      	mov	r3, r0
 8002964:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == OV7670_VSYNC_Pin)
 8002966:	88fb      	ldrh	r3, [r7, #6]
 8002968:	2b02      	cmp	r3, #2
 800296a:	d102      	bne.n	8002972 <HAL_GPIO_EXTI_Callback+0x16>
		EXTI1_VSYNC_Callback();
 800296c:	f7ff ff36 	bl	80027dc <EXTI1_VSYNC_Callback>
	else if(GPIO_Pin == OV7670_HREF_Pin)
		EXTI0_HREF_Callback();
	else if(GPIO_Pin == TOUCH_YU_Pin)
		//HAL_EXTI_IRQHandler(&hexti_touch_YU);
		EXTI3_TOUCH_Callback();
}
 8002970:	e00a      	b.n	8002988 <HAL_GPIO_EXTI_Callback+0x2c>
	else if(GPIO_Pin == OV7670_HREF_Pin)
 8002972:	88fb      	ldrh	r3, [r7, #6]
 8002974:	2b01      	cmp	r3, #1
 8002976:	d102      	bne.n	800297e <HAL_GPIO_EXTI_Callback+0x22>
		EXTI0_HREF_Callback();
 8002978:	f7ff ff00 	bl	800277c <EXTI0_HREF_Callback>
}
 800297c:	e004      	b.n	8002988 <HAL_GPIO_EXTI_Callback+0x2c>
	else if(GPIO_Pin == TOUCH_YU_Pin)
 800297e:	88fb      	ldrh	r3, [r7, #6]
 8002980:	2b08      	cmp	r3, #8
 8002982:	d101      	bne.n	8002988 <HAL_GPIO_EXTI_Callback+0x2c>
		EXTI3_TOUCH_Callback();
 8002984:	f000 fcaa 	bl	80032dc <EXTI3_TOUCH_Callback>
}
 8002988:	bf00      	nop
 800298a:	3708      	adds	r7, #8
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
	return 1;
 8002994:	2301      	movs	r3, #1
}
 8002996:	4618      	mov	r0, r3
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <_kill>:

int _kill(int pid, int sig)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80029aa:	f024 f9d3 	bl	8026d54 <__errno>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2216      	movs	r2, #22
 80029b2:	601a      	str	r2, [r3, #0]
	return -1;
 80029b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3708      	adds	r7, #8
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <_exit>:

void _exit (int status)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80029c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f7ff ffe7 	bl	80029a0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80029d2:	e7fe      	b.n	80029d2 <_exit+0x12>

080029d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b086      	sub	sp, #24
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029e0:	2300      	movs	r3, #0
 80029e2:	617b      	str	r3, [r7, #20]
 80029e4:	e00a      	b.n	80029fc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80029e6:	f3af 8000 	nop.w
 80029ea:	4601      	mov	r1, r0
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	1c5a      	adds	r2, r3, #1
 80029f0:	60ba      	str	r2, [r7, #8]
 80029f2:	b2ca      	uxtb	r2, r1
 80029f4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	3301      	adds	r3, #1
 80029fa:	617b      	str	r3, [r7, #20]
 80029fc:	697a      	ldr	r2, [r7, #20]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	dbf0      	blt.n	80029e6 <_read+0x12>
	}

return len;
 8002a04:	687b      	ldr	r3, [r7, #4]
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3718      	adds	r7, #24
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}

08002a0e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	b086      	sub	sp, #24
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	60f8      	str	r0, [r7, #12]
 8002a16:	60b9      	str	r1, [r7, #8]
 8002a18:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	617b      	str	r3, [r7, #20]
 8002a1e:	e009      	b.n	8002a34 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	1c5a      	adds	r2, r3, #1
 8002a24:	60ba      	str	r2, [r7, #8]
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	3301      	adds	r3, #1
 8002a32:	617b      	str	r3, [r7, #20]
 8002a34:	697a      	ldr	r2, [r7, #20]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	dbf1      	blt.n	8002a20 <_write+0x12>
	}
	return len;
 8002a3c:	687b      	ldr	r3, [r7, #4]
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3718      	adds	r7, #24
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}

08002a46 <_close>:

int _close(int file)
{
 8002a46:	b480      	push	{r7}
 8002a48:	b083      	sub	sp, #12
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
	return -1;
 8002a4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr

08002a5e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a5e:	b480      	push	{r7}
 8002a60:	b083      	sub	sp, #12
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
 8002a66:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a6e:	605a      	str	r2, [r3, #4]
	return 0;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	370c      	adds	r7, #12
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr

08002a7e <_isatty>:

int _isatty(int file)
{
 8002a7e:	b480      	push	{r7}
 8002a80:	b083      	sub	sp, #12
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
	return 1;
 8002a86:	2301      	movs	r3, #1
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b085      	sub	sp, #20
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	607a      	str	r2, [r7, #4]
	return 0;
 8002aa0:	2300      	movs	r3, #0
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3714      	adds	r7, #20
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
	...

08002ab0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b086      	sub	sp, #24
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ab8:	4a14      	ldr	r2, [pc, #80]	; (8002b0c <_sbrk+0x5c>)
 8002aba:	4b15      	ldr	r3, [pc, #84]	; (8002b10 <_sbrk+0x60>)
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ac4:	4b13      	ldr	r3, [pc, #76]	; (8002b14 <_sbrk+0x64>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d102      	bne.n	8002ad2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002acc:	4b11      	ldr	r3, [pc, #68]	; (8002b14 <_sbrk+0x64>)
 8002ace:	4a12      	ldr	r2, [pc, #72]	; (8002b18 <_sbrk+0x68>)
 8002ad0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ad2:	4b10      	ldr	r3, [pc, #64]	; (8002b14 <_sbrk+0x64>)
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4413      	add	r3, r2
 8002ada:	693a      	ldr	r2, [r7, #16]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d207      	bcs.n	8002af0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ae0:	f024 f938 	bl	8026d54 <__errno>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	220c      	movs	r2, #12
 8002ae8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002aea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002aee:	e009      	b.n	8002b04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002af0:	4b08      	ldr	r3, [pc, #32]	; (8002b14 <_sbrk+0x64>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002af6:	4b07      	ldr	r3, [pc, #28]	; (8002b14 <_sbrk+0x64>)
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4413      	add	r3, r2
 8002afe:	4a05      	ldr	r2, [pc, #20]	; (8002b14 <_sbrk+0x64>)
 8002b00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b02:	68fb      	ldr	r3, [r7, #12]
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3718      	adds	r7, #24
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	20050000 	.word	0x20050000
 8002b10:	00000400 	.word	0x00000400
 8002b14:	200258f8 	.word	0x200258f8
 8002b18:	20047fb8 	.word	0x20047fb8

08002b1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b20:	4b06      	ldr	r3, [pc, #24]	; (8002b3c <SystemInit+0x20>)
 8002b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b26:	4a05      	ldr	r2, [pc, #20]	; (8002b3c <SystemInit+0x20>)
 8002b28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b30:	bf00      	nop
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	e000ed00 	.word	0xe000ed00

08002b40 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
DMA_HandleTypeDef hdma_tim1_trig;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b088      	sub	sp, #32
 8002b44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002b46:	f107 030c 	add.w	r3, r7, #12
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	601a      	str	r2, [r3, #0]
 8002b4e:	605a      	str	r2, [r3, #4]
 8002b50:	609a      	str	r2, [r3, #8]
 8002b52:	60da      	str	r2, [r3, #12]
 8002b54:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b56:	1d3b      	adds	r3, r7, #4
 8002b58:	2200      	movs	r2, #0
 8002b5a:	601a      	str	r2, [r3, #0]
 8002b5c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002b5e:	4b21      	ldr	r3, [pc, #132]	; (8002be4 <MX_TIM1_Init+0xa4>)
 8002b60:	4a21      	ldr	r2, [pc, #132]	; (8002be8 <MX_TIM1_Init+0xa8>)
 8002b62:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002b64:	4b1f      	ldr	r3, [pc, #124]	; (8002be4 <MX_TIM1_Init+0xa4>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b6a:	4b1e      	ldr	r3, [pc, #120]	; (8002be4 <MX_TIM1_Init+0xa4>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002b70:	4b1c      	ldr	r3, [pc, #112]	; (8002be4 <MX_TIM1_Init+0xa4>)
 8002b72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b76:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b78:	4b1a      	ldr	r3, [pc, #104]	; (8002be4 <MX_TIM1_Init+0xa4>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002b7e:	4b19      	ldr	r3, [pc, #100]	; (8002be4 <MX_TIM1_Init+0xa4>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b84:	4b17      	ldr	r3, [pc, #92]	; (8002be4 <MX_TIM1_Init+0xa4>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002b8a:	4816      	ldr	r0, [pc, #88]	; (8002be4 <MX_TIM1_Init+0xa4>)
 8002b8c:	f006 f8e6 	bl	8008d5c <HAL_TIM_Base_Init>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8002b96:	f7ff fc15 	bl	80023c4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8002b9a:	2307      	movs	r3, #7
 8002b9c:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8002b9e:	2360      	movs	r3, #96	; 0x60
 8002ba0:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 0;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8002baa:	f107 030c 	add.w	r3, r7, #12
 8002bae:	4619      	mov	r1, r3
 8002bb0:	480c      	ldr	r0, [pc, #48]	; (8002be4 <MX_TIM1_Init+0xa4>)
 8002bb2:	f006 fb61 	bl	8009278 <HAL_TIM_SlaveConfigSynchro>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d001      	beq.n	8002bc0 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 8002bbc:	f7ff fc02 	bl	80023c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002bc8:	1d3b      	adds	r3, r7, #4
 8002bca:	4619      	mov	r1, r3
 8002bcc:	4805      	ldr	r0, [pc, #20]	; (8002be4 <MX_TIM1_Init+0xa4>)
 8002bce:	f006 ff17 	bl	8009a00 <HAL_TIMEx_MasterConfigSynchronization>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d001      	beq.n	8002bdc <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8002bd8:	f7ff fbf4 	bl	80023c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002bdc:	bf00      	nop
 8002bde:	3720      	adds	r7, #32
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	20047de0 	.word	0x20047de0
 8002be8:	40010000 	.word	0x40010000

08002bec <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b08a      	sub	sp, #40	; 0x28
 8002bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bf2:	f107 0320 	add.w	r3, r7, #32
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	601a      	str	r2, [r3, #0]
 8002bfa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002bfc:	1d3b      	adds	r3, r7, #4
 8002bfe:	2200      	movs	r2, #0
 8002c00:	601a      	str	r2, [r3, #0]
 8002c02:	605a      	str	r2, [r3, #4]
 8002c04:	609a      	str	r2, [r3, #8]
 8002c06:	60da      	str	r2, [r3, #12]
 8002c08:	611a      	str	r2, [r3, #16]
 8002c0a:	615a      	str	r2, [r3, #20]
 8002c0c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002c0e:	4b22      	ldr	r3, [pc, #136]	; (8002c98 <MX_TIM3_Init+0xac>)
 8002c10:	4a22      	ldr	r2, [pc, #136]	; (8002c9c <MX_TIM3_Init+0xb0>)
 8002c12:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002c14:	4b20      	ldr	r3, [pc, #128]	; (8002c98 <MX_TIM3_Init+0xac>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c1a:	4b1f      	ldr	r3, [pc, #124]	; (8002c98 <MX_TIM3_Init+0xac>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002c20:	4b1d      	ldr	r3, [pc, #116]	; (8002c98 <MX_TIM3_Init+0xac>)
 8002c22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c26:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c28:	4b1b      	ldr	r3, [pc, #108]	; (8002c98 <MX_TIM3_Init+0xac>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c2e:	4b1a      	ldr	r3, [pc, #104]	; (8002c98 <MX_TIM3_Init+0xac>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002c34:	4818      	ldr	r0, [pc, #96]	; (8002c98 <MX_TIM3_Init+0xac>)
 8002c36:	f006 f949 	bl	8008ecc <HAL_TIM_PWM_Init>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d001      	beq.n	8002c44 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002c40:	f7ff fbc0 	bl	80023c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c44:	2300      	movs	r3, #0
 8002c46:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002c4c:	f107 0320 	add.w	r3, r7, #32
 8002c50:	4619      	mov	r1, r3
 8002c52:	4811      	ldr	r0, [pc, #68]	; (8002c98 <MX_TIM3_Init+0xac>)
 8002c54:	f006 fed4 	bl	8009a00 <HAL_TIMEx_MasterConfigSynchronization>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d001      	beq.n	8002c62 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002c5e:	f7ff fbb1 	bl	80023c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c62:	2360      	movs	r3, #96	; 0x60
 8002c64:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 32000;
 8002c66:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8002c6a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c70:	2300      	movs	r3, #0
 8002c72:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002c74:	1d3b      	adds	r3, r7, #4
 8002c76:	2204      	movs	r2, #4
 8002c78:	4619      	mov	r1, r3
 8002c7a:	4807      	ldr	r0, [pc, #28]	; (8002c98 <MX_TIM3_Init+0xac>)
 8002c7c:	f006 fa3e 	bl	80090fc <HAL_TIM_PWM_ConfigChannel>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d001      	beq.n	8002c8a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8002c86:	f7ff fb9d 	bl	80023c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002c8a:	4803      	ldr	r0, [pc, #12]	; (8002c98 <MX_TIM3_Init+0xac>)
 8002c8c:	f000 f8a6 	bl	8002ddc <HAL_TIM_MspPostInit>

}
 8002c90:	bf00      	nop
 8002c92:	3728      	adds	r7, #40	; 0x28
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	20047d38 	.word	0x20047d38
 8002c9c:	40000400 	.word	0x40000400

08002ca0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b08a      	sub	sp, #40	; 0x28
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ca8:	f107 0314 	add.w	r3, r7, #20
 8002cac:	2200      	movs	r2, #0
 8002cae:	601a      	str	r2, [r3, #0]
 8002cb0:	605a      	str	r2, [r3, #4]
 8002cb2:	609a      	str	r2, [r3, #8]
 8002cb4:	60da      	str	r2, [r3, #12]
 8002cb6:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a31      	ldr	r2, [pc, #196]	; (8002d84 <HAL_TIM_Base_MspInit+0xe4>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d15b      	bne.n	8002d7a <HAL_TIM_Base_MspInit+0xda>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	613b      	str	r3, [r7, #16]
 8002cc6:	4b30      	ldr	r3, [pc, #192]	; (8002d88 <HAL_TIM_Base_MspInit+0xe8>)
 8002cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cca:	4a2f      	ldr	r2, [pc, #188]	; (8002d88 <HAL_TIM_Base_MspInit+0xe8>)
 8002ccc:	f043 0301 	orr.w	r3, r3, #1
 8002cd0:	6453      	str	r3, [r2, #68]	; 0x44
 8002cd2:	4b2d      	ldr	r3, [pc, #180]	; (8002d88 <HAL_TIM_Base_MspInit+0xe8>)
 8002cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd6:	f003 0301 	and.w	r3, r3, #1
 8002cda:	613b      	str	r3, [r7, #16]
 8002cdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cde:	2300      	movs	r3, #0
 8002ce0:	60fb      	str	r3, [r7, #12]
 8002ce2:	4b29      	ldr	r3, [pc, #164]	; (8002d88 <HAL_TIM_Base_MspInit+0xe8>)
 8002ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce6:	4a28      	ldr	r2, [pc, #160]	; (8002d88 <HAL_TIM_Base_MspInit+0xe8>)
 8002ce8:	f043 0301 	orr.w	r3, r3, #1
 8002cec:	6313      	str	r3, [r2, #48]	; 0x30
 8002cee:	4b26      	ldr	r3, [pc, #152]	; (8002d88 <HAL_TIM_Base_MspInit+0xe8>)
 8002cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf2:	f003 0301 	and.w	r3, r3, #1
 8002cf6:	60fb      	str	r3, [r7, #12]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = OV7670_PCLK_Pin;
 8002cfa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002cfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d00:	2302      	movs	r3, #2
 8002d02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d04:	2300      	movs	r3, #0
 8002d06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(OV7670_PCLK_GPIO_Port, &GPIO_InitStruct);
 8002d10:	f107 0314 	add.w	r3, r7, #20
 8002d14:	4619      	mov	r1, r3
 8002d16:	481d      	ldr	r0, [pc, #116]	; (8002d8c <HAL_TIM_Base_MspInit+0xec>)
 8002d18:	f002 fb9c 	bl	8005454 <HAL_GPIO_Init>

    /* TIM1 DMA Init */
    /* TIM1_TRIG Init */
    hdma_tim1_trig.Instance = DMA2_Stream0;
 8002d1c:	4b1c      	ldr	r3, [pc, #112]	; (8002d90 <HAL_TIM_Base_MspInit+0xf0>)
 8002d1e:	4a1d      	ldr	r2, [pc, #116]	; (8002d94 <HAL_TIM_Base_MspInit+0xf4>)
 8002d20:	601a      	str	r2, [r3, #0]
    hdma_tim1_trig.Init.Channel = DMA_CHANNEL_6;
 8002d22:	4b1b      	ldr	r3, [pc, #108]	; (8002d90 <HAL_TIM_Base_MspInit+0xf0>)
 8002d24:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8002d28:	605a      	str	r2, [r3, #4]
    hdma_tim1_trig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d2a:	4b19      	ldr	r3, [pc, #100]	; (8002d90 <HAL_TIM_Base_MspInit+0xf0>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	609a      	str	r2, [r3, #8]
    hdma_tim1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d30:	4b17      	ldr	r3, [pc, #92]	; (8002d90 <HAL_TIM_Base_MspInit+0xf0>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	60da      	str	r2, [r3, #12]
    hdma_tim1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8002d36:	4b16      	ldr	r3, [pc, #88]	; (8002d90 <HAL_TIM_Base_MspInit+0xf0>)
 8002d38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d3c:	611a      	str	r2, [r3, #16]
    hdma_tim1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d3e:	4b14      	ldr	r3, [pc, #80]	; (8002d90 <HAL_TIM_Base_MspInit+0xf0>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	615a      	str	r2, [r3, #20]
    hdma_tim1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d44:	4b12      	ldr	r3, [pc, #72]	; (8002d90 <HAL_TIM_Base_MspInit+0xf0>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	619a      	str	r2, [r3, #24]
    hdma_tim1_trig.Init.Mode = DMA_NORMAL;
 8002d4a:	4b11      	ldr	r3, [pc, #68]	; (8002d90 <HAL_TIM_Base_MspInit+0xf0>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	61da      	str	r2, [r3, #28]
    hdma_tim1_trig.Init.Priority = DMA_PRIORITY_HIGH;
 8002d50:	4b0f      	ldr	r3, [pc, #60]	; (8002d90 <HAL_TIM_Base_MspInit+0xf0>)
 8002d52:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d56:	621a      	str	r2, [r3, #32]
    hdma_tim1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d58:	4b0d      	ldr	r3, [pc, #52]	; (8002d90 <HAL_TIM_Base_MspInit+0xf0>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_trig) != HAL_OK)
 8002d5e:	480c      	ldr	r0, [pc, #48]	; (8002d90 <HAL_TIM_Base_MspInit+0xf0>)
 8002d60:	f001 ffd6 	bl	8004d10 <HAL_DMA_Init>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d001      	beq.n	8002d6e <HAL_TIM_Base_MspInit+0xce>
    {
      Error_Handler();
 8002d6a:	f7ff fb2b 	bl	80023c4 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim1_trig);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a07      	ldr	r2, [pc, #28]	; (8002d90 <HAL_TIM_Base_MspInit+0xf0>)
 8002d72:	639a      	str	r2, [r3, #56]	; 0x38
 8002d74:	4a06      	ldr	r2, [pc, #24]	; (8002d90 <HAL_TIM_Base_MspInit+0xf0>)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002d7a:	bf00      	nop
 8002d7c:	3728      	adds	r7, #40	; 0x28
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	40010000 	.word	0x40010000
 8002d88:	40023800 	.word	0x40023800
 8002d8c:	40020000 	.word	0x40020000
 8002d90:	20047d80 	.word	0x20047d80
 8002d94:	40026410 	.word	0x40026410

08002d98 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b085      	sub	sp, #20
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a0b      	ldr	r2, [pc, #44]	; (8002dd4 <HAL_TIM_PWM_MspInit+0x3c>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d10d      	bne.n	8002dc6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002daa:	2300      	movs	r3, #0
 8002dac:	60fb      	str	r3, [r7, #12]
 8002dae:	4b0a      	ldr	r3, [pc, #40]	; (8002dd8 <HAL_TIM_PWM_MspInit+0x40>)
 8002db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db2:	4a09      	ldr	r2, [pc, #36]	; (8002dd8 <HAL_TIM_PWM_MspInit+0x40>)
 8002db4:	f043 0302 	orr.w	r3, r3, #2
 8002db8:	6413      	str	r3, [r2, #64]	; 0x40
 8002dba:	4b07      	ldr	r3, [pc, #28]	; (8002dd8 <HAL_TIM_PWM_MspInit+0x40>)
 8002dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	60fb      	str	r3, [r7, #12]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002dc6:	bf00      	nop
 8002dc8:	3714      	adds	r7, #20
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	40000400 	.word	0x40000400
 8002dd8:	40023800 	.word	0x40023800

08002ddc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b088      	sub	sp, #32
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002de4:	f107 030c 	add.w	r3, r7, #12
 8002de8:	2200      	movs	r2, #0
 8002dea:	601a      	str	r2, [r3, #0]
 8002dec:	605a      	str	r2, [r3, #4]
 8002dee:	609a      	str	r2, [r3, #8]
 8002df0:	60da      	str	r2, [r3, #12]
 8002df2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a12      	ldr	r2, [pc, #72]	; (8002e44 <HAL_TIM_MspPostInit+0x68>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d11d      	bne.n	8002e3a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dfe:	2300      	movs	r3, #0
 8002e00:	60bb      	str	r3, [r7, #8]
 8002e02:	4b11      	ldr	r3, [pc, #68]	; (8002e48 <HAL_TIM_MspPostInit+0x6c>)
 8002e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e06:	4a10      	ldr	r2, [pc, #64]	; (8002e48 <HAL_TIM_MspPostInit+0x6c>)
 8002e08:	f043 0304 	orr.w	r3, r3, #4
 8002e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e0e:	4b0e      	ldr	r3, [pc, #56]	; (8002e48 <HAL_TIM_MspPostInit+0x6c>)
 8002e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e12:	f003 0304 	and.w	r3, r3, #4
 8002e16:	60bb      	str	r3, [r7, #8]
 8002e18:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = LCD_BL_PWM_Pin;
 8002e1a:	2380      	movs	r3, #128	; 0x80
 8002e1c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e1e:	2312      	movs	r3, #18
 8002e20:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e22:	2300      	movs	r3, #0
 8002e24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e26:	2300      	movs	r3, #0
 8002e28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LCD_BL_PWM_GPIO_Port, &GPIO_InitStruct);
 8002e2e:	f107 030c 	add.w	r3, r7, #12
 8002e32:	4619      	mov	r1, r3
 8002e34:	4805      	ldr	r0, [pc, #20]	; (8002e4c <HAL_TIM_MspPostInit+0x70>)
 8002e36:	f002 fb0d 	bl	8005454 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002e3a:	bf00      	nop
 8002e3c:	3720      	adds	r7, #32
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	40000400 	.word	0x40000400
 8002e48:	40023800 	.word	0x40023800
 8002e4c:	40020800 	.word	0x40020800

08002e50 <adc_select_channel>:

/**********************************************************************
 *
**********************************************************************/
void adc_select_channel(touch_pin_t GPIO_Pin)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b08e      	sub	sp, #56	; 0x38
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	4603      	mov	r3, r0
 8002e58:	71fb      	strb	r3, [r7, #7]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e5a:	f107 031c 	add.w	r3, r7, #28
 8002e5e:	2200      	movs	r2, #0
 8002e60:	601a      	str	r2, [r3, #0]
 8002e62:	605a      	str	r2, [r3, #4]
 8002e64:	609a      	str	r2, [r3, #8]
 8002e66:	60da      	str	r2, [r3, #12]
 8002e68:	611a      	str	r2, [r3, #16]
	ADC_ChannelConfTypeDef sConfig = {0};
 8002e6a:	f107 030c 	add.w	r3, r7, #12
 8002e6e:	2200      	movs	r2, #0
 8002e70:	601a      	str	r2, [r3, #0]
 8002e72:	605a      	str	r2, [r3, #4]
 8002e74:	609a      	str	r2, [r3, #8]
 8002e76:	60da      	str	r2, [r3, #12]
	GPIO_TypeDef *GPIO_Port;
	uint32_t ADC_Channel;

	switch(GPIO_Pin)
 8002e78:	79fb      	ldrb	r3, [r7, #7]
 8002e7a:	2b04      	cmp	r3, #4
 8002e7c:	d002      	beq.n	8002e84 <adc_select_channel+0x34>
 8002e7e:	2b08      	cmp	r3, #8
 8002e80:	d005      	beq.n	8002e8e <adc_select_channel+0x3e>
	case TOUCH_YU_Pin:
		GPIO_Port = TOUCH_YU_GPIO_Port;
		ADC_Channel = TOUCH_YU_ADC_CHANNEL;
		break;
	default:
		return;
 8002e82:	e028      	b.n	8002ed6 <adc_select_channel+0x86>
		GPIO_Port = TOUCH_XR_GPIO_Port;
 8002e84:	4b15      	ldr	r3, [pc, #84]	; (8002edc <adc_select_channel+0x8c>)
 8002e86:	637b      	str	r3, [r7, #52]	; 0x34
		ADC_Channel = TOUCH_XR_ADC_CHANNEL;
 8002e88:	2302      	movs	r3, #2
 8002e8a:	633b      	str	r3, [r7, #48]	; 0x30
		break;
 8002e8c:	e004      	b.n	8002e98 <adc_select_channel+0x48>
		GPIO_Port = TOUCH_YU_GPIO_Port;
 8002e8e:	4b13      	ldr	r3, [pc, #76]	; (8002edc <adc_select_channel+0x8c>)
 8002e90:	637b      	str	r3, [r7, #52]	; 0x34
		ADC_Channel = TOUCH_YU_ADC_CHANNEL;
 8002e92:	2303      	movs	r3, #3
 8002e94:	633b      	str	r3, [r7, #48]	; 0x30
		break;
 8002e96:	bf00      	nop
	}

	GPIO_InitStruct.Pin = GPIO_Pin;
 8002e98:	79fb      	ldrb	r3, [r7, #7]
 8002e9a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ea4:	2302      	movs	r3, #2
 8002ea6:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIO_Port, &GPIO_InitStruct);
 8002ea8:	f107 031c 	add.w	r3, r7, #28
 8002eac:	4619      	mov	r1, r3
 8002eae:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002eb0:	f002 fad0 	bl	8005454 <HAL_GPIO_Init>

	sConfig.Channel = ADC_Channel;
 8002eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb6:	60fb      	str	r3, [r7, #12]
	sConfig.Rank = 1;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	613b      	str	r3, [r7, #16]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ec0:	f107 030c 	add.w	r3, r7, #12
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	4806      	ldr	r0, [pc, #24]	; (8002ee0 <adc_select_channel+0x90>)
 8002ec8:	f001 fb84 	bl	80045d4 <HAL_ADC_ConfigChannel>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <adc_select_channel+0x86>
	{
		Error_Handler();
 8002ed2:	f7ff fa77 	bl	80023c4 <Error_Handler>
	}
}
 8002ed6:	3738      	adds	r7, #56	; 0x38
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	40020000 	.word	0x40020000
 8002ee0:	20047c4c 	.word	0x20047c4c

08002ee4 <iir_filter>:

/**********************************************************************
 *
**********************************************************************/
uint16_t iir_filter(uint16_t in_new, uint16_t* iir_in, uint16_t* iir_out, bool reset)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b085      	sub	sp, #20
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	60b9      	str	r1, [r7, #8]
 8002eec:	607a      	str	r2, [r7, #4]
 8002eee:	461a      	mov	r2, r3
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	81fb      	strh	r3, [r7, #14]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	737b      	strb	r3, [r7, #13]
	if(reset)
 8002ef8:	7b7b      	ldrb	r3, [r7, #13]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d017      	beq.n	8002f2e <iir_filter+0x4a>
	{
		iir_in[0]=0; iir_in[2]=0; iir_in[2]=0;
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	2200      	movs	r2, #0
 8002f02:	801a      	strh	r2, [r3, #0]
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	3304      	adds	r3, #4
 8002f08:	2200      	movs	r2, #0
 8002f0a:	801a      	strh	r2, [r3, #0]
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	3304      	adds	r3, #4
 8002f10:	2200      	movs	r2, #0
 8002f12:	801a      	strh	r2, [r3, #0]
		iir_out[0]=0; iir_out[1]=0; iir_out[2]=0;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	801a      	strh	r2, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	3302      	adds	r3, #2
 8002f1e:	2200      	movs	r2, #0
 8002f20:	801a      	strh	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	3304      	adds	r3, #4
 8002f26:	2200      	movs	r2, #0
 8002f28:	801a      	strh	r2, [r3, #0]
		return 0;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	e05d      	b.n	8002fea <iir_filter+0x106>
	}

	iir_in[2] = iir_in[1];
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	3304      	adds	r3, #4
 8002f32:	68ba      	ldr	r2, [r7, #8]
 8002f34:	8852      	ldrh	r2, [r2, #2]
 8002f36:	801a      	strh	r2, [r3, #0]
	iir_in[1] = iir_in[0];
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	3302      	adds	r3, #2
 8002f3c:	68ba      	ldr	r2, [r7, #8]
 8002f3e:	8812      	ldrh	r2, [r2, #0]
 8002f40:	801a      	strh	r2, [r3, #0]
	iir_in[0] = in_new;
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	89fa      	ldrh	r2, [r7, #14]
 8002f46:	801a      	strh	r2, [r3, #0]

	iir_out[2] = iir_out[1];
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	3304      	adds	r3, #4
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	8852      	ldrh	r2, [r2, #2]
 8002f50:	801a      	strh	r2, [r3, #0]
	iir_out[1] = iir_out[0];
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	3302      	adds	r3, #2
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	8812      	ldrh	r2, [r2, #0]
 8002f5a:	801a      	strh	r2, [r3, #0]

	iir_out[0] = iir_in[0]*IIR_A0 + iir_in[1]*IIR_A1 + iir_in[2]*IIR_A2 +
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	881b      	ldrh	r3, [r3, #0]
 8002f60:	ee07 3a90 	vmov	s15, r3
 8002f64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f68:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002ff8 <iir_filter+0x114>
 8002f6c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	3302      	adds	r3, #2
 8002f74:	881b      	ldrh	r3, [r3, #0]
 8002f76:	ee07 3a90 	vmov	s15, r3
 8002f7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f7e:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8002ffc <iir_filter+0x118>
 8002f82:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002f86:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	3304      	adds	r3, #4
 8002f8e:	881b      	ldrh	r3, [r3, #0]
 8002f90:	ee07 3a90 	vmov	s15, r3
 8002f94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f98:	eddf 6a17 	vldr	s13, [pc, #92]	; 8002ff8 <iir_filter+0x114>
 8002f9c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002fa0:	ee37 7a27 	vadd.f32	s14, s14, s15
			iir_out[1]*IIR_B1 + iir_out[2]*IIR_B2;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	3302      	adds	r3, #2
 8002fa8:	881b      	ldrh	r3, [r3, #0]
 8002faa:	ee07 3a90 	vmov	s15, r3
 8002fae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002fb2:	eddf 6a13 	vldr	s13, [pc, #76]	; 8003000 <iir_filter+0x11c>
 8002fb6:	ee67 7aa6 	vmul.f32	s15, s15, s13
	iir_out[0] = iir_in[0]*IIR_A0 + iir_in[1]*IIR_A1 + iir_in[2]*IIR_A2 +
 8002fba:	ee37 7a27 	vadd.f32	s14, s14, s15
			iir_out[1]*IIR_B1 + iir_out[2]*IIR_B2;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	3304      	adds	r3, #4
 8002fc2:	881b      	ldrh	r3, [r3, #0]
 8002fc4:	ee07 3a90 	vmov	s15, r3
 8002fc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002fcc:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8003004 <iir_filter+0x120>
 8002fd0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002fd4:	ee77 7a27 	vadd.f32	s15, s14, s15
	iir_out[0] = iir_in[0]*IIR_A0 + iir_in[1]*IIR_A1 + iir_in[2]*IIR_A2 +
 8002fd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002fdc:	ee17 3a90 	vmov	r3, s15
 8002fe0:	b29a      	uxth	r2, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	801a      	strh	r2, [r3, #0]

	return iir_out[0];
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	881b      	ldrh	r3, [r3, #0]
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3714      	adds	r7, #20
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	3d03126f 	.word	0x3d03126f
 8002ffc:	3d810625 	.word	0x3d810625
 8003000:	3fcbc6a8 	.word	0x3fcbc6a8
 8003004:	bf3c28f6 	.word	0xbf3c28f6

08003008 <adc_iir_measurement>:

/**********************************************************************
 *
**********************************************************************/
uint16_t adc_iir_measurement(uint16_t* iir_in, uint16_t* iir_out)
{
 8003008:	b590      	push	{r4, r7, lr}
 800300a:	b089      	sub	sp, #36	; 0x24
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	6039      	str	r1, [r7, #0]
	uint8_t adc_cnt = 0;
 8003012:	2300      	movs	r3, #0
 8003014:	77fb      	strb	r3, [r7, #31]
	uint16_t adc_values[11] = {0};
 8003016:	f107 0308 	add.w	r3, r7, #8
 800301a:	2200      	movs	r2, #0
 800301c:	601a      	str	r2, [r3, #0]
 800301e:	605a      	str	r2, [r3, #4]
 8003020:	609a      	str	r2, [r3, #8]
 8003022:	60da      	str	r2, [r3, #12]
 8003024:	611a      	str	r2, [r3, #16]
 8003026:	829a      	strh	r2, [r3, #20]

	for(adc_cnt = 0; adc_cnt < 11; adc_cnt++)
 8003028:	2300      	movs	r3, #0
 800302a:	77fb      	strb	r3, [r7, #31]
 800302c:	e01d      	b.n	800306a <adc_iir_measurement+0x62>
	{
		HAL_ADC_Start(&hadc1);
 800302e:	4816      	ldr	r0, [pc, #88]	; (8003088 <adc_iir_measurement+0x80>)
 8003030:	f001 f984 	bl	800433c <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 500);
 8003034:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003038:	4813      	ldr	r0, [pc, #76]	; (8003088 <adc_iir_measurement+0x80>)
 800303a:	f001 fa33 	bl	80044a4 <HAL_ADC_PollForConversion>
		adc_values[adc_cnt] = iir_filter(HAL_ADC_GetValue(&hadc1), iir_in, iir_out, false);
 800303e:	4812      	ldr	r0, [pc, #72]	; (8003088 <adc_iir_measurement+0x80>)
 8003040:	f001 fabb 	bl	80045ba <HAL_ADC_GetValue>
 8003044:	4603      	mov	r3, r0
 8003046:	b298      	uxth	r0, r3
 8003048:	7ffc      	ldrb	r4, [r7, #31]
 800304a:	2300      	movs	r3, #0
 800304c:	683a      	ldr	r2, [r7, #0]
 800304e:	6879      	ldr	r1, [r7, #4]
 8003050:	f7ff ff48 	bl	8002ee4 <iir_filter>
 8003054:	4603      	mov	r3, r0
 8003056:	461a      	mov	r2, r3
 8003058:	0063      	lsls	r3, r4, #1
 800305a:	f107 0120 	add.w	r1, r7, #32
 800305e:	440b      	add	r3, r1
 8003060:	f823 2c18 	strh.w	r2, [r3, #-24]
	for(adc_cnt = 0; adc_cnt < 11; adc_cnt++)
 8003064:	7ffb      	ldrb	r3, [r7, #31]
 8003066:	3301      	adds	r3, #1
 8003068:	77fb      	strb	r3, [r7, #31]
 800306a:	7ffb      	ldrb	r3, [r7, #31]
 800306c:	2b0a      	cmp	r3, #10
 800306e:	d9de      	bls.n	800302e <adc_iir_measurement+0x26>
	}

	iir_filter(0, iir_in, iir_out, true);
 8003070:	2301      	movs	r3, #1
 8003072:	683a      	ldr	r2, [r7, #0]
 8003074:	6879      	ldr	r1, [r7, #4]
 8003076:	2000      	movs	r0, #0
 8003078:	f7ff ff34 	bl	8002ee4 <iir_filter>

	return adc_values[7];
 800307c:	8afb      	ldrh	r3, [r7, #22]
}
 800307e:	4618      	mov	r0, r3
 8003080:	3724      	adds	r7, #36	; 0x24
 8003082:	46bd      	mov	sp, r7
 8003084:	bd90      	pop	{r4, r7, pc}
 8003086:	bf00      	nop
 8003088:	20047c4c 	.word	0x20047c4c

0800308c <touch_read_coordinates>:
 * ------------------------------------------
 * ||  read X  || adc  | open | high | low  |
 * ||  read Y  || high | low  | adc  | open |
**********************************************************************/
touch_coordinates_t touch_read_coordinates()
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b086      	sub	sp, #24
 8003090:	af00      	add	r7, sp, #0
	touch_coordinates_t ret = {0};
 8003092:	2300      	movs	r3, #0
 8003094:	603b      	str	r3, [r7, #0]
	uint32_t ret_x = 0;
 8003096:	2300      	movs	r3, #0
 8003098:	617b      	str	r3, [r7, #20]
	uint32_t ret_y = 0;
 800309a:	2300      	movs	r3, #0
 800309c:	613b      	str	r3, [r7, #16]

	// TOUCH_XR output-high
	GPIOA->MODER &= ~GPIO_MODER_MODER2_Msk;
 800309e:	4b55      	ldr	r3, [pc, #340]	; (80031f4 <touch_read_coordinates+0x168>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a54      	ldr	r2, [pc, #336]	; (80031f4 <touch_read_coordinates+0x168>)
 80030a4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80030a8:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODER2_0;
 80030aa:	4b52      	ldr	r3, [pc, #328]	; (80031f4 <touch_read_coordinates+0x168>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a51      	ldr	r2, [pc, #324]	; (80031f4 <touch_read_coordinates+0x168>)
 80030b0:	f043 0310 	orr.w	r3, r3, #16
 80030b4:	6013      	str	r3, [r2, #0]
	GPIOA->ODR |= TOUCH_XR_Pin;
 80030b6:	4b4f      	ldr	r3, [pc, #316]	; (80031f4 <touch_read_coordinates+0x168>)
 80030b8:	695b      	ldr	r3, [r3, #20]
 80030ba:	4a4e      	ldr	r2, [pc, #312]	; (80031f4 <touch_read_coordinates+0x168>)
 80030bc:	f043 0304 	orr.w	r3, r3, #4
 80030c0:	6153      	str	r3, [r2, #20]

	// TOUCH_XL output-low
	GPIOA->MODER &= ~GPIO_MODER_MODER5_Msk;
 80030c2:	4b4c      	ldr	r3, [pc, #304]	; (80031f4 <touch_read_coordinates+0x168>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a4b      	ldr	r2, [pc, #300]	; (80031f4 <touch_read_coordinates+0x168>)
 80030c8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80030cc:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODER5_0;
 80030ce:	4b49      	ldr	r3, [pc, #292]	; (80031f4 <touch_read_coordinates+0x168>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a48      	ldr	r2, [pc, #288]	; (80031f4 <touch_read_coordinates+0x168>)
 80030d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030d8:	6013      	str	r3, [r2, #0]
	GPIOA->ODR &= ~TOUCH_XL_Pin;
 80030da:	4b46      	ldr	r3, [pc, #280]	; (80031f4 <touch_read_coordinates+0x168>)
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	4a45      	ldr	r2, [pc, #276]	; (80031f4 <touch_read_coordinates+0x168>)
 80030e0:	f023 0320 	bic.w	r3, r3, #32
 80030e4:	6153      	str	r3, [r2, #20]

	// TOUCH_YD inout-open
	GPIOA->MODER &= ~GPIO_MODER_MODER4_Msk;
 80030e6:	4b43      	ldr	r3, [pc, #268]	; (80031f4 <touch_read_coordinates+0x168>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a42      	ldr	r2, [pc, #264]	; (80031f4 <touch_read_coordinates+0x168>)
 80030ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030f0:	6013      	str	r3, [r2, #0]
	GPIOA->PUPDR &= ~GPIO_PUPDR_PUPD4_Msk;
 80030f2:	4b40      	ldr	r3, [pc, #256]	; (80031f4 <touch_read_coordinates+0x168>)
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	4a3f      	ldr	r2, [pc, #252]	; (80031f4 <touch_read_coordinates+0x168>)
 80030f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030fc:	60d3      	str	r3, [r2, #12]

	// TOUCH_YU as ADC
	adc_select_channel(TOUCH_YU_Pin);
 80030fe:	2008      	movs	r0, #8
 8003100:	f7ff fea6 	bl	8002e50 <adc_select_channel>
	HAL_Delay(5);
 8003104:	2005      	movs	r0, #5
 8003106:	f001 f8b1 	bl	800426c <HAL_Delay>

	for(int i=0; i<20; i++)
 800310a:	2300      	movs	r3, #0
 800310c:	60fb      	str	r3, [r7, #12]
 800310e:	e00b      	b.n	8003128 <touch_read_coordinates+0x9c>
		ret_y += adc_iir_measurement(y_iir_in, y_iir_out);
 8003110:	4939      	ldr	r1, [pc, #228]	; (80031f8 <touch_read_coordinates+0x16c>)
 8003112:	483a      	ldr	r0, [pc, #232]	; (80031fc <touch_read_coordinates+0x170>)
 8003114:	f7ff ff78 	bl	8003008 <adc_iir_measurement>
 8003118:	4603      	mov	r3, r0
 800311a:	461a      	mov	r2, r3
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	4413      	add	r3, r2
 8003120:	613b      	str	r3, [r7, #16]
	for(int i=0; i<20; i++)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	3301      	adds	r3, #1
 8003126:	60fb      	str	r3, [r7, #12]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2b13      	cmp	r3, #19
 800312c:	ddf0      	ble.n	8003110 <touch_read_coordinates+0x84>
	ret.y = ret_y / 20;
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	4a33      	ldr	r2, [pc, #204]	; (8003200 <touch_read_coordinates+0x174>)
 8003132:	fba2 2303 	umull	r2, r3, r2, r3
 8003136:	091b      	lsrs	r3, r3, #4
 8003138:	b29b      	uxth	r3, r3
 800313a:	807b      	strh	r3, [r7, #2]

	// TOUCH_YU output-high
	GPIOA->MODER &= ~GPIO_MODER_MODER3_Msk;
 800313c:	4b2d      	ldr	r3, [pc, #180]	; (80031f4 <touch_read_coordinates+0x168>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a2c      	ldr	r2, [pc, #176]	; (80031f4 <touch_read_coordinates+0x168>)
 8003142:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003146:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODER3_0;
 8003148:	4b2a      	ldr	r3, [pc, #168]	; (80031f4 <touch_read_coordinates+0x168>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a29      	ldr	r2, [pc, #164]	; (80031f4 <touch_read_coordinates+0x168>)
 800314e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003152:	6013      	str	r3, [r2, #0]
	GPIOA->ODR |= TOUCH_YU_Pin;
 8003154:	4b27      	ldr	r3, [pc, #156]	; (80031f4 <touch_read_coordinates+0x168>)
 8003156:	695b      	ldr	r3, [r3, #20]
 8003158:	4a26      	ldr	r2, [pc, #152]	; (80031f4 <touch_read_coordinates+0x168>)
 800315a:	f043 0308 	orr.w	r3, r3, #8
 800315e:	6153      	str	r3, [r2, #20]

	// TOUCH_YD output-low
	GPIOA->MODER &= ~GPIO_MODER_MODER4_Msk;
 8003160:	4b24      	ldr	r3, [pc, #144]	; (80031f4 <touch_read_coordinates+0x168>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a23      	ldr	r2, [pc, #140]	; (80031f4 <touch_read_coordinates+0x168>)
 8003166:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800316a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODER4_0;
 800316c:	4b21      	ldr	r3, [pc, #132]	; (80031f4 <touch_read_coordinates+0x168>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a20      	ldr	r2, [pc, #128]	; (80031f4 <touch_read_coordinates+0x168>)
 8003172:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003176:	6013      	str	r3, [r2, #0]
	GPIOA->ODR &= ~TOUCH_YD_Pin;
 8003178:	4b1e      	ldr	r3, [pc, #120]	; (80031f4 <touch_read_coordinates+0x168>)
 800317a:	695b      	ldr	r3, [r3, #20]
 800317c:	4a1d      	ldr	r2, [pc, #116]	; (80031f4 <touch_read_coordinates+0x168>)
 800317e:	f023 0310 	bic.w	r3, r3, #16
 8003182:	6153      	str	r3, [r2, #20]

	// TOUCH_XL input-open
	GPIOA->MODER &= ~GPIO_MODER_MODER5_Msk;
 8003184:	4b1b      	ldr	r3, [pc, #108]	; (80031f4 <touch_read_coordinates+0x168>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a1a      	ldr	r2, [pc, #104]	; (80031f4 <touch_read_coordinates+0x168>)
 800318a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800318e:	6013      	str	r3, [r2, #0]
	GPIOA->PUPDR &= ~GPIO_PUPDR_PUPD5_Msk;
 8003190:	4b18      	ldr	r3, [pc, #96]	; (80031f4 <touch_read_coordinates+0x168>)
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	4a17      	ldr	r2, [pc, #92]	; (80031f4 <touch_read_coordinates+0x168>)
 8003196:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800319a:	60d3      	str	r3, [r2, #12]

	// TOUCH_XR as ADC
	adc_select_channel(TOUCH_XR_Pin);
 800319c:	2004      	movs	r0, #4
 800319e:	f7ff fe57 	bl	8002e50 <adc_select_channel>
	HAL_Delay(5);
 80031a2:	2005      	movs	r0, #5
 80031a4:	f001 f862 	bl	800426c <HAL_Delay>

	for(int i=0; i<20; i++)
 80031a8:	2300      	movs	r3, #0
 80031aa:	60bb      	str	r3, [r7, #8]
 80031ac:	e00b      	b.n	80031c6 <touch_read_coordinates+0x13a>
		ret_x += adc_iir_measurement(x_iir_in, x_iir_out);
 80031ae:	4915      	ldr	r1, [pc, #84]	; (8003204 <touch_read_coordinates+0x178>)
 80031b0:	4815      	ldr	r0, [pc, #84]	; (8003208 <touch_read_coordinates+0x17c>)
 80031b2:	f7ff ff29 	bl	8003008 <adc_iir_measurement>
 80031b6:	4603      	mov	r3, r0
 80031b8:	461a      	mov	r2, r3
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	4413      	add	r3, r2
 80031be:	617b      	str	r3, [r7, #20]
	for(int i=0; i<20; i++)
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	3301      	adds	r3, #1
 80031c4:	60bb      	str	r3, [r7, #8]
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	2b13      	cmp	r3, #19
 80031ca:	ddf0      	ble.n	80031ae <touch_read_coordinates+0x122>
	ret.x = ret_x / 20;
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	4a0c      	ldr	r2, [pc, #48]	; (8003200 <touch_read_coordinates+0x174>)
 80031d0:	fba2 2303 	umull	r2, r3, r2, r3
 80031d4:	091b      	lsrs	r3, r3, #4
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	803b      	strh	r3, [r7, #0]

	return ret;
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	607b      	str	r3, [r7, #4]
 80031de:	2300      	movs	r3, #0
 80031e0:	88ba      	ldrh	r2, [r7, #4]
 80031e2:	f362 030f 	bfi	r3, r2, #0, #16
 80031e6:	88fa      	ldrh	r2, [r7, #6]
 80031e8:	f362 431f 	bfi	r3, r2, #16, #16
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3718      	adds	r7, #24
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	40020000 	.word	0x40020000
 80031f8:	20025918 	.word	0x20025918
 80031fc:	20025910 	.word	0x20025910
 8003200:	cccccccd 	.word	0xcccccccd
 8003204:	20025908 	.word	0x20025908
 8003208:	20025900 	.word	0x20025900

0800320c <init_TOUCH_YU_as_interrupt>:

/**********************************************************************
 *
**********************************************************************/
void init_TOUCH_YU_as_interrupt(void)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b086      	sub	sp, #24
 8003210:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003212:	1d3b      	adds	r3, r7, #4
 8003214:	2200      	movs	r2, #0
 8003216:	601a      	str	r2, [r3, #0]
 8003218:	605a      	str	r2, [r3, #4]
 800321a:	609a      	str	r2, [r3, #8]
 800321c:	60da      	str	r2, [r3, #12]
 800321e:	611a      	str	r2, [r3, #16]

	// TOUCH_YD as input-open
	GPIOA->MODER &= ~GPIO_MODER_MODER4_Msk;
 8003220:	4b2a      	ldr	r3, [pc, #168]	; (80032cc <init_TOUCH_YU_as_interrupt+0xc0>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a29      	ldr	r2, [pc, #164]	; (80032cc <init_TOUCH_YU_as_interrupt+0xc0>)
 8003226:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800322a:	6013      	str	r3, [r2, #0]
	GPIOA->PUPDR &= ~GPIO_PUPDR_PUPD4_Msk;
 800322c:	4b27      	ldr	r3, [pc, #156]	; (80032cc <init_TOUCH_YU_as_interrupt+0xc0>)
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	4a26      	ldr	r2, [pc, #152]	; (80032cc <init_TOUCH_YU_as_interrupt+0xc0>)
 8003232:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003236:	60d3      	str	r3, [r2, #12]

	// TOUCH_XL output-low
	GPIOA->MODER &= ~GPIO_MODER_MODER5_Msk;
 8003238:	4b24      	ldr	r3, [pc, #144]	; (80032cc <init_TOUCH_YU_as_interrupt+0xc0>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a23      	ldr	r2, [pc, #140]	; (80032cc <init_TOUCH_YU_as_interrupt+0xc0>)
 800323e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003242:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODER5_0;
 8003244:	4b21      	ldr	r3, [pc, #132]	; (80032cc <init_TOUCH_YU_as_interrupt+0xc0>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a20      	ldr	r2, [pc, #128]	; (80032cc <init_TOUCH_YU_as_interrupt+0xc0>)
 800324a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800324e:	6013      	str	r3, [r2, #0]
	GPIOA->ODR &= ~TOUCH_XL_Pin;
 8003250:	4b1e      	ldr	r3, [pc, #120]	; (80032cc <init_TOUCH_YU_as_interrupt+0xc0>)
 8003252:	695b      	ldr	r3, [r3, #20]
 8003254:	4a1d      	ldr	r2, [pc, #116]	; (80032cc <init_TOUCH_YU_as_interrupt+0xc0>)
 8003256:	f023 0320 	bic.w	r3, r3, #32
 800325a:	6153      	str	r3, [r2, #20]

	// TOUCH_XR output-low
	GPIOA->MODER &= ~GPIO_MODER_MODER2_Msk;
 800325c:	4b1b      	ldr	r3, [pc, #108]	; (80032cc <init_TOUCH_YU_as_interrupt+0xc0>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a1a      	ldr	r2, [pc, #104]	; (80032cc <init_TOUCH_YU_as_interrupt+0xc0>)
 8003262:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003266:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODER2_0;
 8003268:	4b18      	ldr	r3, [pc, #96]	; (80032cc <init_TOUCH_YU_as_interrupt+0xc0>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a17      	ldr	r2, [pc, #92]	; (80032cc <init_TOUCH_YU_as_interrupt+0xc0>)
 800326e:	f043 0310 	orr.w	r3, r3, #16
 8003272:	6013      	str	r3, [r2, #0]
	GPIOA->ODR &= ~TOUCH_XR_Pin;
 8003274:	4b15      	ldr	r3, [pc, #84]	; (80032cc <init_TOUCH_YU_as_interrupt+0xc0>)
 8003276:	695b      	ldr	r3, [r3, #20]
 8003278:	4a14      	ldr	r2, [pc, #80]	; (80032cc <init_TOUCH_YU_as_interrupt+0xc0>)
 800327a:	f023 0304 	bic.w	r3, r3, #4
 800327e:	6153      	str	r3, [r2, #20]

	// TOUCH_YU as interrupt input
	GPIO_InitStruct.Pin = TOUCH_YU_Pin;
 8003280:	2308      	movs	r3, #8
 8003282:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003284:	4b12      	ldr	r3, [pc, #72]	; (80032d0 <init_TOUCH_YU_as_interrupt+0xc4>)
 8003286:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003288:	2301      	movs	r3, #1
 800328a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800328c:	2302      	movs	r3, #2
 800328e:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003290:	1d3b      	adds	r3, r7, #4
 8003292:	4619      	mov	r1, r3
 8003294:	480d      	ldr	r0, [pc, #52]	; (80032cc <init_TOUCH_YU_as_interrupt+0xc0>)
 8003296:	f002 f8dd 	bl	8005454 <HAL_GPIO_Init>

	// Clear PR flag occurring during TOUCHED state
	HAL_EXTI_ClearPending(&hexti_touch_YU, EXTI_TRIGGER_RISING_FALLING);
 800329a:	2103      	movs	r1, #3
 800329c:	480d      	ldr	r0, [pc, #52]	; (80032d4 <init_TOUCH_YU_as_interrupt+0xc8>)
 800329e:	f002 f8a9 	bl	80053f4 <HAL_EXTI_ClearPending>

	// Enable interrupt on YU
	HAL_EXTI_SetConfigLine(&hexti_touch_YU, &extiConfig_touch_YU);
 80032a2:	490d      	ldr	r1, [pc, #52]	; (80032d8 <init_TOUCH_YU_as_interrupt+0xcc>)
 80032a4:	480b      	ldr	r0, [pc, #44]	; (80032d4 <init_TOUCH_YU_as_interrupt+0xc8>)
 80032a6:	f001 ff9d 	bl	80051e4 <HAL_EXTI_SetConfigLine>
	HAL_NVIC_SetPriority(TOUCH_YU_EXTI_IRQn, 0, 0);
 80032aa:	2200      	movs	r2, #0
 80032ac:	2100      	movs	r1, #0
 80032ae:	2009      	movs	r0, #9
 80032b0:	f001 fcdb 	bl	8004c6a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TOUCH_YU_EXTI_IRQn);
 80032b4:	2009      	movs	r0, #9
 80032b6:	f001 fcf4 	bl	8004ca2 <HAL_NVIC_EnableIRQ>
	HAL_EXTI_ClearPending(&hexti_touch_YU, EXTI_TRIGGER_RISING_FALLING);
 80032ba:	2103      	movs	r1, #3
 80032bc:	4805      	ldr	r0, [pc, #20]	; (80032d4 <init_TOUCH_YU_as_interrupt+0xc8>)
 80032be:	f002 f899 	bl	80053f4 <HAL_EXTI_ClearPending>
}
 80032c2:	bf00      	nop
 80032c4:	3718      	adds	r7, #24
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	40020000 	.word	0x40020000
 80032d0:	10210000 	.word	0x10210000
 80032d4:	20000030 	.word	0x20000030
 80032d8:	20000038 	.word	0x20000038

080032dc <EXTI3_TOUCH_Callback>:

/**********************************************************************
 * EXTI IRQ callback
**********************************************************************/
void EXTI3_TOUCH_Callback()
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	af00      	add	r7, sp, #0
	// Disable interrupt on TOUCH_YU pin
	HAL_EXTI_ClearPending(&hexti_touch_YU, EXTI_TRIGGER_RISING_FALLING);
 80032e0:	2103      	movs	r1, #3
 80032e2:	480a      	ldr	r0, [pc, #40]	; (800330c <EXTI3_TOUCH_Callback+0x30>)
 80032e4:	f002 f886 	bl	80053f4 <HAL_EXTI_ClearPending>
	HAL_EXTI_ClearConfigLine(&hexti_touch_YU);
 80032e8:	4808      	ldr	r0, [pc, #32]	; (800330c <EXTI3_TOUCH_Callback+0x30>)
 80032ea:	f002 f823 	bl	8005334 <HAL_EXTI_ClearConfigLine>
	HAL_NVIC_ClearPendingIRQ(TOUCH_YU_EXTI_IRQn);
 80032ee:	2009      	movs	r0, #9
 80032f0:	f001 fcff 	bl	8004cf2 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_DisableIRQ(TOUCH_YU_EXTI_IRQn);
 80032f4:	2009      	movs	r0, #9
 80032f6:	f001 fce2 	bl	8004cbe <HAL_NVIC_DisableIRQ>
	// Init analog mode on TOUCH_YU pin
	adc_select_channel(TOUCH_YU_Pin);
 80032fa:	2008      	movs	r0, #8
 80032fc:	f7ff fda8 	bl	8002e50 <adc_select_channel>
	g_touch_state = TOUCH_TOUCHED;
 8003300:	4b03      	ldr	r3, [pc, #12]	; (8003310 <EXTI3_TOUCH_Callback+0x34>)
 8003302:	2202      	movs	r2, #2
 8003304:	701a      	strb	r2, [r3, #0]
}
 8003306:	bf00      	nop
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	20000030 	.word	0x20000030
 8003310:	2000002c 	.word	0x2000002c

08003314 <touch_init>:

/**********************************************************************
 *
**********************************************************************/
void touch_init()
{
 8003314:	b580      	push	{r7, lr}
 8003316:	af00      	add	r7, sp, #0
	// TOUCH_YD as input-open
	GPIOA->MODER &= ~GPIO_MODER_MODER4_Msk;
 8003318:	4b0b      	ldr	r3, [pc, #44]	; (8003348 <touch_init+0x34>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a0a      	ldr	r2, [pc, #40]	; (8003348 <touch_init+0x34>)
 800331e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003322:	6013      	str	r3, [r2, #0]

	// Clear PR flag raised by configuring TOUCH_YD pin
	// to output-low during GPIO initialization at startup
	HAL_EXTI_ClearPending(&hexti_touch_YU, EXTI_TRIGGER_RISING_FALLING);
 8003324:	2103      	movs	r1, #3
 8003326:	4809      	ldr	r0, [pc, #36]	; (800334c <touch_init+0x38>)
 8003328:	f002 f864 	bl	80053f4 <HAL_EXTI_ClearPending>

	// Enable interrupt
	HAL_EXTI_SetConfigLine(&hexti_touch_YU, &extiConfig_touch_YU);
 800332c:	4908      	ldr	r1, [pc, #32]	; (8003350 <touch_init+0x3c>)
 800332e:	4807      	ldr	r0, [pc, #28]	; (800334c <touch_init+0x38>)
 8003330:	f001 ff58 	bl	80051e4 <HAL_EXTI_SetConfigLine>
	HAL_NVIC_SetPriority(TOUCH_YU_EXTI_IRQn, 0, 0);
 8003334:	2200      	movs	r2, #0
 8003336:	2100      	movs	r1, #0
 8003338:	2009      	movs	r0, #9
 800333a:	f001 fc96 	bl	8004c6a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TOUCH_YU_EXTI_IRQn);
 800333e:	2009      	movs	r0, #9
 8003340:	f001 fcaf 	bl	8004ca2 <HAL_NVIC_EnableIRQ>
}
 8003344:	bf00      	nop
 8003346:	bd80      	pop	{r7, pc}
 8003348:	40020000 	.word	0x40020000
 800334c:	20000030 	.word	0x20000030
 8003350:	20000038 	.word	0x20000038

08003354 <touch_process>:
 * TOUCHED	-> RELEASED	** after timeout & release
 * TOUCHED	-> TOUCHED	** if touch not released
 * RELEASED	-> IDLE		** unconditionally
**********************************************************************/
void touch_process()
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
	touch_coordinates_t touch_coordinates = {0};
 800335a:	2300      	movs	r3, #0
 800335c:	607b      	str	r3, [r7, #4]

	switch(g_touch_state)
 800335e:	4b2a      	ldr	r3, [pc, #168]	; (8003408 <touch_process+0xb4>)
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	b2db      	uxtb	r3, r3
 8003364:	2b04      	cmp	r3, #4
 8003366:	d041      	beq.n	80033ec <touch_process+0x98>
 8003368:	2b04      	cmp	r3, #4
 800336a:	dc48      	bgt.n	80033fe <touch_process+0xaa>
 800336c:	2b01      	cmp	r3, #1
 800336e:	d043      	beq.n	80033f8 <touch_process+0xa4>
 8003370:	2b02      	cmp	r3, #2
 8003372:	d000      	beq.n	8003376 <touch_process+0x22>
	case TOUCH_RELEASED:
		init_TOUCH_YU_as_interrupt();
		g_touch_state = TOUCH_IDLE;
		break;
	}
}
 8003374:	e043      	b.n	80033fe <touch_process+0xaa>
		g_touch_coordinates = touch_read_coordinates();
 8003376:	f7ff fe89 	bl	800308c <touch_read_coordinates>
 800337a:	4603      	mov	r3, r0
 800337c:	4a23      	ldr	r2, [pc, #140]	; (800340c <touch_process+0xb8>)
 800337e:	6013      	str	r3, [r2, #0]
		GPIOA->MODER &= ~GPIO_MODER_MODER5_Msk;
 8003380:	4b23      	ldr	r3, [pc, #140]	; (8003410 <touch_process+0xbc>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a22      	ldr	r2, [pc, #136]	; (8003410 <touch_process+0xbc>)
 8003386:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800338a:	6013      	str	r3, [r2, #0]
		GPIOA->MODER |= GPIO_MODER_MODER5_0;
 800338c:	4b20      	ldr	r3, [pc, #128]	; (8003410 <touch_process+0xbc>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a1f      	ldr	r2, [pc, #124]	; (8003410 <touch_process+0xbc>)
 8003392:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003396:	6013      	str	r3, [r2, #0]
		GPIOA->ODR &= ~TOUCH_XL_Pin;
 8003398:	4b1d      	ldr	r3, [pc, #116]	; (8003410 <touch_process+0xbc>)
 800339a:	695b      	ldr	r3, [r3, #20]
 800339c:	4a1c      	ldr	r2, [pc, #112]	; (8003410 <touch_process+0xbc>)
 800339e:	f023 0320 	bic.w	r3, r3, #32
 80033a2:	6153      	str	r3, [r2, #20]
		uint16_t x_val = 0;
 80033a4:	2300      	movs	r3, #0
 80033a6:	81fb      	strh	r3, [r7, #14]
		HAL_Delay(5);
 80033a8:	2005      	movs	r0, #5
 80033aa:	f000 ff5f 	bl	800426c <HAL_Delay>
		for(int i=0; i<10; i++)
 80033ae:	2300      	movs	r3, #0
 80033b0:	60bb      	str	r3, [r7, #8]
 80033b2:	e00b      	b.n	80033cc <touch_process+0x78>
			x_val += adc_iir_measurement(x_iir_in, x_iir_out);
 80033b4:	4917      	ldr	r1, [pc, #92]	; (8003414 <touch_process+0xc0>)
 80033b6:	4818      	ldr	r0, [pc, #96]	; (8003418 <touch_process+0xc4>)
 80033b8:	f7ff fe26 	bl	8003008 <adc_iir_measurement>
 80033bc:	4603      	mov	r3, r0
 80033be:	461a      	mov	r2, r3
 80033c0:	89fb      	ldrh	r3, [r7, #14]
 80033c2:	4413      	add	r3, r2
 80033c4:	81fb      	strh	r3, [r7, #14]
		for(int i=0; i<10; i++)
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	3301      	adds	r3, #1
 80033ca:	60bb      	str	r3, [r7, #8]
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	2b09      	cmp	r3, #9
 80033d0:	ddf0      	ble.n	80033b4 <touch_process+0x60>
		x_val  /= 10;
 80033d2:	89fb      	ldrh	r3, [r7, #14]
 80033d4:	4a11      	ldr	r2, [pc, #68]	; (800341c <touch_process+0xc8>)
 80033d6:	fba2 2303 	umull	r2, r3, r2, r3
 80033da:	08db      	lsrs	r3, r3, #3
 80033dc:	81fb      	strh	r3, [r7, #14]
		if(x_val < 100)
 80033de:	89fb      	ldrh	r3, [r7, #14]
 80033e0:	2b63      	cmp	r3, #99	; 0x63
 80033e2:	d80b      	bhi.n	80033fc <touch_process+0xa8>
			g_touch_state = TOUCH_RELEASED;
 80033e4:	4b08      	ldr	r3, [pc, #32]	; (8003408 <touch_process+0xb4>)
 80033e6:	2204      	movs	r2, #4
 80033e8:	701a      	strb	r2, [r3, #0]
		break;
 80033ea:	e007      	b.n	80033fc <touch_process+0xa8>
		init_TOUCH_YU_as_interrupt();
 80033ec:	f7ff ff0e 	bl	800320c <init_TOUCH_YU_as_interrupt>
		g_touch_state = TOUCH_IDLE;
 80033f0:	4b05      	ldr	r3, [pc, #20]	; (8003408 <touch_process+0xb4>)
 80033f2:	2201      	movs	r2, #1
 80033f4:	701a      	strb	r2, [r3, #0]
		break;
 80033f6:	e002      	b.n	80033fe <touch_process+0xaa>
		break;
 80033f8:	bf00      	nop
 80033fa:	e000      	b.n	80033fe <touch_process+0xaa>
		break;
 80033fc:	bf00      	nop
}
 80033fe:	bf00      	nop
 8003400:	3710      	adds	r7, #16
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	2000002c 	.word	0x2000002c
 800340c:	200258fc 	.word	0x200258fc
 8003410:	40020000 	.word	0x40020000
 8003414:	20025908 	.word	0x20025908
 8003418:	20025900 	.word	0x20025900
 800341c:	cccccccd 	.word	0xcccccccd

08003420 <uart_init>:



//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void uart_init()
{
 8003420:	b480      	push	{r7}
 8003422:	af00      	add	r7, sp, #0
	__HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 8003424:	4b06      	ldr	r3, [pc, #24]	; (8003440 <uart_init+0x20>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	68da      	ldr	r2, [r3, #12]
 800342a:	4b05      	ldr	r3, [pc, #20]	; (8003440 <uart_init+0x20>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f042 0220 	orr.w	r2, r2, #32
 8003432:	60da      	str	r2, [r3, #12]
}
 8003434:	bf00      	nop
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	20047f5c 	.word	0x20047f5c

08003444 <uart_tx_process>:



//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void uart_tx_process()
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0
	static uint8_t last_nose = 0;
	uint8_t string_size;

	switch(g_uart_tx_state)
 800344a:	4b34      	ldr	r3, [pc, #208]	; (800351c <uart_tx_process+0xd8>)
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	2b02      	cmp	r3, #2
 8003450:	d030      	beq.n	80034b4 <uart_tx_process+0x70>
 8003452:	2b02      	cmp	r3, #2
 8003454:	dc5e      	bgt.n	8003514 <uart_tx_process+0xd0>
 8003456:	2b00      	cmp	r3, #0
 8003458:	d002      	beq.n	8003460 <uart_tx_process+0x1c>
 800345a:	2b01      	cmp	r3, #1
 800345c:	d00a      	beq.n	8003474 <uart_tx_process+0x30>
			g_uart_tx_state = UART_TX_TRANSMIT;
		else if((last_nose != g_uart_tx_nose) && (g_uart_tx_tail == g_uart_tx_nose))
			g_uart_tx_state = UART_TX_IDLE;
		break;
	}
}
 800345e:	e059      	b.n	8003514 <uart_tx_process+0xd0>
		if(g_uart_tx_nose != g_uart_tx_tail)
 8003460:	4b2f      	ldr	r3, [pc, #188]	; (8003520 <uart_tx_process+0xdc>)
 8003462:	881a      	ldrh	r2, [r3, #0]
 8003464:	4b2f      	ldr	r3, [pc, #188]	; (8003524 <uart_tx_process+0xe0>)
 8003466:	881b      	ldrh	r3, [r3, #0]
 8003468:	429a      	cmp	r2, r3
 800346a:	d050      	beq.n	800350e <uart_tx_process+0xca>
			g_uart_tx_state = UART_TX_TRANSMIT;
 800346c:	4b2b      	ldr	r3, [pc, #172]	; (800351c <uart_tx_process+0xd8>)
 800346e:	2201      	movs	r2, #1
 8003470:	701a      	strb	r2, [r3, #0]
		break;
 8003472:	e04c      	b.n	800350e <uart_tx_process+0xca>
		string_size = strlen(g_uart_tx_buffer + (g_uart_tx_nose)) + 1;
 8003474:	4b2a      	ldr	r3, [pc, #168]	; (8003520 <uart_tx_process+0xdc>)
 8003476:	881b      	ldrh	r3, [r3, #0]
 8003478:	461a      	mov	r2, r3
 800347a:	4b2b      	ldr	r3, [pc, #172]	; (8003528 <uart_tx_process+0xe4>)
 800347c:	4413      	add	r3, r2
 800347e:	4618      	mov	r0, r3
 8003480:	f7fc ff28 	bl	80002d4 <strlen>
 8003484:	4603      	mov	r3, r0
 8003486:	b2db      	uxtb	r3, r3
 8003488:	3301      	adds	r3, #1
 800348a:	71fb      	strb	r3, [r7, #7]
		HAL_UART_Transmit_IT(
 800348c:	4b24      	ldr	r3, [pc, #144]	; (8003520 <uart_tx_process+0xdc>)
 800348e:	881b      	ldrh	r3, [r3, #0]
 8003490:	461a      	mov	r2, r3
 8003492:	4b25      	ldr	r3, [pc, #148]	; (8003528 <uart_tx_process+0xe4>)
 8003494:	4413      	add	r3, r2
 8003496:	79fa      	ldrb	r2, [r7, #7]
 8003498:	b292      	uxth	r2, r2
 800349a:	4619      	mov	r1, r3
 800349c:	4823      	ldr	r0, [pc, #140]	; (800352c <uart_tx_process+0xe8>)
 800349e:	f006 fb78 	bl	8009b92 <HAL_UART_Transmit_IT>
		last_nose = g_uart_tx_nose;
 80034a2:	4b1f      	ldr	r3, [pc, #124]	; (8003520 <uart_tx_process+0xdc>)
 80034a4:	881b      	ldrh	r3, [r3, #0]
 80034a6:	b2da      	uxtb	r2, r3
 80034a8:	4b21      	ldr	r3, [pc, #132]	; (8003530 <uart_tx_process+0xec>)
 80034aa:	701a      	strb	r2, [r3, #0]
		g_uart_tx_state = UART_TX_TRANSMITING;
 80034ac:	4b1b      	ldr	r3, [pc, #108]	; (800351c <uart_tx_process+0xd8>)
 80034ae:	2202      	movs	r2, #2
 80034b0:	701a      	strb	r2, [r3, #0]
		break;
 80034b2:	e02f      	b.n	8003514 <uart_tx_process+0xd0>
		if((last_nose == g_uart_tx_nose))
 80034b4:	4b1e      	ldr	r3, [pc, #120]	; (8003530 <uart_tx_process+0xec>)
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	b29a      	uxth	r2, r3
 80034ba:	4b19      	ldr	r3, [pc, #100]	; (8003520 <uart_tx_process+0xdc>)
 80034bc:	881b      	ldrh	r3, [r3, #0]
 80034be:	429a      	cmp	r2, r3
 80034c0:	d103      	bne.n	80034ca <uart_tx_process+0x86>
			g_uart_tx_state = UART_TX_TRANSMITING;
 80034c2:	4b16      	ldr	r3, [pc, #88]	; (800351c <uart_tx_process+0xd8>)
 80034c4:	2202      	movs	r2, #2
 80034c6:	701a      	strb	r2, [r3, #0]
		break;
 80034c8:	e023      	b.n	8003512 <uart_tx_process+0xce>
		else if((last_nose != g_uart_tx_nose) && (g_uart_tx_tail != g_uart_tx_nose))
 80034ca:	4b19      	ldr	r3, [pc, #100]	; (8003530 <uart_tx_process+0xec>)
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	b29a      	uxth	r2, r3
 80034d0:	4b13      	ldr	r3, [pc, #76]	; (8003520 <uart_tx_process+0xdc>)
 80034d2:	881b      	ldrh	r3, [r3, #0]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d009      	beq.n	80034ec <uart_tx_process+0xa8>
 80034d8:	4b12      	ldr	r3, [pc, #72]	; (8003524 <uart_tx_process+0xe0>)
 80034da:	881a      	ldrh	r2, [r3, #0]
 80034dc:	4b10      	ldr	r3, [pc, #64]	; (8003520 <uart_tx_process+0xdc>)
 80034de:	881b      	ldrh	r3, [r3, #0]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d003      	beq.n	80034ec <uart_tx_process+0xa8>
			g_uart_tx_state = UART_TX_TRANSMIT;
 80034e4:	4b0d      	ldr	r3, [pc, #52]	; (800351c <uart_tx_process+0xd8>)
 80034e6:	2201      	movs	r2, #1
 80034e8:	701a      	strb	r2, [r3, #0]
		break;
 80034ea:	e012      	b.n	8003512 <uart_tx_process+0xce>
		else if((last_nose != g_uart_tx_nose) && (g_uart_tx_tail == g_uart_tx_nose))
 80034ec:	4b10      	ldr	r3, [pc, #64]	; (8003530 <uart_tx_process+0xec>)
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	b29a      	uxth	r2, r3
 80034f2:	4b0b      	ldr	r3, [pc, #44]	; (8003520 <uart_tx_process+0xdc>)
 80034f4:	881b      	ldrh	r3, [r3, #0]
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d00b      	beq.n	8003512 <uart_tx_process+0xce>
 80034fa:	4b0a      	ldr	r3, [pc, #40]	; (8003524 <uart_tx_process+0xe0>)
 80034fc:	881a      	ldrh	r2, [r3, #0]
 80034fe:	4b08      	ldr	r3, [pc, #32]	; (8003520 <uart_tx_process+0xdc>)
 8003500:	881b      	ldrh	r3, [r3, #0]
 8003502:	429a      	cmp	r2, r3
 8003504:	d105      	bne.n	8003512 <uart_tx_process+0xce>
			g_uart_tx_state = UART_TX_IDLE;
 8003506:	4b05      	ldr	r3, [pc, #20]	; (800351c <uart_tx_process+0xd8>)
 8003508:	2200      	movs	r2, #0
 800350a:	701a      	strb	r2, [r3, #0]
		break;
 800350c:	e001      	b.n	8003512 <uart_tx_process+0xce>
		break;
 800350e:	bf00      	nop
 8003510:	e000      	b.n	8003514 <uart_tx_process+0xd0>
		break;
 8003512:	bf00      	nop
}
 8003514:	bf00      	nop
 8003516:	3708      	adds	r7, #8
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}
 800351c:	2002591e 	.word	0x2002591e
 8003520:	20025a20 	.word	0x20025a20
 8003524:	20025a22 	.word	0x20025a22
 8003528:	20025920 	.word	0x20025920
 800352c:	20047f5c 	.word	0x20047f5c
 8003530:	20025a2a 	.word	0x20025a2a

08003534 <uart_write>:



//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void uart_write(uint8_t* buff)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b084      	sub	sp, #16
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
	uint8_t string_size = strlen(buff) + 1;
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f7fc fec9 	bl	80002d4 <strlen>
 8003542:	4603      	mov	r3, r0
 8003544:	b2db      	uxtb	r3, r3
 8003546:	3301      	adds	r3, #1
 8003548:	73fb      	strb	r3, [r7, #15]

	if(
			((g_uart_tx_tail - g_uart_tx_nose >= 0) && (string_size < UART_TX_BUFFER_MAX - (g_uart_tx_tail - g_uart_tx_nose))) ||
 800354a:	4b3e      	ldr	r3, [pc, #248]	; (8003644 <uart_write+0x110>)
 800354c:	881b      	ldrh	r3, [r3, #0]
 800354e:	461a      	mov	r2, r3
 8003550:	4b3d      	ldr	r3, [pc, #244]	; (8003648 <uart_write+0x114>)
 8003552:	881b      	ldrh	r3, [r3, #0]
 8003554:	1ad3      	subs	r3, r2, r3
	if(
 8003556:	2b00      	cmp	r3, #0
 8003558:	db0a      	blt.n	8003570 <uart_write+0x3c>
			((g_uart_tx_tail - g_uart_tx_nose >= 0) && (string_size < UART_TX_BUFFER_MAX - (g_uart_tx_tail - g_uart_tx_nose))) ||
 800355a:	7bfa      	ldrb	r2, [r7, #15]
 800355c:	4b39      	ldr	r3, [pc, #228]	; (8003644 <uart_write+0x110>)
 800355e:	881b      	ldrh	r3, [r3, #0]
 8003560:	4619      	mov	r1, r3
 8003562:	4b39      	ldr	r3, [pc, #228]	; (8003648 <uart_write+0x114>)
 8003564:	881b      	ldrh	r3, [r3, #0]
 8003566:	1acb      	subs	r3, r1, r3
 8003568:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800356c:	429a      	cmp	r2, r3
 800356e:	db10      	blt.n	8003592 <uart_write+0x5e>
			((g_uart_tx_tail - g_uart_tx_nose <= 0) && (string_size < g_uart_tx_nose - g_uart_tx_tail)))
 8003570:	4b34      	ldr	r3, [pc, #208]	; (8003644 <uart_write+0x110>)
 8003572:	881b      	ldrh	r3, [r3, #0]
 8003574:	461a      	mov	r2, r3
 8003576:	4b34      	ldr	r3, [pc, #208]	; (8003648 <uart_write+0x114>)
 8003578:	881b      	ldrh	r3, [r3, #0]
 800357a:	1ad3      	subs	r3, r2, r3
			((g_uart_tx_tail - g_uart_tx_nose >= 0) && (string_size < UART_TX_BUFFER_MAX - (g_uart_tx_tail - g_uart_tx_nose))) ||
 800357c:	2b00      	cmp	r3, #0
 800357e:	dc5c      	bgt.n	800363a <uart_write+0x106>
			((g_uart_tx_tail - g_uart_tx_nose <= 0) && (string_size < g_uart_tx_nose - g_uart_tx_tail)))
 8003580:	7bfa      	ldrb	r2, [r7, #15]
 8003582:	4b31      	ldr	r3, [pc, #196]	; (8003648 <uart_write+0x114>)
 8003584:	881b      	ldrh	r3, [r3, #0]
 8003586:	4619      	mov	r1, r3
 8003588:	4b2e      	ldr	r3, [pc, #184]	; (8003644 <uart_write+0x110>)
 800358a:	881b      	ldrh	r3, [r3, #0]
 800358c:	1acb      	subs	r3, r1, r3
 800358e:	429a      	cmp	r2, r3
 8003590:	da53      	bge.n	800363a <uart_write+0x106>
	{
		if(((g_uart_tx_tail - g_uart_tx_nose >= 0)) && (string_size > (UART_TX_BUFFER_MAX - g_uart_tx_tail)))
 8003592:	4b2c      	ldr	r3, [pc, #176]	; (8003644 <uart_write+0x110>)
 8003594:	881b      	ldrh	r3, [r3, #0]
 8003596:	461a      	mov	r2, r3
 8003598:	4b2b      	ldr	r3, [pc, #172]	; (8003648 <uart_write+0x114>)
 800359a:	881b      	ldrh	r3, [r3, #0]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	2b00      	cmp	r3, #0
 80035a0:	db2f      	blt.n	8003602 <uart_write+0xce>
 80035a2:	7bfa      	ldrb	r2, [r7, #15]
 80035a4:	4b27      	ldr	r3, [pc, #156]	; (8003644 <uart_write+0x110>)
 80035a6:	881b      	ldrh	r3, [r3, #0]
 80035a8:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80035ac:	429a      	cmp	r2, r3
 80035ae:	dd28      	ble.n	8003602 <uart_write+0xce>
		{
			strncpy(g_uart_tx_buffer + g_uart_tx_tail, buff, UART_TX_BUFFER_MAX - g_uart_tx_tail);
 80035b0:	4b24      	ldr	r3, [pc, #144]	; (8003644 <uart_write+0x110>)
 80035b2:	881b      	ldrh	r3, [r3, #0]
 80035b4:	461a      	mov	r2, r3
 80035b6:	4b25      	ldr	r3, [pc, #148]	; (800364c <uart_write+0x118>)
 80035b8:	4413      	add	r3, r2
 80035ba:	4a22      	ldr	r2, [pc, #136]	; (8003644 <uart_write+0x110>)
 80035bc:	8812      	ldrh	r2, [r2, #0]
 80035be:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 80035c2:	6879      	ldr	r1, [r7, #4]
 80035c4:	4618      	mov	r0, r3
 80035c6:	f024 f867 	bl	8027698 <strncpy>
			string_size -= (UART_TX_BUFFER_MAX - g_uart_tx_tail);
 80035ca:	4b1e      	ldr	r3, [pc, #120]	; (8003644 <uart_write+0x110>)
 80035cc:	881b      	ldrh	r3, [r3, #0]
 80035ce:	b2da      	uxtb	r2, r3
 80035d0:	7bfb      	ldrb	r3, [r7, #15]
 80035d2:	4413      	add	r3, r2
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	3301      	adds	r3, #1
 80035d8:	73fb      	strb	r3, [r7, #15]
			strncpy(g_uart_tx_buffer + 0, buff + (UART_TX_BUFFER_MAX - g_uart_tx_tail), string_size);
 80035da:	4b1a      	ldr	r3, [pc, #104]	; (8003644 <uart_write+0x110>)
 80035dc:	881b      	ldrh	r3, [r3, #0]
 80035de:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80035e2:	461a      	mov	r2, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4413      	add	r3, r2
 80035e8:	7bfa      	ldrb	r2, [r7, #15]
 80035ea:	4619      	mov	r1, r3
 80035ec:	4817      	ldr	r0, [pc, #92]	; (800364c <uart_write+0x118>)
 80035ee:	f024 f853 	bl	8027698 <strncpy>
			g_uart_tx_tail = 0;
 80035f2:	4b14      	ldr	r3, [pc, #80]	; (8003644 <uart_write+0x110>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	801a      	strh	r2, [r3, #0]
			g_uart_tx_tail = string_size;
 80035f8:	7bfb      	ldrb	r3, [r7, #15]
 80035fa:	b29a      	uxth	r2, r3
 80035fc:	4b11      	ldr	r3, [pc, #68]	; (8003644 <uart_write+0x110>)
 80035fe:	801a      	strh	r2, [r3, #0]
				g_uart_tx_tail += string_size;
			else
				g_uart_tx_tail = 0;
		}
	}
}
 8003600:	e01b      	b.n	800363a <uart_write+0x106>
			strcpy(g_uart_tx_buffer + g_uart_tx_tail, buff);
 8003602:	4b10      	ldr	r3, [pc, #64]	; (8003644 <uart_write+0x110>)
 8003604:	881b      	ldrh	r3, [r3, #0]
 8003606:	461a      	mov	r2, r3
 8003608:	4b10      	ldr	r3, [pc, #64]	; (800364c <uart_write+0x118>)
 800360a:	4413      	add	r3, r2
 800360c:	6879      	ldr	r1, [r7, #4]
 800360e:	4618      	mov	r0, r3
 8003610:	f024 f828 	bl	8027664 <strcpy>
			if(g_uart_tx_tail + string_size < UART_TX_BUFFER_MAX)
 8003614:	4b0b      	ldr	r3, [pc, #44]	; (8003644 <uart_write+0x110>)
 8003616:	881b      	ldrh	r3, [r3, #0]
 8003618:	461a      	mov	r2, r3
 800361a:	7bfb      	ldrb	r3, [r7, #15]
 800361c:	4413      	add	r3, r2
 800361e:	2bfe      	cmp	r3, #254	; 0xfe
 8003620:	dc08      	bgt.n	8003634 <uart_write+0x100>
				g_uart_tx_tail += string_size;
 8003622:	7bfb      	ldrb	r3, [r7, #15]
 8003624:	b29a      	uxth	r2, r3
 8003626:	4b07      	ldr	r3, [pc, #28]	; (8003644 <uart_write+0x110>)
 8003628:	881b      	ldrh	r3, [r3, #0]
 800362a:	4413      	add	r3, r2
 800362c:	b29a      	uxth	r2, r3
 800362e:	4b05      	ldr	r3, [pc, #20]	; (8003644 <uart_write+0x110>)
 8003630:	801a      	strh	r2, [r3, #0]
}
 8003632:	e002      	b.n	800363a <uart_write+0x106>
				g_uart_tx_tail = 0;
 8003634:	4b03      	ldr	r3, [pc, #12]	; (8003644 <uart_write+0x110>)
 8003636:	2200      	movs	r2, #0
 8003638:	801a      	strh	r2, [r3, #0]
}
 800363a:	bf00      	nop
 800363c:	3710      	adds	r7, #16
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	20025a22 	.word	0x20025a22
 8003648:	20025a20 	.word	0x20025a20
 800364c:	20025920 	.word	0x20025920

08003650 <HAL_UART_TxCpltCallback>:



//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
	g_uart_tx_nose += strlen(g_uart_tx_buffer + g_uart_tx_nose) + 1;
 8003658:	4b0e      	ldr	r3, [pc, #56]	; (8003694 <HAL_UART_TxCpltCallback+0x44>)
 800365a:	881b      	ldrh	r3, [r3, #0]
 800365c:	461a      	mov	r2, r3
 800365e:	4b0e      	ldr	r3, [pc, #56]	; (8003698 <HAL_UART_TxCpltCallback+0x48>)
 8003660:	4413      	add	r3, r2
 8003662:	4618      	mov	r0, r3
 8003664:	f7fc fe36 	bl	80002d4 <strlen>
 8003668:	4603      	mov	r3, r0
 800366a:	b29a      	uxth	r2, r3
 800366c:	4b09      	ldr	r3, [pc, #36]	; (8003694 <HAL_UART_TxCpltCallback+0x44>)
 800366e:	881b      	ldrh	r3, [r3, #0]
 8003670:	4413      	add	r3, r2
 8003672:	b29b      	uxth	r3, r3
 8003674:	3301      	adds	r3, #1
 8003676:	b29a      	uxth	r2, r3
 8003678:	4b06      	ldr	r3, [pc, #24]	; (8003694 <HAL_UART_TxCpltCallback+0x44>)
 800367a:	801a      	strh	r2, [r3, #0]

	if(g_uart_tx_nose >= UART_TX_BUFFER_MAX)
 800367c:	4b05      	ldr	r3, [pc, #20]	; (8003694 <HAL_UART_TxCpltCallback+0x44>)
 800367e:	881b      	ldrh	r3, [r3, #0]
 8003680:	2bfe      	cmp	r3, #254	; 0xfe
 8003682:	d902      	bls.n	800368a <HAL_UART_TxCpltCallback+0x3a>
		g_uart_tx_nose = 0;
 8003684:	4b03      	ldr	r3, [pc, #12]	; (8003694 <HAL_UART_TxCpltCallback+0x44>)
 8003686:	2200      	movs	r2, #0
 8003688:	801a      	strh	r2, [r3, #0]

}
 800368a:	bf00      	nop
 800368c:	3708      	adds	r7, #8
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	20025a20 	.word	0x20025a20
 8003698:	20025920 	.word	0x20025920

0800369c <uart_rx_process>:



//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void uart_rx_process()
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
	uint8_t string_size = strlen(g_uart_rx_buffer + g_uart_rx_nose + 1) + 1;
 80036a2:	4b4b      	ldr	r3, [pc, #300]	; (80037d0 <uart_rx_process+0x134>)
 80036a4:	881b      	ldrh	r3, [r3, #0]
 80036a6:	3301      	adds	r3, #1
 80036a8:	4a4a      	ldr	r2, [pc, #296]	; (80037d4 <uart_rx_process+0x138>)
 80036aa:	4413      	add	r3, r2
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7fc fe11 	bl	80002d4 <strlen>
 80036b2:	4603      	mov	r3, r0
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	3301      	adds	r3, #1
 80036b8:	71fb      	strb	r3, [r7, #7]

	switch(g_uart_rx_state)
 80036ba:	4b47      	ldr	r3, [pc, #284]	; (80037d8 <uart_rx_process+0x13c>)
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d002      	beq.n	80036c8 <uart_rx_process+0x2c>
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d008      	beq.n	80036d8 <uart_rx_process+0x3c>
			g_uart_rx_state = UART_RX_IDLE;
		break;


	}
}
 80036c6:	e07e      	b.n	80037c6 <uart_rx_process+0x12a>
		if(g_uart_rx_cnt)
 80036c8:	4b44      	ldr	r3, [pc, #272]	; (80037dc <uart_rx_process+0x140>)
 80036ca:	881b      	ldrh	r3, [r3, #0]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d077      	beq.n	80037c0 <uart_rx_process+0x124>
			g_uart_rx_state = UART_RX_RECEIVE;
 80036d0:	4b41      	ldr	r3, [pc, #260]	; (80037d8 <uart_rx_process+0x13c>)
 80036d2:	2201      	movs	r2, #1
 80036d4:	701a      	strb	r2, [r3, #0]
		break;
 80036d6:	e073      	b.n	80037c0 <uart_rx_process+0x124>
		if(g_uart_rx_nose < g_uart_rx_tail &&
 80036d8:	4b3d      	ldr	r3, [pc, #244]	; (80037d0 <uart_rx_process+0x134>)
 80036da:	881a      	ldrh	r2, [r3, #0]
 80036dc:	4b40      	ldr	r3, [pc, #256]	; (80037e0 <uart_rx_process+0x144>)
 80036de:	881b      	ldrh	r3, [r3, #0]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d21c      	bcs.n	800371e <uart_rx_process+0x82>
				(g_uart_rx_buffer[g_uart_rx_nose + string_size - 2] == '\r') &&
 80036e4:	4b3a      	ldr	r3, [pc, #232]	; (80037d0 <uart_rx_process+0x134>)
 80036e6:	881b      	ldrh	r3, [r3, #0]
 80036e8:	461a      	mov	r2, r3
 80036ea:	79fb      	ldrb	r3, [r7, #7]
 80036ec:	4413      	add	r3, r2
 80036ee:	3b02      	subs	r3, #2
 80036f0:	4a38      	ldr	r2, [pc, #224]	; (80037d4 <uart_rx_process+0x138>)
 80036f2:	5cd3      	ldrb	r3, [r2, r3]
		if(g_uart_rx_nose < g_uart_rx_tail &&
 80036f4:	2b0d      	cmp	r3, #13
 80036f6:	d112      	bne.n	800371e <uart_rx_process+0x82>
				(g_uart_rx_buffer[g_uart_rx_nose + string_size - 1] == '\n'))
 80036f8:	4b35      	ldr	r3, [pc, #212]	; (80037d0 <uart_rx_process+0x134>)
 80036fa:	881b      	ldrh	r3, [r3, #0]
 80036fc:	461a      	mov	r2, r3
 80036fe:	79fb      	ldrb	r3, [r7, #7]
 8003700:	4413      	add	r3, r2
 8003702:	3b01      	subs	r3, #1
 8003704:	4a33      	ldr	r2, [pc, #204]	; (80037d4 <uart_rx_process+0x138>)
 8003706:	5cd3      	ldrb	r3, [r2, r3]
				(g_uart_rx_buffer[g_uart_rx_nose + string_size - 2] == '\r') &&
 8003708:	2b0a      	cmp	r3, #10
 800370a:	d108      	bne.n	800371e <uart_rx_process+0x82>
			serial_protocol(g_uart_rx_buffer + g_uart_rx_nose + 1);
 800370c:	4b30      	ldr	r3, [pc, #192]	; (80037d0 <uart_rx_process+0x134>)
 800370e:	881b      	ldrh	r3, [r3, #0]
 8003710:	3301      	adds	r3, #1
 8003712:	4a30      	ldr	r2, [pc, #192]	; (80037d4 <uart_rx_process+0x138>)
 8003714:	4413      	add	r3, r2
 8003716:	4618      	mov	r0, r3
 8003718:	f000 f92c 	bl	8003974 <serial_protocol>
 800371c:	e02e      	b.n	800377c <uart_rx_process+0xe0>
		else if((g_uart_rx_nose > g_uart_rx_tail) &&
 800371e:	4b2c      	ldr	r3, [pc, #176]	; (80037d0 <uart_rx_process+0x134>)
 8003720:	881a      	ldrh	r2, [r3, #0]
 8003722:	4b2f      	ldr	r3, [pc, #188]	; (80037e0 <uart_rx_process+0x144>)
 8003724:	881b      	ldrh	r3, [r3, #0]
 8003726:	429a      	cmp	r2, r3
 8003728:	d928      	bls.n	800377c <uart_rx_process+0xe0>
							(g_uart_rx_buffer[strlen(g_uart_rx_buffer) - 1] == '\n'))
 800372a:	482a      	ldr	r0, [pc, #168]	; (80037d4 <uart_rx_process+0x138>)
 800372c:	f7fc fdd2 	bl	80002d4 <strlen>
 8003730:	4603      	mov	r3, r0
 8003732:	3b01      	subs	r3, #1
 8003734:	4a27      	ldr	r2, [pc, #156]	; (80037d4 <uart_rx_process+0x138>)
 8003736:	5cd3      	ldrb	r3, [r2, r3]
		else if((g_uart_rx_nose > g_uart_rx_tail) &&
 8003738:	2b0a      	cmp	r3, #10
 800373a:	d11f      	bne.n	800377c <uart_rx_process+0xe0>
			strncpy(g_uart_rx_tmp_buf, g_uart_rx_buffer + g_uart_rx_nose + 1, string_size);
 800373c:	4b24      	ldr	r3, [pc, #144]	; (80037d0 <uart_rx_process+0x134>)
 800373e:	881b      	ldrh	r3, [r3, #0]
 8003740:	3301      	adds	r3, #1
 8003742:	4a24      	ldr	r2, [pc, #144]	; (80037d4 <uart_rx_process+0x138>)
 8003744:	4413      	add	r3, r2
 8003746:	79fa      	ldrb	r2, [r7, #7]
 8003748:	4619      	mov	r1, r3
 800374a:	4826      	ldr	r0, [pc, #152]	; (80037e4 <uart_rx_process+0x148>)
 800374c:	f023 ffa4 	bl	8027698 <strncpy>
			string_size = strlen(g_uart_rx_buffer + 1) + 1;
 8003750:	4b25      	ldr	r3, [pc, #148]	; (80037e8 <uart_rx_process+0x14c>)
 8003752:	4618      	mov	r0, r3
 8003754:	f7fc fdbe 	bl	80002d4 <strlen>
 8003758:	4603      	mov	r3, r0
 800375a:	b2db      	uxtb	r3, r3
 800375c:	3301      	adds	r3, #1
 800375e:	71fb      	strb	r3, [r7, #7]
			strncpy(g_uart_rx_tmp_buf + strlen(g_uart_rx_tmp_buf), g_uart_rx_buffer , string_size);
 8003760:	4820      	ldr	r0, [pc, #128]	; (80037e4 <uart_rx_process+0x148>)
 8003762:	f7fc fdb7 	bl	80002d4 <strlen>
 8003766:	4603      	mov	r3, r0
 8003768:	4a1e      	ldr	r2, [pc, #120]	; (80037e4 <uart_rx_process+0x148>)
 800376a:	4413      	add	r3, r2
 800376c:	79fa      	ldrb	r2, [r7, #7]
 800376e:	4919      	ldr	r1, [pc, #100]	; (80037d4 <uart_rx_process+0x138>)
 8003770:	4618      	mov	r0, r3
 8003772:	f023 ff91 	bl	8027698 <strncpy>
			serial_protocol(g_uart_rx_tmp_buf);
 8003776:	481b      	ldr	r0, [pc, #108]	; (80037e4 <uart_rx_process+0x148>)
 8003778:	f000 f8fc 	bl	8003974 <serial_protocol>
		g_uart_rx_cnt--;
 800377c:	4b17      	ldr	r3, [pc, #92]	; (80037dc <uart_rx_process+0x140>)
 800377e:	881b      	ldrh	r3, [r3, #0]
 8003780:	3b01      	subs	r3, #1
 8003782:	b29a      	uxth	r2, r3
 8003784:	4b15      	ldr	r3, [pc, #84]	; (80037dc <uart_rx_process+0x140>)
 8003786:	801a      	strh	r2, [r3, #0]
		if(g_uart_rx_nose + string_size < UART_RX_BUFFER_MAX)
 8003788:	4b11      	ldr	r3, [pc, #68]	; (80037d0 <uart_rx_process+0x134>)
 800378a:	881b      	ldrh	r3, [r3, #0]
 800378c:	461a      	mov	r2, r3
 800378e:	79fb      	ldrb	r3, [r7, #7]
 8003790:	4413      	add	r3, r2
 8003792:	2bfe      	cmp	r3, #254	; 0xfe
 8003794:	dc08      	bgt.n	80037a8 <uart_rx_process+0x10c>
			g_uart_rx_nose += string_size;
 8003796:	79fb      	ldrb	r3, [r7, #7]
 8003798:	b29a      	uxth	r2, r3
 800379a:	4b0d      	ldr	r3, [pc, #52]	; (80037d0 <uart_rx_process+0x134>)
 800379c:	881b      	ldrh	r3, [r3, #0]
 800379e:	4413      	add	r3, r2
 80037a0:	b29a      	uxth	r2, r3
 80037a2:	4b0b      	ldr	r3, [pc, #44]	; (80037d0 <uart_rx_process+0x134>)
 80037a4:	801a      	strh	r2, [r3, #0]
 80037a6:	e003      	b.n	80037b0 <uart_rx_process+0x114>
			g_uart_rx_nose = string_size;
 80037a8:	79fb      	ldrb	r3, [r7, #7]
 80037aa:	b29a      	uxth	r2, r3
 80037ac:	4b08      	ldr	r3, [pc, #32]	; (80037d0 <uart_rx_process+0x134>)
 80037ae:	801a      	strh	r2, [r3, #0]
		if(!g_uart_rx_cnt)
 80037b0:	4b0a      	ldr	r3, [pc, #40]	; (80037dc <uart_rx_process+0x140>)
 80037b2:	881b      	ldrh	r3, [r3, #0]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d105      	bne.n	80037c4 <uart_rx_process+0x128>
			g_uart_rx_state = UART_RX_IDLE;
 80037b8:	4b07      	ldr	r3, [pc, #28]	; (80037d8 <uart_rx_process+0x13c>)
 80037ba:	2200      	movs	r2, #0
 80037bc:	701a      	strb	r2, [r3, #0]
		break;
 80037be:	e001      	b.n	80037c4 <uart_rx_process+0x128>
		break;
 80037c0:	bf00      	nop
 80037c2:	e000      	b.n	80037c6 <uart_rx_process+0x12a>
		break;
 80037c4:	bf00      	nop
}
 80037c6:	bf00      	nop
 80037c8:	3708      	adds	r7, #8
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	20025a24 	.word	0x20025a24
 80037d4:	20047e5c 	.word	0x20047e5c
 80037d8:	2002591f 	.word	0x2002591f
 80037dc:	20025a28 	.word	0x20025a28
 80037e0:	20025a26 	.word	0x20025a26
 80037e4:	20047e28 	.word	0x20047e28
 80037e8:	20047e5d 	.word	0x20047e5d

080037ec <uart_rx_callback>:



//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void uart_rx_callback()
{
 80037ec:	b480      	push	{r7}
 80037ee:	af00      	add	r7, sp, #0
	g_uart_rx_tail++;
 80037f0:	4b5b      	ldr	r3, [pc, #364]	; (8003960 <uart_rx_callback+0x174>)
 80037f2:	881b      	ldrh	r3, [r3, #0]
 80037f4:	3301      	adds	r3, #1
 80037f6:	b29a      	uxth	r2, r3
 80037f8:	4b59      	ldr	r3, [pc, #356]	; (8003960 <uart_rx_callback+0x174>)
 80037fa:	801a      	strh	r2, [r3, #0]

	if((g_uart_rx_tail < (UART_RX_BUFFER_MAX - 1)) && ((g_uart_rx_nose < g_uart_rx_tail) || (g_uart_rx_nose - g_uart_rx_tail > 2/*1*/)))
 80037fc:	4b58      	ldr	r3, [pc, #352]	; (8003960 <uart_rx_callback+0x174>)
 80037fe:	881b      	ldrh	r3, [r3, #0]
 8003800:	2bfd      	cmp	r3, #253	; 0xfd
 8003802:	d847      	bhi.n	8003894 <uart_rx_callback+0xa8>
 8003804:	4b57      	ldr	r3, [pc, #348]	; (8003964 <uart_rx_callback+0x178>)
 8003806:	881a      	ldrh	r2, [r3, #0]
 8003808:	4b55      	ldr	r3, [pc, #340]	; (8003960 <uart_rx_callback+0x174>)
 800380a:	881b      	ldrh	r3, [r3, #0]
 800380c:	429a      	cmp	r2, r3
 800380e:	d307      	bcc.n	8003820 <uart_rx_callback+0x34>
 8003810:	4b54      	ldr	r3, [pc, #336]	; (8003964 <uart_rx_callback+0x178>)
 8003812:	881b      	ldrh	r3, [r3, #0]
 8003814:	461a      	mov	r2, r3
 8003816:	4b52      	ldr	r3, [pc, #328]	; (8003960 <uart_rx_callback+0x174>)
 8003818:	881b      	ldrh	r3, [r3, #0]
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	2b02      	cmp	r3, #2
 800381e:	dd39      	ble.n	8003894 <uart_rx_callback+0xa8>
	{
		g_uart_rx_buffer[g_uart_rx_tail] = (0x00FFU & USART3->DR);//253
 8003820:	4b51      	ldr	r3, [pc, #324]	; (8003968 <uart_rx_callback+0x17c>)
 8003822:	6859      	ldr	r1, [r3, #4]
 8003824:	4b4e      	ldr	r3, [pc, #312]	; (8003960 <uart_rx_callback+0x174>)
 8003826:	881b      	ldrh	r3, [r3, #0]
 8003828:	461a      	mov	r2, r3
 800382a:	b2c9      	uxtb	r1, r1
 800382c:	4b4f      	ldr	r3, [pc, #316]	; (800396c <uart_rx_callback+0x180>)
 800382e:	5499      	strb	r1, [r3, r2]
		if((g_uart_rx_buffer[g_uart_rx_tail] == '\r') /*&& ((g_uart_rx_nose < g_uart_rx_tail) || (g_uart_rx_nose - g_uart_rx_tail > 2))*/)
 8003830:	4b4b      	ldr	r3, [pc, #300]	; (8003960 <uart_rx_callback+0x174>)
 8003832:	881b      	ldrh	r3, [r3, #0]
 8003834:	461a      	mov	r2, r3
 8003836:	4b4d      	ldr	r3, [pc, #308]	; (800396c <uart_rx_callback+0x180>)
 8003838:	5c9b      	ldrb	r3, [r3, r2]
 800383a:	2b0d      	cmp	r3, #13
 800383c:	f040 8087 	bne.w	800394e <uart_rx_callback+0x162>
		{
			g_uart_rx_buffer[++g_uart_rx_tail] = '\n';//254
 8003840:	4b47      	ldr	r3, [pc, #284]	; (8003960 <uart_rx_callback+0x174>)
 8003842:	881b      	ldrh	r3, [r3, #0]
 8003844:	3301      	adds	r3, #1
 8003846:	b29a      	uxth	r2, r3
 8003848:	4b45      	ldr	r3, [pc, #276]	; (8003960 <uart_rx_callback+0x174>)
 800384a:	801a      	strh	r2, [r3, #0]
 800384c:	4b44      	ldr	r3, [pc, #272]	; (8003960 <uart_rx_callback+0x174>)
 800384e:	881b      	ldrh	r3, [r3, #0]
 8003850:	461a      	mov	r2, r3
 8003852:	4b46      	ldr	r3, [pc, #280]	; (800396c <uart_rx_callback+0x180>)
 8003854:	210a      	movs	r1, #10
 8003856:	5499      	strb	r1, [r3, r2]
			g_uart_rx_cnt++;
 8003858:	4b45      	ldr	r3, [pc, #276]	; (8003970 <uart_rx_callback+0x184>)
 800385a:	881b      	ldrh	r3, [r3, #0]
 800385c:	3301      	adds	r3, #1
 800385e:	b29a      	uxth	r2, r3
 8003860:	4b43      	ldr	r3, [pc, #268]	; (8003970 <uart_rx_callback+0x184>)
 8003862:	801a      	strh	r2, [r3, #0]
			g_uart_rx_buffer[++g_uart_rx_tail] = '\0';//255
 8003864:	4b3e      	ldr	r3, [pc, #248]	; (8003960 <uart_rx_callback+0x174>)
 8003866:	881b      	ldrh	r3, [r3, #0]
 8003868:	3301      	adds	r3, #1
 800386a:	b29a      	uxth	r2, r3
 800386c:	4b3c      	ldr	r3, [pc, #240]	; (8003960 <uart_rx_callback+0x174>)
 800386e:	801a      	strh	r2, [r3, #0]
 8003870:	4b3b      	ldr	r3, [pc, #236]	; (8003960 <uart_rx_callback+0x174>)
 8003872:	881b      	ldrh	r3, [r3, #0]
 8003874:	461a      	mov	r2, r3
 8003876:	4b3d      	ldr	r3, [pc, #244]	; (800396c <uart_rx_callback+0x180>)
 8003878:	2100      	movs	r1, #0
 800387a:	5499      	strb	r1, [r3, r2]
			if((g_uart_rx_tail == UART_RX_BUFFER_MAX) && (g_uart_rx_nose > 0))
 800387c:	4b38      	ldr	r3, [pc, #224]	; (8003960 <uart_rx_callback+0x174>)
 800387e:	881b      	ldrh	r3, [r3, #0]
 8003880:	2bff      	cmp	r3, #255	; 0xff
 8003882:	d164      	bne.n	800394e <uart_rx_callback+0x162>
 8003884:	4b37      	ldr	r3, [pc, #220]	; (8003964 <uart_rx_callback+0x178>)
 8003886:	881b      	ldrh	r3, [r3, #0]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d060      	beq.n	800394e <uart_rx_callback+0x162>
			{
				g_uart_rx_tail = 0;
 800388c:	4b34      	ldr	r3, [pc, #208]	; (8003960 <uart_rx_callback+0x174>)
 800388e:	2200      	movs	r2, #0
 8003890:	801a      	strh	r2, [r3, #0]
		if((g_uart_rx_buffer[g_uart_rx_tail] == '\r') /*&& ((g_uart_rx_nose < g_uart_rx_tail) || (g_uart_rx_nose - g_uart_rx_tail > 2))*/)
 8003892:	e05c      	b.n	800394e <uart_rx_callback+0x162>
			}
		}
	}
	else if((g_uart_rx_tail == (UART_RX_BUFFER_MAX - 1)) && (g_uart_rx_nose > 1)/*(g_uart_rx_nose < g_uart_rx_tail)*/)
 8003894:	4b32      	ldr	r3, [pc, #200]	; (8003960 <uart_rx_callback+0x174>)
 8003896:	881b      	ldrh	r3, [r3, #0]
 8003898:	2bfe      	cmp	r3, #254	; 0xfe
 800389a:	d13e      	bne.n	800391a <uart_rx_callback+0x12e>
 800389c:	4b31      	ldr	r3, [pc, #196]	; (8003964 <uart_rx_callback+0x178>)
 800389e:	881b      	ldrh	r3, [r3, #0]
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d93a      	bls.n	800391a <uart_rx_callback+0x12e>
	{
		g_uart_rx_buffer[g_uart_rx_tail] = (0x00FFU & USART3->DR);//254
 80038a4:	4b30      	ldr	r3, [pc, #192]	; (8003968 <uart_rx_callback+0x17c>)
 80038a6:	6859      	ldr	r1, [r3, #4]
 80038a8:	4b2d      	ldr	r3, [pc, #180]	; (8003960 <uart_rx_callback+0x174>)
 80038aa:	881b      	ldrh	r3, [r3, #0]
 80038ac:	461a      	mov	r2, r3
 80038ae:	b2c9      	uxtb	r1, r1
 80038b0:	4b2e      	ldr	r3, [pc, #184]	; (800396c <uart_rx_callback+0x180>)
 80038b2:	5499      	strb	r1, [r3, r2]
		g_uart_rx_buffer[++g_uart_rx_tail] = '\0';//255
 80038b4:	4b2a      	ldr	r3, [pc, #168]	; (8003960 <uart_rx_callback+0x174>)
 80038b6:	881b      	ldrh	r3, [r3, #0]
 80038b8:	3301      	adds	r3, #1
 80038ba:	b29a      	uxth	r2, r3
 80038bc:	4b28      	ldr	r3, [pc, #160]	; (8003960 <uart_rx_callback+0x174>)
 80038be:	801a      	strh	r2, [r3, #0]
 80038c0:	4b27      	ldr	r3, [pc, #156]	; (8003960 <uart_rx_callback+0x174>)
 80038c2:	881b      	ldrh	r3, [r3, #0]
 80038c4:	461a      	mov	r2, r3
 80038c6:	4b29      	ldr	r3, [pc, #164]	; (800396c <uart_rx_callback+0x180>)
 80038c8:	2100      	movs	r1, #0
 80038ca:	5499      	strb	r1, [r3, r2]
		if(g_uart_rx_buffer[g_uart_rx_tail - 1] == '\r')
 80038cc:	4b24      	ldr	r3, [pc, #144]	; (8003960 <uart_rx_callback+0x174>)
 80038ce:	881b      	ldrh	r3, [r3, #0]
 80038d0:	3b01      	subs	r3, #1
 80038d2:	4a26      	ldr	r2, [pc, #152]	; (800396c <uart_rx_callback+0x180>)
 80038d4:	5cd3      	ldrb	r3, [r2, r3]
 80038d6:	2b0d      	cmp	r3, #13
 80038d8:	d13b      	bne.n	8003952 <uart_rx_callback+0x166>
		{
			g_uart_rx_cnt++;
 80038da:	4b25      	ldr	r3, [pc, #148]	; (8003970 <uart_rx_callback+0x184>)
 80038dc:	881b      	ldrh	r3, [r3, #0]
 80038de:	3301      	adds	r3, #1
 80038e0:	b29a      	uxth	r2, r3
 80038e2:	4b23      	ldr	r3, [pc, #140]	; (8003970 <uart_rx_callback+0x184>)
 80038e4:	801a      	strh	r2, [r3, #0]
			if(g_uart_rx_nose > 1)
 80038e6:	4b1f      	ldr	r3, [pc, #124]	; (8003964 <uart_rx_callback+0x178>)
 80038e8:	881b      	ldrh	r3, [r3, #0]
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d931      	bls.n	8003952 <uart_rx_callback+0x166>
			{
				g_uart_rx_tail = 0;
 80038ee:	4b1c      	ldr	r3, [pc, #112]	; (8003960 <uart_rx_callback+0x174>)
 80038f0:	2200      	movs	r2, #0
 80038f2:	801a      	strh	r2, [r3, #0]
				g_uart_rx_buffer[g_uart_rx_tail] = '\n';//0
 80038f4:	4b1a      	ldr	r3, [pc, #104]	; (8003960 <uart_rx_callback+0x174>)
 80038f6:	881b      	ldrh	r3, [r3, #0]
 80038f8:	461a      	mov	r2, r3
 80038fa:	4b1c      	ldr	r3, [pc, #112]	; (800396c <uart_rx_callback+0x180>)
 80038fc:	210a      	movs	r1, #10
 80038fe:	5499      	strb	r1, [r3, r2]
				g_uart_rx_buffer[++g_uart_rx_tail] = '\0';//1
 8003900:	4b17      	ldr	r3, [pc, #92]	; (8003960 <uart_rx_callback+0x174>)
 8003902:	881b      	ldrh	r3, [r3, #0]
 8003904:	3301      	adds	r3, #1
 8003906:	b29a      	uxth	r2, r3
 8003908:	4b15      	ldr	r3, [pc, #84]	; (8003960 <uart_rx_callback+0x174>)
 800390a:	801a      	strh	r2, [r3, #0]
 800390c:	4b14      	ldr	r3, [pc, #80]	; (8003960 <uart_rx_callback+0x174>)
 800390e:	881b      	ldrh	r3, [r3, #0]
 8003910:	461a      	mov	r2, r3
 8003912:	4b16      	ldr	r3, [pc, #88]	; (800396c <uart_rx_callback+0x180>)
 8003914:	2100      	movs	r1, #0
 8003916:	5499      	strb	r1, [r3, r2]
		if(g_uart_rx_buffer[g_uart_rx_tail - 1] == '\r')
 8003918:	e01b      	b.n	8003952 <uart_rx_callback+0x166>
			{
				//error - full
			}
		}
	}
	else if((g_uart_rx_tail == UART_RX_BUFFER_MAX) && (g_uart_rx_nose > 1))
 800391a:	4b11      	ldr	r3, [pc, #68]	; (8003960 <uart_rx_callback+0x174>)
 800391c:	881b      	ldrh	r3, [r3, #0]
 800391e:	2bff      	cmp	r3, #255	; 0xff
 8003920:	d118      	bne.n	8003954 <uart_rx_callback+0x168>
 8003922:	4b10      	ldr	r3, [pc, #64]	; (8003964 <uart_rx_callback+0x178>)
 8003924:	881b      	ldrh	r3, [r3, #0]
 8003926:	2b01      	cmp	r3, #1
 8003928:	d914      	bls.n	8003954 <uart_rx_callback+0x168>
	{
		g_uart_rx_buffer[g_uart_rx_tail] = '\0';
 800392a:	4b0d      	ldr	r3, [pc, #52]	; (8003960 <uart_rx_callback+0x174>)
 800392c:	881b      	ldrh	r3, [r3, #0]
 800392e:	461a      	mov	r2, r3
 8003930:	4b0e      	ldr	r3, [pc, #56]	; (800396c <uart_rx_callback+0x180>)
 8003932:	2100      	movs	r1, #0
 8003934:	5499      	strb	r1, [r3, r2]
		g_uart_rx_tail = 1;
 8003936:	4b0a      	ldr	r3, [pc, #40]	; (8003960 <uart_rx_callback+0x174>)
 8003938:	2201      	movs	r2, #1
 800393a:	801a      	strh	r2, [r3, #0]
		g_uart_rx_buffer[g_uart_rx_tail] = (0x00FFU & USART3->DR);	//todo:zamjeni USART->DR za neki define
 800393c:	4b0a      	ldr	r3, [pc, #40]	; (8003968 <uart_rx_callback+0x17c>)
 800393e:	6859      	ldr	r1, [r3, #4]
 8003940:	4b07      	ldr	r3, [pc, #28]	; (8003960 <uart_rx_callback+0x174>)
 8003942:	881b      	ldrh	r3, [r3, #0]
 8003944:	461a      	mov	r2, r3
 8003946:	b2c9      	uxtb	r1, r1
 8003948:	4b08      	ldr	r3, [pc, #32]	; (800396c <uart_rx_callback+0x180>)
 800394a:	5499      	strb	r1, [r3, r2]

	}

}
 800394c:	e002      	b.n	8003954 <uart_rx_callback+0x168>
		if((g_uart_rx_buffer[g_uart_rx_tail] == '\r') /*&& ((g_uart_rx_nose < g_uart_rx_tail) || (g_uart_rx_nose - g_uart_rx_tail > 2))*/)
 800394e:	bf00      	nop
 8003950:	e000      	b.n	8003954 <uart_rx_callback+0x168>
		if(g_uart_rx_buffer[g_uart_rx_tail - 1] == '\r')
 8003952:	bf00      	nop
}
 8003954:	bf00      	nop
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr
 800395e:	bf00      	nop
 8003960:	20025a26 	.word	0x20025a26
 8003964:	20025a24 	.word	0x20025a24
 8003968:	40004800 	.word	0x40004800
 800396c:	20047e5c 	.word	0x20047e5c
 8003970:	20025a28 	.word	0x20025a28

08003974 <serial_protocol>:


#include <stdlib.h>
//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void serial_protocol(uint8_t* buff)
{
 8003974:	b5b0      	push	{r4, r5, r7, lr}
 8003976:	b08a      	sub	sp, #40	; 0x28
 8003978:	af02      	add	r7, sp, #8
 800397a:	6078      	str	r0, [r7, #4]
	char *token;
	char temp_buff[5] = {0};
 800397c:	2300      	movs	r3, #0
 800397e:	60bb      	str	r3, [r7, #8]
 8003980:	2300      	movs	r3, #0
 8003982:	733b      	strb	r3, [r7, #12]
	unsigned short address, value = 0xFF;
 8003984:	23ff      	movs	r3, #255	; 0xff
 8003986:	83fb      	strh	r3, [r7, #30]
	unsigned short value1, value2, value3, value4 = 0xFF;
 8003988:	23ff      	movs	r3, #255	; 0xff
 800398a:	83bb      	strh	r3, [r7, #28]

	token = strtok(buff, ",");
 800398c:	4997      	ldr	r1, [pc, #604]	; (8003bec <serial_protocol+0x278>)
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f023 fe96 	bl	80276c0 <strtok>
 8003994:	61b8      	str	r0, [r7, #24]

	if (strncmp(buff, "OVW", 3) == 0)
 8003996:	2203      	movs	r2, #3
 8003998:	4995      	ldr	r1, [pc, #596]	; (8003bf0 <serial_protocol+0x27c>)
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f023 fe6a 	bl	8027674 <strncmp>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d164      	bne.n	8003a70 <serial_protocol+0xfc>
	{
		token = strtok(NULL, ",");
 80039a6:	4991      	ldr	r1, [pc, #580]	; (8003bec <serial_protocol+0x278>)
 80039a8:	2000      	movs	r0, #0
 80039aa:	f023 fe89 	bl	80276c0 <strtok>
 80039ae:	61b8      	str	r0, [r7, #24]
		strncpy(temp_buff, token, 2);
 80039b0:	f107 0308 	add.w	r3, r7, #8
 80039b4:	2202      	movs	r2, #2
 80039b6:	69b9      	ldr	r1, [r7, #24]
 80039b8:	4618      	mov	r0, r3
 80039ba:	f023 fe6d 	bl	8027698 <strncpy>
		address = strtoll(temp_buff, NULL, 16);
 80039be:	f107 0308 	add.w	r3, r7, #8
 80039c2:	2210      	movs	r2, #16
 80039c4:	2100      	movs	r1, #0
 80039c6:	4618      	mov	r0, r3
 80039c8:	f023 ff6c 	bl	80278a4 <strtoll>
 80039cc:	4602      	mov	r2, r0
 80039ce:	460b      	mov	r3, r1
 80039d0:	4613      	mov	r3, r2
 80039d2:	823b      	strh	r3, [r7, #16]

		token = strtok(NULL, ",");
 80039d4:	4985      	ldr	r1, [pc, #532]	; (8003bec <serial_protocol+0x278>)
 80039d6:	2000      	movs	r0, #0
 80039d8:	f023 fe72 	bl	80276c0 <strtok>
 80039dc:	61b8      	str	r0, [r7, #24]
		strncpy(temp_buff, token, 2);
 80039de:	f107 0308 	add.w	r3, r7, #8
 80039e2:	2202      	movs	r2, #2
 80039e4:	69b9      	ldr	r1, [r7, #24]
 80039e6:	4618      	mov	r0, r3
 80039e8:	f023 fe56 	bl	8027698 <strncpy>
		value = strtoll(temp_buff, NULL, 16);
 80039ec:	f107 0308 	add.w	r3, r7, #8
 80039f0:	2210      	movs	r2, #16
 80039f2:	2100      	movs	r1, #0
 80039f4:	4618      	mov	r0, r3
 80039f6:	f023 ff55 	bl	80278a4 <strtoll>
 80039fa:	4602      	mov	r2, r0
 80039fc:	460b      	mov	r3, r1
 80039fe:	4613      	mov	r3, r2
 8003a00:	83fb      	strh	r3, [r7, #30]

		ov7670_write_register(address, value);
 8003a02:	8a3b      	ldrh	r3, [r7, #16]
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	8bfa      	ldrh	r2, [r7, #30]
 8003a08:	b2d2      	uxtb	r2, r2
 8003a0a:	4611      	mov	r1, r2
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f7fe fda9 	bl	8002564 <ov7670_write_register>
		sprintf(temp_buff, "%02X\0", address);
 8003a12:	8a3a      	ldrh	r2, [r7, #16]
 8003a14:	f107 0308 	add.w	r3, r7, #8
 8003a18:	4976      	ldr	r1, [pc, #472]	; (8003bf4 <serial_protocol+0x280>)
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f023 fe02 	bl	8027624 <siprintf>
		LCD_PrintStr(20, 380, 0, 0x841FU, temp_buff, 5);
 8003a20:	2305      	movs	r3, #5
 8003a22:	9301      	str	r3, [sp, #4]
 8003a24:	f107 0308 	add.w	r3, r7, #8
 8003a28:	9300      	str	r3, [sp, #0]
 8003a2a:	f248 431f 	movw	r3, #33823	; 0x841f
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8003a34:	2014      	movs	r0, #20
 8003a36:	f7fd ffaf 	bl	8001998 <LCD_PrintStr>
		sprintf(temp_buff, "%02X\0", ov7670_read_register(address));
 8003a3a:	8a3b      	ldrh	r3, [r7, #16]
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7fe fda2 	bl	8002588 <ov7670_read_register>
 8003a44:	4603      	mov	r3, r0
 8003a46:	461a      	mov	r2, r3
 8003a48:	f107 0308 	add.w	r3, r7, #8
 8003a4c:	4969      	ldr	r1, [pc, #420]	; (8003bf4 <serial_protocol+0x280>)
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f023 fde8 	bl	8027624 <siprintf>
		LCD_PrintStr(20, 420, 0, 0x841FU, temp_buff, 5);
 8003a54:	2305      	movs	r3, #5
 8003a56:	9301      	str	r3, [sp, #4]
 8003a58:	f107 0308 	add.w	r3, r7, #8
 8003a5c:	9300      	str	r3, [sp, #0]
 8003a5e:	f248 431f 	movw	r3, #33823	; 0x841f
 8003a62:	2200      	movs	r2, #0
 8003a64:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 8003a68:	2014      	movs	r0, #20
 8003a6a:	f7fd ff95 	bl	8001998 <LCD_PrintStr>
		strncpy(temp_buff, token, 3);
		value2 = strtoll(temp_buff, NULL, 10);

		ov7670_scaling_control(value1, value2);
	}
}
 8003a6e:	e2d3      	b.n	8004018 <serial_protocol+0x6a4>
	else if (strncmp(buff, "OVR", 3) == 0)
 8003a70:	2203      	movs	r2, #3
 8003a72:	4961      	ldr	r1, [pc, #388]	; (8003bf8 <serial_protocol+0x284>)
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f023 fdfd 	bl	8027674 <strncmp>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d146      	bne.n	8003b0e <serial_protocol+0x19a>
		token = strtok(NULL, ",");
 8003a80:	495a      	ldr	r1, [pc, #360]	; (8003bec <serial_protocol+0x278>)
 8003a82:	2000      	movs	r0, #0
 8003a84:	f023 fe1c 	bl	80276c0 <strtok>
 8003a88:	61b8      	str	r0, [r7, #24]
		strncpy(temp_buff, token, 2);
 8003a8a:	f107 0308 	add.w	r3, r7, #8
 8003a8e:	2202      	movs	r2, #2
 8003a90:	69b9      	ldr	r1, [r7, #24]
 8003a92:	4618      	mov	r0, r3
 8003a94:	f023 fe00 	bl	8027698 <strncpy>
		address = strtoll(temp_buff, NULL, 16);
 8003a98:	f107 0308 	add.w	r3, r7, #8
 8003a9c:	2210      	movs	r2, #16
 8003a9e:	2100      	movs	r1, #0
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f023 feff 	bl	80278a4 <strtoll>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	4613      	mov	r3, r2
 8003aac:	823b      	strh	r3, [r7, #16]
		value = ov7670_read_register(address);
 8003aae:	8a3b      	ldrh	r3, [r7, #16]
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f7fe fd68 	bl	8002588 <ov7670_read_register>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	83fb      	strh	r3, [r7, #30]
		sprintf(temp_buff, "%02X\0", address);
 8003abc:	8a3a      	ldrh	r2, [r7, #16]
 8003abe:	f107 0308 	add.w	r3, r7, #8
 8003ac2:	494c      	ldr	r1, [pc, #304]	; (8003bf4 <serial_protocol+0x280>)
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f023 fdad 	bl	8027624 <siprintf>
		LCD_PrintStr(20, 380, 0, 0x841FU, temp_buff, 5);
 8003aca:	2305      	movs	r3, #5
 8003acc:	9301      	str	r3, [sp, #4]
 8003ace:	f107 0308 	add.w	r3, r7, #8
 8003ad2:	9300      	str	r3, [sp, #0]
 8003ad4:	f248 431f 	movw	r3, #33823	; 0x841f
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8003ade:	2014      	movs	r0, #20
 8003ae0:	f7fd ff5a 	bl	8001998 <LCD_PrintStr>
		sprintf(temp_buff, "%02X\0", value);
 8003ae4:	8bfa      	ldrh	r2, [r7, #30]
 8003ae6:	f107 0308 	add.w	r3, r7, #8
 8003aea:	4942      	ldr	r1, [pc, #264]	; (8003bf4 <serial_protocol+0x280>)
 8003aec:	4618      	mov	r0, r3
 8003aee:	f023 fd99 	bl	8027624 <siprintf>
		LCD_PrintStr(20, 420, 0, 0x841FU, temp_buff, 5);
 8003af2:	2305      	movs	r3, #5
 8003af4:	9301      	str	r3, [sp, #4]
 8003af6:	f107 0308 	add.w	r3, r7, #8
 8003afa:	9300      	str	r3, [sp, #0]
 8003afc:	f248 431f 	movw	r3, #33823	; 0x841f
 8003b00:	2200      	movs	r2, #0
 8003b02:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 8003b06:	2014      	movs	r0, #20
 8003b08:	f7fd ff46 	bl	8001998 <LCD_PrintStr>
}
 8003b0c:	e284      	b.n	8004018 <serial_protocol+0x6a4>
	else if (strncmp(buff, "OVHV", 4) == 0)
 8003b0e:	2204      	movs	r2, #4
 8003b10:	493a      	ldr	r1, [pc, #232]	; (8003bfc <serial_protocol+0x288>)
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f023 fdae 	bl	8027674 <strncmp>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d170      	bne.n	8003c00 <serial_protocol+0x28c>
		token = strtok(NULL, ",");
 8003b1e:	4933      	ldr	r1, [pc, #204]	; (8003bec <serial_protocol+0x278>)
 8003b20:	2000      	movs	r0, #0
 8003b22:	f023 fdcd 	bl	80276c0 <strtok>
 8003b26:	61b8      	str	r0, [r7, #24]
		strncpy(temp_buff, token, 3);
 8003b28:	f107 0308 	add.w	r3, r7, #8
 8003b2c:	2203      	movs	r2, #3
 8003b2e:	69b9      	ldr	r1, [r7, #24]
 8003b30:	4618      	mov	r0, r3
 8003b32:	f023 fdb1 	bl	8027698 <strncpy>
		value1 = strtoll(temp_buff, NULL, 10);
 8003b36:	f107 0308 	add.w	r3, r7, #8
 8003b3a:	220a      	movs	r2, #10
 8003b3c:	2100      	movs	r1, #0
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f023 feb0 	bl	80278a4 <strtoll>
 8003b44:	4602      	mov	r2, r0
 8003b46:	460b      	mov	r3, r1
 8003b48:	4613      	mov	r3, r2
 8003b4a:	82fb      	strh	r3, [r7, #22]
		token = strtok(NULL, ",");
 8003b4c:	4927      	ldr	r1, [pc, #156]	; (8003bec <serial_protocol+0x278>)
 8003b4e:	2000      	movs	r0, #0
 8003b50:	f023 fdb6 	bl	80276c0 <strtok>
 8003b54:	61b8      	str	r0, [r7, #24]
		strncpy(temp_buff, token, 3);
 8003b56:	f107 0308 	add.w	r3, r7, #8
 8003b5a:	2203      	movs	r2, #3
 8003b5c:	69b9      	ldr	r1, [r7, #24]
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f023 fd9a 	bl	8027698 <strncpy>
		value2 = strtoll(temp_buff, NULL, 10);
 8003b64:	f107 0308 	add.w	r3, r7, #8
 8003b68:	220a      	movs	r2, #10
 8003b6a:	2100      	movs	r1, #0
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f023 fe99 	bl	80278a4 <strtoll>
 8003b72:	4602      	mov	r2, r0
 8003b74:	460b      	mov	r3, r1
 8003b76:	4613      	mov	r3, r2
 8003b78:	82bb      	strh	r3, [r7, #20]
		token = strtok(NULL, ",");
 8003b7a:	491c      	ldr	r1, [pc, #112]	; (8003bec <serial_protocol+0x278>)
 8003b7c:	2000      	movs	r0, #0
 8003b7e:	f023 fd9f 	bl	80276c0 <strtok>
 8003b82:	61b8      	str	r0, [r7, #24]
		strncpy(temp_buff, token, 3);
 8003b84:	f107 0308 	add.w	r3, r7, #8
 8003b88:	2203      	movs	r2, #3
 8003b8a:	69b9      	ldr	r1, [r7, #24]
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f023 fd83 	bl	8027698 <strncpy>
		value3 = strtoll(temp_buff, NULL, 10);
 8003b92:	f107 0308 	add.w	r3, r7, #8
 8003b96:	220a      	movs	r2, #10
 8003b98:	2100      	movs	r1, #0
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f023 fe82 	bl	80278a4 <strtoll>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	460b      	mov	r3, r1
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	827b      	strh	r3, [r7, #18]
		token = strtok(NULL, ",");
 8003ba8:	4910      	ldr	r1, [pc, #64]	; (8003bec <serial_protocol+0x278>)
 8003baa:	2000      	movs	r0, #0
 8003bac:	f023 fd88 	bl	80276c0 <strtok>
 8003bb0:	61b8      	str	r0, [r7, #24]
		strncpy(temp_buff, token, 3);
 8003bb2:	f107 0308 	add.w	r3, r7, #8
 8003bb6:	2203      	movs	r2, #3
 8003bb8:	69b9      	ldr	r1, [r7, #24]
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f023 fd6c 	bl	8027698 <strncpy>
		value4 = strtoll(temp_buff, NULL, 10);
 8003bc0:	f107 0308 	add.w	r3, r7, #8
 8003bc4:	220a      	movs	r2, #10
 8003bc6:	2100      	movs	r1, #0
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f023 fe6b 	bl	80278a4 <strtoll>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	83bb      	strh	r3, [r7, #28]
		ov7670_frame_control(value1, value2, value3, value4);
 8003bd6:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 8003bda:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 8003bde:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003be2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003be6:	f7fe fbf2 	bl	80023ce <ov7670_frame_control>
}
 8003bea:	e215      	b.n	8004018 <serial_protocol+0x6a4>
 8003bec:	080283e8 	.word	0x080283e8
 8003bf0:	080283ec 	.word	0x080283ec
 8003bf4:	080283f0 	.word	0x080283f0
 8003bf8:	080283f8 	.word	0x080283f8
 8003bfc:	080283fc 	.word	0x080283fc
	else if (strncmp(buff, "ROVHV", 5) == 0)
 8003c00:	2205      	movs	r2, #5
 8003c02:	49bb      	ldr	r1, [pc, #748]	; (8003ef0 <serial_protocol+0x57c>)
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f023 fd35 	bl	8027674 <strncmp>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	f040 80a7 	bne.w	8003d60 <serial_protocol+0x3ec>
		value = 0;
 8003c12:	2300      	movs	r3, #0
 8003c14:	83fb      	strh	r3, [r7, #30]
		value = ov7670_read_register(OV7670_HSTART) << 3;
 8003c16:	2017      	movs	r0, #23
 8003c18:	f7fe fcb6 	bl	8002588 <ov7670_read_register>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	00db      	lsls	r3, r3, #3
 8003c22:	83fb      	strh	r3, [r7, #30]
		value |= ov7670_read_register(OV7670_HREF) & 0b00000111;
 8003c24:	2032      	movs	r0, #50	; 0x32
 8003c26:	f7fe fcaf 	bl	8002588 <ov7670_read_register>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	f003 0307 	and.w	r3, r3, #7
 8003c30:	b21a      	sxth	r2, r3
 8003c32:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	b21b      	sxth	r3, r3
 8003c3a:	83fb      	strh	r3, [r7, #30]
		sprintf(temp_buff, "%03d\0", value);
 8003c3c:	8bfa      	ldrh	r2, [r7, #30]
 8003c3e:	f107 0308 	add.w	r3, r7, #8
 8003c42:	49ac      	ldr	r1, [pc, #688]	; (8003ef4 <serial_protocol+0x580>)
 8003c44:	4618      	mov	r0, r3
 8003c46:	f023 fced 	bl	8027624 <siprintf>
		LCD_PrintStr(100, 300, 0, 0x841FU, temp_buff, 5);
 8003c4a:	2305      	movs	r3, #5
 8003c4c:	9301      	str	r3, [sp, #4]
 8003c4e:	f107 0308 	add.w	r3, r7, #8
 8003c52:	9300      	str	r3, [sp, #0]
 8003c54:	f248 431f 	movw	r3, #33823	; 0x841f
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003c5e:	2064      	movs	r0, #100	; 0x64
 8003c60:	f7fd fe9a 	bl	8001998 <LCD_PrintStr>
		value = 0;
 8003c64:	2300      	movs	r3, #0
 8003c66:	83fb      	strh	r3, [r7, #30]
		value = ov7670_read_register(OV7670_HSTOP) << 3;
 8003c68:	2018      	movs	r0, #24
 8003c6a:	f7fe fc8d 	bl	8002588 <ov7670_read_register>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	00db      	lsls	r3, r3, #3
 8003c74:	83fb      	strh	r3, [r7, #30]
		value |= (ov7670_read_register(OV7670_HREF) & 0b00111000) >> 3;
 8003c76:	2032      	movs	r0, #50	; 0x32
 8003c78:	f7fe fc86 	bl	8002588 <ov7670_read_register>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	10db      	asrs	r3, r3, #3
 8003c80:	f003 0307 	and.w	r3, r3, #7
 8003c84:	b21a      	sxth	r2, r3
 8003c86:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	b21b      	sxth	r3, r3
 8003c8e:	83fb      	strh	r3, [r7, #30]
		sprintf(temp_buff, "%03d\0", value);
 8003c90:	8bfa      	ldrh	r2, [r7, #30]
 8003c92:	f107 0308 	add.w	r3, r7, #8
 8003c96:	4997      	ldr	r1, [pc, #604]	; (8003ef4 <serial_protocol+0x580>)
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f023 fcc3 	bl	8027624 <siprintf>
		LCD_PrintStr(100, 340, 0, 0x841FU, temp_buff, 5);
 8003c9e:	2305      	movs	r3, #5
 8003ca0:	9301      	str	r3, [sp, #4]
 8003ca2:	f107 0308 	add.w	r3, r7, #8
 8003ca6:	9300      	str	r3, [sp, #0]
 8003ca8:	f248 431f 	movw	r3, #33823	; 0x841f
 8003cac:	2200      	movs	r2, #0
 8003cae:	f44f 71aa 	mov.w	r1, #340	; 0x154
 8003cb2:	2064      	movs	r0, #100	; 0x64
 8003cb4:	f7fd fe70 	bl	8001998 <LCD_PrintStr>
		value = 0;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	83fb      	strh	r3, [r7, #30]
		value = ov7670_read_register(OV7670_VSTART) << 2;
 8003cbc:	2019      	movs	r0, #25
 8003cbe:	f7fe fc63 	bl	8002588 <ov7670_read_register>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	83fb      	strh	r3, [r7, #30]
		value |= ov7670_read_register(OV7670_VREF) & 0b00000011;
 8003cca:	2003      	movs	r0, #3
 8003ccc:	f7fe fc5c 	bl	8002588 <ov7670_read_register>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	f003 0303 	and.w	r3, r3, #3
 8003cd6:	b21a      	sxth	r2, r3
 8003cd8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	b21b      	sxth	r3, r3
 8003ce0:	83fb      	strh	r3, [r7, #30]
		sprintf(temp_buff, "%03d\0", value);
 8003ce2:	8bfa      	ldrh	r2, [r7, #30]
 8003ce4:	f107 0308 	add.w	r3, r7, #8
 8003ce8:	4982      	ldr	r1, [pc, #520]	; (8003ef4 <serial_protocol+0x580>)
 8003cea:	4618      	mov	r0, r3
 8003cec:	f023 fc9a 	bl	8027624 <siprintf>
		LCD_PrintStr(100, 380, 0, 0x841FU, temp_buff, 5);
 8003cf0:	2305      	movs	r3, #5
 8003cf2:	9301      	str	r3, [sp, #4]
 8003cf4:	f107 0308 	add.w	r3, r7, #8
 8003cf8:	9300      	str	r3, [sp, #0]
 8003cfa:	f248 431f 	movw	r3, #33823	; 0x841f
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8003d04:	2064      	movs	r0, #100	; 0x64
 8003d06:	f7fd fe47 	bl	8001998 <LCD_PrintStr>
		value = 0;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	83fb      	strh	r3, [r7, #30]
		value = ov7670_read_register(OV7670_VSTOP) << 2;
 8003d0e:	201a      	movs	r0, #26
 8003d10:	f7fe fc3a 	bl	8002588 <ov7670_read_register>
 8003d14:	4603      	mov	r3, r0
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	83fb      	strh	r3, [r7, #30]
		value |= (ov7670_read_register(OV7670_VREF) & 0b00001100) >> 2;
 8003d1c:	2003      	movs	r0, #3
 8003d1e:	f7fe fc33 	bl	8002588 <ov7670_read_register>
 8003d22:	4603      	mov	r3, r0
 8003d24:	109b      	asrs	r3, r3, #2
 8003d26:	f003 0303 	and.w	r3, r3, #3
 8003d2a:	b21a      	sxth	r2, r3
 8003d2c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	b21b      	sxth	r3, r3
 8003d34:	83fb      	strh	r3, [r7, #30]
		sprintf(temp_buff, "%03d\0", value);
 8003d36:	8bfa      	ldrh	r2, [r7, #30]
 8003d38:	f107 0308 	add.w	r3, r7, #8
 8003d3c:	496d      	ldr	r1, [pc, #436]	; (8003ef4 <serial_protocol+0x580>)
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f023 fc70 	bl	8027624 <siprintf>
		LCD_PrintStr(100, 420, 0, 0x841FU, temp_buff, 5);
 8003d44:	2305      	movs	r3, #5
 8003d46:	9301      	str	r3, [sp, #4]
 8003d48:	f107 0308 	add.w	r3, r7, #8
 8003d4c:	9300      	str	r3, [sp, #0]
 8003d4e:	f248 431f 	movw	r3, #33823	; 0x841f
 8003d52:	2200      	movs	r2, #0
 8003d54:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 8003d58:	2064      	movs	r0, #100	; 0x64
 8003d5a:	f7fd fe1d 	bl	8001998 <LCD_PrintStr>
}
 8003d5e:	e15b      	b.n	8004018 <serial_protocol+0x6a4>
	else if (strncmp(buff, "SWI", 3) == 0)
 8003d60:	2203      	movs	r2, #3
 8003d62:	4965      	ldr	r1, [pc, #404]	; (8003ef8 <serial_protocol+0x584>)
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f023 fc85 	bl	8027674 <strncmp>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d111      	bne.n	8003d94 <serial_protocol+0x420>
		token = strtok(NULL, ",");
 8003d70:	4962      	ldr	r1, [pc, #392]	; (8003efc <serial_protocol+0x588>)
 8003d72:	2000      	movs	r0, #0
 8003d74:	f023 fca4 	bl	80276c0 <strtok>
 8003d78:	61b8      	str	r0, [r7, #24]
		if (strncmp(token, "touch", 5) == 00)
 8003d7a:	2205      	movs	r2, #5
 8003d7c:	4960      	ldr	r1, [pc, #384]	; (8003f00 <serial_protocol+0x58c>)
 8003d7e:	69b8      	ldr	r0, [r7, #24]
 8003d80:	f023 fc78 	bl	8027674 <strncmp>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	f040 8146 	bne.w	8004018 <serial_protocol+0x6a4>
			HAL_EXTI_GenerateSWI(&hexti_touch_YU);
 8003d8c:	485d      	ldr	r0, [pc, #372]	; (8003f04 <serial_protocol+0x590>)
 8003d8e:	f001 fb49 	bl	8005424 <HAL_EXTI_GenerateSWI>
}
 8003d92:	e141      	b.n	8004018 <serial_protocol+0x6a4>
	else if(strncmp(buff, "OVSETF", 6) == 0)
 8003d94:	2206      	movs	r2, #6
 8003d96:	495c      	ldr	r1, [pc, #368]	; (8003f08 <serial_protocol+0x594>)
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f023 fc6b 	bl	8027674 <strncmp>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d172      	bne.n	8003e8a <serial_protocol+0x516>
		token = strtok(NULL, ",");
 8003da4:	4955      	ldr	r1, [pc, #340]	; (8003efc <serial_protocol+0x588>)
 8003da6:	2000      	movs	r0, #0
 8003da8:	f023 fc8a 	bl	80276c0 <strtok>
 8003dac:	61b8      	str	r0, [r7, #24]
		if(strncmp(token, "QVGA", 4) == 0)
 8003dae:	2204      	movs	r2, #4
 8003db0:	4956      	ldr	r1, [pc, #344]	; (8003f0c <serial_protocol+0x598>)
 8003db2:	69b8      	ldr	r0, [r7, #24]
 8003db4:	f023 fc5e 	bl	8027674 <strncmp>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d10d      	bne.n	8003dda <serial_protocol+0x466>
			g_ov7670_info.frame_params = ov7670_frame_params[FFMT_QVGA];
 8003dbe:	4a54      	ldr	r2, [pc, #336]	; (8003f10 <serial_protocol+0x59c>)
 8003dc0:	4b54      	ldr	r3, [pc, #336]	; (8003f14 <serial_protocol+0x5a0>)
 8003dc2:	1d14      	adds	r4, r2, #4
 8003dc4:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8003dc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003dca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003dcc:	682b      	ldr	r3, [r5, #0]
 8003dce:	6023      	str	r3, [r4, #0]
			ov7670_set_mode(300);
 8003dd0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003dd4:	f7fe fc04 	bl	80025e0 <ov7670_set_mode>
}
 8003dd8:	e11e      	b.n	8004018 <serial_protocol+0x6a4>
		else if(strncmp(token, "QQVGA", 5) == 0)
 8003dda:	2205      	movs	r2, #5
 8003ddc:	494e      	ldr	r1, [pc, #312]	; (8003f18 <serial_protocol+0x5a4>)
 8003dde:	69b8      	ldr	r0, [r7, #24]
 8003de0:	f023 fc48 	bl	8027674 <strncmp>
 8003de4:	4603      	mov	r3, r0
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d10d      	bne.n	8003e06 <serial_protocol+0x492>
			g_ov7670_info.frame_params = ov7670_frame_params[FFMT_QQVGA];
 8003dea:	4a49      	ldr	r2, [pc, #292]	; (8003f10 <serial_protocol+0x59c>)
 8003dec:	4b49      	ldr	r3, [pc, #292]	; (8003f14 <serial_protocol+0x5a0>)
 8003dee:	1d14      	adds	r4, r2, #4
 8003df0:	f103 053c 	add.w	r5, r3, #60	; 0x3c
 8003df4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003df6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003df8:	682b      	ldr	r3, [r5, #0]
 8003dfa:	6023      	str	r3, [r4, #0]
			ov7670_set_mode(300);
 8003dfc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003e00:	f7fe fbee 	bl	80025e0 <ov7670_set_mode>
}
 8003e04:	e108      	b.n	8004018 <serial_protocol+0x6a4>
		else if(strncmp(token, "QQQVGA", 6) == 0)
 8003e06:	2206      	movs	r2, #6
 8003e08:	4944      	ldr	r1, [pc, #272]	; (8003f1c <serial_protocol+0x5a8>)
 8003e0a:	69b8      	ldr	r0, [r7, #24]
 8003e0c:	f023 fc32 	bl	8027674 <strncmp>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d10d      	bne.n	8003e32 <serial_protocol+0x4be>
			g_ov7670_info.frame_params = ov7670_frame_params[FFMT_QQQVGA];
 8003e16:	4a3e      	ldr	r2, [pc, #248]	; (8003f10 <serial_protocol+0x59c>)
 8003e18:	4b3e      	ldr	r3, [pc, #248]	; (8003f14 <serial_protocol+0x5a0>)
 8003e1a:	1d14      	adds	r4, r2, #4
 8003e1c:	f103 0528 	add.w	r5, r3, #40	; 0x28
 8003e20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003e24:	682b      	ldr	r3, [r5, #0]
 8003e26:	6023      	str	r3, [r4, #0]
			ov7670_set_mode(300);
 8003e28:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003e2c:	f7fe fbd8 	bl	80025e0 <ov7670_set_mode>
}
 8003e30:	e0f2      	b.n	8004018 <serial_protocol+0x6a4>
		else if(strncmp(token, "CIF", 3) == 0)
 8003e32:	2203      	movs	r2, #3
 8003e34:	493a      	ldr	r1, [pc, #232]	; (8003f20 <serial_protocol+0x5ac>)
 8003e36:	69b8      	ldr	r0, [r7, #24]
 8003e38:	f023 fc1c 	bl	8027674 <strncmp>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d10d      	bne.n	8003e5e <serial_protocol+0x4ea>
			g_ov7670_info.frame_params = ov7670_frame_params[FFMT_CIF];
 8003e42:	4a33      	ldr	r2, [pc, #204]	; (8003f10 <serial_protocol+0x59c>)
 8003e44:	4b33      	ldr	r3, [pc, #204]	; (8003f14 <serial_protocol+0x5a0>)
 8003e46:	1d14      	adds	r4, r2, #4
 8003e48:	f103 0514 	add.w	r5, r3, #20
 8003e4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003e50:	682b      	ldr	r3, [r5, #0]
 8003e52:	6023      	str	r3, [r4, #0]
			ov7670_set_mode(300);
 8003e54:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003e58:	f7fe fbc2 	bl	80025e0 <ov7670_set_mode>
}
 8003e5c:	e0dc      	b.n	8004018 <serial_protocol+0x6a4>
		else if(strncmp(token, "QCIF", 4) == 0)
 8003e5e:	2204      	movs	r2, #4
 8003e60:	4930      	ldr	r1, [pc, #192]	; (8003f24 <serial_protocol+0x5b0>)
 8003e62:	69b8      	ldr	r0, [r7, #24]
 8003e64:	f023 fc06 	bl	8027674 <strncmp>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	f040 80d4 	bne.w	8004018 <serial_protocol+0x6a4>
			g_ov7670_info.frame_params = ov7670_frame_params[FFMT_QCIF];
 8003e70:	4b27      	ldr	r3, [pc, #156]	; (8003f10 <serial_protocol+0x59c>)
 8003e72:	4a28      	ldr	r2, [pc, #160]	; (8003f14 <serial_protocol+0x5a0>)
 8003e74:	1d1c      	adds	r4, r3, #4
 8003e76:	4615      	mov	r5, r2
 8003e78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003e7c:	682b      	ldr	r3, [r5, #0]
 8003e7e:	6023      	str	r3, [r4, #0]
			ov7670_set_mode(300);
 8003e80:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003e84:	f7fe fbac 	bl	80025e0 <ov7670_set_mode>
}
 8003e88:	e0c6      	b.n	8004018 <serial_protocol+0x6a4>
	else if(strncmp(buff, "OVSETC", 6) == 0)
 8003e8a:	2206      	movs	r2, #6
 8003e8c:	4926      	ldr	r1, [pc, #152]	; (8003f28 <serial_protocol+0x5b4>)
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f023 fbf0 	bl	8027674 <strncmp>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	f040 8082 	bne.w	8003fa0 <serial_protocol+0x62c>
		token = strtok(NULL, ",");
 8003e9c:	4917      	ldr	r1, [pc, #92]	; (8003efc <serial_protocol+0x588>)
 8003e9e:	2000      	movs	r0, #0
 8003ea0:	f023 fc0e 	bl	80276c0 <strtok>
 8003ea4:	61b8      	str	r0, [r7, #24]
		if(strncmp(token, "RGB5", 4) == 0)
 8003ea6:	2204      	movs	r2, #4
 8003ea8:	4920      	ldr	r1, [pc, #128]	; (8003f2c <serial_protocol+0x5b8>)
 8003eaa:	69b8      	ldr	r0, [r7, #24]
 8003eac:	f023 fbe2 	bl	8027674 <strncmp>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d103      	bne.n	8003ebe <serial_protocol+0x54a>
			g_ov7670_info.color_fmt = CFMT_RGB555;
 8003eb6:	4b16      	ldr	r3, [pc, #88]	; (8003f10 <serial_protocol+0x59c>)
 8003eb8:	2201      	movs	r2, #1
 8003eba:	701a      	strb	r2, [r3, #0]
 8003ebc:	e06b      	b.n	8003f96 <serial_protocol+0x622>
		else if(strncmp(token, "RGB6", 4) == 0)
 8003ebe:	2204      	movs	r2, #4
 8003ec0:	491b      	ldr	r1, [pc, #108]	; (8003f30 <serial_protocol+0x5bc>)
 8003ec2:	69b8      	ldr	r0, [r7, #24]
 8003ec4:	f023 fbd6 	bl	8027674 <strncmp>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d103      	bne.n	8003ed6 <serial_protocol+0x562>
			g_ov7670_info.color_fmt = CFMT_RGB565;
 8003ece:	4b10      	ldr	r3, [pc, #64]	; (8003f10 <serial_protocol+0x59c>)
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	701a      	strb	r2, [r3, #0]
 8003ed4:	e05f      	b.n	8003f96 <serial_protocol+0x622>
		else if(strncmp(token, "RGB4", 4) == 0)
 8003ed6:	2204      	movs	r2, #4
 8003ed8:	4916      	ldr	r1, [pc, #88]	; (8003f34 <serial_protocol+0x5c0>)
 8003eda:	69b8      	ldr	r0, [r7, #24]
 8003edc:	f023 fbca 	bl	8027674 <strncmp>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d128      	bne.n	8003f38 <serial_protocol+0x5c4>
			g_ov7670_info.color_fmt = CFMT_RGB444;
 8003ee6:	4b0a      	ldr	r3, [pc, #40]	; (8003f10 <serial_protocol+0x59c>)
 8003ee8:	2202      	movs	r2, #2
 8003eea:	701a      	strb	r2, [r3, #0]
 8003eec:	e053      	b.n	8003f96 <serial_protocol+0x622>
 8003eee:	bf00      	nop
 8003ef0:	08028404 	.word	0x08028404
 8003ef4:	0802840c 	.word	0x0802840c
 8003ef8:	08028414 	.word	0x08028414
 8003efc:	080283e8 	.word	0x080283e8
 8003f00:	08028418 	.word	0x08028418
 8003f04:	20000030 	.word	0x20000030
 8003f08:	08028420 	.word	0x08028420
 8003f0c:	08028428 	.word	0x08028428
 8003f10:	20000004 	.word	0x20000004
 8003f14:	0803fa2c 	.word	0x0803fa2c
 8003f18:	08028430 	.word	0x08028430
 8003f1c:	08028438 	.word	0x08028438
 8003f20:	08028440 	.word	0x08028440
 8003f24:	08028444 	.word	0x08028444
 8003f28:	0802844c 	.word	0x0802844c
 8003f2c:	08028454 	.word	0x08028454
 8003f30:	0802845c 	.word	0x0802845c
 8003f34:	08028464 	.word	0x08028464
		else if(strncmp(token, "GRB", 3) == 0)
 8003f38:	2203      	movs	r2, #3
 8003f3a:	4939      	ldr	r1, [pc, #228]	; (8004020 <serial_protocol+0x6ac>)
 8003f3c:	69b8      	ldr	r0, [r7, #24]
 8003f3e:	f023 fb99 	bl	8027674 <strncmp>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d103      	bne.n	8003f50 <serial_protocol+0x5dc>
			g_ov7670_info.color_fmt = CFMT_GRB422;
 8003f48:	4b36      	ldr	r3, [pc, #216]	; (8004024 <serial_protocol+0x6b0>)
 8003f4a:	2203      	movs	r2, #3
 8003f4c:	701a      	strb	r2, [r3, #0]
 8003f4e:	e022      	b.n	8003f96 <serial_protocol+0x622>
		else if(strncmp(token, "YUV", 3) == 0)
 8003f50:	2203      	movs	r2, #3
 8003f52:	4935      	ldr	r1, [pc, #212]	; (8004028 <serial_protocol+0x6b4>)
 8003f54:	69b8      	ldr	r0, [r7, #24]
 8003f56:	f023 fb8d 	bl	8027674 <strncmp>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d103      	bne.n	8003f68 <serial_protocol+0x5f4>
			g_ov7670_info.color_fmt = CFMT_YUYV422;
 8003f60:	4b30      	ldr	r3, [pc, #192]	; (8004024 <serial_protocol+0x6b0>)
 8003f62:	2204      	movs	r2, #4
 8003f64:	701a      	strb	r2, [r3, #0]
 8003f66:	e016      	b.n	8003f96 <serial_protocol+0x622>
		else if(strncmp(token, "RBAY", 4) == 0)
 8003f68:	2204      	movs	r2, #4
 8003f6a:	4930      	ldr	r1, [pc, #192]	; (800402c <serial_protocol+0x6b8>)
 8003f6c:	69b8      	ldr	r0, [r7, #24]
 8003f6e:	f023 fb81 	bl	8027674 <strncmp>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d103      	bne.n	8003f80 <serial_protocol+0x60c>
			g_ov7670_info.color_fmt = CFMT_RAW_BAYER;
 8003f78:	4b2a      	ldr	r3, [pc, #168]	; (8004024 <serial_protocol+0x6b0>)
 8003f7a:	2205      	movs	r2, #5
 8003f7c:	701a      	strb	r2, [r3, #0]
 8003f7e:	e00a      	b.n	8003f96 <serial_protocol+0x622>
		else if(strncmp(token, "PBAY", 4) == 0)
 8003f80:	2204      	movs	r2, #4
 8003f82:	492b      	ldr	r1, [pc, #172]	; (8004030 <serial_protocol+0x6bc>)
 8003f84:	69b8      	ldr	r0, [r7, #24]
 8003f86:	f023 fb75 	bl	8027674 <strncmp>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d102      	bne.n	8003f96 <serial_protocol+0x622>
			g_ov7670_info.color_fmt = CFMT_PRO_BAYER;
 8003f90:	4b24      	ldr	r3, [pc, #144]	; (8004024 <serial_protocol+0x6b0>)
 8003f92:	2206      	movs	r2, #6
 8003f94:	701a      	strb	r2, [r3, #0]
		ov7670_set_mode(300);
 8003f96:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003f9a:	f7fe fb21 	bl	80025e0 <ov7670_set_mode>
}
 8003f9e:	e03b      	b.n	8004018 <serial_protocol+0x6a4>
	else if(strncmp(buff, "OVSCL", 5) == 0)
 8003fa0:	2205      	movs	r2, #5
 8003fa2:	4924      	ldr	r1, [pc, #144]	; (8004034 <serial_protocol+0x6c0>)
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f023 fb65 	bl	8027674 <strncmp>
 8003faa:	4603      	mov	r3, r0
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d133      	bne.n	8004018 <serial_protocol+0x6a4>
		token = strtok(NULL, ",");
 8003fb0:	4921      	ldr	r1, [pc, #132]	; (8004038 <serial_protocol+0x6c4>)
 8003fb2:	2000      	movs	r0, #0
 8003fb4:	f023 fb84 	bl	80276c0 <strtok>
 8003fb8:	61b8      	str	r0, [r7, #24]
		strncpy(temp_buff, token, 3);
 8003fba:	f107 0308 	add.w	r3, r7, #8
 8003fbe:	2203      	movs	r2, #3
 8003fc0:	69b9      	ldr	r1, [r7, #24]
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f023 fb68 	bl	8027698 <strncpy>
		value1 = strtoll(temp_buff, NULL, 10);
 8003fc8:	f107 0308 	add.w	r3, r7, #8
 8003fcc:	220a      	movs	r2, #10
 8003fce:	2100      	movs	r1, #0
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f023 fc67 	bl	80278a4 <strtoll>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	460b      	mov	r3, r1
 8003fda:	4613      	mov	r3, r2
 8003fdc:	82fb      	strh	r3, [r7, #22]
		token = strtok(NULL, ",");
 8003fde:	4916      	ldr	r1, [pc, #88]	; (8004038 <serial_protocol+0x6c4>)
 8003fe0:	2000      	movs	r0, #0
 8003fe2:	f023 fb6d 	bl	80276c0 <strtok>
 8003fe6:	61b8      	str	r0, [r7, #24]
		strncpy(temp_buff, token, 3);
 8003fe8:	f107 0308 	add.w	r3, r7, #8
 8003fec:	2203      	movs	r2, #3
 8003fee:	69b9      	ldr	r1, [r7, #24]
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f023 fb51 	bl	8027698 <strncpy>
		value2 = strtoll(temp_buff, NULL, 10);
 8003ff6:	f107 0308 	add.w	r3, r7, #8
 8003ffa:	220a      	movs	r2, #10
 8003ffc:	2100      	movs	r1, #0
 8003ffe:	4618      	mov	r0, r3
 8004000:	f023 fc50 	bl	80278a4 <strtoll>
 8004004:	4602      	mov	r2, r0
 8004006:	460b      	mov	r3, r1
 8004008:	4613      	mov	r3, r2
 800400a:	82bb      	strh	r3, [r7, #20]
		ov7670_scaling_control(value1, value2);
 800400c:	8aba      	ldrh	r2, [r7, #20]
 800400e:	8afb      	ldrh	r3, [r7, #22]
 8004010:	4611      	mov	r1, r2
 8004012:	4618      	mov	r0, r3
 8004014:	f7fe fa36 	bl	8002484 <ov7670_scaling_control>
}
 8004018:	bf00      	nop
 800401a:	3720      	adds	r7, #32
 800401c:	46bd      	mov	sp, r7
 800401e:	bdb0      	pop	{r4, r5, r7, pc}
 8004020:	0802846c 	.word	0x0802846c
 8004024:	20000004 	.word	0x20000004
 8004028:	08028470 	.word	0x08028470
 800402c:	08028474 	.word	0x08028474
 8004030:	0802847c 	.word	0x0802847c
 8004034:	08028484 	.word	0x08028484
 8004038:	080283e8 	.word	0x080283e8

0800403c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004040:	4b11      	ldr	r3, [pc, #68]	; (8004088 <MX_USART3_UART_Init+0x4c>)
 8004042:	4a12      	ldr	r2, [pc, #72]	; (800408c <MX_USART3_UART_Init+0x50>)
 8004044:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004046:	4b10      	ldr	r3, [pc, #64]	; (8004088 <MX_USART3_UART_Init+0x4c>)
 8004048:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800404c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800404e:	4b0e      	ldr	r3, [pc, #56]	; (8004088 <MX_USART3_UART_Init+0x4c>)
 8004050:	2200      	movs	r2, #0
 8004052:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004054:	4b0c      	ldr	r3, [pc, #48]	; (8004088 <MX_USART3_UART_Init+0x4c>)
 8004056:	2200      	movs	r2, #0
 8004058:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800405a:	4b0b      	ldr	r3, [pc, #44]	; (8004088 <MX_USART3_UART_Init+0x4c>)
 800405c:	2200      	movs	r2, #0
 800405e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004060:	4b09      	ldr	r3, [pc, #36]	; (8004088 <MX_USART3_UART_Init+0x4c>)
 8004062:	220c      	movs	r2, #12
 8004064:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004066:	4b08      	ldr	r3, [pc, #32]	; (8004088 <MX_USART3_UART_Init+0x4c>)
 8004068:	2200      	movs	r2, #0
 800406a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800406c:	4b06      	ldr	r3, [pc, #24]	; (8004088 <MX_USART3_UART_Init+0x4c>)
 800406e:	2200      	movs	r2, #0
 8004070:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004072:	4805      	ldr	r0, [pc, #20]	; (8004088 <MX_USART3_UART_Init+0x4c>)
 8004074:	f005 fd40 	bl	8009af8 <HAL_UART_Init>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d001      	beq.n	8004082 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800407e:	f7fe f9a1 	bl	80023c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004082:	bf00      	nop
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	20047f5c 	.word	0x20047f5c
 800408c:	40004800 	.word	0x40004800

08004090 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b08a      	sub	sp, #40	; 0x28
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004098:	f107 0314 	add.w	r3, r7, #20
 800409c:	2200      	movs	r2, #0
 800409e:	601a      	str	r2, [r3, #0]
 80040a0:	605a      	str	r2, [r3, #4]
 80040a2:	609a      	str	r2, [r3, #8]
 80040a4:	60da      	str	r2, [r3, #12]
 80040a6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a1e      	ldr	r2, [pc, #120]	; (8004128 <HAL_UART_MspInit+0x98>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d136      	bne.n	8004120 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80040b2:	2300      	movs	r3, #0
 80040b4:	613b      	str	r3, [r7, #16]
 80040b6:	4b1d      	ldr	r3, [pc, #116]	; (800412c <HAL_UART_MspInit+0x9c>)
 80040b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ba:	4a1c      	ldr	r2, [pc, #112]	; (800412c <HAL_UART_MspInit+0x9c>)
 80040bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040c0:	6413      	str	r3, [r2, #64]	; 0x40
 80040c2:	4b1a      	ldr	r3, [pc, #104]	; (800412c <HAL_UART_MspInit+0x9c>)
 80040c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040ca:	613b      	str	r3, [r7, #16]
 80040cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040ce:	2300      	movs	r3, #0
 80040d0:	60fb      	str	r3, [r7, #12]
 80040d2:	4b16      	ldr	r3, [pc, #88]	; (800412c <HAL_UART_MspInit+0x9c>)
 80040d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d6:	4a15      	ldr	r2, [pc, #84]	; (800412c <HAL_UART_MspInit+0x9c>)
 80040d8:	f043 0302 	orr.w	r3, r3, #2
 80040dc:	6313      	str	r3, [r2, #48]	; 0x30
 80040de:	4b13      	ldr	r3, [pc, #76]	; (800412c <HAL_UART_MspInit+0x9c>)
 80040e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e2:	f003 0302 	and.w	r3, r3, #2
 80040e6:	60fb      	str	r3, [r7, #12]
 80040e8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80040ea:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80040ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040f0:	2302      	movs	r3, #2
 80040f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040f4:	2300      	movs	r3, #0
 80040f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040f8:	2303      	movs	r3, #3
 80040fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80040fc:	2307      	movs	r3, #7
 80040fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004100:	f107 0314 	add.w	r3, r7, #20
 8004104:	4619      	mov	r1, r3
 8004106:	480a      	ldr	r0, [pc, #40]	; (8004130 <HAL_UART_MspInit+0xa0>)
 8004108:	f001 f9a4 	bl	8005454 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800410c:	2200      	movs	r2, #0
 800410e:	2100      	movs	r1, #0
 8004110:	2027      	movs	r0, #39	; 0x27
 8004112:	f000 fdaa 	bl	8004c6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004116:	2027      	movs	r0, #39	; 0x27
 8004118:	f000 fdc3 	bl	8004ca2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */
    uart_init();
 800411c:	f7ff f980 	bl	8003420 <uart_init>
  /* USER CODE END USART3_MspInit 1 */
  }
}
 8004120:	bf00      	nop
 8004122:	3728      	adds	r7, #40	; 0x28
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}
 8004128:	40004800 	.word	0x40004800
 800412c:	40023800 	.word	0x40023800
 8004130:	40020400 	.word	0x40020400

08004134 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8004134:	f8df d034 	ldr.w	sp, [pc, #52]	; 800416c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004138:	480d      	ldr	r0, [pc, #52]	; (8004170 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800413a:	490e      	ldr	r1, [pc, #56]	; (8004174 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800413c:	4a0e      	ldr	r2, [pc, #56]	; (8004178 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800413e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004140:	e002      	b.n	8004148 <LoopCopyDataInit>

08004142 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004142:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004144:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004146:	3304      	adds	r3, #4

08004148 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004148:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800414a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800414c:	d3f9      	bcc.n	8004142 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800414e:	4a0b      	ldr	r2, [pc, #44]	; (800417c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004150:	4c0b      	ldr	r4, [pc, #44]	; (8004180 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004152:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004154:	e001      	b.n	800415a <LoopFillZerobss>

08004156 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004156:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004158:	3204      	adds	r2, #4

0800415a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800415a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800415c:	d3fb      	bcc.n	8004156 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800415e:	f7fe fcdd 	bl	8002b1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004162:	f022 fe0f 	bl	8026d84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004166:	f7fe f873 	bl	8002250 <main>
  bx  lr    
 800416a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800416c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8004170:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004174:	200000c4 	.word	0x200000c4
  ldr r2, =_sidata
 8004178:	0808986c 	.word	0x0808986c
  ldr r2, =_sbss
 800417c:	200000c4 	.word	0x200000c4
  ldr r4, =_ebss
 8004180:	20047fb4 	.word	0x20047fb4

08004184 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004184:	e7fe      	b.n	8004184 <ADC_IRQHandler>
	...

08004188 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800418c:	4b0e      	ldr	r3, [pc, #56]	; (80041c8 <HAL_Init+0x40>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a0d      	ldr	r2, [pc, #52]	; (80041c8 <HAL_Init+0x40>)
 8004192:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004196:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004198:	4b0b      	ldr	r3, [pc, #44]	; (80041c8 <HAL_Init+0x40>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a0a      	ldr	r2, [pc, #40]	; (80041c8 <HAL_Init+0x40>)
 800419e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80041a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80041a4:	4b08      	ldr	r3, [pc, #32]	; (80041c8 <HAL_Init+0x40>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a07      	ldr	r2, [pc, #28]	; (80041c8 <HAL_Init+0x40>)
 80041aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80041b0:	2003      	movs	r0, #3
 80041b2:	f000 fd4f 	bl	8004c54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80041b6:	2000      	movs	r0, #0
 80041b8:	f000 f808 	bl	80041cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80041bc:	f7fe fb42 	bl	8002844 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80041c0:	2300      	movs	r3, #0
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	40023c00 	.word	0x40023c00

080041cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b082      	sub	sp, #8
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80041d4:	4b12      	ldr	r3, [pc, #72]	; (8004220 <HAL_InitTick+0x54>)
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	4b12      	ldr	r3, [pc, #72]	; (8004224 <HAL_InitTick+0x58>)
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	4619      	mov	r1, r3
 80041de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80041e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80041e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ea:	4618      	mov	r0, r3
 80041ec:	f000 fd75 	bl	8004cda <HAL_SYSTICK_Config>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d001      	beq.n	80041fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e00e      	b.n	8004218 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2b0f      	cmp	r3, #15
 80041fe:	d80a      	bhi.n	8004216 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004200:	2200      	movs	r2, #0
 8004202:	6879      	ldr	r1, [r7, #4]
 8004204:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004208:	f000 fd2f 	bl	8004c6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800420c:	4a06      	ldr	r2, [pc, #24]	; (8004228 <HAL_InitTick+0x5c>)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004212:	2300      	movs	r3, #0
 8004214:	e000      	b.n	8004218 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
}
 8004218:	4618      	mov	r0, r3
 800421a:	3708      	adds	r7, #8
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}
 8004220:	20000028 	.word	0x20000028
 8004224:	2000004c 	.word	0x2000004c
 8004228:	20000048 	.word	0x20000048

0800422c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800422c:	b480      	push	{r7}
 800422e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004230:	4b06      	ldr	r3, [pc, #24]	; (800424c <HAL_IncTick+0x20>)
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	461a      	mov	r2, r3
 8004236:	4b06      	ldr	r3, [pc, #24]	; (8004250 <HAL_IncTick+0x24>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4413      	add	r3, r2
 800423c:	4a04      	ldr	r2, [pc, #16]	; (8004250 <HAL_IncTick+0x24>)
 800423e:	6013      	str	r3, [r2, #0]
}
 8004240:	bf00      	nop
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr
 800424a:	bf00      	nop
 800424c:	2000004c 	.word	0x2000004c
 8004250:	20047fa0 	.word	0x20047fa0

08004254 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004254:	b480      	push	{r7}
 8004256:	af00      	add	r7, sp, #0
  return uwTick;
 8004258:	4b03      	ldr	r3, [pc, #12]	; (8004268 <HAL_GetTick+0x14>)
 800425a:	681b      	ldr	r3, [r3, #0]
}
 800425c:	4618      	mov	r0, r3
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop
 8004268:	20047fa0 	.word	0x20047fa0

0800426c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b084      	sub	sp, #16
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004274:	f7ff ffee 	bl	8004254 <HAL_GetTick>
 8004278:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004284:	d005      	beq.n	8004292 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004286:	4b0a      	ldr	r3, [pc, #40]	; (80042b0 <HAL_Delay+0x44>)
 8004288:	781b      	ldrb	r3, [r3, #0]
 800428a:	461a      	mov	r2, r3
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	4413      	add	r3, r2
 8004290:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004292:	bf00      	nop
 8004294:	f7ff ffde 	bl	8004254 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d8f7      	bhi.n	8004294 <HAL_Delay+0x28>
  {
  }
}
 80042a4:	bf00      	nop
 80042a6:	bf00      	nop
 80042a8:	3710      	adds	r7, #16
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	2000004c 	.word	0x2000004c

080042b4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042bc:	2300      	movs	r3, #0
 80042be:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d101      	bne.n	80042ca <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e033      	b.n	8004332 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d109      	bne.n	80042e6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f7fc fee8 	bl	80010a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ea:	f003 0310 	and.w	r3, r3, #16
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d118      	bne.n	8004324 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80042fa:	f023 0302 	bic.w	r3, r3, #2
 80042fe:	f043 0202 	orr.w	r2, r3, #2
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f000 fa96 	bl	8004838 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004316:	f023 0303 	bic.w	r3, r3, #3
 800431a:	f043 0201 	orr.w	r2, r3, #1
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	641a      	str	r2, [r3, #64]	; 0x40
 8004322:	e001      	b.n	8004328 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004330:	7bfb      	ldrb	r3, [r7, #15]
}
 8004332:	4618      	mov	r0, r3
 8004334:	3710      	adds	r7, #16
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
	...

0800433c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800433c:	b480      	push	{r7}
 800433e:	b085      	sub	sp, #20
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004344:	2300      	movs	r3, #0
 8004346:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800434e:	2b01      	cmp	r3, #1
 8004350:	d101      	bne.n	8004356 <HAL_ADC_Start+0x1a>
 8004352:	2302      	movs	r3, #2
 8004354:	e097      	b.n	8004486 <HAL_ADC_Start+0x14a>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2201      	movs	r2, #1
 800435a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	f003 0301 	and.w	r3, r3, #1
 8004368:	2b01      	cmp	r3, #1
 800436a:	d018      	beq.n	800439e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	689a      	ldr	r2, [r3, #8]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f042 0201 	orr.w	r2, r2, #1
 800437a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800437c:	4b45      	ldr	r3, [pc, #276]	; (8004494 <HAL_ADC_Start+0x158>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a45      	ldr	r2, [pc, #276]	; (8004498 <HAL_ADC_Start+0x15c>)
 8004382:	fba2 2303 	umull	r2, r3, r2, r3
 8004386:	0c9a      	lsrs	r2, r3, #18
 8004388:	4613      	mov	r3, r2
 800438a:	005b      	lsls	r3, r3, #1
 800438c:	4413      	add	r3, r2
 800438e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004390:	e002      	b.n	8004398 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	3b01      	subs	r3, #1
 8004396:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d1f9      	bne.n	8004392 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	f003 0301 	and.w	r3, r3, #1
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d15f      	bne.n	800446c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80043b4:	f023 0301 	bic.w	r3, r3, #1
 80043b8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d007      	beq.n	80043de <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80043d6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043ea:	d106      	bne.n	80043fa <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043f0:	f023 0206 	bic.w	r2, r3, #6
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	645a      	str	r2, [r3, #68]	; 0x44
 80043f8:	e002      	b.n	8004400 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004408:	4b24      	ldr	r3, [pc, #144]	; (800449c <HAL_ADC_Start+0x160>)
 800440a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004414:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	f003 031f 	and.w	r3, r3, #31
 800441e:	2b00      	cmp	r3, #0
 8004420:	d10f      	bne.n	8004442 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d129      	bne.n	8004484 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	689a      	ldr	r2, [r3, #8]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800443e:	609a      	str	r2, [r3, #8]
 8004440:	e020      	b.n	8004484 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a16      	ldr	r2, [pc, #88]	; (80044a0 <HAL_ADC_Start+0x164>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d11b      	bne.n	8004484 <HAL_ADC_Start+0x148>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d114      	bne.n	8004484 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	689a      	ldr	r2, [r3, #8]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004468:	609a      	str	r2, [r3, #8]
 800446a:	e00b      	b.n	8004484 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004470:	f043 0210 	orr.w	r2, r3, #16
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800447c:	f043 0201 	orr.w	r2, r3, #1
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004484:	2300      	movs	r3, #0
}
 8004486:	4618      	mov	r0, r3
 8004488:	3714      	adds	r7, #20
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	20000028 	.word	0x20000028
 8004498:	431bde83 	.word	0x431bde83
 800449c:	40012300 	.word	0x40012300
 80044a0:	40012000 	.word	0x40012000

080044a4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80044ae:	2300      	movs	r3, #0
 80044b0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044c0:	d113      	bne.n	80044ea <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80044cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044d0:	d10b      	bne.n	80044ea <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d6:	f043 0220 	orr.w	r2, r3, #32
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e063      	b.n	80045b2 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80044ea:	f7ff feb3 	bl	8004254 <HAL_GetTick>
 80044ee:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80044f0:	e021      	b.n	8004536 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044f8:	d01d      	beq.n	8004536 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d007      	beq.n	8004510 <HAL_ADC_PollForConversion+0x6c>
 8004500:	f7ff fea8 	bl	8004254 <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	683a      	ldr	r2, [r7, #0]
 800450c:	429a      	cmp	r2, r3
 800450e:	d212      	bcs.n	8004536 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0302 	and.w	r3, r3, #2
 800451a:	2b02      	cmp	r3, #2
 800451c:	d00b      	beq.n	8004536 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004522:	f043 0204 	orr.w	r2, r3, #4
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e03d      	b.n	80045b2 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0302 	and.w	r3, r3, #2
 8004540:	2b02      	cmp	r3, #2
 8004542:	d1d6      	bne.n	80044f2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f06f 0212 	mvn.w	r2, #18
 800454c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004552:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004564:	2b00      	cmp	r3, #0
 8004566:	d123      	bne.n	80045b0 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800456c:	2b00      	cmp	r3, #0
 800456e:	d11f      	bne.n	80045b0 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004576:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800457a:	2b00      	cmp	r3, #0
 800457c:	d006      	beq.n	800458c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004588:	2b00      	cmp	r3, #0
 800458a:	d111      	bne.n	80045b0 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004590:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d105      	bne.n	80045b0 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a8:	f043 0201 	orr.w	r2, r3, #1
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3710      	adds	r7, #16
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}

080045ba <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80045ba:	b480      	push	{r7}
 80045bc:	b083      	sub	sp, #12
 80045be:	af00      	add	r7, sp, #0
 80045c0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	370c      	adds	r7, #12
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr

080045d4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b085      	sub	sp, #20
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80045de:	2300      	movs	r3, #0
 80045e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d101      	bne.n	80045f0 <HAL_ADC_ConfigChannel+0x1c>
 80045ec:	2302      	movs	r3, #2
 80045ee:	e113      	b.n	8004818 <HAL_ADC_ConfigChannel+0x244>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2b09      	cmp	r3, #9
 80045fe:	d925      	bls.n	800464c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	68d9      	ldr	r1, [r3, #12]
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	b29b      	uxth	r3, r3
 800460c:	461a      	mov	r2, r3
 800460e:	4613      	mov	r3, r2
 8004610:	005b      	lsls	r3, r3, #1
 8004612:	4413      	add	r3, r2
 8004614:	3b1e      	subs	r3, #30
 8004616:	2207      	movs	r2, #7
 8004618:	fa02 f303 	lsl.w	r3, r2, r3
 800461c:	43da      	mvns	r2, r3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	400a      	ands	r2, r1
 8004624:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	68d9      	ldr	r1, [r3, #12]
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	689a      	ldr	r2, [r3, #8]
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	b29b      	uxth	r3, r3
 8004636:	4618      	mov	r0, r3
 8004638:	4603      	mov	r3, r0
 800463a:	005b      	lsls	r3, r3, #1
 800463c:	4403      	add	r3, r0
 800463e:	3b1e      	subs	r3, #30
 8004640:	409a      	lsls	r2, r3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	430a      	orrs	r2, r1
 8004648:	60da      	str	r2, [r3, #12]
 800464a:	e022      	b.n	8004692 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	6919      	ldr	r1, [r3, #16]
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	b29b      	uxth	r3, r3
 8004658:	461a      	mov	r2, r3
 800465a:	4613      	mov	r3, r2
 800465c:	005b      	lsls	r3, r3, #1
 800465e:	4413      	add	r3, r2
 8004660:	2207      	movs	r2, #7
 8004662:	fa02 f303 	lsl.w	r3, r2, r3
 8004666:	43da      	mvns	r2, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	400a      	ands	r2, r1
 800466e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	6919      	ldr	r1, [r3, #16]
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	689a      	ldr	r2, [r3, #8]
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	b29b      	uxth	r3, r3
 8004680:	4618      	mov	r0, r3
 8004682:	4603      	mov	r3, r0
 8004684:	005b      	lsls	r3, r3, #1
 8004686:	4403      	add	r3, r0
 8004688:	409a      	lsls	r2, r3
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	430a      	orrs	r2, r1
 8004690:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	2b06      	cmp	r3, #6
 8004698:	d824      	bhi.n	80046e4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	685a      	ldr	r2, [r3, #4]
 80046a4:	4613      	mov	r3, r2
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	4413      	add	r3, r2
 80046aa:	3b05      	subs	r3, #5
 80046ac:	221f      	movs	r2, #31
 80046ae:	fa02 f303 	lsl.w	r3, r2, r3
 80046b2:	43da      	mvns	r2, r3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	400a      	ands	r2, r1
 80046ba:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	4618      	mov	r0, r3
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	685a      	ldr	r2, [r3, #4]
 80046ce:	4613      	mov	r3, r2
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	4413      	add	r3, r2
 80046d4:	3b05      	subs	r3, #5
 80046d6:	fa00 f203 	lsl.w	r2, r0, r3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	430a      	orrs	r2, r1
 80046e0:	635a      	str	r2, [r3, #52]	; 0x34
 80046e2:	e04c      	b.n	800477e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	2b0c      	cmp	r3, #12
 80046ea:	d824      	bhi.n	8004736 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	685a      	ldr	r2, [r3, #4]
 80046f6:	4613      	mov	r3, r2
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	4413      	add	r3, r2
 80046fc:	3b23      	subs	r3, #35	; 0x23
 80046fe:	221f      	movs	r2, #31
 8004700:	fa02 f303 	lsl.w	r3, r2, r3
 8004704:	43da      	mvns	r2, r3
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	400a      	ands	r2, r1
 800470c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	b29b      	uxth	r3, r3
 800471a:	4618      	mov	r0, r3
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	685a      	ldr	r2, [r3, #4]
 8004720:	4613      	mov	r3, r2
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	4413      	add	r3, r2
 8004726:	3b23      	subs	r3, #35	; 0x23
 8004728:	fa00 f203 	lsl.w	r2, r0, r3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	430a      	orrs	r2, r1
 8004732:	631a      	str	r2, [r3, #48]	; 0x30
 8004734:	e023      	b.n	800477e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	685a      	ldr	r2, [r3, #4]
 8004740:	4613      	mov	r3, r2
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	4413      	add	r3, r2
 8004746:	3b41      	subs	r3, #65	; 0x41
 8004748:	221f      	movs	r2, #31
 800474a:	fa02 f303 	lsl.w	r3, r2, r3
 800474e:	43da      	mvns	r2, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	400a      	ands	r2, r1
 8004756:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	b29b      	uxth	r3, r3
 8004764:	4618      	mov	r0, r3
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	685a      	ldr	r2, [r3, #4]
 800476a:	4613      	mov	r3, r2
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	4413      	add	r3, r2
 8004770:	3b41      	subs	r3, #65	; 0x41
 8004772:	fa00 f203 	lsl.w	r2, r0, r3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	430a      	orrs	r2, r1
 800477c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800477e:	4b29      	ldr	r3, [pc, #164]	; (8004824 <HAL_ADC_ConfigChannel+0x250>)
 8004780:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a28      	ldr	r2, [pc, #160]	; (8004828 <HAL_ADC_ConfigChannel+0x254>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d10f      	bne.n	80047ac <HAL_ADC_ConfigChannel+0x1d8>
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2b12      	cmp	r3, #18
 8004792:	d10b      	bne.n	80047ac <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a1d      	ldr	r2, [pc, #116]	; (8004828 <HAL_ADC_ConfigChannel+0x254>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d12b      	bne.n	800480e <HAL_ADC_ConfigChannel+0x23a>
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a1c      	ldr	r2, [pc, #112]	; (800482c <HAL_ADC_ConfigChannel+0x258>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d003      	beq.n	80047c8 <HAL_ADC_ConfigChannel+0x1f4>
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2b11      	cmp	r3, #17
 80047c6:	d122      	bne.n	800480e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a11      	ldr	r2, [pc, #68]	; (800482c <HAL_ADC_ConfigChannel+0x258>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d111      	bne.n	800480e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80047ea:	4b11      	ldr	r3, [pc, #68]	; (8004830 <HAL_ADC_ConfigChannel+0x25c>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a11      	ldr	r2, [pc, #68]	; (8004834 <HAL_ADC_ConfigChannel+0x260>)
 80047f0:	fba2 2303 	umull	r2, r3, r2, r3
 80047f4:	0c9a      	lsrs	r2, r3, #18
 80047f6:	4613      	mov	r3, r2
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	4413      	add	r3, r2
 80047fc:	005b      	lsls	r3, r3, #1
 80047fe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004800:	e002      	b.n	8004808 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	3b01      	subs	r3, #1
 8004806:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d1f9      	bne.n	8004802 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2200      	movs	r2, #0
 8004812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004816:	2300      	movs	r3, #0
}
 8004818:	4618      	mov	r0, r3
 800481a:	3714      	adds	r7, #20
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr
 8004824:	40012300 	.word	0x40012300
 8004828:	40012000 	.word	0x40012000
 800482c:	10000012 	.word	0x10000012
 8004830:	20000028 	.word	0x20000028
 8004834:	431bde83 	.word	0x431bde83

08004838 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004838:	b480      	push	{r7}
 800483a:	b085      	sub	sp, #20
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004840:	4b79      	ldr	r3, [pc, #484]	; (8004a28 <ADC_Init+0x1f0>)
 8004842:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	685a      	ldr	r2, [r3, #4]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	431a      	orrs	r2, r3
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	685a      	ldr	r2, [r3, #4]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800486c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	6859      	ldr	r1, [r3, #4]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	691b      	ldr	r3, [r3, #16]
 8004878:	021a      	lsls	r2, r3, #8
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	430a      	orrs	r2, r1
 8004880:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	685a      	ldr	r2, [r3, #4]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004890:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	6859      	ldr	r1, [r3, #4]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	689a      	ldr	r2, [r3, #8]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	430a      	orrs	r2, r1
 80048a2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	689a      	ldr	r2, [r3, #8]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	6899      	ldr	r1, [r3, #8]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	68da      	ldr	r2, [r3, #12]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	430a      	orrs	r2, r1
 80048c4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ca:	4a58      	ldr	r2, [pc, #352]	; (8004a2c <ADC_Init+0x1f4>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d022      	beq.n	8004916 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	689a      	ldr	r2, [r3, #8]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80048de:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	6899      	ldr	r1, [r3, #8]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	430a      	orrs	r2, r1
 80048f0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	689a      	ldr	r2, [r3, #8]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004900:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	6899      	ldr	r1, [r3, #8]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	430a      	orrs	r2, r1
 8004912:	609a      	str	r2, [r3, #8]
 8004914:	e00f      	b.n	8004936 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	689a      	ldr	r2, [r3, #8]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004924:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	689a      	ldr	r2, [r3, #8]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004934:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	689a      	ldr	r2, [r3, #8]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f022 0202 	bic.w	r2, r2, #2
 8004944:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	6899      	ldr	r1, [r3, #8]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	7e1b      	ldrb	r3, [r3, #24]
 8004950:	005a      	lsls	r2, r3, #1
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	430a      	orrs	r2, r1
 8004958:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d01b      	beq.n	800499c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	685a      	ldr	r2, [r3, #4]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004972:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	685a      	ldr	r2, [r3, #4]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004982:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	6859      	ldr	r1, [r3, #4]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498e:	3b01      	subs	r3, #1
 8004990:	035a      	lsls	r2, r3, #13
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	430a      	orrs	r2, r1
 8004998:	605a      	str	r2, [r3, #4]
 800499a:	e007      	b.n	80049ac <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	685a      	ldr	r2, [r3, #4]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049aa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80049ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	69db      	ldr	r3, [r3, #28]
 80049c6:	3b01      	subs	r3, #1
 80049c8:	051a      	lsls	r2, r3, #20
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	430a      	orrs	r2, r1
 80049d0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	689a      	ldr	r2, [r3, #8]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80049e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	6899      	ldr	r1, [r3, #8]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80049ee:	025a      	lsls	r2, r3, #9
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	430a      	orrs	r2, r1
 80049f6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	689a      	ldr	r2, [r3, #8]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a06:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	6899      	ldr	r1, [r3, #8]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	695b      	ldr	r3, [r3, #20]
 8004a12:	029a      	lsls	r2, r3, #10
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	430a      	orrs	r2, r1
 8004a1a:	609a      	str	r2, [r3, #8]
}
 8004a1c:	bf00      	nop
 8004a1e:	3714      	adds	r7, #20
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr
 8004a28:	40012300 	.word	0x40012300
 8004a2c:	0f000001 	.word	0x0f000001

08004a30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b085      	sub	sp, #20
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f003 0307 	and.w	r3, r3, #7
 8004a3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a40:	4b0c      	ldr	r3, [pc, #48]	; (8004a74 <__NVIC_SetPriorityGrouping+0x44>)
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a46:	68ba      	ldr	r2, [r7, #8]
 8004a48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004a58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004a5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a62:	4a04      	ldr	r2, [pc, #16]	; (8004a74 <__NVIC_SetPriorityGrouping+0x44>)
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	60d3      	str	r3, [r2, #12]
}
 8004a68:	bf00      	nop
 8004a6a:	3714      	adds	r7, #20
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr
 8004a74:	e000ed00 	.word	0xe000ed00

08004a78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a7c:	4b04      	ldr	r3, [pc, #16]	; (8004a90 <__NVIC_GetPriorityGrouping+0x18>)
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	0a1b      	lsrs	r3, r3, #8
 8004a82:	f003 0307 	and.w	r3, r3, #7
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr
 8004a90:	e000ed00 	.word	0xe000ed00

08004a94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b083      	sub	sp, #12
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	db0b      	blt.n	8004abe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004aa6:	79fb      	ldrb	r3, [r7, #7]
 8004aa8:	f003 021f 	and.w	r2, r3, #31
 8004aac:	4907      	ldr	r1, [pc, #28]	; (8004acc <__NVIC_EnableIRQ+0x38>)
 8004aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ab2:	095b      	lsrs	r3, r3, #5
 8004ab4:	2001      	movs	r0, #1
 8004ab6:	fa00 f202 	lsl.w	r2, r0, r2
 8004aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004abe:	bf00      	nop
 8004ac0:	370c      	adds	r7, #12
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr
 8004aca:	bf00      	nop
 8004acc:	e000e100 	.word	0xe000e100

08004ad0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	db12      	blt.n	8004b08 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ae2:	79fb      	ldrb	r3, [r7, #7]
 8004ae4:	f003 021f 	and.w	r2, r3, #31
 8004ae8:	490a      	ldr	r1, [pc, #40]	; (8004b14 <__NVIC_DisableIRQ+0x44>)
 8004aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aee:	095b      	lsrs	r3, r3, #5
 8004af0:	2001      	movs	r0, #1
 8004af2:	fa00 f202 	lsl.w	r2, r0, r2
 8004af6:	3320      	adds	r3, #32
 8004af8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004afc:	f3bf 8f4f 	dsb	sy
}
 8004b00:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004b02:	f3bf 8f6f 	isb	sy
}
 8004b06:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004b08:	bf00      	nop
 8004b0a:	370c      	adds	r7, #12
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr
 8004b14:	e000e100 	.word	0xe000e100

08004b18 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	4603      	mov	r3, r0
 8004b20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	db0c      	blt.n	8004b44 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b2a:	79fb      	ldrb	r3, [r7, #7]
 8004b2c:	f003 021f 	and.w	r2, r3, #31
 8004b30:	4907      	ldr	r1, [pc, #28]	; (8004b50 <__NVIC_ClearPendingIRQ+0x38>)
 8004b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b36:	095b      	lsrs	r3, r3, #5
 8004b38:	2001      	movs	r0, #1
 8004b3a:	fa00 f202 	lsl.w	r2, r0, r2
 8004b3e:	3360      	adds	r3, #96	; 0x60
 8004b40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004b44:	bf00      	nop
 8004b46:	370c      	adds	r7, #12
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr
 8004b50:	e000e100 	.word	0xe000e100

08004b54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b083      	sub	sp, #12
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	6039      	str	r1, [r7, #0]
 8004b5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	db0a      	blt.n	8004b7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	b2da      	uxtb	r2, r3
 8004b6c:	490c      	ldr	r1, [pc, #48]	; (8004ba0 <__NVIC_SetPriority+0x4c>)
 8004b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b72:	0112      	lsls	r2, r2, #4
 8004b74:	b2d2      	uxtb	r2, r2
 8004b76:	440b      	add	r3, r1
 8004b78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b7c:	e00a      	b.n	8004b94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	b2da      	uxtb	r2, r3
 8004b82:	4908      	ldr	r1, [pc, #32]	; (8004ba4 <__NVIC_SetPriority+0x50>)
 8004b84:	79fb      	ldrb	r3, [r7, #7]
 8004b86:	f003 030f 	and.w	r3, r3, #15
 8004b8a:	3b04      	subs	r3, #4
 8004b8c:	0112      	lsls	r2, r2, #4
 8004b8e:	b2d2      	uxtb	r2, r2
 8004b90:	440b      	add	r3, r1
 8004b92:	761a      	strb	r2, [r3, #24]
}
 8004b94:	bf00      	nop
 8004b96:	370c      	adds	r7, #12
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr
 8004ba0:	e000e100 	.word	0xe000e100
 8004ba4:	e000ed00 	.word	0xe000ed00

08004ba8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b089      	sub	sp, #36	; 0x24
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	60f8      	str	r0, [r7, #12]
 8004bb0:	60b9      	str	r1, [r7, #8]
 8004bb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f003 0307 	and.w	r3, r3, #7
 8004bba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004bbc:	69fb      	ldr	r3, [r7, #28]
 8004bbe:	f1c3 0307 	rsb	r3, r3, #7
 8004bc2:	2b04      	cmp	r3, #4
 8004bc4:	bf28      	it	cs
 8004bc6:	2304      	movcs	r3, #4
 8004bc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004bca:	69fb      	ldr	r3, [r7, #28]
 8004bcc:	3304      	adds	r3, #4
 8004bce:	2b06      	cmp	r3, #6
 8004bd0:	d902      	bls.n	8004bd8 <NVIC_EncodePriority+0x30>
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	3b03      	subs	r3, #3
 8004bd6:	e000      	b.n	8004bda <NVIC_EncodePriority+0x32>
 8004bd8:	2300      	movs	r3, #0
 8004bda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bdc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004be0:	69bb      	ldr	r3, [r7, #24]
 8004be2:	fa02 f303 	lsl.w	r3, r2, r3
 8004be6:	43da      	mvns	r2, r3
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	401a      	ands	r2, r3
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004bf0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8004bfa:	43d9      	mvns	r1, r3
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c00:	4313      	orrs	r3, r2
         );
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3724      	adds	r7, #36	; 0x24
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr
	...

08004c10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b082      	sub	sp, #8
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	3b01      	subs	r3, #1
 8004c1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c20:	d301      	bcc.n	8004c26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c22:	2301      	movs	r3, #1
 8004c24:	e00f      	b.n	8004c46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c26:	4a0a      	ldr	r2, [pc, #40]	; (8004c50 <SysTick_Config+0x40>)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	3b01      	subs	r3, #1
 8004c2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004c2e:	210f      	movs	r1, #15
 8004c30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c34:	f7ff ff8e 	bl	8004b54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c38:	4b05      	ldr	r3, [pc, #20]	; (8004c50 <SysTick_Config+0x40>)
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c3e:	4b04      	ldr	r3, [pc, #16]	; (8004c50 <SysTick_Config+0x40>)
 8004c40:	2207      	movs	r2, #7
 8004c42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3708      	adds	r7, #8
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	e000e010 	.word	0xe000e010

08004c54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b082      	sub	sp, #8
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f7ff fee7 	bl	8004a30 <__NVIC_SetPriorityGrouping>
}
 8004c62:	bf00      	nop
 8004c64:	3708      	adds	r7, #8
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}

08004c6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004c6a:	b580      	push	{r7, lr}
 8004c6c:	b086      	sub	sp, #24
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	4603      	mov	r3, r0
 8004c72:	60b9      	str	r1, [r7, #8]
 8004c74:	607a      	str	r2, [r7, #4]
 8004c76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004c7c:	f7ff fefc 	bl	8004a78 <__NVIC_GetPriorityGrouping>
 8004c80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	68b9      	ldr	r1, [r7, #8]
 8004c86:	6978      	ldr	r0, [r7, #20]
 8004c88:	f7ff ff8e 	bl	8004ba8 <NVIC_EncodePriority>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c92:	4611      	mov	r1, r2
 8004c94:	4618      	mov	r0, r3
 8004c96:	f7ff ff5d 	bl	8004b54 <__NVIC_SetPriority>
}
 8004c9a:	bf00      	nop
 8004c9c:	3718      	adds	r7, #24
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}

08004ca2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ca2:	b580      	push	{r7, lr}
 8004ca4:	b082      	sub	sp, #8
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	4603      	mov	r3, r0
 8004caa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f7ff feef 	bl	8004a94 <__NVIC_EnableIRQ>
}
 8004cb6:	bf00      	nop
 8004cb8:	3708      	adds	r7, #8
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}

08004cbe <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004cbe:	b580      	push	{r7, lr}
 8004cc0:	b082      	sub	sp, #8
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f7ff feff 	bl	8004ad0 <__NVIC_DisableIRQ>
}
 8004cd2:	bf00      	nop
 8004cd4:	3708      	adds	r7, #8
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}

08004cda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004cda:	b580      	push	{r7, lr}
 8004cdc:	b082      	sub	sp, #8
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f7ff ff94 	bl	8004c10 <SysTick_Config>
 8004ce8:	4603      	mov	r3, r0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3708      	adds	r7, #8
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}

08004cf2 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004cf2:	b580      	push	{r7, lr}
 8004cf4:	b082      	sub	sp, #8
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8004cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d00:	4618      	mov	r0, r3
 8004d02:	f7ff ff09 	bl	8004b18 <__NVIC_ClearPendingIRQ>
}
 8004d06:	bf00      	nop
 8004d08:	3708      	adds	r7, #8
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
	...

08004d10 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b086      	sub	sp, #24
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004d1c:	f7ff fa9a 	bl	8004254 <HAL_GetTick>
 8004d20:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d101      	bne.n	8004d2c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e099      	b.n	8004e60 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2202      	movs	r2, #2
 8004d38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f022 0201 	bic.w	r2, r2, #1
 8004d4a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d4c:	e00f      	b.n	8004d6e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004d4e:	f7ff fa81 	bl	8004254 <HAL_GetTick>
 8004d52:	4602      	mov	r2, r0
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	1ad3      	subs	r3, r2, r3
 8004d58:	2b05      	cmp	r3, #5
 8004d5a:	d908      	bls.n	8004d6e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2220      	movs	r2, #32
 8004d60:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2203      	movs	r2, #3
 8004d66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	e078      	b.n	8004e60 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 0301 	and.w	r3, r3, #1
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d1e8      	bne.n	8004d4e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004d84:	697a      	ldr	r2, [r7, #20]
 8004d86:	4b38      	ldr	r3, [pc, #224]	; (8004e68 <HAL_DMA_Init+0x158>)
 8004d88:	4013      	ands	r3, r2
 8004d8a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	685a      	ldr	r2, [r3, #4]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004d9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	691b      	ldr	r3, [r3, #16]
 8004da0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004da6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	699b      	ldr	r3, [r3, #24]
 8004dac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004db2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6a1b      	ldr	r3, [r3, #32]
 8004db8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004dba:	697a      	ldr	r2, [r7, #20]
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc4:	2b04      	cmp	r3, #4
 8004dc6:	d107      	bne.n	8004dd8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	697a      	ldr	r2, [r7, #20]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	697a      	ldr	r2, [r7, #20]
 8004dde:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	695b      	ldr	r3, [r3, #20]
 8004de6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	f023 0307 	bic.w	r3, r3, #7
 8004dee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df4:	697a      	ldr	r2, [r7, #20]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfe:	2b04      	cmp	r3, #4
 8004e00:	d117      	bne.n	8004e32 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e06:	697a      	ldr	r2, [r7, #20]
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d00e      	beq.n	8004e32 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f000 f969 	bl	80050ec <DMA_CheckFifoParam>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d008      	beq.n	8004e32 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2240      	movs	r2, #64	; 0x40
 8004e24:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2201      	movs	r2, #1
 8004e2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e016      	b.n	8004e60 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	697a      	ldr	r2, [r7, #20]
 8004e38:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f000 f920 	bl	8005080 <DMA_CalcBaseAndBitshift>
 8004e40:	4603      	mov	r3, r0
 8004e42:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e48:	223f      	movs	r2, #63	; 0x3f
 8004e4a:	409a      	lsls	r2, r3
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004e5e:	2300      	movs	r3, #0
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3718      	adds	r7, #24
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	e010803f 	.word	0xe010803f

08004e6c <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b086      	sub	sp, #24
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	607a      	str	r2, [r7, #4]
 8004e78:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d101      	bne.n	8004e8c <HAL_DMA_Start+0x20>
 8004e88:	2302      	movs	r3, #2
 8004e8a:	e026      	b.n	8004eda <HAL_DMA_Start+0x6e>
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d115      	bne.n	8004ecc <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2202      	movs	r2, #2
 8004ea4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	68b9      	ldr	r1, [r7, #8]
 8004eb4:	68f8      	ldr	r0, [r7, #12]
 8004eb6:	f000 f8b4 	bl	8005022 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f042 0201 	orr.w	r2, r2, #1
 8004ec8:	601a      	str	r2, [r3, #0]
 8004eca:	e005      	b.n	8004ed8 <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004ed4:	2302      	movs	r3, #2
 8004ed6:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 8004ed8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3718      	adds	r7, #24
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}

08004ee2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004ee2:	b580      	push	{r7, lr}
 8004ee4:	b084      	sub	sp, #16
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eee:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004ef0:	f7ff f9b0 	bl	8004254 <HAL_GetTick>
 8004ef4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	2b02      	cmp	r3, #2
 8004f00:	d008      	beq.n	8004f14 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2280      	movs	r2, #128	; 0x80
 8004f06:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	e052      	b.n	8004fba <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f022 0216 	bic.w	r2, r2, #22
 8004f22:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	695a      	ldr	r2, [r3, #20]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f32:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d103      	bne.n	8004f44 <HAL_DMA_Abort+0x62>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d007      	beq.n	8004f54 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f022 0208 	bic.w	r2, r2, #8
 8004f52:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f022 0201 	bic.w	r2, r2, #1
 8004f62:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f64:	e013      	b.n	8004f8e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004f66:	f7ff f975 	bl	8004254 <HAL_GetTick>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	2b05      	cmp	r3, #5
 8004f72:	d90c      	bls.n	8004f8e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2220      	movs	r2, #32
 8004f78:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2203      	movs	r2, #3
 8004f86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	e015      	b.n	8004fba <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 0301 	and.w	r3, r3, #1
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d1e4      	bne.n	8004f66 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fa0:	223f      	movs	r2, #63	; 0x3f
 8004fa2:	409a      	lsls	r2, r3
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8004fb8:	2300      	movs	r3, #0
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3710      	adds	r7, #16
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}

08004fc2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004fc2:	b480      	push	{r7}
 8004fc4:	b083      	sub	sp, #12
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	2b02      	cmp	r3, #2
 8004fd4:	d004      	beq.n	8004fe0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2280      	movs	r2, #128	; 0x80
 8004fda:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e00c      	b.n	8004ffa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2205      	movs	r2, #5
 8004fe4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f022 0201 	bic.w	r2, r2, #1
 8004ff6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004ff8:	2300      	movs	r3, #0
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	370c      	adds	r7, #12
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr

08005006 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005006:	b480      	push	{r7}
 8005008:	b083      	sub	sp, #12
 800500a:	af00      	add	r7, sp, #0
 800500c:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005014:	b2db      	uxtb	r3, r3
}
 8005016:	4618      	mov	r0, r3
 8005018:	370c      	adds	r7, #12
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr

08005022 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005022:	b480      	push	{r7}
 8005024:	b085      	sub	sp, #20
 8005026:	af00      	add	r7, sp, #0
 8005028:	60f8      	str	r0, [r7, #12]
 800502a:	60b9      	str	r1, [r7, #8]
 800502c:	607a      	str	r2, [r7, #4]
 800502e:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800503e:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	683a      	ldr	r2, [r7, #0]
 8005046:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	2b40      	cmp	r3, #64	; 0x40
 800504e:	d108      	bne.n	8005062 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	68ba      	ldr	r2, [r7, #8]
 800505e:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005060:	e007      	b.n	8005072 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	68ba      	ldr	r2, [r7, #8]
 8005068:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	60da      	str	r2, [r3, #12]
}
 8005072:	bf00      	nop
 8005074:	3714      	adds	r7, #20
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr
	...

08005080 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005080:	b480      	push	{r7}
 8005082:	b085      	sub	sp, #20
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	b2db      	uxtb	r3, r3
 800508e:	3b10      	subs	r3, #16
 8005090:	4a14      	ldr	r2, [pc, #80]	; (80050e4 <DMA_CalcBaseAndBitshift+0x64>)
 8005092:	fba2 2303 	umull	r2, r3, r2, r3
 8005096:	091b      	lsrs	r3, r3, #4
 8005098:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800509a:	4a13      	ldr	r2, [pc, #76]	; (80050e8 <DMA_CalcBaseAndBitshift+0x68>)
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	4413      	add	r3, r2
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	461a      	mov	r2, r3
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2b03      	cmp	r3, #3
 80050ac:	d909      	bls.n	80050c2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80050b6:	f023 0303 	bic.w	r3, r3, #3
 80050ba:	1d1a      	adds	r2, r3, #4
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	659a      	str	r2, [r3, #88]	; 0x58
 80050c0:	e007      	b.n	80050d2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80050ca:	f023 0303 	bic.w	r3, r3, #3
 80050ce:	687a      	ldr	r2, [r7, #4]
 80050d0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3714      	adds	r7, #20
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr
 80050e2:	bf00      	nop
 80050e4:	aaaaaaab 	.word	0xaaaaaaab
 80050e8:	0803fb70 	.word	0x0803fb70

080050ec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b085      	sub	sp, #20
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050f4:	2300      	movs	r3, #0
 80050f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050fc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	699b      	ldr	r3, [r3, #24]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d11f      	bne.n	8005146 <DMA_CheckFifoParam+0x5a>
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	2b03      	cmp	r3, #3
 800510a:	d856      	bhi.n	80051ba <DMA_CheckFifoParam+0xce>
 800510c:	a201      	add	r2, pc, #4	; (adr r2, 8005114 <DMA_CheckFifoParam+0x28>)
 800510e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005112:	bf00      	nop
 8005114:	08005125 	.word	0x08005125
 8005118:	08005137 	.word	0x08005137
 800511c:	08005125 	.word	0x08005125
 8005120:	080051bb 	.word	0x080051bb
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005128:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800512c:	2b00      	cmp	r3, #0
 800512e:	d046      	beq.n	80051be <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005134:	e043      	b.n	80051be <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800513a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800513e:	d140      	bne.n	80051c2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005144:	e03d      	b.n	80051c2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	699b      	ldr	r3, [r3, #24]
 800514a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800514e:	d121      	bne.n	8005194 <DMA_CheckFifoParam+0xa8>
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	2b03      	cmp	r3, #3
 8005154:	d837      	bhi.n	80051c6 <DMA_CheckFifoParam+0xda>
 8005156:	a201      	add	r2, pc, #4	; (adr r2, 800515c <DMA_CheckFifoParam+0x70>)
 8005158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800515c:	0800516d 	.word	0x0800516d
 8005160:	08005173 	.word	0x08005173
 8005164:	0800516d 	.word	0x0800516d
 8005168:	08005185 	.word	0x08005185
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	73fb      	strb	r3, [r7, #15]
      break;
 8005170:	e030      	b.n	80051d4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005176:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800517a:	2b00      	cmp	r3, #0
 800517c:	d025      	beq.n	80051ca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005182:	e022      	b.n	80051ca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005188:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800518c:	d11f      	bne.n	80051ce <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005192:	e01c      	b.n	80051ce <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	2b02      	cmp	r3, #2
 8005198:	d903      	bls.n	80051a2 <DMA_CheckFifoParam+0xb6>
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	2b03      	cmp	r3, #3
 800519e:	d003      	beq.n	80051a8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80051a0:	e018      	b.n	80051d4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	73fb      	strb	r3, [r7, #15]
      break;
 80051a6:	e015      	b.n	80051d4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d00e      	beq.n	80051d2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	73fb      	strb	r3, [r7, #15]
      break;
 80051b8:	e00b      	b.n	80051d2 <DMA_CheckFifoParam+0xe6>
      break;
 80051ba:	bf00      	nop
 80051bc:	e00a      	b.n	80051d4 <DMA_CheckFifoParam+0xe8>
      break;
 80051be:	bf00      	nop
 80051c0:	e008      	b.n	80051d4 <DMA_CheckFifoParam+0xe8>
      break;
 80051c2:	bf00      	nop
 80051c4:	e006      	b.n	80051d4 <DMA_CheckFifoParam+0xe8>
      break;
 80051c6:	bf00      	nop
 80051c8:	e004      	b.n	80051d4 <DMA_CheckFifoParam+0xe8>
      break;
 80051ca:	bf00      	nop
 80051cc:	e002      	b.n	80051d4 <DMA_CheckFifoParam+0xe8>
      break;   
 80051ce:	bf00      	nop
 80051d0:	e000      	b.n	80051d4 <DMA_CheckFifoParam+0xe8>
      break;
 80051d2:	bf00      	nop
    }
  } 
  
  return status; 
 80051d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3714      	adds	r7, #20
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr
 80051e2:	bf00      	nop

080051e4 <HAL_EXTI_SetConfigLine>:
  * @param  hexti Exti handle.
  * @param  pExtiConfig Pointer on EXTI configuration to be set.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_SetConfigLine(EXTI_HandleTypeDef *hexti, EXTI_ConfigTypeDef *pExtiConfig)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b087      	sub	sp, #28
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	6039      	str	r1, [r7, #0]
  uint32_t regval;
  uint32_t linepos;
  uint32_t maskline;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d002      	beq.n	80051fa <HAL_EXTI_SetConfigLine+0x16>
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d101      	bne.n	80051fe <HAL_EXTI_SetConfigLine+0x1a>
  {
    return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e08f      	b.n	800531e <HAL_EXTI_SetConfigLine+0x13a>
  /* Check parameters */
  assert_param(IS_EXTI_LINE(pExtiConfig->Line));
  assert_param(IS_EXTI_MODE(pExtiConfig->Mode));

  /* Assign line number to handle */
  hexti->Line = pExtiConfig->Line;
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	601a      	str	r2, [r3, #0]

  /* Compute line mask */
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 031f 	and.w	r3, r3, #31
 800520e:	617b      	str	r3, [r7, #20]
  maskline = (1uL << linepos);
 8005210:	2201      	movs	r2, #1
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	fa02 f303 	lsl.w	r3, r2, r3
 8005218:	613b      	str	r3, [r7, #16]

  /* Configure triggers for configurable lines */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005222:	2b00      	cmp	r3, #0
 8005224:	d052      	beq.n	80052cc <HAL_EXTI_SetConfigLine+0xe8>
  {
    assert_param(IS_EXTI_TRIGGER(pExtiConfig->Trigger));

    /* Configure rising trigger */
    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_RISING) != 0x00u)
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	f003 0301 	and.w	r3, r3, #1
 800522e:	2b00      	cmp	r3, #0
 8005230:	d006      	beq.n	8005240 <HAL_EXTI_SetConfigLine+0x5c>
    {
      EXTI->RTSR |= maskline;
 8005232:	4b3e      	ldr	r3, [pc, #248]	; (800532c <HAL_EXTI_SetConfigLine+0x148>)
 8005234:	689a      	ldr	r2, [r3, #8]
 8005236:	493d      	ldr	r1, [pc, #244]	; (800532c <HAL_EXTI_SetConfigLine+0x148>)
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	4313      	orrs	r3, r2
 800523c:	608b      	str	r3, [r1, #8]
 800523e:	e006      	b.n	800524e <HAL_EXTI_SetConfigLine+0x6a>
    }
    else
    {
      EXTI->RTSR &= ~maskline;
 8005240:	4b3a      	ldr	r3, [pc, #232]	; (800532c <HAL_EXTI_SetConfigLine+0x148>)
 8005242:	689a      	ldr	r2, [r3, #8]
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	43db      	mvns	r3, r3
 8005248:	4938      	ldr	r1, [pc, #224]	; (800532c <HAL_EXTI_SetConfigLine+0x148>)
 800524a:	4013      	ands	r3, r2
 800524c:	608b      	str	r3, [r1, #8]
    }

    /* Configure falling trigger */
    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_FALLING) != 0x00u)
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	f003 0302 	and.w	r3, r3, #2
 8005256:	2b00      	cmp	r3, #0
 8005258:	d006      	beq.n	8005268 <HAL_EXTI_SetConfigLine+0x84>
    {
      EXTI->FTSR |= maskline;
 800525a:	4b34      	ldr	r3, [pc, #208]	; (800532c <HAL_EXTI_SetConfigLine+0x148>)
 800525c:	68da      	ldr	r2, [r3, #12]
 800525e:	4933      	ldr	r1, [pc, #204]	; (800532c <HAL_EXTI_SetConfigLine+0x148>)
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	4313      	orrs	r3, r2
 8005264:	60cb      	str	r3, [r1, #12]
 8005266:	e006      	b.n	8005276 <HAL_EXTI_SetConfigLine+0x92>
    }
    else
    {
      EXTI->FTSR &= ~maskline;
 8005268:	4b30      	ldr	r3, [pc, #192]	; (800532c <HAL_EXTI_SetConfigLine+0x148>)
 800526a:	68da      	ldr	r2, [r3, #12]
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	43db      	mvns	r3, r3
 8005270:	492e      	ldr	r1, [pc, #184]	; (800532c <HAL_EXTI_SetConfigLine+0x148>)
 8005272:	4013      	ands	r3, r2
 8005274:	60cb      	str	r3, [r1, #12]
    }


    /* Configure gpio port selection in case of gpio exti line */
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 800527e:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8005282:	d123      	bne.n	80052cc <HAL_EXTI_SetConfigLine+0xe8>
    {
      assert_param(IS_EXTI_GPIO_PORT(pExtiConfig->GPIOSel));
      assert_param(IS_EXTI_GPIO_PIN(linepos));

      regval = SYSCFG->EXTICR[linepos >> 2u];
 8005284:	4a2a      	ldr	r2, [pc, #168]	; (8005330 <HAL_EXTI_SetConfigLine+0x14c>)
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	089b      	lsrs	r3, r3, #2
 800528a:	3302      	adds	r3, #2
 800528c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005290:	60fb      	str	r3, [r7, #12]
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	f003 0303 	and.w	r3, r3, #3
 8005298:	009b      	lsls	r3, r3, #2
 800529a:	220f      	movs	r2, #15
 800529c:	fa02 f303 	lsl.w	r3, r2, r3
 80052a0:	43db      	mvns	r3, r3
 80052a2:	68fa      	ldr	r2, [r7, #12]
 80052a4:	4013      	ands	r3, r2
 80052a6:	60fb      	str	r3, [r7, #12]
      regval |= (pExtiConfig->GPIOSel << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	68da      	ldr	r2, [r3, #12]
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	f003 0303 	and.w	r3, r3, #3
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	fa02 f303 	lsl.w	r3, r2, r3
 80052b8:	68fa      	ldr	r2, [r7, #12]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	60fb      	str	r3, [r7, #12]
      SYSCFG->EXTICR[linepos >> 2u] = regval;
 80052be:	491c      	ldr	r1, [pc, #112]	; (8005330 <HAL_EXTI_SetConfigLine+0x14c>)
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	089b      	lsrs	r3, r3, #2
 80052c4:	3302      	adds	r3, #2
 80052c6:	68fa      	ldr	r2, [r7, #12]
 80052c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
  }

  /* Configure interrupt mode : read current mode */
  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_INTERRUPT) != 0x00u)
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	f003 0301 	and.w	r3, r3, #1
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d006      	beq.n	80052e6 <HAL_EXTI_SetConfigLine+0x102>
  {
    EXTI->IMR |= maskline;
 80052d8:	4b14      	ldr	r3, [pc, #80]	; (800532c <HAL_EXTI_SetConfigLine+0x148>)
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	4913      	ldr	r1, [pc, #76]	; (800532c <HAL_EXTI_SetConfigLine+0x148>)
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	4313      	orrs	r3, r2
 80052e2:	600b      	str	r3, [r1, #0]
 80052e4:	e006      	b.n	80052f4 <HAL_EXTI_SetConfigLine+0x110>
  }
  else
  {
    EXTI->IMR &= ~maskline;
 80052e6:	4b11      	ldr	r3, [pc, #68]	; (800532c <HAL_EXTI_SetConfigLine+0x148>)
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	43db      	mvns	r3, r3
 80052ee:	490f      	ldr	r1, [pc, #60]	; (800532c <HAL_EXTI_SetConfigLine+0x148>)
 80052f0:	4013      	ands	r3, r2
 80052f2:	600b      	str	r3, [r1, #0]
  }

  /* Configure event mode : read current mode */
  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_EVENT) != 0x00u)
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	f003 0302 	and.w	r3, r3, #2
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d006      	beq.n	800530e <HAL_EXTI_SetConfigLine+0x12a>
  {
    EXTI->EMR |= maskline;
 8005300:	4b0a      	ldr	r3, [pc, #40]	; (800532c <HAL_EXTI_SetConfigLine+0x148>)
 8005302:	685a      	ldr	r2, [r3, #4]
 8005304:	4909      	ldr	r1, [pc, #36]	; (800532c <HAL_EXTI_SetConfigLine+0x148>)
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	4313      	orrs	r3, r2
 800530a:	604b      	str	r3, [r1, #4]
 800530c:	e006      	b.n	800531c <HAL_EXTI_SetConfigLine+0x138>
  }
  else
  {
    EXTI->EMR &= ~maskline;
 800530e:	4b07      	ldr	r3, [pc, #28]	; (800532c <HAL_EXTI_SetConfigLine+0x148>)
 8005310:	685a      	ldr	r2, [r3, #4]
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	43db      	mvns	r3, r3
 8005316:	4905      	ldr	r1, [pc, #20]	; (800532c <HAL_EXTI_SetConfigLine+0x148>)
 8005318:	4013      	ands	r3, r2
 800531a:	604b      	str	r3, [r1, #4]
  }

  return HAL_OK;
 800531c:	2300      	movs	r3, #0
}
 800531e:	4618      	mov	r0, r3
 8005320:	371c      	adds	r7, #28
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr
 800532a:	bf00      	nop
 800532c:	40013c00 	.word	0x40013c00
 8005330:	40013800 	.word	0x40013800

08005334 <HAL_EXTI_ClearConfigLine>:
  * @brief  Clear whole configuration of a dedicated Exti line.
  * @param  hexti Exti handle.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_ClearConfigLine(EXTI_HandleTypeDef *hexti)
{
 8005334:	b480      	push	{r7}
 8005336:	b087      	sub	sp, #28
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t linepos;
  uint32_t maskline;

  /* Check null pointer */
  if (hexti == NULL)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d101      	bne.n	8005346 <HAL_EXTI_ClearConfigLine+0x12>
  {
    return HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	e04c      	b.n	80053e0 <HAL_EXTI_ClearConfigLine+0xac>

  /* Check the parameter */
  assert_param(IS_EXTI_LINE(hexti->Line));

  /* compute line mask */
  linepos = (hexti->Line & EXTI_PIN_MASK);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f003 031f 	and.w	r3, r3, #31
 800534e:	617b      	str	r3, [r7, #20]
  maskline = (1uL << linepos);
 8005350:	2201      	movs	r2, #1
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	fa02 f303 	lsl.w	r3, r2, r3
 8005358:	613b      	str	r3, [r7, #16]

  /* 1] Clear interrupt mode */
  EXTI->IMR = (EXTI->IMR & ~maskline);
 800535a:	4b24      	ldr	r3, [pc, #144]	; (80053ec <HAL_EXTI_ClearConfigLine+0xb8>)
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	43db      	mvns	r3, r3
 8005362:	4922      	ldr	r1, [pc, #136]	; (80053ec <HAL_EXTI_ClearConfigLine+0xb8>)
 8005364:	4013      	ands	r3, r2
 8005366:	600b      	str	r3, [r1, #0]

  /* 2] Clear event mode */
  EXTI->EMR = (EXTI->EMR & ~maskline);
 8005368:	4b20      	ldr	r3, [pc, #128]	; (80053ec <HAL_EXTI_ClearConfigLine+0xb8>)
 800536a:	685a      	ldr	r2, [r3, #4]
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	43db      	mvns	r3, r3
 8005370:	491e      	ldr	r1, [pc, #120]	; (80053ec <HAL_EXTI_ClearConfigLine+0xb8>)
 8005372:	4013      	ands	r3, r2
 8005374:	604b      	str	r3, [r1, #4]

  /* 3] Clear triggers in case of configurable lines */
  if ((hexti->Line & EXTI_CONFIG) != 0x00u)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800537e:	2b00      	cmp	r3, #0
 8005380:	d02d      	beq.n	80053de <HAL_EXTI_ClearConfigLine+0xaa>
  {
    EXTI->RTSR = (EXTI->RTSR & ~maskline);
 8005382:	4b1a      	ldr	r3, [pc, #104]	; (80053ec <HAL_EXTI_ClearConfigLine+0xb8>)
 8005384:	689a      	ldr	r2, [r3, #8]
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	43db      	mvns	r3, r3
 800538a:	4918      	ldr	r1, [pc, #96]	; (80053ec <HAL_EXTI_ClearConfigLine+0xb8>)
 800538c:	4013      	ands	r3, r2
 800538e:	608b      	str	r3, [r1, #8]
    EXTI->FTSR = (EXTI->FTSR & ~maskline);
 8005390:	4b16      	ldr	r3, [pc, #88]	; (80053ec <HAL_EXTI_ClearConfigLine+0xb8>)
 8005392:	68da      	ldr	r2, [r3, #12]
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	43db      	mvns	r3, r3
 8005398:	4914      	ldr	r1, [pc, #80]	; (80053ec <HAL_EXTI_ClearConfigLine+0xb8>)
 800539a:	4013      	ands	r3, r2
 800539c:	60cb      	str	r3, [r1, #12]

    /* Get Gpio port selection for gpio lines */
    if ((hexti->Line & EXTI_GPIO) == EXTI_GPIO)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 80053a6:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80053aa:	d118      	bne.n	80053de <HAL_EXTI_ClearConfigLine+0xaa>
    {
      assert_param(IS_EXTI_GPIO_PIN(linepos));

      regval = SYSCFG->EXTICR[linepos >> 2u];
 80053ac:	4a10      	ldr	r2, [pc, #64]	; (80053f0 <HAL_EXTI_ClearConfigLine+0xbc>)
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	089b      	lsrs	r3, r3, #2
 80053b2:	3302      	adds	r3, #2
 80053b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053b8:	60fb      	str	r3, [r7, #12]
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	f003 0303 	and.w	r3, r3, #3
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	220f      	movs	r2, #15
 80053c4:	fa02 f303 	lsl.w	r3, r2, r3
 80053c8:	43db      	mvns	r3, r3
 80053ca:	68fa      	ldr	r2, [r7, #12]
 80053cc:	4013      	ands	r3, r2
 80053ce:	60fb      	str	r3, [r7, #12]
      SYSCFG->EXTICR[linepos >> 2u] = regval;
 80053d0:	4907      	ldr	r1, [pc, #28]	; (80053f0 <HAL_EXTI_ClearConfigLine+0xbc>)
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	089b      	lsrs	r3, r3, #2
 80053d6:	3302      	adds	r3, #2
 80053d8:	68fa      	ldr	r2, [r7, #12]
 80053da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
  }

  return HAL_OK;
 80053de:	2300      	movs	r3, #0
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	371c      	adds	r7, #28
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr
 80053ec:	40013c00 	.word	0x40013c00
 80053f0:	40013800 	.word	0x40013800

080053f4 <HAL_EXTI_ClearPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval None.
  */
void HAL_EXTI_ClearPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b085      	sub	sp, #20
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f003 031f 	and.w	r3, r3, #31
 8005406:	2201      	movs	r2, #1
 8005408:	fa02 f303 	lsl.w	r3, r2, r3
 800540c:	60fb      	str	r3, [r7, #12]

  /* Clear Pending bit */
  EXTI->PR =  maskline;
 800540e:	4a04      	ldr	r2, [pc, #16]	; (8005420 <HAL_EXTI_ClearPending+0x2c>)
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	6153      	str	r3, [r2, #20]
}
 8005414:	bf00      	nop
 8005416:	3714      	adds	r7, #20
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr
 8005420:	40013c00 	.word	0x40013c00

08005424 <HAL_EXTI_GenerateSWI>:
  * @brief  Generate a software interrupt for a dedicated line.
  * @param  hexti Exti handle.
  * @retval None.
  */
void HAL_EXTI_GenerateSWI(EXTI_HandleTypeDef *hexti)
{
 8005424:	b480      	push	{r7}
 8005426:	b085      	sub	sp, #20
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  /* Check parameters */
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f003 031f 	and.w	r3, r3, #31
 8005434:	2201      	movs	r2, #1
 8005436:	fa02 f303 	lsl.w	r3, r2, r3
 800543a:	60fb      	str	r3, [r7, #12]

  /* Generate Software interrupt */
  EXTI->SWIER = maskline;
 800543c:	4a04      	ldr	r2, [pc, #16]	; (8005450 <HAL_EXTI_GenerateSWI+0x2c>)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	6113      	str	r3, [r2, #16]
}
 8005442:	bf00      	nop
 8005444:	3714      	adds	r7, #20
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr
 800544e:	bf00      	nop
 8005450:	40013c00 	.word	0x40013c00

08005454 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005454:	b480      	push	{r7}
 8005456:	b089      	sub	sp, #36	; 0x24
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800545e:	2300      	movs	r3, #0
 8005460:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005462:	2300      	movs	r3, #0
 8005464:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005466:	2300      	movs	r3, #0
 8005468:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800546a:	2300      	movs	r3, #0
 800546c:	61fb      	str	r3, [r7, #28]
 800546e:	e165      	b.n	800573c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005470:	2201      	movs	r2, #1
 8005472:	69fb      	ldr	r3, [r7, #28]
 8005474:	fa02 f303 	lsl.w	r3, r2, r3
 8005478:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	697a      	ldr	r2, [r7, #20]
 8005480:	4013      	ands	r3, r2
 8005482:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005484:	693a      	ldr	r2, [r7, #16]
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	429a      	cmp	r2, r3
 800548a:	f040 8154 	bne.w	8005736 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	f003 0303 	and.w	r3, r3, #3
 8005496:	2b01      	cmp	r3, #1
 8005498:	d005      	beq.n	80054a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80054a2:	2b02      	cmp	r3, #2
 80054a4:	d130      	bne.n	8005508 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80054ac:	69fb      	ldr	r3, [r7, #28]
 80054ae:	005b      	lsls	r3, r3, #1
 80054b0:	2203      	movs	r2, #3
 80054b2:	fa02 f303 	lsl.w	r3, r2, r3
 80054b6:	43db      	mvns	r3, r3
 80054b8:	69ba      	ldr	r2, [r7, #24]
 80054ba:	4013      	ands	r3, r2
 80054bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	68da      	ldr	r2, [r3, #12]
 80054c2:	69fb      	ldr	r3, [r7, #28]
 80054c4:	005b      	lsls	r3, r3, #1
 80054c6:	fa02 f303 	lsl.w	r3, r2, r3
 80054ca:	69ba      	ldr	r2, [r7, #24]
 80054cc:	4313      	orrs	r3, r2
 80054ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	69ba      	ldr	r2, [r7, #24]
 80054d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80054dc:	2201      	movs	r2, #1
 80054de:	69fb      	ldr	r3, [r7, #28]
 80054e0:	fa02 f303 	lsl.w	r3, r2, r3
 80054e4:	43db      	mvns	r3, r3
 80054e6:	69ba      	ldr	r2, [r7, #24]
 80054e8:	4013      	ands	r3, r2
 80054ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	091b      	lsrs	r3, r3, #4
 80054f2:	f003 0201 	and.w	r2, r3, #1
 80054f6:	69fb      	ldr	r3, [r7, #28]
 80054f8:	fa02 f303 	lsl.w	r3, r2, r3
 80054fc:	69ba      	ldr	r2, [r7, #24]
 80054fe:	4313      	orrs	r3, r2
 8005500:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	69ba      	ldr	r2, [r7, #24]
 8005506:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	f003 0303 	and.w	r3, r3, #3
 8005510:	2b03      	cmp	r3, #3
 8005512:	d017      	beq.n	8005544 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	68db      	ldr	r3, [r3, #12]
 8005518:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800551a:	69fb      	ldr	r3, [r7, #28]
 800551c:	005b      	lsls	r3, r3, #1
 800551e:	2203      	movs	r2, #3
 8005520:	fa02 f303 	lsl.w	r3, r2, r3
 8005524:	43db      	mvns	r3, r3
 8005526:	69ba      	ldr	r2, [r7, #24]
 8005528:	4013      	ands	r3, r2
 800552a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	689a      	ldr	r2, [r3, #8]
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	005b      	lsls	r3, r3, #1
 8005534:	fa02 f303 	lsl.w	r3, r2, r3
 8005538:	69ba      	ldr	r2, [r7, #24]
 800553a:	4313      	orrs	r3, r2
 800553c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	69ba      	ldr	r2, [r7, #24]
 8005542:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	f003 0303 	and.w	r3, r3, #3
 800554c:	2b02      	cmp	r3, #2
 800554e:	d123      	bne.n	8005598 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	08da      	lsrs	r2, r3, #3
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	3208      	adds	r2, #8
 8005558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800555c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800555e:	69fb      	ldr	r3, [r7, #28]
 8005560:	f003 0307 	and.w	r3, r3, #7
 8005564:	009b      	lsls	r3, r3, #2
 8005566:	220f      	movs	r2, #15
 8005568:	fa02 f303 	lsl.w	r3, r2, r3
 800556c:	43db      	mvns	r3, r3
 800556e:	69ba      	ldr	r2, [r7, #24]
 8005570:	4013      	ands	r3, r2
 8005572:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	691a      	ldr	r2, [r3, #16]
 8005578:	69fb      	ldr	r3, [r7, #28]
 800557a:	f003 0307 	and.w	r3, r3, #7
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	fa02 f303 	lsl.w	r3, r2, r3
 8005584:	69ba      	ldr	r2, [r7, #24]
 8005586:	4313      	orrs	r3, r2
 8005588:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	08da      	lsrs	r2, r3, #3
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	3208      	adds	r2, #8
 8005592:	69b9      	ldr	r1, [r7, #24]
 8005594:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800559e:	69fb      	ldr	r3, [r7, #28]
 80055a0:	005b      	lsls	r3, r3, #1
 80055a2:	2203      	movs	r2, #3
 80055a4:	fa02 f303 	lsl.w	r3, r2, r3
 80055a8:	43db      	mvns	r3, r3
 80055aa:	69ba      	ldr	r2, [r7, #24]
 80055ac:	4013      	ands	r3, r2
 80055ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	f003 0203 	and.w	r2, r3, #3
 80055b8:	69fb      	ldr	r3, [r7, #28]
 80055ba:	005b      	lsls	r3, r3, #1
 80055bc:	fa02 f303 	lsl.w	r3, r2, r3
 80055c0:	69ba      	ldr	r2, [r7, #24]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	69ba      	ldr	r2, [r7, #24]
 80055ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	f000 80ae 	beq.w	8005736 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80055da:	2300      	movs	r3, #0
 80055dc:	60fb      	str	r3, [r7, #12]
 80055de:	4b5d      	ldr	r3, [pc, #372]	; (8005754 <HAL_GPIO_Init+0x300>)
 80055e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055e2:	4a5c      	ldr	r2, [pc, #368]	; (8005754 <HAL_GPIO_Init+0x300>)
 80055e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80055e8:	6453      	str	r3, [r2, #68]	; 0x44
 80055ea:	4b5a      	ldr	r3, [pc, #360]	; (8005754 <HAL_GPIO_Init+0x300>)
 80055ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055f2:	60fb      	str	r3, [r7, #12]
 80055f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80055f6:	4a58      	ldr	r2, [pc, #352]	; (8005758 <HAL_GPIO_Init+0x304>)
 80055f8:	69fb      	ldr	r3, [r7, #28]
 80055fa:	089b      	lsrs	r3, r3, #2
 80055fc:	3302      	adds	r3, #2
 80055fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005602:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005604:	69fb      	ldr	r3, [r7, #28]
 8005606:	f003 0303 	and.w	r3, r3, #3
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	220f      	movs	r2, #15
 800560e:	fa02 f303 	lsl.w	r3, r2, r3
 8005612:	43db      	mvns	r3, r3
 8005614:	69ba      	ldr	r2, [r7, #24]
 8005616:	4013      	ands	r3, r2
 8005618:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4a4f      	ldr	r2, [pc, #316]	; (800575c <HAL_GPIO_Init+0x308>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d025      	beq.n	800566e <HAL_GPIO_Init+0x21a>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4a4e      	ldr	r2, [pc, #312]	; (8005760 <HAL_GPIO_Init+0x30c>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d01f      	beq.n	800566a <HAL_GPIO_Init+0x216>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	4a4d      	ldr	r2, [pc, #308]	; (8005764 <HAL_GPIO_Init+0x310>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d019      	beq.n	8005666 <HAL_GPIO_Init+0x212>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	4a4c      	ldr	r2, [pc, #304]	; (8005768 <HAL_GPIO_Init+0x314>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d013      	beq.n	8005662 <HAL_GPIO_Init+0x20e>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4a4b      	ldr	r2, [pc, #300]	; (800576c <HAL_GPIO_Init+0x318>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d00d      	beq.n	800565e <HAL_GPIO_Init+0x20a>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4a4a      	ldr	r2, [pc, #296]	; (8005770 <HAL_GPIO_Init+0x31c>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d007      	beq.n	800565a <HAL_GPIO_Init+0x206>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4a49      	ldr	r2, [pc, #292]	; (8005774 <HAL_GPIO_Init+0x320>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d101      	bne.n	8005656 <HAL_GPIO_Init+0x202>
 8005652:	2306      	movs	r3, #6
 8005654:	e00c      	b.n	8005670 <HAL_GPIO_Init+0x21c>
 8005656:	2307      	movs	r3, #7
 8005658:	e00a      	b.n	8005670 <HAL_GPIO_Init+0x21c>
 800565a:	2305      	movs	r3, #5
 800565c:	e008      	b.n	8005670 <HAL_GPIO_Init+0x21c>
 800565e:	2304      	movs	r3, #4
 8005660:	e006      	b.n	8005670 <HAL_GPIO_Init+0x21c>
 8005662:	2303      	movs	r3, #3
 8005664:	e004      	b.n	8005670 <HAL_GPIO_Init+0x21c>
 8005666:	2302      	movs	r3, #2
 8005668:	e002      	b.n	8005670 <HAL_GPIO_Init+0x21c>
 800566a:	2301      	movs	r3, #1
 800566c:	e000      	b.n	8005670 <HAL_GPIO_Init+0x21c>
 800566e:	2300      	movs	r3, #0
 8005670:	69fa      	ldr	r2, [r7, #28]
 8005672:	f002 0203 	and.w	r2, r2, #3
 8005676:	0092      	lsls	r2, r2, #2
 8005678:	4093      	lsls	r3, r2
 800567a:	69ba      	ldr	r2, [r7, #24]
 800567c:	4313      	orrs	r3, r2
 800567e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005680:	4935      	ldr	r1, [pc, #212]	; (8005758 <HAL_GPIO_Init+0x304>)
 8005682:	69fb      	ldr	r3, [r7, #28]
 8005684:	089b      	lsrs	r3, r3, #2
 8005686:	3302      	adds	r3, #2
 8005688:	69ba      	ldr	r2, [r7, #24]
 800568a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800568e:	4b3a      	ldr	r3, [pc, #232]	; (8005778 <HAL_GPIO_Init+0x324>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	43db      	mvns	r3, r3
 8005698:	69ba      	ldr	r2, [r7, #24]
 800569a:	4013      	ands	r3, r2
 800569c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d003      	beq.n	80056b2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80056aa:	69ba      	ldr	r2, [r7, #24]
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80056b2:	4a31      	ldr	r2, [pc, #196]	; (8005778 <HAL_GPIO_Init+0x324>)
 80056b4:	69bb      	ldr	r3, [r7, #24]
 80056b6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80056b8:	4b2f      	ldr	r3, [pc, #188]	; (8005778 <HAL_GPIO_Init+0x324>)
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	43db      	mvns	r3, r3
 80056c2:	69ba      	ldr	r2, [r7, #24]
 80056c4:	4013      	ands	r3, r2
 80056c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d003      	beq.n	80056dc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80056d4:	69ba      	ldr	r2, [r7, #24]
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	4313      	orrs	r3, r2
 80056da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80056dc:	4a26      	ldr	r2, [pc, #152]	; (8005778 <HAL_GPIO_Init+0x324>)
 80056de:	69bb      	ldr	r3, [r7, #24]
 80056e0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80056e2:	4b25      	ldr	r3, [pc, #148]	; (8005778 <HAL_GPIO_Init+0x324>)
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	43db      	mvns	r3, r3
 80056ec:	69ba      	ldr	r2, [r7, #24]
 80056ee:	4013      	ands	r3, r2
 80056f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d003      	beq.n	8005706 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80056fe:	69ba      	ldr	r2, [r7, #24]
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	4313      	orrs	r3, r2
 8005704:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005706:	4a1c      	ldr	r2, [pc, #112]	; (8005778 <HAL_GPIO_Init+0x324>)
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800570c:	4b1a      	ldr	r3, [pc, #104]	; (8005778 <HAL_GPIO_Init+0x324>)
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	43db      	mvns	r3, r3
 8005716:	69ba      	ldr	r2, [r7, #24]
 8005718:	4013      	ands	r3, r2
 800571a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005724:	2b00      	cmp	r3, #0
 8005726:	d003      	beq.n	8005730 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005728:	69ba      	ldr	r2, [r7, #24]
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	4313      	orrs	r3, r2
 800572e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005730:	4a11      	ldr	r2, [pc, #68]	; (8005778 <HAL_GPIO_Init+0x324>)
 8005732:	69bb      	ldr	r3, [r7, #24]
 8005734:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005736:	69fb      	ldr	r3, [r7, #28]
 8005738:	3301      	adds	r3, #1
 800573a:	61fb      	str	r3, [r7, #28]
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	2b0f      	cmp	r3, #15
 8005740:	f67f ae96 	bls.w	8005470 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005744:	bf00      	nop
 8005746:	bf00      	nop
 8005748:	3724      	adds	r7, #36	; 0x24
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr
 8005752:	bf00      	nop
 8005754:	40023800 	.word	0x40023800
 8005758:	40013800 	.word	0x40013800
 800575c:	40020000 	.word	0x40020000
 8005760:	40020400 	.word	0x40020400
 8005764:	40020800 	.word	0x40020800
 8005768:	40020c00 	.word	0x40020c00
 800576c:	40021000 	.word	0x40021000
 8005770:	40021400 	.word	0x40021400
 8005774:	40021800 	.word	0x40021800
 8005778:	40013c00 	.word	0x40013c00

0800577c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800577c:	b480      	push	{r7}
 800577e:	b083      	sub	sp, #12
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	460b      	mov	r3, r1
 8005786:	807b      	strh	r3, [r7, #2]
 8005788:	4613      	mov	r3, r2
 800578a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800578c:	787b      	ldrb	r3, [r7, #1]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d003      	beq.n	800579a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005792:	887a      	ldrh	r2, [r7, #2]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005798:	e003      	b.n	80057a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800579a:	887b      	ldrh	r3, [r7, #2]
 800579c:	041a      	lsls	r2, r3, #16
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	619a      	str	r2, [r3, #24]
}
 80057a2:	bf00      	nop
 80057a4:	370c      	adds	r7, #12
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr
	...

080057b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b082      	sub	sp, #8
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	4603      	mov	r3, r0
 80057b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80057ba:	4b08      	ldr	r3, [pc, #32]	; (80057dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80057bc:	695a      	ldr	r2, [r3, #20]
 80057be:	88fb      	ldrh	r3, [r7, #6]
 80057c0:	4013      	ands	r3, r2
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d006      	beq.n	80057d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80057c6:	4a05      	ldr	r2, [pc, #20]	; (80057dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80057c8:	88fb      	ldrh	r3, [r7, #6]
 80057ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80057cc:	88fb      	ldrh	r3, [r7, #6]
 80057ce:	4618      	mov	r0, r3
 80057d0:	f7fd f8c4 	bl	800295c <HAL_GPIO_EXTI_Callback>
  }
}
 80057d4:	bf00      	nop
 80057d6:	3708      	adds	r7, #8
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}
 80057dc:	40013c00 	.word	0x40013c00

080057e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b084      	sub	sp, #16
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d101      	bne.n	80057f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	e12b      	b.n	8005a4a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d106      	bne.n	800580c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f7fc fc86 	bl	8002118 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2224      	movs	r2, #36	; 0x24
 8005810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f022 0201 	bic.w	r2, r2, #1
 8005822:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005832:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005842:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005844:	f002 fd0e 	bl	8008264 <HAL_RCC_GetPCLK1Freq>
 8005848:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	4a81      	ldr	r2, [pc, #516]	; (8005a54 <HAL_I2C_Init+0x274>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d807      	bhi.n	8005864 <HAL_I2C_Init+0x84>
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	4a80      	ldr	r2, [pc, #512]	; (8005a58 <HAL_I2C_Init+0x278>)
 8005858:	4293      	cmp	r3, r2
 800585a:	bf94      	ite	ls
 800585c:	2301      	movls	r3, #1
 800585e:	2300      	movhi	r3, #0
 8005860:	b2db      	uxtb	r3, r3
 8005862:	e006      	b.n	8005872 <HAL_I2C_Init+0x92>
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	4a7d      	ldr	r2, [pc, #500]	; (8005a5c <HAL_I2C_Init+0x27c>)
 8005868:	4293      	cmp	r3, r2
 800586a:	bf94      	ite	ls
 800586c:	2301      	movls	r3, #1
 800586e:	2300      	movhi	r3, #0
 8005870:	b2db      	uxtb	r3, r3
 8005872:	2b00      	cmp	r3, #0
 8005874:	d001      	beq.n	800587a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	e0e7      	b.n	8005a4a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	4a78      	ldr	r2, [pc, #480]	; (8005a60 <HAL_I2C_Init+0x280>)
 800587e:	fba2 2303 	umull	r2, r3, r2, r3
 8005882:	0c9b      	lsrs	r3, r3, #18
 8005884:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	68ba      	ldr	r2, [r7, #8]
 8005896:	430a      	orrs	r2, r1
 8005898:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	6a1b      	ldr	r3, [r3, #32]
 80058a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	4a6a      	ldr	r2, [pc, #424]	; (8005a54 <HAL_I2C_Init+0x274>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d802      	bhi.n	80058b4 <HAL_I2C_Init+0xd4>
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	3301      	adds	r3, #1
 80058b2:	e009      	b.n	80058c8 <HAL_I2C_Init+0xe8>
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80058ba:	fb02 f303 	mul.w	r3, r2, r3
 80058be:	4a69      	ldr	r2, [pc, #420]	; (8005a64 <HAL_I2C_Init+0x284>)
 80058c0:	fba2 2303 	umull	r2, r3, r2, r3
 80058c4:	099b      	lsrs	r3, r3, #6
 80058c6:	3301      	adds	r3, #1
 80058c8:	687a      	ldr	r2, [r7, #4]
 80058ca:	6812      	ldr	r2, [r2, #0]
 80058cc:	430b      	orrs	r3, r1
 80058ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	69db      	ldr	r3, [r3, #28]
 80058d6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80058da:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	495c      	ldr	r1, [pc, #368]	; (8005a54 <HAL_I2C_Init+0x274>)
 80058e4:	428b      	cmp	r3, r1
 80058e6:	d819      	bhi.n	800591c <HAL_I2C_Init+0x13c>
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	1e59      	subs	r1, r3, #1
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	005b      	lsls	r3, r3, #1
 80058f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80058f6:	1c59      	adds	r1, r3, #1
 80058f8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80058fc:	400b      	ands	r3, r1
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d00a      	beq.n	8005918 <HAL_I2C_Init+0x138>
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	1e59      	subs	r1, r3, #1
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	005b      	lsls	r3, r3, #1
 800590c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005910:	3301      	adds	r3, #1
 8005912:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005916:	e051      	b.n	80059bc <HAL_I2C_Init+0x1dc>
 8005918:	2304      	movs	r3, #4
 800591a:	e04f      	b.n	80059bc <HAL_I2C_Init+0x1dc>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d111      	bne.n	8005948 <HAL_I2C_Init+0x168>
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	1e58      	subs	r0, r3, #1
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6859      	ldr	r1, [r3, #4]
 800592c:	460b      	mov	r3, r1
 800592e:	005b      	lsls	r3, r3, #1
 8005930:	440b      	add	r3, r1
 8005932:	fbb0 f3f3 	udiv	r3, r0, r3
 8005936:	3301      	adds	r3, #1
 8005938:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800593c:	2b00      	cmp	r3, #0
 800593e:	bf0c      	ite	eq
 8005940:	2301      	moveq	r3, #1
 8005942:	2300      	movne	r3, #0
 8005944:	b2db      	uxtb	r3, r3
 8005946:	e012      	b.n	800596e <HAL_I2C_Init+0x18e>
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	1e58      	subs	r0, r3, #1
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6859      	ldr	r1, [r3, #4]
 8005950:	460b      	mov	r3, r1
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	440b      	add	r3, r1
 8005956:	0099      	lsls	r1, r3, #2
 8005958:	440b      	add	r3, r1
 800595a:	fbb0 f3f3 	udiv	r3, r0, r3
 800595e:	3301      	adds	r3, #1
 8005960:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005964:	2b00      	cmp	r3, #0
 8005966:	bf0c      	ite	eq
 8005968:	2301      	moveq	r3, #1
 800596a:	2300      	movne	r3, #0
 800596c:	b2db      	uxtb	r3, r3
 800596e:	2b00      	cmp	r3, #0
 8005970:	d001      	beq.n	8005976 <HAL_I2C_Init+0x196>
 8005972:	2301      	movs	r3, #1
 8005974:	e022      	b.n	80059bc <HAL_I2C_Init+0x1dc>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d10e      	bne.n	800599c <HAL_I2C_Init+0x1bc>
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	1e58      	subs	r0, r3, #1
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6859      	ldr	r1, [r3, #4]
 8005986:	460b      	mov	r3, r1
 8005988:	005b      	lsls	r3, r3, #1
 800598a:	440b      	add	r3, r1
 800598c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005990:	3301      	adds	r3, #1
 8005992:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005996:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800599a:	e00f      	b.n	80059bc <HAL_I2C_Init+0x1dc>
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	1e58      	subs	r0, r3, #1
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6859      	ldr	r1, [r3, #4]
 80059a4:	460b      	mov	r3, r1
 80059a6:	009b      	lsls	r3, r3, #2
 80059a8:	440b      	add	r3, r1
 80059aa:	0099      	lsls	r1, r3, #2
 80059ac:	440b      	add	r3, r1
 80059ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80059b2:	3301      	adds	r3, #1
 80059b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80059bc:	6879      	ldr	r1, [r7, #4]
 80059be:	6809      	ldr	r1, [r1, #0]
 80059c0:	4313      	orrs	r3, r2
 80059c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	69da      	ldr	r2, [r3, #28]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6a1b      	ldr	r3, [r3, #32]
 80059d6:	431a      	orrs	r2, r3
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	430a      	orrs	r2, r1
 80059de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80059ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80059ee:	687a      	ldr	r2, [r7, #4]
 80059f0:	6911      	ldr	r1, [r2, #16]
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	68d2      	ldr	r2, [r2, #12]
 80059f6:	4311      	orrs	r1, r2
 80059f8:	687a      	ldr	r2, [r7, #4]
 80059fa:	6812      	ldr	r2, [r2, #0]
 80059fc:	430b      	orrs	r3, r1
 80059fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	68db      	ldr	r3, [r3, #12]
 8005a06:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	695a      	ldr	r2, [r3, #20]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	699b      	ldr	r3, [r3, #24]
 8005a12:	431a      	orrs	r2, r3
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	430a      	orrs	r2, r1
 8005a1a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f042 0201 	orr.w	r2, r2, #1
 8005a2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2220      	movs	r2, #32
 8005a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2200      	movs	r2, #0
 8005a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005a48:	2300      	movs	r3, #0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3710      	adds	r7, #16
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}
 8005a52:	bf00      	nop
 8005a54:	000186a0 	.word	0x000186a0
 8005a58:	001e847f 	.word	0x001e847f
 8005a5c:	003d08ff 	.word	0x003d08ff
 8005a60:	431bde83 	.word	0x431bde83
 8005a64:	10624dd3 	.word	0x10624dd3

08005a68 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b088      	sub	sp, #32
 8005a6c:	af02      	add	r7, sp, #8
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	607a      	str	r2, [r7, #4]
 8005a72:	461a      	mov	r2, r3
 8005a74:	460b      	mov	r3, r1
 8005a76:	817b      	strh	r3, [r7, #10]
 8005a78:	4613      	mov	r3, r2
 8005a7a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005a7c:	f7fe fbea 	bl	8004254 <HAL_GetTick>
 8005a80:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	2b20      	cmp	r3, #32
 8005a8c:	f040 80e0 	bne.w	8005c50 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	9300      	str	r3, [sp, #0]
 8005a94:	2319      	movs	r3, #25
 8005a96:	2201      	movs	r2, #1
 8005a98:	4970      	ldr	r1, [pc, #448]	; (8005c5c <HAL_I2C_Master_Transmit+0x1f4>)
 8005a9a:	68f8      	ldr	r0, [r7, #12]
 8005a9c:	f001 ffa8 	bl	80079f0 <I2C_WaitOnFlagUntilTimeout>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d001      	beq.n	8005aaa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005aa6:	2302      	movs	r3, #2
 8005aa8:	e0d3      	b.n	8005c52 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d101      	bne.n	8005ab8 <HAL_I2C_Master_Transmit+0x50>
 8005ab4:	2302      	movs	r3, #2
 8005ab6:	e0cc      	b.n	8005c52 <HAL_I2C_Master_Transmit+0x1ea>
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f003 0301 	and.w	r3, r3, #1
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d007      	beq.n	8005ade <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f042 0201 	orr.w	r2, r2, #1
 8005adc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005aec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2221      	movs	r2, #33	; 0x21
 8005af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2210      	movs	r2, #16
 8005afa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2200      	movs	r2, #0
 8005b02:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	687a      	ldr	r2, [r7, #4]
 8005b08:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	893a      	ldrh	r2, [r7, #8]
 8005b0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b14:	b29a      	uxth	r2, r3
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	4a50      	ldr	r2, [pc, #320]	; (8005c60 <HAL_I2C_Master_Transmit+0x1f8>)
 8005b1e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005b20:	8979      	ldrh	r1, [r7, #10]
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	6a3a      	ldr	r2, [r7, #32]
 8005b26:	68f8      	ldr	r0, [r7, #12]
 8005b28:	f001 fd6a 	bl	8007600 <I2C_MasterRequestWrite>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d001      	beq.n	8005b36 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	e08d      	b.n	8005c52 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b36:	2300      	movs	r3, #0
 8005b38:	613b      	str	r3, [r7, #16]
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	695b      	ldr	r3, [r3, #20]
 8005b40:	613b      	str	r3, [r7, #16]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	699b      	ldr	r3, [r3, #24]
 8005b48:	613b      	str	r3, [r7, #16]
 8005b4a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005b4c:	e066      	b.n	8005c1c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b4e:	697a      	ldr	r2, [r7, #20]
 8005b50:	6a39      	ldr	r1, [r7, #32]
 8005b52:	68f8      	ldr	r0, [r7, #12]
 8005b54:	f002 f822 	bl	8007b9c <I2C_WaitOnTXEFlagUntilTimeout>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d00d      	beq.n	8005b7a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b62:	2b04      	cmp	r3, #4
 8005b64:	d107      	bne.n	8005b76 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b74:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	e06b      	b.n	8005c52 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7e:	781a      	ldrb	r2, [r3, #0]
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b8a:	1c5a      	adds	r2, r3, #1
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	3b01      	subs	r3, #1
 8005b98:	b29a      	uxth	r2, r3
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ba2:	3b01      	subs	r3, #1
 8005ba4:	b29a      	uxth	r2, r3
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	695b      	ldr	r3, [r3, #20]
 8005bb0:	f003 0304 	and.w	r3, r3, #4
 8005bb4:	2b04      	cmp	r3, #4
 8005bb6:	d11b      	bne.n	8005bf0 <HAL_I2C_Master_Transmit+0x188>
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d017      	beq.n	8005bf0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc4:	781a      	ldrb	r2, [r3, #0]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd0:	1c5a      	adds	r2, r3, #1
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	3b01      	subs	r3, #1
 8005bde:	b29a      	uxth	r2, r3
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005be8:	3b01      	subs	r3, #1
 8005bea:	b29a      	uxth	r2, r3
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005bf0:	697a      	ldr	r2, [r7, #20]
 8005bf2:	6a39      	ldr	r1, [r7, #32]
 8005bf4:	68f8      	ldr	r0, [r7, #12]
 8005bf6:	f002 f812 	bl	8007c1e <I2C_WaitOnBTFFlagUntilTimeout>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d00d      	beq.n	8005c1c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c04:	2b04      	cmp	r3, #4
 8005c06:	d107      	bne.n	8005c18 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c16:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	e01a      	b.n	8005c52 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d194      	bne.n	8005b4e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2220      	movs	r2, #32
 8005c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2200      	movs	r2, #0
 8005c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	e000      	b.n	8005c52 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005c50:	2302      	movs	r3, #2
  }
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3718      	adds	r7, #24
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}
 8005c5a:	bf00      	nop
 8005c5c:	00100002 	.word	0x00100002
 8005c60:	ffff0000 	.word	0xffff0000

08005c64 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b08c      	sub	sp, #48	; 0x30
 8005c68:	af02      	add	r7, sp, #8
 8005c6a:	60f8      	str	r0, [r7, #12]
 8005c6c:	607a      	str	r2, [r7, #4]
 8005c6e:	461a      	mov	r2, r3
 8005c70:	460b      	mov	r3, r1
 8005c72:	817b      	strh	r3, [r7, #10]
 8005c74:	4613      	mov	r3, r2
 8005c76:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005c78:	f7fe faec 	bl	8004254 <HAL_GetTick>
 8005c7c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c84:	b2db      	uxtb	r3, r3
 8005c86:	2b20      	cmp	r3, #32
 8005c88:	f040 820b 	bne.w	80060a2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8e:	9300      	str	r3, [sp, #0]
 8005c90:	2319      	movs	r3, #25
 8005c92:	2201      	movs	r2, #1
 8005c94:	497c      	ldr	r1, [pc, #496]	; (8005e88 <HAL_I2C_Master_Receive+0x224>)
 8005c96:	68f8      	ldr	r0, [r7, #12]
 8005c98:	f001 feaa 	bl	80079f0 <I2C_WaitOnFlagUntilTimeout>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d001      	beq.n	8005ca6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005ca2:	2302      	movs	r3, #2
 8005ca4:	e1fe      	b.n	80060a4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d101      	bne.n	8005cb4 <HAL_I2C_Master_Receive+0x50>
 8005cb0:	2302      	movs	r3, #2
 8005cb2:	e1f7      	b.n	80060a4 <HAL_I2C_Master_Receive+0x440>
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f003 0301 	and.w	r3, r3, #1
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	d007      	beq.n	8005cda <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	681a      	ldr	r2, [r3, #0]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f042 0201 	orr.w	r2, r2, #1
 8005cd8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ce8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2222      	movs	r2, #34	; 0x22
 8005cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2210      	movs	r2, #16
 8005cf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	687a      	ldr	r2, [r7, #4]
 8005d04:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	893a      	ldrh	r2, [r7, #8]
 8005d0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d10:	b29a      	uxth	r2, r3
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	4a5c      	ldr	r2, [pc, #368]	; (8005e8c <HAL_I2C_Master_Receive+0x228>)
 8005d1a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005d1c:	8979      	ldrh	r1, [r7, #10]
 8005d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d22:	68f8      	ldr	r0, [r7, #12]
 8005d24:	f001 fcee 	bl	8007704 <I2C_MasterRequestRead>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d001      	beq.n	8005d32 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e1b8      	b.n	80060a4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d113      	bne.n	8005d62 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	623b      	str	r3, [r7, #32]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	695b      	ldr	r3, [r3, #20]
 8005d44:	623b      	str	r3, [r7, #32]
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	699b      	ldr	r3, [r3, #24]
 8005d4c:	623b      	str	r3, [r7, #32]
 8005d4e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d5e:	601a      	str	r2, [r3, #0]
 8005d60:	e18c      	b.n	800607c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d66:	2b01      	cmp	r3, #1
 8005d68:	d11b      	bne.n	8005da2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d78:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	61fb      	str	r3, [r7, #28]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	695b      	ldr	r3, [r3, #20]
 8005d84:	61fb      	str	r3, [r7, #28]
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	699b      	ldr	r3, [r3, #24]
 8005d8c:	61fb      	str	r3, [r7, #28]
 8005d8e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d9e:	601a      	str	r2, [r3, #0]
 8005da0:	e16c      	b.n	800607c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005da6:	2b02      	cmp	r3, #2
 8005da8:	d11b      	bne.n	8005de2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005db8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005dc8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005dca:	2300      	movs	r3, #0
 8005dcc:	61bb      	str	r3, [r7, #24]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	695b      	ldr	r3, [r3, #20]
 8005dd4:	61bb      	str	r3, [r7, #24]
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	699b      	ldr	r3, [r3, #24]
 8005ddc:	61bb      	str	r3, [r7, #24]
 8005dde:	69bb      	ldr	r3, [r7, #24]
 8005de0:	e14c      	b.n	800607c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005df0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005df2:	2300      	movs	r3, #0
 8005df4:	617b      	str	r3, [r7, #20]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	695b      	ldr	r3, [r3, #20]
 8005dfc:	617b      	str	r3, [r7, #20]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	699b      	ldr	r3, [r3, #24]
 8005e04:	617b      	str	r3, [r7, #20]
 8005e06:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005e08:	e138      	b.n	800607c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e0e:	2b03      	cmp	r3, #3
 8005e10:	f200 80f1 	bhi.w	8005ff6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d123      	bne.n	8005e64 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e1e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e20:	68f8      	ldr	r0, [r7, #12]
 8005e22:	f001 ff6f 	bl	8007d04 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005e26:	4603      	mov	r3, r0
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d001      	beq.n	8005e30 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	e139      	b.n	80060a4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	691a      	ldr	r2, [r3, #16]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e3a:	b2d2      	uxtb	r2, r2
 8005e3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e42:	1c5a      	adds	r2, r3, #1
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e4c:	3b01      	subs	r3, #1
 8005e4e:	b29a      	uxth	r2, r3
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	3b01      	subs	r3, #1
 8005e5c:	b29a      	uxth	r2, r3
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005e62:	e10b      	b.n	800607c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e68:	2b02      	cmp	r3, #2
 8005e6a:	d14e      	bne.n	8005f0a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6e:	9300      	str	r3, [sp, #0]
 8005e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e72:	2200      	movs	r2, #0
 8005e74:	4906      	ldr	r1, [pc, #24]	; (8005e90 <HAL_I2C_Master_Receive+0x22c>)
 8005e76:	68f8      	ldr	r0, [r7, #12]
 8005e78:	f001 fdba 	bl	80079f0 <I2C_WaitOnFlagUntilTimeout>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d008      	beq.n	8005e94 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	e10e      	b.n	80060a4 <HAL_I2C_Master_Receive+0x440>
 8005e86:	bf00      	nop
 8005e88:	00100002 	.word	0x00100002
 8005e8c:	ffff0000 	.word	0xffff0000
 8005e90:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ea2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	691a      	ldr	r2, [r3, #16]
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eae:	b2d2      	uxtb	r2, r2
 8005eb0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb6:	1c5a      	adds	r2, r3, #1
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ec0:	3b01      	subs	r3, #1
 8005ec2:	b29a      	uxth	r2, r3
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	3b01      	subs	r3, #1
 8005ed0:	b29a      	uxth	r2, r3
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	691a      	ldr	r2, [r3, #16]
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee0:	b2d2      	uxtb	r2, r2
 8005ee2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee8:	1c5a      	adds	r2, r3, #1
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ef2:	3b01      	subs	r3, #1
 8005ef4:	b29a      	uxth	r2, r3
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	3b01      	subs	r3, #1
 8005f02:	b29a      	uxth	r2, r3
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005f08:	e0b8      	b.n	800607c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0c:	9300      	str	r3, [sp, #0]
 8005f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f10:	2200      	movs	r2, #0
 8005f12:	4966      	ldr	r1, [pc, #408]	; (80060ac <HAL_I2C_Master_Receive+0x448>)
 8005f14:	68f8      	ldr	r0, [r7, #12]
 8005f16:	f001 fd6b 	bl	80079f0 <I2C_WaitOnFlagUntilTimeout>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d001      	beq.n	8005f24 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005f20:	2301      	movs	r3, #1
 8005f22:	e0bf      	b.n	80060a4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	691a      	ldr	r2, [r3, #16]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f3e:	b2d2      	uxtb	r2, r2
 8005f40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f46:	1c5a      	adds	r2, r3, #1
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f50:	3b01      	subs	r3, #1
 8005f52:	b29a      	uxth	r2, r3
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	3b01      	subs	r3, #1
 8005f60:	b29a      	uxth	r2, r3
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f68:	9300      	str	r3, [sp, #0]
 8005f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	494f      	ldr	r1, [pc, #316]	; (80060ac <HAL_I2C_Master_Receive+0x448>)
 8005f70:	68f8      	ldr	r0, [r7, #12]
 8005f72:	f001 fd3d 	bl	80079f0 <I2C_WaitOnFlagUntilTimeout>
 8005f76:	4603      	mov	r3, r0
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d001      	beq.n	8005f80 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e091      	b.n	80060a4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f8e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	691a      	ldr	r2, [r3, #16]
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f9a:	b2d2      	uxtb	r2, r2
 8005f9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa2:	1c5a      	adds	r2, r3, #1
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fac:	3b01      	subs	r3, #1
 8005fae:	b29a      	uxth	r2, r3
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	3b01      	subs	r3, #1
 8005fbc:	b29a      	uxth	r2, r3
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	691a      	ldr	r2, [r3, #16]
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fcc:	b2d2      	uxtb	r2, r2
 8005fce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd4:	1c5a      	adds	r2, r3, #1
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fde:	3b01      	subs	r3, #1
 8005fe0:	b29a      	uxth	r2, r3
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	3b01      	subs	r3, #1
 8005fee:	b29a      	uxth	r2, r3
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005ff4:	e042      	b.n	800607c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ff6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ff8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005ffa:	68f8      	ldr	r0, [r7, #12]
 8005ffc:	f001 fe82 	bl	8007d04 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006000:	4603      	mov	r3, r0
 8006002:	2b00      	cmp	r3, #0
 8006004:	d001      	beq.n	800600a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	e04c      	b.n	80060a4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	691a      	ldr	r2, [r3, #16]
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006014:	b2d2      	uxtb	r2, r2
 8006016:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800601c:	1c5a      	adds	r2, r3, #1
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006026:	3b01      	subs	r3, #1
 8006028:	b29a      	uxth	r2, r3
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006032:	b29b      	uxth	r3, r3
 8006034:	3b01      	subs	r3, #1
 8006036:	b29a      	uxth	r2, r3
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	695b      	ldr	r3, [r3, #20]
 8006042:	f003 0304 	and.w	r3, r3, #4
 8006046:	2b04      	cmp	r3, #4
 8006048:	d118      	bne.n	800607c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	691a      	ldr	r2, [r3, #16]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006054:	b2d2      	uxtb	r2, r2
 8006056:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800605c:	1c5a      	adds	r2, r3, #1
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006066:	3b01      	subs	r3, #1
 8006068:	b29a      	uxth	r2, r3
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006072:	b29b      	uxth	r3, r3
 8006074:	3b01      	subs	r3, #1
 8006076:	b29a      	uxth	r2, r3
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006080:	2b00      	cmp	r3, #0
 8006082:	f47f aec2 	bne.w	8005e0a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2220      	movs	r2, #32
 800608a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2200      	movs	r2, #0
 8006092:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2200      	movs	r2, #0
 800609a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800609e:	2300      	movs	r3, #0
 80060a0:	e000      	b.n	80060a4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80060a2:	2302      	movs	r3, #2
  }
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3728      	adds	r7, #40	; 0x28
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}
 80060ac:	00010004 	.word	0x00010004

080060b0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b088      	sub	sp, #32
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80060b8:	2300      	movs	r3, #0
 80060ba:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80060d0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060d8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80060da:	7bfb      	ldrb	r3, [r7, #15]
 80060dc:	2b10      	cmp	r3, #16
 80060de:	d003      	beq.n	80060e8 <HAL_I2C_EV_IRQHandler+0x38>
 80060e0:	7bfb      	ldrb	r3, [r7, #15]
 80060e2:	2b40      	cmp	r3, #64	; 0x40
 80060e4:	f040 80bd 	bne.w	8006262 <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	699b      	ldr	r3, [r3, #24]
 80060ee:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	695b      	ldr	r3, [r3, #20]
 80060f6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80060f8:	69fb      	ldr	r3, [r7, #28]
 80060fa:	f003 0301 	and.w	r3, r3, #1
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d10d      	bne.n	800611e <HAL_I2C_EV_IRQHandler+0x6e>
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006108:	d003      	beq.n	8006112 <HAL_I2C_EV_IRQHandler+0x62>
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006110:	d101      	bne.n	8006116 <HAL_I2C_EV_IRQHandler+0x66>
 8006112:	2301      	movs	r3, #1
 8006114:	e000      	b.n	8006118 <HAL_I2C_EV_IRQHandler+0x68>
 8006116:	2300      	movs	r3, #0
 8006118:	2b01      	cmp	r3, #1
 800611a:	f000 812e 	beq.w	800637a <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800611e:	69fb      	ldr	r3, [r7, #28]
 8006120:	f003 0301 	and.w	r3, r3, #1
 8006124:	2b00      	cmp	r3, #0
 8006126:	d00c      	beq.n	8006142 <HAL_I2C_EV_IRQHandler+0x92>
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	0a5b      	lsrs	r3, r3, #9
 800612c:	f003 0301 	and.w	r3, r3, #1
 8006130:	2b00      	cmp	r3, #0
 8006132:	d006      	beq.n	8006142 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f001 fe6a 	bl	8007e0e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f000 fcbb 	bl	8006ab6 <I2C_Master_SB>
 8006140:	e08e      	b.n	8006260 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006142:	69fb      	ldr	r3, [r7, #28]
 8006144:	08db      	lsrs	r3, r3, #3
 8006146:	f003 0301 	and.w	r3, r3, #1
 800614a:	2b00      	cmp	r3, #0
 800614c:	d009      	beq.n	8006162 <HAL_I2C_EV_IRQHandler+0xb2>
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	0a5b      	lsrs	r3, r3, #9
 8006152:	f003 0301 	and.w	r3, r3, #1
 8006156:	2b00      	cmp	r3, #0
 8006158:	d003      	beq.n	8006162 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f000 fd31 	bl	8006bc2 <I2C_Master_ADD10>
 8006160:	e07e      	b.n	8006260 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006162:	69fb      	ldr	r3, [r7, #28]
 8006164:	085b      	lsrs	r3, r3, #1
 8006166:	f003 0301 	and.w	r3, r3, #1
 800616a:	2b00      	cmp	r3, #0
 800616c:	d009      	beq.n	8006182 <HAL_I2C_EV_IRQHandler+0xd2>
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	0a5b      	lsrs	r3, r3, #9
 8006172:	f003 0301 	and.w	r3, r3, #1
 8006176:	2b00      	cmp	r3, #0
 8006178:	d003      	beq.n	8006182 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f000 fd4b 	bl	8006c16 <I2C_Master_ADDR>
 8006180:	e06e      	b.n	8006260 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8006182:	69bb      	ldr	r3, [r7, #24]
 8006184:	089b      	lsrs	r3, r3, #2
 8006186:	f003 0301 	and.w	r3, r3, #1
 800618a:	2b00      	cmp	r3, #0
 800618c:	d037      	beq.n	80061fe <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006198:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800619c:	f000 80ef 	beq.w	800637e <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80061a0:	69fb      	ldr	r3, [r7, #28]
 80061a2:	09db      	lsrs	r3, r3, #7
 80061a4:	f003 0301 	and.w	r3, r3, #1
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d00f      	beq.n	80061cc <HAL_I2C_EV_IRQHandler+0x11c>
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	0a9b      	lsrs	r3, r3, #10
 80061b0:	f003 0301 	and.w	r3, r3, #1
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d009      	beq.n	80061cc <HAL_I2C_EV_IRQHandler+0x11c>
 80061b8:	69fb      	ldr	r3, [r7, #28]
 80061ba:	089b      	lsrs	r3, r3, #2
 80061bc:	f003 0301 	and.w	r3, r3, #1
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d103      	bne.n	80061cc <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f000 f948 	bl	800645a <I2C_MasterTransmit_TXE>
 80061ca:	e049      	b.n	8006260 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80061cc:	69fb      	ldr	r3, [r7, #28]
 80061ce:	089b      	lsrs	r3, r3, #2
 80061d0:	f003 0301 	and.w	r3, r3, #1
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	f000 80d2 	beq.w	800637e <HAL_I2C_EV_IRQHandler+0x2ce>
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	0a5b      	lsrs	r3, r3, #9
 80061de:	f003 0301 	and.w	r3, r3, #1
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	f000 80cb 	beq.w	800637e <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 80061e8:	7bfb      	ldrb	r3, [r7, #15]
 80061ea:	2b10      	cmp	r3, #16
 80061ec:	d103      	bne.n	80061f6 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f000 f9cf 	bl	8006592 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80061f4:	e0c3      	b.n	800637e <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f000 fa33 	bl	8006662 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80061fc:	e0bf      	b.n	800637e <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006208:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800620c:	f000 80b7 	beq.w	800637e <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006210:	69fb      	ldr	r3, [r7, #28]
 8006212:	099b      	lsrs	r3, r3, #6
 8006214:	f003 0301 	and.w	r3, r3, #1
 8006218:	2b00      	cmp	r3, #0
 800621a:	d00f      	beq.n	800623c <HAL_I2C_EV_IRQHandler+0x18c>
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	0a9b      	lsrs	r3, r3, #10
 8006220:	f003 0301 	and.w	r3, r3, #1
 8006224:	2b00      	cmp	r3, #0
 8006226:	d009      	beq.n	800623c <HAL_I2C_EV_IRQHandler+0x18c>
 8006228:	69fb      	ldr	r3, [r7, #28]
 800622a:	089b      	lsrs	r3, r3, #2
 800622c:	f003 0301 	and.w	r3, r3, #1
 8006230:	2b00      	cmp	r3, #0
 8006232:	d103      	bne.n	800623c <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f000 faa3 	bl	8006780 <I2C_MasterReceive_RXNE>
 800623a:	e011      	b.n	8006260 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800623c:	69fb      	ldr	r3, [r7, #28]
 800623e:	089b      	lsrs	r3, r3, #2
 8006240:	f003 0301 	and.w	r3, r3, #1
 8006244:	2b00      	cmp	r3, #0
 8006246:	f000 809a 	beq.w	800637e <HAL_I2C_EV_IRQHandler+0x2ce>
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	0a5b      	lsrs	r3, r3, #9
 800624e:	f003 0301 	and.w	r3, r3, #1
 8006252:	2b00      	cmp	r3, #0
 8006254:	f000 8093 	beq.w	800637e <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f000 fb42 	bl	80068e2 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800625e:	e08e      	b.n	800637e <HAL_I2C_EV_IRQHandler+0x2ce>
 8006260:	e08d      	b.n	800637e <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006266:	2b00      	cmp	r3, #0
 8006268:	d004      	beq.n	8006274 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	695b      	ldr	r3, [r3, #20]
 8006270:	61fb      	str	r3, [r7, #28]
 8006272:	e007      	b.n	8006284 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	699b      	ldr	r3, [r3, #24]
 800627a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	695b      	ldr	r3, [r3, #20]
 8006282:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006284:	69fb      	ldr	r3, [r7, #28]
 8006286:	085b      	lsrs	r3, r3, #1
 8006288:	f003 0301 	and.w	r3, r3, #1
 800628c:	2b00      	cmp	r3, #0
 800628e:	d012      	beq.n	80062b6 <HAL_I2C_EV_IRQHandler+0x206>
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	0a5b      	lsrs	r3, r3, #9
 8006294:	f003 0301 	and.w	r3, r3, #1
 8006298:	2b00      	cmp	r3, #0
 800629a:	d00c      	beq.n	80062b6 <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d003      	beq.n	80062ac <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	699b      	ldr	r3, [r3, #24]
 80062aa:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80062ac:	69b9      	ldr	r1, [r7, #24]
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f000 ff00 	bl	80070b4 <I2C_Slave_ADDR>
 80062b4:	e066      	b.n	8006384 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80062b6:	69fb      	ldr	r3, [r7, #28]
 80062b8:	091b      	lsrs	r3, r3, #4
 80062ba:	f003 0301 	and.w	r3, r3, #1
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d009      	beq.n	80062d6 <HAL_I2C_EV_IRQHandler+0x226>
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	0a5b      	lsrs	r3, r3, #9
 80062c6:	f003 0301 	and.w	r3, r3, #1
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d003      	beq.n	80062d6 <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f000 ff34 	bl	800713c <I2C_Slave_STOPF>
 80062d4:	e056      	b.n	8006384 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80062d6:	7bbb      	ldrb	r3, [r7, #14]
 80062d8:	2b21      	cmp	r3, #33	; 0x21
 80062da:	d002      	beq.n	80062e2 <HAL_I2C_EV_IRQHandler+0x232>
 80062dc:	7bbb      	ldrb	r3, [r7, #14]
 80062de:	2b29      	cmp	r3, #41	; 0x29
 80062e0:	d125      	bne.n	800632e <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80062e2:	69fb      	ldr	r3, [r7, #28]
 80062e4:	09db      	lsrs	r3, r3, #7
 80062e6:	f003 0301 	and.w	r3, r3, #1
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d00f      	beq.n	800630e <HAL_I2C_EV_IRQHandler+0x25e>
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	0a9b      	lsrs	r3, r3, #10
 80062f2:	f003 0301 	and.w	r3, r3, #1
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d009      	beq.n	800630e <HAL_I2C_EV_IRQHandler+0x25e>
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	089b      	lsrs	r3, r3, #2
 80062fe:	f003 0301 	and.w	r3, r3, #1
 8006302:	2b00      	cmp	r3, #0
 8006304:	d103      	bne.n	800630e <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f000 fe16 	bl	8006f38 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800630c:	e039      	b.n	8006382 <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800630e:	69fb      	ldr	r3, [r7, #28]
 8006310:	089b      	lsrs	r3, r3, #2
 8006312:	f003 0301 	and.w	r3, r3, #1
 8006316:	2b00      	cmp	r3, #0
 8006318:	d033      	beq.n	8006382 <HAL_I2C_EV_IRQHandler+0x2d2>
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	0a5b      	lsrs	r3, r3, #9
 800631e:	f003 0301 	and.w	r3, r3, #1
 8006322:	2b00      	cmp	r3, #0
 8006324:	d02d      	beq.n	8006382 <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f000 fe43 	bl	8006fb2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800632c:	e029      	b.n	8006382 <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800632e:	69fb      	ldr	r3, [r7, #28]
 8006330:	099b      	lsrs	r3, r3, #6
 8006332:	f003 0301 	and.w	r3, r3, #1
 8006336:	2b00      	cmp	r3, #0
 8006338:	d00f      	beq.n	800635a <HAL_I2C_EV_IRQHandler+0x2aa>
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	0a9b      	lsrs	r3, r3, #10
 800633e:	f003 0301 	and.w	r3, r3, #1
 8006342:	2b00      	cmp	r3, #0
 8006344:	d009      	beq.n	800635a <HAL_I2C_EV_IRQHandler+0x2aa>
 8006346:	69fb      	ldr	r3, [r7, #28]
 8006348:	089b      	lsrs	r3, r3, #2
 800634a:	f003 0301 	and.w	r3, r3, #1
 800634e:	2b00      	cmp	r3, #0
 8006350:	d103      	bne.n	800635a <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f000 fe4e 	bl	8006ff4 <I2C_SlaveReceive_RXNE>
 8006358:	e014      	b.n	8006384 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800635a:	69fb      	ldr	r3, [r7, #28]
 800635c:	089b      	lsrs	r3, r3, #2
 800635e:	f003 0301 	and.w	r3, r3, #1
 8006362:	2b00      	cmp	r3, #0
 8006364:	d00e      	beq.n	8006384 <HAL_I2C_EV_IRQHandler+0x2d4>
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	0a5b      	lsrs	r3, r3, #9
 800636a:	f003 0301 	and.w	r3, r3, #1
 800636e:	2b00      	cmp	r3, #0
 8006370:	d008      	beq.n	8006384 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f000 fe7c 	bl	8007070 <I2C_SlaveReceive_BTF>
 8006378:	e004      	b.n	8006384 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 800637a:	bf00      	nop
 800637c:	e002      	b.n	8006384 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800637e:	bf00      	nop
 8006380:	e000      	b.n	8006384 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006382:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8006384:	3720      	adds	r7, #32
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}

0800638a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800638a:	b480      	push	{r7}
 800638c:	b083      	sub	sp, #12
 800638e:	af00      	add	r7, sp, #0
 8006390:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006392:	bf00      	nop
 8006394:	370c      	adds	r7, #12
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr

0800639e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800639e:	b480      	push	{r7}
 80063a0:	b083      	sub	sp, #12
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80063a6:	bf00      	nop
 80063a8:	370c      	adds	r7, #12
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr

080063b2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80063b2:	b480      	push	{r7}
 80063b4:	b083      	sub	sp, #12
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80063ba:	bf00      	nop
 80063bc:	370c      	adds	r7, #12
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr

080063c6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80063c6:	b480      	push	{r7}
 80063c8:	b083      	sub	sp, #12
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80063ce:	bf00      	nop
 80063d0:	370c      	adds	r7, #12
 80063d2:	46bd      	mov	sp, r7
 80063d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d8:	4770      	bx	lr

080063da <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80063da:	b480      	push	{r7}
 80063dc:	b083      	sub	sp, #12
 80063de:	af00      	add	r7, sp, #0
 80063e0:	6078      	str	r0, [r7, #4]
 80063e2:	460b      	mov	r3, r1
 80063e4:	70fb      	strb	r3, [r7, #3]
 80063e6:	4613      	mov	r3, r2
 80063e8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80063ea:	bf00      	nop
 80063ec:	370c      	adds	r7, #12
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr

080063f6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80063f6:	b480      	push	{r7}
 80063f8:	b083      	sub	sp, #12
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80063fe:	bf00      	nop
 8006400:	370c      	adds	r7, #12
 8006402:	46bd      	mov	sp, r7
 8006404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006408:	4770      	bx	lr

0800640a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800640a:	b480      	push	{r7}
 800640c:	b083      	sub	sp, #12
 800640e:	af00      	add	r7, sp, #0
 8006410:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006412:	bf00      	nop
 8006414:	370c      	adds	r7, #12
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr

0800641e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800641e:	b480      	push	{r7}
 8006420:	b083      	sub	sp, #12
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006426:	bf00      	nop
 8006428:	370c      	adds	r7, #12
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr

08006432 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006432:	b480      	push	{r7}
 8006434:	b083      	sub	sp, #12
 8006436:	af00      	add	r7, sp, #0
 8006438:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800643a:	bf00      	nop
 800643c:	370c      	adds	r7, #12
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr

08006446 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006446:	b480      	push	{r7}
 8006448:	b083      	sub	sp, #12
 800644a:	af00      	add	r7, sp, #0
 800644c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800644e:	bf00      	nop
 8006450:	370c      	adds	r7, #12
 8006452:	46bd      	mov	sp, r7
 8006454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006458:	4770      	bx	lr

0800645a <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800645a:	b580      	push	{r7, lr}
 800645c:	b084      	sub	sp, #16
 800645e:	af00      	add	r7, sp, #0
 8006460:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006468:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006470:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006476:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800647c:	2b00      	cmp	r3, #0
 800647e:	d150      	bne.n	8006522 <I2C_MasterTransmit_TXE+0xc8>
 8006480:	7bfb      	ldrb	r3, [r7, #15]
 8006482:	2b21      	cmp	r3, #33	; 0x21
 8006484:	d14d      	bne.n	8006522 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	2b08      	cmp	r3, #8
 800648a:	d01d      	beq.n	80064c8 <I2C_MasterTransmit_TXE+0x6e>
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	2b20      	cmp	r3, #32
 8006490:	d01a      	beq.n	80064c8 <I2C_MasterTransmit_TXE+0x6e>
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006498:	d016      	beq.n	80064c8 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	685a      	ldr	r2, [r3, #4]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80064a8:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2211      	movs	r2, #17
 80064ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2200      	movs	r2, #0
 80064b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2220      	movs	r2, #32
 80064bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f7ff ff62 	bl	800638a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80064c6:	e060      	b.n	800658a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	685a      	ldr	r2, [r3, #4]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80064d6:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064e6:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2220      	movs	r2, #32
 80064f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80064fc:	b2db      	uxtb	r3, r3
 80064fe:	2b40      	cmp	r3, #64	; 0x40
 8006500:	d107      	bne.n	8006512 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2200      	movs	r2, #0
 8006506:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f7ff ff7d 	bl	800640a <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006510:	e03b      	b.n	800658a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2200      	movs	r2, #0
 8006516:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f7ff ff35 	bl	800638a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006520:	e033      	b.n	800658a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8006522:	7bfb      	ldrb	r3, [r7, #15]
 8006524:	2b21      	cmp	r3, #33	; 0x21
 8006526:	d005      	beq.n	8006534 <I2C_MasterTransmit_TXE+0xda>
 8006528:	7bbb      	ldrb	r3, [r7, #14]
 800652a:	2b40      	cmp	r3, #64	; 0x40
 800652c:	d12d      	bne.n	800658a <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800652e:	7bfb      	ldrb	r3, [r7, #15]
 8006530:	2b22      	cmp	r3, #34	; 0x22
 8006532:	d12a      	bne.n	800658a <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006538:	b29b      	uxth	r3, r3
 800653a:	2b00      	cmp	r3, #0
 800653c:	d108      	bne.n	8006550 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	685a      	ldr	r2, [r3, #4]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800654c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800654e:	e01c      	b.n	800658a <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006556:	b2db      	uxtb	r3, r3
 8006558:	2b40      	cmp	r3, #64	; 0x40
 800655a:	d103      	bne.n	8006564 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f000 f880 	bl	8006662 <I2C_MemoryTransmit_TXE_BTF>
}
 8006562:	e012      	b.n	800658a <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006568:	781a      	ldrb	r2, [r3, #0]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006574:	1c5a      	adds	r2, r3, #1
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800657e:	b29b      	uxth	r3, r3
 8006580:	3b01      	subs	r3, #1
 8006582:	b29a      	uxth	r2, r3
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006588:	e7ff      	b.n	800658a <I2C_MasterTransmit_TXE+0x130>
 800658a:	bf00      	nop
 800658c:	3710      	adds	r7, #16
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}

08006592 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006592:	b580      	push	{r7, lr}
 8006594:	b084      	sub	sp, #16
 8006596:	af00      	add	r7, sp, #0
 8006598:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800659e:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065a6:	b2db      	uxtb	r3, r3
 80065a8:	2b21      	cmp	r3, #33	; 0x21
 80065aa:	d156      	bne.n	800665a <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d012      	beq.n	80065dc <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ba:	781a      	ldrb	r2, [r3, #0]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c6:	1c5a      	adds	r2, r3, #1
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	3b01      	subs	r3, #1
 80065d4:	b29a      	uxth	r2, r3
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80065da:	e03e      	b.n	800665a <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2b08      	cmp	r3, #8
 80065e0:	d01d      	beq.n	800661e <I2C_MasterTransmit_BTF+0x8c>
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2b20      	cmp	r3, #32
 80065e6:	d01a      	beq.n	800661e <I2C_MasterTransmit_BTF+0x8c>
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80065ee:	d016      	beq.n	800661e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	685a      	ldr	r2, [r3, #4]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80065fe:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2211      	movs	r2, #17
 8006604:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2200      	movs	r2, #0
 800660a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2220      	movs	r2, #32
 8006612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f7ff feb7 	bl	800638a <HAL_I2C_MasterTxCpltCallback>
}
 800661c:	e01d      	b.n	800665a <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	685a      	ldr	r2, [r3, #4]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800662c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800663c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2200      	movs	r2, #0
 8006642:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2220      	movs	r2, #32
 8006648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2200      	movs	r2, #0
 8006650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f7ff fe98 	bl	800638a <HAL_I2C_MasterTxCpltCallback>
}
 800665a:	bf00      	nop
 800665c:	3710      	adds	r7, #16
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}

08006662 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8006662:	b580      	push	{r7, lr}
 8006664:	b084      	sub	sp, #16
 8006666:	af00      	add	r7, sp, #0
 8006668:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006670:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006676:	2b00      	cmp	r3, #0
 8006678:	d11d      	bne.n	80066b6 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800667e:	2b01      	cmp	r3, #1
 8006680:	d10b      	bne.n	800669a <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006686:	b2da      	uxtb	r2, r3
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006692:	1c9a      	adds	r2, r3, #2
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8006698:	e06e      	b.n	8006778 <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800669e:	b29b      	uxth	r3, r3
 80066a0:	121b      	asrs	r3, r3, #8
 80066a2:	b2da      	uxtb	r2, r3
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066ae:	1c5a      	adds	r2, r3, #1
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80066b4:	e060      	b.n	8006778 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066ba:	2b01      	cmp	r3, #1
 80066bc:	d10b      	bne.n	80066d6 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066c2:	b2da      	uxtb	r2, r3
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066ce:	1c5a      	adds	r2, r3, #1
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80066d4:	e050      	b.n	8006778 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066da:	2b02      	cmp	r3, #2
 80066dc:	d14c      	bne.n	8006778 <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80066de:	7bfb      	ldrb	r3, [r7, #15]
 80066e0:	2b22      	cmp	r3, #34	; 0x22
 80066e2:	d108      	bne.n	80066f6 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	681a      	ldr	r2, [r3, #0]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066f2:	601a      	str	r2, [r3, #0]
}
 80066f4:	e040      	b.n	8006778 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d015      	beq.n	800672c <I2C_MemoryTransmit_TXE_BTF+0xca>
 8006700:	7bfb      	ldrb	r3, [r7, #15]
 8006702:	2b21      	cmp	r3, #33	; 0x21
 8006704:	d112      	bne.n	800672c <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800670a:	781a      	ldrb	r2, [r3, #0]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006716:	1c5a      	adds	r2, r3, #1
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006720:	b29b      	uxth	r3, r3
 8006722:	3b01      	subs	r3, #1
 8006724:	b29a      	uxth	r2, r3
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800672a:	e025      	b.n	8006778 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006730:	b29b      	uxth	r3, r3
 8006732:	2b00      	cmp	r3, #0
 8006734:	d120      	bne.n	8006778 <I2C_MemoryTransmit_TXE_BTF+0x116>
 8006736:	7bfb      	ldrb	r3, [r7, #15]
 8006738:	2b21      	cmp	r3, #33	; 0x21
 800673a:	d11d      	bne.n	8006778 <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	685a      	ldr	r2, [r3, #4]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800674a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800675a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2200      	movs	r2, #0
 8006760:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2220      	movs	r2, #32
 8006766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2200      	movs	r2, #0
 800676e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f7ff fe49 	bl	800640a <HAL_I2C_MemTxCpltCallback>
}
 8006778:	bf00      	nop
 800677a:	3710      	adds	r7, #16
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}

08006780 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b084      	sub	sp, #16
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800678e:	b2db      	uxtb	r3, r3
 8006790:	2b22      	cmp	r3, #34	; 0x22
 8006792:	f040 80a2 	bne.w	80068da <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800679a:	b29b      	uxth	r3, r3
 800679c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2b03      	cmp	r3, #3
 80067a2:	d921      	bls.n	80067e8 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	691a      	ldr	r2, [r3, #16]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ae:	b2d2      	uxtb	r2, r2
 80067b0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b6:	1c5a      	adds	r2, r3, #1
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	3b01      	subs	r3, #1
 80067c4:	b29a      	uxth	r2, r3
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	2b03      	cmp	r3, #3
 80067d2:	f040 8082 	bne.w	80068da <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	685a      	ldr	r2, [r3, #4]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067e4:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80067e6:	e078      	b.n	80068da <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ec:	2b02      	cmp	r3, #2
 80067ee:	d074      	beq.n	80068da <I2C_MasterReceive_RXNE+0x15a>
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2b01      	cmp	r3, #1
 80067f4:	d002      	beq.n	80067fc <I2C_MasterReceive_RXNE+0x7c>
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d16e      	bne.n	80068da <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f001 fa4f 	bl	8007ca0 <I2C_WaitOnSTOPRequestThroughIT>
 8006802:	4603      	mov	r3, r0
 8006804:	2b00      	cmp	r3, #0
 8006806:	d142      	bne.n	800688e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	681a      	ldr	r2, [r3, #0]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006816:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	685a      	ldr	r2, [r3, #4]
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006826:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	691a      	ldr	r2, [r3, #16]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006832:	b2d2      	uxtb	r2, r2
 8006834:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800683a:	1c5a      	adds	r2, r3, #1
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006844:	b29b      	uxth	r3, r3
 8006846:	3b01      	subs	r3, #1
 8006848:	b29a      	uxth	r2, r3
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2220      	movs	r2, #32
 8006852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800685c:	b2db      	uxtb	r3, r3
 800685e:	2b40      	cmp	r3, #64	; 0x40
 8006860:	d10a      	bne.n	8006878 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2200      	movs	r2, #0
 8006866:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2200      	movs	r2, #0
 800686e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f7ff fdd4 	bl	800641e <HAL_I2C_MemRxCpltCallback>
}
 8006876:	e030      	b.n	80068da <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2200      	movs	r2, #0
 800687c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2212      	movs	r2, #18
 8006884:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f7ff fd89 	bl	800639e <HAL_I2C_MasterRxCpltCallback>
}
 800688c:	e025      	b.n	80068da <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	685a      	ldr	r2, [r3, #4]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800689c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	691a      	ldr	r2, [r3, #16]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a8:	b2d2      	uxtb	r2, r2
 80068aa:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b0:	1c5a      	adds	r2, r3, #1
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	3b01      	subs	r3, #1
 80068be:	b29a      	uxth	r2, r3
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2220      	movs	r2, #32
 80068c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2200      	movs	r2, #0
 80068d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f7ff fdac 	bl	8006432 <HAL_I2C_ErrorCallback>
}
 80068da:	bf00      	nop
 80068dc:	3710      	adds	r7, #16
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}

080068e2 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80068e2:	b580      	push	{r7, lr}
 80068e4:	b084      	sub	sp, #16
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ee:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	2b04      	cmp	r3, #4
 80068f8:	d11b      	bne.n	8006932 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	685a      	ldr	r2, [r3, #4]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006908:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	691a      	ldr	r2, [r3, #16]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006914:	b2d2      	uxtb	r2, r2
 8006916:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800691c:	1c5a      	adds	r2, r3, #1
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006926:	b29b      	uxth	r3, r3
 8006928:	3b01      	subs	r3, #1
 800692a:	b29a      	uxth	r2, r3
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8006930:	e0bd      	b.n	8006aae <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006936:	b29b      	uxth	r3, r3
 8006938:	2b03      	cmp	r3, #3
 800693a:	d129      	bne.n	8006990 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	685a      	ldr	r2, [r3, #4]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800694a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2b04      	cmp	r3, #4
 8006950:	d00a      	beq.n	8006968 <I2C_MasterReceive_BTF+0x86>
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2b02      	cmp	r3, #2
 8006956:	d007      	beq.n	8006968 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006966:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	691a      	ldr	r2, [r3, #16]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006972:	b2d2      	uxtb	r2, r2
 8006974:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800697a:	1c5a      	adds	r2, r3, #1
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006984:	b29b      	uxth	r3, r3
 8006986:	3b01      	subs	r3, #1
 8006988:	b29a      	uxth	r2, r3
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800698e:	e08e      	b.n	8006aae <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006994:	b29b      	uxth	r3, r3
 8006996:	2b02      	cmp	r3, #2
 8006998:	d176      	bne.n	8006a88 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2b01      	cmp	r3, #1
 800699e:	d002      	beq.n	80069a6 <I2C_MasterReceive_BTF+0xc4>
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2b10      	cmp	r3, #16
 80069a4:	d108      	bne.n	80069b8 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	681a      	ldr	r2, [r3, #0]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069b4:	601a      	str	r2, [r3, #0]
 80069b6:	e019      	b.n	80069ec <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2b04      	cmp	r3, #4
 80069bc:	d002      	beq.n	80069c4 <I2C_MasterReceive_BTF+0xe2>
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2b02      	cmp	r3, #2
 80069c2:	d108      	bne.n	80069d6 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	681a      	ldr	r2, [r3, #0]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80069d2:	601a      	str	r2, [r3, #0]
 80069d4:	e00a      	b.n	80069ec <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2b10      	cmp	r3, #16
 80069da:	d007      	beq.n	80069ec <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	681a      	ldr	r2, [r3, #0]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069ea:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	691a      	ldr	r2, [r3, #16]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f6:	b2d2      	uxtb	r2, r2
 80069f8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069fe:	1c5a      	adds	r2, r3, #1
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	3b01      	subs	r3, #1
 8006a0c:	b29a      	uxth	r2, r3
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	691a      	ldr	r2, [r3, #16]
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a1c:	b2d2      	uxtb	r2, r2
 8006a1e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a24:	1c5a      	adds	r2, r3, #1
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	3b01      	subs	r3, #1
 8006a32:	b29a      	uxth	r2, r3
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	685a      	ldr	r2, [r3, #4]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006a46:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2220      	movs	r2, #32
 8006a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a56:	b2db      	uxtb	r3, r3
 8006a58:	2b40      	cmp	r3, #64	; 0x40
 8006a5a:	d10a      	bne.n	8006a72 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2200      	movs	r2, #0
 8006a68:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f7ff fcd7 	bl	800641e <HAL_I2C_MemRxCpltCallback>
}
 8006a70:	e01d      	b.n	8006aae <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2200      	movs	r2, #0
 8006a76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2212      	movs	r2, #18
 8006a7e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f7ff fc8c 	bl	800639e <HAL_I2C_MasterRxCpltCallback>
}
 8006a86:	e012      	b.n	8006aae <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	691a      	ldr	r2, [r3, #16]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a92:	b2d2      	uxtb	r2, r2
 8006a94:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a9a:	1c5a      	adds	r2, r3, #1
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006aa4:	b29b      	uxth	r3, r3
 8006aa6:	3b01      	subs	r3, #1
 8006aa8:	b29a      	uxth	r2, r3
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006aae:	bf00      	nop
 8006ab0:	3710      	adds	r7, #16
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}

08006ab6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8006ab6:	b480      	push	{r7}
 8006ab8:	b083      	sub	sp, #12
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ac4:	b2db      	uxtb	r3, r3
 8006ac6:	2b40      	cmp	r3, #64	; 0x40
 8006ac8:	d117      	bne.n	8006afa <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d109      	bne.n	8006ae6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ad6:	b2db      	uxtb	r3, r3
 8006ad8:	461a      	mov	r2, r3
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006ae2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8006ae4:	e067      	b.n	8006bb6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aea:	b2db      	uxtb	r3, r3
 8006aec:	f043 0301 	orr.w	r3, r3, #1
 8006af0:	b2da      	uxtb	r2, r3
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	611a      	str	r2, [r3, #16]
}
 8006af8:	e05d      	b.n	8006bb6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	691b      	ldr	r3, [r3, #16]
 8006afe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b02:	d133      	bne.n	8006b6c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b0a:	b2db      	uxtb	r3, r3
 8006b0c:	2b21      	cmp	r3, #33	; 0x21
 8006b0e:	d109      	bne.n	8006b24 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b14:	b2db      	uxtb	r3, r3
 8006b16:	461a      	mov	r2, r3
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006b20:	611a      	str	r2, [r3, #16]
 8006b22:	e008      	b.n	8006b36 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b28:	b2db      	uxtb	r3, r3
 8006b2a:	f043 0301 	orr.w	r3, r3, #1
 8006b2e:	b2da      	uxtb	r2, r3
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d004      	beq.n	8006b48 <I2C_Master_SB+0x92>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d108      	bne.n	8006b5a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d032      	beq.n	8006bb6 <I2C_Master_SB+0x100>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d02d      	beq.n	8006bb6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	685a      	ldr	r2, [r3, #4]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b68:	605a      	str	r2, [r3, #4]
}
 8006b6a:	e024      	b.n	8006bb6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d10e      	bne.n	8006b92 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b78:	b29b      	uxth	r3, r3
 8006b7a:	11db      	asrs	r3, r3, #7
 8006b7c:	b2db      	uxtb	r3, r3
 8006b7e:	f003 0306 	and.w	r3, r3, #6
 8006b82:	b2db      	uxtb	r3, r3
 8006b84:	f063 030f 	orn	r3, r3, #15
 8006b88:	b2da      	uxtb	r2, r3
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	611a      	str	r2, [r3, #16]
}
 8006b90:	e011      	b.n	8006bb6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b96:	2b01      	cmp	r3, #1
 8006b98:	d10d      	bne.n	8006bb6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b9e:	b29b      	uxth	r3, r3
 8006ba0:	11db      	asrs	r3, r3, #7
 8006ba2:	b2db      	uxtb	r3, r3
 8006ba4:	f003 0306 	and.w	r3, r3, #6
 8006ba8:	b2db      	uxtb	r3, r3
 8006baa:	f063 030e 	orn	r3, r3, #14
 8006bae:	b2da      	uxtb	r2, r3
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	611a      	str	r2, [r3, #16]
}
 8006bb6:	bf00      	nop
 8006bb8:	370c      	adds	r7, #12
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc0:	4770      	bx	lr

08006bc2 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8006bc2:	b480      	push	{r7}
 8006bc4:	b083      	sub	sp, #12
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bce:	b2da      	uxtb	r2, r3
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d004      	beq.n	8006be8 <I2C_Master_ADD10+0x26>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d108      	bne.n	8006bfa <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d00c      	beq.n	8006c0a <I2C_Master_ADD10+0x48>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d007      	beq.n	8006c0a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	685a      	ldr	r2, [r3, #4]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c08:	605a      	str	r2, [r3, #4]
  }
}
 8006c0a:	bf00      	nop
 8006c0c:	370c      	adds	r7, #12
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c14:	4770      	bx	lr

08006c16 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8006c16:	b480      	push	{r7}
 8006c18:	b091      	sub	sp, #68	; 0x44
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c24:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c2c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c32:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c3a:	b2db      	uxtb	r3, r3
 8006c3c:	2b22      	cmp	r3, #34	; 0x22
 8006c3e:	f040 8169 	bne.w	8006f14 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d10f      	bne.n	8006c6a <I2C_Master_ADDR+0x54>
 8006c4a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006c4e:	2b40      	cmp	r3, #64	; 0x40
 8006c50:	d10b      	bne.n	8006c6a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c52:	2300      	movs	r3, #0
 8006c54:	633b      	str	r3, [r7, #48]	; 0x30
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	695b      	ldr	r3, [r3, #20]
 8006c5c:	633b      	str	r3, [r7, #48]	; 0x30
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	699b      	ldr	r3, [r3, #24]
 8006c64:	633b      	str	r3, [r7, #48]	; 0x30
 8006c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c68:	e160      	b.n	8006f2c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d11d      	bne.n	8006cae <I2C_Master_ADDR+0x98>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	691b      	ldr	r3, [r3, #16]
 8006c76:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006c7a:	d118      	bne.n	8006cae <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	695b      	ldr	r3, [r3, #20]
 8006c86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	699b      	ldr	r3, [r3, #24]
 8006c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	681a      	ldr	r2, [r3, #0]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ca0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ca6:	1c5a      	adds	r2, r3, #1
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	651a      	str	r2, [r3, #80]	; 0x50
 8006cac:	e13e      	b.n	8006f2c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d113      	bne.n	8006ce0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006cb8:	2300      	movs	r3, #0
 8006cba:	62bb      	str	r3, [r7, #40]	; 0x28
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	695b      	ldr	r3, [r3, #20]
 8006cc2:	62bb      	str	r3, [r7, #40]	; 0x28
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	699b      	ldr	r3, [r3, #24]
 8006cca:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	681a      	ldr	r2, [r3, #0]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cdc:	601a      	str	r2, [r3, #0]
 8006cde:	e115      	b.n	8006f0c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	2b01      	cmp	r3, #1
 8006ce8:	f040 808a 	bne.w	8006e00 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8006cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cee:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006cf2:	d137      	bne.n	8006d64 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	681a      	ldr	r2, [r3, #0]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d02:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d12:	d113      	bne.n	8006d3c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d22:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d24:	2300      	movs	r3, #0
 8006d26:	627b      	str	r3, [r7, #36]	; 0x24
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	695b      	ldr	r3, [r3, #20]
 8006d2e:	627b      	str	r3, [r7, #36]	; 0x24
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	699b      	ldr	r3, [r3, #24]
 8006d36:	627b      	str	r3, [r7, #36]	; 0x24
 8006d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d3a:	e0e7      	b.n	8006f0c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	623b      	str	r3, [r7, #32]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	695b      	ldr	r3, [r3, #20]
 8006d46:	623b      	str	r3, [r7, #32]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	699b      	ldr	r3, [r3, #24]
 8006d4e:	623b      	str	r3, [r7, #32]
 8006d50:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	681a      	ldr	r2, [r3, #0]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d60:	601a      	str	r2, [r3, #0]
 8006d62:	e0d3      	b.n	8006f0c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8006d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d66:	2b08      	cmp	r3, #8
 8006d68:	d02e      	beq.n	8006dc8 <I2C_Master_ADDR+0x1b2>
 8006d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d6c:	2b20      	cmp	r3, #32
 8006d6e:	d02b      	beq.n	8006dc8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8006d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d72:	2b12      	cmp	r3, #18
 8006d74:	d102      	bne.n	8006d7c <I2C_Master_ADDR+0x166>
 8006d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d78:	2b01      	cmp	r3, #1
 8006d7a:	d125      	bne.n	8006dc8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d7e:	2b04      	cmp	r3, #4
 8006d80:	d00e      	beq.n	8006da0 <I2C_Master_ADDR+0x18a>
 8006d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d84:	2b02      	cmp	r3, #2
 8006d86:	d00b      	beq.n	8006da0 <I2C_Master_ADDR+0x18a>
 8006d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d8a:	2b10      	cmp	r3, #16
 8006d8c:	d008      	beq.n	8006da0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	681a      	ldr	r2, [r3, #0]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d9c:	601a      	str	r2, [r3, #0]
 8006d9e:	e007      	b.n	8006db0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	681a      	ldr	r2, [r3, #0]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006dae:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006db0:	2300      	movs	r3, #0
 8006db2:	61fb      	str	r3, [r7, #28]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	695b      	ldr	r3, [r3, #20]
 8006dba:	61fb      	str	r3, [r7, #28]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	699b      	ldr	r3, [r3, #24]
 8006dc2:	61fb      	str	r3, [r7, #28]
 8006dc4:	69fb      	ldr	r3, [r7, #28]
 8006dc6:	e0a1      	b.n	8006f0c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	681a      	ldr	r2, [r3, #0]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006dd6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006dd8:	2300      	movs	r3, #0
 8006dda:	61bb      	str	r3, [r7, #24]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	695b      	ldr	r3, [r3, #20]
 8006de2:	61bb      	str	r3, [r7, #24]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	699b      	ldr	r3, [r3, #24]
 8006dea:	61bb      	str	r3, [r7, #24]
 8006dec:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	681a      	ldr	r2, [r3, #0]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006dfc:	601a      	str	r2, [r3, #0]
 8006dfe:	e085      	b.n	8006f0c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	2b02      	cmp	r3, #2
 8006e08:	d14d      	bne.n	8006ea6 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e0c:	2b04      	cmp	r3, #4
 8006e0e:	d016      	beq.n	8006e3e <I2C_Master_ADDR+0x228>
 8006e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e12:	2b02      	cmp	r3, #2
 8006e14:	d013      	beq.n	8006e3e <I2C_Master_ADDR+0x228>
 8006e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e18:	2b10      	cmp	r3, #16
 8006e1a:	d010      	beq.n	8006e3e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	681a      	ldr	r2, [r3, #0]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e2a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	681a      	ldr	r2, [r3, #0]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e3a:	601a      	str	r2, [r3, #0]
 8006e3c:	e007      	b.n	8006e4e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	681a      	ldr	r2, [r3, #0]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006e4c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e5c:	d117      	bne.n	8006e8e <I2C_Master_ADDR+0x278>
 8006e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e60:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006e64:	d00b      	beq.n	8006e7e <I2C_Master_ADDR+0x268>
 8006e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	d008      	beq.n	8006e7e <I2C_Master_ADDR+0x268>
 8006e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e6e:	2b08      	cmp	r3, #8
 8006e70:	d005      	beq.n	8006e7e <I2C_Master_ADDR+0x268>
 8006e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e74:	2b10      	cmp	r3, #16
 8006e76:	d002      	beq.n	8006e7e <I2C_Master_ADDR+0x268>
 8006e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e7a:	2b20      	cmp	r3, #32
 8006e7c:	d107      	bne.n	8006e8e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	685a      	ldr	r2, [r3, #4]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006e8c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e8e:	2300      	movs	r3, #0
 8006e90:	617b      	str	r3, [r7, #20]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	695b      	ldr	r3, [r3, #20]
 8006e98:	617b      	str	r3, [r7, #20]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	699b      	ldr	r3, [r3, #24]
 8006ea0:	617b      	str	r3, [r7, #20]
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	e032      	b.n	8006f0c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	681a      	ldr	r2, [r3, #0]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006eb4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ec0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ec4:	d117      	bne.n	8006ef6 <I2C_Master_ADDR+0x2e0>
 8006ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ec8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006ecc:	d00b      	beq.n	8006ee6 <I2C_Master_ADDR+0x2d0>
 8006ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ed0:	2b01      	cmp	r3, #1
 8006ed2:	d008      	beq.n	8006ee6 <I2C_Master_ADDR+0x2d0>
 8006ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ed6:	2b08      	cmp	r3, #8
 8006ed8:	d005      	beq.n	8006ee6 <I2C_Master_ADDR+0x2d0>
 8006eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006edc:	2b10      	cmp	r3, #16
 8006ede:	d002      	beq.n	8006ee6 <I2C_Master_ADDR+0x2d0>
 8006ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ee2:	2b20      	cmp	r3, #32
 8006ee4:	d107      	bne.n	8006ef6 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	685a      	ldr	r2, [r3, #4]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006ef4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	613b      	str	r3, [r7, #16]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	695b      	ldr	r3, [r3, #20]
 8006f00:	613b      	str	r3, [r7, #16]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	699b      	ldr	r3, [r3, #24]
 8006f08:	613b      	str	r3, [r7, #16]
 8006f0a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8006f12:	e00b      	b.n	8006f2c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f14:	2300      	movs	r3, #0
 8006f16:	60fb      	str	r3, [r7, #12]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	695b      	ldr	r3, [r3, #20]
 8006f1e:	60fb      	str	r3, [r7, #12]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	699b      	ldr	r3, [r3, #24]
 8006f26:	60fb      	str	r3, [r7, #12]
 8006f28:	68fb      	ldr	r3, [r7, #12]
}
 8006f2a:	e7ff      	b.n	8006f2c <I2C_Master_ADDR+0x316>
 8006f2c:	bf00      	nop
 8006f2e:	3744      	adds	r7, #68	; 0x44
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr

08006f38 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b084      	sub	sp, #16
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f46:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d02b      	beq.n	8006faa <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f56:	781a      	ldrb	r2, [r3, #0]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f62:	1c5a      	adds	r2, r3, #1
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f6c:	b29b      	uxth	r3, r3
 8006f6e:	3b01      	subs	r3, #1
 8006f70:	b29a      	uxth	r2, r3
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f7a:	b29b      	uxth	r3, r3
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d114      	bne.n	8006faa <I2C_SlaveTransmit_TXE+0x72>
 8006f80:	7bfb      	ldrb	r3, [r7, #15]
 8006f82:	2b29      	cmp	r3, #41	; 0x29
 8006f84:	d111      	bne.n	8006faa <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	685a      	ldr	r2, [r3, #4]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f94:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2221      	movs	r2, #33	; 0x21
 8006f9a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2228      	movs	r2, #40	; 0x28
 8006fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f7ff fa04 	bl	80063b2 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006faa:	bf00      	nop
 8006fac:	3710      	adds	r7, #16
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}

08006fb2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006fb2:	b480      	push	{r7}
 8006fb4:	b083      	sub	sp, #12
 8006fb6:	af00      	add	r7, sp, #0
 8006fb8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d011      	beq.n	8006fe8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc8:	781a      	ldrb	r2, [r3, #0]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd4:	1c5a      	adds	r2, r3, #1
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	3b01      	subs	r3, #1
 8006fe2:	b29a      	uxth	r2, r3
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006fe8:	bf00      	nop
 8006fea:	370c      	adds	r7, #12
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr

08006ff4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b084      	sub	sp, #16
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007002:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007008:	b29b      	uxth	r3, r3
 800700a:	2b00      	cmp	r3, #0
 800700c:	d02c      	beq.n	8007068 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	691a      	ldr	r2, [r3, #16]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007018:	b2d2      	uxtb	r2, r2
 800701a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007020:	1c5a      	adds	r2, r3, #1
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800702a:	b29b      	uxth	r3, r3
 800702c:	3b01      	subs	r3, #1
 800702e:	b29a      	uxth	r2, r3
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007038:	b29b      	uxth	r3, r3
 800703a:	2b00      	cmp	r3, #0
 800703c:	d114      	bne.n	8007068 <I2C_SlaveReceive_RXNE+0x74>
 800703e:	7bfb      	ldrb	r3, [r7, #15]
 8007040:	2b2a      	cmp	r3, #42	; 0x2a
 8007042:	d111      	bne.n	8007068 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	685a      	ldr	r2, [r3, #4]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007052:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2222      	movs	r2, #34	; 0x22
 8007058:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2228      	movs	r2, #40	; 0x28
 800705e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f7ff f9af 	bl	80063c6 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007068:	bf00      	nop
 800706a:	3710      	adds	r7, #16
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}

08007070 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007070:	b480      	push	{r7}
 8007072:	b083      	sub	sp, #12
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800707c:	b29b      	uxth	r3, r3
 800707e:	2b00      	cmp	r3, #0
 8007080:	d012      	beq.n	80070a8 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	691a      	ldr	r2, [r3, #16]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800708c:	b2d2      	uxtb	r2, r2
 800708e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007094:	1c5a      	adds	r2, r3, #1
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800709e:	b29b      	uxth	r3, r3
 80070a0:	3b01      	subs	r3, #1
 80070a2:	b29a      	uxth	r2, r3
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80070a8:	bf00      	nop
 80070aa:	370c      	adds	r7, #12
 80070ac:	46bd      	mov	sp, r7
 80070ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b2:	4770      	bx	lr

080070b4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b084      	sub	sp, #16
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
 80070bc:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80070be:	2300      	movs	r3, #0
 80070c0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070c8:	b2db      	uxtb	r3, r3
 80070ca:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80070ce:	2b28      	cmp	r3, #40	; 0x28
 80070d0:	d127      	bne.n	8007122 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	685a      	ldr	r2, [r3, #4]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070e0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	089b      	lsrs	r3, r3, #2
 80070e6:	f003 0301 	and.w	r3, r3, #1
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d101      	bne.n	80070f2 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80070ee:	2301      	movs	r3, #1
 80070f0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	09db      	lsrs	r3, r3, #7
 80070f6:	f003 0301 	and.w	r3, r3, #1
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d103      	bne.n	8007106 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	68db      	ldr	r3, [r3, #12]
 8007102:	81bb      	strh	r3, [r7, #12]
 8007104:	e002      	b.n	800710c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	699b      	ldr	r3, [r3, #24]
 800710a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2200      	movs	r2, #0
 8007110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8007114:	89ba      	ldrh	r2, [r7, #12]
 8007116:	7bfb      	ldrb	r3, [r7, #15]
 8007118:	4619      	mov	r1, r3
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f7ff f95d 	bl	80063da <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007120:	e008      	b.n	8007134 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f06f 0202 	mvn.w	r2, #2
 800712a:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2200      	movs	r2, #0
 8007130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8007134:	bf00      	nop
 8007136:	3710      	adds	r7, #16
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}

0800713c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b084      	sub	sp, #16
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800714a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	685a      	ldr	r2, [r3, #4]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800715a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800715c:	2300      	movs	r3, #0
 800715e:	60bb      	str	r3, [r7, #8]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	695b      	ldr	r3, [r3, #20]
 8007166:	60bb      	str	r3, [r7, #8]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	681a      	ldr	r2, [r3, #0]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f042 0201 	orr.w	r2, r2, #1
 8007176:	601a      	str	r2, [r3, #0]
 8007178:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	681a      	ldr	r2, [r3, #0]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007188:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007194:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007198:	d172      	bne.n	8007280 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800719a:	7bfb      	ldrb	r3, [r7, #15]
 800719c:	2b22      	cmp	r3, #34	; 0x22
 800719e:	d002      	beq.n	80071a6 <I2C_Slave_STOPF+0x6a>
 80071a0:	7bfb      	ldrb	r3, [r7, #15]
 80071a2:	2b2a      	cmp	r3, #42	; 0x2a
 80071a4:	d135      	bne.n	8007212 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	b29a      	uxth	r2, r3
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071b8:	b29b      	uxth	r3, r3
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d005      	beq.n	80071ca <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071c2:	f043 0204 	orr.w	r2, r3, #4
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	685a      	ldr	r2, [r3, #4]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80071d8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071de:	4618      	mov	r0, r3
 80071e0:	f7fd ff11 	bl	8005006 <HAL_DMA_GetState>
 80071e4:	4603      	mov	r3, r0
 80071e6:	2b01      	cmp	r3, #1
 80071e8:	d049      	beq.n	800727e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ee:	4a69      	ldr	r2, [pc, #420]	; (8007394 <I2C_Slave_STOPF+0x258>)
 80071f0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071f6:	4618      	mov	r0, r3
 80071f8:	f7fd fee3 	bl	8004fc2 <HAL_DMA_Abort_IT>
 80071fc:	4603      	mov	r3, r0
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d03d      	beq.n	800727e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007206:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007208:	687a      	ldr	r2, [r7, #4]
 800720a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800720c:	4610      	mov	r0, r2
 800720e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007210:	e035      	b.n	800727e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	685b      	ldr	r3, [r3, #4]
 800721a:	b29a      	uxth	r2, r3
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007224:	b29b      	uxth	r3, r3
 8007226:	2b00      	cmp	r3, #0
 8007228:	d005      	beq.n	8007236 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800722e:	f043 0204 	orr.w	r2, r3, #4
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	685a      	ldr	r2, [r3, #4]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007244:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800724a:	4618      	mov	r0, r3
 800724c:	f7fd fedb 	bl	8005006 <HAL_DMA_GetState>
 8007250:	4603      	mov	r3, r0
 8007252:	2b01      	cmp	r3, #1
 8007254:	d014      	beq.n	8007280 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800725a:	4a4e      	ldr	r2, [pc, #312]	; (8007394 <I2C_Slave_STOPF+0x258>)
 800725c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007262:	4618      	mov	r0, r3
 8007264:	f7fd fead 	bl	8004fc2 <HAL_DMA_Abort_IT>
 8007268:	4603      	mov	r3, r0
 800726a:	2b00      	cmp	r3, #0
 800726c:	d008      	beq.n	8007280 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007272:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007274:	687a      	ldr	r2, [r7, #4]
 8007276:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007278:	4610      	mov	r0, r2
 800727a:	4798      	blx	r3
 800727c:	e000      	b.n	8007280 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800727e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007284:	b29b      	uxth	r3, r3
 8007286:	2b00      	cmp	r3, #0
 8007288:	d03e      	beq.n	8007308 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	695b      	ldr	r3, [r3, #20]
 8007290:	f003 0304 	and.w	r3, r3, #4
 8007294:	2b04      	cmp	r3, #4
 8007296:	d112      	bne.n	80072be <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	691a      	ldr	r2, [r3, #16]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a2:	b2d2      	uxtb	r2, r2
 80072a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072aa:	1c5a      	adds	r2, r3, #1
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072b4:	b29b      	uxth	r3, r3
 80072b6:	3b01      	subs	r3, #1
 80072b8:	b29a      	uxth	r2, r3
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	695b      	ldr	r3, [r3, #20]
 80072c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072c8:	2b40      	cmp	r3, #64	; 0x40
 80072ca:	d112      	bne.n	80072f2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	691a      	ldr	r2, [r3, #16]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d6:	b2d2      	uxtb	r2, r2
 80072d8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072de:	1c5a      	adds	r2, r3, #1
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072e8:	b29b      	uxth	r3, r3
 80072ea:	3b01      	subs	r3, #1
 80072ec:	b29a      	uxth	r2, r3
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072f6:	b29b      	uxth	r3, r3
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d005      	beq.n	8007308 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007300:	f043 0204 	orr.w	r2, r3, #4
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800730c:	2b00      	cmp	r3, #0
 800730e:	d003      	beq.n	8007318 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f000 f843 	bl	800739c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8007316:	e039      	b.n	800738c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007318:	7bfb      	ldrb	r3, [r7, #15]
 800731a:	2b2a      	cmp	r3, #42	; 0x2a
 800731c:	d109      	bne.n	8007332 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2200      	movs	r2, #0
 8007322:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2228      	movs	r2, #40	; 0x28
 8007328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f7ff f84a 	bl	80063c6 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007338:	b2db      	uxtb	r3, r3
 800733a:	2b28      	cmp	r3, #40	; 0x28
 800733c:	d111      	bne.n	8007362 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	4a15      	ldr	r2, [pc, #84]	; (8007398 <I2C_Slave_STOPF+0x25c>)
 8007342:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2200      	movs	r2, #0
 8007348:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2220      	movs	r2, #32
 800734e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2200      	movs	r2, #0
 8007356:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f7ff f84b 	bl	80063f6 <HAL_I2C_ListenCpltCallback>
}
 8007360:	e014      	b.n	800738c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007366:	2b22      	cmp	r3, #34	; 0x22
 8007368:	d002      	beq.n	8007370 <I2C_Slave_STOPF+0x234>
 800736a:	7bfb      	ldrb	r3, [r7, #15]
 800736c:	2b22      	cmp	r3, #34	; 0x22
 800736e:	d10d      	bne.n	800738c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2200      	movs	r2, #0
 8007374:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2220      	movs	r2, #32
 800737a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2200      	movs	r2, #0
 8007382:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f7ff f81d 	bl	80063c6 <HAL_I2C_SlaveRxCpltCallback>
}
 800738c:	bf00      	nop
 800738e:	3710      	adds	r7, #16
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}
 8007394:	080078a1 	.word	0x080078a1
 8007398:	ffff0000 	.word	0xffff0000

0800739c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b084      	sub	sp, #16
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073aa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80073b2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80073b4:	7bbb      	ldrb	r3, [r7, #14]
 80073b6:	2b10      	cmp	r3, #16
 80073b8:	d002      	beq.n	80073c0 <I2C_ITError+0x24>
 80073ba:	7bbb      	ldrb	r3, [r7, #14]
 80073bc:	2b40      	cmp	r3, #64	; 0x40
 80073be:	d10a      	bne.n	80073d6 <I2C_ITError+0x3a>
 80073c0:	7bfb      	ldrb	r3, [r7, #15]
 80073c2:	2b22      	cmp	r3, #34	; 0x22
 80073c4:	d107      	bne.n	80073d6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	681a      	ldr	r2, [r3, #0]
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80073d4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80073d6:	7bfb      	ldrb	r3, [r7, #15]
 80073d8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80073dc:	2b28      	cmp	r3, #40	; 0x28
 80073de:	d107      	bne.n	80073f0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2200      	movs	r2, #0
 80073e4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2228      	movs	r2, #40	; 0x28
 80073ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80073ee:	e015      	b.n	800741c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073fe:	d00a      	beq.n	8007416 <I2C_ITError+0x7a>
 8007400:	7bfb      	ldrb	r3, [r7, #15]
 8007402:	2b60      	cmp	r3, #96	; 0x60
 8007404:	d007      	beq.n	8007416 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2220      	movs	r2, #32
 800740a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2200      	movs	r2, #0
 8007412:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2200      	movs	r2, #0
 800741a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007426:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800742a:	d162      	bne.n	80074f2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	685a      	ldr	r2, [r3, #4]
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800743a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007440:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007444:	b2db      	uxtb	r3, r3
 8007446:	2b01      	cmp	r3, #1
 8007448:	d020      	beq.n	800748c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800744e:	4a6a      	ldr	r2, [pc, #424]	; (80075f8 <I2C_ITError+0x25c>)
 8007450:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007456:	4618      	mov	r0, r3
 8007458:	f7fd fdb3 	bl	8004fc2 <HAL_DMA_Abort_IT>
 800745c:	4603      	mov	r3, r0
 800745e:	2b00      	cmp	r3, #0
 8007460:	f000 8089 	beq.w	8007576 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	681a      	ldr	r2, [r3, #0]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f022 0201 	bic.w	r2, r2, #1
 8007472:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2220      	movs	r2, #32
 8007478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007480:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007482:	687a      	ldr	r2, [r7, #4]
 8007484:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007486:	4610      	mov	r0, r2
 8007488:	4798      	blx	r3
 800748a:	e074      	b.n	8007576 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007490:	4a59      	ldr	r2, [pc, #356]	; (80075f8 <I2C_ITError+0x25c>)
 8007492:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007498:	4618      	mov	r0, r3
 800749a:	f7fd fd92 	bl	8004fc2 <HAL_DMA_Abort_IT>
 800749e:	4603      	mov	r3, r0
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d068      	beq.n	8007576 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	695b      	ldr	r3, [r3, #20]
 80074aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074ae:	2b40      	cmp	r3, #64	; 0x40
 80074b0:	d10b      	bne.n	80074ca <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	691a      	ldr	r2, [r3, #16]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074bc:	b2d2      	uxtb	r2, r2
 80074be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c4:	1c5a      	adds	r2, r3, #1
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	681a      	ldr	r2, [r3, #0]
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f022 0201 	bic.w	r2, r2, #1
 80074d8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2220      	movs	r2, #32
 80074de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074e8:	687a      	ldr	r2, [r7, #4]
 80074ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80074ec:	4610      	mov	r0, r2
 80074ee:	4798      	blx	r3
 80074f0:	e041      	b.n	8007576 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074f8:	b2db      	uxtb	r3, r3
 80074fa:	2b60      	cmp	r3, #96	; 0x60
 80074fc:	d125      	bne.n	800754a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2220      	movs	r2, #32
 8007502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2200      	movs	r2, #0
 800750a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	695b      	ldr	r3, [r3, #20]
 8007512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007516:	2b40      	cmp	r3, #64	; 0x40
 8007518:	d10b      	bne.n	8007532 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	691a      	ldr	r2, [r3, #16]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007524:	b2d2      	uxtb	r2, r2
 8007526:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800752c:	1c5a      	adds	r2, r3, #1
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	681a      	ldr	r2, [r3, #0]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f022 0201 	bic.w	r2, r2, #1
 8007540:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f7fe ff7f 	bl	8006446 <HAL_I2C_AbortCpltCallback>
 8007548:	e015      	b.n	8007576 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	695b      	ldr	r3, [r3, #20]
 8007550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007554:	2b40      	cmp	r3, #64	; 0x40
 8007556:	d10b      	bne.n	8007570 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	691a      	ldr	r2, [r3, #16]
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007562:	b2d2      	uxtb	r2, r2
 8007564:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800756a:	1c5a      	adds	r2, r3, #1
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f7fe ff5e 	bl	8006432 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800757a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	f003 0301 	and.w	r3, r3, #1
 8007582:	2b00      	cmp	r3, #0
 8007584:	d10e      	bne.n	80075a4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800758c:	2b00      	cmp	r3, #0
 800758e:	d109      	bne.n	80075a4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007596:	2b00      	cmp	r3, #0
 8007598:	d104      	bne.n	80075a4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d007      	beq.n	80075b4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	685a      	ldr	r2, [r3, #4]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80075b2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075ba:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075c0:	f003 0304 	and.w	r3, r3, #4
 80075c4:	2b04      	cmp	r3, #4
 80075c6:	d113      	bne.n	80075f0 <I2C_ITError+0x254>
 80075c8:	7bfb      	ldrb	r3, [r7, #15]
 80075ca:	2b28      	cmp	r3, #40	; 0x28
 80075cc:	d110      	bne.n	80075f0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	4a0a      	ldr	r2, [pc, #40]	; (80075fc <I2C_ITError+0x260>)
 80075d2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2200      	movs	r2, #0
 80075d8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2220      	movs	r2, #32
 80075de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2200      	movs	r2, #0
 80075e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f7fe ff03 	bl	80063f6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80075f0:	bf00      	nop
 80075f2:	3710      	adds	r7, #16
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}
 80075f8:	080078a1 	.word	0x080078a1
 80075fc:	ffff0000 	.word	0xffff0000

08007600 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b088      	sub	sp, #32
 8007604:	af02      	add	r7, sp, #8
 8007606:	60f8      	str	r0, [r7, #12]
 8007608:	607a      	str	r2, [r7, #4]
 800760a:	603b      	str	r3, [r7, #0]
 800760c:	460b      	mov	r3, r1
 800760e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007614:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	2b08      	cmp	r3, #8
 800761a:	d006      	beq.n	800762a <I2C_MasterRequestWrite+0x2a>
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	2b01      	cmp	r3, #1
 8007620:	d003      	beq.n	800762a <I2C_MasterRequestWrite+0x2a>
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007628:	d108      	bne.n	800763c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	681a      	ldr	r2, [r3, #0]
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007638:	601a      	str	r2, [r3, #0]
 800763a:	e00b      	b.n	8007654 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007640:	2b12      	cmp	r3, #18
 8007642:	d107      	bne.n	8007654 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	681a      	ldr	r2, [r3, #0]
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007652:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	9300      	str	r3, [sp, #0]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2200      	movs	r2, #0
 800765c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007660:	68f8      	ldr	r0, [r7, #12]
 8007662:	f000 f9c5 	bl	80079f0 <I2C_WaitOnFlagUntilTimeout>
 8007666:	4603      	mov	r3, r0
 8007668:	2b00      	cmp	r3, #0
 800766a:	d00d      	beq.n	8007688 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007676:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800767a:	d103      	bne.n	8007684 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007682:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007684:	2303      	movs	r3, #3
 8007686:	e035      	b.n	80076f4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	691b      	ldr	r3, [r3, #16]
 800768c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007690:	d108      	bne.n	80076a4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007692:	897b      	ldrh	r3, [r7, #10]
 8007694:	b2db      	uxtb	r3, r3
 8007696:	461a      	mov	r2, r3
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80076a0:	611a      	str	r2, [r3, #16]
 80076a2:	e01b      	b.n	80076dc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80076a4:	897b      	ldrh	r3, [r7, #10]
 80076a6:	11db      	asrs	r3, r3, #7
 80076a8:	b2db      	uxtb	r3, r3
 80076aa:	f003 0306 	and.w	r3, r3, #6
 80076ae:	b2db      	uxtb	r3, r3
 80076b0:	f063 030f 	orn	r3, r3, #15
 80076b4:	b2da      	uxtb	r2, r3
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	687a      	ldr	r2, [r7, #4]
 80076c0:	490e      	ldr	r1, [pc, #56]	; (80076fc <I2C_MasterRequestWrite+0xfc>)
 80076c2:	68f8      	ldr	r0, [r7, #12]
 80076c4:	f000 f9eb 	bl	8007a9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80076c8:	4603      	mov	r3, r0
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d001      	beq.n	80076d2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80076ce:	2301      	movs	r3, #1
 80076d0:	e010      	b.n	80076f4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80076d2:	897b      	ldrh	r3, [r7, #10]
 80076d4:	b2da      	uxtb	r2, r3
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	687a      	ldr	r2, [r7, #4]
 80076e0:	4907      	ldr	r1, [pc, #28]	; (8007700 <I2C_MasterRequestWrite+0x100>)
 80076e2:	68f8      	ldr	r0, [r7, #12]
 80076e4:	f000 f9db 	bl	8007a9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80076e8:	4603      	mov	r3, r0
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d001      	beq.n	80076f2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80076ee:	2301      	movs	r3, #1
 80076f0:	e000      	b.n	80076f4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80076f2:	2300      	movs	r3, #0
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	3718      	adds	r7, #24
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}
 80076fc:	00010008 	.word	0x00010008
 8007700:	00010002 	.word	0x00010002

08007704 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b088      	sub	sp, #32
 8007708:	af02      	add	r7, sp, #8
 800770a:	60f8      	str	r0, [r7, #12]
 800770c:	607a      	str	r2, [r7, #4]
 800770e:	603b      	str	r3, [r7, #0]
 8007710:	460b      	mov	r3, r1
 8007712:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007718:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	681a      	ldr	r2, [r3, #0]
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007728:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	2b08      	cmp	r3, #8
 800772e:	d006      	beq.n	800773e <I2C_MasterRequestRead+0x3a>
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	2b01      	cmp	r3, #1
 8007734:	d003      	beq.n	800773e <I2C_MasterRequestRead+0x3a>
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800773c:	d108      	bne.n	8007750 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	681a      	ldr	r2, [r3, #0]
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800774c:	601a      	str	r2, [r3, #0]
 800774e:	e00b      	b.n	8007768 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007754:	2b11      	cmp	r3, #17
 8007756:	d107      	bne.n	8007768 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	681a      	ldr	r2, [r3, #0]
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007766:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	9300      	str	r3, [sp, #0]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2200      	movs	r2, #0
 8007770:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007774:	68f8      	ldr	r0, [r7, #12]
 8007776:	f000 f93b 	bl	80079f0 <I2C_WaitOnFlagUntilTimeout>
 800777a:	4603      	mov	r3, r0
 800777c:	2b00      	cmp	r3, #0
 800777e:	d00d      	beq.n	800779c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800778a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800778e:	d103      	bne.n	8007798 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007796:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007798:	2303      	movs	r3, #3
 800779a:	e079      	b.n	8007890 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	691b      	ldr	r3, [r3, #16]
 80077a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80077a4:	d108      	bne.n	80077b8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80077a6:	897b      	ldrh	r3, [r7, #10]
 80077a8:	b2db      	uxtb	r3, r3
 80077aa:	f043 0301 	orr.w	r3, r3, #1
 80077ae:	b2da      	uxtb	r2, r3
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	611a      	str	r2, [r3, #16]
 80077b6:	e05f      	b.n	8007878 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80077b8:	897b      	ldrh	r3, [r7, #10]
 80077ba:	11db      	asrs	r3, r3, #7
 80077bc:	b2db      	uxtb	r3, r3
 80077be:	f003 0306 	and.w	r3, r3, #6
 80077c2:	b2db      	uxtb	r3, r3
 80077c4:	f063 030f 	orn	r3, r3, #15
 80077c8:	b2da      	uxtb	r2, r3
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	687a      	ldr	r2, [r7, #4]
 80077d4:	4930      	ldr	r1, [pc, #192]	; (8007898 <I2C_MasterRequestRead+0x194>)
 80077d6:	68f8      	ldr	r0, [r7, #12]
 80077d8:	f000 f961 	bl	8007a9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80077dc:	4603      	mov	r3, r0
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d001      	beq.n	80077e6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80077e2:	2301      	movs	r3, #1
 80077e4:	e054      	b.n	8007890 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80077e6:	897b      	ldrh	r3, [r7, #10]
 80077e8:	b2da      	uxtb	r2, r3
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	687a      	ldr	r2, [r7, #4]
 80077f4:	4929      	ldr	r1, [pc, #164]	; (800789c <I2C_MasterRequestRead+0x198>)
 80077f6:	68f8      	ldr	r0, [r7, #12]
 80077f8:	f000 f951 	bl	8007a9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80077fc:	4603      	mov	r3, r0
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d001      	beq.n	8007806 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8007802:	2301      	movs	r3, #1
 8007804:	e044      	b.n	8007890 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007806:	2300      	movs	r3, #0
 8007808:	613b      	str	r3, [r7, #16]
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	695b      	ldr	r3, [r3, #20]
 8007810:	613b      	str	r3, [r7, #16]
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	699b      	ldr	r3, [r3, #24]
 8007818:	613b      	str	r3, [r7, #16]
 800781a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	681a      	ldr	r2, [r3, #0]
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800782a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	9300      	str	r3, [sp, #0]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2200      	movs	r2, #0
 8007834:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007838:	68f8      	ldr	r0, [r7, #12]
 800783a:	f000 f8d9 	bl	80079f0 <I2C_WaitOnFlagUntilTimeout>
 800783e:	4603      	mov	r3, r0
 8007840:	2b00      	cmp	r3, #0
 8007842:	d00d      	beq.n	8007860 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800784e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007852:	d103      	bne.n	800785c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	f44f 7200 	mov.w	r2, #512	; 0x200
 800785a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800785c:	2303      	movs	r3, #3
 800785e:	e017      	b.n	8007890 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8007860:	897b      	ldrh	r3, [r7, #10]
 8007862:	11db      	asrs	r3, r3, #7
 8007864:	b2db      	uxtb	r3, r3
 8007866:	f003 0306 	and.w	r3, r3, #6
 800786a:	b2db      	uxtb	r3, r3
 800786c:	f063 030e 	orn	r3, r3, #14
 8007870:	b2da      	uxtb	r2, r3
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	687a      	ldr	r2, [r7, #4]
 800787c:	4907      	ldr	r1, [pc, #28]	; (800789c <I2C_MasterRequestRead+0x198>)
 800787e:	68f8      	ldr	r0, [r7, #12]
 8007880:	f000 f90d 	bl	8007a9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007884:	4603      	mov	r3, r0
 8007886:	2b00      	cmp	r3, #0
 8007888:	d001      	beq.n	800788e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800788a:	2301      	movs	r3, #1
 800788c:	e000      	b.n	8007890 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800788e:	2300      	movs	r3, #0
}
 8007890:	4618      	mov	r0, r3
 8007892:	3718      	adds	r7, #24
 8007894:	46bd      	mov	sp, r7
 8007896:	bd80      	pop	{r7, pc}
 8007898:	00010008 	.word	0x00010008
 800789c:	00010002 	.word	0x00010002

080078a0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b086      	sub	sp, #24
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80078a8:	2300      	movs	r3, #0
 80078aa:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078b0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078b8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80078ba:	4b4b      	ldr	r3, [pc, #300]	; (80079e8 <I2C_DMAAbort+0x148>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	08db      	lsrs	r3, r3, #3
 80078c0:	4a4a      	ldr	r2, [pc, #296]	; (80079ec <I2C_DMAAbort+0x14c>)
 80078c2:	fba2 2303 	umull	r2, r3, r2, r3
 80078c6:	0a1a      	lsrs	r2, r3, #8
 80078c8:	4613      	mov	r3, r2
 80078ca:	009b      	lsls	r3, r3, #2
 80078cc:	4413      	add	r3, r2
 80078ce:	00da      	lsls	r2, r3, #3
 80078d0:	1ad3      	subs	r3, r2, r3
 80078d2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d106      	bne.n	80078e8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078de:	f043 0220 	orr.w	r2, r3, #32
 80078e2:	697b      	ldr	r3, [r7, #20]
 80078e4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80078e6:	e00a      	b.n	80078fe <I2C_DMAAbort+0x5e>
    }
    count--;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	3b01      	subs	r3, #1
 80078ec:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80078f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078fc:	d0ea      	beq.n	80078d4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007902:	2b00      	cmp	r3, #0
 8007904:	d003      	beq.n	800790e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800790a:	2200      	movs	r2, #0
 800790c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007912:	2b00      	cmp	r3, #0
 8007914:	d003      	beq.n	800791e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800791a:	2200      	movs	r2, #0
 800791c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	681a      	ldr	r2, [r3, #0]
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800792c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	2200      	movs	r2, #0
 8007932:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007938:	2b00      	cmp	r3, #0
 800793a:	d003      	beq.n	8007944 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007940:	2200      	movs	r2, #0
 8007942:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007944:	697b      	ldr	r3, [r7, #20]
 8007946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007948:	2b00      	cmp	r3, #0
 800794a:	d003      	beq.n	8007954 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007950:	2200      	movs	r2, #0
 8007952:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	681a      	ldr	r2, [r3, #0]
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f022 0201 	bic.w	r2, r2, #1
 8007962:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800796a:	b2db      	uxtb	r3, r3
 800796c:	2b60      	cmp	r3, #96	; 0x60
 800796e:	d10e      	bne.n	800798e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	2220      	movs	r2, #32
 8007974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	2200      	movs	r2, #0
 800797c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	2200      	movs	r2, #0
 8007984:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007986:	6978      	ldr	r0, [r7, #20]
 8007988:	f7fe fd5d 	bl	8006446 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800798c:	e027      	b.n	80079de <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800798e:	7cfb      	ldrb	r3, [r7, #19]
 8007990:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007994:	2b28      	cmp	r3, #40	; 0x28
 8007996:	d117      	bne.n	80079c8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	681a      	ldr	r2, [r3, #0]
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f042 0201 	orr.w	r2, r2, #1
 80079a6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	681a      	ldr	r2, [r3, #0]
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80079b6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	2200      	movs	r2, #0
 80079bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	2228      	movs	r2, #40	; 0x28
 80079c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80079c6:	e007      	b.n	80079d8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	2220      	movs	r2, #32
 80079cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	2200      	movs	r2, #0
 80079d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80079d8:	6978      	ldr	r0, [r7, #20]
 80079da:	f7fe fd2a 	bl	8006432 <HAL_I2C_ErrorCallback>
}
 80079de:	bf00      	nop
 80079e0:	3718      	adds	r7, #24
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}
 80079e6:	bf00      	nop
 80079e8:	20000028 	.word	0x20000028
 80079ec:	14f8b589 	.word	0x14f8b589

080079f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b084      	sub	sp, #16
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	60f8      	str	r0, [r7, #12]
 80079f8:	60b9      	str	r1, [r7, #8]
 80079fa:	603b      	str	r3, [r7, #0]
 80079fc:	4613      	mov	r3, r2
 80079fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007a00:	e025      	b.n	8007a4e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a08:	d021      	beq.n	8007a4e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a0a:	f7fc fc23 	bl	8004254 <HAL_GetTick>
 8007a0e:	4602      	mov	r2, r0
 8007a10:	69bb      	ldr	r3, [r7, #24]
 8007a12:	1ad3      	subs	r3, r2, r3
 8007a14:	683a      	ldr	r2, [r7, #0]
 8007a16:	429a      	cmp	r2, r3
 8007a18:	d302      	bcc.n	8007a20 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d116      	bne.n	8007a4e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	2200      	movs	r2, #0
 8007a24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	2220      	movs	r2, #32
 8007a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	2200      	movs	r2, #0
 8007a32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a3a:	f043 0220 	orr.w	r2, r3, #32
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	2200      	movs	r2, #0
 8007a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	e023      	b.n	8007a96 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	0c1b      	lsrs	r3, r3, #16
 8007a52:	b2db      	uxtb	r3, r3
 8007a54:	2b01      	cmp	r3, #1
 8007a56:	d10d      	bne.n	8007a74 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	695b      	ldr	r3, [r3, #20]
 8007a5e:	43da      	mvns	r2, r3
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	4013      	ands	r3, r2
 8007a64:	b29b      	uxth	r3, r3
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	bf0c      	ite	eq
 8007a6a:	2301      	moveq	r3, #1
 8007a6c:	2300      	movne	r3, #0
 8007a6e:	b2db      	uxtb	r3, r3
 8007a70:	461a      	mov	r2, r3
 8007a72:	e00c      	b.n	8007a8e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	699b      	ldr	r3, [r3, #24]
 8007a7a:	43da      	mvns	r2, r3
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	4013      	ands	r3, r2
 8007a80:	b29b      	uxth	r3, r3
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	bf0c      	ite	eq
 8007a86:	2301      	moveq	r3, #1
 8007a88:	2300      	movne	r3, #0
 8007a8a:	b2db      	uxtb	r3, r3
 8007a8c:	461a      	mov	r2, r3
 8007a8e:	79fb      	ldrb	r3, [r7, #7]
 8007a90:	429a      	cmp	r2, r3
 8007a92:	d0b6      	beq.n	8007a02 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007a94:	2300      	movs	r3, #0
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3710      	adds	r7, #16
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}

08007a9e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007a9e:	b580      	push	{r7, lr}
 8007aa0:	b084      	sub	sp, #16
 8007aa2:	af00      	add	r7, sp, #0
 8007aa4:	60f8      	str	r0, [r7, #12]
 8007aa6:	60b9      	str	r1, [r7, #8]
 8007aa8:	607a      	str	r2, [r7, #4]
 8007aaa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007aac:	e051      	b.n	8007b52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	695b      	ldr	r3, [r3, #20]
 8007ab4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ab8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007abc:	d123      	bne.n	8007b06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	681a      	ldr	r2, [r3, #0]
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007acc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007ad6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	2200      	movs	r2, #0
 8007adc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	2220      	movs	r2, #32
 8007ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007af2:	f043 0204 	orr.w	r2, r3, #4
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	2200      	movs	r2, #0
 8007afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007b02:	2301      	movs	r3, #1
 8007b04:	e046      	b.n	8007b94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b0c:	d021      	beq.n	8007b52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b0e:	f7fc fba1 	bl	8004254 <HAL_GetTick>
 8007b12:	4602      	mov	r2, r0
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	1ad3      	subs	r3, r2, r3
 8007b18:	687a      	ldr	r2, [r7, #4]
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	d302      	bcc.n	8007b24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d116      	bne.n	8007b52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	2200      	movs	r2, #0
 8007b28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	2220      	movs	r2, #32
 8007b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	2200      	movs	r2, #0
 8007b36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b3e:	f043 0220 	orr.w	r2, r3, #32
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007b4e:	2301      	movs	r3, #1
 8007b50:	e020      	b.n	8007b94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	0c1b      	lsrs	r3, r3, #16
 8007b56:	b2db      	uxtb	r3, r3
 8007b58:	2b01      	cmp	r3, #1
 8007b5a:	d10c      	bne.n	8007b76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	695b      	ldr	r3, [r3, #20]
 8007b62:	43da      	mvns	r2, r3
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	4013      	ands	r3, r2
 8007b68:	b29b      	uxth	r3, r3
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	bf14      	ite	ne
 8007b6e:	2301      	movne	r3, #1
 8007b70:	2300      	moveq	r3, #0
 8007b72:	b2db      	uxtb	r3, r3
 8007b74:	e00b      	b.n	8007b8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	699b      	ldr	r3, [r3, #24]
 8007b7c:	43da      	mvns	r2, r3
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	4013      	ands	r3, r2
 8007b82:	b29b      	uxth	r3, r3
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	bf14      	ite	ne
 8007b88:	2301      	movne	r3, #1
 8007b8a:	2300      	moveq	r3, #0
 8007b8c:	b2db      	uxtb	r3, r3
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d18d      	bne.n	8007aae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007b92:	2300      	movs	r3, #0
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	3710      	adds	r7, #16
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bd80      	pop	{r7, pc}

08007b9c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b084      	sub	sp, #16
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	60f8      	str	r0, [r7, #12]
 8007ba4:	60b9      	str	r1, [r7, #8]
 8007ba6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007ba8:	e02d      	b.n	8007c06 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007baa:	68f8      	ldr	r0, [r7, #12]
 8007bac:	f000 f900 	bl	8007db0 <I2C_IsAcknowledgeFailed>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d001      	beq.n	8007bba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	e02d      	b.n	8007c16 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007bc0:	d021      	beq.n	8007c06 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bc2:	f7fc fb47 	bl	8004254 <HAL_GetTick>
 8007bc6:	4602      	mov	r2, r0
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	1ad3      	subs	r3, r2, r3
 8007bcc:	68ba      	ldr	r2, [r7, #8]
 8007bce:	429a      	cmp	r2, r3
 8007bd0:	d302      	bcc.n	8007bd8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d116      	bne.n	8007c06 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2220      	movs	r2, #32
 8007be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	2200      	movs	r2, #0
 8007bea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bf2:	f043 0220 	orr.w	r2, r3, #32
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007c02:	2301      	movs	r3, #1
 8007c04:	e007      	b.n	8007c16 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	695b      	ldr	r3, [r3, #20]
 8007c0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c10:	2b80      	cmp	r3, #128	; 0x80
 8007c12:	d1ca      	bne.n	8007baa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007c14:	2300      	movs	r3, #0
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3710      	adds	r7, #16
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}

08007c1e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007c1e:	b580      	push	{r7, lr}
 8007c20:	b084      	sub	sp, #16
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	60f8      	str	r0, [r7, #12]
 8007c26:	60b9      	str	r1, [r7, #8]
 8007c28:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007c2a:	e02d      	b.n	8007c88 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007c2c:	68f8      	ldr	r0, [r7, #12]
 8007c2e:	f000 f8bf 	bl	8007db0 <I2C_IsAcknowledgeFailed>
 8007c32:	4603      	mov	r3, r0
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d001      	beq.n	8007c3c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007c38:	2301      	movs	r3, #1
 8007c3a:	e02d      	b.n	8007c98 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c42:	d021      	beq.n	8007c88 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c44:	f7fc fb06 	bl	8004254 <HAL_GetTick>
 8007c48:	4602      	mov	r2, r0
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	1ad3      	subs	r3, r2, r3
 8007c4e:	68ba      	ldr	r2, [r7, #8]
 8007c50:	429a      	cmp	r2, r3
 8007c52:	d302      	bcc.n	8007c5a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d116      	bne.n	8007c88 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	2220      	movs	r2, #32
 8007c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c74:	f043 0220 	orr.w	r2, r3, #32
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007c84:	2301      	movs	r3, #1
 8007c86:	e007      	b.n	8007c98 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	695b      	ldr	r3, [r3, #20]
 8007c8e:	f003 0304 	and.w	r3, r3, #4
 8007c92:	2b04      	cmp	r3, #4
 8007c94:	d1ca      	bne.n	8007c2c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007c96:	2300      	movs	r3, #0
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3710      	adds	r7, #16
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}

08007ca0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b085      	sub	sp, #20
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8007cac:	4b13      	ldr	r3, [pc, #76]	; (8007cfc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	08db      	lsrs	r3, r3, #3
 8007cb2:	4a13      	ldr	r2, [pc, #76]	; (8007d00 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8007cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8007cb8:	0a1a      	lsrs	r2, r3, #8
 8007cba:	4613      	mov	r3, r2
 8007cbc:	009b      	lsls	r3, r3, #2
 8007cbe:	4413      	add	r3, r2
 8007cc0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	3b01      	subs	r3, #1
 8007cc6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d107      	bne.n	8007cde <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cd2:	f043 0220 	orr.w	r2, r3, #32
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007cda:	2301      	movs	r3, #1
 8007cdc:	e008      	b.n	8007cf0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ce8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cec:	d0e9      	beq.n	8007cc2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8007cee:	2300      	movs	r3, #0
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	3714      	adds	r7, #20
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfa:	4770      	bx	lr
 8007cfc:	20000028 	.word	0x20000028
 8007d00:	14f8b589 	.word	0x14f8b589

08007d04 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b084      	sub	sp, #16
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	60f8      	str	r0, [r7, #12]
 8007d0c:	60b9      	str	r1, [r7, #8]
 8007d0e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007d10:	e042      	b.n	8007d98 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	695b      	ldr	r3, [r3, #20]
 8007d18:	f003 0310 	and.w	r3, r3, #16
 8007d1c:	2b10      	cmp	r3, #16
 8007d1e:	d119      	bne.n	8007d54 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f06f 0210 	mvn.w	r2, #16
 8007d28:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	2220      	movs	r2, #32
 8007d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007d50:	2301      	movs	r3, #1
 8007d52:	e029      	b.n	8007da8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d54:	f7fc fa7e 	bl	8004254 <HAL_GetTick>
 8007d58:	4602      	mov	r2, r0
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	1ad3      	subs	r3, r2, r3
 8007d5e:	68ba      	ldr	r2, [r7, #8]
 8007d60:	429a      	cmp	r2, r3
 8007d62:	d302      	bcc.n	8007d6a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d116      	bne.n	8007d98 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	2220      	movs	r2, #32
 8007d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d84:	f043 0220 	orr.w	r2, r3, #32
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007d94:	2301      	movs	r3, #1
 8007d96:	e007      	b.n	8007da8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	695b      	ldr	r3, [r3, #20]
 8007d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007da2:	2b40      	cmp	r3, #64	; 0x40
 8007da4:	d1b5      	bne.n	8007d12 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007da6:	2300      	movs	r3, #0
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	3710      	adds	r7, #16
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}

08007db0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b083      	sub	sp, #12
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	695b      	ldr	r3, [r3, #20]
 8007dbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007dc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007dc6:	d11b      	bne.n	8007e00 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007dd0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2220      	movs	r2, #32
 8007ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2200      	movs	r2, #0
 8007de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dec:	f043 0204 	orr.w	r2, r3, #4
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2200      	movs	r2, #0
 8007df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	e000      	b.n	8007e02 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007e00:	2300      	movs	r3, #0
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	370c      	adds	r7, #12
 8007e06:	46bd      	mov	sp, r7
 8007e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0c:	4770      	bx	lr

08007e0e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8007e0e:	b480      	push	{r7}
 8007e10:	b083      	sub	sp, #12
 8007e12:	af00      	add	r7, sp, #0
 8007e14:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e1a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007e1e:	d103      	bne.n	8007e28 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2201      	movs	r2, #1
 8007e24:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8007e26:	e007      	b.n	8007e38 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e2c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007e30:	d102      	bne.n	8007e38 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2208      	movs	r2, #8
 8007e36:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8007e38:	bf00      	nop
 8007e3a:	370c      	adds	r7, #12
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e42:	4770      	bx	lr

08007e44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b084      	sub	sp, #16
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
 8007e4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d101      	bne.n	8007e58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007e54:	2301      	movs	r3, #1
 8007e56:	e0cc      	b.n	8007ff2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007e58:	4b68      	ldr	r3, [pc, #416]	; (8007ffc <HAL_RCC_ClockConfig+0x1b8>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f003 0307 	and.w	r3, r3, #7
 8007e60:	683a      	ldr	r2, [r7, #0]
 8007e62:	429a      	cmp	r2, r3
 8007e64:	d90c      	bls.n	8007e80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e66:	4b65      	ldr	r3, [pc, #404]	; (8007ffc <HAL_RCC_ClockConfig+0x1b8>)
 8007e68:	683a      	ldr	r2, [r7, #0]
 8007e6a:	b2d2      	uxtb	r2, r2
 8007e6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e6e:	4b63      	ldr	r3, [pc, #396]	; (8007ffc <HAL_RCC_ClockConfig+0x1b8>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f003 0307 	and.w	r3, r3, #7
 8007e76:	683a      	ldr	r2, [r7, #0]
 8007e78:	429a      	cmp	r2, r3
 8007e7a:	d001      	beq.n	8007e80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	e0b8      	b.n	8007ff2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f003 0302 	and.w	r3, r3, #2
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d020      	beq.n	8007ece <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f003 0304 	and.w	r3, r3, #4
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d005      	beq.n	8007ea4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007e98:	4b59      	ldr	r3, [pc, #356]	; (8008000 <HAL_RCC_ClockConfig+0x1bc>)
 8007e9a:	689b      	ldr	r3, [r3, #8]
 8007e9c:	4a58      	ldr	r2, [pc, #352]	; (8008000 <HAL_RCC_ClockConfig+0x1bc>)
 8007e9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007ea2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f003 0308 	and.w	r3, r3, #8
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d005      	beq.n	8007ebc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007eb0:	4b53      	ldr	r3, [pc, #332]	; (8008000 <HAL_RCC_ClockConfig+0x1bc>)
 8007eb2:	689b      	ldr	r3, [r3, #8]
 8007eb4:	4a52      	ldr	r2, [pc, #328]	; (8008000 <HAL_RCC_ClockConfig+0x1bc>)
 8007eb6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007eba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007ebc:	4b50      	ldr	r3, [pc, #320]	; (8008000 <HAL_RCC_ClockConfig+0x1bc>)
 8007ebe:	689b      	ldr	r3, [r3, #8]
 8007ec0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	689b      	ldr	r3, [r3, #8]
 8007ec8:	494d      	ldr	r1, [pc, #308]	; (8008000 <HAL_RCC_ClockConfig+0x1bc>)
 8007eca:	4313      	orrs	r3, r2
 8007ecc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f003 0301 	and.w	r3, r3, #1
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d044      	beq.n	8007f64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	2b01      	cmp	r3, #1
 8007ee0:	d107      	bne.n	8007ef2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007ee2:	4b47      	ldr	r3, [pc, #284]	; (8008000 <HAL_RCC_ClockConfig+0x1bc>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d119      	bne.n	8007f22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007eee:	2301      	movs	r3, #1
 8007ef0:	e07f      	b.n	8007ff2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	2b02      	cmp	r3, #2
 8007ef8:	d003      	beq.n	8007f02 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007efe:	2b03      	cmp	r3, #3
 8007f00:	d107      	bne.n	8007f12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f02:	4b3f      	ldr	r3, [pc, #252]	; (8008000 <HAL_RCC_ClockConfig+0x1bc>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d109      	bne.n	8007f22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007f0e:	2301      	movs	r3, #1
 8007f10:	e06f      	b.n	8007ff2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f12:	4b3b      	ldr	r3, [pc, #236]	; (8008000 <HAL_RCC_ClockConfig+0x1bc>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f003 0302 	and.w	r3, r3, #2
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d101      	bne.n	8007f22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007f1e:	2301      	movs	r3, #1
 8007f20:	e067      	b.n	8007ff2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007f22:	4b37      	ldr	r3, [pc, #220]	; (8008000 <HAL_RCC_ClockConfig+0x1bc>)
 8007f24:	689b      	ldr	r3, [r3, #8]
 8007f26:	f023 0203 	bic.w	r2, r3, #3
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	685b      	ldr	r3, [r3, #4]
 8007f2e:	4934      	ldr	r1, [pc, #208]	; (8008000 <HAL_RCC_ClockConfig+0x1bc>)
 8007f30:	4313      	orrs	r3, r2
 8007f32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007f34:	f7fc f98e 	bl	8004254 <HAL_GetTick>
 8007f38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f3a:	e00a      	b.n	8007f52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007f3c:	f7fc f98a 	bl	8004254 <HAL_GetTick>
 8007f40:	4602      	mov	r2, r0
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	1ad3      	subs	r3, r2, r3
 8007f46:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d901      	bls.n	8007f52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007f4e:	2303      	movs	r3, #3
 8007f50:	e04f      	b.n	8007ff2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f52:	4b2b      	ldr	r3, [pc, #172]	; (8008000 <HAL_RCC_ClockConfig+0x1bc>)
 8007f54:	689b      	ldr	r3, [r3, #8]
 8007f56:	f003 020c 	and.w	r2, r3, #12
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	009b      	lsls	r3, r3, #2
 8007f60:	429a      	cmp	r2, r3
 8007f62:	d1eb      	bne.n	8007f3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007f64:	4b25      	ldr	r3, [pc, #148]	; (8007ffc <HAL_RCC_ClockConfig+0x1b8>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f003 0307 	and.w	r3, r3, #7
 8007f6c:	683a      	ldr	r2, [r7, #0]
 8007f6e:	429a      	cmp	r2, r3
 8007f70:	d20c      	bcs.n	8007f8c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f72:	4b22      	ldr	r3, [pc, #136]	; (8007ffc <HAL_RCC_ClockConfig+0x1b8>)
 8007f74:	683a      	ldr	r2, [r7, #0]
 8007f76:	b2d2      	uxtb	r2, r2
 8007f78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f7a:	4b20      	ldr	r3, [pc, #128]	; (8007ffc <HAL_RCC_ClockConfig+0x1b8>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f003 0307 	and.w	r3, r3, #7
 8007f82:	683a      	ldr	r2, [r7, #0]
 8007f84:	429a      	cmp	r2, r3
 8007f86:	d001      	beq.n	8007f8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007f88:	2301      	movs	r3, #1
 8007f8a:	e032      	b.n	8007ff2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f003 0304 	and.w	r3, r3, #4
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d008      	beq.n	8007faa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007f98:	4b19      	ldr	r3, [pc, #100]	; (8008000 <HAL_RCC_ClockConfig+0x1bc>)
 8007f9a:	689b      	ldr	r3, [r3, #8]
 8007f9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	68db      	ldr	r3, [r3, #12]
 8007fa4:	4916      	ldr	r1, [pc, #88]	; (8008000 <HAL_RCC_ClockConfig+0x1bc>)
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f003 0308 	and.w	r3, r3, #8
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d009      	beq.n	8007fca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007fb6:	4b12      	ldr	r3, [pc, #72]	; (8008000 <HAL_RCC_ClockConfig+0x1bc>)
 8007fb8:	689b      	ldr	r3, [r3, #8]
 8007fba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	691b      	ldr	r3, [r3, #16]
 8007fc2:	00db      	lsls	r3, r3, #3
 8007fc4:	490e      	ldr	r1, [pc, #56]	; (8008000 <HAL_RCC_ClockConfig+0x1bc>)
 8007fc6:	4313      	orrs	r3, r2
 8007fc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007fca:	f000 f889 	bl	80080e0 <HAL_RCC_GetSysClockFreq>
 8007fce:	4602      	mov	r2, r0
 8007fd0:	4b0b      	ldr	r3, [pc, #44]	; (8008000 <HAL_RCC_ClockConfig+0x1bc>)
 8007fd2:	689b      	ldr	r3, [r3, #8]
 8007fd4:	091b      	lsrs	r3, r3, #4
 8007fd6:	f003 030f 	and.w	r3, r3, #15
 8007fda:	490a      	ldr	r1, [pc, #40]	; (8008004 <HAL_RCC_ClockConfig+0x1c0>)
 8007fdc:	5ccb      	ldrb	r3, [r1, r3]
 8007fde:	fa22 f303 	lsr.w	r3, r2, r3
 8007fe2:	4a09      	ldr	r2, [pc, #36]	; (8008008 <HAL_RCC_ClockConfig+0x1c4>)
 8007fe4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007fe6:	4b09      	ldr	r3, [pc, #36]	; (800800c <HAL_RCC_ClockConfig+0x1c8>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	4618      	mov	r0, r3
 8007fec:	f7fc f8ee 	bl	80041cc <HAL_InitTick>

  return HAL_OK;
 8007ff0:	2300      	movs	r3, #0
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3710      	adds	r7, #16
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}
 8007ffa:	bf00      	nop
 8007ffc:	40023c00 	.word	0x40023c00
 8008000:	40023800 	.word	0x40023800
 8008004:	0803fb58 	.word	0x0803fb58
 8008008:	20000028 	.word	0x20000028
 800800c:	20000048 	.word	0x20000048

08008010 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b08c      	sub	sp, #48	; 0x30
 8008014:	af00      	add	r7, sp, #0
 8008016:	60f8      	str	r0, [r7, #12]
 8008018:	60b9      	str	r1, [r7, #8]
 800801a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d129      	bne.n	8008076 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8008022:	2300      	movs	r3, #0
 8008024:	61bb      	str	r3, [r7, #24]
 8008026:	4b2b      	ldr	r3, [pc, #172]	; (80080d4 <HAL_RCC_MCOConfig+0xc4>)
 8008028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800802a:	4a2a      	ldr	r2, [pc, #168]	; (80080d4 <HAL_RCC_MCOConfig+0xc4>)
 800802c:	f043 0301 	orr.w	r3, r3, #1
 8008030:	6313      	str	r3, [r2, #48]	; 0x30
 8008032:	4b28      	ldr	r3, [pc, #160]	; (80080d4 <HAL_RCC_MCOConfig+0xc4>)
 8008034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008036:	f003 0301 	and.w	r3, r3, #1
 800803a:	61bb      	str	r3, [r7, #24]
 800803c:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800803e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008042:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008044:	2302      	movs	r3, #2
 8008046:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008048:	2303      	movs	r3, #3
 800804a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800804c:	2300      	movs	r3, #0
 800804e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8008050:	2300      	movs	r3, #0
 8008052:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8008054:	f107 031c 	add.w	r3, r7, #28
 8008058:	4619      	mov	r1, r3
 800805a:	481f      	ldr	r0, [pc, #124]	; (80080d8 <HAL_RCC_MCOConfig+0xc8>)
 800805c:	f7fd f9fa 	bl	8005454 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8008060:	4b1c      	ldr	r3, [pc, #112]	; (80080d4 <HAL_RCC_MCOConfig+0xc4>)
 8008062:	689b      	ldr	r3, [r3, #8]
 8008064:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8008068:	68b9      	ldr	r1, [r7, #8]
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	430b      	orrs	r3, r1
 800806e:	4919      	ldr	r1, [pc, #100]	; (80080d4 <HAL_RCC_MCOConfig+0xc4>)
 8008070:	4313      	orrs	r3, r2
 8008072:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8008074:	e029      	b.n	80080ca <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8008076:	2300      	movs	r3, #0
 8008078:	617b      	str	r3, [r7, #20]
 800807a:	4b16      	ldr	r3, [pc, #88]	; (80080d4 <HAL_RCC_MCOConfig+0xc4>)
 800807c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800807e:	4a15      	ldr	r2, [pc, #84]	; (80080d4 <HAL_RCC_MCOConfig+0xc4>)
 8008080:	f043 0304 	orr.w	r3, r3, #4
 8008084:	6313      	str	r3, [r2, #48]	; 0x30
 8008086:	4b13      	ldr	r3, [pc, #76]	; (80080d4 <HAL_RCC_MCOConfig+0xc4>)
 8008088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800808a:	f003 0304 	and.w	r3, r3, #4
 800808e:	617b      	str	r3, [r7, #20]
 8008090:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8008092:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008096:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008098:	2302      	movs	r3, #2
 800809a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800809c:	2303      	movs	r3, #3
 800809e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080a0:	2300      	movs	r3, #0
 80080a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80080a4:	2300      	movs	r3, #0
 80080a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80080a8:	f107 031c 	add.w	r3, r7, #28
 80080ac:	4619      	mov	r1, r3
 80080ae:	480b      	ldr	r0, [pc, #44]	; (80080dc <HAL_RCC_MCOConfig+0xcc>)
 80080b0:	f7fd f9d0 	bl	8005454 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 80080b4:	4b07      	ldr	r3, [pc, #28]	; (80080d4 <HAL_RCC_MCOConfig+0xc4>)
 80080b6:	689b      	ldr	r3, [r3, #8]
 80080b8:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	00d9      	lsls	r1, r3, #3
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	430b      	orrs	r3, r1
 80080c4:	4903      	ldr	r1, [pc, #12]	; (80080d4 <HAL_RCC_MCOConfig+0xc4>)
 80080c6:	4313      	orrs	r3, r2
 80080c8:	608b      	str	r3, [r1, #8]
}
 80080ca:	bf00      	nop
 80080cc:	3730      	adds	r7, #48	; 0x30
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}
 80080d2:	bf00      	nop
 80080d4:	40023800 	.word	0x40023800
 80080d8:	40020000 	.word	0x40020000
 80080dc:	40020800 	.word	0x40020800

080080e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80080e0:	b5b0      	push	{r4, r5, r7, lr}
 80080e2:	b084      	sub	sp, #16
 80080e4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80080e6:	2100      	movs	r1, #0
 80080e8:	6079      	str	r1, [r7, #4]
 80080ea:	2100      	movs	r1, #0
 80080ec:	60f9      	str	r1, [r7, #12]
 80080ee:	2100      	movs	r1, #0
 80080f0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80080f2:	2100      	movs	r1, #0
 80080f4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80080f6:	4952      	ldr	r1, [pc, #328]	; (8008240 <HAL_RCC_GetSysClockFreq+0x160>)
 80080f8:	6889      	ldr	r1, [r1, #8]
 80080fa:	f001 010c 	and.w	r1, r1, #12
 80080fe:	2908      	cmp	r1, #8
 8008100:	d00d      	beq.n	800811e <HAL_RCC_GetSysClockFreq+0x3e>
 8008102:	2908      	cmp	r1, #8
 8008104:	f200 8094 	bhi.w	8008230 <HAL_RCC_GetSysClockFreq+0x150>
 8008108:	2900      	cmp	r1, #0
 800810a:	d002      	beq.n	8008112 <HAL_RCC_GetSysClockFreq+0x32>
 800810c:	2904      	cmp	r1, #4
 800810e:	d003      	beq.n	8008118 <HAL_RCC_GetSysClockFreq+0x38>
 8008110:	e08e      	b.n	8008230 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008112:	4b4c      	ldr	r3, [pc, #304]	; (8008244 <HAL_RCC_GetSysClockFreq+0x164>)
 8008114:	60bb      	str	r3, [r7, #8]
       break;
 8008116:	e08e      	b.n	8008236 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008118:	4b4b      	ldr	r3, [pc, #300]	; (8008248 <HAL_RCC_GetSysClockFreq+0x168>)
 800811a:	60bb      	str	r3, [r7, #8]
      break;
 800811c:	e08b      	b.n	8008236 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800811e:	4948      	ldr	r1, [pc, #288]	; (8008240 <HAL_RCC_GetSysClockFreq+0x160>)
 8008120:	6849      	ldr	r1, [r1, #4]
 8008122:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8008126:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008128:	4945      	ldr	r1, [pc, #276]	; (8008240 <HAL_RCC_GetSysClockFreq+0x160>)
 800812a:	6849      	ldr	r1, [r1, #4]
 800812c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8008130:	2900      	cmp	r1, #0
 8008132:	d024      	beq.n	800817e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008134:	4942      	ldr	r1, [pc, #264]	; (8008240 <HAL_RCC_GetSysClockFreq+0x160>)
 8008136:	6849      	ldr	r1, [r1, #4]
 8008138:	0989      	lsrs	r1, r1, #6
 800813a:	4608      	mov	r0, r1
 800813c:	f04f 0100 	mov.w	r1, #0
 8008140:	f240 14ff 	movw	r4, #511	; 0x1ff
 8008144:	f04f 0500 	mov.w	r5, #0
 8008148:	ea00 0204 	and.w	r2, r0, r4
 800814c:	ea01 0305 	and.w	r3, r1, r5
 8008150:	493d      	ldr	r1, [pc, #244]	; (8008248 <HAL_RCC_GetSysClockFreq+0x168>)
 8008152:	fb01 f003 	mul.w	r0, r1, r3
 8008156:	2100      	movs	r1, #0
 8008158:	fb01 f102 	mul.w	r1, r1, r2
 800815c:	1844      	adds	r4, r0, r1
 800815e:	493a      	ldr	r1, [pc, #232]	; (8008248 <HAL_RCC_GetSysClockFreq+0x168>)
 8008160:	fba2 0101 	umull	r0, r1, r2, r1
 8008164:	1863      	adds	r3, r4, r1
 8008166:	4619      	mov	r1, r3
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	461a      	mov	r2, r3
 800816c:	f04f 0300 	mov.w	r3, #0
 8008170:	f7f8 fda6 	bl	8000cc0 <__aeabi_uldivmod>
 8008174:	4602      	mov	r2, r0
 8008176:	460b      	mov	r3, r1
 8008178:	4613      	mov	r3, r2
 800817a:	60fb      	str	r3, [r7, #12]
 800817c:	e04a      	b.n	8008214 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800817e:	4b30      	ldr	r3, [pc, #192]	; (8008240 <HAL_RCC_GetSysClockFreq+0x160>)
 8008180:	685b      	ldr	r3, [r3, #4]
 8008182:	099b      	lsrs	r3, r3, #6
 8008184:	461a      	mov	r2, r3
 8008186:	f04f 0300 	mov.w	r3, #0
 800818a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800818e:	f04f 0100 	mov.w	r1, #0
 8008192:	ea02 0400 	and.w	r4, r2, r0
 8008196:	ea03 0501 	and.w	r5, r3, r1
 800819a:	4620      	mov	r0, r4
 800819c:	4629      	mov	r1, r5
 800819e:	f04f 0200 	mov.w	r2, #0
 80081a2:	f04f 0300 	mov.w	r3, #0
 80081a6:	014b      	lsls	r3, r1, #5
 80081a8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80081ac:	0142      	lsls	r2, r0, #5
 80081ae:	4610      	mov	r0, r2
 80081b0:	4619      	mov	r1, r3
 80081b2:	1b00      	subs	r0, r0, r4
 80081b4:	eb61 0105 	sbc.w	r1, r1, r5
 80081b8:	f04f 0200 	mov.w	r2, #0
 80081bc:	f04f 0300 	mov.w	r3, #0
 80081c0:	018b      	lsls	r3, r1, #6
 80081c2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80081c6:	0182      	lsls	r2, r0, #6
 80081c8:	1a12      	subs	r2, r2, r0
 80081ca:	eb63 0301 	sbc.w	r3, r3, r1
 80081ce:	f04f 0000 	mov.w	r0, #0
 80081d2:	f04f 0100 	mov.w	r1, #0
 80081d6:	00d9      	lsls	r1, r3, #3
 80081d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80081dc:	00d0      	lsls	r0, r2, #3
 80081de:	4602      	mov	r2, r0
 80081e0:	460b      	mov	r3, r1
 80081e2:	1912      	adds	r2, r2, r4
 80081e4:	eb45 0303 	adc.w	r3, r5, r3
 80081e8:	f04f 0000 	mov.w	r0, #0
 80081ec:	f04f 0100 	mov.w	r1, #0
 80081f0:	0299      	lsls	r1, r3, #10
 80081f2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80081f6:	0290      	lsls	r0, r2, #10
 80081f8:	4602      	mov	r2, r0
 80081fa:	460b      	mov	r3, r1
 80081fc:	4610      	mov	r0, r2
 80081fe:	4619      	mov	r1, r3
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	461a      	mov	r2, r3
 8008204:	f04f 0300 	mov.w	r3, #0
 8008208:	f7f8 fd5a 	bl	8000cc0 <__aeabi_uldivmod>
 800820c:	4602      	mov	r2, r0
 800820e:	460b      	mov	r3, r1
 8008210:	4613      	mov	r3, r2
 8008212:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008214:	4b0a      	ldr	r3, [pc, #40]	; (8008240 <HAL_RCC_GetSysClockFreq+0x160>)
 8008216:	685b      	ldr	r3, [r3, #4]
 8008218:	0c1b      	lsrs	r3, r3, #16
 800821a:	f003 0303 	and.w	r3, r3, #3
 800821e:	3301      	adds	r3, #1
 8008220:	005b      	lsls	r3, r3, #1
 8008222:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008224:	68fa      	ldr	r2, [r7, #12]
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	fbb2 f3f3 	udiv	r3, r2, r3
 800822c:	60bb      	str	r3, [r7, #8]
      break;
 800822e:	e002      	b.n	8008236 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008230:	4b04      	ldr	r3, [pc, #16]	; (8008244 <HAL_RCC_GetSysClockFreq+0x164>)
 8008232:	60bb      	str	r3, [r7, #8]
      break;
 8008234:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008236:	68bb      	ldr	r3, [r7, #8]
}
 8008238:	4618      	mov	r0, r3
 800823a:	3710      	adds	r7, #16
 800823c:	46bd      	mov	sp, r7
 800823e:	bdb0      	pop	{r4, r5, r7, pc}
 8008240:	40023800 	.word	0x40023800
 8008244:	00f42400 	.word	0x00f42400
 8008248:	017d7840 	.word	0x017d7840

0800824c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800824c:	b480      	push	{r7}
 800824e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008250:	4b03      	ldr	r3, [pc, #12]	; (8008260 <HAL_RCC_GetHCLKFreq+0x14>)
 8008252:	681b      	ldr	r3, [r3, #0]
}
 8008254:	4618      	mov	r0, r3
 8008256:	46bd      	mov	sp, r7
 8008258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825c:	4770      	bx	lr
 800825e:	bf00      	nop
 8008260:	20000028 	.word	0x20000028

08008264 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008268:	f7ff fff0 	bl	800824c <HAL_RCC_GetHCLKFreq>
 800826c:	4602      	mov	r2, r0
 800826e:	4b05      	ldr	r3, [pc, #20]	; (8008284 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008270:	689b      	ldr	r3, [r3, #8]
 8008272:	0a9b      	lsrs	r3, r3, #10
 8008274:	f003 0307 	and.w	r3, r3, #7
 8008278:	4903      	ldr	r1, [pc, #12]	; (8008288 <HAL_RCC_GetPCLK1Freq+0x24>)
 800827a:	5ccb      	ldrb	r3, [r1, r3]
 800827c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008280:	4618      	mov	r0, r3
 8008282:	bd80      	pop	{r7, pc}
 8008284:	40023800 	.word	0x40023800
 8008288:	0803fb68 	.word	0x0803fb68

0800828c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008290:	f7ff ffdc 	bl	800824c <HAL_RCC_GetHCLKFreq>
 8008294:	4602      	mov	r2, r0
 8008296:	4b05      	ldr	r3, [pc, #20]	; (80082ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8008298:	689b      	ldr	r3, [r3, #8]
 800829a:	0b5b      	lsrs	r3, r3, #13
 800829c:	f003 0307 	and.w	r3, r3, #7
 80082a0:	4903      	ldr	r1, [pc, #12]	; (80082b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80082a2:	5ccb      	ldrb	r3, [r1, r3]
 80082a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	bd80      	pop	{r7, pc}
 80082ac:	40023800 	.word	0x40023800
 80082b0:	0803fb68 	.word	0x0803fb68

080082b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b088      	sub	sp, #32
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80082bc:	2300      	movs	r3, #0
 80082be:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 80082c0:	2300      	movs	r3, #0
 80082c2:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 80082c4:	2300      	movs	r3, #0
 80082c6:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 80082c8:	2300      	movs	r3, #0
 80082ca:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f003 0301 	and.w	r3, r3, #1
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d010      	beq.n	80082fa <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80082d8:	4b7a      	ldr	r3, [pc, #488]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80082da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082de:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	69db      	ldr	r3, [r3, #28]
 80082e6:	4977      	ldr	r1, [pc, #476]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80082e8:	4313      	orrs	r3, r2
 80082ea:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	69db      	ldr	r3, [r3, #28]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d101      	bne.n	80082fa <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 80082f6:	2301      	movs	r3, #1
 80082f8:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f003 0302 	and.w	r3, r3, #2
 8008302:	2b00      	cmp	r3, #0
 8008304:	d010      	beq.n	8008328 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8008306:	4b6f      	ldr	r3, [pc, #444]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8008308:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800830c:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6a1b      	ldr	r3, [r3, #32]
 8008314:	496b      	ldr	r1, [pc, #428]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8008316:	4313      	orrs	r3, r2
 8008318:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6a1b      	ldr	r3, [r3, #32]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d101      	bne.n	8008328 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 8008324:	2301      	movs	r3, #1
 8008326:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008330:	2b00      	cmp	r3, #0
 8008332:	d022      	beq.n	800837a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 8008334:	4b63      	ldr	r3, [pc, #396]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8008336:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800833a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008342:	4960      	ldr	r1, [pc, #384]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8008344:	4313      	orrs	r3, r2
 8008346:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800834e:	2b00      	cmp	r3, #0
 8008350:	d101      	bne.n	8008356 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 8008352:	2301      	movs	r3, #1
 8008354:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800835a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800835e:	d10c      	bne.n	800837a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8008360:	4b58      	ldr	r3, [pc, #352]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8008362:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008366:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	695b      	ldr	r3, [r3, #20]
 800836e:	3b01      	subs	r3, #1
 8008370:	021b      	lsls	r3, r3, #8
 8008372:	4954      	ldr	r1, [pc, #336]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8008374:	4313      	orrs	r3, r2
 8008376:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008382:	2b00      	cmp	r3, #0
 8008384:	d022      	beq.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 8008386:	4b4f      	ldr	r3, [pc, #316]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8008388:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800838c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008394:	494b      	ldr	r1, [pc, #300]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8008396:	4313      	orrs	r3, r2
 8008398:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d101      	bne.n	80083a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80083a4:	2301      	movs	r3, #1
 80083a6:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083ac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80083b0:	d10c      	bne.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 80083b2:	4b44      	ldr	r3, [pc, #272]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80083b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083b8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	695b      	ldr	r3, [r3, #20]
 80083c0:	3b01      	subs	r3, #1
 80083c2:	021b      	lsls	r3, r3, #8
 80083c4:	493f      	ldr	r1, [pc, #252]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80083c6:	4313      	orrs	r3, r2
 80083c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f003 0308 	and.w	r3, r3, #8
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	f000 808a 	beq.w	80084ee <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80083da:	2300      	movs	r3, #0
 80083dc:	60fb      	str	r3, [r7, #12]
 80083de:	4b39      	ldr	r3, [pc, #228]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80083e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083e2:	4a38      	ldr	r2, [pc, #224]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80083e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083e8:	6413      	str	r3, [r2, #64]	; 0x40
 80083ea:	4b36      	ldr	r3, [pc, #216]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80083ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083f2:	60fb      	str	r3, [r7, #12]
 80083f4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80083f6:	4b34      	ldr	r3, [pc, #208]	; (80084c8 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4a33      	ldr	r2, [pc, #204]	; (80084c8 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80083fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008400:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008402:	f7fb ff27 	bl	8004254 <HAL_GetTick>
 8008406:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008408:	e008      	b.n	800841c <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800840a:	f7fb ff23 	bl	8004254 <HAL_GetTick>
 800840e:	4602      	mov	r2, r0
 8008410:	69bb      	ldr	r3, [r7, #24]
 8008412:	1ad3      	subs	r3, r2, r3
 8008414:	2b02      	cmp	r3, #2
 8008416:	d901      	bls.n	800841c <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 8008418:	2303      	movs	r3, #3
 800841a:	e1d1      	b.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800841c:	4b2a      	ldr	r3, [pc, #168]	; (80084c8 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008424:	2b00      	cmp	r3, #0
 8008426:	d0f0      	beq.n	800840a <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008428:	4b26      	ldr	r3, [pc, #152]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800842a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800842c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008430:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d02f      	beq.n	8008498 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800843c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008440:	697a      	ldr	r2, [r7, #20]
 8008442:	429a      	cmp	r2, r3
 8008444:	d028      	beq.n	8008498 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008446:	4b1f      	ldr	r3, [pc, #124]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8008448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800844a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800844e:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008450:	4b1e      	ldr	r3, [pc, #120]	; (80084cc <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8008452:	2201      	movs	r2, #1
 8008454:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008456:	4b1d      	ldr	r3, [pc, #116]	; (80084cc <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8008458:	2200      	movs	r2, #0
 800845a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800845c:	4a19      	ldr	r2, [pc, #100]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008462:	4b18      	ldr	r3, [pc, #96]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8008464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008466:	f003 0301 	and.w	r3, r3, #1
 800846a:	2b01      	cmp	r3, #1
 800846c:	d114      	bne.n	8008498 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800846e:	f7fb fef1 	bl	8004254 <HAL_GetTick>
 8008472:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008474:	e00a      	b.n	800848c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008476:	f7fb feed 	bl	8004254 <HAL_GetTick>
 800847a:	4602      	mov	r2, r0
 800847c:	69bb      	ldr	r3, [r7, #24]
 800847e:	1ad3      	subs	r3, r2, r3
 8008480:	f241 3288 	movw	r2, #5000	; 0x1388
 8008484:	4293      	cmp	r3, r2
 8008486:	d901      	bls.n	800848c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 8008488:	2303      	movs	r3, #3
 800848a:	e199      	b.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800848c:	4b0d      	ldr	r3, [pc, #52]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800848e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008490:	f003 0302 	and.w	r3, r3, #2
 8008494:	2b00      	cmp	r3, #0
 8008496:	d0ee      	beq.n	8008476 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800849c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80084a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80084a4:	d114      	bne.n	80084d0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 80084a6:	4b07      	ldr	r3, [pc, #28]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80084a8:	689b      	ldr	r3, [r3, #8]
 80084aa:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084b2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80084b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80084ba:	4902      	ldr	r1, [pc, #8]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80084bc:	4313      	orrs	r3, r2
 80084be:	608b      	str	r3, [r1, #8]
 80084c0:	e00c      	b.n	80084dc <HAL_RCCEx_PeriphCLKConfig+0x228>
 80084c2:	bf00      	nop
 80084c4:	40023800 	.word	0x40023800
 80084c8:	40007000 	.word	0x40007000
 80084cc:	42470e40 	.word	0x42470e40
 80084d0:	4b89      	ldr	r3, [pc, #548]	; (80086f8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80084d2:	689b      	ldr	r3, [r3, #8]
 80084d4:	4a88      	ldr	r2, [pc, #544]	; (80086f8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80084d6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80084da:	6093      	str	r3, [r2, #8]
 80084dc:	4b86      	ldr	r3, [pc, #536]	; (80086f8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80084de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80084e8:	4983      	ldr	r1, [pc, #524]	; (80086f8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80084ea:	4313      	orrs	r3, r2
 80084ec:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f003 0304 	and.w	r3, r3, #4
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d004      	beq.n	8008504 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8008500:	4b7e      	ldr	r3, [pc, #504]	; (80086fc <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8008502:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f003 0310 	and.w	r3, r3, #16
 800850c:	2b00      	cmp	r3, #0
 800850e:	d00a      	beq.n	8008526 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8008510:	4b79      	ldr	r3, [pc, #484]	; (80086f8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8008512:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008516:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800851e:	4976      	ldr	r1, [pc, #472]	; (80086f8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8008520:	4313      	orrs	r3, r2
 8008522:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f003 0320 	and.w	r3, r3, #32
 800852e:	2b00      	cmp	r3, #0
 8008530:	d011      	beq.n	8008556 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008532:	4b71      	ldr	r3, [pc, #452]	; (80086f8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8008534:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008538:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008540:	496d      	ldr	r1, [pc, #436]	; (80086f8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8008542:	4313      	orrs	r3, r2
 8008544:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800854c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008550:	d101      	bne.n	8008556 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 8008552:	2301      	movs	r3, #1
 8008554:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800855e:	2b00      	cmp	r3, #0
 8008560:	d00a      	beq.n	8008578 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8008562:	4b65      	ldr	r3, [pc, #404]	; (80086f8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8008564:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008568:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008570:	4961      	ldr	r1, [pc, #388]	; (80086f8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8008572:	4313      	orrs	r3, r2
 8008574:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8008578:	69fb      	ldr	r3, [r7, #28]
 800857a:	2b01      	cmp	r3, #1
 800857c:	d004      	beq.n	8008588 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	2b80      	cmp	r3, #128	; 0x80
 8008584:	f040 80c6 	bne.w	8008714 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008588:	4b5d      	ldr	r3, [pc, #372]	; (8008700 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 800858a:	2200      	movs	r2, #0
 800858c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800858e:	f7fb fe61 	bl	8004254 <HAL_GetTick>
 8008592:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008594:	e008      	b.n	80085a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008596:	f7fb fe5d 	bl	8004254 <HAL_GetTick>
 800859a:	4602      	mov	r2, r0
 800859c:	69bb      	ldr	r3, [r7, #24]
 800859e:	1ad3      	subs	r3, r2, r3
 80085a0:	2b02      	cmp	r3, #2
 80085a2:	d901      	bls.n	80085a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80085a4:	2303      	movs	r3, #3
 80085a6:	e10b      	b.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80085a8:	4b53      	ldr	r3, [pc, #332]	; (80086f8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d1f0      	bne.n	8008596 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 80085b4:	4a53      	ldr	r2, [pc, #332]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085ba:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f003 0301 	and.w	r3, r3, #1
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d003      	beq.n	80085d0 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	69db      	ldr	r3, [r3, #28]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d023      	beq.n	8008618 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d003      	beq.n	80085e4 <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6a1b      	ldr	r3, [r3, #32]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d019      	beq.n	8008618 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d004      	beq.n	80085fa <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80085f8:	d00e      	beq.n	8008618 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8008602:	2b00      	cmp	r3, #0
 8008604:	d019      	beq.n	800863a <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800860a:	2b00      	cmp	r3, #0
 800860c:	d115      	bne.n	800863a <HAL_RCCEx_PeriphCLKConfig+0x386>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008612:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008616:	d110      	bne.n	800863a <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	685a      	ldr	r2, [r3, #4]
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	689b      	ldr	r3, [r3, #8]
 8008620:	019b      	lsls	r3, r3, #6
 8008622:	431a      	orrs	r2, r3
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	68db      	ldr	r3, [r3, #12]
 8008628:	061b      	lsls	r3, r3, #24
 800862a:	431a      	orrs	r2, r3
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	691b      	ldr	r3, [r3, #16]
 8008630:	071b      	lsls	r3, r3, #28
 8008632:	4931      	ldr	r1, [pc, #196]	; (80086f8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8008634:	4313      	orrs	r3, r2
 8008636:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008642:	2b00      	cmp	r3, #0
 8008644:	d003      	beq.n	800864e <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800864a:	2b00      	cmp	r3, #0
 800864c:	d009      	beq.n	8008662 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8008656:	2b00      	cmp	r3, #0
 8008658:	d026      	beq.n	80086a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800865e:	2b00      	cmp	r3, #0
 8008660:	d122      	bne.n	80086a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008662:	4b25      	ldr	r3, [pc, #148]	; (80086f8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8008664:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008668:	0e1b      	lsrs	r3, r3, #24
 800866a:	f003 030f 	and.w	r3, r3, #15
 800866e:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	685a      	ldr	r2, [r3, #4]
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	689b      	ldr	r3, [r3, #8]
 8008678:	019b      	lsls	r3, r3, #6
 800867a:	431a      	orrs	r2, r3
 800867c:	693b      	ldr	r3, [r7, #16]
 800867e:	061b      	lsls	r3, r3, #24
 8008680:	431a      	orrs	r2, r3
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	691b      	ldr	r3, [r3, #16]
 8008686:	071b      	lsls	r3, r3, #28
 8008688:	491b      	ldr	r1, [pc, #108]	; (80086f8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800868a:	4313      	orrs	r3, r2
 800868c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 8008690:	4b19      	ldr	r3, [pc, #100]	; (80086f8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8008692:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008696:	f023 021f 	bic.w	r2, r3, #31
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	699b      	ldr	r3, [r3, #24]
 800869e:	3b01      	subs	r3, #1
 80086a0:	4915      	ldr	r1, [pc, #84]	; (80086f8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80086a2:	4313      	orrs	r3, r2
 80086a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d010      	beq.n	80086d6 <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	685a      	ldr	r2, [r3, #4]
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	689b      	ldr	r3, [r3, #8]
 80086bc:	019b      	lsls	r3, r3, #6
 80086be:	431a      	orrs	r2, r3
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	68db      	ldr	r3, [r3, #12]
 80086c4:	061b      	lsls	r3, r3, #24
 80086c6:	431a      	orrs	r2, r3
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	691b      	ldr	r3, [r3, #16]
 80086cc:	071b      	lsls	r3, r3, #28
 80086ce:	490a      	ldr	r1, [pc, #40]	; (80086f8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80086d0:	4313      	orrs	r3, r2
 80086d2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80086d6:	4b0a      	ldr	r3, [pc, #40]	; (8008700 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 80086d8:	2201      	movs	r2, #1
 80086da:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80086dc:	f7fb fdba 	bl	8004254 <HAL_GetTick>
 80086e0:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80086e2:	e011      	b.n	8008708 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80086e4:	f7fb fdb6 	bl	8004254 <HAL_GetTick>
 80086e8:	4602      	mov	r2, r0
 80086ea:	69bb      	ldr	r3, [r7, #24]
 80086ec:	1ad3      	subs	r3, r2, r3
 80086ee:	2b02      	cmp	r3, #2
 80086f0:	d90a      	bls.n	8008708 <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80086f2:	2303      	movs	r3, #3
 80086f4:	e064      	b.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80086f6:	bf00      	nop
 80086f8:	40023800 	.word	0x40023800
 80086fc:	424711e0 	.word	0x424711e0
 8008700:	42470068 	.word	0x42470068
 8008704:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008708:	4b2f      	ldr	r3, [pc, #188]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008710:	2b00      	cmp	r3, #0
 8008712:	d0e7      	beq.n	80086e4 <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800871c:	2b00      	cmp	r3, #0
 800871e:	d00a      	beq.n	8008736 <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008720:	4b29      	ldr	r3, [pc, #164]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8008722:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008726:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800872e:	4926      	ldr	r1, [pc, #152]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8008730:	4313      	orrs	r3, r2
 8008732:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800873e:	2b00      	cmp	r3, #0
 8008740:	d00a      	beq.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8008742:	4b21      	ldr	r3, [pc, #132]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8008744:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008748:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008750:	491d      	ldr	r1, [pc, #116]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8008752:	4313      	orrs	r3, r2
 8008754:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008760:	2b00      	cmp	r3, #0
 8008762:	d00a      	beq.n	800877a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8008764:	4b18      	ldr	r3, [pc, #96]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8008766:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800876a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008772:	4915      	ldr	r1, [pc, #84]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8008774:	4313      	orrs	r3, r2
 8008776:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008782:	2b00      	cmp	r3, #0
 8008784:	d00a      	beq.n	800879c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 8008786:	4b10      	ldr	r3, [pc, #64]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8008788:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800878c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008794:	490c      	ldr	r1, [pc, #48]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8008796:	4313      	orrs	r3, r2
 8008798:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d00a      	beq.n	80087be <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80087a8:	4b07      	ldr	r3, [pc, #28]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80087aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80087ae:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087b6:	4904      	ldr	r1, [pc, #16]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80087b8:	4313      	orrs	r3, r2
 80087ba:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 80087be:	2300      	movs	r3, #0
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	3720      	adds	r7, #32
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}
 80087c8:	40023800 	.word	0x40023800

080087cc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b086      	sub	sp, #24
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d101      	bne.n	80087de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80087da:	2301      	movs	r3, #1
 80087dc:	e270      	b.n	8008cc0 <HAL_RCC_OscConfig+0x4f4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f003 0301 	and.w	r3, r3, #1
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d075      	beq.n	80088d6 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80087ea:	4ba3      	ldr	r3, [pc, #652]	; (8008a78 <HAL_RCC_OscConfig+0x2ac>)
 80087ec:	689b      	ldr	r3, [r3, #8]
 80087ee:	f003 030c 	and.w	r3, r3, #12
 80087f2:	2b04      	cmp	r3, #4
 80087f4:	d00c      	beq.n	8008810 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80087f6:	4ba0      	ldr	r3, [pc, #640]	; (8008a78 <HAL_RCC_OscConfig+0x2ac>)
 80087f8:	689b      	ldr	r3, [r3, #8]
 80087fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80087fe:	2b08      	cmp	r3, #8
 8008800:	d112      	bne.n	8008828 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008802:	4b9d      	ldr	r3, [pc, #628]	; (8008a78 <HAL_RCC_OscConfig+0x2ac>)
 8008804:	685b      	ldr	r3, [r3, #4]
 8008806:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800880a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800880e:	d10b      	bne.n	8008828 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008810:	4b99      	ldr	r3, [pc, #612]	; (8008a78 <HAL_RCC_OscConfig+0x2ac>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008818:	2b00      	cmp	r3, #0
 800881a:	d05b      	beq.n	80088d4 <HAL_RCC_OscConfig+0x108>
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	685b      	ldr	r3, [r3, #4]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d157      	bne.n	80088d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008824:	2301      	movs	r3, #1
 8008826:	e24b      	b.n	8008cc0 <HAL_RCC_OscConfig+0x4f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	685b      	ldr	r3, [r3, #4]
 800882c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008830:	d106      	bne.n	8008840 <HAL_RCC_OscConfig+0x74>
 8008832:	4b91      	ldr	r3, [pc, #580]	; (8008a78 <HAL_RCC_OscConfig+0x2ac>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	4a90      	ldr	r2, [pc, #576]	; (8008a78 <HAL_RCC_OscConfig+0x2ac>)
 8008838:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800883c:	6013      	str	r3, [r2, #0]
 800883e:	e01d      	b.n	800887c <HAL_RCC_OscConfig+0xb0>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	685b      	ldr	r3, [r3, #4]
 8008844:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008848:	d10c      	bne.n	8008864 <HAL_RCC_OscConfig+0x98>
 800884a:	4b8b      	ldr	r3, [pc, #556]	; (8008a78 <HAL_RCC_OscConfig+0x2ac>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	4a8a      	ldr	r2, [pc, #552]	; (8008a78 <HAL_RCC_OscConfig+0x2ac>)
 8008850:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008854:	6013      	str	r3, [r2, #0]
 8008856:	4b88      	ldr	r3, [pc, #544]	; (8008a78 <HAL_RCC_OscConfig+0x2ac>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	4a87      	ldr	r2, [pc, #540]	; (8008a78 <HAL_RCC_OscConfig+0x2ac>)
 800885c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008860:	6013      	str	r3, [r2, #0]
 8008862:	e00b      	b.n	800887c <HAL_RCC_OscConfig+0xb0>
 8008864:	4b84      	ldr	r3, [pc, #528]	; (8008a78 <HAL_RCC_OscConfig+0x2ac>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	4a83      	ldr	r2, [pc, #524]	; (8008a78 <HAL_RCC_OscConfig+0x2ac>)
 800886a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800886e:	6013      	str	r3, [r2, #0]
 8008870:	4b81      	ldr	r3, [pc, #516]	; (8008a78 <HAL_RCC_OscConfig+0x2ac>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	4a80      	ldr	r2, [pc, #512]	; (8008a78 <HAL_RCC_OscConfig+0x2ac>)
 8008876:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800887a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	685b      	ldr	r3, [r3, #4]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d013      	beq.n	80088ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008884:	f7fb fce6 	bl	8004254 <HAL_GetTick>
 8008888:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800888a:	e008      	b.n	800889e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800888c:	f7fb fce2 	bl	8004254 <HAL_GetTick>
 8008890:	4602      	mov	r2, r0
 8008892:	693b      	ldr	r3, [r7, #16]
 8008894:	1ad3      	subs	r3, r2, r3
 8008896:	2b64      	cmp	r3, #100	; 0x64
 8008898:	d901      	bls.n	800889e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800889a:	2303      	movs	r3, #3
 800889c:	e210      	b.n	8008cc0 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800889e:	4b76      	ldr	r3, [pc, #472]	; (8008a78 <HAL_RCC_OscConfig+0x2ac>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d0f0      	beq.n	800888c <HAL_RCC_OscConfig+0xc0>
 80088aa:	e014      	b.n	80088d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088ac:	f7fb fcd2 	bl	8004254 <HAL_GetTick>
 80088b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80088b2:	e008      	b.n	80088c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80088b4:	f7fb fcce 	bl	8004254 <HAL_GetTick>
 80088b8:	4602      	mov	r2, r0
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	1ad3      	subs	r3, r2, r3
 80088be:	2b64      	cmp	r3, #100	; 0x64
 80088c0:	d901      	bls.n	80088c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80088c2:	2303      	movs	r3, #3
 80088c4:	e1fc      	b.n	8008cc0 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80088c6:	4b6c      	ldr	r3, [pc, #432]	; (8008a78 <HAL_RCC_OscConfig+0x2ac>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d1f0      	bne.n	80088b4 <HAL_RCC_OscConfig+0xe8>
 80088d2:	e000      	b.n	80088d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80088d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f003 0302 	and.w	r3, r3, #2
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d063      	beq.n	80089aa <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80088e2:	4b65      	ldr	r3, [pc, #404]	; (8008a78 <HAL_RCC_OscConfig+0x2ac>)
 80088e4:	689b      	ldr	r3, [r3, #8]
 80088e6:	f003 030c 	and.w	r3, r3, #12
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d00b      	beq.n	8008906 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80088ee:	4b62      	ldr	r3, [pc, #392]	; (8008a78 <HAL_RCC_OscConfig+0x2ac>)
 80088f0:	689b      	ldr	r3, [r3, #8]
 80088f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80088f6:	2b08      	cmp	r3, #8
 80088f8:	d11c      	bne.n	8008934 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80088fa:	4b5f      	ldr	r3, [pc, #380]	; (8008a78 <HAL_RCC_OscConfig+0x2ac>)
 80088fc:	685b      	ldr	r3, [r3, #4]
 80088fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008902:	2b00      	cmp	r3, #0
 8008904:	d116      	bne.n	8008934 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008906:	4b5c      	ldr	r3, [pc, #368]	; (8008a78 <HAL_RCC_OscConfig+0x2ac>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f003 0302 	and.w	r3, r3, #2
 800890e:	2b00      	cmp	r3, #0
 8008910:	d005      	beq.n	800891e <HAL_RCC_OscConfig+0x152>
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	68db      	ldr	r3, [r3, #12]
 8008916:	2b01      	cmp	r3, #1
 8008918:	d001      	beq.n	800891e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800891a:	2301      	movs	r3, #1
 800891c:	e1d0      	b.n	8008cc0 <HAL_RCC_OscConfig+0x4f4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800891e:	4b56      	ldr	r3, [pc, #344]	; (8008a78 <HAL_RCC_OscConfig+0x2ac>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	691b      	ldr	r3, [r3, #16]
 800892a:	00db      	lsls	r3, r3, #3
 800892c:	4952      	ldr	r1, [pc, #328]	; (8008a78 <HAL_RCC_OscConfig+0x2ac>)
 800892e:	4313      	orrs	r3, r2
 8008930:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008932:	e03a      	b.n	80089aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	68db      	ldr	r3, [r3, #12]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d020      	beq.n	800897e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800893c:	4b4f      	ldr	r3, [pc, #316]	; (8008a7c <HAL_RCC_OscConfig+0x2b0>)
 800893e:	2201      	movs	r2, #1
 8008940:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008942:	f7fb fc87 	bl	8004254 <HAL_GetTick>
 8008946:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008948:	e008      	b.n	800895c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800894a:	f7fb fc83 	bl	8004254 <HAL_GetTick>
 800894e:	4602      	mov	r2, r0
 8008950:	693b      	ldr	r3, [r7, #16]
 8008952:	1ad3      	subs	r3, r2, r3
 8008954:	2b02      	cmp	r3, #2
 8008956:	d901      	bls.n	800895c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008958:	2303      	movs	r3, #3
 800895a:	e1b1      	b.n	8008cc0 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800895c:	4b46      	ldr	r3, [pc, #280]	; (8008a78 <HAL_RCC_OscConfig+0x2ac>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f003 0302 	and.w	r3, r3, #2
 8008964:	2b00      	cmp	r3, #0
 8008966:	d0f0      	beq.n	800894a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008968:	4b43      	ldr	r3, [pc, #268]	; (8008a78 <HAL_RCC_OscConfig+0x2ac>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	691b      	ldr	r3, [r3, #16]
 8008974:	00db      	lsls	r3, r3, #3
 8008976:	4940      	ldr	r1, [pc, #256]	; (8008a78 <HAL_RCC_OscConfig+0x2ac>)
 8008978:	4313      	orrs	r3, r2
 800897a:	600b      	str	r3, [r1, #0]
 800897c:	e015      	b.n	80089aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800897e:	4b3f      	ldr	r3, [pc, #252]	; (8008a7c <HAL_RCC_OscConfig+0x2b0>)
 8008980:	2200      	movs	r2, #0
 8008982:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008984:	f7fb fc66 	bl	8004254 <HAL_GetTick>
 8008988:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800898a:	e008      	b.n	800899e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800898c:	f7fb fc62 	bl	8004254 <HAL_GetTick>
 8008990:	4602      	mov	r2, r0
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	1ad3      	subs	r3, r2, r3
 8008996:	2b02      	cmp	r3, #2
 8008998:	d901      	bls.n	800899e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800899a:	2303      	movs	r3, #3
 800899c:	e190      	b.n	8008cc0 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800899e:	4b36      	ldr	r3, [pc, #216]	; (8008a78 <HAL_RCC_OscConfig+0x2ac>)
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f003 0302 	and.w	r3, r3, #2
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d1f0      	bne.n	800898c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f003 0308 	and.w	r3, r3, #8
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d030      	beq.n	8008a18 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	695b      	ldr	r3, [r3, #20]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d016      	beq.n	80089ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80089be:	4b30      	ldr	r3, [pc, #192]	; (8008a80 <HAL_RCC_OscConfig+0x2b4>)
 80089c0:	2201      	movs	r2, #1
 80089c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089c4:	f7fb fc46 	bl	8004254 <HAL_GetTick>
 80089c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80089ca:	e008      	b.n	80089de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80089cc:	f7fb fc42 	bl	8004254 <HAL_GetTick>
 80089d0:	4602      	mov	r2, r0
 80089d2:	693b      	ldr	r3, [r7, #16]
 80089d4:	1ad3      	subs	r3, r2, r3
 80089d6:	2b02      	cmp	r3, #2
 80089d8:	d901      	bls.n	80089de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80089da:	2303      	movs	r3, #3
 80089dc:	e170      	b.n	8008cc0 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80089de:	4b26      	ldr	r3, [pc, #152]	; (8008a78 <HAL_RCC_OscConfig+0x2ac>)
 80089e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80089e2:	f003 0302 	and.w	r3, r3, #2
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d0f0      	beq.n	80089cc <HAL_RCC_OscConfig+0x200>
 80089ea:	e015      	b.n	8008a18 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80089ec:	4b24      	ldr	r3, [pc, #144]	; (8008a80 <HAL_RCC_OscConfig+0x2b4>)
 80089ee:	2200      	movs	r2, #0
 80089f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089f2:	f7fb fc2f 	bl	8004254 <HAL_GetTick>
 80089f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80089f8:	e008      	b.n	8008a0c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80089fa:	f7fb fc2b 	bl	8004254 <HAL_GetTick>
 80089fe:	4602      	mov	r2, r0
 8008a00:	693b      	ldr	r3, [r7, #16]
 8008a02:	1ad3      	subs	r3, r2, r3
 8008a04:	2b02      	cmp	r3, #2
 8008a06:	d901      	bls.n	8008a0c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008a08:	2303      	movs	r3, #3
 8008a0a:	e159      	b.n	8008cc0 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008a0c:	4b1a      	ldr	r3, [pc, #104]	; (8008a78 <HAL_RCC_OscConfig+0x2ac>)
 8008a0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a10:	f003 0302 	and.w	r3, r3, #2
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d1f0      	bne.n	80089fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f003 0304 	and.w	r3, r3, #4
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	f000 80a0 	beq.w	8008b66 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008a26:	2300      	movs	r3, #0
 8008a28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008a2a:	4b13      	ldr	r3, [pc, #76]	; (8008a78 <HAL_RCC_OscConfig+0x2ac>)
 8008a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d10f      	bne.n	8008a56 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008a36:	2300      	movs	r3, #0
 8008a38:	60bb      	str	r3, [r7, #8]
 8008a3a:	4b0f      	ldr	r3, [pc, #60]	; (8008a78 <HAL_RCC_OscConfig+0x2ac>)
 8008a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a3e:	4a0e      	ldr	r2, [pc, #56]	; (8008a78 <HAL_RCC_OscConfig+0x2ac>)
 8008a40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a44:	6413      	str	r3, [r2, #64]	; 0x40
 8008a46:	4b0c      	ldr	r3, [pc, #48]	; (8008a78 <HAL_RCC_OscConfig+0x2ac>)
 8008a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a4e:	60bb      	str	r3, [r7, #8]
 8008a50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008a52:	2301      	movs	r3, #1
 8008a54:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a56:	4b0b      	ldr	r3, [pc, #44]	; (8008a84 <HAL_RCC_OscConfig+0x2b8>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d121      	bne.n	8008aa6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008a62:	4b08      	ldr	r3, [pc, #32]	; (8008a84 <HAL_RCC_OscConfig+0x2b8>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	4a07      	ldr	r2, [pc, #28]	; (8008a84 <HAL_RCC_OscConfig+0x2b8>)
 8008a68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008a6e:	f7fb fbf1 	bl	8004254 <HAL_GetTick>
 8008a72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a74:	e011      	b.n	8008a9a <HAL_RCC_OscConfig+0x2ce>
 8008a76:	bf00      	nop
 8008a78:	40023800 	.word	0x40023800
 8008a7c:	42470000 	.word	0x42470000
 8008a80:	42470e80 	.word	0x42470e80
 8008a84:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008a88:	f7fb fbe4 	bl	8004254 <HAL_GetTick>
 8008a8c:	4602      	mov	r2, r0
 8008a8e:	693b      	ldr	r3, [r7, #16]
 8008a90:	1ad3      	subs	r3, r2, r3
 8008a92:	2b02      	cmp	r3, #2
 8008a94:	d901      	bls.n	8008a9a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8008a96:	2303      	movs	r3, #3
 8008a98:	e112      	b.n	8008cc0 <HAL_RCC_OscConfig+0x4f4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a9a:	4b8b      	ldr	r3, [pc, #556]	; (8008cc8 <HAL_RCC_OscConfig+0x4fc>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d0f0      	beq.n	8008a88 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	689b      	ldr	r3, [r3, #8]
 8008aaa:	2b01      	cmp	r3, #1
 8008aac:	d106      	bne.n	8008abc <HAL_RCC_OscConfig+0x2f0>
 8008aae:	4b87      	ldr	r3, [pc, #540]	; (8008ccc <HAL_RCC_OscConfig+0x500>)
 8008ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ab2:	4a86      	ldr	r2, [pc, #536]	; (8008ccc <HAL_RCC_OscConfig+0x500>)
 8008ab4:	f043 0301 	orr.w	r3, r3, #1
 8008ab8:	6713      	str	r3, [r2, #112]	; 0x70
 8008aba:	e01c      	b.n	8008af6 <HAL_RCC_OscConfig+0x32a>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	689b      	ldr	r3, [r3, #8]
 8008ac0:	2b05      	cmp	r3, #5
 8008ac2:	d10c      	bne.n	8008ade <HAL_RCC_OscConfig+0x312>
 8008ac4:	4b81      	ldr	r3, [pc, #516]	; (8008ccc <HAL_RCC_OscConfig+0x500>)
 8008ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ac8:	4a80      	ldr	r2, [pc, #512]	; (8008ccc <HAL_RCC_OscConfig+0x500>)
 8008aca:	f043 0304 	orr.w	r3, r3, #4
 8008ace:	6713      	str	r3, [r2, #112]	; 0x70
 8008ad0:	4b7e      	ldr	r3, [pc, #504]	; (8008ccc <HAL_RCC_OscConfig+0x500>)
 8008ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ad4:	4a7d      	ldr	r2, [pc, #500]	; (8008ccc <HAL_RCC_OscConfig+0x500>)
 8008ad6:	f043 0301 	orr.w	r3, r3, #1
 8008ada:	6713      	str	r3, [r2, #112]	; 0x70
 8008adc:	e00b      	b.n	8008af6 <HAL_RCC_OscConfig+0x32a>
 8008ade:	4b7b      	ldr	r3, [pc, #492]	; (8008ccc <HAL_RCC_OscConfig+0x500>)
 8008ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ae2:	4a7a      	ldr	r2, [pc, #488]	; (8008ccc <HAL_RCC_OscConfig+0x500>)
 8008ae4:	f023 0301 	bic.w	r3, r3, #1
 8008ae8:	6713      	str	r3, [r2, #112]	; 0x70
 8008aea:	4b78      	ldr	r3, [pc, #480]	; (8008ccc <HAL_RCC_OscConfig+0x500>)
 8008aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008aee:	4a77      	ldr	r2, [pc, #476]	; (8008ccc <HAL_RCC_OscConfig+0x500>)
 8008af0:	f023 0304 	bic.w	r3, r3, #4
 8008af4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	689b      	ldr	r3, [r3, #8]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d015      	beq.n	8008b2a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008afe:	f7fb fba9 	bl	8004254 <HAL_GetTick>
 8008b02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008b04:	e00a      	b.n	8008b1c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008b06:	f7fb fba5 	bl	8004254 <HAL_GetTick>
 8008b0a:	4602      	mov	r2, r0
 8008b0c:	693b      	ldr	r3, [r7, #16]
 8008b0e:	1ad3      	subs	r3, r2, r3
 8008b10:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d901      	bls.n	8008b1c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8008b18:	2303      	movs	r3, #3
 8008b1a:	e0d1      	b.n	8008cc0 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008b1c:	4b6b      	ldr	r3, [pc, #428]	; (8008ccc <HAL_RCC_OscConfig+0x500>)
 8008b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b20:	f003 0302 	and.w	r3, r3, #2
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d0ee      	beq.n	8008b06 <HAL_RCC_OscConfig+0x33a>
 8008b28:	e014      	b.n	8008b54 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b2a:	f7fb fb93 	bl	8004254 <HAL_GetTick>
 8008b2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008b30:	e00a      	b.n	8008b48 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008b32:	f7fb fb8f 	bl	8004254 <HAL_GetTick>
 8008b36:	4602      	mov	r2, r0
 8008b38:	693b      	ldr	r3, [r7, #16]
 8008b3a:	1ad3      	subs	r3, r2, r3
 8008b3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d901      	bls.n	8008b48 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8008b44:	2303      	movs	r3, #3
 8008b46:	e0bb      	b.n	8008cc0 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008b48:	4b60      	ldr	r3, [pc, #384]	; (8008ccc <HAL_RCC_OscConfig+0x500>)
 8008b4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b4c:	f003 0302 	and.w	r3, r3, #2
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d1ee      	bne.n	8008b32 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008b54:	7dfb      	ldrb	r3, [r7, #23]
 8008b56:	2b01      	cmp	r3, #1
 8008b58:	d105      	bne.n	8008b66 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008b5a:	4b5c      	ldr	r3, [pc, #368]	; (8008ccc <HAL_RCC_OscConfig+0x500>)
 8008b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b5e:	4a5b      	ldr	r2, [pc, #364]	; (8008ccc <HAL_RCC_OscConfig+0x500>)
 8008b60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008b64:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	699b      	ldr	r3, [r3, #24]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	f000 80a7 	beq.w	8008cbe <HAL_RCC_OscConfig+0x4f2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008b70:	4b56      	ldr	r3, [pc, #344]	; (8008ccc <HAL_RCC_OscConfig+0x500>)
 8008b72:	689b      	ldr	r3, [r3, #8]
 8008b74:	f003 030c 	and.w	r3, r3, #12
 8008b78:	2b08      	cmp	r3, #8
 8008b7a:	d060      	beq.n	8008c3e <HAL_RCC_OscConfig+0x472>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	699b      	ldr	r3, [r3, #24]
 8008b80:	2b02      	cmp	r3, #2
 8008b82:	d145      	bne.n	8008c10 <HAL_RCC_OscConfig+0x444>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b84:	4b52      	ldr	r3, [pc, #328]	; (8008cd0 <HAL_RCC_OscConfig+0x504>)
 8008b86:	2200      	movs	r2, #0
 8008b88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b8a:	f7fb fb63 	bl	8004254 <HAL_GetTick>
 8008b8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008b90:	e008      	b.n	8008ba4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008b92:	f7fb fb5f 	bl	8004254 <HAL_GetTick>
 8008b96:	4602      	mov	r2, r0
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	1ad3      	subs	r3, r2, r3
 8008b9c:	2b02      	cmp	r3, #2
 8008b9e:	d901      	bls.n	8008ba4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8008ba0:	2303      	movs	r3, #3
 8008ba2:	e08d      	b.n	8008cc0 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008ba4:	4b49      	ldr	r3, [pc, #292]	; (8008ccc <HAL_RCC_OscConfig+0x500>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d1f0      	bne.n	8008b92 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	69da      	ldr	r2, [r3, #28]
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6a1b      	ldr	r3, [r3, #32]
 8008bb8:	431a      	orrs	r2, r3
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bbe:	019b      	lsls	r3, r3, #6
 8008bc0:	431a      	orrs	r2, r3
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bc6:	085b      	lsrs	r3, r3, #1
 8008bc8:	3b01      	subs	r3, #1
 8008bca:	041b      	lsls	r3, r3, #16
 8008bcc:	431a      	orrs	r2, r3
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bd2:	061b      	lsls	r3, r3, #24
 8008bd4:	431a      	orrs	r2, r3
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bda:	071b      	lsls	r3, r3, #28
 8008bdc:	493b      	ldr	r1, [pc, #236]	; (8008ccc <HAL_RCC_OscConfig+0x500>)
 8008bde:	4313      	orrs	r3, r2
 8008be0:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008be2:	4b3b      	ldr	r3, [pc, #236]	; (8008cd0 <HAL_RCC_OscConfig+0x504>)
 8008be4:	2201      	movs	r2, #1
 8008be6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008be8:	f7fb fb34 	bl	8004254 <HAL_GetTick>
 8008bec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008bee:	e008      	b.n	8008c02 <HAL_RCC_OscConfig+0x436>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008bf0:	f7fb fb30 	bl	8004254 <HAL_GetTick>
 8008bf4:	4602      	mov	r2, r0
 8008bf6:	693b      	ldr	r3, [r7, #16]
 8008bf8:	1ad3      	subs	r3, r2, r3
 8008bfa:	2b02      	cmp	r3, #2
 8008bfc:	d901      	bls.n	8008c02 <HAL_RCC_OscConfig+0x436>
          {
            return HAL_TIMEOUT;
 8008bfe:	2303      	movs	r3, #3
 8008c00:	e05e      	b.n	8008cc0 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008c02:	4b32      	ldr	r3, [pc, #200]	; (8008ccc <HAL_RCC_OscConfig+0x500>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d0f0      	beq.n	8008bf0 <HAL_RCC_OscConfig+0x424>
 8008c0e:	e056      	b.n	8008cbe <HAL_RCC_OscConfig+0x4f2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008c10:	4b2f      	ldr	r3, [pc, #188]	; (8008cd0 <HAL_RCC_OscConfig+0x504>)
 8008c12:	2200      	movs	r2, #0
 8008c14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c16:	f7fb fb1d 	bl	8004254 <HAL_GetTick>
 8008c1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008c1c:	e008      	b.n	8008c30 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008c1e:	f7fb fb19 	bl	8004254 <HAL_GetTick>
 8008c22:	4602      	mov	r2, r0
 8008c24:	693b      	ldr	r3, [r7, #16]
 8008c26:	1ad3      	subs	r3, r2, r3
 8008c28:	2b02      	cmp	r3, #2
 8008c2a:	d901      	bls.n	8008c30 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8008c2c:	2303      	movs	r3, #3
 8008c2e:	e047      	b.n	8008cc0 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008c30:	4b26      	ldr	r3, [pc, #152]	; (8008ccc <HAL_RCC_OscConfig+0x500>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d1f0      	bne.n	8008c1e <HAL_RCC_OscConfig+0x452>
 8008c3c:	e03f      	b.n	8008cbe <HAL_RCC_OscConfig+0x4f2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	699b      	ldr	r3, [r3, #24]
 8008c42:	2b01      	cmp	r3, #1
 8008c44:	d101      	bne.n	8008c4a <HAL_RCC_OscConfig+0x47e>
      {
        return HAL_ERROR;
 8008c46:	2301      	movs	r3, #1
 8008c48:	e03a      	b.n	8008cc0 <HAL_RCC_OscConfig+0x4f4>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008c4a:	4b20      	ldr	r3, [pc, #128]	; (8008ccc <HAL_RCC_OscConfig+0x500>)
 8008c4c:	685b      	ldr	r3, [r3, #4]
 8008c4e:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	699b      	ldr	r3, [r3, #24]
 8008c54:	2b01      	cmp	r3, #1
 8008c56:	d030      	beq.n	8008cba <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008c62:	429a      	cmp	r2, r3
 8008c64:	d129      	bne.n	8008cba <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c70:	429a      	cmp	r2, r3
 8008c72:	d122      	bne.n	8008cba <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008c74:	68fa      	ldr	r2, [r7, #12]
 8008c76:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008c7a:	4013      	ands	r3, r2
 8008c7c:	687a      	ldr	r2, [r7, #4]
 8008c7e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008c80:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d119      	bne.n	8008cba <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c90:	085b      	lsrs	r3, r3, #1
 8008c92:	3b01      	subs	r3, #1
 8008c94:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008c96:	429a      	cmp	r2, r3
 8008c98:	d10f      	bne.n	8008cba <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ca4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008ca6:	429a      	cmp	r2, r3
 8008ca8:	d107      	bne.n	8008cba <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cb4:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008cb6:	429a      	cmp	r2, r3
 8008cb8:	d001      	beq.n	8008cbe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8008cba:	2301      	movs	r3, #1
 8008cbc:	e000      	b.n	8008cc0 <HAL_RCC_OscConfig+0x4f4>
        }
      }
    }
  }
  return HAL_OK;
 8008cbe:	2300      	movs	r3, #0
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	3718      	adds	r7, #24
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}
 8008cc8:	40007000 	.word	0x40007000
 8008ccc:	40023800 	.word	0x40023800
 8008cd0:	42470060 	.word	0x42470060

08008cd4 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b084      	sub	sp, #16
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	60f8      	str	r0, [r7, #12]
 8008cdc:	60b9      	str	r1, [r7, #8]
 8008cde:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d101      	bne.n	8008cea <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	e034      	b.n	8008d54 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8008cf0:	b2db      	uxtb	r3, r3
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d106      	bne.n	8008d04 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8008cfe:	68f8      	ldr	r0, [r7, #12]
 8008d00:	f7f8 fc92 	bl	8001628 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	681a      	ldr	r2, [r3, #0]
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	3308      	adds	r3, #8
 8008d0c:	4619      	mov	r1, r3
 8008d0e:	4610      	mov	r0, r2
 8008d10:	f001 fc68 	bl	800a5e4 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	6818      	ldr	r0, [r3, #0]
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	689b      	ldr	r3, [r3, #8]
 8008d1c:	461a      	mov	r2, r3
 8008d1e:	68b9      	ldr	r1, [r7, #8]
 8008d20:	f001 fcd0 	bl	800a6c4 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	6858      	ldr	r0, [r3, #4]
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	689a      	ldr	r2, [r3, #8]
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d30:	6879      	ldr	r1, [r7, #4]
 8008d32:	f001 fd1b 	bl	800a76c <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	68fa      	ldr	r2, [r7, #12]
 8008d3c:	6892      	ldr	r2, [r2, #8]
 8008d3e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	68fa      	ldr	r2, [r7, #12]
 8008d48:	6892      	ldr	r2, [r2, #8]
 8008d4a:	f041 0101 	orr.w	r1, r1, #1
 8008d4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8008d52:	2300      	movs	r3, #0
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	3710      	adds	r7, #16
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}

08008d5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b082      	sub	sp, #8
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d101      	bne.n	8008d6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	e041      	b.n	8008df2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d74:	b2db      	uxtb	r3, r3
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d106      	bne.n	8008d88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f7f9 ff8c 	bl	8002ca0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2202      	movs	r2, #2
 8008d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681a      	ldr	r2, [r3, #0]
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	3304      	adds	r3, #4
 8008d98:	4619      	mov	r1, r3
 8008d9a:	4610      	mov	r0, r2
 8008d9c:	f000 faae 	bl	80092fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2201      	movs	r2, #1
 8008da4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2201      	movs	r2, #1
 8008dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2201      	movs	r2, #1
 8008db4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2201      	movs	r2, #1
 8008dbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2201      	movs	r2, #1
 8008dc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2201      	movs	r2, #1
 8008dcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2201      	movs	r2, #1
 8008dd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2201      	movs	r2, #1
 8008ddc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2201      	movs	r2, #1
 8008de4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2201      	movs	r2, #1
 8008dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008df0:	2300      	movs	r3, #0
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	3708      	adds	r7, #8
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bd80      	pop	{r7, pc}
	...

08008dfc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	b085      	sub	sp, #20
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e0a:	b2db      	uxtb	r3, r3
 8008e0c:	2b01      	cmp	r3, #1
 8008e0e:	d001      	beq.n	8008e14 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008e10:	2301      	movs	r3, #1
 8008e12:	e046      	b.n	8008ea2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2202      	movs	r2, #2
 8008e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	4a23      	ldr	r2, [pc, #140]	; (8008eb0 <HAL_TIM_Base_Start+0xb4>)
 8008e22:	4293      	cmp	r3, r2
 8008e24:	d022      	beq.n	8008e6c <HAL_TIM_Base_Start+0x70>
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e2e:	d01d      	beq.n	8008e6c <HAL_TIM_Base_Start+0x70>
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	4a1f      	ldr	r2, [pc, #124]	; (8008eb4 <HAL_TIM_Base_Start+0xb8>)
 8008e36:	4293      	cmp	r3, r2
 8008e38:	d018      	beq.n	8008e6c <HAL_TIM_Base_Start+0x70>
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	4a1e      	ldr	r2, [pc, #120]	; (8008eb8 <HAL_TIM_Base_Start+0xbc>)
 8008e40:	4293      	cmp	r3, r2
 8008e42:	d013      	beq.n	8008e6c <HAL_TIM_Base_Start+0x70>
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	4a1c      	ldr	r2, [pc, #112]	; (8008ebc <HAL_TIM_Base_Start+0xc0>)
 8008e4a:	4293      	cmp	r3, r2
 8008e4c:	d00e      	beq.n	8008e6c <HAL_TIM_Base_Start+0x70>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	4a1b      	ldr	r2, [pc, #108]	; (8008ec0 <HAL_TIM_Base_Start+0xc4>)
 8008e54:	4293      	cmp	r3, r2
 8008e56:	d009      	beq.n	8008e6c <HAL_TIM_Base_Start+0x70>
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	4a19      	ldr	r2, [pc, #100]	; (8008ec4 <HAL_TIM_Base_Start+0xc8>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d004      	beq.n	8008e6c <HAL_TIM_Base_Start+0x70>
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	4a18      	ldr	r2, [pc, #96]	; (8008ec8 <HAL_TIM_Base_Start+0xcc>)
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d111      	bne.n	8008e90 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	689b      	ldr	r3, [r3, #8]
 8008e72:	f003 0307 	and.w	r3, r3, #7
 8008e76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	2b06      	cmp	r3, #6
 8008e7c:	d010      	beq.n	8008ea0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	681a      	ldr	r2, [r3, #0]
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f042 0201 	orr.w	r2, r2, #1
 8008e8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e8e:	e007      	b.n	8008ea0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	681a      	ldr	r2, [r3, #0]
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f042 0201 	orr.w	r2, r2, #1
 8008e9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008ea0:	2300      	movs	r3, #0
}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	3714      	adds	r7, #20
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eac:	4770      	bx	lr
 8008eae:	bf00      	nop
 8008eb0:	40010000 	.word	0x40010000
 8008eb4:	40000400 	.word	0x40000400
 8008eb8:	40000800 	.word	0x40000800
 8008ebc:	40000c00 	.word	0x40000c00
 8008ec0:	40010400 	.word	0x40010400
 8008ec4:	40014000 	.word	0x40014000
 8008ec8:	40001800 	.word	0x40001800

08008ecc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b082      	sub	sp, #8
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d101      	bne.n	8008ede <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008eda:	2301      	movs	r3, #1
 8008edc:	e041      	b.n	8008f62 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ee4:	b2db      	uxtb	r3, r3
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d106      	bne.n	8008ef8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2200      	movs	r2, #0
 8008eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f7f9 ff50 	bl	8002d98 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2202      	movs	r2, #2
 8008efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681a      	ldr	r2, [r3, #0]
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	3304      	adds	r3, #4
 8008f08:	4619      	mov	r1, r3
 8008f0a:	4610      	mov	r0, r2
 8008f0c:	f000 f9f6 	bl	80092fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2201      	movs	r2, #1
 8008f14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2201      	movs	r2, #1
 8008f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2201      	movs	r2, #1
 8008f24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2201      	movs	r2, #1
 8008f2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2201      	movs	r2, #1
 8008f34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2201      	movs	r2, #1
 8008f3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2201      	movs	r2, #1
 8008f44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2201      	movs	r2, #1
 8008f4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2201      	movs	r2, #1
 8008f54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2201      	movs	r2, #1
 8008f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008f60:	2300      	movs	r3, #0
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	3708      	adds	r7, #8
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}
	...

08008f6c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b084      	sub	sp, #16
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
 8008f74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d109      	bne.n	8008f90 <HAL_TIM_PWM_Start+0x24>
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008f82:	b2db      	uxtb	r3, r3
 8008f84:	2b01      	cmp	r3, #1
 8008f86:	bf14      	ite	ne
 8008f88:	2301      	movne	r3, #1
 8008f8a:	2300      	moveq	r3, #0
 8008f8c:	b2db      	uxtb	r3, r3
 8008f8e:	e022      	b.n	8008fd6 <HAL_TIM_PWM_Start+0x6a>
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	2b04      	cmp	r3, #4
 8008f94:	d109      	bne.n	8008faa <HAL_TIM_PWM_Start+0x3e>
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008f9c:	b2db      	uxtb	r3, r3
 8008f9e:	2b01      	cmp	r3, #1
 8008fa0:	bf14      	ite	ne
 8008fa2:	2301      	movne	r3, #1
 8008fa4:	2300      	moveq	r3, #0
 8008fa6:	b2db      	uxtb	r3, r3
 8008fa8:	e015      	b.n	8008fd6 <HAL_TIM_PWM_Start+0x6a>
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	2b08      	cmp	r3, #8
 8008fae:	d109      	bne.n	8008fc4 <HAL_TIM_PWM_Start+0x58>
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008fb6:	b2db      	uxtb	r3, r3
 8008fb8:	2b01      	cmp	r3, #1
 8008fba:	bf14      	ite	ne
 8008fbc:	2301      	movne	r3, #1
 8008fbe:	2300      	moveq	r3, #0
 8008fc0:	b2db      	uxtb	r3, r3
 8008fc2:	e008      	b.n	8008fd6 <HAL_TIM_PWM_Start+0x6a>
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008fca:	b2db      	uxtb	r3, r3
 8008fcc:	2b01      	cmp	r3, #1
 8008fce:	bf14      	ite	ne
 8008fd0:	2301      	movne	r3, #1
 8008fd2:	2300      	moveq	r3, #0
 8008fd4:	b2db      	uxtb	r3, r3
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d001      	beq.n	8008fde <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008fda:	2301      	movs	r3, #1
 8008fdc:	e07c      	b.n	80090d8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d104      	bne.n	8008fee <HAL_TIM_PWM_Start+0x82>
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2202      	movs	r2, #2
 8008fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008fec:	e013      	b.n	8009016 <HAL_TIM_PWM_Start+0xaa>
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	2b04      	cmp	r3, #4
 8008ff2:	d104      	bne.n	8008ffe <HAL_TIM_PWM_Start+0x92>
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2202      	movs	r2, #2
 8008ff8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008ffc:	e00b      	b.n	8009016 <HAL_TIM_PWM_Start+0xaa>
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	2b08      	cmp	r3, #8
 8009002:	d104      	bne.n	800900e <HAL_TIM_PWM_Start+0xa2>
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2202      	movs	r2, #2
 8009008:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800900c:	e003      	b.n	8009016 <HAL_TIM_PWM_Start+0xaa>
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2202      	movs	r2, #2
 8009012:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	2201      	movs	r2, #1
 800901c:	6839      	ldr	r1, [r7, #0]
 800901e:	4618      	mov	r0, r3
 8009020:	f000 fcc9 	bl	80099b6 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	4a2d      	ldr	r2, [pc, #180]	; (80090e0 <HAL_TIM_PWM_Start+0x174>)
 800902a:	4293      	cmp	r3, r2
 800902c:	d004      	beq.n	8009038 <HAL_TIM_PWM_Start+0xcc>
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	4a2c      	ldr	r2, [pc, #176]	; (80090e4 <HAL_TIM_PWM_Start+0x178>)
 8009034:	4293      	cmp	r3, r2
 8009036:	d101      	bne.n	800903c <HAL_TIM_PWM_Start+0xd0>
 8009038:	2301      	movs	r3, #1
 800903a:	e000      	b.n	800903e <HAL_TIM_PWM_Start+0xd2>
 800903c:	2300      	movs	r3, #0
 800903e:	2b00      	cmp	r3, #0
 8009040:	d007      	beq.n	8009052 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009050:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	4a22      	ldr	r2, [pc, #136]	; (80090e0 <HAL_TIM_PWM_Start+0x174>)
 8009058:	4293      	cmp	r3, r2
 800905a:	d022      	beq.n	80090a2 <HAL_TIM_PWM_Start+0x136>
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009064:	d01d      	beq.n	80090a2 <HAL_TIM_PWM_Start+0x136>
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	4a1f      	ldr	r2, [pc, #124]	; (80090e8 <HAL_TIM_PWM_Start+0x17c>)
 800906c:	4293      	cmp	r3, r2
 800906e:	d018      	beq.n	80090a2 <HAL_TIM_PWM_Start+0x136>
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	4a1d      	ldr	r2, [pc, #116]	; (80090ec <HAL_TIM_PWM_Start+0x180>)
 8009076:	4293      	cmp	r3, r2
 8009078:	d013      	beq.n	80090a2 <HAL_TIM_PWM_Start+0x136>
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	4a1c      	ldr	r2, [pc, #112]	; (80090f0 <HAL_TIM_PWM_Start+0x184>)
 8009080:	4293      	cmp	r3, r2
 8009082:	d00e      	beq.n	80090a2 <HAL_TIM_PWM_Start+0x136>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	4a16      	ldr	r2, [pc, #88]	; (80090e4 <HAL_TIM_PWM_Start+0x178>)
 800908a:	4293      	cmp	r3, r2
 800908c:	d009      	beq.n	80090a2 <HAL_TIM_PWM_Start+0x136>
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	4a18      	ldr	r2, [pc, #96]	; (80090f4 <HAL_TIM_PWM_Start+0x188>)
 8009094:	4293      	cmp	r3, r2
 8009096:	d004      	beq.n	80090a2 <HAL_TIM_PWM_Start+0x136>
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	4a16      	ldr	r2, [pc, #88]	; (80090f8 <HAL_TIM_PWM_Start+0x18c>)
 800909e:	4293      	cmp	r3, r2
 80090a0:	d111      	bne.n	80090c6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	689b      	ldr	r3, [r3, #8]
 80090a8:	f003 0307 	and.w	r3, r3, #7
 80090ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	2b06      	cmp	r3, #6
 80090b2:	d010      	beq.n	80090d6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	681a      	ldr	r2, [r3, #0]
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f042 0201 	orr.w	r2, r2, #1
 80090c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090c4:	e007      	b.n	80090d6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	681a      	ldr	r2, [r3, #0]
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f042 0201 	orr.w	r2, r2, #1
 80090d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80090d6:	2300      	movs	r3, #0
}
 80090d8:	4618      	mov	r0, r3
 80090da:	3710      	adds	r7, #16
 80090dc:	46bd      	mov	sp, r7
 80090de:	bd80      	pop	{r7, pc}
 80090e0:	40010000 	.word	0x40010000
 80090e4:	40010400 	.word	0x40010400
 80090e8:	40000400 	.word	0x40000400
 80090ec:	40000800 	.word	0x40000800
 80090f0:	40000c00 	.word	0x40000c00
 80090f4:	40014000 	.word	0x40014000
 80090f8:	40001800 	.word	0x40001800

080090fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b084      	sub	sp, #16
 8009100:	af00      	add	r7, sp, #0
 8009102:	60f8      	str	r0, [r7, #12]
 8009104:	60b9      	str	r1, [r7, #8]
 8009106:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800910e:	2b01      	cmp	r3, #1
 8009110:	d101      	bne.n	8009116 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8009112:	2302      	movs	r3, #2
 8009114:	e0ac      	b.n	8009270 <HAL_TIM_PWM_ConfigChannel+0x174>
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	2201      	movs	r2, #1
 800911a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2b0c      	cmp	r3, #12
 8009122:	f200 809f 	bhi.w	8009264 <HAL_TIM_PWM_ConfigChannel+0x168>
 8009126:	a201      	add	r2, pc, #4	; (adr r2, 800912c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8009128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800912c:	08009161 	.word	0x08009161
 8009130:	08009265 	.word	0x08009265
 8009134:	08009265 	.word	0x08009265
 8009138:	08009265 	.word	0x08009265
 800913c:	080091a1 	.word	0x080091a1
 8009140:	08009265 	.word	0x08009265
 8009144:	08009265 	.word	0x08009265
 8009148:	08009265 	.word	0x08009265
 800914c:	080091e3 	.word	0x080091e3
 8009150:	08009265 	.word	0x08009265
 8009154:	08009265 	.word	0x08009265
 8009158:	08009265 	.word	0x08009265
 800915c:	08009223 	.word	0x08009223
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	68b9      	ldr	r1, [r7, #8]
 8009166:	4618      	mov	r0, r3
 8009168:	f000 f968 	bl	800943c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	699a      	ldr	r2, [r3, #24]
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f042 0208 	orr.w	r2, r2, #8
 800917a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	699a      	ldr	r2, [r3, #24]
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f022 0204 	bic.w	r2, r2, #4
 800918a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	6999      	ldr	r1, [r3, #24]
 8009192:	68bb      	ldr	r3, [r7, #8]
 8009194:	691a      	ldr	r2, [r3, #16]
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	430a      	orrs	r2, r1
 800919c:	619a      	str	r2, [r3, #24]
      break;
 800919e:	e062      	b.n	8009266 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	68b9      	ldr	r1, [r7, #8]
 80091a6:	4618      	mov	r0, r3
 80091a8:	f000 f9b8 	bl	800951c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	699a      	ldr	r2, [r3, #24]
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80091ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	699a      	ldr	r2, [r3, #24]
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80091ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	6999      	ldr	r1, [r3, #24]
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	691b      	ldr	r3, [r3, #16]
 80091d6:	021a      	lsls	r2, r3, #8
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	430a      	orrs	r2, r1
 80091de:	619a      	str	r2, [r3, #24]
      break;
 80091e0:	e041      	b.n	8009266 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	68b9      	ldr	r1, [r7, #8]
 80091e8:	4618      	mov	r0, r3
 80091ea:	f000 fa0d 	bl	8009608 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	69da      	ldr	r2, [r3, #28]
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	f042 0208 	orr.w	r2, r2, #8
 80091fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	69da      	ldr	r2, [r3, #28]
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f022 0204 	bic.w	r2, r2, #4
 800920c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	69d9      	ldr	r1, [r3, #28]
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	691a      	ldr	r2, [r3, #16]
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	430a      	orrs	r2, r1
 800921e:	61da      	str	r2, [r3, #28]
      break;
 8009220:	e021      	b.n	8009266 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	68b9      	ldr	r1, [r7, #8]
 8009228:	4618      	mov	r0, r3
 800922a:	f000 fa61 	bl	80096f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	69da      	ldr	r2, [r3, #28]
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800923c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	69da      	ldr	r2, [r3, #28]
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800924c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	69d9      	ldr	r1, [r3, #28]
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	691b      	ldr	r3, [r3, #16]
 8009258:	021a      	lsls	r2, r3, #8
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	430a      	orrs	r2, r1
 8009260:	61da      	str	r2, [r3, #28]
      break;
 8009262:	e000      	b.n	8009266 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8009264:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	2200      	movs	r2, #0
 800926a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800926e:	2300      	movs	r3, #0
}
 8009270:	4618      	mov	r0, r3
 8009272:	3710      	adds	r7, #16
 8009274:	46bd      	mov	sp, r7
 8009276:	bd80      	pop	{r7, pc}

08009278 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b082      	sub	sp, #8
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
 8009280:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009288:	2b01      	cmp	r3, #1
 800928a:	d101      	bne.n	8009290 <HAL_TIM_SlaveConfigSynchro+0x18>
 800928c:	2302      	movs	r3, #2
 800928e:	e031      	b.n	80092f4 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2201      	movs	r2, #1
 8009294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2202      	movs	r2, #2
 800929c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80092a0:	6839      	ldr	r1, [r7, #0]
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	f000 fa7a 	bl	800979c <TIM_SlaveTimer_SetConfig>
 80092a8:	4603      	mov	r3, r0
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d009      	beq.n	80092c2 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2201      	movs	r2, #1
 80092b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	2200      	movs	r2, #0
 80092ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80092be:	2301      	movs	r3, #1
 80092c0:	e018      	b.n	80092f4 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	68da      	ldr	r2, [r3, #12]
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80092d0:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	68da      	ldr	r2, [r3, #12]
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80092e0:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2201      	movs	r2, #1
 80092e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2200      	movs	r2, #0
 80092ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80092f2:	2300      	movs	r3, #0
}
 80092f4:	4618      	mov	r0, r3
 80092f6:	3708      	adds	r7, #8
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}

080092fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80092fc:	b480      	push	{r7}
 80092fe:	b085      	sub	sp, #20
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
 8009304:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	4a40      	ldr	r2, [pc, #256]	; (8009410 <TIM_Base_SetConfig+0x114>)
 8009310:	4293      	cmp	r3, r2
 8009312:	d013      	beq.n	800933c <TIM_Base_SetConfig+0x40>
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800931a:	d00f      	beq.n	800933c <TIM_Base_SetConfig+0x40>
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	4a3d      	ldr	r2, [pc, #244]	; (8009414 <TIM_Base_SetConfig+0x118>)
 8009320:	4293      	cmp	r3, r2
 8009322:	d00b      	beq.n	800933c <TIM_Base_SetConfig+0x40>
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	4a3c      	ldr	r2, [pc, #240]	; (8009418 <TIM_Base_SetConfig+0x11c>)
 8009328:	4293      	cmp	r3, r2
 800932a:	d007      	beq.n	800933c <TIM_Base_SetConfig+0x40>
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	4a3b      	ldr	r2, [pc, #236]	; (800941c <TIM_Base_SetConfig+0x120>)
 8009330:	4293      	cmp	r3, r2
 8009332:	d003      	beq.n	800933c <TIM_Base_SetConfig+0x40>
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	4a3a      	ldr	r2, [pc, #232]	; (8009420 <TIM_Base_SetConfig+0x124>)
 8009338:	4293      	cmp	r3, r2
 800933a:	d108      	bne.n	800934e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009342:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	685b      	ldr	r3, [r3, #4]
 8009348:	68fa      	ldr	r2, [r7, #12]
 800934a:	4313      	orrs	r3, r2
 800934c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	4a2f      	ldr	r2, [pc, #188]	; (8009410 <TIM_Base_SetConfig+0x114>)
 8009352:	4293      	cmp	r3, r2
 8009354:	d02b      	beq.n	80093ae <TIM_Base_SetConfig+0xb2>
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800935c:	d027      	beq.n	80093ae <TIM_Base_SetConfig+0xb2>
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	4a2c      	ldr	r2, [pc, #176]	; (8009414 <TIM_Base_SetConfig+0x118>)
 8009362:	4293      	cmp	r3, r2
 8009364:	d023      	beq.n	80093ae <TIM_Base_SetConfig+0xb2>
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	4a2b      	ldr	r2, [pc, #172]	; (8009418 <TIM_Base_SetConfig+0x11c>)
 800936a:	4293      	cmp	r3, r2
 800936c:	d01f      	beq.n	80093ae <TIM_Base_SetConfig+0xb2>
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	4a2a      	ldr	r2, [pc, #168]	; (800941c <TIM_Base_SetConfig+0x120>)
 8009372:	4293      	cmp	r3, r2
 8009374:	d01b      	beq.n	80093ae <TIM_Base_SetConfig+0xb2>
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	4a29      	ldr	r2, [pc, #164]	; (8009420 <TIM_Base_SetConfig+0x124>)
 800937a:	4293      	cmp	r3, r2
 800937c:	d017      	beq.n	80093ae <TIM_Base_SetConfig+0xb2>
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	4a28      	ldr	r2, [pc, #160]	; (8009424 <TIM_Base_SetConfig+0x128>)
 8009382:	4293      	cmp	r3, r2
 8009384:	d013      	beq.n	80093ae <TIM_Base_SetConfig+0xb2>
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	4a27      	ldr	r2, [pc, #156]	; (8009428 <TIM_Base_SetConfig+0x12c>)
 800938a:	4293      	cmp	r3, r2
 800938c:	d00f      	beq.n	80093ae <TIM_Base_SetConfig+0xb2>
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	4a26      	ldr	r2, [pc, #152]	; (800942c <TIM_Base_SetConfig+0x130>)
 8009392:	4293      	cmp	r3, r2
 8009394:	d00b      	beq.n	80093ae <TIM_Base_SetConfig+0xb2>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	4a25      	ldr	r2, [pc, #148]	; (8009430 <TIM_Base_SetConfig+0x134>)
 800939a:	4293      	cmp	r3, r2
 800939c:	d007      	beq.n	80093ae <TIM_Base_SetConfig+0xb2>
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	4a24      	ldr	r2, [pc, #144]	; (8009434 <TIM_Base_SetConfig+0x138>)
 80093a2:	4293      	cmp	r3, r2
 80093a4:	d003      	beq.n	80093ae <TIM_Base_SetConfig+0xb2>
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	4a23      	ldr	r2, [pc, #140]	; (8009438 <TIM_Base_SetConfig+0x13c>)
 80093aa:	4293      	cmp	r3, r2
 80093ac:	d108      	bne.n	80093c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80093b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	68db      	ldr	r3, [r3, #12]
 80093ba:	68fa      	ldr	r2, [r7, #12]
 80093bc:	4313      	orrs	r3, r2
 80093be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	695b      	ldr	r3, [r3, #20]
 80093ca:	4313      	orrs	r3, r2
 80093cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	68fa      	ldr	r2, [r7, #12]
 80093d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	689a      	ldr	r2, [r3, #8]
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	681a      	ldr	r2, [r3, #0]
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	4a0a      	ldr	r2, [pc, #40]	; (8009410 <TIM_Base_SetConfig+0x114>)
 80093e8:	4293      	cmp	r3, r2
 80093ea:	d003      	beq.n	80093f4 <TIM_Base_SetConfig+0xf8>
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	4a0c      	ldr	r2, [pc, #48]	; (8009420 <TIM_Base_SetConfig+0x124>)
 80093f0:	4293      	cmp	r3, r2
 80093f2:	d103      	bne.n	80093fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	691a      	ldr	r2, [r3, #16]
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2201      	movs	r2, #1
 8009400:	615a      	str	r2, [r3, #20]
}
 8009402:	bf00      	nop
 8009404:	3714      	adds	r7, #20
 8009406:	46bd      	mov	sp, r7
 8009408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940c:	4770      	bx	lr
 800940e:	bf00      	nop
 8009410:	40010000 	.word	0x40010000
 8009414:	40000400 	.word	0x40000400
 8009418:	40000800 	.word	0x40000800
 800941c:	40000c00 	.word	0x40000c00
 8009420:	40010400 	.word	0x40010400
 8009424:	40014000 	.word	0x40014000
 8009428:	40014400 	.word	0x40014400
 800942c:	40014800 	.word	0x40014800
 8009430:	40001800 	.word	0x40001800
 8009434:	40001c00 	.word	0x40001c00
 8009438:	40002000 	.word	0x40002000

0800943c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800943c:	b480      	push	{r7}
 800943e:	b087      	sub	sp, #28
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
 8009444:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6a1b      	ldr	r3, [r3, #32]
 800944a:	f023 0201 	bic.w	r2, r3, #1
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6a1b      	ldr	r3, [r3, #32]
 8009456:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	685b      	ldr	r3, [r3, #4]
 800945c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	699b      	ldr	r3, [r3, #24]
 8009462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800946a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	f023 0303 	bic.w	r3, r3, #3
 8009472:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	68fa      	ldr	r2, [r7, #12]
 800947a:	4313      	orrs	r3, r2
 800947c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800947e:	697b      	ldr	r3, [r7, #20]
 8009480:	f023 0302 	bic.w	r3, r3, #2
 8009484:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	689b      	ldr	r3, [r3, #8]
 800948a:	697a      	ldr	r2, [r7, #20]
 800948c:	4313      	orrs	r3, r2
 800948e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	4a20      	ldr	r2, [pc, #128]	; (8009514 <TIM_OC1_SetConfig+0xd8>)
 8009494:	4293      	cmp	r3, r2
 8009496:	d003      	beq.n	80094a0 <TIM_OC1_SetConfig+0x64>
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	4a1f      	ldr	r2, [pc, #124]	; (8009518 <TIM_OC1_SetConfig+0xdc>)
 800949c:	4293      	cmp	r3, r2
 800949e:	d10c      	bne.n	80094ba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80094a0:	697b      	ldr	r3, [r7, #20]
 80094a2:	f023 0308 	bic.w	r3, r3, #8
 80094a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	68db      	ldr	r3, [r3, #12]
 80094ac:	697a      	ldr	r2, [r7, #20]
 80094ae:	4313      	orrs	r3, r2
 80094b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80094b2:	697b      	ldr	r3, [r7, #20]
 80094b4:	f023 0304 	bic.w	r3, r3, #4
 80094b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	4a15      	ldr	r2, [pc, #84]	; (8009514 <TIM_OC1_SetConfig+0xd8>)
 80094be:	4293      	cmp	r3, r2
 80094c0:	d003      	beq.n	80094ca <TIM_OC1_SetConfig+0x8e>
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	4a14      	ldr	r2, [pc, #80]	; (8009518 <TIM_OC1_SetConfig+0xdc>)
 80094c6:	4293      	cmp	r3, r2
 80094c8:	d111      	bne.n	80094ee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80094ca:	693b      	ldr	r3, [r7, #16]
 80094cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80094d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80094d2:	693b      	ldr	r3, [r7, #16]
 80094d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80094d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	695b      	ldr	r3, [r3, #20]
 80094de:	693a      	ldr	r2, [r7, #16]
 80094e0:	4313      	orrs	r3, r2
 80094e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	699b      	ldr	r3, [r3, #24]
 80094e8:	693a      	ldr	r2, [r7, #16]
 80094ea:	4313      	orrs	r3, r2
 80094ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	693a      	ldr	r2, [r7, #16]
 80094f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	68fa      	ldr	r2, [r7, #12]
 80094f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	685a      	ldr	r2, [r3, #4]
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	697a      	ldr	r2, [r7, #20]
 8009506:	621a      	str	r2, [r3, #32]
}
 8009508:	bf00      	nop
 800950a:	371c      	adds	r7, #28
 800950c:	46bd      	mov	sp, r7
 800950e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009512:	4770      	bx	lr
 8009514:	40010000 	.word	0x40010000
 8009518:	40010400 	.word	0x40010400

0800951c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800951c:	b480      	push	{r7}
 800951e:	b087      	sub	sp, #28
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
 8009524:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6a1b      	ldr	r3, [r3, #32]
 800952a:	f023 0210 	bic.w	r2, r3, #16
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6a1b      	ldr	r3, [r3, #32]
 8009536:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	685b      	ldr	r3, [r3, #4]
 800953c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	699b      	ldr	r3, [r3, #24]
 8009542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800954a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009552:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	021b      	lsls	r3, r3, #8
 800955a:	68fa      	ldr	r2, [r7, #12]
 800955c:	4313      	orrs	r3, r2
 800955e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009560:	697b      	ldr	r3, [r7, #20]
 8009562:	f023 0320 	bic.w	r3, r3, #32
 8009566:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	689b      	ldr	r3, [r3, #8]
 800956c:	011b      	lsls	r3, r3, #4
 800956e:	697a      	ldr	r2, [r7, #20]
 8009570:	4313      	orrs	r3, r2
 8009572:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	4a22      	ldr	r2, [pc, #136]	; (8009600 <TIM_OC2_SetConfig+0xe4>)
 8009578:	4293      	cmp	r3, r2
 800957a:	d003      	beq.n	8009584 <TIM_OC2_SetConfig+0x68>
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	4a21      	ldr	r2, [pc, #132]	; (8009604 <TIM_OC2_SetConfig+0xe8>)
 8009580:	4293      	cmp	r3, r2
 8009582:	d10d      	bne.n	80095a0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009584:	697b      	ldr	r3, [r7, #20]
 8009586:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800958a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	68db      	ldr	r3, [r3, #12]
 8009590:	011b      	lsls	r3, r3, #4
 8009592:	697a      	ldr	r2, [r7, #20]
 8009594:	4313      	orrs	r3, r2
 8009596:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009598:	697b      	ldr	r3, [r7, #20]
 800959a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800959e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	4a17      	ldr	r2, [pc, #92]	; (8009600 <TIM_OC2_SetConfig+0xe4>)
 80095a4:	4293      	cmp	r3, r2
 80095a6:	d003      	beq.n	80095b0 <TIM_OC2_SetConfig+0x94>
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	4a16      	ldr	r2, [pc, #88]	; (8009604 <TIM_OC2_SetConfig+0xe8>)
 80095ac:	4293      	cmp	r3, r2
 80095ae:	d113      	bne.n	80095d8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80095b0:	693b      	ldr	r3, [r7, #16]
 80095b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80095b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80095b8:	693b      	ldr	r3, [r7, #16]
 80095ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80095be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	695b      	ldr	r3, [r3, #20]
 80095c4:	009b      	lsls	r3, r3, #2
 80095c6:	693a      	ldr	r2, [r7, #16]
 80095c8:	4313      	orrs	r3, r2
 80095ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	699b      	ldr	r3, [r3, #24]
 80095d0:	009b      	lsls	r3, r3, #2
 80095d2:	693a      	ldr	r2, [r7, #16]
 80095d4:	4313      	orrs	r3, r2
 80095d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	693a      	ldr	r2, [r7, #16]
 80095dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	68fa      	ldr	r2, [r7, #12]
 80095e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	685a      	ldr	r2, [r3, #4]
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	697a      	ldr	r2, [r7, #20]
 80095f0:	621a      	str	r2, [r3, #32]
}
 80095f2:	bf00      	nop
 80095f4:	371c      	adds	r7, #28
 80095f6:	46bd      	mov	sp, r7
 80095f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fc:	4770      	bx	lr
 80095fe:	bf00      	nop
 8009600:	40010000 	.word	0x40010000
 8009604:	40010400 	.word	0x40010400

08009608 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009608:	b480      	push	{r7}
 800960a:	b087      	sub	sp, #28
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
 8009610:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6a1b      	ldr	r3, [r3, #32]
 8009616:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6a1b      	ldr	r3, [r3, #32]
 8009622:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	685b      	ldr	r3, [r3, #4]
 8009628:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	69db      	ldr	r3, [r3, #28]
 800962e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009636:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	f023 0303 	bic.w	r3, r3, #3
 800963e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	68fa      	ldr	r2, [r7, #12]
 8009646:	4313      	orrs	r3, r2
 8009648:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800964a:	697b      	ldr	r3, [r7, #20]
 800964c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009650:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	689b      	ldr	r3, [r3, #8]
 8009656:	021b      	lsls	r3, r3, #8
 8009658:	697a      	ldr	r2, [r7, #20]
 800965a:	4313      	orrs	r3, r2
 800965c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	4a21      	ldr	r2, [pc, #132]	; (80096e8 <TIM_OC3_SetConfig+0xe0>)
 8009662:	4293      	cmp	r3, r2
 8009664:	d003      	beq.n	800966e <TIM_OC3_SetConfig+0x66>
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	4a20      	ldr	r2, [pc, #128]	; (80096ec <TIM_OC3_SetConfig+0xe4>)
 800966a:	4293      	cmp	r3, r2
 800966c:	d10d      	bne.n	800968a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800966e:	697b      	ldr	r3, [r7, #20]
 8009670:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009674:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	68db      	ldr	r3, [r3, #12]
 800967a:	021b      	lsls	r3, r3, #8
 800967c:	697a      	ldr	r2, [r7, #20]
 800967e:	4313      	orrs	r3, r2
 8009680:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009682:	697b      	ldr	r3, [r7, #20]
 8009684:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009688:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	4a16      	ldr	r2, [pc, #88]	; (80096e8 <TIM_OC3_SetConfig+0xe0>)
 800968e:	4293      	cmp	r3, r2
 8009690:	d003      	beq.n	800969a <TIM_OC3_SetConfig+0x92>
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	4a15      	ldr	r2, [pc, #84]	; (80096ec <TIM_OC3_SetConfig+0xe4>)
 8009696:	4293      	cmp	r3, r2
 8009698:	d113      	bne.n	80096c2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800969a:	693b      	ldr	r3, [r7, #16]
 800969c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80096a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80096a2:	693b      	ldr	r3, [r7, #16]
 80096a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80096a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	695b      	ldr	r3, [r3, #20]
 80096ae:	011b      	lsls	r3, r3, #4
 80096b0:	693a      	ldr	r2, [r7, #16]
 80096b2:	4313      	orrs	r3, r2
 80096b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	699b      	ldr	r3, [r3, #24]
 80096ba:	011b      	lsls	r3, r3, #4
 80096bc:	693a      	ldr	r2, [r7, #16]
 80096be:	4313      	orrs	r3, r2
 80096c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	693a      	ldr	r2, [r7, #16]
 80096c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	68fa      	ldr	r2, [r7, #12]
 80096cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	685a      	ldr	r2, [r3, #4]
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	697a      	ldr	r2, [r7, #20]
 80096da:	621a      	str	r2, [r3, #32]
}
 80096dc:	bf00      	nop
 80096de:	371c      	adds	r7, #28
 80096e0:	46bd      	mov	sp, r7
 80096e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e6:	4770      	bx	lr
 80096e8:	40010000 	.word	0x40010000
 80096ec:	40010400 	.word	0x40010400

080096f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80096f0:	b480      	push	{r7}
 80096f2:	b087      	sub	sp, #28
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
 80096f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6a1b      	ldr	r3, [r3, #32]
 80096fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6a1b      	ldr	r3, [r3, #32]
 800970a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	685b      	ldr	r3, [r3, #4]
 8009710:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	69db      	ldr	r3, [r3, #28]
 8009716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800971e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009726:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	021b      	lsls	r3, r3, #8
 800972e:	68fa      	ldr	r2, [r7, #12]
 8009730:	4313      	orrs	r3, r2
 8009732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009734:	693b      	ldr	r3, [r7, #16]
 8009736:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800973a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	689b      	ldr	r3, [r3, #8]
 8009740:	031b      	lsls	r3, r3, #12
 8009742:	693a      	ldr	r2, [r7, #16]
 8009744:	4313      	orrs	r3, r2
 8009746:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	4a12      	ldr	r2, [pc, #72]	; (8009794 <TIM_OC4_SetConfig+0xa4>)
 800974c:	4293      	cmp	r3, r2
 800974e:	d003      	beq.n	8009758 <TIM_OC4_SetConfig+0x68>
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	4a11      	ldr	r2, [pc, #68]	; (8009798 <TIM_OC4_SetConfig+0xa8>)
 8009754:	4293      	cmp	r3, r2
 8009756:	d109      	bne.n	800976c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009758:	697b      	ldr	r3, [r7, #20]
 800975a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800975e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	695b      	ldr	r3, [r3, #20]
 8009764:	019b      	lsls	r3, r3, #6
 8009766:	697a      	ldr	r2, [r7, #20]
 8009768:	4313      	orrs	r3, r2
 800976a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	697a      	ldr	r2, [r7, #20]
 8009770:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	68fa      	ldr	r2, [r7, #12]
 8009776:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	685a      	ldr	r2, [r3, #4]
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	693a      	ldr	r2, [r7, #16]
 8009784:	621a      	str	r2, [r3, #32]
}
 8009786:	bf00      	nop
 8009788:	371c      	adds	r7, #28
 800978a:	46bd      	mov	sp, r7
 800978c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009790:	4770      	bx	lr
 8009792:	bf00      	nop
 8009794:	40010000 	.word	0x40010000
 8009798:	40010400 	.word	0x40010400

0800979c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b086      	sub	sp, #24
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
 80097a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	689b      	ldr	r3, [r3, #8]
 80097ac:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80097ae:	697b      	ldr	r3, [r7, #20]
 80097b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097b4:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	685b      	ldr	r3, [r3, #4]
 80097ba:	697a      	ldr	r2, [r7, #20]
 80097bc:	4313      	orrs	r3, r2
 80097be:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80097c0:	697b      	ldr	r3, [r7, #20]
 80097c2:	f023 0307 	bic.w	r3, r3, #7
 80097c6:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	697a      	ldr	r2, [r7, #20]
 80097ce:	4313      	orrs	r3, r2
 80097d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	697a      	ldr	r2, [r7, #20]
 80097d8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	685b      	ldr	r3, [r3, #4]
 80097de:	2b70      	cmp	r3, #112	; 0x70
 80097e0:	d01a      	beq.n	8009818 <TIM_SlaveTimer_SetConfig+0x7c>
 80097e2:	2b70      	cmp	r3, #112	; 0x70
 80097e4:	d860      	bhi.n	80098a8 <TIM_SlaveTimer_SetConfig+0x10c>
 80097e6:	2b60      	cmp	r3, #96	; 0x60
 80097e8:	d054      	beq.n	8009894 <TIM_SlaveTimer_SetConfig+0xf8>
 80097ea:	2b60      	cmp	r3, #96	; 0x60
 80097ec:	d85c      	bhi.n	80098a8 <TIM_SlaveTimer_SetConfig+0x10c>
 80097ee:	2b50      	cmp	r3, #80	; 0x50
 80097f0:	d046      	beq.n	8009880 <TIM_SlaveTimer_SetConfig+0xe4>
 80097f2:	2b50      	cmp	r3, #80	; 0x50
 80097f4:	d858      	bhi.n	80098a8 <TIM_SlaveTimer_SetConfig+0x10c>
 80097f6:	2b40      	cmp	r3, #64	; 0x40
 80097f8:	d019      	beq.n	800982e <TIM_SlaveTimer_SetConfig+0x92>
 80097fa:	2b40      	cmp	r3, #64	; 0x40
 80097fc:	d854      	bhi.n	80098a8 <TIM_SlaveTimer_SetConfig+0x10c>
 80097fe:	2b30      	cmp	r3, #48	; 0x30
 8009800:	d054      	beq.n	80098ac <TIM_SlaveTimer_SetConfig+0x110>
 8009802:	2b30      	cmp	r3, #48	; 0x30
 8009804:	d850      	bhi.n	80098a8 <TIM_SlaveTimer_SetConfig+0x10c>
 8009806:	2b20      	cmp	r3, #32
 8009808:	d050      	beq.n	80098ac <TIM_SlaveTimer_SetConfig+0x110>
 800980a:	2b20      	cmp	r3, #32
 800980c:	d84c      	bhi.n	80098a8 <TIM_SlaveTimer_SetConfig+0x10c>
 800980e:	2b00      	cmp	r3, #0
 8009810:	d04c      	beq.n	80098ac <TIM_SlaveTimer_SetConfig+0x110>
 8009812:	2b10      	cmp	r3, #16
 8009814:	d04a      	beq.n	80098ac <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 8009816:	e047      	b.n	80098a8 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	6818      	ldr	r0, [r3, #0]
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	68d9      	ldr	r1, [r3, #12]
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	689a      	ldr	r2, [r3, #8]
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	691b      	ldr	r3, [r3, #16]
 8009828:	f000 f8a5 	bl	8009976 <TIM_ETR_SetConfig>
      break;
 800982c:	e03f      	b.n	80098ae <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	2b05      	cmp	r3, #5
 8009834:	d101      	bne.n	800983a <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 8009836:	2301      	movs	r3, #1
 8009838:	e03a      	b.n	80098b0 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	6a1b      	ldr	r3, [r3, #32]
 8009840:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	6a1a      	ldr	r2, [r3, #32]
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f022 0201 	bic.w	r2, r2, #1
 8009850:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	699b      	ldr	r3, [r3, #24]
 8009858:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009860:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	691b      	ldr	r3, [r3, #16]
 8009866:	011b      	lsls	r3, r3, #4
 8009868:	68fa      	ldr	r2, [r7, #12]
 800986a:	4313      	orrs	r3, r2
 800986c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	68fa      	ldr	r2, [r7, #12]
 8009874:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	693a      	ldr	r2, [r7, #16]
 800987c:	621a      	str	r2, [r3, #32]
      break;
 800987e:	e016      	b.n	80098ae <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	6818      	ldr	r0, [r3, #0]
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	6899      	ldr	r1, [r3, #8]
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	691b      	ldr	r3, [r3, #16]
 800988c:	461a      	mov	r2, r3
 800988e:	f000 f813 	bl	80098b8 <TIM_TI1_ConfigInputStage>
      break;
 8009892:	e00c      	b.n	80098ae <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	6818      	ldr	r0, [r3, #0]
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	6899      	ldr	r1, [r3, #8]
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	691b      	ldr	r3, [r3, #16]
 80098a0:	461a      	mov	r2, r3
 80098a2:	f000 f838 	bl	8009916 <TIM_TI2_ConfigInputStage>
      break;
 80098a6:	e002      	b.n	80098ae <TIM_SlaveTimer_SetConfig+0x112>
      break;
 80098a8:	bf00      	nop
 80098aa:	e000      	b.n	80098ae <TIM_SlaveTimer_SetConfig+0x112>
        break;
 80098ac:	bf00      	nop
  }
  return HAL_OK;
 80098ae:	2300      	movs	r3, #0
}
 80098b0:	4618      	mov	r0, r3
 80098b2:	3718      	adds	r7, #24
 80098b4:	46bd      	mov	sp, r7
 80098b6:	bd80      	pop	{r7, pc}

080098b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80098b8:	b480      	push	{r7}
 80098ba:	b087      	sub	sp, #28
 80098bc:	af00      	add	r7, sp, #0
 80098be:	60f8      	str	r0, [r7, #12]
 80098c0:	60b9      	str	r1, [r7, #8]
 80098c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	6a1b      	ldr	r3, [r3, #32]
 80098c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	6a1b      	ldr	r3, [r3, #32]
 80098ce:	f023 0201 	bic.w	r2, r3, #1
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	699b      	ldr	r3, [r3, #24]
 80098da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80098dc:	693b      	ldr	r3, [r7, #16]
 80098de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80098e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	011b      	lsls	r3, r3, #4
 80098e8:	693a      	ldr	r2, [r7, #16]
 80098ea:	4313      	orrs	r3, r2
 80098ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80098ee:	697b      	ldr	r3, [r7, #20]
 80098f0:	f023 030a 	bic.w	r3, r3, #10
 80098f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80098f6:	697a      	ldr	r2, [r7, #20]
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	4313      	orrs	r3, r2
 80098fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	693a      	ldr	r2, [r7, #16]
 8009902:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	697a      	ldr	r2, [r7, #20]
 8009908:	621a      	str	r2, [r3, #32]
}
 800990a:	bf00      	nop
 800990c:	371c      	adds	r7, #28
 800990e:	46bd      	mov	sp, r7
 8009910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009914:	4770      	bx	lr

08009916 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009916:	b480      	push	{r7}
 8009918:	b087      	sub	sp, #28
 800991a:	af00      	add	r7, sp, #0
 800991c:	60f8      	str	r0, [r7, #12]
 800991e:	60b9      	str	r1, [r7, #8]
 8009920:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	6a1b      	ldr	r3, [r3, #32]
 8009926:	f023 0210 	bic.w	r2, r3, #16
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	699b      	ldr	r3, [r3, #24]
 8009932:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	6a1b      	ldr	r3, [r3, #32]
 8009938:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800993a:	697b      	ldr	r3, [r7, #20]
 800993c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009940:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	031b      	lsls	r3, r3, #12
 8009946:	697a      	ldr	r2, [r7, #20]
 8009948:	4313      	orrs	r3, r2
 800994a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800994c:	693b      	ldr	r3, [r7, #16]
 800994e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009952:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009954:	68bb      	ldr	r3, [r7, #8]
 8009956:	011b      	lsls	r3, r3, #4
 8009958:	693a      	ldr	r2, [r7, #16]
 800995a:	4313      	orrs	r3, r2
 800995c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	697a      	ldr	r2, [r7, #20]
 8009962:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	693a      	ldr	r2, [r7, #16]
 8009968:	621a      	str	r2, [r3, #32]
}
 800996a:	bf00      	nop
 800996c:	371c      	adds	r7, #28
 800996e:	46bd      	mov	sp, r7
 8009970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009974:	4770      	bx	lr

08009976 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009976:	b480      	push	{r7}
 8009978:	b087      	sub	sp, #28
 800997a:	af00      	add	r7, sp, #0
 800997c:	60f8      	str	r0, [r7, #12]
 800997e:	60b9      	str	r1, [r7, #8]
 8009980:	607a      	str	r2, [r7, #4]
 8009982:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	689b      	ldr	r3, [r3, #8]
 8009988:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800998a:	697b      	ldr	r3, [r7, #20]
 800998c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009990:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	021a      	lsls	r2, r3, #8
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	431a      	orrs	r2, r3
 800999a:	68bb      	ldr	r3, [r7, #8]
 800999c:	4313      	orrs	r3, r2
 800999e:	697a      	ldr	r2, [r7, #20]
 80099a0:	4313      	orrs	r3, r2
 80099a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	697a      	ldr	r2, [r7, #20]
 80099a8:	609a      	str	r2, [r3, #8]
}
 80099aa:	bf00      	nop
 80099ac:	371c      	adds	r7, #28
 80099ae:	46bd      	mov	sp, r7
 80099b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b4:	4770      	bx	lr

080099b6 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80099b6:	b480      	push	{r7}
 80099b8:	b087      	sub	sp, #28
 80099ba:	af00      	add	r7, sp, #0
 80099bc:	60f8      	str	r0, [r7, #12]
 80099be:	60b9      	str	r1, [r7, #8]
 80099c0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80099c2:	68bb      	ldr	r3, [r7, #8]
 80099c4:	f003 031f 	and.w	r3, r3, #31
 80099c8:	2201      	movs	r2, #1
 80099ca:	fa02 f303 	lsl.w	r3, r2, r3
 80099ce:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	6a1a      	ldr	r2, [r3, #32]
 80099d4:	697b      	ldr	r3, [r7, #20]
 80099d6:	43db      	mvns	r3, r3
 80099d8:	401a      	ands	r2, r3
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	6a1a      	ldr	r2, [r3, #32]
 80099e2:	68bb      	ldr	r3, [r7, #8]
 80099e4:	f003 031f 	and.w	r3, r3, #31
 80099e8:	6879      	ldr	r1, [r7, #4]
 80099ea:	fa01 f303 	lsl.w	r3, r1, r3
 80099ee:	431a      	orrs	r2, r3
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	621a      	str	r2, [r3, #32]
}
 80099f4:	bf00      	nop
 80099f6:	371c      	adds	r7, #28
 80099f8:	46bd      	mov	sp, r7
 80099fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fe:	4770      	bx	lr

08009a00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009a00:	b480      	push	{r7}
 8009a02:	b085      	sub	sp, #20
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
 8009a08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a10:	2b01      	cmp	r3, #1
 8009a12:	d101      	bne.n	8009a18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009a14:	2302      	movs	r3, #2
 8009a16:	e05a      	b.n	8009ace <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	2201      	movs	r2, #1
 8009a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	2202      	movs	r2, #2
 8009a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	685b      	ldr	r3, [r3, #4]
 8009a2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	689b      	ldr	r3, [r3, #8]
 8009a36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	68fa      	ldr	r2, [r7, #12]
 8009a46:	4313      	orrs	r3, r2
 8009a48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	68fa      	ldr	r2, [r7, #12]
 8009a50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	4a21      	ldr	r2, [pc, #132]	; (8009adc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009a58:	4293      	cmp	r3, r2
 8009a5a:	d022      	beq.n	8009aa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a64:	d01d      	beq.n	8009aa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	4a1d      	ldr	r2, [pc, #116]	; (8009ae0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009a6c:	4293      	cmp	r3, r2
 8009a6e:	d018      	beq.n	8009aa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	4a1b      	ldr	r2, [pc, #108]	; (8009ae4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009a76:	4293      	cmp	r3, r2
 8009a78:	d013      	beq.n	8009aa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	4a1a      	ldr	r2, [pc, #104]	; (8009ae8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009a80:	4293      	cmp	r3, r2
 8009a82:	d00e      	beq.n	8009aa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	4a18      	ldr	r2, [pc, #96]	; (8009aec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009a8a:	4293      	cmp	r3, r2
 8009a8c:	d009      	beq.n	8009aa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	4a17      	ldr	r2, [pc, #92]	; (8009af0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009a94:	4293      	cmp	r3, r2
 8009a96:	d004      	beq.n	8009aa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	4a15      	ldr	r2, [pc, #84]	; (8009af4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009a9e:	4293      	cmp	r3, r2
 8009aa0:	d10c      	bne.n	8009abc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009aa8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	685b      	ldr	r3, [r3, #4]
 8009aae:	68ba      	ldr	r2, [r7, #8]
 8009ab0:	4313      	orrs	r3, r2
 8009ab2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	68ba      	ldr	r2, [r7, #8]
 8009aba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2201      	movs	r2, #1
 8009ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009acc:	2300      	movs	r3, #0
}
 8009ace:	4618      	mov	r0, r3
 8009ad0:	3714      	adds	r7, #20
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad8:	4770      	bx	lr
 8009ada:	bf00      	nop
 8009adc:	40010000 	.word	0x40010000
 8009ae0:	40000400 	.word	0x40000400
 8009ae4:	40000800 	.word	0x40000800
 8009ae8:	40000c00 	.word	0x40000c00
 8009aec:	40010400 	.word	0x40010400
 8009af0:	40014000 	.word	0x40014000
 8009af4:	40001800 	.word	0x40001800

08009af8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b082      	sub	sp, #8
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d101      	bne.n	8009b0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009b06:	2301      	movs	r3, #1
 8009b08:	e03f      	b.n	8009b8a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b10:	b2db      	uxtb	r3, r3
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d106      	bne.n	8009b24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2200      	movs	r2, #0
 8009b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f7fa fab6 	bl	8004090 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2224      	movs	r2, #36	; 0x24
 8009b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	68da      	ldr	r2, [r3, #12]
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009b3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	f000 fb79 	bl	800a234 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	691a      	ldr	r2, [r3, #16]
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009b50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	695a      	ldr	r2, [r3, #20]
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009b60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	68da      	ldr	r2, [r3, #12]
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009b70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2200      	movs	r2, #0
 8009b76:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2220      	movs	r2, #32
 8009b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2220      	movs	r2, #32
 8009b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009b88:	2300      	movs	r3, #0
}
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	3708      	adds	r7, #8
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bd80      	pop	{r7, pc}

08009b92 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009b92:	b480      	push	{r7}
 8009b94:	b085      	sub	sp, #20
 8009b96:	af00      	add	r7, sp, #0
 8009b98:	60f8      	str	r0, [r7, #12]
 8009b9a:	60b9      	str	r1, [r7, #8]
 8009b9c:	4613      	mov	r3, r2
 8009b9e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ba6:	b2db      	uxtb	r3, r3
 8009ba8:	2b20      	cmp	r3, #32
 8009baa:	d130      	bne.n	8009c0e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009bac:	68bb      	ldr	r3, [r7, #8]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d002      	beq.n	8009bb8 <HAL_UART_Transmit_IT+0x26>
 8009bb2:	88fb      	ldrh	r3, [r7, #6]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d101      	bne.n	8009bbc <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8009bb8:	2301      	movs	r3, #1
 8009bba:	e029      	b.n	8009c10 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009bc2:	2b01      	cmp	r3, #1
 8009bc4:	d101      	bne.n	8009bca <HAL_UART_Transmit_IT+0x38>
 8009bc6:	2302      	movs	r3, #2
 8009bc8:	e022      	b.n	8009c10 <HAL_UART_Transmit_IT+0x7e>
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	2201      	movs	r2, #1
 8009bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	68ba      	ldr	r2, [r7, #8]
 8009bd6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	88fa      	ldrh	r2, [r7, #6]
 8009bdc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	88fa      	ldrh	r2, [r7, #6]
 8009be2:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	2200      	movs	r2, #0
 8009be8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	2221      	movs	r2, #33	; 0x21
 8009bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	68da      	ldr	r2, [r3, #12]
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009c08:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	e000      	b.n	8009c10 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8009c0e:	2302      	movs	r3, #2
  }
}
 8009c10:	4618      	mov	r0, r3
 8009c12:	3714      	adds	r7, #20
 8009c14:	46bd      	mov	sp, r7
 8009c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1a:	4770      	bx	lr

08009c1c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b08a      	sub	sp, #40	; 0x28
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	68db      	ldr	r3, [r3, #12]
 8009c32:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	695b      	ldr	r3, [r3, #20]
 8009c3a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8009c40:	2300      	movs	r3, #0
 8009c42:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c46:	f003 030f 	and.w	r3, r3, #15
 8009c4a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8009c4c:	69bb      	ldr	r3, [r7, #24]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d10d      	bne.n	8009c6e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c54:	f003 0320 	and.w	r3, r3, #32
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d008      	beq.n	8009c6e <HAL_UART_IRQHandler+0x52>
 8009c5c:	6a3b      	ldr	r3, [r7, #32]
 8009c5e:	f003 0320 	and.w	r3, r3, #32
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d003      	beq.n	8009c6e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8009c66:	6878      	ldr	r0, [r7, #4]
 8009c68:	f000 fa4d 	bl	800a106 <UART_Receive_IT>
      return;
 8009c6c:	e17c      	b.n	8009f68 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009c6e:	69bb      	ldr	r3, [r7, #24]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	f000 80b1 	beq.w	8009dd8 <HAL_UART_IRQHandler+0x1bc>
 8009c76:	69fb      	ldr	r3, [r7, #28]
 8009c78:	f003 0301 	and.w	r3, r3, #1
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d105      	bne.n	8009c8c <HAL_UART_IRQHandler+0x70>
 8009c80:	6a3b      	ldr	r3, [r7, #32]
 8009c82:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	f000 80a6 	beq.w	8009dd8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c8e:	f003 0301 	and.w	r3, r3, #1
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d00a      	beq.n	8009cac <HAL_UART_IRQHandler+0x90>
 8009c96:	6a3b      	ldr	r3, [r7, #32]
 8009c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d005      	beq.n	8009cac <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ca4:	f043 0201 	orr.w	r2, r3, #1
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cae:	f003 0304 	and.w	r3, r3, #4
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d00a      	beq.n	8009ccc <HAL_UART_IRQHandler+0xb0>
 8009cb6:	69fb      	ldr	r3, [r7, #28]
 8009cb8:	f003 0301 	and.w	r3, r3, #1
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d005      	beq.n	8009ccc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cc4:	f043 0202 	orr.w	r2, r3, #2
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cce:	f003 0302 	and.w	r3, r3, #2
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d00a      	beq.n	8009cec <HAL_UART_IRQHandler+0xd0>
 8009cd6:	69fb      	ldr	r3, [r7, #28]
 8009cd8:	f003 0301 	and.w	r3, r3, #1
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d005      	beq.n	8009cec <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ce4:	f043 0204 	orr.w	r2, r3, #4
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8009cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cee:	f003 0308 	and.w	r3, r3, #8
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d00f      	beq.n	8009d16 <HAL_UART_IRQHandler+0xfa>
 8009cf6:	6a3b      	ldr	r3, [r7, #32]
 8009cf8:	f003 0320 	and.w	r3, r3, #32
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d104      	bne.n	8009d0a <HAL_UART_IRQHandler+0xee>
 8009d00:	69fb      	ldr	r3, [r7, #28]
 8009d02:	f003 0301 	and.w	r3, r3, #1
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d005      	beq.n	8009d16 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d0e:	f043 0208 	orr.w	r2, r3, #8
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	f000 811f 	beq.w	8009f5e <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d22:	f003 0320 	and.w	r3, r3, #32
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d007      	beq.n	8009d3a <HAL_UART_IRQHandler+0x11e>
 8009d2a:	6a3b      	ldr	r3, [r7, #32]
 8009d2c:	f003 0320 	and.w	r3, r3, #32
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d002      	beq.n	8009d3a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f000 f9e6 	bl	800a106 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	695b      	ldr	r3, [r3, #20]
 8009d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d44:	2b40      	cmp	r3, #64	; 0x40
 8009d46:	bf0c      	ite	eq
 8009d48:	2301      	moveq	r3, #1
 8009d4a:	2300      	movne	r3, #0
 8009d4c:	b2db      	uxtb	r3, r3
 8009d4e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d54:	f003 0308 	and.w	r3, r3, #8
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d102      	bne.n	8009d62 <HAL_UART_IRQHandler+0x146>
 8009d5c:	697b      	ldr	r3, [r7, #20]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d031      	beq.n	8009dc6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	f000 f926 	bl	8009fb4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	695b      	ldr	r3, [r3, #20]
 8009d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d72:	2b40      	cmp	r3, #64	; 0x40
 8009d74:	d123      	bne.n	8009dbe <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	695a      	ldr	r2, [r3, #20]
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009d84:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d013      	beq.n	8009db6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d92:	4a77      	ldr	r2, [pc, #476]	; (8009f70 <HAL_UART_IRQHandler+0x354>)
 8009d94:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	f7fb f911 	bl	8004fc2 <HAL_DMA_Abort_IT>
 8009da0:	4603      	mov	r3, r0
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d016      	beq.n	8009dd4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009daa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009dac:	687a      	ldr	r2, [r7, #4]
 8009dae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009db0:	4610      	mov	r0, r2
 8009db2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009db4:	e00e      	b.n	8009dd4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	f000 f8e6 	bl	8009f88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009dbc:	e00a      	b.n	8009dd4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009dbe:	6878      	ldr	r0, [r7, #4]
 8009dc0:	f000 f8e2 	bl	8009f88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009dc4:	e006      	b.n	8009dd4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009dc6:	6878      	ldr	r0, [r7, #4]
 8009dc8:	f000 f8de 	bl	8009f88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2200      	movs	r2, #0
 8009dd0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009dd2:	e0c4      	b.n	8009f5e <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009dd4:	bf00      	nop
    return;
 8009dd6:	e0c2      	b.n	8009f5e <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ddc:	2b01      	cmp	r3, #1
 8009dde:	f040 80a2 	bne.w	8009f26 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8009de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009de4:	f003 0310 	and.w	r3, r3, #16
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	f000 809c 	beq.w	8009f26 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8009dee:	6a3b      	ldr	r3, [r7, #32]
 8009df0:	f003 0310 	and.w	r3, r3, #16
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	f000 8096 	beq.w	8009f26 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	60fb      	str	r3, [r7, #12]
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	60fb      	str	r3, [r7, #12]
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	685b      	ldr	r3, [r3, #4]
 8009e0c:	60fb      	str	r3, [r7, #12]
 8009e0e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	695b      	ldr	r3, [r3, #20]
 8009e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e1a:	2b40      	cmp	r3, #64	; 0x40
 8009e1c:	d14f      	bne.n	8009ebe <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	685b      	ldr	r3, [r3, #4]
 8009e26:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8009e28:	8a3b      	ldrh	r3, [r7, #16]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	f000 8099 	beq.w	8009f62 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009e34:	8a3a      	ldrh	r2, [r7, #16]
 8009e36:	429a      	cmp	r2, r3
 8009e38:	f080 8093 	bcs.w	8009f62 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	8a3a      	ldrh	r2, [r7, #16]
 8009e40:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e46:	69db      	ldr	r3, [r3, #28]
 8009e48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e4c:	d02b      	beq.n	8009ea6 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	68da      	ldr	r2, [r3, #12]
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009e5c:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	695a      	ldr	r2, [r3, #20]
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	f022 0201 	bic.w	r2, r2, #1
 8009e6c:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	695a      	ldr	r2, [r3, #20]
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009e7c:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2220      	movs	r2, #32
 8009e82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	2200      	movs	r2, #0
 8009e8a:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	68da      	ldr	r2, [r3, #12]
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	f022 0210 	bic.w	r2, r2, #16
 8009e9a:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	f7fb f81e 	bl	8004ee2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009eae:	b29b      	uxth	r3, r3
 8009eb0:	1ad3      	subs	r3, r2, r3
 8009eb2:	b29b      	uxth	r3, r3
 8009eb4:	4619      	mov	r1, r3
 8009eb6:	6878      	ldr	r0, [r7, #4]
 8009eb8:	f000 f870 	bl	8009f9c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8009ebc:	e051      	b.n	8009f62 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009ec6:	b29b      	uxth	r3, r3
 8009ec8:	1ad3      	subs	r3, r2, r3
 8009eca:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009ed0:	b29b      	uxth	r3, r3
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d047      	beq.n	8009f66 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8009ed6:	8a7b      	ldrh	r3, [r7, #18]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d044      	beq.n	8009f66 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	68da      	ldr	r2, [r3, #12]
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009eea:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	695a      	ldr	r2, [r3, #20]
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	f022 0201 	bic.w	r2, r2, #1
 8009efa:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2220      	movs	r2, #32
 8009f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2200      	movs	r2, #0
 8009f08:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	68da      	ldr	r2, [r3, #12]
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	f022 0210 	bic.w	r2, r2, #16
 8009f18:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009f1a:	8a7b      	ldrh	r3, [r7, #18]
 8009f1c:	4619      	mov	r1, r3
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	f000 f83c 	bl	8009f9c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8009f24:	e01f      	b.n	8009f66 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d008      	beq.n	8009f42 <HAL_UART_IRQHandler+0x326>
 8009f30:	6a3b      	ldr	r3, [r7, #32]
 8009f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d003      	beq.n	8009f42 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8009f3a:	6878      	ldr	r0, [r7, #4]
 8009f3c:	f000 f87b 	bl	800a036 <UART_Transmit_IT>
    return;
 8009f40:	e012      	b.n	8009f68 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d00d      	beq.n	8009f68 <HAL_UART_IRQHandler+0x34c>
 8009f4c:	6a3b      	ldr	r3, [r7, #32]
 8009f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d008      	beq.n	8009f68 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8009f56:	6878      	ldr	r0, [r7, #4]
 8009f58:	f000 f8bd 	bl	800a0d6 <UART_EndTransmit_IT>
    return;
 8009f5c:	e004      	b.n	8009f68 <HAL_UART_IRQHandler+0x34c>
    return;
 8009f5e:	bf00      	nop
 8009f60:	e002      	b.n	8009f68 <HAL_UART_IRQHandler+0x34c>
      return;
 8009f62:	bf00      	nop
 8009f64:	e000      	b.n	8009f68 <HAL_UART_IRQHandler+0x34c>
      return;
 8009f66:	bf00      	nop
  }
}
 8009f68:	3728      	adds	r7, #40	; 0x28
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	bd80      	pop	{r7, pc}
 8009f6e:	bf00      	nop
 8009f70:	0800a00f 	.word	0x0800a00f

08009f74 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009f74:	b480      	push	{r7}
 8009f76:	b083      	sub	sp, #12
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009f7c:	bf00      	nop
 8009f7e:	370c      	adds	r7, #12
 8009f80:	46bd      	mov	sp, r7
 8009f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f86:	4770      	bx	lr

08009f88 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009f88:	b480      	push	{r7}
 8009f8a:	b083      	sub	sp, #12
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009f90:	bf00      	nop
 8009f92:	370c      	adds	r7, #12
 8009f94:	46bd      	mov	sp, r7
 8009f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9a:	4770      	bx	lr

08009f9c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009f9c:	b480      	push	{r7}
 8009f9e:	b083      	sub	sp, #12
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
 8009fa4:	460b      	mov	r3, r1
 8009fa6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009fa8:	bf00      	nop
 8009faa:	370c      	adds	r7, #12
 8009fac:	46bd      	mov	sp, r7
 8009fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb2:	4770      	bx	lr

08009fb4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009fb4:	b480      	push	{r7}
 8009fb6:	b083      	sub	sp, #12
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	68da      	ldr	r2, [r3, #12]
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009fca:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	695a      	ldr	r2, [r3, #20]
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	f022 0201 	bic.w	r2, r2, #1
 8009fda:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fe0:	2b01      	cmp	r3, #1
 8009fe2:	d107      	bne.n	8009ff4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	68da      	ldr	r2, [r3, #12]
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	f022 0210 	bic.w	r2, r2, #16
 8009ff2:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2220      	movs	r2, #32
 8009ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2200      	movs	r2, #0
 800a000:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a002:	bf00      	nop
 800a004:	370c      	adds	r7, #12
 800a006:	46bd      	mov	sp, r7
 800a008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00c:	4770      	bx	lr

0800a00e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a00e:	b580      	push	{r7, lr}
 800a010:	b084      	sub	sp, #16
 800a012:	af00      	add	r7, sp, #0
 800a014:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a01a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	2200      	movs	r2, #0
 800a020:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	2200      	movs	r2, #0
 800a026:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a028:	68f8      	ldr	r0, [r7, #12]
 800a02a:	f7ff ffad 	bl	8009f88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a02e:	bf00      	nop
 800a030:	3710      	adds	r7, #16
 800a032:	46bd      	mov	sp, r7
 800a034:	bd80      	pop	{r7, pc}

0800a036 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a036:	b480      	push	{r7}
 800a038:	b085      	sub	sp, #20
 800a03a:	af00      	add	r7, sp, #0
 800a03c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a044:	b2db      	uxtb	r3, r3
 800a046:	2b21      	cmp	r3, #33	; 0x21
 800a048:	d13e      	bne.n	800a0c8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	689b      	ldr	r3, [r3, #8]
 800a04e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a052:	d114      	bne.n	800a07e <UART_Transmit_IT+0x48>
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	691b      	ldr	r3, [r3, #16]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d110      	bne.n	800a07e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	6a1b      	ldr	r3, [r3, #32]
 800a060:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	881b      	ldrh	r3, [r3, #0]
 800a066:	461a      	mov	r2, r3
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a070:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	6a1b      	ldr	r3, [r3, #32]
 800a076:	1c9a      	adds	r2, r3, #2
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	621a      	str	r2, [r3, #32]
 800a07c:	e008      	b.n	800a090 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	6a1b      	ldr	r3, [r3, #32]
 800a082:	1c59      	adds	r1, r3, #1
 800a084:	687a      	ldr	r2, [r7, #4]
 800a086:	6211      	str	r1, [r2, #32]
 800a088:	781a      	ldrb	r2, [r3, #0]
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a094:	b29b      	uxth	r3, r3
 800a096:	3b01      	subs	r3, #1
 800a098:	b29b      	uxth	r3, r3
 800a09a:	687a      	ldr	r2, [r7, #4]
 800a09c:	4619      	mov	r1, r3
 800a09e:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d10f      	bne.n	800a0c4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	68da      	ldr	r2, [r3, #12]
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a0b2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	68da      	ldr	r2, [r3, #12]
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a0c2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	e000      	b.n	800a0ca <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a0c8:	2302      	movs	r3, #2
  }
}
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	3714      	adds	r7, #20
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d4:	4770      	bx	lr

0800a0d6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a0d6:	b580      	push	{r7, lr}
 800a0d8:	b082      	sub	sp, #8
 800a0da:	af00      	add	r7, sp, #0
 800a0dc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	68da      	ldr	r2, [r3, #12]
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a0ec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2220      	movs	r2, #32
 800a0f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a0f6:	6878      	ldr	r0, [r7, #4]
 800a0f8:	f7f9 faaa 	bl	8003650 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a0fc:	2300      	movs	r3, #0
}
 800a0fe:	4618      	mov	r0, r3
 800a100:	3708      	adds	r7, #8
 800a102:	46bd      	mov	sp, r7
 800a104:	bd80      	pop	{r7, pc}

0800a106 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a106:	b580      	push	{r7, lr}
 800a108:	b084      	sub	sp, #16
 800a10a:	af00      	add	r7, sp, #0
 800a10c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a114:	b2db      	uxtb	r3, r3
 800a116:	2b22      	cmp	r3, #34	; 0x22
 800a118:	f040 8087 	bne.w	800a22a <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	689b      	ldr	r3, [r3, #8]
 800a120:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a124:	d117      	bne.n	800a156 <UART_Receive_IT+0x50>
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	691b      	ldr	r3, [r3, #16]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d113      	bne.n	800a156 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a12e:	2300      	movs	r3, #0
 800a130:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a136:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	685b      	ldr	r3, [r3, #4]
 800a13e:	b29b      	uxth	r3, r3
 800a140:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a144:	b29a      	uxth	r2, r3
 800a146:	68bb      	ldr	r3, [r7, #8]
 800a148:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a14e:	1c9a      	adds	r2, r3, #2
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	629a      	str	r2, [r3, #40]	; 0x28
 800a154:	e026      	b.n	800a1a4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a15a:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800a15c:	2300      	movs	r3, #0
 800a15e:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	689b      	ldr	r3, [r3, #8]
 800a164:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a168:	d007      	beq.n	800a17a <UART_Receive_IT+0x74>
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	689b      	ldr	r3, [r3, #8]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d10a      	bne.n	800a188 <UART_Receive_IT+0x82>
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	691b      	ldr	r3, [r3, #16]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d106      	bne.n	800a188 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	685b      	ldr	r3, [r3, #4]
 800a180:	b2da      	uxtb	r2, r3
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	701a      	strb	r2, [r3, #0]
 800a186:	e008      	b.n	800a19a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	685b      	ldr	r3, [r3, #4]
 800a18e:	b2db      	uxtb	r3, r3
 800a190:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a194:	b2da      	uxtb	r2, r3
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a19e:	1c5a      	adds	r2, r3, #1
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a1a8:	b29b      	uxth	r3, r3
 800a1aa:	3b01      	subs	r3, #1
 800a1ac:	b29b      	uxth	r3, r3
 800a1ae:	687a      	ldr	r2, [r7, #4]
 800a1b0:	4619      	mov	r1, r3
 800a1b2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d136      	bne.n	800a226 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	68da      	ldr	r2, [r3, #12]
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	f022 0220 	bic.w	r2, r2, #32
 800a1c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	68da      	ldr	r2, [r3, #12]
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a1d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	695a      	ldr	r2, [r3, #20]
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	f022 0201 	bic.w	r2, r2, #1
 800a1e6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2220      	movs	r2, #32
 800a1ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1f4:	2b01      	cmp	r3, #1
 800a1f6:	d10e      	bne.n	800a216 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	68da      	ldr	r2, [r3, #12]
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	f022 0210 	bic.w	r2, r2, #16
 800a206:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a20c:	4619      	mov	r1, r3
 800a20e:	6878      	ldr	r0, [r7, #4]
 800a210:	f7ff fec4 	bl	8009f9c <HAL_UARTEx_RxEventCallback>
 800a214:	e002      	b.n	800a21c <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800a216:	6878      	ldr	r0, [r7, #4]
 800a218:	f7ff feac 	bl	8009f74 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2200      	movs	r2, #0
 800a220:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 800a222:	2300      	movs	r3, #0
 800a224:	e002      	b.n	800a22c <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 800a226:	2300      	movs	r3, #0
 800a228:	e000      	b.n	800a22c <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 800a22a:	2302      	movs	r3, #2
  }
}
 800a22c:	4618      	mov	r0, r3
 800a22e:	3710      	adds	r7, #16
 800a230:	46bd      	mov	sp, r7
 800a232:	bd80      	pop	{r7, pc}

0800a234 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a238:	b09f      	sub	sp, #124	; 0x7c
 800a23a:	af00      	add	r7, sp, #0
 800a23c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a23e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	691b      	ldr	r3, [r3, #16]
 800a244:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a248:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a24a:	68d9      	ldr	r1, [r3, #12]
 800a24c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a24e:	681a      	ldr	r2, [r3, #0]
 800a250:	ea40 0301 	orr.w	r3, r0, r1
 800a254:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a256:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a258:	689a      	ldr	r2, [r3, #8]
 800a25a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a25c:	691b      	ldr	r3, [r3, #16]
 800a25e:	431a      	orrs	r2, r3
 800a260:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a262:	695b      	ldr	r3, [r3, #20]
 800a264:	431a      	orrs	r2, r3
 800a266:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a268:	69db      	ldr	r3, [r3, #28]
 800a26a:	4313      	orrs	r3, r2
 800a26c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800a26e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	68db      	ldr	r3, [r3, #12]
 800a274:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a278:	f021 010c 	bic.w	r1, r1, #12
 800a27c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a27e:	681a      	ldr	r2, [r3, #0]
 800a280:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a282:	430b      	orrs	r3, r1
 800a284:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a286:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	695b      	ldr	r3, [r3, #20]
 800a28c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a290:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a292:	6999      	ldr	r1, [r3, #24]
 800a294:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a296:	681a      	ldr	r2, [r3, #0]
 800a298:	ea40 0301 	orr.w	r3, r0, r1
 800a29c:	6153      	str	r3, [r2, #20]


#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 800a29e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2a0:	681a      	ldr	r2, [r3, #0]
 800a2a2:	4b6a      	ldr	r3, [pc, #424]	; (800a44c <UART_SetConfig+0x218>)
 800a2a4:	429a      	cmp	r2, r3
 800a2a6:	d00e      	beq.n	800a2c6 <UART_SetConfig+0x92>
 800a2a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2aa:	681a      	ldr	r2, [r3, #0]
 800a2ac:	4b68      	ldr	r3, [pc, #416]	; (800a450 <UART_SetConfig+0x21c>)
 800a2ae:	429a      	cmp	r2, r3
 800a2b0:	d009      	beq.n	800a2c6 <UART_SetConfig+0x92>
 800a2b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2b4:	681a      	ldr	r2, [r3, #0]
 800a2b6:	4b67      	ldr	r3, [pc, #412]	; (800a454 <UART_SetConfig+0x220>)
 800a2b8:	429a      	cmp	r2, r3
 800a2ba:	d004      	beq.n	800a2c6 <UART_SetConfig+0x92>
 800a2bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2be:	681a      	ldr	r2, [r3, #0]
 800a2c0:	4b65      	ldr	r3, [pc, #404]	; (800a458 <UART_SetConfig+0x224>)
 800a2c2:	429a      	cmp	r2, r3
 800a2c4:	d103      	bne.n	800a2ce <UART_SetConfig+0x9a>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a2c6:	f7fd ffe1 	bl	800828c <HAL_RCC_GetPCLK2Freq>
 800a2ca:	6778      	str	r0, [r7, #116]	; 0x74
 800a2cc:	e002      	b.n	800a2d4 <UART_SetConfig+0xa0>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a2ce:	f7fd ffc9 	bl	8008264 <HAL_RCC_GetPCLK1Freq>
 800a2d2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a2d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2d6:	69db      	ldr	r3, [r3, #28]
 800a2d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a2dc:	f040 80c0 	bne.w	800a460 <UART_SetConfig+0x22c>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a2e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a2e2:	461c      	mov	r4, r3
 800a2e4:	f04f 0500 	mov.w	r5, #0
 800a2e8:	4622      	mov	r2, r4
 800a2ea:	462b      	mov	r3, r5
 800a2ec:	1891      	adds	r1, r2, r2
 800a2ee:	6439      	str	r1, [r7, #64]	; 0x40
 800a2f0:	415b      	adcs	r3, r3
 800a2f2:	647b      	str	r3, [r7, #68]	; 0x44
 800a2f4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a2f8:	1912      	adds	r2, r2, r4
 800a2fa:	eb45 0303 	adc.w	r3, r5, r3
 800a2fe:	f04f 0000 	mov.w	r0, #0
 800a302:	f04f 0100 	mov.w	r1, #0
 800a306:	00d9      	lsls	r1, r3, #3
 800a308:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a30c:	00d0      	lsls	r0, r2, #3
 800a30e:	4602      	mov	r2, r0
 800a310:	460b      	mov	r3, r1
 800a312:	1911      	adds	r1, r2, r4
 800a314:	6639      	str	r1, [r7, #96]	; 0x60
 800a316:	416b      	adcs	r3, r5
 800a318:	667b      	str	r3, [r7, #100]	; 0x64
 800a31a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a31c:	685b      	ldr	r3, [r3, #4]
 800a31e:	461a      	mov	r2, r3
 800a320:	f04f 0300 	mov.w	r3, #0
 800a324:	1891      	adds	r1, r2, r2
 800a326:	63b9      	str	r1, [r7, #56]	; 0x38
 800a328:	415b      	adcs	r3, r3
 800a32a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a32c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a330:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800a334:	f7f6 fcc4 	bl	8000cc0 <__aeabi_uldivmod>
 800a338:	4602      	mov	r2, r0
 800a33a:	460b      	mov	r3, r1
 800a33c:	4b47      	ldr	r3, [pc, #284]	; (800a45c <UART_SetConfig+0x228>)
 800a33e:	fba3 2302 	umull	r2, r3, r3, r2
 800a342:	095b      	lsrs	r3, r3, #5
 800a344:	011e      	lsls	r6, r3, #4
 800a346:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a348:	461c      	mov	r4, r3
 800a34a:	f04f 0500 	mov.w	r5, #0
 800a34e:	4622      	mov	r2, r4
 800a350:	462b      	mov	r3, r5
 800a352:	1891      	adds	r1, r2, r2
 800a354:	6339      	str	r1, [r7, #48]	; 0x30
 800a356:	415b      	adcs	r3, r3
 800a358:	637b      	str	r3, [r7, #52]	; 0x34
 800a35a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a35e:	1912      	adds	r2, r2, r4
 800a360:	eb45 0303 	adc.w	r3, r5, r3
 800a364:	f04f 0000 	mov.w	r0, #0
 800a368:	f04f 0100 	mov.w	r1, #0
 800a36c:	00d9      	lsls	r1, r3, #3
 800a36e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a372:	00d0      	lsls	r0, r2, #3
 800a374:	4602      	mov	r2, r0
 800a376:	460b      	mov	r3, r1
 800a378:	1911      	adds	r1, r2, r4
 800a37a:	65b9      	str	r1, [r7, #88]	; 0x58
 800a37c:	416b      	adcs	r3, r5
 800a37e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a380:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a382:	685b      	ldr	r3, [r3, #4]
 800a384:	461a      	mov	r2, r3
 800a386:	f04f 0300 	mov.w	r3, #0
 800a38a:	1891      	adds	r1, r2, r2
 800a38c:	62b9      	str	r1, [r7, #40]	; 0x28
 800a38e:	415b      	adcs	r3, r3
 800a390:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a392:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a396:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800a39a:	f7f6 fc91 	bl	8000cc0 <__aeabi_uldivmod>
 800a39e:	4602      	mov	r2, r0
 800a3a0:	460b      	mov	r3, r1
 800a3a2:	4b2e      	ldr	r3, [pc, #184]	; (800a45c <UART_SetConfig+0x228>)
 800a3a4:	fba3 1302 	umull	r1, r3, r3, r2
 800a3a8:	095b      	lsrs	r3, r3, #5
 800a3aa:	2164      	movs	r1, #100	; 0x64
 800a3ac:	fb01 f303 	mul.w	r3, r1, r3
 800a3b0:	1ad3      	subs	r3, r2, r3
 800a3b2:	00db      	lsls	r3, r3, #3
 800a3b4:	3332      	adds	r3, #50	; 0x32
 800a3b6:	4a29      	ldr	r2, [pc, #164]	; (800a45c <UART_SetConfig+0x228>)
 800a3b8:	fba2 2303 	umull	r2, r3, r2, r3
 800a3bc:	095b      	lsrs	r3, r3, #5
 800a3be:	005b      	lsls	r3, r3, #1
 800a3c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a3c4:	441e      	add	r6, r3
 800a3c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	f04f 0100 	mov.w	r1, #0
 800a3ce:	4602      	mov	r2, r0
 800a3d0:	460b      	mov	r3, r1
 800a3d2:	1894      	adds	r4, r2, r2
 800a3d4:	623c      	str	r4, [r7, #32]
 800a3d6:	415b      	adcs	r3, r3
 800a3d8:	627b      	str	r3, [r7, #36]	; 0x24
 800a3da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a3de:	1812      	adds	r2, r2, r0
 800a3e0:	eb41 0303 	adc.w	r3, r1, r3
 800a3e4:	f04f 0400 	mov.w	r4, #0
 800a3e8:	f04f 0500 	mov.w	r5, #0
 800a3ec:	00dd      	lsls	r5, r3, #3
 800a3ee:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a3f2:	00d4      	lsls	r4, r2, #3
 800a3f4:	4622      	mov	r2, r4
 800a3f6:	462b      	mov	r3, r5
 800a3f8:	1814      	adds	r4, r2, r0
 800a3fa:	653c      	str	r4, [r7, #80]	; 0x50
 800a3fc:	414b      	adcs	r3, r1
 800a3fe:	657b      	str	r3, [r7, #84]	; 0x54
 800a400:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a402:	685b      	ldr	r3, [r3, #4]
 800a404:	461a      	mov	r2, r3
 800a406:	f04f 0300 	mov.w	r3, #0
 800a40a:	1891      	adds	r1, r2, r2
 800a40c:	61b9      	str	r1, [r7, #24]
 800a40e:	415b      	adcs	r3, r3
 800a410:	61fb      	str	r3, [r7, #28]
 800a412:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a416:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800a41a:	f7f6 fc51 	bl	8000cc0 <__aeabi_uldivmod>
 800a41e:	4602      	mov	r2, r0
 800a420:	460b      	mov	r3, r1
 800a422:	4b0e      	ldr	r3, [pc, #56]	; (800a45c <UART_SetConfig+0x228>)
 800a424:	fba3 1302 	umull	r1, r3, r3, r2
 800a428:	095b      	lsrs	r3, r3, #5
 800a42a:	2164      	movs	r1, #100	; 0x64
 800a42c:	fb01 f303 	mul.w	r3, r1, r3
 800a430:	1ad3      	subs	r3, r2, r3
 800a432:	00db      	lsls	r3, r3, #3
 800a434:	3332      	adds	r3, #50	; 0x32
 800a436:	4a09      	ldr	r2, [pc, #36]	; (800a45c <UART_SetConfig+0x228>)
 800a438:	fba2 2303 	umull	r2, r3, r2, r3
 800a43c:	095b      	lsrs	r3, r3, #5
 800a43e:	f003 0207 	and.w	r2, r3, #7
 800a442:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	4432      	add	r2, r6
 800a448:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a44a:	e0c3      	b.n	800a5d4 <UART_SetConfig+0x3a0>
 800a44c:	40011000 	.word	0x40011000
 800a450:	40011400 	.word	0x40011400
 800a454:	40011800 	.word	0x40011800
 800a458:	40011c00 	.word	0x40011c00
 800a45c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a460:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a462:	461c      	mov	r4, r3
 800a464:	f04f 0500 	mov.w	r5, #0
 800a468:	4622      	mov	r2, r4
 800a46a:	462b      	mov	r3, r5
 800a46c:	1891      	adds	r1, r2, r2
 800a46e:	6139      	str	r1, [r7, #16]
 800a470:	415b      	adcs	r3, r3
 800a472:	617b      	str	r3, [r7, #20]
 800a474:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a478:	1912      	adds	r2, r2, r4
 800a47a:	eb45 0303 	adc.w	r3, r5, r3
 800a47e:	f04f 0000 	mov.w	r0, #0
 800a482:	f04f 0100 	mov.w	r1, #0
 800a486:	00d9      	lsls	r1, r3, #3
 800a488:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a48c:	00d0      	lsls	r0, r2, #3
 800a48e:	4602      	mov	r2, r0
 800a490:	460b      	mov	r3, r1
 800a492:	eb12 0804 	adds.w	r8, r2, r4
 800a496:	eb43 0905 	adc.w	r9, r3, r5
 800a49a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a49c:	685b      	ldr	r3, [r3, #4]
 800a49e:	4618      	mov	r0, r3
 800a4a0:	f04f 0100 	mov.w	r1, #0
 800a4a4:	f04f 0200 	mov.w	r2, #0
 800a4a8:	f04f 0300 	mov.w	r3, #0
 800a4ac:	008b      	lsls	r3, r1, #2
 800a4ae:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a4b2:	0082      	lsls	r2, r0, #2
 800a4b4:	4640      	mov	r0, r8
 800a4b6:	4649      	mov	r1, r9
 800a4b8:	f7f6 fc02 	bl	8000cc0 <__aeabi_uldivmod>
 800a4bc:	4602      	mov	r2, r0
 800a4be:	460b      	mov	r3, r1
 800a4c0:	4b47      	ldr	r3, [pc, #284]	; (800a5e0 <UART_SetConfig+0x3ac>)
 800a4c2:	fba3 2302 	umull	r2, r3, r3, r2
 800a4c6:	095b      	lsrs	r3, r3, #5
 800a4c8:	011e      	lsls	r6, r3, #4
 800a4ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	f04f 0100 	mov.w	r1, #0
 800a4d2:	4602      	mov	r2, r0
 800a4d4:	460b      	mov	r3, r1
 800a4d6:	1894      	adds	r4, r2, r2
 800a4d8:	60bc      	str	r4, [r7, #8]
 800a4da:	415b      	adcs	r3, r3
 800a4dc:	60fb      	str	r3, [r7, #12]
 800a4de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a4e2:	1812      	adds	r2, r2, r0
 800a4e4:	eb41 0303 	adc.w	r3, r1, r3
 800a4e8:	f04f 0400 	mov.w	r4, #0
 800a4ec:	f04f 0500 	mov.w	r5, #0
 800a4f0:	00dd      	lsls	r5, r3, #3
 800a4f2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a4f6:	00d4      	lsls	r4, r2, #3
 800a4f8:	4622      	mov	r2, r4
 800a4fa:	462b      	mov	r3, r5
 800a4fc:	1814      	adds	r4, r2, r0
 800a4fe:	64bc      	str	r4, [r7, #72]	; 0x48
 800a500:	414b      	adcs	r3, r1
 800a502:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a504:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a506:	685b      	ldr	r3, [r3, #4]
 800a508:	4618      	mov	r0, r3
 800a50a:	f04f 0100 	mov.w	r1, #0
 800a50e:	f04f 0200 	mov.w	r2, #0
 800a512:	f04f 0300 	mov.w	r3, #0
 800a516:	008b      	lsls	r3, r1, #2
 800a518:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a51c:	0082      	lsls	r2, r0, #2
 800a51e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800a522:	f7f6 fbcd 	bl	8000cc0 <__aeabi_uldivmod>
 800a526:	4602      	mov	r2, r0
 800a528:	460b      	mov	r3, r1
 800a52a:	4b2d      	ldr	r3, [pc, #180]	; (800a5e0 <UART_SetConfig+0x3ac>)
 800a52c:	fba3 1302 	umull	r1, r3, r3, r2
 800a530:	095b      	lsrs	r3, r3, #5
 800a532:	2164      	movs	r1, #100	; 0x64
 800a534:	fb01 f303 	mul.w	r3, r1, r3
 800a538:	1ad3      	subs	r3, r2, r3
 800a53a:	011b      	lsls	r3, r3, #4
 800a53c:	3332      	adds	r3, #50	; 0x32
 800a53e:	4a28      	ldr	r2, [pc, #160]	; (800a5e0 <UART_SetConfig+0x3ac>)
 800a540:	fba2 2303 	umull	r2, r3, r2, r3
 800a544:	095b      	lsrs	r3, r3, #5
 800a546:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a54a:	441e      	add	r6, r3
 800a54c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a54e:	4618      	mov	r0, r3
 800a550:	f04f 0100 	mov.w	r1, #0
 800a554:	4602      	mov	r2, r0
 800a556:	460b      	mov	r3, r1
 800a558:	1894      	adds	r4, r2, r2
 800a55a:	603c      	str	r4, [r7, #0]
 800a55c:	415b      	adcs	r3, r3
 800a55e:	607b      	str	r3, [r7, #4]
 800a560:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a564:	1812      	adds	r2, r2, r0
 800a566:	eb41 0303 	adc.w	r3, r1, r3
 800a56a:	f04f 0400 	mov.w	r4, #0
 800a56e:	f04f 0500 	mov.w	r5, #0
 800a572:	00dd      	lsls	r5, r3, #3
 800a574:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a578:	00d4      	lsls	r4, r2, #3
 800a57a:	4622      	mov	r2, r4
 800a57c:	462b      	mov	r3, r5
 800a57e:	eb12 0a00 	adds.w	sl, r2, r0
 800a582:	eb43 0b01 	adc.w	fp, r3, r1
 800a586:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a588:	685b      	ldr	r3, [r3, #4]
 800a58a:	4618      	mov	r0, r3
 800a58c:	f04f 0100 	mov.w	r1, #0
 800a590:	f04f 0200 	mov.w	r2, #0
 800a594:	f04f 0300 	mov.w	r3, #0
 800a598:	008b      	lsls	r3, r1, #2
 800a59a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a59e:	0082      	lsls	r2, r0, #2
 800a5a0:	4650      	mov	r0, sl
 800a5a2:	4659      	mov	r1, fp
 800a5a4:	f7f6 fb8c 	bl	8000cc0 <__aeabi_uldivmod>
 800a5a8:	4602      	mov	r2, r0
 800a5aa:	460b      	mov	r3, r1
 800a5ac:	4b0c      	ldr	r3, [pc, #48]	; (800a5e0 <UART_SetConfig+0x3ac>)
 800a5ae:	fba3 1302 	umull	r1, r3, r3, r2
 800a5b2:	095b      	lsrs	r3, r3, #5
 800a5b4:	2164      	movs	r1, #100	; 0x64
 800a5b6:	fb01 f303 	mul.w	r3, r1, r3
 800a5ba:	1ad3      	subs	r3, r2, r3
 800a5bc:	011b      	lsls	r3, r3, #4
 800a5be:	3332      	adds	r3, #50	; 0x32
 800a5c0:	4a07      	ldr	r2, [pc, #28]	; (800a5e0 <UART_SetConfig+0x3ac>)
 800a5c2:	fba2 2303 	umull	r2, r3, r2, r3
 800a5c6:	095b      	lsrs	r3, r3, #5
 800a5c8:	f003 020f 	and.w	r2, r3, #15
 800a5cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	4432      	add	r2, r6
 800a5d2:	609a      	str	r2, [r3, #8]
}
 800a5d4:	bf00      	nop
 800a5d6:	377c      	adds	r7, #124	; 0x7c
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5de:	bf00      	nop
 800a5e0:	51eb851f 	.word	0x51eb851f

0800a5e4 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 800a5e4:	b480      	push	{r7}
 800a5e6:	b085      	sub	sp, #20
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
 800a5ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	681a      	ldr	r2, [r3, #0]
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5fc:	60fb      	str	r3, [r7, #12]
                     Init->WriteBurst
                     );
#else /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT,CPSIZE,  CBURSTRW, CCLKEN and WFDIS bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP      | \
 800a5fe:	68fa      	ldr	r2, [r7, #12]
 800a600:	4b2f      	ldr	r3, [pc, #188]	; (800a6c0 <FSMC_NORSRAM_Init+0xdc>)
 800a602:	4013      	ands	r3, r2
 800a604:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WAITCFG  | FSMC_BCR1_WREN      | \
                       FSMC_BCR1_WAITEN    | FSMC_BCR1_EXTMOD   | FSMC_BCR1_ASYNCWAIT | \
                       FSMC_BCR1_CPSIZE    | FSMC_BCR1_CBURSTRW | FSMC_BCR1_CCLKEN    | \
                       FSMC_BCR1_WFDIS));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800a60a:	683b      	ldr	r3, [r7, #0]
 800a60c:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800a60e:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 800a610:	683b      	ldr	r3, [r7, #0]
 800a612:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 800a614:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800a616:	683b      	ldr	r3, [r7, #0]
 800a618:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800a61a:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 800a620:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	69db      	ldr	r3, [r3, #28]
                     Init->WaitSignalPolarity   |\
 800a626:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800a62c:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 800a632:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800a634:	683b      	ldr	r3, [r7, #0]
 800a636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800a638:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 800a63e:	431a      	orrs	r2, r3
                     Init->WriteBurst           |\
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->AsynchronousWait     |\
 800a644:	431a      	orrs	r2, r3
                     Init->ContinuousClock      |\
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                     Init->WriteBurst           |\
 800a64a:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->ContinuousClock      |\
 800a650:	431a      	orrs	r2, r3
                     Init->WriteFifo);
 800a652:	683b      	ldr	r3, [r7, #0]
 800a654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                     Init->PageSize             |\
 800a656:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800a658:	68fa      	ldr	r2, [r7, #12]
 800a65a:	4313      	orrs	r3, r2
 800a65c:	60fb      	str	r3, [r7, #12]
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	689b      	ldr	r3, [r3, #8]
 800a662:	2b08      	cmp	r3, #8
 800a664:	d103      	bne.n	800a66e <FSMC_NORSRAM_Init+0x8a>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a66c:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	681a      	ldr	r2, [r3, #0]
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	68f9      	ldr	r1, [r7, #12]
 800a676:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if((Init->ContinuousClock == FSMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FSMC_NORSRAM_BANK1))
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a67e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a682:	d10a      	bne.n	800a69a <FSMC_NORSRAM_Init+0xb6>
 800a684:	683b      	ldr	r3, [r7, #0]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d006      	beq.n	800a69a <FSMC_NORSRAM_Init+0xb6>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->ContinuousClock);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681a      	ldr	r2, [r3, #0]
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a694:	431a      	orrs	r2, r3
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	601a      	str	r2, [r3, #0]
  }

  if(Init->NSBank != FSMC_NORSRAM_BANK1)
 800a69a:	683b      	ldr	r3, [r7, #0]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d006      	beq.n	800a6b0 <FSMC_NORSRAM_Init+0xcc>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681a      	ldr	r2, [r3, #0]
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6aa:	431a      	orrs	r2, r3
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800a6b0:	2300      	movs	r3, #0
}
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	3714      	adds	r7, #20
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6bc:	4770      	bx	lr
 800a6be:	bf00      	nop
 800a6c0:	ffc00480 	.word	0xffc00480

0800a6c4 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a6c4:	b480      	push	{r7}
 800a6c6:	b087      	sub	sp, #28
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	60f8      	str	r0, [r7, #12]
 800a6cc:	60b9      	str	r1, [r7, #8]
 800a6ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	1c5a      	adds	r2, r3, #1
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6de:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 800a6e0:	697b      	ldr	r3, [r7, #20]
 800a6e2:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800a6e6:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800a6e8:	68bb      	ldr	r3, [r7, #8]
 800a6ea:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800a6ec:	68bb      	ldr	r3, [r7, #8]
 800a6ee:	685b      	ldr	r3, [r3, #4]
 800a6f0:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800a6f2:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 800a6f4:	68bb      	ldr	r3, [r7, #8]
 800a6f6:	689b      	ldr	r3, [r3, #8]
 800a6f8:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800a6fa:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800a6fc:	68bb      	ldr	r3, [r7, #8]
 800a6fe:	68db      	ldr	r3, [r3, #12]
 800a700:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800a702:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800a704:	68bb      	ldr	r3, [r7, #8]
 800a706:	691b      	ldr	r3, [r3, #16]
 800a708:	3b01      	subs	r3, #1
 800a70a:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800a70c:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800a70e:	68bb      	ldr	r3, [r7, #8]
 800a710:	695b      	ldr	r3, [r3, #20]
 800a712:	3b02      	subs	r3, #2
 800a714:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800a716:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 800a718:	68bb      	ldr	r3, [r7, #8]
 800a71a:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800a71c:	4313      	orrs	r3, r2
 800a71e:	697a      	ldr	r2, [r7, #20]
 800a720:	4313      	orrs	r3, r2
 800a722:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	1c5a      	adds	r2, r3, #1
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	6979      	ldr	r1, [r7, #20]
 800a72c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if(HAL_IS_BIT_SET(Device->BTCR[FSMC_NORSRAM_BANK1], FSMC_BCR1_CCLKEN))
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a738:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a73c:	d10e      	bne.n	800a75c <FSMC_NORSRAM_Timing_Init+0x98>
  {
    tmpr = (uint32_t)(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] & ~(0x0FU << 20U)); 
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	685b      	ldr	r3, [r3, #4]
 800a742:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a746:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
 800a748:	68bb      	ldr	r3, [r7, #8]
 800a74a:	691b      	ldr	r3, [r3, #16]
 800a74c:	3b01      	subs	r3, #1
 800a74e:	051b      	lsls	r3, r3, #20
 800a750:	697a      	ldr	r2, [r7, #20]
 800a752:	4313      	orrs	r3, r2
 800a754:	617b      	str	r3, [r7, #20]
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	697a      	ldr	r2, [r7, #20]
 800a75a:	605a      	str	r2, [r3, #4]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800a75c:	2300      	movs	r3, #0
}
 800a75e:	4618      	mov	r0, r3
 800a760:	371c      	adds	r7, #28
 800a762:	46bd      	mov	sp, r7
 800a764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a768:	4770      	bx	lr
	...

0800a76c <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800a76c:	b480      	push	{r7}
 800a76e:	b087      	sub	sp, #28
 800a770:	af00      	add	r7, sp, #0
 800a772:	60f8      	str	r0, [r7, #12]
 800a774:	60b9      	str	r1, [r7, #8]
 800a776:	607a      	str	r2, [r7, #4]
 800a778:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800a77a:	2300      	movs	r3, #0
 800a77c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800a77e:	683b      	ldr	r3, [r7, #0]
 800a780:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a784:	d122      	bne.n	800a7cc <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	687a      	ldr	r2, [r7, #4]
 800a78a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a78e:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 800a790:	697a      	ldr	r2, [r7, #20]
 800a792:	4b15      	ldr	r3, [pc, #84]	; (800a7e8 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 800a794:	4013      	ands	r3, r2
 800a796:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800a798:	68bb      	ldr	r3, [r7, #8]
 800a79a:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 800a79c:	68bb      	ldr	r3, [r7, #8]
 800a79e:	685b      	ldr	r3, [r3, #4]
 800a7a0:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800a7a2:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 800a7a4:	68bb      	ldr	r3, [r7, #8]
 800a7a6:	689b      	ldr	r3, [r3, #8]
 800a7a8:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800a7aa:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800a7ac:	68bb      	ldr	r3, [r7, #8]
 800a7ae:	68db      	ldr	r3, [r3, #12]
 800a7b0:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800a7b2:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 800a7b4:	68bb      	ldr	r3, [r7, #8]
 800a7b6:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800a7b8:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800a7ba:	697a      	ldr	r2, [r7, #20]
 800a7bc:	4313      	orrs	r3, r2
 800a7be:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	687a      	ldr	r2, [r7, #4]
 800a7c4:	6979      	ldr	r1, [r7, #20]
 800a7c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800a7ca:	e005      	b.n	800a7d8 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	687a      	ldr	r2, [r7, #4]
 800a7d0:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800a7d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800a7d8:	2300      	movs	r3, #0
}
 800a7da:	4618      	mov	r0, r3
 800a7dc:	371c      	adds	r7, #28
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e4:	4770      	bx	lr
 800a7e6:	bf00      	nop
 800a7e8:	cff00000 	.word	0xcff00000

0800a7ec <TfLiteIntArrayGetSizeInBytes>:
#ifndef TF_LITE_STATIC_MEMORY
#include <stdlib.h>
#include <string.h>
#endif  // TF_LITE_STATIC_MEMORY

int TfLiteIntArrayGetSizeInBytes(int size) {
 800a7ec:	b480      	push	{r7}
 800a7ee:	b085      	sub	sp, #20
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
  static TfLiteIntArray dummy;

  int computed_size = sizeof(dummy) + sizeof(dummy.data[0]) * size;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	3301      	adds	r3, #1
 800a7f8:	009b      	lsls	r3, r3, #2
 800a7fa:	60fb      	str	r3, [r7, #12]
#if defined(_MSC_VER)
  // Context for why this is needed is in http://b/189926408#comment21
  computed_size -= sizeof(dummy.data[0]);
#endif
  return computed_size;
 800a7fc:	68fb      	ldr	r3, [r7, #12]
}
 800a7fe:	4618      	mov	r0, r3
 800a800:	3714      	adds	r7, #20
 800a802:	46bd      	mov	sp, r7
 800a804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a808:	4770      	bx	lr
	...

0800a80c <TfLiteTypeGetName>:
  }
  tensor->bytes = num_bytes;
}
#endif  // TF_LITE_STATIC_MEMORY

const char* TfLiteTypeGetName(TfLiteType type) {
 800a80c:	b480      	push	{r7}
 800a80e:	b083      	sub	sp, #12
 800a810:	af00      	add	r7, sp, #0
 800a812:	4603      	mov	r3, r0
 800a814:	71fb      	strb	r3, [r7, #7]
  switch (type) {
 800a816:	79fb      	ldrb	r3, [r7, #7]
 800a818:	2b10      	cmp	r3, #16
 800a81a:	d847      	bhi.n	800a8ac <TfLiteTypeGetName+0xa0>
 800a81c:	a201      	add	r2, pc, #4	; (adr r2, 800a824 <TfLiteTypeGetName+0x18>)
 800a81e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a822:	bf00      	nop
 800a824:	0800a869 	.word	0x0800a869
 800a828:	0800a86d 	.word	0x0800a86d
 800a82c:	0800a875 	.word	0x0800a875
 800a830:	0800a87d 	.word	0x0800a87d
 800a834:	0800a885 	.word	0x0800a885
 800a838:	0800a899 	.word	0x0800a899
 800a83c:	0800a88d 	.word	0x0800a88d
 800a840:	0800a871 	.word	0x0800a871
 800a844:	0800a891 	.word	0x0800a891
 800a848:	0800a881 	.word	0x0800a881
 800a84c:	0800a89d 	.word	0x0800a89d
 800a850:	0800a8a1 	.word	0x0800a8a1
 800a854:	0800a895 	.word	0x0800a895
 800a858:	0800a889 	.word	0x0800a889
 800a85c:	0800a8a5 	.word	0x0800a8a5
 800a860:	0800a8a9 	.word	0x0800a8a9
 800a864:	0800a879 	.word	0x0800a879
    case kTfLiteNoType:
      return "NOTYPE";
 800a868:	4b14      	ldr	r3, [pc, #80]	; (800a8bc <TfLiteTypeGetName+0xb0>)
 800a86a:	e020      	b.n	800a8ae <TfLiteTypeGetName+0xa2>
    case kTfLiteFloat32:
      return "FLOAT32";
 800a86c:	4b14      	ldr	r3, [pc, #80]	; (800a8c0 <TfLiteTypeGetName+0xb4>)
 800a86e:	e01e      	b.n	800a8ae <TfLiteTypeGetName+0xa2>
    case kTfLiteInt16:
      return "INT16";
 800a870:	4b14      	ldr	r3, [pc, #80]	; (800a8c4 <TfLiteTypeGetName+0xb8>)
 800a872:	e01c      	b.n	800a8ae <TfLiteTypeGetName+0xa2>
    case kTfLiteInt32:
      return "INT32";
 800a874:	4b14      	ldr	r3, [pc, #80]	; (800a8c8 <TfLiteTypeGetName+0xbc>)
 800a876:	e01a      	b.n	800a8ae <TfLiteTypeGetName+0xa2>
    case kTfLiteUInt32:
      return "UINT32";
 800a878:	4b14      	ldr	r3, [pc, #80]	; (800a8cc <TfLiteTypeGetName+0xc0>)
 800a87a:	e018      	b.n	800a8ae <TfLiteTypeGetName+0xa2>
    case kTfLiteUInt8:
      return "UINT8";
 800a87c:	4b14      	ldr	r3, [pc, #80]	; (800a8d0 <TfLiteTypeGetName+0xc4>)
 800a87e:	e016      	b.n	800a8ae <TfLiteTypeGetName+0xa2>
    case kTfLiteInt8:
      return "INT8";
 800a880:	4b14      	ldr	r3, [pc, #80]	; (800a8d4 <TfLiteTypeGetName+0xc8>)
 800a882:	e014      	b.n	800a8ae <TfLiteTypeGetName+0xa2>
    case kTfLiteInt64:
      return "INT64";
 800a884:	4b14      	ldr	r3, [pc, #80]	; (800a8d8 <TfLiteTypeGetName+0xcc>)
 800a886:	e012      	b.n	800a8ae <TfLiteTypeGetName+0xa2>
    case kTfLiteUInt64:
      return "UINT64";
 800a888:	4b14      	ldr	r3, [pc, #80]	; (800a8dc <TfLiteTypeGetName+0xd0>)
 800a88a:	e010      	b.n	800a8ae <TfLiteTypeGetName+0xa2>
    case kTfLiteBool:
      return "BOOL";
 800a88c:	4b14      	ldr	r3, [pc, #80]	; (800a8e0 <TfLiteTypeGetName+0xd4>)
 800a88e:	e00e      	b.n	800a8ae <TfLiteTypeGetName+0xa2>
    case kTfLiteComplex64:
      return "COMPLEX64";
 800a890:	4b14      	ldr	r3, [pc, #80]	; (800a8e4 <TfLiteTypeGetName+0xd8>)
 800a892:	e00c      	b.n	800a8ae <TfLiteTypeGetName+0xa2>
    case kTfLiteComplex128:
      return "COMPLEX128";
 800a894:	4b14      	ldr	r3, [pc, #80]	; (800a8e8 <TfLiteTypeGetName+0xdc>)
 800a896:	e00a      	b.n	800a8ae <TfLiteTypeGetName+0xa2>
    case kTfLiteString:
      return "STRING";
 800a898:	4b14      	ldr	r3, [pc, #80]	; (800a8ec <TfLiteTypeGetName+0xe0>)
 800a89a:	e008      	b.n	800a8ae <TfLiteTypeGetName+0xa2>
    case kTfLiteFloat16:
      return "FLOAT16";
 800a89c:	4b14      	ldr	r3, [pc, #80]	; (800a8f0 <TfLiteTypeGetName+0xe4>)
 800a89e:	e006      	b.n	800a8ae <TfLiteTypeGetName+0xa2>
    case kTfLiteFloat64:
      return "FLOAT64";
 800a8a0:	4b14      	ldr	r3, [pc, #80]	; (800a8f4 <TfLiteTypeGetName+0xe8>)
 800a8a2:	e004      	b.n	800a8ae <TfLiteTypeGetName+0xa2>
    case kTfLiteResource:
      return "RESOURCE";
 800a8a4:	4b14      	ldr	r3, [pc, #80]	; (800a8f8 <TfLiteTypeGetName+0xec>)
 800a8a6:	e002      	b.n	800a8ae <TfLiteTypeGetName+0xa2>
    case kTfLiteVariant:
      return "VARIANT";
 800a8a8:	4b14      	ldr	r3, [pc, #80]	; (800a8fc <TfLiteTypeGetName+0xf0>)
 800a8aa:	e000      	b.n	800a8ae <TfLiteTypeGetName+0xa2>
  }
  return "Unknown type";
 800a8ac:	4b14      	ldr	r3, [pc, #80]	; (800a900 <TfLiteTypeGetName+0xf4>)
}
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	370c      	adds	r7, #12
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b8:	4770      	bx	lr
 800a8ba:	bf00      	nop
 800a8bc:	0802848c 	.word	0x0802848c
 800a8c0:	08028494 	.word	0x08028494
 800a8c4:	0802849c 	.word	0x0802849c
 800a8c8:	080284a4 	.word	0x080284a4
 800a8cc:	080284ac 	.word	0x080284ac
 800a8d0:	080284b4 	.word	0x080284b4
 800a8d4:	080284bc 	.word	0x080284bc
 800a8d8:	080284c4 	.word	0x080284c4
 800a8dc:	080284cc 	.word	0x080284cc
 800a8e0:	080284d4 	.word	0x080284d4
 800a8e4:	080284dc 	.word	0x080284dc
 800a8e8:	080284e8 	.word	0x080284e8
 800a8ec:	080284f4 	.word	0x080284f4
 800a8f0:	080284fc 	.word	0x080284fc
 800a8f4:	08028504 	.word	0x08028504
 800a8f8:	0802850c 	.word	0x0802850c
 800a8fc:	08028518 	.word	0x08028518
 800a900:	08028520 	.word	0x08028520

0800a904 <_ZN6tflite13ErrorReporter6ReportEPKcz>:
#include "tensorflow/lite/core/api/error_reporter.h"
#include <cstdarg>

namespace tflite {

int ErrorReporter::Report(const char* format, ...) {
 800a904:	b40e      	push	{r1, r2, r3}
 800a906:	b580      	push	{r7, lr}
 800a908:	b085      	sub	sp, #20
 800a90a:	af00      	add	r7, sp, #0
 800a90c:	6078      	str	r0, [r7, #4]
  va_list args;
  va_start(args, format);
 800a90e:	f107 0320 	add.w	r3, r7, #32
 800a912:	60bb      	str	r3, [r7, #8]
  int code = Report(format, args);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	3308      	adds	r3, #8
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	68ba      	ldr	r2, [r7, #8]
 800a91e:	69f9      	ldr	r1, [r7, #28]
 800a920:	6878      	ldr	r0, [r7, #4]
 800a922:	4798      	blx	r3
 800a924:	60f8      	str	r0, [r7, #12]
  va_end(args);
  return code;
 800a926:	68fb      	ldr	r3, [r7, #12]
}
 800a928:	4618      	mov	r0, r3
 800a92a:	3714      	adds	r7, #20
 800a92c:	46bd      	mov	sp, r7
 800a92e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a932:	b003      	add	sp, #12
 800a934:	4770      	bx	lr

0800a936 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>:

// TODO(aselle): Make the name of ReportError on context the same, so
// we can use the ensure functions w/o a context and w/ a reporter.
int ErrorReporter::ReportError(void*, const char* format, ...) {
 800a936:	b40c      	push	{r2, r3}
 800a938:	b580      	push	{r7, lr}
 800a93a:	b084      	sub	sp, #16
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
 800a940:	6039      	str	r1, [r7, #0]
  va_list args;
  va_start(args, format);
 800a942:	f107 031c 	add.w	r3, r7, #28
 800a946:	60bb      	str	r3, [r7, #8]
  int code = Report(format, args);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	3308      	adds	r3, #8
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	68ba      	ldr	r2, [r7, #8]
 800a952:	69b9      	ldr	r1, [r7, #24]
 800a954:	6878      	ldr	r0, [r7, #4]
 800a956:	4798      	blx	r3
 800a958:	60f8      	str	r0, [r7, #12]
  va_end(args);
  return code;
 800a95a:	68fb      	ldr	r3, [r7, #12]
}
 800a95c:	4618      	mov	r0, r3
 800a95e:	3710      	adds	r7, #16
 800a960:	46bd      	mov	sp, r7
 800a962:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a966:	b002      	add	sp, #8
 800a968:	4770      	bx	lr

0800a96a <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800a96a:	b480      	push	{r7}
 800a96c:	b083      	sub	sp, #12
 800a96e:	af00      	add	r7, sp, #0
 800a970:	6078      	str	r0, [r7, #4]
 800a972:	6039      	str	r1, [r7, #0]
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	4618      	mov	r0, r3
 800a978:	370c      	adds	r7, #12
 800a97a:	46bd      	mov	sp, r7
 800a97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a980:	4770      	bx	lr

0800a982 <_ZNK11flatbuffers6String5c_strEv>:
  const auto cmp = memcmp(a_data, b_data, (std::min)(a_size, b_size));
  return cmp == 0 ? a_size < b_size : cmp < 0;
}

struct String : public Vector<char> {
  const char *c_str() const { return reinterpret_cast<const char *>(Data()); }
 800a982:	b580      	push	{r7, lr}
 800a984:	b082      	sub	sp, #8
 800a986:	af00      	add	r7, sp, #0
 800a988:	6078      	str	r0, [r7, #4]
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	4618      	mov	r0, r3
 800a98e:	f000 fe32 	bl	800b5f6 <_ZNK11flatbuffers6VectorIcE4DataEv>
 800a992:	4603      	mov	r3, r0
 800a994:	4618      	mov	r0, r3
 800a996:	3708      	adds	r7, #8
 800a998:	46bd      	mov	sp, r7
 800a99a:	bd80      	pop	{r7, pc}

0800a99c <_ZNK11flatbuffers5Table9GetVTableEv>:

// "tables" use an offset table (possibly shared) that allows fields to be
// omitted and added at will, but uses an extra indirection to read.
class Table {
 public:
  const uint8_t *GetVTable() const {
 800a99c:	b590      	push	{r4, r7, lr}
 800a99e:	b083      	sub	sp, #12
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
    return data_ - ReadScalar<soffset_t>(data_);
 800a9a4:	687c      	ldr	r4, [r7, #4]
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	f000 fe4c 	bl	800b646 <_ZN11flatbuffers10ReadScalarIlEET_PKv>
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	425b      	negs	r3, r3
 800a9b2:	4423      	add	r3, r4
  }
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	370c      	adds	r7, #12
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	bd90      	pop	{r4, r7, pc}

0800a9bc <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>:

  // This gets the field offset for any of the functions below it, or 0
  // if the field was not present.
  voffset_t GetOptionalFieldOffset(voffset_t field) const {
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b084      	sub	sp, #16
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
 800a9c4:	460b      	mov	r3, r1
 800a9c6:	807b      	strh	r3, [r7, #2]
    // The vtable offset is always at the start.
    auto vtable = GetVTable();
 800a9c8:	6878      	ldr	r0, [r7, #4]
 800a9ca:	f7ff ffe7 	bl	800a99c <_ZNK11flatbuffers5Table9GetVTableEv>
 800a9ce:	60f8      	str	r0, [r7, #12]
    // The first element is the size of the vtable (fields + type id + itself).
    auto vtsize = ReadScalar<voffset_t>(vtable);
 800a9d0:	68f8      	ldr	r0, [r7, #12]
 800a9d2:	f000 fe1c 	bl	800b60e <_ZN11flatbuffers10ReadScalarItEET_PKv>
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	817b      	strh	r3, [r7, #10]
    // If the field we're accessing is outside the vtable, we're reading older
    // data, so it's the same as if the offset was 0 (not present).
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 800a9da:	887a      	ldrh	r2, [r7, #2]
 800a9dc:	897b      	ldrh	r3, [r7, #10]
 800a9de:	429a      	cmp	r2, r3
 800a9e0:	d207      	bcs.n	800a9f2 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt+0x36>
 800a9e2:	887b      	ldrh	r3, [r7, #2]
 800a9e4:	68fa      	ldr	r2, [r7, #12]
 800a9e6:	4413      	add	r3, r2
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	f000 fe10 	bl	800b60e <_ZN11flatbuffers10ReadScalarItEET_PKv>
 800a9ee:	4603      	mov	r3, r0
 800a9f0:	e000      	b.n	800a9f4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt+0x38>
 800a9f2:	2300      	movs	r3, #0
  }
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	3710      	adds	r7, #16
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	bd80      	pop	{r7, pc}

0800a9fc <_ZNK6tflite13Conv2DOptions7paddingEv>:
    VT_STRIDE_H = 8,
    VT_FUSED_ACTIVATION_FUNCTION = 10,
    VT_DILATION_W_FACTOR = 12,
    VT_DILATION_H_FACTOR = 14
  };
  tflite::Padding padding() const {
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	b082      	sub	sp, #8
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::Padding>(GetField<int8_t>(VT_PADDING, 0));
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2200      	movs	r2, #0
 800aa08:	2104      	movs	r1, #4
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	f000 fe94 	bl	800b738 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 800aa10:	4603      	mov	r3, r0
 800aa12:	b2db      	uxtb	r3, r3
  }
 800aa14:	4618      	mov	r0, r3
 800aa16:	3708      	adds	r7, #8
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bd80      	pop	{r7, pc}

0800aa1c <_ZNK6tflite13Conv2DOptions8stride_wEv>:
  int32_t stride_w() const {
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b082      	sub	sp, #8
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_STRIDE_W, 0);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2200      	movs	r2, #0
 800aa28:	2106      	movs	r1, #6
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	f000 fe56 	bl	800b6dc <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 800aa30:	4603      	mov	r3, r0
  }
 800aa32:	4618      	mov	r0, r3
 800aa34:	3708      	adds	r7, #8
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bd80      	pop	{r7, pc}

0800aa3a <_ZNK6tflite13Conv2DOptions8stride_hEv>:
  int32_t stride_h() const {
 800aa3a:	b580      	push	{r7, lr}
 800aa3c:	b082      	sub	sp, #8
 800aa3e:	af00      	add	r7, sp, #0
 800aa40:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_STRIDE_H, 0);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	2200      	movs	r2, #0
 800aa46:	2108      	movs	r1, #8
 800aa48:	4618      	mov	r0, r3
 800aa4a:	f000 fe47 	bl	800b6dc <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 800aa4e:	4603      	mov	r3, r0
  }
 800aa50:	4618      	mov	r0, r3
 800aa52:	3708      	adds	r7, #8
 800aa54:	46bd      	mov	sp, r7
 800aa56:	bd80      	pop	{r7, pc}

0800aa58 <_ZNK6tflite13Conv2DOptions25fused_activation_functionEv>:
  tflite::ActivationFunctionType fused_activation_function() const {
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b082      	sub	sp, #8
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2200      	movs	r2, #0
 800aa64:	210a      	movs	r1, #10
 800aa66:	4618      	mov	r0, r3
 800aa68:	f000 fe66 	bl	800b738 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 800aa6c:	4603      	mov	r3, r0
 800aa6e:	b2db      	uxtb	r3, r3
  }
 800aa70:	4618      	mov	r0, r3
 800aa72:	3708      	adds	r7, #8
 800aa74:	46bd      	mov	sp, r7
 800aa76:	bd80      	pop	{r7, pc}

0800aa78 <_ZNK6tflite13Conv2DOptions17dilation_w_factorEv>:
  int32_t dilation_w_factor() const {
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b082      	sub	sp, #8
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_DILATION_W_FACTOR, 1);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2201      	movs	r2, #1
 800aa84:	210c      	movs	r1, #12
 800aa86:	4618      	mov	r0, r3
 800aa88:	f000 fe28 	bl	800b6dc <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 800aa8c:	4603      	mov	r3, r0
  }
 800aa8e:	4618      	mov	r0, r3
 800aa90:	3708      	adds	r7, #8
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bd80      	pop	{r7, pc}

0800aa96 <_ZNK6tflite13Conv2DOptions17dilation_h_factorEv>:
  int32_t dilation_h_factor() const {
 800aa96:	b580      	push	{r7, lr}
 800aa98:	b082      	sub	sp, #8
 800aa9a:	af00      	add	r7, sp, #0
 800aa9c:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_DILATION_H_FACTOR, 1);
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	2201      	movs	r2, #1
 800aaa2:	210e      	movs	r1, #14
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	f000 fe19 	bl	800b6dc <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 800aaaa:	4603      	mov	r3, r0
  }
 800aaac:	4618      	mov	r0, r3
 800aaae:	3708      	adds	r7, #8
 800aab0:	46bd      	mov	sp, r7
 800aab2:	bd80      	pop	{r7, pc}

0800aab4 <_ZNK6tflite13Pool2DOptions7paddingEv>:
    VT_STRIDE_H = 8,
    VT_FILTER_WIDTH = 10,
    VT_FILTER_HEIGHT = 12,
    VT_FUSED_ACTIVATION_FUNCTION = 14
  };
  tflite::Padding padding() const {
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b082      	sub	sp, #8
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::Padding>(GetField<int8_t>(VT_PADDING, 0));
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2200      	movs	r2, #0
 800aac0:	2104      	movs	r1, #4
 800aac2:	4618      	mov	r0, r3
 800aac4:	f000 fe38 	bl	800b738 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 800aac8:	4603      	mov	r3, r0
 800aaca:	b2db      	uxtb	r3, r3
  }
 800aacc:	4618      	mov	r0, r3
 800aace:	3708      	adds	r7, #8
 800aad0:	46bd      	mov	sp, r7
 800aad2:	bd80      	pop	{r7, pc}

0800aad4 <_ZNK6tflite13Pool2DOptions8stride_wEv>:
  int32_t stride_w() const {
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b082      	sub	sp, #8
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_STRIDE_W, 0);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	2200      	movs	r2, #0
 800aae0:	2106      	movs	r1, #6
 800aae2:	4618      	mov	r0, r3
 800aae4:	f000 fdfa 	bl	800b6dc <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 800aae8:	4603      	mov	r3, r0
  }
 800aaea:	4618      	mov	r0, r3
 800aaec:	3708      	adds	r7, #8
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	bd80      	pop	{r7, pc}

0800aaf2 <_ZNK6tflite13Pool2DOptions8stride_hEv>:
  int32_t stride_h() const {
 800aaf2:	b580      	push	{r7, lr}
 800aaf4:	b082      	sub	sp, #8
 800aaf6:	af00      	add	r7, sp, #0
 800aaf8:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_STRIDE_H, 0);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	2200      	movs	r2, #0
 800aafe:	2108      	movs	r1, #8
 800ab00:	4618      	mov	r0, r3
 800ab02:	f000 fdeb 	bl	800b6dc <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 800ab06:	4603      	mov	r3, r0
  }
 800ab08:	4618      	mov	r0, r3
 800ab0a:	3708      	adds	r7, #8
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	bd80      	pop	{r7, pc}

0800ab10 <_ZNK6tflite13Pool2DOptions12filter_widthEv>:
  int32_t filter_width() const {
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b082      	sub	sp, #8
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_FILTER_WIDTH, 0);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	210a      	movs	r1, #10
 800ab1e:	4618      	mov	r0, r3
 800ab20:	f000 fddc 	bl	800b6dc <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 800ab24:	4603      	mov	r3, r0
  }
 800ab26:	4618      	mov	r0, r3
 800ab28:	3708      	adds	r7, #8
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	bd80      	pop	{r7, pc}

0800ab2e <_ZNK6tflite13Pool2DOptions13filter_heightEv>:
  int32_t filter_height() const {
 800ab2e:	b580      	push	{r7, lr}
 800ab30:	b082      	sub	sp, #8
 800ab32:	af00      	add	r7, sp, #0
 800ab34:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_FILTER_HEIGHT, 0);
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	2200      	movs	r2, #0
 800ab3a:	210c      	movs	r1, #12
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	f000 fdcd 	bl	800b6dc <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 800ab42:	4603      	mov	r3, r0
  }
 800ab44:	4618      	mov	r0, r3
 800ab46:	3708      	adds	r7, #8
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	bd80      	pop	{r7, pc}

0800ab4c <_ZNK6tflite13Pool2DOptions25fused_activation_functionEv>:
  tflite::ActivationFunctionType fused_activation_function() const {
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b082      	sub	sp, #8
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	2200      	movs	r2, #0
 800ab58:	210e      	movs	r1, #14
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	f000 fdec 	bl	800b738 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 800ab60:	4603      	mov	r3, r0
 800ab62:	b2db      	uxtb	r3, r3
  }
 800ab64:	4618      	mov	r0, r3
 800ab66:	3708      	adds	r7, #8
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	bd80      	pop	{r7, pc}

0800ab6c <_ZNK6tflite22DepthwiseConv2DOptions7paddingEv>:
    VT_DEPTH_MULTIPLIER = 10,
    VT_FUSED_ACTIVATION_FUNCTION = 12,
    VT_DILATION_W_FACTOR = 14,
    VT_DILATION_H_FACTOR = 16
  };
  tflite::Padding padding() const {
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b082      	sub	sp, #8
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::Padding>(GetField<int8_t>(VT_PADDING, 0));
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2200      	movs	r2, #0
 800ab78:	2104      	movs	r1, #4
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	f000 fddc 	bl	800b738 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 800ab80:	4603      	mov	r3, r0
 800ab82:	b2db      	uxtb	r3, r3
  }
 800ab84:	4618      	mov	r0, r3
 800ab86:	3708      	adds	r7, #8
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	bd80      	pop	{r7, pc}

0800ab8c <_ZNK6tflite22DepthwiseConv2DOptions8stride_wEv>:
  int32_t stride_w() const {
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b082      	sub	sp, #8
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_STRIDE_W, 0);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	2200      	movs	r2, #0
 800ab98:	2106      	movs	r1, #6
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	f000 fd9e 	bl	800b6dc <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 800aba0:	4603      	mov	r3, r0
  }
 800aba2:	4618      	mov	r0, r3
 800aba4:	3708      	adds	r7, #8
 800aba6:	46bd      	mov	sp, r7
 800aba8:	bd80      	pop	{r7, pc}

0800abaa <_ZNK6tflite22DepthwiseConv2DOptions8stride_hEv>:
  int32_t stride_h() const {
 800abaa:	b580      	push	{r7, lr}
 800abac:	b082      	sub	sp, #8
 800abae:	af00      	add	r7, sp, #0
 800abb0:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_STRIDE_H, 0);
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	2200      	movs	r2, #0
 800abb6:	2108      	movs	r1, #8
 800abb8:	4618      	mov	r0, r3
 800abba:	f000 fd8f 	bl	800b6dc <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 800abbe:	4603      	mov	r3, r0
  }
 800abc0:	4618      	mov	r0, r3
 800abc2:	3708      	adds	r7, #8
 800abc4:	46bd      	mov	sp, r7
 800abc6:	bd80      	pop	{r7, pc}

0800abc8 <_ZNK6tflite22DepthwiseConv2DOptions16depth_multiplierEv>:
  int32_t depth_multiplier() const {
 800abc8:	b580      	push	{r7, lr}
 800abca:	b082      	sub	sp, #8
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_DEPTH_MULTIPLIER, 0);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	2200      	movs	r2, #0
 800abd4:	210a      	movs	r1, #10
 800abd6:	4618      	mov	r0, r3
 800abd8:	f000 fd80 	bl	800b6dc <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 800abdc:	4603      	mov	r3, r0
  }
 800abde:	4618      	mov	r0, r3
 800abe0:	3708      	adds	r7, #8
 800abe2:	46bd      	mov	sp, r7
 800abe4:	bd80      	pop	{r7, pc}

0800abe6 <_ZNK6tflite22DepthwiseConv2DOptions25fused_activation_functionEv>:
  tflite::ActivationFunctionType fused_activation_function() const {
 800abe6:	b580      	push	{r7, lr}
 800abe8:	b082      	sub	sp, #8
 800abea:	af00      	add	r7, sp, #0
 800abec:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	2200      	movs	r2, #0
 800abf2:	210c      	movs	r1, #12
 800abf4:	4618      	mov	r0, r3
 800abf6:	f000 fd9f 	bl	800b738 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 800abfa:	4603      	mov	r3, r0
 800abfc:	b2db      	uxtb	r3, r3
  }
 800abfe:	4618      	mov	r0, r3
 800ac00:	3708      	adds	r7, #8
 800ac02:	46bd      	mov	sp, r7
 800ac04:	bd80      	pop	{r7, pc}

0800ac06 <_ZNK6tflite22DepthwiseConv2DOptions17dilation_w_factorEv>:
  int32_t dilation_w_factor() const {
 800ac06:	b580      	push	{r7, lr}
 800ac08:	b082      	sub	sp, #8
 800ac0a:	af00      	add	r7, sp, #0
 800ac0c:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_DILATION_W_FACTOR, 1);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	2201      	movs	r2, #1
 800ac12:	210e      	movs	r1, #14
 800ac14:	4618      	mov	r0, r3
 800ac16:	f000 fd61 	bl	800b6dc <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 800ac1a:	4603      	mov	r3, r0
  }
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	3708      	adds	r7, #8
 800ac20:	46bd      	mov	sp, r7
 800ac22:	bd80      	pop	{r7, pc}

0800ac24 <_ZNK6tflite22DepthwiseConv2DOptions17dilation_h_factorEv>:
  int32_t dilation_h_factor() const {
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b082      	sub	sp, #8
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_DILATION_H_FACTOR, 1);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	2201      	movs	r2, #1
 800ac30:	2110      	movs	r1, #16
 800ac32:	4618      	mov	r0, r3
 800ac34:	f000 fd52 	bl	800b6dc <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 800ac38:	4603      	mov	r3, r0
  }
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	3708      	adds	r7, #8
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	bd80      	pop	{r7, pc}
	...

0800ac44 <_ZNK6tflite14SoftmaxOptions4betaEv>:
struct SoftmaxOptions FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef SoftmaxOptionsT NativeTableType;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_BETA = 4
  };
  float beta() const {
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b082      	sub	sp, #8
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
    return GetField<float>(VT_BETA, 0.0f);
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	ed9f 0a06 	vldr	s0, [pc, #24]	; 800ac68 <_ZNK6tflite14SoftmaxOptions4betaEv+0x24>
 800ac52:	2104      	movs	r1, #4
 800ac54:	4618      	mov	r0, r3
 800ac56:	f000 fd9f 	bl	800b798 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>
 800ac5a:	eef0 7a40 	vmov.f32	s15, s0
  }
 800ac5e:	eeb0 0a67 	vmov.f32	s0, s15
 800ac62:	3708      	adds	r7, #8
 800ac64:	46bd      	mov	sp, r7
 800ac66:	bd80      	pop	{r7, pc}
 800ac68:	00000000 	.word	0x00000000

0800ac6c <_ZNK6tflite14ReshapeOptions9new_shapeEv>:
struct ReshapeOptions FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ReshapeOptionsT NativeTableType;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NEW_SHAPE = 4
  };
  const flatbuffers::Vector<int32_t> *new_shape() const {
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b082      	sub	sp, #8
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_NEW_SHAPE);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	2104      	movs	r1, #4
 800ac78:	4618      	mov	r0, r3
 800ac7a:	f000 fd4d 	bl	800b718 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 800ac7e:	4603      	mov	r3, r0
  }
 800ac80:	4618      	mov	r0, r3
 800ac82:	3708      	adds	r7, #8
 800ac84:	46bd      	mov	sp, r7
 800ac86:	bd80      	pop	{r7, pc}

0800ac88 <_ZNK6tflite8Operator20builtin_options_typeEv>:
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_INPUTS);
  }
  const flatbuffers::Vector<int32_t> *outputs() const {
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_OUTPUTS);
  }
  tflite::BuiltinOptions builtin_options_type() const {
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b082      	sub	sp, #8
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::BuiltinOptions>(GetField<uint8_t>(VT_BUILTIN_OPTIONS_TYPE, 0));
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	2200      	movs	r2, #0
 800ac94:	210a      	movs	r1, #10
 800ac96:	4618      	mov	r0, r3
 800ac98:	f000 fcf1 	bl	800b67e <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 800ac9c:	4603      	mov	r3, r0
  }
 800ac9e:	4618      	mov	r0, r3
 800aca0:	3708      	adds	r7, #8
 800aca2:	46bd      	mov	sp, r7
 800aca4:	bd80      	pop	{r7, pc}

0800aca6 <_ZNK6tflite8Operator15builtin_optionsEv>:
  const void *builtin_options() const {
 800aca6:	b580      	push	{r7, lr}
 800aca8:	b082      	sub	sp, #8
 800acaa:	af00      	add	r7, sp, #0
 800acac:	6078      	str	r0, [r7, #4]
    return GetPointer<const void *>(VT_BUILTIN_OPTIONS);
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	210c      	movs	r1, #12
 800acb2:	4618      	mov	r0, r3
 800acb4:	f000 fd02 	bl	800b6bc <_ZNK11flatbuffers5Table10GetPointerIPKvEET_t>
 800acb8:	4603      	mov	r3, r0
  }
 800acba:	4618      	mov	r0, r3
 800acbc:	3708      	adds	r7, #8
 800acbe:	46bd      	mov	sp, r7
 800acc0:	bd80      	pop	{r7, pc}

0800acc2 <_ZNK6tflite8Operator32builtin_options_as_Conv2DOptionsEv>:
  template<typename T> const T *builtin_options_as() const;
  const tflite::Conv2DOptions *builtin_options_as_Conv2DOptions() const {
 800acc2:	b580      	push	{r7, lr}
 800acc4:	b082      	sub	sp, #8
 800acc6:	af00      	add	r7, sp, #0
 800acc8:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_Conv2DOptions ? static_cast<const tflite::Conv2DOptions *>(builtin_options()) : nullptr;
 800acca:	6878      	ldr	r0, [r7, #4]
 800accc:	f7ff ffdc 	bl	800ac88 <_ZNK6tflite8Operator20builtin_options_typeEv>
 800acd0:	4603      	mov	r3, r0
 800acd2:	2b01      	cmp	r3, #1
 800acd4:	d104      	bne.n	800ace0 <_ZNK6tflite8Operator32builtin_options_as_Conv2DOptionsEv+0x1e>
 800acd6:	6878      	ldr	r0, [r7, #4]
 800acd8:	f7ff ffe5 	bl	800aca6 <_ZNK6tflite8Operator15builtin_optionsEv>
 800acdc:	4603      	mov	r3, r0
 800acde:	e000      	b.n	800ace2 <_ZNK6tflite8Operator32builtin_options_as_Conv2DOptionsEv+0x20>
 800ace0:	2300      	movs	r3, #0
  }
 800ace2:	4618      	mov	r0, r3
 800ace4:	3708      	adds	r7, #8
 800ace6:	46bd      	mov	sp, r7
 800ace8:	bd80      	pop	{r7, pc}

0800acea <_ZNK6tflite8Operator41builtin_options_as_DepthwiseConv2DOptionsEv>:
  const tflite::DepthwiseConv2DOptions *builtin_options_as_DepthwiseConv2DOptions() const {
 800acea:	b580      	push	{r7, lr}
 800acec:	b082      	sub	sp, #8
 800acee:	af00      	add	r7, sp, #0
 800acf0:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_DepthwiseConv2DOptions ? static_cast<const tflite::DepthwiseConv2DOptions *>(builtin_options()) : nullptr;
 800acf2:	6878      	ldr	r0, [r7, #4]
 800acf4:	f7ff ffc8 	bl	800ac88 <_ZNK6tflite8Operator20builtin_options_typeEv>
 800acf8:	4603      	mov	r3, r0
 800acfa:	2b02      	cmp	r3, #2
 800acfc:	d104      	bne.n	800ad08 <_ZNK6tflite8Operator41builtin_options_as_DepthwiseConv2DOptionsEv+0x1e>
 800acfe:	6878      	ldr	r0, [r7, #4]
 800ad00:	f7ff ffd1 	bl	800aca6 <_ZNK6tflite8Operator15builtin_optionsEv>
 800ad04:	4603      	mov	r3, r0
 800ad06:	e000      	b.n	800ad0a <_ZNK6tflite8Operator41builtin_options_as_DepthwiseConv2DOptionsEv+0x20>
 800ad08:	2300      	movs	r3, #0
  }
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	3708      	adds	r7, #8
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	bd80      	pop	{r7, pc}

0800ad12 <_ZNK6tflite8Operator32builtin_options_as_Pool2DOptionsEv>:
    return builtin_options_type() == tflite::BuiltinOptions_ConcatEmbeddingsOptions ? static_cast<const tflite::ConcatEmbeddingsOptions *>(builtin_options()) : nullptr;
  }
  const tflite::LSHProjectionOptions *builtin_options_as_LSHProjectionOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_LSHProjectionOptions ? static_cast<const tflite::LSHProjectionOptions *>(builtin_options()) : nullptr;
  }
  const tflite::Pool2DOptions *builtin_options_as_Pool2DOptions() const {
 800ad12:	b580      	push	{r7, lr}
 800ad14:	b082      	sub	sp, #8
 800ad16:	af00      	add	r7, sp, #0
 800ad18:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_Pool2DOptions ? static_cast<const tflite::Pool2DOptions *>(builtin_options()) : nullptr;
 800ad1a:	6878      	ldr	r0, [r7, #4]
 800ad1c:	f7ff ffb4 	bl	800ac88 <_ZNK6tflite8Operator20builtin_options_typeEv>
 800ad20:	4603      	mov	r3, r0
 800ad22:	2b05      	cmp	r3, #5
 800ad24:	d104      	bne.n	800ad30 <_ZNK6tflite8Operator32builtin_options_as_Pool2DOptionsEv+0x1e>
 800ad26:	6878      	ldr	r0, [r7, #4]
 800ad28:	f7ff ffbd 	bl	800aca6 <_ZNK6tflite8Operator15builtin_optionsEv>
 800ad2c:	4603      	mov	r3, r0
 800ad2e:	e000      	b.n	800ad32 <_ZNK6tflite8Operator32builtin_options_as_Pool2DOptionsEv+0x20>
 800ad30:	2300      	movs	r3, #0
  }
 800ad32:	4618      	mov	r0, r3
 800ad34:	3708      	adds	r7, #8
 800ad36:	46bd      	mov	sp, r7
 800ad38:	bd80      	pop	{r7, pc}

0800ad3a <_ZNK6tflite8Operator33builtin_options_as_SoftmaxOptionsEv>:
    return builtin_options_type() == tflite::BuiltinOptions_RNNOptions ? static_cast<const tflite::RNNOptions *>(builtin_options()) : nullptr;
  }
  const tflite::FullyConnectedOptions *builtin_options_as_FullyConnectedOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_FullyConnectedOptions ? static_cast<const tflite::FullyConnectedOptions *>(builtin_options()) : nullptr;
  }
  const tflite::SoftmaxOptions *builtin_options_as_SoftmaxOptions() const {
 800ad3a:	b580      	push	{r7, lr}
 800ad3c:	b082      	sub	sp, #8
 800ad3e:	af00      	add	r7, sp, #0
 800ad40:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_SoftmaxOptions ? static_cast<const tflite::SoftmaxOptions *>(builtin_options()) : nullptr;
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	f7ff ffa0 	bl	800ac88 <_ZNK6tflite8Operator20builtin_options_typeEv>
 800ad48:	4603      	mov	r3, r0
 800ad4a:	2b09      	cmp	r3, #9
 800ad4c:	d104      	bne.n	800ad58 <_ZNK6tflite8Operator33builtin_options_as_SoftmaxOptionsEv+0x1e>
 800ad4e:	6878      	ldr	r0, [r7, #4]
 800ad50:	f7ff ffa9 	bl	800aca6 <_ZNK6tflite8Operator15builtin_optionsEv>
 800ad54:	4603      	mov	r3, r0
 800ad56:	e000      	b.n	800ad5a <_ZNK6tflite8Operator33builtin_options_as_SoftmaxOptionsEv+0x20>
 800ad58:	2300      	movs	r3, #0
  }
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	3708      	adds	r7, #8
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	bd80      	pop	{r7, pc}

0800ad62 <_ZNK6tflite8Operator33builtin_options_as_ReshapeOptionsEv>:
    return builtin_options_type() == tflite::BuiltinOptions_ResizeBilinearOptions ? static_cast<const tflite::ResizeBilinearOptions *>(builtin_options()) : nullptr;
  }
  const tflite::CallOptions *builtin_options_as_CallOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_CallOptions ? static_cast<const tflite::CallOptions *>(builtin_options()) : nullptr;
  }
  const tflite::ReshapeOptions *builtin_options_as_ReshapeOptions() const {
 800ad62:	b580      	push	{r7, lr}
 800ad64:	b082      	sub	sp, #8
 800ad66:	af00      	add	r7, sp, #0
 800ad68:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_ReshapeOptions ? static_cast<const tflite::ReshapeOptions *>(builtin_options()) : nullptr;
 800ad6a:	6878      	ldr	r0, [r7, #4]
 800ad6c:	f7ff ff8c 	bl	800ac88 <_ZNK6tflite8Operator20builtin_options_typeEv>
 800ad70:	4603      	mov	r3, r0
 800ad72:	2b11      	cmp	r3, #17
 800ad74:	d104      	bne.n	800ad80 <_ZNK6tflite8Operator33builtin_options_as_ReshapeOptionsEv+0x1e>
 800ad76:	6878      	ldr	r0, [r7, #4]
 800ad78:	f7ff ff95 	bl	800aca6 <_ZNK6tflite8Operator15builtin_optionsEv>
 800ad7c:	4603      	mov	r3, r0
 800ad7e:	e000      	b.n	800ad82 <_ZNK6tflite8Operator33builtin_options_as_ReshapeOptionsEv+0x20>
 800ad80:	2300      	movs	r3, #0
  }
 800ad82:	4618      	mov	r0, r3
 800ad84:	3708      	adds	r7, #8
 800ad86:	46bd      	mov	sp, r7
 800ad88:	bd80      	pop	{r7, pc}

0800ad8a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>:
// parsed op data (e.g., when model parameters are invalid).
class SafeBuiltinDataAllocator {
 public:
  class BuiltinDataDeleter {
   public:
    explicit BuiltinDataDeleter(BuiltinDataAllocator* allocator)
 800ad8a:	b480      	push	{r7}
 800ad8c:	b083      	sub	sp, #12
 800ad8e:	af00      	add	r7, sp, #0
 800ad90:	6078      	str	r0, [r7, #4]
 800ad92:	6039      	str	r1, [r7, #0]
        : allocator_(allocator) {}
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	683a      	ldr	r2, [r7, #0]
 800ad98:	601a      	str	r2, [r3, #0]
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	370c      	adds	r7, #12
 800ada0:	46bd      	mov	sp, r7
 800ada2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada6:	4770      	bx	lr

0800ada8 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>:

    void operator()(void* data) { allocator_->Deallocate(data); }
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b082      	sub	sp, #8
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
 800adb0:	6039      	str	r1, [r7, #0]
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681a      	ldr	r2, [r3, #0]
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	3304      	adds	r3, #4
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	6839      	ldr	r1, [r7, #0]
 800adc2:	4610      	mov	r0, r2
 800adc4:	4798      	blx	r3
 800adc6:	bf00      	nop
 800adc8:	3708      	adds	r7, #8
 800adca:	46bd      	mov	sp, r7
 800adcc:	bd80      	pop	{r7, pc}

0800adce <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>:
  };

  template <typename T>
  using BuiltinDataPtr = std::unique_ptr<T, BuiltinDataDeleter>;

  explicit SafeBuiltinDataAllocator(BuiltinDataAllocator* allocator)
 800adce:	b480      	push	{r7}
 800add0:	b083      	sub	sp, #12
 800add2:	af00      	add	r7, sp, #0
 800add4:	6078      	str	r0, [r7, #4]
 800add6:	6039      	str	r1, [r7, #0]
      : allocator_(allocator) {}
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	683a      	ldr	r2, [r7, #0]
 800addc:	601a      	str	r2, [r3, #0]
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	4618      	mov	r0, r3
 800ade2:	370c      	adds	r7, #12
 800ade4:	46bd      	mov	sp, r7
 800ade6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adea:	4770      	bx	lr

0800adec <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:

// All the Parse functions take some pointers as params and this function has
// the common DCHECKs to catch if any of those are nullptr.
void CheckParsePointerParams(const Operator* op, ErrorReporter* error_reporter,
                             BuiltinDataAllocator* allocator,
                             void** builtin_data) {
 800adec:	b580      	push	{r7, lr}
 800adee:	b084      	sub	sp, #16
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	60f8      	str	r0, [r7, #12]
 800adf4:	60b9      	str	r1, [r7, #8]
 800adf6:	607a      	str	r2, [r7, #4]
 800adf8:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(op != nullptr);
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d101      	bne.n	800ae04 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x18>
 800ae00:	f01b ff7d 	bl	8026cfe <abort>
  TFLITE_DCHECK(error_reporter != nullptr);
 800ae04:	68bb      	ldr	r3, [r7, #8]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d101      	bne.n	800ae0e <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x22>
 800ae0a:	f01b ff78 	bl	8026cfe <abort>
  TFLITE_DCHECK(allocator != nullptr);
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d101      	bne.n	800ae18 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2c>
 800ae14:	f01b ff73 	bl	8026cfe <abort>
  TFLITE_DCHECK(builtin_data != nullptr);
 800ae18:	683b      	ldr	r3, [r7, #0]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d101      	bne.n	800ae22 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x36>
 800ae1e:	f01b ff6e 	bl	8026cfe <abort>
}
 800ae22:	bf00      	nop
 800ae24:	3710      	adds	r7, #16
 800ae26:	46bd      	mov	sp, r7
 800ae28:	bd80      	pop	{r7, pc}
	...

0800ae2c <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc>:
// Copies the contents from the flatbuffer int vector `flatbuffer` into the
// int array `buffer`. `flat_vector` and `buffer` represent the same
// configuration operation for a given operation.
TfLiteStatus FlatBufferIntVectorToArray(
    int max_size_of_buffer, const flatbuffers::Vector<int32_t>* flat_vector,
    int* buffer, ErrorReporter* error_reporter, const char* op_name) {
 800ae2c:	b590      	push	{r4, r7, lr}
 800ae2e:	b087      	sub	sp, #28
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	60f8      	str	r0, [r7, #12]
 800ae34:	60b9      	str	r1, [r7, #8]
 800ae36:	607a      	str	r2, [r7, #4]
 800ae38:	603b      	str	r3, [r7, #0]
  if (!flat_vector) {
 800ae3a:	68bb      	ldr	r3, [r7, #8]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d106      	bne.n	800ae4e <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x22>
    TF_LITE_REPORT_ERROR(error_reporter,
 800ae40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae42:	4917      	ldr	r1, [pc, #92]	; (800aea0 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x74>)
 800ae44:	6838      	ldr	r0, [r7, #0]
 800ae46:	f7ff fd5d 	bl	800a904 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Input array not provided for operation '%s'.\n",
                         op_name);
    return kTfLiteError;
 800ae4a:	2301      	movs	r3, #1
 800ae4c:	e024      	b.n	800ae98 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x6c>
  } else {
    size_t num_dimensions = flat_vector->size();
 800ae4e:	68b8      	ldr	r0, [r7, #8]
 800ae50:	f000 fcc4 	bl	800b7dc <_ZNK11flatbuffers6VectorIlE4sizeEv>
 800ae54:	6138      	str	r0, [r7, #16]
    if (num_dimensions > max_size_of_buffer / sizeof(int)) {
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	089b      	lsrs	r3, r3, #2
 800ae5a:	693a      	ldr	r2, [r7, #16]
 800ae5c:	429a      	cmp	r2, r3
 800ae5e:	d906      	bls.n	800ae6e <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x42>
      TF_LITE_REPORT_ERROR(
 800ae60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae62:	4910      	ldr	r1, [pc, #64]	; (800aea4 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x78>)
 800ae64:	6838      	ldr	r0, [r7, #0]
 800ae66:	f7ff fd4d 	bl	800a904 <_ZN6tflite13ErrorReporter6ReportEPKcz>
          error_reporter,
          "Found too many dimensions in the input array of operation '%s'.\n",
          op_name);
      return kTfLiteError;
 800ae6a:	2301      	movs	r3, #1
 800ae6c:	e014      	b.n	800ae98 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x6c>
    } else {
      for (size_t i = 0; i < num_dimensions; ++i) {
 800ae6e:	2300      	movs	r3, #0
 800ae70:	617b      	str	r3, [r7, #20]
 800ae72:	697a      	ldr	r2, [r7, #20]
 800ae74:	693b      	ldr	r3, [r7, #16]
 800ae76:	429a      	cmp	r2, r3
 800ae78:	d20d      	bcs.n	800ae96 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x6a>
        buffer[i] = flat_vector->Get(i);
 800ae7a:	697b      	ldr	r3, [r7, #20]
 800ae7c:	009b      	lsls	r3, r3, #2
 800ae7e:	687a      	ldr	r2, [r7, #4]
 800ae80:	18d4      	adds	r4, r2, r3
 800ae82:	6979      	ldr	r1, [r7, #20]
 800ae84:	68b8      	ldr	r0, [r7, #8]
 800ae86:	f000 fcb7 	bl	800b7f8 <_ZNK11flatbuffers6VectorIlE3GetEm>
 800ae8a:	4603      	mov	r3, r0
 800ae8c:	6023      	str	r3, [r4, #0]
      for (size_t i = 0; i < num_dimensions; ++i) {
 800ae8e:	697b      	ldr	r3, [r7, #20]
 800ae90:	3301      	adds	r3, #1
 800ae92:	617b      	str	r3, [r7, #20]
 800ae94:	e7ed      	b.n	800ae72 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x46>
      }
    }
  }
  return kTfLiteOk;
 800ae96:	2300      	movs	r3, #0
}
 800ae98:	4618      	mov	r0, r3
 800ae9a:	371c      	adds	r7, #28
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	bd90      	pop	{r4, r7, pc}
 800aea0:	08028544 	.word	0x08028544
 800aea4:	08028574 	.word	0x08028574

0800aea8 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>:

// Converts the flatbuffer activation to what is used at runtime.
TfLiteFusedActivation ConvertActivation(ActivationFunctionType activation) {
 800aea8:	b480      	push	{r7}
 800aeaa:	b083      	sub	sp, #12
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	4603      	mov	r3, r0
 800aeb0:	71fb      	strb	r3, [r7, #7]
  switch (activation) {
 800aeb2:	79fb      	ldrb	r3, [r7, #7]
 800aeb4:	2b05      	cmp	r3, #5
 800aeb6:	d81b      	bhi.n	800aef0 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x48>
 800aeb8:	a201      	add	r2, pc, #4	; (adr r2, 800aec0 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x18>)
 800aeba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aebe:	bf00      	nop
 800aec0:	0800aed9 	.word	0x0800aed9
 800aec4:	0800aedd 	.word	0x0800aedd
 800aec8:	0800aee1 	.word	0x0800aee1
 800aecc:	0800aee5 	.word	0x0800aee5
 800aed0:	0800aee9 	.word	0x0800aee9
 800aed4:	0800aeed 	.word	0x0800aeed
    case ActivationFunctionType_NONE:
      return kTfLiteActNone;
 800aed8:	2300      	movs	r3, #0
 800aeda:	e00a      	b.n	800aef2 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_RELU:
      return kTfLiteActRelu;
 800aedc:	2301      	movs	r3, #1
 800aede:	e008      	b.n	800aef2 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_RELU_N1_TO_1:
      return kTfLiteActReluN1To1;
 800aee0:	2302      	movs	r3, #2
 800aee2:	e006      	b.n	800aef2 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_RELU6:
      return kTfLiteActRelu6;
 800aee4:	2303      	movs	r3, #3
 800aee6:	e004      	b.n	800aef2 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_TANH:
      return kTfLiteActTanh;
 800aee8:	2304      	movs	r3, #4
 800aeea:	e002      	b.n	800aef2 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_SIGN_BIT:
      return kTfLiteActSignBit;
 800aeec:	2305      	movs	r3, #5
 800aeee:	e000      	b.n	800aef2 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
  }
  return kTfLiteActNone;
 800aef0:	2300      	movs	r3, #0
}
 800aef2:	4618      	mov	r0, r3
 800aef4:	370c      	adds	r7, #12
 800aef6:	46bd      	mov	sp, r7
 800aef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefc:	4770      	bx	lr
 800aefe:	bf00      	nop

0800af00 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>:

// Converts the flatbuffer padding enum to what is used at runtime.
TfLitePadding ConvertPadding(Padding padding) {
 800af00:	b480      	push	{r7}
 800af02:	b083      	sub	sp, #12
 800af04:	af00      	add	r7, sp, #0
 800af06:	4603      	mov	r3, r0
 800af08:	71fb      	strb	r3, [r7, #7]
  switch (padding) {
 800af0a:	79fb      	ldrb	r3, [r7, #7]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d002      	beq.n	800af16 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0x16>
 800af10:	2b01      	cmp	r3, #1
 800af12:	d002      	beq.n	800af1a <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0x1a>
 800af14:	e003      	b.n	800af1e <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0x1e>
    case Padding_SAME:
      return kTfLitePaddingSame;
 800af16:	2301      	movs	r3, #1
 800af18:	e002      	b.n	800af20 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0x20>
    case Padding_VALID:
      return kTfLitePaddingValid;
 800af1a:	2302      	movs	r3, #2
 800af1c:	e000      	b.n	800af20 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0x20>
  }
  return kTfLitePaddingUnknown;
 800af1e:	2300      	movs	r3, #0
}
 800af20:	4618      	mov	r0, r3
 800af22:	370c      	adds	r7, #12
 800af24:	46bd      	mov	sp, r7
 800af26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2a:	4770      	bx	lr

0800af2c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>:
}  // NOLINT[readability/fn_size]
#endif  // !defined(TF_LITE_STATIC_MEMORY)
}  // namespace

TfLiteStatus ConvertTensorType(TensorType tensor_type, TfLiteType* type,
                               ErrorReporter* error_reporter) {
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b084      	sub	sp, #16
 800af30:	af00      	add	r7, sp, #0
 800af32:	4603      	mov	r3, r0
 800af34:	60b9      	str	r1, [r7, #8]
 800af36:	607a      	str	r2, [r7, #4]
 800af38:	73fb      	strb	r3, [r7, #15]
  switch (tensor_type) {
 800af3a:	7bfb      	ldrb	r3, [r7, #15]
 800af3c:	2b0f      	cmp	r3, #15
 800af3e:	d873      	bhi.n	800b028 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xfc>
 800af40:	a201      	add	r2, pc, #4	; (adr r2, 800af48 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1c>)
 800af42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af46:	bf00      	nop
 800af48:	0800af93 	.word	0x0800af93
 800af4c:	0800af89 	.word	0x0800af89
 800af50:	0800afb1 	.word	0x0800afb1
 800af54:	0800afc5 	.word	0x0800afc5
 800af58:	0800afd9 	.word	0x0800afd9
 800af5c:	0800afed 	.word	0x0800afed
 800af60:	0800aff7 	.word	0x0800aff7
 800af64:	0800afa7 	.word	0x0800afa7
 800af68:	0800b001 	.word	0x0800b001
 800af6c:	0800afcf 	.word	0x0800afcf
 800af70:	0800af9d 	.word	0x0800af9d
 800af74:	0800b00b 	.word	0x0800b00b
 800af78:	0800afe3 	.word	0x0800afe3
 800af7c:	0800b015 	.word	0x0800b015
 800af80:	0800b01f 	.word	0x0800b01f
 800af84:	0800afbb 	.word	0x0800afbb
    case TensorType_FLOAT16:
      *type = kTfLiteFloat16;
 800af88:	68bb      	ldr	r3, [r7, #8]
 800af8a:	220a      	movs	r2, #10
 800af8c:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 800af8e:	2300      	movs	r3, #0
 800af90:	e054      	b.n	800b03c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_FLOAT32:
      *type = kTfLiteFloat32;
 800af92:	68bb      	ldr	r3, [r7, #8]
 800af94:	2201      	movs	r2, #1
 800af96:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 800af98:	2300      	movs	r3, #0
 800af9a:	e04f      	b.n	800b03c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_FLOAT64:
      *type = kTfLiteFloat64;
 800af9c:	68bb      	ldr	r3, [r7, #8]
 800af9e:	220b      	movs	r2, #11
 800afa0:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 800afa2:	2300      	movs	r3, #0
 800afa4:	e04a      	b.n	800b03c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_INT16:
      *type = kTfLiteInt16;
 800afa6:	68bb      	ldr	r3, [r7, #8]
 800afa8:	2207      	movs	r2, #7
 800afaa:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 800afac:	2300      	movs	r3, #0
 800afae:	e045      	b.n	800b03c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_INT32:
      *type = kTfLiteInt32;
 800afb0:	68bb      	ldr	r3, [r7, #8]
 800afb2:	2202      	movs	r2, #2
 800afb4:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 800afb6:	2300      	movs	r3, #0
 800afb8:	e040      	b.n	800b03c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_UINT32:
      *type = kTfLiteUInt32;
 800afba:	68bb      	ldr	r3, [r7, #8]
 800afbc:	2210      	movs	r2, #16
 800afbe:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 800afc0:	2300      	movs	r3, #0
 800afc2:	e03b      	b.n	800b03c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_UINT8:
      *type = kTfLiteUInt8;
 800afc4:	68bb      	ldr	r3, [r7, #8]
 800afc6:	2203      	movs	r2, #3
 800afc8:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 800afca:	2300      	movs	r3, #0
 800afcc:	e036      	b.n	800b03c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_INT8:
      *type = kTfLiteInt8;
 800afce:	68bb      	ldr	r3, [r7, #8]
 800afd0:	2209      	movs	r2, #9
 800afd2:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 800afd4:	2300      	movs	r3, #0
 800afd6:	e031      	b.n	800b03c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_INT64:
      *type = kTfLiteInt64;
 800afd8:	68bb      	ldr	r3, [r7, #8]
 800afda:	2204      	movs	r2, #4
 800afdc:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 800afde:	2300      	movs	r3, #0
 800afe0:	e02c      	b.n	800b03c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_UINT64:
      *type = kTfLiteUInt64;
 800afe2:	68bb      	ldr	r3, [r7, #8]
 800afe4:	220d      	movs	r2, #13
 800afe6:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 800afe8:	2300      	movs	r3, #0
 800afea:	e027      	b.n	800b03c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_STRING:
      *type = kTfLiteString;
 800afec:	68bb      	ldr	r3, [r7, #8]
 800afee:	2205      	movs	r2, #5
 800aff0:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 800aff2:	2300      	movs	r3, #0
 800aff4:	e022      	b.n	800b03c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_BOOL:
      *type = kTfLiteBool;
 800aff6:	68bb      	ldr	r3, [r7, #8]
 800aff8:	2206      	movs	r2, #6
 800affa:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 800affc:	2300      	movs	r3, #0
 800affe:	e01d      	b.n	800b03c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_COMPLEX64:
      *type = kTfLiteComplex64;
 800b000:	68bb      	ldr	r3, [r7, #8]
 800b002:	2208      	movs	r2, #8
 800b004:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 800b006:	2300      	movs	r3, #0
 800b008:	e018      	b.n	800b03c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_COMPLEX128:
      *type = kTfLiteComplex128;
 800b00a:	68bb      	ldr	r3, [r7, #8]
 800b00c:	220c      	movs	r2, #12
 800b00e:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 800b010:	2300      	movs	r3, #0
 800b012:	e013      	b.n	800b03c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_RESOURCE:
      *type = kTfLiteResource;
 800b014:	68bb      	ldr	r3, [r7, #8]
 800b016:	220e      	movs	r2, #14
 800b018:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 800b01a:	2300      	movs	r3, #0
 800b01c:	e00e      	b.n	800b03c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_VARIANT:
      *type = kTfLiteVariant;
 800b01e:	68bb      	ldr	r3, [r7, #8]
 800b020:	220f      	movs	r2, #15
 800b022:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 800b024:	2300      	movs	r3, #0
 800b026:	e009      	b.n	800b03c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    default:
      *type = kTfLiteNoType;
 800b028:	68bb      	ldr	r3, [r7, #8]
 800b02a:	2200      	movs	r2, #0
 800b02c:	701a      	strb	r2, [r3, #0]
      TF_LITE_REPORT_ERROR(error_reporter,
 800b02e:	7bfb      	ldrb	r3, [r7, #15]
 800b030:	461a      	mov	r2, r3
 800b032:	4904      	ldr	r1, [pc, #16]	; (800b044 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x118>)
 800b034:	6878      	ldr	r0, [r7, #4]
 800b036:	f7ff fc65 	bl	800a904 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Unsupported data type %d in tensor\n", tensor_type);
      return kTfLiteError;
 800b03a:	2301      	movs	r3, #1
  }
}
 800b03c:	4618      	mov	r0, r3
 800b03e:	3710      	adds	r7, #16
 800b040:	46bd      	mov	sp, r7
 800b042:	bd80      	pop	{r7, pc}
 800b044:	08028698 	.word	0x08028698

0800b048 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
  *builtin_data = params.release();
  return kTfLiteOk;
}

TfLiteStatus ParseConv2D(const Operator* op, ErrorReporter* error_reporter,
                         BuiltinDataAllocator* allocator, void** builtin_data) {
 800b048:	b5b0      	push	{r4, r5, r7, lr}
 800b04a:	b08a      	sub	sp, #40	; 0x28
 800b04c:	af02      	add	r7, sp, #8
 800b04e:	60f8      	str	r0, [r7, #12]
 800b050:	60b9      	str	r1, [r7, #8]
 800b052:	607a      	str	r2, [r7, #4]
 800b054:	603b      	str	r3, [r7, #0]
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 800b056:	683b      	ldr	r3, [r7, #0]
 800b058:	687a      	ldr	r2, [r7, #4]
 800b05a:	68b9      	ldr	r1, [r7, #8]
 800b05c:	68f8      	ldr	r0, [r7, #12]
 800b05e:	f7ff fec5 	bl	800adec <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>

  SafeBuiltinDataAllocator safe_allocator(allocator);
 800b062:	f107 0318 	add.w	r3, r7, #24
 800b066:	6879      	ldr	r1, [r7, #4]
 800b068:	4618      	mov	r0, r3
 800b06a:	f7ff feb0 	bl	800adce <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>
  std::unique_ptr<TfLiteConvParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteConvParams>();
 800b06e:	f107 0310 	add.w	r3, r7, #16
 800b072:	f107 0218 	add.w	r2, r7, #24
 800b076:	4611      	mov	r1, r2
 800b078:	4618      	mov	r0, r3
 800b07a:	f000 fbe3 	bl	800b844 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI16TfLiteConvParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 800b07e:	f107 0310 	add.w	r3, r7, #16
 800b082:	2100      	movs	r1, #0
 800b084:	4618      	mov	r0, r3
 800b086:	f000 fc1d 	bl	800b8c4 <_ZStneI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 800b08a:	4603      	mov	r3, r0
 800b08c:	f083 0301 	eor.w	r3, r3, #1
 800b090:	b2db      	uxtb	r3, r3
 800b092:	2b00      	cmp	r3, #0
 800b094:	d00c      	beq.n	800b0b0 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>
 800b096:	4b39      	ldr	r3, [pc, #228]	; (800b17c <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x134>)
 800b098:	9301      	str	r3, [sp, #4]
 800b09a:	f240 4363 	movw	r3, #1123	; 0x463
 800b09e:	9300      	str	r3, [sp, #0]
 800b0a0:	4b37      	ldr	r3, [pc, #220]	; (800b180 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x138>)
 800b0a2:	4a38      	ldr	r2, [pc, #224]	; (800b184 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x13c>)
 800b0a4:	68b9      	ldr	r1, [r7, #8]
 800b0a6:	68b8      	ldr	r0, [r7, #8]
 800b0a8:	f7ff fc45 	bl	800a936 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 800b0ac:	2401      	movs	r4, #1
 800b0ae:	e05b      	b.n	800b168 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x120>

  const Conv2DOptions* schema_params = op->builtin_options_as_Conv2DOptions();
 800b0b0:	68f8      	ldr	r0, [r7, #12]
 800b0b2:	f7ff fe06 	bl	800acc2 <_ZNK6tflite8Operator32builtin_options_as_Conv2DOptionsEv>
 800b0b6:	61f8      	str	r0, [r7, #28]

  if (schema_params != nullptr) {
 800b0b8:	69fb      	ldr	r3, [r7, #28]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d04b      	beq.n	800b156 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x10e>
    params->padding = ConvertPadding(schema_params->padding());
 800b0be:	69f8      	ldr	r0, [r7, #28]
 800b0c0:	f7ff fc9c 	bl	800a9fc <_ZNK6tflite13Conv2DOptions7paddingEv>
 800b0c4:	4603      	mov	r3, r0
 800b0c6:	461d      	mov	r5, r3
 800b0c8:	f107 0310 	add.w	r3, r7, #16
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	f000 fc06 	bl	800b8de <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800b0d2:	4604      	mov	r4, r0
 800b0d4:	4628      	mov	r0, r5
 800b0d6:	f7ff ff13 	bl	800af00 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>
 800b0da:	4603      	mov	r3, r0
 800b0dc:	7023      	strb	r3, [r4, #0]
    params->stride_width = schema_params->stride_w();
 800b0de:	f107 0310 	add.w	r3, r7, #16
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	f000 fbfb 	bl	800b8de <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800b0e8:	4604      	mov	r4, r0
 800b0ea:	69f8      	ldr	r0, [r7, #28]
 800b0ec:	f7ff fc96 	bl	800aa1c <_ZNK6tflite13Conv2DOptions8stride_wEv>
 800b0f0:	4603      	mov	r3, r0
 800b0f2:	6063      	str	r3, [r4, #4]
    params->stride_height = schema_params->stride_h();
 800b0f4:	f107 0310 	add.w	r3, r7, #16
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	f000 fbf0 	bl	800b8de <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800b0fe:	4604      	mov	r4, r0
 800b100:	69f8      	ldr	r0, [r7, #28]
 800b102:	f7ff fc9a 	bl	800aa3a <_ZNK6tflite13Conv2DOptions8stride_hEv>
 800b106:	4603      	mov	r3, r0
 800b108:	60a3      	str	r3, [r4, #8]
    params->activation =
        ConvertActivation(schema_params->fused_activation_function());
 800b10a:	69f8      	ldr	r0, [r7, #28]
 800b10c:	f7ff fca4 	bl	800aa58 <_ZNK6tflite13Conv2DOptions25fused_activation_functionEv>
 800b110:	4603      	mov	r3, r0
 800b112:	461d      	mov	r5, r3
    params->activation =
 800b114:	f107 0310 	add.w	r3, r7, #16
 800b118:	4618      	mov	r0, r3
 800b11a:	f000 fbe0 	bl	800b8de <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800b11e:	4604      	mov	r4, r0
        ConvertActivation(schema_params->fused_activation_function());
 800b120:	4628      	mov	r0, r5
 800b122:	f7ff fec1 	bl	800aea8 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>
 800b126:	4603      	mov	r3, r0
    params->activation =
 800b128:	7323      	strb	r3, [r4, #12]

    params->dilation_width_factor = schema_params->dilation_w_factor();
 800b12a:	f107 0310 	add.w	r3, r7, #16
 800b12e:	4618      	mov	r0, r3
 800b130:	f000 fbd5 	bl	800b8de <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800b134:	4604      	mov	r4, r0
 800b136:	69f8      	ldr	r0, [r7, #28]
 800b138:	f7ff fc9e 	bl	800aa78 <_ZNK6tflite13Conv2DOptions17dilation_w_factorEv>
 800b13c:	4603      	mov	r3, r0
 800b13e:	6123      	str	r3, [r4, #16]
    params->dilation_height_factor = schema_params->dilation_h_factor();
 800b140:	f107 0310 	add.w	r3, r7, #16
 800b144:	4618      	mov	r0, r3
 800b146:	f000 fbca 	bl	800b8de <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800b14a:	4604      	mov	r4, r0
 800b14c:	69f8      	ldr	r0, [r7, #28]
 800b14e:	f7ff fca2 	bl	800aa96 <_ZNK6tflite13Conv2DOptions17dilation_h_factorEv>
 800b152:	4603      	mov	r3, r0
 800b154:	6163      	str	r3, [r4, #20]
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 800b156:	f107 0310 	add.w	r3, r7, #16
 800b15a:	4618      	mov	r0, r3
 800b15c:	f000 fbcb 	bl	800b8f6 <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 800b160:	4602      	mov	r2, r0
 800b162:	683b      	ldr	r3, [r7, #0]
 800b164:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800b166:	2400      	movs	r4, #0
      params = safe_allocator.Allocate<TfLiteConvParams>();
 800b168:	f107 0310 	add.w	r3, r7, #16
 800b16c:	4618      	mov	r0, r3
 800b16e:	f000 fb87 	bl	800b880 <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 800b172:	4623      	mov	r3, r4
}
 800b174:	4618      	mov	r0, r3
 800b176:	3720      	adds	r7, #32
 800b178:	46bd      	mov	sp, r7
 800b17a:	bdb0      	pop	{r4, r5, r7, pc}
 800b17c:	08028618 	.word	0x08028618
 800b180:	080285b8 	.word	0x080285b8
 800b184:	08028600 	.word	0x08028600

0800b188 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
}

TfLiteStatus ParseDepthwiseConv2D(const Operator* op,
                                  ErrorReporter* error_reporter,
                                  BuiltinDataAllocator* allocator,
                                  void** builtin_data) {
 800b188:	b5b0      	push	{r4, r5, r7, lr}
 800b18a:	b08a      	sub	sp, #40	; 0x28
 800b18c:	af02      	add	r7, sp, #8
 800b18e:	60f8      	str	r0, [r7, #12]
 800b190:	60b9      	str	r1, [r7, #8]
 800b192:	607a      	str	r2, [r7, #4]
 800b194:	603b      	str	r3, [r7, #0]
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 800b196:	683b      	ldr	r3, [r7, #0]
 800b198:	687a      	ldr	r2, [r7, #4]
 800b19a:	68b9      	ldr	r1, [r7, #8]
 800b19c:	68f8      	ldr	r0, [r7, #12]
 800b19e:	f7ff fe25 	bl	800adec <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>

  SafeBuiltinDataAllocator safe_allocator(allocator);
 800b1a2:	f107 0318 	add.w	r3, r7, #24
 800b1a6:	6879      	ldr	r1, [r7, #4]
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	f7ff fe10 	bl	800adce <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>

  std::unique_ptr<TfLiteDepthwiseConvParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteDepthwiseConvParams>();
 800b1ae:	f107 0310 	add.w	r3, r7, #16
 800b1b2:	f107 0218 	add.w	r2, r7, #24
 800b1b6:	4611      	mov	r1, r2
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	f000 fbb0 	bl	800b91e <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI25TfLiteDepthwiseConvParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 800b1be:	f107 0310 	add.w	r3, r7, #16
 800b1c2:	2100      	movs	r1, #0
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	f000 fbea 	bl	800b99e <_ZStneI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 800b1ca:	4603      	mov	r3, r0
 800b1cc:	f083 0301 	eor.w	r3, r3, #1
 800b1d0:	b2db      	uxtb	r3, r3
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d00c      	beq.n	800b1f0 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>
 800b1d6:	4b3f      	ldr	r3, [pc, #252]	; (800b2d4 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x14c>)
 800b1d8:	9301      	str	r3, [sp, #4]
 800b1da:	f44f 6397 	mov.w	r3, #1208	; 0x4b8
 800b1de:	9300      	str	r3, [sp, #0]
 800b1e0:	4b3d      	ldr	r3, [pc, #244]	; (800b2d8 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x150>)
 800b1e2:	4a3e      	ldr	r2, [pc, #248]	; (800b2dc <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x154>)
 800b1e4:	68b9      	ldr	r1, [r7, #8]
 800b1e6:	68b8      	ldr	r0, [r7, #8]
 800b1e8:	f7ff fba5 	bl	800a936 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 800b1ec:	2401      	movs	r4, #1
 800b1ee:	e066      	b.n	800b2be <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x136>

  const DepthwiseConv2DOptions* schema_params =
      op->builtin_options_as_DepthwiseConv2DOptions();
 800b1f0:	68f8      	ldr	r0, [r7, #12]
 800b1f2:	f7ff fd7a 	bl	800acea <_ZNK6tflite8Operator41builtin_options_as_DepthwiseConv2DOptionsEv>
 800b1f6:	61f8      	str	r0, [r7, #28]

  if (schema_params != nullptr) {
 800b1f8:	69fb      	ldr	r3, [r7, #28]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d056      	beq.n	800b2ac <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x124>
    params->padding = ConvertPadding(schema_params->padding());
 800b1fe:	69f8      	ldr	r0, [r7, #28]
 800b200:	f7ff fcb4 	bl	800ab6c <_ZNK6tflite22DepthwiseConv2DOptions7paddingEv>
 800b204:	4603      	mov	r3, r0
 800b206:	461d      	mov	r5, r3
 800b208:	f107 0310 	add.w	r3, r7, #16
 800b20c:	4618      	mov	r0, r3
 800b20e:	f000 fbd3 	bl	800b9b8 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800b212:	4604      	mov	r4, r0
 800b214:	4628      	mov	r0, r5
 800b216:	f7ff fe73 	bl	800af00 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>
 800b21a:	4603      	mov	r3, r0
 800b21c:	7023      	strb	r3, [r4, #0]
    params->stride_width = schema_params->stride_w();
 800b21e:	f107 0310 	add.w	r3, r7, #16
 800b222:	4618      	mov	r0, r3
 800b224:	f000 fbc8 	bl	800b9b8 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800b228:	4604      	mov	r4, r0
 800b22a:	69f8      	ldr	r0, [r7, #28]
 800b22c:	f7ff fcae 	bl	800ab8c <_ZNK6tflite22DepthwiseConv2DOptions8stride_wEv>
 800b230:	4603      	mov	r3, r0
 800b232:	6063      	str	r3, [r4, #4]
    params->stride_height = schema_params->stride_h();
 800b234:	f107 0310 	add.w	r3, r7, #16
 800b238:	4618      	mov	r0, r3
 800b23a:	f000 fbbd 	bl	800b9b8 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800b23e:	4604      	mov	r4, r0
 800b240:	69f8      	ldr	r0, [r7, #28]
 800b242:	f7ff fcb2 	bl	800abaa <_ZNK6tflite22DepthwiseConv2DOptions8stride_hEv>
 800b246:	4603      	mov	r3, r0
 800b248:	60a3      	str	r3, [r4, #8]
    params->depth_multiplier = schema_params->depth_multiplier();
 800b24a:	f107 0310 	add.w	r3, r7, #16
 800b24e:	4618      	mov	r0, r3
 800b250:	f000 fbb2 	bl	800b9b8 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800b254:	4604      	mov	r4, r0
 800b256:	69f8      	ldr	r0, [r7, #28]
 800b258:	f7ff fcb6 	bl	800abc8 <_ZNK6tflite22DepthwiseConv2DOptions16depth_multiplierEv>
 800b25c:	4603      	mov	r3, r0
 800b25e:	60e3      	str	r3, [r4, #12]
    params->activation =
        ConvertActivation(schema_params->fused_activation_function());
 800b260:	69f8      	ldr	r0, [r7, #28]
 800b262:	f7ff fcc0 	bl	800abe6 <_ZNK6tflite22DepthwiseConv2DOptions25fused_activation_functionEv>
 800b266:	4603      	mov	r3, r0
 800b268:	461d      	mov	r5, r3
    params->activation =
 800b26a:	f107 0310 	add.w	r3, r7, #16
 800b26e:	4618      	mov	r0, r3
 800b270:	f000 fba2 	bl	800b9b8 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800b274:	4604      	mov	r4, r0
        ConvertActivation(schema_params->fused_activation_function());
 800b276:	4628      	mov	r0, r5
 800b278:	f7ff fe16 	bl	800aea8 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>
 800b27c:	4603      	mov	r3, r0
    params->activation =
 800b27e:	7423      	strb	r3, [r4, #16]

    params->dilation_width_factor = schema_params->dilation_w_factor();
 800b280:	f107 0310 	add.w	r3, r7, #16
 800b284:	4618      	mov	r0, r3
 800b286:	f000 fb97 	bl	800b9b8 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800b28a:	4604      	mov	r4, r0
 800b28c:	69f8      	ldr	r0, [r7, #28]
 800b28e:	f7ff fcba 	bl	800ac06 <_ZNK6tflite22DepthwiseConv2DOptions17dilation_w_factorEv>
 800b292:	4603      	mov	r3, r0
 800b294:	6163      	str	r3, [r4, #20]
    params->dilation_height_factor = schema_params->dilation_h_factor();
 800b296:	f107 0310 	add.w	r3, r7, #16
 800b29a:	4618      	mov	r0, r3
 800b29c:	f000 fb8c 	bl	800b9b8 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800b2a0:	4604      	mov	r4, r0
 800b2a2:	69f8      	ldr	r0, [r7, #28]
 800b2a4:	f7ff fcbe 	bl	800ac24 <_ZNK6tflite22DepthwiseConv2DOptions17dilation_h_factorEv>
 800b2a8:	4603      	mov	r3, r0
 800b2aa:	61a3      	str	r3, [r4, #24]
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 800b2ac:	f107 0310 	add.w	r3, r7, #16
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	f000 fb8d 	bl	800b9d0 <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 800b2b6:	4602      	mov	r2, r0
 800b2b8:	683b      	ldr	r3, [r7, #0]
 800b2ba:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800b2bc:	2400      	movs	r4, #0
      params = safe_allocator.Allocate<TfLiteDepthwiseConvParams>();
 800b2be:	f107 0310 	add.w	r3, r7, #16
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	f000 fb49 	bl	800b95a <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 800b2c8:	4623      	mov	r3, r4
}
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	3720      	adds	r7, #32
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	bdb0      	pop	{r4, r5, r7, pc}
 800b2d2:	bf00      	nop
 800b2d4:	08028618 	.word	0x08028618
 800b2d8:	080285b8 	.word	0x080285b8
 800b2dc:	08028600 	.word	0x08028600

0800b2e0 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                        void**) {
  return kTfLiteOk;
}

TfLiteStatus ParsePool(const Operator* op, ErrorReporter* error_reporter,
                       BuiltinDataAllocator* allocator, void** builtin_data) {
 800b2e0:	b5b0      	push	{r4, r5, r7, lr}
 800b2e2:	b08a      	sub	sp, #40	; 0x28
 800b2e4:	af02      	add	r7, sp, #8
 800b2e6:	60f8      	str	r0, [r7, #12]
 800b2e8:	60b9      	str	r1, [r7, #8]
 800b2ea:	607a      	str	r2, [r7, #4]
 800b2ec:	603b      	str	r3, [r7, #0]
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 800b2ee:	683b      	ldr	r3, [r7, #0]
 800b2f0:	687a      	ldr	r2, [r7, #4]
 800b2f2:	68b9      	ldr	r1, [r7, #8]
 800b2f4:	68f8      	ldr	r0, [r7, #12]
 800b2f6:	f7ff fd79 	bl	800adec <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>

  SafeBuiltinDataAllocator safe_allocator(allocator);
 800b2fa:	f107 0318 	add.w	r3, r7, #24
 800b2fe:	6879      	ldr	r1, [r7, #4]
 800b300:	4618      	mov	r0, r3
 800b302:	f7ff fd64 	bl	800adce <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>
  std::unique_ptr<TfLitePoolParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLitePoolParams>();
 800b306:	f107 0310 	add.w	r3, r7, #16
 800b30a:	f107 0218 	add.w	r2, r7, #24
 800b30e:	4611      	mov	r1, r2
 800b310:	4618      	mov	r0, r3
 800b312:	f000 fb71 	bl	800b9f8 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI16TfLitePoolParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 800b316:	f107 0310 	add.w	r3, r7, #16
 800b31a:	2100      	movs	r1, #0
 800b31c:	4618      	mov	r0, r3
 800b31e:	f000 fbab 	bl	800ba78 <_ZStneI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 800b322:	4603      	mov	r3, r0
 800b324:	f083 0301 	eor.w	r3, r3, #1
 800b328:	b2db      	uxtb	r3, r3
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d00c      	beq.n	800b348 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>
 800b32e:	4b39      	ldr	r3, [pc, #228]	; (800b414 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x134>)
 800b330:	9301      	str	r3, [sp, #4]
 800b332:	f240 6377 	movw	r3, #1655	; 0x677
 800b336:	9300      	str	r3, [sp, #0]
 800b338:	4b37      	ldr	r3, [pc, #220]	; (800b418 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x138>)
 800b33a:	4a38      	ldr	r2, [pc, #224]	; (800b41c <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x13c>)
 800b33c:	68b9      	ldr	r1, [r7, #8]
 800b33e:	68b8      	ldr	r0, [r7, #8]
 800b340:	f7ff faf9 	bl	800a936 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 800b344:	2401      	movs	r4, #1
 800b346:	e05b      	b.n	800b400 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x120>

  const Pool2DOptions* schema_params = op->builtin_options_as_Pool2DOptions();
 800b348:	68f8      	ldr	r0, [r7, #12]
 800b34a:	f7ff fce2 	bl	800ad12 <_ZNK6tflite8Operator32builtin_options_as_Pool2DOptionsEv>
 800b34e:	61f8      	str	r0, [r7, #28]

  if (schema_params != nullptr) {
 800b350:	69fb      	ldr	r3, [r7, #28]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d04b      	beq.n	800b3ee <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x10e>
    params->padding = ConvertPadding(schema_params->padding());
 800b356:	69f8      	ldr	r0, [r7, #28]
 800b358:	f7ff fbac 	bl	800aab4 <_ZNK6tflite13Pool2DOptions7paddingEv>
 800b35c:	4603      	mov	r3, r0
 800b35e:	461d      	mov	r5, r3
 800b360:	f107 0310 	add.w	r3, r7, #16
 800b364:	4618      	mov	r0, r3
 800b366:	f000 fb94 	bl	800ba92 <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800b36a:	4604      	mov	r4, r0
 800b36c:	4628      	mov	r0, r5
 800b36e:	f7ff fdc7 	bl	800af00 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>
 800b372:	4603      	mov	r3, r0
 800b374:	7023      	strb	r3, [r4, #0]
    params->stride_width = schema_params->stride_w();
 800b376:	f107 0310 	add.w	r3, r7, #16
 800b37a:	4618      	mov	r0, r3
 800b37c:	f000 fb89 	bl	800ba92 <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800b380:	4604      	mov	r4, r0
 800b382:	69f8      	ldr	r0, [r7, #28]
 800b384:	f7ff fba6 	bl	800aad4 <_ZNK6tflite13Pool2DOptions8stride_wEv>
 800b388:	4603      	mov	r3, r0
 800b38a:	6063      	str	r3, [r4, #4]
    params->stride_height = schema_params->stride_h();
 800b38c:	f107 0310 	add.w	r3, r7, #16
 800b390:	4618      	mov	r0, r3
 800b392:	f000 fb7e 	bl	800ba92 <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800b396:	4604      	mov	r4, r0
 800b398:	69f8      	ldr	r0, [r7, #28]
 800b39a:	f7ff fbaa 	bl	800aaf2 <_ZNK6tflite13Pool2DOptions8stride_hEv>
 800b39e:	4603      	mov	r3, r0
 800b3a0:	60a3      	str	r3, [r4, #8]
    params->filter_width = schema_params->filter_width();
 800b3a2:	f107 0310 	add.w	r3, r7, #16
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	f000 fb73 	bl	800ba92 <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800b3ac:	4604      	mov	r4, r0
 800b3ae:	69f8      	ldr	r0, [r7, #28]
 800b3b0:	f7ff fbae 	bl	800ab10 <_ZNK6tflite13Pool2DOptions12filter_widthEv>
 800b3b4:	4603      	mov	r3, r0
 800b3b6:	60e3      	str	r3, [r4, #12]
    params->filter_height = schema_params->filter_height();
 800b3b8:	f107 0310 	add.w	r3, r7, #16
 800b3bc:	4618      	mov	r0, r3
 800b3be:	f000 fb68 	bl	800ba92 <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800b3c2:	4604      	mov	r4, r0
 800b3c4:	69f8      	ldr	r0, [r7, #28]
 800b3c6:	f7ff fbb2 	bl	800ab2e <_ZNK6tflite13Pool2DOptions13filter_heightEv>
 800b3ca:	4603      	mov	r3, r0
 800b3cc:	6123      	str	r3, [r4, #16]
    params->activation =
        ConvertActivation(schema_params->fused_activation_function());
 800b3ce:	69f8      	ldr	r0, [r7, #28]
 800b3d0:	f7ff fbbc 	bl	800ab4c <_ZNK6tflite13Pool2DOptions25fused_activation_functionEv>
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	461d      	mov	r5, r3
    params->activation =
 800b3d8:	f107 0310 	add.w	r3, r7, #16
 800b3dc:	4618      	mov	r0, r3
 800b3de:	f000 fb58 	bl	800ba92 <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800b3e2:	4604      	mov	r4, r0
        ConvertActivation(schema_params->fused_activation_function());
 800b3e4:	4628      	mov	r0, r5
 800b3e6:	f7ff fd5f 	bl	800aea8 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>
 800b3ea:	4603      	mov	r3, r0
    params->activation =
 800b3ec:	7523      	strb	r3, [r4, #20]
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 800b3ee:	f107 0310 	add.w	r3, r7, #16
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	f000 fb59 	bl	800baaa <_ZNSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 800b3f8:	4602      	mov	r2, r0
 800b3fa:	683b      	ldr	r3, [r7, #0]
 800b3fc:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800b3fe:	2400      	movs	r4, #0
      params = safe_allocator.Allocate<TfLitePoolParams>();
 800b400:	f107 0310 	add.w	r3, r7, #16
 800b404:	4618      	mov	r0, r3
 800b406:	f000 fb15 	bl	800ba34 <_ZNSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 800b40a:	4623      	mov	r3, r4
}
 800b40c:	4618      	mov	r0, r3
 800b40e:	3720      	adds	r7, #32
 800b410:	46bd      	mov	sp, r7
 800b412:	bdb0      	pop	{r4, r5, r7, pc}
 800b414:	08028618 	.word	0x08028618
 800b418:	080285b8 	.word	0x080285b8
 800b41c:	08028600 	.word	0x08028600

0800b420 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
  return kTfLiteOk;
}

TfLiteStatus ParseReshape(const Operator* op, ErrorReporter* error_reporter,
                          BuiltinDataAllocator* allocator,
                          void** builtin_data) {
 800b420:	b590      	push	{r4, r7, lr}
 800b422:	b08d      	sub	sp, #52	; 0x34
 800b424:	af02      	add	r7, sp, #8
 800b426:	60f8      	str	r0, [r7, #12]
 800b428:	60b9      	str	r1, [r7, #8]
 800b42a:	607a      	str	r2, [r7, #4]
 800b42c:	603b      	str	r3, [r7, #0]
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 800b42e:	683b      	ldr	r3, [r7, #0]
 800b430:	687a      	ldr	r2, [r7, #4]
 800b432:	68b9      	ldr	r1, [r7, #8]
 800b434:	68f8      	ldr	r0, [r7, #12]
 800b436:	f7ff fcd9 	bl	800adec <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>

  SafeBuiltinDataAllocator safe_allocator(allocator);
 800b43a:	f107 0318 	add.w	r3, r7, #24
 800b43e:	6879      	ldr	r1, [r7, #4]
 800b440:	4618      	mov	r0, r3
 800b442:	f7ff fcc4 	bl	800adce <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>

  std::unique_ptr<TfLiteReshapeParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteReshapeParams>();
 800b446:	f107 0310 	add.w	r3, r7, #16
 800b44a:	f107 0218 	add.w	r2, r7, #24
 800b44e:	4611      	mov	r1, r2
 800b450:	4618      	mov	r0, r3
 800b452:	f000 fb3e 	bl	800bad2 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI19TfLiteReshapeParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 800b456:	f107 0310 	add.w	r3, r7, #16
 800b45a:	2100      	movs	r1, #0
 800b45c:	4618      	mov	r0, r3
 800b45e:	f000 fb78 	bl	800bb52 <_ZStneI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 800b462:	4603      	mov	r3, r0
 800b464:	f083 0301 	eor.w	r3, r3, #1
 800b468:	b2db      	uxtb	r3, r3
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d00c      	beq.n	800b488 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>
 800b46e:	4b27      	ldr	r3, [pc, #156]	; (800b50c <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xec>)
 800b470:	9301      	str	r3, [sp, #4]
 800b472:	f240 63e1 	movw	r3, #1761	; 0x6e1
 800b476:	9300      	str	r3, [sp, #0]
 800b478:	4b25      	ldr	r3, [pc, #148]	; (800b510 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf0>)
 800b47a:	4a26      	ldr	r2, [pc, #152]	; (800b514 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf4>)
 800b47c:	68b9      	ldr	r1, [r7, #8]
 800b47e:	68b8      	ldr	r0, [r7, #8]
 800b480:	f7ff fa59 	bl	800a936 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 800b484:	2401      	movs	r4, #1
 800b486:	e037      	b.n	800b4f8 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd8>

  const ReshapeOptions* schema_params = op->builtin_options_as_ReshapeOptions();
 800b488:	68f8      	ldr	r0, [r7, #12]
 800b48a:	f7ff fc6a 	bl	800ad62 <_ZNK6tflite8Operator33builtin_options_as_ReshapeOptionsEv>
 800b48e:	6278      	str	r0, [r7, #36]	; 0x24

  if (schema_params != nullptr) {
 800b490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b492:	2b00      	cmp	r3, #0
 800b494:	d027      	beq.n	800b4e6 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc6>
    const flatbuffers::Vector<int32_t>* new_shape = schema_params->new_shape();
 800b496:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b498:	f7ff fbe8 	bl	800ac6c <_ZNK6tflite14ReshapeOptions9new_shapeEv>
 800b49c:	6238      	str	r0, [r7, #32]
    if (new_shape != nullptr) {
 800b49e:	6a3b      	ldr	r3, [r7, #32]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d020      	beq.n	800b4e6 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc6>
      TF_LITE_ENSURE_STATUS(
 800b4a4:	f107 0310 	add.w	r3, r7, #16
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	f000 fb5f 	bl	800bb6c <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800b4ae:	4603      	mov	r3, r0
 800b4b0:	461a      	mov	r2, r3
 800b4b2:	4b19      	ldr	r3, [pc, #100]	; (800b518 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf8>)
 800b4b4:	9300      	str	r3, [sp, #0]
 800b4b6:	68bb      	ldr	r3, [r7, #8]
 800b4b8:	6a39      	ldr	r1, [r7, #32]
 800b4ba:	2020      	movs	r0, #32
 800b4bc:	f7ff fcb6 	bl	800ae2c <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc>
 800b4c0:	4603      	mov	r3, r0
 800b4c2:	77fb      	strb	r3, [r7, #31]
 800b4c4:	7ffb      	ldrb	r3, [r7, #31]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d001      	beq.n	800b4ce <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xae>
 800b4ca:	7ffc      	ldrb	r4, [r7, #31]
 800b4cc:	e014      	b.n	800b4f8 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd8>
          FlatBufferIntVectorToArray(sizeof(params->shape), new_shape,
                                     params->shape, error_reporter, "reshape"));
      params->num_dimensions = new_shape->size();
 800b4ce:	6a38      	ldr	r0, [r7, #32]
 800b4d0:	f000 f984 	bl	800b7dc <_ZNK11flatbuffers6VectorIlE4sizeEv>
 800b4d4:	4604      	mov	r4, r0
 800b4d6:	f107 0310 	add.w	r3, r7, #16
 800b4da:	4618      	mov	r0, r3
 800b4dc:	f000 fb46 	bl	800bb6c <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	4622      	mov	r2, r4
 800b4e4:	621a      	str	r2, [r3, #32]
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 800b4e6:	f107 0310 	add.w	r3, r7, #16
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	f000 fb4a 	bl	800bb84 <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 800b4f0:	4602      	mov	r2, r0
 800b4f2:	683b      	ldr	r3, [r7, #0]
 800b4f4:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800b4f6:	2400      	movs	r4, #0
      params = safe_allocator.Allocate<TfLiteReshapeParams>();
 800b4f8:	f107 0310 	add.w	r3, r7, #16
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	f000 fb06 	bl	800bb0e <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 800b502:	4623      	mov	r3, r4
}
 800b504:	4618      	mov	r0, r3
 800b506:	372c      	adds	r7, #44	; 0x2c
 800b508:	46bd      	mov	sp, r7
 800b50a:	bd90      	pop	{r4, r7, pc}
 800b50c:	08028618 	.word	0x08028618
 800b510:	080285b8 	.word	0x080285b8
 800b514:	08028600 	.word	0x08028600
 800b518:	080286e8 	.word	0x080286e8

0800b51c <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
  return kTfLiteOk;
}

TfLiteStatus ParseSoftmax(const Operator* op, ErrorReporter* error_reporter,
                          BuiltinDataAllocator* allocator,
                          void** builtin_data) {
 800b51c:	b590      	push	{r4, r7, lr}
 800b51e:	b08b      	sub	sp, #44	; 0x2c
 800b520:	af02      	add	r7, sp, #8
 800b522:	60f8      	str	r0, [r7, #12]
 800b524:	60b9      	str	r1, [r7, #8]
 800b526:	607a      	str	r2, [r7, #4]
 800b528:	603b      	str	r3, [r7, #0]
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 800b52a:	683b      	ldr	r3, [r7, #0]
 800b52c:	687a      	ldr	r2, [r7, #4]
 800b52e:	68b9      	ldr	r1, [r7, #8]
 800b530:	68f8      	ldr	r0, [r7, #12]
 800b532:	f7ff fc5b 	bl	800adec <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>

  SafeBuiltinDataAllocator safe_allocator(allocator);
 800b536:	f107 0318 	add.w	r3, r7, #24
 800b53a:	6879      	ldr	r1, [r7, #4]
 800b53c:	4618      	mov	r0, r3
 800b53e:	f7ff fc46 	bl	800adce <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>
  std::unique_ptr<TfLiteSoftmaxParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteSoftmaxParams>();
 800b542:	f107 0310 	add.w	r3, r7, #16
 800b546:	f107 0218 	add.w	r2, r7, #24
 800b54a:	4611      	mov	r1, r2
 800b54c:	4618      	mov	r0, r3
 800b54e:	f000 fb2d 	bl	800bbac <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI19TfLiteSoftmaxParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 800b552:	f107 0310 	add.w	r3, r7, #16
 800b556:	2100      	movs	r1, #0
 800b558:	4618      	mov	r0, r3
 800b55a:	f000 fb67 	bl	800bc2c <_ZStneI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 800b55e:	4603      	mov	r3, r0
 800b560:	f083 0301 	eor.w	r3, r3, #1
 800b564:	b2db      	uxtb	r3, r3
 800b566:	2b00      	cmp	r3, #0
 800b568:	d00c      	beq.n	800b584 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>
 800b56a:	4b1a      	ldr	r3, [pc, #104]	; (800b5d4 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb8>)
 800b56c:	9301      	str	r3, [sp, #4]
 800b56e:	f240 7372 	movw	r3, #1906	; 0x772
 800b572:	9300      	str	r3, [sp, #0]
 800b574:	4b18      	ldr	r3, [pc, #96]	; (800b5d8 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xbc>)
 800b576:	4a19      	ldr	r2, [pc, #100]	; (800b5dc <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc0>)
 800b578:	68b9      	ldr	r1, [r7, #8]
 800b57a:	68b8      	ldr	r0, [r7, #8]
 800b57c:	f7ff f9db 	bl	800a936 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 800b580:	2401      	movs	r4, #1
 800b582:	e01c      	b.n	800b5be <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa2>

  const SoftmaxOptions* schema_params = op->builtin_options_as_SoftmaxOptions();
 800b584:	68f8      	ldr	r0, [r7, #12]
 800b586:	f7ff fbd8 	bl	800ad3a <_ZNK6tflite8Operator33builtin_options_as_SoftmaxOptionsEv>
 800b58a:	61f8      	str	r0, [r7, #28]

  if (schema_params != nullptr) {
 800b58c:	69fb      	ldr	r3, [r7, #28]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d00c      	beq.n	800b5ac <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x90>
    params->beta = schema_params->beta();
 800b592:	f107 0310 	add.w	r3, r7, #16
 800b596:	4618      	mov	r0, r3
 800b598:	f000 fb55 	bl	800bc46 <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800b59c:	4604      	mov	r4, r0
 800b59e:	69f8      	ldr	r0, [r7, #28]
 800b5a0:	f7ff fb50 	bl	800ac44 <_ZNK6tflite14SoftmaxOptions4betaEv>
 800b5a4:	eef0 7a40 	vmov.f32	s15, s0
 800b5a8:	edc4 7a00 	vstr	s15, [r4]
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 800b5ac:	f107 0310 	add.w	r3, r7, #16
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	f000 fb54 	bl	800bc5e <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 800b5b6:	4602      	mov	r2, r0
 800b5b8:	683b      	ldr	r3, [r7, #0]
 800b5ba:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800b5bc:	2400      	movs	r4, #0
      params = safe_allocator.Allocate<TfLiteSoftmaxParams>();
 800b5be:	f107 0310 	add.w	r3, r7, #16
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	f000 fb10 	bl	800bbe8 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 800b5c8:	4623      	mov	r3, r4
}
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	3724      	adds	r7, #36	; 0x24
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	bd90      	pop	{r4, r7, pc}
 800b5d2:	bf00      	nop
 800b5d4:	08028618 	.word	0x08028618
 800b5d8:	080285b8 	.word	0x080285b8
 800b5dc:	08028600 	.word	0x08028600

0800b5e0 <_ZN11flatbuffers12EndianScalarImEET_S1_>:
#if defined(_MSC_VER)
  #pragma warning(pop)
#endif


template<typename T> T EndianScalar(T t) {
 800b5e0:	b480      	push	{r7}
 800b5e2:	b083      	sub	sp, #12
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
  #if FLATBUFFERS_LITTLEENDIAN
    return t;
 800b5e8:	687b      	ldr	r3, [r7, #4]
  #else
    return EndianSwap(t);
  #endif
}
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	370c      	adds	r7, #12
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f4:	4770      	bx	lr

0800b5f6 <_ZNK11flatbuffers6VectorIcE4DataEv>:
  const uint8_t *Data() const {
 800b5f6:	b480      	push	{r7}
 800b5f8:	b083      	sub	sp, #12
 800b5fa:	af00      	add	r7, sp, #0
 800b5fc:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	3304      	adds	r3, #4
  }
 800b602:	4618      	mov	r0, r3
 800b604:	370c      	adds	r7, #12
 800b606:	46bd      	mov	sp, r7
 800b608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60c:	4770      	bx	lr

0800b60e <_ZN11flatbuffers10ReadScalarItEET_PKv>:

template<typename T>
// UBSAN: C++ aliasing type rules, see std::bit_cast<> for details.
__supress_ubsan__("alignment")
T ReadScalar(const void *p) {
 800b60e:	b580      	push	{r7, lr}
 800b610:	b082      	sub	sp, #8
 800b612:	af00      	add	r7, sp, #0
 800b614:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	881b      	ldrh	r3, [r3, #0]
 800b61a:	4618      	mov	r0, r3
 800b61c:	f000 fb3e 	bl	800bc9c <_ZN11flatbuffers12EndianScalarItEET_S1_>
 800b620:	4603      	mov	r3, r0
}
 800b622:	4618      	mov	r0, r3
 800b624:	3708      	adds	r7, #8
 800b626:	46bd      	mov	sp, r7
 800b628:	bd80      	pop	{r7, pc}

0800b62a <_ZN11flatbuffers10ReadScalarImEET_PKv>:
T ReadScalar(const void *p) {
 800b62a:	b580      	push	{r7, lr}
 800b62c:	b082      	sub	sp, #8
 800b62e:	af00      	add	r7, sp, #0
 800b630:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	4618      	mov	r0, r3
 800b638:	f7ff ffd2 	bl	800b5e0 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800b63c:	4603      	mov	r3, r0
}
 800b63e:	4618      	mov	r0, r3
 800b640:	3708      	adds	r7, #8
 800b642:	46bd      	mov	sp, r7
 800b644:	bd80      	pop	{r7, pc}

0800b646 <_ZN11flatbuffers10ReadScalarIlEET_PKv>:
T ReadScalar(const void *p) {
 800b646:	b580      	push	{r7, lr}
 800b648:	b082      	sub	sp, #8
 800b64a:	af00      	add	r7, sp, #0
 800b64c:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	4618      	mov	r0, r3
 800b654:	f000 fb17 	bl	800bc86 <_ZN11flatbuffers12EndianScalarIlEET_S1_>
 800b658:	4603      	mov	r3, r0
}
 800b65a:	4618      	mov	r0, r3
 800b65c:	3708      	adds	r7, #8
 800b65e:	46bd      	mov	sp, r7
 800b660:	bd80      	pop	{r7, pc}

0800b662 <_ZN11flatbuffers10ReadScalarIhEET_PKv>:
T ReadScalar(const void *p) {
 800b662:	b580      	push	{r7, lr}
 800b664:	b082      	sub	sp, #8
 800b666:	af00      	add	r7, sp, #0
 800b668:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	781b      	ldrb	r3, [r3, #0]
 800b66e:	4618      	mov	r0, r3
 800b670:	f000 fb20 	bl	800bcb4 <_ZN11flatbuffers12EndianScalarIhEET_S1_>
 800b674:	4603      	mov	r3, r0
}
 800b676:	4618      	mov	r0, r3
 800b678:	3708      	adds	r7, #8
 800b67a:	46bd      	mov	sp, r7
 800b67c:	bd80      	pop	{r7, pc}

0800b67e <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>:

  template<typename T> T GetField(voffset_t field, T defaultval) const {
 800b67e:	b580      	push	{r7, lr}
 800b680:	b084      	sub	sp, #16
 800b682:	af00      	add	r7, sp, #0
 800b684:	6078      	str	r0, [r7, #4]
 800b686:	460b      	mov	r3, r1
 800b688:	807b      	strh	r3, [r7, #2]
 800b68a:	4613      	mov	r3, r2
 800b68c:	707b      	strb	r3, [r7, #1]
    auto field_offset = GetOptionalFieldOffset(field);
 800b68e:	887b      	ldrh	r3, [r7, #2]
 800b690:	4619      	mov	r1, r3
 800b692:	6878      	ldr	r0, [r7, #4]
 800b694:	f7ff f992 	bl	800a9bc <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800b698:	4603      	mov	r3, r0
 800b69a:	81fb      	strh	r3, [r7, #14]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 800b69c:	89fb      	ldrh	r3, [r7, #14]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d007      	beq.n	800b6b2 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_+0x34>
 800b6a2:	687a      	ldr	r2, [r7, #4]
 800b6a4:	89fb      	ldrh	r3, [r7, #14]
 800b6a6:	4413      	add	r3, r2
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	f7ff ffda 	bl	800b662 <_ZN11flatbuffers10ReadScalarIhEET_PKv>
 800b6ae:	4603      	mov	r3, r0
 800b6b0:	e000      	b.n	800b6b4 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_+0x36>
 800b6b2:	787b      	ldrb	r3, [r7, #1]
  }
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	3710      	adds	r7, #16
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	bd80      	pop	{r7, pc}

0800b6bc <_ZNK11flatbuffers5Table10GetPointerIPKvEET_t>:
    auto field_offset = GetOptionalFieldOffset(field);
    auto p = data_ + field_offset;
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
                        : nullptr;
  }
  template<typename P> P GetPointer(voffset_t field) const {
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b082      	sub	sp, #8
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
 800b6c4:	460b      	mov	r3, r1
 800b6c6:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800b6c8:	887b      	ldrh	r3, [r7, #2]
 800b6ca:	4619      	mov	r1, r3
 800b6cc:	6878      	ldr	r0, [r7, #4]
 800b6ce:	f000 fafd 	bl	800bccc <_ZN11flatbuffers5Table10GetPointerIPKvEET_t>
 800b6d2:	4603      	mov	r3, r0
  }
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	3708      	adds	r7, #8
 800b6d8:	46bd      	mov	sp, r7
 800b6da:	bd80      	pop	{r7, pc}

0800b6dc <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b086      	sub	sp, #24
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	60f8      	str	r0, [r7, #12]
 800b6e4:	460b      	mov	r3, r1
 800b6e6:	607a      	str	r2, [r7, #4]
 800b6e8:	817b      	strh	r3, [r7, #10]
    auto field_offset = GetOptionalFieldOffset(field);
 800b6ea:	897b      	ldrh	r3, [r7, #10]
 800b6ec:	4619      	mov	r1, r3
 800b6ee:	68f8      	ldr	r0, [r7, #12]
 800b6f0:	f7ff f964 	bl	800a9bc <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800b6f4:	4603      	mov	r3, r0
 800b6f6:	82fb      	strh	r3, [r7, #22]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 800b6f8:	8afb      	ldrh	r3, [r7, #22]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d007      	beq.n	800b70e <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_+0x32>
 800b6fe:	68fa      	ldr	r2, [r7, #12]
 800b700:	8afb      	ldrh	r3, [r7, #22]
 800b702:	4413      	add	r3, r2
 800b704:	4618      	mov	r0, r3
 800b706:	f7ff ff9e 	bl	800b646 <_ZN11flatbuffers10ReadScalarIlEET_PKv>
 800b70a:	4603      	mov	r3, r0
 800b70c:	e000      	b.n	800b710 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_+0x34>
 800b70e:	687b      	ldr	r3, [r7, #4]
  }
 800b710:	4618      	mov	r0, r3
 800b712:	3718      	adds	r7, #24
 800b714:	46bd      	mov	sp, r7
 800b716:	bd80      	pop	{r7, pc}

0800b718 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800b718:	b580      	push	{r7, lr}
 800b71a:	b082      	sub	sp, #8
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
 800b720:	460b      	mov	r3, r1
 800b722:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800b724:	887b      	ldrh	r3, [r7, #2]
 800b726:	4619      	mov	r1, r3
 800b728:	6878      	ldr	r0, [r7, #4]
 800b72a:	f000 faef 	bl	800bd0c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 800b72e:	4603      	mov	r3, r0
  }
 800b730:	4618      	mov	r0, r3
 800b732:	3708      	adds	r7, #8
 800b734:	46bd      	mov	sp, r7
 800b736:	bd80      	pop	{r7, pc}

0800b738 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 800b738:	b580      	push	{r7, lr}
 800b73a:	b084      	sub	sp, #16
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
 800b740:	460b      	mov	r3, r1
 800b742:	807b      	strh	r3, [r7, #2]
 800b744:	4613      	mov	r3, r2
 800b746:	707b      	strb	r3, [r7, #1]
    auto field_offset = GetOptionalFieldOffset(field);
 800b748:	887b      	ldrh	r3, [r7, #2]
 800b74a:	4619      	mov	r1, r3
 800b74c:	6878      	ldr	r0, [r7, #4]
 800b74e:	f7ff f935 	bl	800a9bc <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800b752:	4603      	mov	r3, r0
 800b754:	81fb      	strh	r3, [r7, #14]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 800b756:	89fb      	ldrh	r3, [r7, #14]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d007      	beq.n	800b76c <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_+0x34>
 800b75c:	687a      	ldr	r2, [r7, #4]
 800b75e:	89fb      	ldrh	r3, [r7, #14]
 800b760:	4413      	add	r3, r2
 800b762:	4618      	mov	r0, r3
 800b764:	f000 faf2 	bl	800bd4c <_ZN11flatbuffers10ReadScalarIaEET_PKv>
 800b768:	4603      	mov	r3, r0
 800b76a:	e001      	b.n	800b770 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_+0x38>
 800b76c:	f997 3001 	ldrsb.w	r3, [r7, #1]
  }
 800b770:	4618      	mov	r0, r3
 800b772:	3710      	adds	r7, #16
 800b774:	46bd      	mov	sp, r7
 800b776:	bd80      	pop	{r7, pc}

0800b778 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800b778:	b580      	push	{r7, lr}
 800b77a:	b082      	sub	sp, #8
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
 800b780:	460b      	mov	r3, r1
 800b782:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800b784:	887b      	ldrh	r3, [r7, #2]
 800b786:	4619      	mov	r1, r3
 800b788:	6878      	ldr	r0, [r7, #4]
 800b78a:	f000 faee 	bl	800bd6a <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>
 800b78e:	4603      	mov	r3, r0
  }
 800b790:	4618      	mov	r0, r3
 800b792:	3708      	adds	r7, #8
 800b794:	46bd      	mov	sp, r7
 800b796:	bd80      	pop	{r7, pc}

0800b798 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 800b798:	b580      	push	{r7, lr}
 800b79a:	b086      	sub	sp, #24
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	60f8      	str	r0, [r7, #12]
 800b7a0:	460b      	mov	r3, r1
 800b7a2:	ed87 0a01 	vstr	s0, [r7, #4]
 800b7a6:	817b      	strh	r3, [r7, #10]
    auto field_offset = GetOptionalFieldOffset(field);
 800b7a8:	897b      	ldrh	r3, [r7, #10]
 800b7aa:	4619      	mov	r1, r3
 800b7ac:	68f8      	ldr	r0, [r7, #12]
 800b7ae:	f7ff f905 	bl	800a9bc <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800b7b2:	4603      	mov	r3, r0
 800b7b4:	82fb      	strh	r3, [r7, #22]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 800b7b6:	8afb      	ldrh	r3, [r7, #22]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d008      	beq.n	800b7ce <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_+0x36>
 800b7bc:	68fa      	ldr	r2, [r7, #12]
 800b7be:	8afb      	ldrh	r3, [r7, #22]
 800b7c0:	4413      	add	r3, r2
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	f000 faf1 	bl	800bdaa <_ZN11flatbuffers10ReadScalarIfEET_PKv>
 800b7c8:	eef0 7a40 	vmov.f32	s15, s0
 800b7cc:	e001      	b.n	800b7d2 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_+0x3a>
 800b7ce:	edd7 7a01 	vldr	s15, [r7, #4]
  }
 800b7d2:	eeb0 0a67 	vmov.f32	s0, s15
 800b7d6:	3718      	adds	r7, #24
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	bd80      	pop	{r7, pc}

0800b7dc <_ZNK11flatbuffers6VectorIlE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b082      	sub	sp, #8
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	6078      	str	r0, [r7, #4]
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	f7ff fef9 	bl	800b5e0 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800b7ee:	4603      	mov	r3, r0
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	3708      	adds	r7, #8
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	bd80      	pop	{r7, pc}

0800b7f8 <_ZNK11flatbuffers6VectorIlE3GetEm>:
  return_type Get(uoffset_t i) const {
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b082      	sub	sp, #8
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
 800b800:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 800b802:	6878      	ldr	r0, [r7, #4]
 800b804:	f7ff ffea 	bl	800b7dc <_ZNK11flatbuffers6VectorIlE4sizeEv>
 800b808:	4602      	mov	r2, r0
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	4293      	cmp	r3, r2
 800b80e:	d306      	bcc.n	800b81e <_ZNK11flatbuffers6VectorIlE3GetEm+0x26>
 800b810:	4b09      	ldr	r3, [pc, #36]	; (800b838 <_ZNK11flatbuffers6VectorIlE3GetEm+0x40>)
 800b812:	4a0a      	ldr	r2, [pc, #40]	; (800b83c <_ZNK11flatbuffers6VectorIlE3GetEm+0x44>)
 800b814:	f44f 7183 	mov.w	r1, #262	; 0x106
 800b818:	4809      	ldr	r0, [pc, #36]	; (800b840 <_ZNK11flatbuffers6VectorIlE3GetEm+0x48>)
 800b81a:	f01b fa77 	bl	8026d0c <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 800b81e:	6878      	ldr	r0, [r7, #4]
 800b820:	f000 fae7 	bl	800bdf2 <_ZNK11flatbuffers6VectorIlE4DataEv>
 800b824:	4603      	mov	r3, r0
 800b826:	6839      	ldr	r1, [r7, #0]
 800b828:	4618      	mov	r0, r3
 800b82a:	f000 fad0 	bl	800bdce <_ZN11flatbuffers14IndirectHelperIlE4ReadEPKhm>
 800b82e:	4603      	mov	r3, r0
  }
 800b830:	4618      	mov	r0, r3
 800b832:	3708      	adds	r7, #8
 800b834:	46bd      	mov	sp, r7
 800b836:	bd80      	pop	{r7, pc}
 800b838:	080286f8 	.word	0x080286f8
 800b83c:	08028704 	.word	0x08028704
 800b840:	080287d4 	.word	0x080287d4

0800b844 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI16TfLiteConvParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 800b844:	b590      	push	{r4, r7, lr}
 800b846:	b085      	sub	sp, #20
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
 800b84c:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 800b84e:	683b      	ldr	r3, [r7, #0]
 800b850:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 800b852:	4618      	mov	r0, r3
 800b854:	f000 fae4 	bl	800be20 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI16TfLiteConvParamsEEPT_v>
 800b858:	4604      	mov	r4, r0
 800b85a:	683b      	ldr	r3, [r7, #0]
 800b85c:	681a      	ldr	r2, [r3, #0]
 800b85e:	f107 030c 	add.w	r3, r7, #12
 800b862:	4611      	mov	r1, r2
 800b864:	4618      	mov	r0, r3
 800b866:	f7ff fa90 	bl	800ad8a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 800b86a:	f107 030c 	add.w	r3, r7, #12
 800b86e:	461a      	mov	r2, r3
 800b870:	4621      	mov	r1, r4
 800b872:	6878      	ldr	r0, [r7, #4]
 800b874:	f000 faf3 	bl	800be5e <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>
  }
 800b878:	6878      	ldr	r0, [r7, #4]
 800b87a:	3714      	adds	r7, #20
 800b87c:	46bd      	mov	sp, r7
 800b87e:	bd90      	pop	{r4, r7, pc}

0800b880 <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
	unique_ptr(auto_ptr<_Up>&& __u) noexcept;
#pragma GCC diagnostic pop
#endif

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
 800b880:	b590      	push	{r4, r7, lr}
 800b882:	b085      	sub	sp, #20
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	4618      	mov	r0, r3
 800b88c:	f000 fafc 	bl	800be88 <_ZNSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800b890:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d00c      	beq.n	800b8b4 <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800b89a:	6878      	ldr	r0, [r7, #4]
 800b89c:	f000 fb01 	bl	800bea2 <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 800b8a0:	4604      	mov	r4, r0
 800b8a2:	68f8      	ldr	r0, [r7, #12]
 800b8a4:	f000 fb0a 	bl	800bebc <_ZSt4moveIRP16TfLiteConvParamsEONSt16remove_referenceIT_E4typeEOS4_>
 800b8a8:	4603      	mov	r3, r0
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	4619      	mov	r1, r3
 800b8ae:	4620      	mov	r0, r4
 800b8b0:	f7ff fa7a 	bl	800ada8 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	601a      	str	r2, [r3, #0]
      }
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	4618      	mov	r0, r3
 800b8be:	3714      	adds	r7, #20
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	bd90      	pop	{r4, r7, pc}

0800b8c4 <_ZStneI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
	       const unique_ptr<_Up, _Ep>& __y)
    { return __x.get() != __y.get(); }

  template<typename _Tp, typename _Dp>
    _GLIBCXX_NODISCARD inline bool
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b082      	sub	sp, #8
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
 800b8cc:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 800b8ce:	6878      	ldr	r0, [r7, #4]
 800b8d0:	f000 fb15 	bl	800befe <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 800b8d4:	4603      	mov	r3, r0
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	3708      	adds	r7, #8
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	bd80      	pop	{r7, pc}

0800b8de <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 800b8de:	b580      	push	{r7, lr}
 800b8e0:	b082      	sub	sp, #8
 800b8e2:	af00      	add	r7, sp, #0
 800b8e4:	6078      	str	r0, [r7, #4]
	return get();
 800b8e6:	6878      	ldr	r0, [r7, #4]
 800b8e8:	f000 fb1a 	bl	800bf20 <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800b8ec:	4603      	mov	r3, r0
      }
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	3708      	adds	r7, #8
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bd80      	pop	{r7, pc}

0800b8f6 <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 800b8f6:	b580      	push	{r7, lr}
 800b8f8:	b084      	sub	sp, #16
 800b8fa:	af00      	add	r7, sp, #0
 800b8fc:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 800b8fe:	6878      	ldr	r0, [r7, #4]
 800b900:	f000 fb0e 	bl	800bf20 <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800b904:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	4618      	mov	r0, r3
 800b90a:	f000 fabd 	bl	800be88 <_ZNSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800b90e:	4603      	mov	r3, r0
 800b910:	2200      	movs	r2, #0
 800b912:	601a      	str	r2, [r3, #0]
	return __p;
 800b914:	68fb      	ldr	r3, [r7, #12]
      }
 800b916:	4618      	mov	r0, r3
 800b918:	3710      	adds	r7, #16
 800b91a:	46bd      	mov	sp, r7
 800b91c:	bd80      	pop	{r7, pc}

0800b91e <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI25TfLiteDepthwiseConvParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 800b91e:	b590      	push	{r4, r7, lr}
 800b920:	b085      	sub	sp, #20
 800b922:	af00      	add	r7, sp, #0
 800b924:	6078      	str	r0, [r7, #4]
 800b926:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 800b928:	683b      	ldr	r3, [r7, #0]
 800b92a:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 800b92c:	4618      	mov	r0, r3
 800b92e:	f000 fb04 	bl	800bf3a <_ZN6tflite20BuiltinDataAllocator11AllocatePODI25TfLiteDepthwiseConvParamsEEPT_v>
 800b932:	4604      	mov	r4, r0
 800b934:	683b      	ldr	r3, [r7, #0]
 800b936:	681a      	ldr	r2, [r3, #0]
 800b938:	f107 030c 	add.w	r3, r7, #12
 800b93c:	4611      	mov	r1, r2
 800b93e:	4618      	mov	r0, r3
 800b940:	f7ff fa23 	bl	800ad8a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 800b944:	f107 030c 	add.w	r3, r7, #12
 800b948:	461a      	mov	r2, r3
 800b94a:	4621      	mov	r1, r4
 800b94c:	6878      	ldr	r0, [r7, #4]
 800b94e:	f000 fb14 	bl	800bf7a <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>
  }
 800b952:	6878      	ldr	r0, [r7, #4]
 800b954:	3714      	adds	r7, #20
 800b956:	46bd      	mov	sp, r7
 800b958:	bd90      	pop	{r4, r7, pc}

0800b95a <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 800b95a:	b590      	push	{r4, r7, lr}
 800b95c:	b085      	sub	sp, #20
 800b95e:	af00      	add	r7, sp, #0
 800b960:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	4618      	mov	r0, r3
 800b966:	f000 fb1d 	bl	800bfa4 <_ZNSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800b96a:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d00c      	beq.n	800b98e <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800b974:	6878      	ldr	r0, [r7, #4]
 800b976:	f000 fb22 	bl	800bfbe <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 800b97a:	4604      	mov	r4, r0
 800b97c:	68f8      	ldr	r0, [r7, #12]
 800b97e:	f000 fb2b 	bl	800bfd8 <_ZSt4moveIRP25TfLiteDepthwiseConvParamsEONSt16remove_referenceIT_E4typeEOS4_>
 800b982:	4603      	mov	r3, r0
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	4619      	mov	r1, r3
 800b988:	4620      	mov	r0, r4
 800b98a:	f7ff fa0d 	bl	800ada8 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	2200      	movs	r2, #0
 800b992:	601a      	str	r2, [r3, #0]
      }
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	4618      	mov	r0, r3
 800b998:	3714      	adds	r7, #20
 800b99a:	46bd      	mov	sp, r7
 800b99c:	bd90      	pop	{r4, r7, pc}

0800b99e <_ZStneI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 800b99e:	b580      	push	{r7, lr}
 800b9a0:	b082      	sub	sp, #8
 800b9a2:	af00      	add	r7, sp, #0
 800b9a4:	6078      	str	r0, [r7, #4]
 800b9a6:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 800b9a8:	6878      	ldr	r0, [r7, #4]
 800b9aa:	f000 fb36 	bl	800c01a <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 800b9ae:	4603      	mov	r3, r0
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	3708      	adds	r7, #8
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	bd80      	pop	{r7, pc}

0800b9b8 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b082      	sub	sp, #8
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
	return get();
 800b9c0:	6878      	ldr	r0, [r7, #4]
 800b9c2:	f000 fb3b 	bl	800c03c <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800b9c6:	4603      	mov	r3, r0
      }
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	3708      	adds	r7, #8
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	bd80      	pop	{r7, pc}

0800b9d0 <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b084      	sub	sp, #16
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 800b9d8:	6878      	ldr	r0, [r7, #4]
 800b9da:	f000 fb2f 	bl	800c03c <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800b9de:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	f000 fade 	bl	800bfa4 <_ZNSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800b9e8:	4603      	mov	r3, r0
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	601a      	str	r2, [r3, #0]
	return __p;
 800b9ee:	68fb      	ldr	r3, [r7, #12]
      }
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	3710      	adds	r7, #16
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	bd80      	pop	{r7, pc}

0800b9f8 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI16TfLitePoolParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 800b9f8:	b590      	push	{r4, r7, lr}
 800b9fa:	b085      	sub	sp, #20
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
 800ba00:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 800ba02:	683b      	ldr	r3, [r7, #0]
 800ba04:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 800ba06:	4618      	mov	r0, r3
 800ba08:	f000 fb25 	bl	800c056 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI16TfLitePoolParamsEEPT_v>
 800ba0c:	4604      	mov	r4, r0
 800ba0e:	683b      	ldr	r3, [r7, #0]
 800ba10:	681a      	ldr	r2, [r3, #0]
 800ba12:	f107 030c 	add.w	r3, r7, #12
 800ba16:	4611      	mov	r1, r2
 800ba18:	4618      	mov	r0, r3
 800ba1a:	f7ff f9b6 	bl	800ad8a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 800ba1e:	f107 030c 	add.w	r3, r7, #12
 800ba22:	461a      	mov	r2, r3
 800ba24:	4621      	mov	r1, r4
 800ba26:	6878      	ldr	r0, [r7, #4]
 800ba28:	f000 fb32 	bl	800c090 <_ZNSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>
  }
 800ba2c:	6878      	ldr	r0, [r7, #4]
 800ba2e:	3714      	adds	r7, #20
 800ba30:	46bd      	mov	sp, r7
 800ba32:	bd90      	pop	{r4, r7, pc}

0800ba34 <_ZNSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 800ba34:	b590      	push	{r4, r7, lr}
 800ba36:	b085      	sub	sp, #20
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	4618      	mov	r0, r3
 800ba40:	f000 fb3b 	bl	800c0ba <_ZNSt15__uniq_ptr_implI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800ba44:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d00c      	beq.n	800ba68 <_ZNSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800ba4e:	6878      	ldr	r0, [r7, #4]
 800ba50:	f000 fb40 	bl	800c0d4 <_ZNSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 800ba54:	4604      	mov	r4, r0
 800ba56:	68f8      	ldr	r0, [r7, #12]
 800ba58:	f000 fb49 	bl	800c0ee <_ZSt4moveIRP16TfLitePoolParamsEONSt16remove_referenceIT_E4typeEOS4_>
 800ba5c:	4603      	mov	r3, r0
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	4619      	mov	r1, r3
 800ba62:	4620      	mov	r0, r4
 800ba64:	f7ff f9a0 	bl	800ada8 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	601a      	str	r2, [r3, #0]
      }
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	4618      	mov	r0, r3
 800ba72:	3714      	adds	r7, #20
 800ba74:	46bd      	mov	sp, r7
 800ba76:	bd90      	pop	{r4, r7, pc}

0800ba78 <_ZStneI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b082      	sub	sp, #8
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
 800ba80:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 800ba82:	6878      	ldr	r0, [r7, #4]
 800ba84:	f000 fb54 	bl	800c130 <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 800ba88:	4603      	mov	r3, r0
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	3708      	adds	r7, #8
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	bd80      	pop	{r7, pc}

0800ba92 <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 800ba92:	b580      	push	{r7, lr}
 800ba94:	b082      	sub	sp, #8
 800ba96:	af00      	add	r7, sp, #0
 800ba98:	6078      	str	r0, [r7, #4]
	return get();
 800ba9a:	6878      	ldr	r0, [r7, #4]
 800ba9c:	f000 fb59 	bl	800c152 <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800baa0:	4603      	mov	r3, r0
      }
 800baa2:	4618      	mov	r0, r3
 800baa4:	3708      	adds	r7, #8
 800baa6:	46bd      	mov	sp, r7
 800baa8:	bd80      	pop	{r7, pc}

0800baaa <_ZNSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 800baaa:	b580      	push	{r7, lr}
 800baac:	b084      	sub	sp, #16
 800baae:	af00      	add	r7, sp, #0
 800bab0:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 800bab2:	6878      	ldr	r0, [r7, #4]
 800bab4:	f000 fb4d 	bl	800c152 <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800bab8:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	4618      	mov	r0, r3
 800babe:	f000 fafc 	bl	800c0ba <_ZNSt15__uniq_ptr_implI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800bac2:	4603      	mov	r3, r0
 800bac4:	2200      	movs	r2, #0
 800bac6:	601a      	str	r2, [r3, #0]
	return __p;
 800bac8:	68fb      	ldr	r3, [r7, #12]
      }
 800baca:	4618      	mov	r0, r3
 800bacc:	3710      	adds	r7, #16
 800bace:	46bd      	mov	sp, r7
 800bad0:	bd80      	pop	{r7, pc}

0800bad2 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI19TfLiteReshapeParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 800bad2:	b590      	push	{r4, r7, lr}
 800bad4:	b085      	sub	sp, #20
 800bad6:	af00      	add	r7, sp, #0
 800bad8:	6078      	str	r0, [r7, #4]
 800bada:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 800badc:	683b      	ldr	r3, [r7, #0]
 800bade:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 800bae0:	4618      	mov	r0, r3
 800bae2:	f000 fb43 	bl	800c16c <_ZN6tflite20BuiltinDataAllocator11AllocatePODI19TfLiteReshapeParamsEEPT_v>
 800bae6:	4604      	mov	r4, r0
 800bae8:	683b      	ldr	r3, [r7, #0]
 800baea:	681a      	ldr	r2, [r3, #0]
 800baec:	f107 030c 	add.w	r3, r7, #12
 800baf0:	4611      	mov	r1, r2
 800baf2:	4618      	mov	r0, r3
 800baf4:	f7ff f949 	bl	800ad8a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 800baf8:	f107 030c 	add.w	r3, r7, #12
 800bafc:	461a      	mov	r2, r3
 800bafe:	4621      	mov	r1, r4
 800bb00:	6878      	ldr	r0, [r7, #4]
 800bb02:	f000 fb50 	bl	800c1a6 <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>
  }
 800bb06:	6878      	ldr	r0, [r7, #4]
 800bb08:	3714      	adds	r7, #20
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	bd90      	pop	{r4, r7, pc}

0800bb0e <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 800bb0e:	b590      	push	{r4, r7, lr}
 800bb10:	b085      	sub	sp, #20
 800bb12:	af00      	add	r7, sp, #0
 800bb14:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	4618      	mov	r0, r3
 800bb1a:	f000 fb59 	bl	800c1d0 <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800bb1e:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d00c      	beq.n	800bb42 <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800bb28:	6878      	ldr	r0, [r7, #4]
 800bb2a:	f000 fb5e 	bl	800c1ea <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 800bb2e:	4604      	mov	r4, r0
 800bb30:	68f8      	ldr	r0, [r7, #12]
 800bb32:	f000 fb67 	bl	800c204 <_ZSt4moveIRP19TfLiteReshapeParamsEONSt16remove_referenceIT_E4typeEOS4_>
 800bb36:	4603      	mov	r3, r0
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	4619      	mov	r1, r3
 800bb3c:	4620      	mov	r0, r4
 800bb3e:	f7ff f933 	bl	800ada8 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	2200      	movs	r2, #0
 800bb46:	601a      	str	r2, [r3, #0]
      }
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	3714      	adds	r7, #20
 800bb4e:	46bd      	mov	sp, r7
 800bb50:	bd90      	pop	{r4, r7, pc}

0800bb52 <_ZStneI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 800bb52:	b580      	push	{r7, lr}
 800bb54:	b082      	sub	sp, #8
 800bb56:	af00      	add	r7, sp, #0
 800bb58:	6078      	str	r0, [r7, #4]
 800bb5a:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 800bb5c:	6878      	ldr	r0, [r7, #4]
 800bb5e:	f000 fb72 	bl	800c246 <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 800bb62:	4603      	mov	r3, r0
 800bb64:	4618      	mov	r0, r3
 800bb66:	3708      	adds	r7, #8
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	bd80      	pop	{r7, pc}

0800bb6c <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	b082      	sub	sp, #8
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]
	return get();
 800bb74:	6878      	ldr	r0, [r7, #4]
 800bb76:	f000 fb77 	bl	800c268 <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800bb7a:	4603      	mov	r3, r0
      }
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	3708      	adds	r7, #8
 800bb80:	46bd      	mov	sp, r7
 800bb82:	bd80      	pop	{r7, pc}

0800bb84 <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 800bb84:	b580      	push	{r7, lr}
 800bb86:	b084      	sub	sp, #16
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 800bb8c:	6878      	ldr	r0, [r7, #4]
 800bb8e:	f000 fb6b 	bl	800c268 <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800bb92:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	4618      	mov	r0, r3
 800bb98:	f000 fb1a 	bl	800c1d0 <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800bb9c:	4603      	mov	r3, r0
 800bb9e:	2200      	movs	r2, #0
 800bba0:	601a      	str	r2, [r3, #0]
	return __p;
 800bba2:	68fb      	ldr	r3, [r7, #12]
      }
 800bba4:	4618      	mov	r0, r3
 800bba6:	3710      	adds	r7, #16
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	bd80      	pop	{r7, pc}

0800bbac <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI19TfLiteSoftmaxParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 800bbac:	b590      	push	{r4, r7, lr}
 800bbae:	b085      	sub	sp, #20
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	6078      	str	r0, [r7, #4]
 800bbb4:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 800bbb6:	683b      	ldr	r3, [r7, #0]
 800bbb8:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 800bbba:	4618      	mov	r0, r3
 800bbbc:	f000 fb61 	bl	800c282 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI19TfLiteSoftmaxParamsEEPT_v>
 800bbc0:	4604      	mov	r4, r0
 800bbc2:	683b      	ldr	r3, [r7, #0]
 800bbc4:	681a      	ldr	r2, [r3, #0]
 800bbc6:	f107 030c 	add.w	r3, r7, #12
 800bbca:	4611      	mov	r1, r2
 800bbcc:	4618      	mov	r0, r3
 800bbce:	f7ff f8dc 	bl	800ad8a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 800bbd2:	f107 030c 	add.w	r3, r7, #12
 800bbd6:	461a      	mov	r2, r3
 800bbd8:	4621      	mov	r1, r4
 800bbda:	6878      	ldr	r0, [r7, #4]
 800bbdc:	f000 fb6a 	bl	800c2b4 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>
  }
 800bbe0:	6878      	ldr	r0, [r7, #4]
 800bbe2:	3714      	adds	r7, #20
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	bd90      	pop	{r4, r7, pc}

0800bbe8 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 800bbe8:	b590      	push	{r4, r7, lr}
 800bbea:	b085      	sub	sp, #20
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	f000 fb73 	bl	800c2de <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800bbf8:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d00c      	beq.n	800bc1c <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800bc02:	6878      	ldr	r0, [r7, #4]
 800bc04:	f000 fb78 	bl	800c2f8 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 800bc08:	4604      	mov	r4, r0
 800bc0a:	68f8      	ldr	r0, [r7, #12]
 800bc0c:	f000 fb81 	bl	800c312 <_ZSt4moveIRP19TfLiteSoftmaxParamsEONSt16remove_referenceIT_E4typeEOS4_>
 800bc10:	4603      	mov	r3, r0
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	4619      	mov	r1, r3
 800bc16:	4620      	mov	r0, r4
 800bc18:	f7ff f8c6 	bl	800ada8 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	2200      	movs	r2, #0
 800bc20:	601a      	str	r2, [r3, #0]
      }
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	4618      	mov	r0, r3
 800bc26:	3714      	adds	r7, #20
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	bd90      	pop	{r4, r7, pc}

0800bc2c <_ZStneI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	b082      	sub	sp, #8
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]
 800bc34:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 800bc36:	6878      	ldr	r0, [r7, #4]
 800bc38:	f000 fb8c 	bl	800c354 <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 800bc3c:	4603      	mov	r3, r0
 800bc3e:	4618      	mov	r0, r3
 800bc40:	3708      	adds	r7, #8
 800bc42:	46bd      	mov	sp, r7
 800bc44:	bd80      	pop	{r7, pc}

0800bc46 <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 800bc46:	b580      	push	{r7, lr}
 800bc48:	b082      	sub	sp, #8
 800bc4a:	af00      	add	r7, sp, #0
 800bc4c:	6078      	str	r0, [r7, #4]
	return get();
 800bc4e:	6878      	ldr	r0, [r7, #4]
 800bc50:	f000 fb91 	bl	800c376 <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800bc54:	4603      	mov	r3, r0
      }
 800bc56:	4618      	mov	r0, r3
 800bc58:	3708      	adds	r7, #8
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	bd80      	pop	{r7, pc}

0800bc5e <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 800bc5e:	b580      	push	{r7, lr}
 800bc60:	b084      	sub	sp, #16
 800bc62:	af00      	add	r7, sp, #0
 800bc64:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 800bc66:	6878      	ldr	r0, [r7, #4]
 800bc68:	f000 fb85 	bl	800c376 <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800bc6c:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	4618      	mov	r0, r3
 800bc72:	f000 fb34 	bl	800c2de <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800bc76:	4603      	mov	r3, r0
 800bc78:	2200      	movs	r2, #0
 800bc7a:	601a      	str	r2, [r3, #0]
	return __p;
 800bc7c:	68fb      	ldr	r3, [r7, #12]
      }
 800bc7e:	4618      	mov	r0, r3
 800bc80:	3710      	adds	r7, #16
 800bc82:	46bd      	mov	sp, r7
 800bc84:	bd80      	pop	{r7, pc}

0800bc86 <_ZN11flatbuffers12EndianScalarIlEET_S1_>:
template<typename T> T EndianScalar(T t) {
 800bc86:	b480      	push	{r7}
 800bc88:	b083      	sub	sp, #12
 800bc8a:	af00      	add	r7, sp, #0
 800bc8c:	6078      	str	r0, [r7, #4]
    return t;
 800bc8e:	687b      	ldr	r3, [r7, #4]
}
 800bc90:	4618      	mov	r0, r3
 800bc92:	370c      	adds	r7, #12
 800bc94:	46bd      	mov	sp, r7
 800bc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9a:	4770      	bx	lr

0800bc9c <_ZN11flatbuffers12EndianScalarItEET_S1_>:
template<typename T> T EndianScalar(T t) {
 800bc9c:	b480      	push	{r7}
 800bc9e:	b083      	sub	sp, #12
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	4603      	mov	r3, r0
 800bca4:	80fb      	strh	r3, [r7, #6]
    return t;
 800bca6:	88fb      	ldrh	r3, [r7, #6]
}
 800bca8:	4618      	mov	r0, r3
 800bcaa:	370c      	adds	r7, #12
 800bcac:	46bd      	mov	sp, r7
 800bcae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb2:	4770      	bx	lr

0800bcb4 <_ZN11flatbuffers12EndianScalarIhEET_S1_>:
template<typename T> T EndianScalar(T t) {
 800bcb4:	b480      	push	{r7}
 800bcb6:	b083      	sub	sp, #12
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	4603      	mov	r3, r0
 800bcbc:	71fb      	strb	r3, [r7, #7]
    return t;
 800bcbe:	79fb      	ldrb	r3, [r7, #7]
}
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	370c      	adds	r7, #12
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcca:	4770      	bx	lr

0800bccc <_ZN11flatbuffers5Table10GetPointerIPKvEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800bccc:	b580      	push	{r7, lr}
 800bcce:	b084      	sub	sp, #16
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	6078      	str	r0, [r7, #4]
 800bcd4:	460b      	mov	r3, r1
 800bcd6:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800bcd8:	887b      	ldrh	r3, [r7, #2]
 800bcda:	4619      	mov	r1, r3
 800bcdc:	6878      	ldr	r0, [r7, #4]
 800bcde:	f7fe fe6d 	bl	800a9bc <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800bce2:	4603      	mov	r3, r0
 800bce4:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800bce6:	687a      	ldr	r2, [r7, #4]
 800bce8:	89fb      	ldrh	r3, [r7, #14]
 800bcea:	4413      	add	r3, r2
 800bcec:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800bcee:	89fb      	ldrh	r3, [r7, #14]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d006      	beq.n	800bd02 <_ZN11flatbuffers5Table10GetPointerIPKvEET_t+0x36>
 800bcf4:	68b8      	ldr	r0, [r7, #8]
 800bcf6:	f7ff fc98 	bl	800b62a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800bcfa:	4602      	mov	r2, r0
 800bcfc:	68bb      	ldr	r3, [r7, #8]
 800bcfe:	4413      	add	r3, r2
                        : nullptr;
 800bd00:	e000      	b.n	800bd04 <_ZN11flatbuffers5Table10GetPointerIPKvEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800bd02:	2300      	movs	r3, #0
  }
 800bd04:	4618      	mov	r0, r3
 800bd06:	3710      	adds	r7, #16
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	bd80      	pop	{r7, pc}

0800bd0c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	b084      	sub	sp, #16
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	6078      	str	r0, [r7, #4]
 800bd14:	460b      	mov	r3, r1
 800bd16:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800bd18:	887b      	ldrh	r3, [r7, #2]
 800bd1a:	4619      	mov	r1, r3
 800bd1c:	6878      	ldr	r0, [r7, #4]
 800bd1e:	f7fe fe4d 	bl	800a9bc <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800bd22:	4603      	mov	r3, r0
 800bd24:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800bd26:	687a      	ldr	r2, [r7, #4]
 800bd28:	89fb      	ldrh	r3, [r7, #14]
 800bd2a:	4413      	add	r3, r2
 800bd2c:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800bd2e:	89fb      	ldrh	r3, [r7, #14]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d006      	beq.n	800bd42 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t+0x36>
 800bd34:	68b8      	ldr	r0, [r7, #8]
 800bd36:	f7ff fc78 	bl	800b62a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800bd3a:	4602      	mov	r2, r0
 800bd3c:	68bb      	ldr	r3, [r7, #8]
 800bd3e:	4413      	add	r3, r2
                        : nullptr;
 800bd40:	e000      	b.n	800bd44 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800bd42:	2300      	movs	r3, #0
  }
 800bd44:	4618      	mov	r0, r3
 800bd46:	3710      	adds	r7, #16
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	bd80      	pop	{r7, pc}

0800bd4c <_ZN11flatbuffers10ReadScalarIaEET_PKv>:
T ReadScalar(const void *p) {
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b082      	sub	sp, #8
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	f993 3000 	ldrsb.w	r3, [r3]
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	f000 fb18 	bl	800c390 <_ZN11flatbuffers12EndianScalarIaEET_S1_>
 800bd60:	4603      	mov	r3, r0
}
 800bd62:	4618      	mov	r0, r3
 800bd64:	3708      	adds	r7, #8
 800bd66:	46bd      	mov	sp, r7
 800bd68:	bd80      	pop	{r7, pc}

0800bd6a <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800bd6a:	b580      	push	{r7, lr}
 800bd6c:	b084      	sub	sp, #16
 800bd6e:	af00      	add	r7, sp, #0
 800bd70:	6078      	str	r0, [r7, #4]
 800bd72:	460b      	mov	r3, r1
 800bd74:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800bd76:	887b      	ldrh	r3, [r7, #2]
 800bd78:	4619      	mov	r1, r3
 800bd7a:	6878      	ldr	r0, [r7, #4]
 800bd7c:	f7fe fe1e 	bl	800a9bc <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800bd80:	4603      	mov	r3, r0
 800bd82:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800bd84:	687a      	ldr	r2, [r7, #4]
 800bd86:	89fb      	ldrh	r3, [r7, #14]
 800bd88:	4413      	add	r3, r2
 800bd8a:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800bd8c:	89fb      	ldrh	r3, [r7, #14]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d006      	beq.n	800bda0 <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t+0x36>
 800bd92:	68b8      	ldr	r0, [r7, #8]
 800bd94:	f7ff fc49 	bl	800b62a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800bd98:	4602      	mov	r2, r0
 800bd9a:	68bb      	ldr	r3, [r7, #8]
 800bd9c:	4413      	add	r3, r2
                        : nullptr;
 800bd9e:	e000      	b.n	800bda2 <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800bda0:	2300      	movs	r3, #0
  }
 800bda2:	4618      	mov	r0, r3
 800bda4:	3710      	adds	r7, #16
 800bda6:	46bd      	mov	sp, r7
 800bda8:	bd80      	pop	{r7, pc}

0800bdaa <_ZN11flatbuffers10ReadScalarIfEET_PKv>:
T ReadScalar(const void *p) {
 800bdaa:	b580      	push	{r7, lr}
 800bdac:	b082      	sub	sp, #8
 800bdae:	af00      	add	r7, sp, #0
 800bdb0:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	edd3 7a00 	vldr	s15, [r3]
 800bdb8:	eeb0 0a67 	vmov.f32	s0, s15
 800bdbc:	f000 faf5 	bl	800c3aa <_ZN11flatbuffers12EndianScalarIfEET_S1_>
 800bdc0:	eef0 7a40 	vmov.f32	s15, s0
}
 800bdc4:	eeb0 0a67 	vmov.f32	s0, s15
 800bdc8:	3708      	adds	r7, #8
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	bd80      	pop	{r7, pc}

0800bdce <_ZN11flatbuffers14IndirectHelperIlE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 800bdce:	b580      	push	{r7, lr}
 800bdd0:	b082      	sub	sp, #8
 800bdd2:	af00      	add	r7, sp, #0
 800bdd4:	6078      	str	r0, [r7, #4]
 800bdd6:	6039      	str	r1, [r7, #0]
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 800bdd8:	683b      	ldr	r3, [r7, #0]
 800bdda:	009b      	lsls	r3, r3, #2
 800bddc:	687a      	ldr	r2, [r7, #4]
 800bdde:	4413      	add	r3, r2
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	4618      	mov	r0, r3
 800bde4:	f7ff ff4f 	bl	800bc86 <_ZN11flatbuffers12EndianScalarIlEET_S1_>
 800bde8:	4603      	mov	r3, r0
  }
 800bdea:	4618      	mov	r0, r3
 800bdec:	3708      	adds	r7, #8
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	bd80      	pop	{r7, pc}

0800bdf2 <_ZNK11flatbuffers6VectorIlE4DataEv>:
  const uint8_t *Data() const {
 800bdf2:	b480      	push	{r7}
 800bdf4:	b083      	sub	sp, #12
 800bdf6:	af00      	add	r7, sp, #0
 800bdf8:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	3304      	adds	r3, #4
  }
 800bdfe:	4618      	mov	r0, r3
 800be00:	370c      	adds	r7, #12
 800be02:	46bd      	mov	sp, r7
 800be04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be08:	4770      	bx	lr

0800be0a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800be0a:	b480      	push	{r7}
 800be0c:	b083      	sub	sp, #12
 800be0e:	af00      	add	r7, sp, #0
 800be10:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	4618      	mov	r0, r3
 800be16:	370c      	adds	r7, #12
 800be18:	46bd      	mov	sp, r7
 800be1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1e:	4770      	bx	lr

0800be20 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI16TfLiteConvParamsEEPT_v>:
  // Allocate a structure, but make sure it is a POD structure that doesn't
  // require constructors to run. The reason we do this, is that Interpreter's C
  // extension part will take ownership so destructors  will not be run during
  // deallocation.
  template <typename T>
  T* AllocatePOD() {
 800be20:	b580      	push	{r7, lr}
 800be22:	b084      	sub	sp, #16
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]
    // TODO(b/154346074): Change this to is_trivially_destructible when all
    // platform targets support that properly.
    static_assert(std::is_pod<T>::value, "Builtin data structure must be POD.");
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	2204      	movs	r2, #4
 800be30:	2118      	movs	r1, #24
 800be32:	6878      	ldr	r0, [r7, #4]
 800be34:	4798      	blx	r3
 800be36:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T();
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	4619      	mov	r1, r3
 800be3c:	2018      	movs	r0, #24
 800be3e:	f7fe fd94 	bl	800a96a <_ZnwjPv>
 800be42:	4601      	mov	r1, r0
 800be44:	460a      	mov	r2, r1
 800be46:	2300      	movs	r3, #0
 800be48:	6013      	str	r3, [r2, #0]
 800be4a:	6053      	str	r3, [r2, #4]
 800be4c:	6093      	str	r3, [r2, #8]
 800be4e:	60d3      	str	r3, [r2, #12]
 800be50:	6113      	str	r3, [r2, #16]
 800be52:	6153      	str	r3, [r2, #20]
 800be54:	460b      	mov	r3, r1
  }
 800be56:	4618      	mov	r0, r3
 800be58:	3710      	adds	r7, #16
 800be5a:	46bd      	mov	sp, r7
 800be5c:	bd80      	pop	{r7, pc}

0800be5e <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>:
	unique_ptr(pointer __p,
 800be5e:	b590      	push	{r4, r7, lr}
 800be60:	b085      	sub	sp, #20
 800be62:	af00      	add	r7, sp, #0
 800be64:	60f8      	str	r0, [r7, #12]
 800be66:	60b9      	str	r1, [r7, #8]
 800be68:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::move(__d))
 800be6a:	68fc      	ldr	r4, [r7, #12]
 800be6c:	6878      	ldr	r0, [r7, #4]
 800be6e:	f000 faab 	bl	800c3c8 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 800be72:	4603      	mov	r3, r0
 800be74:	461a      	mov	r2, r3
 800be76:	68b9      	ldr	r1, [r7, #8]
 800be78:	4620      	mov	r0, r4
 800be7a:	f000 f82a 	bl	800bed2 <_ZNSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
	{ }
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	4618      	mov	r0, r3
 800be82:	3714      	adds	r7, #20
 800be84:	46bd      	mov	sp, r7
 800be86:	bd90      	pop	{r4, r7, pc}

0800be88 <_ZNSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800be88:	b580      	push	{r7, lr}
 800be8a:	b082      	sub	sp, #8
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	6078      	str	r0, [r7, #4]
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	4618      	mov	r0, r3
 800be94:	f000 faa3 	bl	800c3de <_ZSt3getILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800be98:	4603      	mov	r3, r0
 800be9a:	4618      	mov	r0, r3
 800be9c:	3708      	adds	r7, #8
 800be9e:	46bd      	mov	sp, r7
 800bea0:	bd80      	pop	{r7, pc}

0800bea2 <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 800bea2:	b580      	push	{r7, lr}
 800bea4:	b082      	sub	sp, #8
 800bea6:	af00      	add	r7, sp, #0
 800bea8:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	4618      	mov	r0, r3
 800beae:	f000 faa3 	bl	800c3f8 <_ZNSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 800beb2:	4603      	mov	r3, r0
 800beb4:	4618      	mov	r0, r3
 800beb6:	3708      	adds	r7, #8
 800beb8:	46bd      	mov	sp, r7
 800beba:	bd80      	pop	{r7, pc}

0800bebc <_ZSt4moveIRP16TfLiteConvParamsEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 800bebc:	b480      	push	{r7}
 800bebe:	b083      	sub	sp, #12
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	4618      	mov	r0, r3
 800bec8:	370c      	adds	r7, #12
 800beca:	46bd      	mov	sp, r7
 800becc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed0:	4770      	bx	lr

0800bed2 <_ZNSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 800bed2:	b590      	push	{r4, r7, lr}
 800bed4:	b085      	sub	sp, #20
 800bed6:	af00      	add	r7, sp, #0
 800bed8:	60f8      	str	r0, [r7, #12]
 800beda:	60b9      	str	r1, [r7, #8]
 800bedc:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800bede:	68fc      	ldr	r4, [r7, #12]
 800bee0:	6878      	ldr	r0, [r7, #4]
 800bee2:	f7ff ff92 	bl	800be0a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800bee6:	4602      	mov	r2, r0
 800bee8:	f107 0308 	add.w	r3, r7, #8
 800beec:	4619      	mov	r1, r3
 800beee:	4620      	mov	r0, r4
 800bef0:	f000 fa8f 	bl	800c412 <_ZNSt5tupleIJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	4618      	mov	r0, r3
 800bef8:	3714      	adds	r7, #20
 800befa:	46bd      	mov	sp, r7
 800befc:	bd90      	pop	{r4, r7, pc}

0800befe <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 800befe:	b580      	push	{r7, lr}
 800bf00:	b082      	sub	sp, #8
 800bf02:	af00      	add	r7, sp, #0
 800bf04:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 800bf06:	6878      	ldr	r0, [r7, #4]
 800bf08:	f000 f80a 	bl	800bf20 <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800bf0c:	4603      	mov	r3, r0
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	bf14      	ite	ne
 800bf12:	2301      	movne	r3, #1
 800bf14:	2300      	moveq	r3, #0
 800bf16:	b2db      	uxtb	r3, r3
 800bf18:	4618      	mov	r0, r3
 800bf1a:	3708      	adds	r7, #8
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	bd80      	pop	{r7, pc}

0800bf20 <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 800bf20:	b580      	push	{r7, lr}
 800bf22:	b082      	sub	sp, #8
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	f000 fa8a 	bl	800c444 <_ZNKSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800bf30:	4603      	mov	r3, r0
 800bf32:	4618      	mov	r0, r3
 800bf34:	3708      	adds	r7, #8
 800bf36:	46bd      	mov	sp, r7
 800bf38:	bd80      	pop	{r7, pc}

0800bf3a <_ZN6tflite20BuiltinDataAllocator11AllocatePODI25TfLiteDepthwiseConvParamsEEPT_v>:
  T* AllocatePOD() {
 800bf3a:	b580      	push	{r7, lr}
 800bf3c:	b084      	sub	sp, #16
 800bf3e:	af00      	add	r7, sp, #0
 800bf40:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	2204      	movs	r2, #4
 800bf4a:	211c      	movs	r1, #28
 800bf4c:	6878      	ldr	r0, [r7, #4]
 800bf4e:	4798      	blx	r3
 800bf50:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T();
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	4619      	mov	r1, r3
 800bf56:	201c      	movs	r0, #28
 800bf58:	f7fe fd07 	bl	800a96a <_ZnwjPv>
 800bf5c:	4601      	mov	r1, r0
 800bf5e:	460a      	mov	r2, r1
 800bf60:	2300      	movs	r3, #0
 800bf62:	6013      	str	r3, [r2, #0]
 800bf64:	6053      	str	r3, [r2, #4]
 800bf66:	6093      	str	r3, [r2, #8]
 800bf68:	60d3      	str	r3, [r2, #12]
 800bf6a:	6113      	str	r3, [r2, #16]
 800bf6c:	6153      	str	r3, [r2, #20]
 800bf6e:	6193      	str	r3, [r2, #24]
 800bf70:	460b      	mov	r3, r1
  }
 800bf72:	4618      	mov	r0, r3
 800bf74:	3710      	adds	r7, #16
 800bf76:	46bd      	mov	sp, r7
 800bf78:	bd80      	pop	{r7, pc}

0800bf7a <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>:
	unique_ptr(pointer __p,
 800bf7a:	b590      	push	{r4, r7, lr}
 800bf7c:	b085      	sub	sp, #20
 800bf7e:	af00      	add	r7, sp, #0
 800bf80:	60f8      	str	r0, [r7, #12]
 800bf82:	60b9      	str	r1, [r7, #8]
 800bf84:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::move(__d))
 800bf86:	68fc      	ldr	r4, [r7, #12]
 800bf88:	6878      	ldr	r0, [r7, #4]
 800bf8a:	f000 fa1d 	bl	800c3c8 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 800bf8e:	4603      	mov	r3, r0
 800bf90:	461a      	mov	r2, r3
 800bf92:	68b9      	ldr	r1, [r7, #8]
 800bf94:	4620      	mov	r0, r4
 800bf96:	f000 f82a 	bl	800bfee <_ZNSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
	{ }
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	3714      	adds	r7, #20
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	bd90      	pop	{r4, r7, pc}

0800bfa4 <_ZNSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b082      	sub	sp, #8
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	6078      	str	r0, [r7, #4]
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	4618      	mov	r0, r3
 800bfb0:	f000 fa56 	bl	800c460 <_ZSt3getILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800bfb4:	4603      	mov	r3, r0
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	3708      	adds	r7, #8
 800bfba:	46bd      	mov	sp, r7
 800bfbc:	bd80      	pop	{r7, pc}

0800bfbe <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 800bfbe:	b580      	push	{r7, lr}
 800bfc0:	b082      	sub	sp, #8
 800bfc2:	af00      	add	r7, sp, #0
 800bfc4:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	4618      	mov	r0, r3
 800bfca:	f000 fa56 	bl	800c47a <_ZNSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 800bfce:	4603      	mov	r3, r0
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	3708      	adds	r7, #8
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	bd80      	pop	{r7, pc}

0800bfd8 <_ZSt4moveIRP25TfLiteDepthwiseConvParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800bfd8:	b480      	push	{r7}
 800bfda:	b083      	sub	sp, #12
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	370c      	adds	r7, #12
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfec:	4770      	bx	lr

0800bfee <_ZNSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 800bfee:	b590      	push	{r4, r7, lr}
 800bff0:	b085      	sub	sp, #20
 800bff2:	af00      	add	r7, sp, #0
 800bff4:	60f8      	str	r0, [r7, #12]
 800bff6:	60b9      	str	r1, [r7, #8]
 800bff8:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800bffa:	68fc      	ldr	r4, [r7, #12]
 800bffc:	6878      	ldr	r0, [r7, #4]
 800bffe:	f7ff ff04 	bl	800be0a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800c002:	4602      	mov	r2, r0
 800c004:	f107 0308 	add.w	r3, r7, #8
 800c008:	4619      	mov	r1, r3
 800c00a:	4620      	mov	r0, r4
 800c00c:	f000 fa42 	bl	800c494 <_ZNSt5tupleIJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	4618      	mov	r0, r3
 800c014:	3714      	adds	r7, #20
 800c016:	46bd      	mov	sp, r7
 800c018:	bd90      	pop	{r4, r7, pc}

0800c01a <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 800c01a:	b580      	push	{r7, lr}
 800c01c:	b082      	sub	sp, #8
 800c01e:	af00      	add	r7, sp, #0
 800c020:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 800c022:	6878      	ldr	r0, [r7, #4]
 800c024:	f000 f80a 	bl	800c03c <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800c028:	4603      	mov	r3, r0
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	bf14      	ite	ne
 800c02e:	2301      	movne	r3, #1
 800c030:	2300      	moveq	r3, #0
 800c032:	b2db      	uxtb	r3, r3
 800c034:	4618      	mov	r0, r3
 800c036:	3708      	adds	r7, #8
 800c038:	46bd      	mov	sp, r7
 800c03a:	bd80      	pop	{r7, pc}

0800c03c <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 800c03c:	b580      	push	{r7, lr}
 800c03e:	b082      	sub	sp, #8
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	4618      	mov	r0, r3
 800c048:	f000 fa3d 	bl	800c4c6 <_ZNKSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800c04c:	4603      	mov	r3, r0
 800c04e:	4618      	mov	r0, r3
 800c050:	3708      	adds	r7, #8
 800c052:	46bd      	mov	sp, r7
 800c054:	bd80      	pop	{r7, pc}

0800c056 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI16TfLitePoolParamsEEPT_v>:
  T* AllocatePOD() {
 800c056:	b590      	push	{r4, r7, lr}
 800c058:	b085      	sub	sp, #20
 800c05a:	af00      	add	r7, sp, #0
 800c05c:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	2204      	movs	r2, #4
 800c066:	2128      	movs	r1, #40	; 0x28
 800c068:	6878      	ldr	r0, [r7, #4]
 800c06a:	4798      	blx	r3
 800c06c:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T();
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	4619      	mov	r1, r3
 800c072:	2028      	movs	r0, #40	; 0x28
 800c074:	f7fe fc79 	bl	800a96a <_ZnwjPv>
 800c078:	4604      	mov	r4, r0
 800c07a:	4620      	mov	r0, r4
 800c07c:	2328      	movs	r3, #40	; 0x28
 800c07e:	461a      	mov	r2, r3
 800c080:	2100      	movs	r1, #0
 800c082:	f01a fedb 	bl	8026e3c <memset>
 800c086:	4623      	mov	r3, r4
  }
 800c088:	4618      	mov	r0, r3
 800c08a:	3714      	adds	r7, #20
 800c08c:	46bd      	mov	sp, r7
 800c08e:	bd90      	pop	{r4, r7, pc}

0800c090 <_ZNSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>:
	unique_ptr(pointer __p,
 800c090:	b590      	push	{r4, r7, lr}
 800c092:	b085      	sub	sp, #20
 800c094:	af00      	add	r7, sp, #0
 800c096:	60f8      	str	r0, [r7, #12]
 800c098:	60b9      	str	r1, [r7, #8]
 800c09a:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::move(__d))
 800c09c:	68fc      	ldr	r4, [r7, #12]
 800c09e:	6878      	ldr	r0, [r7, #4]
 800c0a0:	f000 f992 	bl	800c3c8 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 800c0a4:	4603      	mov	r3, r0
 800c0a6:	461a      	mov	r2, r3
 800c0a8:	68b9      	ldr	r1, [r7, #8]
 800c0aa:	4620      	mov	r0, r4
 800c0ac:	f000 f82a 	bl	800c104 <_ZNSt15__uniq_ptr_implI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
	{ }
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	3714      	adds	r7, #20
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	bd90      	pop	{r4, r7, pc}

0800c0ba <_ZNSt15__uniq_ptr_implI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800c0ba:	b580      	push	{r7, lr}
 800c0bc:	b082      	sub	sp, #8
 800c0be:	af00      	add	r7, sp, #0
 800c0c0:	6078      	str	r0, [r7, #4]
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	f000 fa0c 	bl	800c4e2 <_ZSt3getILj0EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800c0ca:	4603      	mov	r3, r0
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	3708      	adds	r7, #8
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	bd80      	pop	{r7, pc}

0800c0d4 <_ZNSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b082      	sub	sp, #8
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	4618      	mov	r0, r3
 800c0e0:	f000 fa0c 	bl	800c4fc <_ZNSt15__uniq_ptr_implI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 800c0e4:	4603      	mov	r3, r0
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	3708      	adds	r7, #8
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	bd80      	pop	{r7, pc}

0800c0ee <_ZSt4moveIRP16TfLitePoolParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800c0ee:	b480      	push	{r7}
 800c0f0:	b083      	sub	sp, #12
 800c0f2:	af00      	add	r7, sp, #0
 800c0f4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	370c      	adds	r7, #12
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c102:	4770      	bx	lr

0800c104 <_ZNSt15__uniq_ptr_implI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 800c104:	b590      	push	{r4, r7, lr}
 800c106:	b085      	sub	sp, #20
 800c108:	af00      	add	r7, sp, #0
 800c10a:	60f8      	str	r0, [r7, #12]
 800c10c:	60b9      	str	r1, [r7, #8]
 800c10e:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800c110:	68fc      	ldr	r4, [r7, #12]
 800c112:	6878      	ldr	r0, [r7, #4]
 800c114:	f7ff fe79 	bl	800be0a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800c118:	4602      	mov	r2, r0
 800c11a:	f107 0308 	add.w	r3, r7, #8
 800c11e:	4619      	mov	r1, r3
 800c120:	4620      	mov	r0, r4
 800c122:	f000 f9f8 	bl	800c516 <_ZNSt5tupleIJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	4618      	mov	r0, r3
 800c12a:	3714      	adds	r7, #20
 800c12c:	46bd      	mov	sp, r7
 800c12e:	bd90      	pop	{r4, r7, pc}

0800c130 <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 800c130:	b580      	push	{r7, lr}
 800c132:	b082      	sub	sp, #8
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 800c138:	6878      	ldr	r0, [r7, #4]
 800c13a:	f000 f80a 	bl	800c152 <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800c13e:	4603      	mov	r3, r0
 800c140:	2b00      	cmp	r3, #0
 800c142:	bf14      	ite	ne
 800c144:	2301      	movne	r3, #1
 800c146:	2300      	moveq	r3, #0
 800c148:	b2db      	uxtb	r3, r3
 800c14a:	4618      	mov	r0, r3
 800c14c:	3708      	adds	r7, #8
 800c14e:	46bd      	mov	sp, r7
 800c150:	bd80      	pop	{r7, pc}

0800c152 <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 800c152:	b580      	push	{r7, lr}
 800c154:	b082      	sub	sp, #8
 800c156:	af00      	add	r7, sp, #0
 800c158:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	4618      	mov	r0, r3
 800c15e:	f000 f9f3 	bl	800c548 <_ZNKSt15__uniq_ptr_implI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800c162:	4603      	mov	r3, r0
 800c164:	4618      	mov	r0, r3
 800c166:	3708      	adds	r7, #8
 800c168:	46bd      	mov	sp, r7
 800c16a:	bd80      	pop	{r7, pc}

0800c16c <_ZN6tflite20BuiltinDataAllocator11AllocatePODI19TfLiteReshapeParamsEEPT_v>:
  T* AllocatePOD() {
 800c16c:	b590      	push	{r4, r7, lr}
 800c16e:	b085      	sub	sp, #20
 800c170:	af00      	add	r7, sp, #0
 800c172:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	2204      	movs	r2, #4
 800c17c:	2124      	movs	r1, #36	; 0x24
 800c17e:	6878      	ldr	r0, [r7, #4]
 800c180:	4798      	blx	r3
 800c182:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T();
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	4619      	mov	r1, r3
 800c188:	2024      	movs	r0, #36	; 0x24
 800c18a:	f7fe fbee 	bl	800a96a <_ZnwjPv>
 800c18e:	4604      	mov	r4, r0
 800c190:	4620      	mov	r0, r4
 800c192:	2324      	movs	r3, #36	; 0x24
 800c194:	461a      	mov	r2, r3
 800c196:	2100      	movs	r1, #0
 800c198:	f01a fe50 	bl	8026e3c <memset>
 800c19c:	4623      	mov	r3, r4
  }
 800c19e:	4618      	mov	r0, r3
 800c1a0:	3714      	adds	r7, #20
 800c1a2:	46bd      	mov	sp, r7
 800c1a4:	bd90      	pop	{r4, r7, pc}

0800c1a6 <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>:
	unique_ptr(pointer __p,
 800c1a6:	b590      	push	{r4, r7, lr}
 800c1a8:	b085      	sub	sp, #20
 800c1aa:	af00      	add	r7, sp, #0
 800c1ac:	60f8      	str	r0, [r7, #12]
 800c1ae:	60b9      	str	r1, [r7, #8]
 800c1b0:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::move(__d))
 800c1b2:	68fc      	ldr	r4, [r7, #12]
 800c1b4:	6878      	ldr	r0, [r7, #4]
 800c1b6:	f000 f907 	bl	800c3c8 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 800c1ba:	4603      	mov	r3, r0
 800c1bc:	461a      	mov	r2, r3
 800c1be:	68b9      	ldr	r1, [r7, #8]
 800c1c0:	4620      	mov	r0, r4
 800c1c2:	f000 f82a 	bl	800c21a <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
	{ }
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	3714      	adds	r7, #20
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	bd90      	pop	{r4, r7, pc}

0800c1d0 <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	b082      	sub	sp, #8
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	4618      	mov	r0, r3
 800c1dc:	f000 f9c2 	bl	800c564 <_ZSt3getILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800c1e0:	4603      	mov	r3, r0
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	3708      	adds	r7, #8
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	bd80      	pop	{r7, pc}

0800c1ea <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 800c1ea:	b580      	push	{r7, lr}
 800c1ec:	b082      	sub	sp, #8
 800c1ee:	af00      	add	r7, sp, #0
 800c1f0:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	f000 f9c2 	bl	800c57e <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 800c1fa:	4603      	mov	r3, r0
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	3708      	adds	r7, #8
 800c200:	46bd      	mov	sp, r7
 800c202:	bd80      	pop	{r7, pc}

0800c204 <_ZSt4moveIRP19TfLiteReshapeParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800c204:	b480      	push	{r7}
 800c206:	b083      	sub	sp, #12
 800c208:	af00      	add	r7, sp, #0
 800c20a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	4618      	mov	r0, r3
 800c210:	370c      	adds	r7, #12
 800c212:	46bd      	mov	sp, r7
 800c214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c218:	4770      	bx	lr

0800c21a <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 800c21a:	b590      	push	{r4, r7, lr}
 800c21c:	b085      	sub	sp, #20
 800c21e:	af00      	add	r7, sp, #0
 800c220:	60f8      	str	r0, [r7, #12]
 800c222:	60b9      	str	r1, [r7, #8]
 800c224:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800c226:	68fc      	ldr	r4, [r7, #12]
 800c228:	6878      	ldr	r0, [r7, #4]
 800c22a:	f7ff fdee 	bl	800be0a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800c22e:	4602      	mov	r2, r0
 800c230:	f107 0308 	add.w	r3, r7, #8
 800c234:	4619      	mov	r1, r3
 800c236:	4620      	mov	r0, r4
 800c238:	f000 f9ae 	bl	800c598 <_ZNSt5tupleIJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	4618      	mov	r0, r3
 800c240:	3714      	adds	r7, #20
 800c242:	46bd      	mov	sp, r7
 800c244:	bd90      	pop	{r4, r7, pc}

0800c246 <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 800c246:	b580      	push	{r7, lr}
 800c248:	b082      	sub	sp, #8
 800c24a:	af00      	add	r7, sp, #0
 800c24c:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 800c24e:	6878      	ldr	r0, [r7, #4]
 800c250:	f000 f80a 	bl	800c268 <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800c254:	4603      	mov	r3, r0
 800c256:	2b00      	cmp	r3, #0
 800c258:	bf14      	ite	ne
 800c25a:	2301      	movne	r3, #1
 800c25c:	2300      	moveq	r3, #0
 800c25e:	b2db      	uxtb	r3, r3
 800c260:	4618      	mov	r0, r3
 800c262:	3708      	adds	r7, #8
 800c264:	46bd      	mov	sp, r7
 800c266:	bd80      	pop	{r7, pc}

0800c268 <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 800c268:	b580      	push	{r7, lr}
 800c26a:	b082      	sub	sp, #8
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	4618      	mov	r0, r3
 800c274:	f000 f9a9 	bl	800c5ca <_ZNKSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800c278:	4603      	mov	r3, r0
 800c27a:	4618      	mov	r0, r3
 800c27c:	3708      	adds	r7, #8
 800c27e:	46bd      	mov	sp, r7
 800c280:	bd80      	pop	{r7, pc}

0800c282 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI19TfLiteSoftmaxParamsEEPT_v>:
  T* AllocatePOD() {
 800c282:	b580      	push	{r7, lr}
 800c284:	b084      	sub	sp, #16
 800c286:	af00      	add	r7, sp, #0
 800c288:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	2204      	movs	r2, #4
 800c292:	2104      	movs	r1, #4
 800c294:	6878      	ldr	r0, [r7, #4]
 800c296:	4798      	blx	r3
 800c298:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T();
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	4619      	mov	r1, r3
 800c29e:	2004      	movs	r0, #4
 800c2a0:	f7fe fb63 	bl	800a96a <_ZnwjPv>
 800c2a4:	4603      	mov	r3, r0
 800c2a6:	f04f 0200 	mov.w	r2, #0
 800c2aa:	601a      	str	r2, [r3, #0]
  }
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	3710      	adds	r7, #16
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	bd80      	pop	{r7, pc}

0800c2b4 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>:
	unique_ptr(pointer __p,
 800c2b4:	b590      	push	{r4, r7, lr}
 800c2b6:	b085      	sub	sp, #20
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	60f8      	str	r0, [r7, #12]
 800c2bc:	60b9      	str	r1, [r7, #8]
 800c2be:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::move(__d))
 800c2c0:	68fc      	ldr	r4, [r7, #12]
 800c2c2:	6878      	ldr	r0, [r7, #4]
 800c2c4:	f000 f880 	bl	800c3c8 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 800c2c8:	4603      	mov	r3, r0
 800c2ca:	461a      	mov	r2, r3
 800c2cc:	68b9      	ldr	r1, [r7, #8]
 800c2ce:	4620      	mov	r0, r4
 800c2d0:	f000 f82a 	bl	800c328 <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
	{ }
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	3714      	adds	r7, #20
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	bd90      	pop	{r4, r7, pc}

0800c2de <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800c2de:	b580      	push	{r7, lr}
 800c2e0:	b082      	sub	sp, #8
 800c2e2:	af00      	add	r7, sp, #0
 800c2e4:	6078      	str	r0, [r7, #4]
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	f000 f97c 	bl	800c5e6 <_ZSt3getILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800c2ee:	4603      	mov	r3, r0
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	3708      	adds	r7, #8
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	bd80      	pop	{r7, pc}

0800c2f8 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 800c2f8:	b580      	push	{r7, lr}
 800c2fa:	b082      	sub	sp, #8
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	4618      	mov	r0, r3
 800c304:	f000 f97c 	bl	800c600 <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 800c308:	4603      	mov	r3, r0
 800c30a:	4618      	mov	r0, r3
 800c30c:	3708      	adds	r7, #8
 800c30e:	46bd      	mov	sp, r7
 800c310:	bd80      	pop	{r7, pc}

0800c312 <_ZSt4moveIRP19TfLiteSoftmaxParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800c312:	b480      	push	{r7}
 800c314:	b083      	sub	sp, #12
 800c316:	af00      	add	r7, sp, #0
 800c318:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	4618      	mov	r0, r3
 800c31e:	370c      	adds	r7, #12
 800c320:	46bd      	mov	sp, r7
 800c322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c326:	4770      	bx	lr

0800c328 <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 800c328:	b590      	push	{r4, r7, lr}
 800c32a:	b085      	sub	sp, #20
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	60f8      	str	r0, [r7, #12]
 800c330:	60b9      	str	r1, [r7, #8]
 800c332:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800c334:	68fc      	ldr	r4, [r7, #12]
 800c336:	6878      	ldr	r0, [r7, #4]
 800c338:	f7ff fd67 	bl	800be0a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800c33c:	4602      	mov	r2, r0
 800c33e:	f107 0308 	add.w	r3, r7, #8
 800c342:	4619      	mov	r1, r3
 800c344:	4620      	mov	r0, r4
 800c346:	f000 f968 	bl	800c61a <_ZNSt5tupleIJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	4618      	mov	r0, r3
 800c34e:	3714      	adds	r7, #20
 800c350:	46bd      	mov	sp, r7
 800c352:	bd90      	pop	{r4, r7, pc}

0800c354 <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 800c354:	b580      	push	{r7, lr}
 800c356:	b082      	sub	sp, #8
 800c358:	af00      	add	r7, sp, #0
 800c35a:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 800c35c:	6878      	ldr	r0, [r7, #4]
 800c35e:	f000 f80a 	bl	800c376 <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800c362:	4603      	mov	r3, r0
 800c364:	2b00      	cmp	r3, #0
 800c366:	bf14      	ite	ne
 800c368:	2301      	movne	r3, #1
 800c36a:	2300      	moveq	r3, #0
 800c36c:	b2db      	uxtb	r3, r3
 800c36e:	4618      	mov	r0, r3
 800c370:	3708      	adds	r7, #8
 800c372:	46bd      	mov	sp, r7
 800c374:	bd80      	pop	{r7, pc}

0800c376 <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 800c376:	b580      	push	{r7, lr}
 800c378:	b082      	sub	sp, #8
 800c37a:	af00      	add	r7, sp, #0
 800c37c:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	4618      	mov	r0, r3
 800c382:	f000 f963 	bl	800c64c <_ZNKSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800c386:	4603      	mov	r3, r0
 800c388:	4618      	mov	r0, r3
 800c38a:	3708      	adds	r7, #8
 800c38c:	46bd      	mov	sp, r7
 800c38e:	bd80      	pop	{r7, pc}

0800c390 <_ZN11flatbuffers12EndianScalarIaEET_S1_>:
template<typename T> T EndianScalar(T t) {
 800c390:	b480      	push	{r7}
 800c392:	b083      	sub	sp, #12
 800c394:	af00      	add	r7, sp, #0
 800c396:	4603      	mov	r3, r0
 800c398:	71fb      	strb	r3, [r7, #7]
    return t;
 800c39a:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800c39e:	4618      	mov	r0, r3
 800c3a0:	370c      	adds	r7, #12
 800c3a2:	46bd      	mov	sp, r7
 800c3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a8:	4770      	bx	lr

0800c3aa <_ZN11flatbuffers12EndianScalarIfEET_S1_>:
template<typename T> T EndianScalar(T t) {
 800c3aa:	b480      	push	{r7}
 800c3ac:	b083      	sub	sp, #12
 800c3ae:	af00      	add	r7, sp, #0
 800c3b0:	ed87 0a01 	vstr	s0, [r7, #4]
    return t;
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	ee07 3a90 	vmov	s15, r3
}
 800c3ba:	eeb0 0a67 	vmov.f32	s0, s15
 800c3be:	370c      	adds	r7, #12
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c6:	4770      	bx	lr

0800c3c8 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 800c3c8:	b480      	push	{r7}
 800c3ca:	b083      	sub	sp, #12
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	370c      	adds	r7, #12
 800c3d6:	46bd      	mov	sp, r7
 800c3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3dc:	4770      	bx	lr

0800c3de <_ZSt3getILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }

  /// Return a reference to the ith element of a tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 800c3de:	b580      	push	{r7, lr}
 800c3e0:	b082      	sub	sp, #8
 800c3e2:	af00      	add	r7, sp, #0
 800c3e4:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	f000 f93d 	bl	800c668 <_ZSt12__get_helperILj0EP16TfLiteConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 800c3ee:	4603      	mov	r3, r0
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	3708      	adds	r7, #8
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	bd80      	pop	{r7, pc}

0800c3f8 <_ZNSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b082      	sub	sp, #8
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	6078      	str	r0, [r7, #4]
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	4618      	mov	r0, r3
 800c404:	f000 f93c 	bl	800c680 <_ZSt3getILj1EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800c408:	4603      	mov	r3, r0
 800c40a:	4618      	mov	r0, r3
 800c40c:	3708      	adds	r7, #8
 800c40e:	46bd      	mov	sp, r7
 800c410:	bd80      	pop	{r7, pc}

0800c412 <_ZNSt5tupleIJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 800c412:	b5b0      	push	{r4, r5, r7, lr}
 800c414:	b084      	sub	sp, #16
 800c416:	af00      	add	r7, sp, #0
 800c418:	60f8      	str	r0, [r7, #12]
 800c41a:	60b9      	str	r1, [r7, #8]
 800c41c:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 800c41e:	68fc      	ldr	r4, [r7, #12]
 800c420:	68b8      	ldr	r0, [r7, #8]
 800c422:	f000 f93a 	bl	800c69a <_ZSt7forwardIRP16TfLiteConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800c426:	4605      	mov	r5, r0
 800c428:	6878      	ldr	r0, [r7, #4]
 800c42a:	f7ff fcee 	bl	800be0a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800c42e:	4603      	mov	r3, r0
 800c430:	461a      	mov	r2, r3
 800c432:	4629      	mov	r1, r5
 800c434:	4620      	mov	r0, r4
 800c436:	f000 f93b 	bl	800c6b0 <_ZNSt11_Tuple_implILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	4618      	mov	r0, r3
 800c43e:	3710      	adds	r7, #16
 800c440:	46bd      	mov	sp, r7
 800c442:	bdb0      	pop	{r4, r5, r7, pc}

0800c444 <_ZNKSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 800c444:	b580      	push	{r7, lr}
 800c446:	b082      	sub	sp, #8
 800c448:	af00      	add	r7, sp, #0
 800c44a:	6078      	str	r0, [r7, #4]
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	4618      	mov	r0, r3
 800c450:	f000 f94c 	bl	800c6ec <_ZSt3getILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 800c454:	4603      	mov	r3, r0
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	4618      	mov	r0, r3
 800c45a:	3708      	adds	r7, #8
 800c45c:	46bd      	mov	sp, r7
 800c45e:	bd80      	pop	{r7, pc}

0800c460 <_ZSt3getILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 800c460:	b580      	push	{r7, lr}
 800c462:	b082      	sub	sp, #8
 800c464:	af00      	add	r7, sp, #0
 800c466:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	4618      	mov	r0, r3
 800c46c:	f000 f94b 	bl	800c706 <_ZSt12__get_helperILj0EP25TfLiteDepthwiseConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 800c470:	4603      	mov	r3, r0
 800c472:	4618      	mov	r0, r3
 800c474:	3708      	adds	r7, #8
 800c476:	46bd      	mov	sp, r7
 800c478:	bd80      	pop	{r7, pc}

0800c47a <_ZNSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 800c47a:	b580      	push	{r7, lr}
 800c47c:	b082      	sub	sp, #8
 800c47e:	af00      	add	r7, sp, #0
 800c480:	6078      	str	r0, [r7, #4]
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	4618      	mov	r0, r3
 800c486:	f000 f94a 	bl	800c71e <_ZSt3getILj1EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800c48a:	4603      	mov	r3, r0
 800c48c:	4618      	mov	r0, r3
 800c48e:	3708      	adds	r7, #8
 800c490:	46bd      	mov	sp, r7
 800c492:	bd80      	pop	{r7, pc}

0800c494 <_ZNSt5tupleIJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 800c494:	b5b0      	push	{r4, r5, r7, lr}
 800c496:	b084      	sub	sp, #16
 800c498:	af00      	add	r7, sp, #0
 800c49a:	60f8      	str	r0, [r7, #12]
 800c49c:	60b9      	str	r1, [r7, #8]
 800c49e:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 800c4a0:	68fc      	ldr	r4, [r7, #12]
 800c4a2:	68b8      	ldr	r0, [r7, #8]
 800c4a4:	f000 f948 	bl	800c738 <_ZSt7forwardIRP25TfLiteDepthwiseConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800c4a8:	4605      	mov	r5, r0
 800c4aa:	6878      	ldr	r0, [r7, #4]
 800c4ac:	f7ff fcad 	bl	800be0a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800c4b0:	4603      	mov	r3, r0
 800c4b2:	461a      	mov	r2, r3
 800c4b4:	4629      	mov	r1, r5
 800c4b6:	4620      	mov	r0, r4
 800c4b8:	f000 f949 	bl	800c74e <_ZNSt11_Tuple_implILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	4618      	mov	r0, r3
 800c4c0:	3710      	adds	r7, #16
 800c4c2:	46bd      	mov	sp, r7
 800c4c4:	bdb0      	pop	{r4, r5, r7, pc}

0800c4c6 <_ZNKSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 800c4c6:	b580      	push	{r7, lr}
 800c4c8:	b082      	sub	sp, #8
 800c4ca:	af00      	add	r7, sp, #0
 800c4cc:	6078      	str	r0, [r7, #4]
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	f000 f95a 	bl	800c78a <_ZSt3getILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 800c4d6:	4603      	mov	r3, r0
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	4618      	mov	r0, r3
 800c4dc:	3708      	adds	r7, #8
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	bd80      	pop	{r7, pc}

0800c4e2 <_ZSt3getILj0EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 800c4e2:	b580      	push	{r7, lr}
 800c4e4:	b082      	sub	sp, #8
 800c4e6:	af00      	add	r7, sp, #0
 800c4e8:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	4618      	mov	r0, r3
 800c4ee:	f000 f959 	bl	800c7a4 <_ZSt12__get_helperILj0EP16TfLitePoolParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 800c4f2:	4603      	mov	r3, r0
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	3708      	adds	r7, #8
 800c4f8:	46bd      	mov	sp, r7
 800c4fa:	bd80      	pop	{r7, pc}

0800c4fc <_ZNSt15__uniq_ptr_implI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	b082      	sub	sp, #8
 800c500:	af00      	add	r7, sp, #0
 800c502:	6078      	str	r0, [r7, #4]
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	4618      	mov	r0, r3
 800c508:	f000 f958 	bl	800c7bc <_ZSt3getILj1EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800c50c:	4603      	mov	r3, r0
 800c50e:	4618      	mov	r0, r3
 800c510:	3708      	adds	r7, #8
 800c512:	46bd      	mov	sp, r7
 800c514:	bd80      	pop	{r7, pc}

0800c516 <_ZNSt5tupleIJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 800c516:	b5b0      	push	{r4, r5, r7, lr}
 800c518:	b084      	sub	sp, #16
 800c51a:	af00      	add	r7, sp, #0
 800c51c:	60f8      	str	r0, [r7, #12]
 800c51e:	60b9      	str	r1, [r7, #8]
 800c520:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 800c522:	68fc      	ldr	r4, [r7, #12]
 800c524:	68b8      	ldr	r0, [r7, #8]
 800c526:	f000 f956 	bl	800c7d6 <_ZSt7forwardIRP16TfLitePoolParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800c52a:	4605      	mov	r5, r0
 800c52c:	6878      	ldr	r0, [r7, #4]
 800c52e:	f7ff fc6c 	bl	800be0a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800c532:	4603      	mov	r3, r0
 800c534:	461a      	mov	r2, r3
 800c536:	4629      	mov	r1, r5
 800c538:	4620      	mov	r0, r4
 800c53a:	f000 f957 	bl	800c7ec <_ZNSt11_Tuple_implILj0EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	4618      	mov	r0, r3
 800c542:	3710      	adds	r7, #16
 800c544:	46bd      	mov	sp, r7
 800c546:	bdb0      	pop	{r4, r5, r7, pc}

0800c548 <_ZNKSt15__uniq_ptr_implI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 800c548:	b580      	push	{r7, lr}
 800c54a:	b082      	sub	sp, #8
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	6078      	str	r0, [r7, #4]
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	4618      	mov	r0, r3
 800c554:	f000 f968 	bl	800c828 <_ZSt3getILj0EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 800c558:	4603      	mov	r3, r0
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	4618      	mov	r0, r3
 800c55e:	3708      	adds	r7, #8
 800c560:	46bd      	mov	sp, r7
 800c562:	bd80      	pop	{r7, pc}

0800c564 <_ZSt3getILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 800c564:	b580      	push	{r7, lr}
 800c566:	b082      	sub	sp, #8
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	4618      	mov	r0, r3
 800c570:	f000 f967 	bl	800c842 <_ZSt12__get_helperILj0EP19TfLiteReshapeParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 800c574:	4603      	mov	r3, r0
 800c576:	4618      	mov	r0, r3
 800c578:	3708      	adds	r7, #8
 800c57a:	46bd      	mov	sp, r7
 800c57c:	bd80      	pop	{r7, pc}

0800c57e <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 800c57e:	b580      	push	{r7, lr}
 800c580:	b082      	sub	sp, #8
 800c582:	af00      	add	r7, sp, #0
 800c584:	6078      	str	r0, [r7, #4]
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	4618      	mov	r0, r3
 800c58a:	f000 f966 	bl	800c85a <_ZSt3getILj1EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800c58e:	4603      	mov	r3, r0
 800c590:	4618      	mov	r0, r3
 800c592:	3708      	adds	r7, #8
 800c594:	46bd      	mov	sp, r7
 800c596:	bd80      	pop	{r7, pc}

0800c598 <_ZNSt5tupleIJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 800c598:	b5b0      	push	{r4, r5, r7, lr}
 800c59a:	b084      	sub	sp, #16
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	60f8      	str	r0, [r7, #12]
 800c5a0:	60b9      	str	r1, [r7, #8]
 800c5a2:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 800c5a4:	68fc      	ldr	r4, [r7, #12]
 800c5a6:	68b8      	ldr	r0, [r7, #8]
 800c5a8:	f000 f964 	bl	800c874 <_ZSt7forwardIRP19TfLiteReshapeParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800c5ac:	4605      	mov	r5, r0
 800c5ae:	6878      	ldr	r0, [r7, #4]
 800c5b0:	f7ff fc2b 	bl	800be0a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800c5b4:	4603      	mov	r3, r0
 800c5b6:	461a      	mov	r2, r3
 800c5b8:	4629      	mov	r1, r5
 800c5ba:	4620      	mov	r0, r4
 800c5bc:	f000 f965 	bl	800c88a <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	3710      	adds	r7, #16
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	bdb0      	pop	{r4, r5, r7, pc}

0800c5ca <_ZNKSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 800c5ca:	b580      	push	{r7, lr}
 800c5cc:	b082      	sub	sp, #8
 800c5ce:	af00      	add	r7, sp, #0
 800c5d0:	6078      	str	r0, [r7, #4]
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	f000 f976 	bl	800c8c6 <_ZSt3getILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 800c5da:	4603      	mov	r3, r0
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	4618      	mov	r0, r3
 800c5e0:	3708      	adds	r7, #8
 800c5e2:	46bd      	mov	sp, r7
 800c5e4:	bd80      	pop	{r7, pc}

0800c5e6 <_ZSt3getILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 800c5e6:	b580      	push	{r7, lr}
 800c5e8:	b082      	sub	sp, #8
 800c5ea:	af00      	add	r7, sp, #0
 800c5ec:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	f000 f975 	bl	800c8e0 <_ZSt12__get_helperILj0EP19TfLiteSoftmaxParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 800c5f6:	4603      	mov	r3, r0
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	3708      	adds	r7, #8
 800c5fc:	46bd      	mov	sp, r7
 800c5fe:	bd80      	pop	{r7, pc}

0800c600 <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 800c600:	b580      	push	{r7, lr}
 800c602:	b082      	sub	sp, #8
 800c604:	af00      	add	r7, sp, #0
 800c606:	6078      	str	r0, [r7, #4]
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	4618      	mov	r0, r3
 800c60c:	f000 f974 	bl	800c8f8 <_ZSt3getILj1EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800c610:	4603      	mov	r3, r0
 800c612:	4618      	mov	r0, r3
 800c614:	3708      	adds	r7, #8
 800c616:	46bd      	mov	sp, r7
 800c618:	bd80      	pop	{r7, pc}

0800c61a <_ZNSt5tupleIJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 800c61a:	b5b0      	push	{r4, r5, r7, lr}
 800c61c:	b084      	sub	sp, #16
 800c61e:	af00      	add	r7, sp, #0
 800c620:	60f8      	str	r0, [r7, #12]
 800c622:	60b9      	str	r1, [r7, #8]
 800c624:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 800c626:	68fc      	ldr	r4, [r7, #12]
 800c628:	68b8      	ldr	r0, [r7, #8]
 800c62a:	f000 f972 	bl	800c912 <_ZSt7forwardIRP19TfLiteSoftmaxParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800c62e:	4605      	mov	r5, r0
 800c630:	6878      	ldr	r0, [r7, #4]
 800c632:	f7ff fbea 	bl	800be0a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800c636:	4603      	mov	r3, r0
 800c638:	461a      	mov	r2, r3
 800c63a:	4629      	mov	r1, r5
 800c63c:	4620      	mov	r0, r4
 800c63e:	f000 f973 	bl	800c928 <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	4618      	mov	r0, r3
 800c646:	3710      	adds	r7, #16
 800c648:	46bd      	mov	sp, r7
 800c64a:	bdb0      	pop	{r4, r5, r7, pc}

0800c64c <_ZNKSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b082      	sub	sp, #8
 800c650:	af00      	add	r7, sp, #0
 800c652:	6078      	str	r0, [r7, #4]
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	4618      	mov	r0, r3
 800c658:	f000 f984 	bl	800c964 <_ZSt3getILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 800c65c:	4603      	mov	r3, r0
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	4618      	mov	r0, r3
 800c662:	3708      	adds	r7, #8
 800c664:	46bd      	mov	sp, r7
 800c666:	bd80      	pop	{r7, pc}

0800c668 <_ZSt12__get_helperILj0EP16TfLiteConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800c668:	b580      	push	{r7, lr}
 800c66a:	b082      	sub	sp, #8
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800c670:	6878      	ldr	r0, [r7, #4]
 800c672:	f000 f9a3 	bl	800c9bc <_ZNSt11_Tuple_implILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 800c676:	4603      	mov	r3, r0
 800c678:	4618      	mov	r0, r3
 800c67a:	3708      	adds	r7, #8
 800c67c:	46bd      	mov	sp, r7
 800c67e:	bd80      	pop	{r7, pc}

0800c680 <_ZSt3getILj1EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 800c680:	b580      	push	{r7, lr}
 800c682:	b082      	sub	sp, #8
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	4618      	mov	r0, r3
 800c68c:	f000 f977 	bl	800c97e <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800c690:	4603      	mov	r3, r0
 800c692:	4618      	mov	r0, r3
 800c694:	3708      	adds	r7, #8
 800c696:	46bd      	mov	sp, r7
 800c698:	bd80      	pop	{r7, pc}

0800c69a <_ZSt7forwardIRP16TfLiteConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c69a:	b480      	push	{r7}
 800c69c:	b083      	sub	sp, #12
 800c69e:	af00      	add	r7, sp, #0
 800c6a0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	370c      	adds	r7, #12
 800c6a8:	46bd      	mov	sp, r7
 800c6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ae:	4770      	bx	lr

0800c6b0 <_ZNSt11_Tuple_implILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 800c6b0:	b590      	push	{r4, r7, lr}
 800c6b2:	b085      	sub	sp, #20
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	60f8      	str	r0, [r7, #12]
 800c6b8:	60b9      	str	r1, [r7, #8]
 800c6ba:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 800c6bc:	68fc      	ldr	r4, [r7, #12]
 800c6be:	6878      	ldr	r0, [r7, #4]
 800c6c0:	f7ff fba3 	bl	800be0a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800c6c4:	4603      	mov	r3, r0
 800c6c6:	4619      	mov	r1, r3
 800c6c8:	4620      	mov	r0, r4
 800c6ca:	f000 f964 	bl	800c996 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	1d1c      	adds	r4, r3, #4
 800c6d2:	68b8      	ldr	r0, [r7, #8]
 800c6d4:	f7ff ffe1 	bl	800c69a <_ZSt7forwardIRP16TfLiteConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800c6d8:	4603      	mov	r3, r0
 800c6da:	4619      	mov	r1, r3
 800c6dc:	4620      	mov	r0, r4
 800c6de:	f000 f97b 	bl	800c9d8 <_ZNSt10_Head_baseILj0EP16TfLiteConvParamsLb0EEC1IRS1_EEOT_>
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	4618      	mov	r0, r3
 800c6e6:	3714      	adds	r7, #20
 800c6e8:	46bd      	mov	sp, r7
 800c6ea:	bd90      	pop	{r4, r7, pc}

0800c6ec <_ZSt3getILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:

  /// Return a const reference to the ith element of a const tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	b082      	sub	sp, #8
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	f000 f97f 	bl	800c9fa <_ZSt12__get_helperILj0EP16TfLiteConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 800c6fc:	4603      	mov	r3, r0
 800c6fe:	4618      	mov	r0, r3
 800c700:	3708      	adds	r7, #8
 800c702:	46bd      	mov	sp, r7
 800c704:	bd80      	pop	{r7, pc}

0800c706 <_ZSt12__get_helperILj0EP25TfLiteDepthwiseConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800c706:	b580      	push	{r7, lr}
 800c708:	b082      	sub	sp, #8
 800c70a:	af00      	add	r7, sp, #0
 800c70c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800c70e:	6878      	ldr	r0, [r7, #4]
 800c710:	f000 f97f 	bl	800ca12 <_ZNSt11_Tuple_implILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 800c714:	4603      	mov	r3, r0
 800c716:	4618      	mov	r0, r3
 800c718:	3708      	adds	r7, #8
 800c71a:	46bd      	mov	sp, r7
 800c71c:	bd80      	pop	{r7, pc}

0800c71e <_ZSt3getILj1EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 800c71e:	b580      	push	{r7, lr}
 800c720:	b082      	sub	sp, #8
 800c722:	af00      	add	r7, sp, #0
 800c724:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	4618      	mov	r0, r3
 800c72a:	f000 f928 	bl	800c97e <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800c72e:	4603      	mov	r3, r0
 800c730:	4618      	mov	r0, r3
 800c732:	3708      	adds	r7, #8
 800c734:	46bd      	mov	sp, r7
 800c736:	bd80      	pop	{r7, pc}

0800c738 <_ZSt7forwardIRP25TfLiteDepthwiseConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c738:	b480      	push	{r7}
 800c73a:	b083      	sub	sp, #12
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	4618      	mov	r0, r3
 800c744:	370c      	adds	r7, #12
 800c746:	46bd      	mov	sp, r7
 800c748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c74c:	4770      	bx	lr

0800c74e <_ZNSt11_Tuple_implILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 800c74e:	b590      	push	{r4, r7, lr}
 800c750:	b085      	sub	sp, #20
 800c752:	af00      	add	r7, sp, #0
 800c754:	60f8      	str	r0, [r7, #12]
 800c756:	60b9      	str	r1, [r7, #8]
 800c758:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 800c75a:	68fc      	ldr	r4, [r7, #12]
 800c75c:	6878      	ldr	r0, [r7, #4]
 800c75e:	f7ff fb54 	bl	800be0a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800c762:	4603      	mov	r3, r0
 800c764:	4619      	mov	r1, r3
 800c766:	4620      	mov	r0, r4
 800c768:	f000 f915 	bl	800c996 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	1d1c      	adds	r4, r3, #4
 800c770:	68b8      	ldr	r0, [r7, #8]
 800c772:	f7ff ffe1 	bl	800c738 <_ZSt7forwardIRP25TfLiteDepthwiseConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800c776:	4603      	mov	r3, r0
 800c778:	4619      	mov	r1, r3
 800c77a:	4620      	mov	r0, r4
 800c77c:	f000 f957 	bl	800ca2e <_ZNSt10_Head_baseILj0EP25TfLiteDepthwiseConvParamsLb0EEC1IRS1_EEOT_>
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	4618      	mov	r0, r3
 800c784:	3714      	adds	r7, #20
 800c786:	46bd      	mov	sp, r7
 800c788:	bd90      	pop	{r4, r7, pc}

0800c78a <_ZSt3getILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 800c78a:	b580      	push	{r7, lr}
 800c78c:	b082      	sub	sp, #8
 800c78e:	af00      	add	r7, sp, #0
 800c790:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	4618      	mov	r0, r3
 800c796:	f000 f95b 	bl	800ca50 <_ZSt12__get_helperILj0EP25TfLiteDepthwiseConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 800c79a:	4603      	mov	r3, r0
 800c79c:	4618      	mov	r0, r3
 800c79e:	3708      	adds	r7, #8
 800c7a0:	46bd      	mov	sp, r7
 800c7a2:	bd80      	pop	{r7, pc}

0800c7a4 <_ZSt12__get_helperILj0EP16TfLitePoolParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800c7a4:	b580      	push	{r7, lr}
 800c7a6:	b082      	sub	sp, #8
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800c7ac:	6878      	ldr	r0, [r7, #4]
 800c7ae:	f000 f95b 	bl	800ca68 <_ZNSt11_Tuple_implILj0EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 800c7b2:	4603      	mov	r3, r0
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	3708      	adds	r7, #8
 800c7b8:	46bd      	mov	sp, r7
 800c7ba:	bd80      	pop	{r7, pc}

0800c7bc <_ZSt3getILj1EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 800c7bc:	b580      	push	{r7, lr}
 800c7be:	b082      	sub	sp, #8
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	f000 f8d9 	bl	800c97e <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800c7cc:	4603      	mov	r3, r0
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	3708      	adds	r7, #8
 800c7d2:	46bd      	mov	sp, r7
 800c7d4:	bd80      	pop	{r7, pc}

0800c7d6 <_ZSt7forwardIRP16TfLitePoolParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c7d6:	b480      	push	{r7}
 800c7d8:	b083      	sub	sp, #12
 800c7da:	af00      	add	r7, sp, #0
 800c7dc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	370c      	adds	r7, #12
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ea:	4770      	bx	lr

0800c7ec <_ZNSt11_Tuple_implILj0EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 800c7ec:	b590      	push	{r4, r7, lr}
 800c7ee:	b085      	sub	sp, #20
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	60f8      	str	r0, [r7, #12]
 800c7f4:	60b9      	str	r1, [r7, #8]
 800c7f6:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 800c7f8:	68fc      	ldr	r4, [r7, #12]
 800c7fa:	6878      	ldr	r0, [r7, #4]
 800c7fc:	f7ff fb05 	bl	800be0a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800c800:	4603      	mov	r3, r0
 800c802:	4619      	mov	r1, r3
 800c804:	4620      	mov	r0, r4
 800c806:	f000 f8c6 	bl	800c996 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	1d1c      	adds	r4, r3, #4
 800c80e:	68b8      	ldr	r0, [r7, #8]
 800c810:	f7ff ffe1 	bl	800c7d6 <_ZSt7forwardIRP16TfLitePoolParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800c814:	4603      	mov	r3, r0
 800c816:	4619      	mov	r1, r3
 800c818:	4620      	mov	r0, r4
 800c81a:	f000 f933 	bl	800ca84 <_ZNSt10_Head_baseILj0EP16TfLitePoolParamsLb0EEC1IRS1_EEOT_>
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	4618      	mov	r0, r3
 800c822:	3714      	adds	r7, #20
 800c824:	46bd      	mov	sp, r7
 800c826:	bd90      	pop	{r4, r7, pc}

0800c828 <_ZSt3getILj0EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 800c828:	b580      	push	{r7, lr}
 800c82a:	b082      	sub	sp, #8
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	4618      	mov	r0, r3
 800c834:	f000 f937 	bl	800caa6 <_ZSt12__get_helperILj0EP16TfLitePoolParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 800c838:	4603      	mov	r3, r0
 800c83a:	4618      	mov	r0, r3
 800c83c:	3708      	adds	r7, #8
 800c83e:	46bd      	mov	sp, r7
 800c840:	bd80      	pop	{r7, pc}

0800c842 <_ZSt12__get_helperILj0EP19TfLiteReshapeParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800c842:	b580      	push	{r7, lr}
 800c844:	b082      	sub	sp, #8
 800c846:	af00      	add	r7, sp, #0
 800c848:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800c84a:	6878      	ldr	r0, [r7, #4]
 800c84c:	f000 f937 	bl	800cabe <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 800c850:	4603      	mov	r3, r0
 800c852:	4618      	mov	r0, r3
 800c854:	3708      	adds	r7, #8
 800c856:	46bd      	mov	sp, r7
 800c858:	bd80      	pop	{r7, pc}

0800c85a <_ZSt3getILj1EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 800c85a:	b580      	push	{r7, lr}
 800c85c:	b082      	sub	sp, #8
 800c85e:	af00      	add	r7, sp, #0
 800c860:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	4618      	mov	r0, r3
 800c866:	f000 f88a 	bl	800c97e <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800c86a:	4603      	mov	r3, r0
 800c86c:	4618      	mov	r0, r3
 800c86e:	3708      	adds	r7, #8
 800c870:	46bd      	mov	sp, r7
 800c872:	bd80      	pop	{r7, pc}

0800c874 <_ZSt7forwardIRP19TfLiteReshapeParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c874:	b480      	push	{r7}
 800c876:	b083      	sub	sp, #12
 800c878:	af00      	add	r7, sp, #0
 800c87a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	4618      	mov	r0, r3
 800c880:	370c      	adds	r7, #12
 800c882:	46bd      	mov	sp, r7
 800c884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c888:	4770      	bx	lr

0800c88a <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 800c88a:	b590      	push	{r4, r7, lr}
 800c88c:	b085      	sub	sp, #20
 800c88e:	af00      	add	r7, sp, #0
 800c890:	60f8      	str	r0, [r7, #12]
 800c892:	60b9      	str	r1, [r7, #8]
 800c894:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 800c896:	68fc      	ldr	r4, [r7, #12]
 800c898:	6878      	ldr	r0, [r7, #4]
 800c89a:	f7ff fab6 	bl	800be0a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800c89e:	4603      	mov	r3, r0
 800c8a0:	4619      	mov	r1, r3
 800c8a2:	4620      	mov	r0, r4
 800c8a4:	f000 f877 	bl	800c996 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	1d1c      	adds	r4, r3, #4
 800c8ac:	68b8      	ldr	r0, [r7, #8]
 800c8ae:	f7ff ffe1 	bl	800c874 <_ZSt7forwardIRP19TfLiteReshapeParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800c8b2:	4603      	mov	r3, r0
 800c8b4:	4619      	mov	r1, r3
 800c8b6:	4620      	mov	r0, r4
 800c8b8:	f000 f90f 	bl	800cada <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EEC1IRS1_EEOT_>
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	4618      	mov	r0, r3
 800c8c0:	3714      	adds	r7, #20
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	bd90      	pop	{r4, r7, pc}

0800c8c6 <_ZSt3getILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 800c8c6:	b580      	push	{r7, lr}
 800c8c8:	b082      	sub	sp, #8
 800c8ca:	af00      	add	r7, sp, #0
 800c8cc:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	4618      	mov	r0, r3
 800c8d2:	f000 f913 	bl	800cafc <_ZSt12__get_helperILj0EP19TfLiteReshapeParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 800c8d6:	4603      	mov	r3, r0
 800c8d8:	4618      	mov	r0, r3
 800c8da:	3708      	adds	r7, #8
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	bd80      	pop	{r7, pc}

0800c8e0 <_ZSt12__get_helperILj0EP19TfLiteSoftmaxParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800c8e0:	b580      	push	{r7, lr}
 800c8e2:	b082      	sub	sp, #8
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800c8e8:	6878      	ldr	r0, [r7, #4]
 800c8ea:	f000 f913 	bl	800cb14 <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 800c8ee:	4603      	mov	r3, r0
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	3708      	adds	r7, #8
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	bd80      	pop	{r7, pc}

0800c8f8 <_ZSt3getILj1EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b082      	sub	sp, #8
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	4618      	mov	r0, r3
 800c904:	f000 f83b 	bl	800c97e <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800c908:	4603      	mov	r3, r0
 800c90a:	4618      	mov	r0, r3
 800c90c:	3708      	adds	r7, #8
 800c90e:	46bd      	mov	sp, r7
 800c910:	bd80      	pop	{r7, pc}

0800c912 <_ZSt7forwardIRP19TfLiteSoftmaxParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c912:	b480      	push	{r7}
 800c914:	b083      	sub	sp, #12
 800c916:	af00      	add	r7, sp, #0
 800c918:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	4618      	mov	r0, r3
 800c91e:	370c      	adds	r7, #12
 800c920:	46bd      	mov	sp, r7
 800c922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c926:	4770      	bx	lr

0800c928 <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 800c928:	b590      	push	{r4, r7, lr}
 800c92a:	b085      	sub	sp, #20
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	60f8      	str	r0, [r7, #12]
 800c930:	60b9      	str	r1, [r7, #8]
 800c932:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 800c934:	68fc      	ldr	r4, [r7, #12]
 800c936:	6878      	ldr	r0, [r7, #4]
 800c938:	f7ff fa67 	bl	800be0a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800c93c:	4603      	mov	r3, r0
 800c93e:	4619      	mov	r1, r3
 800c940:	4620      	mov	r0, r4
 800c942:	f000 f828 	bl	800c996 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	1d1c      	adds	r4, r3, #4
 800c94a:	68b8      	ldr	r0, [r7, #8]
 800c94c:	f7ff ffe1 	bl	800c912 <_ZSt7forwardIRP19TfLiteSoftmaxParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800c950:	4603      	mov	r3, r0
 800c952:	4619      	mov	r1, r3
 800c954:	4620      	mov	r0, r4
 800c956:	f000 f8eb 	bl	800cb30 <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EEC1IRS1_EEOT_>
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	4618      	mov	r0, r3
 800c95e:	3714      	adds	r7, #20
 800c960:	46bd      	mov	sp, r7
 800c962:	bd90      	pop	{r4, r7, pc}

0800c964 <_ZSt3getILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 800c964:	b580      	push	{r7, lr}
 800c966:	b082      	sub	sp, #8
 800c968:	af00      	add	r7, sp, #0
 800c96a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	4618      	mov	r0, r3
 800c970:	f000 f8ef 	bl	800cb52 <_ZSt12__get_helperILj0EP19TfLiteSoftmaxParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 800c974:	4603      	mov	r3, r0
 800c976:	4618      	mov	r0, r3
 800c978:	3708      	adds	r7, #8
 800c97a:	46bd      	mov	sp, r7
 800c97c:	bd80      	pop	{r7, pc}

0800c97e <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800c97e:	b580      	push	{r7, lr}
 800c980:	b082      	sub	sp, #8
 800c982:	af00      	add	r7, sp, #0
 800c984:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800c986:	6878      	ldr	r0, [r7, #4]
 800c988:	f000 f8ef 	bl	800cb6a <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS4_>
 800c98c:	4603      	mov	r3, r0
 800c98e:	4618      	mov	r0, r3
 800c990:	3708      	adds	r7, #8
 800c992:	46bd      	mov	sp, r7
 800c994:	bd80      	pop	{r7, pc}

0800c996 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>:
        constexpr _Tuple_impl(_UHead&& __head)
 800c996:	b590      	push	{r4, r7, lr}
 800c998:	b083      	sub	sp, #12
 800c99a:	af00      	add	r7, sp, #0
 800c99c:	6078      	str	r0, [r7, #4]
 800c99e:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head)) { }
 800c9a0:	687c      	ldr	r4, [r7, #4]
 800c9a2:	6838      	ldr	r0, [r7, #0]
 800c9a4:	f7ff fa31 	bl	800be0a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800c9a8:	4603      	mov	r3, r0
 800c9aa:	4619      	mov	r1, r3
 800c9ac:	4620      	mov	r0, r4
 800c9ae:	f000 f8e9 	bl	800cb84 <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EEC2IS3_EEOT_>
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	370c      	adds	r7, #12
 800c9b8:	46bd      	mov	sp, r7
 800c9ba:	bd90      	pop	{r4, r7, pc}

0800c9bc <_ZNSt11_Tuple_implILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800c9bc:	b580      	push	{r7, lr}
 800c9be:	b082      	sub	sp, #8
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	6078      	str	r0, [r7, #4]
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	3304      	adds	r3, #4
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	f000 f8ec 	bl	800cba6 <_ZNSt10_Head_baseILj0EP16TfLiteConvParamsLb0EE7_M_headERS2_>
 800c9ce:	4603      	mov	r3, r0
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	3708      	adds	r7, #8
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	bd80      	pop	{r7, pc}

0800c9d8 <_ZNSt10_Head_baseILj0EP16TfLiteConvParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 800c9d8:	b580      	push	{r7, lr}
 800c9da:	b082      	sub	sp, #8
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	6078      	str	r0, [r7, #4]
 800c9e0:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800c9e2:	6838      	ldr	r0, [r7, #0]
 800c9e4:	f7ff fe59 	bl	800c69a <_ZSt7forwardIRP16TfLiteConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800c9e8:	4603      	mov	r3, r0
 800c9ea:	681a      	ldr	r2, [r3, #0]
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	601a      	str	r2, [r3, #0]
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	4618      	mov	r0, r3
 800c9f4:	3708      	adds	r7, #8
 800c9f6:	46bd      	mov	sp, r7
 800c9f8:	bd80      	pop	{r7, pc}

0800c9fa <_ZSt12__get_helperILj0EP16TfLiteConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800c9fa:	b580      	push	{r7, lr}
 800c9fc:	b082      	sub	sp, #8
 800c9fe:	af00      	add	r7, sp, #0
 800ca00:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800ca02:	6878      	ldr	r0, [r7, #4]
 800ca04:	f000 f8da 	bl	800cbbc <_ZNSt11_Tuple_implILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 800ca08:	4603      	mov	r3, r0
 800ca0a:	4618      	mov	r0, r3
 800ca0c:	3708      	adds	r7, #8
 800ca0e:	46bd      	mov	sp, r7
 800ca10:	bd80      	pop	{r7, pc}

0800ca12 <_ZNSt11_Tuple_implILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800ca12:	b580      	push	{r7, lr}
 800ca14:	b082      	sub	sp, #8
 800ca16:	af00      	add	r7, sp, #0
 800ca18:	6078      	str	r0, [r7, #4]
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	3304      	adds	r3, #4
 800ca1e:	4618      	mov	r0, r3
 800ca20:	f000 f8da 	bl	800cbd8 <_ZNSt10_Head_baseILj0EP25TfLiteDepthwiseConvParamsLb0EE7_M_headERS2_>
 800ca24:	4603      	mov	r3, r0
 800ca26:	4618      	mov	r0, r3
 800ca28:	3708      	adds	r7, #8
 800ca2a:	46bd      	mov	sp, r7
 800ca2c:	bd80      	pop	{r7, pc}

0800ca2e <_ZNSt10_Head_baseILj0EP25TfLiteDepthwiseConvParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 800ca2e:	b580      	push	{r7, lr}
 800ca30:	b082      	sub	sp, #8
 800ca32:	af00      	add	r7, sp, #0
 800ca34:	6078      	str	r0, [r7, #4]
 800ca36:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800ca38:	6838      	ldr	r0, [r7, #0]
 800ca3a:	f7ff fe7d 	bl	800c738 <_ZSt7forwardIRP25TfLiteDepthwiseConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800ca3e:	4603      	mov	r3, r0
 800ca40:	681a      	ldr	r2, [r3, #0]
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	601a      	str	r2, [r3, #0]
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	4618      	mov	r0, r3
 800ca4a:	3708      	adds	r7, #8
 800ca4c:	46bd      	mov	sp, r7
 800ca4e:	bd80      	pop	{r7, pc}

0800ca50 <_ZSt12__get_helperILj0EP25TfLiteDepthwiseConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800ca50:	b580      	push	{r7, lr}
 800ca52:	b082      	sub	sp, #8
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800ca58:	6878      	ldr	r0, [r7, #4]
 800ca5a:	f000 f8c8 	bl	800cbee <_ZNSt11_Tuple_implILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 800ca5e:	4603      	mov	r3, r0
 800ca60:	4618      	mov	r0, r3
 800ca62:	3708      	adds	r7, #8
 800ca64:	46bd      	mov	sp, r7
 800ca66:	bd80      	pop	{r7, pc}

0800ca68 <_ZNSt11_Tuple_implILj0EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	b082      	sub	sp, #8
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	6078      	str	r0, [r7, #4]
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	3304      	adds	r3, #4
 800ca74:	4618      	mov	r0, r3
 800ca76:	f000 f8c8 	bl	800cc0a <_ZNSt10_Head_baseILj0EP16TfLitePoolParamsLb0EE7_M_headERS2_>
 800ca7a:	4603      	mov	r3, r0
 800ca7c:	4618      	mov	r0, r3
 800ca7e:	3708      	adds	r7, #8
 800ca80:	46bd      	mov	sp, r7
 800ca82:	bd80      	pop	{r7, pc}

0800ca84 <_ZNSt10_Head_baseILj0EP16TfLitePoolParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b082      	sub	sp, #8
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	6078      	str	r0, [r7, #4]
 800ca8c:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800ca8e:	6838      	ldr	r0, [r7, #0]
 800ca90:	f7ff fea1 	bl	800c7d6 <_ZSt7forwardIRP16TfLitePoolParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800ca94:	4603      	mov	r3, r0
 800ca96:	681a      	ldr	r2, [r3, #0]
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	601a      	str	r2, [r3, #0]
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	4618      	mov	r0, r3
 800caa0:	3708      	adds	r7, #8
 800caa2:	46bd      	mov	sp, r7
 800caa4:	bd80      	pop	{r7, pc}

0800caa6 <_ZSt12__get_helperILj0EP16TfLitePoolParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800caa6:	b580      	push	{r7, lr}
 800caa8:	b082      	sub	sp, #8
 800caaa:	af00      	add	r7, sp, #0
 800caac:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800caae:	6878      	ldr	r0, [r7, #4]
 800cab0:	f000 f8b6 	bl	800cc20 <_ZNSt11_Tuple_implILj0EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 800cab4:	4603      	mov	r3, r0
 800cab6:	4618      	mov	r0, r3
 800cab8:	3708      	adds	r7, #8
 800caba:	46bd      	mov	sp, r7
 800cabc:	bd80      	pop	{r7, pc}

0800cabe <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800cabe:	b580      	push	{r7, lr}
 800cac0:	b082      	sub	sp, #8
 800cac2:	af00      	add	r7, sp, #0
 800cac4:	6078      	str	r0, [r7, #4]
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	3304      	adds	r3, #4
 800caca:	4618      	mov	r0, r3
 800cacc:	f000 f8b6 	bl	800cc3c <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EE7_M_headERS2_>
 800cad0:	4603      	mov	r3, r0
 800cad2:	4618      	mov	r0, r3
 800cad4:	3708      	adds	r7, #8
 800cad6:	46bd      	mov	sp, r7
 800cad8:	bd80      	pop	{r7, pc}

0800cada <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 800cada:	b580      	push	{r7, lr}
 800cadc:	b082      	sub	sp, #8
 800cade:	af00      	add	r7, sp, #0
 800cae0:	6078      	str	r0, [r7, #4]
 800cae2:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800cae4:	6838      	ldr	r0, [r7, #0]
 800cae6:	f7ff fec5 	bl	800c874 <_ZSt7forwardIRP19TfLiteReshapeParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800caea:	4603      	mov	r3, r0
 800caec:	681a      	ldr	r2, [r3, #0]
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	601a      	str	r2, [r3, #0]
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	4618      	mov	r0, r3
 800caf6:	3708      	adds	r7, #8
 800caf8:	46bd      	mov	sp, r7
 800cafa:	bd80      	pop	{r7, pc}

0800cafc <_ZSt12__get_helperILj0EP19TfLiteReshapeParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800cafc:	b580      	push	{r7, lr}
 800cafe:	b082      	sub	sp, #8
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800cb04:	6878      	ldr	r0, [r7, #4]
 800cb06:	f000 f8a4 	bl	800cc52 <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 800cb0a:	4603      	mov	r3, r0
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	3708      	adds	r7, #8
 800cb10:	46bd      	mov	sp, r7
 800cb12:	bd80      	pop	{r7, pc}

0800cb14 <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800cb14:	b580      	push	{r7, lr}
 800cb16:	b082      	sub	sp, #8
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	6078      	str	r0, [r7, #4]
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	3304      	adds	r3, #4
 800cb20:	4618      	mov	r0, r3
 800cb22:	f000 f8a4 	bl	800cc6e <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EE7_M_headERS2_>
 800cb26:	4603      	mov	r3, r0
 800cb28:	4618      	mov	r0, r3
 800cb2a:	3708      	adds	r7, #8
 800cb2c:	46bd      	mov	sp, r7
 800cb2e:	bd80      	pop	{r7, pc}

0800cb30 <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 800cb30:	b580      	push	{r7, lr}
 800cb32:	b082      	sub	sp, #8
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	6078      	str	r0, [r7, #4]
 800cb38:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800cb3a:	6838      	ldr	r0, [r7, #0]
 800cb3c:	f7ff fee9 	bl	800c912 <_ZSt7forwardIRP19TfLiteSoftmaxParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800cb40:	4603      	mov	r3, r0
 800cb42:	681a      	ldr	r2, [r3, #0]
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	601a      	str	r2, [r3, #0]
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	3708      	adds	r7, #8
 800cb4e:	46bd      	mov	sp, r7
 800cb50:	bd80      	pop	{r7, pc}

0800cb52 <_ZSt12__get_helperILj0EP19TfLiteSoftmaxParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800cb52:	b580      	push	{r7, lr}
 800cb54:	b082      	sub	sp, #8
 800cb56:	af00      	add	r7, sp, #0
 800cb58:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800cb5a:	6878      	ldr	r0, [r7, #4]
 800cb5c:	f000 f892 	bl	800cc84 <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 800cb60:	4603      	mov	r3, r0
 800cb62:	4618      	mov	r0, r3
 800cb64:	3708      	adds	r7, #8
 800cb66:	46bd      	mov	sp, r7
 800cb68:	bd80      	pop	{r7, pc}

0800cb6a <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800cb6a:	b580      	push	{r7, lr}
 800cb6c:	b082      	sub	sp, #8
 800cb6e:	af00      	add	r7, sp, #0
 800cb70:	6078      	str	r0, [r7, #4]
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	4618      	mov	r0, r3
 800cb76:	f000 f893 	bl	800cca0 <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EE7_M_headERS4_>
 800cb7a:	4603      	mov	r3, r0
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	3708      	adds	r7, #8
 800cb80:	46bd      	mov	sp, r7
 800cb82:	bd80      	pop	{r7, pc}

0800cb84 <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EEC2IS3_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 800cb84:	b580      	push	{r7, lr}
 800cb86:	b082      	sub	sp, #8
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	6078      	str	r0, [r7, #4]
 800cb8c:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800cb8e:	6838      	ldr	r0, [r7, #0]
 800cb90:	f7ff f93b 	bl	800be0a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800cb94:	4602      	mov	r2, r0
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	6812      	ldr	r2, [r2, #0]
 800cb9a:	601a      	str	r2, [r3, #0]
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	4618      	mov	r0, r3
 800cba0:	3708      	adds	r7, #8
 800cba2:	46bd      	mov	sp, r7
 800cba4:	bd80      	pop	{r7, pc}

0800cba6 <_ZNSt10_Head_baseILj0EP16TfLiteConvParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800cba6:	b480      	push	{r7}
 800cba8:	b083      	sub	sp, #12
 800cbaa:	af00      	add	r7, sp, #0
 800cbac:	6078      	str	r0, [r7, #4]
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	370c      	adds	r7, #12
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbba:	4770      	bx	lr

0800cbbc <_ZNSt11_Tuple_implILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b082      	sub	sp, #8
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	3304      	adds	r3, #4
 800cbc8:	4618      	mov	r0, r3
 800cbca:	f000 f874 	bl	800ccb6 <_ZNSt10_Head_baseILj0EP16TfLiteConvParamsLb0EE7_M_headERKS2_>
 800cbce:	4603      	mov	r3, r0
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	3708      	adds	r7, #8
 800cbd4:	46bd      	mov	sp, r7
 800cbd6:	bd80      	pop	{r7, pc}

0800cbd8 <_ZNSt10_Head_baseILj0EP25TfLiteDepthwiseConvParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800cbd8:	b480      	push	{r7}
 800cbda:	b083      	sub	sp, #12
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	6078      	str	r0, [r7, #4]
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	370c      	adds	r7, #12
 800cbe6:	46bd      	mov	sp, r7
 800cbe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbec:	4770      	bx	lr

0800cbee <_ZNSt11_Tuple_implILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800cbee:	b580      	push	{r7, lr}
 800cbf0:	b082      	sub	sp, #8
 800cbf2:	af00      	add	r7, sp, #0
 800cbf4:	6078      	str	r0, [r7, #4]
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	3304      	adds	r3, #4
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	f000 f866 	bl	800cccc <_ZNSt10_Head_baseILj0EP25TfLiteDepthwiseConvParamsLb0EE7_M_headERKS2_>
 800cc00:	4603      	mov	r3, r0
 800cc02:	4618      	mov	r0, r3
 800cc04:	3708      	adds	r7, #8
 800cc06:	46bd      	mov	sp, r7
 800cc08:	bd80      	pop	{r7, pc}

0800cc0a <_ZNSt10_Head_baseILj0EP16TfLitePoolParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800cc0a:	b480      	push	{r7}
 800cc0c:	b083      	sub	sp, #12
 800cc0e:	af00      	add	r7, sp, #0
 800cc10:	6078      	str	r0, [r7, #4]
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	4618      	mov	r0, r3
 800cc16:	370c      	adds	r7, #12
 800cc18:	46bd      	mov	sp, r7
 800cc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc1e:	4770      	bx	lr

0800cc20 <_ZNSt11_Tuple_implILj0EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800cc20:	b580      	push	{r7, lr}
 800cc22:	b082      	sub	sp, #8
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	6078      	str	r0, [r7, #4]
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	3304      	adds	r3, #4
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	f000 f858 	bl	800cce2 <_ZNSt10_Head_baseILj0EP16TfLitePoolParamsLb0EE7_M_headERKS2_>
 800cc32:	4603      	mov	r3, r0
 800cc34:	4618      	mov	r0, r3
 800cc36:	3708      	adds	r7, #8
 800cc38:	46bd      	mov	sp, r7
 800cc3a:	bd80      	pop	{r7, pc}

0800cc3c <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800cc3c:	b480      	push	{r7}
 800cc3e:	b083      	sub	sp, #12
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	6078      	str	r0, [r7, #4]
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	4618      	mov	r0, r3
 800cc48:	370c      	adds	r7, #12
 800cc4a:	46bd      	mov	sp, r7
 800cc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc50:	4770      	bx	lr

0800cc52 <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800cc52:	b580      	push	{r7, lr}
 800cc54:	b082      	sub	sp, #8
 800cc56:	af00      	add	r7, sp, #0
 800cc58:	6078      	str	r0, [r7, #4]
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	3304      	adds	r3, #4
 800cc5e:	4618      	mov	r0, r3
 800cc60:	f000 f84a 	bl	800ccf8 <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EE7_M_headERKS2_>
 800cc64:	4603      	mov	r3, r0
 800cc66:	4618      	mov	r0, r3
 800cc68:	3708      	adds	r7, #8
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	bd80      	pop	{r7, pc}

0800cc6e <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800cc6e:	b480      	push	{r7}
 800cc70:	b083      	sub	sp, #12
 800cc72:	af00      	add	r7, sp, #0
 800cc74:	6078      	str	r0, [r7, #4]
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	4618      	mov	r0, r3
 800cc7a:	370c      	adds	r7, #12
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc82:	4770      	bx	lr

0800cc84 <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800cc84:	b580      	push	{r7, lr}
 800cc86:	b082      	sub	sp, #8
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	6078      	str	r0, [r7, #4]
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	3304      	adds	r3, #4
 800cc90:	4618      	mov	r0, r3
 800cc92:	f000 f83c 	bl	800cd0e <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EE7_M_headERKS2_>
 800cc96:	4603      	mov	r3, r0
 800cc98:	4618      	mov	r0, r3
 800cc9a:	3708      	adds	r7, #8
 800cc9c:	46bd      	mov	sp, r7
 800cc9e:	bd80      	pop	{r7, pc}

0800cca0 <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800cca0:	b480      	push	{r7}
 800cca2:	b083      	sub	sp, #12
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	6078      	str	r0, [r7, #4]
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	4618      	mov	r0, r3
 800ccac:	370c      	adds	r7, #12
 800ccae:	46bd      	mov	sp, r7
 800ccb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb4:	4770      	bx	lr

0800ccb6 <_ZNSt10_Head_baseILj0EP16TfLiteConvParamsLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800ccb6:	b480      	push	{r7}
 800ccb8:	b083      	sub	sp, #12
 800ccba:	af00      	add	r7, sp, #0
 800ccbc:	6078      	str	r0, [r7, #4]
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	370c      	adds	r7, #12
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccca:	4770      	bx	lr

0800cccc <_ZNSt10_Head_baseILj0EP25TfLiteDepthwiseConvParamsLb0EE7_M_headERKS2_>:
 800cccc:	b480      	push	{r7}
 800ccce:	b083      	sub	sp, #12
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	6078      	str	r0, [r7, #4]
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	370c      	adds	r7, #12
 800ccda:	46bd      	mov	sp, r7
 800ccdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce0:	4770      	bx	lr

0800cce2 <_ZNSt10_Head_baseILj0EP16TfLitePoolParamsLb0EE7_M_headERKS2_>:
 800cce2:	b480      	push	{r7}
 800cce4:	b083      	sub	sp, #12
 800cce6:	af00      	add	r7, sp, #0
 800cce8:	6078      	str	r0, [r7, #4]
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	4618      	mov	r0, r3
 800ccee:	370c      	adds	r7, #12
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf6:	4770      	bx	lr

0800ccf8 <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EE7_M_headERKS2_>:
 800ccf8:	b480      	push	{r7}
 800ccfa:	b083      	sub	sp, #12
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	6078      	str	r0, [r7, #4]
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	4618      	mov	r0, r3
 800cd04:	370c      	adds	r7, #12
 800cd06:	46bd      	mov	sp, r7
 800cd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd0c:	4770      	bx	lr

0800cd0e <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EE7_M_headERKS2_>:
 800cd0e:	b480      	push	{r7}
 800cd10:	b083      	sub	sp, #12
 800cd12:	af00      	add	r7, sp, #0
 800cd14:	6078      	str	r0, [r7, #4]
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	4618      	mov	r0, r3
 800cd1a:	370c      	adds	r7, #12
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd22:	4770      	bx	lr

0800cd24 <_ZN6tflite24EnumNamesBuiltinOperatorEv>:
inline const char * const *EnumNamesBuiltinOperator() {
 800cd24:	b480      	push	{r7}
 800cd26:	af00      	add	r7, sp, #0
  return names;
 800cd28:	4b02      	ldr	r3, [pc, #8]	; (800cd34 <_ZN6tflite24EnumNamesBuiltinOperatorEv+0x10>)
}
 800cd2a:	4618      	mov	r0, r3
 800cd2c:	46bd      	mov	sp, r7
 800cd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd32:	4770      	bx	lr
 800cd34:	0803fb78 	.word	0x0803fb78

0800cd38 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>:
inline const char *EnumNameBuiltinOperator(BuiltinOperator e) {
 800cd38:	b580      	push	{r7, lr}
 800cd3a:	b084      	sub	sp, #16
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	4603      	mov	r3, r0
 800cd40:	71fb      	strb	r3, [r7, #7]
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_RANDOM_STANDARD_NORMAL)) return "";
 800cd42:	2300      	movs	r3, #0
 800cd44:	72bb      	strb	r3, [r7, #10]
 800cd46:	2392      	movs	r3, #146	; 0x92
 800cd48:	72fb      	strb	r3, [r7, #11]
 800cd4a:	f107 020b 	add.w	r2, r7, #11
 800cd4e:	f107 010a 	add.w	r1, r7, #10
 800cd52:	1dfb      	adds	r3, r7, #7
 800cd54:	4618      	mov	r0, r3
 800cd56:	f000 f8a9 	bl	800ceac <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_>
 800cd5a:	4603      	mov	r3, r0
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d001      	beq.n	800cd64 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE+0x2c>
 800cd60:	4b07      	ldr	r3, [pc, #28]	; (800cd80 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE+0x48>)
 800cd62:	e008      	b.n	800cd76 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE+0x3e>
  const size_t index = static_cast<size_t>(e);
 800cd64:	79fb      	ldrb	r3, [r7, #7]
 800cd66:	60fb      	str	r3, [r7, #12]
  return EnumNamesBuiltinOperator()[index];
 800cd68:	f7ff ffdc 	bl	800cd24 <_ZN6tflite24EnumNamesBuiltinOperatorEv>
 800cd6c:	4602      	mov	r2, r0
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	009b      	lsls	r3, r3, #2
 800cd72:	4413      	add	r3, r2
 800cd74:	681b      	ldr	r3, [r3, #0]
}
 800cd76:	4618      	mov	r0, r3
 800cd78:	3710      	adds	r7, #16
 800cd7a:	46bd      	mov	sp, r7
 800cd7c:	bd80      	pop	{r7, pc}
 800cd7e:	bf00      	nop
 800cd80:	08028f54 	.word	0x08028f54

0800cd84 <_ZNK6tflite12OperatorCode11custom_codeEv>:
  const flatbuffers::String *custom_code() const {
 800cd84:	b580      	push	{r7, lr}
 800cd86:	b082      	sub	sp, #8
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::String *>(VT_CUSTOM_CODE);
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	2106      	movs	r1, #6
 800cd90:	4618      	mov	r0, r3
 800cd92:	f7fe fcf1 	bl	800b778 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>
 800cd96:	4603      	mov	r3, r0
  }
 800cd98:	4618      	mov	r0, r3
 800cd9a:	3708      	adds	r7, #8
 800cd9c:	46bd      	mov	sp, r7
 800cd9e:	bd80      	pop	{r7, pc}

0800cda0 <_ZNK6tflite12OperatorCode7versionEv>:
  int32_t version() const {
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b082      	sub	sp, #8
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_VERSION, 1);
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	2201      	movs	r2, #1
 800cdac:	2108      	movs	r1, #8
 800cdae:	4618      	mov	r0, r3
 800cdb0:	f7fe fc94 	bl	800b6dc <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 800cdb4:	4603      	mov	r3, r0
  }
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	3708      	adds	r7, #8
 800cdba:	46bd      	mov	sp, r7
 800cdbc:	bd80      	pop	{r7, pc}
	...

0800cdc0 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration>:

namespace tflite {

TfLiteStatus GetRegistrationFromOpCode(
    const OperatorCode* opcode, const OpResolver& op_resolver,
    ErrorReporter* error_reporter, const TfLiteRegistration** registration) {
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	b088      	sub	sp, #32
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	60f8      	str	r0, [r7, #12]
 800cdc8:	60b9      	str	r1, [r7, #8]
 800cdca:	607a      	str	r2, [r7, #4]
 800cdcc:	603b      	str	r3, [r7, #0]
  TfLiteStatus status = kTfLiteOk;
 800cdce:	2300      	movs	r3, #0
 800cdd0:	77fb      	strb	r3, [r7, #31]
  *registration = nullptr;
 800cdd2:	683b      	ldr	r3, [r7, #0]
 800cdd4:	2200      	movs	r2, #0
 800cdd6:	601a      	str	r2, [r3, #0]
  auto builtin_code = GetBuiltinCode(opcode);
 800cdd8:	68f8      	ldr	r0, [r7, #12]
 800cdda:	f019 fcee 	bl	80267ba <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>
 800cdde:	4603      	mov	r3, r0
 800cde0:	77bb      	strb	r3, [r7, #30]
  int version = opcode->version();
 800cde2:	68f8      	ldr	r0, [r7, #12]
 800cde4:	f7ff ffdc 	bl	800cda0 <_ZNK6tflite12OperatorCode7versionEv>
 800cde8:	61b8      	str	r0, [r7, #24]

  if (builtin_code > BuiltinOperator_MAX) {
 800cdea:	7fbb      	ldrb	r3, [r7, #30]
 800cdec:	2b92      	cmp	r3, #146	; 0x92
 800cdee:	d908      	bls.n	800ce02 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x42>
    TF_LITE_REPORT_ERROR(
 800cdf0:	7fbb      	ldrb	r3, [r7, #30]
 800cdf2:	461a      	mov	r2, r3
 800cdf4:	492a      	ldr	r1, [pc, #168]	; (800cea0 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xe0>)
 800cdf6:	6878      	ldr	r0, [r7, #4]
 800cdf8:	f7fd fd84 	bl	800a904 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter,
        "Op builtin_code out of range: %d. Are you using old TFLite binary "
        "with newer model?",
        builtin_code);
    status = kTfLiteError;
 800cdfc:	2301      	movs	r3, #1
 800cdfe:	77fb      	strb	r3, [r7, #31]
 800ce00:	e048      	b.n	800ce94 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
  } else if (builtin_code != BuiltinOperator_CUSTOM) {
 800ce02:	7fbb      	ldrb	r3, [r7, #30]
 800ce04:	2b20      	cmp	r3, #32
 800ce06:	d01a      	beq.n	800ce3e <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x7e>
    *registration = op_resolver.FindOp(builtin_code, version);
 800ce08:	68bb      	ldr	r3, [r7, #8]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	7fb9      	ldrb	r1, [r7, #30]
 800ce10:	69ba      	ldr	r2, [r7, #24]
 800ce12:	68b8      	ldr	r0, [r7, #8]
 800ce14:	4798      	blx	r3
 800ce16:	4602      	mov	r2, r0
 800ce18:	683b      	ldr	r3, [r7, #0]
 800ce1a:	601a      	str	r2, [r3, #0]
    if (*registration == nullptr) {
 800ce1c:	683b      	ldr	r3, [r7, #0]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d137      	bne.n	800ce94 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
      TF_LITE_REPORT_ERROR(
 800ce24:	7fbb      	ldrb	r3, [r7, #30]
 800ce26:	4618      	mov	r0, r3
 800ce28:	f7ff ff86 	bl	800cd38 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 800ce2c:	4602      	mov	r2, r0
 800ce2e:	69bb      	ldr	r3, [r7, #24]
 800ce30:	491c      	ldr	r1, [pc, #112]	; (800cea4 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xe4>)
 800ce32:	6878      	ldr	r0, [r7, #4]
 800ce34:	f7fd fd66 	bl	800a904 <_ZN6tflite13ErrorReporter6ReportEPKcz>
          error_reporter,
          "Didn't find op for builtin opcode '%s' version '%d'. "
          "An older version of this builtin might be supported. "
          "Are you using an old TFLite binary with a newer model?\n",
          EnumNameBuiltinOperator(builtin_code), version);
      status = kTfLiteError;
 800ce38:	2301      	movs	r3, #1
 800ce3a:	77fb      	strb	r3, [r7, #31]
 800ce3c:	e02a      	b.n	800ce94 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
    }
  } else if (!opcode->custom_code()) {
 800ce3e:	68f8      	ldr	r0, [r7, #12]
 800ce40:	f7ff ffa0 	bl	800cd84 <_ZNK6tflite12OperatorCode11custom_codeEv>
 800ce44:	4603      	mov	r3, r0
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	bf0c      	ite	eq
 800ce4a:	2301      	moveq	r3, #1
 800ce4c:	2300      	movne	r3, #0
 800ce4e:	b2db      	uxtb	r3, r3
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d006      	beq.n	800ce62 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xa2>
    TF_LITE_REPORT_ERROR(
 800ce54:	4914      	ldr	r1, [pc, #80]	; (800cea8 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xe8>)
 800ce56:	6878      	ldr	r0, [r7, #4]
 800ce58:	f7fd fd54 	bl	800a904 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter,
        "Operator with CUSTOM builtin_code has no custom_code.\n");
    status = kTfLiteError;
 800ce5c:	2301      	movs	r3, #1
 800ce5e:	77fb      	strb	r3, [r7, #31]
 800ce60:	e018      	b.n	800ce94 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
  } else {
    const char* name = opcode->custom_code()->c_str();
 800ce62:	68f8      	ldr	r0, [r7, #12]
 800ce64:	f7ff ff8e 	bl	800cd84 <_ZNK6tflite12OperatorCode11custom_codeEv>
 800ce68:	4603      	mov	r3, r0
 800ce6a:	4618      	mov	r0, r3
 800ce6c:	f7fd fd89 	bl	800a982 <_ZNK11flatbuffers6String5c_strEv>
 800ce70:	6178      	str	r0, [r7, #20]
    *registration = op_resolver.FindOp(name, version);
 800ce72:	68bb      	ldr	r3, [r7, #8]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	3304      	adds	r3, #4
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	69ba      	ldr	r2, [r7, #24]
 800ce7c:	6979      	ldr	r1, [r7, #20]
 800ce7e:	68b8      	ldr	r0, [r7, #8]
 800ce80:	4798      	blx	r3
 800ce82:	4602      	mov	r2, r0
 800ce84:	683b      	ldr	r3, [r7, #0]
 800ce86:	601a      	str	r2, [r3, #0]
    if (*registration == nullptr) {
 800ce88:	683b      	ldr	r3, [r7, #0]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d101      	bne.n	800ce94 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
      // Do not report error for unresolved custom op, we do the final check
      // while preparing ops.
      status = kTfLiteError;
 800ce90:	2301      	movs	r3, #1
 800ce92:	77fb      	strb	r3, [r7, #31]
    }
  }
  return status;
 800ce94:	7ffb      	ldrb	r3, [r7, #31]
}
 800ce96:	4618      	mov	r0, r3
 800ce98:	3720      	adds	r7, #32
 800ce9a:	46bd      	mov	sp, r7
 800ce9c:	bd80      	pop	{r7, pc}
 800ce9e:	bf00      	nop
 800cea0:	08028f58 	.word	0x08028f58
 800cea4:	08028fac 	.word	0x08028fac
 800cea8:	08029050 	.word	0x08029050

0800ceac <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_>:
inline bool IsOutRange(const T &v, const T &low, const T &high) {
 800ceac:	b480      	push	{r7}
 800ceae:	b085      	sub	sp, #20
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	60f8      	str	r0, [r7, #12]
 800ceb4:	60b9      	str	r1, [r7, #8]
 800ceb6:	607a      	str	r2, [r7, #4]
  return (v < low) || (high < v);
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	781a      	ldrb	r2, [r3, #0]
 800cebc:	68bb      	ldr	r3, [r7, #8]
 800cebe:	781b      	ldrb	r3, [r3, #0]
 800cec0:	429a      	cmp	r2, r3
 800cec2:	d305      	bcc.n	800ced0 <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_+0x24>
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	781a      	ldrb	r2, [r3, #0]
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	781b      	ldrb	r3, [r3, #0]
 800cecc:	429a      	cmp	r2, r3
 800cece:	d201      	bcs.n	800ced4 <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_+0x28>
 800ced0:	2301      	movs	r3, #1
 800ced2:	e000      	b.n	800ced6 <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_+0x2a>
 800ced4:	2300      	movs	r3, #0
}
 800ced6:	4618      	mov	r0, r3
 800ced8:	3714      	adds	r7, #20
 800ceda:	46bd      	mov	sp, r7
 800cedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee0:	4770      	bx	lr

0800cee2 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 800cee2:	b580      	push	{r7, lr}
 800cee4:	b082      	sub	sp, #8
 800cee6:	af00      	add	r7, sp, #0
 800cee8:	ed87 0a01 	vstr	s0, [r7, #4]
 800ceec:	ed97 0a01 	vldr	s0, [r7, #4]
 800cef0:	f019 fdc0 	bl	8026a74 <roundf>
 800cef4:	eef0 7a40 	vmov.f32	s15, s0
 800cef8:	eeb0 0a67 	vmov.f32	s0, s15
 800cefc:	3708      	adds	r7, #8
 800cefe:	46bd      	mov	sp, r7
 800cf00:	bd80      	pop	{r7, pc}

0800cf02 <_ZNSt14numeric_limitsIlE3maxEv>:

      static _GLIBCXX_CONSTEXPR long
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }

      static _GLIBCXX_CONSTEXPR long
      max() _GLIBCXX_USE_NOEXCEPT { return __LONG_MAX__; }
 800cf02:	b480      	push	{r7}
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800cf0a:	4618      	mov	r0, r3
 800cf0c:	46bd      	mov	sp, r7
 800cf0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf12:	4770      	bx	lr

0800cf14 <_ZN6tflite18QuantizeMultiplierEdPlPi>:
constexpr uint32_t kFractionRoundingMask = 0x003fffff;
constexpr uint32_t kFractionRoundingThreshold = 0x00200000;
}  // namespace

void QuantizeMultiplier(double double_multiplier, int32_t* quantized_multiplier,
                        int* shift) {
 800cf14:	b5b0      	push	{r4, r5, r7, lr}
 800cf16:	b088      	sub	sp, #32
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	ed87 0b02 	vstr	d0, [r7, #8]
 800cf1e:	6078      	str	r0, [r7, #4]
 800cf20:	6039      	str	r1, [r7, #0]
  if (double_multiplier == 0.) {
 800cf22:	f04f 0200 	mov.w	r2, #0
 800cf26:	f04f 0300 	mov.w	r3, #0
 800cf2a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800cf2e:	f7f3 fdfd 	bl	8000b2c <__aeabi_dcmpeq>
 800cf32:	4603      	mov	r3, r0
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d006      	beq.n	800cf46 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x32>
    *quantized_multiplier = 0;
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	2200      	movs	r2, #0
 800cf3c:	601a      	str	r2, [r3, #0]
    *shift = 0;
 800cf3e:	683b      	ldr	r3, [r7, #0]
 800cf40:	2200      	movs	r2, #0
 800cf42:	601a      	str	r2, [r3, #0]
    return;
 800cf44:	e06b      	b.n	800d01e <_ZN6tflite18QuantizeMultiplierEdPlPi+0x10a>
  // example on microcontrollers) then use an alternative implementation
  // that only requires integer and bitwise operations. To enable this, you
  // need to set the define during the build process for your platform.
  int64_t q_fixed = IntegerFrExp(double_multiplier, shift);
#else   // TFLITE_EMULATE_FLOAT
  const double q = std::frexp(double_multiplier, shift);
 800cf46:	6838      	ldr	r0, [r7, #0]
 800cf48:	ed97 0b02 	vldr	d0, [r7, #8]
 800cf4c:	f019 fd14 	bl	8026978 <frexp>
 800cf50:	ed87 0b04 	vstr	d0, [r7, #16]
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1LL << 31)));
 800cf54:	f04f 0200 	mov.w	r2, #0
 800cf58:	4b32      	ldr	r3, [pc, #200]	; (800d024 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x110>)
 800cf5a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800cf5e:	f7f3 fb7d 	bl	800065c <__aeabi_dmul>
 800cf62:	4602      	mov	r2, r0
 800cf64:	460b      	mov	r3, r1
 800cf66:	ec43 2b17 	vmov	d7, r2, r3
 800cf6a:	eeb0 0a47 	vmov.f32	s0, s14
 800cf6e:	eef0 0a67 	vmov.f32	s1, s15
 800cf72:	f000 f97a 	bl	800d26a <_ZN6tflite11TfLiteRoundIdEET_S1_>
 800cf76:	ec53 2b10 	vmov	r2, r3, d0
 800cf7a:	4610      	mov	r0, r2
 800cf7c:	4619      	mov	r1, r3
 800cf7e:	f7f3 feb7 	bl	8000cf0 <__aeabi_d2lz>
 800cf82:	4602      	mov	r2, r0
 800cf84:	460b      	mov	r3, r1
 800cf86:	e9c7 2306 	strd	r2, r3, [r7, #24]
#endif  // TFLITE_EMULATE_FLOAT
  TFLITE_CHECK(q_fixed <= (1LL << 31));
 800cf8a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800cf8e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800cf92:	f04f 0100 	mov.w	r1, #0
 800cf96:	4290      	cmp	r0, r2
 800cf98:	eb71 0303 	sbcs.w	r3, r1, r3
 800cf9c:	da01      	bge.n	800cfa2 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x8e>
 800cf9e:	f019 feae 	bl	8026cfe <abort>
  if (q_fixed == (1LL << 31)) {
 800cfa2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	bf08      	it	eq
 800cfaa:	f1b2 4f00 	cmpeq.w	r2, #2147483648	; 0x80000000
 800cfae:	d117      	bne.n	800cfe0 <_ZN6tflite18QuantizeMultiplierEdPlPi+0xcc>
    q_fixed /= 2;
 800cfb0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800cfb4:	0fd9      	lsrs	r1, r3, #31
 800cfb6:	4608      	mov	r0, r1
 800cfb8:	f04f 0100 	mov.w	r1, #0
 800cfbc:	1884      	adds	r4, r0, r2
 800cfbe:	eb41 0503 	adc.w	r5, r1, r3
 800cfc2:	f04f 0200 	mov.w	r2, #0
 800cfc6:	f04f 0300 	mov.w	r3, #0
 800cfca:	0862      	lsrs	r2, r4, #1
 800cfcc:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 800cfd0:	106b      	asrs	r3, r5, #1
 800cfd2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    ++*shift;
 800cfd6:	683b      	ldr	r3, [r7, #0]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	1c5a      	adds	r2, r3, #1
 800cfdc:	683b      	ldr	r3, [r7, #0]
 800cfde:	601a      	str	r2, [r3, #0]
  }
  TFLITE_CHECK_LE(q_fixed, std::numeric_limits<int32_t>::max());
 800cfe0:	f7ff ff8f 	bl	800cf02 <_ZNSt14numeric_limitsIlE3maxEv>
 800cfe4:	4603      	mov	r3, r0
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800cfec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800cff0:	4290      	cmp	r0, r2
 800cff2:	eb71 0303 	sbcs.w	r3, r1, r3
 800cff6:	da01      	bge.n	800cffc <_ZN6tflite18QuantizeMultiplierEdPlPi+0xe8>
 800cff8:	f019 fe81 	bl	8026cfe <abort>
  // that we're effectively flushing tiny double_multiplier's to zero.
  // We could conceivably handle values in the range (roughly) [32, 63]
  // as 'denormals' i.e. (shift==0, q_fixed < 2^30). In that point of view
  // the present handling is just doing 'flush denormals to zero'. We could
  // reconsider and actually generate nonzero denormals if a need arises.
  if (*shift < -31) {
 800cffc:	683b      	ldr	r3, [r7, #0]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	f113 0f1f 	cmn.w	r3, #31
 800d004:	da08      	bge.n	800d018 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x104>
    *shift = 0;
 800d006:	683b      	ldr	r3, [r7, #0]
 800d008:	2200      	movs	r2, #0
 800d00a:	601a      	str	r2, [r3, #0]
    q_fixed = 0;
 800d00c:	f04f 0200 	mov.w	r2, #0
 800d010:	f04f 0300 	mov.w	r3, #0
 800d014:	e9c7 2306 	strd	r2, r3, [r7, #24]
  }
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
 800d018:	69ba      	ldr	r2, [r7, #24]
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	601a      	str	r2, [r3, #0]
}
 800d01e:	3720      	adds	r7, #32
 800d020:	46bd      	mov	sp, r7
 800d022:	bdb0      	pop	{r4, r5, r7, pc}
 800d024:	41e00000 	.word	0x41e00000

0800d028 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>:

void QuantizeMultiplierGreaterThanOne(double double_multiplier,
                                      int32_t* quantized_multiplier,
                                      int* left_shift) {
 800d028:	b580      	push	{r7, lr}
 800d02a:	b084      	sub	sp, #16
 800d02c:	af00      	add	r7, sp, #0
 800d02e:	ed87 0b02 	vstr	d0, [r7, #8]
 800d032:	6078      	str	r0, [r7, #4]
 800d034:	6039      	str	r1, [r7, #0]
  TFLITE_CHECK_GT(double_multiplier, 1.);
 800d036:	f04f 0200 	mov.w	r2, #0
 800d03a:	4b0d      	ldr	r3, [pc, #52]	; (800d070 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x48>)
 800d03c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d040:	f7f3 fd9c 	bl	8000b7c <__aeabi_dcmpgt>
 800d044:	4603      	mov	r3, r0
 800d046:	2b00      	cmp	r3, #0
 800d048:	d101      	bne.n	800d04e <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x26>
 800d04a:	f019 fe58 	bl	8026cfe <abort>
  QuantizeMultiplier(double_multiplier, quantized_multiplier, left_shift);
 800d04e:	6839      	ldr	r1, [r7, #0]
 800d050:	6878      	ldr	r0, [r7, #4]
 800d052:	ed97 0b02 	vldr	d0, [r7, #8]
 800d056:	f7ff ff5d 	bl	800cf14 <_ZN6tflite18QuantizeMultiplierEdPlPi>
  TFLITE_CHECK_GE(*left_shift, 0);
 800d05a:	683b      	ldr	r3, [r7, #0]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	da01      	bge.n	800d066 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x3e>
 800d062:	f019 fe4c 	bl	8026cfe <abort>
}
 800d066:	bf00      	nop
 800d068:	3710      	adds	r7, #16
 800d06a:	46bd      	mov	sp, r7
 800d06c:	bd80      	pop	{r7, pc}
 800d06e:	bf00      	nop
 800d070:	3ff00000 	.word	0x3ff00000

0800d074 <_ZSt3minIdERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
 800d074:	b580      	push	{r7, lr}
 800d076:	b082      	sub	sp, #8
 800d078:	af00      	add	r7, sp, #0
 800d07a:	6078      	str	r0, [r7, #4]
 800d07c:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 800d07e:	683b      	ldr	r3, [r7, #0]
 800d080:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d08a:	f7f3 fd59 	bl	8000b40 <__aeabi_dcmplt>
 800d08e:	4603      	mov	r3, r0
 800d090:	2b00      	cmp	r3, #0
 800d092:	d001      	beq.n	800d098 <_ZSt3minIdERKT_S2_S2_+0x24>
	return __b;
 800d094:	683b      	ldr	r3, [r7, #0]
 800d096:	e000      	b.n	800d09a <_ZSt3minIdERKT_S2_S2_+0x26>
      return __a;
 800d098:	687b      	ldr	r3, [r7, #4]
    }
 800d09a:	4618      	mov	r0, r3
 800d09c:	3708      	adds	r7, #8
 800d09e:	46bd      	mov	sp, r7
 800d0a0:	bd80      	pop	{r7, pc}
 800d0a2:	0000      	movs	r0, r0
 800d0a4:	0000      	movs	r0, r0
	...

0800d0a8 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>:
  }
}

void PreprocessSoftmaxScaling(double beta, double input_scale,
                              int input_integer_bits,
                              int32_t* quantized_multiplier, int* left_shift) {
 800d0a8:	b5b0      	push	{r4, r5, r7, lr}
 800d0aa:	b08e      	sub	sp, #56	; 0x38
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	ed87 0b06 	vstr	d0, [r7, #24]
 800d0b2:	ed87 1b04 	vstr	d1, [r7, #16]
 800d0b6:	60f8      	str	r0, [r7, #12]
 800d0b8:	60b9      	str	r1, [r7, #8]
 800d0ba:	607a      	str	r2, [r7, #4]
  if (IntegerDoubleCompare(input_beta_real_multiplier, (1LL << 31) - 1.0) > 0) {
    input_beta_real_multiplier = (1LL << 31) - 1.0;
  }
#else   // TFLITE_EMULATE_FLOAT
  const double input_beta_real_multiplier = std::min<double>(
      beta * input_scale * (1 << (31 - input_integer_bits)), (1LL << 31) - 1.0);
 800d0bc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d0c0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800d0c4:	f7f3 faca 	bl	800065c <__aeabi_dmul>
 800d0c8:	4602      	mov	r2, r0
 800d0ca:	460b      	mov	r3, r1
 800d0cc:	4614      	mov	r4, r2
 800d0ce:	461d      	mov	r5, r3
 800d0d0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	fa22 f303 	lsr.w	r3, r2, r3
 800d0da:	4618      	mov	r0, r3
 800d0dc:	f7f3 fa54 	bl	8000588 <__aeabi_i2d>
 800d0e0:	4602      	mov	r2, r0
 800d0e2:	460b      	mov	r3, r1
 800d0e4:	4620      	mov	r0, r4
 800d0e6:	4629      	mov	r1, r5
 800d0e8:	f7f3 fab8 	bl	800065c <__aeabi_dmul>
 800d0ec:	4602      	mov	r2, r0
 800d0ee:	460b      	mov	r3, r1
 800d0f0:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800d0f4:	a30e      	add	r3, pc, #56	; (adr r3, 800d130 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x88>)
 800d0f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0fa:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800d0fe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800d102:	f107 0320 	add.w	r3, r7, #32
 800d106:	4611      	mov	r1, r2
 800d108:	4618      	mov	r0, r3
 800d10a:	f7ff ffb3 	bl	800d074 <_ZSt3minIdERKT_S2_S2_>
 800d10e:	4603      	mov	r3, r0
 800d110:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d114:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
#endif  // TFLITE_EMULATE_FLOAT

  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
 800d118:	6879      	ldr	r1, [r7, #4]
 800d11a:	68b8      	ldr	r0, [r7, #8]
 800d11c:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 800d120:	f7ff ff82 	bl	800d028 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>
                                   quantized_multiplier, left_shift);
}
 800d124:	bf00      	nop
 800d126:	3738      	adds	r7, #56	; 0x38
 800d128:	46bd      	mov	sp, r7
 800d12a:	bdb0      	pop	{r4, r5, r7, pc}
 800d12c:	f3af 8000 	nop.w
 800d130:	ffc00000 	.word	0xffc00000
 800d134:	41dfffff 	.word	0x41dfffff

0800d138 <_ZN6tflite20CalculateInputRadiusEiii>:
                                              reverse_scaling_divisor,
                                              reverse_scaling_left_shift);
}

int CalculateInputRadius(int input_integer_bits, int input_left_shift,
                         int total_signed_bits) {
 800d138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d13c:	b087      	sub	sp, #28
 800d13e:	af00      	add	r7, sp, #0
 800d140:	60f8      	str	r0, [r7, #12]
 800d142:	60b9      	str	r1, [r7, #8]
 800d144:	607a      	str	r2, [r7, #4]
  result <<= (total_signed_bits - input_integer_bits);
  result >>= input_left_shift;
  return result;
#else   // TFLITE_EMULATE_FLOAT
  const double max_input_rescaled =
      1.0 * ((1 << input_integer_bits) - 1) *
 800d146:	2201      	movs	r2, #1
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	fa02 f303 	lsl.w	r3, r2, r3
 800d14e:	3b01      	subs	r3, #1
 800d150:	4618      	mov	r0, r3
 800d152:	f7f3 fa19 	bl	8000588 <__aeabi_i2d>
 800d156:	4682      	mov	sl, r0
 800d158:	468b      	mov	fp, r1
      (1LL << (total_signed_bits - input_integer_bits)) /
 800d15a:	687a      	ldr	r2, [r7, #4]
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	1ad1      	subs	r1, r2, r3
 800d160:	f04f 0201 	mov.w	r2, #1
 800d164:	f04f 0300 	mov.w	r3, #0
 800d168:	f1a1 0620 	sub.w	r6, r1, #32
 800d16c:	f1c1 0020 	rsb	r0, r1, #32
 800d170:	fa03 f901 	lsl.w	r9, r3, r1
 800d174:	fa02 f606 	lsl.w	r6, r2, r6
 800d178:	ea49 0906 	orr.w	r9, r9, r6
 800d17c:	fa22 f000 	lsr.w	r0, r2, r0
 800d180:	ea49 0900 	orr.w	r9, r9, r0
 800d184:	fa02 f801 	lsl.w	r8, r2, r1
      1.0 * ((1 << input_integer_bits) - 1) *
 800d188:	4640      	mov	r0, r8
 800d18a:	4649      	mov	r1, r9
 800d18c:	f7f3 fa38 	bl	8000600 <__aeabi_l2d>
 800d190:	4602      	mov	r2, r0
 800d192:	460b      	mov	r3, r1
 800d194:	4650      	mov	r0, sl
 800d196:	4659      	mov	r1, fp
 800d198:	f7f3 fa60 	bl	800065c <__aeabi_dmul>
 800d19c:	4602      	mov	r2, r0
 800d19e:	460b      	mov	r3, r1
 800d1a0:	4690      	mov	r8, r2
 800d1a2:	4699      	mov	r9, r3
      (1LL << input_left_shift);
 800d1a4:	f04f 0201 	mov.w	r2, #1
 800d1a8:	f04f 0300 	mov.w	r3, #0
 800d1ac:	68b9      	ldr	r1, [r7, #8]
 800d1ae:	f1a1 0620 	sub.w	r6, r1, #32
 800d1b2:	f1c1 0020 	rsb	r0, r1, #32
 800d1b6:	fa03 f501 	lsl.w	r5, r3, r1
 800d1ba:	fa02 f606 	lsl.w	r6, r2, r6
 800d1be:	4335      	orrs	r5, r6
 800d1c0:	fa22 f000 	lsr.w	r0, r2, r0
 800d1c4:	4305      	orrs	r5, r0
 800d1c6:	fa02 f401 	lsl.w	r4, r2, r1
      (1LL << (total_signed_bits - input_integer_bits)) /
 800d1ca:	4620      	mov	r0, r4
 800d1cc:	4629      	mov	r1, r5
 800d1ce:	f7f3 fa17 	bl	8000600 <__aeabi_l2d>
 800d1d2:	4602      	mov	r2, r0
 800d1d4:	460b      	mov	r3, r1
  const double max_input_rescaled =
 800d1d6:	4640      	mov	r0, r8
 800d1d8:	4649      	mov	r1, r9
 800d1da:	f7f3 fb69 	bl	80008b0 <__aeabi_ddiv>
 800d1de:	4602      	mov	r2, r0
 800d1e0:	460b      	mov	r3, r1
 800d1e2:	e9c7 2304 	strd	r2, r3, [r7, #16]
  // Tighten bound using floor.  Suppose that we could use the exact value.
  // After scaling the difference, the result would be at the maximum.  Thus we
  // must ensure that our value has lower magnitude.
  return static_cast<int>(std::floor(max_input_rescaled));
 800d1e6:	ed97 0b04 	vldr	d0, [r7, #16]
 800d1ea:	f019 fb45 	bl	8026878 <floor>
 800d1ee:	ec53 2b10 	vmov	r2, r3, d0
 800d1f2:	4610      	mov	r0, r2
 800d1f4:	4619      	mov	r1, r3
 800d1f6:	f7f3 fccb 	bl	8000b90 <__aeabi_d2iz>
 800d1fa:	4603      	mov	r3, r0
#endif  // TFLITE_EMULATE_FLOAT
}
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	371c      	adds	r7, #28
 800d200:	46bd      	mov	sp, r7
 800d202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d206 <_ZSt3minIfERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800d206:	b480      	push	{r7}
 800d208:	b083      	sub	sp, #12
 800d20a:	af00      	add	r7, sp, #0
 800d20c:	6078      	str	r0, [r7, #4]
 800d20e:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800d210:	683b      	ldr	r3, [r7, #0]
 800d212:	ed93 7a00 	vldr	s14, [r3]
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	edd3 7a00 	vldr	s15, [r3]
 800d21c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d224:	d501      	bpl.n	800d22a <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 800d226:	683b      	ldr	r3, [r7, #0]
 800d228:	e000      	b.n	800d22c <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 800d22a:	687b      	ldr	r3, [r7, #4]
    }
 800d22c:	4618      	mov	r0, r3
 800d22e:	370c      	adds	r7, #12
 800d230:	46bd      	mov	sp, r7
 800d232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d236:	4770      	bx	lr

0800d238 <_ZSt3maxIfERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 800d238:	b480      	push	{r7}
 800d23a:	b083      	sub	sp, #12
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	6078      	str	r0, [r7, #4]
 800d240:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	ed93 7a00 	vldr	s14, [r3]
 800d248:	683b      	ldr	r3, [r7, #0]
 800d24a:	edd3 7a00 	vldr	s15, [r3]
 800d24e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d256:	d501      	bpl.n	800d25c <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 800d258:	683b      	ldr	r3, [r7, #0]
 800d25a:	e000      	b.n	800d25e <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 800d25c:	687b      	ldr	r3, [r7, #4]
    }
 800d25e:	4618      	mov	r0, r3
 800d260:	370c      	adds	r7, #12
 800d262:	46bd      	mov	sp, r7
 800d264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d268:	4770      	bx	lr

0800d26a <_ZN6tflite11TfLiteRoundIdEET_S1_>:
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round);
 800d26a:	b580      	push	{r7, lr}
 800d26c:	b082      	sub	sp, #8
 800d26e:	af00      	add	r7, sp, #0
 800d270:	ed87 0b00 	vstr	d0, [r7]
 800d274:	ed97 0b00 	vldr	d0, [r7]
 800d278:	f019 fbb6 	bl	80269e8 <round>
 800d27c:	eeb0 7a40 	vmov.f32	s14, s0
 800d280:	eef0 7a60 	vmov.f32	s15, s1
 800d284:	eeb0 0a47 	vmov.f32	s0, s14
 800d288:	eef0 0a67 	vmov.f32	s1, s15
 800d28c:	3708      	adds	r7, #8
 800d28e:	46bd      	mov	sp, r7
 800d290:	bd80      	pop	{r7, pc}

0800d292 <_ZN6tflite11TfLiteRoundIfEET_S1_>:
 800d292:	b580      	push	{r7, lr}
 800d294:	b082      	sub	sp, #8
 800d296:	af00      	add	r7, sp, #0
 800d298:	ed87 0a01 	vstr	s0, [r7, #4]
 800d29c:	ed97 0a01 	vldr	s0, [r7, #4]
 800d2a0:	f7ff fe1f 	bl	800cee2 <_ZSt5roundf>
 800d2a4:	eef0 7a40 	vmov.f32	s15, s0
 800d2a8:	eeb0 0a67 	vmov.f32	s0, s15
 800d2ac:	3708      	adds	r7, #8
 800d2ae:	46bd      	mov	sp, r7
 800d2b0:	bd80      	pop	{r7, pc}

0800d2b2 <_ZSt3absd>:
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
 800d2b2:	b480      	push	{r7}
 800d2b4:	b083      	sub	sp, #12
 800d2b6:	af00      	add	r7, sp, #0
 800d2b8:	ed87 0b00 	vstr	d0, [r7]
 800d2bc:	683a      	ldr	r2, [r7, #0]
 800d2be:	6879      	ldr	r1, [r7, #4]
 800d2c0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d2c4:	ec43 2b17 	vmov	d7, r2, r3
 800d2c8:	eeb0 0a47 	vmov.f32	s0, s14
 800d2cc:	eef0 0a67 	vmov.f32	s1, s15
 800d2d0:	370c      	adds	r7, #12
 800d2d2:	46bd      	mov	sp, r7
 800d2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d8:	4770      	bx	lr
	...

0800d2dc <_ZNSt14numeric_limitsIsE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SHRT_MAX__ - 1; }
 800d2dc:	b480      	push	{r7}
 800d2de:	af00      	add	r7, sp, #0
 800d2e0:	4b02      	ldr	r3, [pc, #8]	; (800d2ec <_ZNSt14numeric_limitsIsE3minEv+0x10>)
 800d2e2:	4618      	mov	r0, r3
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ea:	4770      	bx	lr
 800d2ec:	ffff8000 	.word	0xffff8000

0800d2f0 <_ZNSt14numeric_limitsIsE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SHRT_MAX__; }
 800d2f0:	b480      	push	{r7}
 800d2f2:	af00      	add	r7, sp, #0
 800d2f4:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	46bd      	mov	sp, r7
 800d2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d300:	4770      	bx	lr

0800d302 <_ZNSt14numeric_limitsIlE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }
 800d302:	b480      	push	{r7}
 800d304:	af00      	add	r7, sp, #0
 800d306:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d30a:	4618      	mov	r0, r3
 800d30c:	46bd      	mov	sp, r7
 800d30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d312:	4770      	bx	lr

0800d314 <_ZSt3expf>:
  { return __builtin_expf(__x); }
 800d314:	b580      	push	{r7, lr}
 800d316:	b082      	sub	sp, #8
 800d318:	af00      	add	r7, sp, #0
 800d31a:	ed87 0a01 	vstr	s0, [r7, #4]
 800d31e:	ed97 0a01 	vldr	s0, [r7, #4]
 800d322:	f019 fbcd 	bl	8026ac0 <expf>
 800d326:	eef0 7a40 	vmov.f32	s15, s0
 800d32a:	eeb0 0a67 	vmov.f32	s0, s15
 800d32e:	3708      	adds	r7, #8
 800d330:	46bd      	mov	sp, r7
 800d332:	bd80      	pop	{r7, pc}

0800d334 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>:

// This function implements the same computation as the ARMv7 NEON VQRDMULH
// instruction.
template <>
inline std::int32_t SaturatingRoundingDoublingHighMul(std::int32_t a,
                                                      std::int32_t b) {
 800d334:	b5b0      	push	{r4, r5, r7, lr}
 800d336:	b08c      	sub	sp, #48	; 0x30
 800d338:	af00      	add	r7, sp, #0
 800d33a:	6078      	str	r0, [r7, #4]
 800d33c:	6039      	str	r1, [r7, #0]
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 800d33e:	687a      	ldr	r2, [r7, #4]
 800d340:	683b      	ldr	r3, [r7, #0]
 800d342:	429a      	cmp	r2, r3
 800d344:	d107      	bne.n	800d356 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x22>
 800d346:	f7ff ffdc 	bl	800d302 <_ZNSt14numeric_limitsIlE3minEv>
 800d34a:	4602      	mov	r2, r0
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	4293      	cmp	r3, r2
 800d350:	d101      	bne.n	800d356 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x22>
 800d352:	2301      	movs	r3, #1
 800d354:	e000      	b.n	800d358 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x24>
 800d356:	2300      	movs	r3, #0
 800d358:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  std::int64_t a_64(a);
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	461a      	mov	r2, r3
 800d360:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800d364:	e9c7 2308 	strd	r2, r3, [r7, #32]
  std::int64_t b_64(b);
 800d368:	683b      	ldr	r3, [r7, #0]
 800d36a:	461a      	mov	r2, r3
 800d36c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800d370:	e9c7 2306 	strd	r2, r3, [r7, #24]
  std::int64_t ab_64 = a_64 * b_64;
 800d374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d376:	69ba      	ldr	r2, [r7, #24]
 800d378:	fb02 f203 	mul.w	r2, r2, r3
 800d37c:	69fb      	ldr	r3, [r7, #28]
 800d37e:	6a39      	ldr	r1, [r7, #32]
 800d380:	fb01 f303 	mul.w	r3, r1, r3
 800d384:	18d1      	adds	r1, r2, r3
 800d386:	6a3a      	ldr	r2, [r7, #32]
 800d388:	69bb      	ldr	r3, [r7, #24]
 800d38a:	fba2 2303 	umull	r2, r3, r2, r3
 800d38e:	4419      	add	r1, r3
 800d390:	460b      	mov	r3, r1
 800d392:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800d396:	e9c7 2304 	strd	r2, r3, [r7, #16]
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 800d39a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d39e:	2a00      	cmp	r2, #0
 800d3a0:	f173 0300 	sbcs.w	r3, r3, #0
 800d3a4:	db02      	blt.n	800d3ac <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x78>
 800d3a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d3aa:	e000      	b.n	800d3ae <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x7a>
 800d3ac:	4b18      	ldr	r3, [pc, #96]	; (800d410 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xdc>)
 800d3ae:	60fb      	str	r3, [r7, #12]
  std::int32_t ab_x2_high32 =
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800d3b8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d3bc:	1884      	adds	r4, r0, r2
 800d3be:	eb41 0503 	adc.w	r5, r1, r3
 800d3c2:	4622      	mov	r2, r4
 800d3c4:	462b      	mov	r3, r5
 800d3c6:	2a00      	cmp	r2, #0
 800d3c8:	f173 0100 	sbcs.w	r1, r3, #0
 800d3cc:	da06      	bge.n	800d3dc <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xa8>
 800d3ce:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800d3d2:	f04f 0100 	mov.w	r1, #0
 800d3d6:	1812      	adds	r2, r2, r0
 800d3d8:	eb41 0303 	adc.w	r3, r1, r3
 800d3dc:	f04f 0000 	mov.w	r0, #0
 800d3e0:	f04f 0100 	mov.w	r1, #0
 800d3e4:	0fd0      	lsrs	r0, r2, #31
 800d3e6:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800d3ea:	17d9      	asrs	r1, r3, #31
 800d3ec:	4602      	mov	r2, r0
 800d3ee:	460b      	mov	r3, r1
  std::int32_t ab_x2_high32 =
 800d3f0:	4613      	mov	r3, r2
 800d3f2:	60bb      	str	r3, [r7, #8]
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 800d3f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d003      	beq.n	800d404 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xd0>
 800d3fc:	f7ff fd81 	bl	800cf02 <_ZNSt14numeric_limitsIlE3maxEv>
 800d400:	4603      	mov	r3, r0
 800d402:	e000      	b.n	800d406 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xd2>
 800d404:	68bb      	ldr	r3, [r7, #8]
}
 800d406:	4618      	mov	r0, r3
 800d408:	3730      	adds	r7, #48	; 0x30
 800d40a:	46bd      	mov	sp, r7
 800d40c:	bdb0      	pop	{r4, r5, r7, pc}
 800d40e:	bf00      	nop
 800d410:	c0000001 	.word	0xc0000001

0800d414 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>:
                                           quantized_multiplier);
}

inline int32_t MultiplyByQuantizedMultiplier(int32_t x,
                                             int32_t quantized_multiplier,
                                             int shift) {
 800d414:	b580      	push	{r7, lr}
 800d416:	b086      	sub	sp, #24
 800d418:	af00      	add	r7, sp, #0
 800d41a:	60f8      	str	r0, [r7, #12]
 800d41c:	60b9      	str	r1, [r7, #8]
 800d41e:	607a      	str	r2, [r7, #4]
  using gemmlowp::RoundingDivideByPOT;
  using gemmlowp::SaturatingRoundingDoublingHighMul;
  int left_shift = shift > 0 ? shift : 0;
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d426:	617b      	str	r3, [r7, #20]
  int right_shift = shift > 0 ? 0 : -shift;
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	dc02      	bgt.n	800d434 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x20>
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	425b      	negs	r3, r3
 800d432:	e000      	b.n	800d436 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x22>
 800d434:	2300      	movs	r3, #0
 800d436:	613b      	str	r3, [r7, #16]
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
 800d438:	68fa      	ldr	r2, [r7, #12]
 800d43a:	697b      	ldr	r3, [r7, #20]
 800d43c:	fa02 f303 	lsl.w	r3, r2, r3
 800d440:	68b9      	ldr	r1, [r7, #8]
 800d442:	4618      	mov	r0, r3
 800d444:	f7ff ff76 	bl	800d334 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 800d448:	4603      	mov	r3, r0
 800d44a:	6939      	ldr	r1, [r7, #16]
 800d44c:	4618      	mov	r0, r3
 800d44e:	f000 f8c9 	bl	800d5e4 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 800d452:	4603      	mov	r3, r0
                                 x * (1 << left_shift), quantized_multiplier),
                             right_shift);
}
 800d454:	4618      	mov	r0, r3
 800d456:	3718      	adds	r7, #24
 800d458:	46bd      	mov	sp, r7
 800d45a:	bd80      	pop	{r7, pc}

0800d45c <_ZN6tflite29MultiplyByQuantizedMultiplierExli>:

inline int32_t MultiplyByQuantizedMultiplier(int64_t x,
                                             int32_t quantized_multiplier,
                                             int shift) {
 800d45c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d460:	b089      	sub	sp, #36	; 0x24
 800d462:	af00      	add	r7, sp, #0
 800d464:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800d468:	607a      	str	r2, [r7, #4]
 800d46a:	603b      	str	r3, [r7, #0]
  //
  // Assumptions: The following input ranges are assumed
  // - quantize_scale>=0  (the usual range is (1<<30) to (1>>31)-1)
  // - scaling is chosen so final scaled result fits in int32_t
  // - input x is in the range -(1<<47) <= x < (1<<47)
  assert(quantized_multiplier >= 0);
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	da05      	bge.n	800d47e <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x22>
 800d472:	4b42      	ldr	r3, [pc, #264]	; (800d57c <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x120>)
 800d474:	4a42      	ldr	r2, [pc, #264]	; (800d580 <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x124>)
 800d476:	21b3      	movs	r1, #179	; 0xb3
 800d478:	4842      	ldr	r0, [pc, #264]	; (800d584 <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x128>)
 800d47a:	f019 fc47 	bl	8026d0c <__assert_func>
  assert(shift >= -31 && shift < 8);
 800d47e:	683b      	ldr	r3, [r7, #0]
 800d480:	f113 0f1f 	cmn.w	r3, #31
 800d484:	db02      	blt.n	800d48c <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x30>
 800d486:	683b      	ldr	r3, [r7, #0]
 800d488:	2b07      	cmp	r3, #7
 800d48a:	dd05      	ble.n	800d498 <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x3c>
 800d48c:	4b3e      	ldr	r3, [pc, #248]	; (800d588 <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x12c>)
 800d48e:	4a3c      	ldr	r2, [pc, #240]	; (800d580 <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x124>)
 800d490:	21b4      	movs	r1, #180	; 0xb4
 800d492:	483c      	ldr	r0, [pc, #240]	; (800d584 <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x128>)
 800d494:	f019 fc3a 	bl	8026d0c <__assert_func>
  assert(x >= -(static_cast<int64_t>(1) << 47) &&
 800d498:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d49c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d4a0:	f46f 4100 	mvn.w	r1, #32768	; 0x8000
 800d4a4:	4290      	cmp	r0, r2
 800d4a6:	eb71 0303 	sbcs.w	r3, r1, r3
 800d4aa:	da09      	bge.n	800d4c0 <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x64>
 800d4ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d4b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d4b4:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800d4b8:	4290      	cmp	r0, r2
 800d4ba:	eb71 0303 	sbcs.w	r3, r1, r3
 800d4be:	da05      	bge.n	800d4cc <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x70>
 800d4c0:	4b32      	ldr	r3, [pc, #200]	; (800d58c <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x130>)
 800d4c2:	4a2f      	ldr	r2, [pc, #188]	; (800d580 <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x124>)
 800d4c4:	21b5      	movs	r1, #181	; 0xb5
 800d4c6:	482f      	ldr	r0, [pc, #188]	; (800d584 <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x128>)
 800d4c8:	f019 fc20 	bl	8026d0c <__assert_func>
         x < (static_cast<int64_t>(1) << 47));

  int32_t reduced_multiplier = (quantized_multiplier < 0x7FFF0000)
                                   ? ((quantized_multiplier + (1 << 15)) >> 16)
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	4a30      	ldr	r2, [pc, #192]	; (800d590 <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x134>)
 800d4d0:	4293      	cmp	r3, r2
 800d4d2:	dc04      	bgt.n	800d4de <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x82>
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d4da:	141b      	asrs	r3, r3, #16
 800d4dc:	e001      	b.n	800d4e2 <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x86>
 800d4de:	f647 73ff 	movw	r3, #32767	; 0x7fff
  int32_t reduced_multiplier = (quantized_multiplier < 0x7FFF0000)
 800d4e2:	61fb      	str	r3, [r7, #28]
                                   : 0x7FFF;
  int total_shift = 15 - shift;
 800d4e4:	683b      	ldr	r3, [r7, #0]
 800d4e6:	f1c3 030f 	rsb	r3, r3, #15
 800d4ea:	61bb      	str	r3, [r7, #24]
  x = (x * (int64_t)reduced_multiplier) + ((int64_t)1 << (total_shift - 1));
 800d4ec:	69fb      	ldr	r3, [r7, #28]
 800d4ee:	461a      	mov	r2, r3
 800d4f0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800d4f4:	68b9      	ldr	r1, [r7, #8]
 800d4f6:	fb03 f001 	mul.w	r0, r3, r1
 800d4fa:	68f9      	ldr	r1, [r7, #12]
 800d4fc:	fb02 f101 	mul.w	r1, r2, r1
 800d500:	1846      	adds	r6, r0, r1
 800d502:	68b9      	ldr	r1, [r7, #8]
 800d504:	fba1 0102 	umull	r0, r1, r1, r2
 800d508:	1873      	adds	r3, r6, r1
 800d50a:	4619      	mov	r1, r3
 800d50c:	69bb      	ldr	r3, [r7, #24]
 800d50e:	1e5e      	subs	r6, r3, #1
 800d510:	f04f 0201 	mov.w	r2, #1
 800d514:	f04f 0300 	mov.w	r3, #0
 800d518:	f1a6 0e20 	sub.w	lr, r6, #32
 800d51c:	f1c6 0c20 	rsb	ip, r6, #32
 800d520:	fa03 f506 	lsl.w	r5, r3, r6
 800d524:	fa02 fe0e 	lsl.w	lr, r2, lr
 800d528:	ea45 050e 	orr.w	r5, r5, lr
 800d52c:	fa22 fc0c 	lsr.w	ip, r2, ip
 800d530:	ea45 050c 	orr.w	r5, r5, ip
 800d534:	fa02 f406 	lsl.w	r4, r2, r6
 800d538:	eb10 0a04 	adds.w	sl, r0, r4
 800d53c:	eb41 0b05 	adc.w	fp, r1, r5
 800d540:	e9c7 ab02 	strd	sl, fp, [r7, #8]
  int32_t result = x >> total_shift;
 800d544:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d548:	69b9      	ldr	r1, [r7, #24]
 800d54a:	f1c1 0420 	rsb	r4, r1, #32
 800d54e:	f1b1 0020 	subs.w	r0, r1, #32
 800d552:	fa22 f801 	lsr.w	r8, r2, r1
 800d556:	fa03 f404 	lsl.w	r4, r3, r4
 800d55a:	ea48 0804 	orr.w	r8, r8, r4
 800d55e:	d403      	bmi.n	800d568 <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x10c>
 800d560:	fa43 f000 	asr.w	r0, r3, r0
 800d564:	ea48 0800 	orr.w	r8, r8, r0
 800d568:	fa43 f901 	asr.w	r9, r3, r1
 800d56c:	4643      	mov	r3, r8
 800d56e:	617b      	str	r3, [r7, #20]
  return result;
 800d570:	697b      	ldr	r3, [r7, #20]
}
 800d572:	4618      	mov	r0, r3
 800d574:	3724      	adds	r7, #36	; 0x24
 800d576:	46bd      	mov	sp, r7
 800d578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d57c:	08029088 	.word	0x08029088
 800d580:	080290a4 	.word	0x080290a4
 800d584:	080290ec 	.word	0x080290ec
 800d588:	08029160 	.word	0x08029160
 800d58c:	0802917c 	.word	0x0802917c
 800d590:	7ffeffff 	.word	0x7ffeffff

0800d594 <_ZSt3minIlERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800d594:	b480      	push	{r7}
 800d596:	b083      	sub	sp, #12
 800d598:	af00      	add	r7, sp, #0
 800d59a:	6078      	str	r0, [r7, #4]
 800d59c:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800d59e:	683b      	ldr	r3, [r7, #0]
 800d5a0:	681a      	ldr	r2, [r3, #0]
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	429a      	cmp	r2, r3
 800d5a8:	da01      	bge.n	800d5ae <_ZSt3minIlERKT_S2_S2_+0x1a>
	return __b;
 800d5aa:	683b      	ldr	r3, [r7, #0]
 800d5ac:	e000      	b.n	800d5b0 <_ZSt3minIlERKT_S2_S2_+0x1c>
      return __a;
 800d5ae:	687b      	ldr	r3, [r7, #4]
    }
 800d5b0:	4618      	mov	r0, r3
 800d5b2:	370c      	adds	r7, #12
 800d5b4:	46bd      	mov	sp, r7
 800d5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ba:	4770      	bx	lr

0800d5bc <_ZSt3maxIlERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 800d5bc:	b480      	push	{r7}
 800d5be:	b083      	sub	sp, #12
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	6078      	str	r0, [r7, #4]
 800d5c4:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	681a      	ldr	r2, [r3, #0]
 800d5ca:	683b      	ldr	r3, [r7, #0]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	429a      	cmp	r2, r3
 800d5d0:	da01      	bge.n	800d5d6 <_ZSt3maxIlERKT_S2_S2_+0x1a>
	return __b;
 800d5d2:	683b      	ldr	r3, [r7, #0]
 800d5d4:	e000      	b.n	800d5d8 <_ZSt3maxIlERKT_S2_S2_+0x1c>
      return __a;
 800d5d6:	687b      	ldr	r3, [r7, #4]
    }
 800d5d8:	4618      	mov	r0, r3
 800d5da:	370c      	adds	r7, #12
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e2:	4770      	bx	lr

0800d5e4 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>:
}

// Correctly-rounded-to-nearest division by a power-of-two.
// Also known as a rounding arithmetic right shift.
template <typename IntegerType>
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
 800d5e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d5e6:	b089      	sub	sp, #36	; 0x24
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	6078      	str	r0, [r7, #4]
 800d5ec:	6039      	str	r1, [r7, #0]
  assert(exponent >= 0);
 800d5ee:	6839      	ldr	r1, [r7, #0]
 800d5f0:	2900      	cmp	r1, #0
 800d5f2:	da06      	bge.n	800d602 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x1e>
 800d5f4:	4b31      	ldr	r3, [pc, #196]	; (800d6bc <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xd8>)
 800d5f6:	4a32      	ldr	r2, [pc, #200]	; (800d6c0 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xdc>)
 800d5f8:	f44f 71b3 	mov.w	r1, #358	; 0x166
 800d5fc:	4831      	ldr	r0, [pc, #196]	; (800d6c4 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe0>)
 800d5fe:	f019 fb85 	bl	8026d0c <__assert_func>
  assert(exponent <= 31);
 800d602:	6839      	ldr	r1, [r7, #0]
 800d604:	291f      	cmp	r1, #31
 800d606:	dd06      	ble.n	800d616 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x32>
 800d608:	4b2f      	ldr	r3, [pc, #188]	; (800d6c8 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe4>)
 800d60a:	4a2d      	ldr	r2, [pc, #180]	; (800d6c0 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xdc>)
 800d60c:	f240 1167 	movw	r1, #359	; 0x167
 800d610:	482c      	ldr	r0, [pc, #176]	; (800d6c4 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe0>)
 800d612:	f019 fb7b 	bl	8026d0c <__assert_func>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
 800d616:	f04f 0001 	mov.w	r0, #1
 800d61a:	f04f 0100 	mov.w	r1, #0
 800d61e:	683c      	ldr	r4, [r7, #0]
 800d620:	f1a4 0620 	sub.w	r6, r4, #32
 800d624:	f1c4 0520 	rsb	r5, r4, #32
 800d628:	fa01 f304 	lsl.w	r3, r1, r4
 800d62c:	fa00 f606 	lsl.w	r6, r0, r6
 800d630:	4333      	orrs	r3, r6
 800d632:	fa20 f505 	lsr.w	r5, r0, r5
 800d636:	432b      	orrs	r3, r5
 800d638:	fa00 f204 	lsl.w	r2, r0, r4
 800d63c:	4613      	mov	r3, r2
 800d63e:	3b01      	subs	r3, #1
 800d640:	4618      	mov	r0, r3
 800d642:	f000 f881 	bl	800d748 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800d646:	61f8      	str	r0, [r7, #28]
  const IntegerType zero = Dup<IntegerType>(0);
 800d648:	2000      	movs	r0, #0
 800d64a:	f000 f87d 	bl	800d748 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800d64e:	61b8      	str	r0, [r7, #24]
  const IntegerType one = Dup<IntegerType>(1);
 800d650:	2001      	movs	r0, #1
 800d652:	f000 f879 	bl	800d748 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800d656:	6178      	str	r0, [r7, #20]
  const IntegerType remainder = BitAnd(x, mask);
 800d658:	69f9      	ldr	r1, [r7, #28]
 800d65a:	6878      	ldr	r0, [r7, #4]
 800d65c:	f000 f87f 	bl	800d75e <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800d660:	6138      	str	r0, [r7, #16]
  const IntegerType threshold =
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
 800d662:	2101      	movs	r1, #1
 800d664:	69f8      	ldr	r0, [r7, #28]
 800d666:	f000 f888 	bl	800d77a <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 800d66a:	4604      	mov	r4, r0
 800d66c:	69b9      	ldr	r1, [r7, #24]
 800d66e:	6878      	ldr	r0, [r7, #4]
 800d670:	f000 f892 	bl	800d798 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 800d674:	4603      	mov	r3, r0
 800d676:	6979      	ldr	r1, [r7, #20]
 800d678:	4618      	mov	r0, r3
 800d67a:	f000 f870 	bl	800d75e <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800d67e:	4603      	mov	r3, r0
 800d680:	4619      	mov	r1, r3
 800d682:	4620      	mov	r0, r4
 800d684:	f000 f89c 	bl	800d7c0 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 800d688:	60f8      	str	r0, [r7, #12]
  return Add(ShiftRight(x, exponent),
 800d68a:	6839      	ldr	r1, [r7, #0]
 800d68c:	6878      	ldr	r0, [r7, #4]
 800d68e:	f000 f874 	bl	800d77a <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 800d692:	4604      	mov	r4, r0
 800d694:	68f9      	ldr	r1, [r7, #12]
 800d696:	6938      	ldr	r0, [r7, #16]
 800d698:	f000 f8a0 	bl	800d7dc <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 800d69c:	4603      	mov	r3, r0
 800d69e:	6979      	ldr	r1, [r7, #20]
 800d6a0:	4618      	mov	r0, r3
 800d6a2:	f000 f85c 	bl	800d75e <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800d6a6:	4603      	mov	r3, r0
 800d6a8:	4619      	mov	r1, r3
 800d6aa:	4620      	mov	r0, r4
 800d6ac:	f000 f888 	bl	800d7c0 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 800d6b0:	4603      	mov	r3, r0
             BitAnd(MaskIfGreaterThan(remainder, threshold), one));
}
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	3724      	adds	r7, #36	; 0x24
 800d6b6:	46bd      	mov	sp, r7
 800d6b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d6ba:	bf00      	nop
 800d6bc:	0802929c 	.word	0x0802929c
 800d6c0:	080292ac 	.word	0x080292ac
 800d6c4:	08029308 	.word	0x08029308
 800d6c8:	08029380 	.word	0x08029380

0800d6cc <_ZN6tflite17CountLeadingZerosImEEiT_>:
  return result;
}
#endif

template <typename T>
int CountLeadingZeros(T integer_input) {
 800d6cc:	b480      	push	{r7}
 800d6ce:	b083      	sub	sp, #12
 800d6d0:	af00      	add	r7, sp, #0
 800d6d2:	6078      	str	r0, [r7, #4]
  static_assert(std::is_unsigned<T>::value,
                "Only unsigned integer types handled.");
#if defined(__GNUC__)
  return integer_input ? __builtin_clz(integer_input)
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d003      	beq.n	800d6e2 <_ZN6tflite17CountLeadingZerosImEEiT_+0x16>
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	fab3 f383 	clz	r3, r3
                       : std::numeric_limits<T>::digits;
 800d6e0:	e000      	b.n	800d6e4 <_ZN6tflite17CountLeadingZerosImEEiT_+0x18>
  return integer_input ? __builtin_clz(integer_input)
 800d6e2:	2320      	movs	r3, #32
    integer_input <<= 1;
    ++leading_zeros;
  }
  return leading_zeros;
#endif
}
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	370c      	adds	r7, #12
 800d6e8:	46bd      	mov	sp, r7
 800d6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ee:	4770      	bx	lr

0800d6f0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>:
                 min_bound),
        max_bound)));
  }

  RawType raw() const { return i_; }
  RawType& raw() { return i_; }
 800d6f0:	b480      	push	{r7}
 800d6f2:	b083      	sub	sp, #12
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	6078      	str	r0, [r7, #4]
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	4618      	mov	r0, r3
 800d6fc:	370c      	adds	r7, #12
 800d6fe:	46bd      	mov	sp, r7
 800d700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d704:	4770      	bx	lr

0800d706 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 800d706:	b590      	push	{r4, r7, lr}
 800d708:	b085      	sub	sp, #20
 800d70a:	af00      	add	r7, sp, #0
 800d70c:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 800d70e:	f107 030c 	add.w	r3, r7, #12
 800d712:	4618      	mov	r0, r3
 800d714:	f7ff ffec 	bl	800d6f0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800d718:	4604      	mov	r4, r0
 800d71a:	6878      	ldr	r0, [r7, #4]
 800d71c:	f000 f814 	bl	800d748 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800d720:	4603      	mov	r3, r0
 800d722:	6023      	str	r3, [r4, #0]
    return retval;
 800d724:	68fb      	ldr	r3, [r7, #12]
  }
 800d726:	4618      	mov	r0, r3
 800d728:	3714      	adds	r7, #20
 800d72a:	46bd      	mov	sp, r7
 800d72c:	bd90      	pop	{r4, r7, pc}

0800d72e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>:
// fixed-point value, regardless of the actual Scalar type. This allows
// writing generic code that applies just as well to the 32-bit and 16-bit
// cases. In the 16-bit case, the raw integer value is internally
// rounding-shifted by 16 bits to the right.
template <typename FixedPointType>
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
 800d72e:	b580      	push	{r7, lr}
 800d730:	b082      	sub	sp, #8
 800d732:	af00      	add	r7, sp, #0
 800d734:	6078      	str	r0, [r7, #4]
    std::int32_t int32_value) {
  typedef typename FixedPointType::ScalarRawType ScalarRawType;
  static constexpr int ScalarTypeBits = 8 * sizeof(ScalarRawType);
  return static_cast<ScalarRawType>(
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
 800d736:	2100      	movs	r1, #0
 800d738:	6878      	ldr	r0, [r7, #4]
 800d73a:	f7ff ff53 	bl	800d5e4 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 800d73e:	4603      	mov	r3, r0
}
 800d740:	4618      	mov	r0, r3
 800d742:	3708      	adds	r7, #8
 800d744:	46bd      	mov	sp, r7
 800d746:	bd80      	pop	{r7, pc}

0800d748 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>:
tRawType Dup(typename FixedPointRawTypeTraits<tRawType>::ScalarRawType x) {
 800d748:	b480      	push	{r7}
 800d74a:	b083      	sub	sp, #12
 800d74c:	af00      	add	r7, sp, #0
 800d74e:	6078      	str	r0, [r7, #4]
  return x;
 800d750:	687b      	ldr	r3, [r7, #4]
}
 800d752:	4618      	mov	r0, r3
 800d754:	370c      	adds	r7, #12
 800d756:	46bd      	mov	sp, r7
 800d758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d75c:	4770      	bx	lr

0800d75e <_ZN8gemmlowp6BitAndIlEET_S1_S1_>:
tIntegerType BitAnd(tIntegerType a, tIntegerType b) {
 800d75e:	b480      	push	{r7}
 800d760:	b083      	sub	sp, #12
 800d762:	af00      	add	r7, sp, #0
 800d764:	6078      	str	r0, [r7, #4]
 800d766:	6039      	str	r1, [r7, #0]
  return a & b;
 800d768:	687a      	ldr	r2, [r7, #4]
 800d76a:	683b      	ldr	r3, [r7, #0]
 800d76c:	4013      	ands	r3, r2
}
 800d76e:	4618      	mov	r0, r3
 800d770:	370c      	adds	r7, #12
 800d772:	46bd      	mov	sp, r7
 800d774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d778:	4770      	bx	lr

0800d77a <_ZN8gemmlowp10ShiftRightIlEET_S1_i>:
tIntegerType ShiftRight(tIntegerType a, int offset) {
 800d77a:	b480      	push	{r7}
 800d77c:	b083      	sub	sp, #12
 800d77e:	af00      	add	r7, sp, #0
 800d780:	6078      	str	r0, [r7, #4]
 800d782:	6039      	str	r1, [r7, #0]
  return a >> offset;
 800d784:	687a      	ldr	r2, [r7, #4]
 800d786:	683b      	ldr	r3, [r7, #0]
 800d788:	fa42 f303 	asr.w	r3, r2, r3
}
 800d78c:	4618      	mov	r0, r3
 800d78e:	370c      	adds	r7, #12
 800d790:	46bd      	mov	sp, r7
 800d792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d796:	4770      	bx	lr

0800d798 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>:
tIntegerType MaskIfLessThan(tIntegerType a, tIntegerType b) {
 800d798:	b580      	push	{r7, lr}
 800d79a:	b082      	sub	sp, #8
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	6078      	str	r0, [r7, #4]
 800d7a0:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a < b);
 800d7a2:	687a      	ldr	r2, [r7, #4]
 800d7a4:	683b      	ldr	r3, [r7, #0]
 800d7a6:	429a      	cmp	r2, r3
 800d7a8:	bfb4      	ite	lt
 800d7aa:	2301      	movlt	r3, #1
 800d7ac:	2300      	movge	r3, #0
 800d7ae:	b2db      	uxtb	r3, r3
 800d7b0:	4618      	mov	r0, r3
 800d7b2:	f000 f841 	bl	800d838 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800d7b6:	4603      	mov	r3, r0
}
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	3708      	adds	r7, #8
 800d7bc:	46bd      	mov	sp, r7
 800d7be:	bd80      	pop	{r7, pc}

0800d7c0 <_ZN8gemmlowp3AddIlEET_S1_S1_>:
tIntegerType Add(tIntegerType a, tIntegerType b) {
 800d7c0:	b480      	push	{r7}
 800d7c2:	b083      	sub	sp, #12
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	6078      	str	r0, [r7, #4]
 800d7c8:	6039      	str	r1, [r7, #0]
  return a + b;
 800d7ca:	687a      	ldr	r2, [r7, #4]
 800d7cc:	683b      	ldr	r3, [r7, #0]
 800d7ce:	4413      	add	r3, r2
}
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	370c      	adds	r7, #12
 800d7d4:	46bd      	mov	sp, r7
 800d7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7da:	4770      	bx	lr

0800d7dc <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>:
tIntegerType MaskIfGreaterThan(tIntegerType a, tIntegerType b) {
 800d7dc:	b580      	push	{r7, lr}
 800d7de:	b082      	sub	sp, #8
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	6078      	str	r0, [r7, #4]
 800d7e4:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a > b);
 800d7e6:	687a      	ldr	r2, [r7, #4]
 800d7e8:	683b      	ldr	r3, [r7, #0]
 800d7ea:	429a      	cmp	r2, r3
 800d7ec:	bfcc      	ite	gt
 800d7ee:	2301      	movgt	r3, #1
 800d7f0:	2300      	movle	r3, #0
 800d7f2:	b2db      	uxtb	r3, r3
 800d7f4:	4618      	mov	r0, r3
 800d7f6:	f000 f81f 	bl	800d838 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800d7fa:	4603      	mov	r3, r0
}
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	3708      	adds	r7, #8
 800d800:	46bd      	mov	sp, r7
 800d802:	bd80      	pop	{r7, pc}

0800d804 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 800d804:	b580      	push	{r7, lr}
 800d806:	b082      	sub	sp, #8
 800d808:	af00      	add	r7, sp, #0
 800d80a:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 800d80c:	6878      	ldr	r0, [r7, #4]
 800d80e:	f000 f824 	bl	800d85a <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin1ElLin1EE4evalEl>
 800d812:	4603      	mov	r3, r0
}
 800d814:	4618      	mov	r0, r3
 800d816:	3708      	adds	r7, #8
 800d818:	46bd      	mov	sp, r7
 800d81a:	bd80      	pop	{r7, pc}

0800d81c <_ZN8gemmlowp3SubIlEET_S1_S1_>:
tIntegerType Sub(tIntegerType a, tIntegerType b) {
 800d81c:	b480      	push	{r7}
 800d81e:	b083      	sub	sp, #12
 800d820:	af00      	add	r7, sp, #0
 800d822:	6078      	str	r0, [r7, #4]
 800d824:	6039      	str	r1, [r7, #0]
  return a - b;
 800d826:	687a      	ldr	r2, [r7, #4]
 800d828:	683b      	ldr	r3, [r7, #0]
 800d82a:	1ad3      	subs	r3, r2, r3
}
 800d82c:	4618      	mov	r0, r3
 800d82e:	370c      	adds	r7, #12
 800d830:	46bd      	mov	sp, r7
 800d832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d836:	4770      	bx	lr

0800d838 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>:
tIntegerType MaskIfNonZero(tIntegerType a) {
 800d838:	b580      	push	{r7, lr}
 800d83a:	b082      	sub	sp, #8
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	6078      	str	r0, [r7, #4]
  return a ? BitNot(zero) : zero;
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	2b00      	cmp	r3, #0
 800d844:	d004      	beq.n	800d850 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x18>
 800d846:	2000      	movs	r0, #0
 800d848:	f000 f814 	bl	800d874 <_ZN8gemmlowp6BitNotIlEET_S1_>
 800d84c:	4603      	mov	r3, r0
 800d84e:	e000      	b.n	800d852 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x1a>
 800d850:	2300      	movs	r3, #0
}
 800d852:	4618      	mov	r0, r3
 800d854:	3708      	adds	r7, #8
 800d856:	46bd      	mov	sp, r7
 800d858:	bd80      	pop	{r7, pc}

0800d85a <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin1ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 800d85a:	b580      	push	{r7, lr}
 800d85c:	b082      	sub	sp, #8
 800d85e:	af00      	add	r7, sp, #0
 800d860:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 800d862:	2101      	movs	r1, #1
 800d864:	6878      	ldr	r0, [r7, #4]
 800d866:	f7ff febd 	bl	800d5e4 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 800d86a:	4603      	mov	r3, r0
  }
 800d86c:	4618      	mov	r0, r3
 800d86e:	3708      	adds	r7, #8
 800d870:	46bd      	mov	sp, r7
 800d872:	bd80      	pop	{r7, pc}

0800d874 <_ZN8gemmlowp6BitNotIlEET_S1_>:
tIntegerType BitNot(tIntegerType a) {
 800d874:	b480      	push	{r7}
 800d876:	b083      	sub	sp, #12
 800d878:	af00      	add	r7, sp, #0
 800d87a:	6078      	str	r0, [r7, #4]
  return ~a;
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	43db      	mvns	r3, r3
}
 800d880:	4618      	mov	r0, r3
 800d882:	370c      	adds	r7, #12
 800d884:	46bd      	mov	sp, r7
 800d886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d88a:	4770      	bx	lr

0800d88c <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>:
tIntegerType ShiftLeft(tIntegerType a, int offset) {
 800d88c:	b480      	push	{r7}
 800d88e:	b089      	sub	sp, #36	; 0x24
 800d890:	af00      	add	r7, sp, #0
 800d892:	6078      	str	r0, [r7, #4]
 800d894:	6039      	str	r1, [r7, #0]
  const std::int64_t wide_a = static_cast<std::int64_t>(a);
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	461a      	mov	r2, r3
 800d89a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800d89e:	e9c7 2306 	strd	r2, r3, [r7, #24]
  const std::int64_t wide_shifted = wide_a * (1 << offset);
 800d8a2:	2201      	movs	r2, #1
 800d8a4:	683b      	ldr	r3, [r7, #0]
 800d8a6:	fa02 f303 	lsl.w	r3, r2, r3
 800d8aa:	461a      	mov	r2, r3
 800d8ac:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800d8b0:	69f9      	ldr	r1, [r7, #28]
 800d8b2:	fb02 f001 	mul.w	r0, r2, r1
 800d8b6:	69b9      	ldr	r1, [r7, #24]
 800d8b8:	fb03 f101 	mul.w	r1, r3, r1
 800d8bc:	4401      	add	r1, r0
 800d8be:	69b8      	ldr	r0, [r7, #24]
 800d8c0:	fba0 2302 	umull	r2, r3, r0, r2
 800d8c4:	4419      	add	r1, r3
 800d8c6:	460b      	mov	r3, r1
 800d8c8:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800d8cc:	e9c7 2304 	strd	r2, r3, [r7, #16]
  const auto min = std::numeric_limits<tIntegerType>::min();
 800d8d0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d8d4:	60fb      	str	r3, [r7, #12]
  const auto max = std::numeric_limits<tIntegerType>::max();
 800d8d6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800d8da:	60bb      	str	r3, [r7, #8]
             ? min
 800d8dc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d8e0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800d8e4:	f173 33ff 	sbcs.w	r3, r3, #4294967295	; 0xffffffff
 800d8e8:	db0e      	blt.n	800d908 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x7c>
             : wide_shifted > max ? max
 800d8ea:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d8ee:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800d8f2:	f04f 0100 	mov.w	r1, #0
 800d8f6:	4290      	cmp	r0, r2
 800d8f8:	eb71 0303 	sbcs.w	r3, r1, r3
 800d8fc:	db01      	blt.n	800d902 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x76>
 800d8fe:	693b      	ldr	r3, [r7, #16]
                                  : static_cast<tIntegerType>(wide_shifted);
 800d900:	e004      	b.n	800d90c <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x80>
             : wide_shifted > max ? max
 800d902:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
                                  : static_cast<tIntegerType>(wide_shifted);
 800d906:	e001      	b.n	800d90c <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x80>
             ? min
 800d908:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800d90c:	4618      	mov	r0, r3
 800d90e:	3724      	adds	r7, #36	; 0x24
 800d910:	46bd      	mov	sp, r7
 800d912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d916:	4770      	bx	lr

0800d918 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>:
tIntegerType SelectUsingMask(tIntegerType if_mask, tIntegerType then_val,
 800d918:	b590      	push	{r4, r7, lr}
 800d91a:	b085      	sub	sp, #20
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	60f8      	str	r0, [r7, #12]
 800d920:	60b9      	str	r1, [r7, #8]
 800d922:	607a      	str	r2, [r7, #4]
  return BitXor(BitAnd(if_mask, then_val), BitAnd(BitNot(if_mask), else_val));
 800d924:	68b9      	ldr	r1, [r7, #8]
 800d926:	68f8      	ldr	r0, [r7, #12]
 800d928:	f7ff ff19 	bl	800d75e <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800d92c:	4604      	mov	r4, r0
 800d92e:	68f8      	ldr	r0, [r7, #12]
 800d930:	f7ff ffa0 	bl	800d874 <_ZN8gemmlowp6BitNotIlEET_S1_>
 800d934:	4603      	mov	r3, r0
 800d936:	6879      	ldr	r1, [r7, #4]
 800d938:	4618      	mov	r0, r3
 800d93a:	f7ff ff10 	bl	800d75e <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800d93e:	4603      	mov	r3, r0
 800d940:	4619      	mov	r1, r3
 800d942:	4620      	mov	r0, r4
 800d944:	f000 f805 	bl	800d952 <_ZN8gemmlowp6BitXorIlEET_S1_S1_>
 800d948:	4603      	mov	r3, r0
}
 800d94a:	4618      	mov	r0, r3
 800d94c:	3714      	adds	r7, #20
 800d94e:	46bd      	mov	sp, r7
 800d950:	bd90      	pop	{r4, r7, pc}

0800d952 <_ZN8gemmlowp6BitXorIlEET_S1_S1_>:
tIntegerType BitXor(tIntegerType a, tIntegerType b) {
 800d952:	b480      	push	{r7}
 800d954:	b083      	sub	sp, #12
 800d956:	af00      	add	r7, sp, #0
 800d958:	6078      	str	r0, [r7, #4]
 800d95a:	6039      	str	r1, [r7, #0]
  return a ^ b;
 800d95c:	687a      	ldr	r2, [r7, #4]
 800d95e:	683b      	ldr	r3, [r7, #0]
 800d960:	4053      	eors	r3, r2
}
 800d962:	4618      	mov	r0, r3
 800d964:	370c      	adds	r7, #12
 800d966:	46bd      	mov	sp, r7
 800d968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d96c:	4770      	bx	lr

0800d96e <_ZNSt14numeric_limitsIaE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SCHAR_MAX__ - 1; }
 800d96e:	b480      	push	{r7}
 800d970:	af00      	add	r7, sp, #0
 800d972:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 800d976:	4618      	mov	r0, r3
 800d978:	46bd      	mov	sp, r7
 800d97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d97e:	4770      	bx	lr

0800d980 <_ZNSt14numeric_limitsIaE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__; }
 800d980:	b480      	push	{r7}
 800d982:	af00      	add	r7, sp, #0
 800d984:	237f      	movs	r3, #127	; 0x7f
 800d986:	4618      	mov	r0, r3
 800d988:	46bd      	mov	sp, r7
 800d98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d98e:	4770      	bx	lr

0800d990 <_ZNSt14numeric_limitsIhE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return 0; }
 800d990:	b480      	push	{r7}
 800d992:	af00      	add	r7, sp, #0
 800d994:	2300      	movs	r3, #0
 800d996:	4618      	mov	r0, r3
 800d998:	46bd      	mov	sp, r7
 800d99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d99e:	4770      	bx	lr

0800d9a0 <_ZNSt14numeric_limitsIhE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__ * 2U + 1; }
 800d9a0:	b480      	push	{r7}
 800d9a2:	af00      	add	r7, sp, #0
 800d9a4:	23ff      	movs	r3, #255	; 0xff
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	46bd      	mov	sp, r7
 800d9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ae:	4770      	bx	lr

0800d9b0 <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>:
TfLiteStatus GetIntermediatesSafe(const TfLiteContext* context,
                                  const TfLiteNode* node, int index,
                                  TfLiteTensor** tensor);
#endif  // TF_LITE_STATIC_MEMORY

inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
 800d9b0:	b480      	push	{r7}
 800d9b2:	b083      	sub	sp, #12
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	6078      	str	r0, [r7, #4]
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	689b      	ldr	r3, [r3, #8]
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	4618      	mov	r0, r3
 800d9c0:	370c      	adds	r7, #12
 800d9c2:	46bd      	mov	sp, r7
 800d9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c8:	4770      	bx	lr

0800d9ca <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>:
inline int SizeOfDimension(const TfLiteTensor* t, int dim) {
 800d9ca:	b480      	push	{r7}
 800d9cc:	b083      	sub	sp, #12
 800d9ce:	af00      	add	r7, sp, #0
 800d9d0:	6078      	str	r0, [r7, #4]
 800d9d2:	6039      	str	r1, [r7, #0]
  return t->dims->data[dim];
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	689a      	ldr	r2, [r3, #8]
 800d9d8:	683b      	ldr	r3, [r7, #0]
 800d9da:	009b      	lsls	r3, r3, #2
 800d9dc:	4413      	add	r3, r2
 800d9de:	685b      	ldr	r3, [r3, #4]
}
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	370c      	adds	r7, #12
 800d9e4:	46bd      	mov	sp, r7
 800d9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ea:	4770      	bx	lr

0800d9ec <_ZSt3minIiERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800d9ec:	b480      	push	{r7}
 800d9ee:	b083      	sub	sp, #12
 800d9f0:	af00      	add	r7, sp, #0
 800d9f2:	6078      	str	r0, [r7, #4]
 800d9f4:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800d9f6:	683b      	ldr	r3, [r7, #0]
 800d9f8:	681a      	ldr	r2, [r3, #0]
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	429a      	cmp	r2, r3
 800da00:	da01      	bge.n	800da06 <_ZSt3minIiERKT_S2_S2_+0x1a>
	return __b;
 800da02:	683b      	ldr	r3, [r7, #0]
 800da04:	e000      	b.n	800da08 <_ZSt3minIiERKT_S2_S2_+0x1c>
      return __a;
 800da06:	687b      	ldr	r3, [r7, #4]
    }
 800da08:	4618      	mov	r0, r3
 800da0a:	370c      	adds	r7, #12
 800da0c:	46bd      	mov	sp, r7
 800da0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da12:	4770      	bx	lr

0800da14 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>:

namespace {

// Assumes tensor_index is a valid index (in bounds)
inline TfLiteTensor* GetTensorAtIndex(const TfLiteContext* context,
                                      int tensor_index) {
 800da14:	b580      	push	{r7, lr}
 800da16:	b082      	sub	sp, #8
 800da18:	af00      	add	r7, sp, #0
 800da1a:	6078      	str	r0, [r7, #4]
 800da1c:	6039      	str	r1, [r7, #0]
  if (context->tensors != nullptr) {
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	689b      	ldr	r3, [r3, #8]
 800da22:	2b00      	cmp	r3, #0
 800da24:	d005      	beq.n	800da32 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti+0x1e>
    return &context->tensors[tensor_index];
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	689a      	ldr	r2, [r3, #8]
 800da2a:	683b      	ldr	r3, [r7, #0]
 800da2c:	019b      	lsls	r3, r3, #6
 800da2e:	4413      	add	r3, r2
 800da30:	e006      	b.n	800da40 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti+0x2c>
  } else {
    return context->GetTensor(context, tensor_index);
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800da36:	6839      	ldr	r1, [r7, #0]
 800da38:	6878      	ldr	r0, [r7, #4]
 800da3a:	4798      	blx	r3
 800da3c:	4603      	mov	r3, r0
 800da3e:	bf00      	nop
  }
}
 800da40:	4618      	mov	r0, r3
 800da42:	3708      	adds	r7, #8
 800da44:	46bd      	mov	sp, r7
 800da46:	bd80      	pop	{r7, pc}

0800da48 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>:
}

// Same as above but returns -1 for invalid inputs instead of status + logging
// error.
inline int ValidateTensorIndexing(const TfLiteContext* context, int index,
                                  int max_size, const int* tensor_indices) {
 800da48:	b480      	push	{r7}
 800da4a:	b087      	sub	sp, #28
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	60f8      	str	r0, [r7, #12]
 800da50:	60b9      	str	r1, [r7, #8]
 800da52:	607a      	str	r2, [r7, #4]
 800da54:	603b      	str	r3, [r7, #0]
  if (index >= 0 && index < max_size) {
 800da56:	68bb      	ldr	r3, [r7, #8]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	db0f      	blt.n	800da7c <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
 800da5c:	68ba      	ldr	r2, [r7, #8]
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	429a      	cmp	r2, r3
 800da62:	da0b      	bge.n	800da7c <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
    const int tensor_index = tensor_indices[index];
 800da64:	68bb      	ldr	r3, [r7, #8]
 800da66:	009b      	lsls	r3, r3, #2
 800da68:	683a      	ldr	r2, [r7, #0]
 800da6a:	4413      	add	r3, r2
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	617b      	str	r3, [r7, #20]
    if (tensor_index != kTfLiteOptionalTensor) {
 800da70:	697b      	ldr	r3, [r7, #20]
 800da72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800da76:	d001      	beq.n	800da7c <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
      return tensor_index;
 800da78:	697b      	ldr	r3, [r7, #20]
 800da7a:	e001      	b.n	800da80 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x38>
    }
  }
  return -1;
 800da7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800da80:	4618      	mov	r0, r3
 800da82:	371c      	adds	r7, #28
 800da84:	46bd      	mov	sp, r7
 800da86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da8a:	4770      	bx	lr

0800da8c <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei>:

inline TfLiteTensor* GetMutableInput(const TfLiteContext* context,
                                     const TfLiteNode* node, int index) {
 800da8c:	b580      	push	{r7, lr}
 800da8e:	b086      	sub	sp, #24
 800da90:	af00      	add	r7, sp, #0
 800da92:	60f8      	str	r0, [r7, #12]
 800da94:	60b9      	str	r1, [r7, #8]
 800da96:	607a      	str	r2, [r7, #4]
  const int tensor_index = ValidateTensorIndexing(
      context, index, node->inputs->size, node->inputs->data);
 800da98:	68bb      	ldr	r3, [r7, #8]
 800da9a:	681b      	ldr	r3, [r3, #0]
  const int tensor_index = ValidateTensorIndexing(
 800da9c:	681a      	ldr	r2, [r3, #0]
      context, index, node->inputs->size, node->inputs->data);
 800da9e:	68bb      	ldr	r3, [r7, #8]
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	3304      	adds	r3, #4
  const int tensor_index = ValidateTensorIndexing(
 800daa4:	6879      	ldr	r1, [r7, #4]
 800daa6:	68f8      	ldr	r0, [r7, #12]
 800daa8:	f7ff ffce 	bl	800da48 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>
 800daac:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 800daae:	697b      	ldr	r3, [r7, #20]
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	da01      	bge.n	800dab8 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei+0x2c>
    return nullptr;
 800dab4:	2300      	movs	r3, #0
 800dab6:	e005      	b.n	800dac4 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei+0x38>
  }
  return GetTensorAtIndex(context, tensor_index);
 800dab8:	6979      	ldr	r1, [r7, #20]
 800daba:	68f8      	ldr	r0, [r7, #12]
 800dabc:	f7ff ffaa 	bl	800da14 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>
 800dac0:	4603      	mov	r3, r0
 800dac2:	bf00      	nop
}
 800dac4:	4618      	mov	r0, r3
 800dac6:	3718      	adds	r7, #24
 800dac8:	46bd      	mov	sp, r7
 800daca:	bd80      	pop	{r7, pc}

0800dacc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>:
}

}  // anonymous namespace.

const TfLiteTensor* GetInput(const TfLiteContext* context,
                             const TfLiteNode* node, int index) {
 800dacc:	b580      	push	{r7, lr}
 800dace:	b084      	sub	sp, #16
 800dad0:	af00      	add	r7, sp, #0
 800dad2:	60f8      	str	r0, [r7, #12]
 800dad4:	60b9      	str	r1, [r7, #8]
 800dad6:	607a      	str	r2, [r7, #4]
  return GetMutableInput(context, node, index);
 800dad8:	687a      	ldr	r2, [r7, #4]
 800dada:	68b9      	ldr	r1, [r7, #8]
 800dadc:	68f8      	ldr	r0, [r7, #12]
 800dade:	f7ff ffd5 	bl	800da8c <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei>
 800dae2:	4603      	mov	r3, r0
}
 800dae4:	4618      	mov	r0, r3
 800dae6:	3710      	adds	r7, #16
 800dae8:	46bd      	mov	sp, r7
 800daea:	bd80      	pop	{r7, pc}

0800daec <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>:
  if (tensor == nullptr) return nullptr;
  return tensor->is_variable ? tensor : nullptr;
}

TfLiteTensor* GetOutput(TfLiteContext* context, const TfLiteNode* node,
                        int index) {
 800daec:	b580      	push	{r7, lr}
 800daee:	b086      	sub	sp, #24
 800daf0:	af00      	add	r7, sp, #0
 800daf2:	60f8      	str	r0, [r7, #12]
 800daf4:	60b9      	str	r1, [r7, #8]
 800daf6:	607a      	str	r2, [r7, #4]
  const int tensor_index = ValidateTensorIndexing(
      context, index, node->outputs->size, node->outputs->data);
 800daf8:	68bb      	ldr	r3, [r7, #8]
 800dafa:	685b      	ldr	r3, [r3, #4]
  const int tensor_index = ValidateTensorIndexing(
 800dafc:	681a      	ldr	r2, [r3, #0]
      context, index, node->outputs->size, node->outputs->data);
 800dafe:	68bb      	ldr	r3, [r7, #8]
 800db00:	685b      	ldr	r3, [r3, #4]
 800db02:	3304      	adds	r3, #4
  const int tensor_index = ValidateTensorIndexing(
 800db04:	6879      	ldr	r1, [r7, #4]
 800db06:	68f8      	ldr	r0, [r7, #12]
 800db08:	f7ff ff9e 	bl	800da48 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>
 800db0c:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 800db0e:	697b      	ldr	r3, [r7, #20]
 800db10:	2b00      	cmp	r3, #0
 800db12:	da01      	bge.n	800db18 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x2c>
    return nullptr;
 800db14:	2300      	movs	r3, #0
 800db16:	e005      	b.n	800db24 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x38>
  }
  return GetTensorAtIndex(context, tensor_index);
 800db18:	6979      	ldr	r1, [r7, #20]
 800db1a:	68f8      	ldr	r0, [r7, #12]
 800db1c:	f7ff ff7a 	bl	800da14 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>
 800db20:	4603      	mov	r3, r0
 800db22:	bf00      	nop
}
 800db24:	4618      	mov	r0, r3
 800db26:	3718      	adds	r7, #24
 800db28:	46bd      	mov	sp, r7
 800db2a:	bd80      	pop	{r7, pc}

0800db2c <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>:
  *tensor = GetTensorAtIndex(context, tensor_index);
  return kTfLiteOk;
}

const TfLiteTensor* GetOptionalInputTensor(const TfLiteContext* context,
                                           const TfLiteNode* node, int index) {
 800db2c:	b580      	push	{r7, lr}
 800db2e:	b084      	sub	sp, #16
 800db30:	af00      	add	r7, sp, #0
 800db32:	60f8      	str	r0, [r7, #12]
 800db34:	60b9      	str	r1, [r7, #8]
 800db36:	607a      	str	r2, [r7, #4]
  return GetInput(context, node, index);
 800db38:	687a      	ldr	r2, [r7, #4]
 800db3a:	68b9      	ldr	r1, [r7, #8]
 800db3c:	68f8      	ldr	r0, [r7, #12]
 800db3e:	f7ff ffc5 	bl	800dacc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800db42:	4603      	mov	r3, r0
}
 800db44:	4618      	mov	r0, r3
 800db46:	3710      	adds	r7, #16
 800db48:	46bd      	mov	sp, r7
 800db4a:	bd80      	pop	{r7, pc}

0800db4c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i>:
    TfLiteContext* context, const TfLiteTensor* input,
    const TfLiteTensor* filter, const TfLiteTensor* bias, TfLiteTensor* output,
    const TfLiteFusedActivation& activation, int32_t* multiplier, int* shift,
    int32_t* output_activation_min, int32_t* output_activation_max,
    int32_t* per_channel_multiplier, int32_t* per_channel_shift,
    int num_channels) {
 800db4c:	b5b0      	push	{r4, r5, r7, lr}
 800db4e:	b09c      	sub	sp, #112	; 0x70
 800db50:	af04      	add	r7, sp, #16
 800db52:	60f8      	str	r0, [r7, #12]
 800db54:	60b9      	str	r1, [r7, #8]
 800db56:	607a      	str	r2, [r7, #4]
 800db58:	603b      	str	r3, [r7, #0]
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
 800db5a:	68bb      	ldr	r3, [r7, #8]
 800db5c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800db60:	2b01      	cmp	r3, #1
 800db62:	d013      	beq.n	800db8c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x40>
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	695c      	ldr	r4, [r3, #20]
 800db68:	68bb      	ldr	r3, [r7, #8]
 800db6a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800db6e:	461a      	mov	r2, r3
 800db70:	2301      	movs	r3, #1
 800db72:	9303      	str	r3, [sp, #12]
 800db74:	9202      	str	r2, [sp, #8]
 800db76:	4b98      	ldr	r3, [pc, #608]	; (800ddd8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x28c>)
 800db78:	9301      	str	r3, [sp, #4]
 800db7a:	4b98      	ldr	r3, [pc, #608]	; (800dddc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x290>)
 800db7c:	9300      	str	r3, [sp, #0]
 800db7e:	23da      	movs	r3, #218	; 0xda
 800db80:	4a97      	ldr	r2, [pc, #604]	; (800dde0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x294>)
 800db82:	4998      	ldr	r1, [pc, #608]	; (800dde4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x298>)
 800db84:	68f8      	ldr	r0, [r7, #12]
 800db86:	47a0      	blx	r4
 800db88:	2301      	movs	r3, #1
 800db8a:	e173      	b.n	800de74 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x328>
                    kTfLiteAffineQuantization);
  TF_LITE_ENSURE_EQ(context, filter->quantization.type,
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800db92:	2b01      	cmp	r3, #1
 800db94:	d013      	beq.n	800dbbe <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x72>
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	695c      	ldr	r4, [r3, #20]
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dba0:	461a      	mov	r2, r3
 800dba2:	2301      	movs	r3, #1
 800dba4:	9303      	str	r3, [sp, #12]
 800dba6:	9202      	str	r2, [sp, #8]
 800dba8:	4b8b      	ldr	r3, [pc, #556]	; (800ddd8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x28c>)
 800dbaa:	9301      	str	r3, [sp, #4]
 800dbac:	4b8e      	ldr	r3, [pc, #568]	; (800dde8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x29c>)
 800dbae:	9300      	str	r3, [sp, #0]
 800dbb0:	23dc      	movs	r3, #220	; 0xdc
 800dbb2:	4a8b      	ldr	r2, [pc, #556]	; (800dde0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x294>)
 800dbb4:	498b      	ldr	r1, [pc, #556]	; (800dde4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x298>)
 800dbb6:	68f8      	ldr	r0, [r7, #12]
 800dbb8:	47a0      	blx	r4
 800dbba:	2301      	movs	r3, #1
 800dbbc:	e15a      	b.n	800de74 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x328>
  // quantization is properly populated.
  // TF_LITE_ENSURE_EQ(context, bias->quantization.type,
  // kTfLiteAffineQuantization);

  // Check data type.
  const auto* affine_quantization =
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbc2:	65bb      	str	r3, [r7, #88]	; 0x58
      reinterpret_cast<TfLiteAffineQuantization*>(filter->quantization.params);
  TF_LITE_ENSURE(context, affine_quantization);
 800dbc4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d10a      	bne.n	800dbe0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x94>
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	695c      	ldr	r4, [r3, #20]
 800dbce:	4b87      	ldr	r3, [pc, #540]	; (800ddec <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2a0>)
 800dbd0:	9300      	str	r3, [sp, #0]
 800dbd2:	23e7      	movs	r3, #231	; 0xe7
 800dbd4:	4a82      	ldr	r2, [pc, #520]	; (800dde0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x294>)
 800dbd6:	4986      	ldr	r1, [pc, #536]	; (800ddf0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2a4>)
 800dbd8:	68f8      	ldr	r0, [r7, #12]
 800dbda:	47a0      	blx	r4
 800dbdc:	2301      	movs	r3, #1
 800dbde:	e149      	b.n	800de74 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x328>
  TF_LITE_ENSURE(context, affine_quantization->scale);
 800dbe0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d10a      	bne.n	800dbfe <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0xb2>
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	695c      	ldr	r4, [r3, #20]
 800dbec:	4b81      	ldr	r3, [pc, #516]	; (800ddf4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2a8>)
 800dbee:	9300      	str	r3, [sp, #0]
 800dbf0:	23e8      	movs	r3, #232	; 0xe8
 800dbf2:	4a7b      	ldr	r2, [pc, #492]	; (800dde0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x294>)
 800dbf4:	497e      	ldr	r1, [pc, #504]	; (800ddf0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2a4>)
 800dbf6:	68f8      	ldr	r0, [r7, #12]
 800dbf8:	47a0      	blx	r4
 800dbfa:	2301      	movs	r3, #1
 800dbfc:	e13a      	b.n	800de74 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x328>
  const bool is_per_channel = affine_quantization->scale->size > 1;
 800dbfe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	2b01      	cmp	r3, #1
 800dc06:	bfcc      	ite	gt
 800dc08:	2301      	movgt	r3, #1
 800dc0a:	2300      	movle	r3, #0
 800dc0c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if (is_per_channel) {
 800dc10:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d067      	beq.n	800dce8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x19c>
    //  Currently only Int8/Int16 is supported for per channel quantization.
    TF_LITE_ENSURE(context,
 800dc18:	68bb      	ldr	r3, [r7, #8]
 800dc1a:	781b      	ldrb	r3, [r3, #0]
 800dc1c:	2b09      	cmp	r3, #9
 800dc1e:	d00e      	beq.n	800dc3e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0xf2>
 800dc20:	68bb      	ldr	r3, [r7, #8]
 800dc22:	781b      	ldrb	r3, [r3, #0]
 800dc24:	2b07      	cmp	r3, #7
 800dc26:	d00a      	beq.n	800dc3e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0xf2>
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	695c      	ldr	r4, [r3, #20]
 800dc2c:	4b72      	ldr	r3, [pc, #456]	; (800ddf8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2ac>)
 800dc2e:	9300      	str	r3, [sp, #0]
 800dc30:	23ec      	movs	r3, #236	; 0xec
 800dc32:	4a6b      	ldr	r2, [pc, #428]	; (800dde0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x294>)
 800dc34:	496e      	ldr	r1, [pc, #440]	; (800ddf0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2a4>)
 800dc36:	68f8      	ldr	r0, [r7, #12]
 800dc38:	47a0      	blx	r4
 800dc3a:	2301      	movs	r3, #1
 800dc3c:	e11a      	b.n	800de74 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x328>
                   input->type == kTfLiteInt8 || input->type == kTfLiteInt16);
    TF_LITE_ENSURE_EQ(context, filter->type, kTfLiteInt8);
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	781b      	ldrb	r3, [r3, #0]
 800dc42:	2b09      	cmp	r3, #9
 800dc44:	d012      	beq.n	800dc6c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x120>
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	695c      	ldr	r4, [r3, #20]
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	781b      	ldrb	r3, [r3, #0]
 800dc4e:	461a      	mov	r2, r3
 800dc50:	2309      	movs	r3, #9
 800dc52:	9303      	str	r3, [sp, #12]
 800dc54:	9202      	str	r2, [sp, #8]
 800dc56:	4b69      	ldr	r3, [pc, #420]	; (800ddfc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2b0>)
 800dc58:	9301      	str	r3, [sp, #4]
 800dc5a:	4b69      	ldr	r3, [pc, #420]	; (800de00 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2b4>)
 800dc5c:	9300      	str	r3, [sp, #0]
 800dc5e:	23ee      	movs	r3, #238	; 0xee
 800dc60:	4a5f      	ldr	r2, [pc, #380]	; (800dde0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x294>)
 800dc62:	4960      	ldr	r1, [pc, #384]	; (800dde4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x298>)
 800dc64:	68f8      	ldr	r0, [r7, #12]
 800dc66:	47a0      	blx	r4
 800dc68:	2301      	movs	r3, #1
 800dc6a:	e103      	b.n	800de74 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x328>
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size, num_channels);
 800dc6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800dc76:	429a      	cmp	r2, r3
 800dc78:	d013      	beq.n	800dca2 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x156>
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	695c      	ldr	r4, [r3, #20]
 800dc7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800dc88:	9203      	str	r2, [sp, #12]
 800dc8a:	9302      	str	r3, [sp, #8]
 800dc8c:	4b5d      	ldr	r3, [pc, #372]	; (800de04 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2b8>)
 800dc8e:	9301      	str	r3, [sp, #4]
 800dc90:	4b5d      	ldr	r3, [pc, #372]	; (800de08 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2bc>)
 800dc92:	9300      	str	r3, [sp, #0]
 800dc94:	23ef      	movs	r3, #239	; 0xef
 800dc96:	4a52      	ldr	r2, [pc, #328]	; (800dde0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x294>)
 800dc98:	4952      	ldr	r1, [pc, #328]	; (800dde4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x298>)
 800dc9a:	68f8      	ldr	r0, [r7, #12]
 800dc9c:	47a0      	blx	r4
 800dc9e:	2301      	movs	r3, #1
 800dca0:	e0e8      	b.n	800de74 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x328>
    TF_LITE_ENSURE_EQ(
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	689a      	ldr	r2, [r3, #8]
 800dca6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dca8:	689b      	ldr	r3, [r3, #8]
 800dcaa:	009b      	lsls	r3, r3, #2
 800dcac:	4413      	add	r3, r2
 800dcae:	685b      	ldr	r3, [r3, #4]
 800dcb0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800dcb4:	429a      	cmp	r2, r3
 800dcb6:	d017      	beq.n	800dce8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x19c>
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	695c      	ldr	r4, [r3, #20]
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	689a      	ldr	r2, [r3, #8]
 800dcc0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dcc2:	689b      	ldr	r3, [r3, #8]
 800dcc4:	009b      	lsls	r3, r3, #2
 800dcc6:	4413      	add	r3, r2
 800dcc8:	685b      	ldr	r3, [r3, #4]
 800dcca:	9303      	str	r3, [sp, #12]
 800dccc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dcd0:	9302      	str	r3, [sp, #8]
 800dcd2:	4b4e      	ldr	r3, [pc, #312]	; (800de0c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2c0>)
 800dcd4:	9301      	str	r3, [sp, #4]
 800dcd6:	4b4b      	ldr	r3, [pc, #300]	; (800de04 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2b8>)
 800dcd8:	9300      	str	r3, [sp, #0]
 800dcda:	23f0      	movs	r3, #240	; 0xf0
 800dcdc:	4a40      	ldr	r2, [pc, #256]	; (800dde0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x294>)
 800dcde:	4941      	ldr	r1, [pc, #260]	; (800dde4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x298>)
 800dce0:	68f8      	ldr	r0, [r7, #12]
 800dce2:	47a0      	blx	r4
 800dce4:	2301      	movs	r3, #1
 800dce6:	e0c5      	b.n	800de74 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x328>
        context, num_channels,
        filter->dims->data[affine_quantization->quantized_dimension]);
  }

  // Populate multiplier and shift using affine quantization.
  const float input_scale = input->params.scale;
 800dce8:	68bb      	ldr	r3, [r7, #8]
 800dcea:	68db      	ldr	r3, [r3, #12]
 800dcec:	653b      	str	r3, [r7, #80]	; 0x50
  const float output_scale = output->params.scale;
 800dcee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dcf0:	68db      	ldr	r3, [r3, #12]
 800dcf2:	64fb      	str	r3, [r7, #76]	; 0x4c
  const float* filter_scales = affine_quantization->scale->data;
 800dcf4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	3304      	adds	r3, #4
 800dcfa:	64bb      	str	r3, [r7, #72]	; 0x48
  for (int i = 0; i < num_channels; ++i) {
 800dcfc:	2300      	movs	r3, #0
 800dcfe:	65fb      	str	r3, [r7, #92]	; 0x5c
 800dd00:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800dd02:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dd06:	429a      	cmp	r2, r3
 800dd08:	da47      	bge.n	800dd9a <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x24e>
    // If per-tensor quantization parameter is specified, broadcast it along the
    // quantization dimension (channels_out).
    const float scale = is_per_channel ? filter_scales[i] : filter_scales[0];
 800dd0a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d005      	beq.n	800dd1e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x1d2>
 800dd12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dd14:	009b      	lsls	r3, r3, #2
 800dd16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dd18:	4413      	add	r3, r2
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	e001      	b.n	800dd22 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x1d6>
 800dd1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	647b      	str	r3, [r7, #68]	; 0x44
    const double filter_scale = static_cast<double>(scale);
 800dd24:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800dd26:	f7f2 fc41 	bl	80005ac <__aeabi_f2d>
 800dd2a:	4602      	mov	r2, r0
 800dd2c:	460b      	mov	r3, r1
 800dd2e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    const double effective_output_scale = static_cast<double>(input_scale) *
 800dd32:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800dd34:	f7f2 fc3a 	bl	80005ac <__aeabi_f2d>
 800dd38:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800dd3c:	f7f2 fc8e 	bl	800065c <__aeabi_dmul>
 800dd40:	4602      	mov	r2, r0
 800dd42:	460b      	mov	r3, r1
 800dd44:	4614      	mov	r4, r2
 800dd46:	461d      	mov	r5, r3
                                          filter_scale /
                                          static_cast<double>(output_scale);
 800dd48:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800dd4a:	f7f2 fc2f 	bl	80005ac <__aeabi_f2d>
 800dd4e:	4602      	mov	r2, r0
 800dd50:	460b      	mov	r3, r1
    const double effective_output_scale = static_cast<double>(input_scale) *
 800dd52:	4620      	mov	r0, r4
 800dd54:	4629      	mov	r1, r5
 800dd56:	f7f2 fdab 	bl	80008b0 <__aeabi_ddiv>
 800dd5a:	4602      	mov	r2, r0
 800dd5c:	460b      	mov	r3, r1
 800dd5e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    int32_t significand;
    int channel_shift;
    QuantizeMultiplier(effective_output_scale, &significand, &channel_shift);
 800dd62:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800dd66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800dd6a:	4611      	mov	r1, r2
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 800dd72:	f7ff f8cf 	bl	800cf14 <_ZN6tflite18QuantizeMultiplierEdPlPi>
    per_channel_multiplier[i] = significand;
 800dd76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dd78:	009b      	lsls	r3, r3, #2
 800dd7a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800dd7e:	4413      	add	r3, r2
 800dd80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dd82:	601a      	str	r2, [r3, #0]
    per_channel_shift[i] = channel_shift;
 800dd84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dd86:	009b      	lsls	r3, r3, #2
 800dd88:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800dd8c:	4413      	add	r3, r2
 800dd8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dd90:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < num_channels; ++i) {
 800dd92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dd94:	3301      	adds	r3, #1
 800dd96:	65fb      	str	r3, [r7, #92]	; 0x5c
 800dd98:	e7b2      	b.n	800dd00 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x1b4>
  }

  // Populate scalar quantization parameters.
  // This check on legacy quantization parameters is kept only for backward
  // compatibility.
  if (input->type == kTfLiteUInt8) {
 800dd9a:	68bb      	ldr	r3, [r7, #8]
 800dd9c:	781b      	ldrb	r3, [r3, #0]
 800dd9e:	2b03      	cmp	r3, #3
 800dda0:	d146      	bne.n	800de30 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2e4>
    // Check bias scale == input scale * filter scale.
    double real_multiplier = 0.0;
 800dda2:	f04f 0200 	mov.w	r2, #0
 800dda6:	f04f 0300 	mov.w	r3, #0
 800ddaa:	e9c7 2306 	strd	r2, r3, [r7, #24]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 800ddae:	f107 0318 	add.w	r3, r7, #24
 800ddb2:	9301      	str	r3, [sp, #4]
 800ddb4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ddb6:	9300      	str	r3, [sp, #0]
 800ddb8:	683b      	ldr	r3, [r7, #0]
 800ddba:	687a      	ldr	r2, [r7, #4]
 800ddbc:	68b9      	ldr	r1, [r7, #8]
 800ddbe:	68f8      	ldr	r0, [r7, #12]
 800ddc0:	f000 f85e 	bl	800de80 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
 800ddc4:	4603      	mov	r3, r0
 800ddc6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800ddca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d01e      	beq.n	800de10 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2c4>
 800ddd2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ddd6:	e04d      	b.n	800de74 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x328>
 800ddd8:	080294a8 	.word	0x080294a8
 800dddc:	080294c4 	.word	0x080294c4
 800dde0:	08029450 	.word	0x08029450
 800dde4:	0802948c 	.word	0x0802948c
 800dde8:	080294e0 	.word	0x080294e0
 800ddec:	08029514 	.word	0x08029514
 800ddf0:	080294fc 	.word	0x080294fc
 800ddf4:	08029528 	.word	0x08029528
 800ddf8:	08029544 	.word	0x08029544
 800ddfc:	08029580 	.word	0x08029580
 800de00:	0802958c 	.word	0x0802958c
 800de04:	0802959c 	.word	0x0802959c
 800de08:	080295ac 	.word	0x080295ac
 800de0c:	080295d0 	.word	0x080295d0
        context, input, filter, bias, output, &real_multiplier));
    int exponent;

    // Populate quantization parameters with multiplier and shift.
    QuantizeMultiplier(real_multiplier, multiplier, &exponent);
 800de10:	ed97 7b06 	vldr	d7, [r7, #24]
 800de14:	f107 0314 	add.w	r3, r7, #20
 800de18:	4619      	mov	r1, r3
 800de1a:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800de1c:	eeb0 0a47 	vmov.f32	s0, s14
 800de20:	eef0 0a67 	vmov.f32	s1, s15
 800de24:	f7ff f876 	bl	800cf14 <_ZN6tflite18QuantizeMultiplierEdPlPi>
    *shift = -exponent;
 800de28:	697b      	ldr	r3, [r7, #20]
 800de2a:	425a      	negs	r2, r3
 800de2c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800de2e:	601a      	str	r2, [r3, #0]
  }
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
 800de30:	68bb      	ldr	r3, [r7, #8]
 800de32:	781b      	ldrb	r3, [r3, #0]
 800de34:	2b09      	cmp	r3, #9
 800de36:	d007      	beq.n	800de48 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2fc>
 800de38:	68bb      	ldr	r3, [r7, #8]
 800de3a:	781b      	ldrb	r3, [r3, #0]
 800de3c:	2b03      	cmp	r3, #3
 800de3e:	d003      	beq.n	800de48 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2fc>
      input->type == kTfLiteInt16) {
 800de40:	68bb      	ldr	r3, [r7, #8]
 800de42:	781b      	ldrb	r3, [r3, #0]
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
 800de44:	2b07      	cmp	r3, #7
 800de46:	d114      	bne.n	800de72 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x326>
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
 800de48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800de4a:	7819      	ldrb	r1, [r3, #0]
 800de4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800de50:	9300      	str	r3, [sp, #0]
 800de52:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800de56:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800de58:	68f8      	ldr	r0, [r7, #12]
 800de5a:	f000 fa03 	bl	800e264 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 800de5e:	4603      	mov	r3, r0
 800de60:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800de64:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d002      	beq.n	800de72 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x326>
 800de6c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800de70:	e000      	b.n	800de74 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x328>
        context, activation, output, output_activation_min,
        output_activation_max));
  }
  return kTfLiteOk;
 800de72:	2300      	movs	r3, #0
}
 800de74:	4618      	mov	r0, r3
 800de76:	3760      	adds	r7, #96	; 0x60
 800de78:	46bd      	mov	sp, r7
 800de7a:	bdb0      	pop	{r4, r5, r7, pc}
 800de7c:	0000      	movs	r0, r0
	...

0800de80 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              const TfLiteTensor* bias,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 800de80:	b5b0      	push	{r4, r5, r7, lr}
 800de82:	b08e      	sub	sp, #56	; 0x38
 800de84:	af02      	add	r7, sp, #8
 800de86:	60f8      	str	r0, [r7, #12]
 800de88:	60b9      	str	r1, [r7, #8]
 800de8a:	607a      	str	r2, [r7, #4]
 800de8c:	603b      	str	r3, [r7, #0]
  const double input_product_scale = static_cast<double>(input->params.scale) *
 800de8e:	68bb      	ldr	r3, [r7, #8]
 800de90:	68db      	ldr	r3, [r3, #12]
 800de92:	4618      	mov	r0, r3
 800de94:	f7f2 fb8a 	bl	80005ac <__aeabi_f2d>
 800de98:	4604      	mov	r4, r0
 800de9a:	460d      	mov	r5, r1
                                     static_cast<double>(filter->params.scale);
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	68db      	ldr	r3, [r3, #12]
 800dea0:	4618      	mov	r0, r3
 800dea2:	f7f2 fb83 	bl	80005ac <__aeabi_f2d>
 800dea6:	4602      	mov	r2, r0
 800dea8:	460b      	mov	r3, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
 800deaa:	4620      	mov	r0, r4
 800deac:	4629      	mov	r1, r5
 800deae:	f7f2 fbd5 	bl	800065c <__aeabi_dmul>
 800deb2:	4602      	mov	r2, r0
 800deb4:	460b      	mov	r3, r1
 800deb6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // The following conditions must be guaranteed by the training pipeline.
  if (bias) {
 800deba:	683b      	ldr	r3, [r7, #0]
 800debc:	2b00      	cmp	r3, #0
 800debe:	d04b      	beq.n	800df58 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd8>
    const double bias_scale = static_cast<double>(bias->params.scale);
 800dec0:	683b      	ldr	r3, [r7, #0]
 800dec2:	68db      	ldr	r3, [r3, #12]
 800dec4:	4618      	mov	r0, r3
 800dec6:	f7f2 fb71 	bl	80005ac <__aeabi_f2d>
 800deca:	4602      	mov	r2, r0
 800decc:	460b      	mov	r3, r1
 800dece:	e9c7 2308 	strd	r2, r3, [r7, #32]
    // bias * (bias_scale - input_product_scale) / output_scale should be
    // a small number for an integer.
    // Since normally bias should be within a small range.
    // We should expect (bias_scale - input_product_scale) / output_scale to
    // be a small number like 0.02.
    const double scale_diff = std::abs(input_product_scale - bias_scale);
 800ded2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ded6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800deda:	f7f2 fa07 	bl	80002ec <__aeabi_dsub>
 800dede:	4602      	mov	r2, r0
 800dee0:	460b      	mov	r3, r1
 800dee2:	ec43 2b17 	vmov	d7, r2, r3
 800dee6:	eeb0 0a47 	vmov.f32	s0, s14
 800deea:	eef0 0a67 	vmov.f32	s1, s15
 800deee:	f7ff f9e0 	bl	800d2b2 <_ZSt3absd>
 800def2:	ed87 0b06 	vstr	d0, [r7, #24]
    const double output_scale = static_cast<double>(output->params.scale);
 800def6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800def8:	68db      	ldr	r3, [r3, #12]
 800defa:	4618      	mov	r0, r3
 800defc:	f7f2 fb56 	bl	80005ac <__aeabi_f2d>
 800df00:	4602      	mov	r2, r0
 800df02:	460b      	mov	r3, r1
 800df04:	e9c7 2304 	strd	r2, r3, [r7, #16]

    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
 800df08:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800df0c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800df10:	f7f2 fcce 	bl	80008b0 <__aeabi_ddiv>
 800df14:	4602      	mov	r2, r0
 800df16:	460b      	mov	r3, r1
 800df18:	4610      	mov	r0, r2
 800df1a:	4619      	mov	r1, r3
 800df1c:	2301      	movs	r3, #1
 800df1e:	461c      	mov	r4, r3
 800df20:	a318      	add	r3, pc, #96	; (adr r3, 800df84 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x104>)
 800df22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df26:	f7f2 fe15 	bl	8000b54 <__aeabi_dcmple>
 800df2a:	4603      	mov	r3, r0
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d101      	bne.n	800df34 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xb4>
 800df30:	2300      	movs	r3, #0
 800df32:	461c      	mov	r4, r3
 800df34:	b2e3      	uxtb	r3, r4
 800df36:	f083 0301 	eor.w	r3, r3, #1
 800df3a:	b2db      	uxtb	r3, r3
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d00b      	beq.n	800df58 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd8>
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	695c      	ldr	r4, [r3, #20]
 800df44:	4b0c      	ldr	r3, [pc, #48]	; (800df78 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xf8>)
 800df46:	9300      	str	r3, [sp, #0]
 800df48:	f44f 739f 	mov.w	r3, #318	; 0x13e
 800df4c:	4a0b      	ldr	r2, [pc, #44]	; (800df7c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xfc>)
 800df4e:	490c      	ldr	r1, [pc, #48]	; (800df80 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x100>)
 800df50:	68f8      	ldr	r0, [r7, #12]
 800df52:	47a0      	blx	r4
 800df54:	2301      	movs	r3, #1
 800df56:	e009      	b.n	800df6c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xec>
  }
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
 800df58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df5a:	9300      	str	r3, [sp, #0]
 800df5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800df5e:	687a      	ldr	r2, [r7, #4]
 800df60:	68b9      	ldr	r1, [r7, #8]
 800df62:	68f8      	ldr	r0, [r7, #12]
 800df64:	f000 f812 	bl	800df8c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>
 800df68:	4603      	mov	r3, r0
                                          multiplier);
 800df6a:	bf00      	nop
}
 800df6c:	4618      	mov	r0, r3
 800df6e:	3730      	adds	r7, #48	; 0x30
 800df70:	46bd      	mov	sp, r7
 800df72:	bdb0      	pop	{r4, r5, r7, pc}
 800df74:	f3af 8000 	nop.w
 800df78:	08029610 	.word	0x08029610
 800df7c:	08029450 	.word	0x08029450
 800df80:	080294fc 	.word	0x080294fc
 800df84:	47ae147b 	.word	0x47ae147b
 800df88:	3f947ae1 	.word	0x3f947ae1

0800df8c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>:

TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 800df8c:	b590      	push	{r4, r7, lr}
 800df8e:	b089      	sub	sp, #36	; 0x24
 800df90:	af02      	add	r7, sp, #8
 800df92:	60f8      	str	r0, [r7, #12]
 800df94:	60b9      	str	r1, [r7, #8]
 800df96:	607a      	str	r2, [r7, #4]
 800df98:	603b      	str	r3, [r7, #0]
  const double input_product_scale =
      static_cast<double>(input->params.scale * filter->params.scale);
 800df9a:	68bb      	ldr	r3, [r7, #8]
 800df9c:	ed93 7a03 	vldr	s14, [r3, #12]
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	edd3 7a03 	vldr	s15, [r3, #12]
 800dfa6:	ee67 7a27 	vmul.f32	s15, s14, s15
  const double input_product_scale =
 800dfaa:	ee17 0a90 	vmov	r0, s15
 800dfae:	f7f2 fafd 	bl	80005ac <__aeabi_f2d>
 800dfb2:	4602      	mov	r2, r0
 800dfb4:	460b      	mov	r3, r1
 800dfb6:	e9c7 2304 	strd	r2, r3, [r7, #16]
  TF_LITE_ENSURE(context, input_product_scale >= 0);
 800dfba:	2301      	movs	r3, #1
 800dfbc:	461c      	mov	r4, r3
 800dfbe:	f04f 0200 	mov.w	r2, #0
 800dfc2:	f04f 0300 	mov.w	r3, #0
 800dfc6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800dfca:	f7f2 fdcd 	bl	8000b68 <__aeabi_dcmpge>
 800dfce:	4603      	mov	r3, r0
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d101      	bne.n	800dfd8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x4c>
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	461c      	mov	r4, r3
 800dfd8:	b2e3      	uxtb	r3, r4
 800dfda:	f083 0301 	eor.w	r3, r3, #1
 800dfde:	b2db      	uxtb	r3, r3
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d00b      	beq.n	800dffc <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x70>
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	695c      	ldr	r4, [r3, #20]
 800dfe8:	4b0f      	ldr	r3, [pc, #60]	; (800e028 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x9c>)
 800dfea:	9300      	str	r3, [sp, #0]
 800dfec:	f240 134b 	movw	r3, #331	; 0x14b
 800dff0:	4a0e      	ldr	r2, [pc, #56]	; (800e02c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa0>)
 800dff2:	490f      	ldr	r1, [pc, #60]	; (800e030 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa4>)
 800dff4:	68f8      	ldr	r0, [r7, #12]
 800dff6:	47a0      	blx	r4
 800dff8:	2301      	movs	r3, #1
 800dffa:	e010      	b.n	800e01e <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x92>
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
 800dffc:	683b      	ldr	r3, [r7, #0]
 800dffe:	68db      	ldr	r3, [r3, #12]
 800e000:	4618      	mov	r0, r3
 800e002:	f7f2 fad3 	bl	80005ac <__aeabi_f2d>
 800e006:	4602      	mov	r2, r0
 800e008:	460b      	mov	r3, r1
 800e00a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800e00e:	f7f2 fc4f 	bl	80008b0 <__aeabi_ddiv>
 800e012:	4602      	mov	r2, r0
 800e014:	460b      	mov	r3, r1
 800e016:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e018:	e9c1 2300 	strd	r2, r3, [r1]

  return kTfLiteOk;
 800e01c:	2300      	movs	r3, #0
}
 800e01e:	4618      	mov	r0, r3
 800e020:	371c      	adds	r7, #28
 800e022:	46bd      	mov	sp, r7
 800e024:	bd90      	pop	{r4, r7, pc}
 800e026:	bf00      	nop
 800e028:	08029634 	.word	0x08029634
 800e02c:	08029450 	.word	0x08029450
 800e030:	080294fc 	.word	0x080294fc

0800e034 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>:

namespace {

inline TfLiteStatus Quantize(TfLiteContext* context, float scale,
                             int32_t zero_point, float f, int32_t& q) {
 800e034:	b590      	push	{r4, r7, lr}
 800e036:	b08b      	sub	sp, #44	; 0x2c
 800e038:	af02      	add	r7, sp, #8
 800e03a:	6178      	str	r0, [r7, #20]
 800e03c:	ed87 0a04 	vstr	s0, [r7, #16]
 800e040:	60f9      	str	r1, [r7, #12]
 800e042:	edc7 0a02 	vstr	s1, [r7, #8]
 800e046:	607a      	str	r2, [r7, #4]
  const float tmp = TfLiteRound(f / scale);
 800e048:	ed97 7a02 	vldr	s14, [r7, #8]
 800e04c:	edd7 7a04 	vldr	s15, [r7, #16]
 800e050:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800e054:	eeb0 0a66 	vmov.f32	s0, s13
 800e058:	f7ff f91b 	bl	800d292 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 800e05c:	ed87 0a07 	vstr	s0, [r7, #28]
  const bool no_integer_overflow_from_quantization =
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
 800e060:	f7ff f94f 	bl	800d302 <_ZNSt14numeric_limitsIlE3minEv>
 800e064:	ee07 0a90 	vmov	s15, r0
 800e068:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e06c:	ed97 7a07 	vldr	s14, [r7, #28]
 800e070:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e078:	db0e      	blt.n	800e098 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x64>
       tmp <= static_cast<float>(std::numeric_limits<int32_t>::max()));
 800e07a:	f7fe ff42 	bl	800cf02 <_ZNSt14numeric_limitsIlE3maxEv>
 800e07e:	ee07 0a90 	vmov	s15, r0
 800e082:	eef8 7ae7 	vcvt.f32.s32	s15, s15
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
 800e086:	ed97 7a07 	vldr	s14, [r7, #28]
 800e08a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e08e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e092:	d801      	bhi.n	800e098 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x64>
 800e094:	2301      	movs	r3, #1
 800e096:	e000      	b.n	800e09a <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x66>
 800e098:	2300      	movs	r3, #0
       tmp <= static_cast<float>(std::numeric_limits<int32_t>::max()));
 800e09a:	76fb      	strb	r3, [r7, #27]
  TF_LITE_ENSURE(context, no_integer_overflow_from_quantization);
 800e09c:	7efb      	ldrb	r3, [r7, #27]
 800e09e:	f083 0301 	eor.w	r3, r3, #1
 800e0a2:	b2db      	uxtb	r3, r3
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d00b      	beq.n	800e0c0 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x8c>
 800e0a8:	697b      	ldr	r3, [r7, #20]
 800e0aa:	695c      	ldr	r4, [r3, #20]
 800e0ac:	4b0c      	ldr	r3, [pc, #48]	; (800e0e0 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0xac>)
 800e0ae:	9300      	str	r3, [sp, #0]
 800e0b0:	f240 1359 	movw	r3, #345	; 0x159
 800e0b4:	4a0b      	ldr	r2, [pc, #44]	; (800e0e4 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0xb0>)
 800e0b6:	490c      	ldr	r1, [pc, #48]	; (800e0e8 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0xb4>)
 800e0b8:	6978      	ldr	r0, [r7, #20]
 800e0ba:	47a0      	blx	r4
 800e0bc:	2301      	movs	r3, #1
 800e0be:	e00a      	b.n	800e0d6 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0xa2>
  q = zero_point + static_cast<int32_t>(tmp);
 800e0c0:	edd7 7a07 	vldr	s15, [r7, #28]
 800e0c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e0c8:	ee17 2a90 	vmov	r2, s15
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	441a      	add	r2, r3
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800e0d4:	2300      	movs	r3, #0
}
 800e0d6:	4618      	mov	r0, r3
 800e0d8:	3724      	adds	r7, #36	; 0x24
 800e0da:	46bd      	mov	sp, r7
 800e0dc:	bd90      	pop	{r4, r7, pc}
 800e0de:	bf00      	nop
 800e0e0:	08029650 	.word	0x08029650
 800e0e4:	08029450 	.word	0x08029450
 800e0e8:	080294fc 	.word	0x080294fc

0800e0ec <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_>:

TfLiteStatus CalculateActivationRangeQuantizedImpl(
    TfLiteContext* context, TfLiteFusedActivation activation, int32_t qmin,
    int32_t qmax, TfLiteTensor* output, int32_t* act_min, int32_t* act_max) {
 800e0ec:	b580      	push	{r7, lr}
 800e0ee:	b08a      	sub	sp, #40	; 0x28
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	60f8      	str	r0, [r7, #12]
 800e0f4:	607a      	str	r2, [r7, #4]
 800e0f6:	603b      	str	r3, [r7, #0]
 800e0f8:	460b      	mov	r3, r1
 800e0fa:	72fb      	strb	r3, [r7, #11]
  const auto scale = output->params.scale;
 800e0fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0fe:	68db      	ldr	r3, [r3, #12]
 800e100:	627b      	str	r3, [r7, #36]	; 0x24
  const auto zero_point = output->params.zero_point;
 800e102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e104:	691b      	ldr	r3, [r3, #16]
 800e106:	623b      	str	r3, [r7, #32]

  int32_t tmp_q;
  if (activation == kTfLiteActRelu) {
 800e108:	7afb      	ldrb	r3, [r7, #11]
 800e10a:	2b01      	cmp	r3, #1
 800e10c:	d120      	bne.n	800e150 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x64>
    TF_LITE_ENSURE_OK(context,
 800e10e:	f107 0314 	add.w	r3, r7, #20
 800e112:	461a      	mov	r2, r3
 800e114:	eddf 0a52 	vldr	s1, [pc, #328]	; 800e260 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x174>
 800e118:	6a39      	ldr	r1, [r7, #32]
 800e11a:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 800e11e:	68f8      	ldr	r0, [r7, #12]
 800e120:	f7ff ff88 	bl	800e034 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 800e124:	4603      	mov	r3, r0
 800e126:	76fb      	strb	r3, [r7, #27]
 800e128:	7efb      	ldrb	r3, [r7, #27]
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d001      	beq.n	800e132 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x46>
 800e12e:	7efb      	ldrb	r3, [r7, #27]
 800e130:	e091      	b.n	800e256 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, 0.0, tmp_q));
    *act_min = std::max(qmin, tmp_q);
 800e132:	f107 0214 	add.w	r2, r7, #20
 800e136:	1d3b      	adds	r3, r7, #4
 800e138:	4611      	mov	r1, r2
 800e13a:	4618      	mov	r0, r3
 800e13c:	f7ff fa3e 	bl	800d5bc <_ZSt3maxIlERKT_S2_S2_>
 800e140:	4603      	mov	r3, r0
 800e142:	681a      	ldr	r2, [r3, #0]
 800e144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e146:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 800e148:	683a      	ldr	r2, [r7, #0]
 800e14a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e14c:	601a      	str	r2, [r3, #0]
 800e14e:	e081      	b.n	800e254 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x168>
  } else if (activation == kTfLiteActRelu6) {
 800e150:	7afb      	ldrb	r3, [r7, #11]
 800e152:	2b03      	cmp	r3, #3
 800e154:	d13a      	bne.n	800e1cc <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0xe0>
    TF_LITE_ENSURE_OK(context,
 800e156:	f107 0314 	add.w	r3, r7, #20
 800e15a:	461a      	mov	r2, r3
 800e15c:	eddf 0a40 	vldr	s1, [pc, #256]	; 800e260 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x174>
 800e160:	6a39      	ldr	r1, [r7, #32]
 800e162:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 800e166:	68f8      	ldr	r0, [r7, #12]
 800e168:	f7ff ff64 	bl	800e034 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 800e16c:	4603      	mov	r3, r0
 800e16e:	777b      	strb	r3, [r7, #29]
 800e170:	7f7b      	ldrb	r3, [r7, #29]
 800e172:	2b00      	cmp	r3, #0
 800e174:	d001      	beq.n	800e17a <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x8e>
 800e176:	7f7b      	ldrb	r3, [r7, #29]
 800e178:	e06d      	b.n	800e256 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, 0.0, tmp_q));
    *act_min = std::max(qmin, tmp_q);
 800e17a:	f107 0214 	add.w	r2, r7, #20
 800e17e:	1d3b      	adds	r3, r7, #4
 800e180:	4611      	mov	r1, r2
 800e182:	4618      	mov	r0, r3
 800e184:	f7ff fa1a 	bl	800d5bc <_ZSt3maxIlERKT_S2_S2_>
 800e188:	4603      	mov	r3, r0
 800e18a:	681a      	ldr	r2, [r3, #0]
 800e18c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e18e:	601a      	str	r2, [r3, #0]
    TF_LITE_ENSURE_OK(context,
 800e190:	f107 0314 	add.w	r3, r7, #20
 800e194:	461a      	mov	r2, r3
 800e196:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 800e19a:	6a39      	ldr	r1, [r7, #32]
 800e19c:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 800e1a0:	68f8      	ldr	r0, [r7, #12]
 800e1a2:	f7ff ff47 	bl	800e034 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 800e1a6:	4603      	mov	r3, r0
 800e1a8:	773b      	strb	r3, [r7, #28]
 800e1aa:	7f3b      	ldrb	r3, [r7, #28]
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d001      	beq.n	800e1b4 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0xc8>
 800e1b0:	7f3b      	ldrb	r3, [r7, #28]
 800e1b2:	e050      	b.n	800e256 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, 6.0, tmp_q));
    *act_max = std::min(qmax, tmp_q);
 800e1b4:	f107 0214 	add.w	r2, r7, #20
 800e1b8:	463b      	mov	r3, r7
 800e1ba:	4611      	mov	r1, r2
 800e1bc:	4618      	mov	r0, r3
 800e1be:	f7ff f9e9 	bl	800d594 <_ZSt3minIlERKT_S2_S2_>
 800e1c2:	4603      	mov	r3, r0
 800e1c4:	681a      	ldr	r2, [r3, #0]
 800e1c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1c8:	601a      	str	r2, [r3, #0]
 800e1ca:	e043      	b.n	800e254 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x168>
  } else if (activation == kTfLiteActReluN1To1) {
 800e1cc:	7afb      	ldrb	r3, [r7, #11]
 800e1ce:	2b02      	cmp	r3, #2
 800e1d0:	d13a      	bne.n	800e248 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x15c>
    TF_LITE_ENSURE_OK(context,
 800e1d2:	f107 0314 	add.w	r3, r7, #20
 800e1d6:	461a      	mov	r2, r3
 800e1d8:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 800e1dc:	6a39      	ldr	r1, [r7, #32]
 800e1de:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 800e1e2:	68f8      	ldr	r0, [r7, #12]
 800e1e4:	f7ff ff26 	bl	800e034 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 800e1e8:	4603      	mov	r3, r0
 800e1ea:	77fb      	strb	r3, [r7, #31]
 800e1ec:	7ffb      	ldrb	r3, [r7, #31]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d001      	beq.n	800e1f6 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x10a>
 800e1f2:	7ffb      	ldrb	r3, [r7, #31]
 800e1f4:	e02f      	b.n	800e256 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, -1.0, tmp_q));
    *act_min = std::max(qmin, tmp_q);
 800e1f6:	f107 0214 	add.w	r2, r7, #20
 800e1fa:	1d3b      	adds	r3, r7, #4
 800e1fc:	4611      	mov	r1, r2
 800e1fe:	4618      	mov	r0, r3
 800e200:	f7ff f9dc 	bl	800d5bc <_ZSt3maxIlERKT_S2_S2_>
 800e204:	4603      	mov	r3, r0
 800e206:	681a      	ldr	r2, [r3, #0]
 800e208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e20a:	601a      	str	r2, [r3, #0]
    TF_LITE_ENSURE_OK(context,
 800e20c:	f107 0314 	add.w	r3, r7, #20
 800e210:	461a      	mov	r2, r3
 800e212:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800e216:	6a39      	ldr	r1, [r7, #32]
 800e218:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 800e21c:	68f8      	ldr	r0, [r7, #12]
 800e21e:	f7ff ff09 	bl	800e034 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 800e222:	4603      	mov	r3, r0
 800e224:	77bb      	strb	r3, [r7, #30]
 800e226:	7fbb      	ldrb	r3, [r7, #30]
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d001      	beq.n	800e230 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x144>
 800e22c:	7fbb      	ldrb	r3, [r7, #30]
 800e22e:	e012      	b.n	800e256 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, 1.0, tmp_q));
    *act_max = std::min(qmax, tmp_q);
 800e230:	f107 0214 	add.w	r2, r7, #20
 800e234:	463b      	mov	r3, r7
 800e236:	4611      	mov	r1, r2
 800e238:	4618      	mov	r0, r3
 800e23a:	f7ff f9ab 	bl	800d594 <_ZSt3minIlERKT_S2_S2_>
 800e23e:	4603      	mov	r3, r0
 800e240:	681a      	ldr	r2, [r3, #0]
 800e242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e244:	601a      	str	r2, [r3, #0]
 800e246:	e005      	b.n	800e254 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x168>
  } else {
    *act_min = qmin;
 800e248:	687a      	ldr	r2, [r7, #4]
 800e24a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e24c:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 800e24e:	683a      	ldr	r2, [r7, #0]
 800e250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e252:	601a      	str	r2, [r3, #0]
  }
  return kTfLiteOk;
 800e254:	2300      	movs	r3, #0
}
 800e256:	4618      	mov	r0, r3
 800e258:	3728      	adds	r7, #40	; 0x28
 800e25a:	46bd      	mov	sp, r7
 800e25c:	bd80      	pop	{r7, pc}
 800e25e:	bf00      	nop
 800e260:	00000000 	.word	0x00000000

0800e264 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
 800e264:	b590      	push	{r4, r7, lr}
 800e266:	b08b      	sub	sp, #44	; 0x2c
 800e268:	af04      	add	r7, sp, #16
 800e26a:	60f8      	str	r0, [r7, #12]
 800e26c:	607a      	str	r2, [r7, #4]
 800e26e:	603b      	str	r3, [r7, #0]
 800e270:	460b      	mov	r3, r1
 800e272:	72fb      	strb	r3, [r7, #11]
  int32_t qmin = 0;
 800e274:	2300      	movs	r3, #0
 800e276:	617b      	str	r3, [r7, #20]
  int32_t qmax = 0;
 800e278:	2300      	movs	r3, #0
 800e27a:	613b      	str	r3, [r7, #16]
  if (output->type == kTfLiteUInt8) {
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	781b      	ldrb	r3, [r3, #0]
 800e280:	2b03      	cmp	r3, #3
 800e282:	d108      	bne.n	800e296 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x32>
    qmin = std::numeric_limits<uint8_t>::min();
 800e284:	f7ff fb84 	bl	800d990 <_ZNSt14numeric_limitsIhE3minEv>
 800e288:	4603      	mov	r3, r0
 800e28a:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<uint8_t>::max();
 800e28c:	f7ff fb88 	bl	800d9a0 <_ZNSt14numeric_limitsIhE3maxEv>
 800e290:	4603      	mov	r3, r0
 800e292:	613b      	str	r3, [r7, #16]
 800e294:	e025      	b.n	800e2e2 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else if (output->type == kTfLiteInt8) {
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	781b      	ldrb	r3, [r3, #0]
 800e29a:	2b09      	cmp	r3, #9
 800e29c:	d108      	bne.n	800e2b0 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x4c>
    qmin = std::numeric_limits<int8_t>::min();
 800e29e:	f7ff fb66 	bl	800d96e <_ZNSt14numeric_limitsIaE3minEv>
 800e2a2:	4603      	mov	r3, r0
 800e2a4:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int8_t>::max();
 800e2a6:	f7ff fb6b 	bl	800d980 <_ZNSt14numeric_limitsIaE3maxEv>
 800e2aa:	4603      	mov	r3, r0
 800e2ac:	613b      	str	r3, [r7, #16]
 800e2ae:	e018      	b.n	800e2e2 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else if (output->type == kTfLiteInt16) {
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	781b      	ldrb	r3, [r3, #0]
 800e2b4:	2b07      	cmp	r3, #7
 800e2b6:	d108      	bne.n	800e2ca <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x66>
    qmin = std::numeric_limits<int16_t>::min();
 800e2b8:	f7ff f810 	bl	800d2dc <_ZNSt14numeric_limitsIsE3minEv>
 800e2bc:	4603      	mov	r3, r0
 800e2be:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int16_t>::max();
 800e2c0:	f7ff f816 	bl	800d2f0 <_ZNSt14numeric_limitsIsE3maxEv>
 800e2c4:	4603      	mov	r3, r0
 800e2c6:	613b      	str	r3, [r7, #16]
 800e2c8:	e00b      	b.n	800e2e2 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else {
    TF_LITE_ENSURE(context, false);
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	695c      	ldr	r4, [r3, #20]
 800e2ce:	4b0e      	ldr	r3, [pc, #56]	; (800e308 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa4>)
 800e2d0:	9300      	str	r3, [sp, #0]
 800e2d2:	f240 1391 	movw	r3, #401	; 0x191
 800e2d6:	4a0d      	ldr	r2, [pc, #52]	; (800e30c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa8>)
 800e2d8:	490d      	ldr	r1, [pc, #52]	; (800e310 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xac>)
 800e2da:	68f8      	ldr	r0, [r7, #12]
 800e2dc:	47a0      	blx	r4
 800e2de:	2301      	movs	r3, #1
 800e2e0:	e00d      	b.n	800e2fe <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x9a>
  }

  return CalculateActivationRangeQuantizedImpl(context, activation, qmin, qmax,
 800e2e2:	7af9      	ldrb	r1, [r7, #11]
 800e2e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2e6:	9302      	str	r3, [sp, #8]
 800e2e8:	683b      	ldr	r3, [r7, #0]
 800e2ea:	9301      	str	r3, [sp, #4]
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	9300      	str	r3, [sp, #0]
 800e2f0:	693b      	ldr	r3, [r7, #16]
 800e2f2:	697a      	ldr	r2, [r7, #20]
 800e2f4:	68f8      	ldr	r0, [r7, #12]
 800e2f6:	f7ff fef9 	bl	800e0ec <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_>
 800e2fa:	4603      	mov	r3, r0
                                               output, act_min, act_max);
 800e2fc:	bf00      	nop
}
 800e2fe:	4618      	mov	r0, r3
 800e300:	371c      	adds	r7, #28
 800e302:	46bd      	mov	sp, r7
 800e304:	bd90      	pop	{r4, r7, pc}
 800e306:	bf00      	nop
 800e308:	08029678 	.word	0x08029678
 800e30c:	08029450 	.word	0x08029450
 800e310:	080294fc 	.word	0x080294fc

0800e314 <_ZSt3maxIiERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 800e314:	b480      	push	{r7}
 800e316:	b083      	sub	sp, #12
 800e318:	af00      	add	r7, sp, #0
 800e31a:	6078      	str	r0, [r7, #4]
 800e31c:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	681a      	ldr	r2, [r3, #0]
 800e322:	683b      	ldr	r3, [r7, #0]
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	429a      	cmp	r2, r3
 800e328:	da01      	bge.n	800e32e <_ZSt3maxIiERKT_S2_S2_+0x1a>
	return __b;
 800e32a:	683b      	ldr	r3, [r7, #0]
 800e32c:	e000      	b.n	800e330 <_ZSt3maxIiERKT_S2_S2_+0x1c>
      return __a;
 800e32e:	687b      	ldr	r3, [r7, #4]
    }
 800e330:	4618      	mov	r0, r3
 800e332:	370c      	adds	r7, #12
 800e334:	46bd      	mov	sp, r7
 800e336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e33a:	4770      	bx	lr

0800e33c <_ZNSt12_Vector_baseISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 800e33c:	b580      	push	{r7, lr}
 800e33e:	b082      	sub	sp, #8
 800e340:	af00      	add	r7, sp, #0
 800e342:	6078      	str	r0, [r7, #4]
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	4618      	mov	r0, r3
 800e348:	f000 f8cc 	bl	800e4e4 <_ZNSt12_Vector_baseISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EE12_Vector_implC1Ev>
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	4618      	mov	r0, r3
 800e350:	3708      	adds	r7, #8
 800e352:	46bd      	mov	sp, r7
 800e354:	bd80      	pop	{r7, pc}

0800e356 <_ZNSt6vectorISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 800e356:	b580      	push	{r7, lr}
 800e358:	b082      	sub	sp, #8
 800e35a:	af00      	add	r7, sp, #0
 800e35c:	6078      	str	r0, [r7, #4]
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	4618      	mov	r0, r3
 800e362:	f7ff ffeb 	bl	800e33c <_ZNSt12_Vector_baseISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EEC1Ev>
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	4618      	mov	r0, r3
 800e36a:	3708      	adds	r7, #8
 800e36c:	46bd      	mov	sp, r7
 800e36e:	bd80      	pop	{r7, pc}

0800e370 <_ZNK6tflite10OpResolver12GetDelegatesEi>:
      std::vector<std::unique_ptr<TfLiteDelegate, void (*)(TfLiteDelegate*)>>;
  // Returns optional delegates for resolving and handling ops in the flatbuffer
  // model. This may be used in addition to the standard TfLiteRegistration
  // lookup for graph resolution.
  // WARNING: This API is deprecated, GetDelegateCreators is preferred.
  virtual TfLiteDelegatePtrVector GetDelegates(int num_threads) const {
 800e370:	b580      	push	{r7, lr}
 800e372:	b084      	sub	sp, #16
 800e374:	af00      	add	r7, sp, #0
 800e376:	60f8      	str	r0, [r7, #12]
 800e378:	60b9      	str	r1, [r7, #8]
 800e37a:	607a      	str	r2, [r7, #4]
    return {};
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	2200      	movs	r2, #0
 800e380:	601a      	str	r2, [r3, #0]
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	2200      	movs	r2, #0
 800e386:	605a      	str	r2, [r3, #4]
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	2200      	movs	r2, #0
 800e38c:	609a      	str	r2, [r3, #8]
 800e38e:	68f8      	ldr	r0, [r7, #12]
 800e390:	f7ff ffe1 	bl	800e356 <_ZNSt6vectorISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EEC1Ev>
  }
 800e394:	68f8      	ldr	r0, [r7, #12]
 800e396:	3710      	adds	r7, #16
 800e398:	46bd      	mov	sp, r7
 800e39a:	bd80      	pop	{r7, pc}

0800e39c <_ZNSt12_Vector_baseISt8functionIFSt10unique_ptrI14TfLiteDelegatePFvPS2_EEiEESaIS8_EEC1Ev>:
      _Vector_base() = default;
 800e39c:	b580      	push	{r7, lr}
 800e39e:	b082      	sub	sp, #8
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	6078      	str	r0, [r7, #4]
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	4618      	mov	r0, r3
 800e3a8:	f000 f8ac 	bl	800e504 <_ZNSt12_Vector_baseISt8functionIFSt10unique_ptrI14TfLiteDelegatePFvPS2_EEiEESaIS8_EE12_Vector_implC1Ev>
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	4618      	mov	r0, r3
 800e3b0:	3708      	adds	r7, #8
 800e3b2:	46bd      	mov	sp, r7
 800e3b4:	bd80      	pop	{r7, pc}

0800e3b6 <_ZNSt6vectorISt8functionIFSt10unique_ptrI14TfLiteDelegatePFvPS2_EEiEESaIS8_EEC1Ev>:
      vector() = default;
 800e3b6:	b580      	push	{r7, lr}
 800e3b8:	b082      	sub	sp, #8
 800e3ba:	af00      	add	r7, sp, #0
 800e3bc:	6078      	str	r0, [r7, #4]
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	4618      	mov	r0, r3
 800e3c2:	f7ff ffeb 	bl	800e39c <_ZNSt12_Vector_baseISt8functionIFSt10unique_ptrI14TfLiteDelegatePFvPS2_EEiEESaIS8_EEC1Ev>
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	4618      	mov	r0, r3
 800e3ca:	3708      	adds	r7, #8
 800e3cc:	46bd      	mov	sp, r7
 800e3ce:	bd80      	pop	{r7, pc}

0800e3d0 <_ZNK6tflite10OpResolver19GetDelegateCreatorsEv>:
          int /*num_threads*/)>;
  using TfLiteDelegateCreators = std::vector<TfLiteDelegateCreator>;
  // Returns a vector of delegate creators to create optional delegates for
  // resolving and handling ops in the flatbuffer model. This may be used in
  // addition to the standard TfLiteRegistration lookup for graph resolution.
  virtual TfLiteDelegateCreators GetDelegateCreators() const { return {}; }
 800e3d0:	b580      	push	{r7, lr}
 800e3d2:	b082      	sub	sp, #8
 800e3d4:	af00      	add	r7, sp, #0
 800e3d6:	6078      	str	r0, [r7, #4]
 800e3d8:	6039      	str	r1, [r7, #0]
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	2200      	movs	r2, #0
 800e3de:	601a      	str	r2, [r3, #0]
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	2200      	movs	r2, #0
 800e3e4:	605a      	str	r2, [r3, #4]
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	2200      	movs	r2, #0
 800e3ea:	609a      	str	r2, [r3, #8]
 800e3ec:	6878      	ldr	r0, [r7, #4]
 800e3ee:	f7ff ffe2 	bl	800e3b6 <_ZNSt6vectorISt8functionIFSt10unique_ptrI14TfLiteDelegatePFvPS2_EEiEESaIS8_EEC1Ev>
 800e3f2:	6878      	ldr	r0, [r7, #4]
 800e3f4:	3708      	adds	r7, #8
 800e3f6:	46bd      	mov	sp, r7
 800e3f8:	bd80      	pop	{r7, pc}
	...

0800e3fc <_ZN6tflite10OpResolverD1Ev>:

  virtual ~OpResolver() {}
 800e3fc:	b480      	push	{r7}
 800e3fe:	b083      	sub	sp, #12
 800e400:	af00      	add	r7, sp, #0
 800e402:	6078      	str	r0, [r7, #4]
 800e404:	4a04      	ldr	r2, [pc, #16]	; (800e418 <_ZN6tflite10OpResolverD1Ev+0x1c>)
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	601a      	str	r2, [r3, #0]
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	4618      	mov	r0, r3
 800e40e:	370c      	adds	r7, #12
 800e410:	46bd      	mov	sp, r7
 800e412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e416:	4770      	bx	lr
 800e418:	0803fe00 	.word	0x0803fe00

0800e41c <_ZN6tflite10OpResolverD0Ev>:
 800e41c:	b580      	push	{r7, lr}
 800e41e:	b082      	sub	sp, #8
 800e420:	af00      	add	r7, sp, #0
 800e422:	6078      	str	r0, [r7, #4]
 800e424:	6878      	ldr	r0, [r7, #4]
 800e426:	f7ff ffe9 	bl	800e3fc <_ZN6tflite10OpResolverD1Ev>
 800e42a:	2104      	movs	r1, #4
 800e42c:	6878      	ldr	r0, [r7, #4]
 800e42e:	f018 f9fc 	bl	802682a <_ZdlPvj>
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	4618      	mov	r0, r3
 800e436:	3708      	adds	r7, #8
 800e438:	46bd      	mov	sp, r7
 800e43a:	bd80      	pop	{r7, pc}

0800e43c <_ZNK6tflite10OpResolver24MayContainUserDefinedOpsEv>:
  /// user-defined ops can't be guaranteed.
  ///
  /// Note that "user-defined" ops are not the same as "custom" ops;
  /// BuiltinOpResolver may support certain "custom" ops, in addition to
  /// "builtin" ops, and may not support all of the "builtin" op enum values.
  virtual bool MayContainUserDefinedOps() const { return true; }
 800e43c:	b480      	push	{r7}
 800e43e:	b083      	sub	sp, #12
 800e440:	af00      	add	r7, sp, #0
 800e442:	6078      	str	r0, [r7, #4]
 800e444:	2301      	movs	r3, #1
 800e446:	4618      	mov	r0, r3
 800e448:	370c      	adds	r7, #12
 800e44a:	46bd      	mov	sp, r7
 800e44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e450:	4770      	bx	lr

0800e452 <_ZNK6tflite15MicroOpResolver6FindOpENS_15BuiltinOperatorEi>:
  // name.
  virtual const TfLiteRegistration* FindOp(const char* op) const = 0;

  // This implementation exists for compatibility with the OpResolver base class
  // and disregards the version parameter.
  const TfLiteRegistration* FindOp(BuiltinOperator op,
 800e452:	b580      	push	{r7, lr}
 800e454:	b084      	sub	sp, #16
 800e456:	af00      	add	r7, sp, #0
 800e458:	60f8      	str	r0, [r7, #12]
 800e45a:	460b      	mov	r3, r1
 800e45c:	607a      	str	r2, [r7, #4]
 800e45e:	72fb      	strb	r3, [r7, #11]
                                   int version) const final {
    return FindOp(op);
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	331c      	adds	r3, #28
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	7afa      	ldrb	r2, [r7, #11]
 800e46a:	4611      	mov	r1, r2
 800e46c:	68f8      	ldr	r0, [r7, #12]
 800e46e:	4798      	blx	r3
 800e470:	4603      	mov	r3, r0
  }
 800e472:	4618      	mov	r0, r3
 800e474:	3710      	adds	r7, #16
 800e476:	46bd      	mov	sp, r7
 800e478:	bd80      	pop	{r7, pc}

0800e47a <_ZNK6tflite15MicroOpResolver6FindOpEPKci>:

  // This implementation exists for compatibility with the OpResolver base class
  // and disregards the version parameter.
  const TfLiteRegistration* FindOp(const char* op, int version) const final {
 800e47a:	b580      	push	{r7, lr}
 800e47c:	b084      	sub	sp, #16
 800e47e:	af00      	add	r7, sp, #0
 800e480:	60f8      	str	r0, [r7, #12]
 800e482:	60b9      	str	r1, [r7, #8]
 800e484:	607a      	str	r2, [r7, #4]
    return FindOp(op);
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	3320      	adds	r3, #32
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	68b9      	ldr	r1, [r7, #8]
 800e490:	68f8      	ldr	r0, [r7, #12]
 800e492:	4798      	blx	r3
 800e494:	4603      	mov	r3, r0
  }
 800e496:	4618      	mov	r0, r3
 800e498:	3710      	adds	r7, #16
 800e49a:	46bd      	mov	sp, r7
 800e49c:	bd80      	pop	{r7, pc}
	...

0800e4a0 <_ZN6tflite15MicroOpResolverD1Ev>:

  // Returns the operator specific parsing function for the OpData for a
  // BuiltinOperator (if registered), else nullptr.
  virtual BuiltinParseFunction GetOpDataParser(BuiltinOperator op) const = 0;

  ~MicroOpResolver() override {}
 800e4a0:	b580      	push	{r7, lr}
 800e4a2:	b082      	sub	sp, #8
 800e4a4:	af00      	add	r7, sp, #0
 800e4a6:	6078      	str	r0, [r7, #4]
 800e4a8:	4a05      	ldr	r2, [pc, #20]	; (800e4c0 <_ZN6tflite15MicroOpResolverD1Ev+0x20>)
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	601a      	str	r2, [r3, #0]
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	4618      	mov	r0, r3
 800e4b2:	f7ff ffa3 	bl	800e3fc <_ZN6tflite10OpResolverD1Ev>
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	4618      	mov	r0, r3
 800e4ba:	3708      	adds	r7, #8
 800e4bc:	46bd      	mov	sp, r7
 800e4be:	bd80      	pop	{r7, pc}
 800e4c0:	0803fdd0 	.word	0x0803fdd0

0800e4c4 <_ZN6tflite15MicroOpResolverD0Ev>:
 800e4c4:	b580      	push	{r7, lr}
 800e4c6:	b082      	sub	sp, #8
 800e4c8:	af00      	add	r7, sp, #0
 800e4ca:	6078      	str	r0, [r7, #4]
 800e4cc:	6878      	ldr	r0, [r7, #4]
 800e4ce:	f7ff ffe7 	bl	800e4a0 <_ZN6tflite15MicroOpResolverD1Ev>
 800e4d2:	2104      	movs	r1, #4
 800e4d4:	6878      	ldr	r0, [r7, #4]
 800e4d6:	f018 f9a8 	bl	802682a <_ZdlPvj>
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	4618      	mov	r0, r3
 800e4de:	3708      	adds	r7, #8
 800e4e0:	46bd      	mov	sp, r7
 800e4e2:	bd80      	pop	{r7, pc}

0800e4e4 <_ZNSt12_Vector_baseISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800e4e4:	b580      	push	{r7, lr}
 800e4e6:	b082      	sub	sp, #8
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800e4ec:	6878      	ldr	r0, [r7, #4]
 800e4ee:	f000 f83b 	bl	800e568 <_ZNSaISt10unique_ptrI14TfLiteDelegatePFvPS0_EEEC1Ev>
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	4618      	mov	r0, r3
 800e4f6:	f000 f843 	bl	800e580 <_ZNSt12_Vector_baseISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EE17_Vector_impl_dataC1Ev>
	{ }
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	4618      	mov	r0, r3
 800e4fe:	3708      	adds	r7, #8
 800e500:	46bd      	mov	sp, r7
 800e502:	bd80      	pop	{r7, pc}

0800e504 <_ZNSt12_Vector_baseISt8functionIFSt10unique_ptrI14TfLiteDelegatePFvPS2_EEiEESaIS8_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800e504:	b580      	push	{r7, lr}
 800e506:	b082      	sub	sp, #8
 800e508:	af00      	add	r7, sp, #0
 800e50a:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800e50c:	6878      	ldr	r0, [r7, #4]
 800e50e:	f000 f84b 	bl	800e5a8 <_ZNSaISt8functionIFSt10unique_ptrI14TfLiteDelegatePFvPS1_EEiEEEC1Ev>
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	4618      	mov	r0, r3
 800e516:	f000 f853 	bl	800e5c0 <_ZNSt12_Vector_baseISt8functionIFSt10unique_ptrI14TfLiteDelegatePFvPS2_EEiEESaIS8_EE17_Vector_impl_dataC1Ev>
	{ }
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	4618      	mov	r0, r3
 800e51e:	3708      	adds	r7, #8
 800e520:	46bd      	mov	sp, r7
 800e522:	bd80      	pop	{r7, pc}

0800e524 <_ZN6tflite10OpResolverC1Ev>:
class OpResolver {
 800e524:	b480      	push	{r7}
 800e526:	b083      	sub	sp, #12
 800e528:	af00      	add	r7, sp, #0
 800e52a:	6078      	str	r0, [r7, #4]
 800e52c:	4a04      	ldr	r2, [pc, #16]	; (800e540 <_ZN6tflite10OpResolverC1Ev+0x1c>)
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	601a      	str	r2, [r3, #0]
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	4618      	mov	r0, r3
 800e536:	370c      	adds	r7, #12
 800e538:	46bd      	mov	sp, r7
 800e53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e53e:	4770      	bx	lr
 800e540:	0803fe00 	.word	0x0803fe00

0800e544 <_ZN6tflite15MicroOpResolverC1Ev>:
class MicroOpResolver : public OpResolver {
 800e544:	b580      	push	{r7, lr}
 800e546:	b082      	sub	sp, #8
 800e548:	af00      	add	r7, sp, #0
 800e54a:	6078      	str	r0, [r7, #4]
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	4618      	mov	r0, r3
 800e550:	f7ff ffe8 	bl	800e524 <_ZN6tflite10OpResolverC1Ev>
 800e554:	4a03      	ldr	r2, [pc, #12]	; (800e564 <_ZN6tflite15MicroOpResolverC1Ev+0x20>)
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	601a      	str	r2, [r3, #0]
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	4618      	mov	r0, r3
 800e55e:	3708      	adds	r7, #8
 800e560:	46bd      	mov	sp, r7
 800e562:	bd80      	pop	{r7, pc}
 800e564:	0803fdd0 	.word	0x0803fdd0

0800e568 <_ZNSaISt10unique_ptrI14TfLiteDelegatePFvPS0_EEEC1Ev>:
#endif

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
 800e568:	b580      	push	{r7, lr}
 800e56a:	b082      	sub	sp, #8
 800e56c:	af00      	add	r7, sp, #0
 800e56e:	6078      	str	r0, [r7, #4]
 800e570:	6878      	ldr	r0, [r7, #4]
 800e572:	f000 f839 	bl	800e5e8 <_ZN9__gnu_cxx13new_allocatorISt10unique_ptrI14TfLiteDelegatePFvPS2_EEEC1Ev>
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	4618      	mov	r0, r3
 800e57a:	3708      	adds	r7, #8
 800e57c:	46bd      	mov	sp, r7
 800e57e:	bd80      	pop	{r7, pc}

0800e580 <_ZNSt12_Vector_baseISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800e580:	b480      	push	{r7}
 800e582:	b083      	sub	sp, #12
 800e584:	af00      	add	r7, sp, #0
 800e586:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	2200      	movs	r2, #0
 800e58c:	601a      	str	r2, [r3, #0]
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	2200      	movs	r2, #0
 800e592:	605a      	str	r2, [r3, #4]
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	2200      	movs	r2, #0
 800e598:	609a      	str	r2, [r3, #8]
	{ }
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	4618      	mov	r0, r3
 800e59e:	370c      	adds	r7, #12
 800e5a0:	46bd      	mov	sp, r7
 800e5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a6:	4770      	bx	lr

0800e5a8 <_ZNSaISt8functionIFSt10unique_ptrI14TfLiteDelegatePFvPS1_EEiEEEC1Ev>:
 800e5a8:	b580      	push	{r7, lr}
 800e5aa:	b082      	sub	sp, #8
 800e5ac:	af00      	add	r7, sp, #0
 800e5ae:	6078      	str	r0, [r7, #4]
 800e5b0:	6878      	ldr	r0, [r7, #4]
 800e5b2:	f000 f824 	bl	800e5fe <_ZN9__gnu_cxx13new_allocatorISt8functionIFSt10unique_ptrI14TfLiteDelegatePFvPS3_EEiEEEC1Ev>
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	4618      	mov	r0, r3
 800e5ba:	3708      	adds	r7, #8
 800e5bc:	46bd      	mov	sp, r7
 800e5be:	bd80      	pop	{r7, pc}

0800e5c0 <_ZNSt12_Vector_baseISt8functionIFSt10unique_ptrI14TfLiteDelegatePFvPS2_EEiEESaIS8_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800e5c0:	b480      	push	{r7}
 800e5c2:	b083      	sub	sp, #12
 800e5c4:	af00      	add	r7, sp, #0
 800e5c6:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	2200      	movs	r2, #0
 800e5cc:	601a      	str	r2, [r3, #0]
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	2200      	movs	r2, #0
 800e5d2:	605a      	str	r2, [r3, #4]
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	2200      	movs	r2, #0
 800e5d8:	609a      	str	r2, [r3, #8]
	{ }
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	4618      	mov	r0, r3
 800e5de:	370c      	adds	r7, #12
 800e5e0:	46bd      	mov	sp, r7
 800e5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5e6:	4770      	bx	lr

0800e5e8 <_ZN9__gnu_cxx13new_allocatorISt10unique_ptrI14TfLiteDelegatePFvPS2_EEEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800e5e8:	b480      	push	{r7}
 800e5ea:	b083      	sub	sp, #12
 800e5ec:	af00      	add	r7, sp, #0
 800e5ee:	6078      	str	r0, [r7, #4]
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	4618      	mov	r0, r3
 800e5f4:	370c      	adds	r7, #12
 800e5f6:	46bd      	mov	sp, r7
 800e5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5fc:	4770      	bx	lr

0800e5fe <_ZN9__gnu_cxx13new_allocatorISt8functionIFSt10unique_ptrI14TfLiteDelegatePFvPS3_EEiEEEC1Ev>:
 800e5fe:	b480      	push	{r7}
 800e600:	b083      	sub	sp, #12
 800e602:	af00      	add	r7, sp, #0
 800e604:	6078      	str	r0, [r7, #4]
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	4618      	mov	r0, r3
 800e60a:	370c      	adds	r7, #12
 800e60c:	46bd      	mov	sp, r7
 800e60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e612:	4770      	bx	lr

0800e614 <_ZNK6tflite8SubGraph9operatorsEv>:
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_INPUTS);
  }
  const flatbuffers::Vector<int32_t> *outputs() const {
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_OUTPUTS);
  }
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Operator>> *operators() const {
 800e614:	b580      	push	{r7, lr}
 800e616:	b082      	sub	sp, #8
 800e618:	af00      	add	r7, sp, #0
 800e61a:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Operator>> *>(VT_OPERATORS);
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	210a      	movs	r1, #10
 800e620:	4618      	mov	r0, r3
 800e622:	f000 f847 	bl	800e6b4 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>
 800e626:	4603      	mov	r3, r0
  }
 800e628:	4618      	mov	r0, r3
 800e62a:	3708      	adds	r7, #8
 800e62c:	46bd      	mov	sp, r7
 800e62e:	bd80      	pop	{r7, pc}

0800e630 <_ZNK6tflite5Model9subgraphsEv>:
    return GetField<uint32_t>(VT_VERSION, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<tflite::OperatorCode>> *operator_codes() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::OperatorCode>> *>(VT_OPERATOR_CODES);
  }
  const flatbuffers::Vector<flatbuffers::Offset<tflite::SubGraph>> *subgraphs() const {
 800e630:	b580      	push	{r7, lr}
 800e632:	b082      	sub	sp, #8
 800e634:	af00      	add	r7, sp, #0
 800e636:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::SubGraph>> *>(VT_SUBGRAPHS);
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	2108      	movs	r1, #8
 800e63c:	4618      	mov	r0, r3
 800e63e:	f000 f849 	bl	800e6d4 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>
 800e642:	4603      	mov	r3, r0
  }
 800e644:	4618      	mov	r0, r3
 800e646:	3708      	adds	r7, #8
 800e648:	46bd      	mov	sp, r7
 800e64a:	bd80      	pop	{r7, pc}

0800e64c <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>:
float FlexbufferWrapper::ElementAsFloat(size_t i) const {
  return static_cast<float>(FlexbufferWrapper::ElementAsDouble(i));
}

// TODO(b/192589496): Ops must always be there. Remove this function when fixed
uint32_t NumSubgraphOperators(const SubGraph* subgraph) {
 800e64c:	b580      	push	{r7, lr}
 800e64e:	b082      	sub	sp, #8
 800e650:	af00      	add	r7, sp, #0
 800e652:	6078      	str	r0, [r7, #4]
  if (subgraph->operators() != nullptr) {
 800e654:	6878      	ldr	r0, [r7, #4]
 800e656:	f7ff ffdd 	bl	800e614 <_ZNK6tflite8SubGraph9operatorsEv>
 800e65a:	4603      	mov	r3, r0
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	bf14      	ite	ne
 800e660:	2301      	movne	r3, #1
 800e662:	2300      	moveq	r3, #0
 800e664:	b2db      	uxtb	r3, r3
 800e666:	2b00      	cmp	r3, #0
 800e668:	d008      	beq.n	800e67c <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE+0x30>
    return subgraph->operators()->size();
 800e66a:	6878      	ldr	r0, [r7, #4]
 800e66c:	f7ff ffd2 	bl	800e614 <_ZNK6tflite8SubGraph9operatorsEv>
 800e670:	4603      	mov	r3, r0
 800e672:	4618      	mov	r0, r3
 800e674:	f000 f83e 	bl	800e6f4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 800e678:	4603      	mov	r3, r0
 800e67a:	e000      	b.n	800e67e <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE+0x32>
  } else {
    return 0;
 800e67c:	2300      	movs	r3, #0
  }
}
 800e67e:	4618      	mov	r0, r3
 800e680:	3708      	adds	r7, #8
 800e682:	46bd      	mov	sp, r7
 800e684:	bd80      	pop	{r7, pc}

0800e686 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>:
// TODO(b/192589496): Ops must always be there. Remove this function when fixed
uint32_t NumSubgraphOperators(const Model* model, int subgraph_idx) {
 800e686:	b580      	push	{r7, lr}
 800e688:	b084      	sub	sp, #16
 800e68a:	af00      	add	r7, sp, #0
 800e68c:	6078      	str	r0, [r7, #4]
 800e68e:	6039      	str	r1, [r7, #0]
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
 800e690:	6878      	ldr	r0, [r7, #4]
 800e692:	f7ff ffcd 	bl	800e630 <_ZNK6tflite5Model9subgraphsEv>
 800e696:	4602      	mov	r2, r0
 800e698:	683b      	ldr	r3, [r7, #0]
 800e69a:	4619      	mov	r1, r3
 800e69c:	4610      	mov	r0, r2
 800e69e:	f000 f845 	bl	800e72c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800e6a2:	60f8      	str	r0, [r7, #12]
  return NumSubgraphOperators(subgraph);
 800e6a4:	68f8      	ldr	r0, [r7, #12]
 800e6a6:	f7ff ffd1 	bl	800e64c <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
 800e6aa:	4603      	mov	r3, r0
}
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	3710      	adds	r7, #16
 800e6b0:	46bd      	mov	sp, r7
 800e6b2:	bd80      	pop	{r7, pc}

0800e6b4 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b082      	sub	sp, #8
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	6078      	str	r0, [r7, #4]
 800e6bc:	460b      	mov	r3, r1
 800e6be:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800e6c0:	887b      	ldrh	r3, [r7, #2]
 800e6c2:	4619      	mov	r1, r3
 800e6c4:	6878      	ldr	r0, [r7, #4]
 800e6c6:	f000 f865 	bl	800e794 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>
 800e6ca:	4603      	mov	r3, r0
  }
 800e6cc:	4618      	mov	r0, r3
 800e6ce:	3708      	adds	r7, #8
 800e6d0:	46bd      	mov	sp, r7
 800e6d2:	bd80      	pop	{r7, pc}

0800e6d4 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800e6d4:	b580      	push	{r7, lr}
 800e6d6:	b082      	sub	sp, #8
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	6078      	str	r0, [r7, #4]
 800e6dc:	460b      	mov	r3, r1
 800e6de:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800e6e0:	887b      	ldrh	r3, [r7, #2]
 800e6e2:	4619      	mov	r1, r3
 800e6e4:	6878      	ldr	r0, [r7, #4]
 800e6e6:	f000 f875 	bl	800e7d4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>
 800e6ea:	4603      	mov	r3, r0
  }
 800e6ec:	4618      	mov	r0, r3
 800e6ee:	3708      	adds	r7, #8
 800e6f0:	46bd      	mov	sp, r7
 800e6f2:	bd80      	pop	{r7, pc}

0800e6f4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 800e6f4:	b580      	push	{r7, lr}
 800e6f6:	b082      	sub	sp, #8
 800e6f8:	af00      	add	r7, sp, #0
 800e6fa:	6078      	str	r0, [r7, #4]
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	4618      	mov	r0, r3
 800e702:	f7fc ff6d 	bl	800b5e0 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800e706:	4603      	mov	r3, r0
 800e708:	4618      	mov	r0, r3
 800e70a:	3708      	adds	r7, #8
 800e70c:	46bd      	mov	sp, r7
 800e70e:	bd80      	pop	{r7, pc}

0800e710 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>:
 800e710:	b580      	push	{r7, lr}
 800e712:	b082      	sub	sp, #8
 800e714:	af00      	add	r7, sp, #0
 800e716:	6078      	str	r0, [r7, #4]
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	4618      	mov	r0, r3
 800e71e:	f7fc ff5f 	bl	800b5e0 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800e722:	4603      	mov	r3, r0
 800e724:	4618      	mov	r0, r3
 800e726:	3708      	adds	r7, #8
 800e728:	46bd      	mov	sp, r7
 800e72a:	bd80      	pop	{r7, pc}

0800e72c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 800e72c:	b580      	push	{r7, lr}
 800e72e:	b082      	sub	sp, #8
 800e730:	af00      	add	r7, sp, #0
 800e732:	6078      	str	r0, [r7, #4]
 800e734:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 800e736:	6878      	ldr	r0, [r7, #4]
 800e738:	f7ff ffea 	bl	800e710 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 800e73c:	4602      	mov	r2, r0
 800e73e:	683b      	ldr	r3, [r7, #0]
 800e740:	4293      	cmp	r3, r2
 800e742:	d306      	bcc.n	800e752 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x26>
 800e744:	4b09      	ldr	r3, [pc, #36]	; (800e76c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x40>)
 800e746:	4a0a      	ldr	r2, [pc, #40]	; (800e770 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x44>)
 800e748:	f44f 7183 	mov.w	r1, #262	; 0x106
 800e74c:	4809      	ldr	r0, [pc, #36]	; (800e774 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x48>)
 800e74e:	f018 fadd 	bl	8026d0c <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 800e752:	6878      	ldr	r0, [r7, #4]
 800e754:	f000 f872 	bl	800e83c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4DataEv>
 800e758:	4603      	mov	r3, r0
 800e75a:	6839      	ldr	r1, [r7, #0]
 800e75c:	4618      	mov	r0, r3
 800e75e:	f000 f859 	bl	800e814 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8SubGraphEEEE4ReadEPKhm>
 800e762:	4603      	mov	r3, r0
  }
 800e764:	4618      	mov	r0, r3
 800e766:	3708      	adds	r7, #8
 800e768:	46bd      	mov	sp, r7
 800e76a:	bd80      	pop	{r7, pc}
 800e76c:	08029760 	.word	0x08029760
 800e770:	0802976c 	.word	0x0802976c
 800e774:	08029868 	.word	0x08029868

0800e778 <_ZN11flatbuffers12EndianScalarIxEET_S1_>:
template<typename T> T EndianScalar(T t) {
 800e778:	b480      	push	{r7}
 800e77a:	b083      	sub	sp, #12
 800e77c:	af00      	add	r7, sp, #0
 800e77e:	e9c7 0100 	strd	r0, r1, [r7]
    return t;
 800e782:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800e786:	4610      	mov	r0, r2
 800e788:	4619      	mov	r1, r3
 800e78a:	370c      	adds	r7, #12
 800e78c:	46bd      	mov	sp, r7
 800e78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e792:	4770      	bx	lr

0800e794 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800e794:	b580      	push	{r7, lr}
 800e796:	b084      	sub	sp, #16
 800e798:	af00      	add	r7, sp, #0
 800e79a:	6078      	str	r0, [r7, #4]
 800e79c:	460b      	mov	r3, r1
 800e79e:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800e7a0:	887b      	ldrh	r3, [r7, #2]
 800e7a2:	4619      	mov	r1, r3
 800e7a4:	6878      	ldr	r0, [r7, #4]
 800e7a6:	f7fc f909 	bl	800a9bc <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800e7aa:	4603      	mov	r3, r0
 800e7ac:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800e7ae:	687a      	ldr	r2, [r7, #4]
 800e7b0:	89fb      	ldrh	r3, [r7, #14]
 800e7b2:	4413      	add	r3, r2
 800e7b4:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800e7b6:	89fb      	ldrh	r3, [r7, #14]
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d006      	beq.n	800e7ca <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t+0x36>
 800e7bc:	68b8      	ldr	r0, [r7, #8]
 800e7be:	f7fc ff34 	bl	800b62a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800e7c2:	4602      	mov	r2, r0
 800e7c4:	68bb      	ldr	r3, [r7, #8]
 800e7c6:	4413      	add	r3, r2
                        : nullptr;
 800e7c8:	e000      	b.n	800e7cc <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800e7ca:	2300      	movs	r3, #0
  }
 800e7cc:	4618      	mov	r0, r3
 800e7ce:	3710      	adds	r7, #16
 800e7d0:	46bd      	mov	sp, r7
 800e7d2:	bd80      	pop	{r7, pc}

0800e7d4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800e7d4:	b580      	push	{r7, lr}
 800e7d6:	b084      	sub	sp, #16
 800e7d8:	af00      	add	r7, sp, #0
 800e7da:	6078      	str	r0, [r7, #4]
 800e7dc:	460b      	mov	r3, r1
 800e7de:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800e7e0:	887b      	ldrh	r3, [r7, #2]
 800e7e2:	4619      	mov	r1, r3
 800e7e4:	6878      	ldr	r0, [r7, #4]
 800e7e6:	f7fc f8e9 	bl	800a9bc <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800e7ea:	4603      	mov	r3, r0
 800e7ec:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800e7ee:	687a      	ldr	r2, [r7, #4]
 800e7f0:	89fb      	ldrh	r3, [r7, #14]
 800e7f2:	4413      	add	r3, r2
 800e7f4:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800e7f6:	89fb      	ldrh	r3, [r7, #14]
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d006      	beq.n	800e80a <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t+0x36>
 800e7fc:	68b8      	ldr	r0, [r7, #8]
 800e7fe:	f7fc ff14 	bl	800b62a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800e802:	4602      	mov	r2, r0
 800e804:	68bb      	ldr	r3, [r7, #8]
 800e806:	4413      	add	r3, r2
                        : nullptr;
 800e808:	e000      	b.n	800e80c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800e80a:	2300      	movs	r3, #0
  }
 800e80c:	4618      	mov	r0, r3
 800e80e:	3710      	adds	r7, #16
 800e810:	46bd      	mov	sp, r7
 800e812:	bd80      	pop	{r7, pc}

0800e814 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8SubGraphEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 800e814:	b580      	push	{r7, lr}
 800e816:	b082      	sub	sp, #8
 800e818:	af00      	add	r7, sp, #0
 800e81a:	6078      	str	r0, [r7, #4]
 800e81c:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 800e81e:	683b      	ldr	r3, [r7, #0]
 800e820:	009b      	lsls	r3, r3, #2
 800e822:	687a      	ldr	r2, [r7, #4]
 800e824:	4413      	add	r3, r2
 800e826:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 800e828:	6878      	ldr	r0, [r7, #4]
 800e82a:	f7fc fefe 	bl	800b62a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800e82e:	4602      	mov	r2, r0
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	4413      	add	r3, r2
  }
 800e834:	4618      	mov	r0, r3
 800e836:	3708      	adds	r7, #8
 800e838:	46bd      	mov	sp, r7
 800e83a:	bd80      	pop	{r7, pc}

0800e83c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4DataEv>:
  const uint8_t *Data() const {
 800e83c:	b480      	push	{r7}
 800e83e:	b083      	sub	sp, #12
 800e840:	af00      	add	r7, sp, #0
 800e842:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	3304      	adds	r3, #4
  }
 800e848:	4618      	mov	r0, r3
 800e84a:	370c      	adds	r7, #12
 800e84c:	46bd      	mov	sp, r7
 800e84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e852:	4770      	bx	lr

0800e854 <_ZNK6tflite6Tensor5shapeEv>:
  const flatbuffers::Vector<int32_t> *shape() const {
 800e854:	b580      	push	{r7, lr}
 800e856:	b082      	sub	sp, #8
 800e858:	af00      	add	r7, sp, #0
 800e85a:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_SHAPE);
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	2104      	movs	r1, #4
 800e860:	4618      	mov	r0, r3
 800e862:	f7fc ff59 	bl	800b718 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 800e866:	4603      	mov	r3, r0
  }
 800e868:	4618      	mov	r0, r3
 800e86a:	3708      	adds	r7, #8
 800e86c:	46bd      	mov	sp, r7
 800e86e:	bd80      	pop	{r7, pc}

0800e870 <_ZNK6tflite6Tensor4typeEv>:
  tflite::TensorType type() const {
 800e870:	b580      	push	{r7, lr}
 800e872:	b082      	sub	sp, #8
 800e874:	af00      	add	r7, sp, #0
 800e876:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::TensorType>(GetField<int8_t>(VT_TYPE, 0));
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	2200      	movs	r2, #0
 800e87c:	2106      	movs	r1, #6
 800e87e:	4618      	mov	r0, r3
 800e880:	f7fc ff5a 	bl	800b738 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 800e884:	4603      	mov	r3, r0
 800e886:	b2db      	uxtb	r3, r3
  }
 800e888:	4618      	mov	r0, r3
 800e88a:	3708      	adds	r7, #8
 800e88c:	46bd      	mov	sp, r7
 800e88e:	bd80      	pop	{r7, pc}

0800e890 <_ZN6tflite12RuntimeShapeC1Ev>:

class RuntimeShape {
 public:
  RuntimeShape& operator=(RuntimeShape const&) = delete;

  RuntimeShape() : size_(0) {}
 800e890:	b480      	push	{r7}
 800e892:	b083      	sub	sp, #12
 800e894:	af00      	add	r7, sp, #0
 800e896:	6078      	str	r0, [r7, #4]
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	2200      	movs	r2, #0
 800e89c:	601a      	str	r2, [r3, #0]
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	4618      	mov	r0, r3
 800e8a2:	370c      	adds	r7, #12
 800e8a4:	46bd      	mov	sp, r7
 800e8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8aa:	4770      	bx	lr

0800e8ac <_ZN6tflite12RuntimeShapeC1EiPKl>:
    for (int i = 0; i < shape_size; ++i) {
      SetDim(i, value);
    }
  }

  RuntimeShape(int dimensions_count, const int32_t* dims_data)
 800e8ac:	b580      	push	{r7, lr}
 800e8ae:	b084      	sub	sp, #16
 800e8b0:	af00      	add	r7, sp, #0
 800e8b2:	60f8      	str	r0, [r7, #12]
 800e8b4:	60b9      	str	r1, [r7, #8]
 800e8b6:	607a      	str	r2, [r7, #4]
      : size_(dimensions_count) {
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	68ba      	ldr	r2, [r7, #8]
 800e8bc:	601a      	str	r2, [r3, #0]
    ReplaceWith(dimensions_count, dims_data);
 800e8be:	687a      	ldr	r2, [r7, #4]
 800e8c0:	68b9      	ldr	r1, [r7, #8]
 800e8c2:	68f8      	ldr	r0, [r7, #12]
 800e8c4:	f000 f828 	bl	800e918 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>
  }
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	4618      	mov	r0, r3
 800e8cc:	3710      	adds	r7, #16
 800e8ce:	46bd      	mov	sp, r7
 800e8d0:	bd80      	pop	{r7, pc}

0800e8d2 <_ZN6tflite12RuntimeShapeD1Ev>:
    return this->size_ == comp.size_ &&
           std::memcmp(DimsData(), comp.DimsData(), size_ * sizeof(int32_t)) ==
               0;
  }

  ~RuntimeShape() {}
 800e8d2:	b480      	push	{r7}
 800e8d4:	b083      	sub	sp, #12
 800e8d6:	af00      	add	r7, sp, #0
 800e8d8:	6078      	str	r0, [r7, #4]
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	4618      	mov	r0, r3
 800e8de:	370c      	adds	r7, #12
 800e8e0:	46bd      	mov	sp, r7
 800e8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e6:	4770      	bx	lr

0800e8e8 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>:

  int32_t DimensionsCount() const { return size_; }
 800e8e8:	b480      	push	{r7}
 800e8ea:	b083      	sub	sp, #12
 800e8ec:	af00      	add	r7, sp, #0
 800e8ee:	6078      	str	r0, [r7, #4]
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	4618      	mov	r0, r3
 800e8f6:	370c      	adds	r7, #12
 800e8f8:	46bd      	mov	sp, r7
 800e8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8fe:	4770      	bx	lr

0800e900 <_ZN6tflite12RuntimeShape8DimsDataEv>:

  static RuntimeShape ExtendedShape(int new_shape_size,
                                    const RuntimeShape& shape) {
    return RuntimeShape(new_shape_size, shape, 1);
  }
  int32_t* DimsData() { return dims_; }
 800e900:	b480      	push	{r7}
 800e902:	b083      	sub	sp, #12
 800e904:	af00      	add	r7, sp, #0
 800e906:	6078      	str	r0, [r7, #4]
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	3304      	adds	r3, #4
 800e90c:	4618      	mov	r0, r3
 800e90e:	370c      	adds	r7, #12
 800e910:	46bd      	mov	sp, r7
 800e912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e916:	4770      	bx	lr

0800e918 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>:
  const int32_t* DimsData() const { return dims_; }

  void ReplaceWith(int dimensions_count, const int32_t* dims_data) {
 800e918:	b580      	push	{r7, lr}
 800e91a:	b086      	sub	sp, #24
 800e91c:	af00      	add	r7, sp, #0
 800e91e:	60f8      	str	r0, [r7, #12]
 800e920:	60b9      	str	r1, [r7, #8]
 800e922:	607a      	str	r2, [r7, #4]
    size_ = dimensions_count;
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	68ba      	ldr	r2, [r7, #8]
 800e928:	601a      	str	r2, [r3, #0]
    int32_t* dst_dims = DimsData();
 800e92a:	68f8      	ldr	r0, [r7, #12]
 800e92c:	f7ff ffe8 	bl	800e900 <_ZN6tflite12RuntimeShape8DimsDataEv>
 800e930:	6178      	str	r0, [r7, #20]
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
 800e932:	68bb      	ldr	r3, [r7, #8]
 800e934:	009b      	lsls	r3, r3, #2
 800e936:	461a      	mov	r2, r3
 800e938:	6879      	ldr	r1, [r7, #4]
 800e93a:	6978      	ldr	r0, [r7, #20]
 800e93c:	f018 fa56 	bl	8026dec <memcpy>
  }
 800e940:	bf00      	nop
 800e942:	3718      	adds	r7, #24
 800e944:	46bd      	mov	sp, r7
 800e946:	bd80      	pop	{r7, pc}

0800e948 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
                           : nullptr;
}

inline RuntimeShape GetTensorShape(const TfLiteTensor* tensor) {
 800e948:	b580      	push	{r7, lr}
 800e94a:	b086      	sub	sp, #24
 800e94c:	af00      	add	r7, sp, #0
 800e94e:	6078      	str	r0, [r7, #4]
 800e950:	6039      	str	r1, [r7, #0]
  if (tensor == nullptr) {
 800e952:	683b      	ldr	r3, [r7, #0]
 800e954:	2b00      	cmp	r3, #0
 800e956:	d103      	bne.n	800e960 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x18>
    return RuntimeShape();
 800e958:	6878      	ldr	r0, [r7, #4]
 800e95a:	f7ff ff99 	bl	800e890 <_ZN6tflite12RuntimeShapeC1Ev>
 800e95e:	e00d      	b.n	800e97c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x34>
  }

  TfLiteIntArray* dims = tensor->dims;
 800e960:	683b      	ldr	r3, [r7, #0]
 800e962:	689b      	ldr	r3, [r3, #8]
 800e964:	617b      	str	r3, [r7, #20]
  const int dims_size = dims->size;
 800e966:	697b      	ldr	r3, [r7, #20]
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	613b      	str	r3, [r7, #16]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
 800e96c:	697b      	ldr	r3, [r7, #20]
 800e96e:	3304      	adds	r3, #4
 800e970:	60fb      	str	r3, [r7, #12]
  return RuntimeShape(dims_size, dims_data);
 800e972:	68fa      	ldr	r2, [r7, #12]
 800e974:	6939      	ldr	r1, [r7, #16]
 800e976:	6878      	ldr	r0, [r7, #4]
 800e978:	f7ff ff98 	bl	800e8ac <_ZN6tflite12RuntimeShapeC1EiPKl>
}
 800e97c:	6878      	ldr	r0, [r7, #4]
 800e97e:	3718      	adds	r7, #24
 800e980:	46bd      	mov	sp, r7
 800e982:	bd80      	pop	{r7, pc}

0800e984 <_ZN6tflite14AlignPointerUpEPhj>:
#include "tensorflow/lite/kernels/internal/tensor_ctypes.h"
#include "tensorflow/lite/schema/schema_generated.h"

namespace tflite {

uint8_t* AlignPointerUp(uint8_t* data, size_t alignment) {
 800e984:	b480      	push	{r7}
 800e986:	b085      	sub	sp, #20
 800e988:	af00      	add	r7, sp, #0
 800e98a:	6078      	str	r0, [r7, #4]
 800e98c:	6039      	str	r1, [r7, #0]
  std::uintptr_t data_as_uintptr_t = reinterpret_cast<std::uintptr_t>(data);
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	60fb      	str	r3, [r7, #12]
  uint8_t* aligned_result = reinterpret_cast<uint8_t*>(
      ((data_as_uintptr_t + (alignment - 1)) / alignment) * alignment);
 800e992:	683a      	ldr	r2, [r7, #0]
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	4413      	add	r3, r2
 800e998:	1e5a      	subs	r2, r3, #1
 800e99a:	683b      	ldr	r3, [r7, #0]
 800e99c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e9a0:	683a      	ldr	r2, [r7, #0]
 800e9a2:	fb02 f303 	mul.w	r3, r2, r3
  uint8_t* aligned_result = reinterpret_cast<uint8_t*>(
 800e9a6:	60bb      	str	r3, [r7, #8]
  return aligned_result;
 800e9a8:	68bb      	ldr	r3, [r7, #8]
}
 800e9aa:	4618      	mov	r0, r3
 800e9ac:	3714      	adds	r7, #20
 800e9ae:	46bd      	mov	sp, r7
 800e9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9b4:	4770      	bx	lr

0800e9b6 <_ZN6tflite16AlignPointerDownEPhj>:

uint8_t* AlignPointerDown(uint8_t* data, size_t alignment) {
 800e9b6:	b480      	push	{r7}
 800e9b8:	b085      	sub	sp, #20
 800e9ba:	af00      	add	r7, sp, #0
 800e9bc:	6078      	str	r0, [r7, #4]
 800e9be:	6039      	str	r1, [r7, #0]
  std::uintptr_t data_as_uintptr_t = reinterpret_cast<std::uintptr_t>(data);
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	60fb      	str	r3, [r7, #12]
  uint8_t* aligned_result =
      reinterpret_cast<uint8_t*>((data_as_uintptr_t / alignment) * alignment);
 800e9c4:	68fa      	ldr	r2, [r7, #12]
 800e9c6:	683b      	ldr	r3, [r7, #0]
 800e9c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800e9cc:	683a      	ldr	r2, [r7, #0]
 800e9ce:	fb02 f303 	mul.w	r3, r2, r3
  uint8_t* aligned_result =
 800e9d2:	60bb      	str	r3, [r7, #8]
  return aligned_result;
 800e9d4:	68bb      	ldr	r3, [r7, #8]
}
 800e9d6:	4618      	mov	r0, r3
 800e9d8:	3714      	adds	r7, #20
 800e9da:	46bd      	mov	sp, r7
 800e9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e0:	4770      	bx	lr

0800e9e2 <_ZN6tflite11AlignSizeUpEjj>:

size_t AlignSizeUp(size_t size, size_t alignment) {
 800e9e2:	b480      	push	{r7}
 800e9e4:	b085      	sub	sp, #20
 800e9e6:	af00      	add	r7, sp, #0
 800e9e8:	6078      	str	r0, [r7, #4]
 800e9ea:	6039      	str	r1, [r7, #0]
  size_t aligned_size = (((size + (alignment - 1)) / alignment) * alignment);
 800e9ec:	683a      	ldr	r2, [r7, #0]
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	4413      	add	r3, r2
 800e9f2:	1e5a      	subs	r2, r3, #1
 800e9f4:	683b      	ldr	r3, [r7, #0]
 800e9f6:	fbb2 f2f3 	udiv	r2, r2, r3
 800e9fa:	683b      	ldr	r3, [r7, #0]
 800e9fc:	fb02 f303 	mul.w	r3, r2, r3
 800ea00:	60fb      	str	r3, [r7, #12]
  return aligned_size;
 800ea02:	68fb      	ldr	r3, [r7, #12]
}
 800ea04:	4618      	mov	r0, r3
 800ea06:	3714      	adds	r7, #20
 800ea08:	46bd      	mov	sp, r7
 800ea0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea0e:	4770      	bx	lr

0800ea10 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>:

TfLiteStatus TfLiteTypeSizeOf(TfLiteType type, size_t* size) {
 800ea10:	b480      	push	{r7}
 800ea12:	b083      	sub	sp, #12
 800ea14:	af00      	add	r7, sp, #0
 800ea16:	4603      	mov	r3, r0
 800ea18:	6039      	str	r1, [r7, #0]
 800ea1a:	71fb      	strb	r3, [r7, #7]
  switch (type) {
 800ea1c:	79fb      	ldrb	r3, [r7, #7]
 800ea1e:	3b01      	subs	r3, #1
 800ea20:	2b0f      	cmp	r3, #15
 800ea22:	d85b      	bhi.n	800eadc <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xcc>
 800ea24:	a201      	add	r2, pc, #4	; (adr r2, 800ea2c <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x1c>)
 800ea26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea2a:	bf00      	nop
 800ea2c:	0800ea75 	.word	0x0800ea75
 800ea30:	0800ea8d 	.word	0x0800ea8d
 800ea34:	0800ea9d 	.word	0x0800ea9d
 800ea38:	0800eaad 	.word	0x0800eaad
 800ea3c:	0800eadd 	.word	0x0800eadd
 800ea40:	0800eabd 	.word	0x0800eabd
 800ea44:	0800ea85 	.word	0x0800ea85
 800ea48:	0800eacd 	.word	0x0800eacd
 800ea4c:	0800eaa5 	.word	0x0800eaa5
 800ea50:	0800ea6d 	.word	0x0800ea6d
 800ea54:	0800ea7d 	.word	0x0800ea7d
 800ea58:	0800ead5 	.word	0x0800ead5
 800ea5c:	0800eab5 	.word	0x0800eab5
 800ea60:	0800eac5 	.word	0x0800eac5
 800ea64:	0800eadd 	.word	0x0800eadd
 800ea68:	0800ea95 	.word	0x0800ea95
    case kTfLiteFloat16:
      *size = sizeof(int16_t);
 800ea6c:	683b      	ldr	r3, [r7, #0]
 800ea6e:	2202      	movs	r2, #2
 800ea70:	601a      	str	r2, [r3, #0]
      break;
 800ea72:	e035      	b.n	800eae0 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xd0>
    case kTfLiteFloat32:
      *size = sizeof(float);
 800ea74:	683b      	ldr	r3, [r7, #0]
 800ea76:	2204      	movs	r2, #4
 800ea78:	601a      	str	r2, [r3, #0]
      break;
 800ea7a:	e031      	b.n	800eae0 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xd0>
    case kTfLiteFloat64:
      *size = sizeof(double);
 800ea7c:	683b      	ldr	r3, [r7, #0]
 800ea7e:	2208      	movs	r2, #8
 800ea80:	601a      	str	r2, [r3, #0]
      break;
 800ea82:	e02d      	b.n	800eae0 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xd0>
    case kTfLiteInt16:
      *size = sizeof(int16_t);
 800ea84:	683b      	ldr	r3, [r7, #0]
 800ea86:	2202      	movs	r2, #2
 800ea88:	601a      	str	r2, [r3, #0]
      break;
 800ea8a:	e029      	b.n	800eae0 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xd0>
    case kTfLiteInt32:
      *size = sizeof(int32_t);
 800ea8c:	683b      	ldr	r3, [r7, #0]
 800ea8e:	2204      	movs	r2, #4
 800ea90:	601a      	str	r2, [r3, #0]
      break;
 800ea92:	e025      	b.n	800eae0 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xd0>
    case kTfLiteUInt32:
      *size = sizeof(uint32_t);
 800ea94:	683b      	ldr	r3, [r7, #0]
 800ea96:	2204      	movs	r2, #4
 800ea98:	601a      	str	r2, [r3, #0]
      break;
 800ea9a:	e021      	b.n	800eae0 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xd0>
    case kTfLiteUInt8:
      *size = sizeof(uint8_t);
 800ea9c:	683b      	ldr	r3, [r7, #0]
 800ea9e:	2201      	movs	r2, #1
 800eaa0:	601a      	str	r2, [r3, #0]
      break;
 800eaa2:	e01d      	b.n	800eae0 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xd0>
    case kTfLiteInt8:
      *size = sizeof(int8_t);
 800eaa4:	683b      	ldr	r3, [r7, #0]
 800eaa6:	2201      	movs	r2, #1
 800eaa8:	601a      	str	r2, [r3, #0]
      break;
 800eaaa:	e019      	b.n	800eae0 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xd0>
    case kTfLiteInt64:
      *size = sizeof(int64_t);
 800eaac:	683b      	ldr	r3, [r7, #0]
 800eaae:	2208      	movs	r2, #8
 800eab0:	601a      	str	r2, [r3, #0]
      break;
 800eab2:	e015      	b.n	800eae0 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xd0>
    case kTfLiteUInt64:
      *size = sizeof(uint64_t);
 800eab4:	683b      	ldr	r3, [r7, #0]
 800eab6:	2208      	movs	r2, #8
 800eab8:	601a      	str	r2, [r3, #0]
      break;
 800eaba:	e011      	b.n	800eae0 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xd0>
    case kTfLiteBool:
      *size = sizeof(bool);
 800eabc:	683b      	ldr	r3, [r7, #0]
 800eabe:	2201      	movs	r2, #1
 800eac0:	601a      	str	r2, [r3, #0]
      break;
 800eac2:	e00d      	b.n	800eae0 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xd0>
    case kTfLiteResource:
      *size = sizeof(int32_t);
 800eac4:	683b      	ldr	r3, [r7, #0]
 800eac6:	2204      	movs	r2, #4
 800eac8:	601a      	str	r2, [r3, #0]
      break;
 800eaca:	e009      	b.n	800eae0 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xd0>
    case kTfLiteComplex64:
      *size = sizeof(float) * 2;
 800eacc:	683b      	ldr	r3, [r7, #0]
 800eace:	2208      	movs	r2, #8
 800ead0:	601a      	str	r2, [r3, #0]
      break;
 800ead2:	e005      	b.n	800eae0 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xd0>
    case kTfLiteComplex128:
      *size = sizeof(double) * 2;
 800ead4:	683b      	ldr	r3, [r7, #0]
 800ead6:	2210      	movs	r2, #16
 800ead8:	601a      	str	r2, [r3, #0]
      break;
 800eada:	e001      	b.n	800eae0 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xd0>
    default:
      return kTfLiteError;
 800eadc:	2301      	movs	r3, #1
 800eade:	e000      	b.n	800eae2 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xd2>
  }
  return kTfLiteOk;
 800eae0:	2300      	movs	r3, #0
}
 800eae2:	4618      	mov	r0, r3
 800eae4:	370c      	adds	r7, #12
 800eae6:	46bd      	mov	sp, r7
 800eae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaec:	4770      	bx	lr
 800eaee:	bf00      	nop

0800eaf0 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE>:

TfLiteStatus BytesRequiredForTensor(const tflite::Tensor& flatbuffer_tensor,
                                    size_t* bytes, size_t* type_size,
                                    ErrorReporter* error_reporter) {
 800eaf0:	b580      	push	{r7, lr}
 800eaf2:	b088      	sub	sp, #32
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	60f8      	str	r0, [r7, #12]
 800eaf8:	60b9      	str	r1, [r7, #8]
 800eafa:	607a      	str	r2, [r7, #4]
 800eafc:	603b      	str	r3, [r7, #0]
  int element_count = 1;
 800eafe:	2301      	movs	r3, #1
 800eb00:	61fb      	str	r3, [r7, #28]
  // If flatbuffer_tensor.shape == nullptr, then flatbuffer_tensor is a scalar
  // so has 1 element.
  if (flatbuffer_tensor.shape() != nullptr) {
 800eb02:	68f8      	ldr	r0, [r7, #12]
 800eb04:	f7ff fea6 	bl	800e854 <_ZNK6tflite6Tensor5shapeEv>
 800eb08:	4603      	mov	r3, r0
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	bf14      	ite	ne
 800eb0e:	2301      	movne	r3, #1
 800eb10:	2300      	moveq	r3, #0
 800eb12:	b2db      	uxtb	r3, r3
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d022      	beq.n	800eb5e <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x6e>
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
 800eb18:	2300      	movs	r3, #0
 800eb1a:	61bb      	str	r3, [r7, #24]
 800eb1c:	68f8      	ldr	r0, [r7, #12]
 800eb1e:	f7ff fe99 	bl	800e854 <_ZNK6tflite6Tensor5shapeEv>
 800eb22:	4603      	mov	r3, r0
 800eb24:	4618      	mov	r0, r3
 800eb26:	f000 f884 	bl	800ec32 <_ZNK11flatbuffers6VectorIlE6LengthEv>
 800eb2a:	4602      	mov	r2, r0
 800eb2c:	69bb      	ldr	r3, [r7, #24]
 800eb2e:	4293      	cmp	r3, r2
 800eb30:	bf34      	ite	cc
 800eb32:	2301      	movcc	r3, #1
 800eb34:	2300      	movcs	r3, #0
 800eb36:	b2db      	uxtb	r3, r3
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d010      	beq.n	800eb5e <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x6e>
      element_count *= flatbuffer_tensor.shape()->Get(n);
 800eb3c:	68f8      	ldr	r0, [r7, #12]
 800eb3e:	f7ff fe89 	bl	800e854 <_ZNK6tflite6Tensor5shapeEv>
 800eb42:	4603      	mov	r3, r0
 800eb44:	69b9      	ldr	r1, [r7, #24]
 800eb46:	4618      	mov	r0, r3
 800eb48:	f7fc fe56 	bl	800b7f8 <_ZNK11flatbuffers6VectorIlE3GetEm>
 800eb4c:	4602      	mov	r2, r0
 800eb4e:	69fb      	ldr	r3, [r7, #28]
 800eb50:	fb02 f303 	mul.w	r3, r2, r3
 800eb54:	61fb      	str	r3, [r7, #28]
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
 800eb56:	69bb      	ldr	r3, [r7, #24]
 800eb58:	3301      	adds	r3, #1
 800eb5a:	61bb      	str	r3, [r7, #24]
 800eb5c:	e7de      	b.n	800eb1c <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x2c>
    }
  }

  TfLiteType tf_lite_type;
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
 800eb5e:	68f8      	ldr	r0, [r7, #12]
 800eb60:	f7ff fe86 	bl	800e870 <_ZNK6tflite6Tensor4typeEv>
 800eb64:	4603      	mov	r3, r0
 800eb66:	4618      	mov	r0, r3
 800eb68:	f107 0315 	add.w	r3, r7, #21
 800eb6c:	683a      	ldr	r2, [r7, #0]
 800eb6e:	4619      	mov	r1, r3
 800eb70:	f7fc f9dc 	bl	800af2c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
 800eb74:	4603      	mov	r3, r0
 800eb76:	75fb      	strb	r3, [r7, #23]
 800eb78:	7dfb      	ldrb	r3, [r7, #23]
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d001      	beq.n	800eb82 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x92>
 800eb7e:	7dfb      	ldrb	r3, [r7, #23]
 800eb80:	e013      	b.n	800ebaa <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xba>
                                          &tf_lite_type, error_reporter));
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(tf_lite_type, type_size));
 800eb82:	7d7b      	ldrb	r3, [r7, #21]
 800eb84:	6879      	ldr	r1, [r7, #4]
 800eb86:	4618      	mov	r0, r3
 800eb88:	f7ff ff42 	bl	800ea10 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
 800eb8c:	4603      	mov	r3, r0
 800eb8e:	75bb      	strb	r3, [r7, #22]
 800eb90:	7dbb      	ldrb	r3, [r7, #22]
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d001      	beq.n	800eb9a <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xaa>
 800eb96:	7dbb      	ldrb	r3, [r7, #22]
 800eb98:	e007      	b.n	800ebaa <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xba>
  *bytes = element_count * (*type_size);
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	69fa      	ldr	r2, [r7, #28]
 800eba0:	fb02 f203 	mul.w	r2, r2, r3
 800eba4:	68bb      	ldr	r3, [r7, #8]
 800eba6:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800eba8:	2300      	movs	r3, #0
}
 800ebaa:	4618      	mov	r0, r3
 800ebac:	3720      	adds	r7, #32
 800ebae:	46bd      	mov	sp, r7
 800ebb0:	bd80      	pop	{r7, pc}

0800ebb2 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>:

TfLiteStatus TfLiteEvalTensorByteLength(const TfLiteEvalTensor* eval_tensor,
                                        size_t* out_bytes) {
 800ebb2:	b580      	push	{r7, lr}
 800ebb4:	b086      	sub	sp, #24
 800ebb6:	af00      	add	r7, sp, #0
 800ebb8:	6078      	str	r0, [r7, #4]
 800ebba:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(out_bytes != nullptr);
 800ebbc:	683b      	ldr	r3, [r7, #0]
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d101      	bne.n	800ebc6 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x14>
 800ebc2:	f018 f89c 	bl	8026cfe <abort>

  int element_count = 1;
 800ebc6:	2301      	movs	r3, #1
 800ebc8:	617b      	str	r3, [r7, #20]
  // If eval_tensor->dims == nullptr, then tensor is a scalar so has 1 element.
  if (eval_tensor->dims != nullptr) {
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	685b      	ldr	r3, [r3, #4]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d015      	beq.n	800ebfe <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x4c>
    for (int n = 0; n < eval_tensor->dims->size; ++n) {
 800ebd2:	2300      	movs	r3, #0
 800ebd4:	613b      	str	r3, [r7, #16]
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	685b      	ldr	r3, [r3, #4]
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	693a      	ldr	r2, [r7, #16]
 800ebde:	429a      	cmp	r2, r3
 800ebe0:	da0d      	bge.n	800ebfe <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x4c>
      element_count *= eval_tensor->dims->data[n];
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	685a      	ldr	r2, [r3, #4]
 800ebe6:	693b      	ldr	r3, [r7, #16]
 800ebe8:	009b      	lsls	r3, r3, #2
 800ebea:	4413      	add	r3, r2
 800ebec:	685a      	ldr	r2, [r3, #4]
 800ebee:	697b      	ldr	r3, [r7, #20]
 800ebf0:	fb02 f303 	mul.w	r3, r2, r3
 800ebf4:	617b      	str	r3, [r7, #20]
    for (int n = 0; n < eval_tensor->dims->size; ++n) {
 800ebf6:	693b      	ldr	r3, [r7, #16]
 800ebf8:	3301      	adds	r3, #1
 800ebfa:	613b      	str	r3, [r7, #16]
 800ebfc:	e7eb      	b.n	800ebd6 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x24>
    }
  }
  size_t type_size;
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(eval_tensor->type, &type_size));
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	7a1b      	ldrb	r3, [r3, #8]
 800ec02:	f107 0208 	add.w	r2, r7, #8
 800ec06:	4611      	mov	r1, r2
 800ec08:	4618      	mov	r0, r3
 800ec0a:	f7ff ff01 	bl	800ea10 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
 800ec0e:	4603      	mov	r3, r0
 800ec10:	73fb      	strb	r3, [r7, #15]
 800ec12:	7bfb      	ldrb	r3, [r7, #15]
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d001      	beq.n	800ec1c <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x6a>
 800ec18:	7bfb      	ldrb	r3, [r7, #15]
 800ec1a:	e006      	b.n	800ec2a <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x78>
  *out_bytes = element_count * type_size;
 800ec1c:	697b      	ldr	r3, [r7, #20]
 800ec1e:	68ba      	ldr	r2, [r7, #8]
 800ec20:	fb02 f203 	mul.w	r2, r2, r3
 800ec24:	683b      	ldr	r3, [r7, #0]
 800ec26:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800ec28:	2300      	movs	r3, #0
}
 800ec2a:	4618      	mov	r0, r3
 800ec2c:	3718      	adds	r7, #24
 800ec2e:	46bd      	mov	sp, r7
 800ec30:	bd80      	pop	{r7, pc}

0800ec32 <_ZNK11flatbuffers6VectorIlE6LengthEv>:
  uoffset_t Length() const { return size(); }
 800ec32:	b580      	push	{r7, lr}
 800ec34:	b082      	sub	sp, #8
 800ec36:	af00      	add	r7, sp, #0
 800ec38:	6078      	str	r0, [r7, #4]
 800ec3a:	6878      	ldr	r0, [r7, #4]
 800ec3c:	f7fc fdce 	bl	800b7dc <_ZNK11flatbuffers6VectorIlE4sizeEv>
 800ec40:	4603      	mov	r3, r0
 800ec42:	4618      	mov	r0, r3
 800ec44:	3708      	adds	r7, #8
 800ec46:	46bd      	mov	sp, r7
 800ec48:	bd80      	pop	{r7, pc}

0800ec4a <_ZNK6tflite22QuantizationParameters5scaleEv>:
  const flatbuffers::Vector<float> *scale() const {
 800ec4a:	b580      	push	{r7, lr}
 800ec4c:	b082      	sub	sp, #8
 800ec4e:	af00      	add	r7, sp, #0
 800ec50:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<float> *>(VT_SCALE);
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	2108      	movs	r1, #8
 800ec56:	4618      	mov	r0, r3
 800ec58:	f001 fca1 	bl	801059e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t>
 800ec5c:	4603      	mov	r3, r0
  }
 800ec5e:	4618      	mov	r0, r3
 800ec60:	3708      	adds	r7, #8
 800ec62:	46bd      	mov	sp, r7
 800ec64:	bd80      	pop	{r7, pc}

0800ec66 <_ZNK6tflite22QuantizationParameters10zero_pointEv>:
  const flatbuffers::Vector<int64_t> *zero_point() const {
 800ec66:	b580      	push	{r7, lr}
 800ec68:	b082      	sub	sp, #8
 800ec6a:	af00      	add	r7, sp, #0
 800ec6c:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int64_t> *>(VT_ZERO_POINT);
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	210a      	movs	r1, #10
 800ec72:	4618      	mov	r0, r3
 800ec74:	f001 fca3 	bl	80105be <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t>
 800ec78:	4603      	mov	r3, r0
  }
 800ec7a:	4618      	mov	r0, r3
 800ec7c:	3708      	adds	r7, #8
 800ec7e:	46bd      	mov	sp, r7
 800ec80:	bd80      	pop	{r7, pc}

0800ec82 <_ZNK6tflite22QuantizationParameters19quantized_dimensionEv>:
  int32_t quantized_dimension() const {
 800ec82:	b580      	push	{r7, lr}
 800ec84:	b082      	sub	sp, #8
 800ec86:	af00      	add	r7, sp, #0
 800ec88:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_QUANTIZED_DIMENSION, 0);
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	2200      	movs	r2, #0
 800ec8e:	2110      	movs	r1, #16
 800ec90:	4618      	mov	r0, r3
 800ec92:	f7fc fd23 	bl	800b6dc <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 800ec96:	4603      	mov	r3, r0
  }
 800ec98:	4618      	mov	r0, r3
 800ec9a:	3708      	adds	r7, #8
 800ec9c:	46bd      	mov	sp, r7
 800ec9e:	bd80      	pop	{r7, pc}

0800eca0 <_ZNK6tflite6Tensor6bufferEv>:
  uint32_t buffer() const {
 800eca0:	b580      	push	{r7, lr}
 800eca2:	b082      	sub	sp, #8
 800eca4:	af00      	add	r7, sp, #0
 800eca6:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_BUFFER, 0);
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	2200      	movs	r2, #0
 800ecac:	2108      	movs	r1, #8
 800ecae:	4618      	mov	r0, r3
 800ecb0:	f001 fc95 	bl	80105de <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 800ecb4:	4603      	mov	r3, r0
  }
 800ecb6:	4618      	mov	r0, r3
 800ecb8:	3708      	adds	r7, #8
 800ecba:	46bd      	mov	sp, r7
 800ecbc:	bd80      	pop	{r7, pc}

0800ecbe <_ZNK6tflite6Tensor12quantizationEv>:
  const tflite::QuantizationParameters *quantization() const {
 800ecbe:	b580      	push	{r7, lr}
 800ecc0:	b082      	sub	sp, #8
 800ecc2:	af00      	add	r7, sp, #0
 800ecc4:	6078      	str	r0, [r7, #4]
    return GetPointer<const tflite::QuantizationParameters *>(VT_QUANTIZATION);
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	210c      	movs	r1, #12
 800ecca:	4618      	mov	r0, r3
 800eccc:	f001 fca5 	bl	801061a <_ZNK11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t>
 800ecd0:	4603      	mov	r3, r0
  }
 800ecd2:	4618      	mov	r0, r3
 800ecd4:	3708      	adds	r7, #8
 800ecd6:	46bd      	mov	sp, r7
 800ecd8:	bd80      	pop	{r7, pc}

0800ecda <_ZNK6tflite6Tensor11is_variableEv>:
  bool is_variable() const {
 800ecda:	b580      	push	{r7, lr}
 800ecdc:	b082      	sub	sp, #8
 800ecde:	af00      	add	r7, sp, #0
 800ece0:	6078      	str	r0, [r7, #4]
    return GetField<uint8_t>(VT_IS_VARIABLE, 0) != 0;
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	2200      	movs	r2, #0
 800ece6:	210e      	movs	r1, #14
 800ece8:	4618      	mov	r0, r3
 800ecea:	f7fc fcc8 	bl	800b67e <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 800ecee:	4603      	mov	r3, r0
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	bf14      	ite	ne
 800ecf4:	2301      	movne	r3, #1
 800ecf6:	2300      	moveq	r3, #0
 800ecf8:	b2db      	uxtb	r3, r3
  }
 800ecfa:	4618      	mov	r0, r3
 800ecfc:	3708      	adds	r7, #8
 800ecfe:	46bd      	mov	sp, r7
 800ed00:	bd80      	pop	{r7, pc}

0800ed02 <_ZNK6tflite8Operator6inputsEv>:
  const flatbuffers::Vector<int32_t> *inputs() const {
 800ed02:	b580      	push	{r7, lr}
 800ed04:	b082      	sub	sp, #8
 800ed06:	af00      	add	r7, sp, #0
 800ed08:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_INPUTS);
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	2106      	movs	r1, #6
 800ed0e:	4618      	mov	r0, r3
 800ed10:	f7fc fd02 	bl	800b718 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 800ed14:	4603      	mov	r3, r0
  }
 800ed16:	4618      	mov	r0, r3
 800ed18:	3708      	adds	r7, #8
 800ed1a:	46bd      	mov	sp, r7
 800ed1c:	bd80      	pop	{r7, pc}

0800ed1e <_ZNK6tflite8Operator7outputsEv>:
  const flatbuffers::Vector<int32_t> *outputs() const {
 800ed1e:	b580      	push	{r7, lr}
 800ed20:	b082      	sub	sp, #8
 800ed22:	af00      	add	r7, sp, #0
 800ed24:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_OUTPUTS);
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	2108      	movs	r1, #8
 800ed2a:	4618      	mov	r0, r3
 800ed2c:	f7fc fcf4 	bl	800b718 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 800ed30:	4603      	mov	r3, r0
  }
 800ed32:	4618      	mov	r0, r3
 800ed34:	3708      	adds	r7, #8
 800ed36:	46bd      	mov	sp, r7
 800ed38:	bd80      	pop	{r7, pc}

0800ed3a <_ZNK6tflite8SubGraph7tensorsEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Tensor>> *tensors() const {
 800ed3a:	b580      	push	{r7, lr}
 800ed3c:	b082      	sub	sp, #8
 800ed3e:	af00      	add	r7, sp, #0
 800ed40:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Tensor>> *>(VT_TENSORS);
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	2104      	movs	r1, #4
 800ed46:	4618      	mov	r0, r3
 800ed48:	f001 fc77 	bl	801063a <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>
 800ed4c:	4603      	mov	r3, r0
  }
 800ed4e:	4618      	mov	r0, r3
 800ed50:	3708      	adds	r7, #8
 800ed52:	46bd      	mov	sp, r7
 800ed54:	bd80      	pop	{r7, pc}

0800ed56 <_ZNK6tflite8SubGraph6inputsEv>:
  const flatbuffers::Vector<int32_t> *inputs() const {
 800ed56:	b580      	push	{r7, lr}
 800ed58:	b082      	sub	sp, #8
 800ed5a:	af00      	add	r7, sp, #0
 800ed5c:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_INPUTS);
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	2106      	movs	r1, #6
 800ed62:	4618      	mov	r0, r3
 800ed64:	f7fc fcd8 	bl	800b718 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 800ed68:	4603      	mov	r3, r0
  }
 800ed6a:	4618      	mov	r0, r3
 800ed6c:	3708      	adds	r7, #8
 800ed6e:	46bd      	mov	sp, r7
 800ed70:	bd80      	pop	{r7, pc}

0800ed72 <_ZNK6tflite8SubGraph7outputsEv>:
  const flatbuffers::Vector<int32_t> *outputs() const {
 800ed72:	b580      	push	{r7, lr}
 800ed74:	b082      	sub	sp, #8
 800ed76:	af00      	add	r7, sp, #0
 800ed78:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_OUTPUTS);
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	2108      	movs	r1, #8
 800ed7e:	4618      	mov	r0, r3
 800ed80:	f7fc fcca 	bl	800b718 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 800ed84:	4603      	mov	r3, r0
  }
 800ed86:	4618      	mov	r0, r3
 800ed88:	3708      	adds	r7, #8
 800ed8a:	46bd      	mov	sp, r7
 800ed8c:	bd80      	pop	{r7, pc}

0800ed8e <_ZNK6tflite6Buffer4dataEv>:
  const flatbuffers::Vector<uint8_t> *data() const {
 800ed8e:	b580      	push	{r7, lr}
 800ed90:	b082      	sub	sp, #8
 800ed92:	af00      	add	r7, sp, #0
 800ed94:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_DATA);
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	2104      	movs	r1, #4
 800ed9a:	4618      	mov	r0, r3
 800ed9c:	f001 fbef 	bl	801057e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>
 800eda0:	4603      	mov	r3, r0
  }
 800eda2:	4618      	mov	r0, r3
 800eda4:	3708      	adds	r7, #8
 800eda6:	46bd      	mov	sp, r7
 800eda8:	bd80      	pop	{r7, pc}

0800edaa <_ZNK6tflite8Metadata4nameEv>:
  const flatbuffers::String *name() const {
 800edaa:	b580      	push	{r7, lr}
 800edac:	b082      	sub	sp, #8
 800edae:	af00      	add	r7, sp, #0
 800edb0:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::String *>(VT_NAME);
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	2104      	movs	r1, #4
 800edb6:	4618      	mov	r0, r3
 800edb8:	f7fc fcde 	bl	800b778 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>
 800edbc:	4603      	mov	r3, r0
  }
 800edbe:	4618      	mov	r0, r3
 800edc0:	3708      	adds	r7, #8
 800edc2:	46bd      	mov	sp, r7
 800edc4:	bd80      	pop	{r7, pc}

0800edc6 <_ZNK6tflite8Metadata6bufferEv>:
  uint32_t buffer() const {
 800edc6:	b580      	push	{r7, lr}
 800edc8:	b082      	sub	sp, #8
 800edca:	af00      	add	r7, sp, #0
 800edcc:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_BUFFER, 0);
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	2200      	movs	r2, #0
 800edd2:	2106      	movs	r1, #6
 800edd4:	4618      	mov	r0, r3
 800edd6:	f001 fc02 	bl	80105de <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 800edda:	4603      	mov	r3, r0
  }
 800eddc:	4618      	mov	r0, r3
 800edde:	3708      	adds	r7, #8
 800ede0:	46bd      	mov	sp, r7
 800ede2:	bd80      	pop	{r7, pc}

0800ede4 <_ZNK6tflite5Model7buffersEv>:
  const flatbuffers::String *description() const {
    return GetPointer<const flatbuffers::String *>(VT_DESCRIPTION);
  }
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Buffer>> *buffers() const {
 800ede4:	b580      	push	{r7, lr}
 800ede6:	b082      	sub	sp, #8
 800ede8:	af00      	add	r7, sp, #0
 800edea:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Buffer>> *>(VT_BUFFERS);
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	210c      	movs	r1, #12
 800edf0:	4618      	mov	r0, r3
 800edf2:	f001 fc32 	bl	801065a <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>
 800edf6:	4603      	mov	r3, r0
  }
 800edf8:	4618      	mov	r0, r3
 800edfa:	3708      	adds	r7, #8
 800edfc:	46bd      	mov	sp, r7
 800edfe:	bd80      	pop	{r7, pc}

0800ee00 <_ZNK6tflite5Model8metadataEv>:
  const flatbuffers::Vector<int32_t> *metadata_buffer() const {
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_METADATA_BUFFER);
  }
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Metadata>> *metadata() const {
 800ee00:	b580      	push	{r7, lr}
 800ee02:	b082      	sub	sp, #8
 800ee04:	af00      	add	r7, sp, #0
 800ee06:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Metadata>> *>(VT_METADATA);
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	2110      	movs	r1, #16
 800ee0c:	4618      	mov	r0, r3
 800ee0e:	f001 fc34 	bl	801067a <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t>
 800ee12:	4603      	mov	r3, r0
  }
 800ee14:	4618      	mov	r0, r3
 800ee16:	3708      	adds	r7, #8
 800ee18:	46bd      	mov	sp, r7
 800ee1a:	bd80      	pop	{r7, pc}

0800ee1c <_ZN6tflite20BuiltinDataAllocatorD1Ev>:

  virtual ~BuiltinDataAllocator() {}
 800ee1c:	b480      	push	{r7}
 800ee1e:	b083      	sub	sp, #12
 800ee20:	af00      	add	r7, sp, #0
 800ee22:	6078      	str	r0, [r7, #4]
 800ee24:	4a04      	ldr	r2, [pc, #16]	; (800ee38 <_ZN6tflite20BuiltinDataAllocatorD1Ev+0x1c>)
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	601a      	str	r2, [r3, #0]
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	4618      	mov	r0, r3
 800ee2e:	370c      	adds	r7, #12
 800ee30:	46bd      	mov	sp, r7
 800ee32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee36:	4770      	bx	lr
 800ee38:	0803fe94 	.word	0x0803fe94

0800ee3c <_ZN6tflite20BuiltinDataAllocatorD0Ev>:
 800ee3c:	b580      	push	{r7, lr}
 800ee3e:	b082      	sub	sp, #8
 800ee40:	af00      	add	r7, sp, #0
 800ee42:	6078      	str	r0, [r7, #4]
 800ee44:	6878      	ldr	r0, [r7, #4]
 800ee46:	f7ff ffe9 	bl	800ee1c <_ZN6tflite20BuiltinDataAllocatorD1Ev>
 800ee4a:	2104      	movs	r1, #4
 800ee4c:	6878      	ldr	r0, [r7, #4]
 800ee4e:	f017 fcec 	bl	802682a <_ZdlPvj>
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	4618      	mov	r0, r3
 800ee56:	3708      	adds	r7, #8
 800ee58:	46bd      	mov	sp, r7
 800ee5a:	bd80      	pop	{r7, pc}

0800ee5c <_ZN6tflite20BuiltinDataAllocatorC1Ev>:
class BuiltinDataAllocator {
 800ee5c:	b480      	push	{r7}
 800ee5e:	b083      	sub	sp, #12
 800ee60:	af00      	add	r7, sp, #0
 800ee62:	6078      	str	r0, [r7, #4]
 800ee64:	4a04      	ldr	r2, [pc, #16]	; (800ee78 <_ZN6tflite20BuiltinDataAllocatorC1Ev+0x1c>)
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	601a      	str	r2, [r3, #0]
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	4618      	mov	r0, r3
 800ee6e:	370c      	adds	r7, #12
 800ee70:	46bd      	mov	sp, r7
 800ee72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee76:	4770      	bx	lr
 800ee78:	0803fe94 	.word	0x0803fe94

0800ee7c <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorC1EPNS_21SimpleMemoryAllocatorE>:
constexpr char kOfflineMemAllocMetadata[] = "OfflineMemoryAllocation";
const TfLiteIntArray kZeroLengthIntArray = {};

class MicroBuiltinDataAllocator : public BuiltinDataAllocator {
 public:
  explicit MicroBuiltinDataAllocator(SimpleMemoryAllocator* memory_allocator)
 800ee7c:	b580      	push	{r7, lr}
 800ee7e:	b082      	sub	sp, #8
 800ee80:	af00      	add	r7, sp, #0
 800ee82:	6078      	str	r0, [r7, #4]
 800ee84:	6039      	str	r1, [r7, #0]
      : memory_allocator_(memory_allocator) {}
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	4618      	mov	r0, r3
 800ee8a:	f7ff ffe7 	bl	800ee5c <_ZN6tflite20BuiltinDataAllocatorC1Ev>
 800ee8e:	4a05      	ldr	r2, [pc, #20]	; (800eea4 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorC1EPNS_21SimpleMemoryAllocatorE+0x28>)
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	601a      	str	r2, [r3, #0]
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	683a      	ldr	r2, [r7, #0]
 800ee98:	605a      	str	r2, [r3, #4]
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	4618      	mov	r0, r3
 800ee9e:	3708      	adds	r7, #8
 800eea0:	46bd      	mov	sp, r7
 800eea2:	bd80      	pop	{r7, pc}
 800eea4:	0803fe40 	.word	0x0803fe40

0800eea8 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator8AllocateEjj>:

  void* Allocate(size_t size, size_t alignment_hint) override {
 800eea8:	b580      	push	{r7, lr}
 800eeaa:	b084      	sub	sp, #16
 800eeac:	af00      	add	r7, sp, #0
 800eeae:	60f8      	str	r0, [r7, #12]
 800eeb0:	60b9      	str	r1, [r7, #8]
 800eeb2:	607a      	str	r2, [r7, #4]
    return memory_allocator_->AllocateFromTail(size, alignment_hint);
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	6858      	ldr	r0, [r3, #4]
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	685b      	ldr	r3, [r3, #4]
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	330c      	adds	r3, #12
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	687a      	ldr	r2, [r7, #4]
 800eec4:	68b9      	ldr	r1, [r7, #8]
 800eec6:	4798      	blx	r3
 800eec8:	4603      	mov	r3, r0
  }
 800eeca:	4618      	mov	r0, r3
 800eecc:	3710      	adds	r7, #16
 800eece:	46bd      	mov	sp, r7
 800eed0:	bd80      	pop	{r7, pc}

0800eed2 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator10DeallocateEPv>:
  void Deallocate(void* data) override {
 800eed2:	b480      	push	{r7}
 800eed4:	b083      	sub	sp, #12
 800eed6:	af00      	add	r7, sp, #0
 800eed8:	6078      	str	r0, [r7, #4]
 800eeda:	6039      	str	r1, [r7, #0]
    // Do not deallocate, builtin data needs to be available for the life time
    // of the model.
  }
 800eedc:	bf00      	nop
 800eede:	370c      	adds	r7, #12
 800eee0:	46bd      	mov	sp, r7
 800eee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eee6:	4770      	bx	lr

0800eee8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilderC1EPNS0_14AllocationInfoEjjPNS_13ErrorReporterE>:
// A helper class to construct AllocationInfo array. This array contains the
// lifetime of tensors / scratch_buffer and will be used to calculate the memory
// plan. Methods need to be called in order from `Init`, `Add*`, to `Finish`.
class AllocationInfoBuilder {
 public:
  AllocationInfoBuilder(AllocationInfo* info, size_t tensor_count,
 800eee8:	b480      	push	{r7}
 800eeea:	b085      	sub	sp, #20
 800eeec:	af00      	add	r7, sp, #0
 800eeee:	60f8      	str	r0, [r7, #12]
 800eef0:	60b9      	str	r1, [r7, #8]
 800eef2:	607a      	str	r2, [r7, #4]
 800eef4:	603b      	str	r3, [r7, #0]
                        size_t scratch_buffer_count, ErrorReporter* reporter)
      : info_(info),
        tensor_count_(tensor_count),
        buffer_count_(scratch_buffer_count),
        reporter_(reporter) {}
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	68ba      	ldr	r2, [r7, #8]
 800eefa:	601a      	str	r2, [r3, #0]
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	687a      	ldr	r2, [r7, #4]
 800ef00:	605a      	str	r2, [r3, #4]
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	683a      	ldr	r2, [r7, #0]
 800ef06:	609a      	str	r2, [r3, #8]
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	69ba      	ldr	r2, [r7, #24]
 800ef0c:	60da      	str	r2, [r3, #12]
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	4618      	mov	r0, r3
 800ef12:	3714      	adds	r7, #20
 800ef14:	46bd      	mov	sp, r7
 800ef16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef1a:	4770      	bx	lr

0800ef1c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor>:
  ErrorReporter* reporter_ = nullptr;
};

TfLiteStatus AllocationInfoBuilder::AddTensors(const SubGraph* subgraph,
                                               const int32_t* offline_offsets,
                                               TfLiteEvalTensor* eval_tensors) {
 800ef1c:	b580      	push	{r7, lr}
 800ef1e:	b096      	sub	sp, #88	; 0x58
 800ef20:	af00      	add	r7, sp, #0
 800ef22:	60f8      	str	r0, [r7, #12]
 800ef24:	60b9      	str	r1, [r7, #8]
 800ef26:	607a      	str	r2, [r7, #4]
 800ef28:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(eval_tensors != nullptr);
 800ef2a:	683b      	ldr	r3, [r7, #0]
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d101      	bne.n	800ef34 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x18>
 800ef30:	f017 fee5 	bl	8026cfe <abort>

  // Set up allocation info for all tensors.
  for (size_t i = 0; i < tensor_count_; ++i) {
 800ef34:	2300      	movs	r3, #0
 800ef36:	657b      	str	r3, [r7, #84]	; 0x54
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	685b      	ldr	r3, [r3, #4]
 800ef3c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ef3e:	429a      	cmp	r2, r3
 800ef40:	d267      	bcs.n	800f012 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xf6>
    AllocationInfo* current = &info_[i];
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	6819      	ldr	r1, [r3, #0]
 800ef46:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ef48:	4613      	mov	r3, r2
 800ef4a:	005b      	lsls	r3, r3, #1
 800ef4c:	4413      	add	r3, r2
 800ef4e:	00db      	lsls	r3, r3, #3
 800ef50:	440b      	add	r3, r1
 800ef52:	63fb      	str	r3, [r7, #60]	; 0x3c
    current->output_ptr = &(eval_tensors[i].data.data);
 800ef54:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ef56:	4613      	mov	r3, r2
 800ef58:	005b      	lsls	r3, r3, #1
 800ef5a:	4413      	add	r3, r2
 800ef5c:	009b      	lsls	r3, r3, #2
 800ef5e:	461a      	mov	r2, r3
 800ef60:	683b      	ldr	r3, [r7, #0]
 800ef62:	4413      	add	r3, r2
 800ef64:	461a      	mov	r2, r3
 800ef66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef68:	605a      	str	r2, [r3, #4]

    TF_LITE_ENSURE_STATUS(
 800ef6a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ef6c:	4613      	mov	r3, r2
 800ef6e:	005b      	lsls	r3, r3, #1
 800ef70:	4413      	add	r3, r2
 800ef72:	009b      	lsls	r3, r3, #2
 800ef74:	461a      	mov	r2, r3
 800ef76:	683b      	ldr	r3, [r7, #0]
 800ef78:	4413      	add	r3, r2
 800ef7a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ef7c:	4611      	mov	r1, r2
 800ef7e:	4618      	mov	r0, r3
 800ef80:	f7ff fe17 	bl	800ebb2 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
 800ef84:	4603      	mov	r3, r0
 800ef86:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800ef8a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d002      	beq.n	800ef98 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x7c>
 800ef92:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800ef96:	e117      	b.n	800f1c8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x2ac>
        TfLiteEvalTensorByteLength(&eval_tensors[i], &current->bytes));

    current->first_created = -1;
 800ef98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ef9e:	609a      	str	r2, [r3, #8]
    current->last_used = -1;
 800efa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800efa2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800efa6:	60da      	str	r2, [r3, #12]
    current->needs_allocating = (eval_tensors[i].data.data == nullptr) &&
 800efa8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800efaa:	4613      	mov	r3, r2
 800efac:	005b      	lsls	r3, r3, #1
 800efae:	4413      	add	r3, r2
 800efb0:	009b      	lsls	r3, r3, #2
 800efb2:	461a      	mov	r2, r3
 800efb4:	683b      	ldr	r3, [r7, #0]
 800efb6:	4413      	add	r3, r2
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d113      	bne.n	800efe6 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xca>
                                (!subgraph->tensors()->Get(i)->is_variable());
 800efbe:	68b8      	ldr	r0, [r7, #8]
 800efc0:	f7ff febb 	bl	800ed3a <_ZNK6tflite8SubGraph7tensorsEv>
 800efc4:	4603      	mov	r3, r0
 800efc6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800efc8:	4618      	mov	r0, r3
 800efca:	f001 fbef 	bl	80107ac <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 800efce:	4603      	mov	r3, r0
 800efd0:	4618      	mov	r0, r3
 800efd2:	f7ff fe82 	bl	800ecda <_ZNK6tflite6Tensor11is_variableEv>
 800efd6:	4603      	mov	r3, r0
 800efd8:	f083 0301 	eor.w	r3, r3, #1
 800efdc:	b2db      	uxtb	r3, r3
    current->needs_allocating = (eval_tensors[i].data.data == nullptr) &&
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d001      	beq.n	800efe6 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xca>
 800efe2:	2201      	movs	r2, #1
 800efe4:	e000      	b.n	800efe8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xcc>
 800efe6:	2200      	movs	r2, #0
 800efe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800efea:	751a      	strb	r2, [r3, #20]
    if (offline_offsets) {
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d007      	beq.n	800f002 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xe6>
      current->offline_offset = offline_offsets[i];
 800eff2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eff4:	009b      	lsls	r3, r3, #2
 800eff6:	687a      	ldr	r2, [r7, #4]
 800eff8:	4413      	add	r3, r2
 800effa:	681a      	ldr	r2, [r3, #0]
 800effc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800effe:	611a      	str	r2, [r3, #16]
 800f000:	e003      	b.n	800f00a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xee>
    } else {
      current->offline_offset = kOnlinePlannedBuffer;
 800f002:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f004:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f008:	611a      	str	r2, [r3, #16]
  for (size_t i = 0; i < tensor_count_; ++i) {
 800f00a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f00c:	3301      	adds	r3, #1
 800f00e:	657b      	str	r3, [r7, #84]	; 0x54
 800f010:	e792      	b.n	800ef38 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x1c>
    }
  }

  uint32_t operators_size = NumSubgraphOperators(subgraph);
 800f012:	68b8      	ldr	r0, [r7, #8]
 800f014:	f7ff fb1a 	bl	800e64c <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
 800f018:	6378      	str	r0, [r7, #52]	; 0x34

  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
 800f01a:	2300      	movs	r3, #0
 800f01c:	653b      	str	r3, [r7, #80]	; 0x50
 800f01e:	68b8      	ldr	r0, [r7, #8]
 800f020:	f7ff fe99 	bl	800ed56 <_ZNK6tflite8SubGraph6inputsEv>
 800f024:	4603      	mov	r3, r0
 800f026:	4618      	mov	r0, r3
 800f028:	f7fc fbd8 	bl	800b7dc <_ZNK11flatbuffers6VectorIlE4sizeEv>
 800f02c:	4602      	mov	r2, r0
 800f02e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f030:	4293      	cmp	r3, r2
 800f032:	bf34      	ite	cc
 800f034:	2301      	movcc	r3, #1
 800f036:	2300      	movcs	r3, #0
 800f038:	b2db      	uxtb	r3, r3
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d018      	beq.n	800f070 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x154>
    const int tensor_index = subgraph->inputs()->Get(i);
 800f03e:	68b8      	ldr	r0, [r7, #8]
 800f040:	f7ff fe89 	bl	800ed56 <_ZNK6tflite8SubGraph6inputsEv>
 800f044:	4603      	mov	r3, r0
 800f046:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f048:	4618      	mov	r0, r3
 800f04a:	f7fc fbd5 	bl	800b7f8 <_ZNK11flatbuffers6VectorIlE3GetEm>
 800f04e:	6178      	str	r0, [r7, #20]
    AllocationInfo* current = &info_[tensor_index];
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	6819      	ldr	r1, [r3, #0]
 800f054:	697a      	ldr	r2, [r7, #20]
 800f056:	4613      	mov	r3, r2
 800f058:	005b      	lsls	r3, r3, #1
 800f05a:	4413      	add	r3, r2
 800f05c:	00db      	lsls	r3, r3, #3
 800f05e:	440b      	add	r3, r1
 800f060:	613b      	str	r3, [r7, #16]
    current->first_created = 0;
 800f062:	693b      	ldr	r3, [r7, #16]
 800f064:	2200      	movs	r2, #0
 800f066:	609a      	str	r2, [r3, #8]
  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
 800f068:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f06a:	3301      	adds	r3, #1
 800f06c:	653b      	str	r3, [r7, #80]	; 0x50
 800f06e:	e7d6      	b.n	800f01e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x102>
  }

  // Mark all outputs as persistent to the end of the invocation.
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
 800f070:	2300      	movs	r3, #0
 800f072:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f074:	68b8      	ldr	r0, [r7, #8]
 800f076:	f7ff fe7c 	bl	800ed72 <_ZNK6tflite8SubGraph7outputsEv>
 800f07a:	4603      	mov	r3, r0
 800f07c:	4618      	mov	r0, r3
 800f07e:	f7fc fbad 	bl	800b7dc <_ZNK11flatbuffers6VectorIlE4sizeEv>
 800f082:	4602      	mov	r2, r0
 800f084:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f086:	4293      	cmp	r3, r2
 800f088:	bf34      	ite	cc
 800f08a:	2301      	movcc	r3, #1
 800f08c:	2300      	movcs	r3, #0
 800f08e:	b2db      	uxtb	r3, r3
 800f090:	2b00      	cmp	r3, #0
 800f092:	d01a      	beq.n	800f0ca <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x1ae>
    const int tensor_index = subgraph->outputs()->Get(i);
 800f094:	68b8      	ldr	r0, [r7, #8]
 800f096:	f7ff fe6c 	bl	800ed72 <_ZNK6tflite8SubGraph7outputsEv>
 800f09a:	4603      	mov	r3, r0
 800f09c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800f09e:	4618      	mov	r0, r3
 800f0a0:	f7fc fbaa 	bl	800b7f8 <_ZNK11flatbuffers6VectorIlE3GetEm>
 800f0a4:	61f8      	str	r0, [r7, #28]
    AllocationInfo* current = &info_[tensor_index];
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	6819      	ldr	r1, [r3, #0]
 800f0aa:	69fa      	ldr	r2, [r7, #28]
 800f0ac:	4613      	mov	r3, r2
 800f0ae:	005b      	lsls	r3, r3, #1
 800f0b0:	4413      	add	r3, r2
 800f0b2:	00db      	lsls	r3, r3, #3
 800f0b4:	440b      	add	r3, r1
 800f0b6:	61bb      	str	r3, [r7, #24]
    current->last_used = operators_size - 1;
 800f0b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f0ba:	3b01      	subs	r3, #1
 800f0bc:	461a      	mov	r2, r3
 800f0be:	69bb      	ldr	r3, [r7, #24]
 800f0c0:	60da      	str	r2, [r3, #12]
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
 800f0c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f0c4:	3301      	adds	r3, #1
 800f0c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f0c8:	e7d4      	b.n	800f074 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x158>
  }

  // Figure out when the first and last use of each tensor is.
  for (int i = (operators_size - 1); i >= 0; --i) {
 800f0ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f0cc:	3b01      	subs	r3, #1
 800f0ce:	64bb      	str	r3, [r7, #72]	; 0x48
 800f0d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	db77      	blt.n	800f1c6 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x2aa>
    const auto* op = subgraph->operators()->Get(i);
 800f0d6:	68b8      	ldr	r0, [r7, #8]
 800f0d8:	f7ff fa9c 	bl	800e614 <_ZNK6tflite8SubGraph9operatorsEv>
 800f0dc:	4602      	mov	r2, r0
 800f0de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f0e0:	4619      	mov	r1, r3
 800f0e2:	4610      	mov	r0, r2
 800f0e4:	f001 fb88 	bl	80107f8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm>
 800f0e8:	6338      	str	r0, [r7, #48]	; 0x30
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
 800f0ea:	2300      	movs	r3, #0
 800f0ec:	647b      	str	r3, [r7, #68]	; 0x44
 800f0ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f0f0:	f7ff fe07 	bl	800ed02 <_ZNK6tflite8Operator6inputsEv>
 800f0f4:	4603      	mov	r3, r0
 800f0f6:	4618      	mov	r0, r3
 800f0f8:	f7fc fb70 	bl	800b7dc <_ZNK11flatbuffers6VectorIlE4sizeEv>
 800f0fc:	4602      	mov	r2, r0
 800f0fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f100:	4293      	cmp	r3, r2
 800f102:	bf34      	ite	cc
 800f104:	2301      	movcc	r3, #1
 800f106:	2300      	movcs	r3, #0
 800f108:	b2db      	uxtb	r3, r3
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d022      	beq.n	800f154 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x238>
      const int tensor_index = op->inputs()->Get(n);
 800f10e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f110:	f7ff fdf7 	bl	800ed02 <_ZNK6tflite8Operator6inputsEv>
 800f114:	4603      	mov	r3, r0
 800f116:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f118:	4618      	mov	r0, r3
 800f11a:	f7fc fb6d 	bl	800b7f8 <_ZNK11flatbuffers6VectorIlE3GetEm>
 800f11e:	6278      	str	r0, [r7, #36]	; 0x24
      AllocationInfo* current = &info_[tensor_index];
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	6819      	ldr	r1, [r3, #0]
 800f124:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f126:	4613      	mov	r3, r2
 800f128:	005b      	lsls	r3, r3, #1
 800f12a:	4413      	add	r3, r2
 800f12c:	00db      	lsls	r3, r3, #3
 800f12e:	440b      	add	r3, r1
 800f130:	623b      	str	r3, [r7, #32]
      if (((current->last_used == -1) || (current->last_used < i))) {
 800f132:	6a3b      	ldr	r3, [r7, #32]
 800f134:	68db      	ldr	r3, [r3, #12]
 800f136:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f13a:	d004      	beq.n	800f146 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x22a>
 800f13c:	6a3b      	ldr	r3, [r7, #32]
 800f13e:	68db      	ldr	r3, [r3, #12]
 800f140:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f142:	429a      	cmp	r2, r3
 800f144:	dd02      	ble.n	800f14c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x230>
        current->last_used = i;
 800f146:	6a3b      	ldr	r3, [r7, #32]
 800f148:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f14a:	60da      	str	r2, [r3, #12]
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
 800f14c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f14e:	3301      	adds	r3, #1
 800f150:	647b      	str	r3, [r7, #68]	; 0x44
 800f152:	e7cc      	b.n	800f0ee <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x1d2>
      }
    }
    for (size_t n = 0; n < op->outputs()->size(); ++n) {
 800f154:	2300      	movs	r3, #0
 800f156:	643b      	str	r3, [r7, #64]	; 0x40
 800f158:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f15a:	f7ff fde0 	bl	800ed1e <_ZNK6tflite8Operator7outputsEv>
 800f15e:	4603      	mov	r3, r0
 800f160:	4618      	mov	r0, r3
 800f162:	f7fc fb3b 	bl	800b7dc <_ZNK11flatbuffers6VectorIlE4sizeEv>
 800f166:	4602      	mov	r2, r0
 800f168:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f16a:	4293      	cmp	r3, r2
 800f16c:	bf34      	ite	cc
 800f16e:	2301      	movcc	r3, #1
 800f170:	2300      	movcs	r3, #0
 800f172:	b2db      	uxtb	r3, r3
 800f174:	2b00      	cmp	r3, #0
 800f176:	d022      	beq.n	800f1be <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x2a2>
      const int tensor_index = op->outputs()->Get(n);
 800f178:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f17a:	f7ff fdd0 	bl	800ed1e <_ZNK6tflite8Operator7outputsEv>
 800f17e:	4603      	mov	r3, r0
 800f180:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f182:	4618      	mov	r0, r3
 800f184:	f7fc fb38 	bl	800b7f8 <_ZNK11flatbuffers6VectorIlE3GetEm>
 800f188:	62f8      	str	r0, [r7, #44]	; 0x2c
      AllocationInfo* current = &info_[tensor_index];
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	6819      	ldr	r1, [r3, #0]
 800f18e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f190:	4613      	mov	r3, r2
 800f192:	005b      	lsls	r3, r3, #1
 800f194:	4413      	add	r3, r2
 800f196:	00db      	lsls	r3, r3, #3
 800f198:	440b      	add	r3, r1
 800f19a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((current->first_created == -1) || (current->first_created > i)) {
 800f19c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f19e:	689b      	ldr	r3, [r3, #8]
 800f1a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f1a4:	d004      	beq.n	800f1b0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x294>
 800f1a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1a8:	689b      	ldr	r3, [r3, #8]
 800f1aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f1ac:	429a      	cmp	r2, r3
 800f1ae:	da02      	bge.n	800f1b6 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x29a>
        current->first_created = i;
 800f1b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f1b4:	609a      	str	r2, [r3, #8]
    for (size_t n = 0; n < op->outputs()->size(); ++n) {
 800f1b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f1b8:	3301      	adds	r3, #1
 800f1ba:	643b      	str	r3, [r7, #64]	; 0x40
 800f1bc:	e7cc      	b.n	800f158 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x23c>
  for (int i = (operators_size - 1); i >= 0; --i) {
 800f1be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f1c0:	3b01      	subs	r3, #1
 800f1c2:	64bb      	str	r3, [r7, #72]	; 0x48
 800f1c4:	e784      	b.n	800f0d0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x1b4>
      }
    }
  }
  return kTfLiteOk;
 800f1c6:	2300      	movs	r3, #0
}
 800f1c8:	4618      	mov	r0, r3
 800f1ca:	3758      	adds	r7, #88	; 0x58
 800f1cc:	46bd      	mov	sp, r7
 800f1ce:	bd80      	pop	{r7, pc}

0800f1d0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl>:

// Get offline tensors allocation plan. See
// micro/docs/memory_management.md for more info.
TfLiteStatus AllocationInfoBuilder::GetOfflinePlannedOffsets(
    const Model* model, const int32_t** offline_planner_offsets) {
 800f1d0:	b580      	push	{r7, lr}
 800f1d2:	b08c      	sub	sp, #48	; 0x30
 800f1d4:	af00      	add	r7, sp, #0
 800f1d6:	60f8      	str	r0, [r7, #12]
 800f1d8:	60b9      	str	r1, [r7, #8]
 800f1da:	607a      	str	r2, [r7, #4]
  if (model->metadata()) {
 800f1dc:	68b8      	ldr	r0, [r7, #8]
 800f1de:	f7ff fe0f 	bl	800ee00 <_ZNK6tflite5Model8metadataEv>
 800f1e2:	4603      	mov	r3, r0
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	bf14      	ite	ne
 800f1e8:	2301      	movne	r3, #1
 800f1ea:	2300      	moveq	r3, #0
 800f1ec:	b2db      	uxtb	r3, r3
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d060      	beq.n	800f2b4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xe4>
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
 800f1f2:	2300      	movs	r3, #0
 800f1f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f1f6:	68b8      	ldr	r0, [r7, #8]
 800f1f8:	f7ff fe02 	bl	800ee00 <_ZNK6tflite5Model8metadataEv>
 800f1fc:	4603      	mov	r3, r0
 800f1fe:	4618      	mov	r0, r3
 800f200:	f001 fb54 	bl	80108ac <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4sizeEv>
 800f204:	4602      	mov	r2, r0
 800f206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f208:	4293      	cmp	r3, r2
 800f20a:	bf34      	ite	cc
 800f20c:	2301      	movcc	r3, #1
 800f20e:	2300      	movcs	r3, #0
 800f210:	b2db      	uxtb	r3, r3
 800f212:	2b00      	cmp	r3, #0
 800f214:	d04e      	beq.n	800f2b4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xe4>
      auto metadata = model->metadata()->Get(i);
 800f216:	68b8      	ldr	r0, [r7, #8]
 800f218:	f7ff fdf2 	bl	800ee00 <_ZNK6tflite5Model8metadataEv>
 800f21c:	4603      	mov	r3, r0
 800f21e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f220:	4618      	mov	r0, r3
 800f222:	f001 fb51 	bl	80108c8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm>
 800f226:	62b8      	str	r0, [r7, #40]	; 0x28
      if (strncmp(metadata->name()->c_str(), kOfflineMemAllocMetadata,
 800f228:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f22a:	f7ff fdbe 	bl	800edaa <_ZNK6tflite8Metadata4nameEv>
 800f22e:	4603      	mov	r3, r0
 800f230:	4618      	mov	r0, r3
 800f232:	f7fb fba6 	bl	800a982 <_ZNK11flatbuffers6String5c_strEv>
 800f236:	4603      	mov	r3, r0
 800f238:	2217      	movs	r2, #23
 800f23a:	4921      	ldr	r1, [pc, #132]	; (800f2c0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xf0>)
 800f23c:	4618      	mov	r0, r3
 800f23e:	f018 fa19 	bl	8027674 <strncmp>
 800f242:	4603      	mov	r3, r0
                  strlen(kOfflineMemAllocMetadata)) == 0) {
 800f244:	2b00      	cmp	r3, #0
 800f246:	bf0c      	ite	eq
 800f248:	2301      	moveq	r3, #1
 800f24a:	2300      	movne	r3, #0
 800f24c:	b2db      	uxtb	r3, r3
      if (strncmp(metadata->name()->c_str(), kOfflineMemAllocMetadata,
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d02c      	beq.n	800f2ac <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xdc>
        const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers =
            model->buffers();
 800f252:	68b8      	ldr	r0, [r7, #8]
 800f254:	f7ff fdc6 	bl	800ede4 <_ZNK6tflite5Model7buffersEv>
 800f258:	6278      	str	r0, [r7, #36]	; 0x24
        auto* buffer = (*buffers)[metadata->buffer()];
 800f25a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f25c:	f7ff fdb3 	bl	800edc6 <_ZNK6tflite8Metadata6bufferEv>
 800f260:	4603      	mov	r3, r0
 800f262:	4619      	mov	r1, r3
 800f264:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f266:	f001 fb63 	bl	8010930 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEEixEm>
 800f26a:	6238      	str	r0, [r7, #32]
        auto* array = buffer->data();
 800f26c:	6a38      	ldr	r0, [r7, #32]
 800f26e:	f7ff fd8e 	bl	800ed8e <_ZNK6tflite6Buffer4dataEv>
 800f272:	61f8      	str	r0, [r7, #28]
        const uint32_t* metadata_buffer =
            reinterpret_cast<const uint32_t*>(array->data());
 800f274:	69f8      	ldr	r0, [r7, #28]
 800f276:	f001 fb69 	bl	801094c <_ZNK11flatbuffers6VectorIhE4dataEv>
 800f27a:	61b8      	str	r0, [r7, #24]
        const size_t nbr_tensors = static_cast<size_t>(metadata_buffer[2]);
 800f27c:	69bb      	ldr	r3, [r7, #24]
 800f27e:	3308      	adds	r3, #8
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	617b      	str	r3, [r7, #20]
        *offline_planner_offsets =
            reinterpret_cast<const int32_t*>(&metadata_buffer[3]);
 800f284:	69bb      	ldr	r3, [r7, #24]
 800f286:	f103 020c 	add.w	r2, r3, #12
        *offline_planner_offsets =
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	601a      	str	r2, [r3, #0]

        if (tensor_count_ != nbr_tensors) {
 800f28e:	68fb      	ldr	r3, [r7, #12]
 800f290:	685b      	ldr	r3, [r3, #4]
 800f292:	697a      	ldr	r2, [r7, #20]
 800f294:	429a      	cmp	r2, r3
 800f296:	d009      	beq.n	800f2ac <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xdc>
          TF_LITE_REPORT_ERROR(reporter_,
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	68d8      	ldr	r0, [r3, #12]
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	685b      	ldr	r3, [r3, #4]
 800f2a0:	697a      	ldr	r2, [r7, #20]
 800f2a2:	4908      	ldr	r1, [pc, #32]	; (800f2c4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xf4>)
 800f2a4:	f7fb fb2e 	bl	800a904 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                               "Nbr of offline buffer offsets (%d) in metadata "
                               "not equal nbr tensors (%d)\n",
                               nbr_tensors, tensor_count_);
          return kTfLiteError;
 800f2a8:	2301      	movs	r3, #1
 800f2aa:	e004      	b.n	800f2b6 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xe6>
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
 800f2ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2ae:	3301      	adds	r3, #1
 800f2b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f2b2:	e7a0      	b.n	800f1f6 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0x26>
        }
      }
    }
  }
  return kTfLiteOk;
 800f2b4:	2300      	movs	r3, #0
}
 800f2b6:	4618      	mov	r0, r3
 800f2b8:	3730      	adds	r7, #48	; 0x30
 800f2ba:	46bd      	mov	sp, r7
 800f2bc:	bd80      	pop	{r7, pc}
 800f2be:	bf00      	nop
 800f2c0:	0803fe1c 	.word	0x0803fe1c
 800f2c4:	080299f4 	.word	0x080299f4

0800f2c8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE>:

TfLiteStatus AllocationInfoBuilder::AddScratchBuffers(
    internal::ScratchBufferRequest* scratch_buffer_requests,
    ScratchBufferHandle* scratch_buffer_handles) {
 800f2c8:	b480      	push	{r7}
 800f2ca:	b089      	sub	sp, #36	; 0x24
 800f2cc:	af00      	add	r7, sp, #0
 800f2ce:	60f8      	str	r0, [r7, #12]
 800f2d0:	60b9      	str	r1, [r7, #8]
 800f2d2:	607a      	str	r2, [r7, #4]
  // Set up allocation info for buffers.
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
 800f2d4:	68fb      	ldr	r3, [r7, #12]
 800f2d6:	685b      	ldr	r3, [r3, #4]
 800f2d8:	61fb      	str	r3, [r7, #28]
 800f2da:	68fb      	ldr	r3, [r7, #12]
 800f2dc:	685a      	ldr	r2, [r3, #4]
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	689b      	ldr	r3, [r3, #8]
 800f2e2:	4413      	add	r3, r2
 800f2e4:	69fa      	ldr	r2, [r7, #28]
 800f2e6:	429a      	cmp	r2, r3
 800f2e8:	d232      	bcs.n	800f350 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE+0x88>
    internal::ScratchBufferRequest* current_request =
        &(scratch_buffer_requests[i - tensor_count_]);
 800f2ea:	68fb      	ldr	r3, [r7, #12]
 800f2ec:	685b      	ldr	r3, [r3, #4]
 800f2ee:	69fa      	ldr	r2, [r7, #28]
 800f2f0:	1ad3      	subs	r3, r2, r3
 800f2f2:	00db      	lsls	r3, r3, #3
    internal::ScratchBufferRequest* current_request =
 800f2f4:	68ba      	ldr	r2, [r7, #8]
 800f2f6:	4413      	add	r3, r2
 800f2f8:	61bb      	str	r3, [r7, #24]
    ScratchBufferHandle* current_handle =
        &(scratch_buffer_handles[i - tensor_count_]);
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	685b      	ldr	r3, [r3, #4]
 800f2fe:	69fa      	ldr	r2, [r7, #28]
 800f300:	1ad3      	subs	r3, r2, r3
 800f302:	009b      	lsls	r3, r3, #2
    ScratchBufferHandle* current_handle =
 800f304:	687a      	ldr	r2, [r7, #4]
 800f306:	4413      	add	r3, r2
 800f308:	617b      	str	r3, [r7, #20]

    AllocationInfo* current = &info_[i];
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	6819      	ldr	r1, [r3, #0]
 800f30e:	69fa      	ldr	r2, [r7, #28]
 800f310:	4613      	mov	r3, r2
 800f312:	005b      	lsls	r3, r3, #1
 800f314:	4413      	add	r3, r2
 800f316:	00db      	lsls	r3, r3, #3
 800f318:	440b      	add	r3, r1
 800f31a:	613b      	str	r3, [r7, #16]
    current->output_ptr = reinterpret_cast<void**>(&current_handle->data);
 800f31c:	697a      	ldr	r2, [r7, #20]
 800f31e:	693b      	ldr	r3, [r7, #16]
 800f320:	605a      	str	r2, [r3, #4]
    current->bytes = current_request->bytes;
 800f322:	69bb      	ldr	r3, [r7, #24]
 800f324:	681a      	ldr	r2, [r3, #0]
 800f326:	693b      	ldr	r3, [r7, #16]
 800f328:	601a      	str	r2, [r3, #0]
    current->first_created = current_request->node_idx;
 800f32a:	69bb      	ldr	r3, [r7, #24]
 800f32c:	685a      	ldr	r2, [r3, #4]
 800f32e:	693b      	ldr	r3, [r7, #16]
 800f330:	609a      	str	r2, [r3, #8]
    current->last_used = current_request->node_idx;
 800f332:	69bb      	ldr	r3, [r7, #24]
 800f334:	685a      	ldr	r2, [r3, #4]
 800f336:	693b      	ldr	r3, [r7, #16]
 800f338:	60da      	str	r2, [r3, #12]
    current->offline_offset = kOnlinePlannedBuffer;
 800f33a:	693b      	ldr	r3, [r7, #16]
 800f33c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f340:	611a      	str	r2, [r3, #16]
    current->needs_allocating = true;
 800f342:	693b      	ldr	r3, [r7, #16]
 800f344:	2201      	movs	r2, #1
 800f346:	751a      	strb	r2, [r3, #20]
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
 800f348:	69fb      	ldr	r3, [r7, #28]
 800f34a:	3301      	adds	r3, #1
 800f34c:	61fb      	str	r3, [r7, #28]
 800f34e:	e7c4      	b.n	800f2da <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE+0x12>
  }
  return kTfLiteOk;
 800f350:	2300      	movs	r3, #0
}
 800f352:	4618      	mov	r0, r3
 800f354:	3724      	adds	r7, #36	; 0x24
 800f356:	46bd      	mov	sp, r7
 800f358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f35c:	4770      	bx	lr

0800f35e <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_18MicroMemoryPlannerEPKNS0_14AllocationInfoEj>:

TfLiteStatus CreatePlan(ErrorReporter* error_reporter,
                        MicroMemoryPlanner* planner,
                        const AllocationInfo* allocation_info,
                        size_t allocation_info_size) {
 800f35e:	b590      	push	{r4, r7, lr}
 800f360:	b08b      	sub	sp, #44	; 0x2c
 800f362:	af02      	add	r7, sp, #8
 800f364:	60f8      	str	r0, [r7, #12]
 800f366:	60b9      	str	r1, [r7, #8]
 800f368:	607a      	str	r2, [r7, #4]
 800f36a:	603b      	str	r3, [r7, #0]
  // Add the tensors to our allocation plan.
  for (size_t i = 0; i < allocation_info_size; ++i) {
 800f36c:	2300      	movs	r3, #0
 800f36e:	61fb      	str	r3, [r7, #28]
 800f370:	69fa      	ldr	r2, [r7, #28]
 800f372:	683b      	ldr	r3, [r7, #0]
 800f374:	429a      	cmp	r2, r3
 800f376:	d24a      	bcs.n	800f40e <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_18MicroMemoryPlannerEPKNS0_14AllocationInfoEj+0xb0>
    const AllocationInfo* current = &allocation_info[i];
 800f378:	69fa      	ldr	r2, [r7, #28]
 800f37a:	4613      	mov	r3, r2
 800f37c:	005b      	lsls	r3, r3, #1
 800f37e:	4413      	add	r3, r2
 800f380:	00db      	lsls	r3, r3, #3
 800f382:	461a      	mov	r2, r3
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	4413      	add	r3, r2
 800f388:	61bb      	str	r3, [r7, #24]
    if (current->needs_allocating) {
 800f38a:	69bb      	ldr	r3, [r7, #24]
 800f38c:	7d1b      	ldrb	r3, [r3, #20]
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d039      	beq.n	800f406 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_18MicroMemoryPlannerEPKNS0_14AllocationInfoEj+0xa8>
      size_t aligned_bytes_required =
          AlignSizeUp(current->bytes, kBufferAlignment);
 800f392:	69bb      	ldr	r3, [r7, #24]
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	2110      	movs	r1, #16
 800f398:	4618      	mov	r0, r3
 800f39a:	f7ff fb22 	bl	800e9e2 <_ZN6tflite11AlignSizeUpEjj>
 800f39e:	6178      	str	r0, [r7, #20]
      if (current->offline_offset == kOnlinePlannedBuffer) {
 800f3a0:	69bb      	ldr	r3, [r7, #24]
 800f3a2:	691b      	ldr	r3, [r3, #16]
 800f3a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f3a8:	d114      	bne.n	800f3d4 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_18MicroMemoryPlannerEPKNS0_14AllocationInfoEj+0x76>
        TF_LITE_ENSURE_STATUS(
 800f3aa:	68bb      	ldr	r3, [r7, #8]
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	3308      	adds	r3, #8
 800f3b0:	681c      	ldr	r4, [r3, #0]
 800f3b2:	697a      	ldr	r2, [r7, #20]
 800f3b4:	69bb      	ldr	r3, [r7, #24]
 800f3b6:	6899      	ldr	r1, [r3, #8]
 800f3b8:	69bb      	ldr	r3, [r7, #24]
 800f3ba:	68db      	ldr	r3, [r3, #12]
 800f3bc:	9300      	str	r3, [sp, #0]
 800f3be:	460b      	mov	r3, r1
 800f3c0:	68f9      	ldr	r1, [r7, #12]
 800f3c2:	68b8      	ldr	r0, [r7, #8]
 800f3c4:	47a0      	blx	r4
 800f3c6:	4603      	mov	r3, r0
 800f3c8:	74bb      	strb	r3, [r7, #18]
 800f3ca:	7cbb      	ldrb	r3, [r7, #18]
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d01a      	beq.n	800f406 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_18MicroMemoryPlannerEPKNS0_14AllocationInfoEj+0xa8>
 800f3d0:	7cbb      	ldrb	r3, [r7, #18]
 800f3d2:	e01d      	b.n	800f410 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_18MicroMemoryPlannerEPKNS0_14AllocationInfoEj+0xb2>
            planner->AddBuffer(error_reporter, aligned_bytes_required,
                               current->first_created, current->last_used));
      } else {
        TF_LITE_ENSURE_STATUS(planner->AddBuffer(
 800f3d4:	68bb      	ldr	r3, [r7, #8]
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	330c      	adds	r3, #12
 800f3da:	681c      	ldr	r4, [r3, #0]
 800f3dc:	6979      	ldr	r1, [r7, #20]
 800f3de:	69bb      	ldr	r3, [r7, #24]
 800f3e0:	6898      	ldr	r0, [r3, #8]
 800f3e2:	69bb      	ldr	r3, [r7, #24]
 800f3e4:	68db      	ldr	r3, [r3, #12]
 800f3e6:	69ba      	ldr	r2, [r7, #24]
 800f3e8:	6912      	ldr	r2, [r2, #16]
 800f3ea:	9201      	str	r2, [sp, #4]
 800f3ec:	9300      	str	r3, [sp, #0]
 800f3ee:	4603      	mov	r3, r0
 800f3f0:	460a      	mov	r2, r1
 800f3f2:	68f9      	ldr	r1, [r7, #12]
 800f3f4:	68b8      	ldr	r0, [r7, #8]
 800f3f6:	47a0      	blx	r4
 800f3f8:	4603      	mov	r3, r0
 800f3fa:	74fb      	strb	r3, [r7, #19]
 800f3fc:	7cfb      	ldrb	r3, [r7, #19]
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d001      	beq.n	800f406 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_18MicroMemoryPlannerEPKNS0_14AllocationInfoEj+0xa8>
 800f402:	7cfb      	ldrb	r3, [r7, #19]
 800f404:	e004      	b.n	800f410 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_18MicroMemoryPlannerEPKNS0_14AllocationInfoEj+0xb2>
  for (size_t i = 0; i < allocation_info_size; ++i) {
 800f406:	69fb      	ldr	r3, [r7, #28]
 800f408:	3301      	adds	r3, #1
 800f40a:	61fb      	str	r3, [r7, #28]
 800f40c:	e7b0      	b.n	800f370 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_18MicroMemoryPlannerEPKNS0_14AllocationInfoEj+0x12>
            error_reporter, aligned_bytes_required, current->first_created,
            current->last_used, current->offline_offset));
      }
    }
  }
  return kTfLiteOk;
 800f40e:	2300      	movs	r3, #0
}
 800f410:	4618      	mov	r0, r3
 800f412:	3724      	adds	r7, #36	; 0x24
 800f414:	46bd      	mov	sp, r7
 800f416:	bd90      	pop	{r4, r7, pc}

0800f418 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_18MicroMemoryPlannerEPhPKNS0_14AllocationInfoEj>:

TfLiteStatus CommitPlan(ErrorReporter* error_reporter,
                        MicroMemoryPlanner* planner, uint8_t* starting_point,
                        const AllocationInfo* allocation_info,
                        size_t allocation_info_size) {
 800f418:	b590      	push	{r4, r7, lr}
 800f41a:	b08b      	sub	sp, #44	; 0x2c
 800f41c:	af00      	add	r7, sp, #0
 800f41e:	60f8      	str	r0, [r7, #12]
 800f420:	60b9      	str	r1, [r7, #8]
 800f422:	607a      	str	r2, [r7, #4]
 800f424:	603b      	str	r3, [r7, #0]
  // Figure out the actual memory addresses for each buffer, based on the plan.
  int planner_index = 0;
 800f426:	2300      	movs	r3, #0
 800f428:	627b      	str	r3, [r7, #36]	; 0x24
  for (size_t i = 0; i < allocation_info_size; ++i) {
 800f42a:	2300      	movs	r3, #0
 800f42c:	623b      	str	r3, [r7, #32]
 800f42e:	6a3a      	ldr	r2, [r7, #32]
 800f430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f432:	429a      	cmp	r2, r3
 800f434:	d22e      	bcs.n	800f494 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_18MicroMemoryPlannerEPhPKNS0_14AllocationInfoEj+0x7c>
    const AllocationInfo* current = &allocation_info[i];
 800f436:	6a3a      	ldr	r2, [r7, #32]
 800f438:	4613      	mov	r3, r2
 800f43a:	005b      	lsls	r3, r3, #1
 800f43c:	4413      	add	r3, r2
 800f43e:	00db      	lsls	r3, r3, #3
 800f440:	461a      	mov	r2, r3
 800f442:	683b      	ldr	r3, [r7, #0]
 800f444:	4413      	add	r3, r2
 800f446:	61fb      	str	r3, [r7, #28]
    if (current->needs_allocating) {
 800f448:	69fb      	ldr	r3, [r7, #28]
 800f44a:	7d1b      	ldrb	r3, [r3, #20]
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d01d      	beq.n	800f48c <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_18MicroMemoryPlannerEPhPKNS0_14AllocationInfoEj+0x74>
      int offset = -1;
 800f450:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f454:	617b      	str	r3, [r7, #20]
      TF_LITE_ENSURE_STATUS(
 800f456:	68bb      	ldr	r3, [r7, #8]
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	3318      	adds	r3, #24
 800f45c:	681c      	ldr	r4, [r3, #0]
 800f45e:	f107 0314 	add.w	r3, r7, #20
 800f462:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f464:	68f9      	ldr	r1, [r7, #12]
 800f466:	68b8      	ldr	r0, [r7, #8]
 800f468:	47a0      	blx	r4
 800f46a:	4603      	mov	r3, r0
 800f46c:	76fb      	strb	r3, [r7, #27]
 800f46e:	7efb      	ldrb	r3, [r7, #27]
 800f470:	2b00      	cmp	r3, #0
 800f472:	d001      	beq.n	800f478 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_18MicroMemoryPlannerEPhPKNS0_14AllocationInfoEj+0x60>
 800f474:	7efb      	ldrb	r3, [r7, #27]
 800f476:	e00e      	b.n	800f496 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_18MicroMemoryPlannerEPhPKNS0_14AllocationInfoEj+0x7e>
          planner->GetOffsetForBuffer(error_reporter, planner_index, &offset));
      *current->output_ptr = reinterpret_cast<void*>(starting_point + offset);
 800f478:	697b      	ldr	r3, [r7, #20]
 800f47a:	4619      	mov	r1, r3
 800f47c:	69fb      	ldr	r3, [r7, #28]
 800f47e:	685b      	ldr	r3, [r3, #4]
 800f480:	687a      	ldr	r2, [r7, #4]
 800f482:	440a      	add	r2, r1
 800f484:	601a      	str	r2, [r3, #0]
      ++planner_index;
 800f486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f488:	3301      	adds	r3, #1
 800f48a:	627b      	str	r3, [r7, #36]	; 0x24
  for (size_t i = 0; i < allocation_info_size; ++i) {
 800f48c:	6a3b      	ldr	r3, [r7, #32]
 800f48e:	3301      	adds	r3, #1
 800f490:	623b      	str	r3, [r7, #32]
 800f492:	e7cc      	b.n	800f42e <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_18MicroMemoryPlannerEPhPKNS0_14AllocationInfoEj+0x16>
    }
  }
  return kTfLiteOk;
 800f494:	2300      	movs	r3, #0
}
 800f496:	4618      	mov	r0, r3
 800f498:	372c      	adds	r7, #44	; 0x2c
 800f49a:	46bd      	mov	sp, r7
 800f49c:	bd90      	pop	{r4, r7, pc}

0800f49e <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>:

// Returns a pointer to any buffer associated with the flatbuffer tensor. Can
// return nullptr if no buffer is found.
void* GetFlatbufferTensorBuffer(
    const tflite::Tensor& flatbuffer_tensor,
    const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers) {
 800f49e:	b580      	push	{r7, lr}
 800f4a0:	b086      	sub	sp, #24
 800f4a2:	af00      	add	r7, sp, #0
 800f4a4:	6078      	str	r0, [r7, #4]
 800f4a6:	6039      	str	r1, [r7, #0]
  // the same as a constant op in TensorFlow) associated with this tensor first,
  // and if there is update the runtime structure to point to its location in
  // memory.
  // First see if there's any buffer information in the serialized tensor.
  // TODO(b/170379532): Add better unit tests to validate flatbuffer values.
  void* out_buffer = nullptr;
 800f4a8:	2300      	movs	r3, #0
 800f4aa:	617b      	str	r3, [r7, #20]
  if (auto* buffer = (*buffers)[flatbuffer_tensor.buffer()]) {
 800f4ac:	6878      	ldr	r0, [r7, #4]
 800f4ae:	f7ff fbf7 	bl	800eca0 <_ZNK6tflite6Tensor6bufferEv>
 800f4b2:	4603      	mov	r3, r0
 800f4b4:	4619      	mov	r1, r3
 800f4b6:	6838      	ldr	r0, [r7, #0]
 800f4b8:	f001 fa3a 	bl	8010930 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEEixEm>
 800f4bc:	6138      	str	r0, [r7, #16]
 800f4be:	693b      	ldr	r3, [r7, #16]
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d015      	beq.n	800f4f0 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x52>
    // If we've found a buffer, does it have any data?
    if (auto* array = buffer->data()) {
 800f4c4:	6938      	ldr	r0, [r7, #16]
 800f4c6:	f7ff fc62 	bl	800ed8e <_ZNK6tflite6Buffer4dataEv>
 800f4ca:	60f8      	str	r0, [r7, #12]
 800f4cc:	68fb      	ldr	r3, [r7, #12]
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d00e      	beq.n	800f4f0 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x52>
      // If it has any data, is the data size larger than zero?
      if (array->size()) {
 800f4d2:	68f8      	ldr	r0, [r7, #12]
 800f4d4:	f001 f8e1 	bl	801069a <_ZNK11flatbuffers6VectorIhE4sizeEv>
 800f4d8:	4603      	mov	r3, r0
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	bf14      	ite	ne
 800f4de:	2301      	movne	r3, #1
 800f4e0:	2300      	moveq	r3, #0
 800f4e2:	b2db      	uxtb	r3, r3
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d003      	beq.n	800f4f0 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x52>
        // We've found a buffer with valid data, so update the runtime tensor
        // data structure to point to it.
        out_buffer = const_cast<void*>(static_cast<const void*>(array->data()));
 800f4e8:	68f8      	ldr	r0, [r7, #12]
 800f4ea:	f001 fa2f 	bl	801094c <_ZNK11flatbuffers6VectorIhE4dataEv>
 800f4ee:	6178      	str	r0, [r7, #20]
    // buffer in the serialized tensor, but it doesn't have any data in it. Is
    // that a validly-generated file, and if so what does it mean, or is it an
    // error condition? It would be good to tighten up the specification to make
    // it less ambiguous.
  }
  return out_buffer;
 800f4f0:	697b      	ldr	r3, [r7, #20]
}
 800f4f2:	4618      	mov	r0, r3
 800f4f4:	3718      	adds	r7, #24
 800f4f6:	46bd      	mov	sp, r7
 800f4f8:	bd80      	pop	{r7, pc}
	...

0800f4fc <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor>:

TfLiteStatus InitializeTfLiteTensorFromFlatbuffer(
    SimpleMemoryAllocator* allocator, bool allocate_temp,
    const tflite::Tensor& flatbuffer_tensor,
    const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers,
    ErrorReporter* error_reporter, TfLiteTensor* result) {
 800f4fc:	b590      	push	{r4, r7, lr}
 800f4fe:	b08d      	sub	sp, #52	; 0x34
 800f500:	af00      	add	r7, sp, #0
 800f502:	60f8      	str	r0, [r7, #12]
 800f504:	607a      	str	r2, [r7, #4]
 800f506:	603b      	str	r3, [r7, #0]
 800f508:	460b      	mov	r3, r1
 800f50a:	72fb      	strb	r3, [r7, #11]
  TFLITE_DCHECK(result != nullptr);
 800f50c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d101      	bne.n	800f516 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1a>
 800f512:	f017 fbf4 	bl	8026cfe <abort>

  *result = {};
 800f516:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f518:	4618      	mov	r0, r3
 800f51a:	2340      	movs	r3, #64	; 0x40
 800f51c:	461a      	mov	r2, r3
 800f51e:	2100      	movs	r1, #0
 800f520:	f017 fc8c 	bl	8026e3c <memset>
  // Make sure the serialized type is one we know how to deal with, and convert
  // it from a flatbuffer enum into a constant used by the kernel C API.
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
 800f524:	6878      	ldr	r0, [r7, #4]
 800f526:	f7ff f9a3 	bl	800e870 <_ZNK6tflite6Tensor4typeEv>
 800f52a:	4603      	mov	r3, r0
 800f52c:	4618      	mov	r0, r3
 800f52e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f530:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f532:	4619      	mov	r1, r3
 800f534:	f7fb fcfa 	bl	800af2c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
 800f538:	4603      	mov	r3, r0
 800f53a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f53e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f542:	2b00      	cmp	r3, #0
 800f544:	d002      	beq.n	800f54c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x50>
 800f546:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f54a:	e127      	b.n	800f79c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a0>
                                          &result->type, error_reporter));
  // Make sure we remember if the serialized tensor is designated as a variable.
  result->is_variable = flatbuffer_tensor.is_variable();
 800f54c:	6878      	ldr	r0, [r7, #4]
 800f54e:	f7ff fbc4 	bl	800ecda <_ZNK6tflite6Tensor11is_variableEv>
 800f552:	4603      	mov	r3, r0
 800f554:	461a      	mov	r2, r3
 800f556:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f558:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  result->data.data = GetFlatbufferTensorBuffer(flatbuffer_tensor, buffers);
 800f55c:	6839      	ldr	r1, [r7, #0]
 800f55e:	6878      	ldr	r0, [r7, #4]
 800f560:	f7ff ff9d 	bl	800f49e <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>
 800f564:	4602      	mov	r2, r0
 800f566:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f568:	605a      	str	r2, [r3, #4]

  // TODO(petewarden): Some of these paths aren't getting enough testing
  // coverage, so we should figure out some tests that exercise them.
  if (result->data.data == nullptr) {
 800f56a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f56c:	685b      	ldr	r3, [r3, #4]
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d103      	bne.n	800f57a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x7e>
    // The tensor contents haven't been set from a serialized buffer, so
    // make a note that they will be allocated from memory. The actual
    // allocation won't happen until later.
    result->allocation_type = kTfLiteArenaRw;
 800f572:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f574:	2202      	movs	r2, #2
 800f576:	751a      	strb	r2, [r3, #20]
 800f578:	e002      	b.n	800f580 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x84>
  } else {
    // We set the data from a serialized buffer, so record tha.
    result->allocation_type = kTfLiteMmapRo;
 800f57a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f57c:	2201      	movs	r2, #1
 800f57e:	751a      	strb	r2, [r3, #20]
  }

  // Figure out what the size in bytes of the buffer is and store it.
  size_t type_size;
  TF_LITE_ENSURE_STATUS(BytesRequiredForTensor(
 800f580:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f582:	f103 0118 	add.w	r1, r3, #24
 800f586:	f107 0210 	add.w	r2, r7, #16
 800f58a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f58c:	6878      	ldr	r0, [r7, #4]
 800f58e:	f7ff faaf 	bl	800eaf0 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE>
 800f592:	4603      	mov	r3, r0
 800f594:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800f598:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d002      	beq.n	800f5a6 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xaa>
 800f5a0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800f5a4:	e0fa      	b.n	800f79c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a0>
      flatbuffer_tensor, &result->bytes, &type_size, error_reporter));

  if (flatbuffer_tensor.shape() == nullptr) {
 800f5a6:	6878      	ldr	r0, [r7, #4]
 800f5a8:	f7ff f954 	bl	800e854 <_ZNK6tflite6Tensor5shapeEv>
 800f5ac:	4603      	mov	r3, r0
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	bf0c      	ite	eq
 800f5b2:	2301      	moveq	r3, #1
 800f5b4:	2300      	movne	r3, #0
 800f5b6:	b2db      	uxtb	r3, r3
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d003      	beq.n	800f5c4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xc8>
    // flatbuffer_tensor.shape() can return a nullptr in the case of a scalar
    // tensor.
    result->dims = const_cast<TfLiteIntArray*>(&kZeroLengthIntArray);
 800f5bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f5be:	4a79      	ldr	r2, [pc, #484]	; (800f7a4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a8>)
 800f5c0:	609a      	str	r2, [r3, #8]
 800f5c2:	e013      	b.n	800f5ec <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf0>
  } else {
    // TFLM doesn't allow reshaping the tensor which requires dynamic memory
    // allocation so it is safe to drop the const qualifier. In the future, if
    // we really want to update the tensor shape, we can always pass in a new
    // TfLiteIntArray - especially we have to do so if the dimension is
    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
 800f5c4:	6878      	ldr	r0, [r7, #4]
 800f5c6:	f7ff f945 	bl	800e854 <_ZNK6tflite6Tensor5shapeEv>
 800f5ca:	4602      	mov	r2, r0
 800f5cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f5ce:	3308      	adds	r3, #8
 800f5d0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f5d2:	68f8      	ldr	r0, [r7, #12]
 800f5d4:	f001 f9c6 	bl	8010964 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
 800f5d8:	4603      	mov	r3, r0
 800f5da:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 800f5de:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d002      	beq.n	800f5ec <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf0>
 800f5e6:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800f5ea:	e0d7      	b.n	800f79c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a0>
        allocator, error_reporter, flatbuffer_tensor.shape(), &(result->dims)));
  }

  // Copy the quantization information from the serialized data.
  const auto* src_quantization = flatbuffer_tensor.quantization();
 800f5ec:	6878      	ldr	r0, [r7, #4]
 800f5ee:	f7ff fb66 	bl	800ecbe <_ZNK6tflite6Tensor12quantizationEv>
 800f5f2:	6278      	str	r0, [r7, #36]	; 0x24
  if (src_quantization && src_quantization->scale() &&
      (src_quantization->scale()->size() > 0) &&
      src_quantization->zero_point() &&
 800f5f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d021      	beq.n	800f63e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x142>
  if (src_quantization && src_quantization->scale() &&
 800f5fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f5fc:	f7ff fb25 	bl	800ec4a <_ZNK6tflite22QuantizationParameters5scaleEv>
 800f600:	4603      	mov	r3, r0
 800f602:	2b00      	cmp	r3, #0
 800f604:	d01b      	beq.n	800f63e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x142>
      (src_quantization->scale()->size() > 0) &&
 800f606:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f608:	f7ff fb1f 	bl	800ec4a <_ZNK6tflite22QuantizationParameters5scaleEv>
 800f60c:	4603      	mov	r3, r0
 800f60e:	4618      	mov	r0, r3
 800f610:	f001 f851 	bl	80106b6 <_ZNK11flatbuffers6VectorIfE4sizeEv>
 800f614:	4603      	mov	r3, r0
  if (src_quantization && src_quantization->scale() &&
 800f616:	2b00      	cmp	r3, #0
 800f618:	d011      	beq.n	800f63e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x142>
      src_quantization->zero_point() &&
 800f61a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f61c:	f7ff fb23 	bl	800ec66 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 800f620:	4603      	mov	r3, r0
      (src_quantization->scale()->size() > 0) &&
 800f622:	2b00      	cmp	r3, #0
 800f624:	d00b      	beq.n	800f63e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x142>
      (src_quantization->zero_point()->size() > 0)) {
 800f626:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f628:	f7ff fb1d 	bl	800ec66 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 800f62c:	4603      	mov	r3, r0
 800f62e:	4618      	mov	r0, r3
 800f630:	f001 f878 	bl	8010724 <_ZNK11flatbuffers6VectorIxE4sizeEv>
 800f634:	4603      	mov	r3, r0
      src_quantization->zero_point() &&
 800f636:	2b00      	cmp	r3, #0
 800f638:	d001      	beq.n	800f63e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x142>
 800f63a:	2301      	movs	r3, #1
 800f63c:	e000      	b.n	800f640 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x144>
 800f63e:	2300      	movs	r3, #0
  if (src_quantization && src_quantization->scale() &&
 800f640:	2b00      	cmp	r3, #0
 800f642:	f000 80aa 	beq.w	800f79a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x29e>
    // Always populate the TfLiteTensor.params field, even if there are
    // per-channel quantization parameters.
    result->params.scale = src_quantization->scale()->Get(0);
 800f646:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f648:	f7ff faff 	bl	800ec4a <_ZNK6tflite22QuantizationParameters5scaleEv>
 800f64c:	4603      	mov	r3, r0
 800f64e:	2100      	movs	r1, #0
 800f650:	4618      	mov	r0, r3
 800f652:	f001 f83f 	bl	80106d4 <_ZNK11flatbuffers6VectorIfE3GetEm>
 800f656:	eef0 7a40 	vmov.f32	s15, s0
 800f65a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f65c:	edc3 7a03 	vstr	s15, [r3, #12]
    // Note that the zero_point field in the FlatBuffers schema is a 64-bit
    // integer, but the zero_point field in the TfLiteQuantizationParams struct
    // is a 32-bit integer.
    result->params.zero_point =
        static_cast<int32_t>(src_quantization->zero_point()->Get(0));
 800f660:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f662:	f7ff fb00 	bl	800ec66 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 800f666:	4603      	mov	r3, r0
 800f668:	2100      	movs	r1, #0
 800f66a:	4618      	mov	r0, r3
 800f66c:	f001 f868 	bl	8010740 <_ZNK11flatbuffers6VectorIxE3GetEm>
 800f670:	4602      	mov	r2, r0
 800f672:	460b      	mov	r3, r1
    result->params.zero_point =
 800f674:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f676:	611a      	str	r2, [r3, #16]

    // Populate per-channel quantization params.
    int channels = src_quantization->scale()->size();
 800f678:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f67a:	f7ff fae6 	bl	800ec4a <_ZNK6tflite22QuantizationParameters5scaleEv>
 800f67e:	4603      	mov	r3, r0
 800f680:	4618      	mov	r0, r3
 800f682:	f001 f818 	bl	80106b6 <_ZNK11flatbuffers6VectorIfE4sizeEv>
 800f686:	4603      	mov	r3, r0
 800f688:	623b      	str	r3, [r7, #32]
    TfLiteAffineQuantization* quantization =
        allocate_temp
            ? reinterpret_cast<TfLiteAffineQuantization*>(
 800f68a:	7afb      	ldrb	r3, [r7, #11]
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d009      	beq.n	800f6a4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1a8>
                  allocator->AllocateTemp(sizeof(TfLiteAffineQuantization),
                                          alignof(TfLiteAffineQuantization)))
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	3310      	adds	r3, #16
 800f696:	681b      	ldr	r3, [r3, #0]
                  allocator->AllocateTemp(sizeof(TfLiteAffineQuantization),
 800f698:	2204      	movs	r2, #4
 800f69a:	210c      	movs	r1, #12
 800f69c:	68f8      	ldr	r0, [r7, #12]
 800f69e:	4798      	blx	r3
 800f6a0:	4603      	mov	r3, r0
 800f6a2:	e008      	b.n	800f6b6 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1ba>
            : reinterpret_cast<TfLiteAffineQuantization*>(
                  allocator->AllocateFromTail(
                      sizeof(TfLiteAffineQuantization),
                      alignof(TfLiteAffineQuantization)));
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	330c      	adds	r3, #12
 800f6aa:	681b      	ldr	r3, [r3, #0]
                  allocator->AllocateFromTail(
 800f6ac:	2204      	movs	r2, #4
 800f6ae:	210c      	movs	r1, #12
 800f6b0:	68f8      	ldr	r0, [r7, #12]
 800f6b2:	4798      	blx	r3
 800f6b4:	4603      	mov	r3, r0
                      alignof(TfLiteAffineQuantization)));
 800f6b6:	61fb      	str	r3, [r7, #28]
    if (quantization == nullptr) {
 800f6b8:	69fb      	ldr	r3, [r7, #28]
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d105      	bne.n	800f6ca <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1ce>
      TF_LITE_REPORT_ERROR(error_reporter,
 800f6be:	493a      	ldr	r1, [pc, #232]	; (800f7a8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2ac>)
 800f6c0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800f6c2:	f7fb f91f 	bl	800a904 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Unable to allocate TfLiteAffineQuantization.\n");
      return kTfLiteError;
 800f6c6:	2301      	movs	r3, #1
 800f6c8:	e068      	b.n	800f79c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a0>
    // TODO(b/153688719): Reduce tail allocation by using a global zero-point
    // buffer. This value can not be reused from the flatbuffer since the
    // zero_point is stored as a int64_t.
    quantization->zero_point =
        allocate_temp
            ? reinterpret_cast<TfLiteIntArray*>(allocator->AllocateTemp(
 800f6ca:	7afb      	ldrb	r3, [r7, #11]
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d00d      	beq.n	800f6ec <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1f0>
                  TfLiteIntArrayGetSizeInBytes(channels),
                  alignof(TfLiteIntArray)))
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	3310      	adds	r3, #16
 800f6d6:	681c      	ldr	r4, [r3, #0]
                  TfLiteIntArrayGetSizeInBytes(channels),
 800f6d8:	6a38      	ldr	r0, [r7, #32]
 800f6da:	f7fb f887 	bl	800a7ec <TfLiteIntArrayGetSizeInBytes>
 800f6de:	4603      	mov	r3, r0
            ? reinterpret_cast<TfLiteIntArray*>(allocator->AllocateTemp(
 800f6e0:	2204      	movs	r2, #4
 800f6e2:	4619      	mov	r1, r3
 800f6e4:	68f8      	ldr	r0, [r7, #12]
 800f6e6:	47a0      	blx	r4
 800f6e8:	4603      	mov	r3, r0
 800f6ea:	e00c      	b.n	800f706 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x20a>
            : reinterpret_cast<TfLiteIntArray*>(allocator->AllocateFromTail(
                  TfLiteIntArrayGetSizeInBytes(channels),
                  alignof(TfLiteIntArray)));
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	330c      	adds	r3, #12
 800f6f2:	681c      	ldr	r4, [r3, #0]
                  TfLiteIntArrayGetSizeInBytes(channels),
 800f6f4:	6a38      	ldr	r0, [r7, #32]
 800f6f6:	f7fb f879 	bl	800a7ec <TfLiteIntArrayGetSizeInBytes>
 800f6fa:	4603      	mov	r3, r0
            : reinterpret_cast<TfLiteIntArray*>(allocator->AllocateFromTail(
 800f6fc:	2204      	movs	r2, #4
 800f6fe:	4619      	mov	r1, r3
 800f700:	68f8      	ldr	r0, [r7, #12]
 800f702:	47a0      	blx	r4
 800f704:	4603      	mov	r3, r0
    quantization->zero_point =
 800f706:	69fa      	ldr	r2, [r7, #28]
 800f708:	6053      	str	r3, [r2, #4]
    if (quantization->zero_point == nullptr) {
 800f70a:	69fb      	ldr	r3, [r7, #28]
 800f70c:	685b      	ldr	r3, [r3, #4]
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d105      	bne.n	800f71e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x222>
      TF_LITE_REPORT_ERROR(error_reporter,
 800f712:	4926      	ldr	r1, [pc, #152]	; (800f7ac <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2b0>)
 800f714:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800f716:	f7fb f8f5 	bl	800a904 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Unable to allocate quantization->zero_point.\n");
      return kTfLiteError;
 800f71a:	2301      	movs	r3, #1
 800f71c:	e03e      	b.n	800f79c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a0>
    }

    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
 800f71e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f720:	f7ff fa93 	bl	800ec4a <_ZNK6tflite22QuantizationParameters5scaleEv>
 800f724:	4602      	mov	r2, r0
 800f726:	69fb      	ldr	r3, [r7, #28]
 800f728:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f72a:	68f8      	ldr	r0, [r7, #12]
 800f72c:	f001 f933 	bl	8010996 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
 800f730:	4603      	mov	r3, r0
 800f732:	76fb      	strb	r3, [r7, #27]
 800f734:	7efb      	ldrb	r3, [r7, #27]
 800f736:	2b00      	cmp	r3, #0
 800f738:	d001      	beq.n	800f73e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x242>
 800f73a:	7efb      	ldrb	r3, [r7, #27]
 800f73c:	e02e      	b.n	800f79c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a0>
        allocator, error_reporter, src_quantization->scale(),
        &quantization->scale));

    quantization->zero_point->size = channels;
 800f73e:	69fb      	ldr	r3, [r7, #28]
 800f740:	685b      	ldr	r3, [r3, #4]
 800f742:	6a3a      	ldr	r2, [r7, #32]
 800f744:	601a      	str	r2, [r3, #0]
    int* zero_point_data = quantization->zero_point->data;
 800f746:	69fb      	ldr	r3, [r7, #28]
 800f748:	685b      	ldr	r3, [r3, #4]
 800f74a:	3304      	adds	r3, #4
 800f74c:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < channels; i++) {
 800f74e:	2300      	movs	r3, #0
 800f750:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f752:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f754:	6a3b      	ldr	r3, [r7, #32]
 800f756:	429a      	cmp	r2, r3
 800f758:	da12      	bge.n	800f780 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x284>
      zero_point_data[i] = src_quantization->zero_point()->Get(i);
 800f75a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f75c:	f7ff fa83 	bl	800ec66 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 800f760:	4602      	mov	r2, r0
 800f762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f764:	4619      	mov	r1, r3
 800f766:	4610      	mov	r0, r2
 800f768:	f000 ffea 	bl	8010740 <_ZNK11flatbuffers6VectorIxE3GetEm>
 800f76c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f76e:	009b      	lsls	r3, r3, #2
 800f770:	697a      	ldr	r2, [r7, #20]
 800f772:	4413      	add	r3, r2
 800f774:	4602      	mov	r2, r0
 800f776:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < channels; i++) {
 800f778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f77a:	3301      	adds	r3, #1
 800f77c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f77e:	e7e8      	b.n	800f752 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x256>
    }
    // TODO(rocky): Need to add a micro_allocator test case that fails when
    // this is not copied:
    quantization->quantized_dimension = src_quantization->quantized_dimension();
 800f780:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f782:	f7ff fa7e 	bl	800ec82 <_ZNK6tflite22QuantizationParameters19quantized_dimensionEv>
 800f786:	4602      	mov	r2, r0
 800f788:	69fb      	ldr	r3, [r7, #28]
 800f78a:	609a      	str	r2, [r3, #8]

    result->quantization = {kTfLiteAffineQuantization, quantization};
 800f78c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f78e:	2201      	movs	r2, #1
 800f790:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800f794:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f796:	69fa      	ldr	r2, [r7, #28]
 800f798:	635a      	str	r2, [r3, #52]	; 0x34
  }
  return kTfLiteOk;
 800f79a:	2300      	movs	r3, #0
}
 800f79c:	4618      	mov	r0, r3
 800f79e:	3734      	adds	r7, #52	; 0x34
 800f7a0:	46bd      	mov	sp, r7
 800f7a2:	bd90      	pop	{r4, r7, pc}
 800f7a4:	0803fe34 	.word	0x0803fe34
 800f7a8:	08029a40 	.word	0x08029a40
 800f7ac:	08029a70 	.word	0x08029a70

0800f7b0 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor>:

TfLiteStatus InitializeTfLiteEvalTensorFromFlatbuffer(
    SimpleMemoryAllocator* allocator, const tflite::Tensor& flatbuffer_tensor,
    const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers,
    ErrorReporter* error_reporter, TfLiteEvalTensor* result) {
 800f7b0:	b580      	push	{r7, lr}
 800f7b2:	b086      	sub	sp, #24
 800f7b4:	af00      	add	r7, sp, #0
 800f7b6:	60f8      	str	r0, [r7, #12]
 800f7b8:	60b9      	str	r1, [r7, #8]
 800f7ba:	607a      	str	r2, [r7, #4]
 800f7bc:	603b      	str	r3, [r7, #0]
  *result = {};
 800f7be:	6a3b      	ldr	r3, [r7, #32]
 800f7c0:	461a      	mov	r2, r3
 800f7c2:	2300      	movs	r3, #0
 800f7c4:	6013      	str	r3, [r2, #0]
 800f7c6:	6053      	str	r3, [r2, #4]
 800f7c8:	6093      	str	r3, [r2, #8]
  // Make sure the serialized type is one we know how to deal with, and convert
  // it from a flatbuffer enum into a constant used by the kernel C API.
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
 800f7ca:	68b8      	ldr	r0, [r7, #8]
 800f7cc:	f7ff f850 	bl	800e870 <_ZNK6tflite6Tensor4typeEv>
 800f7d0:	4603      	mov	r3, r0
 800f7d2:	4618      	mov	r0, r3
 800f7d4:	6a3b      	ldr	r3, [r7, #32]
 800f7d6:	3308      	adds	r3, #8
 800f7d8:	683a      	ldr	r2, [r7, #0]
 800f7da:	4619      	mov	r1, r3
 800f7dc:	f7fb fba6 	bl	800af2c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
 800f7e0:	4603      	mov	r3, r0
 800f7e2:	75fb      	strb	r3, [r7, #23]
 800f7e4:	7dfb      	ldrb	r3, [r7, #23]
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d001      	beq.n	800f7ee <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x3e>
 800f7ea:	7dfb      	ldrb	r3, [r7, #23]
 800f7ec:	e027      	b.n	800f83e <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x8e>
                                          &result->type, error_reporter));

  result->data.data = GetFlatbufferTensorBuffer(flatbuffer_tensor, buffers);
 800f7ee:	6879      	ldr	r1, [r7, #4]
 800f7f0:	68b8      	ldr	r0, [r7, #8]
 800f7f2:	f7ff fe54 	bl	800f49e <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>
 800f7f6:	4602      	mov	r2, r0
 800f7f8:	6a3b      	ldr	r3, [r7, #32]
 800f7fa:	601a      	str	r2, [r3, #0]

  if (flatbuffer_tensor.shape() == nullptr) {
 800f7fc:	68b8      	ldr	r0, [r7, #8]
 800f7fe:	f7ff f829 	bl	800e854 <_ZNK6tflite6Tensor5shapeEv>
 800f802:	4603      	mov	r3, r0
 800f804:	2b00      	cmp	r3, #0
 800f806:	bf0c      	ite	eq
 800f808:	2301      	moveq	r3, #1
 800f80a:	2300      	movne	r3, #0
 800f80c:	b2db      	uxtb	r3, r3
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d003      	beq.n	800f81a <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x6a>
    // flatbuffer_tensor.shape() can return a nullptr in the case of a scalar
    // tensor.
    result->dims = const_cast<TfLiteIntArray*>(&kZeroLengthIntArray);
 800f812:	6a3b      	ldr	r3, [r7, #32]
 800f814:	4a0c      	ldr	r2, [pc, #48]	; (800f848 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x98>)
 800f816:	605a      	str	r2, [r3, #4]
 800f818:	e010      	b.n	800f83c <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x8c>
  } else {
    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
 800f81a:	68b8      	ldr	r0, [r7, #8]
 800f81c:	f7ff f81a 	bl	800e854 <_ZNK6tflite6Tensor5shapeEv>
 800f820:	4602      	mov	r2, r0
 800f822:	6a3b      	ldr	r3, [r7, #32]
 800f824:	3304      	adds	r3, #4
 800f826:	6839      	ldr	r1, [r7, #0]
 800f828:	68f8      	ldr	r0, [r7, #12]
 800f82a:	f001 f89b 	bl	8010964 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
 800f82e:	4603      	mov	r3, r0
 800f830:	75bb      	strb	r3, [r7, #22]
 800f832:	7dbb      	ldrb	r3, [r7, #22]
 800f834:	2b00      	cmp	r3, #0
 800f836:	d001      	beq.n	800f83c <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x8c>
 800f838:	7dbb      	ldrb	r3, [r7, #22]
 800f83a:	e000      	b.n	800f83e <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x8e>
        allocator, error_reporter, flatbuffer_tensor.shape(), &(result->dims)));
  }
  return kTfLiteOk;
 800f83c:	2300      	movs	r3, #0
}
 800f83e:	4618      	mov	r0, r3
 800f840:	3718      	adds	r7, #24
 800f842:	46bd      	mov	sp, r7
 800f844:	bd80      	pop	{r7, pc}
 800f846:	bf00      	nop
 800f848:	0803fe34 	.word	0x0803fe34

0800f84c <_ZN6tflite14MicroAllocatorC1EPNS_21SimpleMemoryAllocatorEPNS_18MicroMemoryPlannerEPNS_13ErrorReporterE>:

}  // namespace internal

MicroAllocator::MicroAllocator(SimpleMemoryAllocator* memory_allocator,
 800f84c:	b480      	push	{r7}
 800f84e:	b085      	sub	sp, #20
 800f850:	af00      	add	r7, sp, #0
 800f852:	60f8      	str	r0, [r7, #12]
 800f854:	60b9      	str	r1, [r7, #8]
 800f856:	607a      	str	r2, [r7, #4]
 800f858:	603b      	str	r3, [r7, #0]
                               MicroMemoryPlanner* memory_planner,
                               ErrorReporter* error_reporter)
    : memory_allocator_(memory_allocator),
      memory_planner_(memory_planner),
      error_reporter_(error_reporter),
      model_is_allocating_(false) {}
 800f85a:	4a0e      	ldr	r2, [pc, #56]	; (800f894 <_ZN6tflite14MicroAllocatorC1EPNS_21SimpleMemoryAllocatorEPNS_18MicroMemoryPlannerEPNS_13ErrorReporterE+0x48>)
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	601a      	str	r2, [r3, #0]
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	68ba      	ldr	r2, [r7, #8]
 800f864:	605a      	str	r2, [r3, #4]
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	687a      	ldr	r2, [r7, #4]
 800f86a:	60da      	str	r2, [r3, #12]
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	683a      	ldr	r2, [r7, #0]
 800f870:	611a      	str	r2, [r3, #16]
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	2200      	movs	r2, #0
 800f876:	751a      	strb	r2, [r3, #20]
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	2200      	movs	r2, #0
 800f87c:	619a      	str	r2, [r3, #24]
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	2200      	movs	r2, #0
 800f882:	61da      	str	r2, [r3, #28]
 800f884:	68fb      	ldr	r3, [r7, #12]
 800f886:	4618      	mov	r0, r3
 800f888:	3714      	adds	r7, #20
 800f88a:	46bd      	mov	sp, r7
 800f88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f890:	4770      	bx	lr
 800f892:	bf00      	nop
 800f894:	0803fe58 	.word	0x0803fe58

0800f898 <_ZN6tflite14MicroAllocatorD1Ev>:

MicroAllocator::~MicroAllocator() {}
 800f898:	b480      	push	{r7}
 800f89a:	b083      	sub	sp, #12
 800f89c:	af00      	add	r7, sp, #0
 800f89e:	6078      	str	r0, [r7, #4]
 800f8a0:	4a04      	ldr	r2, [pc, #16]	; (800f8b4 <_ZN6tflite14MicroAllocatorD1Ev+0x1c>)
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	601a      	str	r2, [r3, #0]
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	4618      	mov	r0, r3
 800f8aa:	370c      	adds	r7, #12
 800f8ac:	46bd      	mov	sp, r7
 800f8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8b2:	4770      	bx	lr
 800f8b4:	0803fe58 	.word	0x0803fe58

0800f8b8 <_ZN6tflite14MicroAllocatorD0Ev>:
 800f8b8:	b580      	push	{r7, lr}
 800f8ba:	b082      	sub	sp, #8
 800f8bc:	af00      	add	r7, sp, #0
 800f8be:	6078      	str	r0, [r7, #4]
 800f8c0:	6878      	ldr	r0, [r7, #4]
 800f8c2:	f7ff ffe9 	bl	800f898 <_ZN6tflite14MicroAllocatorD1Ev>
 800f8c6:	2120      	movs	r1, #32
 800f8c8:	6878      	ldr	r0, [r7, #4]
 800f8ca:	f016 ffae 	bl	802682a <_ZdlPvj>
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	4618      	mov	r0, r3
 800f8d2:	3708      	adds	r7, #8
 800f8d4:	46bd      	mov	sp, r7
 800f8d6:	bd80      	pop	{r7, pc}

0800f8d8 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE>:

  return Create(memory_allocator, memory_planner, error_reporter);
}

MicroAllocator* MicroAllocator::Create(uint8_t* tensor_arena, size_t arena_size,
                                       ErrorReporter* error_reporter) {
 800f8d8:	b590      	push	{r4, r7, lr}
 800f8da:	b08b      	sub	sp, #44	; 0x2c
 800f8dc:	af00      	add	r7, sp, #0
 800f8de:	60f8      	str	r0, [r7, #12]
 800f8e0:	60b9      	str	r1, [r7, #8]
 800f8e2:	607a      	str	r2, [r7, #4]
  uint8_t* aligned_arena = AlignPointerUp(tensor_arena, kBufferAlignment);
 800f8e4:	2110      	movs	r1, #16
 800f8e6:	68f8      	ldr	r0, [r7, #12]
 800f8e8:	f7ff f84c 	bl	800e984 <_ZN6tflite14AlignPointerUpEPhj>
 800f8ec:	6278      	str	r0, [r7, #36]	; 0x24
  size_t aligned_arena_size = tensor_arena + arena_size - aligned_arena;
 800f8ee:	68fa      	ldr	r2, [r7, #12]
 800f8f0:	68bb      	ldr	r3, [r7, #8]
 800f8f2:	441a      	add	r2, r3
 800f8f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8f6:	1ad3      	subs	r3, r2, r3
 800f8f8:	623b      	str	r3, [r7, #32]
  SimpleMemoryAllocator* memory_allocator = SimpleMemoryAllocator::Create(
 800f8fa:	6a3a      	ldr	r2, [r7, #32]
 800f8fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f8fe:	6878      	ldr	r0, [r7, #4]
 800f900:	f003 f870 	bl	80129e4 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj>
 800f904:	61f8      	str	r0, [r7, #28]
      error_reporter, aligned_arena, aligned_arena_size);

  // By default create GreedyMemoryPlanner.
  // If a different MemoryPlanner is needed, use the other api.
  uint8_t* memory_planner_buffer = memory_allocator->AllocateFromTail(
      sizeof(GreedyMemoryPlanner), alignof(GreedyMemoryPlanner));
 800f906:	69fb      	ldr	r3, [r7, #28]
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	330c      	adds	r3, #12
 800f90c:	681b      	ldr	r3, [r3, #0]
  uint8_t* memory_planner_buffer = memory_allocator->AllocateFromTail(
 800f90e:	2204      	movs	r2, #4
 800f910:	212c      	movs	r1, #44	; 0x2c
 800f912:	69f8      	ldr	r0, [r7, #28]
 800f914:	4798      	blx	r3
 800f916:	61b8      	str	r0, [r7, #24]
  GreedyMemoryPlanner* memory_planner =
      new (memory_planner_buffer) GreedyMemoryPlanner();
 800f918:	69bb      	ldr	r3, [r7, #24]
 800f91a:	4619      	mov	r1, r3
 800f91c:	202c      	movs	r0, #44	; 0x2c
 800f91e:	f7fb f824 	bl	800a96a <_ZnwjPv>
 800f922:	4604      	mov	r4, r0
 800f924:	4620      	mov	r0, r4
 800f926:	f00a f9f3 	bl	8019d10 <_ZN6tflite19GreedyMemoryPlannerC1Ev>
 800f92a:	617c      	str	r4, [r7, #20]

  return Create(memory_allocator, memory_planner, error_reporter);
 800f92c:	687a      	ldr	r2, [r7, #4]
 800f92e:	6979      	ldr	r1, [r7, #20]
 800f930:	69f8      	ldr	r0, [r7, #28]
 800f932:	f000 f805 	bl	800f940 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_18MicroMemoryPlannerEPNS_13ErrorReporterE>
 800f936:	4603      	mov	r3, r0
}
 800f938:	4618      	mov	r0, r3
 800f93a:	372c      	adds	r7, #44	; 0x2c
 800f93c:	46bd      	mov	sp, r7
 800f93e:	bd90      	pop	{r4, r7, pc}

0800f940 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_18MicroMemoryPlannerEPNS_13ErrorReporterE>:

MicroAllocator* MicroAllocator::Create(SimpleMemoryAllocator* memory_allocator,
                                       MicroMemoryPlanner* memory_planner,
                                       ErrorReporter* error_reporter) {
 800f940:	b590      	push	{r4, r7, lr}
 800f942:	b087      	sub	sp, #28
 800f944:	af00      	add	r7, sp, #0
 800f946:	60f8      	str	r0, [r7, #12]
 800f948:	60b9      	str	r1, [r7, #8]
 800f94a:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(memory_allocator != nullptr);
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d101      	bne.n	800f956 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_18MicroMemoryPlannerEPNS_13ErrorReporterE+0x16>
 800f952:	f017 f9d4 	bl	8026cfe <abort>
  TFLITE_DCHECK(error_reporter != nullptr);
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d101      	bne.n	800f960 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_18MicroMemoryPlannerEPNS_13ErrorReporterE+0x20>
 800f95c:	f017 f9cf 	bl	8026cfe <abort>
  TFLITE_DCHECK(memory_planner != nullptr);
 800f960:	68bb      	ldr	r3, [r7, #8]
 800f962:	2b00      	cmp	r3, #0
 800f964:	d101      	bne.n	800f96a <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_18MicroMemoryPlannerEPNS_13ErrorReporterE+0x2a>
 800f966:	f017 f9ca 	bl	8026cfe <abort>

  uint8_t* allocator_buffer = memory_allocator->AllocateFromTail(
      sizeof(MicroAllocator), alignof(MicroAllocator));
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	681b      	ldr	r3, [r3, #0]
 800f96e:	330c      	adds	r3, #12
 800f970:	681b      	ldr	r3, [r3, #0]
  uint8_t* allocator_buffer = memory_allocator->AllocateFromTail(
 800f972:	2204      	movs	r2, #4
 800f974:	2120      	movs	r1, #32
 800f976:	68f8      	ldr	r0, [r7, #12]
 800f978:	4798      	blx	r3
 800f97a:	6178      	str	r0, [r7, #20]
  MicroAllocator* allocator = new (allocator_buffer)
      MicroAllocator(memory_allocator, memory_planner, error_reporter);
 800f97c:	697b      	ldr	r3, [r7, #20]
 800f97e:	4619      	mov	r1, r3
 800f980:	2020      	movs	r0, #32
 800f982:	f7fa fff2 	bl	800a96a <_ZnwjPv>
 800f986:	4604      	mov	r4, r0
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	68ba      	ldr	r2, [r7, #8]
 800f98c:	68f9      	ldr	r1, [r7, #12]
 800f98e:	4620      	mov	r0, r4
 800f990:	f7ff ff5c 	bl	800f84c <_ZN6tflite14MicroAllocatorC1EPNS_21SimpleMemoryAllocatorEPNS_18MicroMemoryPlannerEPNS_13ErrorReporterE>
 800f994:	613c      	str	r4, [r7, #16]
  return allocator;
 800f996:	693b      	ldr	r3, [r7, #16]
}
 800f998:	4618      	mov	r0, r3
 800f99a:	371c      	adds	r7, #28
 800f99c:	46bd      	mov	sp, r7
 800f99e:	bd90      	pop	{r4, r7, pc}

0800f9a0 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE>:

SubgraphAllocations* MicroAllocator::StartModelAllocation(const Model* model) {
 800f9a0:	b5b0      	push	{r4, r5, r7, lr}
 800f9a2:	b084      	sub	sp, #16
 800f9a4:	af00      	add	r7, sp, #0
 800f9a6:	6078      	str	r0, [r7, #4]
 800f9a8:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(model != nullptr);
 800f9aa:	683b      	ldr	r3, [r7, #0]
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d101      	bne.n	800f9b4 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x14>
 800f9b0:	f017 f9a5 	bl	8026cfe <abort>

  if (model_is_allocating_) {
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	7d1b      	ldrb	r3, [r3, #20]
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d007      	beq.n	800f9cc <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	691b      	ldr	r3, [r3, #16]
 800f9c0:	4936      	ldr	r1, [pc, #216]	; (800fa9c <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xfc>)
 800f9c2:	4618      	mov	r0, r3
 800f9c4:	f7fa ff9e 	bl	800a904 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "MicroAllocator: Model allocation started before "
                         "finishing previously allocated model");
    return nullptr;
 800f9c8:	2300      	movs	r3, #0
 800f9ca:	e063      	b.n	800fa94 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xf4>
  }

  model_is_allocating_ = true;
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	2201      	movs	r2, #1
 800f9d0:	751a      	strb	r2, [r3, #20]

  uint8_t* data_allocator_buffer = memory_allocator_->AllocateFromTail(
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	6858      	ldr	r0, [r3, #4]
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	685b      	ldr	r3, [r3, #4]
      sizeof(MicroBuiltinDataAllocator), alignof(MicroBuiltinDataAllocator));
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	330c      	adds	r3, #12
 800f9de:	681b      	ldr	r3, [r3, #0]
  uint8_t* data_allocator_buffer = memory_allocator_->AllocateFromTail(
 800f9e0:	2204      	movs	r2, #4
 800f9e2:	2108      	movs	r1, #8
 800f9e4:	4798      	blx	r3
 800f9e6:	60f8      	str	r0, [r7, #12]
  builtin_data_allocator_ =
 800f9e8:	68fb      	ldr	r3, [r7, #12]
      new (data_allocator_buffer) MicroBuiltinDataAllocator(memory_allocator_);
 800f9ea:	4619      	mov	r1, r3
 800f9ec:	2008      	movs	r0, #8
 800f9ee:	f7fa ffbc 	bl	800a96a <_ZnwjPv>
 800f9f2:	4604      	mov	r4, r0
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	685b      	ldr	r3, [r3, #4]
 800f9f8:	4619      	mov	r1, r3
 800f9fa:	4620      	mov	r0, r4
 800f9fc:	f7ff fa3e 	bl	800ee7c <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorC1EPNS_21SimpleMemoryAllocatorE>
  builtin_data_allocator_ =
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	609c      	str	r4, [r3, #8]

  if (InitScratchBufferData() != kTfLiteOk) {
 800fa04:	6878      	ldr	r0, [r7, #4]
 800fa06:	f000 fd6b 	bl	80104e0 <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv>
 800fa0a:	4603      	mov	r3, r0
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	bf14      	ite	ne
 800fa10:	2301      	movne	r3, #1
 800fa12:	2300      	moveq	r3, #0
 800fa14:	b2db      	uxtb	r3, r3
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d001      	beq.n	800fa1e <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x7e>
    return nullptr;
 800fa1a:	2300      	movs	r3, #0
 800fa1c:	e03a      	b.n	800fa94 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xf4>
  }

  // Allocate struct to store eval tensors, nodes and registrations.
  SubgraphAllocations* output = reinterpret_cast<SubgraphAllocations*>(
      memory_allocator_->AllocateFromTail(
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	685d      	ldr	r5, [r3, #4]
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	685b      	ldr	r3, [r3, #4]
          sizeof(SubgraphAllocations) * model->subgraphs()->size(),
          alignof(SubgraphAllocations)));
 800fa26:	681b      	ldr	r3, [r3, #0]
 800fa28:	330c      	adds	r3, #12
 800fa2a:	681c      	ldr	r4, [r3, #0]
          sizeof(SubgraphAllocations) * model->subgraphs()->size(),
 800fa2c:	6838      	ldr	r0, [r7, #0]
 800fa2e:	f7fe fdff 	bl	800e630 <_ZNK6tflite5Model9subgraphsEv>
 800fa32:	4603      	mov	r3, r0
 800fa34:	4618      	mov	r0, r3
 800fa36:	f7fe fe6b 	bl	800e710 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 800fa3a:	4603      	mov	r3, r0
 800fa3c:	00db      	lsls	r3, r3, #3
      memory_allocator_->AllocateFromTail(
 800fa3e:	2204      	movs	r2, #4
 800fa40:	4619      	mov	r1, r3
 800fa42:	4628      	mov	r0, r5
 800fa44:	47a0      	blx	r4
 800fa46:	60b8      	str	r0, [r7, #8]
  if (output == nullptr) {
 800fa48:	68bb      	ldr	r3, [r7, #8]
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d104      	bne.n	800fa58 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xb8>
    MicroPrintf("Failed to allocate memory for model metadata.");
 800fa4e:	4814      	ldr	r0, [pc, #80]	; (800faa0 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x100>)
 800fa50:	f001 f9ee 	bl	8010e30 <_Z11MicroPrintfPKcz>
    return nullptr;
 800fa54:	2300      	movs	r3, #0
 800fa56:	e01d      	b.n	800fa94 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xf4>
  }

  if (AllocateTfLiteEvalTensors(model, output) != kTfLiteOk ||
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	331c      	adds	r3, #28
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	68ba      	ldr	r2, [r7, #8]
 800fa62:	6839      	ldr	r1, [r7, #0]
 800fa64:	6878      	ldr	r0, [r7, #4]
 800fa66:	4798      	blx	r3
 800fa68:	4603      	mov	r3, r0
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d10a      	bne.n	800fa84 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xe4>
      AllocateNodeAndRegistrations(model, output) != kTfLiteOk) {
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	681b      	ldr	r3, [r3, #0]
 800fa72:	3318      	adds	r3, #24
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	68ba      	ldr	r2, [r7, #8]
 800fa78:	6839      	ldr	r1, [r7, #0]
 800fa7a:	6878      	ldr	r0, [r7, #4]
 800fa7c:	4798      	blx	r3
 800fa7e:	4603      	mov	r3, r0
  if (AllocateTfLiteEvalTensors(model, output) != kTfLiteOk ||
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d001      	beq.n	800fa88 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xe8>
 800fa84:	2301      	movs	r3, #1
 800fa86:	e000      	b.n	800fa8a <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xea>
 800fa88:	2300      	movs	r3, #0
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d001      	beq.n	800fa92 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xf2>
    return nullptr;
 800fa8e:	2300      	movs	r3, #0
 800fa90:	e000      	b.n	800fa94 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xf4>
  }
  return output;
 800fa92:	68bb      	ldr	r3, [r7, #8]
}
 800fa94:	4618      	mov	r0, r3
 800fa96:	3710      	adds	r7, #16
 800fa98:	46bd      	mov	sp, r7
 800fa9a:	bdb0      	pop	{r4, r5, r7, pc}
 800fa9c:	08029aa0 	.word	0x08029aa0
 800faa0:	08029af8 	.word	0x08029af8

0800faa4 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE>:

TfLiteStatus MicroAllocator::FinishModelAllocation(
    const Model* model, SubgraphAllocations* subgraph_allocations,
    ScratchBufferHandle** scratch_buffer_handles) {
 800faa4:	b590      	push	{r4, r7, lr}
 800faa6:	b08b      	sub	sp, #44	; 0x2c
 800faa8:	af02      	add	r7, sp, #8
 800faaa:	60f8      	str	r0, [r7, #12]
 800faac:	60b9      	str	r1, [r7, #8]
 800faae:	607a      	str	r2, [r7, #4]
 800fab0:	603b      	str	r3, [r7, #0]
  if (!model_is_allocating_) {
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	7d1b      	ldrb	r3, [r3, #20]
 800fab6:	f083 0301 	eor.w	r3, r3, #1
 800faba:	b2db      	uxtb	r3, r3
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d007      	beq.n	800fad0 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	691b      	ldr	r3, [r3, #16]
 800fac4:	4936      	ldr	r1, [pc, #216]	; (800fba0 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xfc>)
 800fac6:	4618      	mov	r0, r3
 800fac8:	f7fa ff1c 	bl	800a904 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "MicroAllocator: Model allocation finished before "
                         "starting allocating model");
    return kTfLiteError;
 800facc:	2301      	movs	r3, #1
 800face:	e062      	b.n	800fb96 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xf2>
  }

  // TODO(b/187993197): Track scratch buffers for each subgraph.
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 800fad0:	2300      	movs	r3, #0
 800fad2:	61fb      	str	r3, [r7, #28]
 800fad4:	68b8      	ldr	r0, [r7, #8]
 800fad6:	f7fe fdab 	bl	800e630 <_ZNK6tflite5Model9subgraphsEv>
 800fada:	4603      	mov	r3, r0
 800fadc:	4618      	mov	r0, r3
 800fade:	f7fe fe17 	bl	800e710 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 800fae2:	4602      	mov	r2, r0
 800fae4:	69fb      	ldr	r3, [r7, #28]
 800fae6:	4293      	cmp	r3, r2
 800fae8:	bf34      	ite	cc
 800faea:	2301      	movcc	r3, #1
 800faec:	2300      	movcs	r3, #0
 800faee:	b2db      	uxtb	r3, r3
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d04c      	beq.n	800fb8e <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xea>
       subgraph_idx++) {
    const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
 800faf4:	68b8      	ldr	r0, [r7, #8]
 800faf6:	f7fe fd9b 	bl	800e630 <_ZNK6tflite5Model9subgraphsEv>
 800fafa:	4603      	mov	r3, r0
 800fafc:	69f9      	ldr	r1, [r7, #28]
 800fafe:	4618      	mov	r0, r3
 800fb00:	f7fe fe14 	bl	800e72c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800fb04:	61b8      	str	r0, [r7, #24]
    TFLITE_DCHECK(subgraph != nullptr);
 800fb06:	69bb      	ldr	r3, [r7, #24]
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d101      	bne.n	800fb10 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x6c>
 800fb0c:	f017 f8f7 	bl	8026cfe <abort>

    TF_LITE_ENSURE_STATUS(AllocateScratchBufferHandles(
 800fb10:	68fb      	ldr	r3, [r7, #12]
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	3330      	adds	r3, #48	; 0x30
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	68fa      	ldr	r2, [r7, #12]
 800fb1a:	6992      	ldr	r2, [r2, #24]
 800fb1c:	6839      	ldr	r1, [r7, #0]
 800fb1e:	68f8      	ldr	r0, [r7, #12]
 800fb20:	4798      	blx	r3
 800fb22:	4603      	mov	r3, r0
 800fb24:	75fb      	strb	r3, [r7, #23]
 800fb26:	7dfb      	ldrb	r3, [r7, #23]
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d001      	beq.n	800fb30 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x8c>
 800fb2c:	7dfb      	ldrb	r3, [r7, #23]
 800fb2e:	e032      	b.n	800fb96 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xf2>
        scratch_buffer_handles, scratch_buffer_request_count_));
    TF_LITE_ENSURE_STATUS(CommitStaticMemoryPlan(
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	332c      	adds	r3, #44	; 0x2c
 800fb36:	681c      	ldr	r4, [r3, #0]
 800fb38:	69fb      	ldr	r3, [r7, #28]
 800fb3a:	00db      	lsls	r3, r3, #3
 800fb3c:	687a      	ldr	r2, [r7, #4]
 800fb3e:	4413      	add	r3, r2
 800fb40:	685a      	ldr	r2, [r3, #4]
 800fb42:	683b      	ldr	r3, [r7, #0]
 800fb44:	6819      	ldr	r1, [r3, #0]
 800fb46:	69fb      	ldr	r3, [r7, #28]
 800fb48:	9300      	str	r3, [sp, #0]
 800fb4a:	460b      	mov	r3, r1
 800fb4c:	68b9      	ldr	r1, [r7, #8]
 800fb4e:	68f8      	ldr	r0, [r7, #12]
 800fb50:	47a0      	blx	r4
 800fb52:	4603      	mov	r3, r0
 800fb54:	75bb      	strb	r3, [r7, #22]
 800fb56:	7dbb      	ldrb	r3, [r7, #22]
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d001      	beq.n	800fb60 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xbc>
 800fb5c:	7dbb      	ldrb	r3, [r7, #22]
 800fb5e:	e01a      	b.n	800fb96 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xf2>
        model, subgraph_allocations[subgraph_idx].tensors,
        *scratch_buffer_handles, subgraph_idx));
    TF_LITE_ENSURE_STATUS(AllocateVariables(
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	3320      	adds	r3, #32
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	69fa      	ldr	r2, [r7, #28]
 800fb6a:	00d2      	lsls	r2, r2, #3
 800fb6c:	6879      	ldr	r1, [r7, #4]
 800fb6e:	440a      	add	r2, r1
 800fb70:	6852      	ldr	r2, [r2, #4]
 800fb72:	69b9      	ldr	r1, [r7, #24]
 800fb74:	68f8      	ldr	r0, [r7, #12]
 800fb76:	4798      	blx	r3
 800fb78:	4603      	mov	r3, r0
 800fb7a:	757b      	strb	r3, [r7, #21]
 800fb7c:	7d7b      	ldrb	r3, [r7, #21]
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d001      	beq.n	800fb86 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xe2>
 800fb82:	7d7b      	ldrb	r3, [r7, #21]
 800fb84:	e007      	b.n	800fb96 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xf2>
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 800fb86:	69fb      	ldr	r3, [r7, #28]
 800fb88:	3301      	adds	r3, #1
 800fb8a:	61fb      	str	r3, [r7, #28]
 800fb8c:	e7a2      	b.n	800fad4 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x30>
        subgraph, subgraph_allocations[subgraph_idx].tensors));
  }
  model_is_allocating_ = false;
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	2200      	movs	r2, #0
 800fb92:	751a      	strb	r2, [r3, #20]
  return kTfLiteOk;
 800fb94:	2300      	movs	r3, #0
}
 800fb96:	4618      	mov	r0, r3
 800fb98:	3724      	adds	r7, #36	; 0x24
 800fb9a:	46bd      	mov	sp, r7
 800fb9c:	bd90      	pop	{r4, r7, pc}
 800fb9e:	bf00      	nop
 800fba0:	08029b28 	.word	0x08029b28

0800fba4 <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEj>:

void* MicroAllocator::AllocatePersistentBuffer(size_t bytes) {
 800fba4:	b580      	push	{r7, lr}
 800fba6:	b082      	sub	sp, #8
 800fba8:	af00      	add	r7, sp, #0
 800fbaa:	6078      	str	r0, [r7, #4]
 800fbac:	6039      	str	r1, [r7, #0]
  return memory_allocator_->AllocateFromTail(bytes, kBufferAlignment);
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	6858      	ldr	r0, [r3, #4]
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	685b      	ldr	r3, [r3, #4]
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	330c      	adds	r3, #12
 800fbba:	681b      	ldr	r3, [r3, #0]
 800fbbc:	2210      	movs	r2, #16
 800fbbe:	6839      	ldr	r1, [r7, #0]
 800fbc0:	4798      	blx	r3
 800fbc2:	4603      	mov	r3, r0
}
 800fbc4:	4618      	mov	r0, r3
 800fbc6:	3708      	adds	r7, #8
 800fbc8:	46bd      	mov	sp, r7
 800fbca:	bd80      	pop	{r7, pc}

0800fbcc <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi>:

TfLiteStatus MicroAllocator::RequestScratchBufferInArena(size_t bytes,
                                                         int subgraph_idx,
                                                         int* buffer_idx) {
 800fbcc:	b580      	push	{r7, lr}
 800fbce:	b088      	sub	sp, #32
 800fbd0:	af00      	add	r7, sp, #0
 800fbd2:	60f8      	str	r0, [r7, #12]
 800fbd4:	60b9      	str	r1, [r7, #8]
 800fbd6:	607a      	str	r2, [r7, #4]
 800fbd8:	603b      	str	r3, [r7, #0]
  // All scratch buffer requests are stored in the head section of the arena
  // when a model is in the prepare phase. First align a scratch buffer request
  // pointer to the start of the head:
  internal::ScratchBufferRequest* requests = GetScratchBufferRequests();
 800fbda:	68f8      	ldr	r0, [r7, #12]
 800fbdc:	f000 fc9d 	bl	801051a <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
 800fbe0:	6178      	str	r0, [r7, #20]

  // Count the number of requested scratch buffers for the current node:
  size_t current_node_request_count = 0;
 800fbe2:	2300      	movs	r3, #0
 800fbe4:	61fb      	str	r3, [r7, #28]
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 800fbe6:	2300      	movs	r3, #0
 800fbe8:	61bb      	str	r3, [r7, #24]
 800fbea:	68fb      	ldr	r3, [r7, #12]
 800fbec:	699b      	ldr	r3, [r3, #24]
 800fbee:	69ba      	ldr	r2, [r7, #24]
 800fbf0:	429a      	cmp	r2, r3
 800fbf2:	d20e      	bcs.n	800fc12 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x46>
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
 800fbf4:	69bb      	ldr	r3, [r7, #24]
 800fbf6:	00db      	lsls	r3, r3, #3
 800fbf8:	697a      	ldr	r2, [r7, #20]
 800fbfa:	4413      	add	r3, r2
 800fbfc:	685b      	ldr	r3, [r3, #4]
 800fbfe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fc02:	d102      	bne.n	800fc0a <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x3e>
      ++current_node_request_count;
 800fc04:	69fb      	ldr	r3, [r7, #28]
 800fc06:	3301      	adds	r3, #1
 800fc08:	61fb      	str	r3, [r7, #28]
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 800fc0a:	69bb      	ldr	r3, [r7, #24]
 800fc0c:	3301      	adds	r3, #1
 800fc0e:	61bb      	str	r3, [r7, #24]
 800fc10:	e7eb      	b.n	800fbea <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x1e>
    }
  }

  // First, ensure that the per-kernel request has not exceeded the limit:
  if (current_node_request_count >= kMaxScratchBuffersPerOp) {
 800fc12:	69fb      	ldr	r3, [r7, #28]
 800fc14:	2b0b      	cmp	r3, #11
 800fc16:	d908      	bls.n	800fc2a <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x5e>
    TF_LITE_REPORT_ERROR(
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	691b      	ldr	r3, [r3, #16]
 800fc1c:	220c      	movs	r2, #12
 800fc1e:	4913      	ldr	r1, [pc, #76]	; (800fc6c <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0xa0>)
 800fc20:	4618      	mov	r0, r3
 800fc22:	f7fa fe6f 	bl	800a904 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Scratch buffer request exeeds limit per operator (%d)",
        kMaxScratchBuffersPerOp);
    return kTfLiteError;
 800fc26:	2301      	movs	r3, #1
 800fc28:	e01c      	b.n	800fc64 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x98>
  }

  // Initialize and assign values for the request at the current index:
  internal::ScratchBufferRequest* current_request =
      &requests[scratch_buffer_request_count_];
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	699b      	ldr	r3, [r3, #24]
 800fc2e:	00db      	lsls	r3, r3, #3
  internal::ScratchBufferRequest* current_request =
 800fc30:	697a      	ldr	r2, [r7, #20]
 800fc32:	4413      	add	r3, r2
 800fc34:	613b      	str	r3, [r7, #16]
  *current_request = {};
 800fc36:	693b      	ldr	r3, [r7, #16]
 800fc38:	461a      	mov	r2, r3
 800fc3a:	2300      	movs	r3, #0
 800fc3c:	6013      	str	r3, [r2, #0]
 800fc3e:	6053      	str	r3, [r2, #4]
  // Assign -1 as a sentinel value that will be updated when the node finishes
  // allocating:
  current_request->bytes = bytes;
 800fc40:	693b      	ldr	r3, [r7, #16]
 800fc42:	68ba      	ldr	r2, [r7, #8]
 800fc44:	601a      	str	r2, [r3, #0]
  current_request->node_idx = kUnassignedScratchBufferRequestIndex;
 800fc46:	693b      	ldr	r3, [r7, #16]
 800fc48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fc4c:	605a      	str	r2, [r3, #4]

  // Assign the current request index to the out-param:
  *buffer_idx = scratch_buffer_request_count_;
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	699b      	ldr	r3, [r3, #24]
 800fc52:	461a      	mov	r2, r3
 800fc54:	683b      	ldr	r3, [r7, #0]
 800fc56:	601a      	str	r2, [r3, #0]

  // Bump the request count to prepare for the next request:
  ++scratch_buffer_request_count_;
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	699b      	ldr	r3, [r3, #24]
 800fc5c:	1c5a      	adds	r2, r3, #1
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	619a      	str	r2, [r3, #24]
  return kTfLiteOk;
 800fc62:	2300      	movs	r3, #0
}
 800fc64:	4618      	mov	r0, r3
 800fc66:	3720      	adds	r7, #32
 800fc68:	46bd      	mov	sp, r7
 800fc6a:	bd80      	pop	{r7, pc}
 800fc6c:	08029b74 	.word	0x08029b74

0800fc70 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi>:

TfLiteStatus MicroAllocator::FinishPrepareNodeAllocations(int node_id) {
 800fc70:	b580      	push	{r7, lr}
 800fc72:	b086      	sub	sp, #24
 800fc74:	af00      	add	r7, sp, #0
 800fc76:	6078      	str	r0, [r7, #4]
 800fc78:	6039      	str	r1, [r7, #0]
  // When a node has finished preparing, all temp allocations performed by the
  // kernel should be cleaned up:
  ResetTempAllocations();
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	3308      	adds	r3, #8
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	6878      	ldr	r0, [r7, #4]
 800fc84:	4798      	blx	r3

  // Find and update any new scratch buffer requests for the current node:
  internal::ScratchBufferRequest* requests = GetScratchBufferRequests();
 800fc86:	6878      	ldr	r0, [r7, #4]
 800fc88:	f000 fc47 	bl	801051a <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
 800fc8c:	6138      	str	r0, [r7, #16]

  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 800fc8e:	2300      	movs	r3, #0
 800fc90:	617b      	str	r3, [r7, #20]
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	699b      	ldr	r3, [r3, #24]
 800fc96:	697a      	ldr	r2, [r7, #20]
 800fc98:	429a      	cmp	r2, r3
 800fc9a:	d211      	bcs.n	800fcc0 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x50>
    // A request with a node_idx of -1 is a sentinel value used to indicate this
    // was a new request for the current node. The allocator finally knows the
    // node index at this point. Assign the value and update the list of new
    // requests so the head section can be adjusted to allow for the next kernel
    // to allocate at most kMaxScratchBuffersPerOp requests:
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
 800fc9c:	697b      	ldr	r3, [r7, #20]
 800fc9e:	00db      	lsls	r3, r3, #3
 800fca0:	693a      	ldr	r2, [r7, #16]
 800fca2:	4413      	add	r3, r2
 800fca4:	685b      	ldr	r3, [r3, #4]
 800fca6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fcaa:	d105      	bne.n	800fcb8 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x48>
      requests[i].node_idx = node_id;
 800fcac:	697b      	ldr	r3, [r7, #20]
 800fcae:	00db      	lsls	r3, r3, #3
 800fcb0:	693a      	ldr	r2, [r7, #16]
 800fcb2:	4413      	add	r3, r2
 800fcb4:	683a      	ldr	r2, [r7, #0]
 800fcb6:	605a      	str	r2, [r3, #4]
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 800fcb8:	697b      	ldr	r3, [r7, #20]
 800fcba:	3301      	adds	r3, #1
 800fcbc:	617b      	str	r3, [r7, #20]
 800fcbe:	e7e8      	b.n	800fc92 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x22>
    }
  }

  // Ensure that the head is re-adjusted to allow for another at-most
  // kMaxScratchBuffersPerOp scratch buffer requests in the next operator:
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	6858      	ldr	r0, [r3, #4]
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	685b      	ldr	r3, [r3, #4]
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	3308      	adds	r3, #8
 800fccc:	681b      	ldr	r3, [r3, #0]
 800fcce:	687a      	ldr	r2, [r7, #4]
 800fcd0:	6992      	ldr	r2, [r2, #24]
 800fcd2:	320c      	adds	r2, #12
 800fcd4:	00d1      	lsls	r1, r2, #3
 800fcd6:	2204      	movs	r2, #4
 800fcd8:	4798      	blx	r3
 800fcda:	4603      	mov	r3, r0
 800fcdc:	73fb      	strb	r3, [r7, #15]
 800fcde:	7bfb      	ldrb	r3, [r7, #15]
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d001      	beq.n	800fce8 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x78>
 800fce4:	7bfb      	ldrb	r3, [r7, #15]
 800fce6:	e000      	b.n	800fcea <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x7a>
      sizeof(internal::ScratchBufferRequest) *
          (scratch_buffer_request_count_ + kMaxScratchBuffersPerOp),
      alignof(internal::ScratchBufferRequest)));

  return kTfLiteOk;
 800fce8:	2300      	movs	r3, #0
}
 800fcea:	4618      	mov	r0, r3
 800fcec:	3718      	adds	r7, #24
 800fcee:	46bd      	mov	sp, r7
 800fcf0:	bd80      	pop	{r7, pc}
	...

0800fcf4 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE>:
size_t MicroAllocator::used_bytes() const {
  return memory_allocator_->GetUsedBytes();
}

TfLiteStatus MicroAllocator::AllocateNodeAndRegistrations(
    const Model* model, SubgraphAllocations* subgraph_allocations) {
 800fcf4:	b580      	push	{r7, lr}
 800fcf6:	b088      	sub	sp, #32
 800fcf8:	af00      	add	r7, sp, #0
 800fcfa:	60f8      	str	r0, [r7, #12]
 800fcfc:	60b9      	str	r1, [r7, #8]
 800fcfe:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(subgraph_allocations != nullptr);
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d101      	bne.n	800fd0a <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x16>
 800fd06:	f016 fffa 	bl	8026cfe <abort>

  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 800fd0a:	2300      	movs	r3, #0
 800fd0c:	61fb      	str	r3, [r7, #28]
 800fd0e:	68b8      	ldr	r0, [r7, #8]
 800fd10:	f7fe fc8e 	bl	800e630 <_ZNK6tflite5Model9subgraphsEv>
 800fd14:	4603      	mov	r3, r0
 800fd16:	4618      	mov	r0, r3
 800fd18:	f7fe fcfa 	bl	800e710 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 800fd1c:	4602      	mov	r2, r0
 800fd1e:	69fb      	ldr	r3, [r7, #28]
 800fd20:	4293      	cmp	r3, r2
 800fd22:	bf34      	ite	cc
 800fd24:	2301      	movcc	r3, #1
 800fd26:	2300      	movcs	r3, #0
 800fd28:	b2db      	uxtb	r3, r3
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d034      	beq.n	800fd98 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xa4>
       subgraph_idx++) {
    const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
 800fd2e:	68b8      	ldr	r0, [r7, #8]
 800fd30:	f7fe fc7e 	bl	800e630 <_ZNK6tflite5Model9subgraphsEv>
 800fd34:	4603      	mov	r3, r0
 800fd36:	69f9      	ldr	r1, [r7, #28]
 800fd38:	4618      	mov	r0, r3
 800fd3a:	f7fe fcf7 	bl	800e72c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800fd3e:	61b8      	str	r0, [r7, #24]
    TFLITE_DCHECK(subgraph != nullptr);
 800fd40:	69bb      	ldr	r3, [r7, #24]
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d101      	bne.n	800fd4a <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x56>
 800fd46:	f016 ffda 	bl	8026cfe <abort>

    uint32_t operators_size = NumSubgraphOperators(subgraph);
 800fd4a:	69b8      	ldr	r0, [r7, #24]
 800fd4c:	f7fe fc7e 	bl	800e64c <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
 800fd50:	6178      	str	r0, [r7, #20]

    // Initialize NodeAndRegistrations for the subgraph.
    NodeAndRegistration* output = reinterpret_cast<NodeAndRegistration*>(
        memory_allocator_->AllocateFromTail(
 800fd52:	68fb      	ldr	r3, [r7, #12]
 800fd54:	6858      	ldr	r0, [r3, #4]
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	685b      	ldr	r3, [r3, #4]
            sizeof(NodeAndRegistration) * operators_size,
            alignof(NodeAndRegistration)));
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	330c      	adds	r3, #12
 800fd5e:	681b      	ldr	r3, [r3, #0]
            sizeof(NodeAndRegistration) * operators_size,
 800fd60:	697a      	ldr	r2, [r7, #20]
 800fd62:	212c      	movs	r1, #44	; 0x2c
 800fd64:	fb01 f102 	mul.w	r1, r1, r2
        memory_allocator_->AllocateFromTail(
 800fd68:	2204      	movs	r2, #4
 800fd6a:	4798      	blx	r3
 800fd6c:	6138      	str	r0, [r7, #16]
    if (output == nullptr) {
 800fd6e:	693b      	ldr	r3, [r7, #16]
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d107      	bne.n	800fd84 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x90>
      TF_LITE_REPORT_ERROR(
 800fd74:	68fb      	ldr	r3, [r7, #12]
 800fd76:	691b      	ldr	r3, [r3, #16]
 800fd78:	490a      	ldr	r1, [pc, #40]	; (800fda4 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xb0>)
 800fd7a:	4618      	mov	r0, r3
 800fd7c:	f7fa fdc2 	bl	800a904 <_ZN6tflite13ErrorReporter6ReportEPKcz>
          error_reporter_,
          "Failed to allocate memory for node_and_registrations.");
      return kTfLiteError;
 800fd80:	2301      	movs	r3, #1
 800fd82:	e00a      	b.n	800fd9a <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xa6>
    }
    subgraph_allocations[subgraph_idx].node_and_registrations = output;
 800fd84:	69fb      	ldr	r3, [r7, #28]
 800fd86:	00db      	lsls	r3, r3, #3
 800fd88:	687a      	ldr	r2, [r7, #4]
 800fd8a:	4413      	add	r3, r2
 800fd8c:	693a      	ldr	r2, [r7, #16]
 800fd8e:	601a      	str	r2, [r3, #0]
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 800fd90:	69fb      	ldr	r3, [r7, #28]
 800fd92:	3301      	adds	r3, #1
 800fd94:	61fb      	str	r3, [r7, #28]
 800fd96:	e7ba      	b.n	800fd0e <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1a>
  }
  return kTfLiteOk;
 800fd98:	2300      	movs	r3, #0
}
 800fd9a:	4618      	mov	r0, r3
 800fd9c:	3720      	adds	r7, #32
 800fd9e:	46bd      	mov	sp, r7
 800fda0:	bd80      	pop	{r7, pc}
 800fda2:	bf00      	nop
 800fda4:	08029bac 	.word	0x08029bac

0800fda8 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii>:
TfLiteTensor* MicroAllocator::AllocatePersistentTfLiteTensor(
    const Model* model, const SubgraphAllocations* subgraph_allocations,
    int tensor_index, int subgraph_index) {
 800fda8:	b590      	push	{r4, r7, lr}
 800fdaa:	b089      	sub	sp, #36	; 0x24
 800fdac:	af02      	add	r7, sp, #8
 800fdae:	60f8      	str	r0, [r7, #12]
 800fdb0:	60b9      	str	r1, [r7, #8]
 800fdb2:	607a      	str	r2, [r7, #4]
 800fdb4:	603b      	str	r3, [r7, #0]
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_index);
 800fdb6:	68b8      	ldr	r0, [r7, #8]
 800fdb8:	f7fe fc3a 	bl	800e630 <_ZNK6tflite5Model9subgraphsEv>
 800fdbc:	4602      	mov	r2, r0
 800fdbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdc0:	4619      	mov	r1, r3
 800fdc2:	4610      	mov	r0, r2
 800fdc4:	f7fe fcb2 	bl	800e72c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800fdc8:	6178      	str	r0, [r7, #20]
  TFLITE_DCHECK(subgraph != nullptr);
 800fdca:	697b      	ldr	r3, [r7, #20]
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	d101      	bne.n	800fdd4 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x2c>
 800fdd0:	f016 ff95 	bl	8026cfe <abort>

  // This value is allocated from persistent arena space. It is guaranteed to be
  // around for the lifetime of the application.
  TfLiteTensor* tensor = AllocatePersistentTfLiteTensorInternal();
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	3324      	adds	r3, #36	; 0x24
 800fdda:	681b      	ldr	r3, [r3, #0]
 800fddc:	68f8      	ldr	r0, [r7, #12]
 800fdde:	4798      	blx	r3
 800fde0:	6138      	str	r0, [r7, #16]
  // Populate any fields from the flatbuffer, since this TfLiteTensor struct is
  // allocated in the persistent section of the arena, ensure that additional
  // allocations also take place in that section of the arena.
  if (PopulateTfLiteTensorFromFlatbuffer(
          model, tensor, tensor_index, subgraph_index,
          /*allocate_temp=*/false) != kTfLiteOk) {
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	3328      	adds	r3, #40	; 0x28
 800fde8:	681c      	ldr	r4, [r3, #0]
  if (PopulateTfLiteTensorFromFlatbuffer(
 800fdea:	2300      	movs	r3, #0
 800fdec:	9301      	str	r3, [sp, #4]
 800fdee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdf0:	9300      	str	r3, [sp, #0]
 800fdf2:	683b      	ldr	r3, [r7, #0]
 800fdf4:	693a      	ldr	r2, [r7, #16]
 800fdf6:	68b9      	ldr	r1, [r7, #8]
 800fdf8:	68f8      	ldr	r0, [r7, #12]
 800fdfa:	47a0      	blx	r4
 800fdfc:	4603      	mov	r3, r0
          /*allocate_temp=*/false) != kTfLiteOk) {
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	bf14      	ite	ne
 800fe02:	2301      	movne	r3, #1
 800fe04:	2300      	moveq	r3, #0
 800fe06:	b2db      	uxtb	r3, r3
  if (PopulateTfLiteTensorFromFlatbuffer(
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d007      	beq.n	800fe1c <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x74>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	691b      	ldr	r3, [r3, #16]
 800fe10:	4914      	ldr	r1, [pc, #80]	; (800fe64 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xbc>)
 800fe12:	4618      	mov	r0, r3
 800fe14:	f7fa fd76 	bl	800a904 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed to populate a persistent TfLiteTensor struct "
                         "from flatbuffer data!");
    return nullptr;
 800fe18:	2300      	movs	r3, #0
 800fe1a:	e01f      	b.n	800fe5c <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xb4>
  }

  if (subgraph_allocations != nullptr) {
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d01b      	beq.n	800fe5a <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xb2>
    // Tensor buffers that are allocated at runtime (e.g. non-weight buffers)
    // and not located in the flatbuffer are stored on the pre-allocated list of
    // TfLiteEvalTensors structs. These structs are the source of truth, simply
    // point the corresponding buffer to the new TfLiteTensor data value.
    tensor->data.data =
        subgraph_allocations[subgraph_index].tensors[tensor_index].data.data;
 800fe22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe24:	00db      	lsls	r3, r3, #3
 800fe26:	687a      	ldr	r2, [r7, #4]
 800fe28:	4413      	add	r3, r2
 800fe2a:	6859      	ldr	r1, [r3, #4]
 800fe2c:	683a      	ldr	r2, [r7, #0]
 800fe2e:	4613      	mov	r3, r2
 800fe30:	005b      	lsls	r3, r3, #1
 800fe32:	4413      	add	r3, r2
 800fe34:	009b      	lsls	r3, r3, #2
 800fe36:	440b      	add	r3, r1
 800fe38:	681a      	ldr	r2, [r3, #0]
    tensor->data.data =
 800fe3a:	693b      	ldr	r3, [r7, #16]
 800fe3c:	605a      	str	r2, [r3, #4]
    // TfLiteEvalTensor structs must also be the source of truth for the
    // TfLiteTensor dims.
    tensor->dims =
        subgraph_allocations[subgraph_index].tensors[tensor_index].dims;
 800fe3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe40:	00db      	lsls	r3, r3, #3
 800fe42:	687a      	ldr	r2, [r7, #4]
 800fe44:	4413      	add	r3, r2
 800fe46:	6859      	ldr	r1, [r3, #4]
 800fe48:	683a      	ldr	r2, [r7, #0]
 800fe4a:	4613      	mov	r3, r2
 800fe4c:	005b      	lsls	r3, r3, #1
 800fe4e:	4413      	add	r3, r2
 800fe50:	009b      	lsls	r3, r3, #2
 800fe52:	440b      	add	r3, r1
 800fe54:	685a      	ldr	r2, [r3, #4]
    tensor->dims =
 800fe56:	693b      	ldr	r3, [r7, #16]
 800fe58:	609a      	str	r2, [r3, #8]
  }
  return tensor;
 800fe5a:	693b      	ldr	r3, [r7, #16]
}
 800fe5c:	4618      	mov	r0, r3
 800fe5e:	371c      	adds	r7, #28
 800fe60:	46bd      	mov	sp, r7
 800fe62:	bd90      	pop	{r4, r7, pc}
 800fe64:	08029be4 	.word	0x08029be4

0800fe68 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii>:

TfLiteTensor* MicroAllocator::AllocateTempTfLiteTensor(
    const Model* model, const SubgraphAllocations* subgraph_allocations,
    int tensor_index, int subgraph_index) {
 800fe68:	b590      	push	{r4, r7, lr}
 800fe6a:	b089      	sub	sp, #36	; 0x24
 800fe6c:	af02      	add	r7, sp, #8
 800fe6e:	60f8      	str	r0, [r7, #12]
 800fe70:	60b9      	str	r1, [r7, #8]
 800fe72:	607a      	str	r2, [r7, #4]
 800fe74:	603b      	str	r3, [r7, #0]
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_index);
 800fe76:	68b8      	ldr	r0, [r7, #8]
 800fe78:	f7fe fbda 	bl	800e630 <_ZNK6tflite5Model9subgraphsEv>
 800fe7c:	4602      	mov	r2, r0
 800fe7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe80:	4619      	mov	r1, r3
 800fe82:	4610      	mov	r0, r2
 800fe84:	f7fe fc52 	bl	800e72c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800fe88:	6178      	str	r0, [r7, #20]
  TFLITE_DCHECK(subgraph != nullptr);
 800fe8a:	697b      	ldr	r3, [r7, #20]
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d101      	bne.n	800fe94 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x2c>
 800fe90:	f016 ff35 	bl	8026cfe <abort>

  // This value is allocated from temporary arena space. It is guaranteed to be
  // around for at least the scope of the calling function. Since this struct
  // allocation takes place in temp space, no need to own or cleanup.
  TfLiteTensor* tensor =
      reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateTemp(
 800fe94:	68fb      	ldr	r3, [r7, #12]
 800fe96:	6858      	ldr	r0, [r3, #4]
 800fe98:	68fb      	ldr	r3, [r7, #12]
 800fe9a:	685b      	ldr	r3, [r3, #4]
          sizeof(TfLiteTensor), alignof(TfLiteTensor)));
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	3310      	adds	r3, #16
 800fea0:	681b      	ldr	r3, [r3, #0]
      reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateTemp(
 800fea2:	2204      	movs	r2, #4
 800fea4:	2140      	movs	r1, #64	; 0x40
 800fea6:	4798      	blx	r3
 800fea8:	6138      	str	r0, [r7, #16]
  // Populate any fields from the flatbuffer, since this TfLiteTensor struct is
  // allocated in the temp section of the arena, ensure that additional
  // allocations also take place in that section of the arena.
  if (PopulateTfLiteTensorFromFlatbuffer(model, tensor, tensor_index,
                                         subgraph_index,
                                         /*allocate_temp=*/true) != kTfLiteOk) {
 800feaa:	68fb      	ldr	r3, [r7, #12]
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	3328      	adds	r3, #40	; 0x28
 800feb0:	681c      	ldr	r4, [r3, #0]
  if (PopulateTfLiteTensorFromFlatbuffer(model, tensor, tensor_index,
 800feb2:	2301      	movs	r3, #1
 800feb4:	9301      	str	r3, [sp, #4]
 800feb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800feb8:	9300      	str	r3, [sp, #0]
 800feba:	683b      	ldr	r3, [r7, #0]
 800febc:	693a      	ldr	r2, [r7, #16]
 800febe:	68b9      	ldr	r1, [r7, #8]
 800fec0:	68f8      	ldr	r0, [r7, #12]
 800fec2:	47a0      	blx	r4
 800fec4:	4603      	mov	r3, r0
                                         /*allocate_temp=*/true) != kTfLiteOk) {
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	bf14      	ite	ne
 800feca:	2301      	movne	r3, #1
 800fecc:	2300      	moveq	r3, #0
 800fece:	b2db      	uxtb	r3, r3
  if (PopulateTfLiteTensorFromFlatbuffer(model, tensor, tensor_index,
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d007      	beq.n	800fee4 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x7c>
    TF_LITE_REPORT_ERROR(
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	691b      	ldr	r3, [r3, #16]
 800fed8:	4914      	ldr	r1, [pc, #80]	; (800ff2c <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xc4>)
 800feda:	4618      	mov	r0, r3
 800fedc:	f7fa fd12 	bl	800a904 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to populate a temp TfLiteTensor struct from flatbuffer data!");
    return nullptr;
 800fee0:	2300      	movs	r3, #0
 800fee2:	e01f      	b.n	800ff24 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xbc>
  }

  if (subgraph_allocations != nullptr) {
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d01b      	beq.n	800ff22 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xba>
    // Tensor buffers that are allocated at runtime (e.g. non-weight buffers)
    // and not located in the flatbuffer are stored on the pre-allocated list of
    // TfLiteEvalTensors structs. These structs are the source of truth, simply
    // point the corresponding buffer to the new TfLiteTensor data value.
    tensor->data.data =
        subgraph_allocations[subgraph_index].tensors[tensor_index].data.data;
 800feea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800feec:	00db      	lsls	r3, r3, #3
 800feee:	687a      	ldr	r2, [r7, #4]
 800fef0:	4413      	add	r3, r2
 800fef2:	6859      	ldr	r1, [r3, #4]
 800fef4:	683a      	ldr	r2, [r7, #0]
 800fef6:	4613      	mov	r3, r2
 800fef8:	005b      	lsls	r3, r3, #1
 800fefa:	4413      	add	r3, r2
 800fefc:	009b      	lsls	r3, r3, #2
 800fefe:	440b      	add	r3, r1
 800ff00:	681a      	ldr	r2, [r3, #0]
    tensor->data.data =
 800ff02:	693b      	ldr	r3, [r7, #16]
 800ff04:	605a      	str	r2, [r3, #4]
    // TfLiteEvalTensor structs must also be the source of truth for the
    // TfLiteTensor dims.
    tensor->dims =
        subgraph_allocations[subgraph_index].tensors[tensor_index].dims;
 800ff06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff08:	00db      	lsls	r3, r3, #3
 800ff0a:	687a      	ldr	r2, [r7, #4]
 800ff0c:	4413      	add	r3, r2
 800ff0e:	6859      	ldr	r1, [r3, #4]
 800ff10:	683a      	ldr	r2, [r7, #0]
 800ff12:	4613      	mov	r3, r2
 800ff14:	005b      	lsls	r3, r3, #1
 800ff16:	4413      	add	r3, r2
 800ff18:	009b      	lsls	r3, r3, #2
 800ff1a:	440b      	add	r3, r1
 800ff1c:	685a      	ldr	r2, [r3, #4]
    tensor->dims =
 800ff1e:	693b      	ldr	r3, [r7, #16]
 800ff20:	609a      	str	r2, [r3, #8]
  }
  return tensor;
 800ff22:	693b      	ldr	r3, [r7, #16]
}
 800ff24:	4618      	mov	r0, r3
 800ff26:	371c      	adds	r7, #28
 800ff28:	46bd      	mov	sp, r7
 800ff2a:	bd90      	pop	{r4, r7, pc}
 800ff2c:	08029c30 	.word	0x08029c30

0800ff30 <_ZN6tflite14MicroAllocator20ResetTempAllocationsEv>:

void MicroAllocator::ResetTempAllocations() {
 800ff30:	b580      	push	{r7, lr}
 800ff32:	b082      	sub	sp, #8
 800ff34:	af00      	add	r7, sp, #0
 800ff36:	6078      	str	r0, [r7, #4]
  memory_allocator_->ResetTempAllocations();
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	685a      	ldr	r2, [r3, #4]
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	685b      	ldr	r3, [r3, #4]
 800ff40:	681b      	ldr	r3, [r3, #0]
 800ff42:	3314      	adds	r3, #20
 800ff44:	681b      	ldr	r3, [r3, #0]
 800ff46:	4610      	mov	r0, r2
 800ff48:	4798      	blx	r3
}
 800ff4a:	bf00      	nop
 800ff4c:	3708      	adds	r7, #8
 800ff4e:	46bd      	mov	sp, r7
 800ff50:	bd80      	pop	{r7, pc}
	...

0800ff54 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE>:

TfLiteStatus MicroAllocator::AllocateTfLiteEvalTensors(
    const Model* model, SubgraphAllocations* subgraph_allocations) {
 800ff54:	b5b0      	push	{r4, r5, r7, lr}
 800ff56:	b08c      	sub	sp, #48	; 0x30
 800ff58:	af02      	add	r7, sp, #8
 800ff5a:	60f8      	str	r0, [r7, #12]
 800ff5c:	60b9      	str	r1, [r7, #8]
 800ff5e:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(subgraph_allocations != nullptr);
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d101      	bne.n	800ff6a <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x16>
 800ff66:	f016 feca 	bl	8026cfe <abort>

  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 800ff6a:	2300      	movs	r3, #0
 800ff6c:	627b      	str	r3, [r7, #36]	; 0x24
 800ff6e:	68b8      	ldr	r0, [r7, #8]
 800ff70:	f7fe fb5e 	bl	800e630 <_ZNK6tflite5Model9subgraphsEv>
 800ff74:	4603      	mov	r3, r0
 800ff76:	4618      	mov	r0, r3
 800ff78:	f7fe fbca 	bl	800e710 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 800ff7c:	4602      	mov	r2, r0
 800ff7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff80:	4293      	cmp	r3, r2
 800ff82:	bf34      	ite	cc
 800ff84:	2301      	movcc	r3, #1
 800ff86:	2300      	movcs	r3, #0
 800ff88:	b2db      	uxtb	r3, r3
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d076      	beq.n	801007c <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x128>
       subgraph_idx++) {
    const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
 800ff8e:	68b8      	ldr	r0, [r7, #8]
 800ff90:	f7fe fb4e 	bl	800e630 <_ZNK6tflite5Model9subgraphsEv>
 800ff94:	4603      	mov	r3, r0
 800ff96:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ff98:	4618      	mov	r0, r3
 800ff9a:	f7fe fbc7 	bl	800e72c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800ff9e:	61f8      	str	r0, [r7, #28]
    TFLITE_DCHECK(subgraph != nullptr);
 800ffa0:	69fb      	ldr	r3, [r7, #28]
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d101      	bne.n	800ffaa <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x56>
 800ffa6:	f016 feaa 	bl	8026cfe <abort>

    size_t alloc_count = subgraph->tensors()->size();
 800ffaa:	69f8      	ldr	r0, [r7, #28]
 800ffac:	f7fe fec5 	bl	800ed3a <_ZNK6tflite8SubGraph7tensorsEv>
 800ffb0:	4603      	mov	r3, r0
 800ffb2:	4618      	mov	r0, r3
 800ffb4:	f000 fbec 	bl	8010790 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 800ffb8:	61b8      	str	r0, [r7, #24]
    TfLiteEvalTensor* tensors =
        reinterpret_cast<TfLiteEvalTensor*>(memory_allocator_->AllocateFromTail(
 800ffba:	68fb      	ldr	r3, [r7, #12]
 800ffbc:	6858      	ldr	r0, [r3, #4]
 800ffbe:	68fb      	ldr	r3, [r7, #12]
 800ffc0:	685b      	ldr	r3, [r3, #4]
            sizeof(TfLiteEvalTensor) * alloc_count, alignof(TfLiteEvalTensor)));
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	330c      	adds	r3, #12
 800ffc6:	681c      	ldr	r4, [r3, #0]
        reinterpret_cast<TfLiteEvalTensor*>(memory_allocator_->AllocateFromTail(
 800ffc8:	69ba      	ldr	r2, [r7, #24]
 800ffca:	4613      	mov	r3, r2
 800ffcc:	005b      	lsls	r3, r3, #1
 800ffce:	4413      	add	r3, r2
 800ffd0:	009b      	lsls	r3, r3, #2
 800ffd2:	2204      	movs	r2, #4
 800ffd4:	4619      	mov	r1, r3
 800ffd6:	47a0      	blx	r4
 800ffd8:	6178      	str	r0, [r7, #20]
    if (tensors == nullptr) {
 800ffda:	697b      	ldr	r3, [r7, #20]
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d10c      	bne.n	800fffa <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xa6>
      TF_LITE_REPORT_ERROR(
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	6918      	ldr	r0, [r3, #16]
 800ffe4:	69ba      	ldr	r2, [r7, #24]
 800ffe6:	4613      	mov	r3, r2
 800ffe8:	005b      	lsls	r3, r3, #1
 800ffea:	4413      	add	r3, r2
 800ffec:	009b      	lsls	r3, r3, #2
 800ffee:	461a      	mov	r2, r3
 800fff0:	4925      	ldr	r1, [pc, #148]	; (8010088 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x134>)
 800fff2:	f7fa fc87 	bl	800a904 <_ZN6tflite13ErrorReporter6ReportEPKcz>
          error_reporter_,
          "Failed to allocate memory for context->eval_tensors, "
          "%d bytes required",
          sizeof(TfLiteEvalTensor) * alloc_count);
      return kTfLiteError;
 800fff6:	2301      	movs	r3, #1
 800fff8:	e041      	b.n	801007e <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x12a>
    }

    for (size_t i = 0; i < alloc_count; ++i) {
 800fffa:	2300      	movs	r3, #0
 800fffc:	623b      	str	r3, [r7, #32]
 800fffe:	6a3a      	ldr	r2, [r7, #32]
 8010000:	69bb      	ldr	r3, [r7, #24]
 8010002:	429a      	cmp	r2, r3
 8010004:	d230      	bcs.n	8010068 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x114>
      TfLiteStatus status = internal::InitializeTfLiteEvalTensorFromFlatbuffer(
 8010006:	68fb      	ldr	r3, [r7, #12]
 8010008:	685c      	ldr	r4, [r3, #4]
          memory_allocator_, *subgraph->tensors()->Get(i), model->buffers(),
 801000a:	69f8      	ldr	r0, [r7, #28]
 801000c:	f7fe fe95 	bl	800ed3a <_ZNK6tflite8SubGraph7tensorsEv>
 8010010:	4603      	mov	r3, r0
 8010012:	6a39      	ldr	r1, [r7, #32]
 8010014:	4618      	mov	r0, r3
 8010016:	f000 fbc9 	bl	80107ac <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 801001a:	4605      	mov	r5, r0
      TfLiteStatus status = internal::InitializeTfLiteEvalTensorFromFlatbuffer(
 801001c:	68b8      	ldr	r0, [r7, #8]
 801001e:	f7fe fee1 	bl	800ede4 <_ZNK6tflite5Model7buffersEv>
 8010022:	68fb      	ldr	r3, [r7, #12]
 8010024:	6919      	ldr	r1, [r3, #16]
          error_reporter_, &tensors[i]);
 8010026:	6a3a      	ldr	r2, [r7, #32]
 8010028:	4613      	mov	r3, r2
 801002a:	005b      	lsls	r3, r3, #1
 801002c:	4413      	add	r3, r2
 801002e:	009b      	lsls	r3, r3, #2
 8010030:	461a      	mov	r2, r3
      TfLiteStatus status = internal::InitializeTfLiteEvalTensorFromFlatbuffer(
 8010032:	697b      	ldr	r3, [r7, #20]
 8010034:	4413      	add	r3, r2
 8010036:	9300      	str	r3, [sp, #0]
 8010038:	460b      	mov	r3, r1
 801003a:	4602      	mov	r2, r0
 801003c:	4629      	mov	r1, r5
 801003e:	4620      	mov	r0, r4
 8010040:	f7ff fbb6 	bl	800f7b0 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor>
 8010044:	4603      	mov	r3, r0
 8010046:	74fb      	strb	r3, [r7, #19]
      if (status != kTfLiteOk) {
 8010048:	7cfb      	ldrb	r3, [r7, #19]
 801004a:	2b00      	cmp	r3, #0
 801004c:	d008      	beq.n	8010060 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x10c>
        TF_LITE_REPORT_ERROR(error_reporter_, "Failed to initialize tensor %d",
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	691b      	ldr	r3, [r3, #16]
 8010052:	6a3a      	ldr	r2, [r7, #32]
 8010054:	490d      	ldr	r1, [pc, #52]	; (801008c <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x138>)
 8010056:	4618      	mov	r0, r3
 8010058:	f7fa fc54 	bl	800a904 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             i);
        return kTfLiteError;
 801005c:	2301      	movs	r3, #1
 801005e:	e00e      	b.n	801007e <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x12a>
    for (size_t i = 0; i < alloc_count; ++i) {
 8010060:	6a3b      	ldr	r3, [r7, #32]
 8010062:	3301      	adds	r3, #1
 8010064:	623b      	str	r3, [r7, #32]
 8010066:	e7ca      	b.n	800fffe <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xaa>
      }
    }
    subgraph_allocations[subgraph_idx].tensors = tensors;
 8010068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801006a:	00db      	lsls	r3, r3, #3
 801006c:	687a      	ldr	r2, [r7, #4]
 801006e:	4413      	add	r3, r2
 8010070:	697a      	ldr	r2, [r7, #20]
 8010072:	605a      	str	r2, [r3, #4]
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 8010074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010076:	3301      	adds	r3, #1
 8010078:	627b      	str	r3, [r7, #36]	; 0x24
 801007a:	e778      	b.n	800ff6e <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1a>
  }
  return kTfLiteOk;
 801007c:	2300      	movs	r3, #0
}
 801007e:	4618      	mov	r0, r3
 8010080:	3728      	adds	r7, #40	; 0x28
 8010082:	46bd      	mov	sp, r7
 8010084:	bdb0      	pop	{r4, r5, r7, pc}
 8010086:	bf00      	nop
 8010088:	08029c74 	.word	0x08029c74
 801008c:	08029cbc 	.word	0x08029cbc

08010090 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor>:
TfLiteStatus MicroAllocator::AllocateVariables(const SubGraph* subgraph,
                                               TfLiteEvalTensor* eval_tensors) {
 8010090:	b5b0      	push	{r4, r5, r7, lr}
 8010092:	b088      	sub	sp, #32
 8010094:	af00      	add	r7, sp, #0
 8010096:	60f8      	str	r0, [r7, #12]
 8010098:	60b9      	str	r1, [r7, #8]
 801009a:	607a      	str	r2, [r7, #4]
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 801009c:	2300      	movs	r3, #0
 801009e:	61fb      	str	r3, [r7, #28]
 80100a0:	68b8      	ldr	r0, [r7, #8]
 80100a2:	f7fe fe4a 	bl	800ed3a <_ZNK6tflite8SubGraph7tensorsEv>
 80100a6:	4603      	mov	r3, r0
 80100a8:	4618      	mov	r0, r3
 80100aa:	f000 fb71 	bl	8010790 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 80100ae:	4602      	mov	r2, r0
 80100b0:	69fb      	ldr	r3, [r7, #28]
 80100b2:	4293      	cmp	r3, r2
 80100b4:	bf34      	ite	cc
 80100b6:	2301      	movcc	r3, #1
 80100b8:	2300      	movcs	r3, #0
 80100ba:	b2db      	uxtb	r3, r3
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d04f      	beq.n	8010160 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xd0>
    auto* tensor = subgraph->tensors()->Get(i);
 80100c0:	68b8      	ldr	r0, [r7, #8]
 80100c2:	f7fe fe3a 	bl	800ed3a <_ZNK6tflite8SubGraph7tensorsEv>
 80100c6:	4603      	mov	r3, r0
 80100c8:	69f9      	ldr	r1, [r7, #28]
 80100ca:	4618      	mov	r0, r3
 80100cc:	f000 fb6e 	bl	80107ac <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 80100d0:	61b8      	str	r0, [r7, #24]
    if (tensor->is_variable()) {
 80100d2:	69b8      	ldr	r0, [r7, #24]
 80100d4:	f7fe fe01 	bl	800ecda <_ZNK6tflite6Tensor11is_variableEv>
 80100d8:	4603      	mov	r3, r0
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d03c      	beq.n	8010158 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xc8>
      size_t buffer_size;
      TF_LITE_ENSURE_STATUS(
 80100de:	69fa      	ldr	r2, [r7, #28]
 80100e0:	4613      	mov	r3, r2
 80100e2:	005b      	lsls	r3, r3, #1
 80100e4:	4413      	add	r3, r2
 80100e6:	009b      	lsls	r3, r3, #2
 80100e8:	461a      	mov	r2, r3
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	4413      	add	r3, r2
 80100ee:	f107 0210 	add.w	r2, r7, #16
 80100f2:	4611      	mov	r1, r2
 80100f4:	4618      	mov	r0, r3
 80100f6:	f7fe fd5c 	bl	800ebb2 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
 80100fa:	4603      	mov	r3, r0
 80100fc:	75fb      	strb	r3, [r7, #23]
 80100fe:	7dfb      	ldrb	r3, [r7, #23]
 8010100:	2b00      	cmp	r3, #0
 8010102:	d001      	beq.n	8010108 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x78>
 8010104:	7dfb      	ldrb	r3, [r7, #23]
 8010106:	e02c      	b.n	8010162 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xd2>
          TfLiteEvalTensorByteLength(&eval_tensors[i], &buffer_size));

      eval_tensors[i].data.data =
          memory_allocator_->AllocateFromTail(buffer_size, kBufferAlignment);
 8010108:	68fb      	ldr	r3, [r7, #12]
 801010a:	6858      	ldr	r0, [r3, #4]
 801010c:	68fb      	ldr	r3, [r7, #12]
 801010e:	685b      	ldr	r3, [r3, #4]
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	330c      	adds	r3, #12
 8010114:	681d      	ldr	r5, [r3, #0]
 8010116:	6939      	ldr	r1, [r7, #16]
      eval_tensors[i].data.data =
 8010118:	69fa      	ldr	r2, [r7, #28]
 801011a:	4613      	mov	r3, r2
 801011c:	005b      	lsls	r3, r3, #1
 801011e:	4413      	add	r3, r2
 8010120:	009b      	lsls	r3, r3, #2
 8010122:	461a      	mov	r2, r3
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	189c      	adds	r4, r3, r2
          memory_allocator_->AllocateFromTail(buffer_size, kBufferAlignment);
 8010128:	2210      	movs	r2, #16
 801012a:	47a8      	blx	r5
 801012c:	4603      	mov	r3, r0
      eval_tensors[i].data.data =
 801012e:	6023      	str	r3, [r4, #0]

      if (eval_tensors[i].data.data == nullptr) {
 8010130:	69fa      	ldr	r2, [r7, #28]
 8010132:	4613      	mov	r3, r2
 8010134:	005b      	lsls	r3, r3, #1
 8010136:	4413      	add	r3, r2
 8010138:	009b      	lsls	r3, r3, #2
 801013a:	461a      	mov	r2, r3
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	4413      	add	r3, r2
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	2b00      	cmp	r3, #0
 8010144:	d108      	bne.n	8010158 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xc8>
        TF_LITE_REPORT_ERROR(error_reporter_,
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	691b      	ldr	r3, [r3, #16]
 801014a:	693a      	ldr	r2, [r7, #16]
 801014c:	4907      	ldr	r1, [pc, #28]	; (801016c <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xdc>)
 801014e:	4618      	mov	r0, r3
 8010150:	f7fa fbd8 	bl	800a904 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Failed to allocate variable tensor of size %d",
                             buffer_size);
        return kTfLiteError;
 8010154:	2301      	movs	r3, #1
 8010156:	e004      	b.n	8010162 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xd2>
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 8010158:	69fb      	ldr	r3, [r7, #28]
 801015a:	3301      	adds	r3, #1
 801015c:	61fb      	str	r3, [r7, #28]
 801015e:	e79f      	b.n	80100a0 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x10>
      }
    }
  }
  return kTfLiteOk;
 8010160:	2300      	movs	r3, #0
}
 8010162:	4618      	mov	r0, r3
 8010164:	3720      	adds	r7, #32
 8010166:	46bd      	mov	sp, r7
 8010168:	bdb0      	pop	{r4, r5, r7, pc}
 801016a:	bf00      	nop
 801016c:	08029cdc 	.word	0x08029cdc

08010170 <_ZN6tflite14MicroAllocator38AllocatePersistentTfLiteTensorInternalEv>:

TfLiteTensor* MicroAllocator::AllocatePersistentTfLiteTensorInternal() {
 8010170:	b580      	push	{r7, lr}
 8010172:	b082      	sub	sp, #8
 8010174:	af00      	add	r7, sp, #0
 8010176:	6078      	str	r0, [r7, #4]
  return reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateFromTail(
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	6858      	ldr	r0, [r3, #4]
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	685b      	ldr	r3, [r3, #4]
      sizeof(TfLiteTensor), alignof(TfLiteTensor)));
 8010180:	681b      	ldr	r3, [r3, #0]
 8010182:	330c      	adds	r3, #12
 8010184:	681b      	ldr	r3, [r3, #0]
  return reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateFromTail(
 8010186:	2204      	movs	r2, #4
 8010188:	2140      	movs	r1, #64	; 0x40
 801018a:	4798      	blx	r3
 801018c:	4603      	mov	r3, r0
}
 801018e:	4618      	mov	r0, r3
 8010190:	3708      	adds	r7, #8
 8010192:	46bd      	mov	sp, r7
 8010194:	bd80      	pop	{r7, pc}

08010196 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib>:

TfLiteStatus MicroAllocator::PopulateTfLiteTensorFromFlatbuffer(
    const Model* model, TfLiteTensor* tensor, int tensor_index,
    int subgraph_idx, bool allocate_temp) {
 8010196:	b5b0      	push	{r4, r5, r7, lr}
 8010198:	b086      	sub	sp, #24
 801019a:	af02      	add	r7, sp, #8
 801019c:	60f8      	str	r0, [r7, #12]
 801019e:	60b9      	str	r1, [r7, #8]
 80101a0:	607a      	str	r2, [r7, #4]
 80101a2:	603b      	str	r3, [r7, #0]
  // TODO(b/162311891): This method serves as a stub to ensure quantized
  // allocations in the tail can be recorded. Once the interpreter has APIs for
  // accessing buffers on TfLiteEvalTensor this method can be dropped.
  return internal::InitializeTfLiteTensorFromFlatbuffer(
 80101a4:	68fb      	ldr	r3, [r7, #12]
 80101a6:	685c      	ldr	r4, [r3, #4]
      memory_allocator_, allocate_temp,
      *model->subgraphs()->Get(subgraph_idx)->tensors()->Get(tensor_index),
 80101a8:	68b8      	ldr	r0, [r7, #8]
 80101aa:	f7fe fa41 	bl	800e630 <_ZNK6tflite5Model9subgraphsEv>
 80101ae:	4602      	mov	r2, r0
 80101b0:	6a3b      	ldr	r3, [r7, #32]
 80101b2:	4619      	mov	r1, r3
 80101b4:	4610      	mov	r0, r2
 80101b6:	f7fe fab9 	bl	800e72c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 80101ba:	4603      	mov	r3, r0
 80101bc:	4618      	mov	r0, r3
 80101be:	f7fe fdbc 	bl	800ed3a <_ZNK6tflite8SubGraph7tensorsEv>
 80101c2:	4602      	mov	r2, r0
 80101c4:	683b      	ldr	r3, [r7, #0]
 80101c6:	4619      	mov	r1, r3
 80101c8:	4610      	mov	r0, r2
 80101ca:	f000 faef 	bl	80107ac <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 80101ce:	4605      	mov	r5, r0
  return internal::InitializeTfLiteTensorFromFlatbuffer(
 80101d0:	68b8      	ldr	r0, [r7, #8]
 80101d2:	f7fe fe07 	bl	800ede4 <_ZNK6tflite5Model7buffersEv>
 80101d6:	68fb      	ldr	r3, [r7, #12]
 80101d8:	691b      	ldr	r3, [r3, #16]
 80101da:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 80101de:	687a      	ldr	r2, [r7, #4]
 80101e0:	9201      	str	r2, [sp, #4]
 80101e2:	9300      	str	r3, [sp, #0]
 80101e4:	4603      	mov	r3, r0
 80101e6:	462a      	mov	r2, r5
 80101e8:	4620      	mov	r0, r4
 80101ea:	f7ff f987 	bl	800f4fc <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor>
 80101ee:	4603      	mov	r3, r0
      model->buffers(), error_reporter_, tensor);
}
 80101f0:	4618      	mov	r0, r3
 80101f2:	3710      	adds	r7, #16
 80101f4:	46bd      	mov	sp, r7
 80101f6:	bdb0      	pop	{r4, r5, r7, pc}

080101f8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi>:
  return error_reporter_;
}

TfLiteStatus MicroAllocator::CommitStaticMemoryPlan(
    const Model* model, TfLiteEvalTensor* eval_tensors,
    ScratchBufferHandle* scratch_buffer_handles, int subgraph_idx) {
 80101f8:	b5b0      	push	{r4, r5, r7, lr}
 80101fa:	b098      	sub	sp, #96	; 0x60
 80101fc:	af02      	add	r7, sp, #8
 80101fe:	60f8      	str	r0, [r7, #12]
 8010200:	60b9      	str	r1, [r7, #8]
 8010202:	607a      	str	r2, [r7, #4]
 8010204:	603b      	str	r3, [r7, #0]
  size_t head_usage = 0;
 8010206:	2300      	movs	r3, #0
 8010208:	657b      	str	r3, [r7, #84]	; 0x54
  //
  // Note that AllocationInfo is only needed for creating the plan. It will be
  // allocated from the temp section and cleaned up at the bottom of this
  // function.

  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
 801020a:	68b8      	ldr	r0, [r7, #8]
 801020c:	f7fe fa10 	bl	800e630 <_ZNK6tflite5Model9subgraphsEv>
 8010210:	4602      	mov	r2, r0
 8010212:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010214:	4619      	mov	r1, r3
 8010216:	4610      	mov	r0, r2
 8010218:	f7fe fa88 	bl	800e72c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 801021c:	6538      	str	r0, [r7, #80]	; 0x50
  size_t allocation_info_count =
      subgraph->tensors()->size() + scratch_buffer_request_count_;
 801021e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8010220:	f7fe fd8b 	bl	800ed3a <_ZNK6tflite8SubGraph7tensorsEv>
 8010224:	4603      	mov	r3, r0
 8010226:	4618      	mov	r0, r3
 8010228:	f000 fab2 	bl	8010790 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 801022c:	4602      	mov	r2, r0
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	699b      	ldr	r3, [r3, #24]
 8010232:	4413      	add	r3, r2
 8010234:	64fb      	str	r3, [r7, #76]	; 0x4c
  size_t bytes = sizeof(AllocationInfo) * allocation_info_count;
 8010236:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010238:	4613      	mov	r3, r2
 801023a:	005b      	lsls	r3, r3, #1
 801023c:	4413      	add	r3, r2
 801023e:	00db      	lsls	r3, r3, #3
 8010240:	64bb      	str	r3, [r7, #72]	; 0x48

  // Allocate an array of AllocationInfo structs from the temp section. This
  // struct will be used by AllocationInfoBuilder to find buffer usage.
  AllocationInfo* allocation_info = reinterpret_cast<AllocationInfo*>(
      memory_allocator_->AllocateTemp(bytes, alignof(AllocationInfo)));
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	6858      	ldr	r0, [r3, #4]
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	685b      	ldr	r3, [r3, #4]
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	3310      	adds	r3, #16
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	2204      	movs	r2, #4
 8010252:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8010254:	4798      	blx	r3
 8010256:	6478      	str	r0, [r7, #68]	; 0x44
  if (allocation_info == nullptr) {
 8010258:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801025a:	2b00      	cmp	r3, #0
 801025c:	d108      	bne.n	8010270 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x78>
    TF_LITE_REPORT_ERROR(
 801025e:	68fb      	ldr	r3, [r7, #12]
 8010260:	691b      	ldr	r3, [r3, #16]
 8010262:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010264:	4987      	ldr	r1, [pc, #540]	; (8010484 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x28c>)
 8010266:	4618      	mov	r0, r3
 8010268:	f7fa fb4c 	bl	800a904 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to allocate memory for allocation_info, %d bytes required",
        bytes);
    return kTfLiteError;
 801026c:	2301      	movs	r3, #1
 801026e:	e105      	b.n	801047c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x284>
  }

  // Use the AllocationInfoBuilder class to help determine where buffers are
  // used in the subgraph.
  AllocationInfoBuilder builder(allocation_info, subgraph->tensors()->size(),
 8010270:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8010272:	f7fe fd62 	bl	800ed3a <_ZNK6tflite8SubGraph7tensorsEv>
 8010276:	4603      	mov	r3, r0
 8010278:	4618      	mov	r0, r3
 801027a:	f000 fa89 	bl	8010790 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 801027e:	4601      	mov	r1, r0
                                scratch_buffer_request_count_, error_reporter_);
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	699a      	ldr	r2, [r3, #24]
 8010284:	68fb      	ldr	r3, [r7, #12]
 8010286:	691b      	ldr	r3, [r3, #16]
 8010288:	f107 0014 	add.w	r0, r7, #20
 801028c:	9300      	str	r3, [sp, #0]
 801028e:	4613      	mov	r3, r2
 8010290:	460a      	mov	r2, r1
 8010292:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010294:	f7fe fe28 	bl	800eee8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilderC1EPNS0_14AllocationInfoEjjPNS_13ErrorReporterE>

  const int32_t* offline_planner_offsets = nullptr;
 8010298:	2300      	movs	r3, #0
 801029a:	613b      	str	r3, [r7, #16]
  TF_LITE_ENSURE_STATUS(
 801029c:	f107 0210 	add.w	r2, r7, #16
 80102a0:	f107 0314 	add.w	r3, r7, #20
 80102a4:	68b9      	ldr	r1, [r7, #8]
 80102a6:	4618      	mov	r0, r3
 80102a8:	f7fe ff92 	bl	800f1d0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl>
 80102ac:	4603      	mov	r3, r0
 80102ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80102b2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d002      	beq.n	80102c0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xc8>
 80102ba:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80102be:	e0dd      	b.n	801047c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x284>
      builder.GetOfflinePlannedOffsets(model, &offline_planner_offsets));
  TF_LITE_ENSURE_STATUS(
 80102c0:	693a      	ldr	r2, [r7, #16]
 80102c2:	f107 0014 	add.w	r0, r7, #20
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80102ca:	f7fe fe27 	bl	800ef1c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor>
 80102ce:	4603      	mov	r3, r0
 80102d0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80102d4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d002      	beq.n	80102e2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xea>
 80102dc:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80102e0:	e0cc      	b.n	801047c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x284>
      builder.AddTensors(subgraph, offline_planner_offsets, eval_tensors));

  internal::ScratchBufferRequest* scratch_buffer_requests =
      GetScratchBufferRequests();
 80102e2:	68f8      	ldr	r0, [r7, #12]
 80102e4:	f000 f919 	bl	801051a <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
 80102e8:	63f8      	str	r0, [r7, #60]	; 0x3c

  TF_LITE_ENSURE_STATUS(builder.AddScratchBuffers(scratch_buffer_requests,
 80102ea:	f107 0314 	add.w	r3, r7, #20
 80102ee:	683a      	ldr	r2, [r7, #0]
 80102f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80102f2:	4618      	mov	r0, r3
 80102f4:	f7fe ffe8 	bl	800f2c8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE>
 80102f8:	4603      	mov	r3, r0
 80102fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80102fe:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8010302:	2b00      	cmp	r3, #0
 8010304:	d002      	beq.n	801030c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x114>
 8010306:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801030a:	e0b7      	b.n	801047c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x284>
                                                  scratch_buffer_handles));

  // Remaining arena size that memory planner can use for calculating offsets.
  size_t remaining_arena_size =
      memory_allocator_->GetAvailableMemory(kBufferAlignment);
 801030c:	68fb      	ldr	r3, [r7, #12]
 801030e:	685b      	ldr	r3, [r3, #4]
 8010310:	2110      	movs	r1, #16
 8010312:	4618      	mov	r0, r3
 8010314:	f002 fc7c 	bl	8012c10 <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEj>
 8010318:	6378      	str	r0, [r7, #52]	; 0x34
  uint8_t* planner_arena =
      memory_allocator_->AllocateTemp(remaining_arena_size, kBufferAlignment);
 801031a:	68fb      	ldr	r3, [r7, #12]
 801031c:	6858      	ldr	r0, [r3, #4]
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	685b      	ldr	r3, [r3, #4]
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	3310      	adds	r3, #16
 8010326:	681b      	ldr	r3, [r3, #0]
 8010328:	2210      	movs	r2, #16
 801032a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801032c:	4798      	blx	r3
 801032e:	6338      	str	r0, [r7, #48]	; 0x30
  TF_LITE_ENSURE(error_reporter_, planner_arena != nullptr);
 8010330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010332:	2b00      	cmp	r3, #0
 8010334:	d10e      	bne.n	8010354 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x15c>
 8010336:	68fb      	ldr	r3, [r7, #12]
 8010338:	6918      	ldr	r0, [r3, #16]
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	6919      	ldr	r1, [r3, #16]
 801033e:	4b52      	ldr	r3, [pc, #328]	; (8010488 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x290>)
 8010340:	9301      	str	r3, [sp, #4]
 8010342:	f240 33e9 	movw	r3, #1001	; 0x3e9
 8010346:	9300      	str	r3, [sp, #0]
 8010348:	4b50      	ldr	r3, [pc, #320]	; (801048c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x294>)
 801034a:	4a51      	ldr	r2, [pc, #324]	; (8010490 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x298>)
 801034c:	f7fa faf3 	bl	800a936 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 8010350:	2301      	movs	r3, #1
 8010352:	e093      	b.n	801047c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x284>
  memory_planner_->Init(planner_arena, remaining_arena_size);
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	68d8      	ldr	r0, [r3, #12]
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	68db      	ldr	r3, [r3, #12]
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	331c      	adds	r3, #28
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010364:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010366:	4798      	blx	r3
  TF_LITE_ENSURE_STATUS(CreatePlan(error_reporter_, memory_planner_,
 8010368:	68fb      	ldr	r3, [r7, #12]
 801036a:	6918      	ldr	r0, [r3, #16]
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	68d9      	ldr	r1, [r3, #12]
 8010370:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010372:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010374:	f7fe fff3 	bl	800f35e <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_18MicroMemoryPlannerEPKNS0_14AllocationInfoEj>
 8010378:	4603      	mov	r3, r0
 801037a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801037e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010382:	2b00      	cmp	r3, #0
 8010384:	d002      	beq.n	801038c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x194>
 8010386:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801038a:	e077      	b.n	801047c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x284>
                                   allocation_info, allocation_info_count));

  // Reset all temp allocations used above:
  memory_allocator_->ResetTempAllocations();
 801038c:	68fb      	ldr	r3, [r7, #12]
 801038e:	685a      	ldr	r2, [r3, #4]
 8010390:	68fb      	ldr	r3, [r7, #12]
 8010392:	685b      	ldr	r3, [r3, #4]
 8010394:	681b      	ldr	r3, [r3, #0]
 8010396:	3314      	adds	r3, #20
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	4610      	mov	r0, r2
 801039c:	4798      	blx	r3

  size_t actual_available_arena_size =
      memory_allocator_->GetAvailableMemory(kBufferAlignment);
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	685b      	ldr	r3, [r3, #4]
 80103a2:	2110      	movs	r1, #16
 80103a4:	4618      	mov	r0, r3
 80103a6:	f002 fc33 	bl	8012c10 <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEj>
 80103aa:	62b8      	str	r0, [r7, #40]	; 0x28

  // Make sure we have enough arena size.
  if (memory_planner_->GetMaximumMemorySize() > actual_available_arena_size) {
 80103ac:	68fb      	ldr	r3, [r7, #12]
 80103ae:	68da      	ldr	r2, [r3, #12]
 80103b0:	68fb      	ldr	r3, [r7, #12]
 80103b2:	68db      	ldr	r3, [r3, #12]
 80103b4:	681b      	ldr	r3, [r3, #0]
 80103b6:	3310      	adds	r3, #16
 80103b8:	681b      	ldr	r3, [r3, #0]
 80103ba:	4610      	mov	r0, r2
 80103bc:	4798      	blx	r3
 80103be:	4602      	mov	r2, r0
 80103c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103c2:	4293      	cmp	r3, r2
 80103c4:	bf34      	ite	cc
 80103c6:	2301      	movcc	r3, #1
 80103c8:	2300      	movcs	r3, #0
 80103ca:	b2db      	uxtb	r3, r3
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d012      	beq.n	80103f6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x1fe>
    TF_LITE_REPORT_ERROR(
 80103d0:	68fb      	ldr	r3, [r7, #12]
 80103d2:	691c      	ldr	r4, [r3, #16]
 80103d4:	68fb      	ldr	r3, [r7, #12]
 80103d6:	68da      	ldr	r2, [r3, #12]
 80103d8:	68fb      	ldr	r3, [r7, #12]
 80103da:	68db      	ldr	r3, [r3, #12]
 80103dc:	681b      	ldr	r3, [r3, #0]
 80103de:	3310      	adds	r3, #16
 80103e0:	681b      	ldr	r3, [r3, #0]
 80103e2:	4610      	mov	r0, r2
 80103e4:	4798      	blx	r3
 80103e6:	4602      	mov	r2, r0
 80103e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103ea:	492a      	ldr	r1, [pc, #168]	; (8010494 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x29c>)
 80103ec:	4620      	mov	r0, r4
 80103ee:	f7fa fa89 	bl	800a904 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Arena size is too small for all buffers. Needed %u but only "
        "%u was available.",
        memory_planner_->GetMaximumMemorySize(), actual_available_arena_size);
    return kTfLiteError;
 80103f2:	2301      	movs	r3, #1
 80103f4:	e042      	b.n	801047c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x284>
  }
  // Commit the plan.
  TF_LITE_ENSURE_STATUS(CommitPlan(error_reporter_, memory_planner_,
 80103f6:	68fb      	ldr	r3, [r7, #12]
 80103f8:	691c      	ldr	r4, [r3, #16]
 80103fa:	68fb      	ldr	r3, [r7, #12]
 80103fc:	68dd      	ldr	r5, [r3, #12]
 80103fe:	68fb      	ldr	r3, [r7, #12]
 8010400:	685b      	ldr	r3, [r3, #4]
 8010402:	4618      	mov	r0, r3
 8010404:	f002 fbf8 	bl	8012bf8 <_ZNK6tflite21SimpleMemoryAllocator13GetHeadBufferEv>
 8010408:	4602      	mov	r2, r0
 801040a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801040c:	9300      	str	r3, [sp, #0]
 801040e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010410:	4629      	mov	r1, r5
 8010412:	4620      	mov	r0, r4
 8010414:	f7ff f800 	bl	800f418 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_18MicroMemoryPlannerEPhPKNS0_14AllocationInfoEj>
 8010418:	4603      	mov	r3, r0
 801041a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801041e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010422:	2b00      	cmp	r3, #0
 8010424:	d002      	beq.n	801042c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x234>
 8010426:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801042a:	e027      	b.n	801047c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x284>
                                   memory_allocator_->GetHeadBuffer(),
                                   allocation_info, allocation_info_count));
#ifdef TF_LITE_SHOW_MEMORY_USE
  memory_planner_->PrintMemoryPlan();
#endif
  head_usage = memory_planner_->GetMaximumMemorySize();
 801042c:	68fb      	ldr	r3, [r7, #12]
 801042e:	68da      	ldr	r2, [r3, #12]
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	68db      	ldr	r3, [r3, #12]
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	3310      	adds	r3, #16
 8010438:	681b      	ldr	r3, [r3, #0]
 801043a:	4610      	mov	r0, r2
 801043c:	4798      	blx	r3
 801043e:	6578      	str	r0, [r7, #84]	; 0x54
  // The head is used to store memory plans for one model at a time during the
  // model preparation stage, and is re-purposed to store scratch buffer handles
  // during model invocation. The head must be as large as the greater of the
  // largest model memory plan's size and the total space required for all
  // scratch buffer handles.
  if (max_head_buffer_usage_ < head_usage) {
 8010440:	68fb      	ldr	r3, [r7, #12]
 8010442:	69db      	ldr	r3, [r3, #28]
 8010444:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010446:	429a      	cmp	r2, r3
 8010448:	d902      	bls.n	8010450 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x258>
    max_head_buffer_usage_ = head_usage;
 801044a:	68fb      	ldr	r3, [r7, #12]
 801044c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801044e:	61da      	str	r2, [r3, #28]
  }

  // The head is used for storing scratch buffer allocations before finalizing a
  // memory plan in this function. Ensure that the head is set to the largest
  // memory plan sent through the allocator:
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
 8010450:	68fb      	ldr	r3, [r7, #12]
 8010452:	6858      	ldr	r0, [r3, #4]
 8010454:	68fb      	ldr	r3, [r7, #12]
 8010456:	685b      	ldr	r3, [r3, #4]
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	3308      	adds	r3, #8
 801045c:	681b      	ldr	r3, [r3, #0]
 801045e:	68fa      	ldr	r2, [r7, #12]
 8010460:	69d1      	ldr	r1, [r2, #28]
 8010462:	2210      	movs	r2, #16
 8010464:	4798      	blx	r3
 8010466:	4603      	mov	r3, r0
 8010468:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801046c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010470:	2b00      	cmp	r3, #0
 8010472:	d002      	beq.n	801047a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x282>
 8010474:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010478:	e000      	b.n	801047c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x284>
      max_head_buffer_usage_, kBufferAlignment));
  return kTfLiteOk;
 801047a:	2300      	movs	r3, #0
}
 801047c:	4618      	mov	r0, r3
 801047e:	3758      	adds	r7, #88	; 0x58
 8010480:	46bd      	mov	sp, r7
 8010482:	bdb0      	pop	{r4, r5, r7, pc}
 8010484:	08029d0c 	.word	0x08029d0c
 8010488:	08029da4 	.word	0x08029da4
 801048c:	08029d50 	.word	0x08029d50
 8010490:	08029d8c 	.word	0x08029d8c
 8010494:	08029dc0 	.word	0x08029dc0

08010498 <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj>:

TfLiteStatus MicroAllocator::AllocateScratchBufferHandles(
    ScratchBufferHandle** scratch_buffer_handles, size_t handle_count) {
 8010498:	b580      	push	{r7, lr}
 801049a:	b084      	sub	sp, #16
 801049c:	af00      	add	r7, sp, #0
 801049e:	60f8      	str	r0, [r7, #12]
 80104a0:	60b9      	str	r1, [r7, #8]
 80104a2:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(scratch_buffer_handles != nullptr);
 80104a4:	68bb      	ldr	r3, [r7, #8]
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d101      	bne.n	80104ae <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj+0x16>
 80104aa:	f016 fc28 	bl	8026cfe <abort>

  if (scratch_buffer_request_count_ == 0) {
 80104ae:	68fb      	ldr	r3, [r7, #12]
 80104b0:	699b      	ldr	r3, [r3, #24]
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d101      	bne.n	80104ba <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj+0x22>
    // No scratch buffer requests were requested during model allocation.
    return kTfLiteOk;
 80104b6:	2300      	movs	r3, #0
 80104b8:	e00e      	b.n	80104d8 <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj+0x40>
  }

  // Allocate a consecutive block of memory store the scratch buffer handles.
  // This alignment ensures quick lookup during inference time for the model:
  *scratch_buffer_handles = reinterpret_cast<ScratchBufferHandle*>(
      memory_allocator_->AllocateFromTail(
 80104ba:	68fb      	ldr	r3, [r7, #12]
 80104bc:	6858      	ldr	r0, [r3, #4]
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	685b      	ldr	r3, [r3, #4]
          sizeof(ScratchBufferHandle) * handle_count,
          alignof(ScratchBufferHandle)));
 80104c2:	681b      	ldr	r3, [r3, #0]
 80104c4:	330c      	adds	r3, #12
 80104c6:	681b      	ldr	r3, [r3, #0]
      memory_allocator_->AllocateFromTail(
 80104c8:	687a      	ldr	r2, [r7, #4]
 80104ca:	0091      	lsls	r1, r2, #2
 80104cc:	2204      	movs	r2, #4
 80104ce:	4798      	blx	r3
 80104d0:	4602      	mov	r2, r0
  *scratch_buffer_handles = reinterpret_cast<ScratchBufferHandle*>(
 80104d2:	68bb      	ldr	r3, [r7, #8]
 80104d4:	601a      	str	r2, [r3, #0]

  return kTfLiteOk;
 80104d6:	2300      	movs	r3, #0
}
 80104d8:	4618      	mov	r0, r3
 80104da:	3710      	adds	r7, #16
 80104dc:	46bd      	mov	sp, r7
 80104de:	bd80      	pop	{r7, pc}

080104e0 <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv>:

TfLiteStatus MicroAllocator::InitScratchBufferData() {
 80104e0:	b580      	push	{r7, lr}
 80104e2:	b084      	sub	sp, #16
 80104e4:	af00      	add	r7, sp, #0
 80104e6:	6078      	str	r0, [r7, #4]
  // A model is preparing to allocate resources, ensure that scratch buffer
  // request counter is cleared:
  scratch_buffer_request_count_ = 0;
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	2200      	movs	r2, #0
 80104ec:	619a      	str	r2, [r3, #24]

  // All requests will be stored in the head section. Each kernel is allowed at
  // most kMaxScratchBuffersPerOp requests. Adjust the head to reserve at most
  // that many requests to begin:
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	6858      	ldr	r0, [r3, #4]
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	685b      	ldr	r3, [r3, #4]
 80104f6:	681b      	ldr	r3, [r3, #0]
 80104f8:	3308      	adds	r3, #8
 80104fa:	681b      	ldr	r3, [r3, #0]
 80104fc:	2204      	movs	r2, #4
 80104fe:	2160      	movs	r1, #96	; 0x60
 8010500:	4798      	blx	r3
 8010502:	4603      	mov	r3, r0
 8010504:	73fb      	strb	r3, [r7, #15]
 8010506:	7bfb      	ldrb	r3, [r7, #15]
 8010508:	2b00      	cmp	r3, #0
 801050a:	d001      	beq.n	8010510 <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv+0x30>
 801050c:	7bfb      	ldrb	r3, [r7, #15]
 801050e:	e000      	b.n	8010512 <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv+0x32>
      sizeof(internal::ScratchBufferRequest) * kMaxScratchBuffersPerOp,
      alignof(internal::ScratchBufferRequest)));

  return kTfLiteOk;
 8010510:	2300      	movs	r3, #0
}
 8010512:	4618      	mov	r0, r3
 8010514:	3710      	adds	r7, #16
 8010516:	46bd      	mov	sp, r7
 8010518:	bd80      	pop	{r7, pc}

0801051a <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>:

internal::ScratchBufferRequest* MicroAllocator::GetScratchBufferRequests() {
 801051a:	b580      	push	{r7, lr}
 801051c:	b082      	sub	sp, #8
 801051e:	af00      	add	r7, sp, #0
 8010520:	6078      	str	r0, [r7, #4]
  return reinterpret_cast<internal::ScratchBufferRequest*>(
      AlignPointerUp(memory_allocator_->GetHeadBuffer(),
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	685b      	ldr	r3, [r3, #4]
 8010526:	4618      	mov	r0, r3
 8010528:	f002 fb66 	bl	8012bf8 <_ZNK6tflite21SimpleMemoryAllocator13GetHeadBufferEv>
 801052c:	4603      	mov	r3, r0
 801052e:	2104      	movs	r1, #4
 8010530:	4618      	mov	r0, r3
 8010532:	f7fe fa27 	bl	800e984 <_ZN6tflite14AlignPointerUpEPhj>
 8010536:	4603      	mov	r3, r0
                     alignof(internal::ScratchBufferRequest)));
}
 8010538:	4618      	mov	r0, r3
 801053a:	3708      	adds	r7, #8
 801053c:	46bd      	mov	sp, r7
 801053e:	bd80      	pop	{r7, pc}

08010540 <_ZN6tflite14MicroAllocator33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIlEEPP14TfLiteIntArray>:

TfLiteStatus MicroAllocator::FlatBufferVectorToTfLiteTypeArray(
    const flatbuffers::Vector<int32_t>* flatbuffer_array,
    TfLiteIntArray** result) {
 8010540:	b580      	push	{r7, lr}
 8010542:	b084      	sub	sp, #16
 8010544:	af00      	add	r7, sp, #0
 8010546:	60f8      	str	r0, [r7, #12]
 8010548:	60b9      	str	r1, [r7, #8]
 801054a:	607a      	str	r2, [r7, #4]
  return internal::FlatBufferVectorToTfLiteTypeArray(
 801054c:	68fb      	ldr	r3, [r7, #12]
 801054e:	6858      	ldr	r0, [r3, #4]
 8010550:	68fb      	ldr	r3, [r7, #12]
 8010552:	6919      	ldr	r1, [r3, #16]
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	68ba      	ldr	r2, [r7, #8]
 8010558:	f000 fa04 	bl	8010964 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
 801055c:	4603      	mov	r3, r0
      memory_allocator_, error_reporter_, flatbuffer_array, result);
}
 801055e:	4618      	mov	r0, r3
 8010560:	3710      	adds	r7, #16
 8010562:	46bd      	mov	sp, r7
 8010564:	bd80      	pop	{r7, pc}

08010566 <_ZN6tflite14MicroAllocator23GetBuiltinDataAllocatorEv>:

BuiltinDataAllocator* MicroAllocator::GetBuiltinDataAllocator() {
 8010566:	b480      	push	{r7}
 8010568:	b083      	sub	sp, #12
 801056a:	af00      	add	r7, sp, #0
 801056c:	6078      	str	r0, [r7, #4]
  return builtin_data_allocator_;
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	689b      	ldr	r3, [r3, #8]
}
 8010572:	4618      	mov	r0, r3
 8010574:	370c      	adds	r7, #12
 8010576:	46bd      	mov	sp, r7
 8010578:	f85d 7b04 	ldr.w	r7, [sp], #4
 801057c:	4770      	bx	lr

0801057e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 801057e:	b580      	push	{r7, lr}
 8010580:	b082      	sub	sp, #8
 8010582:	af00      	add	r7, sp, #0
 8010584:	6078      	str	r0, [r7, #4]
 8010586:	460b      	mov	r3, r1
 8010588:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 801058a:	887b      	ldrh	r3, [r7, #2]
 801058c:	4619      	mov	r1, r3
 801058e:	6878      	ldr	r0, [r7, #4]
 8010590:	f000 fa1a 	bl	80109c8 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>
 8010594:	4603      	mov	r3, r0
  }
 8010596:	4618      	mov	r0, r3
 8010598:	3708      	adds	r7, #8
 801059a:	46bd      	mov	sp, r7
 801059c:	bd80      	pop	{r7, pc}

0801059e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 801059e:	b580      	push	{r7, lr}
 80105a0:	b082      	sub	sp, #8
 80105a2:	af00      	add	r7, sp, #0
 80105a4:	6078      	str	r0, [r7, #4]
 80105a6:	460b      	mov	r3, r1
 80105a8:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 80105aa:	887b      	ldrh	r3, [r7, #2]
 80105ac:	4619      	mov	r1, r3
 80105ae:	6878      	ldr	r0, [r7, #4]
 80105b0:	f000 fa2a 	bl	8010a08 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t>
 80105b4:	4603      	mov	r3, r0
  }
 80105b6:	4618      	mov	r0, r3
 80105b8:	3708      	adds	r7, #8
 80105ba:	46bd      	mov	sp, r7
 80105bc:	bd80      	pop	{r7, pc}

080105be <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 80105be:	b580      	push	{r7, lr}
 80105c0:	b082      	sub	sp, #8
 80105c2:	af00      	add	r7, sp, #0
 80105c4:	6078      	str	r0, [r7, #4]
 80105c6:	460b      	mov	r3, r1
 80105c8:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 80105ca:	887b      	ldrh	r3, [r7, #2]
 80105cc:	4619      	mov	r1, r3
 80105ce:	6878      	ldr	r0, [r7, #4]
 80105d0:	f000 fa3a 	bl	8010a48 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t>
 80105d4:	4603      	mov	r3, r0
  }
 80105d6:	4618      	mov	r0, r3
 80105d8:	3708      	adds	r7, #8
 80105da:	46bd      	mov	sp, r7
 80105dc:	bd80      	pop	{r7, pc}

080105de <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 80105de:	b580      	push	{r7, lr}
 80105e0:	b086      	sub	sp, #24
 80105e2:	af00      	add	r7, sp, #0
 80105e4:	60f8      	str	r0, [r7, #12]
 80105e6:	460b      	mov	r3, r1
 80105e8:	607a      	str	r2, [r7, #4]
 80105ea:	817b      	strh	r3, [r7, #10]
    auto field_offset = GetOptionalFieldOffset(field);
 80105ec:	897b      	ldrh	r3, [r7, #10]
 80105ee:	4619      	mov	r1, r3
 80105f0:	68f8      	ldr	r0, [r7, #12]
 80105f2:	f7fa f9e3 	bl	800a9bc <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 80105f6:	4603      	mov	r3, r0
 80105f8:	82fb      	strh	r3, [r7, #22]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 80105fa:	8afb      	ldrh	r3, [r7, #22]
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d007      	beq.n	8010610 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_+0x32>
 8010600:	68fa      	ldr	r2, [r7, #12]
 8010602:	8afb      	ldrh	r3, [r7, #22]
 8010604:	4413      	add	r3, r2
 8010606:	4618      	mov	r0, r3
 8010608:	f7fb f80f 	bl	800b62a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 801060c:	4603      	mov	r3, r0
 801060e:	e000      	b.n	8010612 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_+0x34>
 8010610:	687b      	ldr	r3, [r7, #4]
  }
 8010612:	4618      	mov	r0, r3
 8010614:	3718      	adds	r7, #24
 8010616:	46bd      	mov	sp, r7
 8010618:	bd80      	pop	{r7, pc}

0801061a <_ZNK11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 801061a:	b580      	push	{r7, lr}
 801061c:	b082      	sub	sp, #8
 801061e:	af00      	add	r7, sp, #0
 8010620:	6078      	str	r0, [r7, #4]
 8010622:	460b      	mov	r3, r1
 8010624:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8010626:	887b      	ldrh	r3, [r7, #2]
 8010628:	4619      	mov	r1, r3
 801062a:	6878      	ldr	r0, [r7, #4]
 801062c:	f000 fa2c 	bl	8010a88 <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t>
 8010630:	4603      	mov	r3, r0
  }
 8010632:	4618      	mov	r0, r3
 8010634:	3708      	adds	r7, #8
 8010636:	46bd      	mov	sp, r7
 8010638:	bd80      	pop	{r7, pc}

0801063a <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 801063a:	b580      	push	{r7, lr}
 801063c:	b082      	sub	sp, #8
 801063e:	af00      	add	r7, sp, #0
 8010640:	6078      	str	r0, [r7, #4]
 8010642:	460b      	mov	r3, r1
 8010644:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8010646:	887b      	ldrh	r3, [r7, #2]
 8010648:	4619      	mov	r1, r3
 801064a:	6878      	ldr	r0, [r7, #4]
 801064c:	f000 fa3c 	bl	8010ac8 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>
 8010650:	4603      	mov	r3, r0
  }
 8010652:	4618      	mov	r0, r3
 8010654:	3708      	adds	r7, #8
 8010656:	46bd      	mov	sp, r7
 8010658:	bd80      	pop	{r7, pc}

0801065a <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 801065a:	b580      	push	{r7, lr}
 801065c:	b082      	sub	sp, #8
 801065e:	af00      	add	r7, sp, #0
 8010660:	6078      	str	r0, [r7, #4]
 8010662:	460b      	mov	r3, r1
 8010664:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8010666:	887b      	ldrh	r3, [r7, #2]
 8010668:	4619      	mov	r1, r3
 801066a:	6878      	ldr	r0, [r7, #4]
 801066c:	f000 fa4c 	bl	8010b08 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>
 8010670:	4603      	mov	r3, r0
  }
 8010672:	4618      	mov	r0, r3
 8010674:	3708      	adds	r7, #8
 8010676:	46bd      	mov	sp, r7
 8010678:	bd80      	pop	{r7, pc}

0801067a <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 801067a:	b580      	push	{r7, lr}
 801067c:	b082      	sub	sp, #8
 801067e:	af00      	add	r7, sp, #0
 8010680:	6078      	str	r0, [r7, #4]
 8010682:	460b      	mov	r3, r1
 8010684:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8010686:	887b      	ldrh	r3, [r7, #2]
 8010688:	4619      	mov	r1, r3
 801068a:	6878      	ldr	r0, [r7, #4]
 801068c:	f000 fa5c 	bl	8010b48 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t>
 8010690:	4603      	mov	r3, r0
  }
 8010692:	4618      	mov	r0, r3
 8010694:	3708      	adds	r7, #8
 8010696:	46bd      	mov	sp, r7
 8010698:	bd80      	pop	{r7, pc}

0801069a <_ZNK11flatbuffers6VectorIhE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 801069a:	b580      	push	{r7, lr}
 801069c:	b082      	sub	sp, #8
 801069e:	af00      	add	r7, sp, #0
 80106a0:	6078      	str	r0, [r7, #4]
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	4618      	mov	r0, r3
 80106a8:	f7fa ff9a 	bl	800b5e0 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 80106ac:	4603      	mov	r3, r0
 80106ae:	4618      	mov	r0, r3
 80106b0:	3708      	adds	r7, #8
 80106b2:	46bd      	mov	sp, r7
 80106b4:	bd80      	pop	{r7, pc}

080106b6 <_ZNK11flatbuffers6VectorIfE4sizeEv>:
 80106b6:	b580      	push	{r7, lr}
 80106b8:	b082      	sub	sp, #8
 80106ba:	af00      	add	r7, sp, #0
 80106bc:	6078      	str	r0, [r7, #4]
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	681b      	ldr	r3, [r3, #0]
 80106c2:	4618      	mov	r0, r3
 80106c4:	f7fa ff8c 	bl	800b5e0 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 80106c8:	4603      	mov	r3, r0
 80106ca:	4618      	mov	r0, r3
 80106cc:	3708      	adds	r7, #8
 80106ce:	46bd      	mov	sp, r7
 80106d0:	bd80      	pop	{r7, pc}
	...

080106d4 <_ZNK11flatbuffers6VectorIfE3GetEm>:
  return_type Get(uoffset_t i) const {
 80106d4:	b580      	push	{r7, lr}
 80106d6:	b082      	sub	sp, #8
 80106d8:	af00      	add	r7, sp, #0
 80106da:	6078      	str	r0, [r7, #4]
 80106dc:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 80106de:	6878      	ldr	r0, [r7, #4]
 80106e0:	f7ff ffe9 	bl	80106b6 <_ZNK11flatbuffers6VectorIfE4sizeEv>
 80106e4:	4602      	mov	r2, r0
 80106e6:	683b      	ldr	r3, [r7, #0]
 80106e8:	4293      	cmp	r3, r2
 80106ea:	d306      	bcc.n	80106fa <_ZNK11flatbuffers6VectorIfE3GetEm+0x26>
 80106ec:	4b0a      	ldr	r3, [pc, #40]	; (8010718 <_ZNK11flatbuffers6VectorIfE3GetEm+0x44>)
 80106ee:	4a0b      	ldr	r2, [pc, #44]	; (801071c <_ZNK11flatbuffers6VectorIfE3GetEm+0x48>)
 80106f0:	f44f 7183 	mov.w	r1, #262	; 0x106
 80106f4:	480a      	ldr	r0, [pc, #40]	; (8010720 <_ZNK11flatbuffers6VectorIfE3GetEm+0x4c>)
 80106f6:	f016 fb09 	bl	8026d0c <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 80106fa:	6878      	ldr	r0, [r7, #4]
 80106fc:	f000 fa66 	bl	8010bcc <_ZNK11flatbuffers6VectorIfE4DataEv>
 8010700:	4603      	mov	r3, r0
 8010702:	6839      	ldr	r1, [r7, #0]
 8010704:	4618      	mov	r0, r3
 8010706:	f000 fa4b 	bl	8010ba0 <_ZN11flatbuffers14IndirectHelperIfE4ReadEPKhm>
 801070a:	eef0 7a40 	vmov.f32	s15, s0
  }
 801070e:	eeb0 0a67 	vmov.f32	s0, s15
 8010712:	3708      	adds	r7, #8
 8010714:	46bd      	mov	sp, r7
 8010716:	bd80      	pop	{r7, pc}
 8010718:	08029e10 	.word	0x08029e10
 801071c:	08029e1c 	.word	0x08029e1c
 8010720:	08029ee4 	.word	0x08029ee4

08010724 <_ZNK11flatbuffers6VectorIxE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8010724:	b580      	push	{r7, lr}
 8010726:	b082      	sub	sp, #8
 8010728:	af00      	add	r7, sp, #0
 801072a:	6078      	str	r0, [r7, #4]
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	4618      	mov	r0, r3
 8010732:	f7fa ff55 	bl	800b5e0 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8010736:	4603      	mov	r3, r0
 8010738:	4618      	mov	r0, r3
 801073a:	3708      	adds	r7, #8
 801073c:	46bd      	mov	sp, r7
 801073e:	bd80      	pop	{r7, pc}

08010740 <_ZNK11flatbuffers6VectorIxE3GetEm>:
  return_type Get(uoffset_t i) const {
 8010740:	b580      	push	{r7, lr}
 8010742:	b082      	sub	sp, #8
 8010744:	af00      	add	r7, sp, #0
 8010746:	6078      	str	r0, [r7, #4]
 8010748:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 801074a:	6878      	ldr	r0, [r7, #4]
 801074c:	f7ff ffea 	bl	8010724 <_ZNK11flatbuffers6VectorIxE4sizeEv>
 8010750:	4602      	mov	r2, r0
 8010752:	683b      	ldr	r3, [r7, #0]
 8010754:	4293      	cmp	r3, r2
 8010756:	d306      	bcc.n	8010766 <_ZNK11flatbuffers6VectorIxE3GetEm+0x26>
 8010758:	4b0a      	ldr	r3, [pc, #40]	; (8010784 <_ZNK11flatbuffers6VectorIxE3GetEm+0x44>)
 801075a:	4a0b      	ldr	r2, [pc, #44]	; (8010788 <_ZNK11flatbuffers6VectorIxE3GetEm+0x48>)
 801075c:	f44f 7183 	mov.w	r1, #262	; 0x106
 8010760:	480a      	ldr	r0, [pc, #40]	; (801078c <_ZNK11flatbuffers6VectorIxE3GetEm+0x4c>)
 8010762:	f016 fad3 	bl	8026d0c <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8010766:	6878      	ldr	r0, [r7, #4]
 8010768:	f000 fa52 	bl	8010c10 <_ZNK11flatbuffers6VectorIxE4DataEv>
 801076c:	4603      	mov	r3, r0
 801076e:	6839      	ldr	r1, [r7, #0]
 8010770:	4618      	mov	r0, r3
 8010772:	f000 fa37 	bl	8010be4 <_ZN11flatbuffers14IndirectHelperIxE4ReadEPKhm>
 8010776:	4602      	mov	r2, r0
 8010778:	460b      	mov	r3, r1
  }
 801077a:	4610      	mov	r0, r2
 801077c:	4619      	mov	r1, r3
 801077e:	3708      	adds	r7, #8
 8010780:	46bd      	mov	sp, r7
 8010782:	bd80      	pop	{r7, pc}
 8010784:	08029e10 	.word	0x08029e10
 8010788:	08029f68 	.word	0x08029f68
 801078c:	08029ee4 	.word	0x08029ee4

08010790 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8010790:	b580      	push	{r7, lr}
 8010792:	b082      	sub	sp, #8
 8010794:	af00      	add	r7, sp, #0
 8010796:	6078      	str	r0, [r7, #4]
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	681b      	ldr	r3, [r3, #0]
 801079c:	4618      	mov	r0, r3
 801079e:	f7fa ff1f 	bl	800b5e0 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 80107a2:	4603      	mov	r3, r0
 80107a4:	4618      	mov	r0, r3
 80107a6:	3708      	adds	r7, #8
 80107a8:	46bd      	mov	sp, r7
 80107aa:	bd80      	pop	{r7, pc}

080107ac <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 80107ac:	b580      	push	{r7, lr}
 80107ae:	b082      	sub	sp, #8
 80107b0:	af00      	add	r7, sp, #0
 80107b2:	6078      	str	r0, [r7, #4]
 80107b4:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 80107b6:	6878      	ldr	r0, [r7, #4]
 80107b8:	f7ff ffea 	bl	8010790 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 80107bc:	4602      	mov	r2, r0
 80107be:	683b      	ldr	r3, [r7, #0]
 80107c0:	4293      	cmp	r3, r2
 80107c2:	d306      	bcc.n	80107d2 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x26>
 80107c4:	4b09      	ldr	r3, [pc, #36]	; (80107ec <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x40>)
 80107c6:	4a0a      	ldr	r2, [pc, #40]	; (80107f0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x44>)
 80107c8:	f44f 7183 	mov.w	r1, #262	; 0x106
 80107cc:	4809      	ldr	r0, [pc, #36]	; (80107f4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x48>)
 80107ce:	f016 fa9d 	bl	8026d0c <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 80107d2:	6878      	ldr	r0, [r7, #4]
 80107d4:	f000 fa3c 	bl	8010c50 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4DataEv>
 80107d8:	4603      	mov	r3, r0
 80107da:	6839      	ldr	r1, [r7, #0]
 80107dc:	4618      	mov	r0, r3
 80107de:	f000 fa23 	bl	8010c28 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6TensorEEEE4ReadEPKhm>
 80107e2:	4603      	mov	r3, r0
  }
 80107e4:	4618      	mov	r0, r3
 80107e6:	3708      	adds	r7, #8
 80107e8:	46bd      	mov	sp, r7
 80107ea:	bd80      	pop	{r7, pc}
 80107ec:	08029e10 	.word	0x08029e10
 80107f0:	0802a110 	.word	0x0802a110
 80107f4:	08029ee4 	.word	0x08029ee4

080107f8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 80107f8:	b580      	push	{r7, lr}
 80107fa:	b082      	sub	sp, #8
 80107fc:	af00      	add	r7, sp, #0
 80107fe:	6078      	str	r0, [r7, #4]
 8010800:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 8010802:	6878      	ldr	r0, [r7, #4]
 8010804:	f7fd ff76 	bl	800e6f4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 8010808:	4602      	mov	r2, r0
 801080a:	683b      	ldr	r3, [r7, #0]
 801080c:	4293      	cmp	r3, r2
 801080e:	d306      	bcc.n	801081e <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x26>
 8010810:	4b09      	ldr	r3, [pc, #36]	; (8010838 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x40>)
 8010812:	4a0a      	ldr	r2, [pc, #40]	; (801083c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x44>)
 8010814:	f44f 7183 	mov.w	r1, #262	; 0x106
 8010818:	4809      	ldr	r0, [pc, #36]	; (8010840 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x48>)
 801081a:	f016 fa77 	bl	8026d0c <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 801081e:	6878      	ldr	r0, [r7, #4]
 8010820:	f000 fa36 	bl	8010c90 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4DataEv>
 8010824:	4603      	mov	r3, r0
 8010826:	6839      	ldr	r1, [r7, #0]
 8010828:	4618      	mov	r0, r3
 801082a:	f000 fa1d 	bl	8010c68 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8OperatorEEEE4ReadEPKhm>
 801082e:	4603      	mov	r3, r0
  }
 8010830:	4618      	mov	r0, r3
 8010832:	3708      	adds	r7, #8
 8010834:	46bd      	mov	sp, r7
 8010836:	bd80      	pop	{r7, pc}
 8010838:	08029e10 	.word	0x08029e10
 801083c:	0802a208 	.word	0x0802a208
 8010840:	08029ee4 	.word	0x08029ee4

08010844 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8010844:	b580      	push	{r7, lr}
 8010846:	b082      	sub	sp, #8
 8010848:	af00      	add	r7, sp, #0
 801084a:	6078      	str	r0, [r7, #4]
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	4618      	mov	r0, r3
 8010852:	f7fa fec5 	bl	800b5e0 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8010856:	4603      	mov	r3, r0
 8010858:	4618      	mov	r0, r3
 801085a:	3708      	adds	r7, #8
 801085c:	46bd      	mov	sp, r7
 801085e:	bd80      	pop	{r7, pc}

08010860 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 8010860:	b580      	push	{r7, lr}
 8010862:	b082      	sub	sp, #8
 8010864:	af00      	add	r7, sp, #0
 8010866:	6078      	str	r0, [r7, #4]
 8010868:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 801086a:	6878      	ldr	r0, [r7, #4]
 801086c:	f7ff ffea 	bl	8010844 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE4sizeEv>
 8010870:	4602      	mov	r2, r0
 8010872:	683b      	ldr	r3, [r7, #0]
 8010874:	4293      	cmp	r3, r2
 8010876:	d306      	bcc.n	8010886 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm+0x26>
 8010878:	4b09      	ldr	r3, [pc, #36]	; (80108a0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm+0x40>)
 801087a:	4a0a      	ldr	r2, [pc, #40]	; (80108a4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm+0x44>)
 801087c:	f44f 7183 	mov.w	r1, #262	; 0x106
 8010880:	4809      	ldr	r0, [pc, #36]	; (80108a8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm+0x48>)
 8010882:	f016 fa43 	bl	8026d0c <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8010886:	6878      	ldr	r0, [r7, #4]
 8010888:	f000 fa22 	bl	8010cd0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE4DataEv>
 801088c:	4603      	mov	r3, r0
 801088e:	6839      	ldr	r1, [r7, #0]
 8010890:	4618      	mov	r0, r3
 8010892:	f000 fa09 	bl	8010ca8 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6BufferEEEE4ReadEPKhm>
 8010896:	4603      	mov	r3, r0
  }
 8010898:	4618      	mov	r0, r3
 801089a:	3708      	adds	r7, #8
 801089c:	46bd      	mov	sp, r7
 801089e:	bd80      	pop	{r7, pc}
 80108a0:	08029e10 	.word	0x08029e10
 80108a4:	0802a400 	.word	0x0802a400
 80108a8:	08029ee4 	.word	0x08029ee4

080108ac <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 80108ac:	b580      	push	{r7, lr}
 80108ae:	b082      	sub	sp, #8
 80108b0:	af00      	add	r7, sp, #0
 80108b2:	6078      	str	r0, [r7, #4]
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	681b      	ldr	r3, [r3, #0]
 80108b8:	4618      	mov	r0, r3
 80108ba:	f7fa fe91 	bl	800b5e0 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 80108be:	4603      	mov	r3, r0
 80108c0:	4618      	mov	r0, r3
 80108c2:	3708      	adds	r7, #8
 80108c4:	46bd      	mov	sp, r7
 80108c6:	bd80      	pop	{r7, pc}

080108c8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 80108c8:	b580      	push	{r7, lr}
 80108ca:	b082      	sub	sp, #8
 80108cc:	af00      	add	r7, sp, #0
 80108ce:	6078      	str	r0, [r7, #4]
 80108d0:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 80108d2:	6878      	ldr	r0, [r7, #4]
 80108d4:	f7ff ffea 	bl	80108ac <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4sizeEv>
 80108d8:	4602      	mov	r2, r0
 80108da:	683b      	ldr	r3, [r7, #0]
 80108dc:	4293      	cmp	r3, r2
 80108de:	d306      	bcc.n	80108ee <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm+0x26>
 80108e0:	4b09      	ldr	r3, [pc, #36]	; (8010908 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm+0x40>)
 80108e2:	4a0a      	ldr	r2, [pc, #40]	; (801090c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm+0x44>)
 80108e4:	f44f 7183 	mov.w	r1, #262	; 0x106
 80108e8:	4809      	ldr	r0, [pc, #36]	; (8010910 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm+0x48>)
 80108ea:	f016 fa0f 	bl	8026d0c <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 80108ee:	6878      	ldr	r0, [r7, #4]
 80108f0:	f000 fa0e 	bl	8010d10 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4DataEv>
 80108f4:	4603      	mov	r3, r0
 80108f6:	6839      	ldr	r1, [r7, #0]
 80108f8:	4618      	mov	r0, r3
 80108fa:	f000 f9f5 	bl	8010ce8 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8MetadataEEEE4ReadEPKhm>
 80108fe:	4603      	mov	r3, r0
  }
 8010900:	4618      	mov	r0, r3
 8010902:	3708      	adds	r7, #8
 8010904:	46bd      	mov	sp, r7
 8010906:	bd80      	pop	{r7, pc}
 8010908:	08029e10 	.word	0x08029e10
 801090c:	0802a4f8 	.word	0x0802a4f8
 8010910:	08029ee4 	.word	0x08029ee4

08010914 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEEixEm>:
  return_type operator[](uoffset_t i) const { return Get(i); }
 8010914:	b580      	push	{r7, lr}
 8010916:	b082      	sub	sp, #8
 8010918:	af00      	add	r7, sp, #0
 801091a:	6078      	str	r0, [r7, #4]
 801091c:	6039      	str	r1, [r7, #0]
 801091e:	6839      	ldr	r1, [r7, #0]
 8010920:	6878      	ldr	r0, [r7, #4]
 8010922:	f7fd ff03 	bl	800e72c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 8010926:	4603      	mov	r3, r0
 8010928:	4618      	mov	r0, r3
 801092a:	3708      	adds	r7, #8
 801092c:	46bd      	mov	sp, r7
 801092e:	bd80      	pop	{r7, pc}

08010930 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEEixEm>:
 8010930:	b580      	push	{r7, lr}
 8010932:	b082      	sub	sp, #8
 8010934:	af00      	add	r7, sp, #0
 8010936:	6078      	str	r0, [r7, #4]
 8010938:	6039      	str	r1, [r7, #0]
 801093a:	6839      	ldr	r1, [r7, #0]
 801093c:	6878      	ldr	r0, [r7, #4]
 801093e:	f7ff ff8f 	bl	8010860 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm>
 8010942:	4603      	mov	r3, r0
 8010944:	4618      	mov	r0, r3
 8010946:	3708      	adds	r7, #8
 8010948:	46bd      	mov	sp, r7
 801094a:	bd80      	pop	{r7, pc}

0801094c <_ZNK11flatbuffers6VectorIhE4dataEv>:
  const T *data() const { return reinterpret_cast<const T *>(Data()); }
 801094c:	b580      	push	{r7, lr}
 801094e:	b082      	sub	sp, #8
 8010950:	af00      	add	r7, sp, #0
 8010952:	6078      	str	r0, [r7, #4]
 8010954:	6878      	ldr	r0, [r7, #4]
 8010956:	f000 f917 	bl	8010b88 <_ZNK11flatbuffers6VectorIhE4DataEv>
 801095a:	4603      	mov	r3, r0
 801095c:	4618      	mov	r0, r3
 801095e:	3708      	adds	r7, #8
 8010960:	46bd      	mov	sp, r7
 8010962:	bd80      	pop	{r7, pc}

08010964 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>:
TfLiteStatus FlatBufferVectorToTfLiteTypeArray(
 8010964:	b580      	push	{r7, lr}
 8010966:	b084      	sub	sp, #16
 8010968:	af00      	add	r7, sp, #0
 801096a:	60f8      	str	r0, [r7, #12]
 801096c:	60b9      	str	r1, [r7, #8]
 801096e:	607a      	str	r2, [r7, #4]
 8010970:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(error_reporter != nullptr);
 8010972:	68bb      	ldr	r3, [r7, #8]
 8010974:	2b00      	cmp	r3, #0
 8010976:	d101      	bne.n	801097c <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x18>
 8010978:	f016 f9c1 	bl	8026cfe <abort>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	2b00      	cmp	r3, #0
 8010980:	d101      	bne.n	8010986 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x22>
 8010982:	f016 f9bc 	bl	8026cfe <abort>
    *result = const_cast<kTfLiteArrayType*>(
 8010986:	683b      	ldr	r3, [r7, #0]
 8010988:	687a      	ldr	r2, [r7, #4]
 801098a:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 801098c:	2300      	movs	r3, #0
}
 801098e:	4618      	mov	r0, r3
 8010990:	3710      	adds	r7, #16
 8010992:	46bd      	mov	sp, r7
 8010994:	bd80      	pop	{r7, pc}

08010996 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>:
TfLiteStatus FlatBufferVectorToTfLiteTypeArray(
 8010996:	b580      	push	{r7, lr}
 8010998:	b084      	sub	sp, #16
 801099a:	af00      	add	r7, sp, #0
 801099c:	60f8      	str	r0, [r7, #12]
 801099e:	60b9      	str	r1, [r7, #8]
 80109a0:	607a      	str	r2, [r7, #4]
 80109a2:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(error_reporter != nullptr);
 80109a4:	68bb      	ldr	r3, [r7, #8]
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	d101      	bne.n	80109ae <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x18>
 80109aa:	f016 f9a8 	bl	8026cfe <abort>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d101      	bne.n	80109b8 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x22>
 80109b4:	f016 f9a3 	bl	8026cfe <abort>
    *result = const_cast<kTfLiteArrayType*>(
 80109b8:	683b      	ldr	r3, [r7, #0]
 80109ba:	687a      	ldr	r2, [r7, #4]
 80109bc:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 80109be:	2300      	movs	r3, #0
}
 80109c0:	4618      	mov	r0, r3
 80109c2:	3710      	adds	r7, #16
 80109c4:	46bd      	mov	sp, r7
 80109c6:	bd80      	pop	{r7, pc}

080109c8 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 80109c8:	b580      	push	{r7, lr}
 80109ca:	b084      	sub	sp, #16
 80109cc:	af00      	add	r7, sp, #0
 80109ce:	6078      	str	r0, [r7, #4]
 80109d0:	460b      	mov	r3, r1
 80109d2:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 80109d4:	887b      	ldrh	r3, [r7, #2]
 80109d6:	4619      	mov	r1, r3
 80109d8:	6878      	ldr	r0, [r7, #4]
 80109da:	f7f9 ffef 	bl	800a9bc <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 80109de:	4603      	mov	r3, r0
 80109e0:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 80109e2:	687a      	ldr	r2, [r7, #4]
 80109e4:	89fb      	ldrh	r3, [r7, #14]
 80109e6:	4413      	add	r3, r2
 80109e8:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80109ea:	89fb      	ldrh	r3, [r7, #14]
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d006      	beq.n	80109fe <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t+0x36>
 80109f0:	68b8      	ldr	r0, [r7, #8]
 80109f2:	f7fa fe1a 	bl	800b62a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 80109f6:	4602      	mov	r2, r0
 80109f8:	68bb      	ldr	r3, [r7, #8]
 80109fa:	4413      	add	r3, r2
                        : nullptr;
 80109fc:	e000      	b.n	8010a00 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80109fe:	2300      	movs	r3, #0
  }
 8010a00:	4618      	mov	r0, r3
 8010a02:	3710      	adds	r7, #16
 8010a04:	46bd      	mov	sp, r7
 8010a06:	bd80      	pop	{r7, pc}

08010a08 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8010a08:	b580      	push	{r7, lr}
 8010a0a:	b084      	sub	sp, #16
 8010a0c:	af00      	add	r7, sp, #0
 8010a0e:	6078      	str	r0, [r7, #4]
 8010a10:	460b      	mov	r3, r1
 8010a12:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8010a14:	887b      	ldrh	r3, [r7, #2]
 8010a16:	4619      	mov	r1, r3
 8010a18:	6878      	ldr	r0, [r7, #4]
 8010a1a:	f7f9 ffcf 	bl	800a9bc <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8010a1e:	4603      	mov	r3, r0
 8010a20:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8010a22:	687a      	ldr	r2, [r7, #4]
 8010a24:	89fb      	ldrh	r3, [r7, #14]
 8010a26:	4413      	add	r3, r2
 8010a28:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8010a2a:	89fb      	ldrh	r3, [r7, #14]
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d006      	beq.n	8010a3e <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t+0x36>
 8010a30:	68b8      	ldr	r0, [r7, #8]
 8010a32:	f7fa fdfa 	bl	800b62a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8010a36:	4602      	mov	r2, r0
 8010a38:	68bb      	ldr	r3, [r7, #8]
 8010a3a:	4413      	add	r3, r2
                        : nullptr;
 8010a3c:	e000      	b.n	8010a40 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8010a3e:	2300      	movs	r3, #0
  }
 8010a40:	4618      	mov	r0, r3
 8010a42:	3710      	adds	r7, #16
 8010a44:	46bd      	mov	sp, r7
 8010a46:	bd80      	pop	{r7, pc}

08010a48 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8010a48:	b580      	push	{r7, lr}
 8010a4a:	b084      	sub	sp, #16
 8010a4c:	af00      	add	r7, sp, #0
 8010a4e:	6078      	str	r0, [r7, #4]
 8010a50:	460b      	mov	r3, r1
 8010a52:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8010a54:	887b      	ldrh	r3, [r7, #2]
 8010a56:	4619      	mov	r1, r3
 8010a58:	6878      	ldr	r0, [r7, #4]
 8010a5a:	f7f9 ffaf 	bl	800a9bc <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8010a5e:	4603      	mov	r3, r0
 8010a60:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8010a62:	687a      	ldr	r2, [r7, #4]
 8010a64:	89fb      	ldrh	r3, [r7, #14]
 8010a66:	4413      	add	r3, r2
 8010a68:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8010a6a:	89fb      	ldrh	r3, [r7, #14]
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d006      	beq.n	8010a7e <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t+0x36>
 8010a70:	68b8      	ldr	r0, [r7, #8]
 8010a72:	f7fa fdda 	bl	800b62a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8010a76:	4602      	mov	r2, r0
 8010a78:	68bb      	ldr	r3, [r7, #8]
 8010a7a:	4413      	add	r3, r2
                        : nullptr;
 8010a7c:	e000      	b.n	8010a80 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8010a7e:	2300      	movs	r3, #0
  }
 8010a80:	4618      	mov	r0, r3
 8010a82:	3710      	adds	r7, #16
 8010a84:	46bd      	mov	sp, r7
 8010a86:	bd80      	pop	{r7, pc}

08010a88 <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8010a88:	b580      	push	{r7, lr}
 8010a8a:	b084      	sub	sp, #16
 8010a8c:	af00      	add	r7, sp, #0
 8010a8e:	6078      	str	r0, [r7, #4]
 8010a90:	460b      	mov	r3, r1
 8010a92:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8010a94:	887b      	ldrh	r3, [r7, #2]
 8010a96:	4619      	mov	r1, r3
 8010a98:	6878      	ldr	r0, [r7, #4]
 8010a9a:	f7f9 ff8f 	bl	800a9bc <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8010a9e:	4603      	mov	r3, r0
 8010aa0:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8010aa2:	687a      	ldr	r2, [r7, #4]
 8010aa4:	89fb      	ldrh	r3, [r7, #14]
 8010aa6:	4413      	add	r3, r2
 8010aa8:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8010aaa:	89fb      	ldrh	r3, [r7, #14]
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d006      	beq.n	8010abe <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t+0x36>
 8010ab0:	68b8      	ldr	r0, [r7, #8]
 8010ab2:	f7fa fdba 	bl	800b62a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8010ab6:	4602      	mov	r2, r0
 8010ab8:	68bb      	ldr	r3, [r7, #8]
 8010aba:	4413      	add	r3, r2
                        : nullptr;
 8010abc:	e000      	b.n	8010ac0 <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8010abe:	2300      	movs	r3, #0
  }
 8010ac0:	4618      	mov	r0, r3
 8010ac2:	3710      	adds	r7, #16
 8010ac4:	46bd      	mov	sp, r7
 8010ac6:	bd80      	pop	{r7, pc}

08010ac8 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8010ac8:	b580      	push	{r7, lr}
 8010aca:	b084      	sub	sp, #16
 8010acc:	af00      	add	r7, sp, #0
 8010ace:	6078      	str	r0, [r7, #4]
 8010ad0:	460b      	mov	r3, r1
 8010ad2:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8010ad4:	887b      	ldrh	r3, [r7, #2]
 8010ad6:	4619      	mov	r1, r3
 8010ad8:	6878      	ldr	r0, [r7, #4]
 8010ada:	f7f9 ff6f 	bl	800a9bc <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8010ade:	4603      	mov	r3, r0
 8010ae0:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8010ae2:	687a      	ldr	r2, [r7, #4]
 8010ae4:	89fb      	ldrh	r3, [r7, #14]
 8010ae6:	4413      	add	r3, r2
 8010ae8:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8010aea:	89fb      	ldrh	r3, [r7, #14]
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d006      	beq.n	8010afe <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t+0x36>
 8010af0:	68b8      	ldr	r0, [r7, #8]
 8010af2:	f7fa fd9a 	bl	800b62a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8010af6:	4602      	mov	r2, r0
 8010af8:	68bb      	ldr	r3, [r7, #8]
 8010afa:	4413      	add	r3, r2
                        : nullptr;
 8010afc:	e000      	b.n	8010b00 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8010afe:	2300      	movs	r3, #0
  }
 8010b00:	4618      	mov	r0, r3
 8010b02:	3710      	adds	r7, #16
 8010b04:	46bd      	mov	sp, r7
 8010b06:	bd80      	pop	{r7, pc}

08010b08 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8010b08:	b580      	push	{r7, lr}
 8010b0a:	b084      	sub	sp, #16
 8010b0c:	af00      	add	r7, sp, #0
 8010b0e:	6078      	str	r0, [r7, #4]
 8010b10:	460b      	mov	r3, r1
 8010b12:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8010b14:	887b      	ldrh	r3, [r7, #2]
 8010b16:	4619      	mov	r1, r3
 8010b18:	6878      	ldr	r0, [r7, #4]
 8010b1a:	f7f9 ff4f 	bl	800a9bc <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8010b1e:	4603      	mov	r3, r0
 8010b20:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8010b22:	687a      	ldr	r2, [r7, #4]
 8010b24:	89fb      	ldrh	r3, [r7, #14]
 8010b26:	4413      	add	r3, r2
 8010b28:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8010b2a:	89fb      	ldrh	r3, [r7, #14]
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d006      	beq.n	8010b3e <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t+0x36>
 8010b30:	68b8      	ldr	r0, [r7, #8]
 8010b32:	f7fa fd7a 	bl	800b62a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8010b36:	4602      	mov	r2, r0
 8010b38:	68bb      	ldr	r3, [r7, #8]
 8010b3a:	4413      	add	r3, r2
                        : nullptr;
 8010b3c:	e000      	b.n	8010b40 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8010b3e:	2300      	movs	r3, #0
  }
 8010b40:	4618      	mov	r0, r3
 8010b42:	3710      	adds	r7, #16
 8010b44:	46bd      	mov	sp, r7
 8010b46:	bd80      	pop	{r7, pc}

08010b48 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8010b48:	b580      	push	{r7, lr}
 8010b4a:	b084      	sub	sp, #16
 8010b4c:	af00      	add	r7, sp, #0
 8010b4e:	6078      	str	r0, [r7, #4]
 8010b50:	460b      	mov	r3, r1
 8010b52:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8010b54:	887b      	ldrh	r3, [r7, #2]
 8010b56:	4619      	mov	r1, r3
 8010b58:	6878      	ldr	r0, [r7, #4]
 8010b5a:	f7f9 ff2f 	bl	800a9bc <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8010b5e:	4603      	mov	r3, r0
 8010b60:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8010b62:	687a      	ldr	r2, [r7, #4]
 8010b64:	89fb      	ldrh	r3, [r7, #14]
 8010b66:	4413      	add	r3, r2
 8010b68:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8010b6a:	89fb      	ldrh	r3, [r7, #14]
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	d006      	beq.n	8010b7e <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t+0x36>
 8010b70:	68b8      	ldr	r0, [r7, #8]
 8010b72:	f7fa fd5a 	bl	800b62a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8010b76:	4602      	mov	r2, r0
 8010b78:	68bb      	ldr	r3, [r7, #8]
 8010b7a:	4413      	add	r3, r2
                        : nullptr;
 8010b7c:	e000      	b.n	8010b80 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8010b7e:	2300      	movs	r3, #0
  }
 8010b80:	4618      	mov	r0, r3
 8010b82:	3710      	adds	r7, #16
 8010b84:	46bd      	mov	sp, r7
 8010b86:	bd80      	pop	{r7, pc}

08010b88 <_ZNK11flatbuffers6VectorIhE4DataEv>:
  const uint8_t *Data() const {
 8010b88:	b480      	push	{r7}
 8010b8a:	b083      	sub	sp, #12
 8010b8c:	af00      	add	r7, sp, #0
 8010b8e:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	3304      	adds	r3, #4
  }
 8010b94:	4618      	mov	r0, r3
 8010b96:	370c      	adds	r7, #12
 8010b98:	46bd      	mov	sp, r7
 8010b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b9e:	4770      	bx	lr

08010ba0 <_ZN11flatbuffers14IndirectHelperIfE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8010ba0:	b580      	push	{r7, lr}
 8010ba2:	b082      	sub	sp, #8
 8010ba4:	af00      	add	r7, sp, #0
 8010ba6:	6078      	str	r0, [r7, #4]
 8010ba8:	6039      	str	r1, [r7, #0]
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 8010baa:	683b      	ldr	r3, [r7, #0]
 8010bac:	009b      	lsls	r3, r3, #2
 8010bae:	687a      	ldr	r2, [r7, #4]
 8010bb0:	4413      	add	r3, r2
 8010bb2:	edd3 7a00 	vldr	s15, [r3]
 8010bb6:	eeb0 0a67 	vmov.f32	s0, s15
 8010bba:	f7fb fbf6 	bl	800c3aa <_ZN11flatbuffers12EndianScalarIfEET_S1_>
 8010bbe:	eef0 7a40 	vmov.f32	s15, s0
  }
 8010bc2:	eeb0 0a67 	vmov.f32	s0, s15
 8010bc6:	3708      	adds	r7, #8
 8010bc8:	46bd      	mov	sp, r7
 8010bca:	bd80      	pop	{r7, pc}

08010bcc <_ZNK11flatbuffers6VectorIfE4DataEv>:
  const uint8_t *Data() const {
 8010bcc:	b480      	push	{r7}
 8010bce:	b083      	sub	sp, #12
 8010bd0:	af00      	add	r7, sp, #0
 8010bd2:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	3304      	adds	r3, #4
  }
 8010bd8:	4618      	mov	r0, r3
 8010bda:	370c      	adds	r7, #12
 8010bdc:	46bd      	mov	sp, r7
 8010bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010be2:	4770      	bx	lr

08010be4 <_ZN11flatbuffers14IndirectHelperIxE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8010be4:	b580      	push	{r7, lr}
 8010be6:	b082      	sub	sp, #8
 8010be8:	af00      	add	r7, sp, #0
 8010bea:	6078      	str	r0, [r7, #4]
 8010bec:	6039      	str	r1, [r7, #0]
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 8010bee:	683b      	ldr	r3, [r7, #0]
 8010bf0:	00db      	lsls	r3, r3, #3
 8010bf2:	687a      	ldr	r2, [r7, #4]
 8010bf4:	4413      	add	r3, r2
 8010bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bfa:	4610      	mov	r0, r2
 8010bfc:	4619      	mov	r1, r3
 8010bfe:	f7fd fdbb 	bl	800e778 <_ZN11flatbuffers12EndianScalarIxEET_S1_>
 8010c02:	4602      	mov	r2, r0
 8010c04:	460b      	mov	r3, r1
  }
 8010c06:	4610      	mov	r0, r2
 8010c08:	4619      	mov	r1, r3
 8010c0a:	3708      	adds	r7, #8
 8010c0c:	46bd      	mov	sp, r7
 8010c0e:	bd80      	pop	{r7, pc}

08010c10 <_ZNK11flatbuffers6VectorIxE4DataEv>:
  const uint8_t *Data() const {
 8010c10:	b480      	push	{r7}
 8010c12:	b083      	sub	sp, #12
 8010c14:	af00      	add	r7, sp, #0
 8010c16:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	3304      	adds	r3, #4
  }
 8010c1c:	4618      	mov	r0, r3
 8010c1e:	370c      	adds	r7, #12
 8010c20:	46bd      	mov	sp, r7
 8010c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c26:	4770      	bx	lr

08010c28 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6TensorEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8010c28:	b580      	push	{r7, lr}
 8010c2a:	b082      	sub	sp, #8
 8010c2c:	af00      	add	r7, sp, #0
 8010c2e:	6078      	str	r0, [r7, #4]
 8010c30:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 8010c32:	683b      	ldr	r3, [r7, #0]
 8010c34:	009b      	lsls	r3, r3, #2
 8010c36:	687a      	ldr	r2, [r7, #4]
 8010c38:	4413      	add	r3, r2
 8010c3a:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8010c3c:	6878      	ldr	r0, [r7, #4]
 8010c3e:	f7fa fcf4 	bl	800b62a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8010c42:	4602      	mov	r2, r0
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	4413      	add	r3, r2
  }
 8010c48:	4618      	mov	r0, r3
 8010c4a:	3708      	adds	r7, #8
 8010c4c:	46bd      	mov	sp, r7
 8010c4e:	bd80      	pop	{r7, pc}

08010c50 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4DataEv>:
  const uint8_t *Data() const {
 8010c50:	b480      	push	{r7}
 8010c52:	b083      	sub	sp, #12
 8010c54:	af00      	add	r7, sp, #0
 8010c56:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	3304      	adds	r3, #4
  }
 8010c5c:	4618      	mov	r0, r3
 8010c5e:	370c      	adds	r7, #12
 8010c60:	46bd      	mov	sp, r7
 8010c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c66:	4770      	bx	lr

08010c68 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8OperatorEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8010c68:	b580      	push	{r7, lr}
 8010c6a:	b082      	sub	sp, #8
 8010c6c:	af00      	add	r7, sp, #0
 8010c6e:	6078      	str	r0, [r7, #4]
 8010c70:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 8010c72:	683b      	ldr	r3, [r7, #0]
 8010c74:	009b      	lsls	r3, r3, #2
 8010c76:	687a      	ldr	r2, [r7, #4]
 8010c78:	4413      	add	r3, r2
 8010c7a:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8010c7c:	6878      	ldr	r0, [r7, #4]
 8010c7e:	f7fa fcd4 	bl	800b62a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8010c82:	4602      	mov	r2, r0
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	4413      	add	r3, r2
  }
 8010c88:	4618      	mov	r0, r3
 8010c8a:	3708      	adds	r7, #8
 8010c8c:	46bd      	mov	sp, r7
 8010c8e:	bd80      	pop	{r7, pc}

08010c90 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4DataEv>:
  const uint8_t *Data() const {
 8010c90:	b480      	push	{r7}
 8010c92:	b083      	sub	sp, #12
 8010c94:	af00      	add	r7, sp, #0
 8010c96:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	3304      	adds	r3, #4
  }
 8010c9c:	4618      	mov	r0, r3
 8010c9e:	370c      	adds	r7, #12
 8010ca0:	46bd      	mov	sp, r7
 8010ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ca6:	4770      	bx	lr

08010ca8 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6BufferEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8010ca8:	b580      	push	{r7, lr}
 8010caa:	b082      	sub	sp, #8
 8010cac:	af00      	add	r7, sp, #0
 8010cae:	6078      	str	r0, [r7, #4]
 8010cb0:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 8010cb2:	683b      	ldr	r3, [r7, #0]
 8010cb4:	009b      	lsls	r3, r3, #2
 8010cb6:	687a      	ldr	r2, [r7, #4]
 8010cb8:	4413      	add	r3, r2
 8010cba:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8010cbc:	6878      	ldr	r0, [r7, #4]
 8010cbe:	f7fa fcb4 	bl	800b62a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8010cc2:	4602      	mov	r2, r0
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	4413      	add	r3, r2
  }
 8010cc8:	4618      	mov	r0, r3
 8010cca:	3708      	adds	r7, #8
 8010ccc:	46bd      	mov	sp, r7
 8010cce:	bd80      	pop	{r7, pc}

08010cd0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE4DataEv>:
  const uint8_t *Data() const {
 8010cd0:	b480      	push	{r7}
 8010cd2:	b083      	sub	sp, #12
 8010cd4:	af00      	add	r7, sp, #0
 8010cd6:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	3304      	adds	r3, #4
  }
 8010cdc:	4618      	mov	r0, r3
 8010cde:	370c      	adds	r7, #12
 8010ce0:	46bd      	mov	sp, r7
 8010ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ce6:	4770      	bx	lr

08010ce8 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8MetadataEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8010ce8:	b580      	push	{r7, lr}
 8010cea:	b082      	sub	sp, #8
 8010cec:	af00      	add	r7, sp, #0
 8010cee:	6078      	str	r0, [r7, #4]
 8010cf0:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 8010cf2:	683b      	ldr	r3, [r7, #0]
 8010cf4:	009b      	lsls	r3, r3, #2
 8010cf6:	687a      	ldr	r2, [r7, #4]
 8010cf8:	4413      	add	r3, r2
 8010cfa:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8010cfc:	6878      	ldr	r0, [r7, #4]
 8010cfe:	f7fa fc94 	bl	800b62a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8010d02:	4602      	mov	r2, r0
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	4413      	add	r3, r2
  }
 8010d08:	4618      	mov	r0, r3
 8010d0a:	3708      	adds	r7, #8
 8010d0c:	46bd      	mov	sp, r7
 8010d0e:	bd80      	pop	{r7, pc}

08010d10 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4DataEv>:
  const uint8_t *Data() const {
 8010d10:	b480      	push	{r7}
 8010d12:	b083      	sub	sp, #12
 8010d14:	af00      	add	r7, sp, #0
 8010d16:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	3304      	adds	r3, #4
  }
 8010d1c:	4618      	mov	r0, r3
 8010d1e:	370c      	adds	r7, #12
 8010d20:	46bd      	mov	sp, r7
 8010d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d26:	4770      	bx	lr

08010d28 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev>:
class MicroBuiltinDataAllocator : public BuiltinDataAllocator {
 8010d28:	b580      	push	{r7, lr}
 8010d2a:	b082      	sub	sp, #8
 8010d2c:	af00      	add	r7, sp, #0
 8010d2e:	6078      	str	r0, [r7, #4]
 8010d30:	4a05      	ldr	r2, [pc, #20]	; (8010d48 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev+0x20>)
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	601a      	str	r2, [r3, #0]
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	4618      	mov	r0, r3
 8010d3a:	f7fe f86f 	bl	800ee1c <_ZN6tflite20BuiltinDataAllocatorD1Ev>
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	4618      	mov	r0, r3
 8010d42:	3708      	adds	r7, #8
 8010d44:	46bd      	mov	sp, r7
 8010d46:	bd80      	pop	{r7, pc}
 8010d48:	0803fe40 	.word	0x0803fe40

08010d4c <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD0Ev>:
 8010d4c:	b580      	push	{r7, lr}
 8010d4e:	b082      	sub	sp, #8
 8010d50:	af00      	add	r7, sp, #0
 8010d52:	6078      	str	r0, [r7, #4]
 8010d54:	6878      	ldr	r0, [r7, #4]
 8010d56:	f7ff ffe7 	bl	8010d28 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev>
 8010d5a:	2108      	movs	r1, #8
 8010d5c:	6878      	ldr	r0, [r7, #4]
 8010d5e:	f015 fd64 	bl	802682a <_ZdlPvj>
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	4618      	mov	r0, r3
 8010d66:	3708      	adds	r7, #8
 8010d68:	46bd      	mov	sp, r7
 8010d6a:	bd80      	pop	{r7, pc}

08010d6c <_ZN6tflite13ErrorReporterD1Ev>:
/// Subclass ErrorReporter to provide another reporting destination.
/// For example, if you have a GUI program, you might redirect to a buffer
/// that drives a GUI error log box.
class ErrorReporter {
 public:
  virtual ~ErrorReporter() {}
 8010d6c:	b480      	push	{r7}
 8010d6e:	b083      	sub	sp, #12
 8010d70:	af00      	add	r7, sp, #0
 8010d72:	6078      	str	r0, [r7, #4]
 8010d74:	4a04      	ldr	r2, [pc, #16]	; (8010d88 <_ZN6tflite13ErrorReporterD1Ev+0x1c>)
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	601a      	str	r2, [r3, #0]
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	4618      	mov	r0, r3
 8010d7e:	370c      	adds	r7, #12
 8010d80:	46bd      	mov	sp, r7
 8010d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d86:	4770      	bx	lr
 8010d88:	0803fec0 	.word	0x0803fec0

08010d8c <_ZN6tflite13ErrorReporterD0Ev>:
 8010d8c:	b580      	push	{r7, lr}
 8010d8e:	b082      	sub	sp, #8
 8010d90:	af00      	add	r7, sp, #0
 8010d92:	6078      	str	r0, [r7, #4]
 8010d94:	6878      	ldr	r0, [r7, #4]
 8010d96:	f7ff ffe9 	bl	8010d6c <_ZN6tflite13ErrorReporterD1Ev>
 8010d9a:	2104      	movs	r1, #4
 8010d9c:	6878      	ldr	r0, [r7, #4]
 8010d9e:	f015 fd44 	bl	802682a <_ZdlPvj>
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	4618      	mov	r0, r3
 8010da6:	3708      	adds	r7, #8
 8010da8:	46bd      	mov	sp, r7
 8010daa:	bd80      	pop	{r7, pc}

08010dac <_ZN6tflite18MicroErrorReporterD1Ev>:
// Get a pointer to a singleton global error reporter.
ErrorReporter* GetMicroErrorReporter();

class MicroErrorReporter : public ErrorReporter {
 public:
  ~MicroErrorReporter() override {}
 8010dac:	b580      	push	{r7, lr}
 8010dae:	b082      	sub	sp, #8
 8010db0:	af00      	add	r7, sp, #0
 8010db2:	6078      	str	r0, [r7, #4]
 8010db4:	4a05      	ldr	r2, [pc, #20]	; (8010dcc <_ZN6tflite18MicroErrorReporterD1Ev+0x20>)
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	601a      	str	r2, [r3, #0]
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	4618      	mov	r0, r3
 8010dbe:	f7ff ffd5 	bl	8010d6c <_ZN6tflite13ErrorReporterD1Ev>
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	4618      	mov	r0, r3
 8010dc6:	3708      	adds	r7, #8
 8010dc8:	46bd      	mov	sp, r7
 8010dca:	bd80      	pop	{r7, pc}
 8010dcc:	0803feac 	.word	0x0803feac

08010dd0 <_ZN6tflite18MicroErrorReporterD0Ev>:
 8010dd0:	b580      	push	{r7, lr}
 8010dd2:	b082      	sub	sp, #8
 8010dd4:	af00      	add	r7, sp, #0
 8010dd6:	6078      	str	r0, [r7, #4]
 8010dd8:	6878      	ldr	r0, [r7, #4]
 8010dda:	f7ff ffe7 	bl	8010dac <_ZN6tflite18MicroErrorReporterD1Ev>
 8010dde:	2104      	movs	r1, #4
 8010de0:	6878      	ldr	r0, [r7, #4]
 8010de2:	f015 fd22 	bl	802682a <_ZdlPvj>
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	4618      	mov	r0, r3
 8010dea:	3708      	adds	r7, #8
 8010dec:	46bd      	mov	sp, r7
 8010dee:	bd80      	pop	{r7, pc}

08010df0 <_ZN12_GLOBAL__N_13LogEPKcSt9__va_list>:

namespace {
uint8_t micro_error_reporter_buffer[sizeof(tflite::MicroErrorReporter)];
tflite::MicroErrorReporter* error_reporter_ = nullptr;

void Log(const char* format, va_list args) {
 8010df0:	b580      	push	{r7, lr}
 8010df2:	b0c2      	sub	sp, #264	; 0x108
 8010df4:	af00      	add	r7, sp, #0
 8010df6:	1d3b      	adds	r3, r7, #4
 8010df8:	6018      	str	r0, [r3, #0]
 8010dfa:	463b      	mov	r3, r7
 8010dfc:	6019      	str	r1, [r3, #0]
  // Only pulling in the implementation of this function for builds where we
  // expect to make use of it to be extra cautious about not increasing the code
  // size.
  static constexpr int kMaxLogLen = 256;
  char log_buffer[kMaxLogLen];
  MicroVsnprintf(log_buffer, kMaxLogLen, format, args);
 8010dfe:	463b      	mov	r3, r7
 8010e00:	1d3a      	adds	r2, r7, #4
 8010e02:	f107 0008 	add.w	r0, r7, #8
 8010e06:	681b      	ldr	r3, [r3, #0]
 8010e08:	6812      	ldr	r2, [r2, #0]
 8010e0a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8010e0e:	f001 fbf1 	bl	80125f4 <MicroVsnprintf>
  DebugLog(log_buffer);
 8010e12:	f107 0308 	add.w	r3, r7, #8
 8010e16:	4618      	mov	r0, r3
 8010e18:	f001 ff8a 	bl	8012d30 <DebugLog>
  DebugLog("\r\n");
 8010e1c:	4803      	ldr	r0, [pc, #12]	; (8010e2c <_ZN12_GLOBAL__N_13LogEPKcSt9__va_list+0x3c>)
 8010e1e:	f001 ff87 	bl	8012d30 <DebugLog>
#endif
}
 8010e22:	bf00      	nop
 8010e24:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8010e28:	46bd      	mov	sp, r7
 8010e2a:	bd80      	pop	{r7, pc}
 8010e2c:	0802a5f4 	.word	0x0802a5f4

08010e30 <_Z11MicroPrintfPKcz>:

}  // namespace

#if !defined(TF_LITE_STRIP_ERROR_STRINGS)
void MicroPrintf(const char* format, ...) {
 8010e30:	b40f      	push	{r0, r1, r2, r3}
 8010e32:	b580      	push	{r7, lr}
 8010e34:	b082      	sub	sp, #8
 8010e36:	af00      	add	r7, sp, #0
  va_list args;
  va_start(args, format);
 8010e38:	f107 0314 	add.w	r3, r7, #20
 8010e3c:	607b      	str	r3, [r7, #4]
  Log(format, args);
 8010e3e:	6879      	ldr	r1, [r7, #4]
 8010e40:	6938      	ldr	r0, [r7, #16]
 8010e42:	f7ff ffd5 	bl	8010df0 <_ZN12_GLOBAL__N_13LogEPKcSt9__va_list>
  va_end(args);
}
 8010e46:	bf00      	nop
 8010e48:	3708      	adds	r7, #8
 8010e4a:	46bd      	mov	sp, r7
 8010e4c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010e50:	b004      	add	sp, #16
 8010e52:	4770      	bx	lr

08010e54 <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list>:
    error_reporter_ = new (micro_error_reporter_buffer) MicroErrorReporter();
  }
  return error_reporter_;
}

int MicroErrorReporter::Report(const char* format, va_list args) {
 8010e54:	b580      	push	{r7, lr}
 8010e56:	b084      	sub	sp, #16
 8010e58:	af00      	add	r7, sp, #0
 8010e5a:	60f8      	str	r0, [r7, #12]
 8010e5c:	60b9      	str	r1, [r7, #8]
 8010e5e:	607a      	str	r2, [r7, #4]
  Log(format, args);
 8010e60:	6879      	ldr	r1, [r7, #4]
 8010e62:	68b8      	ldr	r0, [r7, #8]
 8010e64:	f7ff ffc4 	bl	8010df0 <_ZN12_GLOBAL__N_13LogEPKcSt9__va_list>
  return 0;
 8010e68:	2300      	movs	r3, #0
}
 8010e6a:	4618      	mov	r0, r3
 8010e6c:	3710      	adds	r7, #16
 8010e6e:	46bd      	mov	sp, r7
 8010e70:	bd80      	pop	{r7, pc}

08010e72 <_ZN6tflite19ScopedMicroProfilerC1EPKcPNS_13MicroProfilerE>:
//   ScopedMicroProfiler scoped_profiler("custom_tag", profiler);
//   work_to_profile();
// }
class ScopedMicroProfiler {
 public:
  explicit ScopedMicroProfiler(const char* tag, MicroProfiler* profiler)
 8010e72:	b580      	push	{r7, lr}
 8010e74:	b084      	sub	sp, #16
 8010e76:	af00      	add	r7, sp, #0
 8010e78:	60f8      	str	r0, [r7, #12]
 8010e7a:	60b9      	str	r1, [r7, #8]
 8010e7c:	607a      	str	r2, [r7, #4]
      : profiler_(profiler) {
 8010e7e:	68fb      	ldr	r3, [r7, #12]
 8010e80:	2200      	movs	r2, #0
 8010e82:	601a      	str	r2, [r3, #0]
 8010e84:	68fb      	ldr	r3, [r7, #12]
 8010e86:	687a      	ldr	r2, [r7, #4]
 8010e88:	605a      	str	r2, [r3, #4]
    if (profiler_ != nullptr) {
 8010e8a:	68fb      	ldr	r3, [r7, #12]
 8010e8c:	685b      	ldr	r3, [r3, #4]
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d00c      	beq.n	8010eac <_ZN6tflite19ScopedMicroProfilerC1EPKcPNS_13MicroProfilerE+0x3a>
      event_handle_ = profiler_->BeginEvent(tag);
 8010e92:	68fb      	ldr	r3, [r7, #12]
 8010e94:	685a      	ldr	r2, [r3, #4]
 8010e96:	68fb      	ldr	r3, [r7, #12]
 8010e98:	685b      	ldr	r3, [r3, #4]
 8010e9a:	681b      	ldr	r3, [r3, #0]
 8010e9c:	3308      	adds	r3, #8
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	68b9      	ldr	r1, [r7, #8]
 8010ea2:	4610      	mov	r0, r2
 8010ea4:	4798      	blx	r3
 8010ea6:	4602      	mov	r2, r0
 8010ea8:	68fb      	ldr	r3, [r7, #12]
 8010eaa:	601a      	str	r2, [r3, #0]
    }
  }
 8010eac:	68fb      	ldr	r3, [r7, #12]
 8010eae:	4618      	mov	r0, r3
 8010eb0:	3710      	adds	r7, #16
 8010eb2:	46bd      	mov	sp, r7
 8010eb4:	bd80      	pop	{r7, pc}

08010eb6 <_ZN6tflite19ScopedMicroProfilerD1Ev>:

  ~ScopedMicroProfiler() {
 8010eb6:	b580      	push	{r7, lr}
 8010eb8:	b082      	sub	sp, #8
 8010eba:	af00      	add	r7, sp, #0
 8010ebc:	6078      	str	r0, [r7, #4]
    if (profiler_ != nullptr) {
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	685b      	ldr	r3, [r3, #4]
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d00a      	beq.n	8010edc <_ZN6tflite19ScopedMicroProfilerD1Ev+0x26>
      profiler_->EndEvent(event_handle_);
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	6858      	ldr	r0, [r3, #4]
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	685b      	ldr	r3, [r3, #4]
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	330c      	adds	r3, #12
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	687a      	ldr	r2, [r7, #4]
 8010ed6:	6812      	ldr	r2, [r2, #0]
 8010ed8:	4611      	mov	r1, r2
 8010eda:	4798      	blx	r3
    }
  }
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	4618      	mov	r0, r3
 8010ee0:	3708      	adds	r7, #8
 8010ee2:	46bd      	mov	sp, r7
 8010ee4:	bd80      	pop	{r7, pc}

08010ee6 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>:

namespace tflite {
namespace {

#ifndef TF_LITE_STRIP_ERROR_STRINGS
const char* OpNameFromRegistration(const TfLiteRegistration* registration) {
 8010ee6:	b580      	push	{r7, lr}
 8010ee8:	b082      	sub	sp, #8
 8010eea:	af00      	add	r7, sp, #0
 8010eec:	6078      	str	r0, [r7, #4]
  if (registration->builtin_code == BuiltinOperator_CUSTOM) {
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	695b      	ldr	r3, [r3, #20]
 8010ef2:	2b20      	cmp	r3, #32
 8010ef4:	d102      	bne.n	8010efc <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x16>
    return registration->custom_name;
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	699b      	ldr	r3, [r3, #24]
 8010efa:	e007      	b.n	8010f0c <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x26>
  } else {
    return EnumNameBuiltinOperator(BuiltinOperator(registration->builtin_code));
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	695b      	ldr	r3, [r3, #20]
 8010f00:	b2db      	uxtb	r3, r3
 8010f02:	4618      	mov	r0, r3
 8010f04:	f7fb ff18 	bl	800cd38 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 8010f08:	4603      	mov	r3, r0
 8010f0a:	bf00      	nop
  }
}
 8010f0c:	4618      	mov	r0, r3
 8010f0e:	3708      	adds	r7, #8
 8010f10:	46bd      	mov	sp, r7
 8010f12:	bd80      	pop	{r7, pc}

08010f14 <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorEPNS_22MicroResourceVariablesE>:
#endif  // !defined(TF_LITE_STRIP_ERROR_STRINGS)

}  // namespace

MicroGraph::MicroGraph(TfLiteContext* context, const Model* model,
 8010f14:	b580      	push	{r7, lr}
 8010f16:	b084      	sub	sp, #16
 8010f18:	af00      	add	r7, sp, #0
 8010f1a:	60f8      	str	r0, [r7, #12]
 8010f1c:	60b9      	str	r1, [r7, #8]
 8010f1e:	607a      	str	r2, [r7, #4]
 8010f20:	603b      	str	r3, [r7, #0]
                       MicroResourceVariables* resource_variables)
    : context_(context),
      model_(model),
      allocator_(allocator),
      current_subgraph_index_(0),
      resource_variables_(resource_variables) {
 8010f22:	4a11      	ldr	r2, [pc, #68]	; (8010f68 <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorEPNS_22MicroResourceVariablesE+0x54>)
 8010f24:	68fb      	ldr	r3, [r7, #12]
 8010f26:	601a      	str	r2, [r3, #0]
 8010f28:	68fb      	ldr	r3, [r7, #12]
 8010f2a:	68ba      	ldr	r2, [r7, #8]
 8010f2c:	605a      	str	r2, [r3, #4]
 8010f2e:	68fb      	ldr	r3, [r7, #12]
 8010f30:	687a      	ldr	r2, [r7, #4]
 8010f32:	609a      	str	r2, [r3, #8]
 8010f34:	68fb      	ldr	r3, [r7, #12]
 8010f36:	683a      	ldr	r2, [r7, #0]
 8010f38:	60da      	str	r2, [r3, #12]
 8010f3a:	68fb      	ldr	r3, [r7, #12]
 8010f3c:	2200      	movs	r2, #0
 8010f3e:	611a      	str	r2, [r3, #16]
 8010f40:	68fb      	ldr	r3, [r7, #12]
 8010f42:	2200      	movs	r2, #0
 8010f44:	615a      	str	r2, [r3, #20]
 8010f46:	68fb      	ldr	r3, [r7, #12]
 8010f48:	69ba      	ldr	r2, [r7, #24]
 8010f4a:	619a      	str	r2, [r3, #24]
  if (model != nullptr) {
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	2b00      	cmp	r3, #0
 8010f50:	d005      	beq.n	8010f5e <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorEPNS_22MicroResourceVariablesE+0x4a>
    subgraphs_ = model->subgraphs();
 8010f52:	6878      	ldr	r0, [r7, #4]
 8010f54:	f7fd fb6c 	bl	800e630 <_ZNK6tflite5Model9subgraphsEv>
 8010f58:	4602      	mov	r2, r0
 8010f5a:	68fb      	ldr	r3, [r7, #12]
 8010f5c:	61da      	str	r2, [r3, #28]
  }
}
 8010f5e:	68fb      	ldr	r3, [r7, #12]
 8010f60:	4618      	mov	r0, r3
 8010f62:	3710      	adds	r7, #16
 8010f64:	46bd      	mov	sp, r7
 8010f66:	bd80      	pop	{r7, pc}
 8010f68:	0803fed4 	.word	0x0803fed4

08010f6c <_ZN6tflite10MicroGraphD1Ev>:

MicroGraph::~MicroGraph() {}
 8010f6c:	b480      	push	{r7}
 8010f6e:	b083      	sub	sp, #12
 8010f70:	af00      	add	r7, sp, #0
 8010f72:	6078      	str	r0, [r7, #4]
 8010f74:	4a04      	ldr	r2, [pc, #16]	; (8010f88 <_ZN6tflite10MicroGraphD1Ev+0x1c>)
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	601a      	str	r2, [r3, #0]
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	4618      	mov	r0, r3
 8010f7e:	370c      	adds	r7, #12
 8010f80:	46bd      	mov	sp, r7
 8010f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f86:	4770      	bx	lr
 8010f88:	0803fed4 	.word	0x0803fed4

08010f8c <_ZN6tflite10MicroGraphD0Ev>:
 8010f8c:	b580      	push	{r7, lr}
 8010f8e:	b082      	sub	sp, #8
 8010f90:	af00      	add	r7, sp, #0
 8010f92:	6078      	str	r0, [r7, #4]
 8010f94:	6878      	ldr	r0, [r7, #4]
 8010f96:	f7ff ffe9 	bl	8010f6c <_ZN6tflite10MicroGraphD1Ev>
 8010f9a:	2120      	movs	r1, #32
 8010f9c:	6878      	ldr	r0, [r7, #4]
 8010f9e:	f015 fc44 	bl	802682a <_ZdlPvj>
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	4618      	mov	r0, r3
 8010fa6:	3708      	adds	r7, #8
 8010fa8:	46bd      	mov	sp, r7
 8010faa:	bd80      	pop	{r7, pc}

08010fac <_ZN6tflite10MicroGraph13InitSubgraphsEv>:

TfLiteStatus MicroGraph::InitSubgraphs() {
 8010fac:	b580      	push	{r7, lr}
 8010fae:	b08a      	sub	sp, #40	; 0x28
 8010fb0:	af00      	add	r7, sp, #0
 8010fb2:	6078      	str	r0, [r7, #4]
  int previous_subgraph_idx = current_subgraph_index_;
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	695b      	ldr	r3, [r3, #20]
 8010fb8:	617b      	str	r3, [r7, #20]

  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 8010fba:	2300      	movs	r3, #0
 8010fbc:	627b      	str	r3, [r7, #36]	; 0x24
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	69db      	ldr	r3, [r3, #28]
 8010fc2:	4618      	mov	r0, r3
 8010fc4:	f7fd fba4 	bl	800e710 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 8010fc8:	4602      	mov	r2, r0
 8010fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fcc:	4293      	cmp	r3, r2
 8010fce:	bf34      	ite	cc
 8010fd0:	2301      	movcc	r3, #1
 8010fd2:	2300      	movcs	r3, #0
 8010fd4:	b2db      	uxtb	r3, r3
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	d04f      	beq.n	801107a <_ZN6tflite10MicroGraph13InitSubgraphsEv+0xce>
       subgraph_idx++) {
    current_subgraph_index_ = subgraph_idx;
 8010fda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	615a      	str	r2, [r3, #20]
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	689b      	ldr	r3, [r3, #8]
 8010fe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010fe6:	4611      	mov	r1, r2
 8010fe8:	4618      	mov	r0, r3
 8010fea:	f7fd fb4c 	bl	800e686 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
 8010fee:	6138      	str	r0, [r7, #16]
    for (size_t i = 0; i < operators_size; ++i) {
 8010ff0:	2300      	movs	r3, #0
 8010ff2:	623b      	str	r3, [r7, #32]
 8010ff4:	6a3a      	ldr	r2, [r7, #32]
 8010ff6:	693b      	ldr	r3, [r7, #16]
 8010ff8:	429a      	cmp	r2, r3
 8010ffa:	d23a      	bcs.n	8011072 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0xc6>
      TfLiteNode* node =
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	691a      	ldr	r2, [r3, #16]
 8011000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011002:	00db      	lsls	r3, r3, #3
 8011004:	4413      	add	r3, r2
 8011006:	681a      	ldr	r2, [r3, #0]
 8011008:	6a3b      	ldr	r3, [r7, #32]
 801100a:	212c      	movs	r1, #44	; 0x2c
 801100c:	fb01 f303 	mul.w	r3, r1, r3
 8011010:	4413      	add	r3, r2
      TfLiteNode* node =
 8011012:	60fb      	str	r3, [r7, #12]
      const TfLiteRegistration* registration =
          subgraph_allocations_[subgraph_idx]
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	691a      	ldr	r2, [r3, #16]
 8011018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801101a:	00db      	lsls	r3, r3, #3
 801101c:	4413      	add	r3, r2
              .node_and_registrations[i]
 801101e:	681a      	ldr	r2, [r3, #0]
 8011020:	6a3b      	ldr	r3, [r7, #32]
 8011022:	212c      	movs	r1, #44	; 0x2c
 8011024:	fb01 f303 	mul.w	r3, r1, r3
 8011028:	4413      	add	r3, r2
      const TfLiteRegistration* registration =
 801102a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801102c:	60bb      	str	r3, [r7, #8]
              .registration;
      size_t init_data_size;
      const char* init_data;
      if (registration->builtin_code == BuiltinOperator_CUSTOM) {
 801102e:	68bb      	ldr	r3, [r7, #8]
 8011030:	695b      	ldr	r3, [r3, #20]
 8011032:	2b20      	cmp	r3, #32
 8011034:	d106      	bne.n	8011044 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x98>
        init_data = reinterpret_cast<const char*>(node->custom_initial_data);
 8011036:	68fb      	ldr	r3, [r7, #12]
 8011038:	699b      	ldr	r3, [r3, #24]
 801103a:	61bb      	str	r3, [r7, #24]
        init_data_size = node->custom_initial_data_size;
 801103c:	68fb      	ldr	r3, [r7, #12]
 801103e:	69db      	ldr	r3, [r3, #28]
 8011040:	61fb      	str	r3, [r7, #28]
 8011042:	e004      	b.n	801104e <_ZN6tflite10MicroGraph13InitSubgraphsEv+0xa2>
      } else {
        init_data = reinterpret_cast<const char*>(node->builtin_data);
 8011044:	68fb      	ldr	r3, [r7, #12]
 8011046:	695b      	ldr	r3, [r3, #20]
 8011048:	61bb      	str	r3, [r7, #24]
        init_data_size = 0;
 801104a:	2300      	movs	r3, #0
 801104c:	61fb      	str	r3, [r7, #28]
      }
      if (registration->init) {
 801104e:	68bb      	ldr	r3, [r7, #8]
 8011050:	681b      	ldr	r3, [r3, #0]
 8011052:	2b00      	cmp	r3, #0
 8011054:	d009      	beq.n	801106a <_ZN6tflite10MicroGraph13InitSubgraphsEv+0xbe>
        node->user_data =
            registration->init(context_, init_data, init_data_size);
 8011056:	68bb      	ldr	r3, [r7, #8]
 8011058:	681b      	ldr	r3, [r3, #0]
 801105a:	687a      	ldr	r2, [r7, #4]
 801105c:	6850      	ldr	r0, [r2, #4]
 801105e:	69fa      	ldr	r2, [r7, #28]
 8011060:	69b9      	ldr	r1, [r7, #24]
 8011062:	4798      	blx	r3
 8011064:	4602      	mov	r2, r0
        node->user_data =
 8011066:	68fb      	ldr	r3, [r7, #12]
 8011068:	611a      	str	r2, [r3, #16]
    for (size_t i = 0; i < operators_size; ++i) {
 801106a:	6a3b      	ldr	r3, [r7, #32]
 801106c:	3301      	adds	r3, #1
 801106e:	623b      	str	r3, [r7, #32]
 8011070:	e7c0      	b.n	8010ff4 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x48>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 8011072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011074:	3301      	adds	r3, #1
 8011076:	627b      	str	r3, [r7, #36]	; 0x24
 8011078:	e7a1      	b.n	8010fbe <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x12>
      }
    }
  }
  current_subgraph_index_ = previous_subgraph_idx;
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	697a      	ldr	r2, [r7, #20]
 801107e:	615a      	str	r2, [r3, #20]

  return kTfLiteOk;
 8011080:	2300      	movs	r3, #0
}
 8011082:	4618      	mov	r0, r3
 8011084:	3728      	adds	r7, #40	; 0x28
 8011086:	46bd      	mov	sp, r7
 8011088:	bd80      	pop	{r7, pc}
	...

0801108c <_ZN6tflite10MicroGraph16PrepareSubgraphsEv>:

TfLiteStatus MicroGraph::PrepareSubgraphs() {
 801108c:	b580      	push	{r7, lr}
 801108e:	b08a      	sub	sp, #40	; 0x28
 8011090:	af00      	add	r7, sp, #0
 8011092:	6078      	str	r0, [r7, #4]
  int previous_subgraph_idx = current_subgraph_index_;
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	695b      	ldr	r3, [r3, #20]
 8011098:	61fb      	str	r3, [r7, #28]

  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 801109a:	2300      	movs	r3, #0
 801109c:	627b      	str	r3, [r7, #36]	; 0x24
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	69db      	ldr	r3, [r3, #28]
 80110a2:	4618      	mov	r0, r3
 80110a4:	f7fd fb34 	bl	800e710 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 80110a8:	4602      	mov	r2, r0
 80110aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110ac:	4293      	cmp	r3, r2
 80110ae:	bf34      	ite	cc
 80110b0:	2301      	movcc	r3, #1
 80110b2:	2300      	movcs	r3, #0
 80110b4:	b2db      	uxtb	r3, r3
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d053      	beq.n	8011162 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0xd6>
       subgraph_idx++) {
    current_subgraph_index_ = subgraph_idx;
 80110ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	615a      	str	r2, [r3, #20]
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	689b      	ldr	r3, [r3, #8]
 80110c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80110c6:	4611      	mov	r1, r2
 80110c8:	4618      	mov	r0, r3
 80110ca:	f7fd fadc 	bl	800e686 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
 80110ce:	61b8      	str	r0, [r7, #24]
    for (size_t i = 0; i < operators_size; ++i) {
 80110d0:	2300      	movs	r3, #0
 80110d2:	623b      	str	r3, [r7, #32]
 80110d4:	6a3a      	ldr	r2, [r7, #32]
 80110d6:	69bb      	ldr	r3, [r7, #24]
 80110d8:	429a      	cmp	r2, r3
 80110da:	d23e      	bcs.n	801115a <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0xce>
      TfLiteNode* node =
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	691a      	ldr	r2, [r3, #16]
 80110e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110e2:	00db      	lsls	r3, r3, #3
 80110e4:	4413      	add	r3, r2
 80110e6:	681a      	ldr	r2, [r3, #0]
 80110e8:	6a3b      	ldr	r3, [r7, #32]
 80110ea:	212c      	movs	r1, #44	; 0x2c
 80110ec:	fb01 f303 	mul.w	r3, r1, r3
 80110f0:	4413      	add	r3, r2
      TfLiteNode* node =
 80110f2:	617b      	str	r3, [r7, #20]
      const TfLiteRegistration* registration =
          subgraph_allocations_[subgraph_idx]
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	691a      	ldr	r2, [r3, #16]
 80110f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110fa:	00db      	lsls	r3, r3, #3
 80110fc:	4413      	add	r3, r2
              .node_and_registrations[i]
 80110fe:	681a      	ldr	r2, [r3, #0]
 8011100:	6a3b      	ldr	r3, [r7, #32]
 8011102:	212c      	movs	r1, #44	; 0x2c
 8011104:	fb01 f303 	mul.w	r3, r1, r3
 8011108:	4413      	add	r3, r2
      const TfLiteRegistration* registration =
 801110a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801110c:	613b      	str	r3, [r7, #16]
              .registration;
      if (registration->prepare != nullptr) {
 801110e:	693b      	ldr	r3, [r7, #16]
 8011110:	689b      	ldr	r3, [r3, #8]
 8011112:	2b00      	cmp	r3, #0
 8011114:	d016      	beq.n	8011144 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0xb8>
        TfLiteStatus prepare_status = registration->prepare(context_, node);
 8011116:	693b      	ldr	r3, [r7, #16]
 8011118:	689b      	ldr	r3, [r3, #8]
 801111a:	687a      	ldr	r2, [r7, #4]
 801111c:	6852      	ldr	r2, [r2, #4]
 801111e:	6979      	ldr	r1, [r7, #20]
 8011120:	4610      	mov	r0, r2
 8011122:	4798      	blx	r3
 8011124:	4603      	mov	r3, r0
 8011126:	73fb      	strb	r3, [r7, #15]
        if (prepare_status != kTfLiteOk) {
 8011128:	7bfb      	ldrb	r3, [r7, #15]
 801112a:	2b00      	cmp	r3, #0
 801112c:	d00a      	beq.n	8011144 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0xb8>
          MicroPrintf("Node %s (number %df) failed to prepare with status %d",
 801112e:	6938      	ldr	r0, [r7, #16]
 8011130:	f7ff fed9 	bl	8010ee6 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
 8011134:	4601      	mov	r1, r0
 8011136:	7bfb      	ldrb	r3, [r7, #15]
 8011138:	6a3a      	ldr	r2, [r7, #32]
 801113a:	480e      	ldr	r0, [pc, #56]	; (8011174 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0xe8>)
 801113c:	f7ff fe78 	bl	8010e30 <_Z11MicroPrintfPKcz>
                      OpNameFromRegistration(registration), i, prepare_status);
          return kTfLiteError;
 8011140:	2301      	movs	r3, #1
 8011142:	e012      	b.n	801116a <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0xde>
        }
      }
      allocator_->FinishPrepareNodeAllocations(/*node_id=*/i);
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	68db      	ldr	r3, [r3, #12]
 8011148:	6a3a      	ldr	r2, [r7, #32]
 801114a:	4611      	mov	r1, r2
 801114c:	4618      	mov	r0, r3
 801114e:	f7fe fd8f 	bl	800fc70 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi>
    for (size_t i = 0; i < operators_size; ++i) {
 8011152:	6a3b      	ldr	r3, [r7, #32]
 8011154:	3301      	adds	r3, #1
 8011156:	623b      	str	r3, [r7, #32]
 8011158:	e7bc      	b.n	80110d4 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0x48>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 801115a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801115c:	3301      	adds	r3, #1
 801115e:	627b      	str	r3, [r7, #36]	; 0x24
 8011160:	e79d      	b.n	801109e <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0x12>
    }
  }
  current_subgraph_index_ = previous_subgraph_idx;
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	69fa      	ldr	r2, [r7, #28]
 8011166:	615a      	str	r2, [r3, #20]

  return kTfLiteOk;
 8011168:	2300      	movs	r3, #0
}
 801116a:	4618      	mov	r0, r3
 801116c:	3728      	adds	r7, #40	; 0x28
 801116e:	46bd      	mov	sp, r7
 8011170:	bd80      	pop	{r7, pc}
 8011172:	bf00      	nop
 8011174:	0802acf8 	.word	0x0802acf8

08011178 <_ZN6tflite10MicroGraph13FreeSubgraphsEv>:

TfLiteStatus MicroGraph::FreeSubgraphs() {
 8011178:	b580      	push	{r7, lr}
 801117a:	b088      	sub	sp, #32
 801117c:	af00      	add	r7, sp, #0
 801117e:	6078      	str	r0, [r7, #4]
  int previous_subgraph_idx = current_subgraph_index_;
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	695b      	ldr	r3, [r3, #20]
 8011184:	617b      	str	r3, [r7, #20]

  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 8011186:	2300      	movs	r3, #0
 8011188:	61fb      	str	r3, [r7, #28]
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	69db      	ldr	r3, [r3, #28]
 801118e:	4618      	mov	r0, r3
 8011190:	f7fd fabe 	bl	800e710 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 8011194:	4602      	mov	r2, r0
 8011196:	69fb      	ldr	r3, [r7, #28]
 8011198:	4293      	cmp	r3, r2
 801119a:	bf34      	ite	cc
 801119c:	2301      	movcc	r3, #1
 801119e:	2300      	movcs	r3, #0
 80111a0:	b2db      	uxtb	r3, r3
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	d040      	beq.n	8011228 <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0xb0>
       subgraph_idx++) {
    current_subgraph_index_ = subgraph_idx;
 80111a6:	69fa      	ldr	r2, [r7, #28]
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	615a      	str	r2, [r3, #20]
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	689b      	ldr	r3, [r3, #8]
 80111b0:	69fa      	ldr	r2, [r7, #28]
 80111b2:	4611      	mov	r1, r2
 80111b4:	4618      	mov	r0, r3
 80111b6:	f7fd fa66 	bl	800e686 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
 80111ba:	6138      	str	r0, [r7, #16]
    for (size_t i = 0; i < operators_size; ++i) {
 80111bc:	2300      	movs	r3, #0
 80111be:	61bb      	str	r3, [r7, #24]
 80111c0:	69ba      	ldr	r2, [r7, #24]
 80111c2:	693b      	ldr	r3, [r7, #16]
 80111c4:	429a      	cmp	r2, r3
 80111c6:	d22b      	bcs.n	8011220 <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0xa8>
      TfLiteNode* node =
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	691a      	ldr	r2, [r3, #16]
 80111cc:	69fb      	ldr	r3, [r7, #28]
 80111ce:	00db      	lsls	r3, r3, #3
 80111d0:	4413      	add	r3, r2
 80111d2:	681a      	ldr	r2, [r3, #0]
 80111d4:	69bb      	ldr	r3, [r7, #24]
 80111d6:	212c      	movs	r1, #44	; 0x2c
 80111d8:	fb01 f303 	mul.w	r3, r1, r3
 80111dc:	4413      	add	r3, r2
      TfLiteNode* node =
 80111de:	60fb      	str	r3, [r7, #12]
      const TfLiteRegistration* registration =
          subgraph_allocations_[subgraph_idx]
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	691a      	ldr	r2, [r3, #16]
 80111e4:	69fb      	ldr	r3, [r7, #28]
 80111e6:	00db      	lsls	r3, r3, #3
 80111e8:	4413      	add	r3, r2
              .node_and_registrations[i]
 80111ea:	681a      	ldr	r2, [r3, #0]
 80111ec:	69bb      	ldr	r3, [r7, #24]
 80111ee:	212c      	movs	r1, #44	; 0x2c
 80111f0:	fb01 f303 	mul.w	r3, r1, r3
 80111f4:	4413      	add	r3, r2
      const TfLiteRegistration* registration =
 80111f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80111f8:	60bb      	str	r3, [r7, #8]
              .registration;
      // registration is allocated outside the interpreter, so double check to
      // make sure it's not nullptr;
      if (registration != nullptr && registration->free != nullptr) {
 80111fa:	68bb      	ldr	r3, [r7, #8]
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	d00b      	beq.n	8011218 <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0xa0>
 8011200:	68bb      	ldr	r3, [r7, #8]
 8011202:	685b      	ldr	r3, [r3, #4]
 8011204:	2b00      	cmp	r3, #0
 8011206:	d007      	beq.n	8011218 <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0xa0>
        registration->free(context_, node->user_data);
 8011208:	68bb      	ldr	r3, [r7, #8]
 801120a:	685b      	ldr	r3, [r3, #4]
 801120c:	687a      	ldr	r2, [r7, #4]
 801120e:	6850      	ldr	r0, [r2, #4]
 8011210:	68fa      	ldr	r2, [r7, #12]
 8011212:	6912      	ldr	r2, [r2, #16]
 8011214:	4611      	mov	r1, r2
 8011216:	4798      	blx	r3
    for (size_t i = 0; i < operators_size; ++i) {
 8011218:	69bb      	ldr	r3, [r7, #24]
 801121a:	3301      	adds	r3, #1
 801121c:	61bb      	str	r3, [r7, #24]
 801121e:	e7cf      	b.n	80111c0 <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0x48>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 8011220:	69fb      	ldr	r3, [r7, #28]
 8011222:	3301      	adds	r3, #1
 8011224:	61fb      	str	r3, [r7, #28]
 8011226:	e7b0      	b.n	801118a <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0x12>
      }
    }
  }
  current_subgraph_index_ = previous_subgraph_idx;
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	697a      	ldr	r2, [r7, #20]
 801122c:	615a      	str	r2, [r3, #20]

  return kTfLiteOk;
 801122e:	2300      	movs	r3, #0
}
 8011230:	4618      	mov	r0, r3
 8011232:	3720      	adds	r7, #32
 8011234:	46bd      	mov	sp, r7
 8011236:	bd80      	pop	{r7, pc}

08011238 <_ZN6tflite10MicroGraph14InvokeSubgraphEi>:

TfLiteStatus MicroGraph::InvokeSubgraph(int subgraph_idx) {
 8011238:	b5b0      	push	{r4, r5, r7, lr}
 801123a:	b08a      	sub	sp, #40	; 0x28
 801123c:	af00      	add	r7, sp, #0
 801123e:	6078      	str	r0, [r7, #4]
 8011240:	6039      	str	r1, [r7, #0]
 8011242:	2400      	movs	r4, #0
  int previous_subgraph_idx = current_subgraph_index_;
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	695b      	ldr	r3, [r3, #20]
 8011248:	623b      	str	r3, [r7, #32]
  current_subgraph_index_ = subgraph_idx;
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	683a      	ldr	r2, [r7, #0]
 801124e:	615a      	str	r2, [r3, #20]

  if (static_cast<size_t>(subgraph_idx) >= subgraphs_->size()) {
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	69db      	ldr	r3, [r3, #28]
 8011254:	4618      	mov	r0, r3
 8011256:	f7fd fa5b 	bl	800e710 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 801125a:	4602      	mov	r2, r0
 801125c:	683b      	ldr	r3, [r7, #0]
 801125e:	429a      	cmp	r2, r3
 8011260:	bf94      	ite	ls
 8011262:	2301      	movls	r3, #1
 8011264:	2300      	movhi	r3, #0
 8011266:	b2db      	uxtb	r3, r3
 8011268:	2b00      	cmp	r3, #0
 801126a:	d00c      	beq.n	8011286 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x4e>
    MicroPrintf("Accessing subgraph %d but only %d subgraphs found",
                subgraph_idx, subgraphs_->size());
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	69db      	ldr	r3, [r3, #28]
    MicroPrintf("Accessing subgraph %d but only %d subgraphs found",
 8011270:	4618      	mov	r0, r3
 8011272:	f7fd fa4d 	bl	800e710 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 8011276:	4603      	mov	r3, r0
 8011278:	461a      	mov	r2, r3
 801127a:	6839      	ldr	r1, [r7, #0]
 801127c:	483c      	ldr	r0, [pc, #240]	; (8011370 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x138>)
 801127e:	f7ff fdd7 	bl	8010e30 <_Z11MicroPrintfPKcz>
    return kTfLiteError;
 8011282:	2401      	movs	r4, #1
 8011284:	e06e      	b.n	8011364 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x12c>
  }
  uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	689b      	ldr	r3, [r3, #8]
 801128a:	6839      	ldr	r1, [r7, #0]
 801128c:	4618      	mov	r0, r3
 801128e:	f7fd f9fa 	bl	800e686 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
 8011292:	61f8      	str	r0, [r7, #28]
  for (size_t i = 0; i < operators_size; ++i) {
 8011294:	2300      	movs	r3, #0
 8011296:	627b      	str	r3, [r7, #36]	; 0x24
 8011298:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801129a:	69fb      	ldr	r3, [r7, #28]
 801129c:	429a      	cmp	r2, r3
 801129e:	d25d      	bcs.n	801135c <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x124>
    TfLiteNode* node =
        &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	691a      	ldr	r2, [r3, #16]
 80112a4:	683b      	ldr	r3, [r7, #0]
 80112a6:	00db      	lsls	r3, r3, #3
 80112a8:	4413      	add	r3, r2
 80112aa:	681a      	ldr	r2, [r3, #0]
 80112ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112ae:	212c      	movs	r1, #44	; 0x2c
 80112b0:	fb01 f303 	mul.w	r3, r1, r3
 80112b4:	4413      	add	r3, r2
    TfLiteNode* node =
 80112b6:	61bb      	str	r3, [r7, #24]
    const TfLiteRegistration* registration = subgraph_allocations_[subgraph_idx]
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	691a      	ldr	r2, [r3, #16]
 80112bc:	683b      	ldr	r3, [r7, #0]
 80112be:	00db      	lsls	r3, r3, #3
 80112c0:	4413      	add	r3, r2
                                                 .node_and_registrations[i]
 80112c2:	681a      	ldr	r2, [r3, #0]
 80112c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112c6:	212c      	movs	r1, #44	; 0x2c
 80112c8:	fb01 f303 	mul.w	r3, r1, r3
 80112cc:	4413      	add	r3, r2
    const TfLiteRegistration* registration = subgraph_allocations_[subgraph_idx]
 80112ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80112d0:	617b      	str	r3, [r7, #20]
// -DTF_LITE_STRIP_ERROR_STRINGS) because the function OpNameFromRegistration is
// only defined for builds with the error strings.
#if !defined(TF_LITE_STRIP_ERROR_STRINGS)
    ScopedMicroProfiler scoped_profiler(
        OpNameFromRegistration(registration),
        reinterpret_cast<MicroProfiler*>(context_->profiler));
 80112d2:	6978      	ldr	r0, [r7, #20]
 80112d4:	f7ff fe07 	bl	8010ee6 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
 80112d8:	4601      	mov	r1, r0
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	685b      	ldr	r3, [r3, #4]
 80112de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80112e0:	f107 0308 	add.w	r3, r7, #8
 80112e4:	4618      	mov	r0, r3
 80112e6:	f7ff fdc4 	bl	8010e72 <_ZN6tflite19ScopedMicroProfilerC1EPKcPNS_13MicroProfilerE>
#endif

    TFLITE_DCHECK(registration->invoke);
 80112ea:	697b      	ldr	r3, [r7, #20]
 80112ec:	68db      	ldr	r3, [r3, #12]
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	d101      	bne.n	80112f6 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0xbe>
 80112f2:	f015 fd04 	bl	8026cfe <abort>
    TfLiteStatus invoke_status = registration->invoke(context_, node);
 80112f6:	697b      	ldr	r3, [r7, #20]
 80112f8:	68db      	ldr	r3, [r3, #12]
 80112fa:	687a      	ldr	r2, [r7, #4]
 80112fc:	6852      	ldr	r2, [r2, #4]
 80112fe:	69b9      	ldr	r1, [r7, #24]
 8011300:	4610      	mov	r0, r2
 8011302:	4798      	blx	r3
 8011304:	4603      	mov	r3, r0
 8011306:	74fb      	strb	r3, [r7, #19]

    // All TfLiteTensor structs used in the kernel are allocated from temp
    // memory in the allocator. This creates a chain of allocations in the
    // temp section. The call below resets the chain of allocations to
    // prepare for the next call.
    allocator_->ResetTempAllocations();
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	68da      	ldr	r2, [r3, #12]
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	68db      	ldr	r3, [r3, #12]
 8011310:	681b      	ldr	r3, [r3, #0]
 8011312:	3308      	adds	r3, #8
 8011314:	681b      	ldr	r3, [r3, #0]
 8011316:	4610      	mov	r0, r2
 8011318:	4798      	blx	r3

    if (invoke_status == kTfLiteError) {
 801131a:	7cfb      	ldrb	r3, [r7, #19]
 801131c:	2b01      	cmp	r3, #1
 801131e:	d10b      	bne.n	8011338 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x100>
      MicroPrintf("Node %s (number %d) failed to invoke with status %d",
 8011320:	6978      	ldr	r0, [r7, #20]
 8011322:	f7ff fde0 	bl	8010ee6 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
 8011326:	4601      	mov	r1, r0
 8011328:	7cfb      	ldrb	r3, [r7, #19]
 801132a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801132c:	4811      	ldr	r0, [pc, #68]	; (8011374 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x13c>)
 801132e:	f7ff fd7f 	bl	8010e30 <_Z11MicroPrintfPKcz>
                  OpNameFromRegistration(registration), i, invoke_status);
      return kTfLiteError;
 8011332:	2401      	movs	r4, #1
 8011334:	2500      	movs	r5, #0
 8011336:	e006      	b.n	8011346 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x10e>
    } else if (invoke_status != kTfLiteOk) {
 8011338:	7cfb      	ldrb	r3, [r7, #19]
 801133a:	2b00      	cmp	r3, #0
 801133c:	d002      	beq.n	8011344 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x10c>
      return invoke_status;
 801133e:	7cfc      	ldrb	r4, [r7, #19]
 8011340:	2500      	movs	r5, #0
 8011342:	e000      	b.n	8011346 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x10e>
        reinterpret_cast<MicroProfiler*>(context_->profiler));
 8011344:	2501      	movs	r5, #1
 8011346:	f107 0308 	add.w	r3, r7, #8
 801134a:	4618      	mov	r0, r3
 801134c:	f7ff fdb3 	bl	8010eb6 <_ZN6tflite19ScopedMicroProfilerD1Ev>
 8011350:	2d01      	cmp	r5, #1
 8011352:	d107      	bne.n	8011364 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x12c>
  for (size_t i = 0; i < operators_size; ++i) {
 8011354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011356:	3301      	adds	r3, #1
 8011358:	627b      	str	r3, [r7, #36]	; 0x24
 801135a:	e79d      	b.n	8011298 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x60>
    }
  }
  current_subgraph_index_ = previous_subgraph_idx;
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	6a3a      	ldr	r2, [r7, #32]
 8011360:	615a      	str	r2, [r3, #20]
  return kTfLiteOk;
 8011362:	2400      	movs	r4, #0
 8011364:	4623      	mov	r3, r4
}
 8011366:	4618      	mov	r0, r3
 8011368:	3728      	adds	r7, #40	; 0x28
 801136a:	46bd      	mov	sp, r7
 801136c:	bdb0      	pop	{r4, r5, r7, pc}
 801136e:	bf00      	nop
 8011370:	0802ad30 	.word	0x0802ad30
 8011374:	0802ad64 	.word	0x0802ad64

08011378 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv>:

TfLiteStatus MicroGraph::ResetVariableTensors() {
 8011378:	b580      	push	{r7, lr}
 801137a:	b08a      	sub	sp, #40	; 0x28
 801137c:	af00      	add	r7, sp, #0
 801137e:	6078      	str	r0, [r7, #4]
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 8011380:	2300      	movs	r3, #0
 8011382:	627b      	str	r3, [r7, #36]	; 0x24
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	69db      	ldr	r3, [r3, #28]
 8011388:	4618      	mov	r0, r3
 801138a:	f7fd f9c1 	bl	800e710 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 801138e:	4602      	mov	r2, r0
 8011390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011392:	4293      	cmp	r3, r2
 8011394:	bf34      	ite	cc
 8011396:	2301      	movcc	r3, #1
 8011398:	2300      	movcs	r3, #0
 801139a:	b2db      	uxtb	r3, r3
 801139c:	2b00      	cmp	r3, #0
 801139e:	d077      	beq.n	8011490 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x118>
       subgraph_idx++) {
    const SubGraph* subgraph = (*subgraphs_)[subgraph_idx];
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	69db      	ldr	r3, [r3, #28]
 80113a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80113a6:	4618      	mov	r0, r3
 80113a8:	f7ff fab4 	bl	8010914 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEEixEm>
 80113ac:	61b8      	str	r0, [r7, #24]
    for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 80113ae:	2300      	movs	r3, #0
 80113b0:	623b      	str	r3, [r7, #32]
 80113b2:	69b8      	ldr	r0, [r7, #24]
 80113b4:	f7fd fcc1 	bl	800ed3a <_ZNK6tflite8SubGraph7tensorsEv>
 80113b8:	4603      	mov	r3, r0
 80113ba:	4618      	mov	r0, r3
 80113bc:	f7ff f9e8 	bl	8010790 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 80113c0:	4602      	mov	r2, r0
 80113c2:	6a3b      	ldr	r3, [r7, #32]
 80113c4:	4293      	cmp	r3, r2
 80113c6:	bf34      	ite	cc
 80113c8:	2301      	movcc	r3, #1
 80113ca:	2300      	movcs	r3, #0
 80113cc:	b2db      	uxtb	r3, r3
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d05a      	beq.n	8011488 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x110>
      auto* tensor = subgraph->tensors()->Get(i);
 80113d2:	69b8      	ldr	r0, [r7, #24]
 80113d4:	f7fd fcb1 	bl	800ed3a <_ZNK6tflite8SubGraph7tensorsEv>
 80113d8:	4603      	mov	r3, r0
 80113da:	6a39      	ldr	r1, [r7, #32]
 80113dc:	4618      	mov	r0, r3
 80113de:	f7ff f9e5 	bl	80107ac <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 80113e2:	6178      	str	r0, [r7, #20]
      if (tensor->is_variable()) {
 80113e4:	6978      	ldr	r0, [r7, #20]
 80113e6:	f7fd fc78 	bl	800ecda <_ZNK6tflite6Tensor11is_variableEv>
 80113ea:	4603      	mov	r3, r0
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d047      	beq.n	8011480 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x108>
        size_t buffer_size;
        TF_LITE_ENSURE_STATUS(TfLiteEvalTensorByteLength(
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	691a      	ldr	r2, [r3, #16]
 80113f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113f6:	00db      	lsls	r3, r3, #3
 80113f8:	4413      	add	r3, r2
 80113fa:	6859      	ldr	r1, [r3, #4]
 80113fc:	6a3a      	ldr	r2, [r7, #32]
 80113fe:	4613      	mov	r3, r2
 8011400:	005b      	lsls	r3, r3, #1
 8011402:	4413      	add	r3, r2
 8011404:	009b      	lsls	r3, r3, #2
 8011406:	440b      	add	r3, r1
 8011408:	f107 020c 	add.w	r2, r7, #12
 801140c:	4611      	mov	r1, r2
 801140e:	4618      	mov	r0, r3
 8011410:	f7fd fbcf 	bl	800ebb2 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
 8011414:	4603      	mov	r3, r0
 8011416:	74fb      	strb	r3, [r7, #19]
 8011418:	7cfb      	ldrb	r3, [r7, #19]
 801141a:	2b00      	cmp	r3, #0
 801141c:	d001      	beq.n	8011422 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xaa>
 801141e:	7cfb      	ldrb	r3, [r7, #19]
 8011420:	e037      	b.n	8011492 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x11a>
            &subgraph_allocations_[subgraph_idx].tensors[i], &buffer_size));

        int value = 0;
 8011422:	2300      	movs	r3, #0
 8011424:	61fb      	str	r3, [r7, #28]
        if (tensor->type() == tflite::TensorType_INT8) {
 8011426:	6978      	ldr	r0, [r7, #20]
 8011428:	f7fd fa22 	bl	800e870 <_ZNK6tflite6Tensor4typeEv>
 801142c:	4603      	mov	r3, r0
 801142e:	2b09      	cmp	r3, #9
 8011430:	bf0c      	ite	eq
 8011432:	2301      	moveq	r3, #1
 8011434:	2300      	movne	r3, #0
 8011436:	b2db      	uxtb	r3, r3
 8011438:	2b00      	cmp	r3, #0
 801143a:	d00f      	beq.n	801145c <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xe4>
          value = tensor->quantization()->zero_point()->Get(0);
 801143c:	6978      	ldr	r0, [r7, #20]
 801143e:	f7fd fc3e 	bl	800ecbe <_ZNK6tflite6Tensor12quantizationEv>
 8011442:	4603      	mov	r3, r0
 8011444:	4618      	mov	r0, r3
 8011446:	f7fd fc0e 	bl	800ec66 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 801144a:	4603      	mov	r3, r0
 801144c:	2100      	movs	r1, #0
 801144e:	4618      	mov	r0, r3
 8011450:	f7ff f976 	bl	8010740 <_ZNK11flatbuffers6VectorIxE3GetEm>
 8011454:	4602      	mov	r2, r0
 8011456:	460b      	mov	r3, r1
 8011458:	4613      	mov	r3, r2
 801145a:	61fb      	str	r3, [r7, #28]
        }
        memset(subgraph_allocations_[subgraph_idx].tensors[i].data.raw, value,
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	691a      	ldr	r2, [r3, #16]
 8011460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011462:	00db      	lsls	r3, r3, #3
 8011464:	4413      	add	r3, r2
 8011466:	6859      	ldr	r1, [r3, #4]
 8011468:	6a3a      	ldr	r2, [r7, #32]
 801146a:	4613      	mov	r3, r2
 801146c:	005b      	lsls	r3, r3, #1
 801146e:	4413      	add	r3, r2
 8011470:	009b      	lsls	r3, r3, #2
 8011472:	440b      	add	r3, r1
 8011474:	681b      	ldr	r3, [r3, #0]
 8011476:	68fa      	ldr	r2, [r7, #12]
 8011478:	69f9      	ldr	r1, [r7, #28]
 801147a:	4618      	mov	r0, r3
 801147c:	f015 fcde 	bl	8026e3c <memset>
    for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 8011480:	6a3b      	ldr	r3, [r7, #32]
 8011482:	3301      	adds	r3, #1
 8011484:	623b      	str	r3, [r7, #32]
 8011486:	e794      	b.n	80113b2 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x3a>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 8011488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801148a:	3301      	adds	r3, #1
 801148c:	627b      	str	r3, [r7, #36]	; 0x24
 801148e:	e779      	b.n	8011384 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xc>
               buffer_size);
      }
    }
  }

  return kTfLiteOk;
 8011490:	2300      	movs	r3, #0
}
 8011492:	4618      	mov	r0, r3
 8011494:	3728      	adds	r7, #40	; 0x28
 8011496:	46bd      	mov	sp, r7
 8011498:	bd80      	pop	{r7, pc}

0801149a <_ZN6tflite10MicroGraph12NumSubgraphsEv>:

int MicroGraph::NumSubgraphs() { return model_->subgraphs()->size(); }
 801149a:	b580      	push	{r7, lr}
 801149c:	b082      	sub	sp, #8
 801149e:	af00      	add	r7, sp, #0
 80114a0:	6078      	str	r0, [r7, #4]
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	689b      	ldr	r3, [r3, #8]
 80114a6:	4618      	mov	r0, r3
 80114a8:	f7fd f8c2 	bl	800e630 <_ZNK6tflite5Model9subgraphsEv>
 80114ac:	4603      	mov	r3, r0
 80114ae:	4618      	mov	r0, r3
 80114b0:	f7fd f92e 	bl	800e710 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 80114b4:	4603      	mov	r3, r0
 80114b6:	4618      	mov	r0, r3
 80114b8:	3708      	adds	r7, #8
 80114ba:	46bd      	mov	sp, r7
 80114bc:	bd80      	pop	{r7, pc}

080114be <_ZN6tflite10MicroGraph22SetSubgraphAllocationsEPNS_19SubgraphAllocationsE>:

void MicroGraph::SetSubgraphAllocations(
    SubgraphAllocations* subgraph_allocations) {
 80114be:	b480      	push	{r7}
 80114c0:	b083      	sub	sp, #12
 80114c2:	af00      	add	r7, sp, #0
 80114c4:	6078      	str	r0, [r7, #4]
 80114c6:	6039      	str	r1, [r7, #0]
  subgraph_allocations_ = subgraph_allocations;
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	683a      	ldr	r2, [r7, #0]
 80114cc:	611a      	str	r2, [r3, #16]
}
 80114ce:	bf00      	nop
 80114d0:	370c      	adds	r7, #12
 80114d2:	46bd      	mov	sp, r7
 80114d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114d8:	4770      	bx	lr

080114da <_ZN6tflite10MicroGraph17NumSubgraphInputsEi>:

size_t MicroGraph::NumSubgraphInputs(int subgraph_idx) {
 80114da:	b580      	push	{r7, lr}
 80114dc:	b082      	sub	sp, #8
 80114de:	af00      	add	r7, sp, #0
 80114e0:	6078      	str	r0, [r7, #4]
 80114e2:	6039      	str	r1, [r7, #0]
  return model_->subgraphs()->Get(subgraph_idx)->inputs()->size();
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	689b      	ldr	r3, [r3, #8]
 80114e8:	4618      	mov	r0, r3
 80114ea:	f7fd f8a1 	bl	800e630 <_ZNK6tflite5Model9subgraphsEv>
 80114ee:	4602      	mov	r2, r0
 80114f0:	683b      	ldr	r3, [r7, #0]
 80114f2:	4619      	mov	r1, r3
 80114f4:	4610      	mov	r0, r2
 80114f6:	f7fd f919 	bl	800e72c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 80114fa:	4603      	mov	r3, r0
 80114fc:	4618      	mov	r0, r3
 80114fe:	f7fd fc2a 	bl	800ed56 <_ZNK6tflite8SubGraph6inputsEv>
 8011502:	4603      	mov	r3, r0
 8011504:	4618      	mov	r0, r3
 8011506:	f7fa f969 	bl	800b7dc <_ZNK11flatbuffers6VectorIlE4sizeEv>
 801150a:	4603      	mov	r3, r0
}
 801150c:	4618      	mov	r0, r3
 801150e:	3708      	adds	r7, #8
 8011510:	46bd      	mov	sp, r7
 8011512:	bd80      	pop	{r7, pc}

08011514 <_ZN6tflite10MicroGraph16GetSubgraphInputEii>:

TfLiteEvalTensor* MicroGraph::GetSubgraphInput(int subgraph_idx,
                                               int input_idx) {
 8011514:	b580      	push	{r7, lr}
 8011516:	b086      	sub	sp, #24
 8011518:	af00      	add	r7, sp, #0
 801151a:	60f8      	str	r0, [r7, #12]
 801151c:	60b9      	str	r1, [r7, #8]
 801151e:	607a      	str	r2, [r7, #4]
  int tensor_idx =
      model_->subgraphs()->Get(subgraph_idx)->inputs()->Get(input_idx);
 8011520:	68fb      	ldr	r3, [r7, #12]
 8011522:	689b      	ldr	r3, [r3, #8]
 8011524:	4618      	mov	r0, r3
 8011526:	f7fd f883 	bl	800e630 <_ZNK6tflite5Model9subgraphsEv>
 801152a:	4602      	mov	r2, r0
 801152c:	68bb      	ldr	r3, [r7, #8]
 801152e:	4619      	mov	r1, r3
 8011530:	4610      	mov	r0, r2
 8011532:	f7fd f8fb 	bl	800e72c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 8011536:	4603      	mov	r3, r0
 8011538:	4618      	mov	r0, r3
 801153a:	f7fd fc0c 	bl	800ed56 <_ZNK6tflite8SubGraph6inputsEv>
 801153e:	4602      	mov	r2, r0
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	4619      	mov	r1, r3
 8011544:	4610      	mov	r0, r2
 8011546:	f7fa f957 	bl	800b7f8 <_ZNK11flatbuffers6VectorIlE3GetEm>
 801154a:	6178      	str	r0, [r7, #20]
  return &subgraph_allocations_[subgraph_idx].tensors[tensor_idx];
 801154c:	68fb      	ldr	r3, [r7, #12]
 801154e:	691a      	ldr	r2, [r3, #16]
 8011550:	68bb      	ldr	r3, [r7, #8]
 8011552:	00db      	lsls	r3, r3, #3
 8011554:	4413      	add	r3, r2
 8011556:	6859      	ldr	r1, [r3, #4]
 8011558:	697a      	ldr	r2, [r7, #20]
 801155a:	4613      	mov	r3, r2
 801155c:	005b      	lsls	r3, r3, #1
 801155e:	4413      	add	r3, r2
 8011560:	009b      	lsls	r3, r3, #2
 8011562:	440b      	add	r3, r1
}
 8011564:	4618      	mov	r0, r3
 8011566:	3718      	adds	r7, #24
 8011568:	46bd      	mov	sp, r7
 801156a:	bd80      	pop	{r7, pc}

0801156c <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi>:

size_t MicroGraph::NumSubgraphOutputs(int subgraph_idx) {
 801156c:	b580      	push	{r7, lr}
 801156e:	b082      	sub	sp, #8
 8011570:	af00      	add	r7, sp, #0
 8011572:	6078      	str	r0, [r7, #4]
 8011574:	6039      	str	r1, [r7, #0]
  return model_->subgraphs()->Get(subgraph_idx)->outputs()->size();
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	689b      	ldr	r3, [r3, #8]
 801157a:	4618      	mov	r0, r3
 801157c:	f7fd f858 	bl	800e630 <_ZNK6tflite5Model9subgraphsEv>
 8011580:	4602      	mov	r2, r0
 8011582:	683b      	ldr	r3, [r7, #0]
 8011584:	4619      	mov	r1, r3
 8011586:	4610      	mov	r0, r2
 8011588:	f7fd f8d0 	bl	800e72c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 801158c:	4603      	mov	r3, r0
 801158e:	4618      	mov	r0, r3
 8011590:	f7fd fbef 	bl	800ed72 <_ZNK6tflite8SubGraph7outputsEv>
 8011594:	4603      	mov	r3, r0
 8011596:	4618      	mov	r0, r3
 8011598:	f7fa f920 	bl	800b7dc <_ZNK11flatbuffers6VectorIlE4sizeEv>
 801159c:	4603      	mov	r3, r0
}
 801159e:	4618      	mov	r0, r3
 80115a0:	3708      	adds	r7, #8
 80115a2:	46bd      	mov	sp, r7
 80115a4:	bd80      	pop	{r7, pc}

080115a6 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii>:

TfLiteEvalTensor* MicroGraph::GetSubgraphOutput(int subgraph_idx,
                                                int output_idx) {
 80115a6:	b580      	push	{r7, lr}
 80115a8:	b086      	sub	sp, #24
 80115aa:	af00      	add	r7, sp, #0
 80115ac:	60f8      	str	r0, [r7, #12]
 80115ae:	60b9      	str	r1, [r7, #8]
 80115b0:	607a      	str	r2, [r7, #4]
  int tensor_idx =
      model_->subgraphs()->Get(subgraph_idx)->outputs()->Get(output_idx);
 80115b2:	68fb      	ldr	r3, [r7, #12]
 80115b4:	689b      	ldr	r3, [r3, #8]
 80115b6:	4618      	mov	r0, r3
 80115b8:	f7fd f83a 	bl	800e630 <_ZNK6tflite5Model9subgraphsEv>
 80115bc:	4602      	mov	r2, r0
 80115be:	68bb      	ldr	r3, [r7, #8]
 80115c0:	4619      	mov	r1, r3
 80115c2:	4610      	mov	r0, r2
 80115c4:	f7fd f8b2 	bl	800e72c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 80115c8:	4603      	mov	r3, r0
 80115ca:	4618      	mov	r0, r3
 80115cc:	f7fd fbd1 	bl	800ed72 <_ZNK6tflite8SubGraph7outputsEv>
 80115d0:	4602      	mov	r2, r0
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	4619      	mov	r1, r3
 80115d6:	4610      	mov	r0, r2
 80115d8:	f7fa f90e 	bl	800b7f8 <_ZNK11flatbuffers6VectorIlE3GetEm>
 80115dc:	6178      	str	r0, [r7, #20]
  return &subgraph_allocations_[subgraph_idx].tensors[tensor_idx];
 80115de:	68fb      	ldr	r3, [r7, #12]
 80115e0:	691a      	ldr	r2, [r3, #16]
 80115e2:	68bb      	ldr	r3, [r7, #8]
 80115e4:	00db      	lsls	r3, r3, #3
 80115e6:	4413      	add	r3, r2
 80115e8:	6859      	ldr	r1, [r3, #4]
 80115ea:	697a      	ldr	r2, [r7, #20]
 80115ec:	4613      	mov	r3, r2
 80115ee:	005b      	lsls	r3, r3, #1
 80115f0:	4413      	add	r3, r2
 80115f2:	009b      	lsls	r3, r3, #2
 80115f4:	440b      	add	r3, r1
}
 80115f6:	4618      	mov	r0, r3
 80115f8:	3718      	adds	r7, #24
 80115fa:	46bd      	mov	sp, r7
 80115fc:	bd80      	pop	{r7, pc}

080115fe <_ZNK6tflite8Operator12opcode_indexEv>:
  uint32_t opcode_index() const {
 80115fe:	b580      	push	{r7, lr}
 8011600:	b082      	sub	sp, #8
 8011602:	af00      	add	r7, sp, #0
 8011604:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_OPCODE_INDEX, 0);
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	2200      	movs	r2, #0
 801160a:	2104      	movs	r1, #4
 801160c:	4618      	mov	r0, r3
 801160e:	f7fe ffe6 	bl	80105de <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 8011612:	4603      	mov	r3, r0
  }
 8011614:	4618      	mov	r0, r3
 8011616:	3708      	adds	r7, #8
 8011618:	46bd      	mov	sp, r7
 801161a:	bd80      	pop	{r7, pc}

0801161c <_ZNK6tflite8Operator14custom_optionsEv>:
  const flatbuffers::Vector<uint8_t> *custom_options() const {
 801161c:	b580      	push	{r7, lr}
 801161e:	b082      	sub	sp, #8
 8011620:	af00      	add	r7, sp, #0
 8011622:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_CUSTOM_OPTIONS);
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	210e      	movs	r1, #14
 8011628:	4618      	mov	r0, r3
 801162a:	f7fe ffa8 	bl	801057e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>
 801162e:	4603      	mov	r3, r0
  }
 8011630:	4618      	mov	r0, r3
 8011632:	3708      	adds	r7, #8
 8011634:	46bd      	mov	sp, r7
 8011636:	bd80      	pop	{r7, pc}

08011638 <_ZNK6tflite8Operator13intermediatesEv>:
  const flatbuffers::Vector<int32_t> *intermediates() const {
 8011638:	b580      	push	{r7, lr}
 801163a:	b082      	sub	sp, #8
 801163c:	af00      	add	r7, sp, #0
 801163e:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_INTERMEDIATES);
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	2114      	movs	r1, #20
 8011644:	4618      	mov	r0, r3
 8011646:	f7fa f867 	bl	800b718 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 801164a:	4603      	mov	r3, r0
  }
 801164c:	4618      	mov	r0, r3
 801164e:	3708      	adds	r7, #8
 8011650:	46bd      	mov	sp, r7
 8011652:	bd80      	pop	{r7, pc}

08011654 <_ZNK6tflite5Model14operator_codesEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::OperatorCode>> *operator_codes() const {
 8011654:	b580      	push	{r7, lr}
 8011656:	b082      	sub	sp, #8
 8011658:	af00      	add	r7, sp, #0
 801165a:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::OperatorCode>> *>(VT_OPERATOR_CODES);
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	2106      	movs	r1, #6
 8011660:	4618      	mov	r0, r3
 8011662:	f000 fd30 	bl	80120c6 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t>
 8011666:	4603      	mov	r3, r0
  }
 8011668:	4618      	mov	r0, r3
 801166a:	3708      	adds	r7, #8
 801166c:	46bd      	mov	sp, r7
 801166e:	bd80      	pop	{r7, pc}

08011670 <_ZN6tflite10MicroGraph23GetCurrentSubgraphIndexEv>:
  // allowing MicroGraph to init / prepare / invoke subgraphs in the model.
  void SetSubgraphAllocations(SubgraphAllocations* subgraph_allocations);

  // Get the current subgraph index. Within an on operator, this is guaranteed
  // to be the subgraph of that operator.
  int GetCurrentSubgraphIndex() { return current_subgraph_index_; }
 8011670:	b480      	push	{r7}
 8011672:	b083      	sub	sp, #12
 8011674:	af00      	add	r7, sp, #0
 8011676:	6078      	str	r0, [r7, #4]
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	695b      	ldr	r3, [r3, #20]
 801167c:	4618      	mov	r0, r3
 801167e:	370c      	adds	r7, #12
 8011680:	46bd      	mov	sp, r7
 8011682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011686:	4770      	bx	lr

08011688 <_ZN6tflite10MicroGraph14GetAllocationsEv>:

  // Gets the list of alloctions for each subgraph. This is the source of truth
  // for all per-subgraph allocation data.
  SubgraphAllocations* GetAllocations() { return subgraph_allocations_; }
 8011688:	b480      	push	{r7}
 801168a:	b083      	sub	sp, #12
 801168c:	af00      	add	r7, sp, #0
 801168e:	6078      	str	r0, [r7, #4]
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	691b      	ldr	r3, [r3, #16]
 8011694:	4618      	mov	r0, r3
 8011696:	370c      	adds	r7, #12
 8011698:	46bd      	mov	sp, r7
 801169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801169e:	4770      	bx	lr

080116a0 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv>:
  // values other than kTfLiteOk and kTfLiteError.
  // TODO(b/149795762): Add this to the TfLiteStatus enum.
  TfLiteStatus Invoke();

  TfLiteTensor* input(size_t index);
  size_t inputs_size() const {
 80116a0:	b580      	push	{r7, lr}
 80116a2:	b082      	sub	sp, #8
 80116a4:	af00      	add	r7, sp, #0
 80116a6:	6078      	str	r0, [r7, #4]
    return model_->subgraphs()->Get(0)->inputs()->size();
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	681b      	ldr	r3, [r3, #0]
 80116ac:	4618      	mov	r0, r3
 80116ae:	f7fc ffbf 	bl	800e630 <_ZNK6tflite5Model9subgraphsEv>
 80116b2:	4603      	mov	r3, r0
 80116b4:	2100      	movs	r1, #0
 80116b6:	4618      	mov	r0, r3
 80116b8:	f7fd f838 	bl	800e72c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 80116bc:	4603      	mov	r3, r0
 80116be:	4618      	mov	r0, r3
 80116c0:	f7fd fb49 	bl	800ed56 <_ZNK6tflite8SubGraph6inputsEv>
 80116c4:	4603      	mov	r3, r0
 80116c6:	4618      	mov	r0, r3
 80116c8:	f7fa f888 	bl	800b7dc <_ZNK11flatbuffers6VectorIlE4sizeEv>
 80116cc:	4603      	mov	r3, r0
  }
 80116ce:	4618      	mov	r0, r3
 80116d0:	3708      	adds	r7, #8
 80116d2:	46bd      	mov	sp, r7
 80116d4:	bd80      	pop	{r7, pc}

080116d6 <_ZNK6tflite16MicroInterpreter6inputsEv>:
  const flatbuffers::Vector<int32_t>& inputs() const {
 80116d6:	b580      	push	{r7, lr}
 80116d8:	b082      	sub	sp, #8
 80116da:	af00      	add	r7, sp, #0
 80116dc:	6078      	str	r0, [r7, #4]
    return *model_->subgraphs()->Get(0)->inputs();
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	681b      	ldr	r3, [r3, #0]
 80116e2:	4618      	mov	r0, r3
 80116e4:	f7fc ffa4 	bl	800e630 <_ZNK6tflite5Model9subgraphsEv>
 80116e8:	4603      	mov	r3, r0
 80116ea:	2100      	movs	r1, #0
 80116ec:	4618      	mov	r0, r3
 80116ee:	f7fd f81d 	bl	800e72c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 80116f2:	4603      	mov	r3, r0
 80116f4:	4618      	mov	r0, r3
 80116f6:	f7fd fb2e 	bl	800ed56 <_ZNK6tflite8SubGraph6inputsEv>
 80116fa:	4603      	mov	r3, r0
  }
 80116fc:	4618      	mov	r0, r3
 80116fe:	3708      	adds	r7, #8
 8011700:	46bd      	mov	sp, r7
 8011702:	bd80      	pop	{r7, pc}

08011704 <_ZNK6tflite16MicroInterpreter12outputs_sizeEv>:
    }
    return nullptr;
  }

  TfLiteTensor* output(size_t index);
  size_t outputs_size() const {
 8011704:	b580      	push	{r7, lr}
 8011706:	b082      	sub	sp, #8
 8011708:	af00      	add	r7, sp, #0
 801170a:	6078      	str	r0, [r7, #4]
    return model_->subgraphs()->Get(0)->outputs()->size();
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	681b      	ldr	r3, [r3, #0]
 8011710:	4618      	mov	r0, r3
 8011712:	f7fc ff8d 	bl	800e630 <_ZNK6tflite5Model9subgraphsEv>
 8011716:	4603      	mov	r3, r0
 8011718:	2100      	movs	r1, #0
 801171a:	4618      	mov	r0, r3
 801171c:	f7fd f806 	bl	800e72c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 8011720:	4603      	mov	r3, r0
 8011722:	4618      	mov	r0, r3
 8011724:	f7fd fb25 	bl	800ed72 <_ZNK6tflite8SubGraph7outputsEv>
 8011728:	4603      	mov	r3, r0
 801172a:	4618      	mov	r0, r3
 801172c:	f7fa f856 	bl	800b7dc <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8011730:	4603      	mov	r3, r0
  }
 8011732:	4618      	mov	r0, r3
 8011734:	3708      	adds	r7, #8
 8011736:	46bd      	mov	sp, r7
 8011738:	bd80      	pop	{r7, pc}

0801173a <_ZNK6tflite16MicroInterpreter7outputsEv>:
  const flatbuffers::Vector<int32_t>& outputs() const {
 801173a:	b580      	push	{r7, lr}
 801173c:	b082      	sub	sp, #8
 801173e:	af00      	add	r7, sp, #0
 8011740:	6078      	str	r0, [r7, #4]
    return *model_->subgraphs()->Get(0)->outputs();
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	681b      	ldr	r3, [r3, #0]
 8011746:	4618      	mov	r0, r3
 8011748:	f7fc ff72 	bl	800e630 <_ZNK6tflite5Model9subgraphsEv>
 801174c:	4603      	mov	r3, r0
 801174e:	2100      	movs	r1, #0
 8011750:	4618      	mov	r0, r3
 8011752:	f7fc ffeb 	bl	800e72c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 8011756:	4603      	mov	r3, r0
 8011758:	4618      	mov	r0, r3
 801175a:	f7fd fb0a 	bl	800ed72 <_ZNK6tflite8SubGraph7outputsEv>
 801175e:	4603      	mov	r3, r0
  }
 8011760:	4618      	mov	r0, r3
 8011762:	3708      	adds	r7, #8
 8011764:	46bd      	mov	sp, r7
 8011766:	bd80      	pop	{r7, pc}

08011768 <_ZN6tflite16MicroInterpreter18get_subgraph_indexEv>:
  // TODO(b/158263161): Consider switching to Create() function to enable better
  // error reporting during initialization.
  void Init(MicroProfiler* profiler);

  // Gets the current subgraph index used from within context methods.
  int get_subgraph_index() { return graph_.GetCurrentSubgraphIndex(); }
 8011768:	b580      	push	{r7, lr}
 801176a:	b082      	sub	sp, #8
 801176c:	af00      	add	r7, sp, #0
 801176e:	6078      	str	r0, [r7, #4]
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	336c      	adds	r3, #108	; 0x6c
 8011774:	4618      	mov	r0, r3
 8011776:	f7ff ff7b 	bl	8011670 <_ZN6tflite10MicroGraph23GetCurrentSubgraphIndexEv>
 801177a:	4603      	mov	r3, r0
 801177c:	4618      	mov	r0, r3
 801177e:	3708      	adds	r7, #8
 8011780:	46bd      	mov	sp, r7
 8011782:	bd80      	pop	{r7, pc}

08011784 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_22MicroResourceVariablesEPNS_13MicroProfilerE>:
#include "tensorflow/lite/schema/schema_generated.h"
#include "tensorflow/lite/schema/schema_utils.h"

namespace tflite {

MicroInterpreter::MicroInterpreter(const Model* model,
 8011784:	b580      	push	{r7, lr}
 8011786:	b086      	sub	sp, #24
 8011788:	af02      	add	r7, sp, #8
 801178a:	60f8      	str	r0, [r7, #12]
 801178c:	60b9      	str	r1, [r7, #8]
 801178e:	607a      	str	r2, [r7, #4]
 8011790:	603b      	str	r3, [r7, #0]

      graph_(&context_, model, &allocator_, resource_variables),
      tensors_allocated_(false),
      initialization_status_(kTfLiteError),
      input_tensors_(nullptr),
      output_tensors_(nullptr) {
 8011792:	68fb      	ldr	r3, [r7, #12]
 8011794:	68ba      	ldr	r2, [r7, #8]
 8011796:	601a      	str	r2, [r3, #0]
 8011798:	68fb      	ldr	r3, [r7, #12]
 801179a:	687a      	ldr	r2, [r7, #4]
 801179c:	605a      	str	r2, [r3, #4]
 801179e:	68fb      	ldr	r3, [r7, #12]
 80117a0:	69fa      	ldr	r2, [r7, #28]
 80117a2:	609a      	str	r2, [r3, #8]
 80117a4:	68fb      	ldr	r3, [r7, #12]
 80117a6:	330c      	adds	r3, #12
 80117a8:	225c      	movs	r2, #92	; 0x5c
 80117aa:	2100      	movs	r1, #0
 80117ac:	4618      	mov	r0, r3
 80117ae:	f015 fb45 	bl	8026e3c <memset>
      allocator_(*MicroAllocator::Create(tensor_arena, tensor_arena_size,
 80117b2:	69fa      	ldr	r2, [r7, #28]
 80117b4:	69b9      	ldr	r1, [r7, #24]
 80117b6:	6838      	ldr	r0, [r7, #0]
 80117b8:	f7fe f88e 	bl	800f8d8 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE>
 80117bc:	4602      	mov	r2, r0
      output_tensors_(nullptr) {
 80117be:	68fb      	ldr	r3, [r7, #12]
 80117c0:	669a      	str	r2, [r3, #104]	; 0x68
 80117c2:	68fb      	ldr	r3, [r7, #12]
 80117c4:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 80117c8:	68fb      	ldr	r3, [r7, #12]
 80117ca:	f103 010c 	add.w	r1, r3, #12
      graph_(&context_, model, &allocator_, resource_variables),
 80117ce:	68fb      	ldr	r3, [r7, #12]
 80117d0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
      output_tensors_(nullptr) {
 80117d2:	6a3b      	ldr	r3, [r7, #32]
 80117d4:	9300      	str	r3, [sp, #0]
 80117d6:	4613      	mov	r3, r2
 80117d8:	68ba      	ldr	r2, [r7, #8]
 80117da:	f7ff fb9b 	bl	8010f14 <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorEPNS_22MicroResourceVariablesE>
 80117de:	68fb      	ldr	r3, [r7, #12]
 80117e0:	2200      	movs	r2, #0
 80117e2:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 80117e6:	68fb      	ldr	r3, [r7, #12]
 80117e8:	2201      	movs	r2, #1
 80117ea:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
 80117ee:	68fb      	ldr	r3, [r7, #12]
 80117f0:	2200      	movs	r2, #0
 80117f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80117f6:	68fb      	ldr	r3, [r7, #12]
 80117f8:	2200      	movs	r2, #0
 80117fa:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 80117fe:	68fb      	ldr	r3, [r7, #12]
 8011800:	2200      	movs	r2, #0
 8011802:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  Init(profiler);
 8011806:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011808:	68f8      	ldr	r0, [r7, #12]
 801180a:	f000 f825 	bl	8011858 <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE>
}
 801180e:	68fb      	ldr	r3, [r7, #12]
 8011810:	4618      	mov	r0, r3
 8011812:	3710      	adds	r7, #16
 8011814:	46bd      	mov	sp, r7
 8011816:	bd80      	pop	{r7, pc}

08011818 <_ZN6tflite16MicroInterpreterD1Ev>:
      input_tensors_(nullptr),
      output_tensors_(nullptr) {
  Init(profiler);
}

MicroInterpreter::~MicroInterpreter() {
 8011818:	b580      	push	{r7, lr}
 801181a:	b082      	sub	sp, #8
 801181c:	af00      	add	r7, sp, #0
 801181e:	6078      	str	r0, [r7, #4]
  if (graph_.GetAllocations() != nullptr) {
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	336c      	adds	r3, #108	; 0x6c
 8011824:	4618      	mov	r0, r3
 8011826:	f7ff ff2f 	bl	8011688 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 801182a:	4603      	mov	r3, r0
 801182c:	2b00      	cmp	r3, #0
 801182e:	bf14      	ite	ne
 8011830:	2301      	movne	r3, #1
 8011832:	2300      	moveq	r3, #0
 8011834:	b2db      	uxtb	r3, r3
 8011836:	2b00      	cmp	r3, #0
 8011838:	d004      	beq.n	8011844 <_ZN6tflite16MicroInterpreterD1Ev+0x2c>
    graph_.FreeSubgraphs();
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	336c      	adds	r3, #108	; 0x6c
 801183e:	4618      	mov	r0, r3
 8011840:	f7ff fc9a 	bl	8011178 <_ZN6tflite10MicroGraph13FreeSubgraphsEv>
MicroInterpreter::~MicroInterpreter() {
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	336c      	adds	r3, #108	; 0x6c
 8011848:	4618      	mov	r0, r3
 801184a:	f7ff fb8f 	bl	8010f6c <_ZN6tflite10MicroGraphD1Ev>
  }
}
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	4618      	mov	r0, r3
 8011852:	3708      	adds	r7, #8
 8011854:	46bd      	mov	sp, r7
 8011856:	bd80      	pop	{r7, pc}

08011858 <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE>:

void MicroInterpreter::Init(MicroProfiler* profiler) {
 8011858:	b480      	push	{r7}
 801185a:	b083      	sub	sp, #12
 801185c:	af00      	add	r7, sp, #0
 801185e:	6078      	str	r0, [r7, #4]
 8011860:	6039      	str	r1, [r7, #0]
  context_.impl_ = static_cast<void*>(this);
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	687a      	ldr	r2, [r7, #4]
 8011866:	619a      	str	r2, [r3, #24]
  context_.ReportError = ReportOpError;
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	4a0d      	ldr	r2, [pc, #52]	; (80118a0 <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE+0x48>)
 801186c:	621a      	str	r2, [r3, #32]
  context_.GetTensor = GetTensor;
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	4a0c      	ldr	r2, [pc, #48]	; (80118a4 <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE+0x4c>)
 8011872:	65da      	str	r2, [r3, #92]	; 0x5c
  context_.ReportError = ReportOpError;
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	4a0a      	ldr	r2, [pc, #40]	; (80118a0 <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE+0x48>)
 8011878:	621a      	str	r2, [r3, #32]
  context_.GetTensor = GetTensor;
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	4a09      	ldr	r2, [pc, #36]	; (80118a4 <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE+0x4c>)
 801187e:	65da      	str	r2, [r3, #92]	; 0x5c
  context_.GetEvalTensor = GetEvalTensor;
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	4a09      	ldr	r2, [pc, #36]	; (80118a8 <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE+0x50>)
 8011884:	661a      	str	r2, [r3, #96]	; 0x60
  context_.profiler = profiler;
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	683a      	ldr	r2, [r7, #0]
 801188a:	641a      	str	r2, [r3, #64]	; 0x40

  initialization_status_ = kTfLiteOk;
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	2200      	movs	r2, #0
 8011890:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
}
 8011894:	bf00      	nop
 8011896:	370c      	adds	r7, #12
 8011898:	46bd      	mov	sp, r7
 801189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801189e:	4770      	bx	lr
 80118a0:	08011fd9 	.word	0x08011fd9
 80118a4:	08012011 	.word	0x08012011
 80118a8:	08012061 	.word	0x08012061

080118ac <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv>:

TfLiteStatus MicroInterpreter::PrepareNodeAndRegistrationDataFromFlatbuffer() {
 80118ac:	b5b0      	push	{r4, r5, r7, lr}
 80118ae:	b098      	sub	sp, #96	; 0x60
 80118b0:	af00      	add	r7, sp, #0
 80118b2:	6078      	str	r0, [r7, #4]
  for (int subgraph_idx = 0; subgraph_idx < graph_.NumSubgraphs();
 80118b4:	2300      	movs	r3, #0
 80118b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	336c      	adds	r3, #108	; 0x6c
 80118bc:	4618      	mov	r0, r3
 80118be:	f7ff fdec 	bl	801149a <_ZN6tflite10MicroGraph12NumSubgraphsEv>
 80118c2:	4602      	mov	r2, r0
 80118c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80118c6:	4293      	cmp	r3, r2
 80118c8:	bfb4      	ite	lt
 80118ca:	2301      	movlt	r3, #1
 80118cc:	2300      	movge	r3, #0
 80118ce:	b2db      	uxtb	r3, r3
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	f000 8189 	beq.w	8011be8 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x33c>
       subgraph_idx++) {
    const SubGraph* subgraph = model_->subgraphs()->Get(subgraph_idx);
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	681b      	ldr	r3, [r3, #0]
 80118da:	4618      	mov	r0, r3
 80118dc:	f7fc fea8 	bl	800e630 <_ZNK6tflite5Model9subgraphsEv>
 80118e0:	4602      	mov	r2, r0
 80118e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80118e4:	4619      	mov	r1, r3
 80118e6:	4610      	mov	r0, r2
 80118e8:	f7fc ff20 	bl	800e72c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 80118ec:	64f8      	str	r0, [r7, #76]	; 0x4c
    TFLITE_DCHECK(subgraph != nullptr);
 80118ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	d101      	bne.n	80118f8 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x4c>
 80118f4:	f015 fa03 	bl	8026cfe <abort>

    auto* opcodes = model_->operator_codes();
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	681b      	ldr	r3, [r3, #0]
 80118fc:	4618      	mov	r0, r3
 80118fe:	f7ff fea9 	bl	8011654 <_ZNK6tflite5Model14operator_codesEv>
 8011902:	64b8      	str	r0, [r7, #72]	; 0x48
    BuiltinDataAllocator* builtin_data_allocator =
        allocator_.GetBuiltinDataAllocator();
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011908:	4618      	mov	r0, r3
 801190a:	f7fe fe2c 	bl	8010566 <_ZN6tflite14MicroAllocator23GetBuiltinDataAllocatorEv>
 801190e:	6478      	str	r0, [r7, #68]	; 0x44
    uint32_t operators_size = NumSubgraphOperators(subgraph);
 8011910:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8011912:	f7fc fe9b 	bl	800e64c <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
 8011916:	6438      	str	r0, [r7, #64]	; 0x40
    for (size_t i = 0; i < operators_size; ++i) {
 8011918:	2300      	movs	r3, #0
 801191a:	65bb      	str	r3, [r7, #88]	; 0x58
 801191c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801191e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011920:	429a      	cmp	r2, r3
 8011922:	f080 815d 	bcs.w	8011be0 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x334>
      const auto* op = subgraph->operators()->Get(i);
 8011926:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8011928:	f7fc fe74 	bl	800e614 <_ZNK6tflite8SubGraph9operatorsEv>
 801192c:	4603      	mov	r3, r0
 801192e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8011930:	4618      	mov	r0, r3
 8011932:	f7fe ff61 	bl	80107f8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm>
 8011936:	63f8      	str	r0, [r7, #60]	; 0x3c
      const size_t index = op->opcode_index();
 8011938:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801193a:	f7ff fe60 	bl	80115fe <_ZNK6tflite8Operator12opcode_indexEv>
 801193e:	63b8      	str	r0, [r7, #56]	; 0x38
      if (index >= opcodes->size()) {
 8011940:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8011942:	f000 fbd0 	bl	80120e6 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4sizeEv>
 8011946:	4602      	mov	r2, r0
 8011948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801194a:	4293      	cmp	r3, r2
 801194c:	bf2c      	ite	cs
 801194e:	2301      	movcs	r3, #1
 8011950:	2300      	movcc	r3, #0
 8011952:	b2db      	uxtb	r3, r3
 8011954:	2b00      	cmp	r3, #0
 8011956:	d005      	beq.n	8011964 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xb8>
        MicroPrintf("Missing registration for opcode_index %d\n", index);
 8011958:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801195a:	48a6      	ldr	r0, [pc, #664]	; (8011bf4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x348>)
 801195c:	f7ff fa68 	bl	8010e30 <_Z11MicroPrintfPKcz>
        return kTfLiteError;
 8011960:	2301      	movs	r3, #1
 8011962:	e142      	b.n	8011bea <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x33e>
      }
      const auto* opcode = opcodes->Get(index);
 8011964:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011966:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8011968:	f000 fbcc 	bl	8012104 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm>
 801196c:	6378      	str	r0, [r7, #52]	; 0x34
      TfLiteStatus status =
          GetRegistrationFromOpCode(opcode, op_resolver_, error_reporter_,
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	685b      	ldr	r3, [r3, #4]
 8011972:	461d      	mov	r5, r3
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	689c      	ldr	r4, [r3, #8]
                                    &(graph_.GetAllocations()[subgraph_idx]
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	336c      	adds	r3, #108	; 0x6c
 801197c:	4618      	mov	r0, r3
 801197e:	f7ff fe83 	bl	8011688 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 8011982:	4602      	mov	r2, r0
 8011984:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011986:	00db      	lsls	r3, r3, #3
 8011988:	4413      	add	r3, r2
                                          .node_and_registrations[i]
 801198a:	681a      	ldr	r2, [r3, #0]
 801198c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801198e:	212c      	movs	r1, #44	; 0x2c
 8011990:	fb01 f303 	mul.w	r3, r1, r3
 8011994:	4413      	add	r3, r2
          GetRegistrationFromOpCode(opcode, op_resolver_, error_reporter_,
 8011996:	3328      	adds	r3, #40	; 0x28
 8011998:	4622      	mov	r2, r4
 801199a:	4629      	mov	r1, r5
 801199c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801199e:	f7fb fa0f 	bl	800cdc0 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration>
 80119a2:	4603      	mov	r3, r0
 80119a4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
                                          .registration));
      if (status != kTfLiteOk) {
 80119a8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	d00e      	beq.n	80119ce <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x122>
        MicroPrintf("Failed to get registration from op code %s\n ",
 80119b0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80119b2:	f014 ff02 	bl	80267ba <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>
 80119b6:	4603      	mov	r3, r0
 80119b8:	4618      	mov	r0, r3
 80119ba:	f7fb f9bd 	bl	800cd38 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 80119be:	4603      	mov	r3, r0
 80119c0:	4619      	mov	r1, r3
 80119c2:	488d      	ldr	r0, [pc, #564]	; (8011bf8 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x34c>)
 80119c4:	f7ff fa34 	bl	8010e30 <_Z11MicroPrintfPKcz>
                    EnumNameBuiltinOperator(GetBuiltinCode(opcode)));
        return status;
 80119c8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80119cc:	e10d      	b.n	8011bea <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x33e>
      }
      const auto* registration = graph_.GetAllocations()[subgraph_idx]
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	336c      	adds	r3, #108	; 0x6c
 80119d2:	4618      	mov	r0, r3
 80119d4:	f7ff fe58 	bl	8011688 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 80119d8:	4602      	mov	r2, r0
 80119da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80119dc:	00db      	lsls	r3, r3, #3
 80119de:	4413      	add	r3, r2
                                     .node_and_registrations[i]
 80119e0:	681a      	ldr	r2, [r3, #0]
 80119e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80119e4:	212c      	movs	r1, #44	; 0x2c
 80119e6:	fb01 f303 	mul.w	r3, r1, r3
 80119ea:	4413      	add	r3, r2
                                     .registration;
 80119ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80119ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (registration == nullptr) {
 80119f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	d105      	bne.n	8011a02 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x156>
        MicroPrintf("Skipping op for opcode_index %d\n", index);
 80119f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80119f8:	4880      	ldr	r0, [pc, #512]	; (8011bfc <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x350>)
 80119fa:	f7ff fa19 	bl	8010e30 <_Z11MicroPrintfPKcz>
        return kTfLiteError;
 80119fe:	2301      	movs	r3, #1
 8011a00:	e0f3      	b.n	8011bea <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x33e>
      }
      BuiltinOperator op_type =
          static_cast<BuiltinOperator>(registration->builtin_code);
 8011a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a04:	695b      	ldr	r3, [r3, #20]
      BuiltinOperator op_type =
 8011a06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

      const char* custom_data = nullptr;
 8011a0a:	2300      	movs	r3, #0
 8011a0c:	657b      	str	r3, [r7, #84]	; 0x54
      size_t custom_data_size = 0;
 8011a0e:	2300      	movs	r3, #0
 8011a10:	653b      	str	r3, [r7, #80]	; 0x50
      unsigned char* builtin_data = nullptr;
 8011a12:	2300      	movs	r3, #0
 8011a14:	617b      	str	r3, [r7, #20]

      if (op_type == BuiltinOperator_CUSTOM) {
 8011a16:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8011a1a:	2b20      	cmp	r3, #32
 8011a1c:	d11b      	bne.n	8011a56 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1aa>
        // Custom Ops may or may not have a non-null custom_options field.
        if (op->custom_options() != nullptr) {
 8011a1e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011a20:	f7ff fdfc 	bl	801161c <_ZNK6tflite8Operator14custom_optionsEv>
 8011a24:	4603      	mov	r3, r0
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	bf14      	ite	ne
 8011a2a:	2301      	movne	r3, #1
 8011a2c:	2300      	moveq	r3, #0
 8011a2e:	b2db      	uxtb	r3, r3
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	d054      	beq.n	8011ade <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x232>
          custom_data =
              reinterpret_cast<const char*>(op->custom_options()->data());
 8011a34:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011a36:	f7ff fdf1 	bl	801161c <_ZNK6tflite8Operator14custom_optionsEv>
 8011a3a:	4603      	mov	r3, r0
 8011a3c:	4618      	mov	r0, r3
 8011a3e:	f7fe ff85 	bl	801094c <_ZNK11flatbuffers6VectorIhE4dataEv>
 8011a42:	6578      	str	r0, [r7, #84]	; 0x54
          custom_data_size = op->custom_options()->size();
 8011a44:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011a46:	f7ff fde9 	bl	801161c <_ZNK6tflite8Operator14custom_optionsEv>
 8011a4a:	4603      	mov	r3, r0
 8011a4c:	4618      	mov	r0, r3
 8011a4e:	f7fe fe24 	bl	801069a <_ZNK11flatbuffers6VectorIhE4sizeEv>
 8011a52:	6538      	str	r0, [r7, #80]	; 0x50
 8011a54:	e043      	b.n	8011ade <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x232>
        }
      } else {
        if (op->custom_options() != nullptr) {
 8011a56:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011a58:	f7ff fde0 	bl	801161c <_ZNK6tflite8Operator14custom_optionsEv>
 8011a5c:	4603      	mov	r3, r0
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	bf14      	ite	ne
 8011a62:	2301      	movne	r3, #1
 8011a64:	2300      	moveq	r3, #0
 8011a66:	b2db      	uxtb	r3, r3
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d00b      	beq.n	8011a84 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1d8>
          MicroPrintf(
 8011a6c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8011a70:	4618      	mov	r0, r3
 8011a72:	f7fb f961 	bl	800cd38 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 8011a76:	4603      	mov	r3, r0
 8011a78:	4619      	mov	r1, r3
 8011a7a:	4861      	ldr	r0, [pc, #388]	; (8011c00 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x354>)
 8011a7c:	f7ff f9d8 	bl	8010e30 <_Z11MicroPrintfPKcz>
              "Unsupported behavior: found builtin operator %s with custom "
              "options.\n",
              EnumNameBuiltinOperator(op_type));
          return kTfLiteError;
 8011a80:	2301      	movs	r3, #1
 8011a82:	e0b2      	b.n	8011bea <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x33e>
        }

        MicroOpResolver::BuiltinParseFunction parser =
            op_resolver_.GetOpDataParser(op_type);
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	685a      	ldr	r2, [r3, #4]
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	685b      	ldr	r3, [r3, #4]
 8011a8c:	681b      	ldr	r3, [r3, #0]
 8011a8e:	3324      	adds	r3, #36	; 0x24
 8011a90:	681b      	ldr	r3, [r3, #0]
 8011a92:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 8011a96:	4610      	mov	r0, r2
 8011a98:	4798      	blx	r3
 8011a9a:	6278      	str	r0, [r7, #36]	; 0x24
        if (parser == nullptr) {
 8011a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	d10b      	bne.n	8011aba <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x20e>
          MicroPrintf("Did not find a parser for %s",
 8011aa2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8011aa6:	4618      	mov	r0, r3
 8011aa8:	f7fb f946 	bl	800cd38 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 8011aac:	4603      	mov	r3, r0
 8011aae:	4619      	mov	r1, r3
 8011ab0:	4854      	ldr	r0, [pc, #336]	; (8011c04 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x358>)
 8011ab2:	f7ff f9bd 	bl	8010e30 <_Z11MicroPrintfPKcz>
                      EnumNameBuiltinOperator(op_type));

          return kTfLiteError;
 8011ab6:	2301      	movs	r3, #1
 8011ab8:	e097      	b.n	8011bea <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x33e>
        }
        TF_LITE_ENSURE_STATUS(parser(op, error_reporter_,
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	6899      	ldr	r1, [r3, #8]
 8011abe:	f107 0314 	add.w	r3, r7, #20
 8011ac2:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8011ac4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011ac6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011ac8:	47a0      	blx	r4
 8011aca:	4603      	mov	r3, r0
 8011acc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8011ad0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	d002      	beq.n	8011ade <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x232>
 8011ad8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011adc:	e085      	b.n	8011bea <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x33e>
                                     builtin_data_allocator,
                                     (void**)(&builtin_data)));
      }

      TfLiteIntArray* inputs_array;
      TF_LITE_ENSURE_STATUS(allocator_.FlatBufferVectorToTfLiteTypeArray(
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	6e9c      	ldr	r4, [r3, #104]	; 0x68
 8011ae2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011ae4:	f7fd f90d 	bl	800ed02 <_ZNK6tflite8Operator6inputsEv>
 8011ae8:	4601      	mov	r1, r0
 8011aea:	f107 0310 	add.w	r3, r7, #16
 8011aee:	461a      	mov	r2, r3
 8011af0:	4620      	mov	r0, r4
 8011af2:	f7fe fd25 	bl	8010540 <_ZN6tflite14MicroAllocator33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIlEEPP14TfLiteIntArray>
 8011af6:	4603      	mov	r3, r0
 8011af8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8011afc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011b00:	2b00      	cmp	r3, #0
 8011b02:	d002      	beq.n	8011b0a <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x25e>
 8011b04:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011b08:	e06f      	b.n	8011bea <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x33e>
          op->inputs(), &inputs_array));

      TfLiteIntArray* outputs_array;
      TF_LITE_ENSURE_STATUS(allocator_.FlatBufferVectorToTfLiteTypeArray(
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	6e9c      	ldr	r4, [r3, #104]	; 0x68
 8011b0e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011b10:	f7fd f905 	bl	800ed1e <_ZNK6tflite8Operator7outputsEv>
 8011b14:	4601      	mov	r1, r0
 8011b16:	f107 030c 	add.w	r3, r7, #12
 8011b1a:	461a      	mov	r2, r3
 8011b1c:	4620      	mov	r0, r4
 8011b1e:	f7fe fd0f 	bl	8010540 <_ZN6tflite14MicroAllocator33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIlEEPP14TfLiteIntArray>
 8011b22:	4603      	mov	r3, r0
 8011b24:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8011b28:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	d002      	beq.n	8011b36 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x28a>
 8011b30:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8011b34:	e059      	b.n	8011bea <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x33e>
          op->outputs(), &outputs_array));

      TfLiteNode* node = &(
          graph_.GetAllocations()[subgraph_idx].node_and_registrations[i].node);
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	336c      	adds	r3, #108	; 0x6c
 8011b3a:	4618      	mov	r0, r3
 8011b3c:	f7ff fda4 	bl	8011688 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 8011b40:	4602      	mov	r2, r0
 8011b42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011b44:	00db      	lsls	r3, r3, #3
 8011b46:	4413      	add	r3, r2
 8011b48:	681a      	ldr	r2, [r3, #0]
 8011b4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011b4c:	212c      	movs	r1, #44	; 0x2c
 8011b4e:	fb01 f303 	mul.w	r3, r1, r3
 8011b52:	4413      	add	r3, r2
 8011b54:	61fb      	str	r3, [r7, #28]
      *node = {};
 8011b56:	69fb      	ldr	r3, [r7, #28]
 8011b58:	4618      	mov	r0, r3
 8011b5a:	2328      	movs	r3, #40	; 0x28
 8011b5c:	461a      	mov	r2, r3
 8011b5e:	2100      	movs	r1, #0
 8011b60:	f015 f96c 	bl	8026e3c <memset>
      node->inputs = inputs_array;
 8011b64:	693a      	ldr	r2, [r7, #16]
 8011b66:	69fb      	ldr	r3, [r7, #28]
 8011b68:	601a      	str	r2, [r3, #0]
      node->outputs = outputs_array;
 8011b6a:	68fa      	ldr	r2, [r7, #12]
 8011b6c:	69fb      	ldr	r3, [r7, #28]
 8011b6e:	605a      	str	r2, [r3, #4]
      node->builtin_data = reinterpret_cast<void*>(builtin_data);
 8011b70:	697a      	ldr	r2, [r7, #20]
 8011b72:	69fb      	ldr	r3, [r7, #28]
 8011b74:	615a      	str	r2, [r3, #20]
      node->custom_initial_data = custom_data;
 8011b76:	69fb      	ldr	r3, [r7, #28]
 8011b78:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011b7a:	619a      	str	r2, [r3, #24]
      node->custom_initial_data_size = custom_data_size;
 8011b7c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011b7e:	69fb      	ldr	r3, [r7, #28]
 8011b80:	61da      	str	r2, [r3, #28]

      if (op->intermediates() && (op->intermediates()->size() > 0)) {
 8011b82:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011b84:	f7ff fd58 	bl	8011638 <_ZNK6tflite8Operator13intermediatesEv>
 8011b88:	4603      	mov	r3, r0
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	d00b      	beq.n	8011ba6 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2fa>
 8011b8e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011b90:	f7ff fd52 	bl	8011638 <_ZNK6tflite8Operator13intermediatesEv>
 8011b94:	4603      	mov	r3, r0
 8011b96:	4618      	mov	r0, r3
 8011b98:	f7f9 fe20 	bl	800b7dc <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8011b9c:	4603      	mov	r3, r0
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	d001      	beq.n	8011ba6 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2fa>
 8011ba2:	2301      	movs	r3, #1
 8011ba4:	e000      	b.n	8011ba8 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2fc>
 8011ba6:	2300      	movs	r3, #0
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	d015      	beq.n	8011bd8 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x32c>
        TfLiteIntArray* intermediates_array;
        TF_LITE_ENSURE_STATUS(allocator_.FlatBufferVectorToTfLiteTypeArray(
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	6e9c      	ldr	r4, [r3, #104]	; 0x68
 8011bb0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011bb2:	f7ff fd41 	bl	8011638 <_ZNK6tflite8Operator13intermediatesEv>
 8011bb6:	4601      	mov	r1, r0
 8011bb8:	f107 0308 	add.w	r3, r7, #8
 8011bbc:	461a      	mov	r2, r3
 8011bbe:	4620      	mov	r0, r4
 8011bc0:	f7fe fcbe 	bl	8010540 <_ZN6tflite14MicroAllocator33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIlEEPP14TfLiteIntArray>
 8011bc4:	4603      	mov	r3, r0
 8011bc6:	76fb      	strb	r3, [r7, #27]
 8011bc8:	7efb      	ldrb	r3, [r7, #27]
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	d001      	beq.n	8011bd2 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x326>
 8011bce:	7efb      	ldrb	r3, [r7, #27]
        return kTfLiteError;
 8011bd0:	e00b      	b.n	8011bea <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x33e>
            op->intermediates(), &intermediates_array));
        node->intermediates = intermediates_array;
 8011bd2:	68ba      	ldr	r2, [r7, #8]
 8011bd4:	69fb      	ldr	r3, [r7, #28]
 8011bd6:	609a      	str	r2, [r3, #8]
    for (size_t i = 0; i < operators_size; ++i) {
 8011bd8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011bda:	3301      	adds	r3, #1
 8011bdc:	65bb      	str	r3, [r7, #88]	; 0x58
 8011bde:	e69d      	b.n	801191c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x70>
  for (int subgraph_idx = 0; subgraph_idx < graph_.NumSubgraphs();
 8011be0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011be2:	3301      	adds	r3, #1
 8011be4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011be6:	e667      	b.n	80118b8 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xc>
      }
    }
  }
  return kTfLiteOk;
 8011be8:	2300      	movs	r3, #0
}
 8011bea:	4618      	mov	r0, r3
 8011bec:	3760      	adds	r7, #96	; 0x60
 8011bee:	46bd      	mov	sp, r7
 8011bf0:	bdb0      	pop	{r4, r5, r7, pc}
 8011bf2:	bf00      	nop
 8011bf4:	0802b8c4 	.word	0x0802b8c4
 8011bf8:	0802b8f0 	.word	0x0802b8f0
 8011bfc:	0802b920 	.word	0x0802b920
 8011c00:	0802b944 	.word	0x0802b944
 8011c04:	0802b98c 	.word	0x0802b98c

08011c08 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>:

TfLiteStatus MicroInterpreter::AllocateTensors() {
 8011c08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c0c:	b088      	sub	sp, #32
 8011c0e:	af02      	add	r7, sp, #8
 8011c10:	6078      	str	r0, [r7, #4]
  SubgraphAllocations* allocations = allocator_.StartModelAllocation(model_);
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	681b      	ldr	r3, [r3, #0]
 8011c1a:	4619      	mov	r1, r3
 8011c1c:	4610      	mov	r0, r2
 8011c1e:	f7fd febf 	bl	800f9a0 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE>
 8011c22:	60f8      	str	r0, [r7, #12]

  if (allocations == nullptr) {
 8011c24:	68fb      	ldr	r3, [r7, #12]
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	d10b      	bne.n	8011c42 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x3a>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	689b      	ldr	r3, [r3, #8]
 8011c2e:	49a4      	ldr	r1, [pc, #656]	; (8011ec0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2b8>)
 8011c30:	4618      	mov	r0, r3
 8011c32:	f7f8 fe67 	bl	800a904 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed starting model allocation.\n");
    initialization_status_ = kTfLiteError;
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	2201      	movs	r2, #1
 8011c3a:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
    return kTfLiteError;
 8011c3e:	2301      	movs	r3, #1
 8011c40:	e139      	b.n	8011eb6 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ae>
  }

  graph_.SetSubgraphAllocations(allocations);
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	336c      	adds	r3, #108	; 0x6c
 8011c46:	68f9      	ldr	r1, [r7, #12]
 8011c48:	4618      	mov	r0, r3
 8011c4a:	f7ff fc38 	bl	80114be <_ZN6tflite10MicroGraph22SetSubgraphAllocationsEPNS_19SubgraphAllocationsE>

  TF_LITE_ENSURE_STATUS(PrepareNodeAndRegistrationDataFromFlatbuffer());
 8011c4e:	6878      	ldr	r0, [r7, #4]
 8011c50:	f7ff fe2c 	bl	80118ac <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv>
 8011c54:	4603      	mov	r3, r0
 8011c56:	72fb      	strb	r3, [r7, #11]
 8011c58:	7afb      	ldrb	r3, [r7, #11]
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	d001      	beq.n	8011c62 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x5a>
 8011c5e:	7afb      	ldrb	r3, [r7, #11]
 8011c60:	e129      	b.n	8011eb6 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ae>

  // Only allow AllocatePersistentBuffer in Init stage.
  context_.AllocatePersistentBuffer = AllocatePersistentBuffer;
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	4a97      	ldr	r2, [pc, #604]	; (8011ec4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2bc>)
 8011c66:	645a      	str	r2, [r3, #68]	; 0x44
  context_.RequestScratchBufferInArena = nullptr;
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	2200      	movs	r2, #0
 8011c6c:	64da      	str	r2, [r3, #76]	; 0x4c
  context_.GetScratchBuffer = nullptr;
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	2200      	movs	r2, #0
 8011c72:	651a      	str	r2, [r3, #80]	; 0x50
  context_.GetExecutionPlan = GetGraph;
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	4a94      	ldr	r2, [pc, #592]	; (8011ec8 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2c0>)
 8011c78:	611a      	str	r2, [r3, #16]
  graph_.InitSubgraphs();
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	336c      	adds	r3, #108	; 0x6c
 8011c7e:	4618      	mov	r0, r3
 8011c80:	f7ff f994 	bl	8010fac <_ZN6tflite10MicroGraph13InitSubgraphsEv>

  // Both AllocatePersistentBuffer and RequestScratchBufferInArena is
  // available in Prepare stage.
  context_.RequestScratchBufferInArena = RequestScratchBufferInArena;
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	4a91      	ldr	r2, [pc, #580]	; (8011ecc <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2c4>)
 8011c88:	64da      	str	r2, [r3, #76]	; 0x4c
  graph_.PrepareSubgraphs();
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	336c      	adds	r3, #108	; 0x6c
 8011c8e:	4618      	mov	r0, r3
 8011c90:	f7ff f9fc 	bl	801108c <_ZN6tflite10MicroGraph16PrepareSubgraphsEv>

  // Prepare is done, we're ready for Invoke. Memory allocation is no longer
  // allowed. Kernels can only fetch scratch buffers via GetScratchBuffer.
  context_.AllocatePersistentBuffer = nullptr;
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	2200      	movs	r2, #0
 8011c98:	645a      	str	r2, [r3, #68]	; 0x44
  context_.RequestScratchBufferInArena = nullptr;
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	2200      	movs	r2, #0
 8011c9e:	64da      	str	r2, [r3, #76]	; 0x4c
  context_.GetScratchBuffer = GetScratchBuffer;
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	4a8b      	ldr	r2, [pc, #556]	; (8011ed0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2c8>)
 8011ca4:	651a      	str	r2, [r3, #80]	; 0x50

  TF_LITE_ENSURE_OK(&context_, allocator_.FinishModelAllocation(
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	6e9c      	ldr	r4, [r3, #104]	; 0x68
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	681d      	ldr	r5, [r3, #0]
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	336c      	adds	r3, #108	; 0x6c
 8011cb2:	4618      	mov	r0, r3
 8011cb4:	f7ff fce8 	bl	8011688 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 8011cb8:	4602      	mov	r2, r0
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	3390      	adds	r3, #144	; 0x90
 8011cbe:	4629      	mov	r1, r5
 8011cc0:	4620      	mov	r0, r4
 8011cc2:	f7fd feef 	bl	800faa4 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE>
 8011cc6:	4603      	mov	r3, r0
 8011cc8:	72bb      	strb	r3, [r7, #10]
 8011cca:	7abb      	ldrb	r3, [r7, #10]
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	d001      	beq.n	8011cd4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xcc>
 8011cd0:	7abb      	ldrb	r3, [r7, #10]
 8011cd2:	e0f0      	b.n	8011eb6 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ae>
                                   &scratch_buffer_handles_));

  // TODO(b/162311891): Drop these allocations when the interpreter supports
  // handling buffers from TfLiteEvalTensor.
  input_tensors_ =
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	6e9d      	ldr	r5, [r3, #104]	; 0x68
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
          sizeof(TfLiteTensor*) * inputs_size()));
 8011cdc:	681b      	ldr	r3, [r3, #0]
 8011cde:	330c      	adds	r3, #12
 8011ce0:	681c      	ldr	r4, [r3, #0]
 8011ce2:	6878      	ldr	r0, [r7, #4]
 8011ce4:	f7ff fcdc 	bl	80116a0 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv>
 8011ce8:	4603      	mov	r3, r0
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
 8011cea:	009b      	lsls	r3, r3, #2
 8011cec:	4619      	mov	r1, r3
 8011cee:	4628      	mov	r0, r5
 8011cf0:	47a0      	blx	r4
 8011cf2:	4602      	mov	r2, r0
  input_tensors_ =
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  if (input_tensors_ == nullptr) {
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d10d      	bne.n	8011d20 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x118>
    TF_LITE_REPORT_ERROR(
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	689c      	ldr	r4, [r3, #8]
 8011d08:	6878      	ldr	r0, [r7, #4]
 8011d0a:	f7ff fcc9 	bl	80116a0 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv>
 8011d0e:	4603      	mov	r3, r0
 8011d10:	009b      	lsls	r3, r3, #2
 8011d12:	461a      	mov	r2, r3
 8011d14:	496f      	ldr	r1, [pc, #444]	; (8011ed4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2cc>)
 8011d16:	4620      	mov	r0, r4
 8011d18:	f7f8 fdf4 	bl	800a904 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to allocate memory for context->input_tensors_, "
        "%d bytes required",
        sizeof(TfLiteTensor*) * inputs_size());
    return kTfLiteError;
 8011d1c:	2301      	movs	r3, #1
 8011d1e:	e0ca      	b.n	8011eb6 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ae>
  }

  for (size_t i = 0; i < inputs_size(); ++i) {
 8011d20:	2300      	movs	r3, #0
 8011d22:	617b      	str	r3, [r7, #20]
 8011d24:	6878      	ldr	r0, [r7, #4]
 8011d26:	f7ff fcbb 	bl	80116a0 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv>
 8011d2a:	4602      	mov	r2, r0
 8011d2c:	697b      	ldr	r3, [r7, #20]
 8011d2e:	4293      	cmp	r3, r2
 8011d30:	bf34      	ite	cc
 8011d32:	2301      	movcc	r3, #1
 8011d34:	2300      	movcs	r3, #0
 8011d36:	b2db      	uxtb	r3, r3
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	d03c      	beq.n	8011db6 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1ae>
    input_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	6e9e      	ldr	r6, [r3, #104]	; 0x68
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        model_, graph_.GetAllocations(), inputs().Get(i), 0);
 8011d44:	681b      	ldr	r3, [r3, #0]
 8011d46:	681d      	ldr	r5, [r3, #0]
    input_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	681b      	ldr	r3, [r3, #0]
 8011d4c:	603b      	str	r3, [r7, #0]
        model_, graph_.GetAllocations(), inputs().Get(i), 0);
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	336c      	adds	r3, #108	; 0x6c
 8011d52:	4618      	mov	r0, r3
 8011d54:	f7ff fc98 	bl	8011688 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 8011d58:	4680      	mov	r8, r0
 8011d5a:	6878      	ldr	r0, [r7, #4]
 8011d5c:	f7ff fcbb 	bl	80116d6 <_ZNK6tflite16MicroInterpreter6inputsEv>
 8011d60:	4603      	mov	r3, r0
 8011d62:	6979      	ldr	r1, [r7, #20]
 8011d64:	4618      	mov	r0, r3
 8011d66:	f7f9 fd47 	bl	800b7f8 <_ZNK11flatbuffers6VectorIlE3GetEm>
 8011d6a:	4601      	mov	r1, r0
    input_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8011d72:	697b      	ldr	r3, [r7, #20]
 8011d74:	009b      	lsls	r3, r3, #2
 8011d76:	18d4      	adds	r4, r2, r3
 8011d78:	2300      	movs	r3, #0
 8011d7a:	9300      	str	r3, [sp, #0]
 8011d7c:	460b      	mov	r3, r1
 8011d7e:	4642      	mov	r2, r8
 8011d80:	6839      	ldr	r1, [r7, #0]
 8011d82:	4630      	mov	r0, r6
 8011d84:	47a8      	blx	r5
 8011d86:	4603      	mov	r3, r0
 8011d88:	6023      	str	r3, [r4, #0]
    if (input_tensors_[i] == nullptr) {
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8011d90:	697b      	ldr	r3, [r7, #20]
 8011d92:	009b      	lsls	r3, r3, #2
 8011d94:	4413      	add	r3, r2
 8011d96:	681b      	ldr	r3, [r3, #0]
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	d108      	bne.n	8011dae <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1a6>
      TF_LITE_REPORT_ERROR(error_reporter_,
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	689b      	ldr	r3, [r3, #8]
 8011da0:	697a      	ldr	r2, [r7, #20]
 8011da2:	494d      	ldr	r1, [pc, #308]	; (8011ed8 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2d0>)
 8011da4:	4618      	mov	r0, r3
 8011da6:	f7f8 fdad 	bl	800a904 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Failed to initialize input tensor %d", i);
      return kTfLiteError;
 8011daa:	2301      	movs	r3, #1
 8011dac:	e083      	b.n	8011eb6 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ae>
  for (size_t i = 0; i < inputs_size(); ++i) {
 8011dae:	697b      	ldr	r3, [r7, #20]
 8011db0:	3301      	adds	r3, #1
 8011db2:	617b      	str	r3, [r7, #20]
 8011db4:	e7b6      	b.n	8011d24 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x11c>
  }

  // TODO(b/162311891): Drop these allocations when the interpreter supports
  // handling buffers from TfLiteEvalTensor.
  output_tensors_ =
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	6e9d      	ldr	r5, [r3, #104]	; 0x68
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
          sizeof(TfLiteTensor*) * outputs_size()));
 8011dbe:	681b      	ldr	r3, [r3, #0]
 8011dc0:	330c      	adds	r3, #12
 8011dc2:	681c      	ldr	r4, [r3, #0]
 8011dc4:	6878      	ldr	r0, [r7, #4]
 8011dc6:	f7ff fc9d 	bl	8011704 <_ZNK6tflite16MicroInterpreter12outputs_sizeEv>
 8011dca:	4603      	mov	r3, r0
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
 8011dcc:	009b      	lsls	r3, r3, #2
 8011dce:	4619      	mov	r1, r3
 8011dd0:	4628      	mov	r0, r5
 8011dd2:	47a0      	blx	r4
 8011dd4:	4602      	mov	r2, r0
  output_tensors_ =
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  if (output_tensors_ == nullptr) {
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	d10d      	bne.n	8011e02 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1fa>
    TF_LITE_REPORT_ERROR(
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	689c      	ldr	r4, [r3, #8]
 8011dea:	6878      	ldr	r0, [r7, #4]
 8011dec:	f7ff fc8a 	bl	8011704 <_ZNK6tflite16MicroInterpreter12outputs_sizeEv>
 8011df0:	4603      	mov	r3, r0
 8011df2:	009b      	lsls	r3, r3, #2
 8011df4:	461a      	mov	r2, r3
 8011df6:	4939      	ldr	r1, [pc, #228]	; (8011edc <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2d4>)
 8011df8:	4620      	mov	r0, r4
 8011dfa:	f7f8 fd83 	bl	800a904 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to allocate memory for context->output_tensors_, "
        "%d bytes required",
        sizeof(TfLiteTensor*) * outputs_size());
    return kTfLiteError;
 8011dfe:	2301      	movs	r3, #1
 8011e00:	e059      	b.n	8011eb6 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ae>
  }

  for (size_t i = 0; i < outputs_size(); ++i) {
 8011e02:	2300      	movs	r3, #0
 8011e04:	613b      	str	r3, [r7, #16]
 8011e06:	6878      	ldr	r0, [r7, #4]
 8011e08:	f7ff fc7c 	bl	8011704 <_ZNK6tflite16MicroInterpreter12outputs_sizeEv>
 8011e0c:	4602      	mov	r2, r0
 8011e0e:	693b      	ldr	r3, [r7, #16]
 8011e10:	4293      	cmp	r3, r2
 8011e12:	bf34      	ite	cc
 8011e14:	2301      	movcc	r3, #1
 8011e16:	2300      	movcs	r3, #0
 8011e18:	b2db      	uxtb	r3, r3
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d03c      	beq.n	8011e98 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x290>
    output_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	6e9e      	ldr	r6, [r3, #104]	; 0x68
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        model_, graph_.GetAllocations(), outputs().Get(i), 0);
 8011e26:	681b      	ldr	r3, [r3, #0]
 8011e28:	681d      	ldr	r5, [r3, #0]
    output_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	681b      	ldr	r3, [r3, #0]
 8011e2e:	603b      	str	r3, [r7, #0]
        model_, graph_.GetAllocations(), outputs().Get(i), 0);
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	336c      	adds	r3, #108	; 0x6c
 8011e34:	4618      	mov	r0, r3
 8011e36:	f7ff fc27 	bl	8011688 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 8011e3a:	4680      	mov	r8, r0
 8011e3c:	6878      	ldr	r0, [r7, #4]
 8011e3e:	f7ff fc7c 	bl	801173a <_ZNK6tflite16MicroInterpreter7outputsEv>
 8011e42:	4603      	mov	r3, r0
 8011e44:	6939      	ldr	r1, [r7, #16]
 8011e46:	4618      	mov	r0, r3
 8011e48:	f7f9 fcd6 	bl	800b7f8 <_ZNK11flatbuffers6VectorIlE3GetEm>
 8011e4c:	4601      	mov	r1, r0
    output_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8011e54:	693b      	ldr	r3, [r7, #16]
 8011e56:	009b      	lsls	r3, r3, #2
 8011e58:	18d4      	adds	r4, r2, r3
 8011e5a:	2300      	movs	r3, #0
 8011e5c:	9300      	str	r3, [sp, #0]
 8011e5e:	460b      	mov	r3, r1
 8011e60:	4642      	mov	r2, r8
 8011e62:	6839      	ldr	r1, [r7, #0]
 8011e64:	4630      	mov	r0, r6
 8011e66:	47a8      	blx	r5
 8011e68:	4603      	mov	r3, r0
 8011e6a:	6023      	str	r3, [r4, #0]
    if (output_tensors_[i] == nullptr) {
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8011e72:	693b      	ldr	r3, [r7, #16]
 8011e74:	009b      	lsls	r3, r3, #2
 8011e76:	4413      	add	r3, r2
 8011e78:	681b      	ldr	r3, [r3, #0]
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	d108      	bne.n	8011e90 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x288>
      TF_LITE_REPORT_ERROR(error_reporter_,
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	689b      	ldr	r3, [r3, #8]
 8011e82:	693a      	ldr	r2, [r7, #16]
 8011e84:	4916      	ldr	r1, [pc, #88]	; (8011ee0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2d8>)
 8011e86:	4618      	mov	r0, r3
 8011e88:	f7f8 fd3c 	bl	800a904 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Failed to initialize output tensor %d", i);
      return kTfLiteError;
 8011e8c:	2301      	movs	r3, #1
 8011e8e:	e012      	b.n	8011eb6 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ae>
  for (size_t i = 0; i < outputs_size(); ++i) {
 8011e90:	693b      	ldr	r3, [r7, #16]
 8011e92:	3301      	adds	r3, #1
 8011e94:	613b      	str	r3, [r7, #16]
 8011e96:	e7b6      	b.n	8011e06 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1fe>
    }
  }

  TF_LITE_ENSURE_STATUS(ResetVariableTensors());
 8011e98:	6878      	ldr	r0, [r7, #4]
 8011e9a:	f000 f847 	bl	8011f2c <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv>
 8011e9e:	4603      	mov	r3, r0
 8011ea0:	727b      	strb	r3, [r7, #9]
 8011ea2:	7a7b      	ldrb	r3, [r7, #9]
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	d001      	beq.n	8011eac <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2a4>
 8011ea8:	7a7b      	ldrb	r3, [r7, #9]
 8011eaa:	e004      	b.n	8011eb6 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ae>

  tensors_allocated_ = true;
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	2201      	movs	r2, #1
 8011eb0:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
  return kTfLiteOk;
 8011eb4:	2300      	movs	r3, #0
}
 8011eb6:	4618      	mov	r0, r3
 8011eb8:	3718      	adds	r7, #24
 8011eba:	46bd      	mov	sp, r7
 8011ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ec0:	0802b9ac 	.word	0x0802b9ac
 8011ec4:	08011f49 	.word	0x08011f49
 8011ec8:	0801209f 	.word	0x0801209f
 8011ecc:	08011f75 	.word	0x08011f75
 8011ed0:	08011fab 	.word	0x08011fab
 8011ed4:	0802b9d0 	.word	0x0802b9d0
 8011ed8:	0802ba1c 	.word	0x0802ba1c
 8011edc:	0802ba44 	.word	0x0802ba44
 8011ee0:	0802ba90 	.word	0x0802ba90

08011ee4 <_ZN6tflite16MicroInterpreter5inputEj>:
    TF_LITE_ENSURE_OK(&context_, AllocateTensors());
  }
  return graph_.InvokeSubgraph(0);
}

TfLiteTensor* MicroInterpreter::input(size_t index) {
 8011ee4:	b580      	push	{r7, lr}
 8011ee6:	b084      	sub	sp, #16
 8011ee8:	af00      	add	r7, sp, #0
 8011eea:	6078      	str	r0, [r7, #4]
 8011eec:	6039      	str	r1, [r7, #0]
  const size_t length = inputs_size();
 8011eee:	6878      	ldr	r0, [r7, #4]
 8011ef0:	f7ff fbd6 	bl	80116a0 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv>
 8011ef4:	60f8      	str	r0, [r7, #12]
  if (index >= length) {
 8011ef6:	683a      	ldr	r2, [r7, #0]
 8011ef8:	68fb      	ldr	r3, [r7, #12]
 8011efa:	429a      	cmp	r2, r3
 8011efc:	d308      	bcc.n	8011f10 <_ZN6tflite16MicroInterpreter5inputEj+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	6898      	ldr	r0, [r3, #8]
 8011f02:	68fb      	ldr	r3, [r7, #12]
 8011f04:	683a      	ldr	r2, [r7, #0]
 8011f06:	4908      	ldr	r1, [pc, #32]	; (8011f28 <_ZN6tflite16MicroInterpreter5inputEj+0x44>)
 8011f08:	f7f8 fcfc 	bl	800a904 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Input index %d out of range (length is %d)", index,
                         length);
    return nullptr;
 8011f0c:	2300      	movs	r3, #0
 8011f0e:	e006      	b.n	8011f1e <_ZN6tflite16MicroInterpreter5inputEj+0x3a>
  }
  return input_tensors_[index];
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8011f16:	683b      	ldr	r3, [r7, #0]
 8011f18:	009b      	lsls	r3, r3, #2
 8011f1a:	4413      	add	r3, r2
 8011f1c:	681b      	ldr	r3, [r3, #0]
}
 8011f1e:	4618      	mov	r0, r3
 8011f20:	3710      	adds	r7, #16
 8011f22:	46bd      	mov	sp, r7
 8011f24:	bd80      	pop	{r7, pc}
 8011f26:	bf00      	nop
 8011f28:	0802bae8 	.word	0x0802bae8

08011f2c <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv>:
    return nullptr;
  }
  return output_tensors_[index];
}

TfLiteStatus MicroInterpreter::ResetVariableTensors() {
 8011f2c:	b580      	push	{r7, lr}
 8011f2e:	b082      	sub	sp, #8
 8011f30:	af00      	add	r7, sp, #0
 8011f32:	6078      	str	r0, [r7, #4]
  return graph_.ResetVariableTensors();
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	336c      	adds	r3, #108	; 0x6c
 8011f38:	4618      	mov	r0, r3
 8011f3a:	f7ff fa1d 	bl	8011378 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv>
 8011f3e:	4603      	mov	r3, r0
}
 8011f40:	4618      	mov	r0, r3
 8011f42:	3708      	adds	r7, #8
 8011f44:	46bd      	mov	sp, r7
 8011f46:	bd80      	pop	{r7, pc}

08011f48 <_ZN6tflite16MicroInterpreter24AllocatePersistentBufferEP13TfLiteContextj>:

void* MicroInterpreter::AllocatePersistentBuffer(TfLiteContext* ctx,
                                                 size_t bytes) {
 8011f48:	b580      	push	{r7, lr}
 8011f4a:	b082      	sub	sp, #8
 8011f4c:	af00      	add	r7, sp, #0
 8011f4e:	6078      	str	r0, [r7, #4]
 8011f50:	6039      	str	r1, [r7, #0]
  return reinterpret_cast<MicroInterpreter*>(ctx->impl_)
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	68db      	ldr	r3, [r3, #12]
      ->allocator_.AllocatePersistentBuffer(bytes);
 8011f56:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  return reinterpret_cast<MicroInterpreter*>(ctx->impl_)
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	68db      	ldr	r3, [r3, #12]
      ->allocator_.AllocatePersistentBuffer(bytes);
 8011f5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011f5e:	681b      	ldr	r3, [r3, #0]
 8011f60:	330c      	adds	r3, #12
 8011f62:	681b      	ldr	r3, [r3, #0]
 8011f64:	6839      	ldr	r1, [r7, #0]
 8011f66:	4610      	mov	r0, r2
 8011f68:	4798      	blx	r3
 8011f6a:	4603      	mov	r3, r0
}
 8011f6c:	4618      	mov	r0, r3
 8011f6e:	3708      	adds	r7, #8
 8011f70:	46bd      	mov	sp, r7
 8011f72:	bd80      	pop	{r7, pc}

08011f74 <_ZN6tflite16MicroInterpreter27RequestScratchBufferInArenaEP13TfLiteContextjPi>:

TfLiteStatus MicroInterpreter::RequestScratchBufferInArena(TfLiteContext* ctx,
                                                           size_t bytes,
                                                           int* buffer_idx) {
 8011f74:	b590      	push	{r4, r7, lr}
 8011f76:	b087      	sub	sp, #28
 8011f78:	af00      	add	r7, sp, #0
 8011f7a:	60f8      	str	r0, [r7, #12]
 8011f7c:	60b9      	str	r1, [r7, #8]
 8011f7e:	607a      	str	r2, [r7, #4]
  MicroInterpreter* interpreter =
 8011f80:	68fb      	ldr	r3, [r7, #12]
 8011f82:	68db      	ldr	r3, [r3, #12]
 8011f84:	617b      	str	r3, [r7, #20]
      reinterpret_cast<MicroInterpreter*>(ctx->impl_);
  return interpreter->allocator_.RequestScratchBufferInArena(
 8011f86:	697b      	ldr	r3, [r7, #20]
 8011f88:	6e9c      	ldr	r4, [r3, #104]	; 0x68
 8011f8a:	697b      	ldr	r3, [r7, #20]
 8011f8c:	336c      	adds	r3, #108	; 0x6c
 8011f8e:	4618      	mov	r0, r3
 8011f90:	f7ff fb6e 	bl	8011670 <_ZN6tflite10MicroGraph23GetCurrentSubgraphIndexEv>
 8011f94:	4602      	mov	r2, r0
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	68b9      	ldr	r1, [r7, #8]
 8011f9a:	4620      	mov	r0, r4
 8011f9c:	f7fd fe16 	bl	800fbcc <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi>
 8011fa0:	4603      	mov	r3, r0
      bytes, interpreter->graph_.GetCurrentSubgraphIndex(), buffer_idx);
}
 8011fa2:	4618      	mov	r0, r3
 8011fa4:	371c      	adds	r7, #28
 8011fa6:	46bd      	mov	sp, r7
 8011fa8:	bd90      	pop	{r4, r7, pc}

08011faa <_ZN6tflite16MicroInterpreter16GetScratchBufferEP13TfLiteContexti>:

void* MicroInterpreter::GetScratchBuffer(TfLiteContext* ctx, int buffer_idx) {
 8011faa:	b480      	push	{r7}
 8011fac:	b085      	sub	sp, #20
 8011fae:	af00      	add	r7, sp, #0
 8011fb0:	6078      	str	r0, [r7, #4]
 8011fb2:	6039      	str	r1, [r7, #0]
  MicroInterpreter* interpreter =
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	68db      	ldr	r3, [r3, #12]
 8011fb8:	60fb      	str	r3, [r7, #12]
      reinterpret_cast<MicroInterpreter*>(ctx->impl_);
  ScratchBufferHandle* handle =
      interpreter->scratch_buffer_handles_ + buffer_idx;
 8011fba:	68fb      	ldr	r3, [r7, #12]
 8011fbc:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8011fc0:	683b      	ldr	r3, [r7, #0]
 8011fc2:	009b      	lsls	r3, r3, #2
  ScratchBufferHandle* handle =
 8011fc4:	4413      	add	r3, r2
 8011fc6:	60bb      	str	r3, [r7, #8]
  return handle->data;
 8011fc8:	68bb      	ldr	r3, [r7, #8]
 8011fca:	681b      	ldr	r3, [r3, #0]
}
 8011fcc:	4618      	mov	r0, r3
 8011fce:	3714      	adds	r7, #20
 8011fd0:	46bd      	mov	sp, r7
 8011fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fd6:	4770      	bx	lr

08011fd8 <_ZN6tflite16MicroInterpreter13ReportOpErrorEP13TfLiteContextPKcz>:

void MicroInterpreter::ReportOpError(struct TfLiteContext* context,
                                     const char* format, ...) {
 8011fd8:	b40e      	push	{r1, r2, r3}
 8011fda:	b580      	push	{r7, lr}
 8011fdc:	b085      	sub	sp, #20
 8011fde:	af00      	add	r7, sp, #0
 8011fe0:	6078      	str	r0, [r7, #4]
#ifndef TF_LITE_STRIP_ERROR_STRINGS
  MicroInterpreter* interpreter =
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	68db      	ldr	r3, [r3, #12]
 8011fe6:	60fb      	str	r3, [r7, #12]
      static_cast<MicroInterpreter*>(context->impl_);
  va_list args;
  va_start(args, format);
 8011fe8:	f107 0320 	add.w	r3, r7, #32
 8011fec:	60bb      	str	r3, [r7, #8]
  TF_LITE_REPORT_ERROR(interpreter->error_reporter_, format, args);
 8011fee:	68fb      	ldr	r3, [r7, #12]
 8011ff0:	6898      	ldr	r0, [r3, #8]
 8011ff2:	68fb      	ldr	r3, [r7, #12]
 8011ff4:	689b      	ldr	r3, [r3, #8]
 8011ff6:	681b      	ldr	r3, [r3, #0]
 8011ff8:	3308      	adds	r3, #8
 8011ffa:	681b      	ldr	r3, [r3, #0]
 8011ffc:	68ba      	ldr	r2, [r7, #8]
 8011ffe:	69f9      	ldr	r1, [r7, #28]
 8012000:	4798      	blx	r3
  va_end(args);
#endif
}
 8012002:	bf00      	nop
 8012004:	3714      	adds	r7, #20
 8012006:	46bd      	mov	sp, r7
 8012008:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801200c:	b003      	add	sp, #12
 801200e:	4770      	bx	lr

08012010 <_ZN6tflite16MicroInterpreter9GetTensorEPK13TfLiteContexti>:

TfLiteTensor* MicroInterpreter::GetTensor(const struct TfLiteContext* context,
                                          int tensor_idx) {
 8012010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012014:	b086      	sub	sp, #24
 8012016:	af02      	add	r7, sp, #8
 8012018:	6078      	str	r0, [r7, #4]
 801201a:	6039      	str	r1, [r7, #0]
  MicroInterpreter* interpreter =
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	68db      	ldr	r3, [r3, #12]
 8012020:	60fb      	str	r3, [r7, #12]
      static_cast<MicroInterpreter*>(context->impl_);
  return interpreter->allocator_.AllocateTempTfLiteTensor(
 8012022:	68fb      	ldr	r3, [r7, #12]
 8012024:	6e9d      	ldr	r5, [r3, #104]	; 0x68
 8012026:	68fb      	ldr	r3, [r7, #12]
 8012028:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      interpreter->model_, interpreter->graph_.GetAllocations(), tensor_idx,
      interpreter->get_subgraph_index());
 801202a:	681b      	ldr	r3, [r3, #0]
 801202c:	3304      	adds	r3, #4
 801202e:	681c      	ldr	r4, [r3, #0]
  return interpreter->allocator_.AllocateTempTfLiteTensor(
 8012030:	68fb      	ldr	r3, [r7, #12]
 8012032:	681e      	ldr	r6, [r3, #0]
      interpreter->model_, interpreter->graph_.GetAllocations(), tensor_idx,
 8012034:	68fb      	ldr	r3, [r7, #12]
 8012036:	336c      	adds	r3, #108	; 0x6c
 8012038:	4618      	mov	r0, r3
 801203a:	f7ff fb25 	bl	8011688 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 801203e:	4680      	mov	r8, r0
  return interpreter->allocator_.AllocateTempTfLiteTensor(
 8012040:	68f8      	ldr	r0, [r7, #12]
 8012042:	f7ff fb91 	bl	8011768 <_ZN6tflite16MicroInterpreter18get_subgraph_indexEv>
 8012046:	4603      	mov	r3, r0
 8012048:	9300      	str	r3, [sp, #0]
 801204a:	683b      	ldr	r3, [r7, #0]
 801204c:	4642      	mov	r2, r8
 801204e:	4631      	mov	r1, r6
 8012050:	4628      	mov	r0, r5
 8012052:	47a0      	blx	r4
 8012054:	4603      	mov	r3, r0
}
 8012056:	4618      	mov	r0, r3
 8012058:	3710      	adds	r7, #16
 801205a:	46bd      	mov	sp, r7
 801205c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012060 <_ZN6tflite16MicroInterpreter13GetEvalTensorEPK13TfLiteContexti>:

TfLiteEvalTensor* MicroInterpreter::GetEvalTensor(
    const struct TfLiteContext* context, int tensor_idx) {
 8012060:	b590      	push	{r4, r7, lr}
 8012062:	b085      	sub	sp, #20
 8012064:	af00      	add	r7, sp, #0
 8012066:	6078      	str	r0, [r7, #4]
 8012068:	6039      	str	r1, [r7, #0]
  MicroInterpreter* interpreter =
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	68db      	ldr	r3, [r3, #12]
 801206e:	60fb      	str	r3, [r7, #12]
      reinterpret_cast<MicroInterpreter*>(context->impl_);
  return &interpreter->graph_
              .GetAllocations()[interpreter->get_subgraph_index()]
 8012070:	68fb      	ldr	r3, [r7, #12]
 8012072:	336c      	adds	r3, #108	; 0x6c
 8012074:	4618      	mov	r0, r3
 8012076:	f7ff fb07 	bl	8011688 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 801207a:	4604      	mov	r4, r0
 801207c:	68f8      	ldr	r0, [r7, #12]
 801207e:	f7ff fb73 	bl	8011768 <_ZN6tflite16MicroInterpreter18get_subgraph_indexEv>
 8012082:	4603      	mov	r3, r0
 8012084:	00db      	lsls	r3, r3, #3
 8012086:	4423      	add	r3, r4
              .tensors[tensor_idx];
 8012088:	6859      	ldr	r1, [r3, #4]
 801208a:	683a      	ldr	r2, [r7, #0]
 801208c:	4613      	mov	r3, r2
 801208e:	005b      	lsls	r3, r3, #1
 8012090:	4413      	add	r3, r2
 8012092:	009b      	lsls	r3, r3, #2
 8012094:	440b      	add	r3, r1
}
 8012096:	4618      	mov	r0, r3
 8012098:	3714      	adds	r7, #20
 801209a:	46bd      	mov	sp, r7
 801209c:	bd90      	pop	{r4, r7, pc}

0801209e <_ZN6tflite16MicroInterpreter8GetGraphEP13TfLiteContextPP14TfLiteIntArray>:

TfLiteStatus MicroInterpreter::GetGraph(struct TfLiteContext* context,
                                        TfLiteIntArray** args) {
 801209e:	b480      	push	{r7}
 80120a0:	b085      	sub	sp, #20
 80120a2:	af00      	add	r7, sp, #0
 80120a4:	6078      	str	r0, [r7, #4]
 80120a6:	6039      	str	r1, [r7, #0]
  MicroInterpreter* interpreter =
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	68db      	ldr	r3, [r3, #12]
 80120ac:	60fb      	str	r3, [r7, #12]
      reinterpret_cast<MicroInterpreter*>(context->impl_);
  *args = reinterpret_cast<TfLiteIntArray*>(&interpreter->graph_);
 80120ae:	68fb      	ldr	r3, [r7, #12]
 80120b0:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 80120b4:	683b      	ldr	r3, [r7, #0]
 80120b6:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 80120b8:	2300      	movs	r3, #0
}
 80120ba:	4618      	mov	r0, r3
 80120bc:	3714      	adds	r7, #20
 80120be:	46bd      	mov	sp, r7
 80120c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120c4:	4770      	bx	lr

080120c6 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 80120c6:	b580      	push	{r7, lr}
 80120c8:	b082      	sub	sp, #8
 80120ca:	af00      	add	r7, sp, #0
 80120cc:	6078      	str	r0, [r7, #4]
 80120ce:	460b      	mov	r3, r1
 80120d0:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 80120d2:	887b      	ldrh	r3, [r7, #2]
 80120d4:	4619      	mov	r1, r3
 80120d6:	6878      	ldr	r0, [r7, #4]
 80120d8:	f000 f83a 	bl	8012150 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t>
 80120dc:	4603      	mov	r3, r0
  }
 80120de:	4618      	mov	r0, r3
 80120e0:	3708      	adds	r7, #8
 80120e2:	46bd      	mov	sp, r7
 80120e4:	bd80      	pop	{r7, pc}

080120e6 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 80120e6:	b580      	push	{r7, lr}
 80120e8:	b082      	sub	sp, #8
 80120ea:	af00      	add	r7, sp, #0
 80120ec:	6078      	str	r0, [r7, #4]
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	681b      	ldr	r3, [r3, #0]
 80120f2:	4618      	mov	r0, r3
 80120f4:	f7f9 fa74 	bl	800b5e0 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 80120f8:	4603      	mov	r3, r0
 80120fa:	4618      	mov	r0, r3
 80120fc:	3708      	adds	r7, #8
 80120fe:	46bd      	mov	sp, r7
 8012100:	bd80      	pop	{r7, pc}
	...

08012104 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 8012104:	b580      	push	{r7, lr}
 8012106:	b082      	sub	sp, #8
 8012108:	af00      	add	r7, sp, #0
 801210a:	6078      	str	r0, [r7, #4]
 801210c:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 801210e:	6878      	ldr	r0, [r7, #4]
 8012110:	f7ff ffe9 	bl	80120e6 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4sizeEv>
 8012114:	4602      	mov	r2, r0
 8012116:	683b      	ldr	r3, [r7, #0]
 8012118:	4293      	cmp	r3, r2
 801211a:	d306      	bcc.n	801212a <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm+0x26>
 801211c:	4b09      	ldr	r3, [pc, #36]	; (8012144 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm+0x40>)
 801211e:	4a0a      	ldr	r2, [pc, #40]	; (8012148 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm+0x44>)
 8012120:	f44f 7183 	mov.w	r1, #262	; 0x106
 8012124:	4809      	ldr	r0, [pc, #36]	; (801214c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm+0x48>)
 8012126:	f014 fdf1 	bl	8026d0c <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 801212a:	6878      	ldr	r0, [r7, #4]
 801212c:	f000 f844 	bl	80121b8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4DataEv>
 8012130:	4603      	mov	r3, r0
 8012132:	6839      	ldr	r1, [r7, #0]
 8012134:	4618      	mov	r0, r3
 8012136:	f000 f82b 	bl	8012190 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite12OperatorCodeEEEE4ReadEPKhm>
 801213a:	4603      	mov	r3, r0
  }
 801213c:	4618      	mov	r0, r3
 801213e:	3708      	adds	r7, #8
 8012140:	46bd      	mov	sp, r7
 8012142:	bd80      	pop	{r7, pc}
 8012144:	0802bb40 	.word	0x0802bb40
 8012148:	0802bd9c 	.word	0x0802bd9c
 801214c:	0802bc1c 	.word	0x0802bc1c

08012150 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8012150:	b580      	push	{r7, lr}
 8012152:	b084      	sub	sp, #16
 8012154:	af00      	add	r7, sp, #0
 8012156:	6078      	str	r0, [r7, #4]
 8012158:	460b      	mov	r3, r1
 801215a:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 801215c:	887b      	ldrh	r3, [r7, #2]
 801215e:	4619      	mov	r1, r3
 8012160:	6878      	ldr	r0, [r7, #4]
 8012162:	f7f8 fc2b 	bl	800a9bc <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8012166:	4603      	mov	r3, r0
 8012168:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 801216a:	687a      	ldr	r2, [r7, #4]
 801216c:	89fb      	ldrh	r3, [r7, #14]
 801216e:	4413      	add	r3, r2
 8012170:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8012172:	89fb      	ldrh	r3, [r7, #14]
 8012174:	2b00      	cmp	r3, #0
 8012176:	d006      	beq.n	8012186 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t+0x36>
 8012178:	68b8      	ldr	r0, [r7, #8]
 801217a:	f7f9 fa56 	bl	800b62a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 801217e:	4602      	mov	r2, r0
 8012180:	68bb      	ldr	r3, [r7, #8]
 8012182:	4413      	add	r3, r2
                        : nullptr;
 8012184:	e000      	b.n	8012188 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8012186:	2300      	movs	r3, #0
  }
 8012188:	4618      	mov	r0, r3
 801218a:	3710      	adds	r7, #16
 801218c:	46bd      	mov	sp, r7
 801218e:	bd80      	pop	{r7, pc}

08012190 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite12OperatorCodeEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8012190:	b580      	push	{r7, lr}
 8012192:	b082      	sub	sp, #8
 8012194:	af00      	add	r7, sp, #0
 8012196:	6078      	str	r0, [r7, #4]
 8012198:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 801219a:	683b      	ldr	r3, [r7, #0]
 801219c:	009b      	lsls	r3, r3, #2
 801219e:	687a      	ldr	r2, [r7, #4]
 80121a0:	4413      	add	r3, r2
 80121a2:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 80121a4:	6878      	ldr	r0, [r7, #4]
 80121a6:	f7f9 fa40 	bl	800b62a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 80121aa:	4602      	mov	r2, r0
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	4413      	add	r3, r2
  }
 80121b0:	4618      	mov	r0, r3
 80121b2:	3708      	adds	r7, #8
 80121b4:	46bd      	mov	sp, r7
 80121b6:	bd80      	pop	{r7, pc}

080121b8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4DataEv>:
  const uint8_t *Data() const {
 80121b8:	b480      	push	{r7}
 80121ba:	b083      	sub	sp, #12
 80121bc:	af00      	add	r7, sp, #0
 80121be:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	3304      	adds	r3, #4
  }
 80121c4:	4618      	mov	r0, r3
 80121c6:	370c      	adds	r7, #12
 80121c8:	46bd      	mov	sp, r7
 80121ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121ce:	4770      	bx	lr

080121d0 <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_>:

// All input buffers to the number conversion functions must be this long.
const int kFastToBufferSize = 48;

// Reverses a zero-terminated string in-place.
char* ReverseStringInPlace(char* start, char* end) {
 80121d0:	b480      	push	{r7}
 80121d2:	b087      	sub	sp, #28
 80121d4:	af00      	add	r7, sp, #0
 80121d6:	6078      	str	r0, [r7, #4]
 80121d8:	6039      	str	r1, [r7, #0]
  char* p1 = start;
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	617b      	str	r3, [r7, #20]
  char* p2 = end - 1;
 80121de:	683b      	ldr	r3, [r7, #0]
 80121e0:	3b01      	subs	r3, #1
 80121e2:	613b      	str	r3, [r7, #16]
  while (p1 < p2) {
 80121e4:	697a      	ldr	r2, [r7, #20]
 80121e6:	693b      	ldr	r3, [r7, #16]
 80121e8:	429a      	cmp	r2, r3
 80121ea:	d20e      	bcs.n	801220a <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_+0x3a>
    char tmp = *p1;
 80121ec:	697b      	ldr	r3, [r7, #20]
 80121ee:	781b      	ldrb	r3, [r3, #0]
 80121f0:	73fb      	strb	r3, [r7, #15]
    *p1++ = *p2;
 80121f2:	697b      	ldr	r3, [r7, #20]
 80121f4:	1c5a      	adds	r2, r3, #1
 80121f6:	617a      	str	r2, [r7, #20]
 80121f8:	693a      	ldr	r2, [r7, #16]
 80121fa:	7812      	ldrb	r2, [r2, #0]
 80121fc:	701a      	strb	r2, [r3, #0]
    *p2-- = tmp;
 80121fe:	693b      	ldr	r3, [r7, #16]
 8012200:	1e5a      	subs	r2, r3, #1
 8012202:	613a      	str	r2, [r7, #16]
 8012204:	7bfa      	ldrb	r2, [r7, #15]
 8012206:	701a      	strb	r2, [r3, #0]
  while (p1 < p2) {
 8012208:	e7ec      	b.n	80121e4 <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_+0x14>
  }
  return start;
 801220a:	687b      	ldr	r3, [r7, #4]
}
 801220c:	4618      	mov	r0, r3
 801220e:	371c      	adds	r7, #28
 8012210:	46bd      	mov	sp, r7
 8012212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012216:	4770      	bx	lr

08012218 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>:

// Appends a string to a string, in-place. You need to pass in the maximum
// string length as the second argument.
char* StrCatStr(char* main, int main_max_length, const char* to_append) {
 8012218:	b480      	push	{r7}
 801221a:	b087      	sub	sp, #28
 801221c:	af00      	add	r7, sp, #0
 801221e:	60f8      	str	r0, [r7, #12]
 8012220:	60b9      	str	r1, [r7, #8]
 8012222:	607a      	str	r2, [r7, #4]
  char* current = main;
 8012224:	68fb      	ldr	r3, [r7, #12]
 8012226:	617b      	str	r3, [r7, #20]
  while (*current != 0) {
 8012228:	697b      	ldr	r3, [r7, #20]
 801222a:	781b      	ldrb	r3, [r3, #0]
 801222c:	2b00      	cmp	r3, #0
 801222e:	d003      	beq.n	8012238 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x20>
    ++current;
 8012230:	697b      	ldr	r3, [r7, #20]
 8012232:	3301      	adds	r3, #1
 8012234:	617b      	str	r3, [r7, #20]
  while (*current != 0) {
 8012236:	e7f7      	b.n	8012228 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x10>
  }
  char* current_end = main + (main_max_length - 1);
 8012238:	68bb      	ldr	r3, [r7, #8]
 801223a:	3b01      	subs	r3, #1
 801223c:	68fa      	ldr	r2, [r7, #12]
 801223e:	4413      	add	r3, r2
 8012240:	613b      	str	r3, [r7, #16]
  while ((*to_append != 0) && (current < current_end)) {
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	781b      	ldrb	r3, [r3, #0]
 8012246:	2b00      	cmp	r3, #0
 8012248:	d00e      	beq.n	8012268 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x50>
 801224a:	697a      	ldr	r2, [r7, #20]
 801224c:	693b      	ldr	r3, [r7, #16]
 801224e:	429a      	cmp	r2, r3
 8012250:	d20a      	bcs.n	8012268 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x50>
    *current = *to_append;
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	781a      	ldrb	r2, [r3, #0]
 8012256:	697b      	ldr	r3, [r7, #20]
 8012258:	701a      	strb	r2, [r3, #0]
    ++current;
 801225a:	697b      	ldr	r3, [r7, #20]
 801225c:	3301      	adds	r3, #1
 801225e:	617b      	str	r3, [r7, #20]
    ++to_append;
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	3301      	adds	r3, #1
 8012264:	607b      	str	r3, [r7, #4]
  while ((*to_append != 0) && (current < current_end)) {
 8012266:	e7ec      	b.n	8012242 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x2a>
  }
  *current = 0;
 8012268:	697b      	ldr	r3, [r7, #20]
 801226a:	2200      	movs	r2, #0
 801226c:	701a      	strb	r2, [r3, #0]
  return current;
 801226e:	697b      	ldr	r3, [r7, #20]
}
 8012270:	4618      	mov	r0, r3
 8012272:	371c      	adds	r7, #28
 8012274:	46bd      	mov	sp, r7
 8012276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801227a:	4770      	bx	lr

0801227c <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>:

// Populates the provided buffer with an ASCII representation of the number.
char* FastUInt32ToBufferLeft(uint32_t i, char* buffer, int base) {
 801227c:	b580      	push	{r7, lr}
 801227e:	b088      	sub	sp, #32
 8012280:	af00      	add	r7, sp, #0
 8012282:	60f8      	str	r0, [r7, #12]
 8012284:	60b9      	str	r1, [r7, #8]
 8012286:	607a      	str	r2, [r7, #4]
  char* start = buffer;
 8012288:	68bb      	ldr	r3, [r7, #8]
 801228a:	61bb      	str	r3, [r7, #24]
  do {
    int32_t digit = i % base;
 801228c:	687a      	ldr	r2, [r7, #4]
 801228e:	68fb      	ldr	r3, [r7, #12]
 8012290:	fbb3 f1f2 	udiv	r1, r3, r2
 8012294:	fb02 f201 	mul.w	r2, r2, r1
 8012298:	1a9b      	subs	r3, r3, r2
 801229a:	617b      	str	r3, [r7, #20]
    char character;
    if (digit < 10) {
 801229c:	697b      	ldr	r3, [r7, #20]
 801229e:	2b09      	cmp	r3, #9
 80122a0:	dc04      	bgt.n	80122ac <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x30>
      character = '0' + digit;
 80122a2:	697b      	ldr	r3, [r7, #20]
 80122a4:	b2db      	uxtb	r3, r3
 80122a6:	3330      	adds	r3, #48	; 0x30
 80122a8:	77fb      	strb	r3, [r7, #31]
 80122aa:	e003      	b.n	80122b4 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x38>
    } else {
      character = 'a' + (digit - 10);
 80122ac:	697b      	ldr	r3, [r7, #20]
 80122ae:	b2db      	uxtb	r3, r3
 80122b0:	3357      	adds	r3, #87	; 0x57
 80122b2:	77fb      	strb	r3, [r7, #31]
    }
    *buffer++ = character;
 80122b4:	68bb      	ldr	r3, [r7, #8]
 80122b6:	1c5a      	adds	r2, r3, #1
 80122b8:	60ba      	str	r2, [r7, #8]
 80122ba:	7ffa      	ldrb	r2, [r7, #31]
 80122bc:	701a      	strb	r2, [r3, #0]
    i /= base;
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	68fa      	ldr	r2, [r7, #12]
 80122c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80122c6:	60fb      	str	r3, [r7, #12]
  } while (i > 0);
 80122c8:	68fb      	ldr	r3, [r7, #12]
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	d000      	beq.n	80122d0 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x54>
  do {
 80122ce:	e7dd      	b.n	801228c <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x10>
  *buffer = 0;
 80122d0:	68bb      	ldr	r3, [r7, #8]
 80122d2:	2200      	movs	r2, #0
 80122d4:	701a      	strb	r2, [r3, #0]
  ReverseStringInPlace(start, buffer);
 80122d6:	68b9      	ldr	r1, [r7, #8]
 80122d8:	69b8      	ldr	r0, [r7, #24]
 80122da:	f7ff ff79 	bl	80121d0 <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_>
  return buffer;
 80122de:	68bb      	ldr	r3, [r7, #8]
}
 80122e0:	4618      	mov	r0, r3
 80122e2:	3720      	adds	r7, #32
 80122e4:	46bd      	mov	sp, r7
 80122e6:	bd80      	pop	{r7, pc}

080122e8 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc>:

// Populates the provided buffer with an ASCII representation of the number.
char* FastInt32ToBufferLeft(int32_t i, char* buffer) {
 80122e8:	b580      	push	{r7, lr}
 80122ea:	b084      	sub	sp, #16
 80122ec:	af00      	add	r7, sp, #0
 80122ee:	6078      	str	r0, [r7, #4]
 80122f0:	6039      	str	r1, [r7, #0]
  uint32_t u = i;
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	60fb      	str	r3, [r7, #12]
  if (i < 0) {
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	2b00      	cmp	r3, #0
 80122fa:	da07      	bge.n	801230c <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc+0x24>
    *buffer++ = '-';
 80122fc:	683b      	ldr	r3, [r7, #0]
 80122fe:	1c5a      	adds	r2, r3, #1
 8012300:	603a      	str	r2, [r7, #0]
 8012302:	222d      	movs	r2, #45	; 0x2d
 8012304:	701a      	strb	r2, [r3, #0]
    u = -u;
 8012306:	68fb      	ldr	r3, [r7, #12]
 8012308:	425b      	negs	r3, r3
 801230a:	60fb      	str	r3, [r7, #12]
  }
  return FastUInt32ToBufferLeft(u, buffer, 10);
 801230c:	220a      	movs	r2, #10
 801230e:	6839      	ldr	r1, [r7, #0]
 8012310:	68f8      	ldr	r0, [r7, #12]
 8012312:	f7ff ffb3 	bl	801227c <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
 8012316:	4603      	mov	r3, r0
}
 8012318:	4618      	mov	r0, r3
 801231a:	3710      	adds	r7, #16
 801231c:	46bd      	mov	sp, r7
 801231e:	bd80      	pop	{r7, pc}

08012320 <_ZN12_GLOBAL__N_111StrCatInt32EPcil>:

// Converts a number to a string and appends it to another.
char* StrCatInt32(char* main, int main_max_length, int32_t number) {
 8012320:	b580      	push	{r7, lr}
 8012322:	b090      	sub	sp, #64	; 0x40
 8012324:	af00      	add	r7, sp, #0
 8012326:	60f8      	str	r0, [r7, #12]
 8012328:	60b9      	str	r1, [r7, #8]
 801232a:	607a      	str	r2, [r7, #4]
  char number_string[kFastToBufferSize];
  FastInt32ToBufferLeft(number, number_string);
 801232c:	f107 0310 	add.w	r3, r7, #16
 8012330:	4619      	mov	r1, r3
 8012332:	6878      	ldr	r0, [r7, #4]
 8012334:	f7ff ffd8 	bl	80122e8 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc>
  return StrCatStr(main, main_max_length, number_string);
 8012338:	f107 0310 	add.w	r3, r7, #16
 801233c:	461a      	mov	r2, r3
 801233e:	68b9      	ldr	r1, [r7, #8]
 8012340:	68f8      	ldr	r0, [r7, #12]
 8012342:	f7ff ff69 	bl	8012218 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 8012346:	4603      	mov	r3, r0
}
 8012348:	4618      	mov	r0, r3
 801234a:	3740      	adds	r7, #64	; 0x40
 801234c:	46bd      	mov	sp, r7
 801234e:	bd80      	pop	{r7, pc}

08012350 <_ZN12_GLOBAL__N_112StrCatUInt32EPcimi>:

// Converts a number to a string and appends it to another.
char* StrCatUInt32(char* main, int main_max_length, uint32_t number, int base) {
 8012350:	b580      	push	{r7, lr}
 8012352:	b090      	sub	sp, #64	; 0x40
 8012354:	af00      	add	r7, sp, #0
 8012356:	60f8      	str	r0, [r7, #12]
 8012358:	60b9      	str	r1, [r7, #8]
 801235a:	607a      	str	r2, [r7, #4]
 801235c:	603b      	str	r3, [r7, #0]
  char number_string[kFastToBufferSize];
  FastUInt32ToBufferLeft(number, number_string, base);
 801235e:	f107 0310 	add.w	r3, r7, #16
 8012362:	683a      	ldr	r2, [r7, #0]
 8012364:	4619      	mov	r1, r3
 8012366:	6878      	ldr	r0, [r7, #4]
 8012368:	f7ff ff88 	bl	801227c <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
  return StrCatStr(main, main_max_length, number_string);
 801236c:	f107 0310 	add.w	r3, r7, #16
 8012370:	461a      	mov	r2, r3
 8012372:	68b9      	ldr	r1, [r7, #8]
 8012374:	68f8      	ldr	r0, [r7, #12]
 8012376:	f7ff ff4f 	bl	8012218 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 801237a:	4603      	mov	r3, r0
}
 801237c:	4618      	mov	r0, r3
 801237e:	3740      	adds	r7, #64	; 0x40
 8012380:	46bd      	mov	sp, r7
 8012382:	bd80      	pop	{r7, pc}

08012384 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc>:

// Populates the provided buffer with ASCII representation of the float number.
// Avoids the use of any floating point instructions (since these aren't
// supported on many microcontrollers) and as a consequence prints values with
// power-of-two exponents.
char* FastFloatToBufferLeft(float f, char* buffer) {
 8012384:	b590      	push	{r4, r7, lr}
 8012386:	b09b      	sub	sp, #108	; 0x6c
 8012388:	af00      	add	r7, sp, #0
 801238a:	ed87 0a01 	vstr	s0, [r7, #4]
 801238e:	6038      	str	r0, [r7, #0]
  char* current = buffer;
 8012390:	683b      	ldr	r3, [r7, #0]
 8012392:	667b      	str	r3, [r7, #100]	; 0x64
  char* current_end = buffer + (kFastToBufferSize - 1);
 8012394:	683b      	ldr	r3, [r7, #0]
 8012396:	332f      	adds	r3, #47	; 0x2f
 8012398:	653b      	str	r3, [r7, #80]	; 0x50
  // Access the bit fields of the floating point value to avoid requiring any
  // float instructions. These constants are derived from IEEE 754.
  const uint32_t sign_mask = 0x80000000;
 801239a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801239e:	64fb      	str	r3, [r7, #76]	; 0x4c
  const uint32_t exponent_mask = 0x7f800000;
 80123a0:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 80123a4:	64bb      	str	r3, [r7, #72]	; 0x48
  const int32_t exponent_shift = 23;
 80123a6:	2317      	movs	r3, #23
 80123a8:	647b      	str	r3, [r7, #68]	; 0x44
  const int32_t exponent_bias = 127;
 80123aa:	237f      	movs	r3, #127	; 0x7f
 80123ac:	643b      	str	r3, [r7, #64]	; 0x40
  const uint32_t fraction_mask = 0x007fffff;
 80123ae:	4b6a      	ldr	r3, [pc, #424]	; (8012558 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1d4>)
 80123b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80123b2:	687b      	ldr	r3, [r7, #4]
  uint32_t u;
  memcpy(&u, &f, sizeof(int32_t));
 80123b4:	61fb      	str	r3, [r7, #28]
  const int32_t exponent =
      ((u & exponent_mask) >> exponent_shift) - exponent_bias;
 80123b6:	69fb      	ldr	r3, [r7, #28]
 80123b8:	0ddb      	lsrs	r3, r3, #23
 80123ba:	b2db      	uxtb	r3, r3
 80123bc:	3b7f      	subs	r3, #127	; 0x7f
  const int32_t exponent =
 80123be:	63bb      	str	r3, [r7, #56]	; 0x38
  const uint32_t fraction = (u & fraction_mask);
 80123c0:	69fb      	ldr	r3, [r7, #28]
 80123c2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80123c6:	637b      	str	r3, [r7, #52]	; 0x34
  // Expect ~0x2B1B9D3 for fraction.
  if (u & sign_mask) {
 80123c8:	69fb      	ldr	r3, [r7, #28]
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	da05      	bge.n	80123da <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x56>
    *current = '-';
 80123ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80123d0:	222d      	movs	r2, #45	; 0x2d
 80123d2:	701a      	strb	r2, [r3, #0]
    current += 1;
 80123d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80123d6:	3301      	adds	r3, #1
 80123d8:	667b      	str	r3, [r7, #100]	; 0x64
  }
  *current = 0;
 80123da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80123dc:	2200      	movs	r2, #0
 80123de:	701a      	strb	r2, [r3, #0]
  // These are special cases for infinities and not-a-numbers.
  if (exponent == 128) {
 80123e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123e2:	2b80      	cmp	r3, #128	; 0x80
 80123e4:	d118      	bne.n	8012418 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x94>
    if (fraction == 0) {
 80123e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d10a      	bne.n	8012402 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x7e>
      current = StrCatStr(current, (current_end - current), "Inf");
 80123ec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80123ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80123f0:	1ad3      	subs	r3, r2, r3
 80123f2:	4a5a      	ldr	r2, [pc, #360]	; (801255c <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1d8>)
 80123f4:	4619      	mov	r1, r3
 80123f6:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80123f8:	f7ff ff0e 	bl	8012218 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 80123fc:	6678      	str	r0, [r7, #100]	; 0x64
      return current;
 80123fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012400:	e0a5      	b.n	801254e <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1ca>
    } else {
      current = StrCatStr(current, (current_end - current), "NaN");
 8012402:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012404:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012406:	1ad3      	subs	r3, r2, r3
 8012408:	4a55      	ldr	r2, [pc, #340]	; (8012560 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1dc>)
 801240a:	4619      	mov	r1, r3
 801240c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 801240e:	f7ff ff03 	bl	8012218 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 8012412:	6678      	str	r0, [r7, #100]	; 0x64
      return current;
 8012414:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012416:	e09a      	b.n	801254e <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1ca>
  // correct decimal digits we need to scale our value before passing it to the
  // conversion function. This scale should be 10000000/8388608 = 1.1920928955.
  // We can approximate this using multiply-adds and right-shifts using the
  // values in this array. The 1. portion of the number string is printed out
  // in a fixed way before the fraction, below.
  const int32_t scale_shifts_size = 13;
 8012418:	230d      	movs	r3, #13
 801241a:	633b      	str	r3, [r7, #48]	; 0x30
  const int8_t scale_shifts[13] = {3,  4,  8,  11, 13, 14, 17,
 801241c:	4b51      	ldr	r3, [pc, #324]	; (8012564 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1e0>)
 801241e:	f107 040c 	add.w	r4, r7, #12
 8012422:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012424:	c407      	stmia	r4!, {r0, r1, r2}
 8012426:	7023      	strb	r3, [r4, #0]
                                   18, 19, 20, 21, 22, 23};
  uint32_t scaled_fraction = fraction;
 8012428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801242a:	663b      	str	r3, [r7, #96]	; 0x60
  for (int i = 0; i < scale_shifts_size; ++i) {
 801242c:	2300      	movs	r3, #0
 801242e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012430:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012432:	2b0c      	cmp	r3, #12
 8012434:	dc0f      	bgt.n	8012456 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xd2>
    scaled_fraction += (fraction >> scale_shifts[i]);
 8012436:	f107 020c 	add.w	r2, r7, #12
 801243a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801243c:	4413      	add	r3, r2
 801243e:	f993 3000 	ldrsb.w	r3, [r3]
 8012442:	461a      	mov	r2, r3
 8012444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012446:	40d3      	lsrs	r3, r2
 8012448:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801244a:	4413      	add	r3, r2
 801244c:	663b      	str	r3, [r7, #96]	; 0x60
  for (int i = 0; i < scale_shifts_size; ++i) {
 801244e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012450:	3301      	adds	r3, #1
 8012452:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012454:	e7ec      	b.n	8012430 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xac>
  }
  *current = '1';
 8012456:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012458:	2231      	movs	r2, #49	; 0x31
 801245a:	701a      	strb	r2, [r3, #0]
  current += 1;
 801245c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801245e:	3301      	adds	r3, #1
 8012460:	667b      	str	r3, [r7, #100]	; 0x64
  *current = '.';
 8012462:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012464:	222e      	movs	r2, #46	; 0x2e
 8012466:	701a      	strb	r2, [r3, #0]
  current += 1;
 8012468:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801246a:	3301      	adds	r3, #1
 801246c:	667b      	str	r3, [r7, #100]	; 0x64
  *current = 0;
 801246e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012470:	2200      	movs	r2, #0
 8012472:	701a      	strb	r2, [r3, #0]

  // Prepend leading zeros to fill in all 7 bytes of the fraction. Truncate
  // zeros off the end of the fraction. Every fractional value takes 7 bytes.
  // For example, 2500 would be written into the buffer as 0002500 since it
  // represents .00025.
  constexpr int kMaxFractionalDigits = 7;
 8012474:	2307      	movs	r3, #7
 8012476:	62fb      	str	r3, [r7, #44]	; 0x2c

  // Abort early if there is not enough space in the buffer.
  if (current_end - current <= kMaxFractionalDigits) {
 8012478:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801247a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801247c:	1ad3      	subs	r3, r2, r3
 801247e:	2b07      	cmp	r3, #7
 8012480:	dc01      	bgt.n	8012486 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x102>
    return current;
 8012482:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012484:	e063      	b.n	801254e <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1ca>
  }

  // Pre-fill buffer with zeros to ensure zero-truncation works properly.
  for (int i = 1; i < kMaxFractionalDigits; i++) {
 8012486:	2301      	movs	r3, #1
 8012488:	65bb      	str	r3, [r7, #88]	; 0x58
 801248a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801248c:	2b06      	cmp	r3, #6
 801248e:	dc08      	bgt.n	80124a2 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x11e>
    *(current + i) = '0';
 8012490:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012492:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8012494:	4413      	add	r3, r2
 8012496:	2230      	movs	r2, #48	; 0x30
 8012498:	701a      	strb	r2, [r3, #0]
  for (int i = 1; i < kMaxFractionalDigits; i++) {
 801249a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801249c:	3301      	adds	r3, #1
 801249e:	65bb      	str	r3, [r7, #88]	; 0x58
 80124a0:	e7f3      	b.n	801248a <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x106>
  }

  // Track how large the fraction is to add leading zeros.
  char* previous = current;
 80124a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80124a4:	62bb      	str	r3, [r7, #40]	; 0x28
  current = StrCatUInt32(current, (current_end - current), scaled_fraction, 10);
 80124a6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80124a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80124aa:	1ad1      	subs	r1, r2, r3
 80124ac:	230a      	movs	r3, #10
 80124ae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80124b0:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80124b2:	f7ff ff4d 	bl	8012350 <_ZN12_GLOBAL__N_112StrCatUInt32EPcimi>
 80124b6:	6678      	str	r0, [r7, #100]	; 0x64
  int fraction_digits = current - previous;
 80124b8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80124ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124bc:	1ad3      	subs	r3, r2, r3
 80124be:	627b      	str	r3, [r7, #36]	; 0x24
  int leading_zeros = kMaxFractionalDigits - fraction_digits;
 80124c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124c2:	f1c3 0307 	rsb	r3, r3, #7
 80124c6:	623b      	str	r3, [r7, #32]

  // Overwrite the null terminator from StrCatUInt32 to ensure zero-trunctaion
  // works properly.
  *current = '0';
 80124c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80124ca:	2230      	movs	r2, #48	; 0x30
 80124cc:	701a      	strb	r2, [r3, #0]

  // Shift fraction values and prepend zeros if necessary.
  if (leading_zeros != 0) {
 80124ce:	6a3b      	ldr	r3, [r7, #32]
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	d018      	beq.n	8012506 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x182>
    for (int i = 0; i < fraction_digits; i++) {
 80124d4:	2300      	movs	r3, #0
 80124d6:	657b      	str	r3, [r7, #84]	; 0x54
 80124d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80124da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124dc:	429a      	cmp	r2, r3
 80124de:	da0f      	bge.n	8012500 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x17c>
      current--;
 80124e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80124e2:	3b01      	subs	r3, #1
 80124e4:	667b      	str	r3, [r7, #100]	; 0x64
      *(current + leading_zeros) = *current;
 80124e6:	6a3b      	ldr	r3, [r7, #32]
 80124e8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80124ea:	4413      	add	r3, r2
 80124ec:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80124ee:	7812      	ldrb	r2, [r2, #0]
 80124f0:	701a      	strb	r2, [r3, #0]
      *current = '0';
 80124f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80124f4:	2230      	movs	r2, #48	; 0x30
 80124f6:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < fraction_digits; i++) {
 80124f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80124fa:	3301      	adds	r3, #1
 80124fc:	657b      	str	r3, [r7, #84]	; 0x54
 80124fe:	e7eb      	b.n	80124d8 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x154>
    }
    current += kMaxFractionalDigits;
 8012500:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012502:	3307      	adds	r3, #7
 8012504:	667b      	str	r3, [r7, #100]	; 0x64
  }

  // Truncate trailing zeros for cleaner logs. Ensure we leave at least one
  // fractional character for the case when scaled_fraction is 0.
  while (*(current - 1) == '0' && (current - 1) > previous) {
 8012506:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012508:	3b01      	subs	r3, #1
 801250a:	781b      	ldrb	r3, [r3, #0]
 801250c:	2b30      	cmp	r3, #48	; 0x30
 801250e:	d108      	bne.n	8012522 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x19e>
 8012510:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012512:	3b01      	subs	r3, #1
 8012514:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012516:	429a      	cmp	r2, r3
 8012518:	d203      	bcs.n	8012522 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x19e>
    current--;
 801251a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801251c:	3b01      	subs	r3, #1
 801251e:	667b      	str	r3, [r7, #100]	; 0x64
  while (*(current - 1) == '0' && (current - 1) > previous) {
 8012520:	e7f1      	b.n	8012506 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x182>
  }
  *current = 0;
 8012522:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012524:	2200      	movs	r2, #0
 8012526:	701a      	strb	r2, [r3, #0]
  current = StrCatStr(current, (current_end - current), "*2^");
 8012528:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801252a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801252c:	1ad3      	subs	r3, r2, r3
 801252e:	4a0e      	ldr	r2, [pc, #56]	; (8012568 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1e4>)
 8012530:	4619      	mov	r1, r3
 8012532:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8012534:	f7ff fe70 	bl	8012218 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 8012538:	6678      	str	r0, [r7, #100]	; 0x64
  current = StrCatInt32(current, (current_end - current), exponent);
 801253a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801253c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801253e:	1ad3      	subs	r3, r2, r3
 8012540:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012542:	4619      	mov	r1, r3
 8012544:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8012546:	f7ff feeb 	bl	8012320 <_ZN12_GLOBAL__N_111StrCatInt32EPcil>
 801254a:	6678      	str	r0, [r7, #100]	; 0x64
  return current;
 801254c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
}
 801254e:	4618      	mov	r0, r3
 8012550:	376c      	adds	r7, #108	; 0x6c
 8012552:	46bd      	mov	sp, r7
 8012554:	bd90      	pop	{r4, r7, pc}
 8012556:	bf00      	nop
 8012558:	007fffff 	.word	0x007fffff
 801255c:	0802bf9c 	.word	0x0802bf9c
 8012560:	0802bfa0 	.word	0x0802bfa0
 8012564:	0802bfa8 	.word	0x0802bfa8
 8012568:	0802bfa4 	.word	0x0802bfa4

0801256c <_ZN12_GLOBAL__N_111FormatInt32EPcl>:

int FormatInt32(char* output, int32_t i) {
 801256c:	b580      	push	{r7, lr}
 801256e:	b082      	sub	sp, #8
 8012570:	af00      	add	r7, sp, #0
 8012572:	6078      	str	r0, [r7, #4]
 8012574:	6039      	str	r1, [r7, #0]
  return static_cast<int>(FastInt32ToBufferLeft(i, output) - output);
 8012576:	6879      	ldr	r1, [r7, #4]
 8012578:	6838      	ldr	r0, [r7, #0]
 801257a:	f7ff feb5 	bl	80122e8 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc>
 801257e:	4602      	mov	r2, r0
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	1ad3      	subs	r3, r2, r3
}
 8012584:	4618      	mov	r0, r3
 8012586:	3708      	adds	r7, #8
 8012588:	46bd      	mov	sp, r7
 801258a:	bd80      	pop	{r7, pc}

0801258c <_ZN12_GLOBAL__N_112FormatUInt32EPcm>:

int FormatUInt32(char* output, uint32_t i) {
 801258c:	b580      	push	{r7, lr}
 801258e:	b082      	sub	sp, #8
 8012590:	af00      	add	r7, sp, #0
 8012592:	6078      	str	r0, [r7, #4]
 8012594:	6039      	str	r1, [r7, #0]
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 10) - output);
 8012596:	220a      	movs	r2, #10
 8012598:	6879      	ldr	r1, [r7, #4]
 801259a:	6838      	ldr	r0, [r7, #0]
 801259c:	f7ff fe6e 	bl	801227c <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
 80125a0:	4602      	mov	r2, r0
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	1ad3      	subs	r3, r2, r3
}
 80125a6:	4618      	mov	r0, r3
 80125a8:	3708      	adds	r7, #8
 80125aa:	46bd      	mov	sp, r7
 80125ac:	bd80      	pop	{r7, pc}

080125ae <_ZN12_GLOBAL__N_19FormatHexEPcm>:

int FormatHex(char* output, uint32_t i) {
 80125ae:	b580      	push	{r7, lr}
 80125b0:	b082      	sub	sp, #8
 80125b2:	af00      	add	r7, sp, #0
 80125b4:	6078      	str	r0, [r7, #4]
 80125b6:	6039      	str	r1, [r7, #0]
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 16) - output);
 80125b8:	2210      	movs	r2, #16
 80125ba:	6879      	ldr	r1, [r7, #4]
 80125bc:	6838      	ldr	r0, [r7, #0]
 80125be:	f7ff fe5d 	bl	801227c <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
 80125c2:	4602      	mov	r2, r0
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	1ad3      	subs	r3, r2, r3
}
 80125c8:	4618      	mov	r0, r3
 80125ca:	3708      	adds	r7, #8
 80125cc:	46bd      	mov	sp, r7
 80125ce:	bd80      	pop	{r7, pc}

080125d0 <_ZN12_GLOBAL__N_111FormatFloatEPcf>:

int FormatFloat(char* output, float i) {
 80125d0:	b580      	push	{r7, lr}
 80125d2:	b082      	sub	sp, #8
 80125d4:	af00      	add	r7, sp, #0
 80125d6:	6078      	str	r0, [r7, #4]
 80125d8:	ed87 0a00 	vstr	s0, [r7]
  return static_cast<int>(FastFloatToBufferLeft(i, output) - output);
 80125dc:	6878      	ldr	r0, [r7, #4]
 80125de:	ed97 0a00 	vldr	s0, [r7]
 80125e2:	f7ff fecf 	bl	8012384 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc>
 80125e6:	4602      	mov	r2, r0
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	1ad3      	subs	r3, r2, r3
}
 80125ec:	4618      	mov	r0, r3
 80125ee:	3708      	adds	r7, #8
 80125f0:	46bd      	mov	sp, r7
 80125f2:	bd80      	pop	{r7, pc}

080125f4 <MicroVsnprintf>:

}  // namespace

extern "C" int MicroVsnprintf(char* output, int len, const char* format,
                              va_list args) {
 80125f4:	b590      	push	{r4, r7, lr}
 80125f6:	b08b      	sub	sp, #44	; 0x2c
 80125f8:	af00      	add	r7, sp, #0
 80125fa:	60f8      	str	r0, [r7, #12]
 80125fc:	60b9      	str	r1, [r7, #8]
 80125fe:	607a      	str	r2, [r7, #4]
 8012600:	603b      	str	r3, [r7, #0]
  int output_index = 0;
 8012602:	2300      	movs	r3, #0
 8012604:	627b      	str	r3, [r7, #36]	; 0x24
  const char* current = format;
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	623b      	str	r3, [r7, #32]
  // One extra character must be left for the null terminator.
  const int usable_length = len - 1;
 801260a:	68bb      	ldr	r3, [r7, #8]
 801260c:	3b01      	subs	r3, #1
 801260e:	61bb      	str	r3, [r7, #24]
  while (*current != '\0' && output_index < usable_length) {
 8012610:	6a3b      	ldr	r3, [r7, #32]
 8012612:	781b      	ldrb	r3, [r3, #0]
 8012614:	2b00      	cmp	r3, #0
 8012616:	f000 8151 	beq.w	80128bc <MicroVsnprintf+0x2c8>
 801261a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801261c:	69bb      	ldr	r3, [r7, #24]
 801261e:	429a      	cmp	r2, r3
 8012620:	f280 814c 	bge.w	80128bc <MicroVsnprintf+0x2c8>
    if (*current == '%') {
 8012624:	6a3b      	ldr	r3, [r7, #32]
 8012626:	781b      	ldrb	r3, [r3, #0]
 8012628:	2b25      	cmp	r3, #37	; 0x25
 801262a:	f040 813b 	bne.w	80128a4 <MicroVsnprintf+0x2b0>
      current++;
 801262e:	6a3b      	ldr	r3, [r7, #32]
 8012630:	3301      	adds	r3, #1
 8012632:	623b      	str	r3, [r7, #32]
      switch (*current) {
 8012634:	6a3b      	ldr	r3, [r7, #32]
 8012636:	781b      	ldrb	r3, [r3, #0]
 8012638:	2b25      	cmp	r3, #37	; 0x25
 801263a:	f000 80e2 	beq.w	8012802 <MicroVsnprintf+0x20e>
 801263e:	2b25      	cmp	r3, #37	; 0x25
 8012640:	dbe6      	blt.n	8012610 <MicroVsnprintf+0x1c>
 8012642:	2b78      	cmp	r3, #120	; 0x78
 8012644:	dce4      	bgt.n	8012610 <MicroVsnprintf+0x1c>
 8012646:	2b63      	cmp	r3, #99	; 0x63
 8012648:	dbe2      	blt.n	8012610 <MicroVsnprintf+0x1c>
 801264a:	3b63      	subs	r3, #99	; 0x63
 801264c:	2b15      	cmp	r3, #21
 801264e:	d8df      	bhi.n	8012610 <MicroVsnprintf+0x1c>
 8012650:	a201      	add	r2, pc, #4	; (adr r2, 8012658 <MicroVsnprintf+0x64>)
 8012652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012656:	bf00      	nop
 8012658:	0801281b 	.word	0x0801281b
 801265c:	080126b1 	.word	0x080126b1
 8012660:	08012611 	.word	0x08012611
 8012664:	08012797 	.word	0x08012797
 8012668:	08012611 	.word	0x08012611
 801266c:	08012611 	.word	0x08012611
 8012670:	08012611 	.word	0x08012611
 8012674:	08012611 	.word	0x08012611
 8012678:	08012611 	.word	0x08012611
 801267c:	08012611 	.word	0x08012611
 8012680:	08012611 	.word	0x08012611
 8012684:	08012611 	.word	0x08012611
 8012688:	08012611 	.word	0x08012611
 801268c:	08012611 	.word	0x08012611
 8012690:	08012611 	.word	0x08012611
 8012694:	08012611 	.word	0x08012611
 8012698:	08012859 	.word	0x08012859
 801269c:	08012611 	.word	0x08012611
 80126a0:	080126f3 	.word	0x080126f3
 80126a4:	08012611 	.word	0x08012611
 80126a8:	08012611 	.word	0x08012611
 80126ac:	08012735 	.word	0x08012735
        case 'd':
          // Cut off log message if format could exceed log buffer length.
          if (usable_length - output_index < kMaxIntCharsNeeded) {
 80126b0:	69ba      	ldr	r2, [r7, #24]
 80126b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126b4:	1ad3      	subs	r3, r2, r3
 80126b6:	2b0a      	cmp	r3, #10
 80126b8:	dc09      	bgt.n	80126ce <MicroVsnprintf+0xda>
            output[output_index++] = '\0';
 80126ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126bc:	1c5a      	adds	r2, r3, #1
 80126be:	627a      	str	r2, [r7, #36]	; 0x24
 80126c0:	461a      	mov	r2, r3
 80126c2:	68fb      	ldr	r3, [r7, #12]
 80126c4:	4413      	add	r3, r2
 80126c6:	2200      	movs	r2, #0
 80126c8:	701a      	strb	r2, [r3, #0]
            return output_index;
 80126ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126cc:	e0ff      	b.n	80128ce <MicroVsnprintf+0x2da>
          }
          output_index +=
              FormatInt32(&output[output_index], va_arg(args, int32_t));
 80126ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126d0:	68fa      	ldr	r2, [r7, #12]
 80126d2:	18d0      	adds	r0, r2, r3
 80126d4:	683b      	ldr	r3, [r7, #0]
 80126d6:	1d1a      	adds	r2, r3, #4
 80126d8:	603a      	str	r2, [r7, #0]
 80126da:	681b      	ldr	r3, [r3, #0]
 80126dc:	4619      	mov	r1, r3
 80126de:	f7ff ff45 	bl	801256c <_ZN12_GLOBAL__N_111FormatInt32EPcl>
 80126e2:	4602      	mov	r2, r0
          output_index +=
 80126e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126e6:	4413      	add	r3, r2
 80126e8:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 80126ea:	6a3b      	ldr	r3, [r7, #32]
 80126ec:	3301      	adds	r3, #1
 80126ee:	623b      	str	r3, [r7, #32]
          break;
 80126f0:	e0e3      	b.n	80128ba <MicroVsnprintf+0x2c6>
        case 'u':
          if (usable_length - output_index < kMaxIntCharsNeeded) {
 80126f2:	69ba      	ldr	r2, [r7, #24]
 80126f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126f6:	1ad3      	subs	r3, r2, r3
 80126f8:	2b0a      	cmp	r3, #10
 80126fa:	dc09      	bgt.n	8012710 <MicroVsnprintf+0x11c>
            output[output_index++] = '\0';
 80126fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126fe:	1c5a      	adds	r2, r3, #1
 8012700:	627a      	str	r2, [r7, #36]	; 0x24
 8012702:	461a      	mov	r2, r3
 8012704:	68fb      	ldr	r3, [r7, #12]
 8012706:	4413      	add	r3, r2
 8012708:	2200      	movs	r2, #0
 801270a:	701a      	strb	r2, [r3, #0]
            return output_index;
 801270c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801270e:	e0de      	b.n	80128ce <MicroVsnprintf+0x2da>
          }
          output_index +=
              FormatUInt32(&output[output_index], va_arg(args, uint32_t));
 8012710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012712:	68fa      	ldr	r2, [r7, #12]
 8012714:	18d0      	adds	r0, r2, r3
 8012716:	683b      	ldr	r3, [r7, #0]
 8012718:	1d1a      	adds	r2, r3, #4
 801271a:	603a      	str	r2, [r7, #0]
 801271c:	681b      	ldr	r3, [r3, #0]
 801271e:	4619      	mov	r1, r3
 8012720:	f7ff ff34 	bl	801258c <_ZN12_GLOBAL__N_112FormatUInt32EPcm>
 8012724:	4602      	mov	r2, r0
          output_index +=
 8012726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012728:	4413      	add	r3, r2
 801272a:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 801272c:	6a3b      	ldr	r3, [r7, #32]
 801272e:	3301      	adds	r3, #1
 8012730:	623b      	str	r3, [r7, #32]
          break;
 8012732:	e0c2      	b.n	80128ba <MicroVsnprintf+0x2c6>
        case 'x':
          if (usable_length - output_index < kMaxHexCharsNeeded) {
 8012734:	69ba      	ldr	r2, [r7, #24]
 8012736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012738:	1ad3      	subs	r3, r2, r3
 801273a:	2b09      	cmp	r3, #9
 801273c:	dc09      	bgt.n	8012752 <MicroVsnprintf+0x15e>
            output[output_index++] = '\0';
 801273e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012740:	1c5a      	adds	r2, r3, #1
 8012742:	627a      	str	r2, [r7, #36]	; 0x24
 8012744:	461a      	mov	r2, r3
 8012746:	68fb      	ldr	r3, [r7, #12]
 8012748:	4413      	add	r3, r2
 801274a:	2200      	movs	r2, #0
 801274c:	701a      	strb	r2, [r3, #0]
            return output_index;
 801274e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012750:	e0bd      	b.n	80128ce <MicroVsnprintf+0x2da>
          }
          output[output_index++] = '0';
 8012752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012754:	1c5a      	adds	r2, r3, #1
 8012756:	627a      	str	r2, [r7, #36]	; 0x24
 8012758:	461a      	mov	r2, r3
 801275a:	68fb      	ldr	r3, [r7, #12]
 801275c:	4413      	add	r3, r2
 801275e:	2230      	movs	r2, #48	; 0x30
 8012760:	701a      	strb	r2, [r3, #0]
          output[output_index++] = 'x';
 8012762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012764:	1c5a      	adds	r2, r3, #1
 8012766:	627a      	str	r2, [r7, #36]	; 0x24
 8012768:	461a      	mov	r2, r3
 801276a:	68fb      	ldr	r3, [r7, #12]
 801276c:	4413      	add	r3, r2
 801276e:	2278      	movs	r2, #120	; 0x78
 8012770:	701a      	strb	r2, [r3, #0]
          output_index +=
              FormatHex(&output[output_index], va_arg(args, uint32_t));
 8012772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012774:	68fa      	ldr	r2, [r7, #12]
 8012776:	18d0      	adds	r0, r2, r3
 8012778:	683b      	ldr	r3, [r7, #0]
 801277a:	1d1a      	adds	r2, r3, #4
 801277c:	603a      	str	r2, [r7, #0]
 801277e:	681b      	ldr	r3, [r3, #0]
 8012780:	4619      	mov	r1, r3
 8012782:	f7ff ff14 	bl	80125ae <_ZN12_GLOBAL__N_19FormatHexEPcm>
 8012786:	4602      	mov	r2, r0
          output_index +=
 8012788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801278a:	4413      	add	r3, r2
 801278c:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 801278e:	6a3b      	ldr	r3, [r7, #32]
 8012790:	3301      	adds	r3, #1
 8012792:	623b      	str	r3, [r7, #32]
          break;
 8012794:	e091      	b.n	80128ba <MicroVsnprintf+0x2c6>
        case 'f':
          if (usable_length - output_index < kMaxFloatCharsNeeded) {
 8012796:	69ba      	ldr	r2, [r7, #24]
 8012798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801279a:	1ad3      	subs	r3, r2, r3
 801279c:	ee07 3a90 	vmov	s15, r3
 80127a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80127a4:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 80127a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80127ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127b0:	d509      	bpl.n	80127c6 <MicroVsnprintf+0x1d2>
            output[output_index++] = '\0';
 80127b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127b4:	1c5a      	adds	r2, r3, #1
 80127b6:	627a      	str	r2, [r7, #36]	; 0x24
 80127b8:	461a      	mov	r2, r3
 80127ba:	68fb      	ldr	r3, [r7, #12]
 80127bc:	4413      	add	r3, r2
 80127be:	2200      	movs	r2, #0
 80127c0:	701a      	strb	r2, [r3, #0]
            return output_index;
 80127c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127c4:	e083      	b.n	80128ce <MicroVsnprintf+0x2da>
          }
          output_index +=
              FormatFloat(&output[output_index], va_arg(args, double));
 80127c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127c8:	68fa      	ldr	r2, [r7, #12]
 80127ca:	18d4      	adds	r4, r2, r3
 80127cc:	683b      	ldr	r3, [r7, #0]
 80127ce:	3307      	adds	r3, #7
 80127d0:	f023 0307 	bic.w	r3, r3, #7
 80127d4:	f103 0208 	add.w	r2, r3, #8
 80127d8:	603a      	str	r2, [r7, #0]
 80127da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127de:	4610      	mov	r0, r2
 80127e0:	4619      	mov	r1, r3
 80127e2:	f7ee fa1d 	bl	8000c20 <__aeabi_d2f>
 80127e6:	4603      	mov	r3, r0
 80127e8:	ee00 3a10 	vmov	s0, r3
 80127ec:	4620      	mov	r0, r4
 80127ee:	f7ff feef 	bl	80125d0 <_ZN12_GLOBAL__N_111FormatFloatEPcf>
 80127f2:	4602      	mov	r2, r0
          output_index +=
 80127f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127f6:	4413      	add	r3, r2
 80127f8:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 80127fa:	6a3b      	ldr	r3, [r7, #32]
 80127fc:	3301      	adds	r3, #1
 80127fe:	623b      	str	r3, [r7, #32]
          break;
 8012800:	e05b      	b.n	80128ba <MicroVsnprintf+0x2c6>
        case '%':
          output[output_index++] = *current++;
 8012802:	6a3b      	ldr	r3, [r7, #32]
 8012804:	1c5a      	adds	r2, r3, #1
 8012806:	623a      	str	r2, [r7, #32]
 8012808:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801280a:	1c51      	adds	r1, r2, #1
 801280c:	6279      	str	r1, [r7, #36]	; 0x24
 801280e:	4611      	mov	r1, r2
 8012810:	68fa      	ldr	r2, [r7, #12]
 8012812:	440a      	add	r2, r1
 8012814:	781b      	ldrb	r3, [r3, #0]
 8012816:	7013      	strb	r3, [r2, #0]
          break;
 8012818:	e04f      	b.n	80128ba <MicroVsnprintf+0x2c6>
        case 'c':
          if (usable_length - output_index < 1) {
 801281a:	69ba      	ldr	r2, [r7, #24]
 801281c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801281e:	1ad3      	subs	r3, r2, r3
 8012820:	2b00      	cmp	r3, #0
 8012822:	dc09      	bgt.n	8012838 <MicroVsnprintf+0x244>
            output[output_index++] = '\0';
 8012824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012826:	1c5a      	adds	r2, r3, #1
 8012828:	627a      	str	r2, [r7, #36]	; 0x24
 801282a:	461a      	mov	r2, r3
 801282c:	68fb      	ldr	r3, [r7, #12]
 801282e:	4413      	add	r3, r2
 8012830:	2200      	movs	r2, #0
 8012832:	701a      	strb	r2, [r3, #0]
            return output_index;
 8012834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012836:	e04a      	b.n	80128ce <MicroVsnprintf+0x2da>
          }
          output[output_index++] = va_arg(args, int32_t);
 8012838:	683b      	ldr	r3, [r7, #0]
 801283a:	1d1a      	adds	r2, r3, #4
 801283c:	603a      	str	r2, [r7, #0]
 801283e:	6819      	ldr	r1, [r3, #0]
 8012840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012842:	1c5a      	adds	r2, r3, #1
 8012844:	627a      	str	r2, [r7, #36]	; 0x24
 8012846:	461a      	mov	r2, r3
 8012848:	68fb      	ldr	r3, [r7, #12]
 801284a:	4413      	add	r3, r2
 801284c:	b2ca      	uxtb	r2, r1
 801284e:	701a      	strb	r2, [r3, #0]
          current++;
 8012850:	6a3b      	ldr	r3, [r7, #32]
 8012852:	3301      	adds	r3, #1
 8012854:	623b      	str	r3, [r7, #32]
          break;
 8012856:	e030      	b.n	80128ba <MicroVsnprintf+0x2c6>
        case 's':
          char* string = va_arg(args, char*);
 8012858:	683b      	ldr	r3, [r7, #0]
 801285a:	1d1a      	adds	r2, r3, #4
 801285c:	603a      	str	r2, [r7, #0]
 801285e:	681b      	ldr	r3, [r3, #0]
 8012860:	617b      	str	r3, [r7, #20]
          int string_idx = 0;
 8012862:	2300      	movs	r3, #0
 8012864:	61fb      	str	r3, [r7, #28]
          while (string_idx + output_index < usable_length &&
 8012866:	69fa      	ldr	r2, [r7, #28]
 8012868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801286a:	4413      	add	r3, r2
 801286c:	69ba      	ldr	r2, [r7, #24]
 801286e:	429a      	cmp	r2, r3
 8012870:	dd14      	ble.n	801289c <MicroVsnprintf+0x2a8>
                 string[string_idx] != '\0') {
 8012872:	69fb      	ldr	r3, [r7, #28]
 8012874:	697a      	ldr	r2, [r7, #20]
 8012876:	4413      	add	r3, r2
 8012878:	781b      	ldrb	r3, [r3, #0]
          while (string_idx + output_index < usable_length &&
 801287a:	2b00      	cmp	r3, #0
 801287c:	d00e      	beq.n	801289c <MicroVsnprintf+0x2a8>
            output[output_index++] = string[string_idx++];
 801287e:	69fb      	ldr	r3, [r7, #28]
 8012880:	1c5a      	adds	r2, r3, #1
 8012882:	61fa      	str	r2, [r7, #28]
 8012884:	461a      	mov	r2, r3
 8012886:	697b      	ldr	r3, [r7, #20]
 8012888:	441a      	add	r2, r3
 801288a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801288c:	1c59      	adds	r1, r3, #1
 801288e:	6279      	str	r1, [r7, #36]	; 0x24
 8012890:	4619      	mov	r1, r3
 8012892:	68fb      	ldr	r3, [r7, #12]
 8012894:	440b      	add	r3, r1
 8012896:	7812      	ldrb	r2, [r2, #0]
 8012898:	701a      	strb	r2, [r3, #0]
          while (string_idx + output_index < usable_length &&
 801289a:	e7e4      	b.n	8012866 <MicroVsnprintf+0x272>
          }
          current++;
 801289c:	6a3b      	ldr	r3, [r7, #32]
 801289e:	3301      	adds	r3, #1
 80128a0:	623b      	str	r3, [r7, #32]
 80128a2:	e6b5      	b.n	8012610 <MicroVsnprintf+0x1c>
      }
    } else {
      output[output_index++] = *current++;
 80128a4:	6a3b      	ldr	r3, [r7, #32]
 80128a6:	1c5a      	adds	r2, r3, #1
 80128a8:	623a      	str	r2, [r7, #32]
 80128aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80128ac:	1c51      	adds	r1, r2, #1
 80128ae:	6279      	str	r1, [r7, #36]	; 0x24
 80128b0:	4611      	mov	r1, r2
 80128b2:	68fa      	ldr	r2, [r7, #12]
 80128b4:	440a      	add	r2, r1
 80128b6:	781b      	ldrb	r3, [r3, #0]
 80128b8:	7013      	strb	r3, [r2, #0]
  while (*current != '\0' && output_index < usable_length) {
 80128ba:	e6a9      	b.n	8012610 <MicroVsnprintf+0x1c>
    }
  }
  output[output_index++] = '\0';
 80128bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128be:	1c5a      	adds	r2, r3, #1
 80128c0:	627a      	str	r2, [r7, #36]	; 0x24
 80128c2:	461a      	mov	r2, r3
 80128c4:	68fb      	ldr	r3, [r7, #12]
 80128c6:	4413      	add	r3, r2
 80128c8:	2200      	movs	r2, #0
 80128ca:	701a      	strb	r2, [r3, #0]
  return output_index;
 80128cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80128ce:	4618      	mov	r0, r3
 80128d0:	372c      	adds	r7, #44	; 0x2c
 80128d2:	46bd      	mov	sp, r7
 80128d4:	bd90      	pop	{r4, r7, pc}
 80128d6:	bf00      	nop

080128d8 <_ZN6tflite12ElementCountERK14TfLiteIntArray>:
#include "tensorflow/lite/micro/memory_helpers.h"
#include "tensorflow/lite/micro/micro_error_reporter.h"

namespace tflite {

int ElementCount(const TfLiteIntArray& dims) {
 80128d8:	b480      	push	{r7}
 80128da:	b085      	sub	sp, #20
 80128dc:	af00      	add	r7, sp, #0
 80128de:	6078      	str	r0, [r7, #4]
  int result = 1;
 80128e0:	2301      	movs	r3, #1
 80128e2:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < dims.size; ++i) {
 80128e4:	2300      	movs	r3, #0
 80128e6:	60bb      	str	r3, [r7, #8]
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	681b      	ldr	r3, [r3, #0]
 80128ec:	68ba      	ldr	r2, [r7, #8]
 80128ee:	429a      	cmp	r2, r3
 80128f0:	da0c      	bge.n	801290c <_ZN6tflite12ElementCountERK14TfLiteIntArray+0x34>
    result *= dims.data[i];
 80128f2:	687a      	ldr	r2, [r7, #4]
 80128f4:	68bb      	ldr	r3, [r7, #8]
 80128f6:	009b      	lsls	r3, r3, #2
 80128f8:	4413      	add	r3, r2
 80128fa:	685a      	ldr	r2, [r3, #4]
 80128fc:	68fb      	ldr	r3, [r7, #12]
 80128fe:	fb02 f303 	mul.w	r3, r2, r3
 8012902:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < dims.size; ++i) {
 8012904:	68bb      	ldr	r3, [r7, #8]
 8012906:	3301      	adds	r3, #1
 8012908:	60bb      	str	r3, [r7, #8]
 801290a:	e7ed      	b.n	80128e8 <_ZN6tflite12ElementCountERK14TfLiteIntArray+0x10>
  }
  return result;
 801290c:	68fb      	ldr	r3, [r7, #12]
}
 801290e:	4618      	mov	r0, r3
 8012910:	3714      	adds	r7, #20
 8012912:	46bd      	mov	sp, r7
 8012914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012918:	4770      	bx	lr
	...

0801291c <_ZN6tflite21SimpleMemoryAllocatorC1ERKS0_>:
namespace tflite {

// TODO(petewarden): This allocator never frees up or reuses  any memory, even
// though we have enough information about lifetimes of the tensors to do so.
// This makes it pretty wasteful, so we should use a more intelligent method.
class SimpleMemoryAllocator {
 801291c:	b480      	push	{r7}
 801291e:	b083      	sub	sp, #12
 8012920:	af00      	add	r7, sp, #0
 8012922:	6078      	str	r0, [r7, #4]
 8012924:	6039      	str	r1, [r7, #0]
 8012926:	4a11      	ldr	r2, [pc, #68]	; (801296c <_ZN6tflite21SimpleMemoryAllocatorC1ERKS0_+0x50>)
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	601a      	str	r2, [r3, #0]
 801292c:	683b      	ldr	r3, [r7, #0]
 801292e:	685a      	ldr	r2, [r3, #4]
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	605a      	str	r2, [r3, #4]
 8012934:	683b      	ldr	r3, [r7, #0]
 8012936:	689a      	ldr	r2, [r3, #8]
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	609a      	str	r2, [r3, #8]
 801293c:	683b      	ldr	r3, [r7, #0]
 801293e:	68da      	ldr	r2, [r3, #12]
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	60da      	str	r2, [r3, #12]
 8012944:	683b      	ldr	r3, [r7, #0]
 8012946:	691a      	ldr	r2, [r3, #16]
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	611a      	str	r2, [r3, #16]
 801294c:	683b      	ldr	r3, [r7, #0]
 801294e:	695a      	ldr	r2, [r3, #20]
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	615a      	str	r2, [r3, #20]
 8012954:	683b      	ldr	r3, [r7, #0]
 8012956:	699a      	ldr	r2, [r3, #24]
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	619a      	str	r2, [r3, #24]
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	4618      	mov	r0, r3
 8012960:	370c      	adds	r7, #12
 8012962:	46bd      	mov	sp, r7
 8012964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012968:	4770      	bx	lr
 801296a:	bf00      	nop
 801296c:	0803ff0c 	.word	0x0803ff0c

08012970 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_>:
#include "tensorflow/lite/kernels/internal/compatibility.h"
#include "tensorflow/lite/micro/memory_helpers.h"

namespace tflite {

SimpleMemoryAllocator::SimpleMemoryAllocator(ErrorReporter* error_reporter,
 8012970:	b480      	push	{r7}
 8012972:	b085      	sub	sp, #20
 8012974:	af00      	add	r7, sp, #0
 8012976:	60f8      	str	r0, [r7, #12]
 8012978:	60b9      	str	r1, [r7, #8]
 801297a:	607a      	str	r2, [r7, #4]
 801297c:	603b      	str	r3, [r7, #0]
    : error_reporter_(error_reporter),
      buffer_head_(buffer_head),
      buffer_tail_(buffer_tail),
      head_(buffer_head),
      tail_(buffer_tail),
      temp_(buffer_head_) {}
 801297e:	4a0e      	ldr	r2, [pc, #56]	; (80129b8 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_+0x48>)
 8012980:	68fb      	ldr	r3, [r7, #12]
 8012982:	601a      	str	r2, [r3, #0]
 8012984:	68fb      	ldr	r3, [r7, #12]
 8012986:	68ba      	ldr	r2, [r7, #8]
 8012988:	605a      	str	r2, [r3, #4]
 801298a:	68fb      	ldr	r3, [r7, #12]
 801298c:	687a      	ldr	r2, [r7, #4]
 801298e:	609a      	str	r2, [r3, #8]
 8012990:	68fb      	ldr	r3, [r7, #12]
 8012992:	683a      	ldr	r2, [r7, #0]
 8012994:	60da      	str	r2, [r3, #12]
 8012996:	68fb      	ldr	r3, [r7, #12]
 8012998:	687a      	ldr	r2, [r7, #4]
 801299a:	611a      	str	r2, [r3, #16]
 801299c:	68fb      	ldr	r3, [r7, #12]
 801299e:	683a      	ldr	r2, [r7, #0]
 80129a0:	615a      	str	r2, [r3, #20]
 80129a2:	68fb      	ldr	r3, [r7, #12]
 80129a4:	689a      	ldr	r2, [r3, #8]
 80129a6:	68fb      	ldr	r3, [r7, #12]
 80129a8:	619a      	str	r2, [r3, #24]
 80129aa:	68fb      	ldr	r3, [r7, #12]
 80129ac:	4618      	mov	r0, r3
 80129ae:	3714      	adds	r7, #20
 80129b0:	46bd      	mov	sp, r7
 80129b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129b6:	4770      	bx	lr
 80129b8:	0803ff0c 	.word	0x0803ff0c

080129bc <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhj>:

SimpleMemoryAllocator::SimpleMemoryAllocator(ErrorReporter* error_reporter,
 80129bc:	b580      	push	{r7, lr}
 80129be:	b084      	sub	sp, #16
 80129c0:	af00      	add	r7, sp, #0
 80129c2:	60f8      	str	r0, [r7, #12]
 80129c4:	60b9      	str	r1, [r7, #8]
 80129c6:	607a      	str	r2, [r7, #4]
 80129c8:	603b      	str	r3, [r7, #0]
                                             uint8_t* buffer,
                                             size_t buffer_size)
    : SimpleMemoryAllocator(error_reporter, buffer, buffer + buffer_size) {}
 80129ca:	687a      	ldr	r2, [r7, #4]
 80129cc:	683b      	ldr	r3, [r7, #0]
 80129ce:	4413      	add	r3, r2
 80129d0:	687a      	ldr	r2, [r7, #4]
 80129d2:	68b9      	ldr	r1, [r7, #8]
 80129d4:	68f8      	ldr	r0, [r7, #12]
 80129d6:	f7ff ffcb 	bl	8012970 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_>
 80129da:	68fb      	ldr	r3, [r7, #12]
 80129dc:	4618      	mov	r0, r3
 80129de:	3710      	adds	r7, #16
 80129e0:	46bd      	mov	sp, r7
 80129e2:	bd80      	pop	{r7, pc}

080129e4 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj>:

/* static */
SimpleMemoryAllocator* SimpleMemoryAllocator::Create(
    ErrorReporter* error_reporter, uint8_t* buffer_head, size_t buffer_size) {
 80129e4:	b590      	push	{r4, r7, lr}
 80129e6:	b08d      	sub	sp, #52	; 0x34
 80129e8:	af00      	add	r7, sp, #0
 80129ea:	60f8      	str	r0, [r7, #12]
 80129ec:	60b9      	str	r1, [r7, #8]
 80129ee:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(error_reporter != nullptr);
 80129f0:	68fb      	ldr	r3, [r7, #12]
 80129f2:	2b00      	cmp	r3, #0
 80129f4:	d101      	bne.n	80129fa <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x16>
 80129f6:	f014 f982 	bl	8026cfe <abort>
  TFLITE_DCHECK(buffer_head != nullptr);
 80129fa:	68bb      	ldr	r3, [r7, #8]
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	d101      	bne.n	8012a04 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x20>
 8012a00:	f014 f97d 	bl	8026cfe <abort>
  SimpleMemoryAllocator tmp =
      SimpleMemoryAllocator(error_reporter, buffer_head, buffer_size);
 8012a04:	f107 0010 	add.w	r0, r7, #16
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	68ba      	ldr	r2, [r7, #8]
 8012a0c:	68f9      	ldr	r1, [r7, #12]
 8012a0e:	f7ff ffd5 	bl	80129bc <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhj>

  // Allocate enough bytes from the buffer to create a SimpleMemoryAllocator.
  // The new instance will use the current adjusted tail buffer from the tmp
  // allocator instance.
  uint8_t* allocator_buffer = tmp.AllocateFromTail(
 8012a12:	f107 0310 	add.w	r3, r7, #16
 8012a16:	2204      	movs	r2, #4
 8012a18:	211c      	movs	r1, #28
 8012a1a:	4618      	mov	r0, r3
 8012a1c:	f000 f87c 	bl	8012b18 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>
 8012a20:	62f8      	str	r0, [r7, #44]	; 0x2c
      sizeof(SimpleMemoryAllocator), alignof(SimpleMemoryAllocator));
  // Use the default copy constructor to populate internal states.
  return new (allocator_buffer) SimpleMemoryAllocator(tmp);
 8012a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a24:	4619      	mov	r1, r3
 8012a26:	201c      	movs	r0, #28
 8012a28:	f7f7 ff9f 	bl	800a96a <_ZnwjPv>
 8012a2c:	4604      	mov	r4, r0
 8012a2e:	f107 0310 	add.w	r3, r7, #16
 8012a32:	4619      	mov	r1, r3
 8012a34:	4620      	mov	r0, r4
 8012a36:	f7ff ff71 	bl	801291c <_ZN6tflite21SimpleMemoryAllocatorC1ERKS0_>
      SimpleMemoryAllocator(error_reporter, buffer_head, buffer_size);
 8012a3a:	f107 0310 	add.w	r3, r7, #16
 8012a3e:	4618      	mov	r0, r3
 8012a40:	f000 f806 	bl	8012a50 <_ZN6tflite21SimpleMemoryAllocatorD1Ev>
  return new (allocator_buffer) SimpleMemoryAllocator(tmp);
 8012a44:	4623      	mov	r3, r4
}
 8012a46:	4618      	mov	r0, r3
 8012a48:	3734      	adds	r7, #52	; 0x34
 8012a4a:	46bd      	mov	sp, r7
 8012a4c:	bd90      	pop	{r4, r7, pc}
	...

08012a50 <_ZN6tflite21SimpleMemoryAllocatorD1Ev>:

SimpleMemoryAllocator::~SimpleMemoryAllocator() {}
 8012a50:	b480      	push	{r7}
 8012a52:	b083      	sub	sp, #12
 8012a54:	af00      	add	r7, sp, #0
 8012a56:	6078      	str	r0, [r7, #4]
 8012a58:	4a04      	ldr	r2, [pc, #16]	; (8012a6c <_ZN6tflite21SimpleMemoryAllocatorD1Ev+0x1c>)
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	601a      	str	r2, [r3, #0]
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	4618      	mov	r0, r3
 8012a62:	370c      	adds	r7, #12
 8012a64:	46bd      	mov	sp, r7
 8012a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a6a:	4770      	bx	lr
 8012a6c:	0803ff0c 	.word	0x0803ff0c

08012a70 <_ZN6tflite21SimpleMemoryAllocatorD0Ev>:
 8012a70:	b580      	push	{r7, lr}
 8012a72:	b082      	sub	sp, #8
 8012a74:	af00      	add	r7, sp, #0
 8012a76:	6078      	str	r0, [r7, #4]
 8012a78:	6878      	ldr	r0, [r7, #4]
 8012a7a:	f7ff ffe9 	bl	8012a50 <_ZN6tflite21SimpleMemoryAllocatorD1Ev>
 8012a7e:	211c      	movs	r1, #28
 8012a80:	6878      	ldr	r0, [r7, #4]
 8012a82:	f013 fed2 	bl	802682a <_ZdlPvj>
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	4618      	mov	r0, r3
 8012a8a:	3708      	adds	r7, #8
 8012a8c:	46bd      	mov	sp, r7
 8012a8e:	bd80      	pop	{r7, pc}

08012a90 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj>:

TfLiteStatus SimpleMemoryAllocator::SetHeadBufferSize(size_t size,
                                                      size_t alignment) {
 8012a90:	b580      	push	{r7, lr}
 8012a92:	b088      	sub	sp, #32
 8012a94:	af02      	add	r7, sp, #8
 8012a96:	60f8      	str	r0, [r7, #12]
 8012a98:	60b9      	str	r1, [r7, #8]
 8012a9a:	607a      	str	r2, [r7, #4]
  if (head_ != temp_) {
 8012a9c:	68fb      	ldr	r3, [r7, #12]
 8012a9e:	691a      	ldr	r2, [r3, #16]
 8012aa0:	68fb      	ldr	r3, [r7, #12]
 8012aa2:	699b      	ldr	r3, [r3, #24]
 8012aa4:	429a      	cmp	r2, r3
 8012aa6:	d007      	beq.n	8012ab8 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x28>
    TF_LITE_REPORT_ERROR(
 8012aa8:	68fb      	ldr	r3, [r7, #12]
 8012aaa:	685b      	ldr	r3, [r3, #4]
 8012aac:	4918      	ldr	r1, [pc, #96]	; (8012b10 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x80>)
 8012aae:	4618      	mov	r0, r3
 8012ab0:	f7f7 ff28 	bl	800a904 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Internal error: SetHeadBufferSize() needs to be called "
        "after ResetTempAllocations().");
    return kTfLiteError;
 8012ab4:	2301      	movs	r3, #1
 8012ab6:	e026      	b.n	8012b06 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x76>
  }

  uint8_t* const aligned_result = AlignPointerUp(buffer_head_, alignment);
 8012ab8:	68fb      	ldr	r3, [r7, #12]
 8012aba:	689b      	ldr	r3, [r3, #8]
 8012abc:	6879      	ldr	r1, [r7, #4]
 8012abe:	4618      	mov	r0, r3
 8012ac0:	f7fb ff60 	bl	800e984 <_ZN6tflite14AlignPointerUpEPhj>
 8012ac4:	6178      	str	r0, [r7, #20]
  const size_t available_memory = tail_ - aligned_result;
 8012ac6:	68fb      	ldr	r3, [r7, #12]
 8012ac8:	695a      	ldr	r2, [r3, #20]
 8012aca:	697b      	ldr	r3, [r7, #20]
 8012acc:	1ad3      	subs	r3, r2, r3
 8012ace:	613b      	str	r3, [r7, #16]
  if (available_memory < size) {
 8012ad0:	693a      	ldr	r2, [r7, #16]
 8012ad2:	68bb      	ldr	r3, [r7, #8]
 8012ad4:	429a      	cmp	r2, r3
 8012ad6:	d20c      	bcs.n	8012af2 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x62>
    TF_LITE_REPORT_ERROR(
 8012ad8:	68fb      	ldr	r3, [r7, #12]
 8012ada:	6858      	ldr	r0, [r3, #4]
 8012adc:	68ba      	ldr	r2, [r7, #8]
 8012ade:	693b      	ldr	r3, [r7, #16]
 8012ae0:	1ad3      	subs	r3, r2, r3
 8012ae2:	9300      	str	r3, [sp, #0]
 8012ae4:	693b      	ldr	r3, [r7, #16]
 8012ae6:	68ba      	ldr	r2, [r7, #8]
 8012ae8:	490a      	ldr	r1, [pc, #40]	; (8012b14 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x84>)
 8012aea:	f7f7 ff0b 	bl	800a904 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to set head size. Requested: %u, available %u, missing: %u",
        size, available_memory, size - available_memory);
    return kTfLiteError;
 8012aee:	2301      	movs	r3, #1
 8012af0:	e009      	b.n	8012b06 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x76>
  }
  head_ = aligned_result + size;
 8012af2:	697a      	ldr	r2, [r7, #20]
 8012af4:	68bb      	ldr	r3, [r7, #8]
 8012af6:	441a      	add	r2, r3
 8012af8:	68fb      	ldr	r3, [r7, #12]
 8012afa:	611a      	str	r2, [r3, #16]
  temp_ = head_;
 8012afc:	68fb      	ldr	r3, [r7, #12]
 8012afe:	691a      	ldr	r2, [r3, #16]
 8012b00:	68fb      	ldr	r3, [r7, #12]
 8012b02:	619a      	str	r2, [r3, #24]

  return kTfLiteOk;
 8012b04:	2300      	movs	r3, #0
}
 8012b06:	4618      	mov	r0, r3
 8012b08:	3718      	adds	r7, #24
 8012b0a:	46bd      	mov	sp, r7
 8012b0c:	bd80      	pop	{r7, pc}
 8012b0e:	bf00      	nop
 8012b10:	0802bfcc 	.word	0x0802bfcc
 8012b14:	0802c024 	.word	0x0802c024

08012b18 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>:

uint8_t* SimpleMemoryAllocator::AllocateFromTail(size_t size,
                                                 size_t alignment) {
 8012b18:	b580      	push	{r7, lr}
 8012b1a:	b088      	sub	sp, #32
 8012b1c:	af02      	add	r7, sp, #8
 8012b1e:	60f8      	str	r0, [r7, #12]
 8012b20:	60b9      	str	r1, [r7, #8]
 8012b22:	607a      	str	r2, [r7, #4]
  uint8_t* const aligned_result = AlignPointerDown(tail_ - size, alignment);
 8012b24:	68fb      	ldr	r3, [r7, #12]
 8012b26:	695a      	ldr	r2, [r3, #20]
 8012b28:	68bb      	ldr	r3, [r7, #8]
 8012b2a:	425b      	negs	r3, r3
 8012b2c:	4413      	add	r3, r2
 8012b2e:	6879      	ldr	r1, [r7, #4]
 8012b30:	4618      	mov	r0, r3
 8012b32:	f7fb ff40 	bl	800e9b6 <_ZN6tflite16AlignPointerDownEPhj>
 8012b36:	6178      	str	r0, [r7, #20]
  if (aligned_result < head_) {
 8012b38:	68fb      	ldr	r3, [r7, #12]
 8012b3a:	691b      	ldr	r3, [r3, #16]
 8012b3c:	697a      	ldr	r2, [r7, #20]
 8012b3e:	429a      	cmp	r2, r3
 8012b40:	d212      	bcs.n	8012b68 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x50>
#ifndef TF_LITE_STRIP_ERROR_STRINGS
    const size_t missing_memory = head_ - aligned_result;
 8012b42:	68fb      	ldr	r3, [r7, #12]
 8012b44:	691a      	ldr	r2, [r3, #16]
 8012b46:	697b      	ldr	r3, [r7, #20]
 8012b48:	1ad3      	subs	r3, r2, r3
 8012b4a:	613b      	str	r3, [r7, #16]
    TF_LITE_REPORT_ERROR(error_reporter_,
 8012b4c:	68fb      	ldr	r3, [r7, #12]
 8012b4e:	6858      	ldr	r0, [r3, #4]
 8012b50:	68ba      	ldr	r2, [r7, #8]
 8012b52:	693b      	ldr	r3, [r7, #16]
 8012b54:	1ad2      	subs	r2, r2, r3
 8012b56:	693b      	ldr	r3, [r7, #16]
 8012b58:	9300      	str	r3, [sp, #0]
 8012b5a:	4613      	mov	r3, r2
 8012b5c:	68ba      	ldr	r2, [r7, #8]
 8012b5e:	4906      	ldr	r1, [pc, #24]	; (8012b78 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x60>)
 8012b60:	f7f7 fed0 	bl	800a904 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed to allocate tail memory. Requested: %u, "
                         "available %u, missing: %u",
                         size, size - missing_memory, missing_memory);
#endif
    return nullptr;
 8012b64:	2300      	movs	r3, #0
 8012b66:	e003      	b.n	8012b70 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x58>
  }
  tail_ = aligned_result;
 8012b68:	68fb      	ldr	r3, [r7, #12]
 8012b6a:	697a      	ldr	r2, [r7, #20]
 8012b6c:	615a      	str	r2, [r3, #20]
  return aligned_result;
 8012b6e:	697b      	ldr	r3, [r7, #20]
}
 8012b70:	4618      	mov	r0, r3
 8012b72:	3718      	adds	r7, #24
 8012b74:	46bd      	mov	sp, r7
 8012b76:	bd80      	pop	{r7, pc}
 8012b78:	0802c068 	.word	0x0802c068

08012b7c <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj>:

uint8_t* SimpleMemoryAllocator::AllocateTemp(size_t size, size_t alignment) {
 8012b7c:	b580      	push	{r7, lr}
 8012b7e:	b088      	sub	sp, #32
 8012b80:	af02      	add	r7, sp, #8
 8012b82:	60f8      	str	r0, [r7, #12]
 8012b84:	60b9      	str	r1, [r7, #8]
 8012b86:	607a      	str	r2, [r7, #4]
  uint8_t* const aligned_result = AlignPointerUp(temp_, alignment);
 8012b88:	68fb      	ldr	r3, [r7, #12]
 8012b8a:	699b      	ldr	r3, [r3, #24]
 8012b8c:	6879      	ldr	r1, [r7, #4]
 8012b8e:	4618      	mov	r0, r3
 8012b90:	f7fb fef8 	bl	800e984 <_ZN6tflite14AlignPointerUpEPhj>
 8012b94:	6178      	str	r0, [r7, #20]
  const size_t available_memory = tail_ - aligned_result;
 8012b96:	68fb      	ldr	r3, [r7, #12]
 8012b98:	695a      	ldr	r2, [r3, #20]
 8012b9a:	697b      	ldr	r3, [r7, #20]
 8012b9c:	1ad3      	subs	r3, r2, r3
 8012b9e:	613b      	str	r3, [r7, #16]
  if (available_memory < size) {
 8012ba0:	693a      	ldr	r2, [r7, #16]
 8012ba2:	68bb      	ldr	r3, [r7, #8]
 8012ba4:	429a      	cmp	r2, r3
 8012ba6:	d20c      	bcs.n	8012bc2 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj+0x46>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8012ba8:	68fb      	ldr	r3, [r7, #12]
 8012baa:	6858      	ldr	r0, [r3, #4]
 8012bac:	68ba      	ldr	r2, [r7, #8]
 8012bae:	693b      	ldr	r3, [r7, #16]
 8012bb0:	1ad3      	subs	r3, r2, r3
 8012bb2:	9300      	str	r3, [sp, #0]
 8012bb4:	693b      	ldr	r3, [r7, #16]
 8012bb6:	68ba      	ldr	r2, [r7, #8]
 8012bb8:	4907      	ldr	r1, [pc, #28]	; (8012bd8 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj+0x5c>)
 8012bba:	f7f7 fea3 	bl	800a904 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed to allocate temp memory. Requested: %u, "
                         "available %u, missing: %u",
                         size, available_memory, size - available_memory);
    return nullptr;
 8012bbe:	2300      	movs	r3, #0
 8012bc0:	e005      	b.n	8012bce <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj+0x52>
  }
  temp_ = aligned_result + size;
 8012bc2:	697a      	ldr	r2, [r7, #20]
 8012bc4:	68bb      	ldr	r3, [r7, #8]
 8012bc6:	441a      	add	r2, r3
 8012bc8:	68fb      	ldr	r3, [r7, #12]
 8012bca:	619a      	str	r2, [r3, #24]
  return aligned_result;
 8012bcc:	697b      	ldr	r3, [r7, #20]
}
 8012bce:	4618      	mov	r0, r3
 8012bd0:	3718      	adds	r7, #24
 8012bd2:	46bd      	mov	sp, r7
 8012bd4:	bd80      	pop	{r7, pc}
 8012bd6:	bf00      	nop
 8012bd8:	0802c0b4 	.word	0x0802c0b4

08012bdc <_ZN6tflite21SimpleMemoryAllocator20ResetTempAllocationsEv>:

void SimpleMemoryAllocator::ResetTempAllocations() { temp_ = head_; }
 8012bdc:	b480      	push	{r7}
 8012bde:	b083      	sub	sp, #12
 8012be0:	af00      	add	r7, sp, #0
 8012be2:	6078      	str	r0, [r7, #4]
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	691a      	ldr	r2, [r3, #16]
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	619a      	str	r2, [r3, #24]
 8012bec:	bf00      	nop
 8012bee:	370c      	adds	r7, #12
 8012bf0:	46bd      	mov	sp, r7
 8012bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bf6:	4770      	bx	lr

08012bf8 <_ZNK6tflite21SimpleMemoryAllocator13GetHeadBufferEv>:

uint8_t* SimpleMemoryAllocator::GetHeadBuffer() const { return buffer_head_; }
 8012bf8:	b480      	push	{r7}
 8012bfa:	b083      	sub	sp, #12
 8012bfc:	af00      	add	r7, sp, #0
 8012bfe:	6078      	str	r0, [r7, #4]
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	689b      	ldr	r3, [r3, #8]
 8012c04:	4618      	mov	r0, r3
 8012c06:	370c      	adds	r7, #12
 8012c08:	46bd      	mov	sp, r7
 8012c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c0e:	4770      	bx	lr

08012c10 <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEj>:

size_t SimpleMemoryAllocator::GetTailUsedBytes() const {
  return buffer_tail_ - tail_;
}

size_t SimpleMemoryAllocator::GetAvailableMemory(size_t alignment) const {
 8012c10:	b580      	push	{r7, lr}
 8012c12:	b084      	sub	sp, #16
 8012c14:	af00      	add	r7, sp, #0
 8012c16:	6078      	str	r0, [r7, #4]
 8012c18:	6039      	str	r1, [r7, #0]
  uint8_t* const aligned_temp = AlignPointerUp(temp_, alignment);
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	699b      	ldr	r3, [r3, #24]
 8012c1e:	6839      	ldr	r1, [r7, #0]
 8012c20:	4618      	mov	r0, r3
 8012c22:	f7fb feaf 	bl	800e984 <_ZN6tflite14AlignPointerUpEPhj>
 8012c26:	60f8      	str	r0, [r7, #12]
  uint8_t* const aligned_tail = AlignPointerDown(tail_, alignment);
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	695b      	ldr	r3, [r3, #20]
 8012c2c:	6839      	ldr	r1, [r7, #0]
 8012c2e:	4618      	mov	r0, r3
 8012c30:	f7fb fec1 	bl	800e9b6 <_ZN6tflite16AlignPointerDownEPhj>
 8012c34:	60b8      	str	r0, [r7, #8]
  return aligned_tail - aligned_temp;
 8012c36:	68ba      	ldr	r2, [r7, #8]
 8012c38:	68fb      	ldr	r3, [r7, #12]
 8012c3a:	1ad3      	subs	r3, r2, r3
}
 8012c3c:	4618      	mov	r0, r3
 8012c3e:	3710      	adds	r7, #16
 8012c40:	46bd      	mov	sp, r7
 8012c42:	bd80      	pop	{r7, pc}

08012c44 <_ZN6tflite16InitializeTargetEv>:
namespace tflite {

// To add an equivalent function for your own platform, create your own
// implementation file, and place it in a subfolder named after the target. See
// tensorflow/lite/micro/debug_log.cc for a similar example.
void InitializeTarget() {}
 8012c44:	b480      	push	{r7}
 8012c46:	af00      	add	r7, sp, #0
 8012c48:	bf00      	nop
 8012c4a:	46bd      	mov	sp, r7
 8012c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c50:	4770      	bx	lr
	...

08012c54 <_ZN11flatbuffers11EndianCheckEv>:
inline void EndianCheck() {
 8012c54:	b580      	push	{r7, lr}
 8012c56:	b082      	sub	sp, #8
 8012c58:	af00      	add	r7, sp, #0
  int endiantest = 1;
 8012c5a:	2301      	movs	r3, #1
 8012c5c:	607b      	str	r3, [r7, #4]
  FLATBUFFERS_ASSERT(*reinterpret_cast<char *>(&endiantest) ==
 8012c5e:	1d3b      	adds	r3, r7, #4
 8012c60:	781b      	ldrb	r3, [r3, #0]
 8012c62:	2b01      	cmp	r3, #1
 8012c64:	d005      	beq.n	8012c72 <_ZN11flatbuffers11EndianCheckEv+0x1e>
 8012c66:	4b05      	ldr	r3, [pc, #20]	; (8012c7c <_ZN11flatbuffers11EndianCheckEv+0x28>)
 8012c68:	4a05      	ldr	r2, [pc, #20]	; (8012c80 <_ZN11flatbuffers11EndianCheckEv+0x2c>)
 8012c6a:	214e      	movs	r1, #78	; 0x4e
 8012c6c:	4805      	ldr	r0, [pc, #20]	; (8012c84 <_ZN11flatbuffers11EndianCheckEv+0x30>)
 8012c6e:	f014 f84d 	bl	8026d0c <__assert_func>
}
 8012c72:	bf00      	nop
 8012c74:	3708      	adds	r7, #8
 8012c76:	46bd      	mov	sp, r7
 8012c78:	bd80      	pop	{r7, pc}
 8012c7a:	bf00      	nop
 8012c7c:	0802c100 	.word	0x0802c100
 8012c80:	0802c144 	.word	0x0802c144
 8012c84:	0802c164 	.word	0x0802c164

08012c88 <_ZN6tflite11NumElementsEPK14TfLiteIntArray>:
inline int NumIntermediates(const TfLiteNode* node) {
  return node->intermediates->size;
}
#endif  // TF_LITE_STATIC_MEMORY

inline int64_t NumElements(const TfLiteIntArray* dims) {
 8012c88:	b480      	push	{r7}
 8012c8a:	b087      	sub	sp, #28
 8012c8c:	af00      	add	r7, sp, #0
 8012c8e:	6078      	str	r0, [r7, #4]
  int64_t count = 1;
 8012c90:	f04f 0201 	mov.w	r2, #1
 8012c94:	f04f 0300 	mov.w	r3, #0
 8012c98:	e9c7 2304 	strd	r2, r3, [r7, #16]
  for (int i = 0; i < dims->size; ++i) {
 8012c9c:	2300      	movs	r3, #0
 8012c9e:	60fb      	str	r3, [r7, #12]
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	681b      	ldr	r3, [r3, #0]
 8012ca4:	68fa      	ldr	r2, [r7, #12]
 8012ca6:	429a      	cmp	r2, r3
 8012ca8:	da1b      	bge.n	8012ce2 <_ZN6tflite11NumElementsEPK14TfLiteIntArray+0x5a>
    count *= dims->data[i];
 8012caa:	687a      	ldr	r2, [r7, #4]
 8012cac:	68fb      	ldr	r3, [r7, #12]
 8012cae:	009b      	lsls	r3, r3, #2
 8012cb0:	4413      	add	r3, r2
 8012cb2:	685b      	ldr	r3, [r3, #4]
 8012cb4:	461a      	mov	r2, r3
 8012cb6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8012cba:	6979      	ldr	r1, [r7, #20]
 8012cbc:	fb02 f001 	mul.w	r0, r2, r1
 8012cc0:	6939      	ldr	r1, [r7, #16]
 8012cc2:	fb03 f101 	mul.w	r1, r3, r1
 8012cc6:	4401      	add	r1, r0
 8012cc8:	6938      	ldr	r0, [r7, #16]
 8012cca:	fba0 2302 	umull	r2, r3, r0, r2
 8012cce:	4419      	add	r1, r3
 8012cd0:	460b      	mov	r3, r1
 8012cd2:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8012cd6:	e9c7 2304 	strd	r2, r3, [r7, #16]
  for (int i = 0; i < dims->size; ++i) {
 8012cda:	68fb      	ldr	r3, [r7, #12]
 8012cdc:	3301      	adds	r3, #1
 8012cde:	60fb      	str	r3, [r7, #12]
 8012ce0:	e7de      	b.n	8012ca0 <_ZN6tflite11NumElementsEPK14TfLiteIntArray+0x18>
  }
  return count;
 8012ce2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8012ce6:	4610      	mov	r0, r2
 8012ce8:	4619      	mov	r1, r3
 8012cea:	371c      	adds	r7, #28
 8012cec:	46bd      	mov	sp, r7
 8012cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cf2:	4770      	bx	lr

08012cf4 <_ZN11flatbuffers7GetRootIN6tflite5ModelEEEPKT_PKv>:
template<typename T> const T *GetRoot(const void *buf) {
 8012cf4:	b580      	push	{r7, lr}
 8012cf6:	b082      	sub	sp, #8
 8012cf8:	af00      	add	r7, sp, #0
 8012cfa:	6078      	str	r0, [r7, #4]
  return GetMutableRoot<T>(const_cast<void *>(buf));
 8012cfc:	6878      	ldr	r0, [r7, #4]
 8012cfe:	f000 f805 	bl	8012d0c <_ZN11flatbuffers14GetMutableRootIN6tflite5ModelEEEPT_Pv>
 8012d02:	4603      	mov	r3, r0
}
 8012d04:	4618      	mov	r0, r3
 8012d06:	3708      	adds	r7, #8
 8012d08:	46bd      	mov	sp, r7
 8012d0a:	bd80      	pop	{r7, pc}

08012d0c <_ZN11flatbuffers14GetMutableRootIN6tflite5ModelEEEPT_Pv>:
template<typename T> T *GetMutableRoot(void *buf) {
 8012d0c:	b580      	push	{r7, lr}
 8012d0e:	b082      	sub	sp, #8
 8012d10:	af00      	add	r7, sp, #0
 8012d12:	6078      	str	r0, [r7, #4]
  EndianCheck();
 8012d14:	f7ff ff9e 	bl	8012c54 <_ZN11flatbuffers11EndianCheckEv>
      EndianScalar(*reinterpret_cast<uoffset_t *>(buf)));
 8012d18:	687b      	ldr	r3, [r7, #4]
 8012d1a:	681b      	ldr	r3, [r3, #0]
 8012d1c:	4618      	mov	r0, r3
 8012d1e:	f7f8 fc5f 	bl	800b5e0 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8012d22:	4602      	mov	r2, r0
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	4413      	add	r3, r2
}
 8012d28:	4618      	mov	r0, r3
 8012d2a:	3708      	adds	r7, #8
 8012d2c:	46bd      	mov	sp, r7
 8012d2e:	bd80      	pop	{r7, pc}

08012d30 <DebugLog>:

void RegisterDebugLogCallback(void (*cb)(const char* s)) {
  debug_log_callback = cb;
}

void DebugLog(const char* s) {
 8012d30:	b580      	push	{r7, lr}
 8012d32:	b082      	sub	sp, #8
 8012d34:	af00      	add	r7, sp, #0
 8012d36:	6078      	str	r0, [r7, #4]
#ifndef TF_LITE_STRIP_ERROR_STRINGS
  if (debug_log_callback != nullptr) {
 8012d38:	4b05      	ldr	r3, [pc, #20]	; (8012d50 <DebugLog+0x20>)
 8012d3a:	681b      	ldr	r3, [r3, #0]
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	d003      	beq.n	8012d48 <DebugLog+0x18>
    debug_log_callback(s);
 8012d40:	4b03      	ldr	r3, [pc, #12]	; (8012d50 <DebugLog+0x20>)
 8012d42:	681b      	ldr	r3, [r3, #0]
 8012d44:	6878      	ldr	r0, [r7, #4]
 8012d46:	4798      	blx	r3
  }
#endif
}
 8012d48:	bf00      	nop
 8012d4a:	3708      	adds	r7, #8
 8012d4c:	46bd      	mov	sp, r7
 8012d4e:	bd80      	pop	{r7, pc}
 8012d50:	20025a2c 	.word	0x20025a2c

08012d54 <_ZNK6tflite5Model7versionEv>:
  uint32_t version() const {
 8012d54:	b580      	push	{r7, lr}
 8012d56:	b082      	sub	sp, #8
 8012d58:	af00      	add	r7, sp, #0
 8012d5a:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_VERSION, 0);
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	2200      	movs	r2, #0
 8012d60:	2104      	movs	r1, #4
 8012d62:	4618      	mov	r0, r3
 8012d64:	f7fd fc3b 	bl	80105de <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 8012d68:	4603      	mov	r3, r0
  }
 8012d6a:	4618      	mov	r0, r3
 8012d6c:	3708      	adds	r7, #8
 8012d6e:	46bd      	mov	sp, r7
 8012d70:	bd80      	pop	{r7, pc}

08012d72 <_ZN6tflite8GetModelEPKv>:
  }
  value = nullptr;
  type = BuiltinOptions_NONE;
}

inline const tflite::Model *GetModel(const void *buf) {
 8012d72:	b580      	push	{r7, lr}
 8012d74:	b082      	sub	sp, #8
 8012d76:	af00      	add	r7, sp, #0
 8012d78:	6078      	str	r0, [r7, #4]
  return flatbuffers::GetRoot<tflite::Model>(buf);
 8012d7a:	6878      	ldr	r0, [r7, #4]
 8012d7c:	f7ff ffba 	bl	8012cf4 <_ZN11flatbuffers7GetRootIN6tflite5ModelEEEPKT_PKv>
 8012d80:	4603      	mov	r3, r0
}
 8012d82:	4618      	mov	r0, r3
 8012d84:	3708      	adds	r7, #8
 8012d86:	46bd      	mov	sp, r7
 8012d88:	bd80      	pop	{r7, pc}
	...

08012d8c <__tcf_0>:
  tflite::InitializeTarget();

  // Set up logging. Google style is to avoid globals or statics because of
  // lifetime uncertainty, but since this has a trivial destructor it's okay.
  // NOLINTNEXTLINE(runtime-global-variables)
  static tflite::MicroErrorReporter micro_error_reporter;
 8012d8c:	b580      	push	{r7, lr}
 8012d8e:	af00      	add	r7, sp, #0
 8012d90:	4801      	ldr	r0, [pc, #4]	; (8012d98 <__tcf_0+0xc>)
 8012d92:	f7fe f80b 	bl	8010dac <_ZN6tflite18MicroErrorReporterD1Ev>
 8012d96:	bd80      	pop	{r7, pc}
 8012d98:	20000050 	.word	0x20000050

08012d9c <__tcf_1>:
  // incur some penalty in code space for op implementations that are not
  // needed by this graph.
  //
  // tflite::AllOpsResolver resolver;
  // NOLINTNEXTLINE(runtime-global-variables)
  static tflite::MicroMutableOpResolver<5> micro_op_resolver;
 8012d9c:	b580      	push	{r7, lr}
 8012d9e:	af00      	add	r7, sp, #0
 8012da0:	4801      	ldr	r0, [pc, #4]	; (8012da8 <__tcf_1+0xc>)
 8012da2:	f000 fa4d 	bl	8013240 <_ZN6tflite22MicroMutableOpResolverILj5EED1Ev>
 8012da6:	bd80      	pop	{r7, pc}
 8012da8:	20047a44 	.word	0x20047a44

08012dac <__tcf_2>:
  micro_op_resolver.AddSoftmax();

  // Build an interpreter to run the model with.
  // NOLINTNEXTLINE(runtime-global-variables)
  static tflite::MicroInterpreter static_interpreter(
      model, micro_op_resolver, tensor_arena, kTensorArenaSize, error_reporter);
 8012dac:	b580      	push	{r7, lr}
 8012dae:	af00      	add	r7, sp, #0
 8012db0:	4801      	ldr	r0, [pc, #4]	; (8012db8 <__tcf_2+0xc>)
 8012db2:	f7fe fd31 	bl	8011818 <_ZN6tflite16MicroInterpreterD1Ev>
 8012db6:	bd80      	pop	{r7, pc}
 8012db8:	20047b14 	.word	0x20047b14

08012dbc <setup>:
void setup() {
 8012dbc:	b590      	push	{r4, r7, lr}
 8012dbe:	b097      	sub	sp, #92	; 0x5c
 8012dc0:	af04      	add	r7, sp, #16
  tflite::InitializeTarget();
 8012dc2:	f7ff ff3f 	bl	8012c44 <_ZN6tflite16InitializeTargetEv>
  static tflite::MicroErrorReporter micro_error_reporter;
 8012dc6:	4b6a      	ldr	r3, [pc, #424]	; (8012f70 <setup+0x1b4>)
 8012dc8:	781b      	ldrb	r3, [r3, #0]
 8012dca:	f3bf 8f5b 	dmb	ish
 8012dce:	b2db      	uxtb	r3, r3
 8012dd0:	f003 0301 	and.w	r3, r3, #1
 8012dd4:	2b00      	cmp	r3, #0
 8012dd6:	bf0c      	ite	eq
 8012dd8:	2301      	moveq	r3, #1
 8012dda:	2300      	movne	r3, #0
 8012ddc:	b2db      	uxtb	r3, r3
 8012dde:	2b00      	cmp	r3, #0
 8012de0:	d010      	beq.n	8012e04 <setup+0x48>
 8012de2:	4863      	ldr	r0, [pc, #396]	; (8012f70 <setup+0x1b4>)
 8012de4:	f013 fd23 	bl	802682e <__cxa_guard_acquire>
 8012de8:	4603      	mov	r3, r0
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	bf14      	ite	ne
 8012dee:	2301      	movne	r3, #1
 8012df0:	2300      	moveq	r3, #0
 8012df2:	b2db      	uxtb	r3, r3
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	d005      	beq.n	8012e04 <setup+0x48>
 8012df8:	485d      	ldr	r0, [pc, #372]	; (8012f70 <setup+0x1b4>)
 8012dfa:	f013 fd24 	bl	8026846 <__cxa_guard_release>
 8012dfe:	485d      	ldr	r0, [pc, #372]	; (8012f74 <setup+0x1b8>)
 8012e00:	f013 ffa2 	bl	8026d48 <atexit>
  error_reporter = &micro_error_reporter;
 8012e04:	4b5c      	ldr	r3, [pc, #368]	; (8012f78 <setup+0x1bc>)
 8012e06:	4a5d      	ldr	r2, [pc, #372]	; (8012f7c <setup+0x1c0>)
 8012e08:	601a      	str	r2, [r3, #0]
  model = tflite::GetModel(g_person_detect_model_data);
 8012e0a:	485d      	ldr	r0, [pc, #372]	; (8012f80 <setup+0x1c4>)
 8012e0c:	f7ff ffb1 	bl	8012d72 <_ZN6tflite8GetModelEPKv>
 8012e10:	4603      	mov	r3, r0
 8012e12:	4a5c      	ldr	r2, [pc, #368]	; (8012f84 <setup+0x1c8>)
 8012e14:	6013      	str	r3, [r2, #0]
  if (model->version() != TFLITE_SCHEMA_VERSION) {
 8012e16:	4b5b      	ldr	r3, [pc, #364]	; (8012f84 <setup+0x1c8>)
 8012e18:	681b      	ldr	r3, [r3, #0]
 8012e1a:	4618      	mov	r0, r3
 8012e1c:	f7ff ff9a 	bl	8012d54 <_ZNK6tflite5Model7versionEv>
 8012e20:	4603      	mov	r3, r0
 8012e22:	2b03      	cmp	r3, #3
 8012e24:	bf14      	ite	ne
 8012e26:	2301      	movne	r3, #1
 8012e28:	2300      	moveq	r3, #0
 8012e2a:	b2db      	uxtb	r3, r3
 8012e2c:	2b00      	cmp	r3, #0
 8012e2e:	d00d      	beq.n	8012e4c <setup+0x90>
    TF_LITE_REPORT_ERROR(error_reporter,
 8012e30:	4b51      	ldr	r3, [pc, #324]	; (8012f78 <setup+0x1bc>)
 8012e32:	681c      	ldr	r4, [r3, #0]
 8012e34:	4b53      	ldr	r3, [pc, #332]	; (8012f84 <setup+0x1c8>)
 8012e36:	681b      	ldr	r3, [r3, #0]
 8012e38:	4618      	mov	r0, r3
 8012e3a:	f7ff ff8b 	bl	8012d54 <_ZNK6tflite5Model7versionEv>
 8012e3e:	4602      	mov	r2, r0
 8012e40:	2303      	movs	r3, #3
 8012e42:	4951      	ldr	r1, [pc, #324]	; (8012f88 <setup+0x1cc>)
 8012e44:	4620      	mov	r0, r4
 8012e46:	f7f7 fd5d 	bl	800a904 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return;
 8012e4a:	e08e      	b.n	8012f6a <setup+0x1ae>
  static tflite::MicroMutableOpResolver<5> micro_op_resolver;
 8012e4c:	4b4f      	ldr	r3, [pc, #316]	; (8012f8c <setup+0x1d0>)
 8012e4e:	781b      	ldrb	r3, [r3, #0]
 8012e50:	f3bf 8f5b 	dmb	ish
 8012e54:	b2db      	uxtb	r3, r3
 8012e56:	f003 0301 	and.w	r3, r3, #1
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	bf0c      	ite	eq
 8012e5e:	2301      	moveq	r3, #1
 8012e60:	2300      	movne	r3, #0
 8012e62:	b2db      	uxtb	r3, r3
 8012e64:	2b00      	cmp	r3, #0
 8012e66:	d014      	beq.n	8012e92 <setup+0xd6>
 8012e68:	4848      	ldr	r0, [pc, #288]	; (8012f8c <setup+0x1d0>)
 8012e6a:	f013 fce0 	bl	802682e <__cxa_guard_acquire>
 8012e6e:	4603      	mov	r3, r0
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	bf14      	ite	ne
 8012e74:	2301      	movne	r3, #1
 8012e76:	2300      	moveq	r3, #0
 8012e78:	b2db      	uxtb	r3, r3
 8012e7a:	2b00      	cmp	r3, #0
 8012e7c:	d009      	beq.n	8012e92 <setup+0xd6>
 8012e7e:	2100      	movs	r1, #0
 8012e80:	4843      	ldr	r0, [pc, #268]	; (8012f90 <setup+0x1d4>)
 8012e82:	f000 f897 	bl	8012fb4 <_ZN6tflite22MicroMutableOpResolverILj5EEC1EPNS_13ErrorReporterE>
 8012e86:	4841      	ldr	r0, [pc, #260]	; (8012f8c <setup+0x1d0>)
 8012e88:	f013 fcdd 	bl	8026846 <__cxa_guard_release>
 8012e8c:	4841      	ldr	r0, [pc, #260]	; (8012f94 <setup+0x1d8>)
 8012e8e:	f013 ff5b 	bl	8026d48 <atexit>
  micro_op_resolver.AddAveragePool2D();
 8012e92:	483f      	ldr	r0, [pc, #252]	; (8012f90 <setup+0x1d4>)
 8012e94:	f000 f8ae 	bl	8012ff4 <_ZN6tflite22MicroMutableOpResolverILj5EE16AddAveragePool2DEv>
  micro_op_resolver.AddConv2D();
 8012e98:	1d3b      	adds	r3, r7, #4
 8012e9a:	4618      	mov	r0, r3
 8012e9c:	f004 fd54 	bl	8017948 <_ZN6tflite16Register_CONV_2DEv>
 8012ea0:	1d3b      	adds	r3, r7, #4
 8012ea2:	4619      	mov	r1, r3
 8012ea4:	483a      	ldr	r0, [pc, #232]	; (8012f90 <setup+0x1d4>)
 8012ea6:	f000 f8bd 	bl	8013024 <_ZN6tflite22MicroMutableOpResolverILj5EE9AddConv2DERK18TfLiteRegistration>
  micro_op_resolver.AddDepthwiseConv2D();
 8012eaa:	4839      	ldr	r0, [pc, #228]	; (8012f90 <setup+0x1d4>)
 8012eac:	f000 f8cc 	bl	8013048 <_ZN6tflite22MicroMutableOpResolverILj5EE18AddDepthwiseConv2DEv>
  micro_op_resolver.AddReshape();
 8012eb0:	4837      	ldr	r0, [pc, #220]	; (8012f90 <setup+0x1d4>)
 8012eb2:	f000 f8e1 	bl	8013078 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddReshapeEv>
  micro_op_resolver.AddSoftmax();
 8012eb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012eba:	4618      	mov	r0, r3
 8012ebc:	f006 fcce 	bl	801985c <_ZN6tflite16Register_SOFTMAXEv>
 8012ec0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012ec4:	4619      	mov	r1, r3
 8012ec6:	4832      	ldr	r0, [pc, #200]	; (8012f90 <setup+0x1d4>)
 8012ec8:	f000 f8ee 	bl	80130a8 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddSoftmaxERK18TfLiteRegistration>
      model, micro_op_resolver, tensor_arena, kTensorArenaSize, error_reporter);
 8012ecc:	4b32      	ldr	r3, [pc, #200]	; (8012f98 <setup+0x1dc>)
 8012ece:	781b      	ldrb	r3, [r3, #0]
 8012ed0:	f3bf 8f5b 	dmb	ish
 8012ed4:	b2db      	uxtb	r3, r3
 8012ed6:	f003 0301 	and.w	r3, r3, #1
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	bf0c      	ite	eq
 8012ede:	2301      	moveq	r3, #1
 8012ee0:	2300      	movne	r3, #0
 8012ee2:	b2db      	uxtb	r3, r3
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	d021      	beq.n	8012f2c <setup+0x170>
 8012ee8:	482b      	ldr	r0, [pc, #172]	; (8012f98 <setup+0x1dc>)
 8012eea:	f013 fca0 	bl	802682e <__cxa_guard_acquire>
 8012eee:	4603      	mov	r3, r0
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	bf14      	ite	ne
 8012ef4:	2301      	movne	r3, #1
 8012ef6:	2300      	moveq	r3, #0
 8012ef8:	b2db      	uxtb	r3, r3
 8012efa:	2b00      	cmp	r3, #0
 8012efc:	d016      	beq.n	8012f2c <setup+0x170>
 8012efe:	4b21      	ldr	r3, [pc, #132]	; (8012f84 <setup+0x1c8>)
 8012f00:	6819      	ldr	r1, [r3, #0]
 8012f02:	4b1d      	ldr	r3, [pc, #116]	; (8012f78 <setup+0x1bc>)
 8012f04:	681b      	ldr	r3, [r3, #0]
 8012f06:	2200      	movs	r2, #0
 8012f08:	9203      	str	r2, [sp, #12]
 8012f0a:	2200      	movs	r2, #0
 8012f0c:	9202      	str	r2, [sp, #8]
 8012f0e:	9301      	str	r3, [sp, #4]
 8012f10:	f44f 3308 	mov.w	r3, #139264	; 0x22000
 8012f14:	9300      	str	r3, [sp, #0]
 8012f16:	4b21      	ldr	r3, [pc, #132]	; (8012f9c <setup+0x1e0>)
 8012f18:	4a1d      	ldr	r2, [pc, #116]	; (8012f90 <setup+0x1d4>)
 8012f1a:	4821      	ldr	r0, [pc, #132]	; (8012fa0 <setup+0x1e4>)
 8012f1c:	f7fe fc32 	bl	8011784 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_22MicroResourceVariablesEPNS_13MicroProfilerE>
 8012f20:	481d      	ldr	r0, [pc, #116]	; (8012f98 <setup+0x1dc>)
 8012f22:	f013 fc90 	bl	8026846 <__cxa_guard_release>
 8012f26:	481f      	ldr	r0, [pc, #124]	; (8012fa4 <setup+0x1e8>)
 8012f28:	f013 ff0e 	bl	8026d48 <atexit>
  interpreter = &static_interpreter;
 8012f2c:	4b1e      	ldr	r3, [pc, #120]	; (8012fa8 <setup+0x1ec>)
 8012f2e:	4a1c      	ldr	r2, [pc, #112]	; (8012fa0 <setup+0x1e4>)
 8012f30:	601a      	str	r2, [r3, #0]

  // Allocate memory from the tensor_arena for the model's tensors.
  TfLiteStatus allocate_status = interpreter->AllocateTensors();
 8012f32:	4b1d      	ldr	r3, [pc, #116]	; (8012fa8 <setup+0x1ec>)
 8012f34:	681b      	ldr	r3, [r3, #0]
 8012f36:	4618      	mov	r0, r3
 8012f38:	f7fe fe66 	bl	8011c08 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>
 8012f3c:	4603      	mov	r3, r0
 8012f3e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  if (allocate_status != kTfLiteOk) {
 8012f42:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8012f46:	2b00      	cmp	r3, #0
 8012f48:	d006      	beq.n	8012f58 <setup+0x19c>
    TF_LITE_REPORT_ERROR(error_reporter, "AllocateTensors() failed");
 8012f4a:	4b0b      	ldr	r3, [pc, #44]	; (8012f78 <setup+0x1bc>)
 8012f4c:	681b      	ldr	r3, [r3, #0]
 8012f4e:	4917      	ldr	r1, [pc, #92]	; (8012fac <setup+0x1f0>)
 8012f50:	4618      	mov	r0, r3
 8012f52:	f7f7 fcd7 	bl	800a904 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return;
 8012f56:	e008      	b.n	8012f6a <setup+0x1ae>
  }

  // Get information about the memory area to use for the model's input.
  input = interpreter->input(0);
 8012f58:	4b13      	ldr	r3, [pc, #76]	; (8012fa8 <setup+0x1ec>)
 8012f5a:	681b      	ldr	r3, [r3, #0]
 8012f5c:	2100      	movs	r1, #0
 8012f5e:	4618      	mov	r0, r3
 8012f60:	f7fe ffc0 	bl	8011ee4 <_ZN6tflite16MicroInterpreter5inputEj>
 8012f64:	4603      	mov	r3, r0
 8012f66:	4a12      	ldr	r2, [pc, #72]	; (8012fb0 <setup+0x1f4>)
 8012f68:	6013      	str	r3, [r2, #0]
}
 8012f6a:	374c      	adds	r7, #76	; 0x4c
 8012f6c:	46bd      	mov	sp, r7
 8012f6e:	bd90      	pop	{r4, r7, pc}
 8012f70:	20047a40 	.word	0x20047a40
 8012f74:	08012d8d 	.word	0x08012d8d
 8012f78:	20025a30 	.word	0x20025a30
 8012f7c:	20000050 	.word	0x20000050
 8012f80:	0803ffe0 	.word	0x0803ffe0
 8012f84:	20025a34 	.word	0x20025a34
 8012f88:	0802cc0c 	.word	0x0802cc0c
 8012f8c:	20047b10 	.word	0x20047b10
 8012f90:	20047a44 	.word	0x20047a44
 8012f94:	08012d9d 	.word	0x08012d9d
 8012f98:	20047bb0 	.word	0x20047bb0
 8012f9c:	20025a40 	.word	0x20025a40
 8012fa0:	20047b14 	.word	0x20047b14
 8012fa4:	08012dad 	.word	0x08012dad
 8012fa8:	20025a38 	.word	0x20025a38
 8012fac:	0802cc54 	.word	0x0802cc54
 8012fb0:	20025a3c 	.word	0x20025a3c

08012fb4 <_ZN6tflite22MicroMutableOpResolverILj5EEC1EPNS_13ErrorReporterE>:
template <unsigned int tOpCount>
class MicroMutableOpResolver : public MicroOpResolver {
 public:
  TF_LITE_REMOVE_VIRTUAL_DELETE

  explicit MicroMutableOpResolver(ErrorReporter* error_reporter = nullptr)
 8012fb4:	b580      	push	{r7, lr}
 8012fb6:	b082      	sub	sp, #8
 8012fb8:	af00      	add	r7, sp, #0
 8012fba:	6078      	str	r0, [r7, #4]
 8012fbc:	6039      	str	r1, [r7, #0]
      : error_reporter_(error_reporter) {}
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	4618      	mov	r0, r3
 8012fc2:	f7fb fabf 	bl	800e544 <_ZN6tflite15MicroOpResolverC1Ev>
 8012fc6:	4a0a      	ldr	r2, [pc, #40]	; (8012ff0 <_ZN6tflite22MicroMutableOpResolverILj5EEC1EPNS_13ErrorReporterE+0x3c>)
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	601a      	str	r2, [r3, #0]
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	2200      	movs	r2, #0
 8012fd0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	2200      	movs	r2, #0
 8012fd8:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	683a      	ldr	r2, [r7, #0]
 8012fe0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	4618      	mov	r0, r3
 8012fe8:	3708      	adds	r7, #8
 8012fea:	46bd      	mov	sp, r7
 8012fec:	bd80      	pop	{r7, pc}
 8012fee:	bf00      	nop
 8012ff0:	0803ff2c 	.word	0x0803ff2c

08012ff4 <_ZN6tflite22MicroMutableOpResolverILj5EE16AddAveragePool2DEv>:
  TfLiteStatus AddAssignVariable() {
    return AddBuiltin(BuiltinOperator_ASSIGN_VARIABLE,
                      tflite::Register_ASSIGN_VARIABLE(), ParseAssignVariable);
  }

  TfLiteStatus AddAveragePool2D() {
 8012ff4:	b580      	push	{r7, lr}
 8012ff6:	b08a      	sub	sp, #40	; 0x28
 8012ff8:	af00      	add	r7, sp, #0
 8012ffa:	6078      	str	r0, [r7, #4]
    return AddBuiltin(BuiltinOperator_AVERAGE_POOL_2D,
                      tflite::Register_AVERAGE_POOL_2D(), ParsePool);
 8012ffc:	f107 0308 	add.w	r3, r7, #8
 8013000:	4618      	mov	r0, r3
 8013002:	f006 f85b 	bl	80190bc <_ZN6tflite24Register_AVERAGE_POOL_2DEv>
 8013006:	f107 0208 	add.w	r2, r7, #8
 801300a:	4b05      	ldr	r3, [pc, #20]	; (8013020 <_ZN6tflite22MicroMutableOpResolverILj5EE16AddAveragePool2DEv+0x2c>)
 801300c:	2101      	movs	r1, #1
 801300e:	6878      	ldr	r0, [r7, #4]
 8013010:	f000 f85c 	bl	80130cc <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
 8013014:	4603      	mov	r3, r0
  }
 8013016:	4618      	mov	r0, r3
 8013018:	3728      	adds	r7, #40	; 0x28
 801301a:	46bd      	mov	sp, r7
 801301c:	bd80      	pop	{r7, pc}
 801301e:	bf00      	nop
 8013020:	0800b2e1 	.word	0x0800b2e1

08013024 <_ZN6tflite22MicroMutableOpResolverILj5EE9AddConv2DERK18TfLiteRegistration>:
    return AddBuiltin(BuiltinOperator_CONCATENATION,
                      tflite::ops::micro::Register_CONCATENATION(),
                      ParseConcatenation);
  }

  TfLiteStatus AddConv2D(
 8013024:	b580      	push	{r7, lr}
 8013026:	b082      	sub	sp, #8
 8013028:	af00      	add	r7, sp, #0
 801302a:	6078      	str	r0, [r7, #4]
 801302c:	6039      	str	r1, [r7, #0]
      const TfLiteRegistration& registration = Register_CONV_2D()) {
    return AddBuiltin(BuiltinOperator_CONV_2D, registration, ParseConv2D);
 801302e:	4b05      	ldr	r3, [pc, #20]	; (8013044 <_ZN6tflite22MicroMutableOpResolverILj5EE9AddConv2DERK18TfLiteRegistration+0x20>)
 8013030:	683a      	ldr	r2, [r7, #0]
 8013032:	2103      	movs	r1, #3
 8013034:	6878      	ldr	r0, [r7, #4]
 8013036:	f000 f849 	bl	80130cc <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
 801303a:	4603      	mov	r3, r0
  }
 801303c:	4618      	mov	r0, r3
 801303e:	3708      	adds	r7, #8
 8013040:	46bd      	mov	sp, r7
 8013042:	bd80      	pop	{r7, pc}
 8013044:	0800b049 	.word	0x0800b049

08013048 <_ZN6tflite22MicroMutableOpResolverILj5EE18AddDepthwiseConv2DEv>:
  TfLiteStatus AddDepthToSpace() {
    return AddBuiltin(BuiltinOperator_DEPTH_TO_SPACE,
                      tflite::Register_DEPTH_TO_SPACE(), ParseDepthToSpace);
  }

  TfLiteStatus AddDepthwiseConv2D() {
 8013048:	b580      	push	{r7, lr}
 801304a:	b08a      	sub	sp, #40	; 0x28
 801304c:	af00      	add	r7, sp, #0
 801304e:	6078      	str	r0, [r7, #4]
    return AddBuiltin(BuiltinOperator_DEPTHWISE_CONV_2D,
                      Register_DEPTHWISE_CONV_2D(), ParseDepthwiseConv2D);
 8013050:	f107 0308 	add.w	r3, r7, #8
 8013054:	4618      	mov	r0, r3
 8013056:	f005 fd35 	bl	8018ac4 <_ZN6tflite26Register_DEPTHWISE_CONV_2DEv>
 801305a:	f107 0208 	add.w	r2, r7, #8
 801305e:	4b05      	ldr	r3, [pc, #20]	; (8013074 <_ZN6tflite22MicroMutableOpResolverILj5EE18AddDepthwiseConv2DEv+0x2c>)
 8013060:	2104      	movs	r1, #4
 8013062:	6878      	ldr	r0, [r7, #4]
 8013064:	f000 f832 	bl	80130cc <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
 8013068:	4603      	mov	r3, r0
  }
 801306a:	4618      	mov	r0, r3
 801306c:	3728      	adds	r7, #40	; 0x28
 801306e:	46bd      	mov	sp, r7
 8013070:	bd80      	pop	{r7, pc}
 8013072:	bf00      	nop
 8013074:	0800b189 	.word	0x0800b189

08013078 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddReshapeEv>:
  TfLiteStatus AddRelu6() {
    return AddBuiltin(BuiltinOperator_RELU6, tflite::Register_RELU6(),
                      ParseRelu6);
  }

  TfLiteStatus AddReshape() {
 8013078:	b580      	push	{r7, lr}
 801307a:	b08a      	sub	sp, #40	; 0x28
 801307c:	af00      	add	r7, sp, #0
 801307e:	6078      	str	r0, [r7, #4]
    return AddBuiltin(BuiltinOperator_RESHAPE,
                      tflite::ops::micro::Register_RESHAPE(), ParseReshape);
 8013080:	f107 0308 	add.w	r3, r7, #8
 8013084:	4618      	mov	r0, r3
 8013086:	f002 fc93 	bl	80159b0 <_ZN6tflite3ops5micro16Register_RESHAPEEv>
 801308a:	f107 0208 	add.w	r2, r7, #8
 801308e:	4b05      	ldr	r3, [pc, #20]	; (80130a4 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddReshapeEv+0x2c>)
 8013090:	2116      	movs	r1, #22
 8013092:	6878      	ldr	r0, [r7, #4]
 8013094:	f000 f81a 	bl	80130cc <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
 8013098:	4603      	mov	r3, r0
  }
 801309a:	4618      	mov	r0, r3
 801309c:	3728      	adds	r7, #40	; 0x28
 801309e:	46bd      	mov	sp, r7
 80130a0:	bd80      	pop	{r7, pc}
 80130a2:	bf00      	nop
 80130a4:	0800b421 	.word	0x0800b421

080130a8 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddSoftmaxERK18TfLiteRegistration>:
  TfLiteStatus AddSin() {
    return AddBuiltin(BuiltinOperator_SIN, tflite::ops::micro::Register_SIN(),
                      ParseSin);
  }

  TfLiteStatus AddSoftmax(
 80130a8:	b580      	push	{r7, lr}
 80130aa:	b082      	sub	sp, #8
 80130ac:	af00      	add	r7, sp, #0
 80130ae:	6078      	str	r0, [r7, #4]
 80130b0:	6039      	str	r1, [r7, #0]
      const TfLiteRegistration& registration = Register_SOFTMAX()) {
    return AddBuiltin(BuiltinOperator_SOFTMAX, registration, ParseSoftmax);
 80130b2:	4b05      	ldr	r3, [pc, #20]	; (80130c8 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddSoftmaxERK18TfLiteRegistration+0x20>)
 80130b4:	683a      	ldr	r2, [r7, #0]
 80130b6:	2119      	movs	r1, #25
 80130b8:	6878      	ldr	r0, [r7, #4]
 80130ba:	f000 f807 	bl	80130cc <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
 80130be:	4603      	mov	r3, r0
  }
 80130c0:	4618      	mov	r0, r3
 80130c2:	3708      	adds	r7, #8
 80130c4:	46bd      	mov	sp, r7
 80130c6:	bd80      	pop	{r7, pc}
 80130c8:	0800b51d 	.word	0x0800b51d

080130cc <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>:
  }

  unsigned int GetRegistrationLength() { return registrations_len_; }

 private:
  TfLiteStatus AddBuiltin(tflite::BuiltinOperator op,
 80130cc:	b5b0      	push	{r4, r5, r7, lr}
 80130ce:	b084      	sub	sp, #16
 80130d0:	af00      	add	r7, sp, #0
 80130d2:	60f8      	str	r0, [r7, #12]
 80130d4:	607a      	str	r2, [r7, #4]
 80130d6:	603b      	str	r3, [r7, #0]
 80130d8:	460b      	mov	r3, r1
 80130da:	72fb      	strb	r3, [r7, #11]
                          const TfLiteRegistration& registration,
                          MicroOpResolver::BuiltinParseFunction parser) {
    if (op == BuiltinOperator_CUSTOM) {
 80130dc:	7afb      	ldrb	r3, [r7, #11]
 80130de:	2b20      	cmp	r3, #32
 80130e0:	d10d      	bne.n	80130fe <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x32>
      if (error_reporter_ != nullptr) {
 80130e2:	68fb      	ldr	r3, [r7, #12]
 80130e4:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80130e8:	2b00      	cmp	r3, #0
 80130ea:	d006      	beq.n	80130fa <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x2e>
        TF_LITE_REPORT_ERROR(error_reporter_,
 80130ec:	68fb      	ldr	r3, [r7, #12]
 80130ee:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80130f2:	493a      	ldr	r1, [pc, #232]	; (80131dc <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x110>)
 80130f4:	4618      	mov	r0, r3
 80130f6:	f7f7 fc05 	bl	800a904 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Invalid parameter BuiltinOperator_CUSTOM to the "
                             "AddBuiltin function.");
      }
      return kTfLiteError;
 80130fa:	2301      	movs	r3, #1
 80130fc:	e069      	b.n	80131d2 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x106>
    }

    if (FindOp(op) != nullptr) {
 80130fe:	68fb      	ldr	r3, [r7, #12]
 8013100:	681b      	ldr	r3, [r3, #0]
 8013102:	331c      	adds	r3, #28
 8013104:	681b      	ldr	r3, [r3, #0]
 8013106:	7afa      	ldrb	r2, [r7, #11]
 8013108:	4611      	mov	r1, r2
 801310a:	68f8      	ldr	r0, [r7, #12]
 801310c:	4798      	blx	r3
 801310e:	4603      	mov	r3, r0
 8013110:	2b00      	cmp	r3, #0
 8013112:	bf14      	ite	ne
 8013114:	2301      	movne	r3, #1
 8013116:	2300      	moveq	r3, #0
 8013118:	b2db      	uxtb	r3, r3
 801311a:	2b00      	cmp	r3, #0
 801311c:	d00e      	beq.n	801313c <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x70>
      if (error_reporter_ != nullptr) {
 801311e:	68fb      	ldr	r3, [r7, #12]
 8013120:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8013124:	2b00      	cmp	r3, #0
 8013126:	d007      	beq.n	8013138 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x6c>
        TF_LITE_REPORT_ERROR(error_reporter_,
 8013128:	68fb      	ldr	r3, [r7, #12]
 801312a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 801312e:	7afa      	ldrb	r2, [r7, #11]
 8013130:	492b      	ldr	r1, [pc, #172]	; (80131e0 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x114>)
 8013132:	4618      	mov	r0, r3
 8013134:	f7f7 fbe6 	bl	800a904 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Calling AddBuiltin with the same op more than "
                             "once is not supported (Op: #%d).",
                             op);
      }
      return kTfLiteError;
 8013138:	2301      	movs	r3, #1
 801313a:	e04a      	b.n	80131d2 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x106>
    }

    if (registrations_len_ >= tOpCount) {
 801313c:	68fb      	ldr	r3, [r7, #12]
 801313e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8013142:	2b04      	cmp	r3, #4
 8013144:	d90e      	bls.n	8013164 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x98>
      if (error_reporter_) {
 8013146:	68fb      	ldr	r3, [r7, #12]
 8013148:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 801314c:	2b00      	cmp	r3, #0
 801314e:	d007      	beq.n	8013160 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x94>
        TF_LITE_REPORT_ERROR(error_reporter_,
 8013150:	68fb      	ldr	r3, [r7, #12]
 8013152:	f8d3 00c8 	ldr.w	r0, [r3, #200]	; 0xc8
 8013156:	7afa      	ldrb	r2, [r7, #11]
 8013158:	2305      	movs	r3, #5
 801315a:	4922      	ldr	r1, [pc, #136]	; (80131e4 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x118>)
 801315c:	f7f7 fbd2 	bl	800a904 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Couldn't register builtin op #%d, resolver size "
                             "is too small (%d).",
                             op, tOpCount);
      }
      return kTfLiteError;
 8013160:	2301      	movs	r3, #1
 8013162:	e036      	b.n	80131d2 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x106>
    }

    registrations_[registrations_len_] = registration;
 8013164:	68fb      	ldr	r3, [r7, #12]
 8013166:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801316a:	68fa      	ldr	r2, [r7, #12]
 801316c:	015b      	lsls	r3, r3, #5
 801316e:	4413      	add	r3, r2
 8013170:	687a      	ldr	r2, [r7, #4]
 8013172:	1d1c      	adds	r4, r3, #4
 8013174:	4615      	mov	r5, r2
 8013176:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013178:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801317a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801317e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    // Strictly speaking, the builtin_code is not necessary for TFLM but filling
    // it in regardless.
    registrations_[registrations_len_].builtin_code = op;
 8013182:	68fb      	ldr	r3, [r7, #12]
 8013184:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8013188:	7afa      	ldrb	r2, [r7, #11]
 801318a:	68f9      	ldr	r1, [r7, #12]
 801318c:	015b      	lsls	r3, r3, #5
 801318e:	440b      	add	r3, r1
 8013190:	3318      	adds	r3, #24
 8013192:	601a      	str	r2, [r3, #0]
    registrations_len_++;
 8013194:	68fb      	ldr	r3, [r7, #12]
 8013196:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801319a:	1c5a      	adds	r2, r3, #1
 801319c:	68fb      	ldr	r3, [r7, #12]
 801319e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    builtin_codes_[num_buitin_ops_] = op;
 80131a2:	68fb      	ldr	r3, [r7, #12]
 80131a4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80131a8:	68fa      	ldr	r2, [r7, #12]
 80131aa:	4413      	add	r3, r2
 80131ac:	7afa      	ldrb	r2, [r7, #11]
 80131ae:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
    builtin_parsers_[num_buitin_ops_] = parser;
 80131b2:	68fb      	ldr	r3, [r7, #12]
 80131b4:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80131b8:	68fb      	ldr	r3, [r7, #12]
 80131ba:	322c      	adds	r2, #44	; 0x2c
 80131bc:	6839      	ldr	r1, [r7, #0]
 80131be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    num_buitin_ops_++;
 80131c2:	68fb      	ldr	r3, [r7, #12]
 80131c4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80131c8:	1c5a      	adds	r2, r3, #1
 80131ca:	68fb      	ldr	r3, [r7, #12]
 80131cc:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

    return kTfLiteOk;
 80131d0:	2300      	movs	r3, #0
  }
 80131d2:	4618      	mov	r0, r3
 80131d4:	3710      	adds	r7, #16
 80131d6:	46bd      	mov	sp, r7
 80131d8:	bdb0      	pop	{r4, r5, r7, pc}
 80131da:	bf00      	nop
 80131dc:	0802cc98 	.word	0x0802cc98
 80131e0:	0802cce0 	.word	0x0802cce0
 80131e4:	0802cd30 	.word	0x0802cd30

080131e8 <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpENS_15BuiltinOperatorE>:
  const TfLiteRegistration* FindOp(tflite::BuiltinOperator op) const override {
 80131e8:	b480      	push	{r7}
 80131ea:	b085      	sub	sp, #20
 80131ec:	af00      	add	r7, sp, #0
 80131ee:	6078      	str	r0, [r7, #4]
 80131f0:	460b      	mov	r3, r1
 80131f2:	70fb      	strb	r3, [r7, #3]
    if (op == BuiltinOperator_CUSTOM) return nullptr;
 80131f4:	78fb      	ldrb	r3, [r7, #3]
 80131f6:	2b20      	cmp	r3, #32
 80131f8:	d101      	bne.n	80131fe <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpENS_15BuiltinOperatorE+0x16>
 80131fa:	2300      	movs	r3, #0
 80131fc:	e019      	b.n	8013232 <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpENS_15BuiltinOperatorE+0x4a>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 80131fe:	2300      	movs	r3, #0
 8013200:	60fb      	str	r3, [r7, #12]
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8013208:	68fa      	ldr	r2, [r7, #12]
 801320a:	429a      	cmp	r2, r3
 801320c:	d210      	bcs.n	8013230 <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpENS_15BuiltinOperatorE+0x48>
      const TfLiteRegistration& registration = registrations_[i];
 801320e:	68fb      	ldr	r3, [r7, #12]
 8013210:	015b      	lsls	r3, r3, #5
 8013212:	687a      	ldr	r2, [r7, #4]
 8013214:	4413      	add	r3, r2
 8013216:	3304      	adds	r3, #4
 8013218:	60bb      	str	r3, [r7, #8]
      if (registration.builtin_code == op) {
 801321a:	68bb      	ldr	r3, [r7, #8]
 801321c:	695a      	ldr	r2, [r3, #20]
 801321e:	78fb      	ldrb	r3, [r7, #3]
 8013220:	429a      	cmp	r2, r3
 8013222:	d101      	bne.n	8013228 <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpENS_15BuiltinOperatorE+0x40>
        return &registration;
 8013224:	68bb      	ldr	r3, [r7, #8]
 8013226:	e004      	b.n	8013232 <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpENS_15BuiltinOperatorE+0x4a>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8013228:	68fb      	ldr	r3, [r7, #12]
 801322a:	3301      	adds	r3, #1
 801322c:	60fb      	str	r3, [r7, #12]
 801322e:	e7e8      	b.n	8013202 <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpENS_15BuiltinOperatorE+0x1a>
    return nullptr;
 8013230:	2300      	movs	r3, #0
  }
 8013232:	4618      	mov	r0, r3
 8013234:	3714      	adds	r7, #20
 8013236:	46bd      	mov	sp, r7
 8013238:	f85d 7b04 	ldr.w	r7, [sp], #4
 801323c:	4770      	bx	lr
	...

08013240 <_ZN6tflite22MicroMutableOpResolverILj5EED1Ev>:
class MicroMutableOpResolver : public MicroOpResolver {
 8013240:	b580      	push	{r7, lr}
 8013242:	b082      	sub	sp, #8
 8013244:	af00      	add	r7, sp, #0
 8013246:	6078      	str	r0, [r7, #4]
 8013248:	4a05      	ldr	r2, [pc, #20]	; (8013260 <_ZN6tflite22MicroMutableOpResolverILj5EED1Ev+0x20>)
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	601a      	str	r2, [r3, #0]
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	4618      	mov	r0, r3
 8013252:	f7fb f925 	bl	800e4a0 <_ZN6tflite15MicroOpResolverD1Ev>
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	4618      	mov	r0, r3
 801325a:	3708      	adds	r7, #8
 801325c:	46bd      	mov	sp, r7
 801325e:	bd80      	pop	{r7, pc}
 8013260:	0803ff2c 	.word	0x0803ff2c

08013264 <_ZN6tflite22MicroMutableOpResolverILj5EED0Ev>:
 8013264:	b580      	push	{r7, lr}
 8013266:	b082      	sub	sp, #8
 8013268:	af00      	add	r7, sp, #0
 801326a:	6078      	str	r0, [r7, #4]
 801326c:	6878      	ldr	r0, [r7, #4]
 801326e:	f7ff ffe7 	bl	8013240 <_ZN6tflite22MicroMutableOpResolverILj5EED1Ev>
 8013272:	21cc      	movs	r1, #204	; 0xcc
 8013274:	6878      	ldr	r0, [r7, #4]
 8013276:	f013 fad8 	bl	802682a <_ZdlPvj>
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	4618      	mov	r0, r3
 801327e:	3708      	adds	r7, #8
 8013280:	46bd      	mov	sp, r7
 8013282:	bd80      	pop	{r7, pc}

08013284 <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpEPKc>:
  const TfLiteRegistration* FindOp(const char* op) const override {
 8013284:	b580      	push	{r7, lr}
 8013286:	b084      	sub	sp, #16
 8013288:	af00      	add	r7, sp, #0
 801328a:	6078      	str	r0, [r7, #4]
 801328c:	6039      	str	r1, [r7, #0]
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 801328e:	2300      	movs	r3, #0
 8013290:	60fb      	str	r3, [r7, #12]
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8013298:	68fa      	ldr	r2, [r7, #12]
 801329a:	429a      	cmp	r2, r3
 801329c:	d218      	bcs.n	80132d0 <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpEPKc+0x4c>
      const TfLiteRegistration& registration = registrations_[i];
 801329e:	68fb      	ldr	r3, [r7, #12]
 80132a0:	015b      	lsls	r3, r3, #5
 80132a2:	687a      	ldr	r2, [r7, #4]
 80132a4:	4413      	add	r3, r2
 80132a6:	3304      	adds	r3, #4
 80132a8:	60bb      	str	r3, [r7, #8]
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 80132aa:	68bb      	ldr	r3, [r7, #8]
 80132ac:	695b      	ldr	r3, [r3, #20]
 80132ae:	2b20      	cmp	r3, #32
 80132b0:	d10a      	bne.n	80132c8 <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpEPKc+0x44>
          (strcmp(registration.custom_name, op) == 0)) {
 80132b2:	68bb      	ldr	r3, [r7, #8]
 80132b4:	699b      	ldr	r3, [r3, #24]
 80132b6:	6839      	ldr	r1, [r7, #0]
 80132b8:	4618      	mov	r0, r3
 80132ba:	f7ed f801 	bl	80002c0 <strcmp>
 80132be:	4603      	mov	r3, r0
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	d101      	bne.n	80132c8 <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpEPKc+0x44>
        return &registration;
 80132c4:	68bb      	ldr	r3, [r7, #8]
 80132c6:	e004      	b.n	80132d2 <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpEPKc+0x4e>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 80132c8:	68fb      	ldr	r3, [r7, #12]
 80132ca:	3301      	adds	r3, #1
 80132cc:	60fb      	str	r3, [r7, #12]
 80132ce:	e7e0      	b.n	8013292 <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpEPKc+0xe>
    return nullptr;
 80132d0:	2300      	movs	r3, #0
  }
 80132d2:	4618      	mov	r0, r3
 80132d4:	3710      	adds	r7, #16
 80132d6:	46bd      	mov	sp, r7
 80132d8:	bd80      	pop	{r7, pc}

080132da <_ZNK6tflite22MicroMutableOpResolverILj5EE15GetOpDataParserENS_15BuiltinOperatorE>:
  MicroOpResolver::BuiltinParseFunction GetOpDataParser(
 80132da:	b580      	push	{r7, lr}
 80132dc:	b084      	sub	sp, #16
 80132de:	af00      	add	r7, sp, #0
 80132e0:	6078      	str	r0, [r7, #4]
 80132e2:	460b      	mov	r3, r1
 80132e4:	70fb      	strb	r3, [r7, #3]
    TFLITE_DCHECK(num_buitin_ops_ <= tOpCount);
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80132ec:	2b05      	cmp	r3, #5
 80132ee:	d901      	bls.n	80132f4 <_ZNK6tflite22MicroMutableOpResolverILj5EE15GetOpDataParserENS_15BuiltinOperatorE+0x1a>
 80132f0:	f013 fd05 	bl	8026cfe <abort>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
 80132f4:	2300      	movs	r3, #0
 80132f6:	60fb      	str	r3, [r7, #12]
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80132fe:	68fa      	ldr	r2, [r7, #12]
 8013300:	429a      	cmp	r2, r3
 8013302:	d211      	bcs.n	8013328 <_ZNK6tflite22MicroMutableOpResolverILj5EE15GetOpDataParserENS_15BuiltinOperatorE+0x4e>
      if (builtin_codes_[i] == op) return builtin_parsers_[i];
 8013304:	687a      	ldr	r2, [r7, #4]
 8013306:	68fb      	ldr	r3, [r7, #12]
 8013308:	4413      	add	r3, r2
 801330a:	33a8      	adds	r3, #168	; 0xa8
 801330c:	781b      	ldrb	r3, [r3, #0]
 801330e:	78fa      	ldrb	r2, [r7, #3]
 8013310:	429a      	cmp	r2, r3
 8013312:	d105      	bne.n	8013320 <_ZNK6tflite22MicroMutableOpResolverILj5EE15GetOpDataParserENS_15BuiltinOperatorE+0x46>
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	68fa      	ldr	r2, [r7, #12]
 8013318:	322c      	adds	r2, #44	; 0x2c
 801331a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801331e:	e004      	b.n	801332a <_ZNK6tflite22MicroMutableOpResolverILj5EE15GetOpDataParserENS_15BuiltinOperatorE+0x50>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
 8013320:	68fb      	ldr	r3, [r7, #12]
 8013322:	3301      	adds	r3, #1
 8013324:	60fb      	str	r3, [r7, #12]
 8013326:	e7e7      	b.n	80132f8 <_ZNK6tflite22MicroMutableOpResolverILj5EE15GetOpDataParserENS_15BuiltinOperatorE+0x1e>
    return nullptr;
 8013328:	2300      	movs	r3, #0
  }
 801332a:	4618      	mov	r0, r3
 801332c:	3710      	adds	r7, #16
 801332e:	46bd      	mov	sp, r7
 8013330:	bd80      	pop	{r7, pc}

08013332 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns a mutable tensor for a given input index. is_variable must be checked
// during prepare when the full TfLiteTensor is available.
inline TfLiteEvalTensor* GetMutableEvalInput(const TfLiteContext* context,
                                             const TfLiteNode* node,
                                             int index) {
 8013332:	b580      	push	{r7, lr}
 8013334:	b084      	sub	sp, #16
 8013336:	af00      	add	r7, sp, #0
 8013338:	60f8      	str	r0, [r7, #12]
 801333a:	60b9      	str	r1, [r7, #8]
 801333c:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context != nullptr);
 801333e:	68fb      	ldr	r3, [r7, #12]
 8013340:	2b00      	cmp	r3, #0
 8013342:	d101      	bne.n	8013348 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x16>
 8013344:	f013 fcdb 	bl	8026cfe <abort>
  TFLITE_DCHECK(node != nullptr);
 8013348:	68bb      	ldr	r3, [r7, #8]
 801334a:	2b00      	cmp	r3, #0
 801334c:	d101      	bne.n	8013352 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x20>
 801334e:	f013 fcd6 	bl	8026cfe <abort>
  return context->GetEvalTensor(context, node->inputs->data[index]);
 8013352:	68fb      	ldr	r3, [r7, #12]
 8013354:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013356:	68bb      	ldr	r3, [r7, #8]
 8013358:	6819      	ldr	r1, [r3, #0]
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	009b      	lsls	r3, r3, #2
 801335e:	440b      	add	r3, r1
 8013360:	685b      	ldr	r3, [r3, #4]
 8013362:	4619      	mov	r1, r3
 8013364:	68f8      	ldr	r0, [r7, #12]
 8013366:	4790      	blx	r2
 8013368:	4603      	mov	r3, r0
}
 801336a:	4618      	mov	r0, r3
 801336c:	3710      	adds	r7, #16
 801336e:	46bd      	mov	sp, r7
 8013370:	bd80      	pop	{r7, pc}

08013372 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given input index in a node.
inline const TfLiteEvalTensor* GetEvalInput(const TfLiteContext* context,
                                            const TfLiteNode* node, int index) {
 8013372:	b580      	push	{r7, lr}
 8013374:	b084      	sub	sp, #16
 8013376:	af00      	add	r7, sp, #0
 8013378:	60f8      	str	r0, [r7, #12]
 801337a:	60b9      	str	r1, [r7, #8]
 801337c:	607a      	str	r2, [r7, #4]
  return GetMutableEvalInput(context, node, index);
 801337e:	687a      	ldr	r2, [r7, #4]
 8013380:	68b9      	ldr	r1, [r7, #8]
 8013382:	68f8      	ldr	r0, [r7, #12]
 8013384:	f7ff ffd5 	bl	8013332 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8013388:	4603      	mov	r3, r0
}
 801338a:	4618      	mov	r0, r3
 801338c:	3710      	adds	r7, #16
 801338e:	46bd      	mov	sp, r7
 8013390:	bd80      	pop	{r7, pc}

08013392 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given output index in a node.
inline TfLiteEvalTensor* GetEvalOutput(const TfLiteContext* context,
                                       const TfLiteNode* node, int index) {
 8013392:	b580      	push	{r7, lr}
 8013394:	b084      	sub	sp, #16
 8013396:	af00      	add	r7, sp, #0
 8013398:	60f8      	str	r0, [r7, #12]
 801339a:	60b9      	str	r1, [r7, #8]
 801339c:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context != nullptr);
 801339e:	68fb      	ldr	r3, [r7, #12]
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	d101      	bne.n	80133a8 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x16>
 80133a4:	f013 fcab 	bl	8026cfe <abort>
  TFLITE_DCHECK(node != nullptr);
 80133a8:	68bb      	ldr	r3, [r7, #8]
 80133aa:	2b00      	cmp	r3, #0
 80133ac:	d101      	bne.n	80133b2 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x20>
 80133ae:	f013 fca6 	bl	8026cfe <abort>
  return context->GetEvalTensor(context, node->outputs->data[index]);
 80133b2:	68fb      	ldr	r3, [r7, #12]
 80133b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80133b6:	68bb      	ldr	r3, [r7, #8]
 80133b8:	6859      	ldr	r1, [r3, #4]
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	009b      	lsls	r3, r3, #2
 80133be:	440b      	add	r3, r1
 80133c0:	685b      	ldr	r3, [r3, #4]
 80133c2:	4619      	mov	r1, r3
 80133c4:	68f8      	ldr	r0, [r7, #12]
 80133c6:	4790      	blx	r2
 80133c8:	4603      	mov	r3, r0
}
 80133ca:	4618      	mov	r0, r3
 80133cc:	3710      	adds	r7, #16
 80133ce:	46bd      	mov	sp, r7
 80133d0:	bd80      	pop	{r7, pc}

080133d2 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>:
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
}

// Returns const data for a TfLiteEvalTensor struct.
template <typename T>
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 80133d2:	b580      	push	{r7, lr}
 80133d4:	b082      	sub	sp, #8
 80133d6:	af00      	add	r7, sp, #0
 80133d8:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	2b00      	cmp	r3, #0
 80133de:	d101      	bne.n	80133e4 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor+0x12>
 80133e0:	f013 fc8d 	bl	8026cfe <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	681b      	ldr	r3, [r3, #0]
}
 80133e8:	4618      	mov	r0, r3
 80133ea:	3708      	adds	r7, #8
 80133ec:	46bd      	mov	sp, r7
 80133ee:	bd80      	pop	{r7, pc}

080133f0 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 80133f0:	b480      	push	{r7}
 80133f2:	b083      	sub	sp, #12
 80133f4:	af00      	add	r7, sp, #0
 80133f6:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	2b00      	cmp	r3, #0
 80133fc:	d002      	beq.n	8013404 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor+0x14>
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	681b      	ldr	r3, [r3, #0]
 8013402:	e000      	b.n	8013406 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor+0x16>
 8013404:	2300      	movs	r3, #0
}
 8013406:	4618      	mov	r0, r3
 8013408:	370c      	adds	r7, #12
 801340a:	46bd      	mov	sp, r7
 801340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013410:	4770      	bx	lr

08013412 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 8013412:	b580      	push	{r7, lr}
 8013414:	b082      	sub	sp, #8
 8013416:	af00      	add	r7, sp, #0
 8013418:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 801341a:	687b      	ldr	r3, [r7, #4]
 801341c:	2b00      	cmp	r3, #0
 801341e:	d101      	bne.n	8013424 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor+0x12>
 8013420:	f013 fc6d 	bl	8026cfe <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	681b      	ldr	r3, [r3, #0]
}
 8013428:	4618      	mov	r0, r3
 801342a:	3708      	adds	r7, #8
 801342c:	46bd      	mov	sp, r7
 801342e:	bd80      	pop	{r7, pc}

08013430 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 8013430:	b480      	push	{r7}
 8013432:	b083      	sub	sp, #12
 8013434:	af00      	add	r7, sp, #0
 8013436:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	2b00      	cmp	r3, #0
 801343c:	d002      	beq.n	8013444 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor+0x14>
 801343e:	687b      	ldr	r3, [r7, #4]
 8013440:	681b      	ldr	r3, [r3, #0]
 8013442:	e000      	b.n	8013446 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor+0x16>
 8013444:	2300      	movs	r3, #0
}
 8013446:	4618      	mov	r0, r3
 8013448:	370c      	adds	r7, #12
 801344a:	46bd      	mov	sp, r7
 801344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013450:	4770      	bx	lr

08013452 <_ZNK6tflite12RuntimeShape4DimsEi>:
  int32_t Dims(int i) const {
 8013452:	b580      	push	{r7, lr}
 8013454:	b082      	sub	sp, #8
 8013456:	af00      	add	r7, sp, #0
 8013458:	6078      	str	r0, [r7, #4]
 801345a:	6039      	str	r1, [r7, #0]
    TFLITE_DCHECK_GE(i, 0);
 801345c:	683b      	ldr	r3, [r7, #0]
 801345e:	2b00      	cmp	r3, #0
 8013460:	da01      	bge.n	8013466 <_ZNK6tflite12RuntimeShape4DimsEi+0x14>
 8013462:	f013 fc4c 	bl	8026cfe <abort>
    TFLITE_DCHECK_LT(i, size_);
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	681b      	ldr	r3, [r3, #0]
 801346a:	683a      	ldr	r2, [r7, #0]
 801346c:	429a      	cmp	r2, r3
 801346e:	db01      	blt.n	8013474 <_ZNK6tflite12RuntimeShape4DimsEi+0x22>
 8013470:	f013 fc45 	bl	8026cfe <abort>
    return dims_[i];
 8013474:	687a      	ldr	r2, [r7, #4]
 8013476:	683b      	ldr	r3, [r7, #0]
 8013478:	009b      	lsls	r3, r3, #2
 801347a:	4413      	add	r3, r2
 801347c:	685b      	ldr	r3, [r3, #4]
  }
 801347e:	4618      	mov	r0, r3
 8013480:	3708      	adds	r7, #8
 8013482:	46bd      	mov	sp, r7
 8013484:	bd80      	pop	{r7, pc}

08013486 <_ZNK6tflite12RuntimeShape8DimsDataEv>:
  const int32_t* DimsData() const { return dims_; }
 8013486:	b480      	push	{r7}
 8013488:	b083      	sub	sp, #12
 801348a:	af00      	add	r7, sp, #0
 801348c:	6078      	str	r0, [r7, #4]
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	3304      	adds	r3, #4
 8013492:	4618      	mov	r0, r3
 8013494:	370c      	adds	r7, #12
 8013496:	46bd      	mov	sp, r7
 8013498:	f85d 7b04 	ldr.w	r7, [sp], #4
 801349c:	4770      	bx	lr

0801349e <_ZNK6tflite12RuntimeShape8FlatSizeEv>:

  // Returns the total count of elements, that is the size when flattened into a
  // vector.
  int FlatSize() const {
 801349e:	b580      	push	{r7, lr}
 80134a0:	b086      	sub	sp, #24
 80134a2:	af00      	add	r7, sp, #0
 80134a4:	6078      	str	r0, [r7, #4]
    int buffer_size = 1;
 80134a6:	2301      	movs	r3, #1
 80134a8:	617b      	str	r3, [r7, #20]
    const int* dims_data = reinterpret_cast<const int*>(DimsData());
 80134aa:	6878      	ldr	r0, [r7, #4]
 80134ac:	f7ff ffeb 	bl	8013486 <_ZNK6tflite12RuntimeShape8DimsDataEv>
 80134b0:	60f8      	str	r0, [r7, #12]
    for (int i = 0; i < size_; i++) {
 80134b2:	2300      	movs	r3, #0
 80134b4:	613b      	str	r3, [r7, #16]
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	681b      	ldr	r3, [r3, #0]
 80134ba:	693a      	ldr	r2, [r7, #16]
 80134bc:	429a      	cmp	r2, r3
 80134be:	da0c      	bge.n	80134da <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x3c>
      buffer_size *= dims_data[i];
 80134c0:	693b      	ldr	r3, [r7, #16]
 80134c2:	009b      	lsls	r3, r3, #2
 80134c4:	68fa      	ldr	r2, [r7, #12]
 80134c6:	4413      	add	r3, r2
 80134c8:	681a      	ldr	r2, [r3, #0]
 80134ca:	697b      	ldr	r3, [r7, #20]
 80134cc:	fb02 f303 	mul.w	r3, r2, r3
 80134d0:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < size_; i++) {
 80134d2:	693b      	ldr	r3, [r7, #16]
 80134d4:	3301      	adds	r3, #1
 80134d6:	613b      	str	r3, [r7, #16]
 80134d8:	e7ed      	b.n	80134b6 <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x18>
    }
    return buffer_size;
 80134da:	697b      	ldr	r3, [r7, #20]
  }
 80134dc:	4618      	mov	r0, r3
 80134de:	3718      	adds	r7, #24
 80134e0:	46bd      	mov	sp, r7
 80134e2:	bd80      	pop	{r7, pc}

080134e4 <_ZN6tflite9NumInputsEPK10TfLiteNode>:
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
 80134e4:	b480      	push	{r7}
 80134e6:	b083      	sub	sp, #12
 80134e8:	af00      	add	r7, sp, #0
 80134ea:	6078      	str	r0, [r7, #4]
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	681b      	ldr	r3, [r3, #0]
 80134f0:	681b      	ldr	r3, [r3, #0]
 80134f2:	4618      	mov	r0, r3
 80134f4:	370c      	adds	r7, #12
 80134f6:	46bd      	mov	sp, r7
 80134f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134fc:	4770      	bx	lr

080134fe <_ZN6tflite10NumOutputsEPK10TfLiteNode>:
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
 80134fe:	b480      	push	{r7}
 8013500:	b083      	sub	sp, #12
 8013502:	af00      	add	r7, sp, #0
 8013504:	6078      	str	r0, [r7, #4]
 8013506:	687b      	ldr	r3, [r7, #4]
 8013508:	685b      	ldr	r3, [r3, #4]
 801350a:	681b      	ldr	r3, [r3, #0]
 801350c:	4618      	mov	r0, r3
 801350e:	370c      	adds	r7, #12
 8013510:	46bd      	mov	sp, r7
 8013512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013516:	4770      	bx	lr

08013518 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 8013518:	b580      	push	{r7, lr}
 801351a:	b082      	sub	sp, #8
 801351c:	af00      	add	r7, sp, #0
 801351e:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	2b00      	cmp	r3, #0
 8013524:	d101      	bne.n	801352a <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor+0x12>
 8013526:	f013 fbea 	bl	8026cfe <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	681b      	ldr	r3, [r3, #0]
}
 801352e:	4618      	mov	r0, r3
 8013530:	3708      	adds	r7, #8
 8013532:	46bd      	mov	sp, r7
 8013534:	bd80      	pop	{r7, pc}

08013536 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>:
// Since tensors with '0' in their shape are valid in TF, these offset functions
// allow that as long as the corresponding index is also 0. It is upto the
// calling ops to ensure that they perform verification checks on tensor shapes
// if they don't support a particular behavior.

inline int Offset(const RuntimeShape& shape, int i0, int i1, int i2, int i3) {
 8013536:	b580      	push	{r7, lr}
 8013538:	b086      	sub	sp, #24
 801353a:	af00      	add	r7, sp, #0
 801353c:	60f8      	str	r0, [r7, #12]
 801353e:	60b9      	str	r1, [r7, #8]
 8013540:	607a      	str	r2, [r7, #4]
 8013542:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
 8013544:	68f8      	ldr	r0, [r7, #12]
 8013546:	f7fb f9cf 	bl	800e8e8 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801354a:	4603      	mov	r3, r0
 801354c:	2b04      	cmp	r3, #4
 801354e:	d001      	beq.n	8013554 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x1e>
 8013550:	f013 fbd5 	bl	8026cfe <abort>
  const int* dims_data = reinterpret_cast<const int*>(shape.DimsData());
 8013554:	68f8      	ldr	r0, [r7, #12]
 8013556:	f7ff ff96 	bl	8013486 <_ZNK6tflite12RuntimeShape8DimsDataEv>
 801355a:	6178      	str	r0, [r7, #20]
  TFLITE_DCHECK((dims_data[0] == 0 && i0 == 0) ||
 801355c:	697b      	ldr	r3, [r7, #20]
 801355e:	681b      	ldr	r3, [r3, #0]
 8013560:	2b00      	cmp	r3, #0
 8013562:	d102      	bne.n	801356a <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x34>
 8013564:	68bb      	ldr	r3, [r7, #8]
 8013566:	2b00      	cmp	r3, #0
 8013568:	d009      	beq.n	801357e <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x48>
 801356a:	68bb      	ldr	r3, [r7, #8]
 801356c:	2b00      	cmp	r3, #0
 801356e:	db04      	blt.n	801357a <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x44>
 8013570:	697b      	ldr	r3, [r7, #20]
 8013572:	681b      	ldr	r3, [r3, #0]
 8013574:	68ba      	ldr	r2, [r7, #8]
 8013576:	429a      	cmp	r2, r3
 8013578:	db01      	blt.n	801357e <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x48>
 801357a:	f013 fbc0 	bl	8026cfe <abort>
                (i0 >= 0 && i0 < dims_data[0]));
  TFLITE_DCHECK((dims_data[1] == 0 && i1 == 0) ||
 801357e:	697b      	ldr	r3, [r7, #20]
 8013580:	3304      	adds	r3, #4
 8013582:	681b      	ldr	r3, [r3, #0]
 8013584:	2b00      	cmp	r3, #0
 8013586:	d102      	bne.n	801358e <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x58>
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	2b00      	cmp	r3, #0
 801358c:	d00a      	beq.n	80135a4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x6e>
 801358e:	687b      	ldr	r3, [r7, #4]
 8013590:	2b00      	cmp	r3, #0
 8013592:	db05      	blt.n	80135a0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x6a>
 8013594:	697b      	ldr	r3, [r7, #20]
 8013596:	3304      	adds	r3, #4
 8013598:	681b      	ldr	r3, [r3, #0]
 801359a:	687a      	ldr	r2, [r7, #4]
 801359c:	429a      	cmp	r2, r3
 801359e:	db01      	blt.n	80135a4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x6e>
 80135a0:	f013 fbad 	bl	8026cfe <abort>
                (i1 >= 0 && i1 < dims_data[1]));
  TFLITE_DCHECK((dims_data[2] == 0 && i2 == 0) ||
 80135a4:	697b      	ldr	r3, [r7, #20]
 80135a6:	3308      	adds	r3, #8
 80135a8:	681b      	ldr	r3, [r3, #0]
 80135aa:	2b00      	cmp	r3, #0
 80135ac:	d102      	bne.n	80135b4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x7e>
 80135ae:	683b      	ldr	r3, [r7, #0]
 80135b0:	2b00      	cmp	r3, #0
 80135b2:	d00a      	beq.n	80135ca <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x94>
 80135b4:	683b      	ldr	r3, [r7, #0]
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	db05      	blt.n	80135c6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x90>
 80135ba:	697b      	ldr	r3, [r7, #20]
 80135bc:	3308      	adds	r3, #8
 80135be:	681b      	ldr	r3, [r3, #0]
 80135c0:	683a      	ldr	r2, [r7, #0]
 80135c2:	429a      	cmp	r2, r3
 80135c4:	db01      	blt.n	80135ca <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x94>
 80135c6:	f013 fb9a 	bl	8026cfe <abort>
                (i2 >= 0 && i2 < dims_data[2]));
  TFLITE_DCHECK((dims_data[3] == 0 && i3 == 0) ||
 80135ca:	697b      	ldr	r3, [r7, #20]
 80135cc:	330c      	adds	r3, #12
 80135ce:	681b      	ldr	r3, [r3, #0]
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	d102      	bne.n	80135da <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa4>
 80135d4:	6a3b      	ldr	r3, [r7, #32]
 80135d6:	2b00      	cmp	r3, #0
 80135d8:	d00a      	beq.n	80135f0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xba>
 80135da:	6a3b      	ldr	r3, [r7, #32]
 80135dc:	2b00      	cmp	r3, #0
 80135de:	db05      	blt.n	80135ec <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xb6>
 80135e0:	697b      	ldr	r3, [r7, #20]
 80135e2:	330c      	adds	r3, #12
 80135e4:	681b      	ldr	r3, [r3, #0]
 80135e6:	6a3a      	ldr	r2, [r7, #32]
 80135e8:	429a      	cmp	r2, r3
 80135ea:	db01      	blt.n	80135f0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xba>
 80135ec:	f013 fb87 	bl	8026cfe <abort>
                (i3 >= 0 && i3 < dims_data[3]));
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
 80135f0:	697b      	ldr	r3, [r7, #20]
 80135f2:	3304      	adds	r3, #4
 80135f4:	681b      	ldr	r3, [r3, #0]
 80135f6:	68ba      	ldr	r2, [r7, #8]
 80135f8:	fb02 f203 	mul.w	r2, r2, r3
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	4413      	add	r3, r2
 8013600:	697a      	ldr	r2, [r7, #20]
 8013602:	3208      	adds	r2, #8
 8013604:	6812      	ldr	r2, [r2, #0]
 8013606:	fb02 f203 	mul.w	r2, r2, r3
 801360a:	683b      	ldr	r3, [r7, #0]
 801360c:	4413      	add	r3, r2
 801360e:	697a      	ldr	r2, [r7, #20]
 8013610:	320c      	adds	r2, #12
 8013612:	6812      	ldr	r2, [r2, #0]
 8013614:	fb02 f203 	mul.w	r2, r2, r3
 8013618:	6a3b      	ldr	r3, [r7, #32]
 801361a:	4413      	add	r3, r2
}
 801361c:	4618      	mov	r0, r3
 801361e:	3718      	adds	r7, #24
 8013620:	46bd      	mov	sp, r7
 8013622:	bd80      	pop	{r7, pc}

08013624 <_ZN6tflite5micro13GetTensorDataIxEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 8013624:	b580      	push	{r7, lr}
 8013626:	b082      	sub	sp, #8
 8013628:	af00      	add	r7, sp, #0
 801362a:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	2b00      	cmp	r3, #0
 8013630:	d101      	bne.n	8013636 <_ZN6tflite5micro13GetTensorDataIxEEPKT_PK16TfLiteEvalTensor+0x12>
 8013632:	f013 fb64 	bl	8026cfe <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	681b      	ldr	r3, [r3, #0]
}
 801363a:	4618      	mov	r0, r3
 801363c:	3708      	adds	r7, #8
 801363e:	46bd      	mov	sp, r7
 8013640:	bd80      	pop	{r7, pc}

08013642 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>:
  return MatchingArraySize(array1, index1, args...);
}

// Get common shape dim, DCHECKing that they all agree.
inline int MatchingDim(const RuntimeShape& shape1, int index1,
                       const RuntimeShape& shape2, int index2) {
 8013642:	b590      	push	{r4, r7, lr}
 8013644:	b087      	sub	sp, #28
 8013646:	af00      	add	r7, sp, #0
 8013648:	60f8      	str	r0, [r7, #12]
 801364a:	60b9      	str	r1, [r7, #8]
 801364c:	607a      	str	r2, [r7, #4]
 801364e:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 8013650:	68b9      	ldr	r1, [r7, #8]
 8013652:	68f8      	ldr	r0, [r7, #12]
 8013654:	f7ff fefd 	bl	8013452 <_ZNK6tflite12RuntimeShape4DimsEi>
 8013658:	4604      	mov	r4, r0
 801365a:	6839      	ldr	r1, [r7, #0]
 801365c:	6878      	ldr	r0, [r7, #4]
 801365e:	f7ff fef8 	bl	8013452 <_ZNK6tflite12RuntimeShape4DimsEi>
 8013662:	4603      	mov	r3, r0
 8013664:	429c      	cmp	r4, r3
 8013666:	d001      	beq.n	801366c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i+0x2a>
 8013668:	f013 fb49 	bl	8026cfe <abort>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
 801366c:	68b9      	ldr	r1, [r7, #8]
 801366e:	68f8      	ldr	r0, [r7, #12]
 8013670:	f7ff feef 	bl	8013452 <_ZNK6tflite12RuntimeShape4DimsEi>
 8013674:	4603      	mov	r3, r0
 8013676:	613b      	str	r3, [r7, #16]
 8013678:	6839      	ldr	r1, [r7, #0]
 801367a:	6878      	ldr	r0, [r7, #4]
 801367c:	f7ff fee9 	bl	8013452 <_ZNK6tflite12RuntimeShape4DimsEi>
 8013680:	4603      	mov	r3, r0
 8013682:	617b      	str	r3, [r7, #20]
 8013684:	f107 0214 	add.w	r2, r7, #20
 8013688:	f107 0310 	add.w	r3, r7, #16
 801368c:	4611      	mov	r1, r2
 801368e:	4618      	mov	r0, r3
 8013690:	f7f9 ff80 	bl	800d594 <_ZSt3minIlERKT_S2_S2_>
 8013694:	4603      	mov	r3, r0
 8013696:	681b      	ldr	r3, [r3, #0]
}
 8013698:	4618      	mov	r0, r3
 801369a:	371c      	adds	r7, #28
 801369c:	46bd      	mov	sp, r7
 801369e:	bd90      	pop	{r4, r7, pc}

080136a0 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 80136a0:	b480      	push	{r7}
 80136a2:	b083      	sub	sp, #12
 80136a4:	af00      	add	r7, sp, #0
 80136a6:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	2b00      	cmp	r3, #0
 80136ac:	d002      	beq.n	80136b4 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor+0x14>
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	681b      	ldr	r3, [r3, #0]
 80136b2:	e000      	b.n	80136b6 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor+0x16>
 80136b4:	2300      	movs	r3, #0
}
 80136b6:	4618      	mov	r0, r3
 80136b8:	370c      	adds	r7, #12
 80136ba:	46bd      	mov	sp, r7
 80136bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136c0:	4770      	bx	lr
	...

080136c4 <_ZNSt14numeric_limitsIfE3maxEv>:

      static _GLIBCXX_CONSTEXPR float
      min() _GLIBCXX_USE_NOEXCEPT { return __FLT_MIN__; }

      static _GLIBCXX_CONSTEXPR float
      max() _GLIBCXX_USE_NOEXCEPT { return __FLT_MAX__; }
 80136c4:	b480      	push	{r7}
 80136c6:	af00      	add	r7, sp, #0
 80136c8:	4b04      	ldr	r3, [pc, #16]	; (80136dc <_ZNSt14numeric_limitsIfE3maxEv+0x18>)
 80136ca:	ee07 3a90 	vmov	s15, r3
 80136ce:	eeb0 0a67 	vmov.f32	s0, s15
 80136d2:	46bd      	mov	sp, r7
 80136d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136d8:	4770      	bx	lr
 80136da:	bf00      	nop
 80136dc:	7f7fffff 	.word	0x7f7fffff

080136e0 <_ZNSt14numeric_limitsIfE6lowestEv>:

#if __cplusplus >= 201103L
      static constexpr float
      lowest() noexcept { return -__FLT_MAX__; }
 80136e0:	b480      	push	{r7}
 80136e2:	af00      	add	r7, sp, #0
 80136e4:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 80136e8:	ee07 3a90 	vmov	s15, r3
 80136ec:	eeb0 0a67 	vmov.f32	s0, s15
 80136f0:	46bd      	mov	sp, r7
 80136f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136f6:	4770      	bx	lr

080136f8 <_ZN6tflite24ComputePaddingWithOffsetEiiiiiPi>:

// It's not guaranteed that padding is symmetric. It's important to keep
// offset for algorithms need all paddings.
inline int ComputePaddingWithOffset(int stride, int dilation_rate, int in_size,
                                    int filter_size, int out_size,
                                    int* offset) {
 80136f8:	b480      	push	{r7}
 80136fa:	b087      	sub	sp, #28
 80136fc:	af00      	add	r7, sp, #0
 80136fe:	60f8      	str	r0, [r7, #12]
 8013700:	60b9      	str	r1, [r7, #8]
 8013702:	607a      	str	r2, [r7, #4]
 8013704:	603b      	str	r3, [r7, #0]
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 8013706:	683b      	ldr	r3, [r7, #0]
 8013708:	3b01      	subs	r3, #1
 801370a:	68ba      	ldr	r2, [r7, #8]
 801370c:	fb02 f303 	mul.w	r3, r2, r3
 8013710:	3301      	adds	r3, #1
 8013712:	617b      	str	r3, [r7, #20]
  int total_padding =
      ((out_size - 1) * stride + effective_filter_size - in_size);
 8013714:	6a3b      	ldr	r3, [r7, #32]
 8013716:	3b01      	subs	r3, #1
 8013718:	68fa      	ldr	r2, [r7, #12]
 801371a:	fb02 f203 	mul.w	r2, r2, r3
 801371e:	697b      	ldr	r3, [r7, #20]
 8013720:	441a      	add	r2, r3
  int total_padding =
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	1ad3      	subs	r3, r2, r3
 8013726:	613b      	str	r3, [r7, #16]
  total_padding = total_padding > 0 ? total_padding : 0;
 8013728:	693b      	ldr	r3, [r7, #16]
 801372a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801372e:	613b      	str	r3, [r7, #16]
  *offset = total_padding % 2;
 8013730:	693b      	ldr	r3, [r7, #16]
 8013732:	2b00      	cmp	r3, #0
 8013734:	f003 0301 	and.w	r3, r3, #1
 8013738:	bfb8      	it	lt
 801373a:	425b      	neglt	r3, r3
 801373c:	461a      	mov	r2, r3
 801373e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013740:	601a      	str	r2, [r3, #0]
  return total_padding / 2;
 8013742:	693b      	ldr	r3, [r7, #16]
 8013744:	0fda      	lsrs	r2, r3, #31
 8013746:	4413      	add	r3, r2
 8013748:	105b      	asrs	r3, r3, #1
}
 801374a:	4618      	mov	r0, r3
 801374c:	371c      	adds	r7, #28
 801374e:	46bd      	mov	sp, r7
 8013750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013754:	4770      	bx	lr

08013756 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>:

// Matching GetWindowedOutputSize in TensorFlow.
inline int ComputeOutSize(TfLitePadding padding, int image_size,
                          int filter_size, int stride, int dilation_rate = 1) {
 8013756:	b480      	push	{r7}
 8013758:	b087      	sub	sp, #28
 801375a:	af00      	add	r7, sp, #0
 801375c:	60b9      	str	r1, [r7, #8]
 801375e:	607a      	str	r2, [r7, #4]
 8013760:	603b      	str	r3, [r7, #0]
 8013762:	4603      	mov	r3, r0
 8013764:	73fb      	strb	r3, [r7, #15]
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 8013766:	687b      	ldr	r3, [r7, #4]
 8013768:	3b01      	subs	r3, #1
 801376a:	6a3a      	ldr	r2, [r7, #32]
 801376c:	fb02 f303 	mul.w	r3, r2, r3
 8013770:	3301      	adds	r3, #1
 8013772:	617b      	str	r3, [r7, #20]

  // TODO(b/186448822): This uses 0 since the function has no other way to
  // report error case
  if (stride == 0) return 0;
 8013774:	683b      	ldr	r3, [r7, #0]
 8013776:	2b00      	cmp	r3, #0
 8013778:	d101      	bne.n	801377e <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x28>
 801377a:	2300      	movs	r3, #0
 801377c:	e017      	b.n	80137ae <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x58>

  switch (padding) {
 801377e:	7bfb      	ldrb	r3, [r7, #15]
 8013780:	2b01      	cmp	r3, #1
 8013782:	d002      	beq.n	801378a <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x34>
 8013784:	2b02      	cmp	r3, #2
 8013786:	d008      	beq.n	801379a <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x44>
 8013788:	e010      	b.n	80137ac <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x56>
    case kTfLitePaddingSame:
      return (image_size + stride - 1) / stride;
 801378a:	68ba      	ldr	r2, [r7, #8]
 801378c:	683b      	ldr	r3, [r7, #0]
 801378e:	4413      	add	r3, r2
 8013790:	1e5a      	subs	r2, r3, #1
 8013792:	683b      	ldr	r3, [r7, #0]
 8013794:	fb92 f3f3 	sdiv	r3, r2, r3
 8013798:	e009      	b.n	80137ae <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x58>
    case kTfLitePaddingValid:
      return (image_size + stride - effective_filter_size) / stride;
 801379a:	68ba      	ldr	r2, [r7, #8]
 801379c:	683b      	ldr	r3, [r7, #0]
 801379e:	441a      	add	r2, r3
 80137a0:	697b      	ldr	r3, [r7, #20]
 80137a2:	1ad2      	subs	r2, r2, r3
 80137a4:	683b      	ldr	r3, [r7, #0]
 80137a6:	fb92 f3f3 	sdiv	r3, r2, r3
 80137aa:	e000      	b.n	80137ae <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x58>
    default:
      return 0;
 80137ac:	2300      	movs	r3, #0
  }
}
 80137ae:	4618      	mov	r0, r3
 80137b0:	371c      	adds	r7, #28
 80137b2:	46bd      	mov	sp, r7
 80137b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137b8:	4770      	bx	lr

080137ba <_ZN6tflite25ComputePaddingHeightWidthEiiiiiiii13TfLitePaddingPiS1_>:

inline TfLitePaddingValues ComputePaddingHeightWidth(
    int stride_height, int stride_width, int dilation_rate_height,
    int dilation_rate_width, int in_height, int in_width, int filter_height,
    int filter_width, TfLitePadding padding, int* out_height, int* out_width) {
 80137ba:	b580      	push	{r7, lr}
 80137bc:	b088      	sub	sp, #32
 80137be:	af02      	add	r7, sp, #8
 80137c0:	60f8      	str	r0, [r7, #12]
 80137c2:	60b9      	str	r1, [r7, #8]
 80137c4:	607a      	str	r2, [r7, #4]
 80137c6:	603b      	str	r3, [r7, #0]
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
 80137c8:	f897 0034 	ldrb.w	r0, [r7, #52]	; 0x34
 80137cc:	6a3b      	ldr	r3, [r7, #32]
 80137ce:	9300      	str	r3, [sp, #0]
 80137d0:	687b      	ldr	r3, [r7, #4]
 80137d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80137d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80137d6:	f7ff ffbe 	bl	8013756 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
 80137da:	4602      	mov	r2, r0
 80137dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80137de:	601a      	str	r2, [r3, #0]
                              dilation_rate_width);
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
 80137e0:	f897 0034 	ldrb.w	r0, [r7, #52]	; 0x34
 80137e4:	683b      	ldr	r3, [r7, #0]
 80137e6:	9300      	str	r3, [sp, #0]
 80137e8:	68bb      	ldr	r3, [r7, #8]
 80137ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80137ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80137ee:	f7ff ffb2 	bl	8013756 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
 80137f2:	4602      	mov	r2, r0
 80137f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137f6:	601a      	str	r2, [r3, #0]
                               dilation_rate_height);

  TfLitePaddingValues padding_values;
  int offset = 0;
 80137f8:	2300      	movs	r3, #0
 80137fa:	617b      	str	r3, [r7, #20]
  padding_values.height =
      ComputePaddingWithOffset(stride_height, dilation_rate_height, in_height,
 80137fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137fe:	681b      	ldr	r3, [r3, #0]
 8013800:	f107 0214 	add.w	r2, r7, #20
 8013804:	9201      	str	r2, [sp, #4]
 8013806:	9300      	str	r3, [sp, #0]
 8013808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801380a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801380c:	6839      	ldr	r1, [r7, #0]
 801380e:	68b8      	ldr	r0, [r7, #8]
 8013810:	f7ff ff72 	bl	80136f8 <_ZN6tflite24ComputePaddingWithOffsetEiiiiiPi>
 8013814:	4602      	mov	r2, r0
  padding_values.height =
 8013816:	68fb      	ldr	r3, [r7, #12]
 8013818:	605a      	str	r2, [r3, #4]
                               filter_height, *out_height, &offset);
  padding_values.height_offset = offset;
 801381a:	697a      	ldr	r2, [r7, #20]
 801381c:	68fb      	ldr	r3, [r7, #12]
 801381e:	60da      	str	r2, [r3, #12]
  padding_values.width =
      ComputePaddingWithOffset(stride_width, dilation_rate_width, in_width,
 8013820:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013822:	681b      	ldr	r3, [r3, #0]
 8013824:	f107 0214 	add.w	r2, r7, #20
 8013828:	9201      	str	r2, [sp, #4]
 801382a:	9300      	str	r3, [sp, #0]
 801382c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801382e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013830:	6a39      	ldr	r1, [r7, #32]
 8013832:	6878      	ldr	r0, [r7, #4]
 8013834:	f7ff ff60 	bl	80136f8 <_ZN6tflite24ComputePaddingWithOffsetEiiiiiPi>
 8013838:	4602      	mov	r2, r0
  padding_values.width =
 801383a:	68fb      	ldr	r3, [r7, #12]
 801383c:	601a      	str	r2, [r3, #0]
                               filter_width, *out_width, &offset);
  padding_values.width_offset = offset;
 801383e:	697a      	ldr	r2, [r7, #20]
 8013840:	68fb      	ldr	r3, [r7, #12]
 8013842:	609a      	str	r2, [r3, #8]
  return padding_values;
 8013844:	bf00      	nop
}
 8013846:	68f8      	ldr	r0, [r7, #12]
 8013848:	3718      	adds	r7, #24
 801384a:	46bd      	mov	sp, r7
 801384c:	bd80      	pop	{r7, pc}

0801384e <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE>:
const int kConvQuantizedDimension = 0;

// Returns a ConvParams struct with all the parameters needed for a
// float computation.
ConvParams ConvParamsFloat(const TfLiteConvParams& params,
                           const OpDataConv& data) {
 801384e:	b580      	push	{r7, lr}
 8013850:	b084      	sub	sp, #16
 8013852:	af00      	add	r7, sp, #0
 8013854:	60f8      	str	r0, [r7, #12]
 8013856:	60b9      	str	r1, [r7, #8]
 8013858:	607a      	str	r2, [r7, #4]
  ConvParams op_params;
  CalculateActivationRange(params.activation, &op_params.float_activation_min,
 801385a:	68bb      	ldr	r3, [r7, #8]
 801385c:	7b18      	ldrb	r0, [r3, #12]
 801385e:	68fb      	ldr	r3, [r7, #12]
 8013860:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013864:	68fb      	ldr	r3, [r7, #12]
 8013866:	3330      	adds	r3, #48	; 0x30
 8013868:	4619      	mov	r1, r3
 801386a:	f000 f97f 	bl	8013b6c <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
                           &op_params.float_activation_max);
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
 801386e:	68bb      	ldr	r3, [r7, #8]
 8013870:	781b      	ldrb	r3, [r3, #0]
 8013872:	4618      	mov	r0, r3
 8013874:	f000 fbbd 	bl	8013ff2 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>
 8013878:	4603      	mov	r3, r0
 801387a:	461a      	mov	r2, r3
 801387c:	68fb      	ldr	r3, [r7, #12]
 801387e:	701a      	strb	r2, [r3, #0]
  op_params.padding_values.width = data.padding.width;
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	681b      	ldr	r3, [r3, #0]
 8013884:	b21a      	sxth	r2, r3
 8013886:	68fb      	ldr	r3, [r7, #12]
 8013888:	805a      	strh	r2, [r3, #2]
  op_params.padding_values.height = data.padding.height;
 801388a:	687b      	ldr	r3, [r7, #4]
 801388c:	685b      	ldr	r3, [r3, #4]
 801388e:	b21a      	sxth	r2, r3
 8013890:	68fb      	ldr	r3, [r7, #12]
 8013892:	809a      	strh	r2, [r3, #4]
  op_params.stride_width = params.stride_width;
 8013894:	68bb      	ldr	r3, [r7, #8]
 8013896:	685b      	ldr	r3, [r3, #4]
 8013898:	b21a      	sxth	r2, r3
 801389a:	68fb      	ldr	r3, [r7, #12]
 801389c:	815a      	strh	r2, [r3, #10]
  op_params.stride_height = params.stride_height;
 801389e:	68bb      	ldr	r3, [r7, #8]
 80138a0:	689b      	ldr	r3, [r3, #8]
 80138a2:	b21a      	sxth	r2, r3
 80138a4:	68fb      	ldr	r3, [r7, #12]
 80138a6:	819a      	strh	r2, [r3, #12]
  op_params.dilation_width_factor = params.dilation_width_factor;
 80138a8:	68bb      	ldr	r3, [r7, #8]
 80138aa:	691b      	ldr	r3, [r3, #16]
 80138ac:	b21a      	sxth	r2, r3
 80138ae:	68fb      	ldr	r3, [r7, #12]
 80138b0:	81da      	strh	r2, [r3, #14]
  op_params.dilation_height_factor = params.dilation_height_factor;
 80138b2:	68bb      	ldr	r3, [r7, #8]
 80138b4:	695b      	ldr	r3, [r3, #20]
 80138b6:	b21a      	sxth	r2, r3
 80138b8:	68fb      	ldr	r3, [r7, #12]
 80138ba:	821a      	strh	r2, [r3, #16]
  return op_params;
 80138bc:	bf00      	nop
}
 80138be:	68f8      	ldr	r0, [r7, #12]
 80138c0:	3710      	adds	r7, #16
 80138c2:	46bd      	mov	sp, r7
 80138c4:	bd80      	pop	{r7, pc}

080138c6 <_ZN6tflite19ConvParamsQuantizedERK16TfLiteConvParamsRKNS_10OpDataConvE>:

// Returns a ConvParams struct with all the parameters needed for a
// quantized computation.
ConvParams ConvParamsQuantized(const TfLiteConvParams& params,
                               const OpDataConv& data) {
 80138c6:	b580      	push	{r7, lr}
 80138c8:	b084      	sub	sp, #16
 80138ca:	af00      	add	r7, sp, #0
 80138cc:	60f8      	str	r0, [r7, #12]
 80138ce:	60b9      	str	r1, [r7, #8]
 80138d0:	607a      	str	r2, [r7, #4]
  ConvParams op_params;
  op_params.input_offset = -data.input_zero_point;
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	691b      	ldr	r3, [r3, #16]
 80138d6:	425a      	negs	r2, r3
 80138d8:	68fb      	ldr	r3, [r7, #12]
 80138da:	615a      	str	r2, [r3, #20]
  op_params.weights_offset = -data.filter_zero_point;
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	695b      	ldr	r3, [r3, #20]
 80138e0:	425a      	negs	r2, r3
 80138e2:	68fb      	ldr	r3, [r7, #12]
 80138e4:	619a      	str	r2, [r3, #24]
  op_params.output_offset = data.output_zero_point;
 80138e6:	687b      	ldr	r3, [r7, #4]
 80138e8:	699a      	ldr	r2, [r3, #24]
 80138ea:	68fb      	ldr	r3, [r7, #12]
 80138ec:	61da      	str	r2, [r3, #28]
  op_params.output_multiplier = data.output_multiplier;
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	69da      	ldr	r2, [r3, #28]
 80138f2:	68fb      	ldr	r3, [r7, #12]
 80138f4:	621a      	str	r2, [r3, #32]
  op_params.output_shift = -data.output_shift;
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	6a1b      	ldr	r3, [r3, #32]
 80138fa:	425a      	negs	r2, r3
 80138fc:	68fb      	ldr	r3, [r7, #12]
 80138fe:	625a      	str	r2, [r3, #36]	; 0x24
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
 8013900:	68bb      	ldr	r3, [r7, #8]
 8013902:	781b      	ldrb	r3, [r3, #0]
 8013904:	4618      	mov	r0, r3
 8013906:	f000 fb74 	bl	8013ff2 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>
 801390a:	4603      	mov	r3, r0
 801390c:	461a      	mov	r2, r3
 801390e:	68fb      	ldr	r3, [r7, #12]
 8013910:	701a      	strb	r2, [r3, #0]
  op_params.padding_values.height = data.padding.height;
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	685b      	ldr	r3, [r3, #4]
 8013916:	b21a      	sxth	r2, r3
 8013918:	68fb      	ldr	r3, [r7, #12]
 801391a:	809a      	strh	r2, [r3, #4]
  op_params.padding_values.width = data.padding.width;
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	681b      	ldr	r3, [r3, #0]
 8013920:	b21a      	sxth	r2, r3
 8013922:	68fb      	ldr	r3, [r7, #12]
 8013924:	805a      	strh	r2, [r3, #2]
  op_params.stride_height = params.stride_height;
 8013926:	68bb      	ldr	r3, [r7, #8]
 8013928:	689b      	ldr	r3, [r3, #8]
 801392a:	b21a      	sxth	r2, r3
 801392c:	68fb      	ldr	r3, [r7, #12]
 801392e:	819a      	strh	r2, [r3, #12]
  op_params.stride_width = params.stride_width;
 8013930:	68bb      	ldr	r3, [r7, #8]
 8013932:	685b      	ldr	r3, [r3, #4]
 8013934:	b21a      	sxth	r2, r3
 8013936:	68fb      	ldr	r3, [r7, #12]
 8013938:	815a      	strh	r2, [r3, #10]
  op_params.dilation_height_factor = params.dilation_height_factor;
 801393a:	68bb      	ldr	r3, [r7, #8]
 801393c:	695b      	ldr	r3, [r3, #20]
 801393e:	b21a      	sxth	r2, r3
 8013940:	68fb      	ldr	r3, [r7, #12]
 8013942:	821a      	strh	r2, [r3, #16]
  op_params.dilation_width_factor = params.dilation_width_factor;
 8013944:	68bb      	ldr	r3, [r7, #8]
 8013946:	691b      	ldr	r3, [r3, #16]
 8013948:	b21a      	sxth	r2, r3
 801394a:	68fb      	ldr	r3, [r7, #12]
 801394c:	81da      	strh	r2, [r3, #14]
  op_params.quantized_activation_min = data.output_activation_min;
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013952:	68fb      	ldr	r3, [r7, #12]
 8013954:	629a      	str	r2, [r3, #40]	; 0x28
  op_params.quantized_activation_max = data.output_activation_max;
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801395a:	68fb      	ldr	r3, [r7, #12]
 801395c:	62da      	str	r2, [r3, #44]	; 0x2c
  return op_params;
 801395e:	bf00      	nop
}
 8013960:	68f8      	ldr	r0, [r7, #12]
 8013962:	3710      	adds	r7, #16
 8013964:	46bd      	mov	sp, r7
 8013966:	bd80      	pop	{r7, pc}

08013968 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>:
TfLiteStatus CalculateOpDataConv(TfLiteContext* context, TfLiteNode* node,
                                 const TfLiteConvParams& params, int width,
                                 int height, int filter_width,
                                 int filter_height, int out_width,
                                 int out_height, const TfLiteType data_type,
                                 OpDataConv* data) {
 8013968:	b5f0      	push	{r4, r5, r6, r7, lr}
 801396a:	b09d      	sub	sp, #116	; 0x74
 801396c:	af0a      	add	r7, sp, #40	; 0x28
 801396e:	6278      	str	r0, [r7, #36]	; 0x24
 8013970:	6239      	str	r1, [r7, #32]
 8013972:	61fa      	str	r2, [r7, #28]
 8013974:	61bb      	str	r3, [r7, #24]
  bool has_bias = node->inputs->size == 3;
 8013976:	6a3b      	ldr	r3, [r7, #32]
 8013978:	681b      	ldr	r3, [r3, #0]
 801397a:	681b      	ldr	r3, [r3, #0]
 801397c:	2b03      	cmp	r3, #3
 801397e:	bf0c      	ite	eq
 8013980:	2301      	moveq	r3, #1
 8013982:	2300      	movne	r3, #0
 8013984:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  // Check number of inputs/outputs
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
 8013988:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801398c:	f083 0301 	eor.w	r3, r3, #1
 8013990:	b2db      	uxtb	r3, r3
 8013992:	2b00      	cmp	r3, #0
 8013994:	d00f      	beq.n	80139b6 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
 8013996:	6a3b      	ldr	r3, [r7, #32]
 8013998:	681b      	ldr	r3, [r3, #0]
 801399a:	681b      	ldr	r3, [r3, #0]
 801399c:	2b02      	cmp	r3, #2
 801399e:	d00a      	beq.n	80139b6 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
 80139a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139a2:	695c      	ldr	r4, [r3, #20]
 80139a4:	4b68      	ldr	r3, [pc, #416]	; (8013b48 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e0>)
 80139a6:	9300      	str	r3, [sp, #0]
 80139a8:	2356      	movs	r3, #86	; 0x56
 80139aa:	4a68      	ldr	r2, [pc, #416]	; (8013b4c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e4>)
 80139ac:	4968      	ldr	r1, [pc, #416]	; (8013b50 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e8>)
 80139ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80139b0:	47a0      	blx	r4
 80139b2:	2301      	movs	r3, #1
 80139b4:	e0c4      	b.n	8013b40 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1d8>
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
 80139b6:	6a3b      	ldr	r3, [r7, #32]
 80139b8:	685b      	ldr	r3, [r3, #4]
 80139ba:	681b      	ldr	r3, [r3, #0]
 80139bc:	2b01      	cmp	r3, #1
 80139be:	d012      	beq.n	80139e6 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x7e>
 80139c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139c2:	695c      	ldr	r4, [r3, #20]
 80139c4:	6a3b      	ldr	r3, [r7, #32]
 80139c6:	685b      	ldr	r3, [r3, #4]
 80139c8:	681b      	ldr	r3, [r3, #0]
 80139ca:	2201      	movs	r2, #1
 80139cc:	9203      	str	r2, [sp, #12]
 80139ce:	9302      	str	r3, [sp, #8]
 80139d0:	4b60      	ldr	r3, [pc, #384]	; (8013b54 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1ec>)
 80139d2:	9301      	str	r3, [sp, #4]
 80139d4:	4b60      	ldr	r3, [pc, #384]	; (8013b58 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f0>)
 80139d6:	9300      	str	r3, [sp, #0]
 80139d8:	2357      	movs	r3, #87	; 0x57
 80139da:	4a5c      	ldr	r2, [pc, #368]	; (8013b4c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e4>)
 80139dc:	495f      	ldr	r1, [pc, #380]	; (8013b5c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f4>)
 80139de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80139e0:	47a0      	blx	r4
 80139e2:	2301      	movs	r3, #1
 80139e4:	e0ac      	b.n	8013b40 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1d8>

  // Matching GetWindowedOutputSize in TensorFlow.
  auto padding = params.padding;
 80139e6:	69fb      	ldr	r3, [r7, #28]
 80139e8:	781b      	ldrb	r3, [r3, #0]
 80139ea:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  data->padding = ComputePaddingHeightWidth(
      params.stride_height, params.stride_width, params.dilation_height_factor,
 80139ee:	69fb      	ldr	r3, [r7, #28]
 80139f0:	6899      	ldr	r1, [r3, #8]
 80139f2:	69fb      	ldr	r3, [r7, #28]
 80139f4:	685c      	ldr	r4, [r3, #4]
 80139f6:	69fb      	ldr	r3, [r7, #28]
 80139f8:	695d      	ldr	r5, [r3, #20]
      params.dilation_width_factor, height, width, filter_height, filter_width,
 80139fa:	69fb      	ldr	r3, [r7, #28]
 80139fc:	691b      	ldr	r3, [r3, #16]
      padding, &out_height, &out_width);
 80139fe:	6fbe      	ldr	r6, [r7, #120]	; 0x78
 8013a00:	f107 0008 	add.w	r0, r7, #8
 8013a04:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8013a08:	9207      	str	r2, [sp, #28]
 8013a0a:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8013a0e:	9206      	str	r2, [sp, #24]
 8013a10:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8013a14:	9205      	str	r2, [sp, #20]
 8013a16:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8013a18:	9204      	str	r2, [sp, #16]
 8013a1a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8013a1c:	9203      	str	r2, [sp, #12]
 8013a1e:	69ba      	ldr	r2, [r7, #24]
 8013a20:	9202      	str	r2, [sp, #8]
 8013a22:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013a24:	9201      	str	r2, [sp, #4]
 8013a26:	9300      	str	r3, [sp, #0]
 8013a28:	462b      	mov	r3, r5
 8013a2a:	4622      	mov	r2, r4
 8013a2c:	f7ff fec5 	bl	80137ba <_ZN6tflite25ComputePaddingHeightWidthEiiiiiiii13TfLitePaddingPiS1_>
 8013a30:	4634      	mov	r4, r6
 8013a32:	f107 0308 	add.w	r3, r7, #8
 8013a36:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013a38:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  const TfLiteTensor* input = GetInput(context, node, kConvInputTensor);
 8013a3c:	2200      	movs	r2, #0
 8013a3e:	6a39      	ldr	r1, [r7, #32]
 8013a40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013a42:	f7fa f843 	bl	800dacc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8013a46:	6438      	str	r0, [r7, #64]	; 0x40
  TF_LITE_ENSURE(context, input != nullptr);
 8013a48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	d10a      	bne.n	8013a64 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xfc>
 8013a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a50:	695c      	ldr	r4, [r3, #20]
 8013a52:	4b43      	ldr	r3, [pc, #268]	; (8013b60 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f8>)
 8013a54:	9300      	str	r3, [sp, #0]
 8013a56:	2361      	movs	r3, #97	; 0x61
 8013a58:	4a3c      	ldr	r2, [pc, #240]	; (8013b4c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e4>)
 8013a5a:	493d      	ldr	r1, [pc, #244]	; (8013b50 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e8>)
 8013a5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013a5e:	47a0      	blx	r4
 8013a60:	2301      	movs	r3, #1
 8013a62:	e06d      	b.n	8013b40 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1d8>
  const TfLiteTensor* filter = GetInput(context, node, kConvWeightsTensor);
 8013a64:	2201      	movs	r2, #1
 8013a66:	6a39      	ldr	r1, [r7, #32]
 8013a68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013a6a:	f7fa f82f 	bl	800dacc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8013a6e:	63f8      	str	r0, [r7, #60]	; 0x3c
  TF_LITE_ENSURE(context, filter != nullptr);
 8013a70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a72:	2b00      	cmp	r3, #0
 8013a74:	d10a      	bne.n	8013a8c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x124>
 8013a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a78:	695c      	ldr	r4, [r3, #20]
 8013a7a:	4b3a      	ldr	r3, [pc, #232]	; (8013b64 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1fc>)
 8013a7c:	9300      	str	r3, [sp, #0]
 8013a7e:	2363      	movs	r3, #99	; 0x63
 8013a80:	4a32      	ldr	r2, [pc, #200]	; (8013b4c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e4>)
 8013a82:	4933      	ldr	r1, [pc, #204]	; (8013b50 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e8>)
 8013a84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013a86:	47a0      	blx	r4
 8013a88:	2301      	movs	r3, #1
 8013a8a:	e059      	b.n	8013b40 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1d8>
  const TfLiteTensor* bias =
      GetOptionalInputTensor(context, node, kConvBiasTensor);
 8013a8c:	2202      	movs	r2, #2
 8013a8e:	6a39      	ldr	r1, [r7, #32]
 8013a90:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013a92:	f7fa f84b 	bl	800db2c <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
 8013a96:	63b8      	str	r0, [r7, #56]	; 0x38
  TfLiteTensor* output = GetOutput(context, node, kConvOutputTensor);
 8013a98:	2200      	movs	r2, #0
 8013a9a:	6a39      	ldr	r1, [r7, #32]
 8013a9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013a9e:	f7fa f825 	bl	800daec <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 8013aa2:	6378      	str	r0, [r7, #52]	; 0x34
  TF_LITE_ENSURE(context, output != nullptr);
 8013aa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013aa6:	2b00      	cmp	r3, #0
 8013aa8:	d10a      	bne.n	8013ac0 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x158>
 8013aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013aac:	695c      	ldr	r4, [r3, #20]
 8013aae:	4b2e      	ldr	r3, [pc, #184]	; (8013b68 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x200>)
 8013ab0:	9300      	str	r3, [sp, #0]
 8013ab2:	2367      	movs	r3, #103	; 0x67
 8013ab4:	4a25      	ldr	r2, [pc, #148]	; (8013b4c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e4>)
 8013ab6:	4926      	ldr	r1, [pc, #152]	; (8013b50 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e8>)
 8013ab8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013aba:	47a0      	blx	r4
 8013abc:	2301      	movs	r3, #1
 8013abe:	e03f      	b.n	8013b40 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1d8>

  // Note that quantized inference requires that all tensors have their
  // parameters set. This is usually done during quantized training.
  if (data_type != kTfLiteFloat32) {
 8013ac0:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8013ac4:	2b01      	cmp	r3, #1
 8013ac6:	d02e      	beq.n	8013b26 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1be>
    int output_channels = filter->dims->data[kConvQuantizedDimension];
 8013ac8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013aca:	689b      	ldr	r3, [r3, #8]
 8013acc:	685b      	ldr	r3, [r3, #4]
 8013ace:	633b      	str	r3, [r7, #48]	; 0x30

    TF_LITE_ENSURE_STATUS(tflite::PopulateConvolutionQuantizationParams(
 8013ad0:	69fb      	ldr	r3, [r7, #28]
 8013ad2:	330c      	adds	r3, #12
 8013ad4:	607b      	str	r3, [r7, #4]
 8013ad6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8013ad8:	321c      	adds	r2, #28
 8013ada:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8013adc:	3120      	adds	r1, #32
 8013ade:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8013ae0:	302c      	adds	r0, #44	; 0x2c
 8013ae2:	6fbc      	ldr	r4, [r7, #120]	; 0x78
 8013ae4:	3430      	adds	r4, #48	; 0x30
 8013ae6:	6fbd      	ldr	r5, [r7, #120]	; 0x78
 8013ae8:	6a6d      	ldr	r5, [r5, #36]	; 0x24
 8013aea:	6fbe      	ldr	r6, [r7, #120]	; 0x78
 8013aec:	6ab6      	ldr	r6, [r6, #40]	; 0x28
 8013aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013af0:	9308      	str	r3, [sp, #32]
 8013af2:	9607      	str	r6, [sp, #28]
 8013af4:	9506      	str	r5, [sp, #24]
 8013af6:	9405      	str	r4, [sp, #20]
 8013af8:	9004      	str	r0, [sp, #16]
 8013afa:	9103      	str	r1, [sp, #12]
 8013afc:	9202      	str	r2, [sp, #8]
 8013afe:	687b      	ldr	r3, [r7, #4]
 8013b00:	9301      	str	r3, [sp, #4]
 8013b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b04:	9300      	str	r3, [sp, #0]
 8013b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b08:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013b0a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013b0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013b0e:	f7fa f81d 	bl	800db4c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i>
 8013b12:	4603      	mov	r3, r0
 8013b14:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8013b18:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013b1c:	2b00      	cmp	r3, #0
 8013b1e:	d002      	beq.n	8013b26 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1be>
 8013b20:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013b24:	e00c      	b.n	8013b40 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1d8>
        &data->output_activation_min, &data->output_activation_max,
        data->per_channel_output_multiplier, data->per_channel_output_shift,
        output_channels));
  }

  data->input_zero_point = input->params.zero_point;
 8013b26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013b28:	691a      	ldr	r2, [r3, #16]
 8013b2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013b2c:	611a      	str	r2, [r3, #16]
  data->filter_zero_point = filter->params.zero_point;
 8013b2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013b30:	691a      	ldr	r2, [r3, #16]
 8013b32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013b34:	615a      	str	r2, [r3, #20]
  data->output_zero_point = output->params.zero_point;
 8013b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b38:	691a      	ldr	r2, [r3, #16]
 8013b3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013b3c:	619a      	str	r2, [r3, #24]

  return kTfLiteOk;
 8013b3e:	2300      	movs	r3, #0
}
 8013b40:	4618      	mov	r0, r3
 8013b42:	374c      	adds	r7, #76	; 0x4c
 8013b44:	46bd      	mov	sp, r7
 8013b46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013b48:	0802cdcc 	.word	0x0802cdcc
 8013b4c:	0802cd74 	.word	0x0802cd74
 8013b50:	0802cdb4 	.word	0x0802cdb4
 8013b54:	0802ce0c 	.word	0x0802ce0c
 8013b58:	0802ce10 	.word	0x0802ce10
 8013b5c:	0802cdf0 	.word	0x0802cdf0
 8013b60:	0802ce24 	.word	0x0802ce24
 8013b64:	0802ce38 	.word	0x0802ce38
 8013b68:	0802ce4c 	.word	0x0802ce4c

08013b6c <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>:
                                               int32_t* act_max);

// Calculates the useful range of an activation layer given its activation
// tensor.a
template <typename T>
void CalculateActivationRange(TfLiteFusedActivation activation,
 8013b6c:	b580      	push	{r7, lr}
 8013b6e:	b084      	sub	sp, #16
 8013b70:	af00      	add	r7, sp, #0
 8013b72:	4603      	mov	r3, r0
 8013b74:	60b9      	str	r1, [r7, #8]
 8013b76:	607a      	str	r2, [r7, #4]
 8013b78:	73fb      	strb	r3, [r7, #15]
                              T* activation_min, T* activation_max) {
  if (activation == kTfLiteActRelu) {
 8013b7a:	7bfb      	ldrb	r3, [r7, #15]
 8013b7c:	2b01      	cmp	r3, #1
 8013b7e:	d10b      	bne.n	8013b98 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x2c>
    *activation_min = 0;
 8013b80:	68bb      	ldr	r3, [r7, #8]
 8013b82:	f04f 0200 	mov.w	r2, #0
 8013b86:	601a      	str	r2, [r3, #0]
    *activation_max = std::numeric_limits<T>::max();
 8013b88:	f7ff fd9c 	bl	80136c4 <_ZNSt14numeric_limitsIfE3maxEv>
 8013b8c:	eef0 7a40 	vmov.f32	s15, s0
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	edc3 7a00 	vstr	s15, [r3]
    *activation_max = 1;
  } else {
    *activation_min = std::numeric_limits<T>::lowest();
    *activation_max = std::numeric_limits<T>::max();
  }
}
 8013b96:	e023      	b.n	8013be0 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
  } else if (activation == kTfLiteActRelu6) {
 8013b98:	7bfb      	ldrb	r3, [r7, #15]
 8013b9a:	2b03      	cmp	r3, #3
 8013b9c:	d107      	bne.n	8013bae <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x42>
    *activation_min = 0;
 8013b9e:	68bb      	ldr	r3, [r7, #8]
 8013ba0:	f04f 0200 	mov.w	r2, #0
 8013ba4:	601a      	str	r2, [r3, #0]
    *activation_max = 6;
 8013ba6:	687b      	ldr	r3, [r7, #4]
 8013ba8:	4a0f      	ldr	r2, [pc, #60]	; (8013be8 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x7c>)
 8013baa:	601a      	str	r2, [r3, #0]
}
 8013bac:	e018      	b.n	8013be0 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
  } else if (activation == kTfLiteActReluN1To1) {
 8013bae:	7bfb      	ldrb	r3, [r7, #15]
 8013bb0:	2b02      	cmp	r3, #2
 8013bb2:	d107      	bne.n	8013bc4 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x58>
    *activation_min = -1;
 8013bb4:	68bb      	ldr	r3, [r7, #8]
 8013bb6:	4a0d      	ldr	r2, [pc, #52]	; (8013bec <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x80>)
 8013bb8:	601a      	str	r2, [r3, #0]
    *activation_max = 1;
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8013bc0:	601a      	str	r2, [r3, #0]
}
 8013bc2:	e00d      	b.n	8013be0 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
    *activation_min = std::numeric_limits<T>::lowest();
 8013bc4:	f7ff fd8c 	bl	80136e0 <_ZNSt14numeric_limitsIfE6lowestEv>
 8013bc8:	eef0 7a40 	vmov.f32	s15, s0
 8013bcc:	68bb      	ldr	r3, [r7, #8]
 8013bce:	edc3 7a00 	vstr	s15, [r3]
    *activation_max = std::numeric_limits<T>::max();
 8013bd2:	f7ff fd77 	bl	80136c4 <_ZNSt14numeric_limitsIfE3maxEv>
 8013bd6:	eef0 7a40 	vmov.f32	s15, s0
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	edc3 7a00 	vstr	s15, [r3]
}
 8013be0:	bf00      	nop
 8013be2:	3710      	adds	r7, #16
 8013be4:	46bd      	mov	sp, r7
 8013be6:	bd80      	pop	{r7, pc}
 8013be8:	40c00000 	.word	0x40c00000
 8013bec:	bf800000 	.word	0xbf800000

08013bf0 <_ZN6tflite11NumElementsEPK12TfLiteTensor>:
inline int64_t NumElements(const TfLiteTensor* t) {
 8013bf0:	b580      	push	{r7, lr}
 8013bf2:	b082      	sub	sp, #8
 8013bf4:	af00      	add	r7, sp, #0
 8013bf6:	6078      	str	r0, [r7, #4]
  return NumElements(t->dims);
 8013bf8:	687b      	ldr	r3, [r7, #4]
 8013bfa:	689b      	ldr	r3, [r3, #8]
 8013bfc:	4618      	mov	r0, r3
 8013bfe:	f7ff f843 	bl	8012c88 <_ZN6tflite11NumElementsEPK14TfLiteIntArray>
 8013c02:	4602      	mov	r2, r0
 8013c04:	460b      	mov	r3, r1
}
 8013c06:	4610      	mov	r0, r2
 8013c08:	4619      	mov	r1, r3
 8013c0a:	3708      	adds	r7, #8
 8013c0c:	46bd      	mov	sp, r7
 8013c0e:	bd80      	pop	{r7, pc}

08013c10 <_ZN6tflite24DepthwiseConvParamsFloatERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE>:
const int kDepthwiseConvQuantizedDimension = 3;

// Returns a DepthwiseParams struct with all the parameters needed for a
// float computation.
DepthwiseParams DepthwiseConvParamsFloat(
    const TfLiteDepthwiseConvParams& params, const OpDataConv& data) {
 8013c10:	b580      	push	{r7, lr}
 8013c12:	b084      	sub	sp, #16
 8013c14:	af00      	add	r7, sp, #0
 8013c16:	60f8      	str	r0, [r7, #12]
 8013c18:	60b9      	str	r1, [r7, #8]
 8013c1a:	607a      	str	r2, [r7, #4]
  DepthwiseParams op_params;
  CalculateActivationRange(params.activation, &op_params.float_activation_min,
 8013c1c:	68bb      	ldr	r3, [r7, #8]
 8013c1e:	7c18      	ldrb	r0, [r3, #16]
 8013c20:	68fb      	ldr	r3, [r7, #12]
 8013c22:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013c26:	68fb      	ldr	r3, [r7, #12]
 8013c28:	3330      	adds	r3, #48	; 0x30
 8013c2a:	4619      	mov	r1, r3
 8013c2c:	f7ff ff9e 	bl	8013b6c <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
                           &op_params.float_activation_max);
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
 8013c30:	68bb      	ldr	r3, [r7, #8]
 8013c32:	781b      	ldrb	r3, [r3, #0]
 8013c34:	4618      	mov	r0, r3
 8013c36:	f000 f9dc 	bl	8013ff2 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>
 8013c3a:	4603      	mov	r3, r0
 8013c3c:	461a      	mov	r2, r3
 8013c3e:	68fb      	ldr	r3, [r7, #12]
 8013c40:	701a      	strb	r2, [r3, #0]
  op_params.padding_values.width = data.padding.width;
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	681b      	ldr	r3, [r3, #0]
 8013c46:	b21a      	sxth	r2, r3
 8013c48:	68fb      	ldr	r3, [r7, #12]
 8013c4a:	805a      	strh	r2, [r3, #2]
  op_params.padding_values.height = data.padding.height;
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	685b      	ldr	r3, [r3, #4]
 8013c50:	b21a      	sxth	r2, r3
 8013c52:	68fb      	ldr	r3, [r7, #12]
 8013c54:	809a      	strh	r2, [r3, #4]
  op_params.stride_width = params.stride_width;
 8013c56:	68bb      	ldr	r3, [r7, #8]
 8013c58:	685b      	ldr	r3, [r3, #4]
 8013c5a:	b21a      	sxth	r2, r3
 8013c5c:	68fb      	ldr	r3, [r7, #12]
 8013c5e:	815a      	strh	r2, [r3, #10]
  op_params.stride_height = params.stride_height;
 8013c60:	68bb      	ldr	r3, [r7, #8]
 8013c62:	689b      	ldr	r3, [r3, #8]
 8013c64:	b21a      	sxth	r2, r3
 8013c66:	68fb      	ldr	r3, [r7, #12]
 8013c68:	819a      	strh	r2, [r3, #12]
  op_params.dilation_width_factor = params.dilation_width_factor;
 8013c6a:	68bb      	ldr	r3, [r7, #8]
 8013c6c:	695b      	ldr	r3, [r3, #20]
 8013c6e:	b21a      	sxth	r2, r3
 8013c70:	68fb      	ldr	r3, [r7, #12]
 8013c72:	81da      	strh	r2, [r3, #14]
  op_params.dilation_height_factor = params.dilation_height_factor;
 8013c74:	68bb      	ldr	r3, [r7, #8]
 8013c76:	699b      	ldr	r3, [r3, #24]
 8013c78:	b21a      	sxth	r2, r3
 8013c7a:	68fb      	ldr	r3, [r7, #12]
 8013c7c:	821a      	strh	r2, [r3, #16]
  op_params.depth_multiplier = params.depth_multiplier;
 8013c7e:	68bb      	ldr	r3, [r7, #8]
 8013c80:	68db      	ldr	r3, [r3, #12]
 8013c82:	b21a      	sxth	r2, r3
 8013c84:	68fb      	ldr	r3, [r7, #12]
 8013c86:	825a      	strh	r2, [r3, #18]
  return op_params;
 8013c88:	bf00      	nop
}
 8013c8a:	68f8      	ldr	r0, [r7, #12]
 8013c8c:	3710      	adds	r7, #16
 8013c8e:	46bd      	mov	sp, r7
 8013c90:	bd80      	pop	{r7, pc}

08013c92 <_ZN6tflite28DepthwiseConvParamsQuantizedERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE>:

// Returns a DepthwiseParams struct with all the parameters needed for a
// quantized computation.
DepthwiseParams DepthwiseConvParamsQuantized(
    const TfLiteDepthwiseConvParams& params, const OpDataConv& data) {
 8013c92:	b580      	push	{r7, lr}
 8013c94:	b084      	sub	sp, #16
 8013c96:	af00      	add	r7, sp, #0
 8013c98:	60f8      	str	r0, [r7, #12]
 8013c9a:	60b9      	str	r1, [r7, #8]
 8013c9c:	607a      	str	r2, [r7, #4]
  DepthwiseParams op_params;
  op_params.input_offset = -data.input_zero_point;
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	691b      	ldr	r3, [r3, #16]
 8013ca2:	425a      	negs	r2, r3
 8013ca4:	68fb      	ldr	r3, [r7, #12]
 8013ca6:	615a      	str	r2, [r3, #20]
  op_params.weights_offset = -data.filter_zero_point;
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	695b      	ldr	r3, [r3, #20]
 8013cac:	425a      	negs	r2, r3
 8013cae:	68fb      	ldr	r3, [r7, #12]
 8013cb0:	619a      	str	r2, [r3, #24]
  op_params.output_offset = data.output_zero_point;
 8013cb2:	687b      	ldr	r3, [r7, #4]
 8013cb4:	699a      	ldr	r2, [r3, #24]
 8013cb6:	68fb      	ldr	r3, [r7, #12]
 8013cb8:	61da      	str	r2, [r3, #28]
  op_params.output_multiplier = data.output_multiplier;
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	69da      	ldr	r2, [r3, #28]
 8013cbe:	68fb      	ldr	r3, [r7, #12]
 8013cc0:	621a      	str	r2, [r3, #32]
  op_params.output_shift = -data.output_shift;
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	6a1b      	ldr	r3, [r3, #32]
 8013cc6:	425a      	negs	r2, r3
 8013cc8:	68fb      	ldr	r3, [r7, #12]
 8013cca:	625a      	str	r2, [r3, #36]	; 0x24
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
 8013ccc:	68bb      	ldr	r3, [r7, #8]
 8013cce:	781b      	ldrb	r3, [r3, #0]
 8013cd0:	4618      	mov	r0, r3
 8013cd2:	f000 f98e 	bl	8013ff2 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>
 8013cd6:	4603      	mov	r3, r0
 8013cd8:	461a      	mov	r2, r3
 8013cda:	68fb      	ldr	r3, [r7, #12]
 8013cdc:	701a      	strb	r2, [r3, #0]
  op_params.padding_values.height = data.padding.height;
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	685b      	ldr	r3, [r3, #4]
 8013ce2:	b21a      	sxth	r2, r3
 8013ce4:	68fb      	ldr	r3, [r7, #12]
 8013ce6:	809a      	strh	r2, [r3, #4]
  op_params.padding_values.width = data.padding.width;
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	681b      	ldr	r3, [r3, #0]
 8013cec:	b21a      	sxth	r2, r3
 8013cee:	68fb      	ldr	r3, [r7, #12]
 8013cf0:	805a      	strh	r2, [r3, #2]
  op_params.stride_height = params.stride_height;
 8013cf2:	68bb      	ldr	r3, [r7, #8]
 8013cf4:	689b      	ldr	r3, [r3, #8]
 8013cf6:	b21a      	sxth	r2, r3
 8013cf8:	68fb      	ldr	r3, [r7, #12]
 8013cfa:	819a      	strh	r2, [r3, #12]
  op_params.stride_width = params.stride_width;
 8013cfc:	68bb      	ldr	r3, [r7, #8]
 8013cfe:	685b      	ldr	r3, [r3, #4]
 8013d00:	b21a      	sxth	r2, r3
 8013d02:	68fb      	ldr	r3, [r7, #12]
 8013d04:	815a      	strh	r2, [r3, #10]
  op_params.dilation_height_factor = params.dilation_height_factor;
 8013d06:	68bb      	ldr	r3, [r7, #8]
 8013d08:	699b      	ldr	r3, [r3, #24]
 8013d0a:	b21a      	sxth	r2, r3
 8013d0c:	68fb      	ldr	r3, [r7, #12]
 8013d0e:	821a      	strh	r2, [r3, #16]
  op_params.dilation_width_factor = params.dilation_width_factor;
 8013d10:	68bb      	ldr	r3, [r7, #8]
 8013d12:	695b      	ldr	r3, [r3, #20]
 8013d14:	b21a      	sxth	r2, r3
 8013d16:	68fb      	ldr	r3, [r7, #12]
 8013d18:	81da      	strh	r2, [r3, #14]
  op_params.depth_multiplier = params.depth_multiplier;
 8013d1a:	68bb      	ldr	r3, [r7, #8]
 8013d1c:	68db      	ldr	r3, [r3, #12]
 8013d1e:	b21a      	sxth	r2, r3
 8013d20:	68fb      	ldr	r3, [r7, #12]
 8013d22:	825a      	strh	r2, [r3, #18]
  op_params.quantized_activation_min = data.output_activation_min;
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d28:	68fb      	ldr	r3, [r7, #12]
 8013d2a:	629a      	str	r2, [r3, #40]	; 0x28
  op_params.quantized_activation_max = data.output_activation_max;
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013d30:	68fb      	ldr	r3, [r7, #12]
 8013d32:	62da      	str	r2, [r3, #44]	; 0x2c
  return op_params;
 8013d34:	bf00      	nop
}
 8013d36:	68f8      	ldr	r0, [r7, #12]
 8013d38:	3710      	adds	r7, #16
 8013d3a:	46bd      	mov	sp, r7
 8013d3c:	bd80      	pop	{r7, pc}
	...

08013d40 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>:

TfLiteStatus CalculateOpDataDepthwiseConv(
    TfLiteContext* context, TfLiteNode* node,
    const TfLiteDepthwiseConvParams& params, int width, int height,
    int filter_width, int filter_height, int out_width, int out_height,
    const TfLiteType data_type, OpDataConv* data) {
 8013d40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013d42:	b09d      	sub	sp, #116	; 0x74
 8013d44:	af0a      	add	r7, sp, #40	; 0x28
 8013d46:	6278      	str	r0, [r7, #36]	; 0x24
 8013d48:	6239      	str	r1, [r7, #32]
 8013d4a:	61fa      	str	r2, [r7, #28]
 8013d4c:	61bb      	str	r3, [r7, #24]
  bool has_bias = node->inputs->size == 3;
 8013d4e:	6a3b      	ldr	r3, [r7, #32]
 8013d50:	681b      	ldr	r3, [r3, #0]
 8013d52:	681b      	ldr	r3, [r3, #0]
 8013d54:	2b03      	cmp	r3, #3
 8013d56:	bf0c      	ite	eq
 8013d58:	2301      	moveq	r3, #1
 8013d5a:	2300      	movne	r3, #0
 8013d5c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  // Check number of inputs/outputs
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
 8013d60:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8013d64:	f083 0301 	eor.w	r3, r3, #1
 8013d68:	b2db      	uxtb	r3, r3
 8013d6a:	2b00      	cmp	r3, #0
 8013d6c:	d00f      	beq.n	8013d8e <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
 8013d6e:	6a3b      	ldr	r3, [r7, #32]
 8013d70:	681b      	ldr	r3, [r3, #0]
 8013d72:	681b      	ldr	r3, [r3, #0]
 8013d74:	2b02      	cmp	r3, #2
 8013d76:	d00a      	beq.n	8013d8e <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
 8013d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d7a:	695c      	ldr	r4, [r3, #20]
 8013d7c:	4b6c      	ldr	r3, [pc, #432]	; (8013f30 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f0>)
 8013d7e:	9300      	str	r3, [sp, #0]
 8013d80:	2357      	movs	r3, #87	; 0x57
 8013d82:	4a6c      	ldr	r2, [pc, #432]	; (8013f34 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f4>)
 8013d84:	496c      	ldr	r1, [pc, #432]	; (8013f38 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f8>)
 8013d86:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013d88:	47a0      	blx	r4
 8013d8a:	2301      	movs	r3, #1
 8013d8c:	e0cc      	b.n	8013f28 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e8>
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
 8013d8e:	6a3b      	ldr	r3, [r7, #32]
 8013d90:	685b      	ldr	r3, [r3, #4]
 8013d92:	681b      	ldr	r3, [r3, #0]
 8013d94:	2b01      	cmp	r3, #1
 8013d96:	d012      	beq.n	8013dbe <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x7e>
 8013d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d9a:	695c      	ldr	r4, [r3, #20]
 8013d9c:	6a3b      	ldr	r3, [r7, #32]
 8013d9e:	685b      	ldr	r3, [r3, #4]
 8013da0:	681b      	ldr	r3, [r3, #0]
 8013da2:	2201      	movs	r2, #1
 8013da4:	9203      	str	r2, [sp, #12]
 8013da6:	9302      	str	r3, [sp, #8]
 8013da8:	4b64      	ldr	r3, [pc, #400]	; (8013f3c <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1fc>)
 8013daa:	9301      	str	r3, [sp, #4]
 8013dac:	4b64      	ldr	r3, [pc, #400]	; (8013f40 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x200>)
 8013dae:	9300      	str	r3, [sp, #0]
 8013db0:	2358      	movs	r3, #88	; 0x58
 8013db2:	4a60      	ldr	r2, [pc, #384]	; (8013f34 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f4>)
 8013db4:	4963      	ldr	r1, [pc, #396]	; (8013f44 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x204>)
 8013db6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013db8:	47a0      	blx	r4
 8013dba:	2301      	movs	r3, #1
 8013dbc:	e0b4      	b.n	8013f28 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e8>

  // Matching GetWindowedOutputSize in TensorFlow.
  auto padding = params.padding;
 8013dbe:	69fb      	ldr	r3, [r7, #28]
 8013dc0:	781b      	ldrb	r3, [r3, #0]
 8013dc2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  data->padding = ComputePaddingHeightWidth(
      params.stride_height, params.stride_width, params.dilation_height_factor,
 8013dc6:	69fb      	ldr	r3, [r7, #28]
 8013dc8:	6899      	ldr	r1, [r3, #8]
 8013dca:	69fb      	ldr	r3, [r7, #28]
 8013dcc:	685c      	ldr	r4, [r3, #4]
 8013dce:	69fb      	ldr	r3, [r7, #28]
 8013dd0:	699d      	ldr	r5, [r3, #24]
      params.dilation_width_factor, height, width, filter_height, filter_width,
 8013dd2:	69fb      	ldr	r3, [r7, #28]
 8013dd4:	695b      	ldr	r3, [r3, #20]
      padding, &out_height, &out_width);
 8013dd6:	6fbe      	ldr	r6, [r7, #120]	; 0x78
 8013dd8:	f107 0008 	add.w	r0, r7, #8
 8013ddc:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8013de0:	9207      	str	r2, [sp, #28]
 8013de2:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8013de6:	9206      	str	r2, [sp, #24]
 8013de8:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8013dec:	9205      	str	r2, [sp, #20]
 8013dee:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8013df0:	9204      	str	r2, [sp, #16]
 8013df2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8013df4:	9203      	str	r2, [sp, #12]
 8013df6:	69ba      	ldr	r2, [r7, #24]
 8013df8:	9202      	str	r2, [sp, #8]
 8013dfa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013dfc:	9201      	str	r2, [sp, #4]
 8013dfe:	9300      	str	r3, [sp, #0]
 8013e00:	462b      	mov	r3, r5
 8013e02:	4622      	mov	r2, r4
 8013e04:	f7ff fcd9 	bl	80137ba <_ZN6tflite25ComputePaddingHeightWidthEiiiiiiii13TfLitePaddingPiS1_>
 8013e08:	4634      	mov	r4, r6
 8013e0a:	f107 0308 	add.w	r3, r7, #8
 8013e0e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013e10:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  const TfLiteTensor* input = GetInput(context, node, kConvInputTensor);
 8013e14:	4b4c      	ldr	r3, [pc, #304]	; (8013f48 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x208>)
 8013e16:	681b      	ldr	r3, [r3, #0]
 8013e18:	461a      	mov	r2, r3
 8013e1a:	6a39      	ldr	r1, [r7, #32]
 8013e1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013e1e:	f7f9 fe55 	bl	800dacc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8013e22:	6438      	str	r0, [r7, #64]	; 0x40
  TF_LITE_ENSURE(context, input != nullptr);
 8013e24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013e26:	2b00      	cmp	r3, #0
 8013e28:	d10a      	bne.n	8013e40 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x100>
 8013e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e2c:	695c      	ldr	r4, [r3, #20]
 8013e2e:	4b47      	ldr	r3, [pc, #284]	; (8013f4c <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x20c>)
 8013e30:	9300      	str	r3, [sp, #0]
 8013e32:	2362      	movs	r3, #98	; 0x62
 8013e34:	4a3f      	ldr	r2, [pc, #252]	; (8013f34 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f4>)
 8013e36:	4940      	ldr	r1, [pc, #256]	; (8013f38 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f8>)
 8013e38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013e3a:	47a0      	blx	r4
 8013e3c:	2301      	movs	r3, #1
 8013e3e:	e073      	b.n	8013f28 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e8>
  const TfLiteTensor* filter = GetInput(context, node, kConvWeightsTensor);
 8013e40:	4b43      	ldr	r3, [pc, #268]	; (8013f50 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x210>)
 8013e42:	681b      	ldr	r3, [r3, #0]
 8013e44:	461a      	mov	r2, r3
 8013e46:	6a39      	ldr	r1, [r7, #32]
 8013e48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013e4a:	f7f9 fe3f 	bl	800dacc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8013e4e:	63f8      	str	r0, [r7, #60]	; 0x3c
  TF_LITE_ENSURE(context, filter != nullptr);
 8013e50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013e52:	2b00      	cmp	r3, #0
 8013e54:	d10a      	bne.n	8013e6c <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x12c>
 8013e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e58:	695c      	ldr	r4, [r3, #20]
 8013e5a:	4b3e      	ldr	r3, [pc, #248]	; (8013f54 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x214>)
 8013e5c:	9300      	str	r3, [sp, #0]
 8013e5e:	2364      	movs	r3, #100	; 0x64
 8013e60:	4a34      	ldr	r2, [pc, #208]	; (8013f34 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f4>)
 8013e62:	4935      	ldr	r1, [pc, #212]	; (8013f38 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f8>)
 8013e64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013e66:	47a0      	blx	r4
 8013e68:	2301      	movs	r3, #1
 8013e6a:	e05d      	b.n	8013f28 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e8>
  const TfLiteTensor* bias =
      GetOptionalInputTensor(context, node, kConvBiasTensor);
 8013e6c:	4b3a      	ldr	r3, [pc, #232]	; (8013f58 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x218>)
 8013e6e:	681b      	ldr	r3, [r3, #0]
 8013e70:	461a      	mov	r2, r3
 8013e72:	6a39      	ldr	r1, [r7, #32]
 8013e74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013e76:	f7f9 fe59 	bl	800db2c <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
 8013e7a:	63b8      	str	r0, [r7, #56]	; 0x38
  TfLiteTensor* output = GetOutput(context, node, kConvOutputTensor);
 8013e7c:	4b37      	ldr	r3, [pc, #220]	; (8013f5c <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x21c>)
 8013e7e:	681b      	ldr	r3, [r3, #0]
 8013e80:	461a      	mov	r2, r3
 8013e82:	6a39      	ldr	r1, [r7, #32]
 8013e84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013e86:	f7f9 fe31 	bl	800daec <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 8013e8a:	6378      	str	r0, [r7, #52]	; 0x34
  TF_LITE_ENSURE(context, output != nullptr);
 8013e8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013e8e:	2b00      	cmp	r3, #0
 8013e90:	d10a      	bne.n	8013ea8 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x168>
 8013e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e94:	695c      	ldr	r4, [r3, #20]
 8013e96:	4b32      	ldr	r3, [pc, #200]	; (8013f60 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x220>)
 8013e98:	9300      	str	r3, [sp, #0]
 8013e9a:	2368      	movs	r3, #104	; 0x68
 8013e9c:	4a25      	ldr	r2, [pc, #148]	; (8013f34 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f4>)
 8013e9e:	4926      	ldr	r1, [pc, #152]	; (8013f38 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f8>)
 8013ea0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013ea2:	47a0      	blx	r4
 8013ea4:	2301      	movs	r3, #1
 8013ea6:	e03f      	b.n	8013f28 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e8>

  // Note that quantized inference requires that all tensors have their
  // parameters set. This is usually done during quantized training.
  if (data_type != kTfLiteFloat32) {
 8013ea8:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8013eac:	2b01      	cmp	r3, #1
 8013eae:	d02e      	beq.n	8013f0e <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1ce>
    int output_channels = filter->dims->data[kDepthwiseConvQuantizedDimension];
 8013eb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013eb2:	689b      	ldr	r3, [r3, #8]
 8013eb4:	691b      	ldr	r3, [r3, #16]
 8013eb6:	633b      	str	r3, [r7, #48]	; 0x30

    TF_LITE_ENSURE_STATUS(tflite::PopulateConvolutionQuantizationParams(
 8013eb8:	69fb      	ldr	r3, [r7, #28]
 8013eba:	3310      	adds	r3, #16
 8013ebc:	607b      	str	r3, [r7, #4]
 8013ebe:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8013ec0:	321c      	adds	r2, #28
 8013ec2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8013ec4:	3120      	adds	r1, #32
 8013ec6:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8013ec8:	302c      	adds	r0, #44	; 0x2c
 8013eca:	6fbc      	ldr	r4, [r7, #120]	; 0x78
 8013ecc:	3430      	adds	r4, #48	; 0x30
 8013ece:	6fbd      	ldr	r5, [r7, #120]	; 0x78
 8013ed0:	6a6d      	ldr	r5, [r5, #36]	; 0x24
 8013ed2:	6fbe      	ldr	r6, [r7, #120]	; 0x78
 8013ed4:	6ab6      	ldr	r6, [r6, #40]	; 0x28
 8013ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ed8:	9308      	str	r3, [sp, #32]
 8013eda:	9607      	str	r6, [sp, #28]
 8013edc:	9506      	str	r5, [sp, #24]
 8013ede:	9405      	str	r4, [sp, #20]
 8013ee0:	9004      	str	r0, [sp, #16]
 8013ee2:	9103      	str	r1, [sp, #12]
 8013ee4:	9202      	str	r2, [sp, #8]
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	9301      	str	r3, [sp, #4]
 8013eea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013eec:	9300      	str	r3, [sp, #0]
 8013eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ef0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013ef2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013ef4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013ef6:	f7f9 fe29 	bl	800db4c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i>
 8013efa:	4603      	mov	r3, r0
 8013efc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8013f00:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013f04:	2b00      	cmp	r3, #0
 8013f06:	d002      	beq.n	8013f0e <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1ce>
 8013f08:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013f0c:	e00c      	b.n	8013f28 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e8>
        &data->output_activation_min, &data->output_activation_max,
        data->per_channel_output_multiplier, data->per_channel_output_shift,
        output_channels));
  }

  data->input_zero_point = input->params.zero_point;
 8013f0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013f10:	691a      	ldr	r2, [r3, #16]
 8013f12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013f14:	611a      	str	r2, [r3, #16]
  data->filter_zero_point = filter->params.zero_point;
 8013f16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013f18:	691a      	ldr	r2, [r3, #16]
 8013f1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013f1c:	615a      	str	r2, [r3, #20]
  data->output_zero_point = output->params.zero_point;
 8013f1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013f20:	691a      	ldr	r2, [r3, #16]
 8013f22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013f24:	619a      	str	r2, [r3, #24]

  return kTfLiteOk;
 8013f26:	2300      	movs	r3, #0
}
 8013f28:	4618      	mov	r0, r3
 8013f2a:	374c      	adds	r7, #76	; 0x4c
 8013f2c:	46bd      	mov	sp, r7
 8013f2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013f30:	0802cfc4 	.word	0x0802cfc4
 8013f34:	0802cf60 	.word	0x0802cf60
 8013f38:	0802cfac 	.word	0x0802cfac
 8013f3c:	0802d004 	.word	0x0802d004
 8013f40:	0802d008 	.word	0x0802d008
 8013f44:	0802cfe8 	.word	0x0802cfe8
 8013f48:	0803ff54 	.word	0x0803ff54
 8013f4c:	0802d01c 	.word	0x0802d01c
 8013f50:	0803ff58 	.word	0x0803ff58
 8013f54:	0802d030 	.word	0x0802d030
 8013f58:	0803ff5c 	.word	0x0803ff5c
 8013f5c:	0803ff60 	.word	0x0803ff60
 8013f60:	0802d044 	.word	0x0802d044

08013f64 <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 8013f64:	b580      	push	{r7, lr}
 8013f66:	b082      	sub	sp, #8
 8013f68:	af00      	add	r7, sp, #0
 8013f6a:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 8013f6c:	687b      	ldr	r3, [r7, #4]
 8013f6e:	2b00      	cmp	r3, #0
 8013f70:	d101      	bne.n	8013f76 <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor+0x12>
 8013f72:	f012 fec4 	bl	8026cfe <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 8013f76:	687b      	ldr	r3, [r7, #4]
 8013f78:	681b      	ldr	r3, [r3, #0]
}
 8013f7a:	4618      	mov	r0, r3
 8013f7c:	3708      	adds	r7, #8
 8013f7e:	46bd      	mov	sp, r7
 8013f80:	bd80      	pop	{r7, pc}

08013f82 <_ZSt3maxIsERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8013f82:	b480      	push	{r7}
 8013f84:	b083      	sub	sp, #12
 8013f86:	af00      	add	r7, sp, #0
 8013f88:	6078      	str	r0, [r7, #4]
 8013f8a:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8013f8c:	687b      	ldr	r3, [r7, #4]
 8013f8e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8013f92:	683b      	ldr	r3, [r7, #0]
 8013f94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013f98:	429a      	cmp	r2, r3
 8013f9a:	da01      	bge.n	8013fa0 <_ZSt3maxIsERKT_S2_S2_+0x1e>
	return __b;
 8013f9c:	683b      	ldr	r3, [r7, #0]
 8013f9e:	e000      	b.n	8013fa2 <_ZSt3maxIsERKT_S2_S2_+0x20>
      return __a;
 8013fa0:	687b      	ldr	r3, [r7, #4]
    }
 8013fa2:	4618      	mov	r0, r3
 8013fa4:	370c      	adds	r7, #12
 8013fa6:	46bd      	mov	sp, r7
 8013fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fac:	4770      	bx	lr

08013fae <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>:
  TFLITE_DCHECK(input1 != nullptr);
  TFLITE_DCHECK(input2 != nullptr);
  return TfLiteIntArrayEqual(input1->dims, input2->dims);
}

const RuntimeShape GetTensorShape(const TfLiteEvalTensor* tensor) {
 8013fae:	b580      	push	{r7, lr}
 8013fb0:	b086      	sub	sp, #24
 8013fb2:	af00      	add	r7, sp, #0
 8013fb4:	6078      	str	r0, [r7, #4]
 8013fb6:	6039      	str	r1, [r7, #0]
  if (tensor == nullptr || tensor->dims == nullptr) {
 8013fb8:	683b      	ldr	r3, [r7, #0]
 8013fba:	2b00      	cmp	r3, #0
 8013fbc:	d003      	beq.n	8013fc6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x18>
 8013fbe:	683b      	ldr	r3, [r7, #0]
 8013fc0:	685b      	ldr	r3, [r3, #4]
 8013fc2:	2b00      	cmp	r3, #0
 8013fc4:	d103      	bne.n	8013fce <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x20>
    return RuntimeShape();
 8013fc6:	6878      	ldr	r0, [r7, #4]
 8013fc8:	f7fa fc62 	bl	800e890 <_ZN6tflite12RuntimeShapeC1Ev>
 8013fcc:	e00d      	b.n	8013fea <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x3c>
  }
  TfLiteIntArray* dims = tensor->dims;
 8013fce:	683b      	ldr	r3, [r7, #0]
 8013fd0:	685b      	ldr	r3, [r3, #4]
 8013fd2:	617b      	str	r3, [r7, #20]
  const int dims_size = dims->size;
 8013fd4:	697b      	ldr	r3, [r7, #20]
 8013fd6:	681b      	ldr	r3, [r3, #0]
 8013fd8:	613b      	str	r3, [r7, #16]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
 8013fda:	697b      	ldr	r3, [r7, #20]
 8013fdc:	3304      	adds	r3, #4
 8013fde:	60fb      	str	r3, [r7, #12]
  return RuntimeShape(dims_size, dims_data);
 8013fe0:	68fa      	ldr	r2, [r7, #12]
 8013fe2:	6939      	ldr	r1, [r7, #16]
 8013fe4:	6878      	ldr	r0, [r7, #4]
 8013fe6:	f7fa fc61 	bl	800e8ac <_ZN6tflite12RuntimeShapeC1EiPKl>
}
 8013fea:	6878      	ldr	r0, [r7, #4]
 8013fec:	3718      	adds	r7, #24
 8013fee:	46bd      	mov	sp, r7
 8013ff0:	bd80      	pop	{r7, pc}

08013ff2 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>:

PaddingType RuntimePaddingType(TfLitePadding padding) {
 8013ff2:	b480      	push	{r7}
 8013ff4:	b083      	sub	sp, #12
 8013ff6:	af00      	add	r7, sp, #0
 8013ff8:	4603      	mov	r3, r0
 8013ffa:	71fb      	strb	r3, [r7, #7]
  switch (padding) {
 8013ffc:	79fb      	ldrb	r3, [r7, #7]
 8013ffe:	2b01      	cmp	r3, #1
 8014000:	d002      	beq.n	8014008 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0x16>
 8014002:	2b02      	cmp	r3, #2
 8014004:	d002      	beq.n	801400c <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0x1a>
 8014006:	e003      	b.n	8014010 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0x1e>
    case TfLitePadding::kTfLitePaddingSame:
      return PaddingType::kSame;
 8014008:	2301      	movs	r3, #1
 801400a:	e002      	b.n	8014012 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0x20>
    case TfLitePadding::kTfLitePaddingValid:
      return PaddingType::kValid;
 801400c:	2302      	movs	r3, #2
 801400e:	e000      	b.n	8014012 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0x20>
    case TfLitePadding::kTfLitePaddingUnknown:
    default:
      return PaddingType::kNone;
 8014010:	2300      	movs	r3, #0
  }
}
 8014012:	4618      	mov	r0, r3
 8014014:	370c      	adds	r7, #12
 8014016:	46bd      	mov	sp, r7
 8014018:	f85d 7b04 	ldr.w	r7, [sp], #4
 801401c:	4770      	bx	lr

0801401e <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>:
inline T ActivationFunctionWithMinMax(T x, T output_activation_min,
 801401e:	b580      	push	{r7, lr}
 8014020:	b084      	sub	sp, #16
 8014022:	af00      	add	r7, sp, #0
 8014024:	ed87 0a03 	vstr	s0, [r7, #12]
 8014028:	edc7 0a02 	vstr	s1, [r7, #8]
 801402c:	ed87 1a01 	vstr	s2, [r7, #4]
  return min(max(x, output_activation_min), output_activation_max);
 8014030:	f107 0208 	add.w	r2, r7, #8
 8014034:	f107 030c 	add.w	r3, r7, #12
 8014038:	4611      	mov	r1, r2
 801403a:	4618      	mov	r0, r3
 801403c:	f7f9 f8fc 	bl	800d238 <_ZSt3maxIfERKT_S2_S2_>
 8014040:	4602      	mov	r2, r0
 8014042:	1d3b      	adds	r3, r7, #4
 8014044:	4619      	mov	r1, r3
 8014046:	4610      	mov	r0, r2
 8014048:	f7f9 f8dd 	bl	800d206 <_ZSt3minIfERKT_S2_S2_>
 801404c:	4603      	mov	r3, r0
 801404e:	681b      	ldr	r3, [r3, #0]
 8014050:	ee07 3a90 	vmov	s15, r3
}
 8014054:	eeb0 0a67 	vmov.f32	s0, s15
 8014058:	3710      	adds	r7, #16
 801405a:	46bd      	mov	sp, r7
 801405c:	bd80      	pop	{r7, pc}

0801405e <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>:
}

// Data is required to be contiguous, and so many operators can use either the
// full array flat size or the flat size with one dimension skipped (commonly
// the depth).
inline int FlatSizeSkipDim(const RuntimeShape& shape, int skip_dim) {
 801405e:	b580      	push	{r7, lr}
 8014060:	b086      	sub	sp, #24
 8014062:	af00      	add	r7, sp, #0
 8014064:	6078      	str	r0, [r7, #4]
 8014066:	6039      	str	r1, [r7, #0]
  const int dims_count = shape.DimensionsCount();
 8014068:	6878      	ldr	r0, [r7, #4]
 801406a:	f7fa fc3d 	bl	800e8e8 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801406e:	60f8      	str	r0, [r7, #12]
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
 8014070:	683b      	ldr	r3, [r7, #0]
 8014072:	2b00      	cmp	r3, #0
 8014074:	db03      	blt.n	801407e <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x20>
 8014076:	683a      	ldr	r2, [r7, #0]
 8014078:	68fb      	ldr	r3, [r7, #12]
 801407a:	429a      	cmp	r2, r3
 801407c:	db01      	blt.n	8014082 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x24>
 801407e:	f012 fe3e 	bl	8026cfe <abort>
  const auto* dims_data = shape.DimsData();
 8014082:	6878      	ldr	r0, [r7, #4]
 8014084:	f7ff f9ff 	bl	8013486 <_ZNK6tflite12RuntimeShape8DimsDataEv>
 8014088:	60b8      	str	r0, [r7, #8]
  int flat_size = 1;
 801408a:	2301      	movs	r3, #1
 801408c:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 801408e:	2300      	movs	r3, #0
 8014090:	613b      	str	r3, [r7, #16]
 8014092:	693a      	ldr	r2, [r7, #16]
 8014094:	68fb      	ldr	r3, [r7, #12]
 8014096:	429a      	cmp	r2, r3
 8014098:	da12      	bge.n	80140c0 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x62>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 801409a:	693a      	ldr	r2, [r7, #16]
 801409c:	683b      	ldr	r3, [r7, #0]
 801409e:	429a      	cmp	r2, r3
 80140a0:	d005      	beq.n	80140ae <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x50>
 80140a2:	693b      	ldr	r3, [r7, #16]
 80140a4:	009b      	lsls	r3, r3, #2
 80140a6:	68ba      	ldr	r2, [r7, #8]
 80140a8:	4413      	add	r3, r2
 80140aa:	681b      	ldr	r3, [r3, #0]
 80140ac:	e000      	b.n	80140b0 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x52>
 80140ae:	2301      	movs	r3, #1
 80140b0:	697a      	ldr	r2, [r7, #20]
 80140b2:	fb03 f302 	mul.w	r3, r3, r2
 80140b6:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 80140b8:	693b      	ldr	r3, [r7, #16]
 80140ba:	3301      	adds	r3, #1
 80140bc:	613b      	str	r3, [r7, #16]
 80140be:	e7e8      	b.n	8014092 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x34>
  }
  return flat_size;
 80140c0:	697b      	ldr	r3, [r7, #20]
}
 80140c2:	4618      	mov	r0, r3
 80140c4:	3718      	adds	r7, #24
 80140c6:	46bd      	mov	sp, r7
 80140c8:	bd80      	pop	{r7, pc}

080140ca <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>:

// A combination of MatchingFlatSize() and FlatSizeSkipDim().
inline int MatchingFlatSizeSkipDim(const RuntimeShape& shape, int skip_dim,
                                   const RuntimeShape& check_shape_0) {
 80140ca:	b590      	push	{r4, r7, lr}
 80140cc:	b087      	sub	sp, #28
 80140ce:	af00      	add	r7, sp, #0
 80140d0:	60f8      	str	r0, [r7, #12]
 80140d2:	60b9      	str	r1, [r7, #8]
 80140d4:	607a      	str	r2, [r7, #4]
  const int dims_count = shape.DimensionsCount();
 80140d6:	68f8      	ldr	r0, [r7, #12]
 80140d8:	f7fa fc06 	bl	800e8e8 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80140dc:	6138      	str	r0, [r7, #16]
  for (int i = 0; i < dims_count; ++i) {
 80140de:	2300      	movs	r3, #0
 80140e0:	617b      	str	r3, [r7, #20]
 80140e2:	697a      	ldr	r2, [r7, #20]
 80140e4:	693b      	ldr	r3, [r7, #16]
 80140e6:	429a      	cmp	r2, r3
 80140e8:	da15      	bge.n	8014116 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x4c>
    if (i != skip_dim) {
 80140ea:	697a      	ldr	r2, [r7, #20]
 80140ec:	68bb      	ldr	r3, [r7, #8]
 80140ee:	429a      	cmp	r2, r3
 80140f0:	d00d      	beq.n	801410e <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x44>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 80140f2:	6979      	ldr	r1, [r7, #20]
 80140f4:	68f8      	ldr	r0, [r7, #12]
 80140f6:	f7ff f9ac 	bl	8013452 <_ZNK6tflite12RuntimeShape4DimsEi>
 80140fa:	4604      	mov	r4, r0
 80140fc:	6979      	ldr	r1, [r7, #20]
 80140fe:	6878      	ldr	r0, [r7, #4]
 8014100:	f7ff f9a7 	bl	8013452 <_ZNK6tflite12RuntimeShape4DimsEi>
 8014104:	4603      	mov	r3, r0
 8014106:	429c      	cmp	r4, r3
 8014108:	d001      	beq.n	801410e <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x44>
 801410a:	f012 fdf8 	bl	8026cfe <abort>
  for (int i = 0; i < dims_count; ++i) {
 801410e:	697b      	ldr	r3, [r7, #20]
 8014110:	3301      	adds	r3, #1
 8014112:	617b      	str	r3, [r7, #20]
 8014114:	e7e5      	b.n	80140e2 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x18>
    }
  }
  return FlatSizeSkipDim(shape, skip_dim);
 8014116:	68b9      	ldr	r1, [r7, #8]
 8014118:	68f8      	ldr	r0, [r7, #12]
 801411a:	f7ff ffa0 	bl	801405e <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 801411e:	4603      	mov	r3, r0
}
 8014120:	4618      	mov	r0, r3
 8014122:	371c      	adds	r7, #28
 8014124:	46bd      	mov	sp, r7
 8014126:	bd90      	pop	{r4, r7, pc}

08014128 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_>:
inline std::int32_t RoundingHalfSum(std::int32_t a, std::int32_t b) {
 8014128:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 801412c:	b08b      	sub	sp, #44	; 0x2c
 801412e:	af00      	add	r7, sp, #0
 8014130:	6078      	str	r0, [r7, #4]
 8014132:	6039      	str	r1, [r7, #0]
  std::int64_t a64 = a;
 8014134:	6879      	ldr	r1, [r7, #4]
 8014136:	4608      	mov	r0, r1
 8014138:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801413c:	e9c7 0108 	strd	r0, r1, [r7, #32]
  std::int64_t b64 = b;
 8014140:	6839      	ldr	r1, [r7, #0]
 8014142:	4608      	mov	r0, r1
 8014144:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8014148:	e9c7 0106 	strd	r0, r1, [r7, #24]
  std::int64_t sum = a64 + b64;
 801414c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8014150:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8014154:	eb18 0a00 	adds.w	sl, r8, r0
 8014158:	eb49 0b01 	adc.w	fp, r9, r1
 801415c:	e9c7 ab04 	strd	sl, fp, [r7, #16]
  std::int64_t sign = sum >= 0 ? 1 : -1;
 8014160:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8014164:	2800      	cmp	r0, #0
 8014166:	f171 0100 	sbcs.w	r1, r1, #0
 801416a:	db04      	blt.n	8014176 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_+0x4e>
 801416c:	f04f 0001 	mov.w	r0, #1
 8014170:	f04f 0100 	mov.w	r1, #0
 8014174:	e003      	b.n	801417e <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_+0x56>
 8014176:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801417a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801417e:	e9c7 0102 	strd	r0, r1, [r7, #8]
  return static_cast<std::int32_t>((sum + sign) / 2);
 8014182:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8014186:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801418a:	eb18 0400 	adds.w	r4, r8, r0
 801418e:	eb49 0501 	adc.w	r5, r9, r1
 8014192:	0fe9      	lsrs	r1, r5, #31
 8014194:	4608      	mov	r0, r1
 8014196:	f04f 0100 	mov.w	r1, #0
 801419a:	1902      	adds	r2, r0, r4
 801419c:	eb41 0305 	adc.w	r3, r1, r5
 80141a0:	f04f 0000 	mov.w	r0, #0
 80141a4:	f04f 0100 	mov.w	r1, #0
 80141a8:	0850      	lsrs	r0, r2, #1
 80141aa:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 80141ae:	1059      	asrs	r1, r3, #1
 80141b0:	4602      	mov	r2, r0
 80141b2:	460b      	mov	r3, r1
 80141b4:	4613      	mov	r3, r2
}
 80141b6:	4618      	mov	r0, r3
 80141b8:	372c      	adds	r7, #44	; 0x2c
 80141ba:	46bd      	mov	sp, r7
 80141bc:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80141c0:	4770      	bx	lr

080141c2 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 80141c2:	b580      	push	{r7, lr}
 80141c4:	b084      	sub	sp, #16
 80141c6:	af00      	add	r7, sp, #0
 80141c8:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 80141ca:	f107 030c 	add.w	r3, r7, #12
 80141ce:	4618      	mov	r0, r3
 80141d0:	f7f9 fa8e 	bl	800d6f0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80141d4:	4602      	mov	r2, r0
 80141d6:	687b      	ldr	r3, [r7, #4]
 80141d8:	6013      	str	r3, [r2, #0]
    return retval;
 80141da:	68fb      	ldr	r3, [r7, #12]
  }
 80141dc:	4618      	mov	r0, r3
 80141de:	3710      	adds	r7, #16
 80141e0:	46bd      	mov	sp, r7
 80141e2:	bd80      	pop	{r7, pc}

080141e4 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>:

// Implementation of logistic function.

// Returns 1 / (1 + x) for x in (0, 1).
template <typename tRawType>
FixedPoint<tRawType, 0> one_over_one_plus_x_for_x_in_0_1(
 80141e4:	b580      	push	{r7, lr}
 80141e6:	b08a      	sub	sp, #40	; 0x28
 80141e8:	af00      	add	r7, sp, #0
 80141ea:	6078      	str	r0, [r7, #4]
    FixedPoint<tRawType, 0> a) {
  typedef FixedPoint<tRawType, 0> F0;
  typedef FixedPoint<tRawType, 2> F2;
  F0 half_denominator = RoundingHalfSum(a, F0::One());
 80141ec:	f000 f9f7 	bl	80145de <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>
 80141f0:	4603      	mov	r3, r0
 80141f2:	4619      	mov	r1, r3
 80141f4:	6878      	ldr	r0, [r7, #4]
 80141f6:	f000 f9fd 	bl	80145f4 <_ZN8gemmlowp15RoundingHalfSumIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 80141fa:	4603      	mov	r3, r0
 80141fc:	623b      	str	r3, [r7, #32]
  // Newton-Raphson division
  // https://en.wikipedia.org/wiki/Division_algorithm#Newton.E2.80.93Raphson_division
  // Refer to that page for the logic behind the 48/17 and 32/17 constants.
  const F2 constant_48_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, 1515870810, 48.0 / 17.0);
 80141fe:	f04f 305a 	mov.w	r0, #1515870810	; 0x5a5a5a5a
 8014202:	f000 fa29 	bl	8014658 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>
 8014206:	4603      	mov	r3, r0
 8014208:	4618      	mov	r0, r3
 801420a:	f000 fa11 	bl	8014630 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 801420e:	4603      	mov	r3, r0
 8014210:	61fb      	str	r3, [r7, #28]
  const F2 constant_neg_32_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, -1010580540, -32.0 / 17.0);
 8014212:	4823      	ldr	r0, [pc, #140]	; (80142a0 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xbc>)
 8014214:	f000 fa20 	bl	8014658 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>
 8014218:	4603      	mov	r3, r0
 801421a:	4618      	mov	r0, r3
 801421c:	f000 fa08 	bl	8014630 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 8014220:	4603      	mov	r3, r0
 8014222:	61bb      	str	r3, [r7, #24]
  F2 x = constant_48_over_17 + half_denominator * constant_neg_32_over_17;
 8014224:	69b9      	ldr	r1, [r7, #24]
 8014226:	6a38      	ldr	r0, [r7, #32]
 8014228:	f000 fa23 	bl	8014672 <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801422c:	4603      	mov	r3, r0
 801422e:	4619      	mov	r1, r3
 8014230:	69f8      	ldr	r0, [r7, #28]
 8014232:	f000 fa40 	bl	80146b6 <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8014236:	4603      	mov	r3, r0
 8014238:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < 3; i++) {
 801423a:	2300      	movs	r3, #0
 801423c:	627b      	str	r3, [r7, #36]	; 0x24
 801423e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014240:	2b02      	cmp	r3, #2
 8014242:	dc21      	bgt.n	8014288 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xa4>
    F2 half_denominator_times_x = half_denominator * x;
 8014244:	6979      	ldr	r1, [r7, #20]
 8014246:	6a38      	ldr	r0, [r7, #32]
 8014248:	f000 fa13 	bl	8014672 <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801424c:	4603      	mov	r3, r0
 801424e:	613b      	str	r3, [r7, #16]
    F2 one_minus_half_denominator_times_x =
        F2::One() - half_denominator_times_x;
 8014250:	f000 fa4f 	bl	80146f2 <_ZN8gemmlowp10FixedPointIlLi2EE3OneEv>
 8014254:	4603      	mov	r3, r0
 8014256:	6939      	ldr	r1, [r7, #16]
 8014258:	4618      	mov	r0, r3
 801425a:	f000 fa53 	bl	8014704 <_ZN8gemmlowpmiIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801425e:	4603      	mov	r3, r0
 8014260:	60fb      	str	r3, [r7, #12]
    x = x + Rescale<2>(x * one_minus_half_denominator_times_x);
 8014262:	68f9      	ldr	r1, [r7, #12]
 8014264:	6978      	ldr	r0, [r7, #20]
 8014266:	f000 fa6b 	bl	8014740 <_ZN8gemmlowpmlIlLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801426a:	4603      	mov	r3, r0
 801426c:	4618      	mov	r0, r3
 801426e:	f000 fa89 	bl	8014784 <_ZN8gemmlowp7RescaleILi2ElLi4EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 8014272:	4603      	mov	r3, r0
 8014274:	4619      	mov	r1, r3
 8014276:	6978      	ldr	r0, [r7, #20]
 8014278:	f000 fa1d 	bl	80146b6 <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801427c:	4603      	mov	r3, r0
 801427e:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < 3; i++) {
 8014280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014282:	3301      	adds	r3, #1
 8014284:	627b      	str	r3, [r7, #36]	; 0x24
 8014286:	e7da      	b.n	801423e <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x5a>
  }
  return Rescale<0>(ExactMulByPot<-1>(x));
 8014288:	6978      	ldr	r0, [r7, #20]
 801428a:	f000 fa95 	bl	80147b8 <_ZN8gemmlowp13ExactMulByPotILin1ElLi2EEENS_10FixedPointIT0_XplT_T1_EEENS1_IS2_XT1_EEE>
 801428e:	4603      	mov	r3, r0
 8014290:	4618      	mov	r0, r3
 8014292:	f000 faa7 	bl	80147e4 <_ZN8gemmlowp7RescaleILi0ElLi1EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 8014296:	4603      	mov	r3, r0
}
 8014298:	4618      	mov	r0, r3
 801429a:	3728      	adds	r7, #40	; 0x28
 801429c:	46bd      	mov	sp, r7
 801429e:	bd80      	pop	{r7, pc}
 80142a0:	c3c3c3c4 	.word	0xc3c3c3c4

080142a4 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 80142a4:	b580      	push	{r7, lr}
 80142a6:	b084      	sub	sp, #16
 80142a8:	af00      	add	r7, sp, #0
 80142aa:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 80142ac:	f107 030c 	add.w	r3, r7, #12
 80142b0:	4618      	mov	r0, r3
 80142b2:	f000 f989 	bl	80145c8 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 80142b6:	4602      	mov	r2, r0
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	6013      	str	r3, [r2, #0]
    return retval;
 80142bc:	68fb      	ldr	r3, [r7, #12]
  }
 80142be:	4618      	mov	r0, r3
 80142c0:	3710      	adds	r7, #16
 80142c2:	46bd      	mov	sp, r7
 80142c4:	bd80      	pop	{r7, pc}
	...

080142c8 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>:
FixedPoint<tRawType, 0> exp_on_negative_values(
 80142c8:	b590      	push	{r4, r7, lr}
 80142ca:	b091      	sub	sp, #68	; 0x44
 80142cc:	af00      	add	r7, sp, #0
 80142ce:	6078      	str	r0, [r7, #4]
  const InputF kOneQuarter = InputF::template ConstantPOT<-2>();
 80142d0:	f000 faa2 	bl	8014818 <_ZN8gemmlowp10FixedPointIlLi5EE11ConstantPOTILin2EEES1_v>
 80142d4:	4603      	mov	r3, r0
 80142d6:	637b      	str	r3, [r7, #52]	; 0x34
  InputF mask = kOneQuarter - InputF::FromScalarRaw(1);
 80142d8:	2001      	movs	r0, #1
 80142da:	f000 faa6 	bl	801482a <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>
 80142de:	4603      	mov	r3, r0
 80142e0:	4619      	mov	r1, r3
 80142e2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80142e4:	f000 fab5 	bl	8014852 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 80142e8:	4603      	mov	r3, r0
 80142ea:	633b      	str	r3, [r7, #48]	; 0x30
  InputF a_mod_quarter_minus_one_quarter = (a & mask) - kOneQuarter;
 80142ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80142ee:	6878      	ldr	r0, [r7, #4]
 80142f0:	f000 facd 	bl	801488e <_ZN8gemmlowpanIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 80142f4:	4603      	mov	r3, r0
 80142f6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80142f8:	4618      	mov	r0, r3
 80142fa:	f000 faaa 	bl	8014852 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 80142fe:	4603      	mov	r3, r0
 8014300:	62fb      	str	r3, [r7, #44]	; 0x2c
  ResultF result = exp_on_interval_between_negative_one_quarter_and_0_excl(
 8014302:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014304:	f000 fae1 	bl	80148ca <_ZN8gemmlowp7RescaleILi0ElLi5EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 8014308:	4603      	mov	r3, r0
 801430a:	4618      	mov	r0, r3
 801430c:	f000 faf8 	bl	8014900 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_>
 8014310:	4603      	mov	r3, r0
 8014312:	62bb      	str	r3, [r7, #40]	; 0x28
  tRawType remainder = (a_mod_quarter_minus_one_quarter - a).raw();
 8014314:	6879      	ldr	r1, [r7, #4]
 8014316:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014318:	f000 fa9b 	bl	8014852 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801431c:	4603      	mov	r3, r0
 801431e:	63bb      	str	r3, [r7, #56]	; 0x38
 8014320:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8014324:	4618      	mov	r0, r3
 8014326:	f000 f94f 	bl	80145c8 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801432a:	4603      	mov	r3, r0
 801432c:	681b      	ldr	r3, [r3, #0]
 801432e:	63fb      	str	r3, [r7, #60]	; 0x3c
  GEMMLOWP_EXP_BARREL_SHIFTER(-2, 1672461947);
 8014330:	4883      	ldr	r0, [pc, #524]	; (8014540 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x278>)
 8014332:	f7f9 f9fc 	bl	800d72e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8014336:	4603      	mov	r3, r0
 8014338:	4618      	mov	r0, r3
 801433a:	f7f9 f9e4 	bl	800d706 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801433e:	4603      	mov	r3, r0
 8014340:	627b      	str	r3, [r7, #36]	; 0x24
 8014342:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8014346:	f7f9 f9ff 	bl	800d748 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801434a:	4603      	mov	r3, r0
 801434c:	4619      	mov	r1, r3
 801434e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8014350:	f7f9 fa05 	bl	800d75e <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8014354:	4603      	mov	r3, r0
 8014356:	4618      	mov	r0, r3
 8014358:	f7f9 fa6e 	bl	800d838 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801435c:	4604      	mov	r4, r0
 801435e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014360:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014362:	f000 fb2f 	bl	80149c4 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8014366:	4603      	mov	r3, r0
 8014368:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801436a:	4619      	mov	r1, r3
 801436c:	4620      	mov	r0, r4
 801436e:	f000 fb4b 	bl	8014a08 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8014372:	4603      	mov	r3, r0
 8014374:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(-1, 1302514674);
 8014376:	4873      	ldr	r0, [pc, #460]	; (8014544 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x27c>)
 8014378:	f7f9 f9d9 	bl	800d72e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 801437c:	4603      	mov	r3, r0
 801437e:	4618      	mov	r0, r3
 8014380:	f7f9 f9c1 	bl	800d706 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8014384:	4603      	mov	r3, r0
 8014386:	623b      	str	r3, [r7, #32]
 8014388:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 801438c:	f7f9 f9dc 	bl	800d748 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8014390:	4603      	mov	r3, r0
 8014392:	4619      	mov	r1, r3
 8014394:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8014396:	f7f9 f9e2 	bl	800d75e <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801439a:	4603      	mov	r3, r0
 801439c:	4618      	mov	r0, r3
 801439e:	f7f9 fa4b 	bl	800d838 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 80143a2:	4604      	mov	r4, r0
 80143a4:	6a39      	ldr	r1, [r7, #32]
 80143a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80143a8:	f000 fb0c 	bl	80149c4 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 80143ac:	4603      	mov	r3, r0
 80143ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80143b0:	4619      	mov	r1, r3
 80143b2:	4620      	mov	r0, r4
 80143b4:	f000 fb28 	bl	8014a08 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 80143b8:	4603      	mov	r3, r0
 80143ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+0, 790015084);
 80143bc:	4862      	ldr	r0, [pc, #392]	; (8014548 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x280>)
 80143be:	f7f9 f9b6 	bl	800d72e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 80143c2:	4603      	mov	r3, r0
 80143c4:	4618      	mov	r0, r3
 80143c6:	f7f9 f99e 	bl	800d706 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 80143ca:	4603      	mov	r3, r0
 80143cc:	61fb      	str	r3, [r7, #28]
 80143ce:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80143d2:	f7f9 f9b9 	bl	800d748 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80143d6:	4603      	mov	r3, r0
 80143d8:	4619      	mov	r1, r3
 80143da:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80143dc:	f7f9 f9bf 	bl	800d75e <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 80143e0:	4603      	mov	r3, r0
 80143e2:	4618      	mov	r0, r3
 80143e4:	f7f9 fa28 	bl	800d838 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 80143e8:	4604      	mov	r4, r0
 80143ea:	69f9      	ldr	r1, [r7, #28]
 80143ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80143ee:	f000 fae9 	bl	80149c4 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 80143f2:	4603      	mov	r3, r0
 80143f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80143f6:	4619      	mov	r1, r3
 80143f8:	4620      	mov	r0, r4
 80143fa:	f000 fb05 	bl	8014a08 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 80143fe:	4603      	mov	r3, r0
 8014400:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+1, 290630308);
 8014402:	4852      	ldr	r0, [pc, #328]	; (801454c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x284>)
 8014404:	f7f9 f993 	bl	800d72e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8014408:	4603      	mov	r3, r0
 801440a:	4618      	mov	r0, r3
 801440c:	f7f9 f97b 	bl	800d706 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8014410:	4603      	mov	r3, r0
 8014412:	61bb      	str	r3, [r7, #24]
 8014414:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8014418:	f7f9 f996 	bl	800d748 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801441c:	4603      	mov	r3, r0
 801441e:	4619      	mov	r1, r3
 8014420:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8014422:	f7f9 f99c 	bl	800d75e <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8014426:	4603      	mov	r3, r0
 8014428:	4618      	mov	r0, r3
 801442a:	f7f9 fa05 	bl	800d838 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801442e:	4604      	mov	r4, r0
 8014430:	69b9      	ldr	r1, [r7, #24]
 8014432:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014434:	f000 fac6 	bl	80149c4 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8014438:	4603      	mov	r3, r0
 801443a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801443c:	4619      	mov	r1, r3
 801443e:	4620      	mov	r0, r4
 8014440:	f000 fae2 	bl	8014a08 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8014444:	4603      	mov	r3, r0
 8014446:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+2, 39332535);
 8014448:	4841      	ldr	r0, [pc, #260]	; (8014550 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x288>)
 801444a:	f7f9 f970 	bl	800d72e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 801444e:	4603      	mov	r3, r0
 8014450:	4618      	mov	r0, r3
 8014452:	f7f9 f958 	bl	800d706 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8014456:	4603      	mov	r3, r0
 8014458:	617b      	str	r3, [r7, #20]
 801445a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 801445e:	f7f9 f973 	bl	800d748 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8014462:	4603      	mov	r3, r0
 8014464:	4619      	mov	r1, r3
 8014466:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8014468:	f7f9 f979 	bl	800d75e <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801446c:	4603      	mov	r3, r0
 801446e:	4618      	mov	r0, r3
 8014470:	f7f9 f9e2 	bl	800d838 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8014474:	4604      	mov	r4, r0
 8014476:	6979      	ldr	r1, [r7, #20]
 8014478:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801447a:	f000 faa3 	bl	80149c4 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801447e:	4603      	mov	r3, r0
 8014480:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014482:	4619      	mov	r1, r3
 8014484:	4620      	mov	r0, r4
 8014486:	f000 fabf 	bl	8014a08 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 801448a:	4603      	mov	r3, r0
 801448c:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+3, 720401);
 801448e:	4831      	ldr	r0, [pc, #196]	; (8014554 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x28c>)
 8014490:	f7f9 f94d 	bl	800d72e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8014494:	4603      	mov	r3, r0
 8014496:	4618      	mov	r0, r3
 8014498:	f7f9 f935 	bl	800d706 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801449c:	4603      	mov	r3, r0
 801449e:	613b      	str	r3, [r7, #16]
 80144a0:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 80144a4:	f7f9 f950 	bl	800d748 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80144a8:	4603      	mov	r3, r0
 80144aa:	4619      	mov	r1, r3
 80144ac:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80144ae:	f7f9 f956 	bl	800d75e <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 80144b2:	4603      	mov	r3, r0
 80144b4:	4618      	mov	r0, r3
 80144b6:	f7f9 f9bf 	bl	800d838 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 80144ba:	4604      	mov	r4, r0
 80144bc:	6939      	ldr	r1, [r7, #16]
 80144be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80144c0:	f000 fa80 	bl	80149c4 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 80144c4:	4603      	mov	r3, r0
 80144c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80144c8:	4619      	mov	r1, r3
 80144ca:	4620      	mov	r0, r4
 80144cc:	f000 fa9c 	bl	8014a08 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 80144d0:	4603      	mov	r3, r0
 80144d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+4, 242);
 80144d4:	20f2      	movs	r0, #242	; 0xf2
 80144d6:	f7f9 f92a 	bl	800d72e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 80144da:	4603      	mov	r3, r0
 80144dc:	4618      	mov	r0, r3
 80144de:	f7f9 f912 	bl	800d706 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 80144e2:	4603      	mov	r3, r0
 80144e4:	60fb      	str	r3, [r7, #12]
 80144e6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80144ea:	f7f9 f92d 	bl	800d748 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80144ee:	4603      	mov	r3, r0
 80144f0:	4619      	mov	r1, r3
 80144f2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80144f4:	f7f9 f933 	bl	800d75e <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 80144f8:	4603      	mov	r3, r0
 80144fa:	4618      	mov	r0, r3
 80144fc:	f7f9 f99c 	bl	800d838 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8014500:	4604      	mov	r4, r0
 8014502:	68f9      	ldr	r1, [r7, #12]
 8014504:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014506:	f000 fa5d 	bl	80149c4 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801450a:	4603      	mov	r3, r0
 801450c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801450e:	4619      	mov	r1, r3
 8014510:	4620      	mov	r0, r4
 8014512:	f000 fa79 	bl	8014a08 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8014516:	4603      	mov	r3, r0
 8014518:	62bb      	str	r3, [r7, #40]	; 0x28
  result = SelectUsingMask(MaskIfZero(a), ResultF::One(), result);
 801451a:	6878      	ldr	r0, [r7, #4]
 801451c:	f000 fa95 	bl	8014a4a <_ZN8gemmlowp10MaskIfZeroIlLi5EEET_NS_10FixedPointIS1_XT0_EEE>
 8014520:	4604      	mov	r4, r0
 8014522:	f000 f85c 	bl	80145de <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>
 8014526:	4603      	mov	r3, r0
 8014528:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801452a:	4619      	mov	r1, r3
 801452c:	4620      	mov	r0, r4
 801452e:	f000 fa6b 	bl	8014a08 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8014532:	4603      	mov	r3, r0
 8014534:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8014536:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8014538:	4618      	mov	r0, r3
 801453a:	3744      	adds	r7, #68	; 0x44
 801453c:	46bd      	mov	sp, r7
 801453e:	bd90      	pop	{r4, r7, pc}
 8014540:	63afbe7b 	.word	0x63afbe7b
 8014544:	4da2cbf2 	.word	0x4da2cbf2
 8014548:	2f16ac6c 	.word	0x2f16ac6c
 801454c:	1152aaa4 	.word	0x1152aaa4
 8014550:	02582ab7 	.word	0x02582ab7
 8014554:	000afe11 	.word	0x000afe11

08014558 <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 8014558:	b5b0      	push	{r4, r5, r7, lr}
 801455a:	b084      	sub	sp, #16
 801455c:	af00      	add	r7, sp, #0
 801455e:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 8014560:	1d3b      	adds	r3, r7, #4
 8014562:	4618      	mov	r0, r3
 8014564:	f7f9 f8c4 	bl	800d6f0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8014568:	4603      	mov	r3, r0
 801456a:	681d      	ldr	r5, [r3, #0]
 801456c:	f107 030c 	add.w	r3, r7, #12
 8014570:	4618      	mov	r0, r3
 8014572:	f000 fa7c 	bl	8014a6e <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8014576:	4604      	mov	r4, r0
 8014578:	4628      	mov	r0, r5
 801457a:	f000 fa83 	bl	8014a84 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12ElEET0_S1_>
 801457e:	4603      	mov	r3, r0
 8014580:	6023      	str	r3, [r4, #0]
  return result;
 8014582:	68fb      	ldr	r3, [r7, #12]
}
 8014584:	4618      	mov	r0, r3
 8014586:	3710      	adds	r7, #16
 8014588:	46bd      	mov	sp, r7
 801458a:	bdb0      	pop	{r4, r5, r7, pc}

0801458c <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 801458c:	b590      	push	{r4, r7, lr}
 801458e:	b083      	sub	sp, #12
 8014590:	af00      	add	r7, sp, #0
 8014592:	6078      	str	r0, [r7, #4]
 8014594:	6039      	str	r1, [r7, #0]
 8014596:	1d3b      	adds	r3, r7, #4
 8014598:	4618      	mov	r0, r3
 801459a:	f000 fa68 	bl	8014a6e <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 801459e:	4603      	mov	r3, r0
 80145a0:	681c      	ldr	r4, [r3, #0]
 80145a2:	463b      	mov	r3, r7
 80145a4:	4618      	mov	r0, r3
 80145a6:	f000 fa62 	bl	8014a6e <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 80145aa:	4603      	mov	r3, r0
 80145ac:	681b      	ldr	r3, [r3, #0]
 80145ae:	4619      	mov	r1, r3
 80145b0:	4620      	mov	r0, r4
 80145b2:	f7f9 f905 	bl	800d7c0 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 80145b6:	4603      	mov	r3, r0
 80145b8:	4618      	mov	r0, r3
 80145ba:	f000 fa6f 	bl	8014a9c <_ZN8gemmlowp10FixedPointIlLi12EE7FromRawEl>
 80145be:	4603      	mov	r3, r0
 80145c0:	4618      	mov	r0, r3
 80145c2:	370c      	adds	r7, #12
 80145c4:	46bd      	mov	sp, r7
 80145c6:	bd90      	pop	{r4, r7, pc}

080145c8 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>:
  RawType& raw() { return i_; }
 80145c8:	b480      	push	{r7}
 80145ca:	b083      	sub	sp, #12
 80145cc:	af00      	add	r7, sp, #0
 80145ce:	6078      	str	r0, [r7, #4]
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	4618      	mov	r0, r3
 80145d4:	370c      	adds	r7, #12
 80145d6:	46bd      	mov	sp, r7
 80145d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145dc:	4770      	bx	lr

080145de <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>:
  static FixedPoint One() {
 80145de:	b580      	push	{r7, lr}
 80145e0:	af00      	add	r7, sp, #0
    return FromScalarRaw(
 80145e2:	f000 fa82 	bl	8014aea <_ZN8gemmlowp10FixedPointIlLi0EE12ScalarRawMaxEv>
 80145e6:	4603      	mov	r3, r0
 80145e8:	4618      	mov	r0, r3
 80145ea:	f7f9 f88c 	bl	800d706 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 80145ee:	4603      	mov	r3, r0
  }
 80145f0:	4618      	mov	r0, r3
 80145f2:	bd80      	pop	{r7, pc}

080145f4 <_ZN8gemmlowp15RoundingHalfSumIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(RoundingHalfSum, RoundingHalfSum)
 80145f4:	b590      	push	{r4, r7, lr}
 80145f6:	b083      	sub	sp, #12
 80145f8:	af00      	add	r7, sp, #0
 80145fa:	6078      	str	r0, [r7, #4]
 80145fc:	6039      	str	r1, [r7, #0]
 80145fe:	1d3b      	adds	r3, r7, #4
 8014600:	4618      	mov	r0, r3
 8014602:	f7f9 f875 	bl	800d6f0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8014606:	4603      	mov	r3, r0
 8014608:	681c      	ldr	r4, [r3, #0]
 801460a:	463b      	mov	r3, r7
 801460c:	4618      	mov	r0, r3
 801460e:	f7f9 f86f 	bl	800d6f0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8014612:	4603      	mov	r3, r0
 8014614:	681b      	ldr	r3, [r3, #0]
 8014616:	4619      	mov	r1, r3
 8014618:	4620      	mov	r0, r4
 801461a:	f7ff fd85 	bl	8014128 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_>
 801461e:	4603      	mov	r3, r0
 8014620:	4618      	mov	r0, r3
 8014622:	f7ff fdce 	bl	80141c2 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8014626:	4603      	mov	r3, r0
 8014628:	4618      	mov	r0, r3
 801462a:	370c      	adds	r7, #12
 801462c:	46bd      	mov	sp, r7
 801462e:	bd90      	pop	{r4, r7, pc}

08014630 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 8014630:	b590      	push	{r4, r7, lr}
 8014632:	b085      	sub	sp, #20
 8014634:	af00      	add	r7, sp, #0
 8014636:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 8014638:	f107 030c 	add.w	r3, r7, #12
 801463c:	4618      	mov	r0, r3
 801463e:	f000 fa5b 	bl	8014af8 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8014642:	4604      	mov	r4, r0
 8014644:	6878      	ldr	r0, [r7, #4]
 8014646:	f7f9 f87f 	bl	800d748 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801464a:	4603      	mov	r3, r0
 801464c:	6023      	str	r3, [r4, #0]
    return retval;
 801464e:	68fb      	ldr	r3, [r7, #12]
  }
 8014650:	4618      	mov	r0, r3
 8014652:	3714      	adds	r7, #20
 8014654:	46bd      	mov	sp, r7
 8014656:	bd90      	pop	{r4, r7, pc}

08014658 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>:
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
 8014658:	b580      	push	{r7, lr}
 801465a:	b082      	sub	sp, #8
 801465c:	af00      	add	r7, sp, #0
 801465e:	6078      	str	r0, [r7, #4]
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
 8014660:	2100      	movs	r1, #0
 8014662:	6878      	ldr	r0, [r7, #4]
 8014664:	f7f8 ffbe 	bl	800d5e4 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8014668:	4603      	mov	r3, r0
}
 801466a:	4618      	mov	r0, r3
 801466c:	3708      	adds	r7, #8
 801466e:	46bd      	mov	sp, r7
 8014670:	bd80      	pop	{r7, pc}

08014672 <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 8014672:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014674:	b085      	sub	sp, #20
 8014676:	af00      	add	r7, sp, #0
 8014678:	6078      	str	r0, [r7, #4]
 801467a:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 801467c:	1d3b      	adds	r3, r7, #4
 801467e:	4618      	mov	r0, r3
 8014680:	f7f9 f836 	bl	800d6f0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8014684:	4603      	mov	r3, r0
 8014686:	681d      	ldr	r5, [r3, #0]
 8014688:	463b      	mov	r3, r7
 801468a:	4618      	mov	r0, r3
 801468c:	f000 fa34 	bl	8014af8 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8014690:	4603      	mov	r3, r0
 8014692:	681e      	ldr	r6, [r3, #0]
 8014694:	f107 030c 	add.w	r3, r7, #12
 8014698:	4618      	mov	r0, r3
 801469a:	f000 fa2d 	bl	8014af8 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801469e:	4604      	mov	r4, r0
 80146a0:	4631      	mov	r1, r6
 80146a2:	4628      	mov	r0, r5
 80146a4:	f7f8 fe46 	bl	800d334 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 80146a8:	4603      	mov	r3, r0
 80146aa:	6023      	str	r3, [r4, #0]
  return c;
 80146ac:	68fb      	ldr	r3, [r7, #12]
}
 80146ae:	4618      	mov	r0, r3
 80146b0:	3714      	adds	r7, #20
 80146b2:	46bd      	mov	sp, r7
 80146b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080146b6 <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 80146b6:	b590      	push	{r4, r7, lr}
 80146b8:	b083      	sub	sp, #12
 80146ba:	af00      	add	r7, sp, #0
 80146bc:	6078      	str	r0, [r7, #4]
 80146be:	6039      	str	r1, [r7, #0]
 80146c0:	1d3b      	adds	r3, r7, #4
 80146c2:	4618      	mov	r0, r3
 80146c4:	f000 fa18 	bl	8014af8 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 80146c8:	4603      	mov	r3, r0
 80146ca:	681c      	ldr	r4, [r3, #0]
 80146cc:	463b      	mov	r3, r7
 80146ce:	4618      	mov	r0, r3
 80146d0:	f000 fa12 	bl	8014af8 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 80146d4:	4603      	mov	r3, r0
 80146d6:	681b      	ldr	r3, [r3, #0]
 80146d8:	4619      	mov	r1, r3
 80146da:	4620      	mov	r0, r4
 80146dc:	f7f9 f870 	bl	800d7c0 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 80146e0:	4603      	mov	r3, r0
 80146e2:	4618      	mov	r0, r3
 80146e4:	f000 fa13 	bl	8014b0e <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>
 80146e8:	4603      	mov	r3, r0
 80146ea:	4618      	mov	r0, r3
 80146ec:	370c      	adds	r7, #12
 80146ee:	46bd      	mov	sp, r7
 80146f0:	bd90      	pop	{r4, r7, pc}

080146f2 <_ZN8gemmlowp10FixedPointIlLi2EE3OneEv>:
  static FixedPoint One() {
 80146f2:	b580      	push	{r7, lr}
 80146f4:	af00      	add	r7, sp, #0
    return FromScalarRaw(
 80146f6:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 80146fa:	f7ff ff99 	bl	8014630 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 80146fe:	4603      	mov	r3, r0
  }
 8014700:	4618      	mov	r0, r3
 8014702:	bd80      	pop	{r7, pc}

08014704 <_ZN8gemmlowpmiIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator-, Sub)
 8014704:	b590      	push	{r4, r7, lr}
 8014706:	b083      	sub	sp, #12
 8014708:	af00      	add	r7, sp, #0
 801470a:	6078      	str	r0, [r7, #4]
 801470c:	6039      	str	r1, [r7, #0]
 801470e:	1d3b      	adds	r3, r7, #4
 8014710:	4618      	mov	r0, r3
 8014712:	f000 f9f1 	bl	8014af8 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8014716:	4603      	mov	r3, r0
 8014718:	681c      	ldr	r4, [r3, #0]
 801471a:	463b      	mov	r3, r7
 801471c:	4618      	mov	r0, r3
 801471e:	f000 f9eb 	bl	8014af8 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8014722:	4603      	mov	r3, r0
 8014724:	681b      	ldr	r3, [r3, #0]
 8014726:	4619      	mov	r1, r3
 8014728:	4620      	mov	r0, r4
 801472a:	f7f9 f877 	bl	800d81c <_ZN8gemmlowp3SubIlEET_S1_S1_>
 801472e:	4603      	mov	r3, r0
 8014730:	4618      	mov	r0, r3
 8014732:	f000 f9ec 	bl	8014b0e <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>
 8014736:	4603      	mov	r3, r0
 8014738:	4618      	mov	r0, r3
 801473a:	370c      	adds	r7, #12
 801473c:	46bd      	mov	sp, r7
 801473e:	bd90      	pop	{r4, r7, pc}

08014740 <_ZN8gemmlowpmlIlLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 8014740:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014742:	b085      	sub	sp, #20
 8014744:	af00      	add	r7, sp, #0
 8014746:	6078      	str	r0, [r7, #4]
 8014748:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 801474a:	1d3b      	adds	r3, r7, #4
 801474c:	4618      	mov	r0, r3
 801474e:	f000 f9d3 	bl	8014af8 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8014752:	4603      	mov	r3, r0
 8014754:	681d      	ldr	r5, [r3, #0]
 8014756:	463b      	mov	r3, r7
 8014758:	4618      	mov	r0, r3
 801475a:	f000 f9cd 	bl	8014af8 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801475e:	4603      	mov	r3, r0
 8014760:	681e      	ldr	r6, [r3, #0]
 8014762:	f107 030c 	add.w	r3, r7, #12
 8014766:	4618      	mov	r0, r3
 8014768:	f000 f9e2 	bl	8014b30 <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>
 801476c:	4604      	mov	r4, r0
 801476e:	4631      	mov	r1, r6
 8014770:	4628      	mov	r0, r5
 8014772:	f7f8 fddf 	bl	800d334 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 8014776:	4603      	mov	r3, r0
 8014778:	6023      	str	r3, [r4, #0]
  return c;
 801477a:	68fb      	ldr	r3, [r7, #12]
}
 801477c:	4618      	mov	r0, r3
 801477e:	3714      	adds	r7, #20
 8014780:	46bd      	mov	sp, r7
 8014782:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014784 <_ZN8gemmlowp7RescaleILi2ElLi4EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 8014784:	b5b0      	push	{r4, r5, r7, lr}
 8014786:	b084      	sub	sp, #16
 8014788:	af00      	add	r7, sp, #0
 801478a:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 801478c:	1d3b      	adds	r3, r7, #4
 801478e:	4618      	mov	r0, r3
 8014790:	f000 f9ce 	bl	8014b30 <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>
 8014794:	4603      	mov	r3, r0
 8014796:	681d      	ldr	r5, [r3, #0]
 8014798:	f107 030c 	add.w	r3, r7, #12
 801479c:	4618      	mov	r0, r3
 801479e:	f000 f9ab 	bl	8014af8 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 80147a2:	4604      	mov	r4, r0
 80147a4:	4628      	mov	r0, r5
 80147a6:	f000 f9ce 	bl	8014b46 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2ElEET0_S1_>
 80147aa:	4603      	mov	r3, r0
 80147ac:	6023      	str	r3, [r4, #0]
  return result;
 80147ae:	68fb      	ldr	r3, [r7, #12]
}
 80147b0:	4618      	mov	r0, r3
 80147b2:	3710      	adds	r7, #16
 80147b4:	46bd      	mov	sp, r7
 80147b6:	bdb0      	pop	{r4, r5, r7, pc}

080147b8 <_ZN8gemmlowp13ExactMulByPotILin1ElLi2EEENS_10FixedPointIT0_XplT_T1_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tExponent + tIntegerBits> ExactMulByPot(
 80147b8:	b590      	push	{r4, r7, lr}
 80147ba:	b085      	sub	sp, #20
 80147bc:	af00      	add	r7, sp, #0
 80147be:	6078      	str	r0, [r7, #4]
  c.raw() = a.raw();
 80147c0:	1d3b      	adds	r3, r7, #4
 80147c2:	4618      	mov	r0, r3
 80147c4:	f000 f998 	bl	8014af8 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 80147c8:	4604      	mov	r4, r0
 80147ca:	f107 030c 	add.w	r3, r7, #12
 80147ce:	4618      	mov	r0, r3
 80147d0:	f000 f9c5 	bl	8014b5e <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>
 80147d4:	4602      	mov	r2, r0
 80147d6:	6823      	ldr	r3, [r4, #0]
 80147d8:	6013      	str	r3, [r2, #0]
  return c;
 80147da:	68fb      	ldr	r3, [r7, #12]
}
 80147dc:	4618      	mov	r0, r3
 80147de:	3714      	adds	r7, #20
 80147e0:	46bd      	mov	sp, r7
 80147e2:	bd90      	pop	{r4, r7, pc}

080147e4 <_ZN8gemmlowp7RescaleILi0ElLi1EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 80147e4:	b5b0      	push	{r4, r5, r7, lr}
 80147e6:	b084      	sub	sp, #16
 80147e8:	af00      	add	r7, sp, #0
 80147ea:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 80147ec:	1d3b      	adds	r3, r7, #4
 80147ee:	4618      	mov	r0, r3
 80147f0:	f000 f9b5 	bl	8014b5e <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>
 80147f4:	4603      	mov	r3, r0
 80147f6:	681d      	ldr	r5, [r3, #0]
 80147f8:	f107 030c 	add.w	r3, r7, #12
 80147fc:	4618      	mov	r0, r3
 80147fe:	f7f8 ff77 	bl	800d6f0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8014802:	4604      	mov	r4, r0
 8014804:	4628      	mov	r0, r5
 8014806:	f000 f9b5 	bl	8014b74 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1ElEET0_S1_>
 801480a:	4603      	mov	r3, r0
 801480c:	6023      	str	r3, [r4, #0]
  return result;
 801480e:	68fb      	ldr	r3, [r7, #12]
}
 8014810:	4618      	mov	r0, r3
 8014812:	3710      	adds	r7, #16
 8014814:	46bd      	mov	sp, r7
 8014816:	bdb0      	pop	{r4, r5, r7, pc}

08014818 <_ZN8gemmlowp10FixedPointIlLi5EE11ConstantPOTILin2EEES1_v>:
  static FixedPoint ConstantPOT() {
 8014818:	b580      	push	{r7, lr}
 801481a:	af00      	add	r7, sp, #0
    return FromScalarRaw(ScalarRawType(1) << kOffset);
 801481c:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8014820:	f000 f803 	bl	801482a <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>
 8014824:	4603      	mov	r3, r0
  }
 8014826:	4618      	mov	r0, r3
 8014828:	bd80      	pop	{r7, pc}

0801482a <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 801482a:	b590      	push	{r4, r7, lr}
 801482c:	b085      	sub	sp, #20
 801482e:	af00      	add	r7, sp, #0
 8014830:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 8014832:	f107 030c 	add.w	r3, r7, #12
 8014836:	4618      	mov	r0, r3
 8014838:	f7ff fec6 	bl	80145c8 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801483c:	4604      	mov	r4, r0
 801483e:	6878      	ldr	r0, [r7, #4]
 8014840:	f7f8 ff82 	bl	800d748 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8014844:	4603      	mov	r3, r0
 8014846:	6023      	str	r3, [r4, #0]
    return retval;
 8014848:	68fb      	ldr	r3, [r7, #12]
  }
 801484a:	4618      	mov	r0, r3
 801484c:	3714      	adds	r7, #20
 801484e:	46bd      	mov	sp, r7
 8014850:	bd90      	pop	{r4, r7, pc}

08014852 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator-, Sub)
 8014852:	b590      	push	{r4, r7, lr}
 8014854:	b083      	sub	sp, #12
 8014856:	af00      	add	r7, sp, #0
 8014858:	6078      	str	r0, [r7, #4]
 801485a:	6039      	str	r1, [r7, #0]
 801485c:	1d3b      	adds	r3, r7, #4
 801485e:	4618      	mov	r0, r3
 8014860:	f7ff feb2 	bl	80145c8 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8014864:	4603      	mov	r3, r0
 8014866:	681c      	ldr	r4, [r3, #0]
 8014868:	463b      	mov	r3, r7
 801486a:	4618      	mov	r0, r3
 801486c:	f7ff feac 	bl	80145c8 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8014870:	4603      	mov	r3, r0
 8014872:	681b      	ldr	r3, [r3, #0]
 8014874:	4619      	mov	r1, r3
 8014876:	4620      	mov	r0, r4
 8014878:	f7f8 ffd0 	bl	800d81c <_ZN8gemmlowp3SubIlEET_S1_S1_>
 801487c:	4603      	mov	r3, r0
 801487e:	4618      	mov	r0, r3
 8014880:	f7ff fd10 	bl	80142a4 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 8014884:	4603      	mov	r3, r0
 8014886:	4618      	mov	r0, r3
 8014888:	370c      	adds	r7, #12
 801488a:	46bd      	mov	sp, r7
 801488c:	bd90      	pop	{r4, r7, pc}

0801488e <_ZN8gemmlowpanIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator&, BitAnd)
 801488e:	b590      	push	{r4, r7, lr}
 8014890:	b083      	sub	sp, #12
 8014892:	af00      	add	r7, sp, #0
 8014894:	6078      	str	r0, [r7, #4]
 8014896:	6039      	str	r1, [r7, #0]
 8014898:	1d3b      	adds	r3, r7, #4
 801489a:	4618      	mov	r0, r3
 801489c:	f7ff fe94 	bl	80145c8 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 80148a0:	4603      	mov	r3, r0
 80148a2:	681c      	ldr	r4, [r3, #0]
 80148a4:	463b      	mov	r3, r7
 80148a6:	4618      	mov	r0, r3
 80148a8:	f7ff fe8e 	bl	80145c8 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 80148ac:	4603      	mov	r3, r0
 80148ae:	681b      	ldr	r3, [r3, #0]
 80148b0:	4619      	mov	r1, r3
 80148b2:	4620      	mov	r0, r4
 80148b4:	f7f8 ff53 	bl	800d75e <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 80148b8:	4603      	mov	r3, r0
 80148ba:	4618      	mov	r0, r3
 80148bc:	f7ff fcf2 	bl	80142a4 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 80148c0:	4603      	mov	r3, r0
 80148c2:	4618      	mov	r0, r3
 80148c4:	370c      	adds	r7, #12
 80148c6:	46bd      	mov	sp, r7
 80148c8:	bd90      	pop	{r4, r7, pc}

080148ca <_ZN8gemmlowp7RescaleILi0ElLi5EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 80148ca:	b5b0      	push	{r4, r5, r7, lr}
 80148cc:	b084      	sub	sp, #16
 80148ce:	af00      	add	r7, sp, #0
 80148d0:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 80148d2:	1d3b      	adds	r3, r7, #4
 80148d4:	4618      	mov	r0, r3
 80148d6:	f7ff fe77 	bl	80145c8 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 80148da:	4603      	mov	r3, r0
 80148dc:	681d      	ldr	r5, [r3, #0]
 80148de:	f107 030c 	add.w	r3, r7, #12
 80148e2:	4618      	mov	r0, r3
 80148e4:	f7f8 ff04 	bl	800d6f0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80148e8:	4604      	mov	r4, r0
 80148ea:	4628      	mov	r0, r5
 80148ec:	f000 f94e 	bl	8014b8c <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5ElEET0_S1_>
 80148f0:	4603      	mov	r3, r0
 80148f2:	6023      	str	r3, [r4, #0]
  return result;
 80148f4:	68fb      	ldr	r3, [r7, #12]
}
 80148f6:	4618      	mov	r0, r3
 80148f8:	3710      	adds	r7, #16
 80148fa:	46bd      	mov	sp, r7
 80148fc:	bdb0      	pop	{r4, r5, r7, pc}
	...

08014900 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_>:
FixedPoint<tRawType, 0> exp_on_interval_between_negative_one_quarter_and_0_excl(
 8014900:	b580      	push	{r7, lr}
 8014902:	b08a      	sub	sp, #40	; 0x28
 8014904:	af00      	add	r7, sp, #0
 8014906:	6078      	str	r0, [r7, #4]
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 1895147668, std::exp(-1.0 / 8.0));
 8014908:	482c      	ldr	r0, [pc, #176]	; (80149bc <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0xbc>)
 801490a:	f7f8 ff10 	bl	800d72e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 801490e:	4603      	mov	r3, r0
 8014910:	4618      	mov	r0, r3
 8014912:	f7f8 fef8 	bl	800d706 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8014916:	4603      	mov	r3, r0
 8014918:	627b      	str	r3, [r7, #36]	; 0x24
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 715827883, 1.0 / 3.0);
 801491a:	4829      	ldr	r0, [pc, #164]	; (80149c0 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0xc0>)
 801491c:	f7f8 ff07 	bl	800d72e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8014920:	4603      	mov	r3, r0
 8014922:	4618      	mov	r0, r3
 8014924:	f7f8 feef 	bl	800d706 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8014928:	4603      	mov	r3, r0
 801492a:	623b      	str	r3, [r7, #32]
  F x = a + F::template ConstantPOT<-3>();
 801492c:	f000 f93a 	bl	8014ba4 <_ZN8gemmlowp10FixedPointIlLi0EE11ConstantPOTILin3EEES1_v>
 8014930:	4603      	mov	r3, r0
 8014932:	4619      	mov	r1, r3
 8014934:	6878      	ldr	r0, [r7, #4]
 8014936:	f000 f93e 	bl	8014bb6 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801493a:	4603      	mov	r3, r0
 801493c:	61fb      	str	r3, [r7, #28]
  F x2 = x * x;
 801493e:	69f9      	ldr	r1, [r7, #28]
 8014940:	69f8      	ldr	r0, [r7, #28]
 8014942:	f000 f83f 	bl	80149c4 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8014946:	4603      	mov	r3, r0
 8014948:	61bb      	str	r3, [r7, #24]
  F x3 = x2 * x;
 801494a:	69f9      	ldr	r1, [r7, #28]
 801494c:	69b8      	ldr	r0, [r7, #24]
 801494e:	f000 f839 	bl	80149c4 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8014952:	4603      	mov	r3, r0
 8014954:	617b      	str	r3, [r7, #20]
  F x4 = x2 * x2;
 8014956:	69b9      	ldr	r1, [r7, #24]
 8014958:	69b8      	ldr	r0, [r7, #24]
 801495a:	f000 f833 	bl	80149c4 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801495e:	4603      	mov	r3, r0
 8014960:	613b      	str	r3, [r7, #16]
  F x4_over_4 = SaturatingRoundingMultiplyByPOT<-2>(x4);
 8014962:	6938      	ldr	r0, [r7, #16]
 8014964:	f000 f945 	bl	8014bf2 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>
 8014968:	4603      	mov	r3, r0
 801496a:	60fb      	str	r3, [r7, #12]
      SaturatingRoundingMultiplyByPOT<-1>(
 801496c:	6979      	ldr	r1, [r7, #20]
 801496e:	68f8      	ldr	r0, [r7, #12]
 8014970:	f000 f921 	bl	8014bb6 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8014974:	4603      	mov	r3, r0
 8014976:	6a39      	ldr	r1, [r7, #32]
 8014978:	4618      	mov	r0, r3
 801497a:	f000 f823 	bl	80149c4 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801497e:	4603      	mov	r3, r0
 8014980:	69b9      	ldr	r1, [r7, #24]
 8014982:	4618      	mov	r0, r3
 8014984:	f000 f917 	bl	8014bb6 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8014988:	4603      	mov	r3, r0
 801498a:	4618      	mov	r0, r3
 801498c:	f000 f947 	bl	8014c1e <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>
 8014990:	4603      	mov	r3, r0
 8014992:	60bb      	str	r3, [r7, #8]
  return AddSaturatingIf16Bit(
 8014994:	68b9      	ldr	r1, [r7, #8]
 8014996:	69f8      	ldr	r0, [r7, #28]
 8014998:	f000 f90d 	bl	8014bb6 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801499c:	4603      	mov	r3, r0
 801499e:	4619      	mov	r1, r3
 80149a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80149a2:	f000 f80f 	bl	80149c4 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 80149a6:	4603      	mov	r3, r0
 80149a8:	4619      	mov	r1, r3
 80149aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80149ac:	f000 f94d 	bl	8014c4a <_ZN8gemmlowp20AddSaturatingIf16BitIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 80149b0:	4603      	mov	r3, r0
}
 80149b2:	4618      	mov	r0, r3
 80149b4:	3728      	adds	r7, #40	; 0x28
 80149b6:	46bd      	mov	sp, r7
 80149b8:	bd80      	pop	{r7, pc}
 80149ba:	bf00      	nop
 80149bc:	70f5a894 	.word	0x70f5a894
 80149c0:	2aaaaaab 	.word	0x2aaaaaab

080149c4 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 80149c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80149c6:	b085      	sub	sp, #20
 80149c8:	af00      	add	r7, sp, #0
 80149ca:	6078      	str	r0, [r7, #4]
 80149cc:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 80149ce:	1d3b      	adds	r3, r7, #4
 80149d0:	4618      	mov	r0, r3
 80149d2:	f7f8 fe8d 	bl	800d6f0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80149d6:	4603      	mov	r3, r0
 80149d8:	681d      	ldr	r5, [r3, #0]
 80149da:	463b      	mov	r3, r7
 80149dc:	4618      	mov	r0, r3
 80149de:	f7f8 fe87 	bl	800d6f0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80149e2:	4603      	mov	r3, r0
 80149e4:	681e      	ldr	r6, [r3, #0]
 80149e6:	f107 030c 	add.w	r3, r7, #12
 80149ea:	4618      	mov	r0, r3
 80149ec:	f7f8 fe80 	bl	800d6f0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80149f0:	4604      	mov	r4, r0
 80149f2:	4631      	mov	r1, r6
 80149f4:	4628      	mov	r0, r5
 80149f6:	f7f8 fc9d 	bl	800d334 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 80149fa:	4603      	mov	r3, r0
 80149fc:	6023      	str	r3, [r4, #0]
  return c;
 80149fe:	68fb      	ldr	r3, [r7, #12]
}
 8014a00:	4618      	mov	r0, r3
 8014a02:	3714      	adds	r7, #20
 8014a04:	46bd      	mov	sp, r7
 8014a06:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014a08 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>:
FixedPoint<tRawType, tIntegerBits> SelectUsingMask(
 8014a08:	b590      	push	{r4, r7, lr}
 8014a0a:	b085      	sub	sp, #20
 8014a0c:	af00      	add	r7, sp, #0
 8014a0e:	60f8      	str	r0, [r7, #12]
 8014a10:	60b9      	str	r1, [r7, #8]
 8014a12:	607a      	str	r2, [r7, #4]
      SelectUsingMask(if_mask, then_val.raw(), else_val.raw()));
 8014a14:	f107 0308 	add.w	r3, r7, #8
 8014a18:	4618      	mov	r0, r3
 8014a1a:	f7f8 fe69 	bl	800d6f0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8014a1e:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 8014a20:	681c      	ldr	r4, [r3, #0]
      SelectUsingMask(if_mask, then_val.raw(), else_val.raw()));
 8014a22:	1d3b      	adds	r3, r7, #4
 8014a24:	4618      	mov	r0, r3
 8014a26:	f7f8 fe63 	bl	800d6f0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8014a2a:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 8014a2c:	681b      	ldr	r3, [r3, #0]
 8014a2e:	461a      	mov	r2, r3
 8014a30:	4621      	mov	r1, r4
 8014a32:	68f8      	ldr	r0, [r7, #12]
 8014a34:	f7f8 ff70 	bl	800d918 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 8014a38:	4603      	mov	r3, r0
 8014a3a:	4618      	mov	r0, r3
 8014a3c:	f7ff fbc1 	bl	80141c2 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8014a40:	4603      	mov	r3, r0
}
 8014a42:	4618      	mov	r0, r3
 8014a44:	3714      	adds	r7, #20
 8014a46:	46bd      	mov	sp, r7
 8014a48:	bd90      	pop	{r4, r7, pc}

08014a4a <_ZN8gemmlowp10MaskIfZeroIlLi5EEET_NS_10FixedPointIS1_XT0_EEE>:
MAKE_FIXEDPOINT_UNARY_FUNC_RETURNING_RAW(MaskIfZero)
 8014a4a:	b580      	push	{r7, lr}
 8014a4c:	b082      	sub	sp, #8
 8014a4e:	af00      	add	r7, sp, #0
 8014a50:	6078      	str	r0, [r7, #4]
 8014a52:	1d3b      	adds	r3, r7, #4
 8014a54:	4618      	mov	r0, r3
 8014a56:	f7ff fdb7 	bl	80145c8 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8014a5a:	4603      	mov	r3, r0
 8014a5c:	681b      	ldr	r3, [r3, #0]
 8014a5e:	4618      	mov	r0, r3
 8014a60:	f000 f911 	bl	8014c86 <_ZN8gemmlowp10MaskIfZeroIlEET_S1_>
 8014a64:	4603      	mov	r3, r0
 8014a66:	4618      	mov	r0, r3
 8014a68:	3708      	adds	r7, #8
 8014a6a:	46bd      	mov	sp, r7
 8014a6c:	bd80      	pop	{r7, pc}

08014a6e <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>:
  RawType& raw() { return i_; }
 8014a6e:	b480      	push	{r7}
 8014a70:	b083      	sub	sp, #12
 8014a72:	af00      	add	r7, sp, #0
 8014a74:	6078      	str	r0, [r7, #4]
 8014a76:	687b      	ldr	r3, [r7, #4]
 8014a78:	4618      	mov	r0, r3
 8014a7a:	370c      	adds	r7, #12
 8014a7c:	46bd      	mov	sp, r7
 8014a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a82:	4770      	bx	lr

08014a84 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 8014a84:	b580      	push	{r7, lr}
 8014a86:	b082      	sub	sp, #8
 8014a88:	af00      	add	r7, sp, #0
 8014a8a:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 8014a8c:	6878      	ldr	r0, [r7, #4]
 8014a8e:	f000 f90c 	bl	8014caa <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin12ElLin1EE4evalEl>
 8014a92:	4603      	mov	r3, r0
}
 8014a94:	4618      	mov	r0, r3
 8014a96:	3708      	adds	r7, #8
 8014a98:	46bd      	mov	sp, r7
 8014a9a:	bd80      	pop	{r7, pc}

08014a9c <_ZN8gemmlowp10FixedPointIlLi12EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 8014a9c:	b580      	push	{r7, lr}
 8014a9e:	b084      	sub	sp, #16
 8014aa0:	af00      	add	r7, sp, #0
 8014aa2:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 8014aa4:	f107 030c 	add.w	r3, r7, #12
 8014aa8:	4618      	mov	r0, r3
 8014aaa:	f7ff ffe0 	bl	8014a6e <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8014aae:	4602      	mov	r2, r0
 8014ab0:	687b      	ldr	r3, [r7, #4]
 8014ab2:	6013      	str	r3, [r2, #0]
    return retval;
 8014ab4:	68fb      	ldr	r3, [r7, #12]
  }
 8014ab6:	4618      	mov	r0, r3
 8014ab8:	3710      	adds	r7, #16
 8014aba:	46bd      	mov	sp, r7
 8014abc:	bd80      	pop	{r7, pc}

08014abe <_ZSt3maxIaERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8014abe:	b480      	push	{r7}
 8014ac0:	b083      	sub	sp, #12
 8014ac2:	af00      	add	r7, sp, #0
 8014ac4:	6078      	str	r0, [r7, #4]
 8014ac6:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8014ac8:	687b      	ldr	r3, [r7, #4]
 8014aca:	f993 2000 	ldrsb.w	r2, [r3]
 8014ace:	683b      	ldr	r3, [r7, #0]
 8014ad0:	f993 3000 	ldrsb.w	r3, [r3]
 8014ad4:	429a      	cmp	r2, r3
 8014ad6:	da01      	bge.n	8014adc <_ZSt3maxIaERKT_S2_S2_+0x1e>
	return __b;
 8014ad8:	683b      	ldr	r3, [r7, #0]
 8014ada:	e000      	b.n	8014ade <_ZSt3maxIaERKT_S2_S2_+0x20>
      return __a;
 8014adc:	687b      	ldr	r3, [r7, #4]
    }
 8014ade:	4618      	mov	r0, r3
 8014ae0:	370c      	adds	r7, #12
 8014ae2:	46bd      	mov	sp, r7
 8014ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ae8:	4770      	bx	lr

08014aea <_ZN8gemmlowp10FixedPointIlLi0EE12ScalarRawMaxEv>:
  static const ScalarRawType ScalarRawMax() {
 8014aea:	b580      	push	{r7, lr}
 8014aec:	af00      	add	r7, sp, #0
    return std::numeric_limits<ScalarRawType>::max();
 8014aee:	f7f8 fa08 	bl	800cf02 <_ZNSt14numeric_limitsIlE3maxEv>
 8014af2:	4603      	mov	r3, r0
  }
 8014af4:	4618      	mov	r0, r3
 8014af6:	bd80      	pop	{r7, pc}

08014af8 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>:
  RawType& raw() { return i_; }
 8014af8:	b480      	push	{r7}
 8014afa:	b083      	sub	sp, #12
 8014afc:	af00      	add	r7, sp, #0
 8014afe:	6078      	str	r0, [r7, #4]
 8014b00:	687b      	ldr	r3, [r7, #4]
 8014b02:	4618      	mov	r0, r3
 8014b04:	370c      	adds	r7, #12
 8014b06:	46bd      	mov	sp, r7
 8014b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b0c:	4770      	bx	lr

08014b0e <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 8014b0e:	b580      	push	{r7, lr}
 8014b10:	b084      	sub	sp, #16
 8014b12:	af00      	add	r7, sp, #0
 8014b14:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 8014b16:	f107 030c 	add.w	r3, r7, #12
 8014b1a:	4618      	mov	r0, r3
 8014b1c:	f7ff ffec 	bl	8014af8 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8014b20:	4602      	mov	r2, r0
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	6013      	str	r3, [r2, #0]
    return retval;
 8014b26:	68fb      	ldr	r3, [r7, #12]
  }
 8014b28:	4618      	mov	r0, r3
 8014b2a:	3710      	adds	r7, #16
 8014b2c:	46bd      	mov	sp, r7
 8014b2e:	bd80      	pop	{r7, pc}

08014b30 <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>:
  RawType& raw() { return i_; }
 8014b30:	b480      	push	{r7}
 8014b32:	b083      	sub	sp, #12
 8014b34:	af00      	add	r7, sp, #0
 8014b36:	6078      	str	r0, [r7, #4]
 8014b38:	687b      	ldr	r3, [r7, #4]
 8014b3a:	4618      	mov	r0, r3
 8014b3c:	370c      	adds	r7, #12
 8014b3e:	46bd      	mov	sp, r7
 8014b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b44:	4770      	bx	lr

08014b46 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 8014b46:	b580      	push	{r7, lr}
 8014b48:	b082      	sub	sp, #8
 8014b4a:	af00      	add	r7, sp, #0
 8014b4c:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 8014b4e:	6878      	ldr	r0, [r7, #4]
 8014b50:	f000 f8b8 	bl	8014cc4 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl>
 8014b54:	4603      	mov	r3, r0
}
 8014b56:	4618      	mov	r0, r3
 8014b58:	3708      	adds	r7, #8
 8014b5a:	46bd      	mov	sp, r7
 8014b5c:	bd80      	pop	{r7, pc}

08014b5e <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>:
  RawType& raw() { return i_; }
 8014b5e:	b480      	push	{r7}
 8014b60:	b083      	sub	sp, #12
 8014b62:	af00      	add	r7, sp, #0
 8014b64:	6078      	str	r0, [r7, #4]
 8014b66:	687b      	ldr	r3, [r7, #4]
 8014b68:	4618      	mov	r0, r3
 8014b6a:	370c      	adds	r7, #12
 8014b6c:	46bd      	mov	sp, r7
 8014b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b72:	4770      	bx	lr

08014b74 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 8014b74:	b580      	push	{r7, lr}
 8014b76:	b082      	sub	sp, #8
 8014b78:	af00      	add	r7, sp, #0
 8014b7a:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 8014b7c:	6878      	ldr	r0, [r7, #4]
 8014b7e:	f000 f8e3 	bl	8014d48 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl>
 8014b82:	4603      	mov	r3, r0
}
 8014b84:	4618      	mov	r0, r3
 8014b86:	3708      	adds	r7, #8
 8014b88:	46bd      	mov	sp, r7
 8014b8a:	bd80      	pop	{r7, pc}

08014b8c <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 8014b8c:	b580      	push	{r7, lr}
 8014b8e:	b082      	sub	sp, #8
 8014b90:	af00      	add	r7, sp, #0
 8014b92:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 8014b94:	6878      	ldr	r0, [r7, #4]
 8014b96:	f000 f919 	bl	8014dcc <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl>
 8014b9a:	4603      	mov	r3, r0
}
 8014b9c:	4618      	mov	r0, r3
 8014b9e:	3708      	adds	r7, #8
 8014ba0:	46bd      	mov	sp, r7
 8014ba2:	bd80      	pop	{r7, pc}

08014ba4 <_ZN8gemmlowp10FixedPointIlLi0EE11ConstantPOTILin3EEES1_v>:
  static FixedPoint ConstantPOT() {
 8014ba4:	b580      	push	{r7, lr}
 8014ba6:	af00      	add	r7, sp, #0
    return FromScalarRaw(ScalarRawType(1) << kOffset);
 8014ba8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8014bac:	f7f8 fdab 	bl	800d706 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8014bb0:	4603      	mov	r3, r0
  }
 8014bb2:	4618      	mov	r0, r3
 8014bb4:	bd80      	pop	{r7, pc}

08014bb6 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 8014bb6:	b590      	push	{r4, r7, lr}
 8014bb8:	b083      	sub	sp, #12
 8014bba:	af00      	add	r7, sp, #0
 8014bbc:	6078      	str	r0, [r7, #4]
 8014bbe:	6039      	str	r1, [r7, #0]
 8014bc0:	1d3b      	adds	r3, r7, #4
 8014bc2:	4618      	mov	r0, r3
 8014bc4:	f7f8 fd94 	bl	800d6f0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8014bc8:	4603      	mov	r3, r0
 8014bca:	681c      	ldr	r4, [r3, #0]
 8014bcc:	463b      	mov	r3, r7
 8014bce:	4618      	mov	r0, r3
 8014bd0:	f7f8 fd8e 	bl	800d6f0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8014bd4:	4603      	mov	r3, r0
 8014bd6:	681b      	ldr	r3, [r3, #0]
 8014bd8:	4619      	mov	r1, r3
 8014bda:	4620      	mov	r0, r4
 8014bdc:	f7f8 fdf0 	bl	800d7c0 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 8014be0:	4603      	mov	r3, r0
 8014be2:	4618      	mov	r0, r3
 8014be4:	f7ff faed 	bl	80141c2 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8014be8:	4603      	mov	r3, r0
 8014bea:	4618      	mov	r0, r3
 8014bec:	370c      	adds	r7, #12
 8014bee:	46bd      	mov	sp, r7
 8014bf0:	bd90      	pop	{r4, r7, pc}

08014bf2 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>:
FixedPoint<tRawType, tIntegerBits> SaturatingRoundingMultiplyByPOT(
 8014bf2:	b580      	push	{r7, lr}
 8014bf4:	b082      	sub	sp, #8
 8014bf6:	af00      	add	r7, sp, #0
 8014bf8:	6078      	str	r0, [r7, #4]
      SaturatingRoundingMultiplyByPOT<tExponent>(a.raw()));
 8014bfa:	1d3b      	adds	r3, r7, #4
 8014bfc:	4618      	mov	r0, r3
 8014bfe:	f7f8 fd77 	bl	800d6f0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8014c02:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 8014c04:	681b      	ldr	r3, [r3, #0]
 8014c06:	4618      	mov	r0, r3
 8014c08:	f000 f922 	bl	8014e50 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElEET0_S1_>
 8014c0c:	4603      	mov	r3, r0
 8014c0e:	4618      	mov	r0, r3
 8014c10:	f7ff fad7 	bl	80141c2 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8014c14:	4603      	mov	r3, r0
}
 8014c16:	4618      	mov	r0, r3
 8014c18:	3708      	adds	r7, #8
 8014c1a:	46bd      	mov	sp, r7
 8014c1c:	bd80      	pop	{r7, pc}

08014c1e <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>:
FixedPoint<tRawType, tIntegerBits> SaturatingRoundingMultiplyByPOT(
 8014c1e:	b580      	push	{r7, lr}
 8014c20:	b082      	sub	sp, #8
 8014c22:	af00      	add	r7, sp, #0
 8014c24:	6078      	str	r0, [r7, #4]
      SaturatingRoundingMultiplyByPOT<tExponent>(a.raw()));
 8014c26:	1d3b      	adds	r3, r7, #4
 8014c28:	4618      	mov	r0, r3
 8014c2a:	f7f8 fd61 	bl	800d6f0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8014c2e:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 8014c30:	681b      	ldr	r3, [r3, #0]
 8014c32:	4618      	mov	r0, r3
 8014c34:	f7f8 fde6 	bl	800d804 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElEET0_S1_>
 8014c38:	4603      	mov	r3, r0
 8014c3a:	4618      	mov	r0, r3
 8014c3c:	f7ff fac1 	bl	80141c2 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8014c40:	4603      	mov	r3, r0
}
 8014c42:	4618      	mov	r0, r3
 8014c44:	3708      	adds	r7, #8
 8014c46:	46bd      	mov	sp, r7
 8014c48:	bd80      	pop	{r7, pc}

08014c4a <_ZN8gemmlowp20AddSaturatingIf16BitIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
FixedPoint<tRawType, tIntegerBits> AddSaturatingIf16Bit(
 8014c4a:	b590      	push	{r4, r7, lr}
 8014c4c:	b083      	sub	sp, #12
 8014c4e:	af00      	add	r7, sp, #0
 8014c50:	6078      	str	r0, [r7, #4]
 8014c52:	6039      	str	r1, [r7, #0]
      AddSaturatingIf16Bit(a.raw(), b.raw()));
 8014c54:	1d3b      	adds	r3, r7, #4
 8014c56:	4618      	mov	r0, r3
 8014c58:	f7f8 fd4a 	bl	800d6f0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8014c5c:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 8014c5e:	681c      	ldr	r4, [r3, #0]
      AddSaturatingIf16Bit(a.raw(), b.raw()));
 8014c60:	463b      	mov	r3, r7
 8014c62:	4618      	mov	r0, r3
 8014c64:	f7f8 fd44 	bl	800d6f0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8014c68:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 8014c6a:	681b      	ldr	r3, [r3, #0]
 8014c6c:	4619      	mov	r1, r3
 8014c6e:	4620      	mov	r0, r4
 8014c70:	f000 f8fa 	bl	8014e68 <_ZN8gemmlowp20AddSaturatingIf16BitIlEET_S1_S1_>
 8014c74:	4603      	mov	r3, r0
 8014c76:	4618      	mov	r0, r3
 8014c78:	f7ff faa3 	bl	80141c2 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8014c7c:	4603      	mov	r3, r0
}
 8014c7e:	4618      	mov	r0, r3
 8014c80:	370c      	adds	r7, #12
 8014c82:	46bd      	mov	sp, r7
 8014c84:	bd90      	pop	{r4, r7, pc}

08014c86 <_ZN8gemmlowp10MaskIfZeroIlEET_S1_>:
tIntegerType MaskIfZero(tIntegerType a) {
 8014c86:	b580      	push	{r7, lr}
 8014c88:	b082      	sub	sp, #8
 8014c8a:	af00      	add	r7, sp, #0
 8014c8c:	6078      	str	r0, [r7, #4]
  return MaskIfNonZero<tIntegerType>(!a);
 8014c8e:	687b      	ldr	r3, [r7, #4]
 8014c90:	2b00      	cmp	r3, #0
 8014c92:	bf0c      	ite	eq
 8014c94:	2301      	moveq	r3, #1
 8014c96:	2300      	movne	r3, #0
 8014c98:	b2db      	uxtb	r3, r3
 8014c9a:	4618      	mov	r0, r3
 8014c9c:	f7f8 fdcc 	bl	800d838 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8014ca0:	4603      	mov	r3, r0
}
 8014ca2:	4618      	mov	r0, r3
 8014ca4:	3708      	adds	r7, #8
 8014ca6:	46bd      	mov	sp, r7
 8014ca8:	bd80      	pop	{r7, pc}

08014caa <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin12ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 8014caa:	b580      	push	{r7, lr}
 8014cac:	b082      	sub	sp, #8
 8014cae:	af00      	add	r7, sp, #0
 8014cb0:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 8014cb2:	210c      	movs	r1, #12
 8014cb4:	6878      	ldr	r0, [r7, #4]
 8014cb6:	f7f8 fc95 	bl	800d5e4 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8014cba:	4603      	mov	r3, r0
  }
 8014cbc:	4618      	mov	r0, r3
 8014cbe:	3708      	adds	r7, #8
 8014cc0:	46bd      	mov	sp, r7
 8014cc2:	bd80      	pop	{r7, pc}

08014cc4 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 8014cc4:	b580      	push	{r7, lr}
 8014cc6:	b08a      	sub	sp, #40	; 0x28
 8014cc8:	af00      	add	r7, sp, #0
 8014cca:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 8014ccc:	f7f8 fb19 	bl	800d302 <_ZNSt14numeric_limitsIlE3minEv>
 8014cd0:	4603      	mov	r3, r0
 8014cd2:	4618      	mov	r0, r3
 8014cd4:	f7f8 fd38 	bl	800d748 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8014cd8:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 8014cda:	f7f8 f912 	bl	800cf02 <_ZNSt14numeric_limitsIlE3maxEv>
 8014cde:	4603      	mov	r3, r0
 8014ce0:	4618      	mov	r0, r3
 8014ce2:	f7f8 fd31 	bl	800d748 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8014ce6:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 8014ce8:	2320      	movs	r3, #32
 8014cea:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 8014cec:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8014cf0:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 8014cf2:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
 8014cf6:	f7f8 fd27 	bl	800d748 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8014cfa:	4603      	mov	r3, r0
 8014cfc:	4619      	mov	r1, r3
 8014cfe:	6878      	ldr	r0, [r7, #4]
 8014d00:	f7f8 fd6c 	bl	800d7dc <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 8014d04:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 8014d06:	480f      	ldr	r0, [pc, #60]	; (8014d44 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl+0x80>)
 8014d08:	f7f8 fd1e 	bl	800d748 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8014d0c:	4603      	mov	r3, r0
 8014d0e:	4619      	mov	r1, r3
 8014d10:	6878      	ldr	r0, [r7, #4]
 8014d12:	f7f8 fd41 	bl	800d798 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 8014d16:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 8014d18:	2102      	movs	r1, #2
 8014d1a:	6878      	ldr	r0, [r7, #4]
 8014d1c:	f7f8 fdb6 	bl	800d88c <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 8014d20:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 8014d22:	68fa      	ldr	r2, [r7, #12]
 8014d24:	6a39      	ldr	r1, [r7, #32]
 8014d26:	6978      	ldr	r0, [r7, #20]
 8014d28:	f7f8 fdf6 	bl	800d918 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 8014d2c:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 8014d2e:	68fa      	ldr	r2, [r7, #12]
 8014d30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014d32:	6938      	ldr	r0, [r7, #16]
 8014d34:	f7f8 fdf0 	bl	800d918 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 8014d38:	60f8      	str	r0, [r7, #12]
    return result;
 8014d3a:	68fb      	ldr	r3, [r7, #12]
  }
 8014d3c:	4618      	mov	r0, r3
 8014d3e:	3728      	adds	r7, #40	; 0x28
 8014d40:	46bd      	mov	sp, r7
 8014d42:	bd80      	pop	{r7, pc}
 8014d44:	e0000001 	.word	0xe0000001

08014d48 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 8014d48:	b580      	push	{r7, lr}
 8014d4a:	b08a      	sub	sp, #40	; 0x28
 8014d4c:	af00      	add	r7, sp, #0
 8014d4e:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 8014d50:	f7f8 fad7 	bl	800d302 <_ZNSt14numeric_limitsIlE3minEv>
 8014d54:	4603      	mov	r3, r0
 8014d56:	4618      	mov	r0, r3
 8014d58:	f7f8 fcf6 	bl	800d748 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8014d5c:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 8014d5e:	f7f8 f8d0 	bl	800cf02 <_ZNSt14numeric_limitsIlE3maxEv>
 8014d62:	4603      	mov	r3, r0
 8014d64:	4618      	mov	r0, r3
 8014d66:	f7f8 fcef 	bl	800d748 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8014d6a:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 8014d6c:	2320      	movs	r3, #32
 8014d6e:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 8014d70:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8014d74:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 8014d76:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
 8014d7a:	f7f8 fce5 	bl	800d748 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8014d7e:	4603      	mov	r3, r0
 8014d80:	4619      	mov	r1, r3
 8014d82:	6878      	ldr	r0, [r7, #4]
 8014d84:	f7f8 fd2a 	bl	800d7dc <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 8014d88:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 8014d8a:	480f      	ldr	r0, [pc, #60]	; (8014dc8 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl+0x80>)
 8014d8c:	f7f8 fcdc 	bl	800d748 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8014d90:	4603      	mov	r3, r0
 8014d92:	4619      	mov	r1, r3
 8014d94:	6878      	ldr	r0, [r7, #4]
 8014d96:	f7f8 fcff 	bl	800d798 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 8014d9a:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 8014d9c:	2101      	movs	r1, #1
 8014d9e:	6878      	ldr	r0, [r7, #4]
 8014da0:	f7f8 fd74 	bl	800d88c <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 8014da4:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 8014da6:	68fa      	ldr	r2, [r7, #12]
 8014da8:	6a39      	ldr	r1, [r7, #32]
 8014daa:	6978      	ldr	r0, [r7, #20]
 8014dac:	f7f8 fdb4 	bl	800d918 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 8014db0:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 8014db2:	68fa      	ldr	r2, [r7, #12]
 8014db4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014db6:	6938      	ldr	r0, [r7, #16]
 8014db8:	f7f8 fdae 	bl	800d918 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 8014dbc:	60f8      	str	r0, [r7, #12]
    return result;
 8014dbe:	68fb      	ldr	r3, [r7, #12]
  }
 8014dc0:	4618      	mov	r0, r3
 8014dc2:	3728      	adds	r7, #40	; 0x28
 8014dc4:	46bd      	mov	sp, r7
 8014dc6:	bd80      	pop	{r7, pc}
 8014dc8:	c0000001 	.word	0xc0000001

08014dcc <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 8014dcc:	b580      	push	{r7, lr}
 8014dce:	b08a      	sub	sp, #40	; 0x28
 8014dd0:	af00      	add	r7, sp, #0
 8014dd2:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 8014dd4:	f7f8 fa95 	bl	800d302 <_ZNSt14numeric_limitsIlE3minEv>
 8014dd8:	4603      	mov	r3, r0
 8014dda:	4618      	mov	r0, r3
 8014ddc:	f7f8 fcb4 	bl	800d748 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8014de0:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 8014de2:	f7f8 f88e 	bl	800cf02 <_ZNSt14numeric_limitsIlE3maxEv>
 8014de6:	4603      	mov	r3, r0
 8014de8:	4618      	mov	r0, r3
 8014dea:	f7f8 fcad 	bl	800d748 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8014dee:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 8014df0:	2320      	movs	r3, #32
 8014df2:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 8014df4:	f06f 437c 	mvn.w	r3, #4227858432	; 0xfc000000
 8014df8:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 8014dfa:	f06f 407c 	mvn.w	r0, #4227858432	; 0xfc000000
 8014dfe:	f7f8 fca3 	bl	800d748 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8014e02:	4603      	mov	r3, r0
 8014e04:	4619      	mov	r1, r3
 8014e06:	6878      	ldr	r0, [r7, #4]
 8014e08:	f7f8 fce8 	bl	800d7dc <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 8014e0c:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 8014e0e:	480f      	ldr	r0, [pc, #60]	; (8014e4c <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl+0x80>)
 8014e10:	f7f8 fc9a 	bl	800d748 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8014e14:	4603      	mov	r3, r0
 8014e16:	4619      	mov	r1, r3
 8014e18:	6878      	ldr	r0, [r7, #4]
 8014e1a:	f7f8 fcbd 	bl	800d798 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 8014e1e:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 8014e20:	2105      	movs	r1, #5
 8014e22:	6878      	ldr	r0, [r7, #4]
 8014e24:	f7f8 fd32 	bl	800d88c <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 8014e28:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 8014e2a:	68fa      	ldr	r2, [r7, #12]
 8014e2c:	6a39      	ldr	r1, [r7, #32]
 8014e2e:	6978      	ldr	r0, [r7, #20]
 8014e30:	f7f8 fd72 	bl	800d918 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 8014e34:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 8014e36:	68fa      	ldr	r2, [r7, #12]
 8014e38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014e3a:	6938      	ldr	r0, [r7, #16]
 8014e3c:	f7f8 fd6c 	bl	800d918 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 8014e40:	60f8      	str	r0, [r7, #12]
    return result;
 8014e42:	68fb      	ldr	r3, [r7, #12]
  }
 8014e44:	4618      	mov	r0, r3
 8014e46:	3728      	adds	r7, #40	; 0x28
 8014e48:	46bd      	mov	sp, r7
 8014e4a:	bd80      	pop	{r7, pc}
 8014e4c:	fc000001 	.word	0xfc000001

08014e50 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 8014e50:	b580      	push	{r7, lr}
 8014e52:	b082      	sub	sp, #8
 8014e54:	af00      	add	r7, sp, #0
 8014e56:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 8014e58:	6878      	ldr	r0, [r7, #4]
 8014e5a:	f000 f813 	bl	8014e84 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin2ElLin1EE4evalEl>
 8014e5e:	4603      	mov	r3, r0
}
 8014e60:	4618      	mov	r0, r3
 8014e62:	3708      	adds	r7, #8
 8014e64:	46bd      	mov	sp, r7
 8014e66:	bd80      	pop	{r7, pc}

08014e68 <_ZN8gemmlowp20AddSaturatingIf16BitIlEET_S1_S1_>:
IntegerType AddSaturatingIf16Bit(IntegerType a, IntegerType b) {
 8014e68:	b580      	push	{r7, lr}
 8014e6a:	b082      	sub	sp, #8
 8014e6c:	af00      	add	r7, sp, #0
 8014e6e:	6078      	str	r0, [r7, #4]
 8014e70:	6039      	str	r1, [r7, #0]
  return AddSaturatingIf16BitImpl<IntegerType, sizeof(ScalarType) == 2>::Run(a,
 8014e72:	6839      	ldr	r1, [r7, #0]
 8014e74:	6878      	ldr	r0, [r7, #4]
 8014e76:	f000 f812 	bl	8014e9e <_ZN8gemmlowp24AddSaturatingIf16BitImplIlLb0EE3RunEll>
 8014e7a:	4603      	mov	r3, r0
}
 8014e7c:	4618      	mov	r0, r3
 8014e7e:	3708      	adds	r7, #8
 8014e80:	46bd      	mov	sp, r7
 8014e82:	bd80      	pop	{r7, pc}

08014e84 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin2ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 8014e84:	b580      	push	{r7, lr}
 8014e86:	b082      	sub	sp, #8
 8014e88:	af00      	add	r7, sp, #0
 8014e8a:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 8014e8c:	2102      	movs	r1, #2
 8014e8e:	6878      	ldr	r0, [r7, #4]
 8014e90:	f7f8 fba8 	bl	800d5e4 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8014e94:	4603      	mov	r3, r0
  }
 8014e96:	4618      	mov	r0, r3
 8014e98:	3708      	adds	r7, #8
 8014e9a:	46bd      	mov	sp, r7
 8014e9c:	bd80      	pop	{r7, pc}

08014e9e <_ZN8gemmlowp24AddSaturatingIf16BitImplIlLb0EE3RunEll>:
  static IntegerType Run(IntegerType a, IntegerType b) { return Add(a, b); }
 8014e9e:	b580      	push	{r7, lr}
 8014ea0:	b082      	sub	sp, #8
 8014ea2:	af00      	add	r7, sp, #0
 8014ea4:	6078      	str	r0, [r7, #4]
 8014ea6:	6039      	str	r1, [r7, #0]
 8014ea8:	6839      	ldr	r1, [r7, #0]
 8014eaa:	6878      	ldr	r0, [r7, #4]
 8014eac:	f7f8 fc88 	bl	800d7c0 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 8014eb0:	4603      	mov	r3, r0
 8014eb2:	4618      	mov	r0, r3
 8014eb4:	3708      	adds	r7, #8
 8014eb6:	46bd      	mov	sp, r7
 8014eb8:	bd80      	pop	{r7, pc}

08014eba <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
namespace reference_ops {

inline bool AveragePool(const PoolParams& params,
                        const RuntimeShape& input_shape,
                        const float* input_data,
                        const RuntimeShape& output_shape, float* output_data) {
 8014eba:	b590      	push	{r4, r7, lr}
 8014ebc:	ed2d 8b02 	vpush	{d8}
 8014ec0:	b0a7      	sub	sp, #156	; 0x9c
 8014ec2:	af02      	add	r7, sp, #8
 8014ec4:	60f8      	str	r0, [r7, #12]
 8014ec6:	60b9      	str	r1, [r7, #8]
 8014ec8:	607a      	str	r2, [r7, #4]
 8014eca:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 8014ecc:	68b8      	ldr	r0, [r7, #8]
 8014ece:	f7f9 fd0b 	bl	800e8e8 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8014ed2:	4603      	mov	r3, r0
 8014ed4:	2b04      	cmp	r3, #4
 8014ed6:	d001      	beq.n	8014edc <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x22>
 8014ed8:	f011 ff11 	bl	8026cfe <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 8014edc:	6838      	ldr	r0, [r7, #0]
 8014ede:	f7f9 fd03 	bl	800e8e8 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8014ee2:	4603      	mov	r3, r0
 8014ee4:	2b04      	cmp	r3, #4
 8014ee6:	d001      	beq.n	8014eec <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x32>
 8014ee8:	f011 ff09 	bl	8026cfe <abort>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 8014eec:	2300      	movs	r3, #0
 8014eee:	683a      	ldr	r2, [r7, #0]
 8014ef0:	2100      	movs	r1, #0
 8014ef2:	68b8      	ldr	r0, [r7, #8]
 8014ef4:	f7fe fba5 	bl	8013642 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8014ef8:	66f8      	str	r0, [r7, #108]	; 0x6c
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 8014efa:	2303      	movs	r3, #3
 8014efc:	683a      	ldr	r2, [r7, #0]
 8014efe:	2103      	movs	r1, #3
 8014f00:	68b8      	ldr	r0, [r7, #8]
 8014f02:	f7fe fb9e 	bl	8013642 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8014f06:	66b8      	str	r0, [r7, #104]	; 0x68
  const int input_height = input_shape.Dims(1);
 8014f08:	2101      	movs	r1, #1
 8014f0a:	68b8      	ldr	r0, [r7, #8]
 8014f0c:	f7fe faa1 	bl	8013452 <_ZNK6tflite12RuntimeShape4DimsEi>
 8014f10:	6678      	str	r0, [r7, #100]	; 0x64
  const int input_width = input_shape.Dims(2);
 8014f12:	2102      	movs	r1, #2
 8014f14:	68b8      	ldr	r0, [r7, #8]
 8014f16:	f7fe fa9c 	bl	8013452 <_ZNK6tflite12RuntimeShape4DimsEi>
 8014f1a:	6638      	str	r0, [r7, #96]	; 0x60
  const int output_height = output_shape.Dims(1);
 8014f1c:	2101      	movs	r1, #1
 8014f1e:	6838      	ldr	r0, [r7, #0]
 8014f20:	f7fe fa97 	bl	8013452 <_ZNK6tflite12RuntimeShape4DimsEi>
 8014f24:	65f8      	str	r0, [r7, #92]	; 0x5c
  const int output_width = output_shape.Dims(2);
 8014f26:	2102      	movs	r1, #2
 8014f28:	6838      	ldr	r0, [r7, #0]
 8014f2a:	f7fe fa92 	bl	8013452 <_ZNK6tflite12RuntimeShape4DimsEi>
 8014f2e:	65b8      	str	r0, [r7, #88]	; 0x58
  const int stride_height = params.stride_height;
 8014f30:	68fb      	ldr	r3, [r7, #12]
 8014f32:	68db      	ldr	r3, [r3, #12]
 8014f34:	657b      	str	r3, [r7, #84]	; 0x54
  const int stride_width = params.stride_width;
 8014f36:	68fb      	ldr	r3, [r7, #12]
 8014f38:	691b      	ldr	r3, [r3, #16]
 8014f3a:	653b      	str	r3, [r7, #80]	; 0x50
  for (int batch = 0; batch < batches; ++batch) {
 8014f3c:	2300      	movs	r3, #0
 8014f3e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8014f42:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8014f46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014f48:	429a      	cmp	r2, r3
 8014f4a:	f280 80f9 	bge.w	8015140 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x286>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8014f4e:	2300      	movs	r3, #0
 8014f50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8014f54:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8014f58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014f5a:	429a      	cmp	r2, r3
 8014f5c:	f280 80ea 	bge.w	8015134 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x27a>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8014f60:	2300      	movs	r3, #0
 8014f62:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8014f66:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8014f6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014f6c:	429a      	cmp	r2, r3
 8014f6e:	f280 80db 	bge.w	8015128 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x26e>
        for (int channel = 0; channel < depth; ++channel) {
 8014f72:	2300      	movs	r3, #0
 8014f74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8014f78:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8014f7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014f7e:	429a      	cmp	r2, r3
 8014f80:	f280 80cc 	bge.w	801511c <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x262>
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
 8014f84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014f88:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014f8a:	fb02 f303 	mul.w	r3, r2, r3
 8014f8e:	68fa      	ldr	r2, [r7, #12]
 8014f90:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
          const int in_x_origin =
 8014f94:	1a9b      	subs	r3, r3, r2
 8014f96:	64fb      	str	r3, [r7, #76]	; 0x4c
          const int in_y_origin =
              (out_y * stride_height) - params.padding_values.height;
 8014f98:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014f9c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014f9e:	fb02 f303 	mul.w	r3, r2, r3
 8014fa2:	68fa      	ldr	r2, [r7, #12]
 8014fa4:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
          const int in_y_origin =
 8014fa8:	1a9b      	subs	r3, r3, r2
 8014faa:	64bb      	str	r3, [r7, #72]	; 0x48
          // Compute the boundaries of the filter region clamped so as to
          // ensure that the filter window fits in the input array.
          const int filter_x_start = std::max(0, -in_x_origin);
 8014fac:	2300      	movs	r3, #0
 8014fae:	617b      	str	r3, [r7, #20]
 8014fb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014fb2:	425b      	negs	r3, r3
 8014fb4:	61bb      	str	r3, [r7, #24]
 8014fb6:	f107 0218 	add.w	r2, r7, #24
 8014fba:	f107 0314 	add.w	r3, r7, #20
 8014fbe:	4611      	mov	r1, r2
 8014fc0:	4618      	mov	r0, r3
 8014fc2:	f7f9 f9a7 	bl	800e314 <_ZSt3maxIiERKT_S2_S2_>
 8014fc6:	4603      	mov	r3, r0
 8014fc8:	681b      	ldr	r3, [r3, #0]
 8014fca:	647b      	str	r3, [r7, #68]	; 0x44
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
 8014fcc:	68fb      	ldr	r3, [r7, #12]
 8014fce:	f103 0018 	add.w	r0, r3, #24
 8014fd2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8014fd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014fd6:	1ad3      	subs	r3, r2, r3
 8014fd8:	61fb      	str	r3, [r7, #28]
 8014fda:	f107 031c 	add.w	r3, r7, #28
 8014fde:	4619      	mov	r1, r3
 8014fe0:	f7f8 fd04 	bl	800d9ec <_ZSt3minIiERKT_S2_S2_>
 8014fe4:	4603      	mov	r3, r0
 8014fe6:	681b      	ldr	r3, [r3, #0]
 8014fe8:	643b      	str	r3, [r7, #64]	; 0x40
          const int filter_y_start = std::max(0, -in_y_origin);
 8014fea:	2300      	movs	r3, #0
 8014fec:	623b      	str	r3, [r7, #32]
 8014fee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014ff0:	425b      	negs	r3, r3
 8014ff2:	627b      	str	r3, [r7, #36]	; 0x24
 8014ff4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8014ff8:	f107 0320 	add.w	r3, r7, #32
 8014ffc:	4611      	mov	r1, r2
 8014ffe:	4618      	mov	r0, r3
 8015000:	f7f9 f988 	bl	800e314 <_ZSt3maxIiERKT_S2_S2_>
 8015004:	4603      	mov	r3, r0
 8015006:	681b      	ldr	r3, [r3, #0]
 8015008:	63fb      	str	r3, [r7, #60]	; 0x3c
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
 801500a:	68fb      	ldr	r3, [r7, #12]
 801500c:	f103 0014 	add.w	r0, r3, #20
 8015010:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8015012:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015014:	1ad3      	subs	r3, r2, r3
 8015016:	62bb      	str	r3, [r7, #40]	; 0x28
 8015018:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801501c:	4619      	mov	r1, r3
 801501e:	f7f8 fce5 	bl	800d9ec <_ZSt3minIiERKT_S2_S2_>
 8015022:	4603      	mov	r3, r0
 8015024:	681b      	ldr	r3, [r3, #0]
 8015026:	63bb      	str	r3, [r7, #56]	; 0x38
          float total = 0.f;
 8015028:	f04f 0300 	mov.w	r3, #0
 801502c:	67fb      	str	r3, [r7, #124]	; 0x7c
          float filter_count = 0;
 801502e:	f04f 0300 	mov.w	r3, #0
 8015032:	67bb      	str	r3, [r7, #120]	; 0x78
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 8015034:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015036:	677b      	str	r3, [r7, #116]	; 0x74
 8015038:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801503a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801503c:	429a      	cmp	r2, r3
 801503e:	da33      	bge.n	80150a8 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1ee>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 8015040:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015042:	673b      	str	r3, [r7, #112]	; 0x70
 8015044:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8015046:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015048:	429a      	cmp	r2, r3
 801504a:	da29      	bge.n	80150a0 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1e6>
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
 801504c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801504e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015050:	4413      	add	r3, r2
 8015052:	637b      	str	r3, [r7, #52]	; 0x34
              const int in_y = in_y_origin + filter_y;
 8015054:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015056:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015058:	4413      	add	r3, r2
 801505a:	633b      	str	r3, [r7, #48]	; 0x30
              total +=
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
 801505c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015060:	9300      	str	r3, [sp, #0]
 8015062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015064:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015066:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 801506a:	68b8      	ldr	r0, [r7, #8]
 801506c:	f7fe fa63 	bl	8013536 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8015070:	4603      	mov	r3, r0
 8015072:	009b      	lsls	r3, r3, #2
 8015074:	687a      	ldr	r2, [r7, #4]
 8015076:	4413      	add	r3, r2
 8015078:	edd3 7a00 	vldr	s15, [r3]
              total +=
 801507c:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8015080:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015084:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
              filter_count++;
 8015088:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 801508c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015090:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015094:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 8015098:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801509a:	3301      	adds	r3, #1
 801509c:	673b      	str	r3, [r7, #112]	; 0x70
 801509e:	e7d1      	b.n	8015044 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x18a>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 80150a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80150a2:	3301      	adds	r3, #1
 80150a4:	677b      	str	r3, [r7, #116]	; 0x74
 80150a6:	e7c7      	b.n	8015038 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x17e>
            }
          }
          if (filter_count == 0) return false;
 80150a8:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80150ac:	eef5 7a40 	vcmp.f32	s15, #0.0
 80150b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80150b4:	d101      	bne.n	80150ba <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x200>
 80150b6:	2300      	movs	r3, #0
 80150b8:	e043      	b.n	8015142 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x288>
          const float average = total / filter_count;
 80150ba:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 80150be:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 80150c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80150c6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
              ActivationFunctionWithMinMax(average, params.float_activation_min,
 80150ca:	68fb      	ldr	r3, [r7, #12]
 80150cc:	ed93 8a09 	vldr	s16, [r3, #36]	; 0x24
                                           params.float_activation_max);
 80150d0:	68fb      	ldr	r3, [r7, #12]
 80150d2:	edd3 8a0a 	vldr	s17, [r3, #40]	; 0x28
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
 80150d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80150da:	9300      	str	r3, [sp, #0]
 80150dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80150e0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80150e4:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80150e8:	6838      	ldr	r0, [r7, #0]
 80150ea:	f7fe fa24 	bl	8013536 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 80150ee:	4603      	mov	r3, r0
 80150f0:	009b      	lsls	r3, r3, #2
 80150f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80150f6:	18d4      	adds	r4, r2, r3
              ActivationFunctionWithMinMax(average, params.float_activation_min,
 80150f8:	eeb0 1a68 	vmov.f32	s2, s17
 80150fc:	eef0 0a48 	vmov.f32	s1, s16
 8015100:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8015104:	f7fe ff8b 	bl	801401e <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>
 8015108:	eef0 7a40 	vmov.f32	s15, s0
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
 801510c:	edc4 7a00 	vstr	s15, [r4]
        for (int channel = 0; channel < depth; ++channel) {
 8015110:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015114:	3301      	adds	r3, #1
 8015116:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801511a:	e72d      	b.n	8014f78 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xbe>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 801511c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8015120:	3301      	adds	r3, #1
 8015122:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8015126:	e71e      	b.n	8014f66 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xac>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8015128:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801512c:	3301      	adds	r3, #1
 801512e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8015132:	e70f      	b.n	8014f54 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x9a>
  for (int batch = 0; batch < batches; ++batch) {
 8015134:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015138:	3301      	adds	r3, #1
 801513a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801513e:	e700      	b.n	8014f42 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x88>
        }
      }
    }
  }
  return true;
 8015140:	2301      	movs	r3, #1
}
 8015142:	4618      	mov	r0, r3
 8015144:	3794      	adds	r7, #148	; 0x94
 8015146:	46bd      	mov	sp, r7
 8015148:	ecbd 8b02 	vpop	{d8}
 801514c:	bd90      	pop	{r4, r7, pc}

0801514e <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
  }
}

inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,
                    const float* input_data, const RuntimeShape& output_shape,
                    float* output_data) {
 801514e:	b590      	push	{r4, r7, lr}
 8015150:	ed2d 8b04 	vpush	{d8-d9}
 8015154:	b0a5      	sub	sp, #148	; 0x94
 8015156:	af02      	add	r7, sp, #8
 8015158:	60f8      	str	r0, [r7, #12]
 801515a:	60b9      	str	r1, [r7, #8]
 801515c:	607a      	str	r2, [r7, #4]
 801515e:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 8015160:	68b8      	ldr	r0, [r7, #8]
 8015162:	f7f9 fbc1 	bl	800e8e8 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8015166:	4603      	mov	r3, r0
 8015168:	2b04      	cmp	r3, #4
 801516a:	d001      	beq.n	8015170 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x22>
 801516c:	f011 fdc7 	bl	8026cfe <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 8015170:	6838      	ldr	r0, [r7, #0]
 8015172:	f7f9 fbb9 	bl	800e8e8 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8015176:	4603      	mov	r3, r0
 8015178:	2b04      	cmp	r3, #4
 801517a:	d001      	beq.n	8015180 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x32>
 801517c:	f011 fdbf 	bl	8026cfe <abort>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 8015180:	2300      	movs	r3, #0
 8015182:	683a      	ldr	r2, [r7, #0]
 8015184:	2100      	movs	r1, #0
 8015186:	68b8      	ldr	r0, [r7, #8]
 8015188:	f7fe fa5b 	bl	8013642 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 801518c:	66f8      	str	r0, [r7, #108]	; 0x6c
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 801518e:	2303      	movs	r3, #3
 8015190:	683a      	ldr	r2, [r7, #0]
 8015192:	2103      	movs	r1, #3
 8015194:	68b8      	ldr	r0, [r7, #8]
 8015196:	f7fe fa54 	bl	8013642 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 801519a:	66b8      	str	r0, [r7, #104]	; 0x68
  const int input_height = input_shape.Dims(1);
 801519c:	2101      	movs	r1, #1
 801519e:	68b8      	ldr	r0, [r7, #8]
 80151a0:	f7fe f957 	bl	8013452 <_ZNK6tflite12RuntimeShape4DimsEi>
 80151a4:	6678      	str	r0, [r7, #100]	; 0x64
  const int input_width = input_shape.Dims(2);
 80151a6:	2102      	movs	r1, #2
 80151a8:	68b8      	ldr	r0, [r7, #8]
 80151aa:	f7fe f952 	bl	8013452 <_ZNK6tflite12RuntimeShape4DimsEi>
 80151ae:	6638      	str	r0, [r7, #96]	; 0x60
  const int output_height = output_shape.Dims(1);
 80151b0:	2101      	movs	r1, #1
 80151b2:	6838      	ldr	r0, [r7, #0]
 80151b4:	f7fe f94d 	bl	8013452 <_ZNK6tflite12RuntimeShape4DimsEi>
 80151b8:	65f8      	str	r0, [r7, #92]	; 0x5c
  const int output_width = output_shape.Dims(2);
 80151ba:	2102      	movs	r1, #2
 80151bc:	6838      	ldr	r0, [r7, #0]
 80151be:	f7fe f948 	bl	8013452 <_ZNK6tflite12RuntimeShape4DimsEi>
 80151c2:	65b8      	str	r0, [r7, #88]	; 0x58
  const int stride_height = params.stride_height;
 80151c4:	68fb      	ldr	r3, [r7, #12]
 80151c6:	68db      	ldr	r3, [r3, #12]
 80151c8:	657b      	str	r3, [r7, #84]	; 0x54
  const int stride_width = params.stride_width;
 80151ca:	68fb      	ldr	r3, [r7, #12]
 80151cc:	691b      	ldr	r3, [r3, #16]
 80151ce:	653b      	str	r3, [r7, #80]	; 0x50
  for (int batch = 0; batch < batches; ++batch) {
 80151d0:	2300      	movs	r3, #0
 80151d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80151d6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80151da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80151dc:	429a      	cmp	r2, r3
 80151de:	f280 80d4 	bge.w	801538a <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x23c>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 80151e2:	2300      	movs	r3, #0
 80151e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80151e8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80151ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80151ee:	429a      	cmp	r2, r3
 80151f0:	f280 80c5 	bge.w	801537e <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x230>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 80151f4:	2300      	movs	r3, #0
 80151f6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80151f8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80151fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80151fc:	429a      	cmp	r2, r3
 80151fe:	f280 80b8 	bge.w	8015372 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x224>
        for (int channel = 0; channel < depth; ++channel) {
 8015202:	2300      	movs	r3, #0
 8015204:	67bb      	str	r3, [r7, #120]	; 0x78
 8015206:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8015208:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801520a:	429a      	cmp	r2, r3
 801520c:	f280 80ad 	bge.w	801536a <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x21c>
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
 8015210:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8015212:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015214:	fb02 f303 	mul.w	r3, r2, r3
 8015218:	68fa      	ldr	r2, [r7, #12]
 801521a:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
          const int in_x_origin =
 801521e:	1a9b      	subs	r3, r3, r2
 8015220:	64fb      	str	r3, [r7, #76]	; 0x4c
          const int in_y_origin =
              (out_y * stride_height) - params.padding_values.height;
 8015222:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015226:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8015228:	fb02 f303 	mul.w	r3, r2, r3
 801522c:	68fa      	ldr	r2, [r7, #12]
 801522e:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
          const int in_y_origin =
 8015232:	1a9b      	subs	r3, r3, r2
 8015234:	64bb      	str	r3, [r7, #72]	; 0x48
          // Compute the boundaries of the filter region clamped so as to
          // ensure that the filter window fits in the input array.
          const int filter_x_start = std::max(0, -in_x_origin);
 8015236:	2300      	movs	r3, #0
 8015238:	61bb      	str	r3, [r7, #24]
 801523a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801523c:	425b      	negs	r3, r3
 801523e:	61fb      	str	r3, [r7, #28]
 8015240:	f107 021c 	add.w	r2, r7, #28
 8015244:	f107 0318 	add.w	r3, r7, #24
 8015248:	4611      	mov	r1, r2
 801524a:	4618      	mov	r0, r3
 801524c:	f7f9 f862 	bl	800e314 <_ZSt3maxIiERKT_S2_S2_>
 8015250:	4603      	mov	r3, r0
 8015252:	681b      	ldr	r3, [r3, #0]
 8015254:	647b      	str	r3, [r7, #68]	; 0x44
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
 8015256:	68fb      	ldr	r3, [r7, #12]
 8015258:	f103 0018 	add.w	r0, r3, #24
 801525c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801525e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015260:	1ad3      	subs	r3, r2, r3
 8015262:	623b      	str	r3, [r7, #32]
 8015264:	f107 0320 	add.w	r3, r7, #32
 8015268:	4619      	mov	r1, r3
 801526a:	f7f8 fbbf 	bl	800d9ec <_ZSt3minIiERKT_S2_S2_>
 801526e:	4603      	mov	r3, r0
 8015270:	681b      	ldr	r3, [r3, #0]
 8015272:	643b      	str	r3, [r7, #64]	; 0x40
          const int filter_y_start = std::max(0, -in_y_origin);
 8015274:	2300      	movs	r3, #0
 8015276:	627b      	str	r3, [r7, #36]	; 0x24
 8015278:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801527a:	425b      	negs	r3, r3
 801527c:	62bb      	str	r3, [r7, #40]	; 0x28
 801527e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8015282:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015286:	4611      	mov	r1, r2
 8015288:	4618      	mov	r0, r3
 801528a:	f7f9 f843 	bl	800e314 <_ZSt3maxIiERKT_S2_S2_>
 801528e:	4603      	mov	r3, r0
 8015290:	681b      	ldr	r3, [r3, #0]
 8015292:	63fb      	str	r3, [r7, #60]	; 0x3c
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
 8015294:	68fb      	ldr	r3, [r7, #12]
 8015296:	f103 0014 	add.w	r0, r3, #20
 801529a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801529c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801529e:	1ad3      	subs	r3, r2, r3
 80152a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80152a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80152a6:	4619      	mov	r1, r3
 80152a8:	f7f8 fba0 	bl	800d9ec <_ZSt3minIiERKT_S2_S2_>
 80152ac:	4603      	mov	r3, r0
 80152ae:	681b      	ldr	r3, [r3, #0]
 80152b0:	63bb      	str	r3, [r7, #56]	; 0x38
          float max = std::numeric_limits<float>::lowest();
 80152b2:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 80152b6:	617b      	str	r3, [r7, #20]
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 80152b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80152ba:	677b      	str	r3, [r7, #116]	; 0x74
 80152bc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80152be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80152c0:	429a      	cmp	r2, r3
 80152c2:	da2b      	bge.n	801531c <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1ce>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 80152c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80152c6:	673b      	str	r3, [r7, #112]	; 0x70
 80152c8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80152ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80152cc:	429a      	cmp	r2, r3
 80152ce:	da21      	bge.n	8015314 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1c6>
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
 80152d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80152d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80152d4:	4413      	add	r3, r2
 80152d6:	637b      	str	r3, [r7, #52]	; 0x34
              const int in_y = in_y_origin + filter_y;
 80152d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80152da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80152dc:	4413      	add	r3, r2
 80152de:	633b      	str	r3, [r7, #48]	; 0x30
              max = std::max(
                  max,
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
 80152e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80152e2:	9300      	str	r3, [sp, #0]
 80152e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80152e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80152e8:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80152ec:	68b8      	ldr	r0, [r7, #8]
 80152ee:	f7fe f922 	bl	8013536 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 80152f2:	4603      	mov	r3, r0
 80152f4:	009b      	lsls	r3, r3, #2
 80152f6:	687a      	ldr	r2, [r7, #4]
 80152f8:	441a      	add	r2, r3
 80152fa:	f107 0314 	add.w	r3, r7, #20
 80152fe:	4611      	mov	r1, r2
 8015300:	4618      	mov	r0, r3
 8015302:	f7f7 ff99 	bl	800d238 <_ZSt3maxIfERKT_S2_S2_>
 8015306:	4603      	mov	r3, r0
              max = std::max(
 8015308:	681b      	ldr	r3, [r3, #0]
 801530a:	617b      	str	r3, [r7, #20]
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 801530c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801530e:	3301      	adds	r3, #1
 8015310:	673b      	str	r3, [r7, #112]	; 0x70
 8015312:	e7d9      	b.n	80152c8 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x17a>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 8015314:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015316:	3301      	adds	r3, #1
 8015318:	677b      	str	r3, [r7, #116]	; 0x74
 801531a:	e7cf      	b.n	80152bc <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x16e>
            }
          }
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
              ActivationFunctionWithMinMax(max, params.float_activation_min,
 801531c:	ed97 8a05 	vldr	s16, [r7, #20]
 8015320:	68fb      	ldr	r3, [r7, #12]
 8015322:	edd3 8a09 	vldr	s17, [r3, #36]	; 0x24
                                           params.float_activation_max);
 8015326:	68fb      	ldr	r3, [r7, #12]
 8015328:	ed93 9a0a 	vldr	s18, [r3, #40]	; 0x28
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
 801532c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801532e:	9300      	str	r3, [sp, #0]
 8015330:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8015332:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8015336:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 801533a:	6838      	ldr	r0, [r7, #0]
 801533c:	f7fe f8fb 	bl	8013536 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8015340:	4603      	mov	r3, r0
 8015342:	009b      	lsls	r3, r3, #2
 8015344:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8015348:	18d4      	adds	r4, r2, r3
              ActivationFunctionWithMinMax(max, params.float_activation_min,
 801534a:	eeb0 1a49 	vmov.f32	s2, s18
 801534e:	eef0 0a68 	vmov.f32	s1, s17
 8015352:	eeb0 0a48 	vmov.f32	s0, s16
 8015356:	f7fe fe62 	bl	801401e <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>
 801535a:	eef0 7a40 	vmov.f32	s15, s0
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
 801535e:	edc4 7a00 	vstr	s15, [r4]
        for (int channel = 0; channel < depth; ++channel) {
 8015362:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015364:	3301      	adds	r3, #1
 8015366:	67bb      	str	r3, [r7, #120]	; 0x78
 8015368:	e74d      	b.n	8015206 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xb8>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 801536a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801536c:	3301      	adds	r3, #1
 801536e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8015370:	e742      	b.n	80151f8 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xaa>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8015372:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015376:	3301      	adds	r3, #1
 8015378:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801537c:	e734      	b.n	80151e8 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x9a>
  for (int batch = 0; batch < batches; ++batch) {
 801537e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8015382:	3301      	adds	r3, #1
 8015384:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8015388:	e725      	b.n	80151d6 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x88>
        }
      }
    }
  }
}
 801538a:	bf00      	nop
 801538c:	378c      	adds	r7, #140	; 0x8c
 801538e:	46bd      	mov	sp, r7
 8015390:	ecbd 8b04 	vpop	{d8-d9}
 8015394:	bd90      	pop	{r4, r7, pc}

08015396 <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE>:

TfLiteStatus CalculateOpDataPooling(const TfLiteContext* context,
                                    const TfLitePoolParams* params,
                                    const TfLiteTensor* input,
                                    const TfLiteTensor* output,
                                    OpDataPooling* data) {
 8015396:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015398:	b097      	sub	sp, #92	; 0x5c
 801539a:	af08      	add	r7, sp, #32
 801539c:	6278      	str	r0, [r7, #36]	; 0x24
 801539e:	6239      	str	r1, [r7, #32]
 80153a0:	61fa      	str	r2, [r7, #28]
 80153a2:	61bb      	str	r3, [r7, #24]
  // input: batch, height, width, channel
  int height = SizeOfDimension(input, 1);
 80153a4:	2101      	movs	r1, #1
 80153a6:	69f8      	ldr	r0, [r7, #28]
 80153a8:	f7f8 fb0f 	bl	800d9ca <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>
 80153ac:	6378      	str	r0, [r7, #52]	; 0x34
  int width = SizeOfDimension(input, 2);
 80153ae:	2102      	movs	r1, #2
 80153b0:	69f8      	ldr	r0, [r7, #28]
 80153b2:	f7f8 fb0a 	bl	800d9ca <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>
 80153b6:	6338      	str	r0, [r7, #48]	; 0x30

  int out_height, out_width;

  data->padding = ComputePaddingHeightWidth(
      params->stride_height, params->stride_width,
 80153b8:	6a3b      	ldr	r3, [r7, #32]
 80153ba:	689d      	ldr	r5, [r3, #8]
 80153bc:	6a3b      	ldr	r3, [r7, #32]
 80153be:	685e      	ldr	r6, [r3, #4]
      /*dilation_rate_height=*/1,
      /*dilation_rate_width=*/1, height, width, params->filter_height,
 80153c0:	6a3b      	ldr	r3, [r7, #32]
 80153c2:	691b      	ldr	r3, [r3, #16]
      params->filter_width, params->padding, &out_height, &out_width);
 80153c4:	6a3a      	ldr	r2, [r7, #32]
 80153c6:	68d2      	ldr	r2, [r2, #12]
 80153c8:	6a39      	ldr	r1, [r7, #32]
 80153ca:	7809      	ldrb	r1, [r1, #0]
 80153cc:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80153ce:	6078      	str	r0, [r7, #4]
 80153d0:	f107 0408 	add.w	r4, r7, #8
 80153d4:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80153d8:	9007      	str	r0, [sp, #28]
 80153da:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80153de:	9006      	str	r0, [sp, #24]
 80153e0:	9105      	str	r1, [sp, #20]
 80153e2:	9204      	str	r2, [sp, #16]
 80153e4:	9303      	str	r3, [sp, #12]
 80153e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153e8:	9302      	str	r3, [sp, #8]
 80153ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80153ec:	9301      	str	r3, [sp, #4]
 80153ee:	2301      	movs	r3, #1
 80153f0:	9300      	str	r3, [sp, #0]
 80153f2:	2301      	movs	r3, #1
 80153f4:	4632      	mov	r2, r6
 80153f6:	4629      	mov	r1, r5
 80153f8:	4620      	mov	r0, r4
 80153fa:	f7fe f9de 	bl	80137ba <_ZN6tflite25ComputePaddingHeightWidthEiiiiiiii13TfLitePaddingPiS1_>
 80153fe:	687c      	ldr	r4, [r7, #4]
 8015400:	f107 0308 	add.w	r3, r7, #8
 8015404:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015406:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  return kTfLiteOk;
 801540a:	2300      	movs	r3, #0
}
 801540c:	4618      	mov	r0, r3
 801540e:	373c      	adds	r7, #60	; 0x3c
 8015410:	46bd      	mov	sp, r7
 8015412:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015414 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus PoolingPrepare(TfLiteContext* context, TfLiteNode* node) {
 8015414:	b590      	push	{r4, r7, lr}
 8015416:	b08b      	sub	sp, #44	; 0x2c
 8015418:	af02      	add	r7, sp, #8
 801541a:	6078      	str	r0, [r7, #4]
 801541c:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->builtin_data != nullptr);
 801541e:	683b      	ldr	r3, [r7, #0]
 8015420:	695b      	ldr	r3, [r3, #20]
 8015422:	2b00      	cmp	r3, #0
 8015424:	d101      	bne.n	801542a <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x16>
 8015426:	f011 fc6a 	bl	8026cfe <abort>
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);
 801542a:	683b      	ldr	r3, [r7, #0]
 801542c:	695b      	ldr	r3, [r3, #20]
 801542e:	61fb      	str	r3, [r7, #28]

  TFLITE_DCHECK(node->user_data != nullptr);
 8015430:	683b      	ldr	r3, [r7, #0]
 8015432:	691b      	ldr	r3, [r3, #16]
 8015434:	2b00      	cmp	r3, #0
 8015436:	d101      	bne.n	801543c <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x28>
 8015438:	f011 fc61 	bl	8026cfe <abort>
  OpDataPooling* data = static_cast<OpDataPooling*>(node->user_data);
 801543c:	683b      	ldr	r3, [r7, #0]
 801543e:	691b      	ldr	r3, [r3, #16]
 8015440:	61bb      	str	r3, [r7, #24]

  const TfLiteTensor* input = GetInput(context, node, kPoolingInputTensor);
 8015442:	2200      	movs	r2, #0
 8015444:	6839      	ldr	r1, [r7, #0]
 8015446:	6878      	ldr	r0, [r7, #4]
 8015448:	f7f8 fb40 	bl	800dacc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 801544c:	6178      	str	r0, [r7, #20]
  TF_LITE_ENSURE(context, input != nullptr);
 801544e:	697b      	ldr	r3, [r7, #20]
 8015450:	2b00      	cmp	r3, #0
 8015452:	d10a      	bne.n	801546a <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x56>
 8015454:	687b      	ldr	r3, [r7, #4]
 8015456:	695c      	ldr	r4, [r3, #20]
 8015458:	4b28      	ldr	r3, [pc, #160]	; (80154fc <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xe8>)
 801545a:	9300      	str	r3, [sp, #0]
 801545c:	233a      	movs	r3, #58	; 0x3a
 801545e:	4a28      	ldr	r2, [pc, #160]	; (8015500 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xec>)
 8015460:	4928      	ldr	r1, [pc, #160]	; (8015504 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xf0>)
 8015462:	6878      	ldr	r0, [r7, #4]
 8015464:	47a0      	blx	r4
 8015466:	2301      	movs	r3, #1
 8015468:	e043      	b.n	80154f2 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xde>
  TfLiteTensor* output = GetOutput(context, node, kPoolingOutputTensor);
 801546a:	2200      	movs	r2, #0
 801546c:	6839      	ldr	r1, [r7, #0]
 801546e:	6878      	ldr	r0, [r7, #4]
 8015470:	f7f8 fb3c 	bl	800daec <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 8015474:	6138      	str	r0, [r7, #16]
  TF_LITE_ENSURE(context, output != nullptr);
 8015476:	693b      	ldr	r3, [r7, #16]
 8015478:	2b00      	cmp	r3, #0
 801547a:	d10a      	bne.n	8015492 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x7e>
 801547c:	687b      	ldr	r3, [r7, #4]
 801547e:	695c      	ldr	r4, [r3, #20]
 8015480:	4b21      	ldr	r3, [pc, #132]	; (8015508 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xf4>)
 8015482:	9300      	str	r3, [sp, #0]
 8015484:	233c      	movs	r3, #60	; 0x3c
 8015486:	4a1e      	ldr	r2, [pc, #120]	; (8015500 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xec>)
 8015488:	491e      	ldr	r1, [pc, #120]	; (8015504 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xf0>)
 801548a:	6878      	ldr	r0, [r7, #4]
 801548c:	47a0      	blx	r4
 801548e:	2301      	movs	r3, #1
 8015490:	e02f      	b.n	80154f2 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xde>

  TF_LITE_ENSURE_STATUS(
 8015492:	69bb      	ldr	r3, [r7, #24]
 8015494:	9300      	str	r3, [sp, #0]
 8015496:	693b      	ldr	r3, [r7, #16]
 8015498:	697a      	ldr	r2, [r7, #20]
 801549a:	69f9      	ldr	r1, [r7, #28]
 801549c:	6878      	ldr	r0, [r7, #4]
 801549e:	f7ff ff7a 	bl	8015396 <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE>
 80154a2:	4603      	mov	r3, r0
 80154a4:	73fb      	strb	r3, [r7, #15]
 80154a6:	7bfb      	ldrb	r3, [r7, #15]
 80154a8:	2b00      	cmp	r3, #0
 80154aa:	d001      	beq.n	80154b0 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x9c>
 80154ac:	7bfb      	ldrb	r3, [r7, #15]
 80154ae:	e020      	b.n	80154f2 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xde>
      CalculateOpDataPooling(context, params, input, output, data));

  if (input->type == kTfLiteFloat32) {
 80154b0:	697b      	ldr	r3, [r7, #20]
 80154b2:	781b      	ldrb	r3, [r3, #0]
 80154b4:	2b01      	cmp	r3, #1
 80154b6:	d10a      	bne.n	80154ce <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xba>
    CalculateActivationRange(params->activation, &data->activation_min_f32,
 80154b8:	69fb      	ldr	r3, [r7, #28]
 80154ba:	7d18      	ldrb	r0, [r3, #20]
 80154bc:	69bb      	ldr	r3, [r7, #24]
 80154be:	f103 0118 	add.w	r1, r3, #24
 80154c2:	69bb      	ldr	r3, [r7, #24]
 80154c4:	331c      	adds	r3, #28
 80154c6:	461a      	mov	r2, r3
 80154c8:	f7fe fb50 	bl	8013b6c <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
 80154cc:	e010      	b.n	80154f0 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xdc>
                             &data->activation_max_f32);
  } else if (input->type == kTfLiteInt8) {
 80154ce:	697b      	ldr	r3, [r7, #20]
 80154d0:	781b      	ldrb	r3, [r3, #0]
 80154d2:	2b09      	cmp	r3, #9
 80154d4:	d10c      	bne.n	80154f0 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xdc>
    CalculateActivationRangeQuantized(context, params->activation, output,
 80154d6:	69fb      	ldr	r3, [r7, #28]
 80154d8:	7d19      	ldrb	r1, [r3, #20]
 80154da:	69bb      	ldr	r3, [r7, #24]
 80154dc:	f103 0210 	add.w	r2, r3, #16
 80154e0:	69bb      	ldr	r3, [r7, #24]
 80154e2:	3314      	adds	r3, #20
 80154e4:	9300      	str	r3, [sp, #0]
 80154e6:	4613      	mov	r3, r2
 80154e8:	693a      	ldr	r2, [r7, #16]
 80154ea:	6878      	ldr	r0, [r7, #4]
 80154ec:	f7f8 feba 	bl	800e264 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
                                      &data->activation_min,
                                      &data->activation_max);
  }

  return kTfLiteOk;
 80154f0:	2300      	movs	r3, #0
}
 80154f2:	4618      	mov	r0, r3
 80154f4:	3724      	adds	r7, #36	; 0x24
 80154f6:	46bd      	mov	sp, r7
 80154f8:	bd90      	pop	{r4, r7, pc}
 80154fa:	bf00      	nop
 80154fc:	0802d1bc 	.word	0x0802d1bc
 8015500:	0802d160 	.word	0x0802d160
 8015504:	0802d1a4 	.word	0x0802d1a4
 8015508:	0802d1d0 	.word	0x0802d1d0

0801550c <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_>:
void AveragePoolingEvalFloat(const TfLiteContext* context,
                             const TfLiteNode* node,
                             const TfLitePoolParams* params,
                             const OpDataPooling* data,
                             const TfLiteEvalTensor* input,
                             TfLiteEvalTensor* output) {
 801550c:	b590      	push	{r4, r7, lr}
 801550e:	b09f      	sub	sp, #124	; 0x7c
 8015510:	af02      	add	r7, sp, #8
 8015512:	60f8      	str	r0, [r7, #12]
 8015514:	60b9      	str	r1, [r7, #8]
 8015516:	607a      	str	r2, [r7, #4]
 8015518:	603b      	str	r3, [r7, #0]
  PoolParams op_params;
  op_params.stride_height = params->stride_height;
 801551a:	687b      	ldr	r3, [r7, #4]
 801551c:	689b      	ldr	r3, [r3, #8]
 801551e:	623b      	str	r3, [r7, #32]
  op_params.stride_width = params->stride_width;
 8015520:	687b      	ldr	r3, [r7, #4]
 8015522:	685b      	ldr	r3, [r3, #4]
 8015524:	627b      	str	r3, [r7, #36]	; 0x24
  op_params.filter_height = params->filter_height;
 8015526:	687b      	ldr	r3, [r7, #4]
 8015528:	691b      	ldr	r3, [r3, #16]
 801552a:	62bb      	str	r3, [r7, #40]	; 0x28
  op_params.filter_width = params->filter_width;
 801552c:	687b      	ldr	r3, [r7, #4]
 801552e:	68db      	ldr	r3, [r3, #12]
 8015530:	62fb      	str	r3, [r7, #44]	; 0x2c
  op_params.padding_values.height = data->padding.height;
 8015532:	683b      	ldr	r3, [r7, #0]
 8015534:	685b      	ldr	r3, [r3, #4]
 8015536:	b21b      	sxth	r3, r3
 8015538:	833b      	strh	r3, [r7, #24]
  op_params.padding_values.width = data->padding.width;
 801553a:	683b      	ldr	r3, [r7, #0]
 801553c:	681b      	ldr	r3, [r3, #0]
 801553e:	b21b      	sxth	r3, r3
 8015540:	82fb      	strh	r3, [r7, #22]
  op_params.float_activation_min = data->activation_min_f32;
 8015542:	683b      	ldr	r3, [r7, #0]
 8015544:	699b      	ldr	r3, [r3, #24]
 8015546:	63bb      	str	r3, [r7, #56]	; 0x38
  op_params.float_activation_max = data->activation_max_f32;
 8015548:	683b      	ldr	r3, [r7, #0]
 801554a:	69db      	ldr	r3, [r3, #28]
 801554c:	63fb      	str	r3, [r7, #60]	; 0x3c
  reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
 801554e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8015552:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8015556:	4618      	mov	r0, r3
 8015558:	f7fe fd29 	bl	8013fae <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 801555c:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8015560:	f7fd ff37 	bl	80133d2 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 8015564:	4604      	mov	r4, r0
                             tflite::micro::GetTensorData<float>(input),
                             tflite::micro::GetTensorShape(output),
 8015566:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801556a:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 801556e:	4618      	mov	r0, r3
 8015570:	f7fe fd1d 	bl	8013fae <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
 8015574:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8015578:	f7fd ff3a 	bl	80133f0 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 801557c:	4602      	mov	r2, r0
 801557e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8015582:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8015586:	f107 0014 	add.w	r0, r7, #20
 801558a:	9200      	str	r2, [sp, #0]
 801558c:	4622      	mov	r2, r4
 801558e:	f7ff fc94 	bl	8014eba <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>
                             tflite::micro::GetTensorShape(output),
 8015592:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8015596:	4618      	mov	r0, r3
 8015598:	f7f9 f99b 	bl	800e8d2 <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
 801559c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80155a0:	4618      	mov	r0, r3
 80155a2:	f7f9 f996 	bl	800e8d2 <_ZN6tflite12RuntimeShapeD1Ev>
                             tflite::micro::GetTensorData<float>(output));
}
 80155a6:	bf00      	nop
 80155a8:	3774      	adds	r7, #116	; 0x74
 80155aa:	46bd      	mov	sp, r7
 80155ac:	bd90      	pop	{r4, r7, pc}

080155ae <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_>:
}

void MaxPoolingEvalFloat(TfLiteContext* context, TfLiteNode* node,
                         TfLitePoolParams* params, const OpDataPooling* data,
                         const TfLiteEvalTensor* input,
                         TfLiteEvalTensor* output) {
 80155ae:	b590      	push	{r4, r7, lr}
 80155b0:	b09f      	sub	sp, #124	; 0x7c
 80155b2:	af02      	add	r7, sp, #8
 80155b4:	60f8      	str	r0, [r7, #12]
 80155b6:	60b9      	str	r1, [r7, #8]
 80155b8:	607a      	str	r2, [r7, #4]
 80155ba:	603b      	str	r3, [r7, #0]
  tflite::PoolParams op_params;
  op_params.stride_height = params->stride_height;
 80155bc:	687b      	ldr	r3, [r7, #4]
 80155be:	689b      	ldr	r3, [r3, #8]
 80155c0:	623b      	str	r3, [r7, #32]
  op_params.stride_width = params->stride_width;
 80155c2:	687b      	ldr	r3, [r7, #4]
 80155c4:	685b      	ldr	r3, [r3, #4]
 80155c6:	627b      	str	r3, [r7, #36]	; 0x24
  op_params.filter_height = params->filter_height;
 80155c8:	687b      	ldr	r3, [r7, #4]
 80155ca:	691b      	ldr	r3, [r3, #16]
 80155cc:	62bb      	str	r3, [r7, #40]	; 0x28
  op_params.filter_width = params->filter_width;
 80155ce:	687b      	ldr	r3, [r7, #4]
 80155d0:	68db      	ldr	r3, [r3, #12]
 80155d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  op_params.padding_values.height = data->padding.height;
 80155d4:	683b      	ldr	r3, [r7, #0]
 80155d6:	685b      	ldr	r3, [r3, #4]
 80155d8:	b21b      	sxth	r3, r3
 80155da:	833b      	strh	r3, [r7, #24]
  op_params.padding_values.width = data->padding.width;
 80155dc:	683b      	ldr	r3, [r7, #0]
 80155de:	681b      	ldr	r3, [r3, #0]
 80155e0:	b21b      	sxth	r3, r3
 80155e2:	82fb      	strh	r3, [r7, #22]
  op_params.float_activation_min = data->activation_min_f32;
 80155e4:	683b      	ldr	r3, [r7, #0]
 80155e6:	699b      	ldr	r3, [r3, #24]
 80155e8:	63bb      	str	r3, [r7, #56]	; 0x38
  op_params.float_activation_max = data->activation_max_f32;
 80155ea:	683b      	ldr	r3, [r7, #0]
 80155ec:	69db      	ldr	r3, [r3, #28]
 80155ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
 80155f0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80155f4:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80155f8:	4618      	mov	r0, r3
 80155fa:	f7fe fcd8 	bl	8013fae <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 80155fe:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8015602:	f7fd fee6 	bl	80133d2 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 8015606:	4604      	mov	r4, r0
                         tflite::micro::GetTensorData<float>(input),
                         tflite::micro::GetTensorShape(output),
 8015608:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801560c:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8015610:	4618      	mov	r0, r3
 8015612:	f7fe fccc 	bl	8013fae <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
 8015616:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 801561a:	f7fd fee9 	bl	80133f0 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 801561e:	4602      	mov	r2, r0
 8015620:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8015624:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8015628:	f107 0014 	add.w	r0, r7, #20
 801562c:	9200      	str	r2, [sp, #0]
 801562e:	4622      	mov	r2, r4
 8015630:	f7ff fd8d 	bl	801514e <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>
                         tflite::micro::GetTensorShape(output),
 8015634:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8015638:	4618      	mov	r0, r3
 801563a:	f7f9 f94a 	bl	800e8d2 <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
 801563e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8015642:	4618      	mov	r0, r3
 8015644:	f7f9 f945 	bl	800e8d2 <_ZN6tflite12RuntimeShapeD1Ev>
                         tflite::micro::GetTensorData<float>(output));
}
 8015648:	bf00      	nop
 801564a:	3774      	adds	r7, #116	; 0x74
 801564c:	46bd      	mov	sp, r7
 801564e:	bd90      	pop	{r4, r7, pc}

08015650 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>:
namespace reshape {

constexpr int kInputTensor = 0;
constexpr int kOutputTensor = 0;

TfLiteStatus ReshapeOutput(TfLiteContext* context, TfLiteNode* node) {
 8015650:	b5b0      	push	{r4, r5, r7, lr}
 8015652:	b08e      	sub	sp, #56	; 0x38
 8015654:	af04      	add	r7, sp, #16
 8015656:	6078      	str	r0, [r7, #4]
 8015658:	6039      	str	r1, [r7, #0]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 801565a:	2200      	movs	r2, #0
 801565c:	6839      	ldr	r1, [r7, #0]
 801565e:	6878      	ldr	r0, [r7, #4]
 8015660:	f7f8 fa34 	bl	800dacc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8015664:	61b8      	str	r0, [r7, #24]
  TF_LITE_ENSURE(context, input != nullptr);
 8015666:	69bb      	ldr	r3, [r7, #24]
 8015668:	2b00      	cmp	r3, #0
 801566a:	d10a      	bne.n	8015682 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x32>
 801566c:	687b      	ldr	r3, [r7, #4]
 801566e:	695c      	ldr	r4, [r3, #20]
 8015670:	4b62      	ldr	r3, [pc, #392]	; (80157fc <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1ac>)
 8015672:	9300      	str	r3, [sp, #0]
 8015674:	2323      	movs	r3, #35	; 0x23
 8015676:	4a62      	ldr	r2, [pc, #392]	; (8015800 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b0>)
 8015678:	4962      	ldr	r1, [pc, #392]	; (8015804 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b4>)
 801567a:	6878      	ldr	r0, [r7, #4]
 801567c:	47a0      	blx	r4
 801567e:	2301      	movs	r3, #1
 8015680:	e0b8      	b.n	80157f4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a4>
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 8015682:	2200      	movs	r2, #0
 8015684:	6839      	ldr	r1, [r7, #0]
 8015686:	6878      	ldr	r0, [r7, #4]
 8015688:	f7f8 fa30 	bl	800daec <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 801568c:	6178      	str	r0, [r7, #20]
  TF_LITE_ENSURE(context, output != nullptr);
 801568e:	697b      	ldr	r3, [r7, #20]
 8015690:	2b00      	cmp	r3, #0
 8015692:	d10a      	bne.n	80156aa <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x5a>
 8015694:	687b      	ldr	r3, [r7, #4]
 8015696:	695c      	ldr	r4, [r3, #20]
 8015698:	4b5b      	ldr	r3, [pc, #364]	; (8015808 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b8>)
 801569a:	9300      	str	r3, [sp, #0]
 801569c:	2325      	movs	r3, #37	; 0x25
 801569e:	4a58      	ldr	r2, [pc, #352]	; (8015800 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b0>)
 80156a0:	4958      	ldr	r1, [pc, #352]	; (8015804 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b4>)
 80156a2:	6878      	ldr	r0, [r7, #4]
 80156a4:	47a0      	blx	r4
 80156a6:	2301      	movs	r3, #1
 80156a8:	e0a4      	b.n	80157f4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a4>
  // Tensorflow's Reshape allows one of the shape components to have the
  // special -1 value, meaning it will be calculated automatically based on the
  // input. Here we calculate what that dimension should be so that the number
  // of output elements in the same as the number of input elements.
  int num_input_elements = NumElements(input);
 80156aa:	69b8      	ldr	r0, [r7, #24]
 80156ac:	f7fe faa0 	bl	8013bf0 <_ZN6tflite11NumElementsEPK12TfLiteTensor>
 80156b0:	4602      	mov	r2, r0
 80156b2:	460b      	mov	r3, r1
 80156b4:	4613      	mov	r3, r2
 80156b6:	613b      	str	r3, [r7, #16]
  TfLiteIntArray* output_shape = output->dims;
 80156b8:	697b      	ldr	r3, [r7, #20]
 80156ba:	689b      	ldr	r3, [r3, #8]
 80156bc:	60fb      	str	r3, [r7, #12]

  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
 80156be:	6838      	ldr	r0, [r7, #0]
 80156c0:	f7fd ff10 	bl	80134e4 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 80156c4:	4603      	mov	r3, r0
      output_shape->size == 1 && output_shape->data[0] == 0) {
 80156c6:	2b01      	cmp	r3, #1
 80156c8:	d109      	bne.n	80156de <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x8e>
 80156ca:	68fb      	ldr	r3, [r7, #12]
 80156cc:	681b      	ldr	r3, [r3, #0]
  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
 80156ce:	2b01      	cmp	r3, #1
 80156d0:	d105      	bne.n	80156de <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x8e>
      output_shape->size == 1 && output_shape->data[0] == 0) {
 80156d2:	68fb      	ldr	r3, [r7, #12]
 80156d4:	685b      	ldr	r3, [r3, #4]
 80156d6:	2b00      	cmp	r3, #0
 80156d8:	d101      	bne.n	80156de <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x8e>
 80156da:	2301      	movs	r3, #1
 80156dc:	e000      	b.n	80156e0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x90>
 80156de:	2300      	movs	r3, #0
  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
 80156e0:	2b00      	cmp	r3, #0
 80156e2:	d002      	beq.n	80156ea <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x9a>
    // Legacy tflite models use a shape parameter of [0] to indicate scalars,
    // so adjust accordingly. TODO(b/111614235): Allow zero-sized buffers during
    // toco conversion.
    output_shape->size = 0;
 80156e4:	68fb      	ldr	r3, [r7, #12]
 80156e6:	2200      	movs	r2, #0
 80156e8:	601a      	str	r2, [r3, #0]
  }

  int num_output_elements = 1;
 80156ea:	2301      	movs	r3, #1
 80156ec:	627b      	str	r3, [r7, #36]	; 0x24
  int stretch_dim = -1;
 80156ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80156f2:	623b      	str	r3, [r7, #32]
  for (int i = 0; i < output_shape->size; ++i) {
 80156f4:	2300      	movs	r3, #0
 80156f6:	61fb      	str	r3, [r7, #28]
 80156f8:	68fb      	ldr	r3, [r7, #12]
 80156fa:	681b      	ldr	r3, [r3, #0]
 80156fc:	69fa      	ldr	r2, [r7, #28]
 80156fe:	429a      	cmp	r2, r3
 8015700:	da2b      	bge.n	801575a <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x10a>
    int value = output_shape->data[i];
 8015702:	68fa      	ldr	r2, [r7, #12]
 8015704:	69fb      	ldr	r3, [r7, #28]
 8015706:	009b      	lsls	r3, r3, #2
 8015708:	4413      	add	r3, r2
 801570a:	685b      	ldr	r3, [r3, #4]
 801570c:	60bb      	str	r3, [r7, #8]
    if (value == -1) {
 801570e:	68bb      	ldr	r3, [r7, #8]
 8015710:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015714:	d118      	bne.n	8015748 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xf8>
      TF_LITE_ENSURE_EQ(context, stretch_dim, -1);
 8015716:	6a3b      	ldr	r3, [r7, #32]
 8015718:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801571c:	d011      	beq.n	8015742 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xf2>
 801571e:	687b      	ldr	r3, [r7, #4]
 8015720:	695c      	ldr	r4, [r3, #20]
 8015722:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015726:	9303      	str	r3, [sp, #12]
 8015728:	6a3b      	ldr	r3, [r7, #32]
 801572a:	9302      	str	r3, [sp, #8]
 801572c:	4b37      	ldr	r3, [pc, #220]	; (801580c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1bc>)
 801572e:	9301      	str	r3, [sp, #4]
 8015730:	4b37      	ldr	r3, [pc, #220]	; (8015810 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1c0>)
 8015732:	9300      	str	r3, [sp, #0]
 8015734:	233a      	movs	r3, #58	; 0x3a
 8015736:	4a32      	ldr	r2, [pc, #200]	; (8015800 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b0>)
 8015738:	4936      	ldr	r1, [pc, #216]	; (8015814 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1c4>)
 801573a:	6878      	ldr	r0, [r7, #4]
 801573c:	47a0      	blx	r4
 801573e:	2301      	movs	r3, #1
 8015740:	e058      	b.n	80157f4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a4>
      stretch_dim = i;
 8015742:	69fb      	ldr	r3, [r7, #28]
 8015744:	623b      	str	r3, [r7, #32]
 8015746:	e004      	b.n	8015752 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x102>
    } else {
      num_output_elements *= value;
 8015748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801574a:	68ba      	ldr	r2, [r7, #8]
 801574c:	fb02 f303 	mul.w	r3, r2, r3
 8015750:	627b      	str	r3, [r7, #36]	; 0x24
  for (int i = 0; i < output_shape->size; ++i) {
 8015752:	69fb      	ldr	r3, [r7, #28]
 8015754:	3301      	adds	r3, #1
 8015756:	61fb      	str	r3, [r7, #28]
 8015758:	e7ce      	b.n	80156f8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xa8>
    }
  }
  if (stretch_dim != -1) {
 801575a:	6a3b      	ldr	r3, [r7, #32]
 801575c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015760:	d011      	beq.n	8015786 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x136>
    output_shape->data[stretch_dim] = num_input_elements / num_output_elements;
 8015762:	693a      	ldr	r2, [r7, #16]
 8015764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015766:	fb92 f2f3 	sdiv	r2, r2, r3
 801576a:	68f9      	ldr	r1, [r7, #12]
 801576c:	6a3b      	ldr	r3, [r7, #32]
 801576e:	009b      	lsls	r3, r3, #2
 8015770:	440b      	add	r3, r1
 8015772:	605a      	str	r2, [r3, #4]
    num_output_elements *= output_shape->data[stretch_dim];
 8015774:	68fa      	ldr	r2, [r7, #12]
 8015776:	6a3b      	ldr	r3, [r7, #32]
 8015778:	009b      	lsls	r3, r3, #2
 801577a:	4413      	add	r3, r2
 801577c:	685a      	ldr	r2, [r3, #4]
 801577e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015780:	fb02 f303 	mul.w	r3, r2, r3
 8015784:	627b      	str	r3, [r7, #36]	; 0x24
  }

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 8015786:	69bb      	ldr	r3, [r7, #24]
 8015788:	781a      	ldrb	r2, [r3, #0]
 801578a:	697b      	ldr	r3, [r7, #20]
 801578c:	781b      	ldrb	r3, [r3, #0]
 801578e:	429a      	cmp	r2, r3
 8015790:	d01a      	beq.n	80157c8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x178>
 8015792:	687b      	ldr	r3, [r7, #4]
 8015794:	695c      	ldr	r4, [r3, #20]
 8015796:	69bb      	ldr	r3, [r7, #24]
 8015798:	781b      	ldrb	r3, [r3, #0]
 801579a:	4618      	mov	r0, r3
 801579c:	f7f5 f836 	bl	800a80c <TfLiteTypeGetName>
 80157a0:	4605      	mov	r5, r0
 80157a2:	697b      	ldr	r3, [r7, #20]
 80157a4:	781b      	ldrb	r3, [r3, #0]
 80157a6:	4618      	mov	r0, r3
 80157a8:	f7f5 f830 	bl	800a80c <TfLiteTypeGetName>
 80157ac:	4603      	mov	r3, r0
 80157ae:	9303      	str	r3, [sp, #12]
 80157b0:	9502      	str	r5, [sp, #8]
 80157b2:	4b19      	ldr	r3, [pc, #100]	; (8015818 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1c8>)
 80157b4:	9301      	str	r3, [sp, #4]
 80157b6:	4b19      	ldr	r3, [pc, #100]	; (801581c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1cc>)
 80157b8:	9300      	str	r3, [sp, #0]
 80157ba:	2345      	movs	r3, #69	; 0x45
 80157bc:	4a10      	ldr	r2, [pc, #64]	; (8015800 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b0>)
 80157be:	4918      	ldr	r1, [pc, #96]	; (8015820 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1d0>)
 80157c0:	6878      	ldr	r0, [r7, #4]
 80157c2:	47a0      	blx	r4
 80157c4:	2301      	movs	r3, #1
 80157c6:	e015      	b.n	80157f4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a4>
  TF_LITE_ENSURE_EQ(context, num_input_elements, num_output_elements);
 80157c8:	693a      	ldr	r2, [r7, #16]
 80157ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157cc:	429a      	cmp	r2, r3
 80157ce:	d010      	beq.n	80157f2 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a2>
 80157d0:	687b      	ldr	r3, [r7, #4]
 80157d2:	695c      	ldr	r4, [r3, #20]
 80157d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157d6:	9303      	str	r3, [sp, #12]
 80157d8:	693b      	ldr	r3, [r7, #16]
 80157da:	9302      	str	r3, [sp, #8]
 80157dc:	4b11      	ldr	r3, [pc, #68]	; (8015824 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1d4>)
 80157de:	9301      	str	r3, [sp, #4]
 80157e0:	4b11      	ldr	r3, [pc, #68]	; (8015828 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1d8>)
 80157e2:	9300      	str	r3, [sp, #0]
 80157e4:	2346      	movs	r3, #70	; 0x46
 80157e6:	4a06      	ldr	r2, [pc, #24]	; (8015800 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b0>)
 80157e8:	490a      	ldr	r1, [pc, #40]	; (8015814 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1c4>)
 80157ea:	6878      	ldr	r0, [r7, #4]
 80157ec:	47a0      	blx	r4
 80157ee:	2301      	movs	r3, #1
 80157f0:	e000      	b.n	80157f4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a4>
  return kTfLiteOk;
 80157f2:	2300      	movs	r3, #0
}
 80157f4:	4618      	mov	r0, r3
 80157f6:	3728      	adds	r7, #40	; 0x28
 80157f8:	46bd      	mov	sp, r7
 80157fa:	bdb0      	pop	{r4, r5, r7, pc}
 80157fc:	0802d24c 	.word	0x0802d24c
 8015800:	0802d1f8 	.word	0x0802d1f8
 8015804:	0802d234 	.word	0x0802d234
 8015808:	0802d260 	.word	0x0802d260
 801580c:	0802d290 	.word	0x0802d290
 8015810:	0802d294 	.word	0x0802d294
 8015814:	0802d274 	.word	0x0802d274
 8015818:	0802d2bc 	.word	0x0802d2bc
 801581c:	0802d2cc 	.word	0x0802d2cc
 8015820:	0802d2a0 	.word	0x0802d2a0
 8015824:	0802d2d8 	.word	0x0802d2d8
 8015828:	0802d2ec 	.word	0x0802d2ec

0801582c <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 801582c:	b590      	push	{r4, r7, lr}
 801582e:	b087      	sub	sp, #28
 8015830:	af04      	add	r7, sp, #16
 8015832:	6078      	str	r0, [r7, #4]
 8015834:	6039      	str	r1, [r7, #0]
  TF_LITE_ENSURE(context, NumInputs(node) == 1 || NumInputs(node) == 2);
 8015836:	6838      	ldr	r0, [r7, #0]
 8015838:	f7fd fe54 	bl	80134e4 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 801583c:	4603      	mov	r3, r0
 801583e:	2b01      	cmp	r3, #1
 8015840:	d007      	beq.n	8015852 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x26>
 8015842:	6838      	ldr	r0, [r7, #0]
 8015844:	f7fd fe4e 	bl	80134e4 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 8015848:	4603      	mov	r3, r0
 801584a:	2b02      	cmp	r3, #2
 801584c:	d001      	beq.n	8015852 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x26>
 801584e:	2301      	movs	r3, #1
 8015850:	e000      	b.n	8015854 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x28>
 8015852:	2300      	movs	r3, #0
 8015854:	2b00      	cmp	r3, #0
 8015856:	d00a      	beq.n	801586e <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x42>
 8015858:	687b      	ldr	r3, [r7, #4]
 801585a:	695c      	ldr	r4, [r3, #20]
 801585c:	4b27      	ldr	r3, [pc, #156]	; (80158fc <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd0>)
 801585e:	9300      	str	r3, [sp, #0]
 8015860:	234b      	movs	r3, #75	; 0x4b
 8015862:	4a27      	ldr	r2, [pc, #156]	; (8015900 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd4>)
 8015864:	4927      	ldr	r1, [pc, #156]	; (8015904 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd8>)
 8015866:	6878      	ldr	r0, [r7, #4]
 8015868:	47a0      	blx	r4
 801586a:	2301      	movs	r3, #1
 801586c:	e041      	b.n	80158f2 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xc6>
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 801586e:	6838      	ldr	r0, [r7, #0]
 8015870:	f7fd fe45 	bl	80134fe <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 8015874:	4603      	mov	r3, r0
 8015876:	2b01      	cmp	r3, #1
 8015878:	bf14      	ite	ne
 801587a:	2301      	movne	r3, #1
 801587c:	2300      	moveq	r3, #0
 801587e:	b2db      	uxtb	r3, r3
 8015880:	2b00      	cmp	r3, #0
 8015882:	d013      	beq.n	80158ac <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x80>
 8015884:	687b      	ldr	r3, [r7, #4]
 8015886:	695c      	ldr	r4, [r3, #20]
 8015888:	6838      	ldr	r0, [r7, #0]
 801588a:	f7fd fe38 	bl	80134fe <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 801588e:	4603      	mov	r3, r0
 8015890:	2201      	movs	r2, #1
 8015892:	9203      	str	r2, [sp, #12]
 8015894:	9302      	str	r3, [sp, #8]
 8015896:	4b1c      	ldr	r3, [pc, #112]	; (8015908 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xdc>)
 8015898:	9301      	str	r3, [sp, #4]
 801589a:	4b1c      	ldr	r3, [pc, #112]	; (801590c <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xe0>)
 801589c:	9300      	str	r3, [sp, #0]
 801589e:	234c      	movs	r3, #76	; 0x4c
 80158a0:	4a17      	ldr	r2, [pc, #92]	; (8015900 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd4>)
 80158a2:	491b      	ldr	r1, [pc, #108]	; (8015910 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xe4>)
 80158a4:	6878      	ldr	r0, [r7, #4]
 80158a6:	47a0      	blx	r4
 80158a8:	2301      	movs	r3, #1
 80158aa:	e022      	b.n	80158f2 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xc6>
  TF_LITE_ENSURE_EQ(context, ReshapeOutput(context, node), kTfLiteOk);
 80158ac:	6839      	ldr	r1, [r7, #0]
 80158ae:	6878      	ldr	r0, [r7, #4]
 80158b0:	f7ff fece 	bl	8015650 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>
 80158b4:	4603      	mov	r3, r0
 80158b6:	2b00      	cmp	r3, #0
 80158b8:	bf14      	ite	ne
 80158ba:	2301      	movne	r3, #1
 80158bc:	2300      	moveq	r3, #0
 80158be:	b2db      	uxtb	r3, r3
 80158c0:	2b00      	cmp	r3, #0
 80158c2:	d015      	beq.n	80158f0 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xc4>
 80158c4:	687b      	ldr	r3, [r7, #4]
 80158c6:	695c      	ldr	r4, [r3, #20]
 80158c8:	6839      	ldr	r1, [r7, #0]
 80158ca:	6878      	ldr	r0, [r7, #4]
 80158cc:	f7ff fec0 	bl	8015650 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>
 80158d0:	4603      	mov	r3, r0
 80158d2:	461a      	mov	r2, r3
 80158d4:	2300      	movs	r3, #0
 80158d6:	9303      	str	r3, [sp, #12]
 80158d8:	9202      	str	r2, [sp, #8]
 80158da:	4b0e      	ldr	r3, [pc, #56]	; (8015914 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xe8>)
 80158dc:	9301      	str	r3, [sp, #4]
 80158de:	4b0e      	ldr	r3, [pc, #56]	; (8015918 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xec>)
 80158e0:	9300      	str	r3, [sp, #0]
 80158e2:	234d      	movs	r3, #77	; 0x4d
 80158e4:	4a06      	ldr	r2, [pc, #24]	; (8015900 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd4>)
 80158e6:	490a      	ldr	r1, [pc, #40]	; (8015910 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xe4>)
 80158e8:	6878      	ldr	r0, [r7, #4]
 80158ea:	47a0      	blx	r4
 80158ec:	2301      	movs	r3, #1
 80158ee:	e000      	b.n	80158f2 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xc6>
  return kTfLiteOk;
 80158f0:	2300      	movs	r3, #0
}
 80158f2:	4618      	mov	r0, r3
 80158f4:	370c      	adds	r7, #12
 80158f6:	46bd      	mov	sp, r7
 80158f8:	bd90      	pop	{r4, r7, pc}
 80158fa:	bf00      	nop
 80158fc:	0802d300 	.word	0x0802d300
 8015900:	0802d1f8 	.word	0x0802d1f8
 8015904:	0802d234 	.word	0x0802d234
 8015908:	0802d330 	.word	0x0802d330
 801590c:	0802d334 	.word	0x0802d334
 8015910:	0802d274 	.word	0x0802d274
 8015914:	0802d348 	.word	0x0802d348
 8015918:	0802d354 	.word	0x0802d354

0801591c <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 801591c:	b580      	push	{r7, lr}
 801591e:	b088      	sub	sp, #32
 8015920:	af00      	add	r7, sp, #0
 8015922:	6078      	str	r0, [r7, #4]
 8015924:	6039      	str	r1, [r7, #0]
  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
 8015926:	2200      	movs	r2, #0
 8015928:	6839      	ldr	r1, [r7, #0]
 801592a:	6878      	ldr	r0, [r7, #4]
 801592c:	f7fd fd21 	bl	8013372 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8015930:	61b8      	str	r0, [r7, #24]
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 8015932:	2200      	movs	r2, #0
 8015934:	6839      	ldr	r1, [r7, #0]
 8015936:	6878      	ldr	r0, [r7, #4]
 8015938:	f7fd fd2b 	bl	8013392 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 801593c:	6178      	str	r0, [r7, #20]

  // TODO(b/162522304): storing input bytes in OpData increases some models
  // significantly, possibly due to alignment issues.
  size_t input_bytes;
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(input->type, &input_bytes));
 801593e:	69bb      	ldr	r3, [r7, #24]
 8015940:	7a1b      	ldrb	r3, [r3, #8]
 8015942:	f107 020c 	add.w	r2, r7, #12
 8015946:	4611      	mov	r1, r2
 8015948:	4618      	mov	r0, r3
 801594a:	f7f9 f861 	bl	800ea10 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
 801594e:	4603      	mov	r3, r0
 8015950:	74fb      	strb	r3, [r7, #19]
 8015952:	7cfb      	ldrb	r3, [r7, #19]
 8015954:	2b00      	cmp	r3, #0
 8015956:	d001      	beq.n	801595c <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x40>
 8015958:	7cfb      	ldrb	r3, [r7, #19]
 801595a:	e024      	b.n	80159a6 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x8a>
  input_bytes *= ElementCount(*input->dims);
 801595c:	69bb      	ldr	r3, [r7, #24]
 801595e:	685b      	ldr	r3, [r3, #4]
 8015960:	4618      	mov	r0, r3
 8015962:	f7fc ffb9 	bl	80128d8 <_ZN6tflite12ElementCountERK14TfLiteIntArray>
 8015966:	4602      	mov	r2, r0
 8015968:	68fb      	ldr	r3, [r7, #12]
 801596a:	fb02 f303 	mul.w	r3, r2, r3
 801596e:	60fb      	str	r3, [r7, #12]

  // Do nothing for in-place reshape.
  if (input->data.raw != output->data.raw) {
 8015970:	69bb      	ldr	r3, [r7, #24]
 8015972:	681a      	ldr	r2, [r3, #0]
 8015974:	697b      	ldr	r3, [r7, #20]
 8015976:	681b      	ldr	r3, [r3, #0]
 8015978:	429a      	cmp	r2, r3
 801597a:	d013      	beq.n	80159a4 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x88>
    // Otherwise perform reshape with copy.
    for (size_t i = 0; i < input_bytes; ++i) {
 801597c:	2300      	movs	r3, #0
 801597e:	61fb      	str	r3, [r7, #28]
 8015980:	68fb      	ldr	r3, [r7, #12]
 8015982:	69fa      	ldr	r2, [r7, #28]
 8015984:	429a      	cmp	r2, r3
 8015986:	d20d      	bcs.n	80159a4 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x88>
      output->data.raw[i] = input->data.raw[i];
 8015988:	69bb      	ldr	r3, [r7, #24]
 801598a:	681a      	ldr	r2, [r3, #0]
 801598c:	69fb      	ldr	r3, [r7, #28]
 801598e:	441a      	add	r2, r3
 8015990:	697b      	ldr	r3, [r7, #20]
 8015992:	6819      	ldr	r1, [r3, #0]
 8015994:	69fb      	ldr	r3, [r7, #28]
 8015996:	440b      	add	r3, r1
 8015998:	7812      	ldrb	r2, [r2, #0]
 801599a:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < input_bytes; ++i) {
 801599c:	69fb      	ldr	r3, [r7, #28]
 801599e:	3301      	adds	r3, #1
 80159a0:	61fb      	str	r3, [r7, #28]
 80159a2:	e7ed      	b.n	8015980 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x64>
    }
  }
  return kTfLiteOk;
 80159a4:	2300      	movs	r3, #0
}
 80159a6:	4618      	mov	r0, r3
 80159a8:	3720      	adds	r7, #32
 80159aa:	46bd      	mov	sp, r7
 80159ac:	bd80      	pop	{r7, pc}
	...

080159b0 <_ZN6tflite3ops5micro16Register_RESHAPEEv>:

}  // namespace reshape

TfLiteRegistration Register_RESHAPE() {
 80159b0:	b4b0      	push	{r4, r5, r7}
 80159b2:	b083      	sub	sp, #12
 80159b4:	af00      	add	r7, sp, #0
 80159b6:	6078      	str	r0, [r7, #4]
          /*prepare=*/reshape::Prepare,
          /*invoke=*/reshape::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 80159b8:	687b      	ldr	r3, [r7, #4]
 80159ba:	4a07      	ldr	r2, [pc, #28]	; (80159d8 <_ZN6tflite3ops5micro16Register_RESHAPEEv+0x28>)
 80159bc:	461c      	mov	r4, r3
 80159be:	4615      	mov	r5, r2
 80159c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80159c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80159c4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80159c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80159cc:	6878      	ldr	r0, [r7, #4]
 80159ce:	370c      	adds	r7, #12
 80159d0:	46bd      	mov	sp, r7
 80159d2:	bcb0      	pop	{r4, r5, r7}
 80159d4:	4770      	bx	lr
 80159d6:	bf00      	nop
 80159d8:	0802d374 	.word	0x0802d374
 80159dc:	00000000 	.word	0x00000000

080159e0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>:

TfLiteStatus CalculateSoftmaxParams(TfLiteContext* context,
                                    const TfLiteTensor* input,
                                    TfLiteTensor* output,
                                    const TfLiteSoftmaxParams* params,
                                    SoftmaxParams* op_data) {
 80159e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80159e4:	b090      	sub	sp, #64	; 0x40
 80159e6:	af06      	add	r7, sp, #24
 80159e8:	60f8      	str	r0, [r7, #12]
 80159ea:	60b9      	str	r1, [r7, #8]
 80159ec:	607a      	str	r2, [r7, #4]
 80159ee:	603b      	str	r3, [r7, #0]
  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
 80159f0:	68bb      	ldr	r3, [r7, #8]
 80159f2:	781b      	ldrb	r3, [r3, #0]
 80159f4:	2b09      	cmp	r3, #9
 80159f6:	d004      	beq.n	8015a02 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x22>
 80159f8:	68bb      	ldr	r3, [r7, #8]
 80159fa:	781b      	ldrb	r3, [r3, #0]
 80159fc:	2b07      	cmp	r3, #7
 80159fe:	f040 81b6 	bne.w	8015d6e <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x38e>
    if (input->type == kTfLiteInt16) {
 8015a02:	68bb      	ldr	r3, [r7, #8]
 8015a04:	781b      	ldrb	r3, [r3, #0]
 8015a06:	2b07      	cmp	r3, #7
 8015a08:	d156      	bne.n	8015ab8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xd8>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
 8015a0a:	687b      	ldr	r3, [r7, #4]
 8015a0c:	691b      	ldr	r3, [r3, #16]
 8015a0e:	2b00      	cmp	r3, #0
 8015a10:	d011      	beq.n	8015a36 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x56>
 8015a12:	68fb      	ldr	r3, [r7, #12]
 8015a14:	695c      	ldr	r4, [r3, #20]
 8015a16:	687b      	ldr	r3, [r7, #4]
 8015a18:	691b      	ldr	r3, [r3, #16]
 8015a1a:	2200      	movs	r2, #0
 8015a1c:	9203      	str	r2, [sp, #12]
 8015a1e:	9302      	str	r3, [sp, #8]
 8015a20:	4ba1      	ldr	r3, [pc, #644]	; (8015ca8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c8>)
 8015a22:	9301      	str	r3, [sp, #4]
 8015a24:	4ba1      	ldr	r3, [pc, #644]	; (8015cac <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2cc>)
 8015a26:	9300      	str	r3, [sp, #0]
 8015a28:	2325      	movs	r3, #37	; 0x25
 8015a2a:	4aa1      	ldr	r2, [pc, #644]	; (8015cb0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 8015a2c:	49a1      	ldr	r1, [pc, #644]	; (8015cb4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d4>)
 8015a2e:	68f8      	ldr	r0, [r7, #12]
 8015a30:	47a0      	blx	r4
 8015a32:	2301      	movs	r3, #1
 8015a34:	e1e0      	b.n	8015df8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
      TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 32768,
 8015a36:	687b      	ldr	r3, [r7, #4]
 8015a38:	edd3 7a03 	vldr	s15, [r3, #12]
 8015a3c:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 8015cb8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d8>
 8015a40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015a44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a48:	dd07      	ble.n	8015a5a <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x7a>
 8015a4a:	687b      	ldr	r3, [r7, #4]
 8015a4c:	edd3 7a03 	vldr	s15, [r3, #12]
 8015a50:	ed9f 7a99 	vldr	s14, [pc, #612]	; 8015cb8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d8>
 8015a54:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015a58:	e006      	b.n	8015a68 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x88>
 8015a5a:	687b      	ldr	r3, [r7, #4]
 8015a5c:	edd3 7a03 	vldr	s15, [r3, #12]
 8015a60:	ed9f 7a95 	vldr	s14, [pc, #596]	; 8015cb8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d8>
 8015a64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015a68:	edc7 7a08 	vstr	s15, [r7, #32]
 8015a6c:	edd7 7a08 	vldr	s15, [r7, #32]
 8015a70:	ed9f 7a92 	vldr	s14, [pc, #584]	; 8015cbc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2dc>
 8015a74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015a78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a7c:	f340 80dd 	ble.w	8015c3a <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x25a>
 8015a80:	68fb      	ldr	r3, [r7, #12]
 8015a82:	695c      	ldr	r4, [r3, #20]
 8015a84:	687b      	ldr	r3, [r7, #4]
 8015a86:	68db      	ldr	r3, [r3, #12]
 8015a88:	4618      	mov	r0, r3
 8015a8a:	f7ea fd8f 	bl	80005ac <__aeabi_f2d>
 8015a8e:	4602      	mov	r2, r0
 8015a90:	460b      	mov	r3, r1
 8015a92:	f04f 0000 	mov.w	r0, #0
 8015a96:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8015a9a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015a9e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8015aa2:	4b87      	ldr	r3, [pc, #540]	; (8015cc0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e0>)
 8015aa4:	9301      	str	r3, [sp, #4]
 8015aa6:	4b87      	ldr	r3, [pc, #540]	; (8015cc4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e4>)
 8015aa8:	9300      	str	r3, [sp, #0]
 8015aaa:	2326      	movs	r3, #38	; 0x26
 8015aac:	4a80      	ldr	r2, [pc, #512]	; (8015cb0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 8015aae:	4986      	ldr	r1, [pc, #536]	; (8015cc8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
 8015ab0:	68f8      	ldr	r0, [r7, #12]
 8015ab2:	47a0      	blx	r4
 8015ab4:	2301      	movs	r3, #1
 8015ab6:	e19f      	b.n	8015df8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
                          (0.001f * 1.f / 32768));
    } else {  // input->type == kTfLiteInt8
      TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteInt8);
 8015ab8:	68bb      	ldr	r3, [r7, #8]
 8015aba:	781b      	ldrb	r3, [r3, #0]
 8015abc:	2b09      	cmp	r3, #9
 8015abe:	d018      	beq.n	8015af2 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x112>
 8015ac0:	68fb      	ldr	r3, [r7, #12]
 8015ac2:	695c      	ldr	r4, [r3, #20]
 8015ac4:	68bb      	ldr	r3, [r7, #8]
 8015ac6:	781b      	ldrb	r3, [r3, #0]
 8015ac8:	4618      	mov	r0, r3
 8015aca:	f7f4 fe9f 	bl	800a80c <TfLiteTypeGetName>
 8015ace:	4605      	mov	r5, r0
 8015ad0:	2009      	movs	r0, #9
 8015ad2:	f7f4 fe9b 	bl	800a80c <TfLiteTypeGetName>
 8015ad6:	4603      	mov	r3, r0
 8015ad8:	9303      	str	r3, [sp, #12]
 8015ada:	9502      	str	r5, [sp, #8]
 8015adc:	4b7b      	ldr	r3, [pc, #492]	; (8015ccc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ec>)
 8015ade:	9301      	str	r3, [sp, #4]
 8015ae0:	4b7b      	ldr	r3, [pc, #492]	; (8015cd0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f0>)
 8015ae2:	9300      	str	r3, [sp, #0]
 8015ae4:	2329      	movs	r3, #41	; 0x29
 8015ae6:	4a72      	ldr	r2, [pc, #456]	; (8015cb0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 8015ae8:	497a      	ldr	r1, [pc, #488]	; (8015cd4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f4>)
 8015aea:	68f8      	ldr	r0, [r7, #12]
 8015aec:	47a0      	blx	r4
 8015aee:	2301      	movs	r3, #1
 8015af0:	e182      	b.n	8015df8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
      if (output->type == kTfLiteInt16) {
 8015af2:	687b      	ldr	r3, [r7, #4]
 8015af4:	781b      	ldrb	r3, [r3, #0]
 8015af6:	2b07      	cmp	r3, #7
 8015af8:	d155      	bne.n	8015ba6 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x1c6>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -32768);
 8015afa:	687b      	ldr	r3, [r7, #4]
 8015afc:	691b      	ldr	r3, [r3, #16]
 8015afe:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8015b02:	d011      	beq.n	8015b28 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x148>
 8015b04:	68fb      	ldr	r3, [r7, #12]
 8015b06:	695c      	ldr	r4, [r3, #20]
 8015b08:	687b      	ldr	r3, [r7, #4]
 8015b0a:	691b      	ldr	r3, [r3, #16]
 8015b0c:	4a72      	ldr	r2, [pc, #456]	; (8015cd8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f8>)
 8015b0e:	9203      	str	r2, [sp, #12]
 8015b10:	9302      	str	r3, [sp, #8]
 8015b12:	4b72      	ldr	r3, [pc, #456]	; (8015cdc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2fc>)
 8015b14:	9301      	str	r3, [sp, #4]
 8015b16:	4b65      	ldr	r3, [pc, #404]	; (8015cac <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2cc>)
 8015b18:	9300      	str	r3, [sp, #0]
 8015b1a:	232b      	movs	r3, #43	; 0x2b
 8015b1c:	4a64      	ldr	r2, [pc, #400]	; (8015cb0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 8015b1e:	4965      	ldr	r1, [pc, #404]	; (8015cb4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d4>)
 8015b20:	68f8      	ldr	r0, [r7, #12]
 8015b22:	47a0      	blx	r4
 8015b24:	2301      	movs	r3, #1
 8015b26:	e167      	b.n	8015df8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
        TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 65536,
 8015b28:	687b      	ldr	r3, [r7, #4]
 8015b2a:	edd3 7a03 	vldr	s15, [r3, #12]
 8015b2e:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8015ce0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>
 8015b32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015b36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b3a:	dd07      	ble.n	8015b4c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x16c>
 8015b3c:	687b      	ldr	r3, [r7, #4]
 8015b3e:	edd3 7a03 	vldr	s15, [r3, #12]
 8015b42:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8015ce0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>
 8015b46:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015b4a:	e006      	b.n	8015b5a <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x17a>
 8015b4c:	687b      	ldr	r3, [r7, #4]
 8015b4e:	edd3 7a03 	vldr	s15, [r3, #12]
 8015b52:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8015ce0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>
 8015b56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015b5a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 8015b5e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8015b62:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8015ce4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x304>
 8015b66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b6e:	dd64      	ble.n	8015c3a <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x25a>
 8015b70:	68fb      	ldr	r3, [r7, #12]
 8015b72:	695c      	ldr	r4, [r3, #20]
 8015b74:	687b      	ldr	r3, [r7, #4]
 8015b76:	68db      	ldr	r3, [r3, #12]
 8015b78:	4618      	mov	r0, r3
 8015b7a:	f7ea fd17 	bl	80005ac <__aeabi_f2d>
 8015b7e:	4602      	mov	r2, r0
 8015b80:	460b      	mov	r3, r1
 8015b82:	f04f 0000 	mov.w	r0, #0
 8015b86:	4958      	ldr	r1, [pc, #352]	; (8015ce8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x308>)
 8015b88:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015b8c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8015b90:	4b56      	ldr	r3, [pc, #344]	; (8015cec <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x30c>)
 8015b92:	9301      	str	r3, [sp, #4]
 8015b94:	4b4b      	ldr	r3, [pc, #300]	; (8015cc4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e4>)
 8015b96:	9300      	str	r3, [sp, #0]
 8015b98:	232c      	movs	r3, #44	; 0x2c
 8015b9a:	4a45      	ldr	r2, [pc, #276]	; (8015cb0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 8015b9c:	494a      	ldr	r1, [pc, #296]	; (8015cc8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
 8015b9e:	68f8      	ldr	r0, [r7, #12]
 8015ba0:	47a0      	blx	r4
 8015ba2:	2301      	movs	r3, #1
 8015ba4:	e128      	b.n	8015df8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
                            (0.001f * 1.f / 65536));
      } else {  // output->type == kTfLiteint8
        TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteInt8);
 8015ba6:	687b      	ldr	r3, [r7, #4]
 8015ba8:	781b      	ldrb	r3, [r3, #0]
 8015baa:	2b09      	cmp	r3, #9
 8015bac:	d018      	beq.n	8015be0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x200>
 8015bae:	68fb      	ldr	r3, [r7, #12]
 8015bb0:	695c      	ldr	r4, [r3, #20]
 8015bb2:	687b      	ldr	r3, [r7, #4]
 8015bb4:	781b      	ldrb	r3, [r3, #0]
 8015bb6:	4618      	mov	r0, r3
 8015bb8:	f7f4 fe28 	bl	800a80c <TfLiteTypeGetName>
 8015bbc:	4605      	mov	r5, r0
 8015bbe:	2009      	movs	r0, #9
 8015bc0:	f7f4 fe24 	bl	800a80c <TfLiteTypeGetName>
 8015bc4:	4603      	mov	r3, r0
 8015bc6:	9303      	str	r3, [sp, #12]
 8015bc8:	9502      	str	r5, [sp, #8]
 8015bca:	4b40      	ldr	r3, [pc, #256]	; (8015ccc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ec>)
 8015bcc:	9301      	str	r3, [sp, #4]
 8015bce:	4b48      	ldr	r3, [pc, #288]	; (8015cf0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x310>)
 8015bd0:	9300      	str	r3, [sp, #0]
 8015bd2:	232f      	movs	r3, #47	; 0x2f
 8015bd4:	4a36      	ldr	r2, [pc, #216]	; (8015cb0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 8015bd6:	493f      	ldr	r1, [pc, #252]	; (8015cd4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f4>)
 8015bd8:	68f8      	ldr	r0, [r7, #12]
 8015bda:	47a0      	blx	r4
 8015bdc:	2301      	movs	r3, #1
 8015bde:	e10b      	b.n	8015df8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -128);
 8015be0:	687b      	ldr	r3, [r7, #4]
 8015be2:	691b      	ldr	r3, [r3, #16]
 8015be4:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8015be8:	d012      	beq.n	8015c10 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x230>
 8015bea:	68fb      	ldr	r3, [r7, #12]
 8015bec:	695c      	ldr	r4, [r3, #20]
 8015bee:	687b      	ldr	r3, [r7, #4]
 8015bf0:	691b      	ldr	r3, [r3, #16]
 8015bf2:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8015bf6:	9203      	str	r2, [sp, #12]
 8015bf8:	9302      	str	r3, [sp, #8]
 8015bfa:	4b3e      	ldr	r3, [pc, #248]	; (8015cf4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x314>)
 8015bfc:	9301      	str	r3, [sp, #4]
 8015bfe:	4b2b      	ldr	r3, [pc, #172]	; (8015cac <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2cc>)
 8015c00:	9300      	str	r3, [sp, #0]
 8015c02:	2330      	movs	r3, #48	; 0x30
 8015c04:	4a2a      	ldr	r2, [pc, #168]	; (8015cb0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 8015c06:	492b      	ldr	r1, [pc, #172]	; (8015cb4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d4>)
 8015c08:	68f8      	ldr	r0, [r7, #12]
 8015c0a:	47a0      	blx	r4
 8015c0c:	2301      	movs	r3, #1
 8015c0e:	e0f3      	b.n	8015df8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
        TF_LITE_ENSURE(context, output->params.scale == 1.f / 256);
 8015c10:	687b      	ldr	r3, [r7, #4]
 8015c12:	edd3 7a03 	vldr	s15, [r3, #12]
 8015c16:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8015cf8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x318>
 8015c1a:	eef4 7a47 	vcmp.f32	s15, s14
 8015c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c22:	d00a      	beq.n	8015c3a <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x25a>
 8015c24:	68fb      	ldr	r3, [r7, #12]
 8015c26:	695c      	ldr	r4, [r3, #20]
 8015c28:	4b34      	ldr	r3, [pc, #208]	; (8015cfc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x31c>)
 8015c2a:	9300      	str	r3, [sp, #0]
 8015c2c:	2331      	movs	r3, #49	; 0x31
 8015c2e:	4a20      	ldr	r2, [pc, #128]	; (8015cb0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 8015c30:	4933      	ldr	r1, [pc, #204]	; (8015d00 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x320>)
 8015c32:	68f8      	ldr	r0, [r7, #12]
 8015c34:	47a0      	blx	r4
 8015c36:	2301      	movs	r3, #1
 8015c38:	e0de      	b.n	8015df8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
    }

    static const int kScaledDiffIntegerBits = 5;

    // Calculate input_multiplier and input_left_shift
    if (input->type == kTfLiteInt16) {
 8015c3a:	68bb      	ldr	r3, [r7, #8]
 8015c3c:	781b      	ldrb	r3, [r3, #0]
 8015c3e:	2b07      	cmp	r3, #7
 8015c40:	d160      	bne.n	8015d04 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x324>
      int input_left_shift;
      double input_scale_beta_rescale =
          static_cast<double>(input->params.scale) *
 8015c42:	68bb      	ldr	r3, [r7, #8]
 8015c44:	68db      	ldr	r3, [r3, #12]
 8015c46:	4618      	mov	r0, r3
 8015c48:	f7ea fcb0 	bl	80005ac <__aeabi_f2d>
 8015c4c:	4604      	mov	r4, r0
 8015c4e:	460d      	mov	r5, r1
          static_cast<double>(params->beta) /
 8015c50:	683b      	ldr	r3, [r7, #0]
 8015c52:	681b      	ldr	r3, [r3, #0]
 8015c54:	4618      	mov	r0, r3
 8015c56:	f7ea fca9 	bl	80005ac <__aeabi_f2d>
 8015c5a:	4602      	mov	r2, r0
 8015c5c:	460b      	mov	r3, r1
          static_cast<double>(input->params.scale) *
 8015c5e:	4620      	mov	r0, r4
 8015c60:	4629      	mov	r1, r5
 8015c62:	f7ea fcfb 	bl	800065c <__aeabi_dmul>
 8015c66:	4602      	mov	r2, r0
 8015c68:	460b      	mov	r3, r1
 8015c6a:	4610      	mov	r0, r2
 8015c6c:	4619      	mov	r1, r3
      double input_scale_beta_rescale =
 8015c6e:	a30c      	add	r3, pc, #48	; (adr r3, 8015ca0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c0>)
 8015c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c74:	f7ea fe1c 	bl	80008b0 <__aeabi_ddiv>
 8015c78:	4602      	mov	r2, r0
 8015c7a:	460b      	mov	r3, r1
 8015c7c:	e9c7 2306 	strd	r2, r3, [r7, #24]
          (10.0 / 65535.0);  // scale the input_diff such that [-65535, 0]
                             // correspond to [-10.0, 0.0]
      QuantizeMultiplier(input_scale_beta_rescale, &op_data->input_multiplier,
 8015c80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015c82:	3308      	adds	r3, #8
 8015c84:	f107 0214 	add.w	r2, r7, #20
 8015c88:	4611      	mov	r1, r2
 8015c8a:	4618      	mov	r0, r3
 8015c8c:	ed97 0b06 	vldr	d0, [r7, #24]
 8015c90:	f7f7 f940 	bl	800cf14 <_ZN6tflite18QuantizeMultiplierEdPlPi>
                         &input_left_shift);
      op_data->input_left_shift = input_left_shift;
 8015c94:	697a      	ldr	r2, [r7, #20]
 8015c96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015c98:	60da      	str	r2, [r3, #12]
          &op_data->input_multiplier, &input_left_shift);
      op_data->input_left_shift = input_left_shift;
      op_data->diff_min =
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
                                              op_data->input_left_shift);
    }
 8015c9a:	e0ac      	b.n	8015df6 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x416>
 8015c9c:	f3af 8000 	nop.w
 8015ca0:	00140014 	.word	0x00140014
 8015ca4:	3f240014 	.word	0x3f240014
 8015ca8:	0802d3f4 	.word	0x0802d3f4
 8015cac:	0802d3f8 	.word	0x0802d3f8
 8015cb0:	0802d394 	.word	0x0802d394
 8015cb4:	0802d3d8 	.word	0x0802d3d8
 8015cb8:	38000000 	.word	0x38000000
 8015cbc:	3303126f 	.word	0x3303126f
 8015cc0:	0802d434 	.word	0x0802d434
 8015cc4:	0802d440 	.word	0x0802d440
 8015cc8:	0802d414 	.word	0x0802d414
 8015ccc:	0802d474 	.word	0x0802d474
 8015cd0:	0802d480 	.word	0x0802d480
 8015cd4:	0802d458 	.word	0x0802d458
 8015cd8:	ffff8000 	.word	0xffff8000
 8015cdc:	0802d48c 	.word	0x0802d48c
 8015ce0:	37800000 	.word	0x37800000
 8015ce4:	3283126f 	.word	0x3283126f
 8015ce8:	3ef00000 	.word	0x3ef00000
 8015cec:	0802d494 	.word	0x0802d494
 8015cf0:	0802d4a0 	.word	0x0802d4a0
 8015cf4:	0802d4b0 	.word	0x0802d4b0
 8015cf8:	3b800000 	.word	0x3b800000
 8015cfc:	0802d4d0 	.word	0x0802d4d0
 8015d00:	0802d4b8 	.word	0x0802d4b8
          static_cast<double>(params->beta),
 8015d04:	683b      	ldr	r3, [r7, #0]
 8015d06:	681b      	ldr	r3, [r3, #0]
      tflite::PreprocessSoftmaxScaling(
 8015d08:	4618      	mov	r0, r3
 8015d0a:	f7ea fc4f 	bl	80005ac <__aeabi_f2d>
 8015d0e:	4680      	mov	r8, r0
 8015d10:	4689      	mov	r9, r1
          static_cast<double>(input->params.scale), kScaledDiffIntegerBits,
 8015d12:	68bb      	ldr	r3, [r7, #8]
 8015d14:	68db      	ldr	r3, [r3, #12]
      tflite::PreprocessSoftmaxScaling(
 8015d16:	4618      	mov	r0, r3
 8015d18:	f7ea fc48 	bl	80005ac <__aeabi_f2d>
 8015d1c:	4682      	mov	sl, r0
 8015d1e:	468b      	mov	fp, r1
 8015d20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015d22:	3308      	adds	r3, #8
 8015d24:	f107 0210 	add.w	r2, r7, #16
 8015d28:	4619      	mov	r1, r3
 8015d2a:	2005      	movs	r0, #5
 8015d2c:	ec4b ab11 	vmov	d1, sl, fp
 8015d30:	ec49 8b10 	vmov	d0, r8, r9
 8015d34:	f7f7 f9b8 	bl	800d0a8 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>
      op_data->input_left_shift = input_left_shift;
 8015d38:	693a      	ldr	r2, [r7, #16]
 8015d3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015d3c:	60da      	str	r2, [r3, #12]
                                              op_data->input_left_shift);
 8015d3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015d40:	68db      	ldr	r3, [r3, #12]
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
 8015d42:	221f      	movs	r2, #31
 8015d44:	4619      	mov	r1, r3
 8015d46:	2005      	movs	r0, #5
 8015d48:	f7f7 f9f6 	bl	800d138 <_ZN6tflite20CalculateInputRadiusEiii>
 8015d4c:	4603      	mov	r3, r0
 8015d4e:	4618      	mov	r0, r3
 8015d50:	f7ea fc1a 	bl	8000588 <__aeabi_i2d>
 8015d54:	4602      	mov	r2, r0
 8015d56:	460b      	mov	r3, r1
 8015d58:	4614      	mov	r4, r2
 8015d5a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
      op_data->diff_min =
 8015d5e:	4620      	mov	r0, r4
 8015d60:	4629      	mov	r1, r5
 8015d62:	f7ea ff15 	bl	8000b90 <__aeabi_d2iz>
 8015d66:	4602      	mov	r2, r0
 8015d68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015d6a:	619a      	str	r2, [r3, #24]
    }
 8015d6c:	e043      	b.n	8015df6 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x416>
  } else {
    TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
 8015d6e:	68bb      	ldr	r3, [r7, #8]
 8015d70:	781b      	ldrb	r3, [r3, #0]
 8015d72:	2b01      	cmp	r3, #1
 8015d74:	d018      	beq.n	8015da8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x3c8>
 8015d76:	68fb      	ldr	r3, [r7, #12]
 8015d78:	695c      	ldr	r4, [r3, #20]
 8015d7a:	68bb      	ldr	r3, [r7, #8]
 8015d7c:	781b      	ldrb	r3, [r3, #0]
 8015d7e:	4618      	mov	r0, r3
 8015d80:	f7f4 fd44 	bl	800a80c <TfLiteTypeGetName>
 8015d84:	4605      	mov	r5, r0
 8015d86:	2001      	movs	r0, #1
 8015d88:	f7f4 fd40 	bl	800a80c <TfLiteTypeGetName>
 8015d8c:	4603      	mov	r3, r0
 8015d8e:	9303      	str	r3, [sp, #12]
 8015d90:	9502      	str	r5, [sp, #8]
 8015d92:	4b1c      	ldr	r3, [pc, #112]	; (8015e04 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x424>)
 8015d94:	9301      	str	r3, [sp, #4]
 8015d96:	4b1c      	ldr	r3, [pc, #112]	; (8015e08 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x428>)
 8015d98:	9300      	str	r3, [sp, #0]
 8015d9a:	234e      	movs	r3, #78	; 0x4e
 8015d9c:	4a1b      	ldr	r2, [pc, #108]	; (8015e0c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x42c>)
 8015d9e:	491c      	ldr	r1, [pc, #112]	; (8015e10 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x430>)
 8015da0:	68f8      	ldr	r0, [r7, #12]
 8015da2:	47a0      	blx	r4
 8015da4:	2301      	movs	r3, #1
 8015da6:	e027      	b.n	8015df8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
 8015da8:	687b      	ldr	r3, [r7, #4]
 8015daa:	781b      	ldrb	r3, [r3, #0]
 8015dac:	2b01      	cmp	r3, #1
 8015dae:	d018      	beq.n	8015de2 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x402>
 8015db0:	68fb      	ldr	r3, [r7, #12]
 8015db2:	695c      	ldr	r4, [r3, #20]
 8015db4:	687b      	ldr	r3, [r7, #4]
 8015db6:	781b      	ldrb	r3, [r3, #0]
 8015db8:	4618      	mov	r0, r3
 8015dba:	f7f4 fd27 	bl	800a80c <TfLiteTypeGetName>
 8015dbe:	4605      	mov	r5, r0
 8015dc0:	2001      	movs	r0, #1
 8015dc2:	f7f4 fd23 	bl	800a80c <TfLiteTypeGetName>
 8015dc6:	4603      	mov	r3, r0
 8015dc8:	9303      	str	r3, [sp, #12]
 8015dca:	9502      	str	r5, [sp, #8]
 8015dcc:	4b0d      	ldr	r3, [pc, #52]	; (8015e04 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x424>)
 8015dce:	9301      	str	r3, [sp, #4]
 8015dd0:	4b10      	ldr	r3, [pc, #64]	; (8015e14 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x434>)
 8015dd2:	9300      	str	r3, [sp, #0]
 8015dd4:	234f      	movs	r3, #79	; 0x4f
 8015dd6:	4a0d      	ldr	r2, [pc, #52]	; (8015e0c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x42c>)
 8015dd8:	490d      	ldr	r1, [pc, #52]	; (8015e10 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x430>)
 8015dda:	68f8      	ldr	r0, [r7, #12]
 8015ddc:	47a0      	blx	r4
 8015dde:	2301      	movs	r3, #1
 8015de0:	e00a      	b.n	8015df8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
    op_data->beta = static_cast<double>(params->beta);
 8015de2:	683b      	ldr	r3, [r7, #0]
 8015de4:	681b      	ldr	r3, [r3, #0]
 8015de6:	4618      	mov	r0, r3
 8015de8:	f7ea fbe0 	bl	80005ac <__aeabi_f2d>
 8015dec:	4602      	mov	r2, r0
 8015dee:	460b      	mov	r3, r1
 8015df0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8015df2:	e9c1 2300 	strd	r2, r3, [r1]
  }
  return kTfLiteOk;
 8015df6:	2300      	movs	r3, #0
}
 8015df8:	4618      	mov	r0, r3
 8015dfa:	3728      	adds	r7, #40	; 0x28
 8015dfc:	46bd      	mov	sp, r7
 8015dfe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8015e02:	bf00      	nop
 8015e04:	0802d4f4 	.word	0x0802d4f4
 8015e08:	0802d480 	.word	0x0802d480
 8015e0c:	0802d394 	.word	0x0802d394
 8015e10:	0802d458 	.word	0x0802d458
 8015e14:	0802d4a0 	.word	0x0802d4a0

08015e18 <_ZN6tflite11SoftmaxInitEP13TfLiteContextPKcj>:

}  // namespace

void* SoftmaxInit(TfLiteContext* context, const char* buffer, size_t length) {
 8015e18:	b580      	push	{r7, lr}
 8015e1a:	b084      	sub	sp, #16
 8015e1c:	af00      	add	r7, sp, #0
 8015e1e:	60f8      	str	r0, [r7, #12]
 8015e20:	60b9      	str	r1, [r7, #8]
 8015e22:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 8015e24:	68fb      	ldr	r3, [r7, #12]
 8015e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015e28:	2b00      	cmp	r3, #0
 8015e2a:	d101      	bne.n	8015e30 <_ZN6tflite11SoftmaxInitEP13TfLiteContextPKcj+0x18>
 8015e2c:	f010 ff67 	bl	8026cfe <abort>
  return context->AllocatePersistentBuffer(context, sizeof(SoftmaxParams));
 8015e30:	68fb      	ldr	r3, [r7, #12]
 8015e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015e34:	2138      	movs	r1, #56	; 0x38
 8015e36:	68f8      	ldr	r0, [r7, #12]
 8015e38:	4798      	blx	r3
 8015e3a:	4603      	mov	r3, r0
}
 8015e3c:	4618      	mov	r0, r3
 8015e3e:	3710      	adds	r7, #16
 8015e40:	46bd      	mov	sp, r7
 8015e42:	bd80      	pop	{r7, pc}

08015e44 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_clEf>:
  if (input->type == kTfLiteInt16) {
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
    // exp LUT only used on negative values
    // we consider exp(-10.0) is insignificant to accumulation
    gen_lut<float, int16_t, int16_t>(
        [](float value) { return std::exp(value); }, -10.0f, 0.0f, -1.0f, 1.0f,
 8015e44:	b580      	push	{r7, lr}
 8015e46:	b082      	sub	sp, #8
 8015e48:	af00      	add	r7, sp, #0
 8015e4a:	6078      	str	r0, [r7, #4]
 8015e4c:	ed87 0a00 	vstr	s0, [r7]
 8015e50:	ed97 0a00 	vldr	s0, [r7]
 8015e54:	f7f7 fa5e 	bl	800d314 <_ZSt3expf>
 8015e58:	eef0 7a40 	vmov.f32	s15, s0
 8015e5c:	eeb0 0a67 	vmov.f32	s0, s15
 8015e60:	3708      	adds	r7, #8
 8015e62:	46bd      	mov	sp, r7
 8015e64:	bd80      	pop	{r7, pc}

08015e66 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE_4_FUNEf>:
 8015e66:	b580      	push	{r7, lr}
 8015e68:	b082      	sub	sp, #8
 8015e6a:	af00      	add	r7, sp, #0
 8015e6c:	ed87 0a01 	vstr	s0, [r7, #4]
 8015e70:	ed97 0a01 	vldr	s0, [r7, #4]
 8015e74:	2000      	movs	r0, #0
 8015e76:	f7ff ffe5 	bl	8015e44 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_clEf>
 8015e7a:	eef0 7a40 	vmov.f32	s15, s0
 8015e7e:	eeb0 0a67 	vmov.f32	s0, s15
 8015e82:	3708      	adds	r7, #8
 8015e84:	46bd      	mov	sp, r7
 8015e86:	bd80      	pop	{r7, pc}

08015e88 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_cvPFffEEv>:
 8015e88:	b480      	push	{r7}
 8015e8a:	b083      	sub	sp, #12
 8015e8c:	af00      	add	r7, sp, #0
 8015e8e:	6078      	str	r0, [r7, #4]
 8015e90:	4b03      	ldr	r3, [pc, #12]	; (8015ea0 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_cvPFffEEv+0x18>)
 8015e92:	4618      	mov	r0, r3
 8015e94:	370c      	adds	r7, #12
 8015e96:	46bd      	mov	sp, r7
 8015e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e9c:	4770      	bx	lr
 8015e9e:	bf00      	nop
 8015ea0:	08015e67 	.word	0x08015e67

08015ea4 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_clEf>:
        op_data->exp_lut);
    gen_lut<float, int16_t, int16_t>(
        [](float value) { return 1.0f / (1.0f + value); }, 0.0f, 1.0f, -1.0f,
 8015ea4:	b480      	push	{r7}
 8015ea6:	b083      	sub	sp, #12
 8015ea8:	af00      	add	r7, sp, #0
 8015eaa:	6078      	str	r0, [r7, #4]
 8015eac:	ed87 0a00 	vstr	s0, [r7]
 8015eb0:	edd7 7a00 	vldr	s15, [r7]
 8015eb4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015eb8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015ebc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015ec0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8015ec4:	eef0 7a66 	vmov.f32	s15, s13
 8015ec8:	eeb0 0a67 	vmov.f32	s0, s15
 8015ecc:	370c      	adds	r7, #12
 8015ece:	46bd      	mov	sp, r7
 8015ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ed4:	4770      	bx	lr

08015ed6 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE0_4_FUNEf>:
 8015ed6:	b580      	push	{r7, lr}
 8015ed8:	b082      	sub	sp, #8
 8015eda:	af00      	add	r7, sp, #0
 8015edc:	ed87 0a01 	vstr	s0, [r7, #4]
 8015ee0:	ed97 0a01 	vldr	s0, [r7, #4]
 8015ee4:	2000      	movs	r0, #0
 8015ee6:	f7ff ffdd 	bl	8015ea4 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_clEf>
 8015eea:	eef0 7a40 	vmov.f32	s15, s0
 8015eee:	eeb0 0a67 	vmov.f32	s0, s15
 8015ef2:	3708      	adds	r7, #8
 8015ef4:	46bd      	mov	sp, r7
 8015ef6:	bd80      	pop	{r7, pc}

08015ef8 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_cvPFffEEv>:
 8015ef8:	b480      	push	{r7}
 8015efa:	b083      	sub	sp, #12
 8015efc:	af00      	add	r7, sp, #0
 8015efe:	6078      	str	r0, [r7, #4]
 8015f00:	4b03      	ldr	r3, [pc, #12]	; (8015f10 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_cvPFffEEv+0x18>)
 8015f02:	4618      	mov	r0, r3
 8015f04:	370c      	adds	r7, #12
 8015f06:	46bd      	mov	sp, r7
 8015f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f0c:	4770      	bx	lr
 8015f0e:	bf00      	nop
 8015f10:	08015ed7 	.word	0x08015ed7

08015f14 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus SoftmaxPrepare(TfLiteContext* context, TfLiteNode* node) {
 8015f14:	b590      	push	{r4, r7, lr}
 8015f16:	b08f      	sub	sp, #60	; 0x3c
 8015f18:	af04      	add	r7, sp, #16
 8015f1a:	6078      	str	r0, [r7, #4]
 8015f1c:	6039      	str	r1, [r7, #0]
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
 8015f1e:	6838      	ldr	r0, [r7, #0]
 8015f20:	f7fd fae0 	bl	80134e4 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 8015f24:	4603      	mov	r3, r0
 8015f26:	2b01      	cmp	r3, #1
 8015f28:	bf14      	ite	ne
 8015f2a:	2301      	movne	r3, #1
 8015f2c:	2300      	moveq	r3, #0
 8015f2e:	b2db      	uxtb	r3, r3
 8015f30:	2b00      	cmp	r3, #0
 8015f32:	d013      	beq.n	8015f5c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x48>
 8015f34:	687b      	ldr	r3, [r7, #4]
 8015f36:	695c      	ldr	r4, [r3, #20]
 8015f38:	6838      	ldr	r0, [r7, #0]
 8015f3a:	f7fd fad3 	bl	80134e4 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 8015f3e:	4603      	mov	r3, r0
 8015f40:	2201      	movs	r2, #1
 8015f42:	9203      	str	r2, [sp, #12]
 8015f44:	9302      	str	r3, [sp, #8]
 8015f46:	4b7c      	ldr	r3, [pc, #496]	; (8016138 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x224>)
 8015f48:	9301      	str	r3, [sp, #4]
 8015f4a:	4b7c      	ldr	r3, [pc, #496]	; (801613c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x228>)
 8015f4c:	9300      	str	r3, [sp, #0]
 8015f4e:	235d      	movs	r3, #93	; 0x5d
 8015f50:	4a7b      	ldr	r2, [pc, #492]	; (8016140 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 8015f52:	497c      	ldr	r1, [pc, #496]	; (8016144 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 8015f54:	6878      	ldr	r0, [r7, #4]
 8015f56:	47a0      	blx	r4
 8015f58:	2301      	movs	r3, #1
 8015f5a:	e14e      	b.n	80161fa <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e6>
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 8015f5c:	6838      	ldr	r0, [r7, #0]
 8015f5e:	f7fd face 	bl	80134fe <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 8015f62:	4603      	mov	r3, r0
 8015f64:	2b01      	cmp	r3, #1
 8015f66:	bf14      	ite	ne
 8015f68:	2301      	movne	r3, #1
 8015f6a:	2300      	moveq	r3, #0
 8015f6c:	b2db      	uxtb	r3, r3
 8015f6e:	2b00      	cmp	r3, #0
 8015f70:	d013      	beq.n	8015f9a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x86>
 8015f72:	687b      	ldr	r3, [r7, #4]
 8015f74:	695c      	ldr	r4, [r3, #20]
 8015f76:	6838      	ldr	r0, [r7, #0]
 8015f78:	f7fd fac1 	bl	80134fe <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 8015f7c:	4603      	mov	r3, r0
 8015f7e:	2201      	movs	r2, #1
 8015f80:	9203      	str	r2, [sp, #12]
 8015f82:	9302      	str	r3, [sp, #8]
 8015f84:	4b6c      	ldr	r3, [pc, #432]	; (8016138 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x224>)
 8015f86:	9301      	str	r3, [sp, #4]
 8015f88:	4b6f      	ldr	r3, [pc, #444]	; (8016148 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x234>)
 8015f8a:	9300      	str	r3, [sp, #0]
 8015f8c:	235e      	movs	r3, #94	; 0x5e
 8015f8e:	4a6c      	ldr	r2, [pc, #432]	; (8016140 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 8015f90:	496c      	ldr	r1, [pc, #432]	; (8016144 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 8015f92:	6878      	ldr	r0, [r7, #4]
 8015f94:	47a0      	blx	r4
 8015f96:	2301      	movs	r3, #1
 8015f98:	e12f      	b.n	80161fa <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e6>
  const TfLiteTensor* input = GetInput(context, node, 0);
 8015f9a:	2200      	movs	r2, #0
 8015f9c:	6839      	ldr	r1, [r7, #0]
 8015f9e:	6878      	ldr	r0, [r7, #4]
 8015fa0:	f7f7 fd94 	bl	800dacc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8015fa4:	6278      	str	r0, [r7, #36]	; 0x24
  TF_LITE_ENSURE(context, input != nullptr);
 8015fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fa8:	2b00      	cmp	r3, #0
 8015faa:	d10a      	bne.n	8015fc2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xae>
 8015fac:	687b      	ldr	r3, [r7, #4]
 8015fae:	695c      	ldr	r4, [r3, #20]
 8015fb0:	4b66      	ldr	r3, [pc, #408]	; (801614c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x238>)
 8015fb2:	9300      	str	r3, [sp, #0]
 8015fb4:	2360      	movs	r3, #96	; 0x60
 8015fb6:	4a62      	ldr	r2, [pc, #392]	; (8016140 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 8015fb8:	4965      	ldr	r1, [pc, #404]	; (8016150 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 8015fba:	6878      	ldr	r0, [r7, #4]
 8015fbc:	47a0      	blx	r4
 8015fbe:	2301      	movs	r3, #1
 8015fc0:	e11b      	b.n	80161fa <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e6>
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
 8015fc2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015fc4:	f7f7 fcf4 	bl	800d9b0 <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>
 8015fc8:	4603      	mov	r3, r0
 8015fca:	2b00      	cmp	r3, #0
 8015fcc:	bfd4      	ite	le
 8015fce:	2301      	movle	r3, #1
 8015fd0:	2300      	movgt	r3, #0
 8015fd2:	b2db      	uxtb	r3, r3
 8015fd4:	2b00      	cmp	r3, #0
 8015fd6:	d00a      	beq.n	8015fee <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xda>
 8015fd8:	687b      	ldr	r3, [r7, #4]
 8015fda:	695c      	ldr	r4, [r3, #20]
 8015fdc:	4b5d      	ldr	r3, [pc, #372]	; (8016154 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 8015fde:	9300      	str	r3, [sp, #0]
 8015fe0:	2361      	movs	r3, #97	; 0x61
 8015fe2:	4a57      	ldr	r2, [pc, #348]	; (8016140 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 8015fe4:	495a      	ldr	r1, [pc, #360]	; (8016150 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 8015fe6:	6878      	ldr	r0, [r7, #4]
 8015fe8:	47a0      	blx	r4
 8015fea:	2301      	movs	r3, #1
 8015fec:	e105      	b.n	80161fa <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e6>
  TfLiteTensor* output = GetOutput(context, node, 0);
 8015fee:	2200      	movs	r2, #0
 8015ff0:	6839      	ldr	r1, [r7, #0]
 8015ff2:	6878      	ldr	r0, [r7, #4]
 8015ff4:	f7f7 fd7a 	bl	800daec <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 8015ff8:	6238      	str	r0, [r7, #32]
  TF_LITE_ENSURE(context, output != nullptr);
 8015ffa:	6a3b      	ldr	r3, [r7, #32]
 8015ffc:	2b00      	cmp	r3, #0
 8015ffe:	d10a      	bne.n	8016016 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x102>
 8016000:	687b      	ldr	r3, [r7, #4]
 8016002:	695c      	ldr	r4, [r3, #20]
 8016004:	4b54      	ldr	r3, [pc, #336]	; (8016158 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 8016006:	9300      	str	r3, [sp, #0]
 8016008:	2363      	movs	r3, #99	; 0x63
 801600a:	4a4d      	ldr	r2, [pc, #308]	; (8016140 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801600c:	4950      	ldr	r1, [pc, #320]	; (8016150 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 801600e:	6878      	ldr	r0, [r7, #4]
 8016010:	47a0      	blx	r4
 8016012:	2301      	movs	r3, #1
 8016014:	e0f1      	b.n	80161fa <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e6>
  TF_LITE_ENSURE(context, node->user_data != nullptr);
 8016016:	683b      	ldr	r3, [r7, #0]
 8016018:	691b      	ldr	r3, [r3, #16]
 801601a:	2b00      	cmp	r3, #0
 801601c:	d10a      	bne.n	8016034 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x120>
 801601e:	687b      	ldr	r3, [r7, #4]
 8016020:	695c      	ldr	r4, [r3, #20]
 8016022:	4b4e      	ldr	r3, [pc, #312]	; (801615c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x248>)
 8016024:	9300      	str	r3, [sp, #0]
 8016026:	2365      	movs	r3, #101	; 0x65
 8016028:	4a45      	ldr	r2, [pc, #276]	; (8016140 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801602a:	4949      	ldr	r1, [pc, #292]	; (8016150 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 801602c:	6878      	ldr	r0, [r7, #4]
 801602e:	47a0      	blx	r4
 8016030:	2301      	movs	r3, #1
 8016032:	e0e2      	b.n	80161fa <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e6>
  SoftmaxParams* op_data = static_cast<SoftmaxParams*>(node->user_data);
 8016034:	683b      	ldr	r3, [r7, #0]
 8016036:	691b      	ldr	r3, [r3, #16]
 8016038:	61fb      	str	r3, [r7, #28]
  if (input->type == kTfLiteInt16) {
 801603a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801603c:	781b      	ldrb	r3, [r3, #0]
 801603e:	2b07      	cmp	r3, #7
 8016040:	d12f      	bne.n	80160a2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x18e>
    void* raw_exp_lut = context->AllocatePersistentBuffer(
 8016042:	687b      	ldr	r3, [r7, #4]
 8016044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016046:	f240 4102 	movw	r1, #1026	; 0x402
 801604a:	6878      	ldr	r0, [r7, #4]
 801604c:	4798      	blx	r3
 801604e:	61b8      	str	r0, [r7, #24]
    TF_LITE_ENSURE(context, raw_exp_lut != nullptr);
 8016050:	69bb      	ldr	r3, [r7, #24]
 8016052:	2b00      	cmp	r3, #0
 8016054:	d10a      	bne.n	801606c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x158>
 8016056:	687b      	ldr	r3, [r7, #4]
 8016058:	695c      	ldr	r4, [r3, #20]
 801605a:	4b41      	ldr	r3, [pc, #260]	; (8016160 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x24c>)
 801605c:	9300      	str	r3, [sp, #0]
 801605e:	236b      	movs	r3, #107	; 0x6b
 8016060:	4a37      	ldr	r2, [pc, #220]	; (8016140 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 8016062:	493b      	ldr	r1, [pc, #236]	; (8016150 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 8016064:	6878      	ldr	r0, [r7, #4]
 8016066:	47a0      	blx	r4
 8016068:	2301      	movs	r3, #1
 801606a:	e0c6      	b.n	80161fa <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e6>
    op_data->exp_lut = reinterpret_cast<int16_t*>(raw_exp_lut);
 801606c:	69fb      	ldr	r3, [r7, #28]
 801606e:	69ba      	ldr	r2, [r7, #24]
 8016070:	629a      	str	r2, [r3, #40]	; 0x28
    void* one_over_one_plus_x_lut = context->AllocatePersistentBuffer(
 8016072:	687b      	ldr	r3, [r7, #4]
 8016074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016076:	f240 4102 	movw	r1, #1026	; 0x402
 801607a:	6878      	ldr	r0, [r7, #4]
 801607c:	4798      	blx	r3
 801607e:	6178      	str	r0, [r7, #20]
    TF_LITE_ENSURE(context, one_over_one_plus_x_lut != nullptr);
 8016080:	697b      	ldr	r3, [r7, #20]
 8016082:	2b00      	cmp	r3, #0
 8016084:	d10a      	bne.n	801609c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x188>
 8016086:	687b      	ldr	r3, [r7, #4]
 8016088:	695c      	ldr	r4, [r3, #20]
 801608a:	4b36      	ldr	r3, [pc, #216]	; (8016164 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x250>)
 801608c:	9300      	str	r3, [sp, #0]
 801608e:	236f      	movs	r3, #111	; 0x6f
 8016090:	4a2b      	ldr	r2, [pc, #172]	; (8016140 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 8016092:	492f      	ldr	r1, [pc, #188]	; (8016150 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 8016094:	6878      	ldr	r0, [r7, #4]
 8016096:	47a0      	blx	r4
 8016098:	2301      	movs	r3, #1
 801609a:	e0ae      	b.n	80161fa <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e6>
    op_data->one_over_one_plus_x_lut =
 801609c:	69fb      	ldr	r3, [r7, #28]
 801609e:	697a      	ldr	r2, [r7, #20]
 80160a0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (output->type == kTfLiteInt16) {
 80160a2:	6a3b      	ldr	r3, [r7, #32]
 80160a4:	781b      	ldrb	r3, [r3, #0]
 80160a6:	2b07      	cmp	r3, #7
 80160a8:	d112      	bne.n	80160d0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1bc>
    TF_LITE_ENSURE(context,
 80160aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160ac:	781b      	ldrb	r3, [r3, #0]
 80160ae:	2b09      	cmp	r3, #9
 80160b0:	d028      	beq.n	8016104 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1f0>
 80160b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160b4:	781b      	ldrb	r3, [r3, #0]
 80160b6:	2b07      	cmp	r3, #7
 80160b8:	d024      	beq.n	8016104 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1f0>
 80160ba:	687b      	ldr	r3, [r7, #4]
 80160bc:	695c      	ldr	r4, [r3, #20]
 80160be:	4b2a      	ldr	r3, [pc, #168]	; (8016168 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x254>)
 80160c0:	9300      	str	r3, [sp, #0]
 80160c2:	2375      	movs	r3, #117	; 0x75
 80160c4:	4a1e      	ldr	r2, [pc, #120]	; (8016140 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 80160c6:	4922      	ldr	r1, [pc, #136]	; (8016150 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 80160c8:	6878      	ldr	r0, [r7, #4]
 80160ca:	47a0      	blx	r4
 80160cc:	2301      	movs	r3, #1
 80160ce:	e094      	b.n	80161fa <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e6>
    TF_LITE_ENSURE_EQ(context, input->type, output->type);
 80160d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160d2:	781a      	ldrb	r2, [r3, #0]
 80160d4:	6a3b      	ldr	r3, [r7, #32]
 80160d6:	781b      	ldrb	r3, [r3, #0]
 80160d8:	429a      	cmp	r2, r3
 80160da:	d013      	beq.n	8016104 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1f0>
 80160dc:	687b      	ldr	r3, [r7, #4]
 80160de:	695c      	ldr	r4, [r3, #20]
 80160e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160e2:	781b      	ldrb	r3, [r3, #0]
 80160e4:	461a      	mov	r2, r3
 80160e6:	6a3b      	ldr	r3, [r7, #32]
 80160e8:	781b      	ldrb	r3, [r3, #0]
 80160ea:	9303      	str	r3, [sp, #12]
 80160ec:	9202      	str	r2, [sp, #8]
 80160ee:	4b1f      	ldr	r3, [pc, #124]	; (801616c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x258>)
 80160f0:	9301      	str	r3, [sp, #4]
 80160f2:	4b1f      	ldr	r3, [pc, #124]	; (8016170 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x25c>)
 80160f4:	9300      	str	r3, [sp, #0]
 80160f6:	2378      	movs	r3, #120	; 0x78
 80160f8:	4a11      	ldr	r2, [pc, #68]	; (8016140 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 80160fa:	4912      	ldr	r1, [pc, #72]	; (8016144 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 80160fc:	6878      	ldr	r0, [r7, #4]
 80160fe:	47a0      	blx	r4
 8016100:	2301      	movs	r3, #1
 8016102:	e07a      	b.n	80161fa <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e6>
  if (input->type == kTfLiteInt16) {
 8016104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016106:	781b      	ldrb	r3, [r3, #0]
 8016108:	2b07      	cmp	r3, #7
 801610a:	d169      	bne.n	80161e0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2cc>
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
 801610c:	6a3b      	ldr	r3, [r7, #32]
 801610e:	691b      	ldr	r3, [r3, #16]
 8016110:	2b00      	cmp	r3, #0
 8016112:	d035      	beq.n	8016180 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x26c>
 8016114:	687b      	ldr	r3, [r7, #4]
 8016116:	695c      	ldr	r4, [r3, #20]
 8016118:	6a3b      	ldr	r3, [r7, #32]
 801611a:	691b      	ldr	r3, [r3, #16]
 801611c:	2200      	movs	r2, #0
 801611e:	9203      	str	r2, [sp, #12]
 8016120:	9302      	str	r3, [sp, #8]
 8016122:	4b14      	ldr	r3, [pc, #80]	; (8016174 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x260>)
 8016124:	9301      	str	r3, [sp, #4]
 8016126:	4b14      	ldr	r3, [pc, #80]	; (8016178 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x264>)
 8016128:	9300      	str	r3, [sp, #0]
 801612a:	237d      	movs	r3, #125	; 0x7d
 801612c:	4a04      	ldr	r2, [pc, #16]	; (8016140 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801612e:	4905      	ldr	r1, [pc, #20]	; (8016144 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 8016130:	6878      	ldr	r0, [r7, #4]
 8016132:	47a0      	blx	r4
 8016134:	2301      	movs	r3, #1
 8016136:	e060      	b.n	80161fa <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e6>
 8016138:	0802d504 	.word	0x0802d504
 801613c:	0802d508 	.word	0x0802d508
 8016140:	0802d394 	.word	0x0802d394
 8016144:	0802d3d8 	.word	0x0802d3d8
 8016148:	0802d518 	.word	0x0802d518
 801614c:	0802d52c 	.word	0x0802d52c
 8016150:	0802d4b8 	.word	0x0802d4b8
 8016154:	0802d540 	.word	0x0802d540
 8016158:	0802d55c 	.word	0x0802d55c
 801615c:	0802d570 	.word	0x0802d570
 8016160:	0802d58c 	.word	0x0802d58c
 8016164:	0802d5a4 	.word	0x0802d5a4
 8016168:	0802d5c8 	.word	0x0802d5c8
 801616c:	0802d4a0 	.word	0x0802d4a0
 8016170:	0802d480 	.word	0x0802d480
 8016174:	0802d3f4 	.word	0x0802d3f4
 8016178:	0802d3f8 	.word	0x0802d3f8
 801617c:	00000000 	.word	0x00000000
    gen_lut<float, int16_t, int16_t>(
 8016180:	f107 0308 	add.w	r3, r7, #8
 8016184:	4618      	mov	r0, r3
 8016186:	f7ff fe7f 	bl	8015e88 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_cvPFffEEv>
 801618a:	4602      	mov	r2, r0
 801618c:	69fb      	ldr	r3, [r7, #28]
 801618e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016190:	4619      	mov	r1, r3
 8016192:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8016196:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 801619a:	ed5f 0a08 	vldr	s1, [pc, #-32]	; 801617c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x268>
 801619e:	eeba 0a04 	vmov.f32	s0, #164	; 0xc1200000 -10.0
 80161a2:	4610      	mov	r0, r2
 80161a4:	f000 f82e 	bl	8016204 <_ZN6tflite7gen_lutIfssEEvPFT_S1_ES1_S1_S1_S1_PT1_>
    gen_lut<float, int16_t, int16_t>(
 80161a8:	f107 030c 	add.w	r3, r7, #12
 80161ac:	4618      	mov	r0, r3
 80161ae:	f7ff fea3 	bl	8015ef8 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_cvPFffEEv>
 80161b2:	4602      	mov	r2, r0
 80161b4:	69fb      	ldr	r3, [r7, #28]
 80161b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80161b8:	4619      	mov	r1, r3
 80161ba:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 80161be:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 80161c2:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80161c6:	ed1f 0a13 	vldr	s0, [pc, #-76]	; 801617c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x268>
 80161ca:	4610      	mov	r0, r2
 80161cc:	f000 f81a 	bl	8016204 <_ZN6tflite7gen_lutIfssEEvPFT_S1_ES1_S1_S1_S1_PT1_>
        1.0f, op_data->one_over_one_plus_x_lut);
    op_data->zero_point = output->params.zero_point;
 80161d0:	6a3b      	ldr	r3, [r7, #32]
 80161d2:	691a      	ldr	r2, [r3, #16]
 80161d4:	69fb      	ldr	r3, [r7, #28]
 80161d6:	61da      	str	r2, [r3, #28]
    op_data->scale = output->params.scale;
 80161d8:	6a3b      	ldr	r3, [r7, #32]
 80161da:	68da      	ldr	r2, [r3, #12]
 80161dc:	69fb      	ldr	r3, [r7, #28]
 80161de:	621a      	str	r2, [r3, #32]
  }

  auto* params = static_cast<TfLiteSoftmaxParams*>(node->builtin_data);
 80161e0:	683b      	ldr	r3, [r7, #0]
 80161e2:	695b      	ldr	r3, [r3, #20]
 80161e4:	613b      	str	r3, [r7, #16]
  return CalculateSoftmaxParams(context, input, output, params, op_data);
 80161e6:	69fb      	ldr	r3, [r7, #28]
 80161e8:	9300      	str	r3, [sp, #0]
 80161ea:	693b      	ldr	r3, [r7, #16]
 80161ec:	6a3a      	ldr	r2, [r7, #32]
 80161ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80161f0:	6878      	ldr	r0, [r7, #4]
 80161f2:	f7ff fbf5 	bl	80159e0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>
 80161f6:	4603      	mov	r3, r0
 80161f8:	bf00      	nop
}
 80161fa:	4618      	mov	r0, r3
 80161fc:	372c      	adds	r7, #44	; 0x2c
 80161fe:	46bd      	mov	sp, r7
 8016200:	bd90      	pop	{r4, r7, pc}
 8016202:	bf00      	nop

08016204 <_ZN6tflite7gen_lutIfssEEvPFT_S1_ES1_S1_S1_S1_PT1_>:
// - input_min, input_max: range of the func inputs
// - output_min, output_max: range of the func outputs
// - lut: pointer to the LUT table to fill, the table must be of size
// lut_size<LutInT>()
template <typename FloatT, typename LutInT, typename LutOutT>
inline void gen_lut(FloatT (*func)(FloatT), FloatT input_min, FloatT input_max,
 8016204:	b590      	push	{r4, r7, lr}
 8016206:	ed2d 8b02 	vpush	{d8}
 801620a:	b099      	sub	sp, #100	; 0x64
 801620c:	af00      	add	r7, sp, #0
 801620e:	6178      	str	r0, [r7, #20]
 8016210:	ed87 0a04 	vstr	s0, [r7, #16]
 8016214:	edc7 0a03 	vstr	s1, [r7, #12]
 8016218:	ed87 1a02 	vstr	s2, [r7, #8]
 801621c:	edc7 1a01 	vstr	s3, [r7, #4]
 8016220:	6039      	str	r1, [r7, #0]
                    std::is_same<LutOutT, int16_t>::value,
                "Only LUTs with int8 or int16 outputs are supported.");
  static_assert(std::is_floating_point<FloatT>::value,
                "FloatT must be a floating-point type.");

  const int nb_steps = std::is_same<LutInT, int8_t>::value ? 256 : 512;
 8016222:	f44f 7300 	mov.w	r3, #512	; 0x200
 8016226:	65bb      	str	r3, [r7, #88]	; 0x58
  const FloatT step = (input_max - input_min) / nb_steps;
 8016228:	ed97 7a03 	vldr	s14, [r7, #12]
 801622c:	edd7 7a04 	vldr	s15, [r7, #16]
 8016230:	ee37 7a67 	vsub.f32	s14, s14, s15
 8016234:	eddf 6a8b 	vldr	s13, [pc, #556]	; 8016464 <_ZN6tflite7gen_lutIfssEEvPFT_S1_ES1_S1_S1_S1_PT1_+0x260>
 8016238:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801623c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
  const FloatT half_step = step / 2;
 8016240:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8016244:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8016248:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801624c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
  const FloatT output_scaling_inv =
      static_cast<FloatT>(std::numeric_limits<LutOutT>::max() -
 8016250:	f7f7 f84e 	bl	800d2f0 <_ZNSt14numeric_limitsIsE3maxEv>
 8016254:	4603      	mov	r3, r0
 8016256:	461c      	mov	r4, r3
                          std::numeric_limits<LutOutT>::min() + 1) /
 8016258:	f7f7 f840 	bl	800d2dc <_ZNSt14numeric_limitsIsE3minEv>
 801625c:	4603      	mov	r3, r0
      static_cast<FloatT>(std::numeric_limits<LutOutT>::max() -
 801625e:	1ae3      	subs	r3, r4, r3
                          std::numeric_limits<LutOutT>::min() + 1) /
 8016260:	3301      	adds	r3, #1
 8016262:	ee07 3a90 	vmov	s15, r3
 8016266:	eef8 6ae7 	vcvt.f32.s32	s13, s15
      (output_max - output_min);
 801626a:	ed97 7a01 	vldr	s14, [r7, #4]
 801626e:	edd7 7a02 	vldr	s15, [r7, #8]
 8016272:	ee37 7a67 	vsub.f32	s14, s14, s15
  const FloatT output_scaling_inv =
 8016276:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801627a:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
  const FloatT table_min =
 801627e:	f04f 4347 	mov.w	r3, #3338665984	; 0xc7000000
 8016282:	61fb      	str	r3, [r7, #28]
      static_cast<FloatT>(std::numeric_limits<LutOutT>::min());
  const FloatT table_max =
 8016284:	4b78      	ldr	r3, [pc, #480]	; (8016468 <_ZN6tflite7gen_lutIfssEEvPFT_S1_ES1_S1_S1_S1_PT1_+0x264>)
 8016286:	61bb      	str	r3, [r7, #24]
      static_cast<FloatT>(std::numeric_limits<LutOutT>::max());

  for (int i = 0; i < nb_steps; i++) {
 8016288:	2300      	movs	r3, #0
 801628a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801628c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801628e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016292:	f280 80b0 	bge.w	80163f6 <_ZN6tflite7gen_lutIfssEEvPFT_S1_ES1_S1_S1_S1_PT1_+0x1f2>
    const FloatT val = func(input_min + i * step);
 8016296:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016298:	ee07 3a90 	vmov	s15, r3
 801629c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80162a0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80162a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80162a8:	edd7 7a04 	vldr	s15, [r7, #16]
 80162ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80162b0:	697b      	ldr	r3, [r7, #20]
 80162b2:	eeb0 0a67 	vmov.f32	s0, s15
 80162b6:	4798      	blx	r3
 80162b8:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48
    const FloatT val_midpoint = func(input_min + i * step + half_step);
 80162bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80162be:	ee07 3a90 	vmov	s15, r3
 80162c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80162c6:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80162ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80162ce:	edd7 7a04 	vldr	s15, [r7, #16]
 80162d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80162d6:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80162da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80162de:	697b      	ldr	r3, [r7, #20]
 80162e0:	eeb0 0a67 	vmov.f32	s0, s15
 80162e4:	4798      	blx	r3
 80162e6:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44
    const FloatT val_next = func(input_min + (i + 1) * step);
 80162ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80162ec:	3301      	adds	r3, #1
 80162ee:	ee07 3a90 	vmov	s15, r3
 80162f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80162f6:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80162fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80162fe:	edd7 7a04 	vldr	s15, [r7, #16]
 8016302:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016306:	697b      	ldr	r3, [r7, #20]
 8016308:	eeb0 0a67 	vmov.f32	s0, s15
 801630c:	4798      	blx	r3
 801630e:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40

    const FloatT sample_val = TfLiteRound(val * output_scaling_inv);
 8016312:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8016316:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 801631a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801631e:	eeb0 0a67 	vmov.f32	s0, s15
 8016322:	f7f6 ffb6 	bl	800d292 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 8016326:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
    const FloatT midpoint_interp_val =
        TfLiteRound((val_next * output_scaling_inv +
 801632a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 801632e:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8016332:	ee27 8a27 	vmul.f32	s16, s14, s15
                     TfLiteRound(val * output_scaling_inv)) /
 8016336:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 801633a:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 801633e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016342:	eeb0 0a67 	vmov.f32	s0, s15
 8016346:	f7f6 ffa4 	bl	800d292 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 801634a:	eef0 7a40 	vmov.f32	s15, s0
        TfLiteRound((val_next * output_scaling_inv +
 801634e:	ee78 7a27 	vadd.f32	s15, s16, s15
 8016352:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8016356:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801635a:	eeb0 0a47 	vmov.f32	s0, s14
 801635e:	f7f6 ff98 	bl	800d292 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 8016362:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
                    2);
    const FloatT midpoint_val = TfLiteRound(val_midpoint * output_scaling_inv);
 8016366:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 801636a:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 801636e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016372:	eeb0 0a67 	vmov.f32	s0, s15
 8016376:	f7f6 ff8c 	bl	800d292 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 801637a:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
    const FloatT midpoint_err = midpoint_interp_val - midpoint_val;
 801637e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8016382:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8016386:	ee77 7a67 	vsub.f32	s15, s14, s15
 801638a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    const FloatT bias = TfLiteRound(midpoint_err / 2);
 801638e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8016392:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8016396:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801639a:	eeb0 0a47 	vmov.f32	s0, s14
 801639e:	f7f6 ff78 	bl	800d292 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 80163a2:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c

    lut[i] = static_cast<LutOutT>(std::min<FloatT>(
        std::max<FloatT>(sample_val - bias, table_min), table_max));
 80163a6:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80163aa:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80163ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80163b2:	edc7 7a08 	vstr	s15, [r7, #32]
    lut[i] = static_cast<LutOutT>(std::min<FloatT>(
 80163b6:	f107 021c 	add.w	r2, r7, #28
 80163ba:	f107 0320 	add.w	r3, r7, #32
 80163be:	4611      	mov	r1, r2
 80163c0:	4618      	mov	r0, r3
 80163c2:	f7f6 ff39 	bl	800d238 <_ZSt3maxIfERKT_S2_S2_>
 80163c6:	4602      	mov	r2, r0
 80163c8:	f107 0318 	add.w	r3, r7, #24
 80163cc:	4619      	mov	r1, r3
 80163ce:	4610      	mov	r0, r2
 80163d0:	f7f6 ff19 	bl	800d206 <_ZSt3minIfERKT_S2_S2_>
 80163d4:	4603      	mov	r3, r0
 80163d6:	edd3 7a00 	vldr	s15, [r3]
 80163da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80163dc:	005b      	lsls	r3, r3, #1
 80163de:	683a      	ldr	r2, [r7, #0]
 80163e0:	4413      	add	r3, r2
 80163e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80163e6:	ee17 2a90 	vmov	r2, s15
 80163ea:	b212      	sxth	r2, r2
 80163ec:	801a      	strh	r2, [r3, #0]
  for (int i = 0; i < nb_steps; i++) {
 80163ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80163f0:	3301      	adds	r3, #1
 80163f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80163f4:	e74a      	b.n	801628c <_ZN6tflite7gen_lutIfssEEvPFT_S1_ES1_S1_S1_S1_PT1_+0x88>
  }

  const bool with_extra_interpolation_value =
 80163f6:	2301      	movs	r3, #1
 80163f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      std::is_same<LutInT, int16_t>::value;
  if (with_extra_interpolation_value) {
    lut[nb_steps] = static_cast<LutOutT>(std::min<FloatT>(
        std::max<FloatT>(TfLiteRound(func(input_max) * output_scaling_inv),
 80163fc:	697b      	ldr	r3, [r7, #20]
 80163fe:	ed97 0a03 	vldr	s0, [r7, #12]
 8016402:	4798      	blx	r3
 8016404:	eeb0 7a40 	vmov.f32	s14, s0
 8016408:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 801640c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016410:	eeb0 0a67 	vmov.f32	s0, s15
 8016414:	f7f6 ff3d 	bl	800d292 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 8016418:	eef0 7a40 	vmov.f32	s15, s0
 801641c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    lut[nb_steps] = static_cast<LutOutT>(std::min<FloatT>(
 8016420:	f107 021c 	add.w	r2, r7, #28
 8016424:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016428:	4611      	mov	r1, r2
 801642a:	4618      	mov	r0, r3
 801642c:	f7f6 ff04 	bl	800d238 <_ZSt3maxIfERKT_S2_S2_>
 8016430:	4602      	mov	r2, r0
 8016432:	f107 0318 	add.w	r3, r7, #24
 8016436:	4619      	mov	r1, r3
 8016438:	4610      	mov	r0, r2
 801643a:	f7f6 fee4 	bl	800d206 <_ZSt3minIfERKT_S2_S2_>
 801643e:	4603      	mov	r3, r0
 8016440:	edd3 7a00 	vldr	s15, [r3]
 8016444:	683b      	ldr	r3, [r7, #0]
 8016446:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801644a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801644e:	ee17 2a90 	vmov	r2, s15
 8016452:	b212      	sxth	r2, r2
 8016454:	801a      	strh	r2, [r3, #0]
                         table_min),
        table_max));
  }
}
 8016456:	bf00      	nop
 8016458:	3764      	adds	r7, #100	; 0x64
 801645a:	46bd      	mov	sp, r7
 801645c:	ecbd 8b02 	vpop	{d8}
 8016460:	bd90      	pop	{r4, r7, pc}
 8016462:	bf00      	nop
 8016464:	44000000 	.word	0x44000000
 8016468:	46fffe00 	.word	0x46fffe00

0801646c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_>:
inline void Conv(const ConvParams& params, const RuntimeShape& input_shape,
                 const float* input_data, const RuntimeShape& filter_shape,
                 const float* filter_data, const RuntimeShape& bias_shape,
                 const float* bias_data, const RuntimeShape& output_shape,
                 float* output_data, const RuntimeShape& im2col_shape,
                 float* im2col_data) {
 801646c:	b590      	push	{r4, r7, lr}
 801646e:	ed2d 8b02 	vpush	{d8}
 8016472:	b0a9      	sub	sp, #164	; 0xa4
 8016474:	af02      	add	r7, sp, #8
 8016476:	60f8      	str	r0, [r7, #12]
 8016478:	60b9      	str	r1, [r7, #8]
 801647a:	607a      	str	r2, [r7, #4]
 801647c:	603b      	str	r3, [r7, #0]
  const int stride_width = params.stride_width;
 801647e:	68fb      	ldr	r3, [r7, #12]
 8016480:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8016484:	673b      	str	r3, [r7, #112]	; 0x70
  const int stride_height = params.stride_height;
 8016486:	68fb      	ldr	r3, [r7, #12]
 8016488:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 801648c:	66fb      	str	r3, [r7, #108]	; 0x6c
  const int dilation_width_factor = params.dilation_width_factor;
 801648e:	68fb      	ldr	r3, [r7, #12]
 8016490:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8016494:	66bb      	str	r3, [r7, #104]	; 0x68
  const int dilation_height_factor = params.dilation_height_factor;
 8016496:	68fb      	ldr	r3, [r7, #12]
 8016498:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801649c:	667b      	str	r3, [r7, #100]	; 0x64
  const int pad_width = params.padding_values.width;
 801649e:	68fb      	ldr	r3, [r7, #12]
 80164a0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80164a4:	663b      	str	r3, [r7, #96]	; 0x60
  const int pad_height = params.padding_values.height;
 80164a6:	68fb      	ldr	r3, [r7, #12]
 80164a8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80164ac:	65fb      	str	r3, [r7, #92]	; 0x5c
  const float output_activation_min = params.float_activation_min;
 80164ae:	68fb      	ldr	r3, [r7, #12]
 80164b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80164b2:	65bb      	str	r3, [r7, #88]	; 0x58
  const float output_activation_max = params.float_activation_max;
 80164b4:	68fb      	ldr	r3, [r7, #12]
 80164b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80164b8:	657b      	str	r3, [r7, #84]	; 0x54
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 80164ba:	68b8      	ldr	r0, [r7, #8]
 80164bc:	f7f8 fa14 	bl	800e8e8 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80164c0:	4603      	mov	r3, r0
 80164c2:	2b04      	cmp	r3, #4
 80164c4:	d001      	beq.n	80164ca <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x5e>
 80164c6:	f010 fc1a 	bl	8026cfe <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 80164ca:	6838      	ldr	r0, [r7, #0]
 80164cc:	f7f8 fa0c 	bl	800e8e8 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80164d0:	4603      	mov	r3, r0
 80164d2:	2b04      	cmp	r3, #4
 80164d4:	d001      	beq.n	80164da <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x6e>
 80164d6:	f010 fc12 	bl	8026cfe <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 80164da:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 80164de:	f7f8 fa03 	bl	800e8e8 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80164e2:	4603      	mov	r3, r0
 80164e4:	2b04      	cmp	r3, #4
 80164e6:	d001      	beq.n	80164ec <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x80>
 80164e8:	f010 fc09 	bl	8026cfe <abort>

  (void)im2col_data;   // only used in optimized code.
  (void)im2col_shape;  // only used in optimized code.
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 80164ec:	2300      	movs	r3, #0
 80164ee:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80164f2:	2100      	movs	r1, #0
 80164f4:	68b8      	ldr	r0, [r7, #8]
 80164f6:	f7fd f8a4 	bl	8013642 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80164fa:	6538      	str	r0, [r7, #80]	; 0x50
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
 80164fc:	2303      	movs	r3, #3
 80164fe:	683a      	ldr	r2, [r7, #0]
 8016500:	2103      	movs	r1, #3
 8016502:	68b8      	ldr	r0, [r7, #8]
 8016504:	f7fd f89d 	bl	8013642 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8016508:	64f8      	str	r0, [r7, #76]	; 0x4c
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
 801650a:	2303      	movs	r3, #3
 801650c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8016510:	2100      	movs	r1, #0
 8016512:	6838      	ldr	r0, [r7, #0]
 8016514:	f7fd f895 	bl	8013642 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8016518:	64b8      	str	r0, [r7, #72]	; 0x48
  if (bias_data) {
 801651a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801651e:	2b00      	cmp	r3, #0
 8016520:	d009      	beq.n	8016536 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0xca>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 8016522:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8016526:	f7fc ffba 	bl	801349e <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 801652a:	4602      	mov	r2, r0
 801652c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801652e:	4293      	cmp	r3, r2
 8016530:	d001      	beq.n	8016536 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0xca>
 8016532:	f010 fbe4 	bl	8026cfe <abort>
  }
  const int input_height = input_shape.Dims(1);
 8016536:	2101      	movs	r1, #1
 8016538:	68b8      	ldr	r0, [r7, #8]
 801653a:	f7fc ff8a 	bl	8013452 <_ZNK6tflite12RuntimeShape4DimsEi>
 801653e:	6478      	str	r0, [r7, #68]	; 0x44
  const int input_width = input_shape.Dims(2);
 8016540:	2102      	movs	r1, #2
 8016542:	68b8      	ldr	r0, [r7, #8]
 8016544:	f7fc ff85 	bl	8013452 <_ZNK6tflite12RuntimeShape4DimsEi>
 8016548:	6438      	str	r0, [r7, #64]	; 0x40
  const int filter_height = filter_shape.Dims(1);
 801654a:	2101      	movs	r1, #1
 801654c:	6838      	ldr	r0, [r7, #0]
 801654e:	f7fc ff80 	bl	8013452 <_ZNK6tflite12RuntimeShape4DimsEi>
 8016552:	63f8      	str	r0, [r7, #60]	; 0x3c
  const int filter_width = filter_shape.Dims(2);
 8016554:	2102      	movs	r1, #2
 8016556:	6838      	ldr	r0, [r7, #0]
 8016558:	f7fc ff7b 	bl	8013452 <_ZNK6tflite12RuntimeShape4DimsEi>
 801655c:	63b8      	str	r0, [r7, #56]	; 0x38
  const int output_height = output_shape.Dims(1);
 801655e:	2101      	movs	r1, #1
 8016560:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8016564:	f7fc ff75 	bl	8013452 <_ZNK6tflite12RuntimeShape4DimsEi>
 8016568:	6378      	str	r0, [r7, #52]	; 0x34
  const int output_width = output_shape.Dims(2);
 801656a:	2102      	movs	r1, #2
 801656c:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8016570:	f7fc ff6f 	bl	8013452 <_ZNK6tflite12RuntimeShape4DimsEi>
 8016574:	6338      	str	r0, [r7, #48]	; 0x30
  for (int batch = 0; batch < batches; ++batch) {
 8016576:	2300      	movs	r3, #0
 8016578:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801657c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8016580:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016582:	429a      	cmp	r2, r3
 8016584:	f280 80f0 	bge.w	8016768 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2fc>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8016588:	2300      	movs	r3, #0
 801658a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801658e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8016592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016594:	429a      	cmp	r2, r3
 8016596:	f280 80e1 	bge.w	801675c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2f0>
      const int in_y_origin = (out_y * stride_height) - pad_height;
 801659a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801659e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80165a0:	fb02 f203 	mul.w	r2, r2, r3
 80165a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80165a6:	1ad3      	subs	r3, r2, r3
 80165a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      for (int out_x = 0; out_x < output_width; ++out_x) {
 80165aa:	2300      	movs	r3, #0
 80165ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80165b0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80165b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165b6:	429a      	cmp	r2, r3
 80165b8:	f280 80ca 	bge.w	8016750 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2e4>
        const int in_x_origin = (out_x * stride_width) - pad_width;
 80165bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80165c0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80165c2:	fb02 f203 	mul.w	r2, r2, r3
 80165c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80165c8:	1ad3      	subs	r3, r2, r3
 80165ca:	62bb      	str	r3, [r7, #40]	; 0x28
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 80165cc:	2300      	movs	r3, #0
 80165ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80165d2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80165d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80165d8:	429a      	cmp	r2, r3
 80165da:	f280 80b3 	bge.w	8016744 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2d8>
          float total = 0.f;
 80165de:	f04f 0300 	mov.w	r3, #0
 80165e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 80165e6:	2300      	movs	r3, #0
 80165e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80165ec:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80165f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80165f2:	429a      	cmp	r2, r3
 80165f4:	da6d      	bge.n	80166d2 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x266>
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
 80165f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80165f8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80165fc:	fb02 f303 	mul.w	r3, r2, r3
 8016600:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016602:	4413      	add	r3, r2
 8016604:	627b      	str	r3, [r7, #36]	; 0x24
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 8016606:	2300      	movs	r3, #0
 8016608:	67fb      	str	r3, [r7, #124]	; 0x7c
 801660a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801660c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801660e:	429a      	cmp	r2, r3
 8016610:	da59      	bge.n	80166c6 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x25a>
              const int in_x = in_x_origin + dilation_width_factor * filter_x;
 8016612:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016614:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8016616:	fb02 f303 	mul.w	r3, r2, r3
 801661a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801661c:	4413      	add	r3, r2
 801661e:	623b      	str	r3, [r7, #32]

              // Zero padding by omitting the areas outside the image.
              const bool is_point_inside_image =
                  (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
 8016620:	6a3b      	ldr	r3, [r7, #32]
 8016622:	2b00      	cmp	r3, #0
 8016624:	db0c      	blt.n	8016640 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1d4>
 8016626:	6a3a      	ldr	r2, [r7, #32]
 8016628:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801662a:	429a      	cmp	r2, r3
 801662c:	da08      	bge.n	8016640 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1d4>
 801662e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016630:	2b00      	cmp	r3, #0
 8016632:	db05      	blt.n	8016640 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1d4>
 8016634:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016636:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016638:	429a      	cmp	r2, r3
 801663a:	da01      	bge.n	8016640 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1d4>
 801663c:	2301      	movs	r3, #1
 801663e:	e000      	b.n	8016642 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1d6>
 8016640:	2300      	movs	r3, #0
              const bool is_point_inside_image =
 8016642:	77fb      	strb	r3, [r7, #31]
                  (in_y < input_height);

              if (!is_point_inside_image) {
 8016644:	7ffb      	ldrb	r3, [r7, #31]
 8016646:	f083 0301 	eor.w	r3, r3, #1
 801664a:	b2db      	uxtb	r3, r3
 801664c:	2b00      	cmp	r3, #0
 801664e:	d135      	bne.n	80166bc <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x250>
                continue;
              }

              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 8016650:	2300      	movs	r3, #0
 8016652:	67bb      	str	r3, [r7, #120]	; 0x78
 8016654:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8016656:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016658:	429a      	cmp	r2, r3
 801665a:	da30      	bge.n	80166be <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x252>
                float input_value = input_data[Offset(input_shape, batch, in_y,
 801665c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801665e:	9300      	str	r3, [sp, #0]
 8016660:	6a3b      	ldr	r3, [r7, #32]
 8016662:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016664:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8016668:	68b8      	ldr	r0, [r7, #8]
 801666a:	f7fc ff64 	bl	8013536 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 801666e:	4603      	mov	r3, r0
                                                      in_x, in_channel)];
 8016670:	009b      	lsls	r3, r3, #2
 8016672:	687a      	ldr	r2, [r7, #4]
 8016674:	4413      	add	r3, r2
 8016676:	681b      	ldr	r3, [r3, #0]
 8016678:	61bb      	str	r3, [r7, #24]
                float filter_value = filter_data[Offset(
 801667a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801667c:	9300      	str	r3, [sp, #0]
 801667e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8016680:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8016684:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8016688:	6838      	ldr	r0, [r7, #0]
 801668a:	f7fc ff54 	bl	8013536 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 801668e:	4603      	mov	r3, r0
                    filter_shape, out_channel, filter_y, filter_x, in_channel)];
 8016690:	009b      	lsls	r3, r3, #2
 8016692:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8016696:	4413      	add	r3, r2
 8016698:	681b      	ldr	r3, [r3, #0]
 801669a:	617b      	str	r3, [r7, #20]
                total += (input_value * filter_value);
 801669c:	ed97 7a06 	vldr	s14, [r7, #24]
 80166a0:	edd7 7a05 	vldr	s15, [r7, #20]
 80166a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80166a8:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 80166ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80166b0:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 80166b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80166b6:	3301      	adds	r3, #1
 80166b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80166ba:	e7cb      	b.n	8016654 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1e8>
                continue;
 80166bc:	bf00      	nop
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 80166be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80166c0:	3301      	adds	r3, #1
 80166c2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80166c4:	e7a1      	b.n	801660a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x19e>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 80166c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80166ca:	3301      	adds	r3, #1
 80166cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80166d0:	e78c      	b.n	80165ec <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x180>
              }
            }
          }
          float bias_value = 0.0f;
 80166d2:	f04f 0300 	mov.w	r3, #0
 80166d6:	677b      	str	r3, [r7, #116]	; 0x74
          if (bias_data) {
 80166d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80166dc:	2b00      	cmp	r3, #0
 80166de:	d007      	beq.n	80166f0 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x284>
            bias_value = bias_data[out_channel];
 80166e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80166e4:	009b      	lsls	r3, r3, #2
 80166e6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80166ea:	4413      	add	r3, r2
 80166ec:	681b      	ldr	r3, [r3, #0]
 80166ee:	677b      	str	r3, [r7, #116]	; 0x74
          }
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
              ActivationFunctionWithMinMax(total + bias_value,
 80166f0:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 80166f4:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80166f8:	ee37 8a27 	vadd.f32	s16, s14, s15
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
 80166fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016700:	9300      	str	r3, [sp, #0]
 8016702:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016706:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801670a:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 801670e:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8016712:	f7fc ff10 	bl	8013536 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8016716:	4603      	mov	r3, r0
 8016718:	009b      	lsls	r3, r3, #2
 801671a:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 801671e:	18d4      	adds	r4, r2, r3
              ActivationFunctionWithMinMax(total + bias_value,
 8016720:	ed97 1a15 	vldr	s2, [r7, #84]	; 0x54
 8016724:	edd7 0a16 	vldr	s1, [r7, #88]	; 0x58
 8016728:	eeb0 0a48 	vmov.f32	s0, s16
 801672c:	f7fd fc77 	bl	801401e <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>
 8016730:	eef0 7a40 	vmov.f32	s15, s0
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
 8016734:	edc4 7a00 	vstr	s15, [r4]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 8016738:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801673c:	3301      	adds	r3, #1
 801673e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8016742:	e746      	b.n	80165d2 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x166>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8016744:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016748:	3301      	adds	r3, #1
 801674a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801674e:	e72f      	b.n	80165b0 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x144>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8016750:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016754:	3301      	adds	r3, #1
 8016756:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801675a:	e718      	b.n	801658e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x122>
  for (int batch = 0; batch < batches; ++batch) {
 801675c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8016760:	3301      	adds	r3, #1
 8016762:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8016766:	e709      	b.n	801657c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x110>
                                           output_activation_max);
        }
      }
    }
  }
}
 8016768:	bf00      	nop
 801676a:	379c      	adds	r7, #156	; 0x9c
 801676c:	46bd      	mov	sp, r7
 801676e:	ecbd 8b02 	vpop	{d8}
 8016772:	bd90      	pop	{r4, r7, pc}

08016774 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>:
    const ConvParams& params, const int32_t* output_multiplier,
    const int32_t* output_shift, const RuntimeShape& input_shape,
    const int8_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const int32_t* bias_data, const RuntimeShape& output_shape,
    int8_t* output_data) {
 8016774:	b590      	push	{r4, r7, lr}
 8016776:	b0a9      	sub	sp, #164	; 0xa4
 8016778:	af02      	add	r7, sp, #8
 801677a:	60f8      	str	r0, [r7, #12]
 801677c:	60b9      	str	r1, [r7, #8]
 801677e:	607a      	str	r2, [r7, #4]
 8016780:	603b      	str	r3, [r7, #0]
  // Get parameters.
  const int32_t input_offset = params.input_offset;  // r = s(q - Z)
 8016782:	68fb      	ldr	r3, [r7, #12]
 8016784:	695b      	ldr	r3, [r3, #20]
 8016786:	67bb      	str	r3, [r7, #120]	; 0x78
  const int stride_width = params.stride_width;
 8016788:	68fb      	ldr	r3, [r7, #12]
 801678a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801678e:	677b      	str	r3, [r7, #116]	; 0x74
  const int stride_height = params.stride_height;
 8016790:	68fb      	ldr	r3, [r7, #12]
 8016792:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8016796:	673b      	str	r3, [r7, #112]	; 0x70
  const int dilation_width_factor = params.dilation_width_factor;
 8016798:	68fb      	ldr	r3, [r7, #12]
 801679a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 801679e:	66fb      	str	r3, [r7, #108]	; 0x6c
  const int dilation_height_factor = params.dilation_height_factor;
 80167a0:	68fb      	ldr	r3, [r7, #12]
 80167a2:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80167a6:	66bb      	str	r3, [r7, #104]	; 0x68
  const int pad_width = params.padding_values.width;
 80167a8:	68fb      	ldr	r3, [r7, #12]
 80167aa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80167ae:	667b      	str	r3, [r7, #100]	; 0x64
  const int pad_height = params.padding_values.height;
 80167b0:	68fb      	ldr	r3, [r7, #12]
 80167b2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80167b6:	663b      	str	r3, [r7, #96]	; 0x60
  const int32_t output_offset = params.output_offset;
 80167b8:	68fb      	ldr	r3, [r7, #12]
 80167ba:	69db      	ldr	r3, [r3, #28]
 80167bc:	65fb      	str	r3, [r7, #92]	; 0x5c

  // Set min and max value of the output.
  const int32_t output_activation_min = params.quantized_activation_min;
 80167be:	68fb      	ldr	r3, [r7, #12]
 80167c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80167c2:	61bb      	str	r3, [r7, #24]
  const int32_t output_activation_max = params.quantized_activation_max;
 80167c4:	68fb      	ldr	r3, [r7, #12]
 80167c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80167c8:	617b      	str	r3, [r7, #20]

  // Consistency check.
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 80167ca:	69ba      	ldr	r2, [r7, #24]
 80167cc:	697b      	ldr	r3, [r7, #20]
 80167ce:	429a      	cmp	r2, r3
 80167d0:	dd01      	ble.n	80167d6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x62>
 80167d2:	f010 fa94 	bl	8026cfe <abort>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 80167d6:	6838      	ldr	r0, [r7, #0]
 80167d8:	f7f8 f886 	bl	800e8e8 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80167dc:	4603      	mov	r3, r0
 80167de:	2b04      	cmp	r3, #4
 80167e0:	d001      	beq.n	80167e6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x72>
 80167e2:	f010 fa8c 	bl	8026cfe <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 80167e6:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80167ea:	f7f8 f87d 	bl	800e8e8 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80167ee:	4603      	mov	r3, r0
 80167f0:	2b04      	cmp	r3, #4
 80167f2:	d001      	beq.n	80167f8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x84>
 80167f4:	f010 fa83 	bl	8026cfe <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 80167f8:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 80167fc:	f7f8 f874 	bl	800e8e8 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8016800:	4603      	mov	r3, r0
 8016802:	2b04      	cmp	r3, #4
 8016804:	d001      	beq.n	801680a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x96>
 8016806:	f010 fa7a 	bl	8026cfe <abort>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 801680a:	2300      	movs	r3, #0
 801680c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8016810:	2100      	movs	r1, #0
 8016812:	6838      	ldr	r0, [r7, #0]
 8016814:	f7fc ff15 	bl	8013642 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8016818:	65b8      	str	r0, [r7, #88]	; 0x58
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
 801681a:	2303      	movs	r3, #3
 801681c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8016820:	2103      	movs	r1, #3
 8016822:	6838      	ldr	r0, [r7, #0]
 8016824:	f7fc ff0d 	bl	8013642 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8016828:	6578      	str	r0, [r7, #84]	; 0x54
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
 801682a:	2303      	movs	r3, #3
 801682c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8016830:	2100      	movs	r1, #0
 8016832:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8016836:	f7fc ff04 	bl	8013642 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 801683a:	6538      	str	r0, [r7, #80]	; 0x50
  if (bias_data) {
 801683c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8016840:	2b00      	cmp	r3, #0
 8016842:	d009      	beq.n	8016858 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xe4>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 8016844:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8016848:	f7fc fe29 	bl	801349e <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 801684c:	4602      	mov	r2, r0
 801684e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016850:	4293      	cmp	r3, r2
 8016852:	d001      	beq.n	8016858 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xe4>
 8016854:	f010 fa53 	bl	8026cfe <abort>
  }

  // Check dimensions of the tensors.
  const int input_height = input_shape.Dims(1);
 8016858:	2101      	movs	r1, #1
 801685a:	6838      	ldr	r0, [r7, #0]
 801685c:	f7fc fdf9 	bl	8013452 <_ZNK6tflite12RuntimeShape4DimsEi>
 8016860:	64f8      	str	r0, [r7, #76]	; 0x4c
  const int input_width = input_shape.Dims(2);
 8016862:	2102      	movs	r1, #2
 8016864:	6838      	ldr	r0, [r7, #0]
 8016866:	f7fc fdf4 	bl	8013452 <_ZNK6tflite12RuntimeShape4DimsEi>
 801686a:	64b8      	str	r0, [r7, #72]	; 0x48
  const int filter_height = filter_shape.Dims(1);
 801686c:	2101      	movs	r1, #1
 801686e:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8016872:	f7fc fdee 	bl	8013452 <_ZNK6tflite12RuntimeShape4DimsEi>
 8016876:	6478      	str	r0, [r7, #68]	; 0x44
  const int filter_width = filter_shape.Dims(2);
 8016878:	2102      	movs	r1, #2
 801687a:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 801687e:	f7fc fde8 	bl	8013452 <_ZNK6tflite12RuntimeShape4DimsEi>
 8016882:	6438      	str	r0, [r7, #64]	; 0x40
  const int output_height = output_shape.Dims(1);
 8016884:	2101      	movs	r1, #1
 8016886:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 801688a:	f7fc fde2 	bl	8013452 <_ZNK6tflite12RuntimeShape4DimsEi>
 801688e:	63f8      	str	r0, [r7, #60]	; 0x3c
  const int output_width = output_shape.Dims(2);
 8016890:	2102      	movs	r1, #2
 8016892:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8016896:	f7fc fddc 	bl	8013452 <_ZNK6tflite12RuntimeShape4DimsEi>
 801689a:	63b8      	str	r0, [r7, #56]	; 0x38
  for (int batch = 0; batch < batches; ++batch) {
 801689c:	2300      	movs	r3, #0
 801689e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80168a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80168a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80168a8:	429a      	cmp	r2, r3
 80168aa:	f280 8113 	bge.w	8016ad4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x360>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 80168ae:	2300      	movs	r3, #0
 80168b0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80168b4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80168b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80168ba:	429a      	cmp	r2, r3
 80168bc:	f280 8104 	bge.w	8016ac8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x354>
      const int in_y_origin = (out_y * stride_height) - pad_height;
 80168c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80168c4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80168c6:	fb02 f203 	mul.w	r2, r2, r3
 80168ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80168cc:	1ad3      	subs	r3, r2, r3
 80168ce:	637b      	str	r3, [r7, #52]	; 0x34
      for (int out_x = 0; out_x < output_width; ++out_x) {
 80168d0:	2300      	movs	r3, #0
 80168d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80168d6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80168da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80168dc:	429a      	cmp	r2, r3
 80168de:	f280 80ed 	bge.w	8016abc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x348>
        const int in_x_origin = (out_x * stride_width) - pad_width;
 80168e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80168e6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80168e8:	fb02 f203 	mul.w	r2, r2, r3
 80168ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80168ee:	1ad3      	subs	r3, r2, r3
 80168f0:	633b      	str	r3, [r7, #48]	; 0x30
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 80168f2:	2300      	movs	r3, #0
 80168f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80168f8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80168fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80168fe:	429a      	cmp	r2, r3
 8016900:	f280 80d6 	bge.w	8016ab0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x33c>
          int32_t acc = 0;
 8016904:	2300      	movs	r3, #0
 8016906:	613b      	str	r3, [r7, #16]
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 8016908:	2300      	movs	r3, #0
 801690a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801690e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8016912:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016914:	429a      	cmp	r2, r3
 8016916:	da76      	bge.n	8016a06 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x292>
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
 8016918:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801691a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801691e:	fb02 f303 	mul.w	r3, r2, r3
 8016922:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016924:	4413      	add	r3, r2
 8016926:	62fb      	str	r3, [r7, #44]	; 0x2c
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 8016928:	2300      	movs	r3, #0
 801692a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801692e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8016932:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016934:	429a      	cmp	r2, r3
 8016936:	da60      	bge.n	80169fa <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x286>
              const int in_x = in_x_origin + dilation_width_factor * filter_x;
 8016938:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801693a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801693e:	fb02 f303 	mul.w	r3, r2, r3
 8016942:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016944:	4413      	add	r3, r2
 8016946:	62bb      	str	r3, [r7, #40]	; 0x28

              // Zero padding by omitting the areas outside the image.
              const bool is_point_inside_image =
                  (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
 8016948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801694a:	2b00      	cmp	r3, #0
 801694c:	db0c      	blt.n	8016968 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1f4>
 801694e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016950:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016952:	429a      	cmp	r2, r3
 8016954:	da08      	bge.n	8016968 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1f4>
 8016956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016958:	2b00      	cmp	r3, #0
 801695a:	db05      	blt.n	8016968 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1f4>
 801695c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801695e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016960:	429a      	cmp	r2, r3
 8016962:	da01      	bge.n	8016968 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1f4>
 8016964:	2301      	movs	r3, #1
 8016966:	e000      	b.n	801696a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1f6>
 8016968:	2300      	movs	r3, #0
              const bool is_point_inside_image =
 801696a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                  (in_y < input_height);

              if (!is_point_inside_image) {
 801696e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016972:	f083 0301 	eor.w	r3, r3, #1
 8016976:	b2db      	uxtb	r3, r3
 8016978:	2b00      	cmp	r3, #0
 801697a:	d137      	bne.n	80169ec <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x278>
                continue;
              }

              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 801697c:	2300      	movs	r3, #0
 801697e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8016980:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8016982:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016984:	429a      	cmp	r2, r3
 8016986:	da32      	bge.n	80169ee <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x27a>
                int32_t input_val = input_data[Offset(input_shape, batch, in_y,
 8016988:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801698a:	9300      	str	r3, [sp, #0]
 801698c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801698e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016990:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8016994:	6838      	ldr	r0, [r7, #0]
 8016996:	f7fc fdce 	bl	8013536 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 801699a:	4603      	mov	r3, r0
 801699c:	461a      	mov	r2, r3
                                                      in_x, in_channel)];
 801699e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80169a2:	4413      	add	r3, r2
 80169a4:	f993 3000 	ldrsb.w	r3, [r3]
 80169a8:	623b      	str	r3, [r7, #32]
                int32_t filter_val = filter_data[Offset(
 80169aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80169ac:	9300      	str	r3, [sp, #0]
 80169ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80169b2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80169b6:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80169ba:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80169be:	f7fc fdba 	bl	8013536 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 80169c2:	4603      	mov	r3, r0
 80169c4:	461a      	mov	r2, r3
                    filter_shape, out_channel, filter_y, filter_x, in_channel)];
 80169c6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80169ca:	4413      	add	r3, r2
 80169cc:	f993 3000 	ldrsb.w	r3, [r3]
 80169d0:	61fb      	str	r3, [r7, #28]
                // long as the filter size (filter_y * filter_x * in_channel)
                // does not exceed 2^16, which is the case in all the models
                // we have seen so far.
                // TODO(b/174275578): Add a check to make sure the
                // accumulator depth is smaller than 2^16.
                acc += filter_val * (input_val + input_offset);
 80169d2:	6a3a      	ldr	r2, [r7, #32]
 80169d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80169d6:	4413      	add	r3, r2
 80169d8:	69fa      	ldr	r2, [r7, #28]
 80169da:	fb02 f203 	mul.w	r2, r2, r3
 80169de:	693b      	ldr	r3, [r7, #16]
 80169e0:	4413      	add	r3, r2
 80169e2:	613b      	str	r3, [r7, #16]
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 80169e4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80169e6:	3301      	adds	r3, #1
 80169e8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80169ea:	e7c9      	b.n	8016980 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x20c>
                continue;
 80169ec:	bf00      	nop
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 80169ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80169f2:	3301      	adds	r3, #1
 80169f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80169f8:	e799      	b.n	801692e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1ba>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 80169fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80169fe:	3301      	adds	r3, #1
 8016a00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8016a04:	e783      	b.n	801690e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x19a>
              }
            }
          }

          if (bias_data) {
 8016a06:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8016a0a:	2b00      	cmp	r3, #0
 8016a0c:	d009      	beq.n	8016a22 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2ae>
            acc += bias_data[out_channel];
 8016a0e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016a12:	009b      	lsls	r3, r3, #2
 8016a14:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8016a18:	4413      	add	r3, r2
 8016a1a:	681a      	ldr	r2, [r3, #0]
 8016a1c:	693b      	ldr	r3, [r7, #16]
 8016a1e:	4413      	add	r3, r2
 8016a20:	613b      	str	r3, [r7, #16]
          }
          acc = MultiplyByQuantizedMultiplier(
 8016a22:	6938      	ldr	r0, [r7, #16]
              acc, output_multiplier[out_channel], output_shift[out_channel]);
 8016a24:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016a28:	009b      	lsls	r3, r3, #2
 8016a2a:	68ba      	ldr	r2, [r7, #8]
 8016a2c:	4413      	add	r3, r2
          acc = MultiplyByQuantizedMultiplier(
 8016a2e:	6819      	ldr	r1, [r3, #0]
              acc, output_multiplier[out_channel], output_shift[out_channel]);
 8016a30:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016a34:	009b      	lsls	r3, r3, #2
 8016a36:	687a      	ldr	r2, [r7, #4]
 8016a38:	4413      	add	r3, r2
          acc = MultiplyByQuantizedMultiplier(
 8016a3a:	681b      	ldr	r3, [r3, #0]
 8016a3c:	461a      	mov	r2, r3
 8016a3e:	f7f6 fce9 	bl	800d414 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 8016a42:	4603      	mov	r3, r0
 8016a44:	613b      	str	r3, [r7, #16]
          acc += output_offset;
 8016a46:	693a      	ldr	r2, [r7, #16]
 8016a48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016a4a:	4413      	add	r3, r2
 8016a4c:	613b      	str	r3, [r7, #16]
          acc = std::max(acc, output_activation_min);
 8016a4e:	f107 0218 	add.w	r2, r7, #24
 8016a52:	f107 0310 	add.w	r3, r7, #16
 8016a56:	4611      	mov	r1, r2
 8016a58:	4618      	mov	r0, r3
 8016a5a:	f7f6 fdaf 	bl	800d5bc <_ZSt3maxIlERKT_S2_S2_>
 8016a5e:	4603      	mov	r3, r0
 8016a60:	681b      	ldr	r3, [r3, #0]
 8016a62:	613b      	str	r3, [r7, #16]
          acc = std::min(acc, output_activation_max);
 8016a64:	f107 0214 	add.w	r2, r7, #20
 8016a68:	f107 0310 	add.w	r3, r7, #16
 8016a6c:	4611      	mov	r1, r2
 8016a6e:	4618      	mov	r0, r3
 8016a70:	f7f6 fd90 	bl	800d594 <_ZSt3minIlERKT_S2_S2_>
 8016a74:	4603      	mov	r3, r0
 8016a76:	681b      	ldr	r3, [r3, #0]
 8016a78:	613b      	str	r3, [r7, #16]
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
 8016a7a:	693c      	ldr	r4, [r7, #16]
 8016a7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016a80:	9300      	str	r3, [sp, #0]
 8016a82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016a86:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8016a8a:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8016a8e:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8016a92:	f7fc fd50 	bl	8013536 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8016a96:	4603      	mov	r3, r0
 8016a98:	461a      	mov	r2, r3
 8016a9a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8016a9e:	4413      	add	r3, r2
 8016aa0:	b262      	sxtb	r2, r4
 8016aa2:	701a      	strb	r2, [r3, #0]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 8016aa4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016aa8:	3301      	adds	r3, #1
 8016aaa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8016aae:	e723      	b.n	80168f8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x184>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8016ab0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016ab4:	3301      	adds	r3, #1
 8016ab6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8016aba:	e70c      	b.n	80168d6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x162>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8016abc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016ac0:	3301      	adds	r3, #1
 8016ac2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8016ac6:	e6f5      	b.n	80168b4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x140>
  for (int batch = 0; batch < batches; ++batch) {
 8016ac8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8016acc:	3301      	adds	r3, #1
 8016ace:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8016ad2:	e6e6      	b.n	80168a2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x12e>
              static_cast<int8_t>(acc);
        }
      }
    }
  }
}
 8016ad4:	bf00      	nop
 8016ad6:	379c      	adds	r7, #156	; 0x9c
 8016ad8:	46bd      	mov	sp, r7
 8016ada:	bd90      	pop	{r4, r7, pc}

08016adc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps>:
    const ConvParams& params, const int32_t* output_multiplier,
    const int32_t* output_shift, const RuntimeShape& input_shape,
    const int16_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const std::int64_t* bias_data, const RuntimeShape& output_shape,
    int16_t* output_data) {
 8016adc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016ae0:	b0a9      	sub	sp, #164	; 0xa4
 8016ae2:	af02      	add	r7, sp, #8
 8016ae4:	60f8      	str	r0, [r7, #12]
 8016ae6:	60b9      	str	r1, [r7, #8]
 8016ae8:	607a      	str	r2, [r7, #4]
 8016aea:	603b      	str	r3, [r7, #0]
  // Get parameters.
  const int stride_width = params.stride_width;
 8016aec:	68fb      	ldr	r3, [r7, #12]
 8016aee:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8016af2:	673b      	str	r3, [r7, #112]	; 0x70
  const int stride_height = params.stride_height;
 8016af4:	68fb      	ldr	r3, [r7, #12]
 8016af6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8016afa:	66fb      	str	r3, [r7, #108]	; 0x6c
  const int dilation_width_factor = params.dilation_width_factor;
 8016afc:	68fb      	ldr	r3, [r7, #12]
 8016afe:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8016b02:	66bb      	str	r3, [r7, #104]	; 0x68
  const int dilation_height_factor = params.dilation_height_factor;
 8016b04:	68fb      	ldr	r3, [r7, #12]
 8016b06:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8016b0a:	667b      	str	r3, [r7, #100]	; 0x64
  const int pad_width = params.padding_values.width;
 8016b0c:	68fb      	ldr	r3, [r7, #12]
 8016b0e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016b12:	663b      	str	r3, [r7, #96]	; 0x60
  const int pad_height = params.padding_values.height;
 8016b14:	68fb      	ldr	r3, [r7, #12]
 8016b16:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016b1a:	65fb      	str	r3, [r7, #92]	; 0x5c

  // Set min and max value of the output.
  const int32_t output_activation_min = params.quantized_activation_min;
 8016b1c:	68fb      	ldr	r3, [r7, #12]
 8016b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016b20:	61bb      	str	r3, [r7, #24]
  const int32_t output_activation_max = params.quantized_activation_max;
 8016b22:	68fb      	ldr	r3, [r7, #12]
 8016b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016b26:	617b      	str	r3, [r7, #20]

  // Consistency check.
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 8016b28:	69ba      	ldr	r2, [r7, #24]
 8016b2a:	697b      	ldr	r3, [r7, #20]
 8016b2c:	429a      	cmp	r2, r3
 8016b2e:	dd01      	ble.n	8016b34 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x58>
 8016b30:	f010 f8e5 	bl	8026cfe <abort>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 8016b34:	6838      	ldr	r0, [r7, #0]
 8016b36:	f7f7 fed7 	bl	800e8e8 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8016b3a:	4603      	mov	r3, r0
 8016b3c:	2b04      	cmp	r3, #4
 8016b3e:	d001      	beq.n	8016b44 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x68>
 8016b40:	f010 f8dd 	bl	8026cfe <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 8016b44:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8016b48:	f7f7 fece 	bl	800e8e8 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8016b4c:	4603      	mov	r3, r0
 8016b4e:	2b04      	cmp	r3, #4
 8016b50:	d001      	beq.n	8016b56 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x7a>
 8016b52:	f010 f8d4 	bl	8026cfe <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 8016b56:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8016b5a:	f7f7 fec5 	bl	800e8e8 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8016b5e:	4603      	mov	r3, r0
 8016b60:	2b04      	cmp	r3, #4
 8016b62:	d001      	beq.n	8016b68 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x8c>
 8016b64:	f010 f8cb 	bl	8026cfe <abort>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 8016b68:	2300      	movs	r3, #0
 8016b6a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8016b6e:	2100      	movs	r1, #0
 8016b70:	6838      	ldr	r0, [r7, #0]
 8016b72:	f7fc fd66 	bl	8013642 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8016b76:	65b8      	str	r0, [r7, #88]	; 0x58
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
 8016b78:	2303      	movs	r3, #3
 8016b7a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8016b7e:	2103      	movs	r1, #3
 8016b80:	6838      	ldr	r0, [r7, #0]
 8016b82:	f7fc fd5e 	bl	8013642 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8016b86:	6578      	str	r0, [r7, #84]	; 0x54
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
 8016b88:	2303      	movs	r3, #3
 8016b8a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8016b8e:	2100      	movs	r1, #0
 8016b90:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8016b94:	f7fc fd55 	bl	8013642 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8016b98:	6538      	str	r0, [r7, #80]	; 0x50
  if (bias_data) {
 8016b9a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8016b9e:	2b00      	cmp	r3, #0
 8016ba0:	d009      	beq.n	8016bb6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0xda>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 8016ba2:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8016ba6:	f7fc fc7a 	bl	801349e <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 8016baa:	4602      	mov	r2, r0
 8016bac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016bae:	4293      	cmp	r3, r2
 8016bb0:	d001      	beq.n	8016bb6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0xda>
 8016bb2:	f010 f8a4 	bl	8026cfe <abort>
  }

  // Check dimensions of the tensors.
  const int input_height = input_shape.Dims(1);
 8016bb6:	2101      	movs	r1, #1
 8016bb8:	6838      	ldr	r0, [r7, #0]
 8016bba:	f7fc fc4a 	bl	8013452 <_ZNK6tflite12RuntimeShape4DimsEi>
 8016bbe:	64f8      	str	r0, [r7, #76]	; 0x4c
  const int input_width = input_shape.Dims(2);
 8016bc0:	2102      	movs	r1, #2
 8016bc2:	6838      	ldr	r0, [r7, #0]
 8016bc4:	f7fc fc45 	bl	8013452 <_ZNK6tflite12RuntimeShape4DimsEi>
 8016bc8:	64b8      	str	r0, [r7, #72]	; 0x48
  const int filter_height = filter_shape.Dims(1);
 8016bca:	2101      	movs	r1, #1
 8016bcc:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8016bd0:	f7fc fc3f 	bl	8013452 <_ZNK6tflite12RuntimeShape4DimsEi>
 8016bd4:	6478      	str	r0, [r7, #68]	; 0x44
  const int filter_width = filter_shape.Dims(2);
 8016bd6:	2102      	movs	r1, #2
 8016bd8:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8016bdc:	f7fc fc39 	bl	8013452 <_ZNK6tflite12RuntimeShape4DimsEi>
 8016be0:	6438      	str	r0, [r7, #64]	; 0x40
  const int output_height = output_shape.Dims(1);
 8016be2:	2101      	movs	r1, #1
 8016be4:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8016be8:	f7fc fc33 	bl	8013452 <_ZNK6tflite12RuntimeShape4DimsEi>
 8016bec:	63f8      	str	r0, [r7, #60]	; 0x3c
  const int output_width = output_shape.Dims(2);
 8016bee:	2102      	movs	r1, #2
 8016bf0:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8016bf4:	f7fc fc2d 	bl	8013452 <_ZNK6tflite12RuntimeShape4DimsEi>
 8016bf8:	63b8      	str	r0, [r7, #56]	; 0x38
  for (int batch = 0; batch < batches; ++batch) {
 8016bfa:	2300      	movs	r3, #0
 8016bfc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8016c00:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8016c04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016c06:	429a      	cmp	r2, r3
 8016c08:	f280 8113 	bge.w	8016e32 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x356>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8016c0c:	2300      	movs	r3, #0
 8016c0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8016c12:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8016c16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016c18:	429a      	cmp	r2, r3
 8016c1a:	f280 8104 	bge.w	8016e26 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x34a>
      const int in_y_origin = (out_y * stride_height) - pad_height;
 8016c1e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016c22:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8016c24:	fb02 f203 	mul.w	r2, r2, r3
 8016c28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016c2a:	1ad3      	subs	r3, r2, r3
 8016c2c:	637b      	str	r3, [r7, #52]	; 0x34
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8016c2e:	2300      	movs	r3, #0
 8016c30:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8016c34:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8016c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016c3a:	429a      	cmp	r2, r3
 8016c3c:	f280 80ed 	bge.w	8016e1a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x33e>
        const int in_x_origin = (out_x * stride_width) - pad_width;
 8016c40:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016c44:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8016c46:	fb02 f203 	mul.w	r2, r2, r3
 8016c4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016c4c:	1ad3      	subs	r3, r2, r3
 8016c4e:	633b      	str	r3, [r7, #48]	; 0x30
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 8016c50:	2300      	movs	r3, #0
 8016c52:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8016c56:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8016c5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016c5c:	429a      	cmp	r2, r3
 8016c5e:	f280 80d6 	bge.w	8016e0e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x332>
          std::int64_t acc = 0;
 8016c62:	f04f 0200 	mov.w	r2, #0
 8016c66:	f04f 0300 	mov.w	r3, #0
 8016c6a:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 8016c6e:	2300      	movs	r3, #0
 8016c70:	67fb      	str	r3, [r7, #124]	; 0x7c
 8016c72:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8016c74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016c76:	429a      	cmp	r2, r3
 8016c78:	da71      	bge.n	8016d5e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x282>
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
 8016c7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016c7c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8016c7e:	fb02 f303 	mul.w	r3, r2, r3
 8016c82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016c84:	4413      	add	r3, r2
 8016c86:	62fb      	str	r3, [r7, #44]	; 0x2c
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 8016c88:	2300      	movs	r3, #0
 8016c8a:	67bb      	str	r3, [r7, #120]	; 0x78
 8016c8c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8016c8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016c90:	429a      	cmp	r2, r3
 8016c92:	da60      	bge.n	8016d56 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x27a>
              const int in_x = in_x_origin + dilation_width_factor * filter_x;
 8016c94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016c96:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8016c98:	fb02 f303 	mul.w	r3, r2, r3
 8016c9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016c9e:	4413      	add	r3, r2
 8016ca0:	62bb      	str	r3, [r7, #40]	; 0x28

              // Zero padding by omitting the areas outside the image.
              const bool is_point_inside_image =
                  (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
 8016ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ca4:	2b00      	cmp	r3, #0
 8016ca6:	db0c      	blt.n	8016cc2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1e6>
 8016ca8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016caa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016cac:	429a      	cmp	r2, r3
 8016cae:	da08      	bge.n	8016cc2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1e6>
 8016cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016cb2:	2b00      	cmp	r3, #0
 8016cb4:	db05      	blt.n	8016cc2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1e6>
 8016cb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016cb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016cba:	429a      	cmp	r2, r3
 8016cbc:	da01      	bge.n	8016cc2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1e6>
 8016cbe:	2301      	movs	r3, #1
 8016cc0:	e000      	b.n	8016cc4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1e8>
 8016cc2:	2300      	movs	r3, #0
              const bool is_point_inside_image =
 8016cc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                  (in_y < input_height);

              if (!is_point_inside_image) {
 8016cc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016ccc:	f083 0301 	eor.w	r3, r3, #1
 8016cd0:	b2db      	uxtb	r3, r3
 8016cd2:	2b00      	cmp	r3, #0
 8016cd4:	d13a      	bne.n	8016d4c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x270>
                continue;
              }

              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 8016cd6:	2300      	movs	r3, #0
 8016cd8:	677b      	str	r3, [r7, #116]	; 0x74
 8016cda:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8016cdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016cde:	429a      	cmp	r2, r3
 8016ce0:	da35      	bge.n	8016d4e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x272>
                int32_t input_val = input_data[Offset(input_shape, batch, in_y,
 8016ce2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016ce4:	9300      	str	r3, [sp, #0]
 8016ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ce8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016cea:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8016cee:	6838      	ldr	r0, [r7, #0]
 8016cf0:	f7fc fc21 	bl	8013536 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8016cf4:	4603      	mov	r3, r0
                                                      in_x, in_channel)];
 8016cf6:	005b      	lsls	r3, r3, #1
 8016cf8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8016cfc:	4413      	add	r3, r2
 8016cfe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016d02:	623b      	str	r3, [r7, #32]
                int32_t filter_val = filter_data[Offset(
 8016d04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016d06:	9300      	str	r3, [sp, #0]
 8016d08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016d0a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8016d0c:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8016d10:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8016d14:	f7fc fc0f 	bl	8013536 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8016d18:	4603      	mov	r3, r0
 8016d1a:	461a      	mov	r2, r3
                    filter_shape, out_channel, filter_y, filter_x, in_channel)];
 8016d1c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8016d20:	4413      	add	r3, r2
 8016d22:	f993 3000 	ldrsb.w	r3, [r3]
 8016d26:	61fb      	str	r3, [r7, #28]
                // int64_t += int8_t * int16_t so the highest value we can
                // get from each accumulation is [-127, 127] * ([-32768,
                // 32767] -
                // [-32768, 32767]), which is [-8322945, 8322945].
                // log2(8322945) = 22.99.
                acc += filter_val * input_val;
 8016d28:	69fb      	ldr	r3, [r7, #28]
 8016d2a:	6a3a      	ldr	r2, [r7, #32]
 8016d2c:	fb02 f303 	mul.w	r3, r2, r3
 8016d30:	461a      	mov	r2, r3
 8016d32:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8016d36:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8016d3a:	1884      	adds	r4, r0, r2
 8016d3c:	eb41 0503 	adc.w	r5, r1, r3
 8016d40:	e9c7 4520 	strd	r4, r5, [r7, #128]	; 0x80
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 8016d44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016d46:	3301      	adds	r3, #1
 8016d48:	677b      	str	r3, [r7, #116]	; 0x74
 8016d4a:	e7c6      	b.n	8016cda <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1fe>
                continue;
 8016d4c:	bf00      	nop
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 8016d4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016d50:	3301      	adds	r3, #1
 8016d52:	67bb      	str	r3, [r7, #120]	; 0x78
 8016d54:	e79a      	b.n	8016c8c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1b0>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 8016d56:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8016d58:	3301      	adds	r3, #1
 8016d5a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8016d5c:	e789      	b.n	8016c72 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x196>
              }
            }
          }
          if (bias_data) {
 8016d5e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8016d62:	2b00      	cmp	r3, #0
 8016d64:	d00f      	beq.n	8016d86 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2aa>
            acc += bias_data[out_channel];
 8016d66:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016d6a:	00db      	lsls	r3, r3, #3
 8016d6c:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8016d70:	4413      	add	r3, r2
 8016d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d76:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8016d7a:	eb10 0802 	adds.w	r8, r0, r2
 8016d7e:	eb41 0903 	adc.w	r9, r1, r3
 8016d82:	e9c7 8920 	strd	r8, r9, [r7, #128]	; 0x80
          }
          int32_t scaled_acc = MultiplyByQuantizedMultiplier(
              acc, output_multiplier[out_channel], output_shift[out_channel]);
 8016d86:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016d8a:	009b      	lsls	r3, r3, #2
 8016d8c:	68ba      	ldr	r2, [r7, #8]
 8016d8e:	4413      	add	r3, r2
          int32_t scaled_acc = MultiplyByQuantizedMultiplier(
 8016d90:	6819      	ldr	r1, [r3, #0]
              acc, output_multiplier[out_channel], output_shift[out_channel]);
 8016d92:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016d96:	009b      	lsls	r3, r3, #2
 8016d98:	687a      	ldr	r2, [r7, #4]
 8016d9a:	4413      	add	r3, r2
          int32_t scaled_acc = MultiplyByQuantizedMultiplier(
 8016d9c:	681b      	ldr	r3, [r3, #0]
 8016d9e:	460a      	mov	r2, r1
 8016da0:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8016da4:	f7f6 fb5a 	bl	800d45c <_ZN6tflite29MultiplyByQuantizedMultiplierExli>
 8016da8:	4603      	mov	r3, r0
              acc, output_multiplier[out_channel], output_shift[out_channel]);
 8016daa:	613b      	str	r3, [r7, #16]
          scaled_acc = std::max(scaled_acc, output_activation_min);
 8016dac:	f107 0218 	add.w	r2, r7, #24
 8016db0:	f107 0310 	add.w	r3, r7, #16
 8016db4:	4611      	mov	r1, r2
 8016db6:	4618      	mov	r0, r3
 8016db8:	f7f6 fc00 	bl	800d5bc <_ZSt3maxIlERKT_S2_S2_>
 8016dbc:	4603      	mov	r3, r0
 8016dbe:	681b      	ldr	r3, [r3, #0]
 8016dc0:	613b      	str	r3, [r7, #16]
          scaled_acc = std::min(scaled_acc, output_activation_max);
 8016dc2:	f107 0214 	add.w	r2, r7, #20
 8016dc6:	f107 0310 	add.w	r3, r7, #16
 8016dca:	4611      	mov	r1, r2
 8016dcc:	4618      	mov	r0, r3
 8016dce:	f7f6 fbe1 	bl	800d594 <_ZSt3minIlERKT_S2_S2_>
 8016dd2:	4603      	mov	r3, r0
 8016dd4:	681b      	ldr	r3, [r3, #0]
 8016dd6:	613b      	str	r3, [r7, #16]
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
 8016dd8:	693e      	ldr	r6, [r7, #16]
 8016dda:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016dde:	9300      	str	r3, [sp, #0]
 8016de0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016de4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8016de8:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8016dec:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8016df0:	f7fc fba1 	bl	8013536 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8016df4:	4603      	mov	r3, r0
 8016df6:	005b      	lsls	r3, r3, #1
 8016df8:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8016dfc:	4413      	add	r3, r2
 8016dfe:	b232      	sxth	r2, r6
 8016e00:	801a      	strh	r2, [r3, #0]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 8016e02:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016e06:	3301      	adds	r3, #1
 8016e08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8016e0c:	e723      	b.n	8016c56 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x17a>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8016e0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016e12:	3301      	adds	r3, #1
 8016e14:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8016e18:	e70c      	b.n	8016c34 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x158>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8016e1a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016e1e:	3301      	adds	r3, #1
 8016e20:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8016e24:	e6f5      	b.n	8016c12 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x136>
  for (int batch = 0; batch < batches; ++batch) {
 8016e26:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8016e2a:	3301      	adds	r3, #1
 8016e2c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8016e30:	e6e6      	b.n	8016c00 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x124>
              static_cast<int16_t>(scaled_acc);
        }
      }
    }
  }
}
 8016e32:	bf00      	nop
 8016e34:	379c      	adds	r7, #156	; 0x9c
 8016e36:	46bd      	mov	sp, r7
 8016e38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08016e3c <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:

  // Index to buffer for optimizations if applicable.
  int buffer_idx;
};

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 8016e3c:	b580      	push	{r7, lr}
 8016e3e:	b084      	sub	sp, #16
 8016e40:	af00      	add	r7, sp, #0
 8016e42:	60f8      	str	r0, [r7, #12]
 8016e44:	60b9      	str	r1, [r7, #8]
 8016e46:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 8016e48:	68fb      	ldr	r3, [r7, #12]
 8016e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016e4c:	2b00      	cmp	r3, #0
 8016e4e:	d101      	bne.n	8016e54 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0x18>
 8016e50:	f00f ff55 	bl	8026cfe <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 8016e54:	68fb      	ldr	r3, [r7, #12]
 8016e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016e58:	2138      	movs	r1, #56	; 0x38
 8016e5a:	68f8      	ldr	r0, [r7, #12]
 8016e5c:	4798      	blx	r3
 8016e5e:	4603      	mov	r3, r0
}
 8016e60:	4618      	mov	r0, r3
 8016e62:	3710      	adds	r7, #16
 8016e64:	46bd      	mov	sp, r7
 8016e66:	bd80      	pop	{r7, pc}

08016e68 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 8016e68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016e6a:	b0b7      	sub	sp, #220	; 0xdc
 8016e6c:	af08      	add	r7, sp, #32
 8016e6e:	60f8      	str	r0, [r7, #12]
 8016e70:	60b9      	str	r1, [r7, #8]
  TFLITE_DCHECK(node->user_data != nullptr);
 8016e72:	68bb      	ldr	r3, [r7, #8]
 8016e74:	691b      	ldr	r3, [r3, #16]
 8016e76:	2b00      	cmp	r3, #0
 8016e78:	d101      	bne.n	8016e7e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x16>
 8016e7a:	f00f ff40 	bl	8026cfe <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 8016e7e:	68bb      	ldr	r3, [r7, #8]
 8016e80:	695b      	ldr	r3, [r3, #20]
 8016e82:	2b00      	cmp	r3, #0
 8016e84:	d101      	bne.n	8016e8a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22>
 8016e86:	f00f ff3a 	bl	8026cfe <abort>

  int32_t buf_size = 0;
 8016e8a:	2300      	movs	r3, #0
 8016e8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  const auto& params =
 8016e90:	68bb      	ldr	r3, [r7, #8]
 8016e92:	695b      	ldr	r3, [r3, #20]
 8016e94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      *(static_cast<const TfLiteConvParams*>(node->builtin_data));
  OpData* data = static_cast<OpData*>(node->user_data);
 8016e98:	68bb      	ldr	r3, [r7, #8]
 8016e9a:	691b      	ldr	r3, [r3, #16]
 8016e9c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

  const TfLiteTensor* input = GetInput(context, node, kConvInputTensor);
 8016ea0:	4ba5      	ldr	r3, [pc, #660]	; (8017138 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2d0>)
 8016ea2:	681b      	ldr	r3, [r3, #0]
 8016ea4:	461a      	mov	r2, r3
 8016ea6:	68b9      	ldr	r1, [r7, #8]
 8016ea8:	68f8      	ldr	r0, [r7, #12]
 8016eaa:	f7f6 fe0f 	bl	800dacc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8016eae:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
  TF_LITE_ENSURE(context, input != nullptr);
 8016eb2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016eb6:	2b00      	cmp	r3, #0
 8016eb8:	d10a      	bne.n	8016ed0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x68>
 8016eba:	68fb      	ldr	r3, [r7, #12]
 8016ebc:	695c      	ldr	r4, [r3, #20]
 8016ebe:	4b9f      	ldr	r3, [pc, #636]	; (801713c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2d4>)
 8016ec0:	9300      	str	r3, [sp, #0]
 8016ec2:	2338      	movs	r3, #56	; 0x38
 8016ec4:	4a9e      	ldr	r2, [pc, #632]	; (8017140 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2d8>)
 8016ec6:	499f      	ldr	r1, [pc, #636]	; (8017144 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2dc>)
 8016ec8:	68f8      	ldr	r0, [r7, #12]
 8016eca:	47a0      	blx	r4
 8016ecc:	2401      	movs	r4, #1
 8016ece:	e12d      	b.n	801712c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2c4>
  const TfLiteTensor* filter = GetInput(context, node, kConvWeightsTensor);
 8016ed0:	4b9d      	ldr	r3, [pc, #628]	; (8017148 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e0>)
 8016ed2:	681b      	ldr	r3, [r3, #0]
 8016ed4:	461a      	mov	r2, r3
 8016ed6:	68b9      	ldr	r1, [r7, #8]
 8016ed8:	68f8      	ldr	r0, [r7, #12]
 8016eda:	f7f6 fdf7 	bl	800dacc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8016ede:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
  TF_LITE_ENSURE(context, filter != nullptr);
 8016ee2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8016ee6:	2b00      	cmp	r3, #0
 8016ee8:	d10a      	bne.n	8016f00 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x98>
 8016eea:	68fb      	ldr	r3, [r7, #12]
 8016eec:	695c      	ldr	r4, [r3, #20]
 8016eee:	4b97      	ldr	r3, [pc, #604]	; (801714c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e4>)
 8016ef0:	9300      	str	r3, [sp, #0]
 8016ef2:	233a      	movs	r3, #58	; 0x3a
 8016ef4:	4a92      	ldr	r2, [pc, #584]	; (8017140 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2d8>)
 8016ef6:	4993      	ldr	r1, [pc, #588]	; (8017144 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2dc>)
 8016ef8:	68f8      	ldr	r0, [r7, #12]
 8016efa:	47a0      	blx	r4
 8016efc:	2401      	movs	r4, #1
 8016efe:	e115      	b.n	801712c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2c4>
  const TfLiteTensor* output = GetOutput(context, node, kConvOutputTensor);
 8016f00:	4b93      	ldr	r3, [pc, #588]	; (8017150 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e8>)
 8016f02:	681b      	ldr	r3, [r3, #0]
 8016f04:	461a      	mov	r2, r3
 8016f06:	68b9      	ldr	r1, [r7, #8]
 8016f08:	68f8      	ldr	r0, [r7, #12]
 8016f0a:	f7f6 fdef 	bl	800daec <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 8016f0e:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
  TF_LITE_ENSURE(context, output != nullptr);
 8016f12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8016f16:	2b00      	cmp	r3, #0
 8016f18:	d10a      	bne.n	8016f30 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xc8>
 8016f1a:	68fb      	ldr	r3, [r7, #12]
 8016f1c:	695c      	ldr	r4, [r3, #20]
 8016f1e:	4b8d      	ldr	r3, [pc, #564]	; (8017154 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2ec>)
 8016f20:	9300      	str	r3, [sp, #0]
 8016f22:	233c      	movs	r3, #60	; 0x3c
 8016f24:	4a86      	ldr	r2, [pc, #536]	; (8017140 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2d8>)
 8016f26:	4987      	ldr	r1, [pc, #540]	; (8017144 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2dc>)
 8016f28:	68f8      	ldr	r0, [r7, #12]
 8016f2a:	47a0      	blx	r4
 8016f2c:	2401      	movs	r4, #1
 8016f2e:	e0fd      	b.n	801712c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2c4>

  RuntimeShape input_shape = GetTensorShape(input);
 8016f30:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8016f34:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8016f38:	4618      	mov	r0, r3
 8016f3a:	f7f7 fd05 	bl	800e948 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  RuntimeShape output_shape = GetTensorShape(output);
 8016f3e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8016f42:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8016f46:	4618      	mov	r0, r3
 8016f48:	f7f7 fcfe 	bl	800e948 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>

  // Initialize cmsis_nn input dimensions
  cmsis_nn_dims input_dims;
  input_dims.n = MatchingDim(input_shape, 0, output_shape, 0);
 8016f4c:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8016f50:	f107 0080 	add.w	r0, r7, #128	; 0x80
 8016f54:	2300      	movs	r3, #0
 8016f56:	2100      	movs	r1, #0
 8016f58:	f7fc fb73 	bl	8013642 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8016f5c:	4603      	mov	r3, r0
 8016f5e:	65bb      	str	r3, [r7, #88]	; 0x58
  input_dims.h = input->dims->data[1];
 8016f60:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016f64:	689b      	ldr	r3, [r3, #8]
 8016f66:	689b      	ldr	r3, [r3, #8]
 8016f68:	65fb      	str	r3, [r7, #92]	; 0x5c
  input_dims.w = input->dims->data[2];
 8016f6a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016f6e:	689b      	ldr	r3, [r3, #8]
 8016f70:	68db      	ldr	r3, [r3, #12]
 8016f72:	663b      	str	r3, [r7, #96]	; 0x60
  input_dims.c = input_shape.Dims(3);
 8016f74:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8016f78:	2103      	movs	r1, #3
 8016f7a:	4618      	mov	r0, r3
 8016f7c:	f7fc fa69 	bl	8013452 <_ZNK6tflite12RuntimeShape4DimsEi>
 8016f80:	4603      	mov	r3, r0
 8016f82:	667b      	str	r3, [r7, #100]	; 0x64

  // Initialize cmsis_nn filter dimensions
  cmsis_nn_dims filter_dims;
  filter_dims.n = output_shape.Dims(3);
 8016f84:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8016f88:	2103      	movs	r1, #3
 8016f8a:	4618      	mov	r0, r3
 8016f8c:	f7fc fa61 	bl	8013452 <_ZNK6tflite12RuntimeShape4DimsEi>
 8016f90:	4603      	mov	r3, r0
 8016f92:	64bb      	str	r3, [r7, #72]	; 0x48
  filter_dims.h = filter->dims->data[1];
 8016f94:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8016f98:	689b      	ldr	r3, [r3, #8]
 8016f9a:	689b      	ldr	r3, [r3, #8]
 8016f9c:	64fb      	str	r3, [r7, #76]	; 0x4c
  filter_dims.w = filter->dims->data[2];
 8016f9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8016fa2:	689b      	ldr	r3, [r3, #8]
 8016fa4:	68db      	ldr	r3, [r3, #12]
 8016fa6:	653b      	str	r3, [r7, #80]	; 0x50
  filter_dims.c = input_dims.c;
 8016fa8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016faa:	657b      	str	r3, [r7, #84]	; 0x54

  // Initialize cmsis_nn output dimensions
  cmsis_nn_dims output_dims;
  output_dims.n = input_dims.n;
 8016fac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016fae:	63bb      	str	r3, [r7, #56]	; 0x38
  output_dims.h = output->dims->data[1];
 8016fb0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8016fb4:	689b      	ldr	r3, [r3, #8]
 8016fb6:	689b      	ldr	r3, [r3, #8]
 8016fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
  output_dims.w = output->dims->data[2];
 8016fba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8016fbe:	689b      	ldr	r3, [r3, #8]
 8016fc0:	68db      	ldr	r3, [r3, #12]
 8016fc2:	643b      	str	r3, [r7, #64]	; 0x40
  output_dims.c = output_shape.Dims(3);
 8016fc4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8016fc8:	2103      	movs	r1, #3
 8016fca:	4618      	mov	r0, r3
 8016fcc:	f7fc fa41 	bl	8013452 <_ZNK6tflite12RuntimeShape4DimsEi>
 8016fd0:	4603      	mov	r3, r0
 8016fd2:	647b      	str	r3, [r7, #68]	; 0x44

  if (input->type == kTfLiteInt8) {
 8016fd4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016fd8:	781b      	ldrb	r3, [r3, #0]
 8016fda:	2b09      	cmp	r3, #9
 8016fdc:	d121      	bne.n	8017022 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1ba>
    const int num_channels = filter->dims->data[kConvQuantizedDimension];
 8016fde:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8016fe2:	689a      	ldr	r2, [r3, #8]
 8016fe4:	4b5c      	ldr	r3, [pc, #368]	; (8017158 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2f0>)
 8016fe6:	681b      	ldr	r3, [r3, #0]
 8016fe8:	009b      	lsls	r3, r3, #2
 8016fea:	4413      	add	r3, r2
 8016fec:	685b      	ldr	r3, [r3, #4]
 8016fee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    data->reference_op_data.per_channel_output_multiplier =
        static_cast<int32_t*>(context->AllocatePersistentBuffer(
 8016ff2:	68fb      	ldr	r3, [r7, #12]
 8016ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            context, num_channels * sizeof(int32_t)));
 8016ff6:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
        static_cast<int32_t*>(context->AllocatePersistentBuffer(
 8016ffa:	0092      	lsls	r2, r2, #2
 8016ffc:	4611      	mov	r1, r2
 8016ffe:	68f8      	ldr	r0, [r7, #12]
 8017000:	4798      	blx	r3
 8017002:	4602      	mov	r2, r0
    data->reference_op_data.per_channel_output_multiplier =
 8017004:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8017008:	625a      	str	r2, [r3, #36]	; 0x24
    data->reference_op_data.per_channel_output_shift =
        static_cast<int32_t*>(context->AllocatePersistentBuffer(
 801700a:	68fb      	ldr	r3, [r7, #12]
 801700c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            context, num_channels * sizeof(int32_t)));
 801700e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
        static_cast<int32_t*>(context->AllocatePersistentBuffer(
 8017012:	0092      	lsls	r2, r2, #2
 8017014:	4611      	mov	r1, r2
 8017016:	68f8      	ldr	r0, [r7, #12]
 8017018:	4798      	blx	r3
 801701a:	4602      	mov	r2, r0
    data->reference_op_data.per_channel_output_shift =
 801701c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8017020:	629a      	str	r2, [r3, #40]	; 0x28
  }

  TF_LITE_ENSURE_STATUS(CalculateOpDataConv(
 8017022:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8017024:	607b      	str	r3, [r7, #4]
 8017026:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017028:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801702a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801702c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801702e:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 8017030:	f8d7 50a8 	ldr.w	r5, [r7, #168]	; 0xa8
 8017034:	782d      	ldrb	r5, [r5, #0]
 8017036:	f8d7 60ac 	ldr.w	r6, [r7, #172]	; 0xac
 801703a:	9606      	str	r6, [sp, #24]
 801703c:	9505      	str	r5, [sp, #20]
 801703e:	9404      	str	r4, [sp, #16]
 8017040:	9003      	str	r0, [sp, #12]
 8017042:	9102      	str	r1, [sp, #8]
 8017044:	9201      	str	r2, [sp, #4]
 8017046:	9300      	str	r3, [sp, #0]
 8017048:	687b      	ldr	r3, [r7, #4]
 801704a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801704e:	68b9      	ldr	r1, [r7, #8]
 8017050:	68f8      	ldr	r0, [r7, #12]
 8017052:	f7fc fc89 	bl	8013968 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>
 8017056:	4603      	mov	r3, r0
 8017058:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
 801705c:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8017060:	2b00      	cmp	r3, #0
 8017062:	d002      	beq.n	801706a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x202>
 8017064:	f897 409b 	ldrb.w	r4, [r7, #155]	; 0x9b
 8017068:	e056      	b.n	8017118 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2b0>
      context, node, params, input_dims.w, input_dims.h, filter_dims.w,
      filter_dims.h, output_dims.w, output_dims.h, input->type,
      &data->reference_op_data));

  if (input->type == kTfLiteInt8) {
 801706a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801706e:	781b      	ldrb	r3, [r3, #0]
 8017070:	2b09      	cmp	r3, #9
 8017072:	d150      	bne.n	8017116 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2ae>
    // Initialize cmsis_nn convolution parameters
    cmsis_nn_conv_params conv_params;
    conv_params.input_offset = -input->params.zero_point;
 8017074:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8017078:	691b      	ldr	r3, [r3, #16]
 801707a:	425b      	negs	r3, r3
 801707c:	613b      	str	r3, [r7, #16]
    conv_params.output_offset = output->params.zero_point;
 801707e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8017082:	691b      	ldr	r3, [r3, #16]
 8017084:	617b      	str	r3, [r7, #20]
    conv_params.stride.h = params.stride_height;
 8017086:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801708a:	689b      	ldr	r3, [r3, #8]
 801708c:	61fb      	str	r3, [r7, #28]
    conv_params.stride.w = params.stride_width;
 801708e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8017092:	685b      	ldr	r3, [r3, #4]
 8017094:	61bb      	str	r3, [r7, #24]
    conv_params.dilation.h = params.dilation_height_factor;
 8017096:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801709a:	695b      	ldr	r3, [r3, #20]
 801709c:	62fb      	str	r3, [r7, #44]	; 0x2c
    conv_params.dilation.w = params.dilation_width_factor;
 801709e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80170a2:	691b      	ldr	r3, [r3, #16]
 80170a4:	62bb      	str	r3, [r7, #40]	; 0x28
    conv_params.padding.h = data->reference_op_data.padding.height;
 80170a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80170aa:	685b      	ldr	r3, [r3, #4]
 80170ac:	627b      	str	r3, [r7, #36]	; 0x24
    conv_params.padding.w = data->reference_op_data.padding.width;
 80170ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80170b2:	681b      	ldr	r3, [r3, #0]
 80170b4:	623b      	str	r3, [r7, #32]
    conv_params.activation.min = data->reference_op_data.output_activation_min;
 80170b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80170ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80170bc:	633b      	str	r3, [r7, #48]	; 0x30
    conv_params.activation.max = data->reference_op_data.output_activation_max;
 80170be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80170c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80170c4:	637b      	str	r3, [r7, #52]	; 0x34

    buf_size = arm_convolve_wrapper_s8_get_buffer_size(
 80170c6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80170ca:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80170ce:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80170d2:	f107 0010 	add.w	r0, r7, #16
 80170d6:	f003 fe72 	bl	801adbe <arm_convolve_wrapper_s8_get_buffer_size>
 80170da:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
        &conv_params, &input_dims, &filter_dims, &output_dims);
    if (buf_size > 0) {
 80170de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80170e2:	2b00      	cmp	r3, #0
 80170e4:	dd12      	ble.n	801710c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2a4>
      TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
 80170e6:	68fb      	ldr	r3, [r7, #12]
 80170e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80170ea:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 80170ee:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80170f2:	3234      	adds	r2, #52	; 0x34
 80170f4:	68f8      	ldr	r0, [r7, #12]
 80170f6:	4798      	blx	r3
 80170f8:	4603      	mov	r3, r0
 80170fa:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
 80170fe:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 8017102:	2b00      	cmp	r3, #0
 8017104:	d007      	beq.n	8017116 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2ae>
 8017106:	f897 409a 	ldrb.w	r4, [r7, #154]	; 0x9a
 801710a:	e005      	b.n	8017118 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2b0>
          context, buf_size, &data->buffer_idx));
    } else {
      data->buffer_idx = -1;
 801710c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8017110:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017114:	635a      	str	r2, [r3, #52]	; 0x34
    }
  }

  return kTfLiteOk;
 8017116:	2400      	movs	r4, #0
  RuntimeShape output_shape = GetTensorShape(output);
 8017118:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801711c:	4618      	mov	r0, r3
 801711e:	f7f7 fbd8 	bl	800e8d2 <_ZN6tflite12RuntimeShapeD1Ev>
  RuntimeShape input_shape = GetTensorShape(input);
 8017122:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8017126:	4618      	mov	r0, r3
 8017128:	f7f7 fbd3 	bl	800e8d2 <_ZN6tflite12RuntimeShapeD1Ev>
 801712c:	4623      	mov	r3, r4
}
 801712e:	4618      	mov	r0, r3
 8017130:	37bc      	adds	r7, #188	; 0xbc
 8017132:	46bd      	mov	sp, r7
 8017134:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017136:	bf00      	nop
 8017138:	0803ff54 	.word	0x0803ff54
 801713c:	0802d7a4 	.word	0x0802d7a4
 8017140:	0802d748 	.word	0x0802d748
 8017144:	0802d78c 	.word	0x0802d78c
 8017148:	0803ff58 	.word	0x0803ff58
 801714c:	0802d7b8 	.word	0x0802d7b8
 8017150:	0803ff60 	.word	0x0803ff60
 8017154:	0802d7cc 	.word	0x0802d7cc
 8017158:	0803ff64 	.word	0x0803ff64

0801715c <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_>:

TfLiteStatus EvalQuantizedPerChannel(
    TfLiteContext* context, TfLiteNode* node, const TfLiteConvParams& params,
    const OpData& data, const TfLiteEvalTensor* input,
    const TfLiteEvalTensor* filter, const TfLiteEvalTensor* bias,
    TfLiteEvalTensor* output, TfLiteEvalTensor* im2col) {
 801715c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801715e:	b0ef      	sub	sp, #444	; 0x1bc
 8017160:	af08      	add	r7, sp, #32
 8017162:	f107 0414 	add.w	r4, r7, #20
 8017166:	6020      	str	r0, [r4, #0]
 8017168:	f107 0010 	add.w	r0, r7, #16
 801716c:	6001      	str	r1, [r0, #0]
 801716e:	f107 010c 	add.w	r1, r7, #12
 8017172:	600a      	str	r2, [r1, #0]
 8017174:	f107 0208 	add.w	r2, r7, #8
 8017178:	6013      	str	r3, [r2, #0]
  cmsis_nn_conv_params conv_params;
  conv_params.dilation.h = params.dilation_height_factor;
 801717a:	f107 030c 	add.w	r3, r7, #12
 801717e:	681b      	ldr	r3, [r3, #0]
 8017180:	695b      	ldr	r3, [r3, #20]
 8017182:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  conv_params.dilation.w = params.dilation_width_factor;
 8017186:	f107 030c 	add.w	r3, r7, #12
 801718a:	681b      	ldr	r3, [r3, #0]
 801718c:	691b      	ldr	r3, [r3, #16]
 801718e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  // TODO(#43557) Remove checks for dilation and call to reference
  // implementation when dilation is supported in the optimized implementation
  // by CMSIS-NN.
  if (conv_params.dilation.h == 1 && conv_params.dilation.w == 1) {
 8017192:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8017196:	2b01      	cmp	r3, #1
 8017198:	f040 818a 	bne.w	80174b0 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x354>
 801719c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80171a0:	2b01      	cmp	r3, #1
 80171a2:	f040 8185 	bne.w	80174b0 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x354>
    // Initialize cmsis_nn convolution parameters
    conv_params.input_offset = -data.reference_op_data.input_zero_point;
 80171a6:	f107 0308 	add.w	r3, r7, #8
 80171aa:	681b      	ldr	r3, [r3, #0]
 80171ac:	691b      	ldr	r3, [r3, #16]
 80171ae:	425b      	negs	r3, r3
 80171b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    conv_params.output_offset = data.reference_op_data.output_zero_point;
 80171b4:	f107 0308 	add.w	r3, r7, #8
 80171b8:	681b      	ldr	r3, [r3, #0]
 80171ba:	699b      	ldr	r3, [r3, #24]
 80171bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    conv_params.stride.h = params.stride_height;
 80171c0:	f107 030c 	add.w	r3, r7, #12
 80171c4:	681b      	ldr	r3, [r3, #0]
 80171c6:	689b      	ldr	r3, [r3, #8]
 80171c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    conv_params.stride.w = params.stride_width;
 80171cc:	f107 030c 	add.w	r3, r7, #12
 80171d0:	681b      	ldr	r3, [r3, #0]
 80171d2:	685b      	ldr	r3, [r3, #4]
 80171d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    conv_params.padding.h = data.reference_op_data.padding.height;
 80171d8:	f107 0308 	add.w	r3, r7, #8
 80171dc:	681b      	ldr	r3, [r3, #0]
 80171de:	685b      	ldr	r3, [r3, #4]
 80171e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    conv_params.padding.w = data.reference_op_data.padding.width;
 80171e4:	f107 0308 	add.w	r3, r7, #8
 80171e8:	681b      	ldr	r3, [r3, #0]
 80171ea:	681b      	ldr	r3, [r3, #0]
 80171ec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    conv_params.activation.min = data.reference_op_data.output_activation_min;
 80171f0:	f107 0308 	add.w	r3, r7, #8
 80171f4:	681b      	ldr	r3, [r3, #0]
 80171f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80171f8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    conv_params.activation.max = data.reference_op_data.output_activation_max;
 80171fc:	f107 0308 	add.w	r3, r7, #8
 8017200:	681b      	ldr	r3, [r3, #0]
 8017202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017204:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

    // Initialize cmsis_nn per channel quantization parameters
    cmsis_nn_per_channel_quant_params quant_params;
    quant_params.multiplier = const_cast<int32_t*>(
        data.reference_op_data.per_channel_output_multiplier);
 8017208:	f107 0308 	add.w	r3, r7, #8
 801720c:	681b      	ldr	r3, [r3, #0]
 801720e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    quant_params.multiplier = const_cast<int32_t*>(
 8017210:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    quant_params.shift =
        const_cast<int32_t*>(data.reference_op_data.per_channel_output_shift);
 8017214:	f107 0308 	add.w	r3, r7, #8
 8017218:	681b      	ldr	r3, [r3, #0]
 801721a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    quant_params.shift =
 801721c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

    RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 8017220:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8017224:	f8d7 11b4 	ldr.w	r1, [r7, #436]	; 0x1b4
 8017228:	4618      	mov	r0, r3
 801722a:	f7fc fec0 	bl	8013fae <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 801722e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8017232:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 8017236:	4618      	mov	r0, r3
 8017238:	f7fc feb9 	bl	8013fae <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 801723c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8017240:	f8d7 11bc 	ldr.w	r1, [r7, #444]	; 0x1bc
 8017244:	4618      	mov	r0, r3
 8017246:	f7fc feb2 	bl	8013fae <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    RuntimeShape bias_shape = tflite::micro::GetTensorShape(bias);
 801724a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801724e:	f8d7 11b8 	ldr.w	r1, [r7, #440]	; 0x1b8
 8017252:	4618      	mov	r0, r3
 8017254:	f7fc feab 	bl	8013fae <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>

    // Consistency check.
    TFLITE_DCHECK_LE(conv_params.activation.min, conv_params.activation.max);
 8017258:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 801725c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8017260:	429a      	cmp	r2, r3
 8017262:	dd01      	ble.n	8017268 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x10c>
 8017264:	f00f fd4b 	bl	8026cfe <abort>
    TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 8017268:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801726c:	4618      	mov	r0, r3
 801726e:	f7f7 fb3b 	bl	800e8e8 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8017272:	4603      	mov	r3, r0
 8017274:	2b04      	cmp	r3, #4
 8017276:	d001      	beq.n	801727c <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x120>
 8017278:	f00f fd41 	bl	8026cfe <abort>
    TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 801727c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8017280:	4618      	mov	r0, r3
 8017282:	f7f7 fb31 	bl	800e8e8 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8017286:	4603      	mov	r3, r0
 8017288:	2b04      	cmp	r3, #4
 801728a:	d001      	beq.n	8017290 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x134>
 801728c:	f00f fd37 	bl	8026cfe <abort>
    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 8017290:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8017294:	4618      	mov	r0, r3
 8017296:	f7f7 fb27 	bl	800e8e8 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801729a:	4603      	mov	r3, r0
 801729c:	2b04      	cmp	r3, #4
 801729e:	d001      	beq.n	80172a4 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x148>
 80172a0:	f00f fd2d 	bl	8026cfe <abort>
    const int batch_size = MatchingDim(input_shape, 0, output_shape, 0);
 80172a4:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 80172a8:	f107 0094 	add.w	r0, r7, #148	; 0x94
 80172ac:	2300      	movs	r3, #0
 80172ae:	2100      	movs	r1, #0
 80172b0:	f7fc f9c7 	bl	8013642 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80172b4:	f8c7 0194 	str.w	r0, [r7, #404]	; 0x194
    const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
 80172b8:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80172bc:	f107 0094 	add.w	r0, r7, #148	; 0x94
 80172c0:	2303      	movs	r3, #3
 80172c2:	2103      	movs	r1, #3
 80172c4:	f7fc f9bd 	bl	8013642 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80172c8:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
    const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
 80172cc:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 80172d0:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 80172d4:	2303      	movs	r3, #3
 80172d6:	2100      	movs	r1, #0
 80172d8:	f7fc f9b3 	bl	8013642 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80172dc:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
    if (tflite::micro::GetTensorData<int8_t>(bias)) {
 80172e0:	f8d7 01b8 	ldr.w	r0, [r7, #440]	; 0x1b8
 80172e4:	f7fc f895 	bl	8013412 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 80172e8:	4603      	mov	r3, r0
 80172ea:	2b00      	cmp	r3, #0
 80172ec:	bf14      	ite	ne
 80172ee:	2301      	movne	r3, #1
 80172f0:	2300      	moveq	r3, #0
 80172f2:	b2db      	uxtb	r3, r3
 80172f4:	2b00      	cmp	r3, #0
 80172f6:	d00b      	beq.n	8017310 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x1b4>
      TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 80172f8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80172fc:	4618      	mov	r0, r3
 80172fe:	f7fc f8ce 	bl	801349e <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 8017302:	4602      	mov	r2, r0
 8017304:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8017308:	4293      	cmp	r3, r2
 801730a:	d001      	beq.n	8017310 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x1b4>
 801730c:	f00f fcf7 	bl	8026cfe <abort>
    }

    // Initialize cmsis_nn dimensions
    // Input
    cmsis_nn_dims input_dims;
    input_dims.n = batch_size;
 8017310:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8017314:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8017318:	601a      	str	r2, [r3, #0]
    input_dims.h = input_shape.Dims(1);
 801731a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801731e:	2101      	movs	r1, #1
 8017320:	4618      	mov	r0, r3
 8017322:	f7fc f896 	bl	8013452 <_ZNK6tflite12RuntimeShape4DimsEi>
 8017326:	4602      	mov	r2, r0
 8017328:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801732c:	605a      	str	r2, [r3, #4]
    input_dims.w = input_shape.Dims(2);
 801732e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8017332:	2102      	movs	r1, #2
 8017334:	4618      	mov	r0, r3
 8017336:	f7fc f88c 	bl	8013452 <_ZNK6tflite12RuntimeShape4DimsEi>
 801733a:	4602      	mov	r2, r0
 801733c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8017340:	609a      	str	r2, [r3, #8]
    input_dims.c = input_depth;
 8017342:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8017346:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 801734a:	60da      	str	r2, [r3, #12]

    // Filter
    cmsis_nn_dims filter_dims;
    filter_dims.n = output_depth;
 801734c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8017350:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8017354:	601a      	str	r2, [r3, #0]
    filter_dims.h = filter_shape.Dims(1);
 8017356:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 801735a:	2101      	movs	r1, #1
 801735c:	4618      	mov	r0, r3
 801735e:	f7fc f878 	bl	8013452 <_ZNK6tflite12RuntimeShape4DimsEi>
 8017362:	4602      	mov	r2, r0
 8017364:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8017368:	605a      	str	r2, [r3, #4]
    filter_dims.w = filter_shape.Dims(2);
 801736a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 801736e:	2102      	movs	r1, #2
 8017370:	4618      	mov	r0, r3
 8017372:	f7fc f86e 	bl	8013452 <_ZNK6tflite12RuntimeShape4DimsEi>
 8017376:	4602      	mov	r2, r0
 8017378:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801737c:	609a      	str	r2, [r3, #8]
    filter_dims.c = input_depth;
 801737e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8017382:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8017386:	60da      	str	r2, [r3, #12]

    // Bias
    cmsis_nn_dims bias_dims;
    bias_dims.n = 1;
 8017388:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801738c:	2201      	movs	r2, #1
 801738e:	601a      	str	r2, [r3, #0]
    bias_dims.h = 1;
 8017390:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8017394:	2201      	movs	r2, #1
 8017396:	605a      	str	r2, [r3, #4]
    bias_dims.w = 1;
 8017398:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801739c:	2201      	movs	r2, #1
 801739e:	609a      	str	r2, [r3, #8]
    bias_dims.c = output_depth;
 80173a0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80173a4:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 80173a8:	60da      	str	r2, [r3, #12]

    // Output
    cmsis_nn_dims output_dims;
    output_dims.n = batch_size;
 80173aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80173ae:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80173b2:	601a      	str	r2, [r3, #0]
    output_dims.h = output_shape.Dims(1);
 80173b4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80173b8:	2101      	movs	r1, #1
 80173ba:	4618      	mov	r0, r3
 80173bc:	f7fc f849 	bl	8013452 <_ZNK6tflite12RuntimeShape4DimsEi>
 80173c0:	4602      	mov	r2, r0
 80173c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80173c6:	605a      	str	r2, [r3, #4]
    output_dims.w = output_shape.Dims(2);
 80173c8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80173cc:	2102      	movs	r1, #2
 80173ce:	4618      	mov	r0, r3
 80173d0:	f7fc f83f 	bl	8013452 <_ZNK6tflite12RuntimeShape4DimsEi>
 80173d4:	4602      	mov	r2, r0
 80173d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80173da:	609a      	str	r2, [r3, #8]
    output_dims.c = output_depth;
 80173dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80173e0:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 80173e4:	60da      	str	r2, [r3, #12]

    // Initialize cmsis_nn context
    cmsis_nn_context ctx;
    ctx.buf = nullptr;
 80173e6:	f107 031c 	add.w	r3, r7, #28
 80173ea:	2200      	movs	r2, #0
 80173ec:	601a      	str	r2, [r3, #0]
    ctx.size = 0;
 80173ee:	f107 031c 	add.w	r3, r7, #28
 80173f2:	2200      	movs	r2, #0
 80173f4:	605a      	str	r2, [r3, #4]

    if (data.buffer_idx > -1) {
 80173f6:	f107 0308 	add.w	r3, r7, #8
 80173fa:	681b      	ldr	r3, [r3, #0]
 80173fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80173fe:	2b00      	cmp	r3, #0
 8017400:	db0f      	blt.n	8017422 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x2c6>
      ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
 8017402:	f107 0314 	add.w	r3, r7, #20
 8017406:	681b      	ldr	r3, [r3, #0]
 8017408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801740a:	f107 0208 	add.w	r2, r7, #8
 801740e:	6812      	ldr	r2, [r2, #0]
 8017410:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8017412:	f107 0214 	add.w	r2, r7, #20
 8017416:	6810      	ldr	r0, [r2, #0]
 8017418:	4798      	blx	r3
 801741a:	4602      	mov	r2, r0
 801741c:	f107 031c 	add.w	r3, r7, #28
 8017420:	601a      	str	r2, [r3, #0]
      // arm_convolve_wrapper_s8_get_buffer_size
    }

    // arm_convolve_wrapper_s8 dispatches the optimized kernel accordingly with
    // the parameters passed
    TFLITE_DCHECK_EQ(
 8017422:	f8d7 01b0 	ldr.w	r0, [r7, #432]	; 0x1b0
 8017426:	f7fb fff4 	bl	8013412 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 801742a:	4605      	mov	r5, r0
 801742c:	f8d7 01b4 	ldr.w	r0, [r7, #436]	; 0x1b4
 8017430:	f7fb ffef 	bl	8013412 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8017434:	4606      	mov	r6, r0
 8017436:	f8d7 01b8 	ldr.w	r0, [r7, #440]	; 0x1b8
 801743a:	f7fc f86d 	bl	8013518 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 801743e:	6078      	str	r0, [r7, #4]
 8017440:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 8017444:	f7fb fff4 	bl	8013430 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 8017448:	4603      	mov	r3, r0
 801744a:	f107 0454 	add.w	r4, r7, #84	; 0x54
 801744e:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8017452:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 8017456:	f107 001c 	add.w	r0, r7, #28
 801745a:	9306      	str	r3, [sp, #24]
 801745c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8017460:	9305      	str	r3, [sp, #20]
 8017462:	687b      	ldr	r3, [r7, #4]
 8017464:	9304      	str	r3, [sp, #16]
 8017466:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801746a:	9303      	str	r3, [sp, #12]
 801746c:	9602      	str	r6, [sp, #8]
 801746e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8017472:	9301      	str	r3, [sp, #4]
 8017474:	9500      	str	r5, [sp, #0]
 8017476:	4623      	mov	r3, r4
 8017478:	f003 fc21 	bl	801acbe <arm_convolve_wrapper_s8>
 801747c:	4603      	mov	r3, r0
 801747e:	2b00      	cmp	r3, #0
 8017480:	d001      	beq.n	8017486 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x32a>
 8017482:	f00f fc3c 	bl	8026cfe <abort>
    RuntimeShape bias_shape = tflite::micro::GetTensorShape(bias);
 8017486:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801748a:	4618      	mov	r0, r3
 801748c:	f7f7 fa21 	bl	800e8d2 <_ZN6tflite12RuntimeShapeD1Ev>
    RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 8017490:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8017494:	4618      	mov	r0, r3
 8017496:	f7f7 fa1c 	bl	800e8d2 <_ZN6tflite12RuntimeShapeD1Ev>
    RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 801749a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801749e:	4618      	mov	r0, r3
 80174a0:	f7f7 fa17 	bl	800e8d2 <_ZN6tflite12RuntimeShapeD1Ev>
    RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 80174a4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80174a8:	4618      	mov	r0, r3
 80174aa:	f7f7 fa12 	bl	800e8d2 <_ZN6tflite12RuntimeShapeD1Ev>
            &ctx, &conv_params, &quant_params, &input_dims,
            tflite::micro::GetTensorData<int8_t>(input), &filter_dims,
            tflite::micro::GetTensorData<int8_t>(filter), &bias_dims,
            tflite::micro::GetTensorData<int32_t>(bias), &output_dims,
            tflite::micro::GetTensorData<int8_t>(output)),
        ARM_MATH_SUCCESS);
 80174ae:	e06d      	b.n	801758c <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x430>
  } else {
    reference_integer_ops::ConvPerChannel(
        ConvParamsQuantized(params, data.reference_op_data),
 80174b0:	f107 0308 	add.w	r3, r7, #8
 80174b4:	681a      	ldr	r2, [r3, #0]
 80174b6:	f107 00f4 	add.w	r0, r7, #244	; 0xf4
 80174ba:	f107 030c 	add.w	r3, r7, #12
 80174be:	6819      	ldr	r1, [r3, #0]
 80174c0:	f7fc fa01 	bl	80138c6 <_ZN6tflite19ConvParamsQuantizedERK16TfLiteConvParamsRKNS_10OpDataConvE>
        data.reference_op_data.per_channel_output_multiplier,
 80174c4:	f107 0308 	add.w	r3, r7, #8
 80174c8:	681b      	ldr	r3, [r3, #0]
 80174ca:	6a5c      	ldr	r4, [r3, #36]	; 0x24
        data.reference_op_data.per_channel_output_shift,
 80174cc:	f107 0308 	add.w	r3, r7, #8
 80174d0:	681b      	ldr	r3, [r3, #0]
 80174d2:	6a9d      	ldr	r5, [r3, #40]	; 0x28
        tflite::micro::GetTensorShape(input),
 80174d4:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 80174d8:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 80174dc:	4618      	mov	r0, r3
 80174de:	f7fc fd66 	bl	8013fae <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    reference_integer_ops::ConvPerChannel(
 80174e2:	f8d7 01b0 	ldr.w	r0, [r7, #432]	; 0x1b0
 80174e6:	f7fb ff94 	bl	8013412 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 80174ea:	4606      	mov	r6, r0
        tflite::micro::GetTensorData<int8_t>(input),
        tflite::micro::GetTensorShape(filter),
 80174ec:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 80174f0:	f8d7 11b4 	ldr.w	r1, [r7, #436]	; 0x1b4
 80174f4:	4618      	mov	r0, r3
 80174f6:	f7fc fd5a 	bl	8013fae <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    reference_integer_ops::ConvPerChannel(
 80174fa:	f8d7 01b4 	ldr.w	r0, [r7, #436]	; 0x1b4
 80174fe:	f7fb ff88 	bl	8013412 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8017502:	6078      	str	r0, [r7, #4]
        tflite::micro::GetTensorData<int8_t>(filter),
        tflite::micro::GetTensorShape(bias),
 8017504:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8017508:	f8d7 11b8 	ldr.w	r1, [r7, #440]	; 0x1b8
 801750c:	4618      	mov	r0, r3
 801750e:	f7fc fd4e 	bl	8013fae <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    reference_integer_ops::ConvPerChannel(
 8017512:	f8d7 01b8 	ldr.w	r0, [r7, #440]	; 0x1b8
 8017516:	f7fb ffff 	bl	8013518 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 801751a:	6038      	str	r0, [r7, #0]
        tflite::micro::GetTensorData<int32_t>(bias),
        tflite::micro::GetTensorShape(output),
 801751c:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8017520:	f8d7 11bc 	ldr.w	r1, [r7, #444]	; 0x1bc
 8017524:	4618      	mov	r0, r3
 8017526:	f7fc fd42 	bl	8013fae <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    reference_integer_ops::ConvPerChannel(
 801752a:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 801752e:	f7fb ff7f 	bl	8013430 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 8017532:	4603      	mov	r3, r0
 8017534:	f507 7296 	add.w	r2, r7, #300	; 0x12c
 8017538:	f107 00f4 	add.w	r0, r7, #244	; 0xf4
 801753c:	9306      	str	r3, [sp, #24]
 801753e:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8017542:	9305      	str	r3, [sp, #20]
 8017544:	683b      	ldr	r3, [r7, #0]
 8017546:	9304      	str	r3, [sp, #16]
 8017548:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 801754c:	9303      	str	r3, [sp, #12]
 801754e:	687b      	ldr	r3, [r7, #4]
 8017550:	9302      	str	r3, [sp, #8]
 8017552:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8017556:	9301      	str	r3, [sp, #4]
 8017558:	9600      	str	r6, [sp, #0]
 801755a:	4613      	mov	r3, r2
 801755c:	462a      	mov	r2, r5
 801755e:	4621      	mov	r1, r4
 8017560:	f7ff f908 	bl	8016774 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>
        tflite::micro::GetTensorShape(output),
 8017564:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8017568:	4618      	mov	r0, r3
 801756a:	f7f7 f9b2 	bl	800e8d2 <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorShape(bias),
 801756e:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8017572:	4618      	mov	r0, r3
 8017574:	f7f7 f9ad 	bl	800e8d2 <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorShape(filter),
 8017578:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 801757c:	4618      	mov	r0, r3
 801757e:	f7f7 f9a8 	bl	800e8d2 <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorShape(input),
 8017582:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8017586:	4618      	mov	r0, r3
 8017588:	f7f7 f9a3 	bl	800e8d2 <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorData<int8_t>(output));
  }
  return kTfLiteOk;
 801758c:	2300      	movs	r3, #0
}
 801758e:	4618      	mov	r0, r3
 8017590:	f507 77ce 	add.w	r7, r7, #412	; 0x19c
 8017594:	46bd      	mov	sp, r7
 8017596:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017598 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 8017598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801759c:	b0e4      	sub	sp, #400	; 0x190
 801759e:	af08      	add	r7, sp, #32
 80175a0:	f107 030c 	add.w	r3, r7, #12
 80175a4:	6018      	str	r0, [r3, #0]
 80175a6:	f107 0308 	add.w	r3, r7, #8
 80175aa:	6019      	str	r1, [r3, #0]
  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kConvInputTensor);
 80175ac:	4bce      	ldr	r3, [pc, #824]	; (80178e8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x350>)
 80175ae:	681a      	ldr	r2, [r3, #0]
 80175b0:	f107 0108 	add.w	r1, r7, #8
 80175b4:	f107 030c 	add.w	r3, r7, #12
 80175b8:	6809      	ldr	r1, [r1, #0]
 80175ba:	6818      	ldr	r0, [r3, #0]
 80175bc:	f7fb fed9 	bl	8013372 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 80175c0:	f8c7 016c 	str.w	r0, [r7, #364]	; 0x16c
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kConvWeightsTensor);
 80175c4:	4bc9      	ldr	r3, [pc, #804]	; (80178ec <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x354>)
 80175c6:	681a      	ldr	r2, [r3, #0]
 80175c8:	f107 0108 	add.w	r1, r7, #8
 80175cc:	f107 030c 	add.w	r3, r7, #12
 80175d0:	6809      	ldr	r1, [r1, #0]
 80175d2:	6818      	ldr	r0, [r3, #0]
 80175d4:	f7fb fecd 	bl	8013372 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 80175d8:	f8c7 0168 	str.w	r0, [r7, #360]	; 0x168
  const TfLiteEvalTensor* bias =
      (NumInputs(node) == 3)
 80175dc:	f107 0308 	add.w	r3, r7, #8
 80175e0:	6818      	ldr	r0, [r3, #0]
 80175e2:	f7fb ff7f 	bl	80134e4 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 80175e6:	4603      	mov	r3, r0
          ? tflite::micro::GetEvalInput(context, node, kConvBiasTensor)
 80175e8:	2b03      	cmp	r3, #3
 80175ea:	d10b      	bne.n	8017604 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x6c>
 80175ec:	4bc0      	ldr	r3, [pc, #768]	; (80178f0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x358>)
 80175ee:	681a      	ldr	r2, [r3, #0]
 80175f0:	f107 0108 	add.w	r1, r7, #8
 80175f4:	f107 030c 	add.w	r3, r7, #12
 80175f8:	6809      	ldr	r1, [r1, #0]
 80175fa:	6818      	ldr	r0, [r3, #0]
 80175fc:	f7fb feb9 	bl	8013372 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8017600:	4603      	mov	r3, r0
 8017602:	e000      	b.n	8017606 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x6e>
 8017604:	2300      	movs	r3, #0
          : nullptr;
 8017606:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kConvOutputTensor);
 801760a:	4bba      	ldr	r3, [pc, #744]	; (80178f4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x35c>)
 801760c:	681a      	ldr	r2, [r3, #0]
 801760e:	f107 0108 	add.w	r1, r7, #8
 8017612:	f107 030c 	add.w	r3, r7, #12
 8017616:	6809      	ldr	r1, [r1, #0]
 8017618:	6818      	ldr	r0, [r3, #0]
 801761a:	f7fb feba 	bl	8013392 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 801761e:	f8c7 0160 	str.w	r0, [r7, #352]	; 0x160

  TFLITE_DCHECK(node->builtin_data != nullptr);
 8017622:	f107 0308 	add.w	r3, r7, #8
 8017626:	681b      	ldr	r3, [r3, #0]
 8017628:	695b      	ldr	r3, [r3, #20]
 801762a:	2b00      	cmp	r3, #0
 801762c:	d101      	bne.n	8017632 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x9a>
 801762e:	f00f fb66 	bl	8026cfe <abort>
  const auto& params =
 8017632:	f107 0308 	add.w	r3, r7, #8
 8017636:	681b      	ldr	r3, [r3, #0]
 8017638:	695b      	ldr	r3, [r3, #20]
 801763a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
      *(reinterpret_cast<TfLiteConvParams*>(node->builtin_data));
  TFLITE_DCHECK(node->user_data != nullptr);
 801763e:	f107 0308 	add.w	r3, r7, #8
 8017642:	681b      	ldr	r3, [r3, #0]
 8017644:	691b      	ldr	r3, [r3, #16]
 8017646:	2b00      	cmp	r3, #0
 8017648:	d101      	bne.n	801764e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb6>
 801764a:	f00f fb58 	bl	8026cfe <abort>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));
 801764e:	f107 0308 	add.w	r3, r7, #8
 8017652:	681b      	ldr	r3, [r3, #0]
 8017654:	691b      	ldr	r3, [r3, #16]
 8017656:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158

  TF_LITE_ENSURE_EQ(context, input->type, output->type);
 801765a:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 801765e:	7a1a      	ldrb	r2, [r3, #8]
 8017660:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8017664:	7a1b      	ldrb	r3, [r3, #8]
 8017666:	429a      	cmp	r2, r3
 8017668:	d01a      	beq.n	80176a0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x108>
 801766a:	f107 030c 	add.w	r3, r7, #12
 801766e:	681b      	ldr	r3, [r3, #0]
 8017670:	695c      	ldr	r4, [r3, #20]
 8017672:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8017676:	7a1b      	ldrb	r3, [r3, #8]
 8017678:	461a      	mov	r2, r3
 801767a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 801767e:	7a1b      	ldrb	r3, [r3, #8]
 8017680:	f107 000c 	add.w	r0, r7, #12
 8017684:	9303      	str	r3, [sp, #12]
 8017686:	9202      	str	r2, [sp, #8]
 8017688:	4b9b      	ldr	r3, [pc, #620]	; (80178f8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x360>)
 801768a:	9301      	str	r3, [sp, #4]
 801768c:	4b9b      	ldr	r3, [pc, #620]	; (80178fc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x364>)
 801768e:	9300      	str	r3, [sp, #0]
 8017690:	f44f 7382 	mov.w	r3, #260	; 0x104
 8017694:	4a9a      	ldr	r2, [pc, #616]	; (8017900 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x368>)
 8017696:	499b      	ldr	r1, [pc, #620]	; (8017904 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x36c>)
 8017698:	6800      	ldr	r0, [r0, #0]
 801769a:	47a0      	blx	r4
 801769c:	2301      	movs	r3, #1
 801769e:	e14b      	b.n	8017938 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3a0>
  TF_LITE_ENSURE_MSG(
 80176a0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80176a4:	7a1a      	ldrb	r2, [r3, #8]
 80176a6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80176aa:	7a1b      	ldrb	r3, [r3, #8]
 80176ac:	429a      	cmp	r2, r3
 80176ae:	d014      	beq.n	80176da <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x142>
 80176b0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80176b4:	7a1b      	ldrb	r3, [r3, #8]
 80176b6:	2b07      	cmp	r3, #7
 80176b8:	d104      	bne.n	80176c4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x12c>
 80176ba:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80176be:	7a1b      	ldrb	r3, [r3, #8]
 80176c0:	2b09      	cmp	r3, #9
 80176c2:	d00a      	beq.n	80176da <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x142>
 80176c4:	f107 030c 	add.w	r3, r7, #12
 80176c8:	681b      	ldr	r3, [r3, #0]
 80176ca:	695b      	ldr	r3, [r3, #20]
 80176cc:	f107 020c 	add.w	r2, r7, #12
 80176d0:	498d      	ldr	r1, [pc, #564]	; (8017908 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x370>)
 80176d2:	6810      	ldr	r0, [r2, #0]
 80176d4:	4798      	blx	r3
 80176d6:	2301      	movs	r3, #1
 80176d8:	e12e      	b.n	8017938 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3a0>
      context,
      input->type == filter->type ||
          (input->type == kTfLiteInt16 && filter->type == kTfLiteInt8),
      "Hybrid models are not supported on TFLite Micro.");

  switch (input->type) {  // Already know in/out types are same.
 80176da:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80176de:	7a1b      	ldrb	r3, [r3, #8]
 80176e0:	2b09      	cmp	r3, #9
 80176e2:	d079      	beq.n	80177d8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x240>
 80176e4:	2b09      	cmp	r3, #9
 80176e6:	f300 8111 	bgt.w	801790c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x374>
 80176ea:	2b01      	cmp	r3, #1
 80176ec:	d003      	beq.n	80176f6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x15e>
 80176ee:	2b07      	cmp	r3, #7
 80176f0:	f000 808e 	beq.w	8017810 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x278>
 80176f4:	e10a      	b.n	801790c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x374>
    case kTfLiteFloat32: {
      tflite::reference_ops::Conv(
          ConvParamsFloat(params, data.reference_op_data),
 80176f6:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 80176fa:	f107 0310 	add.w	r3, r7, #16
 80176fe:	f8d7 115c 	ldr.w	r1, [r7, #348]	; 0x15c
 8017702:	4618      	mov	r0, r3
 8017704:	f7fc f8a3 	bl	801384e <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE>
          tflite::micro::GetTensorShape(input),
 8017708:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801770c:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8017710:	4618      	mov	r0, r3
 8017712:	f7fc fc4c 	bl	8013fae <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Conv(
 8017716:	f8d7 016c 	ldr.w	r0, [r7, #364]	; 0x16c
 801771a:	f7fb fe5a 	bl	80133d2 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 801771e:	4680      	mov	r8, r0
          tflite::micro::GetTensorData<float>(input),
          tflite::micro::GetTensorShape(filter),
 8017720:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8017724:	f8d7 1168 	ldr.w	r1, [r7, #360]	; 0x168
 8017728:	4618      	mov	r0, r3
 801772a:	f7fc fc40 	bl	8013fae <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Conv(
 801772e:	f8d7 0168 	ldr.w	r0, [r7, #360]	; 0x168
 8017732:	f7fb fe4e 	bl	80133d2 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 8017736:	4604      	mov	r4, r0
          tflite::micro::GetTensorData<float>(filter),
          tflite::micro::GetTensorShape(bias),
 8017738:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801773c:	f8d7 1164 	ldr.w	r1, [r7, #356]	; 0x164
 8017740:	4618      	mov	r0, r3
 8017742:	f7fc fc34 	bl	8013fae <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Conv(
 8017746:	f8d7 0164 	ldr.w	r0, [r7, #356]	; 0x164
 801774a:	f7fb fe42 	bl	80133d2 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 801774e:	4605      	mov	r5, r0
          tflite::micro::GetTensorData<float>(bias),
          tflite::micro::GetTensorShape(output),
 8017750:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8017754:	f8d7 1160 	ldr.w	r1, [r7, #352]	; 0x160
 8017758:	4618      	mov	r0, r3
 801775a:	f7fc fc28 	bl	8013fae <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Conv(
 801775e:	f8d7 0160 	ldr.w	r0, [r7, #352]	; 0x160
 8017762:	f7fb fe45 	bl	80133f0 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 8017766:	4606      	mov	r6, r0
          tflite::micro::GetTensorData<float>(output),
          tflite::micro::GetTensorShape(nullptr), nullptr);
 8017768:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801776c:	2100      	movs	r1, #0
 801776e:	4618      	mov	r0, r3
 8017770:	f7fc fc1d 	bl	8013fae <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Conv(
 8017774:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8017778:	f107 0148 	add.w	r1, r7, #72	; 0x48
 801777c:	f107 0010 	add.w	r0, r7, #16
 8017780:	2300      	movs	r3, #0
 8017782:	9306      	str	r3, [sp, #24]
 8017784:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8017788:	9305      	str	r3, [sp, #20]
 801778a:	9604      	str	r6, [sp, #16]
 801778c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8017790:	9303      	str	r3, [sp, #12]
 8017792:	9502      	str	r5, [sp, #8]
 8017794:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8017798:	9301      	str	r3, [sp, #4]
 801779a:	9400      	str	r4, [sp, #0]
 801779c:	4613      	mov	r3, r2
 801779e:	4642      	mov	r2, r8
 80177a0:	f7fe fe64 	bl	801646c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_>
          tflite::micro::GetTensorShape(nullptr), nullptr);
 80177a4:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80177a8:	4618      	mov	r0, r3
 80177aa:	f7f7 f892 	bl	800e8d2 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(output),
 80177ae:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80177b2:	4618      	mov	r0, r3
 80177b4:	f7f7 f88d 	bl	800e8d2 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(bias),
 80177b8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80177bc:	4618      	mov	r0, r3
 80177be:	f7f7 f888 	bl	800e8d2 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(filter),
 80177c2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80177c6:	4618      	mov	r0, r3
 80177c8:	f7f7 f883 	bl	800e8d2 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(input),
 80177cc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80177d0:	4618      	mov	r0, r3
 80177d2:	f7f7 f87e 	bl	800e8d2 <_ZN6tflite12RuntimeShapeD1Ev>
      break;
 80177d6:	e0ae      	b.n	8017936 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x39e>
    }
    case kTfLiteInt8:
      return EvalQuantizedPerChannel(context, node, params, data, input, filter,
 80177d8:	f107 0108 	add.w	r1, r7, #8
 80177dc:	f107 000c 	add.w	r0, r7, #12
 80177e0:	2300      	movs	r3, #0
 80177e2:	9304      	str	r3, [sp, #16]
 80177e4:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80177e8:	9303      	str	r3, [sp, #12]
 80177ea:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80177ee:	9302      	str	r3, [sp, #8]
 80177f0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80177f4:	9301      	str	r3, [sp, #4]
 80177f6:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80177fa:	9300      	str	r3, [sp, #0]
 80177fc:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017800:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8017804:	6809      	ldr	r1, [r1, #0]
 8017806:	6800      	ldr	r0, [r0, #0]
 8017808:	f7ff fca8 	bl	801715c <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_>
 801780c:	4603      	mov	r3, r0
                                     bias, output, nullptr);
 801780e:	e093      	b.n	8017938 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3a0>
      break;
    case kTfLiteInt16: {
      reference_integer_ops::ConvPerChannel(
          ConvParamsQuantized(params, data.reference_op_data),
 8017810:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8017814:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8017818:	f8d7 115c 	ldr.w	r1, [r7, #348]	; 0x15c
 801781c:	4618      	mov	r0, r3
 801781e:	f7fc f852 	bl	80138c6 <_ZN6tflite19ConvParamsQuantizedERK16TfLiteConvParamsRKNS_10OpDataConvE>
          data.reference_op_data.per_channel_output_multiplier,
 8017822:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017826:	6a5c      	ldr	r4, [r3, #36]	; 0x24
          data.reference_op_data.per_channel_output_shift,
 8017828:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 801782c:	6a9d      	ldr	r5, [r3, #40]	; 0x28
          tflite::micro::GetTensorShape(input),
 801782e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8017832:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8017836:	4618      	mov	r0, r3
 8017838:	f7fc fbb9 	bl	8013fae <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::ConvPerChannel(
 801783c:	f8d7 016c 	ldr.w	r0, [r7, #364]	; 0x16c
 8017840:	f7fc fb90 	bl	8013f64 <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>
 8017844:	4606      	mov	r6, r0
          tflite::micro::GetTensorData<int16_t>(input),
          tflite::micro::GetTensorShape(filter),
 8017846:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801784a:	f8d7 1168 	ldr.w	r1, [r7, #360]	; 0x168
 801784e:	4618      	mov	r0, r3
 8017850:	f7fc fbad 	bl	8013fae <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::ConvPerChannel(
 8017854:	f8d7 0168 	ldr.w	r0, [r7, #360]	; 0x168
 8017858:	f7fb fddb 	bl	8013412 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 801785c:	6078      	str	r0, [r7, #4]
          tflite::micro::GetTensorData<int8_t>(filter),
          tflite::micro::GetTensorShape(bias),
 801785e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8017862:	f8d7 1164 	ldr.w	r1, [r7, #356]	; 0x164
 8017866:	4618      	mov	r0, r3
 8017868:	f7fc fba1 	bl	8013fae <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::ConvPerChannel(
 801786c:	f8d7 0164 	ldr.w	r0, [r7, #356]	; 0x164
 8017870:	f7fb fed8 	bl	8013624 <_ZN6tflite5micro13GetTensorDataIxEEPKT_PK16TfLiteEvalTensor>
 8017874:	6038      	str	r0, [r7, #0]
          tflite::micro::GetTensorData<std::int64_t>(bias),
          tflite::micro::GetTensorShape(output),
 8017876:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801787a:	f8d7 1160 	ldr.w	r1, [r7, #352]	; 0x160
 801787e:	4618      	mov	r0, r3
 8017880:	f7fc fb95 	bl	8013fae <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::ConvPerChannel(
 8017884:	f8d7 0160 	ldr.w	r0, [r7, #352]	; 0x160
 8017888:	f7fb ff0a 	bl	80136a0 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
 801788c:	4603      	mov	r3, r0
 801788e:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8017892:	f107 00c0 	add.w	r0, r7, #192	; 0xc0
 8017896:	9306      	str	r3, [sp, #24]
 8017898:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801789c:	9305      	str	r3, [sp, #20]
 801789e:	683b      	ldr	r3, [r7, #0]
 80178a0:	9304      	str	r3, [sp, #16]
 80178a2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80178a6:	9303      	str	r3, [sp, #12]
 80178a8:	687b      	ldr	r3, [r7, #4]
 80178aa:	9302      	str	r3, [sp, #8]
 80178ac:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80178b0:	9301      	str	r3, [sp, #4]
 80178b2:	9600      	str	r6, [sp, #0]
 80178b4:	4613      	mov	r3, r2
 80178b6:	462a      	mov	r2, r5
 80178b8:	4621      	mov	r1, r4
 80178ba:	f7ff f90f 	bl	8016adc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps>
          tflite::micro::GetTensorShape(output),
 80178be:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80178c2:	4618      	mov	r0, r3
 80178c4:	f7f7 f805 	bl	800e8d2 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(bias),
 80178c8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80178cc:	4618      	mov	r0, r3
 80178ce:	f7f7 f800 	bl	800e8d2 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(filter),
 80178d2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80178d6:	4618      	mov	r0, r3
 80178d8:	f7f6 fffb 	bl	800e8d2 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(input),
 80178dc:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80178e0:	4618      	mov	r0, r3
 80178e2:	f7f6 fff6 	bl	800e8d2 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorData<int16_t>(output));
      break;
 80178e6:	e026      	b.n	8017936 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x39e>
 80178e8:	0803ff54 	.word	0x0803ff54
 80178ec:	0803ff58 	.word	0x0803ff58
 80178f0:	0803ff5c 	.word	0x0803ff5c
 80178f4:	0803ff60 	.word	0x0803ff60
 80178f8:	0802d7fc 	.word	0x0802d7fc
 80178fc:	0802d80c 	.word	0x0802d80c
 8017900:	0802d748 	.word	0x0802d748
 8017904:	0802d7e0 	.word	0x0802d7e0
 8017908:	0802d818 	.word	0x0802d818
    }
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 801790c:	f107 030c 	add.w	r3, r7, #12
 8017910:	681b      	ldr	r3, [r3, #0]
 8017912:	695c      	ldr	r4, [r3, #20]
 8017914:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8017918:	7a1b      	ldrb	r3, [r3, #8]
 801791a:	4618      	mov	r0, r3
 801791c:	f7f2 ff76 	bl	800a80c <TfLiteTypeGetName>
 8017920:	4602      	mov	r2, r0
 8017922:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8017926:	7a1b      	ldrb	r3, [r3, #8]
 8017928:	f107 000c 	add.w	r0, r7, #12
 801792c:	4905      	ldr	r1, [pc, #20]	; (8017944 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3ac>)
 801792e:	6800      	ldr	r0, [r0, #0]
 8017930:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 8017932:	2301      	movs	r3, #1
 8017934:	e000      	b.n	8017938 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3a0>
  }
  return kTfLiteOk;
 8017936:	2300      	movs	r3, #0
}
 8017938:	4618      	mov	r0, r3
 801793a:	f507 77b8 	add.w	r7, r7, #368	; 0x170
 801793e:	46bd      	mov	sp, r7
 8017940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017944:	0802d88c 	.word	0x0802d88c

08017948 <_ZN6tflite16Register_CONV_2DEv>:

}  // namespace

TfLiteRegistration Register_CONV_2D() {
 8017948:	b4b0      	push	{r4, r5, r7}
 801794a:	b083      	sub	sp, #12
 801794c:	af00      	add	r7, sp, #0
 801794e:	6078      	str	r0, [r7, #4]
          /*prepare=*/Prepare,
          /*invoke=*/Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 8017950:	687b      	ldr	r3, [r7, #4]
 8017952:	4a07      	ldr	r2, [pc, #28]	; (8017970 <_ZN6tflite16Register_CONV_2DEv+0x28>)
 8017954:	461c      	mov	r4, r3
 8017956:	4615      	mov	r5, r2
 8017958:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801795a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801795c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8017960:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8017964:	6878      	ldr	r0, [r7, #4]
 8017966:	370c      	adds	r7, #12
 8017968:	46bd      	mov	sp, r7
 801796a:	bcb0      	pop	{r4, r5, r7}
 801796c:	4770      	bx	lr
 801796e:	bf00      	nop
 8017970:	0802d8a8 	.word	0x0802d8a8

08017974 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>:
inline void DepthwiseConv(
    const DepthwiseParams& params, const RuntimeShape& input_shape,
    const float* input_data, const RuntimeShape& filter_shape,
    const float* filter_data, const RuntimeShape& bias_shape,
    const float* bias_data, const RuntimeShape& output_shape,
    float* output_data) {
 8017974:	b590      	push	{r4, r7, lr}
 8017976:	ed2d 8b02 	vpush	{d8}
 801797a:	b0a9      	sub	sp, #164	; 0xa4
 801797c:	af02      	add	r7, sp, #8
 801797e:	60f8      	str	r0, [r7, #12]
 8017980:	60b9      	str	r1, [r7, #8]
 8017982:	607a      	str	r2, [r7, #4]
 8017984:	603b      	str	r3, [r7, #0]
  const int stride_width = params.stride_width;
 8017986:	68fb      	ldr	r3, [r7, #12]
 8017988:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801798c:	673b      	str	r3, [r7, #112]	; 0x70
  const int stride_height = params.stride_height;
 801798e:	68fb      	ldr	r3, [r7, #12]
 8017990:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8017994:	66fb      	str	r3, [r7, #108]	; 0x6c
  const int dilation_width_factor = params.dilation_width_factor;
 8017996:	68fb      	ldr	r3, [r7, #12]
 8017998:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 801799c:	66bb      	str	r3, [r7, #104]	; 0x68
  const int dilation_height_factor = params.dilation_height_factor;
 801799e:	68fb      	ldr	r3, [r7, #12]
 80179a0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80179a4:	667b      	str	r3, [r7, #100]	; 0x64
  const int pad_width = params.padding_values.width;
 80179a6:	68fb      	ldr	r3, [r7, #12]
 80179a8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80179ac:	663b      	str	r3, [r7, #96]	; 0x60
  const int pad_height = params.padding_values.height;
 80179ae:	68fb      	ldr	r3, [r7, #12]
 80179b0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80179b4:	65fb      	str	r3, [r7, #92]	; 0x5c
  const int depth_multiplier = params.depth_multiplier;
 80179b6:	68fb      	ldr	r3, [r7, #12]
 80179b8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80179bc:	65bb      	str	r3, [r7, #88]	; 0x58
  const float output_activation_min = params.float_activation_min;
 80179be:	68fb      	ldr	r3, [r7, #12]
 80179c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80179c2:	657b      	str	r3, [r7, #84]	; 0x54
  const float output_activation_max = params.float_activation_max;
 80179c4:	68fb      	ldr	r3, [r7, #12]
 80179c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80179c8:	653b      	str	r3, [r7, #80]	; 0x50
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 80179ca:	68b8      	ldr	r0, [r7, #8]
 80179cc:	f7f6 ff8c 	bl	800e8e8 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80179d0:	4603      	mov	r3, r0
 80179d2:	2b04      	cmp	r3, #4
 80179d4:	d001      	beq.n	80179da <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x66>
 80179d6:	f00f f992 	bl	8026cfe <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 80179da:	6838      	ldr	r0, [r7, #0]
 80179dc:	f7f6 ff84 	bl	800e8e8 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80179e0:	4603      	mov	r3, r0
 80179e2:	2b04      	cmp	r3, #4
 80179e4:	d001      	beq.n	80179ea <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x76>
 80179e6:	f00f f98a 	bl	8026cfe <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 80179ea:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 80179ee:	f7f6 ff7b 	bl	800e8e8 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80179f2:	4603      	mov	r3, r0
 80179f4:	2b04      	cmp	r3, #4
 80179f6:	d001      	beq.n	80179fc <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x88>
 80179f8:	f00f f981 	bl	8026cfe <abort>

  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 80179fc:	2300      	movs	r3, #0
 80179fe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8017a02:	2100      	movs	r1, #0
 8017a04:	68b8      	ldr	r0, [r7, #8]
 8017a06:	f7fb fe1c 	bl	8013642 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8017a0a:	64f8      	str	r0, [r7, #76]	; 0x4c
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
 8017a0c:	2303      	movs	r3, #3
 8017a0e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8017a12:	2103      	movs	r1, #3
 8017a14:	6838      	ldr	r0, [r7, #0]
 8017a16:	f7fb fe14 	bl	8013642 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8017a1a:	64b8      	str	r0, [r7, #72]	; 0x48
  const int input_height = input_shape.Dims(1);
 8017a1c:	2101      	movs	r1, #1
 8017a1e:	68b8      	ldr	r0, [r7, #8]
 8017a20:	f7fb fd17 	bl	8013452 <_ZNK6tflite12RuntimeShape4DimsEi>
 8017a24:	6478      	str	r0, [r7, #68]	; 0x44
  const int input_width = input_shape.Dims(2);
 8017a26:	2102      	movs	r1, #2
 8017a28:	68b8      	ldr	r0, [r7, #8]
 8017a2a:	f7fb fd12 	bl	8013452 <_ZNK6tflite12RuntimeShape4DimsEi>
 8017a2e:	6438      	str	r0, [r7, #64]	; 0x40
  const int input_depth = input_shape.Dims(3);
 8017a30:	2103      	movs	r1, #3
 8017a32:	68b8      	ldr	r0, [r7, #8]
 8017a34:	f7fb fd0d 	bl	8013452 <_ZNK6tflite12RuntimeShape4DimsEi>
 8017a38:	63f8      	str	r0, [r7, #60]	; 0x3c
  const int filter_height = filter_shape.Dims(1);
 8017a3a:	2101      	movs	r1, #1
 8017a3c:	6838      	ldr	r0, [r7, #0]
 8017a3e:	f7fb fd08 	bl	8013452 <_ZNK6tflite12RuntimeShape4DimsEi>
 8017a42:	63b8      	str	r0, [r7, #56]	; 0x38
  const int filter_width = filter_shape.Dims(2);
 8017a44:	2102      	movs	r1, #2
 8017a46:	6838      	ldr	r0, [r7, #0]
 8017a48:	f7fb fd03 	bl	8013452 <_ZNK6tflite12RuntimeShape4DimsEi>
 8017a4c:	6378      	str	r0, [r7, #52]	; 0x34
  const int output_height = output_shape.Dims(1);
 8017a4e:	2101      	movs	r1, #1
 8017a50:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8017a54:	f7fb fcfd 	bl	8013452 <_ZNK6tflite12RuntimeShape4DimsEi>
 8017a58:	6338      	str	r0, [r7, #48]	; 0x30
  const int output_width = output_shape.Dims(2);
 8017a5a:	2102      	movs	r1, #2
 8017a5c:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8017a60:	f7fb fcf7 	bl	8013452 <_ZNK6tflite12RuntimeShape4DimsEi>
 8017a64:	62f8      	str	r0, [r7, #44]	; 0x2c
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
 8017a66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017a68:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8017a6a:	fb02 f303 	mul.w	r3, r2, r3
 8017a6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017a70:	429a      	cmp	r2, r3
 8017a72:	d001      	beq.n	8017a78 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x104>
 8017a74:	f00f f943 	bl	8026cfe <abort>
  TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 8017a78:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8017a7c:	f7fb fd0f 	bl	801349e <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 8017a80:	4602      	mov	r2, r0
 8017a82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017a84:	4293      	cmp	r3, r2
 8017a86:	d001      	beq.n	8017a8c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x118>
 8017a88:	f00f f939 	bl	8026cfe <abort>

  for (int b = 0; b < batches; ++b) {
 8017a8c:	2300      	movs	r3, #0
 8017a8e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8017a92:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8017a96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017a98:	429a      	cmp	r2, r3
 8017a9a:	f280 80eb 	bge.w	8017c74 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x300>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8017a9e:	2300      	movs	r3, #0
 8017aa0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8017aa4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8017aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017aaa:	429a      	cmp	r2, r3
 8017aac:	f280 80dc 	bge.w	8017c68 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2f4>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8017ab0:	2300      	movs	r3, #0
 8017ab2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8017ab6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8017aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017abc:	429a      	cmp	r2, r3
 8017abe:	f280 80cd 	bge.w	8017c5c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2e8>
        for (int ic = 0; ic < input_depth; ++ic) {
 8017ac2:	2300      	movs	r3, #0
 8017ac4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8017ac8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8017acc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017ace:	429a      	cmp	r2, r3
 8017ad0:	f280 80be 	bge.w	8017c50 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2dc>
          for (int m = 0; m < depth_multiplier; m++) {
 8017ad4:	2300      	movs	r3, #0
 8017ad6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8017ada:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8017ade:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8017ae0:	429a      	cmp	r2, r3
 8017ae2:	f280 80af 	bge.w	8017c44 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2d0>
            const int oc = m + ic * depth_multiplier;
 8017ae6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8017aea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8017aec:	fb02 f303 	mul.w	r3, r2, r3
 8017af0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8017af4:	4413      	add	r3, r2
 8017af6:	62bb      	str	r3, [r7, #40]	; 0x28
            const int in_x_origin = (out_x * stride_width) - pad_width;
 8017af8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8017afc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8017afe:	fb02 f203 	mul.w	r2, r2, r3
 8017b02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8017b04:	1ad3      	subs	r3, r2, r3
 8017b06:	627b      	str	r3, [r7, #36]	; 0x24
            const int in_y_origin = (out_y * stride_height) - pad_height;
 8017b08:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8017b0c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8017b0e:	fb02 f203 	mul.w	r2, r2, r3
 8017b12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017b14:	1ad3      	subs	r3, r2, r3
 8017b16:	623b      	str	r3, [r7, #32]
            float total = 0.f;
 8017b18:	f04f 0300 	mov.w	r3, #0
 8017b1c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 8017b20:	2300      	movs	r3, #0
 8017b22:	67fb      	str	r3, [r7, #124]	; 0x7c
 8017b24:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8017b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b28:	429a      	cmp	r2, r3
 8017b2a:	da54      	bge.n	8017bd6 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x262>
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 8017b2c:	2300      	movs	r3, #0
 8017b2e:	67bb      	str	r3, [r7, #120]	; 0x78
 8017b30:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8017b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017b34:	429a      	cmp	r2, r3
 8017b36:	da4a      	bge.n	8017bce <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x25a>
                const int in_x = in_x_origin + dilation_width_factor * filter_x;
 8017b38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017b3a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8017b3c:	fb02 f303 	mul.w	r3, r2, r3
 8017b40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017b42:	4413      	add	r3, r2
 8017b44:	61fb      	str	r3, [r7, #28]
                const int in_y =
                    in_y_origin + dilation_height_factor * filter_y;
 8017b46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017b48:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8017b4a:	fb02 f303 	mul.w	r3, r2, r3
                const int in_y =
 8017b4e:	6a3a      	ldr	r2, [r7, #32]
 8017b50:	4413      	add	r3, r2
 8017b52:	61bb      	str	r3, [r7, #24]
                // If the location is outside the bounds of the input image,
                // use zero as a default value.
                if ((in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
 8017b54:	69fb      	ldr	r3, [r7, #28]
 8017b56:	2b00      	cmp	r3, #0
 8017b58:	db35      	blt.n	8017bc6 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x252>
 8017b5a:	69fa      	ldr	r2, [r7, #28]
 8017b5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017b5e:	429a      	cmp	r2, r3
 8017b60:	da31      	bge.n	8017bc6 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x252>
 8017b62:	69bb      	ldr	r3, [r7, #24]
 8017b64:	2b00      	cmp	r3, #0
 8017b66:	db2e      	blt.n	8017bc6 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x252>
 8017b68:	69ba      	ldr	r2, [r7, #24]
 8017b6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017b6c:	429a      	cmp	r2, r3
 8017b6e:	da2a      	bge.n	8017bc6 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x252>
                    (in_y < input_height)) {
                  float input_value =
                      input_data[Offset(input_shape, b, in_y, in_x, ic)];
 8017b70:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8017b74:	9300      	str	r3, [sp, #0]
 8017b76:	69fb      	ldr	r3, [r7, #28]
 8017b78:	69ba      	ldr	r2, [r7, #24]
 8017b7a:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8017b7e:	68b8      	ldr	r0, [r7, #8]
 8017b80:	f7fb fcd9 	bl	8013536 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8017b84:	4603      	mov	r3, r0
 8017b86:	009b      	lsls	r3, r3, #2
 8017b88:	687a      	ldr	r2, [r7, #4]
 8017b8a:	4413      	add	r3, r2
 8017b8c:	681b      	ldr	r3, [r3, #0]
 8017b8e:	617b      	str	r3, [r7, #20]
                  float filter_value = filter_data[Offset(
 8017b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b92:	9300      	str	r3, [sp, #0]
 8017b94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8017b96:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8017b98:	2100      	movs	r1, #0
 8017b9a:	6838      	ldr	r0, [r7, #0]
 8017b9c:	f7fb fccb 	bl	8013536 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8017ba0:	4603      	mov	r3, r0
                      filter_shape, 0, filter_y, filter_x, oc)];
 8017ba2:	009b      	lsls	r3, r3, #2
 8017ba4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8017ba8:	4413      	add	r3, r2
 8017baa:	681b      	ldr	r3, [r3, #0]
 8017bac:	613b      	str	r3, [r7, #16]
                  total += (input_value * filter_value);
 8017bae:	ed97 7a05 	vldr	s14, [r7, #20]
 8017bb2:	edd7 7a04 	vldr	s15, [r7, #16]
 8017bb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017bba:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8017bbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017bc2:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 8017bc6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8017bc8:	3301      	adds	r3, #1
 8017bca:	67bb      	str	r3, [r7, #120]	; 0x78
 8017bcc:	e7b0      	b.n	8017b30 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1bc>
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 8017bce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8017bd0:	3301      	adds	r3, #1
 8017bd2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8017bd4:	e7a6      	b.n	8017b24 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1b0>
                }
              }
            }
            float bias_value = 0.0f;
 8017bd6:	f04f 0300 	mov.w	r3, #0
 8017bda:	677b      	str	r3, [r7, #116]	; 0x74
            if (bias_data) {
 8017bdc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8017be0:	2b00      	cmp	r3, #0
 8017be2:	d006      	beq.n	8017bf2 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x27e>
              bias_value = bias_data[oc];
 8017be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017be6:	009b      	lsls	r3, r3, #2
 8017be8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8017bec:	4413      	add	r3, r2
 8017bee:	681b      	ldr	r3, [r3, #0]
 8017bf0:	677b      	str	r3, [r7, #116]	; 0x74
            }
            output_data[Offset(output_shape, b, out_y, out_x, oc)] =
                ActivationFunctionWithMinMax(total + bias_value,
 8017bf2:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8017bf6:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8017bfa:	ee37 8a27 	vadd.f32	s16, s14, s15
            output_data[Offset(output_shape, b, out_y, out_x, oc)] =
 8017bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c00:	9300      	str	r3, [sp, #0]
 8017c02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8017c06:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8017c0a:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8017c0e:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8017c12:	f7fb fc90 	bl	8013536 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8017c16:	4603      	mov	r3, r0
 8017c18:	009b      	lsls	r3, r3, #2
 8017c1a:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8017c1e:	18d4      	adds	r4, r2, r3
                ActivationFunctionWithMinMax(total + bias_value,
 8017c20:	ed97 1a14 	vldr	s2, [r7, #80]	; 0x50
 8017c24:	edd7 0a15 	vldr	s1, [r7, #84]	; 0x54
 8017c28:	eeb0 0a48 	vmov.f32	s0, s16
 8017c2c:	f7fc f9f7 	bl	801401e <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>
 8017c30:	eef0 7a40 	vmov.f32	s15, s0
            output_data[Offset(output_shape, b, out_y, out_x, oc)] =
 8017c34:	edc4 7a00 	vstr	s15, [r4]
          for (int m = 0; m < depth_multiplier; m++) {
 8017c38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8017c3c:	3301      	adds	r3, #1
 8017c3e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8017c42:	e74a      	b.n	8017ada <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x166>
        for (int ic = 0; ic < input_depth; ++ic) {
 8017c44:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8017c48:	3301      	adds	r3, #1
 8017c4a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8017c4e:	e73b      	b.n	8017ac8 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x154>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8017c50:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8017c54:	3301      	adds	r3, #1
 8017c56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8017c5a:	e72c      	b.n	8017ab6 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x142>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8017c5c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8017c60:	3301      	adds	r3, #1
 8017c62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8017c66:	e71d      	b.n	8017aa4 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x130>
  for (int b = 0; b < batches; ++b) {
 8017c68:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8017c6c:	3301      	adds	r3, #1
 8017c6e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8017c72:	e70e      	b.n	8017a92 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x11e>
          }
        }
      }
    }
  }
}
 8017c74:	bf00      	nop
 8017c76:	379c      	adds	r7, #156	; 0x9c
 8017c78:	46bd      	mov	sp, r7
 8017c7a:	ecbd 8b02 	vpop	{d8}
 8017c7e:	bd90      	pop	{r4, r7, pc}

08017c80 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>:
    const DepthwiseParams& params, const int32_t* output_multiplier,
    const int32_t* output_shift, const RuntimeShape& input_shape,
    const int8_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const int32_t* bias_data, const RuntimeShape& output_shape,
    int8_t* output_data) {
 8017c80:	b590      	push	{r4, r7, lr}
 8017c82:	b0ab      	sub	sp, #172	; 0xac
 8017c84:	af02      	add	r7, sp, #8
 8017c86:	60f8      	str	r0, [r7, #12]
 8017c88:	60b9      	str	r1, [r7, #8]
 8017c8a:	607a      	str	r2, [r7, #4]
 8017c8c:	603b      	str	r3, [r7, #0]
  // Get parameters.
  // TODO(b/141565753): Re-introduce ScopedProfilingLabel on Micro.
  const int stride_width = params.stride_width;
 8017c8e:	68fb      	ldr	r3, [r7, #12]
 8017c90:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8017c94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  const int stride_height = params.stride_height;
 8017c98:	68fb      	ldr	r3, [r7, #12]
 8017c9a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8017c9e:	67fb      	str	r3, [r7, #124]	; 0x7c
  const int dilation_width_factor = params.dilation_width_factor;
 8017ca0:	68fb      	ldr	r3, [r7, #12]
 8017ca2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8017ca6:	67bb      	str	r3, [r7, #120]	; 0x78
  const int dilation_height_factor = params.dilation_height_factor;
 8017ca8:	68fb      	ldr	r3, [r7, #12]
 8017caa:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8017cae:	677b      	str	r3, [r7, #116]	; 0x74
  const int pad_width = params.padding_values.width;
 8017cb0:	68fb      	ldr	r3, [r7, #12]
 8017cb2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8017cb6:	673b      	str	r3, [r7, #112]	; 0x70
  const int pad_height = params.padding_values.height;
 8017cb8:	68fb      	ldr	r3, [r7, #12]
 8017cba:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8017cbe:	66fb      	str	r3, [r7, #108]	; 0x6c
  const int depth_multiplier = params.depth_multiplier;
 8017cc0:	68fb      	ldr	r3, [r7, #12]
 8017cc2:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8017cc6:	66bb      	str	r3, [r7, #104]	; 0x68
  const int32_t input_offset = params.input_offset;
 8017cc8:	68fb      	ldr	r3, [r7, #12]
 8017cca:	695b      	ldr	r3, [r3, #20]
 8017ccc:	667b      	str	r3, [r7, #100]	; 0x64
  const int32_t output_offset = params.output_offset;
 8017cce:	68fb      	ldr	r3, [r7, #12]
 8017cd0:	69db      	ldr	r3, [r3, #28]
 8017cd2:	663b      	str	r3, [r7, #96]	; 0x60
  const int32_t output_activation_min = params.quantized_activation_min;
 8017cd4:	68fb      	ldr	r3, [r7, #12]
 8017cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017cd8:	61bb      	str	r3, [r7, #24]
  const int32_t output_activation_max = params.quantized_activation_max;
 8017cda:	68fb      	ldr	r3, [r7, #12]
 8017cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017cde:	617b      	str	r3, [r7, #20]

  // Check dimensions of the tensors.
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 8017ce0:	6838      	ldr	r0, [r7, #0]
 8017ce2:	f7f6 fe01 	bl	800e8e8 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8017ce6:	4603      	mov	r3, r0
 8017ce8:	2b04      	cmp	r3, #4
 8017cea:	d001      	beq.n	8017cf0 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x70>
 8017cec:	f00f f807 	bl	8026cfe <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 8017cf0:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8017cf4:	f7f6 fdf8 	bl	800e8e8 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8017cf8:	4603      	mov	r3, r0
 8017cfa:	2b04      	cmp	r3, #4
 8017cfc:	d001      	beq.n	8017d02 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x82>
 8017cfe:	f00e fffe 	bl	8026cfe <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 8017d02:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8017d06:	f7f6 fdef 	bl	800e8e8 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8017d0a:	4603      	mov	r3, r0
 8017d0c:	2b04      	cmp	r3, #4
 8017d0e:	d001      	beq.n	8017d14 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x94>
 8017d10:	f00e fff5 	bl	8026cfe <abort>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 8017d14:	69ba      	ldr	r2, [r7, #24]
 8017d16:	697b      	ldr	r3, [r7, #20]
 8017d18:	429a      	cmp	r2, r3
 8017d1a:	dd01      	ble.n	8017d20 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xa0>
 8017d1c:	f00e ffef 	bl	8026cfe <abort>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 8017d20:	2300      	movs	r3, #0
 8017d22:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8017d26:	2100      	movs	r1, #0
 8017d28:	6838      	ldr	r0, [r7, #0]
 8017d2a:	f7fb fc8a 	bl	8013642 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8017d2e:	65f8      	str	r0, [r7, #92]	; 0x5c
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
 8017d30:	2303      	movs	r3, #3
 8017d32:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8017d36:	2103      	movs	r1, #3
 8017d38:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8017d3c:	f7fb fc81 	bl	8013642 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8017d40:	65b8      	str	r0, [r7, #88]	; 0x58
  const int input_height = input_shape.Dims(1);
 8017d42:	2101      	movs	r1, #1
 8017d44:	6838      	ldr	r0, [r7, #0]
 8017d46:	f7fb fb84 	bl	8013452 <_ZNK6tflite12RuntimeShape4DimsEi>
 8017d4a:	6578      	str	r0, [r7, #84]	; 0x54
  const int input_width = input_shape.Dims(2);
 8017d4c:	2102      	movs	r1, #2
 8017d4e:	6838      	ldr	r0, [r7, #0]
 8017d50:	f7fb fb7f 	bl	8013452 <_ZNK6tflite12RuntimeShape4DimsEi>
 8017d54:	6538      	str	r0, [r7, #80]	; 0x50
  const int input_depth = input_shape.Dims(3);
 8017d56:	2103      	movs	r1, #3
 8017d58:	6838      	ldr	r0, [r7, #0]
 8017d5a:	f7fb fb7a 	bl	8013452 <_ZNK6tflite12RuntimeShape4DimsEi>
 8017d5e:	64f8      	str	r0, [r7, #76]	; 0x4c
  const int filter_height = filter_shape.Dims(1);
 8017d60:	2101      	movs	r1, #1
 8017d62:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8017d66:	f7fb fb74 	bl	8013452 <_ZNK6tflite12RuntimeShape4DimsEi>
 8017d6a:	64b8      	str	r0, [r7, #72]	; 0x48
  const int filter_width = filter_shape.Dims(2);
 8017d6c:	2102      	movs	r1, #2
 8017d6e:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8017d72:	f7fb fb6e 	bl	8013452 <_ZNK6tflite12RuntimeShape4DimsEi>
 8017d76:	6478      	str	r0, [r7, #68]	; 0x44
  const int output_height = output_shape.Dims(1);
 8017d78:	2101      	movs	r1, #1
 8017d7a:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8017d7e:	f7fb fb68 	bl	8013452 <_ZNK6tflite12RuntimeShape4DimsEi>
 8017d82:	6438      	str	r0, [r7, #64]	; 0x40
  const int output_width = output_shape.Dims(2);
 8017d84:	2102      	movs	r1, #2
 8017d86:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8017d8a:	f7fb fb62 	bl	8013452 <_ZNK6tflite12RuntimeShape4DimsEi>
 8017d8e:	63f8      	str	r0, [r7, #60]	; 0x3c
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
 8017d90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017d92:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8017d94:	fb02 f303 	mul.w	r3, r2, r3
 8017d98:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8017d9a:	429a      	cmp	r2, r3
 8017d9c:	d001      	beq.n	8017da2 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x122>
 8017d9e:	f00e ffae 	bl	8026cfe <abort>
  TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 8017da2:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8017da6:	f7fb fb7a 	bl	801349e <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 8017daa:	4602      	mov	r2, r0
 8017dac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8017dae:	4293      	cmp	r3, r2
 8017db0:	d001      	beq.n	8017db6 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x136>
 8017db2:	f00e ffa4 	bl	8026cfe <abort>

  for (int batch = 0; batch < batches; ++batch) {
 8017db6:	2300      	movs	r3, #0
 8017db8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8017dbc:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8017dc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017dc2:	429a      	cmp	r2, r3
 8017dc4:	f280 811a 	bge.w	8017ffc <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x37c>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8017dc8:	2300      	movs	r3, #0
 8017dca:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8017dce:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8017dd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017dd4:	429a      	cmp	r2, r3
 8017dd6:	f280 810b 	bge.w	8017ff0 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x370>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8017dda:	2300      	movs	r3, #0
 8017ddc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8017de0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8017de4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017de6:	429a      	cmp	r2, r3
 8017de8:	f280 80fc 	bge.w	8017fe4 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x364>
        for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 8017dec:	2300      	movs	r3, #0
 8017dee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8017df2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8017df6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017df8:	429a      	cmp	r2, r3
 8017dfa:	f280 80ed 	bge.w	8017fd8 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x358>
          for (int m = 0; m < depth_multiplier; ++m) {
 8017dfe:	2300      	movs	r3, #0
 8017e00:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8017e04:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8017e08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017e0a:	429a      	cmp	r2, r3
 8017e0c:	f280 80de 	bge.w	8017fcc <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x34c>
            const int output_channel = m + in_channel * depth_multiplier;
 8017e10:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8017e14:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8017e16:	fb02 f303 	mul.w	r3, r2, r3
 8017e1a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8017e1e:	4413      	add	r3, r2
 8017e20:	63bb      	str	r3, [r7, #56]	; 0x38
            const int in_x_origin = (out_x * stride_width) - pad_width;
 8017e22:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8017e26:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8017e2a:	fb02 f203 	mul.w	r2, r2, r3
 8017e2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8017e30:	1ad3      	subs	r3, r2, r3
 8017e32:	637b      	str	r3, [r7, #52]	; 0x34
            const int in_y_origin = (out_y * stride_height) - pad_height;
 8017e34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8017e38:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8017e3a:	fb02 f203 	mul.w	r2, r2, r3
 8017e3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017e40:	1ad3      	subs	r3, r2, r3
 8017e42:	633b      	str	r3, [r7, #48]	; 0x30
            int32_t acc = 0;
 8017e44:	2300      	movs	r3, #0
 8017e46:	613b      	str	r3, [r7, #16]
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 8017e48:	2300      	movs	r3, #0
 8017e4a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8017e4e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8017e52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017e54:	429a      	cmp	r2, r3
 8017e56:	da68      	bge.n	8017f2a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2aa>
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 8017e58:	2300      	movs	r3, #0
 8017e5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8017e5e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8017e62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017e64:	429a      	cmp	r2, r3
 8017e66:	da5a      	bge.n	8017f1e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x29e>
                const int in_x = in_x_origin + dilation_width_factor * filter_x;
 8017e68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8017e6a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8017e6e:	fb02 f303 	mul.w	r3, r2, r3
 8017e72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017e74:	4413      	add	r3, r2
 8017e76:	62fb      	str	r3, [r7, #44]	; 0x2c
                const int in_y =
                    in_y_origin + dilation_height_factor * filter_y;
 8017e78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8017e7a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8017e7e:	fb02 f303 	mul.w	r3, r2, r3
                const int in_y =
 8017e82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017e84:	4413      	add	r3, r2
 8017e86:	62bb      	str	r3, [r7, #40]	; 0x28
                // Zero padding by omitting the areas outside the image.
                const bool is_point_inside_image =
                    (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
 8017e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e8a:	2b00      	cmp	r3, #0
 8017e8c:	db0c      	blt.n	8017ea8 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x228>
 8017e8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017e90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017e92:	429a      	cmp	r2, r3
 8017e94:	da08      	bge.n	8017ea8 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x228>
 8017e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e98:	2b00      	cmp	r3, #0
 8017e9a:	db05      	blt.n	8017ea8 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x228>
 8017e9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017e9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017ea0:	429a      	cmp	r2, r3
 8017ea2:	da01      	bge.n	8017ea8 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x228>
 8017ea4:	2301      	movs	r3, #1
 8017ea6:	e000      	b.n	8017eaa <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x22a>
 8017ea8:	2300      	movs	r3, #0
                const bool is_point_inside_image =
 8017eaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                    (in_y < input_height);
                if (is_point_inside_image) {
 8017eae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017eb2:	2b00      	cmp	r3, #0
 8017eb4:	d02d      	beq.n	8017f12 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x292>
                  int32_t input_val = input_data[Offset(
 8017eb6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8017eba:	9300      	str	r3, [sp, #0]
 8017ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ebe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017ec0:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8017ec4:	6838      	ldr	r0, [r7, #0]
 8017ec6:	f7fb fb36 	bl	8013536 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8017eca:	4603      	mov	r3, r0
 8017ecc:	461a      	mov	r2, r3
                      input_shape, batch, in_y, in_x, in_channel)];
 8017ece:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8017ed2:	4413      	add	r3, r2
 8017ed4:	f993 3000 	ldrsb.w	r3, [r3]
 8017ed8:	623b      	str	r3, [r7, #32]
                  int32_t filter_val = filter_data[Offset(
 8017eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017edc:	9300      	str	r3, [sp, #0]
 8017ede:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8017ee2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8017ee6:	2100      	movs	r1, #0
 8017ee8:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8017eec:	f7fb fb23 	bl	8013536 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8017ef0:	4603      	mov	r3, r0
 8017ef2:	461a      	mov	r2, r3
                      filter_shape, 0, filter_y, filter_x, output_channel)];
 8017ef4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8017ef8:	4413      	add	r3, r2
 8017efa:	f993 3000 	ldrsb.w	r3, [r3]
 8017efe:	61fb      	str	r3, [r7, #28]
                  // long as the filter size (filter_y * filter_x * in_channel)
                  // does not exceed 2^16, which is the case in all the models
                  // we have seen so far.
                  // TODO(b/174275578): Add a check to make sure the
                  // accumulator depth is smaller than 2^16.
                  acc += filter_val * (input_val + input_offset);
 8017f00:	6a3a      	ldr	r2, [r7, #32]
 8017f02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017f04:	4413      	add	r3, r2
 8017f06:	69fa      	ldr	r2, [r7, #28]
 8017f08:	fb02 f203 	mul.w	r2, r2, r3
 8017f0c:	693b      	ldr	r3, [r7, #16]
 8017f0e:	4413      	add	r3, r2
 8017f10:	613b      	str	r3, [r7, #16]
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 8017f12:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8017f16:	3301      	adds	r3, #1
 8017f18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8017f1c:	e79f      	b.n	8017e5e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1de>
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 8017f1e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8017f22:	3301      	adds	r3, #1
 8017f24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8017f28:	e791      	b.n	8017e4e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1ce>
                }
              }
            }
            if (bias_data) {
 8017f2a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8017f2e:	2b00      	cmp	r3, #0
 8017f30:	d008      	beq.n	8017f44 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2c4>
              acc += bias_data[output_channel];
 8017f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017f34:	009b      	lsls	r3, r3, #2
 8017f36:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8017f3a:	4413      	add	r3, r2
 8017f3c:	681a      	ldr	r2, [r3, #0]
 8017f3e:	693b      	ldr	r3, [r7, #16]
 8017f40:	4413      	add	r3, r2
 8017f42:	613b      	str	r3, [r7, #16]
            }
            acc = MultiplyByQuantizedMultiplier(
 8017f44:	6938      	ldr	r0, [r7, #16]
                acc, output_multiplier[output_channel],
 8017f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017f48:	009b      	lsls	r3, r3, #2
 8017f4a:	68ba      	ldr	r2, [r7, #8]
 8017f4c:	4413      	add	r3, r2
            acc = MultiplyByQuantizedMultiplier(
 8017f4e:	6819      	ldr	r1, [r3, #0]
                output_shift[output_channel]);
 8017f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017f52:	009b      	lsls	r3, r3, #2
 8017f54:	687a      	ldr	r2, [r7, #4]
 8017f56:	4413      	add	r3, r2
            acc = MultiplyByQuantizedMultiplier(
 8017f58:	681b      	ldr	r3, [r3, #0]
 8017f5a:	461a      	mov	r2, r3
 8017f5c:	f7f5 fa5a 	bl	800d414 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 8017f60:	4603      	mov	r3, r0
 8017f62:	613b      	str	r3, [r7, #16]
            acc += output_offset;
 8017f64:	693a      	ldr	r2, [r7, #16]
 8017f66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8017f68:	4413      	add	r3, r2
 8017f6a:	613b      	str	r3, [r7, #16]
            acc = std::max(acc, output_activation_min);
 8017f6c:	f107 0218 	add.w	r2, r7, #24
 8017f70:	f107 0310 	add.w	r3, r7, #16
 8017f74:	4611      	mov	r1, r2
 8017f76:	4618      	mov	r0, r3
 8017f78:	f7f5 fb20 	bl	800d5bc <_ZSt3maxIlERKT_S2_S2_>
 8017f7c:	4603      	mov	r3, r0
 8017f7e:	681b      	ldr	r3, [r3, #0]
 8017f80:	613b      	str	r3, [r7, #16]
            acc = std::min(acc, output_activation_max);
 8017f82:	f107 0214 	add.w	r2, r7, #20
 8017f86:	f107 0310 	add.w	r3, r7, #16
 8017f8a:	4611      	mov	r1, r2
 8017f8c:	4618      	mov	r0, r3
 8017f8e:	f7f5 fb01 	bl	800d594 <_ZSt3minIlERKT_S2_S2_>
 8017f92:	4603      	mov	r3, r0
 8017f94:	681b      	ldr	r3, [r3, #0]
 8017f96:	613b      	str	r3, [r7, #16]
            output_data[Offset(output_shape, batch, out_y, out_x,
                               output_channel)] = static_cast<int8_t>(acc);
 8017f98:	693c      	ldr	r4, [r7, #16]
            output_data[Offset(output_shape, batch, out_y, out_x,
 8017f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017f9c:	9300      	str	r3, [sp, #0]
 8017f9e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8017fa2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8017fa6:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8017faa:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8017fae:	f7fb fac2 	bl	8013536 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8017fb2:	4603      	mov	r3, r0
 8017fb4:	461a      	mov	r2, r3
                               output_channel)] = static_cast<int8_t>(acc);
 8017fb6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8017fba:	4413      	add	r3, r2
 8017fbc:	b262      	sxtb	r2, r4
 8017fbe:	701a      	strb	r2, [r3, #0]
          for (int m = 0; m < depth_multiplier; ++m) {
 8017fc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8017fc4:	3301      	adds	r3, #1
 8017fc6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8017fca:	e71b      	b.n	8017e04 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x184>
        for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 8017fcc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8017fd0:	3301      	adds	r3, #1
 8017fd2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8017fd6:	e70c      	b.n	8017df2 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x172>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8017fd8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8017fdc:	3301      	adds	r3, #1
 8017fde:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8017fe2:	e6fd      	b.n	8017de0 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x160>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8017fe4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8017fe8:	3301      	adds	r3, #1
 8017fea:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8017fee:	e6ee      	b.n	8017dce <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x14e>
  for (int batch = 0; batch < batches; ++batch) {
 8017ff0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8017ff4:	3301      	adds	r3, #1
 8017ff6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8017ffa:	e6df      	b.n	8017dbc <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x13c>
          }
        }
      }
    }
  }
}
 8017ffc:	bf00      	nop
 8017ffe:	37a4      	adds	r7, #164	; 0xa4
 8018000:	46bd      	mov	sp, r7
 8018002:	bd90      	pop	{r4, r7, pc}

08018004 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:

  // Index to buffer for optimizations if applicable.
  int buffer_idx;
};

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 8018004:	b580      	push	{r7, lr}
 8018006:	b084      	sub	sp, #16
 8018008:	af00      	add	r7, sp, #0
 801800a:	60f8      	str	r0, [r7, #12]
 801800c:	60b9      	str	r1, [r7, #8]
 801800e:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 8018010:	68fb      	ldr	r3, [r7, #12]
 8018012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018014:	2b00      	cmp	r3, #0
 8018016:	d101      	bne.n	801801c <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0x18>
 8018018:	f00e fe71 	bl	8026cfe <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 801801c:	68fb      	ldr	r3, [r7, #12]
 801801e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018020:	2138      	movs	r1, #56	; 0x38
 8018022:	68f8      	ldr	r0, [r7, #12]
 8018024:	4798      	blx	r3
 8018026:	4603      	mov	r3, r0
}
 8018028:	4618      	mov	r0, r3
 801802a:	3710      	adds	r7, #16
 801802c:	46bd      	mov	sp, r7
 801802e:	bd80      	pop	{r7, pc}

08018030 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 8018030:	b5b0      	push	{r4, r5, r7, lr}
 8018032:	b0c6      	sub	sp, #280	; 0x118
 8018034:	af08      	add	r7, sp, #32
 8018036:	6078      	str	r0, [r7, #4]
 8018038:	6039      	str	r1, [r7, #0]
 801803a:	2400      	movs	r4, #0
  TFLITE_DCHECK(node->user_data != nullptr);
 801803c:	683b      	ldr	r3, [r7, #0]
 801803e:	691b      	ldr	r3, [r3, #16]
 8018040:	2b00      	cmp	r3, #0
 8018042:	d101      	bne.n	8018048 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x18>
 8018044:	f00e fe5b 	bl	8026cfe <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 8018048:	683b      	ldr	r3, [r7, #0]
 801804a:	695b      	ldr	r3, [r3, #20]
 801804c:	2b00      	cmp	r3, #0
 801804e:	d101      	bne.n	8018054 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x24>
 8018050:	f00e fe55 	bl	8026cfe <abort>

  OpData* data = static_cast<OpData*>(node->user_data);
 8018054:	683b      	ldr	r3, [r7, #0]
 8018056:	691b      	ldr	r3, [r3, #16]
 8018058:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  const auto& params =
 801805c:	683b      	ldr	r3, [r7, #0]
 801805e:	695b      	ldr	r3, [r3, #20]
 8018060:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
      *(reinterpret_cast<TfLiteDepthwiseConvParams*>(node->builtin_data));

  const TfLiteTensor* input =
      GetInput(context, node, kDepthwiseConvInputTensor);
 8018064:	4baa      	ldr	r3, [pc, #680]	; (8018310 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e0>)
 8018066:	681b      	ldr	r3, [r3, #0]
 8018068:	461a      	mov	r2, r3
 801806a:	6839      	ldr	r1, [r7, #0]
 801806c:	6878      	ldr	r0, [r7, #4]
 801806e:	f7f5 fd2d 	bl	800dacc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8018072:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
  TF_LITE_ENSURE(context, input != nullptr);
 8018076:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801807a:	2b00      	cmp	r3, #0
 801807c:	d10a      	bne.n	8018094 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x64>
 801807e:	687b      	ldr	r3, [r7, #4]
 8018080:	695c      	ldr	r4, [r3, #20]
 8018082:	4ba4      	ldr	r3, [pc, #656]	; (8018314 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e4>)
 8018084:	9300      	str	r3, [sp, #0]
 8018086:	2338      	movs	r3, #56	; 0x38
 8018088:	4aa3      	ldr	r2, [pc, #652]	; (8018318 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e8>)
 801808a:	49a4      	ldr	r1, [pc, #656]	; (801831c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2ec>)
 801808c:	6878      	ldr	r0, [r7, #4]
 801808e:	47a0      	blx	r4
 8018090:	2401      	movs	r4, #1
 8018092:	e22a      	b.n	80184ea <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x4ba>
  const TfLiteTensor* filter =
      GetInput(context, node, kDepthwiseConvWeightsTensor);
 8018094:	4ba2      	ldr	r3, [pc, #648]	; (8018320 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2f0>)
 8018096:	681b      	ldr	r3, [r3, #0]
 8018098:	461a      	mov	r2, r3
 801809a:	6839      	ldr	r1, [r7, #0]
 801809c:	6878      	ldr	r0, [r7, #4]
 801809e:	f7f5 fd15 	bl	800dacc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 80180a2:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
  TF_LITE_ENSURE(context, filter != nullptr);
 80180a6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80180aa:	2b00      	cmp	r3, #0
 80180ac:	d10a      	bne.n	80180c4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x94>
 80180ae:	687b      	ldr	r3, [r7, #4]
 80180b0:	695c      	ldr	r4, [r3, #20]
 80180b2:	4b9c      	ldr	r3, [pc, #624]	; (8018324 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2f4>)
 80180b4:	9300      	str	r3, [sp, #0]
 80180b6:	233b      	movs	r3, #59	; 0x3b
 80180b8:	4a97      	ldr	r2, [pc, #604]	; (8018318 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e8>)
 80180ba:	4998      	ldr	r1, [pc, #608]	; (801831c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2ec>)
 80180bc:	6878      	ldr	r0, [r7, #4]
 80180be:	47a0      	blx	r4
 80180c0:	2401      	movs	r4, #1
 80180c2:	e212      	b.n	80184ea <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x4ba>
  TfLiteTensor* output = GetOutput(context, node, kDepthwiseConvOutputTensor);
 80180c4:	4b98      	ldr	r3, [pc, #608]	; (8018328 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2f8>)
 80180c6:	681b      	ldr	r3, [r3, #0]
 80180c8:	461a      	mov	r2, r3
 80180ca:	6839      	ldr	r1, [r7, #0]
 80180cc:	6878      	ldr	r0, [r7, #4]
 80180ce:	f7f5 fd0d 	bl	800daec <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 80180d2:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  TF_LITE_ENSURE(context, output != nullptr);
 80180d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80180da:	2b00      	cmp	r3, #0
 80180dc:	d10a      	bne.n	80180f4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xc4>
 80180de:	687b      	ldr	r3, [r7, #4]
 80180e0:	695c      	ldr	r4, [r3, #20]
 80180e2:	4b92      	ldr	r3, [pc, #584]	; (801832c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2fc>)
 80180e4:	9300      	str	r3, [sp, #0]
 80180e6:	233d      	movs	r3, #61	; 0x3d
 80180e8:	4a8b      	ldr	r2, [pc, #556]	; (8018318 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e8>)
 80180ea:	498c      	ldr	r1, [pc, #560]	; (801831c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2ec>)
 80180ec:	6878      	ldr	r0, [r7, #4]
 80180ee:	47a0      	blx	r4
 80180f0:	2401      	movs	r4, #1
 80180f2:	e1fa      	b.n	80184ea <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x4ba>

  const TfLiteType data_type = input->type;
 80180f4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80180f8:	781b      	ldrb	r3, [r3, #0]
 80180fa:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
  int input_width = SizeOfDimension(input, 2);
 80180fe:	2102      	movs	r1, #2
 8018100:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 8018104:	f7f5 fc61 	bl	800d9ca <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>
 8018108:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
  int input_height = SizeOfDimension(input, 1);
 801810c:	2101      	movs	r1, #1
 801810e:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 8018112:	f7f5 fc5a 	bl	800d9ca <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>
 8018116:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
  int filter_width = SizeOfDimension(filter, 2);
 801811a:	2102      	movs	r1, #2
 801811c:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8018120:	f7f5 fc53 	bl	800d9ca <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>
 8018124:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  int filter_height = SizeOfDimension(filter, 1);
 8018128:	2101      	movs	r1, #1
 801812a:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 801812e:	f7f5 fc4c 	bl	800d9ca <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>
 8018132:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
  int output_width = SizeOfDimension(output, 2);
 8018136:	2102      	movs	r1, #2
 8018138:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 801813c:	f7f5 fc45 	bl	800d9ca <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>
 8018140:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
  int output_height = SizeOfDimension(output, 1);
 8018144:	2101      	movs	r1, #1
 8018146:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 801814a:	f7f5 fc3e 	bl	800d9ca <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>
 801814e:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8

  if (input->type == kTfLiteInt8) {
 8018152:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8018156:	781b      	ldrb	r3, [r3, #0]
 8018158:	2b09      	cmp	r3, #9
 801815a:	f040 80b1 	bne.w	80182c0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x290>
    TF_LITE_ENSURE_EQ(context, filter->quantization.type,
 801815e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8018162:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018166:	2b01      	cmp	r3, #1
 8018168:	d014      	beq.n	8018194 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x164>
 801816a:	687b      	ldr	r3, [r7, #4]
 801816c:	695c      	ldr	r4, [r3, #20]
 801816e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8018172:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018176:	461a      	mov	r2, r3
 8018178:	2301      	movs	r3, #1
 801817a:	9303      	str	r3, [sp, #12]
 801817c:	9202      	str	r2, [sp, #8]
 801817e:	4b6c      	ldr	r3, [pc, #432]	; (8018330 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x300>)
 8018180:	9301      	str	r3, [sp, #4]
 8018182:	4b6c      	ldr	r3, [pc, #432]	; (8018334 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x304>)
 8018184:	9300      	str	r3, [sp, #0]
 8018186:	2348      	movs	r3, #72	; 0x48
 8018188:	4a63      	ldr	r2, [pc, #396]	; (8018318 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e8>)
 801818a:	496b      	ldr	r1, [pc, #428]	; (8018338 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x308>)
 801818c:	6878      	ldr	r0, [r7, #4]
 801818e:	47a0      	blx	r4
 8018190:	2401      	movs	r4, #1
 8018192:	e1aa      	b.n	80184ea <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x4ba>
                      kTfLiteAffineQuantization);

    // All per-channel quantized tensors need valid zero point and scale arrays.
    const auto* affine_quantization =
 8018194:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8018198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801819a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
        reinterpret_cast<TfLiteAffineQuantization*>(
            filter->quantization.params);
    TF_LITE_ENSURE(context, affine_quantization);
 801819e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80181a2:	2b00      	cmp	r3, #0
 80181a4:	d10a      	bne.n	80181bc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x18c>
 80181a6:	687b      	ldr	r3, [r7, #4]
 80181a8:	695c      	ldr	r4, [r3, #20]
 80181aa:	4b64      	ldr	r3, [pc, #400]	; (801833c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x30c>)
 80181ac:	9300      	str	r3, [sp, #0]
 80181ae:	234f      	movs	r3, #79	; 0x4f
 80181b0:	4a59      	ldr	r2, [pc, #356]	; (8018318 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e8>)
 80181b2:	495a      	ldr	r1, [pc, #360]	; (801831c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2ec>)
 80181b4:	6878      	ldr	r0, [r7, #4]
 80181b6:	47a0      	blx	r4
 80181b8:	2401      	movs	r4, #1
 80181ba:	e196      	b.n	80184ea <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x4ba>
    TF_LITE_ENSURE(context, affine_quantization->scale);
 80181bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80181c0:	681b      	ldr	r3, [r3, #0]
 80181c2:	2b00      	cmp	r3, #0
 80181c4:	d10a      	bne.n	80181dc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1ac>
 80181c6:	687b      	ldr	r3, [r7, #4]
 80181c8:	695c      	ldr	r4, [r3, #20]
 80181ca:	4b5d      	ldr	r3, [pc, #372]	; (8018340 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x310>)
 80181cc:	9300      	str	r3, [sp, #0]
 80181ce:	2350      	movs	r3, #80	; 0x50
 80181d0:	4a51      	ldr	r2, [pc, #324]	; (8018318 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e8>)
 80181d2:	4952      	ldr	r1, [pc, #328]	; (801831c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2ec>)
 80181d4:	6878      	ldr	r0, [r7, #4]
 80181d6:	47a0      	blx	r4
 80181d8:	2401      	movs	r4, #1
 80181da:	e186      	b.n	80184ea <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x4ba>
    TF_LITE_ENSURE(context, affine_quantization->zero_point);
 80181dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80181e0:	685b      	ldr	r3, [r3, #4]
 80181e2:	2b00      	cmp	r3, #0
 80181e4:	d10a      	bne.n	80181fc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1cc>
 80181e6:	687b      	ldr	r3, [r7, #4]
 80181e8:	695c      	ldr	r4, [r3, #20]
 80181ea:	4b56      	ldr	r3, [pc, #344]	; (8018344 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x314>)
 80181ec:	9300      	str	r3, [sp, #0]
 80181ee:	2351      	movs	r3, #81	; 0x51
 80181f0:	4a49      	ldr	r2, [pc, #292]	; (8018318 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e8>)
 80181f2:	494a      	ldr	r1, [pc, #296]	; (801831c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2ec>)
 80181f4:	6878      	ldr	r0, [r7, #4]
 80181f6:	47a0      	blx	r4
 80181f8:	2401      	movs	r4, #1
 80181fa:	e176      	b.n	80184ea <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x4ba>
    TF_LITE_ENSURE(
 80181fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8018200:	681b      	ldr	r3, [r3, #0]
 8018202:	681b      	ldr	r3, [r3, #0]
 8018204:	2b01      	cmp	r3, #1
 8018206:	d018      	beq.n	801823a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x20a>
 8018208:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801820c:	681b      	ldr	r3, [r3, #0]
 801820e:	681a      	ldr	r2, [r3, #0]
 8018210:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8018214:	6899      	ldr	r1, [r3, #8]
 8018216:	4b4c      	ldr	r3, [pc, #304]	; (8018348 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x318>)
 8018218:	681b      	ldr	r3, [r3, #0]
 801821a:	009b      	lsls	r3, r3, #2
 801821c:	440b      	add	r3, r1
 801821e:	685b      	ldr	r3, [r3, #4]
 8018220:	429a      	cmp	r2, r3
 8018222:	d00a      	beq.n	801823a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x20a>
 8018224:	687b      	ldr	r3, [r7, #4]
 8018226:	695c      	ldr	r4, [r3, #20]
 8018228:	4b48      	ldr	r3, [pc, #288]	; (801834c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x31c>)
 801822a:	9300      	str	r3, [sp, #0]
 801822c:	2352      	movs	r3, #82	; 0x52
 801822e:	4a3a      	ldr	r2, [pc, #232]	; (8018318 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e8>)
 8018230:	493a      	ldr	r1, [pc, #232]	; (801831c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2ec>)
 8018232:	6878      	ldr	r0, [r7, #4]
 8018234:	47a0      	blx	r4
 8018236:	2401      	movs	r4, #1
 8018238:	e157      	b.n	80184ea <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x4ba>
        context, affine_quantization->scale->size == 1 ||
                     affine_quantization->scale->size ==
                         filter->dims->data[kDepthwiseConvQuantizedDimension]);
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size,
 801823a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801823e:	681b      	ldr	r3, [r3, #0]
 8018240:	681a      	ldr	r2, [r3, #0]
 8018242:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8018246:	685b      	ldr	r3, [r3, #4]
 8018248:	681b      	ldr	r3, [r3, #0]
 801824a:	429a      	cmp	r2, r3
 801824c:	d016      	beq.n	801827c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x24c>
 801824e:	687b      	ldr	r3, [r7, #4]
 8018250:	695c      	ldr	r4, [r3, #20]
 8018252:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8018256:	681b      	ldr	r3, [r3, #0]
 8018258:	681b      	ldr	r3, [r3, #0]
 801825a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801825e:	6852      	ldr	r2, [r2, #4]
 8018260:	6812      	ldr	r2, [r2, #0]
 8018262:	9203      	str	r2, [sp, #12]
 8018264:	9302      	str	r3, [sp, #8]
 8018266:	4b3a      	ldr	r3, [pc, #232]	; (8018350 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x320>)
 8018268:	9301      	str	r3, [sp, #4]
 801826a:	4b3a      	ldr	r3, [pc, #232]	; (8018354 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x324>)
 801826c:	9300      	str	r3, [sp, #0]
 801826e:	2356      	movs	r3, #86	; 0x56
 8018270:	4a29      	ldr	r2, [pc, #164]	; (8018318 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e8>)
 8018272:	4931      	ldr	r1, [pc, #196]	; (8018338 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x308>)
 8018274:	6878      	ldr	r0, [r7, #4]
 8018276:	47a0      	blx	r4
 8018278:	2401      	movs	r4, #1
 801827a:	e136      	b.n	80184ea <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x4ba>
                      affine_quantization->zero_point->size);

    // Allocate memory for per-channel quantization parameters
    const int num_channels =
        filter->dims->data[kDepthwiseConvQuantizedDimension];
 801827c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8018280:	689a      	ldr	r2, [r3, #8]
 8018282:	4b31      	ldr	r3, [pc, #196]	; (8018348 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x318>)
 8018284:	681b      	ldr	r3, [r3, #0]
    const int num_channels =
 8018286:	009b      	lsls	r3, r3, #2
 8018288:	4413      	add	r3, r2
 801828a:	685b      	ldr	r3, [r3, #4]
 801828c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

    data->reference_op_data.per_channel_output_multiplier =
        reinterpret_cast<int32_t*>(context->AllocatePersistentBuffer(
 8018290:	687b      	ldr	r3, [r7, #4]
 8018292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            context, num_channels * sizeof(int32_t)));
 8018294:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
        reinterpret_cast<int32_t*>(context->AllocatePersistentBuffer(
 8018298:	0092      	lsls	r2, r2, #2
 801829a:	4611      	mov	r1, r2
 801829c:	6878      	ldr	r0, [r7, #4]
 801829e:	4798      	blx	r3
 80182a0:	4602      	mov	r2, r0
    data->reference_op_data.per_channel_output_multiplier =
 80182a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80182a6:	625a      	str	r2, [r3, #36]	; 0x24
    data->reference_op_data.per_channel_output_shift =
        reinterpret_cast<int32_t*>(context->AllocatePersistentBuffer(
 80182a8:	687b      	ldr	r3, [r7, #4]
 80182aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            context, num_channels * sizeof(int32_t)));
 80182ac:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
        reinterpret_cast<int32_t*>(context->AllocatePersistentBuffer(
 80182b0:	0092      	lsls	r2, r2, #2
 80182b2:	4611      	mov	r1, r2
 80182b4:	6878      	ldr	r0, [r7, #4]
 80182b6:	4798      	blx	r3
 80182b8:	4602      	mov	r2, r0
    data->reference_op_data.per_channel_output_shift =
 80182ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80182be:	629a      	str	r2, [r3, #40]	; 0x28
  }

  TF_LITE_ENSURE_STATUS(CalculateOpDataDepthwiseConv(
 80182c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80182c4:	9306      	str	r3, [sp, #24]
 80182c6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80182ca:	9305      	str	r3, [sp, #20]
 80182cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80182d0:	9304      	str	r3, [sp, #16]
 80182d2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80182d6:	9303      	str	r3, [sp, #12]
 80182d8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80182dc:	9302      	str	r3, [sp, #8]
 80182de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80182e2:	9301      	str	r3, [sp, #4]
 80182e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80182e8:	9300      	str	r3, [sp, #0]
 80182ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80182ee:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 80182f2:	6839      	ldr	r1, [r7, #0]
 80182f4:	6878      	ldr	r0, [r7, #4]
 80182f6:	f7fb fd23 	bl	8013d40 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>
 80182fa:	4603      	mov	r3, r0
 80182fc:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
 8018300:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8018304:	2b00      	cmp	r3, #0
 8018306:	d027      	beq.n	8018358 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x328>
 8018308:	f897 40bf 	ldrb.w	r4, [r7, #191]	; 0xbf
 801830c:	e0ed      	b.n	80184ea <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x4ba>
 801830e:	bf00      	nop
 8018310:	0803ff68 	.word	0x0803ff68
 8018314:	0802da20 	.word	0x0802da20
 8018318:	0802d9bc 	.word	0x0802d9bc
 801831c:	0802da08 	.word	0x0802da08
 8018320:	0803ff6c 	.word	0x0803ff6c
 8018324:	0802da34 	.word	0x0802da34
 8018328:	0803ff74 	.word	0x0803ff74
 801832c:	0802da48 	.word	0x0802da48
 8018330:	0802da78 	.word	0x0802da78
 8018334:	0802da94 	.word	0x0802da94
 8018338:	0802da5c 	.word	0x0802da5c
 801833c:	0802dab0 	.word	0x0802dab0
 8018340:	0802dac4 	.word	0x0802dac4
 8018344:	0802dae0 	.word	0x0802dae0
 8018348:	0803ff78 	.word	0x0803ff78
 801834c:	0802db00 	.word	0x0802db00
 8018350:	0802db84 	.word	0x0802db84
 8018354:	0802dbac 	.word	0x0802dbac
      context, node, params, input_width, input_height, filter_width,
      filter_height, output_width, output_height, data_type,
      &data->reference_op_data));

  if (input->type == kTfLiteInt8) {
 8018358:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801835c:	781b      	ldrb	r3, [r3, #0]
 801835e:	2b09      	cmp	r3, #9
 8018360:	f040 80c2 	bne.w	80184e8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x4b8>
    RuntimeShape input_shape = GetTensorShape(input);
 8018364:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8018368:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 801836c:	4618      	mov	r0, r3
 801836e:	f7f6 faeb 	bl	800e948 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    RuntimeShape output_shape = GetTensorShape(output);
 8018372:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8018376:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 801837a:	4618      	mov	r0, r3
 801837c:	f7f6 fae4 	bl	800e948 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    RuntimeShape filter_shape = GetTensorShape(filter);
 8018380:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8018384:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8018388:	4618      	mov	r0, r3
 801838a:	f7f6 fadd 	bl	800e948 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 801838e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8018392:	4618      	mov	r0, r3
 8018394:	f7f6 faa8 	bl	800e8e8 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8018398:	4603      	mov	r3, r0
 801839a:	2b04      	cmp	r3, #4
 801839c:	d001      	beq.n	80183a2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x372>
 801839e:	f00e fcae 	bl	8026cfe <abort>
    TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 80183a2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80183a6:	4618      	mov	r0, r3
 80183a8:	f7f6 fa9e 	bl	800e8e8 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80183ac:	4603      	mov	r3, r0
 80183ae:	2b04      	cmp	r3, #4
 80183b0:	d001      	beq.n	80183b6 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x386>
 80183b2:	f00e fca4 	bl	8026cfe <abort>
    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 80183b6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80183ba:	4618      	mov	r0, r3
 80183bc:	f7f6 fa94 	bl	800e8e8 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80183c0:	4603      	mov	r3, r0
 80183c2:	2b04      	cmp	r3, #4
 80183c4:	d001      	beq.n	80183ca <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x39a>
 80183c6:	f00e fc9a 	bl	8026cfe <abort>

    const int batch_size = MatchingDim(input_shape, 0, output_shape, 0);
 80183ca:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 80183ce:	f107 0094 	add.w	r0, r7, #148	; 0x94
 80183d2:	2300      	movs	r3, #0
 80183d4:	2100      	movs	r1, #0
 80183d6:	f7fb f934 	bl	8013642 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80183da:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
    const int output_depth = MatchingDim(output_shape, 3, filter_shape, 3);
 80183de:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80183e2:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 80183e6:	2303      	movs	r3, #3
 80183e8:	2103      	movs	r1, #3
 80183ea:	f7fb f92a 	bl	8013642 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80183ee:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
    TFLITE_DCHECK_EQ(batch_size, 1); /* Only batch = 1 is supported */
 80183f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80183f6:	2b01      	cmp	r3, #1
 80183f8:	d001      	beq.n	80183fe <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3ce>
 80183fa:	f00e fc80 	bl	8026cfe <abort>

    cmsis_nn_dims input_dims;
    input_dims.n = batch_size;
 80183fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8018402:	657b      	str	r3, [r7, #84]	; 0x54
    input_dims.h = input_height;
 8018404:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8018408:	65bb      	str	r3, [r7, #88]	; 0x58
    input_dims.w = input_width;
 801840a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801840e:	65fb      	str	r3, [r7, #92]	; 0x5c
    input_dims.c = input_shape.Dims(3);
 8018410:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8018414:	2103      	movs	r1, #3
 8018416:	4618      	mov	r0, r3
 8018418:	f7fb f81b 	bl	8013452 <_ZNK6tflite12RuntimeShape4DimsEi>
 801841c:	4603      	mov	r3, r0
 801841e:	663b      	str	r3, [r7, #96]	; 0x60

    cmsis_nn_dims filter_dims;
    filter_dims.n = 1;
 8018420:	2301      	movs	r3, #1
 8018422:	647b      	str	r3, [r7, #68]	; 0x44
    filter_dims.h = filter_height;
 8018424:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8018428:	64bb      	str	r3, [r7, #72]	; 0x48
    filter_dims.w = filter_width;
 801842a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801842e:	64fb      	str	r3, [r7, #76]	; 0x4c
    filter_dims.c = output_depth;
 8018430:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8018434:	653b      	str	r3, [r7, #80]	; 0x50

    cmsis_nn_dims output_dims;
    output_dims.n = batch_size;
 8018436:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801843a:	637b      	str	r3, [r7, #52]	; 0x34
    output_dims.h = output_height;
 801843c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8018440:	63bb      	str	r3, [r7, #56]	; 0x38
    output_dims.w = output_width;
 8018442:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8018446:	63fb      	str	r3, [r7, #60]	; 0x3c
    output_dims.c = output_depth;
 8018448:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801844c:	643b      	str	r3, [r7, #64]	; 0x40

    cmsis_nn_dw_conv_params dw_conv_params;
    dw_conv_params.padding.h = data->reference_op_data.padding.height;
 801844e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018452:	685b      	ldr	r3, [r3, #4]
 8018454:	623b      	str	r3, [r7, #32]
    dw_conv_params.padding.w = data->reference_op_data.padding.width;
 8018456:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801845a:	681b      	ldr	r3, [r3, #0]
 801845c:	61fb      	str	r3, [r7, #28]

    const int32_t buf_size = arm_depthwise_conv_wrapper_s8_get_buffer_size(
 801845e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8018462:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8018466:	f107 0154 	add.w	r1, r7, #84	; 0x54
 801846a:	f107 0008 	add.w	r0, r7, #8
 801846e:	f005 fe8e 	bl	801e18e <arm_depthwise_conv_wrapper_s8_get_buffer_size>
 8018472:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
        &dw_conv_params, &input_dims, &filter_dims, &output_dims);

    if (buf_size > 0) {
 8018476:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801847a:	2b00      	cmp	r3, #0
 801847c:	dd13      	ble.n	80184a6 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x476>
      TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
 801847e:	687b      	ldr	r3, [r7, #4]
 8018480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018482:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8018486:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 801848a:	3234      	adds	r2, #52	; 0x34
 801848c:	6878      	ldr	r0, [r7, #4]
 801848e:	4798      	blx	r3
 8018490:	4603      	mov	r3, r0
 8018492:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 8018496:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 801849a:	2b00      	cmp	r3, #0
 801849c:	d008      	beq.n	80184b0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x480>
 801849e:	f897 40af 	ldrb.w	r4, [r7, #175]	; 0xaf
 80184a2:	2500      	movs	r5, #0
 80184a4:	e005      	b.n	80184b2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x482>
          context, buf_size, &data->buffer_idx));
    } else {
      data->buffer_idx = -1;
 80184a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80184aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80184ae:	635a      	str	r2, [r3, #52]	; 0x34
    RuntimeShape filter_shape = GetTensorShape(filter);
 80184b0:	2501      	movs	r5, #1
 80184b2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80184b6:	4618      	mov	r0, r3
 80184b8:	f7f6 fa0b 	bl	800e8d2 <_ZN6tflite12RuntimeShapeD1Ev>
 80184bc:	2d01      	cmp	r5, #1
 80184be:	d001      	beq.n	80184c4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x494>
 80184c0:	2500      	movs	r5, #0
 80184c2:	e000      	b.n	80184c6 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x496>
    RuntimeShape output_shape = GetTensorShape(output);
 80184c4:	2501      	movs	r5, #1
 80184c6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80184ca:	4618      	mov	r0, r3
 80184cc:	f7f6 fa01 	bl	800e8d2 <_ZN6tflite12RuntimeShapeD1Ev>
 80184d0:	2d01      	cmp	r5, #1
 80184d2:	d001      	beq.n	80184d8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x4a8>
 80184d4:	2500      	movs	r5, #0
 80184d6:	e000      	b.n	80184da <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x4aa>
    RuntimeShape input_shape = GetTensorShape(input);
 80184d8:	2501      	movs	r5, #1
 80184da:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80184de:	4618      	mov	r0, r3
 80184e0:	f7f6 f9f7 	bl	800e8d2 <_ZN6tflite12RuntimeShapeD1Ev>
 80184e4:	2d01      	cmp	r5, #1
 80184e6:	d100      	bne.n	80184ea <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x4ba>
    }
  }
  return kTfLiteOk;
 80184e8:	2400      	movs	r4, #0
 80184ea:	4623      	mov	r3, r4
}
 80184ec:	4618      	mov	r0, r3
 80184ee:	37f8      	adds	r7, #248	; 0xf8
 80184f0:	46bd      	mov	sp, r7
 80184f2:	bdb0      	pop	{r4, r5, r7, pc}

080184f4 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_>:
void EvalQuantizedPerChannel(TfLiteContext* context, TfLiteNode* node,
                             const TfLiteDepthwiseConvParams& params,
                             const OpData& data, const TfLiteEvalTensor* input,
                             const TfLiteEvalTensor* filter,
                             const TfLiteEvalTensor* bias,
                             TfLiteEvalTensor* output) {
 80184f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80184f6:	b0f1      	sub	sp, #452	; 0x1c4
 80184f8:	af08      	add	r7, sp, #32
 80184fa:	f107 0414 	add.w	r4, r7, #20
 80184fe:	6020      	str	r0, [r4, #0]
 8018500:	f107 0010 	add.w	r0, r7, #16
 8018504:	6001      	str	r1, [r0, #0]
 8018506:	f107 010c 	add.w	r1, r7, #12
 801850a:	600a      	str	r2, [r1, #0]
 801850c:	f107 0208 	add.w	r2, r7, #8
 8018510:	6013      	str	r3, [r2, #0]
  cmsis_nn_dw_conv_params dw_conv_params;
  dw_conv_params.dilation.h = params.dilation_height_factor;
 8018512:	f107 030c 	add.w	r3, r7, #12
 8018516:	681b      	ldr	r3, [r3, #0]
 8018518:	699b      	ldr	r3, [r3, #24]
 801851a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  dw_conv_params.dilation.w = params.dilation_width_factor;
 801851e:	f107 030c 	add.w	r3, r7, #12
 8018522:	681b      	ldr	r3, [r3, #0]
 8018524:	695b      	ldr	r3, [r3, #20]
 8018526:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  // Call to reference implementation can be removed when dilation is supported
  // in the optimized implementations.
  if (1 == dw_conv_params.dilation.h && 1 == dw_conv_params.dilation.w) {
 801852a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801852e:	2b01      	cmp	r3, #1
 8018530:	f040 8170 	bne.w	8018814 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_+0x320>
 8018534:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8018538:	2b01      	cmp	r3, #1
 801853a:	f040 816b 	bne.w	8018814 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_+0x320>
    dw_conv_params.input_offset = -data.reference_op_data.input_zero_point;
 801853e:	f107 0308 	add.w	r3, r7, #8
 8018542:	681b      	ldr	r3, [r3, #0]
 8018544:	691b      	ldr	r3, [r3, #16]
 8018546:	425b      	negs	r3, r3
 8018548:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    dw_conv_params.output_offset = data.reference_op_data.output_zero_point;
 801854c:	f107 0308 	add.w	r3, r7, #8
 8018550:	681b      	ldr	r3, [r3, #0]
 8018552:	699b      	ldr	r3, [r3, #24]
 8018554:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    dw_conv_params.stride.h = params.stride_height;
 8018558:	f107 030c 	add.w	r3, r7, #12
 801855c:	681b      	ldr	r3, [r3, #0]
 801855e:	689b      	ldr	r3, [r3, #8]
 8018560:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    dw_conv_params.stride.w = params.stride_width;
 8018564:	f107 030c 	add.w	r3, r7, #12
 8018568:	681b      	ldr	r3, [r3, #0]
 801856a:	685b      	ldr	r3, [r3, #4]
 801856c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    dw_conv_params.padding.h = data.reference_op_data.padding.height;
 8018570:	f107 0308 	add.w	r3, r7, #8
 8018574:	681b      	ldr	r3, [r3, #0]
 8018576:	685b      	ldr	r3, [r3, #4]
 8018578:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    dw_conv_params.padding.w = data.reference_op_data.padding.width;
 801857c:	f107 0308 	add.w	r3, r7, #8
 8018580:	681b      	ldr	r3, [r3, #0]
 8018582:	681b      	ldr	r3, [r3, #0]
 8018584:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    // TODO(b/130439627): Use calculated value for clamping.
    dw_conv_params.activation.min = std::numeric_limits<int8_t>::min();
 8018588:	f7f5 f9f1 	bl	800d96e <_ZNSt14numeric_limitsIaE3minEv>
 801858c:	4603      	mov	r3, r0
 801858e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    dw_conv_params.activation.max = std::numeric_limits<int8_t>::max();
 8018592:	f7f5 f9f5 	bl	800d980 <_ZNSt14numeric_limitsIaE3maxEv>
 8018596:	4603      	mov	r3, r0
 8018598:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    dw_conv_params.ch_mult = params.depth_multiplier;
 801859c:	f107 030c 	add.w	r3, r7, #12
 80185a0:	681b      	ldr	r3, [r3, #0]
 80185a2:	68db      	ldr	r3, [r3, #12]
 80185a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

    cmsis_nn_per_channel_quant_params quant_params;
    quant_params.multiplier =
        data.reference_op_data.per_channel_output_multiplier;
 80185a8:	f107 0308 	add.w	r3, r7, #8
 80185ac:	681b      	ldr	r3, [r3, #0]
 80185ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    quant_params.multiplier =
 80185b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    quant_params.shift = data.reference_op_data.per_channel_output_shift;
 80185b4:	f107 0308 	add.w	r3, r7, #8
 80185b8:	681b      	ldr	r3, [r3, #0]
 80185ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80185bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

    RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 80185c0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80185c4:	f8d7 11bc 	ldr.w	r1, [r7, #444]	; 0x1bc
 80185c8:	4618      	mov	r0, r3
 80185ca:	f7fb fcf0 	bl	8013fae <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 80185ce:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80185d2:	f8d7 11b8 	ldr.w	r1, [r7, #440]	; 0x1b8
 80185d6:	4618      	mov	r0, r3
 80185d8:	f7fb fce9 	bl	8013fae <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 80185dc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80185e0:	f8d7 11c4 	ldr.w	r1, [r7, #452]	; 0x1c4
 80185e4:	4618      	mov	r0, r3
 80185e6:	f7fb fce2 	bl	8013fae <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    RuntimeShape bias_shape = tflite::micro::GetTensorShape(bias);
 80185ea:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80185ee:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 80185f2:	4618      	mov	r0, r3
 80185f4:	f7fb fcdb 	bl	8013fae <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>

    TFLITE_DCHECK_LE(dw_conv_params.activation.min,
 80185f8:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 80185fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018600:	429a      	cmp	r2, r3
 8018602:	dd01      	ble.n	8018608 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_+0x114>
 8018604:	f00e fb7b 	bl	8026cfe <abort>
                     dw_conv_params.activation.max);

    const int batch_size = MatchingDim(input_shape, 0, output_shape, 0);
 8018608:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 801860c:	f107 0094 	add.w	r0, r7, #148	; 0x94
 8018610:	2300      	movs	r3, #0
 8018612:	2100      	movs	r1, #0
 8018614:	f7fb f815 	bl	8013642 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8018618:	f8c7 019c 	str.w	r0, [r7, #412]	; 0x19c
    const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
 801861c:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8018620:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 8018624:	2303      	movs	r3, #3
 8018626:	2103      	movs	r1, #3
 8018628:	f7fb f80b 	bl	8013642 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 801862c:	f8c7 0198 	str.w	r0, [r7, #408]	; 0x198

    if (tflite::micro::GetTensorData<int8_t>(bias)) {
 8018630:	f8d7 01c0 	ldr.w	r0, [r7, #448]	; 0x1c0
 8018634:	f7fa feed 	bl	8013412 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8018638:	4603      	mov	r3, r0
 801863a:	2b00      	cmp	r3, #0
 801863c:	bf14      	ite	ne
 801863e:	2301      	movne	r3, #1
 8018640:	2300      	moveq	r3, #0
 8018642:	b2db      	uxtb	r3, r3
 8018644:	2b00      	cmp	r3, #0
 8018646:	d00b      	beq.n	8018660 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_+0x16c>
      TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 8018648:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801864c:	4618      	mov	r0, r3
 801864e:	f7fa ff26 	bl	801349e <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 8018652:	4602      	mov	r2, r0
 8018654:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8018658:	4293      	cmp	r3, r2
 801865a:	d001      	beq.n	8018660 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_+0x16c>
 801865c:	f00e fb4f 	bl	8026cfe <abort>
    }

    cmsis_nn_dims input_dims;
    input_dims.n = batch_size;
 8018660:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8018664:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8018668:	601a      	str	r2, [r3, #0]
    input_dims.h = input_shape.Dims(1);
 801866a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801866e:	2101      	movs	r1, #1
 8018670:	4618      	mov	r0, r3
 8018672:	f7fa feee 	bl	8013452 <_ZNK6tflite12RuntimeShape4DimsEi>
 8018676:	4602      	mov	r2, r0
 8018678:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801867c:	605a      	str	r2, [r3, #4]
    input_dims.w = input_shape.Dims(2);
 801867e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8018682:	2102      	movs	r1, #2
 8018684:	4618      	mov	r0, r3
 8018686:	f7fa fee4 	bl	8013452 <_ZNK6tflite12RuntimeShape4DimsEi>
 801868a:	4602      	mov	r2, r0
 801868c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8018690:	609a      	str	r2, [r3, #8]
    input_dims.c = input_shape.Dims(3);
 8018692:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8018696:	2103      	movs	r1, #3
 8018698:	4618      	mov	r0, r3
 801869a:	f7fa feda 	bl	8013452 <_ZNK6tflite12RuntimeShape4DimsEi>
 801869e:	4602      	mov	r2, r0
 80186a0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80186a4:	60da      	str	r2, [r3, #12]

    cmsis_nn_dims filter_dims;
    filter_dims.n = filter_shape.Dims(0);
 80186a6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80186aa:	2100      	movs	r1, #0
 80186ac:	4618      	mov	r0, r3
 80186ae:	f7fa fed0 	bl	8013452 <_ZNK6tflite12RuntimeShape4DimsEi>
 80186b2:	4602      	mov	r2, r0
 80186b4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80186b8:	601a      	str	r2, [r3, #0]
    filter_dims.h = filter_shape.Dims(1);
 80186ba:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80186be:	2101      	movs	r1, #1
 80186c0:	4618      	mov	r0, r3
 80186c2:	f7fa fec6 	bl	8013452 <_ZNK6tflite12RuntimeShape4DimsEi>
 80186c6:	4602      	mov	r2, r0
 80186c8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80186cc:	605a      	str	r2, [r3, #4]
    filter_dims.w = filter_shape.Dims(2);
 80186ce:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80186d2:	2102      	movs	r1, #2
 80186d4:	4618      	mov	r0, r3
 80186d6:	f7fa febc 	bl	8013452 <_ZNK6tflite12RuntimeShape4DimsEi>
 80186da:	4602      	mov	r2, r0
 80186dc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80186e0:	609a      	str	r2, [r3, #8]
    filter_dims.c = output_depth;
 80186e2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80186e6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80186ea:	60da      	str	r2, [r3, #12]

    cmsis_nn_dims bias_dims;
    bias_dims.n = 1;
 80186ec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80186f0:	2201      	movs	r2, #1
 80186f2:	601a      	str	r2, [r3, #0]
    bias_dims.h = 1;
 80186f4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80186f8:	2201      	movs	r2, #1
 80186fa:	605a      	str	r2, [r3, #4]
    bias_dims.w = 1;
 80186fc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8018700:	2201      	movs	r2, #1
 8018702:	609a      	str	r2, [r3, #8]
    bias_dims.c = output_depth;
 8018704:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8018708:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 801870c:	60da      	str	r2, [r3, #12]

    cmsis_nn_dims output_dims;
    output_dims.n = batch_size;
 801870e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8018712:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8018716:	601a      	str	r2, [r3, #0]
    output_dims.h = output_shape.Dims(1);
 8018718:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 801871c:	2101      	movs	r1, #1
 801871e:	4618      	mov	r0, r3
 8018720:	f7fa fe97 	bl	8013452 <_ZNK6tflite12RuntimeShape4DimsEi>
 8018724:	4602      	mov	r2, r0
 8018726:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801872a:	605a      	str	r2, [r3, #4]
    output_dims.w = output_shape.Dims(2);
 801872c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8018730:	2102      	movs	r1, #2
 8018732:	4618      	mov	r0, r3
 8018734:	f7fa fe8d 	bl	8013452 <_ZNK6tflite12RuntimeShape4DimsEi>
 8018738:	4602      	mov	r2, r0
 801873a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801873e:	609a      	str	r2, [r3, #8]
    output_dims.c = output_depth;
 8018740:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8018744:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8018748:	60da      	str	r2, [r3, #12]

    cmsis_nn_context ctx;
    ctx.buf = nullptr;
 801874a:	f107 031c 	add.w	r3, r7, #28
 801874e:	2200      	movs	r2, #0
 8018750:	601a      	str	r2, [r3, #0]
    /* 'size' is unused */
    ctx.size = 0;
 8018752:	f107 031c 	add.w	r3, r7, #28
 8018756:	2200      	movs	r2, #0
 8018758:	605a      	str	r2, [r3, #4]

    if (data.buffer_idx > -1) {
 801875a:	f107 0308 	add.w	r3, r7, #8
 801875e:	681b      	ldr	r3, [r3, #0]
 8018760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018762:	2b00      	cmp	r3, #0
 8018764:	db0f      	blt.n	8018786 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_+0x292>
      ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
 8018766:	f107 0314 	add.w	r3, r7, #20
 801876a:	681b      	ldr	r3, [r3, #0]
 801876c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801876e:	f107 0208 	add.w	r2, r7, #8
 8018772:	6812      	ldr	r2, [r2, #0]
 8018774:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8018776:	f107 0214 	add.w	r2, r7, #20
 801877a:	6810      	ldr	r0, [r2, #0]
 801877c:	4798      	blx	r3
 801877e:	4602      	mov	r2, r0
 8018780:	f107 031c 	add.w	r3, r7, #28
 8018784:	601a      	str	r2, [r3, #0]
    }

    TFLITE_DCHECK_EQ(
 8018786:	f8d7 01b8 	ldr.w	r0, [r7, #440]	; 0x1b8
 801878a:	f7fa fe42 	bl	8013412 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 801878e:	4605      	mov	r5, r0
 8018790:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 8018794:	f7fa fe3d 	bl	8013412 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8018798:	4606      	mov	r6, r0
 801879a:	f8d7 01c0 	ldr.w	r0, [r7, #448]	; 0x1c0
 801879e:	f7fa febb 	bl	8013518 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 80187a2:	6078      	str	r0, [r7, #4]
 80187a4:	f8d7 01c4 	ldr.w	r0, [r7, #452]	; 0x1c4
 80187a8:	f7fa fe42 	bl	8013430 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 80187ac:	4603      	mov	r3, r0
 80187ae:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80187b2:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 80187b6:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 80187ba:	f107 001c 	add.w	r0, r7, #28
 80187be:	9306      	str	r3, [sp, #24]
 80187c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80187c4:	9305      	str	r3, [sp, #20]
 80187c6:	687b      	ldr	r3, [r7, #4]
 80187c8:	9304      	str	r3, [sp, #16]
 80187ca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80187ce:	9303      	str	r3, [sp, #12]
 80187d0:	9602      	str	r6, [sp, #8]
 80187d2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80187d6:	9301      	str	r3, [sp, #4]
 80187d8:	9500      	str	r5, [sp, #0]
 80187da:	4623      	mov	r3, r4
 80187dc:	f005 fc6f 	bl	801e0be <arm_depthwise_conv_wrapper_s8>
 80187e0:	4603      	mov	r3, r0
 80187e2:	2b00      	cmp	r3, #0
 80187e4:	d001      	beq.n	80187ea <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_+0x2f6>
 80187e6:	f00e fa8a 	bl	8026cfe <abort>
    RuntimeShape bias_shape = tflite::micro::GetTensorShape(bias);
 80187ea:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80187ee:	4618      	mov	r0, r3
 80187f0:	f7f6 f86f 	bl	800e8d2 <_ZN6tflite12RuntimeShapeD1Ev>
    RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 80187f4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80187f8:	4618      	mov	r0, r3
 80187fa:	f7f6 f86a 	bl	800e8d2 <_ZN6tflite12RuntimeShapeD1Ev>
    RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 80187fe:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8018802:	4618      	mov	r0, r3
 8018804:	f7f6 f865 	bl	800e8d2 <_ZN6tflite12RuntimeShapeD1Ev>
    RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 8018808:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 801880c:	4618      	mov	r0, r3
 801880e:	f7f6 f860 	bl	800e8d2 <_ZN6tflite12RuntimeShapeD1Ev>
            &ctx, &dw_conv_params, &quant_params, &input_dims,
            tflite::micro::GetTensorData<int8_t>(input), &filter_dims,
            tflite::micro::GetTensorData<int8_t>(filter), &bias_dims,
            tflite::micro::GetTensorData<int32_t>(bias), &output_dims,
            tflite::micro::GetTensorData<int8_t>(output)),
        ARM_MATH_SUCCESS);
 8018812:	e06e      	b.n	80188f2 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_+0x3fe>
  } else {
    reference_integer_ops::DepthwiseConvPerChannel(
        DepthwiseConvParamsQuantized(params, data.reference_op_data),
 8018814:	f107 0308 	add.w	r3, r7, #8
 8018818:	681a      	ldr	r2, [r3, #0]
 801881a:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 801881e:	f107 030c 	add.w	r3, r7, #12
 8018822:	6819      	ldr	r1, [r3, #0]
 8018824:	f7fb fa35 	bl	8013c92 <_ZN6tflite28DepthwiseConvParamsQuantizedERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE>
        data.reference_op_data.per_channel_output_multiplier,
 8018828:	f107 0308 	add.w	r3, r7, #8
 801882c:	681b      	ldr	r3, [r3, #0]
 801882e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
        data.reference_op_data.per_channel_output_shift,
 8018830:	f107 0308 	add.w	r3, r7, #8
 8018834:	681b      	ldr	r3, [r3, #0]
 8018836:	6a9d      	ldr	r5, [r3, #40]	; 0x28
        tflite::micro::GetTensorShape(input),
 8018838:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801883c:	f8d7 11b8 	ldr.w	r1, [r7, #440]	; 0x1b8
 8018840:	4618      	mov	r0, r3
 8018842:	f7fb fbb4 	bl	8013fae <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    reference_integer_ops::DepthwiseConvPerChannel(
 8018846:	f8d7 01b8 	ldr.w	r0, [r7, #440]	; 0x1b8
 801884a:	f7fa fde2 	bl	8013412 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 801884e:	4606      	mov	r6, r0
        tflite::micro::GetTensorData<int8_t>(input),
        tflite::micro::GetTensorShape(filter),
 8018850:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8018854:	f8d7 11bc 	ldr.w	r1, [r7, #444]	; 0x1bc
 8018858:	4618      	mov	r0, r3
 801885a:	f7fb fba8 	bl	8013fae <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    reference_integer_ops::DepthwiseConvPerChannel(
 801885e:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 8018862:	f7fa fdd6 	bl	8013412 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8018866:	6078      	str	r0, [r7, #4]
        tflite::micro::GetTensorData<int8_t>(filter),
        tflite::micro::GetTensorShape(bias),
 8018868:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 801886c:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 8018870:	4618      	mov	r0, r3
 8018872:	f7fb fb9c 	bl	8013fae <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    reference_integer_ops::DepthwiseConvPerChannel(
 8018876:	f8d7 01c0 	ldr.w	r0, [r7, #448]	; 0x1c0
 801887a:	f7fa fe4d 	bl	8013518 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 801887e:	6038      	str	r0, [r7, #0]
        tflite::micro::GetTensorData<int32_t>(bias),
        tflite::micro::GetTensorShape(output),
 8018880:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8018884:	f8d7 11c4 	ldr.w	r1, [r7, #452]	; 0x1c4
 8018888:	4618      	mov	r0, r3
 801888a:	f7fb fb90 	bl	8013fae <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    reference_integer_ops::DepthwiseConvPerChannel(
 801888e:	f8d7 01c4 	ldr.w	r0, [r7, #452]	; 0x1c4
 8018892:	f7fa fdcd 	bl	8013430 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 8018896:	4603      	mov	r3, r0
 8018898:	f507 729c 	add.w	r2, r7, #312	; 0x138
 801889c:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 80188a0:	9306      	str	r3, [sp, #24]
 80188a2:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80188a6:	9305      	str	r3, [sp, #20]
 80188a8:	683b      	ldr	r3, [r7, #0]
 80188aa:	9304      	str	r3, [sp, #16]
 80188ac:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80188b0:	9303      	str	r3, [sp, #12]
 80188b2:	687b      	ldr	r3, [r7, #4]
 80188b4:	9302      	str	r3, [sp, #8]
 80188b6:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80188ba:	9301      	str	r3, [sp, #4]
 80188bc:	9600      	str	r6, [sp, #0]
 80188be:	4613      	mov	r3, r2
 80188c0:	462a      	mov	r2, r5
 80188c2:	4621      	mov	r1, r4
 80188c4:	f7ff f9dc 	bl	8017c80 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>
        tflite::micro::GetTensorShape(output),
 80188c8:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80188cc:	4618      	mov	r0, r3
 80188ce:	f7f6 f800 	bl	800e8d2 <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorShape(bias),
 80188d2:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80188d6:	4618      	mov	r0, r3
 80188d8:	f7f5 fffb 	bl	800e8d2 <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorShape(filter),
 80188dc:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80188e0:	4618      	mov	r0, r3
 80188e2:	f7f5 fff6 	bl	800e8d2 <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorShape(input),
 80188e6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80188ea:	4618      	mov	r0, r3
 80188ec:	f7f5 fff1 	bl	800e8d2 <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorData<int8_t>(output));
  }
}
 80188f0:	bf00      	nop
 80188f2:	bf00      	nop
 80188f4:	f507 77d2 	add.w	r7, r7, #420	; 0x1a4
 80188f8:	46bd      	mov	sp, r7
 80188fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080188fc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 80188fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80188fe:	b0b7      	sub	sp, #220	; 0xdc
 8018900:	af06      	add	r7, sp, #24
 8018902:	6078      	str	r0, [r7, #4]
 8018904:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 8018906:	683b      	ldr	r3, [r7, #0]
 8018908:	691b      	ldr	r3, [r3, #16]
 801890a:	2b00      	cmp	r3, #0
 801890c:	d101      	bne.n	8018912 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x16>
 801890e:	f00e f9f6 	bl	8026cfe <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 8018912:	683b      	ldr	r3, [r7, #0]
 8018914:	695b      	ldr	r3, [r3, #20]
 8018916:	2b00      	cmp	r3, #0
 8018918:	d101      	bne.n	801891e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x22>
 801891a:	f00e f9f0 	bl	8026cfe <abort>

  const auto& params =
 801891e:	683b      	ldr	r3, [r7, #0]
 8018920:	695b      	ldr	r3, [r3, #20]
 8018922:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      *(reinterpret_cast<TfLiteDepthwiseConvParams*>(node->builtin_data));
  const OpData& data = *(static_cast<OpData*>(node->user_data));
 8018926:	683b      	ldr	r3, [r7, #0]
 8018928:	691b      	ldr	r3, [r3, #16]
 801892a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kDepthwiseConvOutputTensor);
 801892e:	4b60      	ldr	r3, [pc, #384]	; (8018ab0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1b4>)
 8018930:	681b      	ldr	r3, [r3, #0]
 8018932:	461a      	mov	r2, r3
 8018934:	6839      	ldr	r1, [r7, #0]
 8018936:	6878      	ldr	r0, [r7, #4]
 8018938:	f7fa fd2b 	bl	8013392 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 801893c:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kDepthwiseConvInputTensor);
 8018940:	4b5c      	ldr	r3, [pc, #368]	; (8018ab4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1b8>)
 8018942:	681b      	ldr	r3, [r3, #0]
 8018944:	461a      	mov	r2, r3
 8018946:	6839      	ldr	r1, [r7, #0]
 8018948:	6878      	ldr	r0, [r7, #4]
 801894a:	f7fa fd12 	bl	8013372 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 801894e:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kDepthwiseConvWeightsTensor);
 8018952:	4b59      	ldr	r3, [pc, #356]	; (8018ab8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1bc>)
 8018954:	681b      	ldr	r3, [r3, #0]
 8018956:	461a      	mov	r2, r3
 8018958:	6839      	ldr	r1, [r7, #0]
 801895a:	6878      	ldr	r0, [r7, #4]
 801895c:	f7fa fd09 	bl	8013372 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8018960:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
  const TfLiteEvalTensor* bias =
      (NumInputs(node) == 3)
 8018964:	6838      	ldr	r0, [r7, #0]
 8018966:	f7fa fdbd 	bl	80134e4 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 801896a:	4603      	mov	r3, r0
          ? tflite::micro::GetEvalInput(context, node, kDepthwiseConvBiasTensor)
 801896c:	2b03      	cmp	r3, #3
 801896e:	d108      	bne.n	8018982 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x86>
 8018970:	4b52      	ldr	r3, [pc, #328]	; (8018abc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1c0>)
 8018972:	681b      	ldr	r3, [r3, #0]
 8018974:	461a      	mov	r2, r3
 8018976:	6839      	ldr	r1, [r7, #0]
 8018978:	6878      	ldr	r0, [r7, #4]
 801897a:	f7fa fcfa 	bl	8013372 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 801897e:	4603      	mov	r3, r0
 8018980:	e000      	b.n	8018984 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x88>
 8018982:	2300      	movs	r3, #0
          : nullptr;
 8018984:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  switch (input->type) {  // Already know in/out types are same.
 8018988:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801898c:	7a1b      	ldrb	r3, [r3, #8]
 801898e:	2b01      	cmp	r3, #1
 8018990:	d002      	beq.n	8018998 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x9c>
 8018992:	2b09      	cmp	r3, #9
 8018994:	d061      	beq.n	8018a5a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x15e>
 8018996:	e075      	b.n	8018a84 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x188>
    case kTfLiteFloat32: {
      tflite::reference_ops::DepthwiseConv(
          DepthwiseConvParamsFloat(params, data.reference_op_data),
 8018998:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 801899c:	f107 0308 	add.w	r3, r7, #8
 80189a0:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 80189a4:	4618      	mov	r0, r3
 80189a6:	f7fb f933 	bl	8013c10 <_ZN6tflite24DepthwiseConvParamsFloatERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE>
          tflite::micro::GetTensorShape(input),
 80189aa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80189ae:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 80189b2:	4618      	mov	r0, r3
 80189b4:	f7fb fafb 	bl	8013fae <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::DepthwiseConv(
 80189b8:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 80189bc:	f7fa fd09 	bl	80133d2 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 80189c0:	4606      	mov	r6, r0
          tflite::micro::GetTensorData<float>(input),
          tflite::micro::GetTensorShape(filter),
 80189c2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80189c6:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 80189ca:	4618      	mov	r0, r3
 80189cc:	f7fb faef 	bl	8013fae <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::DepthwiseConv(
 80189d0:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80189d4:	f7fa fcfd 	bl	80133d2 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 80189d8:	4604      	mov	r4, r0
          tflite::micro::GetTensorData<float>(filter),
          tflite::micro::GetTensorShape(bias),
 80189da:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80189de:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80189e2:	4618      	mov	r0, r3
 80189e4:	f7fb fae3 	bl	8013fae <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::DepthwiseConv(
 80189e8:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 80189ec:	f7fa fcf1 	bl	80133d2 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 80189f0:	4605      	mov	r5, r0
          tflite::micro::GetTensorData<float>(bias),
          tflite::micro::GetTensorShape(output),
 80189f2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80189f6:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 80189fa:	4618      	mov	r0, r3
 80189fc:	f7fb fad7 	bl	8013fae <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::DepthwiseConv(
 8018a00:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8018a04:	f7fa fcf4 	bl	80133f0 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 8018a08:	4603      	mov	r3, r0
 8018a0a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8018a0e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8018a12:	f107 0008 	add.w	r0, r7, #8
 8018a16:	9304      	str	r3, [sp, #16]
 8018a18:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8018a1c:	9303      	str	r3, [sp, #12]
 8018a1e:	9502      	str	r5, [sp, #8]
 8018a20:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8018a24:	9301      	str	r3, [sp, #4]
 8018a26:	9400      	str	r4, [sp, #0]
 8018a28:	4613      	mov	r3, r2
 8018a2a:	4632      	mov	r2, r6
 8018a2c:	f7fe ffa2 	bl	8017974 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>
          tflite::micro::GetTensorShape(output),
 8018a30:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8018a34:	4618      	mov	r0, r3
 8018a36:	f7f5 ff4c 	bl	800e8d2 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(bias),
 8018a3a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8018a3e:	4618      	mov	r0, r3
 8018a40:	f7f5 ff47 	bl	800e8d2 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(filter),
 8018a44:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8018a48:	4618      	mov	r0, r3
 8018a4a:	f7f5 ff42 	bl	800e8d2 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(input),
 8018a4e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018a52:	4618      	mov	r0, r3
 8018a54:	f7f5 ff3d 	bl	800e8d2 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorData<float>(output));
      break;
 8018a58:	e025      	b.n	8018aa6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1aa>
    }
    case kTfLiteInt8:
      EvalQuantizedPerChannel(context, node, params, data, input, filter, bias,
 8018a5a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8018a5e:	9303      	str	r3, [sp, #12]
 8018a60:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018a64:	9302      	str	r3, [sp, #8]
 8018a66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8018a6a:	9301      	str	r3, [sp, #4]
 8018a6c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8018a70:	9300      	str	r3, [sp, #0]
 8018a72:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8018a76:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8018a7a:	6839      	ldr	r1, [r7, #0]
 8018a7c:	6878      	ldr	r0, [r7, #4]
 8018a7e:	f7ff fd39 	bl	80184f4 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_>
                              output);
      break;
 8018a82:	e010      	b.n	8018aa6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1aa>
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 8018a84:	687b      	ldr	r3, [r7, #4]
 8018a86:	695c      	ldr	r4, [r3, #20]
 8018a88:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8018a8c:	7a1b      	ldrb	r3, [r3, #8]
 8018a8e:	4618      	mov	r0, r3
 8018a90:	f7f1 febc 	bl	800a80c <TfLiteTypeGetName>
 8018a94:	4602      	mov	r2, r0
 8018a96:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8018a9a:	7a1b      	ldrb	r3, [r3, #8]
 8018a9c:	4908      	ldr	r1, [pc, #32]	; (8018ac0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1c4>)
 8018a9e:	6878      	ldr	r0, [r7, #4]
 8018aa0:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 8018aa2:	2301      	movs	r3, #1
 8018aa4:	e000      	b.n	8018aa8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ac>
  }
  return kTfLiteOk;
 8018aa6:	2300      	movs	r3, #0
}
 8018aa8:	4618      	mov	r0, r3
 8018aaa:	37c4      	adds	r7, #196	; 0xc4
 8018aac:	46bd      	mov	sp, r7
 8018aae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018ab0:	0803ff74 	.word	0x0803ff74
 8018ab4:	0803ff68 	.word	0x0803ff68
 8018ab8:	0803ff6c 	.word	0x0803ff6c
 8018abc:	0803ff70 	.word	0x0803ff70
 8018ac0:	0802dbd0 	.word	0x0802dbd0

08018ac4 <_ZN6tflite26Register_DEPTHWISE_CONV_2DEv>:

}  // namespace

TfLiteRegistration Register_DEPTHWISE_CONV_2D() {
 8018ac4:	b4b0      	push	{r4, r5, r7}
 8018ac6:	b083      	sub	sp, #12
 8018ac8:	af00      	add	r7, sp, #0
 8018aca:	6078      	str	r0, [r7, #4]
          /*prepare=*/Prepare,
          /*invoke=*/Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 8018acc:	687b      	ldr	r3, [r7, #4]
 8018ace:	4a07      	ldr	r2, [pc, #28]	; (8018aec <_ZN6tflite26Register_DEPTHWISE_CONV_2DEv+0x28>)
 8018ad0:	461c      	mov	r4, r3
 8018ad2:	4615      	mov	r5, r2
 8018ad4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018ad6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018ad8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8018adc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8018ae0:	6878      	ldr	r0, [r7, #4]
 8018ae2:	370c      	adds	r7, #12
 8018ae4:	46bd      	mov	sp, r7
 8018ae6:	bcb0      	pop	{r4, r5, r7}
 8018ae8:	4770      	bx	lr
 8018aea:	bf00      	nop
 8018aec:	0802dbec 	.word	0x0802dbec

08018af0 <_ZN6tflite12_GLOBAL__N_120AverageEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS0_6OpDataEPK16TfLiteEvalTensorPSC_>:
};

void AverageEvalQuantized(TfLiteContext* context, const TfLiteNode* node,
                          const TfLitePoolParams* params, const OpData& data,
                          const TfLiteEvalTensor* input,
                          TfLiteEvalTensor* output) {
 8018af0:	b590      	push	{r4, r7, lr}
 8018af2:	b0ab      	sub	sp, #172	; 0xac
 8018af4:	af04      	add	r7, sp, #16
 8018af6:	60f8      	str	r0, [r7, #12]
 8018af8:	60b9      	str	r1, [r7, #8]
 8018afa:	607a      	str	r2, [r7, #4]
 8018afc:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(input->type == kTfLiteInt8);
 8018afe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018b02:	7a1b      	ldrb	r3, [r3, #8]
 8018b04:	2b09      	cmp	r3, #9
 8018b06:	d001      	beq.n	8018b0c <_ZN6tflite12_GLOBAL__N_120AverageEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS0_6OpDataEPK16TfLiteEvalTensorPSC_+0x1c>
 8018b08:	f00e f8f9 	bl	8026cfe <abort>

  RuntimeShape input_shape = micro::GetTensorShape(input);
 8018b0c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8018b10:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8018b14:	4618      	mov	r0, r3
 8018b16:	f7fb fa4a 	bl	8013fae <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 8018b1a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8018b1e:	4618      	mov	r0, r3
 8018b20:	f7f5 fee2 	bl	800e8e8 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8018b24:	4603      	mov	r3, r0
 8018b26:	2b04      	cmp	r3, #4
 8018b28:	d001      	beq.n	8018b2e <_ZN6tflite12_GLOBAL__N_120AverageEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS0_6OpDataEPK16TfLiteEvalTensorPSC_+0x3e>
 8018b2a:	f00e f8e8 	bl	8026cfe <abort>

  RuntimeShape output_shape = micro::GetTensorShape(output);
 8018b2e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8018b32:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8018b36:	4618      	mov	r0, r3
 8018b38:	f7fb fa39 	bl	8013fae <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 8018b3c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8018b40:	4618      	mov	r0, r3
 8018b42:	f7f5 fed1 	bl	800e8e8 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8018b46:	4603      	mov	r3, r0
 8018b48:	2b04      	cmp	r3, #4
 8018b4a:	d001      	beq.n	8018b50 <_ZN6tflite12_GLOBAL__N_120AverageEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS0_6OpDataEPK16TfLiteEvalTensorPSC_+0x60>
 8018b4c:	f00e f8d7 	bl	8026cfe <abort>

  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 8018b50:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8018b54:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 8018b58:	2303      	movs	r3, #3
 8018b5a:	2103      	movs	r1, #3
 8018b5c:	f7fa fd71 	bl	8013642 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8018b60:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

  cmsis_nn_dims input_dims;
  input_dims.n = 1;
 8018b64:	2301      	movs	r3, #1
 8018b66:	657b      	str	r3, [r7, #84]	; 0x54
  input_dims.h = input_shape.Dims(1);
 8018b68:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8018b6c:	2101      	movs	r1, #1
 8018b6e:	4618      	mov	r0, r3
 8018b70:	f7fa fc6f 	bl	8013452 <_ZNK6tflite12RuntimeShape4DimsEi>
 8018b74:	4603      	mov	r3, r0
 8018b76:	65bb      	str	r3, [r7, #88]	; 0x58
  input_dims.w = input_shape.Dims(2);
 8018b78:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8018b7c:	2102      	movs	r1, #2
 8018b7e:	4618      	mov	r0, r3
 8018b80:	f7fa fc67 	bl	8013452 <_ZNK6tflite12RuntimeShape4DimsEi>
 8018b84:	4603      	mov	r3, r0
 8018b86:	65fb      	str	r3, [r7, #92]	; 0x5c
  input_dims.c = depth;
 8018b88:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8018b8c:	663b      	str	r3, [r7, #96]	; 0x60

  cmsis_nn_dims output_dims;
  output_dims.n = 1;
 8018b8e:	2301      	movs	r3, #1
 8018b90:	647b      	str	r3, [r7, #68]	; 0x44
  output_dims.h = output_shape.Dims(1);
 8018b92:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8018b96:	2101      	movs	r1, #1
 8018b98:	4618      	mov	r0, r3
 8018b9a:	f7fa fc5a 	bl	8013452 <_ZNK6tflite12RuntimeShape4DimsEi>
 8018b9e:	4603      	mov	r3, r0
 8018ba0:	64bb      	str	r3, [r7, #72]	; 0x48
  output_dims.w = output_shape.Dims(2);
 8018ba2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8018ba6:	2102      	movs	r1, #2
 8018ba8:	4618      	mov	r0, r3
 8018baa:	f7fa fc52 	bl	8013452 <_ZNK6tflite12RuntimeShape4DimsEi>
 8018bae:	4603      	mov	r3, r0
 8018bb0:	64fb      	str	r3, [r7, #76]	; 0x4c
  output_dims.c = depth;
 8018bb2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8018bb6:	653b      	str	r3, [r7, #80]	; 0x50

  cmsis_nn_pool_params pool_params;
  pool_params.stride.h = params->stride_height;
 8018bb8:	687b      	ldr	r3, [r7, #4]
 8018bba:	689b      	ldr	r3, [r3, #8]
 8018bbc:	633b      	str	r3, [r7, #48]	; 0x30
  pool_params.stride.w = params->stride_width;
 8018bbe:	687b      	ldr	r3, [r7, #4]
 8018bc0:	685b      	ldr	r3, [r3, #4]
 8018bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  pool_params.padding.h = data.reference_op_data.padding.height;
 8018bc4:	683b      	ldr	r3, [r7, #0]
 8018bc6:	685b      	ldr	r3, [r3, #4]
 8018bc8:	63bb      	str	r3, [r7, #56]	; 0x38
  pool_params.padding.w = data.reference_op_data.padding.width;
 8018bca:	683b      	ldr	r3, [r7, #0]
 8018bcc:	681b      	ldr	r3, [r3, #0]
 8018bce:	637b      	str	r3, [r7, #52]	; 0x34
  pool_params.activation.min = data.reference_op_data.activation_min;
 8018bd0:	683b      	ldr	r3, [r7, #0]
 8018bd2:	691b      	ldr	r3, [r3, #16]
 8018bd4:	63fb      	str	r3, [r7, #60]	; 0x3c
  pool_params.activation.max = data.reference_op_data.activation_max;
 8018bd6:	683b      	ldr	r3, [r7, #0]
 8018bd8:	695b      	ldr	r3, [r3, #20]
 8018bda:	643b      	str	r3, [r7, #64]	; 0x40

  cmsis_nn_dims filter_dims;
  filter_dims.n = 1;
 8018bdc:	2301      	movs	r3, #1
 8018bde:	61fb      	str	r3, [r7, #28]
  filter_dims.h = params->filter_height;
 8018be0:	687b      	ldr	r3, [r7, #4]
 8018be2:	691b      	ldr	r3, [r3, #16]
 8018be4:	623b      	str	r3, [r7, #32]
  filter_dims.w = params->filter_width;
 8018be6:	687b      	ldr	r3, [r7, #4]
 8018be8:	68db      	ldr	r3, [r3, #12]
 8018bea:	627b      	str	r3, [r7, #36]	; 0x24
  filter_dims.c = 1;
 8018bec:	2301      	movs	r3, #1
 8018bee:	62bb      	str	r3, [r7, #40]	; 0x28

  cmsis_nn_context ctx;
  ctx.buf = nullptr;
 8018bf0:	2300      	movs	r3, #0
 8018bf2:	617b      	str	r3, [r7, #20]
  ctx.size = 0;
 8018bf4:	2300      	movs	r3, #0
 8018bf6:	61bb      	str	r3, [r7, #24]
  if (data.buffer_idx > -1) {
 8018bf8:	683b      	ldr	r3, [r7, #0]
 8018bfa:	6a1b      	ldr	r3, [r3, #32]
 8018bfc:	2b00      	cmp	r3, #0
 8018bfe:	db08      	blt.n	8018c12 <_ZN6tflite12_GLOBAL__N_120AverageEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS0_6OpDataEPK16TfLiteEvalTensorPSC_+0x122>
    ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
 8018c00:	68fb      	ldr	r3, [r7, #12]
 8018c02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018c04:	683a      	ldr	r2, [r7, #0]
 8018c06:	6a12      	ldr	r2, [r2, #32]
 8018c08:	4611      	mov	r1, r2
 8018c0a:	68f8      	ldr	r0, [r7, #12]
 8018c0c:	4798      	blx	r3
 8018c0e:	4603      	mov	r3, r0
 8018c10:	617b      	str	r3, [r7, #20]
  }

  TFLITE_DCHECK_EQ(
 8018c12:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8018c16:	f7fa fbfc 	bl	8013412 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8018c1a:	4604      	mov	r4, r0
 8018c1c:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8018c20:	f7fa fc06 	bl	8013430 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 8018c24:	4603      	mov	r3, r0
 8018c26:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8018c2a:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8018c2e:	f107 0014 	add.w	r0, r7, #20
 8018c32:	9302      	str	r3, [sp, #8]
 8018c34:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8018c38:	9301      	str	r3, [sp, #4]
 8018c3a:	f107 031c 	add.w	r3, r7, #28
 8018c3e:	9300      	str	r3, [sp, #0]
 8018c40:	4623      	mov	r3, r4
 8018c42:	f00a fa1f 	bl	8023084 <arm_avgpool_s8>
 8018c46:	4603      	mov	r3, r0
 8018c48:	2b00      	cmp	r3, #0
 8018c4a:	d001      	beq.n	8018c50 <_ZN6tflite12_GLOBAL__N_120AverageEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS0_6OpDataEPK16TfLiteEvalTensorPSC_+0x160>
 8018c4c:	f00e f857 	bl	8026cfe <abort>
  RuntimeShape output_shape = micro::GetTensorShape(output);
 8018c50:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8018c54:	4618      	mov	r0, r3
 8018c56:	f7f5 fe3c 	bl	800e8d2 <_ZN6tflite12RuntimeShapeD1Ev>
  RuntimeShape input_shape = micro::GetTensorShape(input);
 8018c5a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8018c5e:	4618      	mov	r0, r3
 8018c60:	f7f5 fe37 	bl	800e8d2 <_ZN6tflite12RuntimeShapeD1Ev>
      arm_avgpool_s8(&ctx, &pool_params, &input_dims,
                     micro::GetTensorData<int8_t>(input), &filter_dims,
                     &output_dims, micro::GetTensorData<int8_t>(output)),
      ARM_MATH_SUCCESS);
}
 8018c64:	bf00      	nop
 8018c66:	379c      	adds	r7, #156	; 0x9c
 8018c68:	46bd      	mov	sp, r7
 8018c6a:	bd90      	pop	{r4, r7, pc}

08018c6c <_ZN6tflite12_GLOBAL__N_111MaxEvalInt8EP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS0_6OpDataEPK16TfLiteEvalTensorPSC_>:

TfLiteStatus MaxEvalInt8(TfLiteContext* context, const TfLiteNode* node,
                         const TfLitePoolParams* params, const OpData& data,
                         const TfLiteEvalTensor* input,
                         TfLiteEvalTensor* output) {
 8018c6c:	b590      	push	{r4, r7, lr}
 8018c6e:	b0ab      	sub	sp, #172	; 0xac
 8018c70:	af04      	add	r7, sp, #16
 8018c72:	60f8      	str	r0, [r7, #12]
 8018c74:	60b9      	str	r1, [r7, #8]
 8018c76:	607a      	str	r2, [r7, #4]
 8018c78:	603b      	str	r3, [r7, #0]
  RuntimeShape input_shape = micro::GetTensorShape(input);
 8018c7a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8018c7e:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8018c82:	4618      	mov	r0, r3
 8018c84:	f7fb f993 	bl	8013fae <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  RuntimeShape output_shape = micro::GetTensorShape(output);
 8018c88:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8018c8c:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8018c90:	4618      	mov	r0, r3
 8018c92:	f7fb f98c 	bl	8013fae <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 8018c96:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8018c9a:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 8018c9e:	2303      	movs	r3, #3
 8018ca0:	2103      	movs	r1, #3
 8018ca2:	f7fa fcce 	bl	8013642 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8018ca6:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

  cmsis_nn_dims input_dims;
  input_dims.n = 1;
 8018caa:	2301      	movs	r3, #1
 8018cac:	657b      	str	r3, [r7, #84]	; 0x54
  input_dims.h = input_shape.Dims(1);
 8018cae:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8018cb2:	2101      	movs	r1, #1
 8018cb4:	4618      	mov	r0, r3
 8018cb6:	f7fa fbcc 	bl	8013452 <_ZNK6tflite12RuntimeShape4DimsEi>
 8018cba:	4603      	mov	r3, r0
 8018cbc:	65bb      	str	r3, [r7, #88]	; 0x58
  input_dims.w = input_shape.Dims(2);
 8018cbe:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8018cc2:	2102      	movs	r1, #2
 8018cc4:	4618      	mov	r0, r3
 8018cc6:	f7fa fbc4 	bl	8013452 <_ZNK6tflite12RuntimeShape4DimsEi>
 8018cca:	4603      	mov	r3, r0
 8018ccc:	65fb      	str	r3, [r7, #92]	; 0x5c
  input_dims.c = depth;
 8018cce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8018cd2:	663b      	str	r3, [r7, #96]	; 0x60

  cmsis_nn_dims output_dims;
  output_dims.n = 1;
 8018cd4:	2301      	movs	r3, #1
 8018cd6:	647b      	str	r3, [r7, #68]	; 0x44
  output_dims.h = output_shape.Dims(1);
 8018cd8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8018cdc:	2101      	movs	r1, #1
 8018cde:	4618      	mov	r0, r3
 8018ce0:	f7fa fbb7 	bl	8013452 <_ZNK6tflite12RuntimeShape4DimsEi>
 8018ce4:	4603      	mov	r3, r0
 8018ce6:	64bb      	str	r3, [r7, #72]	; 0x48
  output_dims.w = output_shape.Dims(2);
 8018ce8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8018cec:	2102      	movs	r1, #2
 8018cee:	4618      	mov	r0, r3
 8018cf0:	f7fa fbaf 	bl	8013452 <_ZNK6tflite12RuntimeShape4DimsEi>
 8018cf4:	4603      	mov	r3, r0
 8018cf6:	64fb      	str	r3, [r7, #76]	; 0x4c
  output_dims.c = depth;
 8018cf8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8018cfc:	653b      	str	r3, [r7, #80]	; 0x50

  cmsis_nn_pool_params pool_params;
  pool_params.stride.h = params->stride_height;
 8018cfe:	687b      	ldr	r3, [r7, #4]
 8018d00:	689b      	ldr	r3, [r3, #8]
 8018d02:	633b      	str	r3, [r7, #48]	; 0x30
  pool_params.stride.w = params->stride_width;
 8018d04:	687b      	ldr	r3, [r7, #4]
 8018d06:	685b      	ldr	r3, [r3, #4]
 8018d08:	62fb      	str	r3, [r7, #44]	; 0x2c
  pool_params.padding.h = data.reference_op_data.padding.height;
 8018d0a:	683b      	ldr	r3, [r7, #0]
 8018d0c:	685b      	ldr	r3, [r3, #4]
 8018d0e:	63bb      	str	r3, [r7, #56]	; 0x38
  pool_params.padding.w = data.reference_op_data.padding.width;
 8018d10:	683b      	ldr	r3, [r7, #0]
 8018d12:	681b      	ldr	r3, [r3, #0]
 8018d14:	637b      	str	r3, [r7, #52]	; 0x34
  pool_params.activation.min = data.reference_op_data.activation_min;
 8018d16:	683b      	ldr	r3, [r7, #0]
 8018d18:	691b      	ldr	r3, [r3, #16]
 8018d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  pool_params.activation.max = data.reference_op_data.activation_max;
 8018d1c:	683b      	ldr	r3, [r7, #0]
 8018d1e:	695b      	ldr	r3, [r3, #20]
 8018d20:	643b      	str	r3, [r7, #64]	; 0x40

  cmsis_nn_dims filter_dims;
  filter_dims.n = 1;
 8018d22:	2301      	movs	r3, #1
 8018d24:	61fb      	str	r3, [r7, #28]
  filter_dims.h = params->filter_height;
 8018d26:	687b      	ldr	r3, [r7, #4]
 8018d28:	691b      	ldr	r3, [r3, #16]
 8018d2a:	623b      	str	r3, [r7, #32]
  filter_dims.w = params->filter_width;
 8018d2c:	687b      	ldr	r3, [r7, #4]
 8018d2e:	68db      	ldr	r3, [r3, #12]
 8018d30:	627b      	str	r3, [r7, #36]	; 0x24
  filter_dims.c = 1;
 8018d32:	2301      	movs	r3, #1
 8018d34:	62bb      	str	r3, [r7, #40]	; 0x28

  cmsis_nn_context ctx;
  ctx.buf = nullptr;
 8018d36:	2300      	movs	r3, #0
 8018d38:	617b      	str	r3, [r7, #20]
  ctx.size = 0;
 8018d3a:	2300      	movs	r3, #0
 8018d3c:	61bb      	str	r3, [r7, #24]
  if (data.buffer_idx > -1) {
 8018d3e:	683b      	ldr	r3, [r7, #0]
 8018d40:	6a1b      	ldr	r3, [r3, #32]
 8018d42:	2b00      	cmp	r3, #0
 8018d44:	db08      	blt.n	8018d58 <_ZN6tflite12_GLOBAL__N_111MaxEvalInt8EP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS0_6OpDataEPK16TfLiteEvalTensorPSC_+0xec>
    ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
 8018d46:	68fb      	ldr	r3, [r7, #12]
 8018d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018d4a:	683a      	ldr	r2, [r7, #0]
 8018d4c:	6a12      	ldr	r2, [r2, #32]
 8018d4e:	4611      	mov	r1, r2
 8018d50:	68f8      	ldr	r0, [r7, #12]
 8018d52:	4798      	blx	r3
 8018d54:	4603      	mov	r3, r0
 8018d56:	617b      	str	r3, [r7, #20]
  }

  TFLITE_DCHECK_EQ(
 8018d58:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8018d5c:	f7fa fb59 	bl	8013412 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8018d60:	4604      	mov	r4, r0
 8018d62:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8018d66:	f7fa fb63 	bl	8013430 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 8018d6a:	4603      	mov	r3, r0
 8018d6c:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8018d70:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8018d74:	f107 0014 	add.w	r0, r7, #20
 8018d78:	9302      	str	r3, [sp, #8]
 8018d7a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8018d7e:	9301      	str	r3, [sp, #4]
 8018d80:	f107 031c 	add.w	r3, r7, #28
 8018d84:	9300      	str	r3, [sp, #0]
 8018d86:	4623      	mov	r3, r4
 8018d88:	f00a fbb5 	bl	80234f6 <arm_max_pool_s8>
 8018d8c:	4603      	mov	r3, r0
 8018d8e:	2b00      	cmp	r3, #0
 8018d90:	d001      	beq.n	8018d96 <_ZN6tflite12_GLOBAL__N_111MaxEvalInt8EP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS0_6OpDataEPK16TfLiteEvalTensorPSC_+0x12a>
 8018d92:	f00d ffb4 	bl	8026cfe <abort>
      arm_max_pool_s8(&ctx, &pool_params, &input_dims,
                      micro::GetTensorData<int8_t>(input), &filter_dims,
                      &output_dims, micro::GetTensorData<int8_t>(output)),
      ARM_MATH_SUCCESS);

  return kTfLiteOk;
 8018d96:	2400      	movs	r4, #0
  RuntimeShape output_shape = micro::GetTensorShape(output);
 8018d98:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8018d9c:	4618      	mov	r0, r3
 8018d9e:	f7f5 fd98 	bl	800e8d2 <_ZN6tflite12RuntimeShapeD1Ev>
  RuntimeShape input_shape = micro::GetTensorShape(input);
 8018da2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8018da6:	4618      	mov	r0, r3
 8018da8:	f7f5 fd93 	bl	800e8d2 <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
 8018dac:	4623      	mov	r3, r4
}
 8018dae:	4618      	mov	r0, r3
 8018db0:	379c      	adds	r7, #156	; 0x9c
 8018db2:	46bd      	mov	sp, r7
 8018db4:	bd90      	pop	{r4, r7, pc}

08018db6 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 8018db6:	b580      	push	{r7, lr}
 8018db8:	b084      	sub	sp, #16
 8018dba:	af00      	add	r7, sp, #0
 8018dbc:	60f8      	str	r0, [r7, #12]
 8018dbe:	60b9      	str	r1, [r7, #8]
 8018dc0:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 8018dc2:	68fb      	ldr	r3, [r7, #12]
 8018dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018dc6:	2b00      	cmp	r3, #0
 8018dc8:	d101      	bne.n	8018dce <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0x18>
 8018dca:	f00d ff98 	bl	8026cfe <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 8018dce:	68fb      	ldr	r3, [r7, #12]
 8018dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018dd2:	2124      	movs	r1, #36	; 0x24
 8018dd4:	68f8      	ldr	r0, [r7, #12]
 8018dd6:	4798      	blx	r3
 8018dd8:	4603      	mov	r3, r0
}
 8018dda:	4618      	mov	r0, r3
 8018ddc:	3710      	adds	r7, #16
 8018dde:	46bd      	mov	sp, r7
 8018de0:	bd80      	pop	{r7, pc}

08018de2 <_ZN6tflite12_GLOBAL__N_110MaxPrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus MaxPrepare(TfLiteContext* context, TfLiteNode* node) {
 8018de2:	b580      	push	{r7, lr}
 8018de4:	b084      	sub	sp, #16
 8018de6:	af00      	add	r7, sp, #0
 8018de8:	6078      	str	r0, [r7, #4]
 8018dea:	6039      	str	r1, [r7, #0]
  TF_LITE_ENSURE_STATUS(PoolingPrepare(context, node));
 8018dec:	6839      	ldr	r1, [r7, #0]
 8018dee:	6878      	ldr	r0, [r7, #4]
 8018df0:	f7fc fb10 	bl	8015414 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode>
 8018df4:	4603      	mov	r3, r0
 8018df6:	73fb      	strb	r3, [r7, #15]
 8018df8:	7bfb      	ldrb	r3, [r7, #15]
 8018dfa:	2b00      	cmp	r3, #0
 8018dfc:	d001      	beq.n	8018e02 <_ZN6tflite12_GLOBAL__N_110MaxPrepareEP13TfLiteContextP10TfLiteNode+0x20>
 8018dfe:	7bfb      	ldrb	r3, [r7, #15]
 8018e00:	e005      	b.n	8018e0e <_ZN6tflite12_GLOBAL__N_110MaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c>
  // Set buffer index to a reset value
  static_cast<OpData*>(node->user_data)->buffer_idx = -1;
 8018e02:	683b      	ldr	r3, [r7, #0]
 8018e04:	691b      	ldr	r3, [r3, #16]
 8018e06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018e0a:	621a      	str	r2, [r3, #32]
  return kTfLiteOk;
 8018e0c:	2300      	movs	r3, #0
}
 8018e0e:	4618      	mov	r0, r3
 8018e10:	3710      	adds	r7, #16
 8018e12:	46bd      	mov	sp, r7
 8018e14:	bd80      	pop	{r7, pc}
	...

08018e18 <_ZN6tflite12_GLOBAL__N_114AveragePrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus AveragePrepare(TfLiteContext* context, TfLiteNode* node) {
 8018e18:	b5b0      	push	{r4, r5, r7, lr}
 8018e1a:	b096      	sub	sp, #88	; 0x58
 8018e1c:	af00      	add	r7, sp, #0
 8018e1e:	6078      	str	r0, [r7, #4]
 8018e20:	6039      	str	r1, [r7, #0]
 8018e22:	2400      	movs	r4, #0
  TF_LITE_ENSURE_STATUS(PoolingPrepare(context, node));
 8018e24:	6839      	ldr	r1, [r7, #0]
 8018e26:	6878      	ldr	r0, [r7, #4]
 8018e28:	f7fc faf4 	bl	8015414 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode>
 8018e2c:	4603      	mov	r3, r0
 8018e2e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8018e32:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8018e36:	2b00      	cmp	r3, #0
 8018e38:	d002      	beq.n	8018e40 <_ZN6tflite12_GLOBAL__N_114AveragePrepareEP13TfLiteContextP10TfLiteNode+0x28>
 8018e3a:	f897 4057 	ldrb.w	r4, [r7, #87]	; 0x57
 8018e3e:	e077      	b.n	8018f30 <_ZN6tflite12_GLOBAL__N_114AveragePrepareEP13TfLiteContextP10TfLiteNode+0x118>

  const TfLiteTensor* input = GetInput(context, node, kPoolingInputTensor);
 8018e40:	4b3e      	ldr	r3, [pc, #248]	; (8018f3c <_ZN6tflite12_GLOBAL__N_114AveragePrepareEP13TfLiteContextP10TfLiteNode+0x124>)
 8018e42:	681b      	ldr	r3, [r3, #0]
 8018e44:	461a      	mov	r2, r3
 8018e46:	6839      	ldr	r1, [r7, #0]
 8018e48:	6878      	ldr	r0, [r7, #4]
 8018e4a:	f7f4 fe3f 	bl	800dacc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8018e4e:	6538      	str	r0, [r7, #80]	; 0x50
  TfLiteTensor* output = GetOutput(context, node, kPoolingOutputTensor);
 8018e50:	4b3b      	ldr	r3, [pc, #236]	; (8018f40 <_ZN6tflite12_GLOBAL__N_114AveragePrepareEP13TfLiteContextP10TfLiteNode+0x128>)
 8018e52:	681b      	ldr	r3, [r3, #0]
 8018e54:	461a      	mov	r2, r3
 8018e56:	6839      	ldr	r1, [r7, #0]
 8018e58:	6878      	ldr	r0, [r7, #4]
 8018e5a:	f7f4 fe47 	bl	800daec <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 8018e5e:	64f8      	str	r0, [r7, #76]	; 0x4c

  if (input->type == kTfLiteInt8) {
 8018e60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018e62:	781b      	ldrb	r3, [r3, #0]
 8018e64:	2b09      	cmp	r3, #9
 8018e66:	d162      	bne.n	8018f2e <_ZN6tflite12_GLOBAL__N_114AveragePrepareEP13TfLiteContextP10TfLiteNode+0x116>
    RuntimeShape input_shape = GetTensorShape(input);
 8018e68:	f107 0320 	add.w	r3, r7, #32
 8018e6c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8018e6e:	4618      	mov	r0, r3
 8018e70:	f7f5 fd6a 	bl	800e948 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 8018e74:	f107 0320 	add.w	r3, r7, #32
 8018e78:	4618      	mov	r0, r3
 8018e7a:	f7f5 fd35 	bl	800e8e8 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8018e7e:	4603      	mov	r3, r0
 8018e80:	2b04      	cmp	r3, #4
 8018e82:	d001      	beq.n	8018e88 <_ZN6tflite12_GLOBAL__N_114AveragePrepareEP13TfLiteContextP10TfLiteNode+0x70>
 8018e84:	f00d ff3b 	bl	8026cfe <abort>

    RuntimeShape output_shape = GetTensorShape(output);
 8018e88:	f107 0308 	add.w	r3, r7, #8
 8018e8c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8018e8e:	4618      	mov	r0, r3
 8018e90:	f7f5 fd5a 	bl	800e948 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 8018e94:	f107 0308 	add.w	r3, r7, #8
 8018e98:	4618      	mov	r0, r3
 8018e9a:	f7f5 fd25 	bl	800e8e8 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8018e9e:	4603      	mov	r3, r0
 8018ea0:	2b04      	cmp	r3, #4
 8018ea2:	d001      	beq.n	8018ea8 <_ZN6tflite12_GLOBAL__N_114AveragePrepareEP13TfLiteContextP10TfLiteNode+0x90>
 8018ea4:	f00d ff2b 	bl	8026cfe <abort>

    const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 8018ea8:	f107 0208 	add.w	r2, r7, #8
 8018eac:	f107 0020 	add.w	r0, r7, #32
 8018eb0:	2303      	movs	r3, #3
 8018eb2:	2103      	movs	r1, #3
 8018eb4:	f7fa fbc5 	bl	8013642 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8018eb8:	64b8      	str	r0, [r7, #72]	; 0x48
    const int output_width = output_shape.Dims(2);
 8018eba:	f107 0308 	add.w	r3, r7, #8
 8018ebe:	2102      	movs	r1, #2
 8018ec0:	4618      	mov	r0, r3
 8018ec2:	f7fa fac6 	bl	8013452 <_ZNK6tflite12RuntimeShape4DimsEi>
 8018ec6:	6478      	str	r0, [r7, #68]	; 0x44

    const int32_t buffer_size =
        arm_avgpool_s8_get_buffer_size(output_width, depth);
 8018ec8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8018eca:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8018ecc:	f00a f9ea 	bl	80232a4 <arm_avgpool_s8_get_buffer_size>
 8018ed0:	6438      	str	r0, [r7, #64]	; 0x40

    auto* data = static_cast<OpData*>(node->user_data);
 8018ed2:	683b      	ldr	r3, [r7, #0]
 8018ed4:	691b      	ldr	r3, [r3, #16]
 8018ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (buffer_size > 0) {
 8018ed8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018eda:	2b00      	cmp	r3, #0
 8018edc:	dd11      	ble.n	8018f02 <_ZN6tflite12_GLOBAL__N_114AveragePrepareEP13TfLiteContextP10TfLiteNode+0xea>
      TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
 8018ede:	687b      	ldr	r3, [r7, #4]
 8018ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018ee2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8018ee4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8018ee6:	3220      	adds	r2, #32
 8018ee8:	6878      	ldr	r0, [r7, #4]
 8018eea:	4798      	blx	r3
 8018eec:	4603      	mov	r3, r0
 8018eee:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018ef2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8018ef6:	2b00      	cmp	r3, #0
 8018ef8:	d007      	beq.n	8018f0a <_ZN6tflite12_GLOBAL__N_114AveragePrepareEP13TfLiteContextP10TfLiteNode+0xf2>
 8018efa:	f897 403b 	ldrb.w	r4, [r7, #59]	; 0x3b
 8018efe:	2500      	movs	r5, #0
 8018f00:	e004      	b.n	8018f0c <_ZN6tflite12_GLOBAL__N_114AveragePrepareEP13TfLiteContextP10TfLiteNode+0xf4>
          context, buffer_size, &data->buffer_idx));
    } else {
      data->buffer_idx = -1;
 8018f02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018f04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018f08:	621a      	str	r2, [r3, #32]
    RuntimeShape output_shape = GetTensorShape(output);
 8018f0a:	2501      	movs	r5, #1
 8018f0c:	f107 0308 	add.w	r3, r7, #8
 8018f10:	4618      	mov	r0, r3
 8018f12:	f7f5 fcde 	bl	800e8d2 <_ZN6tflite12RuntimeShapeD1Ev>
 8018f16:	2d01      	cmp	r5, #1
 8018f18:	d001      	beq.n	8018f1e <_ZN6tflite12_GLOBAL__N_114AveragePrepareEP13TfLiteContextP10TfLiteNode+0x106>
 8018f1a:	2500      	movs	r5, #0
 8018f1c:	e000      	b.n	8018f20 <_ZN6tflite12_GLOBAL__N_114AveragePrepareEP13TfLiteContextP10TfLiteNode+0x108>
    RuntimeShape input_shape = GetTensorShape(input);
 8018f1e:	2501      	movs	r5, #1
 8018f20:	f107 0320 	add.w	r3, r7, #32
 8018f24:	4618      	mov	r0, r3
 8018f26:	f7f5 fcd4 	bl	800e8d2 <_ZN6tflite12RuntimeShapeD1Ev>
 8018f2a:	2d01      	cmp	r5, #1
 8018f2c:	d100      	bne.n	8018f30 <_ZN6tflite12_GLOBAL__N_114AveragePrepareEP13TfLiteContextP10TfLiteNode+0x118>
    }
  }
  return kTfLiteOk;
 8018f2e:	2400      	movs	r4, #0
 8018f30:	4623      	mov	r3, r4
}
 8018f32:	4618      	mov	r0, r3
 8018f34:	3758      	adds	r7, #88	; 0x58
 8018f36:	46bd      	mov	sp, r7
 8018f38:	bdb0      	pop	{r4, r5, r7, pc}
 8018f3a:	bf00      	nop
 8018f3c:	0803ff7c 	.word	0x0803ff7c
 8018f40:	0803ff80 	.word	0x0803ff80

08018f44 <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus AverageEval(TfLiteContext* context, TfLiteNode* node) {
 8018f44:	b590      	push	{r4, r7, lr}
 8018f46:	b089      	sub	sp, #36	; 0x24
 8018f48:	af02      	add	r7, sp, #8
 8018f4a:	6078      	str	r0, [r7, #4]
 8018f4c:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->builtin_data != nullptr);
 8018f4e:	683b      	ldr	r3, [r7, #0]
 8018f50:	695b      	ldr	r3, [r3, #20]
 8018f52:	2b00      	cmp	r3, #0
 8018f54:	d101      	bne.n	8018f5a <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x16>
 8018f56:	f00d fed2 	bl	8026cfe <abort>
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);
 8018f5a:	683b      	ldr	r3, [r7, #0]
 8018f5c:	695b      	ldr	r3, [r3, #20]
 8018f5e:	617b      	str	r3, [r7, #20]

  TFLITE_DCHECK(node->user_data != nullptr);
 8018f60:	683b      	ldr	r3, [r7, #0]
 8018f62:	691b      	ldr	r3, [r3, #16]
 8018f64:	2b00      	cmp	r3, #0
 8018f66:	d101      	bne.n	8018f6c <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x28>
 8018f68:	f00d fec9 	bl	8026cfe <abort>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));
 8018f6c:	683b      	ldr	r3, [r7, #0]
 8018f6e:	691b      	ldr	r3, [r3, #16]
 8018f70:	613b      	str	r3, [r7, #16]

  const TfLiteEvalTensor* input =
      micro::GetEvalInput(context, node, kPoolingInputTensor);
 8018f72:	4b20      	ldr	r3, [pc, #128]	; (8018ff4 <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0xb0>)
 8018f74:	681b      	ldr	r3, [r3, #0]
 8018f76:	461a      	mov	r2, r3
 8018f78:	6839      	ldr	r1, [r7, #0]
 8018f7a:	6878      	ldr	r0, [r7, #4]
 8018f7c:	f7fa f9f9 	bl	8013372 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8018f80:	60f8      	str	r0, [r7, #12]
  TfLiteEvalTensor* output =
      micro::GetEvalOutput(context, node, kPoolingOutputTensor);
 8018f82:	4b1d      	ldr	r3, [pc, #116]	; (8018ff8 <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0xb4>)
 8018f84:	681b      	ldr	r3, [r3, #0]
 8018f86:	461a      	mov	r2, r3
 8018f88:	6839      	ldr	r1, [r7, #0]
 8018f8a:	6878      	ldr	r0, [r7, #4]
 8018f8c:	f7fa fa01 	bl	8013392 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 8018f90:	60b8      	str	r0, [r7, #8]

  // Inputs and outputs share the same type, guaranteed by the converter.
  switch (input->type) {
 8018f92:	68fb      	ldr	r3, [r7, #12]
 8018f94:	7a1b      	ldrb	r3, [r3, #8]
 8018f96:	2b01      	cmp	r3, #1
 8018f98:	d002      	beq.n	8018fa0 <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x5c>
 8018f9a:	2b09      	cmp	r3, #9
 8018f9c:	d00c      	beq.n	8018fb8 <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x74>
 8018f9e:	e016      	b.n	8018fce <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x8a>
    case kTfLiteFloat32:
      AveragePoolingEvalFloat(context, node, params, &data.reference_op_data,
 8018fa0:	693a      	ldr	r2, [r7, #16]
 8018fa2:	68bb      	ldr	r3, [r7, #8]
 8018fa4:	9301      	str	r3, [sp, #4]
 8018fa6:	68fb      	ldr	r3, [r7, #12]
 8018fa8:	9300      	str	r3, [sp, #0]
 8018faa:	4613      	mov	r3, r2
 8018fac:	697a      	ldr	r2, [r7, #20]
 8018fae:	6839      	ldr	r1, [r7, #0]
 8018fb0:	6878      	ldr	r0, [r7, #4]
 8018fb2:	f7fc faab 	bl	801550c <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_>
                              input, output);
      break;
 8018fb6:	e018      	b.n	8018fea <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0xa6>
    case kTfLiteInt8:
      AverageEvalQuantized(context, node, params, data, input, output);
 8018fb8:	68bb      	ldr	r3, [r7, #8]
 8018fba:	9301      	str	r3, [sp, #4]
 8018fbc:	68fb      	ldr	r3, [r7, #12]
 8018fbe:	9300      	str	r3, [sp, #0]
 8018fc0:	693b      	ldr	r3, [r7, #16]
 8018fc2:	697a      	ldr	r2, [r7, #20]
 8018fc4:	6839      	ldr	r1, [r7, #0]
 8018fc6:	6878      	ldr	r0, [r7, #4]
 8018fc8:	f7ff fd92 	bl	8018af0 <_ZN6tflite12_GLOBAL__N_120AverageEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS0_6OpDataEPK16TfLiteEvalTensorPSC_>
      break;
 8018fcc:	e00d      	b.n	8018fea <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0xa6>
    default:
      TF_LITE_KERNEL_LOG(context, "Input type %s is not currently supported",
 8018fce:	687b      	ldr	r3, [r7, #4]
 8018fd0:	695c      	ldr	r4, [r3, #20]
 8018fd2:	68fb      	ldr	r3, [r7, #12]
 8018fd4:	7a1b      	ldrb	r3, [r3, #8]
 8018fd6:	4618      	mov	r0, r3
 8018fd8:	f7f1 fc18 	bl	800a80c <TfLiteTypeGetName>
 8018fdc:	4603      	mov	r3, r0
 8018fde:	461a      	mov	r2, r3
 8018fe0:	4906      	ldr	r1, [pc, #24]	; (8018ffc <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0xb8>)
 8018fe2:	6878      	ldr	r0, [r7, #4]
 8018fe4:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
 8018fe6:	2301      	movs	r3, #1
 8018fe8:	e000      	b.n	8018fec <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0xa8>
  }
  return kTfLiteOk;
 8018fea:	2300      	movs	r3, #0
}
 8018fec:	4618      	mov	r0, r3
 8018fee:	371c      	adds	r7, #28
 8018ff0:	46bd      	mov	sp, r7
 8018ff2:	bd90      	pop	{r4, r7, pc}
 8018ff4:	0803ff7c 	.word	0x0803ff7c
 8018ff8:	0803ff80 	.word	0x0803ff80
 8018ffc:	0802dd00 	.word	0x0802dd00

08019000 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus MaxEval(TfLiteContext* context, TfLiteNode* node) {
 8019000:	b590      	push	{r4, r7, lr}
 8019002:	b089      	sub	sp, #36	; 0x24
 8019004:	af02      	add	r7, sp, #8
 8019006:	6078      	str	r0, [r7, #4]
 8019008:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->builtin_data != nullptr);
 801900a:	683b      	ldr	r3, [r7, #0]
 801900c:	695b      	ldr	r3, [r3, #20]
 801900e:	2b00      	cmp	r3, #0
 8019010:	d101      	bne.n	8019016 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x16>
 8019012:	f00d fe74 	bl	8026cfe <abort>
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);
 8019016:	683b      	ldr	r3, [r7, #0]
 8019018:	695b      	ldr	r3, [r3, #20]
 801901a:	617b      	str	r3, [r7, #20]

  TFLITE_DCHECK(node->user_data != nullptr);
 801901c:	683b      	ldr	r3, [r7, #0]
 801901e:	691b      	ldr	r3, [r3, #16]
 8019020:	2b00      	cmp	r3, #0
 8019022:	d101      	bne.n	8019028 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x28>
 8019024:	f00d fe6b 	bl	8026cfe <abort>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));
 8019028:	683b      	ldr	r3, [r7, #0]
 801902a:	691b      	ldr	r3, [r3, #16]
 801902c:	613b      	str	r3, [r7, #16]

  const TfLiteEvalTensor* input =
      micro::GetEvalInput(context, node, kPoolingInputTensor);
 801902e:	4b20      	ldr	r3, [pc, #128]	; (80190b0 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0xb0>)
 8019030:	681b      	ldr	r3, [r3, #0]
 8019032:	461a      	mov	r2, r3
 8019034:	6839      	ldr	r1, [r7, #0]
 8019036:	6878      	ldr	r0, [r7, #4]
 8019038:	f7fa f99b 	bl	8013372 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 801903c:	60f8      	str	r0, [r7, #12]
  TfLiteEvalTensor* output =
      micro::GetEvalOutput(context, node, kPoolingOutputTensor);
 801903e:	4b1d      	ldr	r3, [pc, #116]	; (80190b4 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0xb4>)
 8019040:	681b      	ldr	r3, [r3, #0]
 8019042:	461a      	mov	r2, r3
 8019044:	6839      	ldr	r1, [r7, #0]
 8019046:	6878      	ldr	r0, [r7, #4]
 8019048:	f7fa f9a3 	bl	8013392 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 801904c:	60b8      	str	r0, [r7, #8]

  switch (input->type) {
 801904e:	68fb      	ldr	r3, [r7, #12]
 8019050:	7a1b      	ldrb	r3, [r3, #8]
 8019052:	2b01      	cmp	r3, #1
 8019054:	d002      	beq.n	801905c <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x5c>
 8019056:	2b09      	cmp	r3, #9
 8019058:	d00c      	beq.n	8019074 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x74>
 801905a:	e016      	b.n	801908a <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x8a>
    case kTfLiteFloat32:
      MaxPoolingEvalFloat(context, node, params, &data.reference_op_data, input,
 801905c:	693a      	ldr	r2, [r7, #16]
 801905e:	68bb      	ldr	r3, [r7, #8]
 8019060:	9301      	str	r3, [sp, #4]
 8019062:	68fb      	ldr	r3, [r7, #12]
 8019064:	9300      	str	r3, [sp, #0]
 8019066:	4613      	mov	r3, r2
 8019068:	697a      	ldr	r2, [r7, #20]
 801906a:	6839      	ldr	r1, [r7, #0]
 801906c:	6878      	ldr	r0, [r7, #4]
 801906e:	f7fc fa9e 	bl	80155ae <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_>
                          output);
      break;
 8019072:	e018      	b.n	80190a6 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0xa6>
    case kTfLiteInt8:
      MaxEvalInt8(context, node, params, data, input, output);
 8019074:	68bb      	ldr	r3, [r7, #8]
 8019076:	9301      	str	r3, [sp, #4]
 8019078:	68fb      	ldr	r3, [r7, #12]
 801907a:	9300      	str	r3, [sp, #0]
 801907c:	693b      	ldr	r3, [r7, #16]
 801907e:	697a      	ldr	r2, [r7, #20]
 8019080:	6839      	ldr	r1, [r7, #0]
 8019082:	6878      	ldr	r0, [r7, #4]
 8019084:	f7ff fdf2 	bl	8018c6c <_ZN6tflite12_GLOBAL__N_111MaxEvalInt8EP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS0_6OpDataEPK16TfLiteEvalTensorPSC_>
      break;
 8019088:	e00d      	b.n	80190a6 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0xa6>
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s not currently supported.",
 801908a:	687b      	ldr	r3, [r7, #4]
 801908c:	695c      	ldr	r4, [r3, #20]
 801908e:	68fb      	ldr	r3, [r7, #12]
 8019090:	7a1b      	ldrb	r3, [r3, #8]
 8019092:	4618      	mov	r0, r3
 8019094:	f7f1 fbba 	bl	800a80c <TfLiteTypeGetName>
 8019098:	4603      	mov	r3, r0
 801909a:	461a      	mov	r2, r3
 801909c:	4906      	ldr	r1, [pc, #24]	; (80190b8 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0xb8>)
 801909e:	6878      	ldr	r0, [r7, #4]
 80190a0:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
 80190a2:	2301      	movs	r3, #1
 80190a4:	e000      	b.n	80190a8 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0xa8>
  }
  return kTfLiteOk;
 80190a6:	2300      	movs	r3, #0
}
 80190a8:	4618      	mov	r0, r3
 80190aa:	371c      	adds	r7, #28
 80190ac:	46bd      	mov	sp, r7
 80190ae:	bd90      	pop	{r4, r7, pc}
 80190b0:	0803ff7c 	.word	0x0803ff7c
 80190b4:	0803ff80 	.word	0x0803ff80
 80190b8:	0802dd2c 	.word	0x0802dd2c

080190bc <_ZN6tflite24Register_AVERAGE_POOL_2DEv>:

}  // namespace

TfLiteRegistration Register_AVERAGE_POOL_2D() {
 80190bc:	b4b0      	push	{r4, r5, r7}
 80190be:	b083      	sub	sp, #12
 80190c0:	af00      	add	r7, sp, #0
 80190c2:	6078      	str	r0, [r7, #4]
          /*prepare=*/AveragePrepare,
          /*invoke=*/AverageEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 80190c4:	687b      	ldr	r3, [r7, #4]
 80190c6:	4a07      	ldr	r2, [pc, #28]	; (80190e4 <_ZN6tflite24Register_AVERAGE_POOL_2DEv+0x28>)
 80190c8:	461c      	mov	r4, r3
 80190ca:	4615      	mov	r5, r2
 80190cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80190ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80190d0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80190d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80190d8:	6878      	ldr	r0, [r7, #4]
 80190da:	370c      	adds	r7, #12
 80190dc:	46bd      	mov	sp, r7
 80190de:	bcb0      	pop	{r4, r5, r7}
 80190e0:	4770      	bx	lr
 80190e2:	bf00      	nop
 80190e4:	0802dd50 	.word	0x0802dd50

080190e8 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>:
    int32_t x, int32_t quantized_multiplier, int left_shift) {
 80190e8:	b580      	push	{r7, lr}
 80190ea:	b084      	sub	sp, #16
 80190ec:	af00      	add	r7, sp, #0
 80190ee:	60f8      	str	r0, [r7, #12]
 80190f0:	60b9      	str	r1, [r7, #8]
 80190f2:	607a      	str	r2, [r7, #4]
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
 80190f4:	68fa      	ldr	r2, [r7, #12]
 80190f6:	687b      	ldr	r3, [r7, #4]
 80190f8:	fa02 f303 	lsl.w	r3, r2, r3
 80190fc:	68b9      	ldr	r1, [r7, #8]
 80190fe:	4618      	mov	r0, r3
 8019100:	f7f4 f918 	bl	800d334 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 8019104:	4603      	mov	r3, r0
}
 8019106:	4618      	mov	r0, r3
 8019108:	3710      	adds	r7, #16
 801910a:	46bd      	mov	sp, r7
 801910c:	bd80      	pop	{r7, pc}

0801910e <_ZN6tflite10lut_lookupEsPKs>:
  return static_cast<LutOutT>(base + delta);
}

// int16_t -> int16_t table lookup with interpolation
// LUT must have 513 values
inline int16_t lut_lookup(int16_t value, const int16_t* lut) {
 801910e:	b580      	push	{r7, lr}
 8019110:	b082      	sub	sp, #8
 8019112:	af00      	add	r7, sp, #0
 8019114:	4603      	mov	r3, r0
 8019116:	6039      	str	r1, [r7, #0]
 8019118:	80fb      	strh	r3, [r7, #6]
  return lut_lookup_with_interpolation(value, lut);
 801911a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801911e:	6839      	ldr	r1, [r7, #0]
 8019120:	4618      	mov	r0, r3
 8019122:	f000 fbb1 	bl	8019888 <_ZN6tflite29lut_lookup_with_interpolationIsEET_sPKS1_>
 8019126:	4603      	mov	r3, r0
}
 8019128:	4618      	mov	r0, r3
 801912a:	3708      	adds	r7, #8
 801912c:	46bd      	mov	sp, r7
 801912e:	bd80      	pop	{r7, pc}

08019130 <_ZN6tflite13GetReciprocalEliPi>:
                                                     InputIntegerBits>(
      input_val);
}

inline int32_t GetReciprocal(int32_t x, int x_integer_digits,
                             int* num_bits_over_unit) {
 8019130:	b580      	push	{r7, lr}
 8019132:	b088      	sub	sp, #32
 8019134:	af00      	add	r7, sp, #0
 8019136:	60f8      	str	r0, [r7, #12]
 8019138:	60b9      	str	r1, [r7, #8]
 801913a:	607a      	str	r2, [r7, #4]
  int headroom_plus_one = CountLeadingZeros(static_cast<uint32_t>(x));
 801913c:	68fb      	ldr	r3, [r7, #12]
 801913e:	4618      	mov	r0, r3
 8019140:	f7f4 fac4 	bl	800d6cc <_ZN6tflite17CountLeadingZerosImEEiT_>
 8019144:	61f8      	str	r0, [r7, #28]
  // This is the number of bits to the left of the binary point above 1.0.
  // Consider x=1.25.  In that case shifted_scale=0.8 and
  // no later adjustment will be needed.
  *num_bits_over_unit = x_integer_digits - headroom_plus_one;
 8019146:	68ba      	ldr	r2, [r7, #8]
 8019148:	69fb      	ldr	r3, [r7, #28]
 801914a:	1ad2      	subs	r2, r2, r3
 801914c:	687b      	ldr	r3, [r7, #4]
 801914e:	601a      	str	r2, [r3, #0]
  const int32_t shifted_sum_minus_one =
      static_cast<int32_t>((static_cast<uint32_t>(x) << headroom_plus_one) -
 8019150:	68fa      	ldr	r2, [r7, #12]
 8019152:	69fb      	ldr	r3, [r7, #28]
 8019154:	fa02 f303 	lsl.w	r3, r2, r3
 8019158:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  const int32_t shifted_sum_minus_one =
 801915c:	61bb      	str	r3, [r7, #24]
                           (static_cast<uint32_t>(1) << 31));

  gemmlowp::FixedPoint<int32_t, 0> shifted_scale =
      gemmlowp::one_over_one_plus_x_for_x_in_0_1(
          gemmlowp::FixedPoint<int32_t, 0>::FromRaw(shifted_sum_minus_one));
 801915e:	69b8      	ldr	r0, [r7, #24]
 8019160:	f7fb f82f 	bl	80141c2 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8019164:	4603      	mov	r3, r0
 8019166:	4618      	mov	r0, r3
 8019168:	f7fb f83c 	bl	80141e4 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>
 801916c:	4603      	mov	r3, r0
 801916e:	617b      	str	r3, [r7, #20]
  return shifted_scale.raw();
 8019170:	f107 0314 	add.w	r3, r7, #20
 8019174:	4618      	mov	r0, r3
 8019176:	f7f4 fabb 	bl	800d6f0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801917a:	4603      	mov	r3, r0
 801917c:	681b      	ldr	r3, [r3, #0]
}
 801917e:	4618      	mov	r0, r3
 8019180:	3720      	adds	r7, #32
 8019182:	46bd      	mov	sp, r7
 8019184:	bd80      	pop	{r7, pc}

08019186 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
namespace tflite {
namespace reference_ops {

inline void Softmax(const SoftmaxParams& params,
                    const RuntimeShape& input_shape, const float* input_data,
                    const RuntimeShape& output_shape, float* output_data) {
 8019186:	b580      	push	{r7, lr}
 8019188:	ed2d 8b02 	vpush	{d8}
 801918c:	b08e      	sub	sp, #56	; 0x38
 801918e:	af00      	add	r7, sp, #0
 8019190:	60f8      	str	r0, [r7, #12]
 8019192:	60b9      	str	r1, [r7, #8]
 8019194:	607a      	str	r2, [r7, #4]
 8019196:	603b      	str	r3, [r7, #0]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 8019198:	68b8      	ldr	r0, [r7, #8]
 801919a:	f7f5 fba5 	bl	800e8e8 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801919e:	4603      	mov	r3, r0
 80191a0:	3b01      	subs	r3, #1
 80191a2:	623b      	str	r3, [r7, #32]
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 80191a4:	683a      	ldr	r2, [r7, #0]
 80191a6:	6a39      	ldr	r1, [r7, #32]
 80191a8:	68b8      	ldr	r0, [r7, #8]
 80191aa:	f7fa ff8e 	bl	80140ca <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 80191ae:	61f8      	str	r0, [r7, #28]
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 80191b0:	6a3b      	ldr	r3, [r7, #32]
 80191b2:	683a      	ldr	r2, [r7, #0]
 80191b4:	6a39      	ldr	r1, [r7, #32]
 80191b6:	68b8      	ldr	r0, [r7, #8]
 80191b8:	f7fa fa43 	bl	8013642 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80191bc:	61b8      	str	r0, [r7, #24]

  for (int i = 0; i < outer_size; ++i) {
 80191be:	2300      	movs	r3, #0
 80191c0:	637b      	str	r3, [r7, #52]	; 0x34
 80191c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80191c4:	69fb      	ldr	r3, [r7, #28]
 80191c6:	429a      	cmp	r2, r3
 80191c8:	f280 8087 	bge.w	80192da <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x154>
    // Find max element value which we'll use to ensure numerical stability
    // taking advantage of the following equality:
    // exp(x[i])/sum(exp(x[i])) == exp(x[i]+C)/sum(exp(x[i]+C))
    float max = std::numeric_limits<float>::lowest();
 80191cc:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 80191d0:	613b      	str	r3, [r7, #16]
    for (int c = 0; c < depth; ++c) {
 80191d2:	2300      	movs	r3, #0
 80191d4:	633b      	str	r3, [r7, #48]	; 0x30
 80191d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80191d8:	69bb      	ldr	r3, [r7, #24]
 80191da:	429a      	cmp	r2, r3
 80191dc:	da15      	bge.n	801920a <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x84>
      max = std::max(max, input_data[i * depth + c]);
 80191de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80191e0:	69ba      	ldr	r2, [r7, #24]
 80191e2:	fb02 f203 	mul.w	r2, r2, r3
 80191e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80191e8:	4413      	add	r3, r2
 80191ea:	009b      	lsls	r3, r3, #2
 80191ec:	687a      	ldr	r2, [r7, #4]
 80191ee:	441a      	add	r2, r3
 80191f0:	f107 0310 	add.w	r3, r7, #16
 80191f4:	4611      	mov	r1, r2
 80191f6:	4618      	mov	r0, r3
 80191f8:	f7f4 f81e 	bl	800d238 <_ZSt3maxIfERKT_S2_S2_>
 80191fc:	4603      	mov	r3, r0
 80191fe:	681b      	ldr	r3, [r3, #0]
 8019200:	613b      	str	r3, [r7, #16]
    for (int c = 0; c < depth; ++c) {
 8019202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019204:	3301      	adds	r3, #1
 8019206:	633b      	str	r3, [r7, #48]	; 0x30
 8019208:	e7e5      	b.n	80191d6 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x50>
    }

    // Compute sum.
    float sum = 0.f;
 801920a:	f04f 0300 	mov.w	r3, #0
 801920e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (int c = 0; c < depth; ++c) {
 8019210:	2300      	movs	r3, #0
 8019212:	62bb      	str	r3, [r7, #40]	; 0x28
 8019214:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019216:	69bb      	ldr	r3, [r7, #24]
 8019218:	429a      	cmp	r2, r3
 801921a:	da36      	bge.n	801928a <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x104>
      const float exp_c = std::exp((input_data[i * depth + c] - max) *
 801921c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801921e:	69ba      	ldr	r2, [r7, #24]
 8019220:	fb02 f203 	mul.w	r2, r2, r3
 8019224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019226:	4413      	add	r3, r2
 8019228:	009b      	lsls	r3, r3, #2
 801922a:	687a      	ldr	r2, [r7, #4]
 801922c:	4413      	add	r3, r2
 801922e:	ed93 7a00 	vldr	s14, [r3]
 8019232:	edd7 7a04 	vldr	s15, [r7, #16]
 8019236:	ee37 8a67 	vsub.f32	s16, s14, s15
                                   static_cast<float>(params.beta));
 801923a:	68fb      	ldr	r3, [r7, #12]
 801923c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019240:	4610      	mov	r0, r2
 8019242:	4619      	mov	r1, r3
 8019244:	f7e7 fcec 	bl	8000c20 <__aeabi_d2f>
 8019248:	ee07 0a90 	vmov	s15, r0
      const float exp_c = std::exp((input_data[i * depth + c] - max) *
 801924c:	ee68 7a27 	vmul.f32	s15, s16, s15
 8019250:	eeb0 0a67 	vmov.f32	s0, s15
 8019254:	f7f4 f85e 	bl	800d314 <_ZSt3expf>
 8019258:	ed87 0a05 	vstr	s0, [r7, #20]
      output_data[i * depth + c] = exp_c;
 801925c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801925e:	69ba      	ldr	r2, [r7, #24]
 8019260:	fb02 f203 	mul.w	r2, r2, r3
 8019264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019266:	4413      	add	r3, r2
 8019268:	009b      	lsls	r3, r3, #2
 801926a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801926c:	4413      	add	r3, r2
 801926e:	697a      	ldr	r2, [r7, #20]
 8019270:	601a      	str	r2, [r3, #0]
      sum += exp_c;
 8019272:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8019276:	edd7 7a05 	vldr	s15, [r7, #20]
 801927a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801927e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    for (int c = 0; c < depth; ++c) {
 8019282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019284:	3301      	adds	r3, #1
 8019286:	62bb      	str	r3, [r7, #40]	; 0x28
 8019288:	e7c4      	b.n	8019214 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x8e>
    }

    // Compute result.
    for (int c = 0; c < depth; ++c) {
 801928a:	2300      	movs	r3, #0
 801928c:	627b      	str	r3, [r7, #36]	; 0x24
 801928e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019290:	69bb      	ldr	r3, [r7, #24]
 8019292:	429a      	cmp	r2, r3
 8019294:	da1d      	bge.n	80192d2 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x14c>
      output_data[i * depth + c] = output_data[i * depth + c] / sum;
 8019296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019298:	69ba      	ldr	r2, [r7, #24]
 801929a:	fb02 f203 	mul.w	r2, r2, r3
 801929e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80192a0:	4413      	add	r3, r2
 80192a2:	009b      	lsls	r3, r3, #2
 80192a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80192a6:	4413      	add	r3, r2
 80192a8:	edd3 6a00 	vldr	s13, [r3]
 80192ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80192ae:	69ba      	ldr	r2, [r7, #24]
 80192b0:	fb02 f203 	mul.w	r2, r2, r3
 80192b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80192b6:	4413      	add	r3, r2
 80192b8:	009b      	lsls	r3, r3, #2
 80192ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80192bc:	4413      	add	r3, r2
 80192be:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80192c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80192c6:	edc3 7a00 	vstr	s15, [r3]
    for (int c = 0; c < depth; ++c) {
 80192ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80192cc:	3301      	adds	r3, #1
 80192ce:	627b      	str	r3, [r7, #36]	; 0x24
 80192d0:	e7dd      	b.n	801928e <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x108>
  for (int i = 0; i < outer_size; ++i) {
 80192d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80192d4:	3301      	adds	r3, #1
 80192d6:	637b      	str	r3, [r7, #52]	; 0x34
 80192d8:	e773      	b.n	80191c2 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x3c>
    }
  }
}
 80192da:	bf00      	nop
 80192dc:	3738      	adds	r7, #56	; 0x38
 80192de:	46bd      	mov	sp, r7
 80192e0:	ecbd 8b02 	vpop	{d8}
 80192e4:	bd80      	pop	{r7, pc}
	...

080192e8 <_ZN6tflite13reference_ops19SoftMaxCalculateExpERKNS_13SoftmaxParamsEPKsisii>:
}

// Computes exp(input - max_input)
inline int16_t SoftMaxCalculateExp(const SoftmaxParams& params,
                                   const int16_t* input_data, const int depth,
                                   int16_t max_in_row, int i, int c) {
 80192e8:	b580      	push	{r7, lr}
 80192ea:	b08a      	sub	sp, #40	; 0x28
 80192ec:	af00      	add	r7, sp, #0
 80192ee:	60f8      	str	r0, [r7, #12]
 80192f0:	60b9      	str	r1, [r7, #8]
 80192f2:	607a      	str	r2, [r7, #4]
 80192f4:	807b      	strh	r3, [r7, #2]
  int32_t input_diff = input_data[i * depth + c] - max_in_row;
 80192f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80192f8:	687a      	ldr	r2, [r7, #4]
 80192fa:	fb02 f203 	mul.w	r2, r2, r3
 80192fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019300:	4413      	add	r3, r2
 8019302:	005b      	lsls	r3, r3, #1
 8019304:	68ba      	ldr	r2, [r7, #8]
 8019306:	4413      	add	r3, r2
 8019308:	f9b3 3000 	ldrsh.w	r3, [r3]
 801930c:	461a      	mov	r2, r3
 801930e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8019312:	1ad3      	subs	r3, r2, r3
 8019314:	627b      	str	r3, [r7, #36]	; 0x24
  // scale the input_diff such that [-65535, 0] correspond to [-10.0, 0.0]
  // exp lut generated with range [-10, 0], as exp(-10) is negligible.
  int32_t scaled_diff = MultiplyByQuantizedMultiplier(
      input_diff, params.input_multiplier, params.input_left_shift);
 8019316:	68fb      	ldr	r3, [r7, #12]
 8019318:	6899      	ldr	r1, [r3, #8]
 801931a:	68fb      	ldr	r3, [r7, #12]
 801931c:	68db      	ldr	r3, [r3, #12]
  int32_t scaled_diff = MultiplyByQuantizedMultiplier(
 801931e:	461a      	mov	r2, r3
 8019320:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019322:	f7f4 f877 	bl	800d414 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 8019326:	6238      	str	r0, [r7, #32]
  // recenter to [-32768, 32767]
  int32_t sym_scaled_diff = scaled_diff + 32767;
 8019328:	6a3b      	ldr	r3, [r7, #32]
 801932a:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 801932e:	337f      	adds	r3, #127	; 0x7f
 8019330:	613b      	str	r3, [r7, #16]
  int16_t sat_sym_scaled_diff =
      std::min(std::max(sym_scaled_diff, static_cast<int32_t>(-32768)),
 8019332:	4b12      	ldr	r3, [pc, #72]	; (801937c <_ZN6tflite13reference_ops19SoftMaxCalculateExpERKNS_13SoftmaxParamsEPKsisii+0x94>)
 8019334:	617b      	str	r3, [r7, #20]
               static_cast<int32_t>(32767));
 8019336:	f107 0214 	add.w	r2, r7, #20
 801933a:	f107 0310 	add.w	r3, r7, #16
 801933e:	4611      	mov	r1, r2
 8019340:	4618      	mov	r0, r3
 8019342:	f7f4 f93b 	bl	800d5bc <_ZSt3maxIlERKT_S2_S2_>
 8019346:	4602      	mov	r2, r0
 8019348:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801934c:	61bb      	str	r3, [r7, #24]
 801934e:	f107 0318 	add.w	r3, r7, #24
 8019352:	4619      	mov	r1, r3
 8019354:	4610      	mov	r0, r2
 8019356:	f7f4 f91d 	bl	800d594 <_ZSt3minIlERKT_S2_S2_>
 801935a:	4603      	mov	r3, r0
      std::min(std::max(sym_scaled_diff, static_cast<int32_t>(-32768)),
 801935c:	681b      	ldr	r3, [r3, #0]
               static_cast<int32_t>(32767));
 801935e:	83fb      	strh	r3, [r7, #30]
  // apply the exp() LUT activation function
  return lut_lookup(sat_sym_scaled_diff, params.exp_lut);
 8019360:	68fb      	ldr	r3, [r7, #12]
 8019362:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8019364:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8019368:	4611      	mov	r1, r2
 801936a:	4618      	mov	r0, r3
 801936c:	f7ff fecf 	bl	801910e <_ZN6tflite10lut_lookupEsPKs>
 8019370:	4603      	mov	r3, r0
}
 8019372:	4618      	mov	r0, r3
 8019374:	3728      	adds	r7, #40	; 0x28
 8019376:	46bd      	mov	sp, r7
 8019378:	bd80      	pop	{r7, pc}
 801937a:	bf00      	nop
 801937c:	ffff8000 	.word	0xffff8000

08019380 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps>:
// Quantized softmax with int16_t input and int16_t output.
inline void SoftmaxInt16(const SoftmaxParams& params,
                         const RuntimeShape& input_shape,
                         const int16_t* input_data,
                         const RuntimeShape& output_shape,
                         int16_t* output_data) {
 8019380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019384:	b0a1      	sub	sp, #132	; 0x84
 8019386:	af02      	add	r7, sp, #8
 8019388:	6178      	str	r0, [r7, #20]
 801938a:	6139      	str	r1, [r7, #16]
 801938c:	60fa      	str	r2, [r7, #12]
 801938e:	60bb      	str	r3, [r7, #8]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 8019390:	6938      	ldr	r0, [r7, #16]
 8019392:	f7f5 faa9 	bl	800e8e8 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8019396:	4603      	mov	r3, r0
 8019398:	3b01      	subs	r3, #1
 801939a:	663b      	str	r3, [r7, #96]	; 0x60
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 801939c:	68ba      	ldr	r2, [r7, #8]
 801939e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80193a0:	6938      	ldr	r0, [r7, #16]
 80193a2:	f7fa fe92 	bl	80140ca <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 80193a6:	65f8      	str	r0, [r7, #92]	; 0x5c
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 80193a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80193aa:	68ba      	ldr	r2, [r7, #8]
 80193ac:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80193ae:	6938      	ldr	r0, [r7, #16]
 80193b0:	f7fa f947 	bl	8013642 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80193b4:	65b8      	str	r0, [r7, #88]	; 0x58

  for (int i = 0; i < outer_size; ++i) {
 80193b6:	2300      	movs	r3, #0
 80193b8:	677b      	str	r3, [r7, #116]	; 0x74
 80193ba:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80193bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80193be:	429a      	cmp	r2, r3
 80193c0:	f280 8119 	bge.w	80195f6 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x276>
    // Find the largest element
    int16_t max_in_row = std::numeric_limits<int16_t>::min();
 80193c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80193c8:	84fb      	strh	r3, [r7, #38]	; 0x26
    for (int c = 0; c < depth; ++c) {
 80193ca:	2300      	movs	r3, #0
 80193cc:	673b      	str	r3, [r7, #112]	; 0x70
 80193ce:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80193d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80193d2:	429a      	cmp	r2, r3
 80193d4:	da16      	bge.n	8019404 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x84>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 80193d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80193d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80193da:	fb02 f203 	mul.w	r2, r2, r3
 80193de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80193e0:	4413      	add	r3, r2
 80193e2:	005b      	lsls	r3, r3, #1
 80193e4:	68fa      	ldr	r2, [r7, #12]
 80193e6:	441a      	add	r2, r3
 80193e8:	f107 0326 	add.w	r3, r7, #38	; 0x26
 80193ec:	4611      	mov	r1, r2
 80193ee:	4618      	mov	r0, r3
 80193f0:	f7fa fdc7 	bl	8013f82 <_ZSt3maxIsERKT_S2_S2_>
 80193f4:	4603      	mov	r3, r0
 80193f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80193fa:	84fb      	strh	r3, [r7, #38]	; 0x26
    for (int c = 0; c < depth; ++c) {
 80193fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80193fe:	3301      	adds	r3, #1
 8019400:	673b      	str	r3, [r7, #112]	; 0x70
 8019402:	e7e4      	b.n	80193ce <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x4e>

    // This loops computes the exp values and their sum. We will need the exp
    // values later on in the function so we cache them in the output_data
    // buffer. This is an optimization done to avoid calculating the exp values
    // twice making use of the output_data buffer as scratch memory.
    int32_t sum_of_exps = 0;  // Q16.15 fixed point format.
 8019404:	2300      	movs	r3, #0
 8019406:	66fb      	str	r3, [r7, #108]	; 0x6c
    int16_t* exp_results_Q015 = output_data + i * depth;
 8019408:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801940a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801940c:	fb02 f303 	mul.w	r3, r2, r3
 8019410:	005b      	lsls	r3, r3, #1
 8019412:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8019416:	4413      	add	r3, r2
 8019418:	657b      	str	r3, [r7, #84]	; 0x54
    for (int c = 0; c < depth; ++c) {
 801941a:	2300      	movs	r3, #0
 801941c:	66bb      	str	r3, [r7, #104]	; 0x68
 801941e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8019420:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8019422:	429a      	cmp	r2, r3
 8019424:	da1f      	bge.n	8019466 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0xe6>
      exp_results_Q015[c] =
          SoftMaxCalculateExp(params, input_data, depth, max_in_row, i, c);
 8019426:	f9b7 1026 	ldrsh.w	r1, [r7, #38]	; 0x26
      exp_results_Q015[c] =
 801942a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801942c:	005b      	lsls	r3, r3, #1
 801942e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8019430:	18d6      	adds	r6, r2, r3
          SoftMaxCalculateExp(params, input_data, depth, max_in_row, i, c);
 8019432:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8019434:	9301      	str	r3, [sp, #4]
 8019436:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019438:	9300      	str	r3, [sp, #0]
 801943a:	460b      	mov	r3, r1
 801943c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801943e:	68f9      	ldr	r1, [r7, #12]
 8019440:	6978      	ldr	r0, [r7, #20]
 8019442:	f7ff ff51 	bl	80192e8 <_ZN6tflite13reference_ops19SoftMaxCalculateExpERKNS_13SoftmaxParamsEPKsisii>
 8019446:	4603      	mov	r3, r0
      exp_results_Q015[c] =
 8019448:	8033      	strh	r3, [r6, #0]
      sum_of_exps += exp_results_Q015[c];
 801944a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801944c:	005b      	lsls	r3, r3, #1
 801944e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8019450:	4413      	add	r3, r2
 8019452:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019456:	461a      	mov	r2, r3
 8019458:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801945a:	4413      	add	r3, r2
 801945c:	66fb      	str	r3, [r7, #108]	; 0x6c
    for (int c = 0; c < depth; ++c) {
 801945e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8019460:	3301      	adds	r3, #1
 8019462:	66bb      	str	r3, [r7, #104]	; 0x68
 8019464:	e7db      	b.n	801941e <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x9e>
    }

    // Compute the reciprocal 1/sum_of_exps
    uint8_t headroom_plus_one =
        CountLeadingZeros(static_cast<uint32_t>(sum_of_exps));
 8019466:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019468:	4618      	mov	r0, r3
 801946a:	f7f4 f92f 	bl	800d6cc <_ZN6tflite17CountLeadingZerosImEEiT_>
 801946e:	4603      	mov	r3, r0
 8019470:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    int32_t shifted_sum =
        ((static_cast<int64_t>(sum_of_exps) << (headroom_plus_one - 1)) +
 8019474:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019476:	461a      	mov	r2, r3
 8019478:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801947c:	f897 1053 	ldrb.w	r1, [r7, #83]	; 0x53
 8019480:	3901      	subs	r1, #1
 8019482:	f1a1 0620 	sub.w	r6, r1, #32
 8019486:	f1c1 0020 	rsb	r0, r1, #32
 801948a:	fa03 f501 	lsl.w	r5, r3, r1
 801948e:	fa02 f606 	lsl.w	r6, r2, r6
 8019492:	4335      	orrs	r5, r6
 8019494:	fa22 f000 	lsr.w	r0, r2, r0
 8019498:	4305      	orrs	r5, r0
 801949a:	fa02 f401 	lsl.w	r4, r2, r1
 801949e:	f514 5300 	adds.w	r3, r4, #8192	; 0x2000
 80194a2:	603b      	str	r3, [r7, #0]
 80194a4:	f145 0300 	adc.w	r3, r5, #0
 80194a8:	607b      	str	r3, [r7, #4]
         (1 << 13)) >>
 80194aa:	f04f 0200 	mov.w	r2, #0
 80194ae:	f04f 0300 	mov.w	r3, #0
 80194b2:	6839      	ldr	r1, [r7, #0]
 80194b4:	0b8a      	lsrs	r2, r1, #14
 80194b6:	6879      	ldr	r1, [r7, #4]
 80194b8:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 80194bc:	6879      	ldr	r1, [r7, #4]
 80194be:	138b      	asrs	r3, r1, #14
    int32_t shifted_sum =
 80194c0:	4613      	mov	r3, r2
 80194c2:	64fb      	str	r3, [r7, #76]	; 0x4c
        14;
    // since the LUT computes 1/(1 + x) we need to first compute x = (sum - 1).
    // also, the LUT expects a symmetrical input, so we must also recenter x
    // from [0, 65535] to [-32768, 32767].
    int32_t sym_shifted_sum = shifted_sum + (-((1 << 15) + (1 << 16)));
 80194c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80194c6:	f5a3 33c0 	sub.w	r3, r3, #98304	; 0x18000
 80194ca:	623b      	str	r3, [r7, #32]
    int16_t sat_sym_shifted_sum = static_cast<int16_t>(
        std::min(std::max(sym_shifted_sum, static_cast<int32_t>(-32768)),
 80194cc:	4b4c      	ldr	r3, [pc, #304]	; (8019600 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x280>)
 80194ce:	62bb      	str	r3, [r7, #40]	; 0x28
                 static_cast<int32_t>(32767)));
 80194d0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80194d4:	f107 0320 	add.w	r3, r7, #32
 80194d8:	4611      	mov	r1, r2
 80194da:	4618      	mov	r0, r3
 80194dc:	f7f4 f86e 	bl	800d5bc <_ZSt3maxIlERKT_S2_S2_>
 80194e0:	4602      	mov	r2, r0
 80194e2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80194e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80194e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80194ec:	4619      	mov	r1, r3
 80194ee:	4610      	mov	r0, r2
 80194f0:	f7f4 f850 	bl	800d594 <_ZSt3minIlERKT_S2_S2_>
 80194f4:	4603      	mov	r3, r0
        std::min(std::max(sym_shifted_sum, static_cast<int32_t>(-32768)),
 80194f6:	681b      	ldr	r3, [r3, #0]
                 static_cast<int32_t>(32767)));
 80194f8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    // apply 1/(1 + x) LUT activation function
    int16_t reciprocal_scale_Q015 =
        lut_lookup(sat_sym_shifted_sum, params.one_over_one_plus_x_lut);
 80194fc:	697b      	ldr	r3, [r7, #20]
 80194fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019500:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8019504:	4611      	mov	r1, r2
 8019506:	4618      	mov	r0, r3
 8019508:	f7ff fe01 	bl	801910e <_ZN6tflite10lut_lookupEsPKs>
 801950c:	4603      	mov	r3, r0
 801950e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    // Rescale the exp_result with reciprocal
    // range of output is [0, 32767] correspond to [0.0, 1.0]
    for (int c = 0; c < depth; ++c) {
 8019512:	2300      	movs	r3, #0
 8019514:	667b      	str	r3, [r7, #100]	; 0x64
 8019516:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8019518:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801951a:	429a      	cmp	r2, r3
 801951c:	da67      	bge.n	80195ee <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x26e>
      uint8_t right_shift = 31 - headroom_plus_one;
 801951e:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8019522:	f1c3 031f 	rsb	r3, r3, #31
 8019526:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      int64_t round = 1 << (right_shift - 1);
 801952a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801952e:	3b01      	subs	r3, #1
 8019530:	2201      	movs	r2, #1
 8019532:	fa02 f303 	lsl.w	r3, r2, r3
 8019536:	461a      	mov	r2, r3
 8019538:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801953c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
 8019540:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8019542:	005b      	lsls	r3, r3, #1
 8019544:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8019546:	4413      	add	r3, r2
 8019548:	f9b3 3000 	ldrsh.w	r3, [r3]
 801954c:	b218      	sxth	r0, r3
 801954e:	ea4f 71e0 	mov.w	r1, r0, asr #31
                            static_cast<int64_t>(reciprocal_scale_Q015) +
 8019552:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 8019556:	ea4f 73e2 	mov.w	r3, r2, asr #31
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
 801955a:	fb02 fc01 	mul.w	ip, r2, r1
 801955e:	fb00 f603 	mul.w	r6, r0, r3
 8019562:	4466      	add	r6, ip
 8019564:	fba0 2302 	umull	r2, r3, r0, r2
 8019568:	18f1      	adds	r1, r6, r3
 801956a:	460b      	mov	r3, r1
                            static_cast<int64_t>(reciprocal_scale_Q015) +
 801956c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8019570:	eb12 0a00 	adds.w	sl, r2, r0
 8019574:	eb43 0b01 	adc.w	fp, r3, r1
                        round) >>
                       right_shift;
 8019578:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
                        round) >>
 801957c:	f1c3 0120 	rsb	r1, r3, #32
 8019580:	f1b3 0220 	subs.w	r2, r3, #32
 8019584:	fa2a f803 	lsr.w	r8, sl, r3
 8019588:	fa0b f101 	lsl.w	r1, fp, r1
 801958c:	ea48 0801 	orr.w	r8, r8, r1
 8019590:	d403      	bmi.n	801959a <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x21a>
 8019592:	fa4b f202 	asr.w	r2, fp, r2
 8019596:	ea48 0802 	orr.w	r8, r8, r2
 801959a:	fa4b f903 	asr.w	r9, fp, r3
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
 801959e:	4643      	mov	r3, r8
 80195a0:	61fb      	str	r3, [r7, #28]
      output_data[i * depth + c] = static_cast<int16_t>(
          std::min(std::max(result, static_cast<int32_t>(0)),
 80195a2:	2300      	movs	r3, #0
 80195a4:	633b      	str	r3, [r7, #48]	; 0x30
                   static_cast<int32_t>(32767)));
 80195a6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80195aa:	f107 031c 	add.w	r3, r7, #28
 80195ae:	4611      	mov	r1, r2
 80195b0:	4618      	mov	r0, r3
 80195b2:	f7f4 f803 	bl	800d5bc <_ZSt3maxIlERKT_S2_S2_>
 80195b6:	4602      	mov	r2, r0
 80195b8:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80195bc:	637b      	str	r3, [r7, #52]	; 0x34
 80195be:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80195c2:	4619      	mov	r1, r3
 80195c4:	4610      	mov	r0, r2
 80195c6:	f7f3 ffe5 	bl	800d594 <_ZSt3minIlERKT_S2_S2_>
 80195ca:	4603      	mov	r3, r0
          std::min(std::max(result, static_cast<int32_t>(0)),
 80195cc:	6819      	ldr	r1, [r3, #0]
      output_data[i * depth + c] = static_cast<int16_t>(
 80195ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80195d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80195d2:	fb02 f203 	mul.w	r2, r2, r3
 80195d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80195d8:	4413      	add	r3, r2
 80195da:	005b      	lsls	r3, r3, #1
 80195dc:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80195e0:	4413      	add	r3, r2
 80195e2:	b20a      	sxth	r2, r1
 80195e4:	801a      	strh	r2, [r3, #0]
    for (int c = 0; c < depth; ++c) {
 80195e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80195e8:	3301      	adds	r3, #1
 80195ea:	667b      	str	r3, [r7, #100]	; 0x64
 80195ec:	e793      	b.n	8019516 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x196>
  for (int i = 0; i < outer_size; ++i) {
 80195ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80195f0:	3301      	adds	r3, #1
 80195f2:	677b      	str	r3, [r7, #116]	; 0x74
 80195f4:	e6e1      	b.n	80193ba <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x3a>
    }
  }
}
 80195f6:	bf00      	nop
 80195f8:	377c      	adds	r7, #124	; 0x7c
 80195fa:	46bd      	mov	sp, r7
 80195fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019600:	ffff8000 	.word	0xffff8000

08019604 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE>:

namespace tflite {
namespace {

void SoftmaxQuantized(const TfLiteEvalTensor* input, TfLiteEvalTensor* output,
                      const SoftmaxParams& op_data) {
 8019604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019608:	b0b0      	sub	sp, #192	; 0xc0
 801960a:	af04      	add	r7, sp, #16
 801960c:	60f8      	str	r0, [r7, #12]
 801960e:	60b9      	str	r1, [r7, #8]
 8019610:	607a      	str	r2, [r7, #4]
  if (input->type == kTfLiteInt8) {
 8019612:	68fb      	ldr	r3, [r7, #12]
 8019614:	7a1b      	ldrb	r3, [r3, #8]
 8019616:	2b09      	cmp	r3, #9
 8019618:	d17b      	bne.n	8019712 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x10e>
    if (output->type == kTfLiteInt16) {
 801961a:	68bb      	ldr	r3, [r7, #8]
 801961c:	7a1b      	ldrb	r3, [r3, #8]
 801961e:	2b07      	cmp	r3, #7
 8019620:	d127      	bne.n	8019672 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x6e>
      tflite::reference_ops::Softmax(
          op_data, tflite::micro::GetTensorShape(input),
 8019622:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8019626:	68f9      	ldr	r1, [r7, #12]
 8019628:	4618      	mov	r0, r3
 801962a:	f7fa fcc0 	bl	8013fae <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 801962e:	68f8      	ldr	r0, [r7, #12]
 8019630:	f7f9 feef 	bl	8013412 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8019634:	4604      	mov	r4, r0
          tflite::micro::GetTensorData<int8_t>(input),
          tflite::micro::GetTensorShape(output),
 8019636:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801963a:	68b9      	ldr	r1, [r7, #8]
 801963c:	4618      	mov	r0, r3
 801963e:	f7fa fcb6 	bl	8013fae <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 8019642:	68b8      	ldr	r0, [r7, #8]
 8019644:	f7fa f82c 	bl	80136a0 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
 8019648:	4602      	mov	r2, r0
 801964a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801964e:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8019652:	9200      	str	r2, [sp, #0]
 8019654:	4622      	mov	r2, r4
 8019656:	6878      	ldr	r0, [r7, #4]
 8019658:	f000 f964 	bl	8019924 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
          tflite::micro::GetTensorShape(output),
 801965c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8019660:	4618      	mov	r0, r3
 8019662:	f7f5 f936 	bl	800e8d2 <_ZN6tflite12RuntimeShapeD1Ev>
          op_data, tflite::micro::GetTensorShape(input),
 8019666:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801966a:	4618      	mov	r0, r3
 801966c:	f7f5 f931 	bl	800e8d2 <_ZN6tflite12RuntimeShapeD1Ev>
        op_data, tflite::micro::GetTensorShape(input),
        tflite::micro::GetTensorData<int16_t>(input),
        tflite::micro::GetTensorShape(output),
        tflite::micro::GetTensorData<int16_t>(output));
  }
}
 8019670:	e076      	b.n	8019760 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x15c>
      const auto input_shape = tflite::micro::GetTensorShape(input);
 8019672:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8019676:	68f9      	ldr	r1, [r7, #12]
 8019678:	4618      	mov	r0, r3
 801967a:	f7fa fc98 	bl	8013fae <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      const auto output_shape = tflite::micro::GetTensorShape(output);
 801967e:	f107 0314 	add.w	r3, r7, #20
 8019682:	68b9      	ldr	r1, [r7, #8]
 8019684:	4618      	mov	r0, r3
 8019686:	f7fa fc92 	bl	8013fae <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      const int trailing_dim = input_shape.DimensionsCount() - 1;
 801968a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801968e:	4618      	mov	r0, r3
 8019690:	f7f5 f92a 	bl	800e8e8 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8019694:	4603      	mov	r3, r0
 8019696:	3b01      	subs	r3, #1
 8019698:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
          MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 801969c:	f107 0214 	add.w	r2, r7, #20
 80196a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80196a4:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 80196a8:	4618      	mov	r0, r3
 80196aa:	f7fa fd0e 	bl	80140ca <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 80196ae:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
          MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 80196b2:	f107 0214 	add.w	r2, r7, #20
 80196b6:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80196ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80196be:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 80196c2:	f7f9 ffbe 	bl	8013642 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80196c6:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
      arm_softmax_s8(tflite::micro::GetTensorData<int8_t>(input), outer_size,
 80196ca:	68f8      	ldr	r0, [r7, #12]
 80196cc:	f7f9 fea1 	bl	8013412 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 80196d0:	4680      	mov	r8, r0
                     depth, op_data.input_multiplier, op_data.input_left_shift,
 80196d2:	687b      	ldr	r3, [r7, #4]
 80196d4:	689e      	ldr	r6, [r3, #8]
 80196d6:	687b      	ldr	r3, [r7, #4]
 80196d8:	68dc      	ldr	r4, [r3, #12]
                     op_data.diff_min,
 80196da:	687b      	ldr	r3, [r7, #4]
 80196dc:	699d      	ldr	r5, [r3, #24]
      arm_softmax_s8(tflite::micro::GetTensorData<int8_t>(input), outer_size,
 80196de:	68b8      	ldr	r0, [r7, #8]
 80196e0:	f7f9 fea6 	bl	8013430 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 80196e4:	4603      	mov	r3, r0
 80196e6:	9302      	str	r3, [sp, #8]
 80196e8:	9501      	str	r5, [sp, #4]
 80196ea:	9400      	str	r4, [sp, #0]
 80196ec:	4633      	mov	r3, r6
 80196ee:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80196f2:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80196f6:	4640      	mov	r0, r8
 80196f8:	f009 ffc6 	bl	8023688 <arm_softmax_s8>
      const auto output_shape = tflite::micro::GetTensorShape(output);
 80196fc:	f107 0314 	add.w	r3, r7, #20
 8019700:	4618      	mov	r0, r3
 8019702:	f7f5 f8e6 	bl	800e8d2 <_ZN6tflite12RuntimeShapeD1Ev>
      const auto input_shape = tflite::micro::GetTensorShape(input);
 8019706:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801970a:	4618      	mov	r0, r3
 801970c:	f7f5 f8e1 	bl	800e8d2 <_ZN6tflite12RuntimeShapeD1Ev>
}
 8019710:	e026      	b.n	8019760 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x15c>
        op_data, tflite::micro::GetTensorShape(input),
 8019712:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8019716:	68f9      	ldr	r1, [r7, #12]
 8019718:	4618      	mov	r0, r3
 801971a:	f7fa fc48 	bl	8013fae <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::SoftmaxInt16(
 801971e:	68f8      	ldr	r0, [r7, #12]
 8019720:	f7fa fc20 	bl	8013f64 <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>
 8019724:	4604      	mov	r4, r0
        tflite::micro::GetTensorShape(output),
 8019726:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801972a:	68b9      	ldr	r1, [r7, #8]
 801972c:	4618      	mov	r0, r3
 801972e:	f7fa fc3e 	bl	8013fae <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::SoftmaxInt16(
 8019732:	68b8      	ldr	r0, [r7, #8]
 8019734:	f7f9 ffb4 	bl	80136a0 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
 8019738:	4602      	mov	r2, r0
 801973a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801973e:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8019742:	9200      	str	r2, [sp, #0]
 8019744:	4622      	mov	r2, r4
 8019746:	6878      	ldr	r0, [r7, #4]
 8019748:	f7ff fe1a 	bl	8019380 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps>
        tflite::micro::GetTensorShape(output),
 801974c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8019750:	4618      	mov	r0, r3
 8019752:	f7f5 f8be 	bl	800e8d2 <_ZN6tflite12RuntimeShapeD1Ev>
        op_data, tflite::micro::GetTensorShape(input),
 8019756:	f107 0374 	add.w	r3, r7, #116	; 0x74
 801975a:	4618      	mov	r0, r3
 801975c:	f7f5 f8b9 	bl	800e8d2 <_ZN6tflite12RuntimeShapeD1Ev>
}
 8019760:	bf00      	nop
 8019762:	37b0      	adds	r7, #176	; 0xb0
 8019764:	46bd      	mov	sp, r7
 8019766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0801976c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
 801976c:	b5b0      	push	{r4, r5, r7, lr}
 801976e:	b0a0      	sub	sp, #128	; 0x80
 8019770:	af02      	add	r7, sp, #8
 8019772:	6078      	str	r0, [r7, #4]
 8019774:	6039      	str	r1, [r7, #0]
  const TfLiteEvalTensor* input = tflite::micro::GetEvalInput(context, node, 0);
 8019776:	2200      	movs	r2, #0
 8019778:	6839      	ldr	r1, [r7, #0]
 801977a:	6878      	ldr	r0, [r7, #4]
 801977c:	f7f9 fdf9 	bl	8013372 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8019780:	6778      	str	r0, [r7, #116]	; 0x74
  TfLiteEvalTensor* output = tflite::micro::GetEvalOutput(context, node, 0);
 8019782:	2200      	movs	r2, #0
 8019784:	6839      	ldr	r1, [r7, #0]
 8019786:	6878      	ldr	r0, [r7, #4]
 8019788:	f7f9 fe03 	bl	8013392 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 801978c:	6738      	str	r0, [r7, #112]	; 0x70

  TFLITE_DCHECK(node->user_data != nullptr);
 801978e:	683b      	ldr	r3, [r7, #0]
 8019790:	691b      	ldr	r3, [r3, #16]
 8019792:	2b00      	cmp	r3, #0
 8019794:	d101      	bne.n	801979a <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x2e>
 8019796:	f00d fab2 	bl	8026cfe <abort>
  const SoftmaxParams data =
      *static_cast<const SoftmaxParams*>(node->user_data);
 801979a:	683b      	ldr	r3, [r7, #0]
 801979c:	691b      	ldr	r3, [r3, #16]
  const SoftmaxParams data =
 801979e:	f107 0408 	add.w	r4, r7, #8
 80197a2:	461d      	mov	r5, r3
 80197a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80197a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80197a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80197aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80197ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80197ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80197b0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80197b4:	e884 0003 	stmia.w	r4, {r0, r1}

  switch (input->type) {
 80197b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80197ba:	7a1b      	ldrb	r3, [r3, #8]
 80197bc:	2b09      	cmp	r3, #9
 80197be:	d030      	beq.n	8019822 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xb6>
 80197c0:	2b09      	cmp	r3, #9
 80197c2:	dc37      	bgt.n	8019834 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xc8>
 80197c4:	2b01      	cmp	r3, #1
 80197c6:	d002      	beq.n	80197ce <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x62>
 80197c8:	2b07      	cmp	r3, #7
 80197ca:	d02a      	beq.n	8019822 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xb6>
 80197cc:	e032      	b.n	8019834 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xc8>
    case kTfLiteFloat32: {
      tflite::reference_ops::Softmax(
          data, tflite::micro::GetTensorShape(input),
 80197ce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80197d2:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80197d4:	4618      	mov	r0, r3
 80197d6:	f7fa fbea 	bl	8013fae <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 80197da:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80197dc:	f7f9 fdf9 	bl	80133d2 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 80197e0:	4604      	mov	r4, r0
          tflite::micro::GetTensorData<float>(input),
          tflite::micro::GetTensorShape(output),
 80197e2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80197e6:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80197e8:	4618      	mov	r0, r3
 80197ea:	f7fa fbe0 	bl	8013fae <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 80197ee:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80197f0:	f7f9 fdfe 	bl	80133f0 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 80197f4:	4602      	mov	r2, r0
 80197f6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80197fa:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80197fe:	f107 0008 	add.w	r0, r7, #8
 8019802:	9200      	str	r2, [sp, #0]
 8019804:	4622      	mov	r2, r4
 8019806:	f7ff fcbe 	bl	8019186 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>
          tflite::micro::GetTensorShape(output),
 801980a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801980e:	4618      	mov	r0, r3
 8019810:	f7f5 f85f 	bl	800e8d2 <_ZN6tflite12RuntimeShapeD1Ev>
          data, tflite::micro::GetTensorShape(input),
 8019814:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8019818:	4618      	mov	r0, r3
 801981a:	f7f5 f85a 	bl	800e8d2 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorData<float>(output));
      return kTfLiteOk;
 801981e:	2300      	movs	r3, #0
 8019820:	e016      	b.n	8019850 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe4>
    }
    case kTfLiteInt8:
    case kTfLiteInt16: {
      SoftmaxQuantized(input, output, data);
 8019822:	f107 0308 	add.w	r3, r7, #8
 8019826:	461a      	mov	r2, r3
 8019828:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801982a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801982c:	f7ff feea 	bl	8019604 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE>
      return kTfLiteOk;
 8019830:	2300      	movs	r3, #0
 8019832:	e00d      	b.n	8019850 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe4>
    }
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 8019834:	687b      	ldr	r3, [r7, #4]
 8019836:	695c      	ldr	r4, [r3, #20]
 8019838:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801983a:	7a1b      	ldrb	r3, [r3, #8]
 801983c:	4618      	mov	r0, r3
 801983e:	f7f0 ffe5 	bl	800a80c <TfLiteTypeGetName>
 8019842:	4602      	mov	r2, r0
 8019844:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019846:	7a1b      	ldrb	r3, [r3, #8]
 8019848:	4903      	ldr	r1, [pc, #12]	; (8019858 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xec>)
 801984a:	6878      	ldr	r0, [r7, #4]
 801984c:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 801984e:	2301      	movs	r3, #1
  }
}
 8019850:	4618      	mov	r0, r3
 8019852:	3778      	adds	r7, #120	; 0x78
 8019854:	46bd      	mov	sp, r7
 8019856:	bdb0      	pop	{r4, r5, r7, pc}
 8019858:	0802dd90 	.word	0x0802dd90

0801985c <_ZN6tflite16Register_SOFTMAXEv>:

}  // namespace

TfLiteRegistration Register_SOFTMAX() {
 801985c:	b4b0      	push	{r4, r5, r7}
 801985e:	b083      	sub	sp, #12
 8019860:	af00      	add	r7, sp, #0
 8019862:	6078      	str	r0, [r7, #4]
          /*prepare=*/SoftmaxPrepare,
          /*invoke=*/SoftmaxEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 8019864:	687b      	ldr	r3, [r7, #4]
 8019866:	4a07      	ldr	r2, [pc, #28]	; (8019884 <_ZN6tflite16Register_SOFTMAXEv+0x28>)
 8019868:	461c      	mov	r4, r3
 801986a:	4615      	mov	r5, r2
 801986c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801986e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019870:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8019874:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8019878:	6878      	ldr	r0, [r7, #4]
 801987a:	370c      	adds	r7, #12
 801987c:	46bd      	mov	sp, r7
 801987e:	bcb0      	pop	{r4, r5, r7}
 8019880:	4770      	bx	lr
 8019882:	bf00      	nop
 8019884:	0802ddac 	.word	0x0802ddac

08019888 <_ZN6tflite29lut_lookup_with_interpolationIsEET_sPKS1_>:
inline LutOutT lut_lookup_with_interpolation(int16_t value,
 8019888:	b580      	push	{r7, lr}
 801988a:	b086      	sub	sp, #24
 801988c:	af00      	add	r7, sp, #0
 801988e:	4603      	mov	r3, r0
 8019890:	6039      	str	r1, [r7, #0]
 8019892:	80fb      	strh	r3, [r7, #6]
  const uint16_t index = static_cast<uint16_t>(256 + (value >> 7));
 8019894:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8019898:	11db      	asrs	r3, r3, #7
 801989a:	b29b      	uxth	r3, r3
 801989c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80198a0:	82fb      	strh	r3, [r7, #22]
  assert(index < 512 && "LUT index out of range.");
 80198a2:	8afb      	ldrh	r3, [r7, #22]
 80198a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80198a8:	d306      	bcc.n	80198b8 <_ZN6tflite29lut_lookup_with_interpolationIsEET_sPKS1_+0x30>
 80198aa:	4b1b      	ldr	r3, [pc, #108]	; (8019918 <_ZN6tflite29lut_lookup_with_interpolationIsEET_sPKS1_+0x90>)
 80198ac:	4a1b      	ldr	r2, [pc, #108]	; (801991c <_ZN6tflite29lut_lookup_with_interpolationIsEET_sPKS1_+0x94>)
 80198ae:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 80198b2:	481b      	ldr	r0, [pc, #108]	; (8019920 <_ZN6tflite29lut_lookup_with_interpolationIsEET_sPKS1_+0x98>)
 80198b4:	f00d fa2a 	bl	8026d0c <__assert_func>
  const int16_t offset = value & 0x7f;
 80198b8:	88fb      	ldrh	r3, [r7, #6]
 80198ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80198be:	82bb      	strh	r3, [r7, #20]
  const LutOutT base = lut[index];
 80198c0:	8afb      	ldrh	r3, [r7, #22]
 80198c2:	005b      	lsls	r3, r3, #1
 80198c4:	683a      	ldr	r2, [r7, #0]
 80198c6:	4413      	add	r3, r2
 80198c8:	881b      	ldrh	r3, [r3, #0]
 80198ca:	827b      	strh	r3, [r7, #18]
  const LutOutT slope = lut[index + 1] - lut[index];
 80198cc:	8afb      	ldrh	r3, [r7, #22]
 80198ce:	3301      	adds	r3, #1
 80198d0:	005b      	lsls	r3, r3, #1
 80198d2:	683a      	ldr	r2, [r7, #0]
 80198d4:	4413      	add	r3, r2
 80198d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80198da:	b29a      	uxth	r2, r3
 80198dc:	8afb      	ldrh	r3, [r7, #22]
 80198de:	005b      	lsls	r3, r3, #1
 80198e0:	6839      	ldr	r1, [r7, #0]
 80198e2:	440b      	add	r3, r1
 80198e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80198e8:	b29b      	uxth	r3, r3
 80198ea:	1ad3      	subs	r3, r2, r3
 80198ec:	b29b      	uxth	r3, r3
 80198ee:	823b      	strh	r3, [r7, #16]
  const int delta = (slope * offset + 64) >> 7;
 80198f0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80198f4:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80198f8:	fb02 f303 	mul.w	r3, r2, r3
 80198fc:	3340      	adds	r3, #64	; 0x40
 80198fe:	11db      	asrs	r3, r3, #7
 8019900:	60fb      	str	r3, [r7, #12]
  return static_cast<LutOutT>(base + delta);
 8019902:	68fb      	ldr	r3, [r7, #12]
 8019904:	b29a      	uxth	r2, r3
 8019906:	8a7b      	ldrh	r3, [r7, #18]
 8019908:	4413      	add	r3, r2
 801990a:	b29b      	uxth	r3, r3
 801990c:	b21b      	sxth	r3, r3
}
 801990e:	4618      	mov	r0, r3
 8019910:	3718      	adds	r7, #24
 8019912:	46bd      	mov	sp, r7
 8019914:	bd80      	pop	{r7, pc}
 8019916:	bf00      	nop
 8019918:	0802dec0 	.word	0x0802dec0
 801991c:	0802deec 	.word	0x0802deec
 8019920:	0802df64 	.word	0x0802df64

08019924 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
 8019924:	b590      	push	{r4, r7, lr}
 8019926:	b09f      	sub	sp, #124	; 0x7c
 8019928:	af00      	add	r7, sp, #0
 801992a:	60f8      	str	r0, [r7, #12]
 801992c:	60b9      	str	r1, [r7, #8]
 801992e:	607a      	str	r2, [r7, #4]
 8019930:	603b      	str	r3, [r7, #0]
  const int32_t input_beta_multiplier = params.input_multiplier;
 8019932:	68fb      	ldr	r3, [r7, #12]
 8019934:	689b      	ldr	r3, [r3, #8]
 8019936:	667b      	str	r3, [r7, #100]	; 0x64
  const int32_t input_beta_left_shift = params.input_left_shift;
 8019938:	68fb      	ldr	r3, [r7, #12]
 801993a:	68db      	ldr	r3, [r3, #12]
 801993c:	663b      	str	r3, [r7, #96]	; 0x60
  const int diff_min = params.diff_min;
 801993e:	68fb      	ldr	r3, [r7, #12]
 8019940:	699b      	ldr	r3, [r3, #24]
 8019942:	65fb      	str	r3, [r7, #92]	; 0x5c
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 8019944:	68b8      	ldr	r0, [r7, #8]
 8019946:	f7f4 ffcf 	bl	800e8e8 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801994a:	4603      	mov	r3, r0
 801994c:	3b01      	subs	r3, #1
 801994e:	65bb      	str	r3, [r7, #88]	; 0x58
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 8019950:	683a      	ldr	r2, [r7, #0]
 8019952:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8019954:	68b8      	ldr	r0, [r7, #8]
 8019956:	f7fa fbb8 	bl	80140ca <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 801995a:	6578      	str	r0, [r7, #84]	; 0x54
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 801995c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801995e:	683a      	ldr	r2, [r7, #0]
 8019960:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8019962:	68b8      	ldr	r0, [r7, #8]
 8019964:	f7f9 fe6d 	bl	8013642 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8019968:	6538      	str	r0, [r7, #80]	; 0x50
  for (int i = 0; i < outer_size; ++i) {
 801996a:	2300      	movs	r3, #0
 801996c:	677b      	str	r3, [r7, #116]	; 0x74
 801996e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8019970:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019972:	429a      	cmp	r2, r3
 8019974:	f280 80f0 	bge.w	8019b58 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x234>
    InputT max_in_row = std::numeric_limits<InputT>::min();
 8019978:	2380      	movs	r3, #128	; 0x80
 801997a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 801997e:	2300      	movs	r3, #0
 8019980:	673b      	str	r3, [r7, #112]	; 0x70
 8019982:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8019984:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019986:	429a      	cmp	r2, r3
 8019988:	da17      	bge.n	80199ba <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x96>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 801998a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801998c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801998e:	fb02 f203 	mul.w	r2, r2, r3
 8019992:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019994:	4413      	add	r3, r2
 8019996:	461a      	mov	r2, r3
 8019998:	687b      	ldr	r3, [r7, #4]
 801999a:	441a      	add	r2, r3
 801999c:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 80199a0:	4611      	mov	r1, r2
 80199a2:	4618      	mov	r0, r3
 80199a4:	f7fb f88b 	bl	8014abe <_ZSt3maxIaERKT_S2_S2_>
 80199a8:	4603      	mov	r3, r0
 80199aa:	f993 3000 	ldrsb.w	r3, [r3]
 80199ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 80199b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80199b4:	3301      	adds	r3, #1
 80199b6:	673b      	str	r3, [r7, #112]	; 0x70
 80199b8:	e7e3      	b.n	8019982 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x5e>
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
 80199ba:	f000 f8d1 	bl	8019b60 <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>
 80199be:	4603      	mov	r3, r0
 80199c0:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 80199c2:	2300      	movs	r3, #0
 80199c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80199c6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80199c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80199ca:	429a      	cmp	r2, r3
 80199cc:	da30      	bge.n	8019a30 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x10c>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 80199ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80199d0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80199d2:	fb02 f203 	mul.w	r2, r2, r3
 80199d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80199d8:	4413      	add	r3, r2
 80199da:	461a      	mov	r2, r3
 80199dc:	687b      	ldr	r3, [r7, #4]
 80199de:	4413      	add	r3, r2
 80199e0:	f993 3000 	ldrsb.w	r3, [r3]
 80199e4:	461a      	mov	r2, r3
 80199e6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
      int32_t input_diff =
 80199ea:	1ad3      	subs	r3, r2, r3
 80199ec:	64fb      	str	r3, [r7, #76]	; 0x4c
      if (input_diff >= diff_min) {
 80199ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80199f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80199f2:	429a      	cmp	r2, r3
 80199f4:	db18      	blt.n	8019a28 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x104>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 80199f6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80199f8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80199fa:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80199fc:	f7ff fb74 	bl	80190e8 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 8019a00:	64b8      	str	r0, [r7, #72]	; 0x48
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 8019a02:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8019a04:	f7fa fc4e 	bl	80142a4 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 8019a08:	4603      	mov	r3, r0
 8019a0a:	61fb      	str	r3, [r7, #28]
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
 8019a0c:	69f8      	ldr	r0, [r7, #28]
 8019a0e:	f7fa fc5b 	bl	80142c8 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 8019a12:	4603      	mov	r3, r0
 8019a14:	4618      	mov	r0, r3
 8019a16:	f7fa fd9f 	bl	8014558 <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 8019a1a:	4603      	mov	r3, r0
 8019a1c:	4619      	mov	r1, r3
 8019a1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019a20:	f7fa fdb4 	bl	801458c <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8019a24:	4603      	mov	r3, r0
 8019a26:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 8019a28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019a2a:	3301      	adds	r3, #1
 8019a2c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8019a2e:	e7ca      	b.n	80199c6 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xa2>
        sum_of_exps.raw(), kAccumulationIntegerBits, &num_bits_over_unit));
 8019a30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019a34:	4618      	mov	r0, r3
 8019a36:	f7fb f81a 	bl	8014a6e <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8019a3a:	4603      	mov	r3, r0
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
 8019a3c:	681b      	ldr	r3, [r3, #0]
 8019a3e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8019a42:	210c      	movs	r1, #12
 8019a44:	4618      	mov	r0, r3
 8019a46:	f7ff fb73 	bl	8019130 <_ZN6tflite13GetReciprocalEliPi>
 8019a4a:	4603      	mov	r3, r0
 8019a4c:	4618      	mov	r0, r3
 8019a4e:	f7fa fbb8 	bl	80141c2 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8019a52:	4603      	mov	r3, r0
 8019a54:	623b      	str	r3, [r7, #32]
    for (int c = 0; c < depth; ++c) {
 8019a56:	2300      	movs	r3, #0
 8019a58:	66bb      	str	r3, [r7, #104]	; 0x68
 8019a5a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8019a5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019a5e:	429a      	cmp	r2, r3
 8019a60:	da76      	bge.n	8019b50 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x22c>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 8019a62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019a64:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8019a66:	fb02 f203 	mul.w	r2, r2, r3
 8019a6a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8019a6c:	4413      	add	r3, r2
 8019a6e:	461a      	mov	r2, r3
 8019a70:	687b      	ldr	r3, [r7, #4]
 8019a72:	4413      	add	r3, r2
 8019a74:	f993 3000 	ldrsb.w	r3, [r3]
 8019a78:	461a      	mov	r2, r3
 8019a7a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
      int32_t input_diff =
 8019a7e:	1ad3      	subs	r3, r2, r3
 8019a80:	647b      	str	r3, [r7, #68]	; 0x44
      if (input_diff >= diff_min) {
 8019a82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019a84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019a86:	429a      	cmp	r2, r3
 8019a88:	db50      	blt.n	8019b2c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x208>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 8019a8a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8019a8c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8019a8e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8019a90:	f7ff fb2a 	bl	80190e8 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 8019a94:	6438      	str	r0, [r7, #64]	; 0x40
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 8019a96:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8019a98:	f7fa fc04 	bl	80142a4 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 8019a9c:	4603      	mov	r3, r0
 8019a9e:	61bb      	str	r3, [r7, #24]
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
 8019aa0:	69b8      	ldr	r0, [r7, #24]
 8019aa2:	f7fa fc11 	bl	80142c8 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 8019aa6:	4603      	mov	r3, r0
 8019aa8:	617b      	str	r3, [r7, #20]
            (shifted_scale * exp_in_0).raw(),
 8019aaa:	6979      	ldr	r1, [r7, #20]
 8019aac:	6a38      	ldr	r0, [r7, #32]
 8019aae:	f7fa ff89 	bl	80149c4 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8019ab2:	4603      	mov	r3, r0
 8019ab4:	633b      	str	r3, [r7, #48]	; 0x30
 8019ab6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8019aba:	4618      	mov	r0, r3
 8019abc:	f7f3 fe18 	bl	800d6f0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8019ac0:	4603      	mov	r3, r0
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
 8019ac2:	681b      	ldr	r3, [r3, #0]
            num_bits_over_unit + 31 - (sizeof(OutputT) * 8));
 8019ac4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019ac6:	320f      	adds	r2, #15
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
 8019ac8:	4611      	mov	r1, r2
 8019aca:	4618      	mov	r0, r3
 8019acc:	f7f3 fd8a 	bl	800d5e4 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8019ad0:	63f8      	str	r0, [r7, #60]	; 0x3c
            static_cast<int32_t>(std::numeric_limits<OutputT>::min());
 8019ad2:	f7f3 fc03 	bl	800d2dc <_ZNSt14numeric_limitsIsE3minEv>
 8019ad6:	4603      	mov	r3, r0
 8019ad8:	461a      	mov	r2, r3
            unsat_output +
 8019ada:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019adc:	4413      	add	r3, r2
        const int32_t shifted_output =
 8019ade:	613b      	str	r3, [r7, #16]
                     static_cast<int32_t>(std::numeric_limits<OutputT>::max())),
 8019ae0:	f7f3 fc06 	bl	800d2f0 <_ZNSt14numeric_limitsIsE3maxEv>
 8019ae4:	4603      	mov	r3, r0
 8019ae6:	637b      	str	r3, [r7, #52]	; 0x34
            static_cast<int32_t>(std::numeric_limits<OutputT>::min())));
 8019ae8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8019aec:	f107 0310 	add.w	r3, r7, #16
 8019af0:	4611      	mov	r1, r2
 8019af2:	4618      	mov	r0, r3
 8019af4:	f7f3 fd4e 	bl	800d594 <_ZSt3minIlERKT_S2_S2_>
 8019af8:	4604      	mov	r4, r0
 8019afa:	f7f3 fbef 	bl	800d2dc <_ZNSt14numeric_limitsIsE3minEv>
 8019afe:	4603      	mov	r3, r0
 8019b00:	63bb      	str	r3, [r7, #56]	; 0x38
 8019b02:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8019b06:	4619      	mov	r1, r3
 8019b08:	4620      	mov	r0, r4
 8019b0a:	f7f3 fd57 	bl	800d5bc <_ZSt3maxIlERKT_S2_S2_>
 8019b0e:	4603      	mov	r3, r0
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
 8019b10:	6819      	ldr	r1, [r3, #0]
 8019b12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019b14:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8019b16:	fb02 f203 	mul.w	r2, r2, r3
 8019b1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8019b1c:	4413      	add	r3, r2
 8019b1e:	005b      	lsls	r3, r3, #1
 8019b20:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8019b24:	4413      	add	r3, r2
 8019b26:	b20a      	sxth	r2, r1
 8019b28:	801a      	strh	r2, [r3, #0]
 8019b2a:	e00d      	b.n	8019b48 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x224>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
 8019b2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019b2e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8019b30:	fb02 f203 	mul.w	r2, r2, r3
 8019b34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8019b36:	4413      	add	r3, r2
 8019b38:	005b      	lsls	r3, r3, #1
 8019b3a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8019b3e:	18d4      	adds	r4, r2, r3
 8019b40:	f7f3 fbcc 	bl	800d2dc <_ZNSt14numeric_limitsIsE3minEv>
 8019b44:	4603      	mov	r3, r0
 8019b46:	8023      	strh	r3, [r4, #0]
    for (int c = 0; c < depth; ++c) {
 8019b48:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8019b4a:	3301      	adds	r3, #1
 8019b4c:	66bb      	str	r3, [r7, #104]	; 0x68
 8019b4e:	e784      	b.n	8019a5a <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x136>
  for (int i = 0; i < outer_size; ++i) {
 8019b50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019b52:	3301      	adds	r3, #1
 8019b54:	677b      	str	r3, [r7, #116]	; 0x74
 8019b56:	e70a      	b.n	801996e <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x4a>
}
 8019b58:	bf00      	nop
 8019b5a:	377c      	adds	r7, #124	; 0x7c
 8019b5c:	46bd      	mov	sp, r7
 8019b5e:	bd90      	pop	{r4, r7, pc}

08019b60 <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>:
  static FixedPoint Zero() { return FromScalarRaw(0); }
 8019b60:	b580      	push	{r7, lr}
 8019b62:	af00      	add	r7, sp, #0
 8019b64:	2000      	movs	r0, #0
 8019b66:	f000 f803 	bl	8019b70 <_ZN8gemmlowp10FixedPointIlLi12EE13FromScalarRawEl>
 8019b6a:	4603      	mov	r3, r0
 8019b6c:	4618      	mov	r0, r3
 8019b6e:	bd80      	pop	{r7, pc}

08019b70 <_ZN8gemmlowp10FixedPointIlLi12EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 8019b70:	b590      	push	{r4, r7, lr}
 8019b72:	b085      	sub	sp, #20
 8019b74:	af00      	add	r7, sp, #0
 8019b76:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 8019b78:	f107 030c 	add.w	r3, r7, #12
 8019b7c:	4618      	mov	r0, r3
 8019b7e:	f7fa ff76 	bl	8014a6e <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8019b82:	4604      	mov	r4, r0
 8019b84:	6878      	ldr	r0, [r7, #4]
 8019b86:	f7f3 fddf 	bl	800d748 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8019b8a:	4603      	mov	r3, r0
 8019b8c:	6023      	str	r3, [r4, #0]
    return retval;
 8019b8e:	68fb      	ldr	r3, [r7, #12]
  }
 8019b90:	4618      	mov	r0, r3
 8019b92:	3714      	adds	r7, #20
 8019b94:	46bd      	mov	sp, r7
 8019b96:	bd90      	pop	{r4, r7, pc}

08019b98 <_ZN6tflite18MicroMemoryPlannerC1Ev>:
// The goal is for applications to be able to experiment with different layout
// strategies without changing their client code, by swapping out classes that
// implement this interface.=
class MicroMemoryPlanner {
 public:
  MicroMemoryPlanner() {}
 8019b98:	b480      	push	{r7}
 8019b9a:	b083      	sub	sp, #12
 8019b9c:	af00      	add	r7, sp, #0
 8019b9e:	6078      	str	r0, [r7, #4]
 8019ba0:	4a04      	ldr	r2, [pc, #16]	; (8019bb4 <_ZN6tflite18MicroMemoryPlannerC1Ev+0x1c>)
 8019ba2:	687b      	ldr	r3, [r7, #4]
 8019ba4:	601a      	str	r2, [r3, #0]
 8019ba6:	687b      	ldr	r3, [r7, #4]
 8019ba8:	4618      	mov	r0, r3
 8019baa:	370c      	adds	r7, #12
 8019bac:	46bd      	mov	sp, r7
 8019bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bb2:	4770      	bx	lr
 8019bb4:	0803ffb4 	.word	0x0803ffb4

08019bb8 <_ZN6tflite18MicroMemoryPlannerD1Ev>:
  virtual ~MicroMemoryPlanner() {}
 8019bb8:	b480      	push	{r7}
 8019bba:	b083      	sub	sp, #12
 8019bbc:	af00      	add	r7, sp, #0
 8019bbe:	6078      	str	r0, [r7, #4]
 8019bc0:	4a04      	ldr	r2, [pc, #16]	; (8019bd4 <_ZN6tflite18MicroMemoryPlannerD1Ev+0x1c>)
 8019bc2:	687b      	ldr	r3, [r7, #4]
 8019bc4:	601a      	str	r2, [r3, #0]
 8019bc6:	687b      	ldr	r3, [r7, #4]
 8019bc8:	4618      	mov	r0, r3
 8019bca:	370c      	adds	r7, #12
 8019bcc:	46bd      	mov	sp, r7
 8019bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bd2:	4770      	bx	lr
 8019bd4:	0803ffb4 	.word	0x0803ffb4

08019bd8 <_ZN6tflite18MicroMemoryPlannerD0Ev>:
 8019bd8:	b580      	push	{r7, lr}
 8019bda:	b082      	sub	sp, #8
 8019bdc:	af00      	add	r7, sp, #0
 8019bde:	6078      	str	r0, [r7, #4]
 8019be0:	6878      	ldr	r0, [r7, #4]
 8019be2:	f7ff ffe9 	bl	8019bb8 <_ZN6tflite18MicroMemoryPlannerD1Ev>
 8019be6:	2104      	movs	r1, #4
 8019be8:	6878      	ldr	r0, [r7, #4]
 8019bea:	f00c fe1e 	bl	802682a <_ZdlPvj>
 8019bee:	687b      	ldr	r3, [r7, #4]
 8019bf0:	4618      	mov	r0, r3
 8019bf2:	3708      	adds	r7, #8
 8019bf4:	46bd      	mov	sp, r7
 8019bf6:	bd80      	pop	{r7, pc}

08019bf8 <_ZN6tflite18MicroMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii>:

  // Record details of an offline planned buffer offset we want to place.
  // offline_offset is the buffer offset from the start of the arena.
  // This is to support offline memory planning from the flatbuffer metadata.
  // By default, it returns an error.
  virtual TfLiteStatus AddBuffer(ErrorReporter* error_reporter, int size,
 8019bf8:	b480      	push	{r7}
 8019bfa:	b085      	sub	sp, #20
 8019bfc:	af00      	add	r7, sp, #0
 8019bfe:	60f8      	str	r0, [r7, #12]
 8019c00:	60b9      	str	r1, [r7, #8]
 8019c02:	607a      	str	r2, [r7, #4]
 8019c04:	603b      	str	r3, [r7, #0]
                                 int first_time_used, int last_time_used,
                                 int offline_offset) {
    return kTfLiteError;
 8019c06:	2301      	movs	r3, #1
  }
 8019c08:	4618      	mov	r0, r3
 8019c0a:	3714      	adds	r7, #20
 8019c0c:	46bd      	mov	sp, r7
 8019c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c12:	4770      	bx	lr

08019c14 <_ZN6tflite18MicroMemoryPlanner4InitEPhi>:
  // Provides the scratch buffer in case that the memory planner needs it.
  // The lifetime of scratch buffers lifetime lasts until the static memory plan
  // is committed.
  // The default implementation is for the memory planner that does not need
  // scratch buffer and simply returns ok.
  virtual TfLiteStatus Init(unsigned char* scratch_buffer,
 8019c14:	b480      	push	{r7}
 8019c16:	b085      	sub	sp, #20
 8019c18:	af00      	add	r7, sp, #0
 8019c1a:	60f8      	str	r0, [r7, #12]
 8019c1c:	60b9      	str	r1, [r7, #8]
 8019c1e:	607a      	str	r2, [r7, #4]
                            int scratch_buffer_size) {
    return kTfLiteOk;
 8019c20:	2300      	movs	r3, #0
  }
 8019c22:	4618      	mov	r0, r3
 8019c24:	3714      	adds	r7, #20
 8019c26:	46bd      	mov	sp, r7
 8019c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c2c:	4770      	bx	lr

08019c2e <_ZN6tflite19GreedyMemoryPlanner15per_buffer_sizeEv>:
    int requirements_index;
    int next_entry_index;
  };

  // Number of bytes required in order to plan a buffer.
  static size_t per_buffer_size() {
 8019c2e:	b480      	push	{r7}
 8019c30:	b083      	sub	sp, #12
 8019c32:	af00      	add	r7, sp, #0
    const int per_buffer_size =
 8019c34:	2328      	movs	r3, #40	; 0x28
 8019c36:	607b      	str	r3, [r7, #4]
        sizeof(BufferRequirements) +  // requirements_
        sizeof(int) +                 // buffer_sizes_sorted_
        sizeof(int) +                 // buffer_ids_sorted_
        sizeof(ListEntry) +           // buffers_sorted_by_offset_
        sizeof(int);                  // buffer_offsets_;
    return per_buffer_size;
 8019c38:	2328      	movs	r3, #40	; 0x28
  }
 8019c3a:	4618      	mov	r0, r3
 8019c3c:	370c      	adds	r7, #12
 8019c3e:	46bd      	mov	sp, r7
 8019c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c44:	4770      	bx	lr

08019c46 <_ZN6tflite18ReverseSortInPlaceEPiS0_i>:
}  // namespace

// Simple stable in-place sort function. Not time-efficient for large arrays.
// Would normally be in an anonymous namespace to keep it private, but we want
// to be able to test it externally.
void ReverseSortInPlace(int* values, int* ids, int size) {
 8019c46:	b480      	push	{r7}
 8019c48:	b089      	sub	sp, #36	; 0x24
 8019c4a:	af00      	add	r7, sp, #0
 8019c4c:	60f8      	str	r0, [r7, #12]
 8019c4e:	60b9      	str	r1, [r7, #8]
 8019c50:	607a      	str	r2, [r7, #4]
  bool any_swapped;
  do {
    any_swapped = false;
 8019c52:	2300      	movs	r3, #0
 8019c54:	77fb      	strb	r3, [r7, #31]
    for (int i = 1; i < size; ++i) {
 8019c56:	2301      	movs	r3, #1
 8019c58:	61bb      	str	r3, [r7, #24]
 8019c5a:	69ba      	ldr	r2, [r7, #24]
 8019c5c:	687b      	ldr	r3, [r7, #4]
 8019c5e:	429a      	cmp	r2, r3
 8019c60:	da4c      	bge.n	8019cfc <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xb6>
      if (values[i - 1] < values[i]) {
 8019c62:	69bb      	ldr	r3, [r7, #24]
 8019c64:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8019c68:	3b01      	subs	r3, #1
 8019c6a:	009b      	lsls	r3, r3, #2
 8019c6c:	68fa      	ldr	r2, [r7, #12]
 8019c6e:	4413      	add	r3, r2
 8019c70:	681a      	ldr	r2, [r3, #0]
 8019c72:	69bb      	ldr	r3, [r7, #24]
 8019c74:	009b      	lsls	r3, r3, #2
 8019c76:	68f9      	ldr	r1, [r7, #12]
 8019c78:	440b      	add	r3, r1
 8019c7a:	681b      	ldr	r3, [r3, #0]
 8019c7c:	429a      	cmp	r2, r3
 8019c7e:	da39      	bge.n	8019cf4 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xae>
        const int value_temp = values[i - 1];
 8019c80:	69bb      	ldr	r3, [r7, #24]
 8019c82:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8019c86:	3b01      	subs	r3, #1
 8019c88:	009b      	lsls	r3, r3, #2
 8019c8a:	68fa      	ldr	r2, [r7, #12]
 8019c8c:	4413      	add	r3, r2
 8019c8e:	681b      	ldr	r3, [r3, #0]
 8019c90:	617b      	str	r3, [r7, #20]
        values[i - 1] = values[i];
 8019c92:	69bb      	ldr	r3, [r7, #24]
 8019c94:	009b      	lsls	r3, r3, #2
 8019c96:	68fa      	ldr	r2, [r7, #12]
 8019c98:	441a      	add	r2, r3
 8019c9a:	69bb      	ldr	r3, [r7, #24]
 8019c9c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8019ca0:	3b01      	subs	r3, #1
 8019ca2:	009b      	lsls	r3, r3, #2
 8019ca4:	68f9      	ldr	r1, [r7, #12]
 8019ca6:	440b      	add	r3, r1
 8019ca8:	6812      	ldr	r2, [r2, #0]
 8019caa:	601a      	str	r2, [r3, #0]
        values[i] = value_temp;
 8019cac:	69bb      	ldr	r3, [r7, #24]
 8019cae:	009b      	lsls	r3, r3, #2
 8019cb0:	68fa      	ldr	r2, [r7, #12]
 8019cb2:	4413      	add	r3, r2
 8019cb4:	697a      	ldr	r2, [r7, #20]
 8019cb6:	601a      	str	r2, [r3, #0]
        const int id_temp = ids[i - 1];
 8019cb8:	69bb      	ldr	r3, [r7, #24]
 8019cba:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8019cbe:	3b01      	subs	r3, #1
 8019cc0:	009b      	lsls	r3, r3, #2
 8019cc2:	68ba      	ldr	r2, [r7, #8]
 8019cc4:	4413      	add	r3, r2
 8019cc6:	681b      	ldr	r3, [r3, #0]
 8019cc8:	613b      	str	r3, [r7, #16]
        ids[i - 1] = ids[i];
 8019cca:	69bb      	ldr	r3, [r7, #24]
 8019ccc:	009b      	lsls	r3, r3, #2
 8019cce:	68ba      	ldr	r2, [r7, #8]
 8019cd0:	441a      	add	r2, r3
 8019cd2:	69bb      	ldr	r3, [r7, #24]
 8019cd4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8019cd8:	3b01      	subs	r3, #1
 8019cda:	009b      	lsls	r3, r3, #2
 8019cdc:	68b9      	ldr	r1, [r7, #8]
 8019cde:	440b      	add	r3, r1
 8019ce0:	6812      	ldr	r2, [r2, #0]
 8019ce2:	601a      	str	r2, [r3, #0]
        ids[i] = id_temp;
 8019ce4:	69bb      	ldr	r3, [r7, #24]
 8019ce6:	009b      	lsls	r3, r3, #2
 8019ce8:	68ba      	ldr	r2, [r7, #8]
 8019cea:	4413      	add	r3, r2
 8019cec:	693a      	ldr	r2, [r7, #16]
 8019cee:	601a      	str	r2, [r3, #0]
        any_swapped = true;
 8019cf0:	2301      	movs	r3, #1
 8019cf2:	77fb      	strb	r3, [r7, #31]
    for (int i = 1; i < size; ++i) {
 8019cf4:	69bb      	ldr	r3, [r7, #24]
 8019cf6:	3301      	adds	r3, #1
 8019cf8:	61bb      	str	r3, [r7, #24]
 8019cfa:	e7ae      	b.n	8019c5a <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x14>
  do {
 8019cfc:	7ffb      	ldrb	r3, [r7, #31]
 8019cfe:	2b00      	cmp	r3, #0
 8019d00:	d000      	beq.n	8019d04 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xbe>
 8019d02:	e7a6      	b.n	8019c52 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xc>
      }
    }
  } while (any_swapped);
}
 8019d04:	bf00      	nop
 8019d06:	3724      	adds	r7, #36	; 0x24
 8019d08:	46bd      	mov	sp, r7
 8019d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d0e:	4770      	bx	lr

08019d10 <_ZN6tflite19GreedyMemoryPlannerC1Ev>:

GreedyMemoryPlanner::GreedyMemoryPlanner() {}
 8019d10:	b580      	push	{r7, lr}
 8019d12:	b082      	sub	sp, #8
 8019d14:	af00      	add	r7, sp, #0
 8019d16:	6078      	str	r0, [r7, #4]
 8019d18:	687b      	ldr	r3, [r7, #4]
 8019d1a:	4618      	mov	r0, r3
 8019d1c:	f7ff ff3c 	bl	8019b98 <_ZN6tflite18MicroMemoryPlannerC1Ev>
 8019d20:	4a03      	ldr	r2, [pc, #12]	; (8019d30 <_ZN6tflite19GreedyMemoryPlannerC1Ev+0x20>)
 8019d22:	687b      	ldr	r3, [r7, #4]
 8019d24:	601a      	str	r2, [r3, #0]
 8019d26:	687b      	ldr	r3, [r7, #4]
 8019d28:	4618      	mov	r0, r3
 8019d2a:	3708      	adds	r7, #8
 8019d2c:	46bd      	mov	sp, r7
 8019d2e:	bd80      	pop	{r7, pc}
 8019d30:	0803ff8c 	.word	0x0803ff8c

08019d34 <_ZN6tflite19GreedyMemoryPlanner4InitEPhi>:

TfLiteStatus GreedyMemoryPlanner::Init(unsigned char* scratch_buffer,
                                       int scratch_buffer_size) {
 8019d34:	b590      	push	{r4, r7, lr}
 8019d36:	b087      	sub	sp, #28
 8019d38:	af00      	add	r7, sp, #0
 8019d3a:	60f8      	str	r0, [r7, #12]
 8019d3c:	60b9      	str	r1, [r7, #8]
 8019d3e:	607a      	str	r2, [r7, #4]
  // Reset internal states
  buffer_count_ = 0;
 8019d40:	68fb      	ldr	r3, [r7, #12]
 8019d42:	2200      	movs	r2, #0
 8019d44:	609a      	str	r2, [r3, #8]
  need_to_calculate_offsets_ = true;
 8019d46:	68fb      	ldr	r3, [r7, #12]
 8019d48:	2201      	movs	r2, #1
 8019d4a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  // Allocate the arrays we need within the scratch buffer arena.
  max_buffer_count_ = scratch_buffer_size / per_buffer_size();
 8019d4e:	687c      	ldr	r4, [r7, #4]
 8019d50:	f7ff ff6d 	bl	8019c2e <_ZN6tflite19GreedyMemoryPlanner15per_buffer_sizeEv>
 8019d54:	4603      	mov	r3, r0
 8019d56:	fbb4 f3f3 	udiv	r3, r4, r3
 8019d5a:	461a      	mov	r2, r3
 8019d5c:	68fb      	ldr	r3, [r7, #12]
 8019d5e:	605a      	str	r2, [r3, #4]

  unsigned char* next_free = scratch_buffer;
 8019d60:	68bb      	ldr	r3, [r7, #8]
 8019d62:	617b      	str	r3, [r7, #20]
  requirements_ = reinterpret_cast<BufferRequirements*>(next_free);
 8019d64:	68fb      	ldr	r3, [r7, #12]
 8019d66:	697a      	ldr	r2, [r7, #20]
 8019d68:	60da      	str	r2, [r3, #12]
  next_free += sizeof(BufferRequirements) * max_buffer_count_;
 8019d6a:	68fb      	ldr	r3, [r7, #12]
 8019d6c:	685b      	ldr	r3, [r3, #4]
 8019d6e:	011b      	lsls	r3, r3, #4
 8019d70:	697a      	ldr	r2, [r7, #20]
 8019d72:	4413      	add	r3, r2
 8019d74:	617b      	str	r3, [r7, #20]

  buffer_sizes_sorted_ = reinterpret_cast<int*>(next_free);
 8019d76:	68fb      	ldr	r3, [r7, #12]
 8019d78:	697a      	ldr	r2, [r7, #20]
 8019d7a:	611a      	str	r2, [r3, #16]
  next_free += sizeof(int) * max_buffer_count_;
 8019d7c:	68fb      	ldr	r3, [r7, #12]
 8019d7e:	685b      	ldr	r3, [r3, #4]
 8019d80:	009b      	lsls	r3, r3, #2
 8019d82:	697a      	ldr	r2, [r7, #20]
 8019d84:	4413      	add	r3, r2
 8019d86:	617b      	str	r3, [r7, #20]

  buffer_ids_sorted_ = reinterpret_cast<int*>(next_free);
 8019d88:	68fb      	ldr	r3, [r7, #12]
 8019d8a:	697a      	ldr	r2, [r7, #20]
 8019d8c:	615a      	str	r2, [r3, #20]
  next_free += sizeof(int) * max_buffer_count_;
 8019d8e:	68fb      	ldr	r3, [r7, #12]
 8019d90:	685b      	ldr	r3, [r3, #4]
 8019d92:	009b      	lsls	r3, r3, #2
 8019d94:	697a      	ldr	r2, [r7, #20]
 8019d96:	4413      	add	r3, r2
 8019d98:	617b      	str	r3, [r7, #20]

  buffers_sorted_by_offset_ = reinterpret_cast<ListEntry*>(next_free);
 8019d9a:	68fb      	ldr	r3, [r7, #12]
 8019d9c:	697a      	ldr	r2, [r7, #20]
 8019d9e:	619a      	str	r2, [r3, #24]
  next_free += sizeof(ListEntry) * max_buffer_count_;
 8019da0:	68fb      	ldr	r3, [r7, #12]
 8019da2:	685b      	ldr	r3, [r3, #4]
 8019da4:	461a      	mov	r2, r3
 8019da6:	4613      	mov	r3, r2
 8019da8:	005b      	lsls	r3, r3, #1
 8019daa:	4413      	add	r3, r2
 8019dac:	009b      	lsls	r3, r3, #2
 8019dae:	461a      	mov	r2, r3
 8019db0:	697b      	ldr	r3, [r7, #20]
 8019db2:	4413      	add	r3, r2
 8019db4:	617b      	str	r3, [r7, #20]

  buffer_offsets_ = reinterpret_cast<int*>(next_free);
 8019db6:	68fb      	ldr	r3, [r7, #12]
 8019db8:	697a      	ldr	r2, [r7, #20]
 8019dba:	625a      	str	r2, [r3, #36]	; 0x24
  return kTfLiteOk;
 8019dbc:	2300      	movs	r3, #0
}
 8019dbe:	4618      	mov	r0, r3
 8019dc0:	371c      	adds	r7, #28
 8019dc2:	46bd      	mov	sp, r7
 8019dc4:	bd90      	pop	{r4, r7, pc}
	...

08019dc8 <_ZN6tflite19GreedyMemoryPlannerD1Ev>:

GreedyMemoryPlanner::~GreedyMemoryPlanner() {
 8019dc8:	b580      	push	{r7, lr}
 8019dca:	b082      	sub	sp, #8
 8019dcc:	af00      	add	r7, sp, #0
 8019dce:	6078      	str	r0, [r7, #4]
 8019dd0:	4a05      	ldr	r2, [pc, #20]	; (8019de8 <_ZN6tflite19GreedyMemoryPlannerD1Ev+0x20>)
 8019dd2:	687b      	ldr	r3, [r7, #4]
 8019dd4:	601a      	str	r2, [r3, #0]
 8019dd6:	687b      	ldr	r3, [r7, #4]
 8019dd8:	4618      	mov	r0, r3
 8019dda:	f7ff feed 	bl	8019bb8 <_ZN6tflite18MicroMemoryPlannerD1Ev>
  // We don't own the scratch buffer, so don't deallocate anything.
}
 8019dde:	687b      	ldr	r3, [r7, #4]
 8019de0:	4618      	mov	r0, r3
 8019de2:	3708      	adds	r7, #8
 8019de4:	46bd      	mov	sp, r7
 8019de6:	bd80      	pop	{r7, pc}
 8019de8:	0803ff8c 	.word	0x0803ff8c

08019dec <_ZN6tflite19GreedyMemoryPlannerD0Ev>:
GreedyMemoryPlanner::~GreedyMemoryPlanner() {
 8019dec:	b580      	push	{r7, lr}
 8019dee:	b082      	sub	sp, #8
 8019df0:	af00      	add	r7, sp, #0
 8019df2:	6078      	str	r0, [r7, #4]
}
 8019df4:	6878      	ldr	r0, [r7, #4]
 8019df6:	f7ff ffe7 	bl	8019dc8 <_ZN6tflite19GreedyMemoryPlannerD1Ev>
 8019dfa:	212c      	movs	r1, #44	; 0x2c
 8019dfc:	6878      	ldr	r0, [r7, #4]
 8019dfe:	f00c fd14 	bl	802682a <_ZdlPvj>
 8019e02:	687b      	ldr	r3, [r7, #4]
 8019e04:	4618      	mov	r0, r3
 8019e06:	3708      	adds	r7, #8
 8019e08:	46bd      	mov	sp, r7
 8019e0a:	bd80      	pop	{r7, pc}

08019e0c <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii>:

TfLiteStatus GreedyMemoryPlanner::AddBuffer(
    tflite::ErrorReporter* error_reporter, int size, int first_time_used,
    int last_time_used) {
 8019e0c:	b580      	push	{r7, lr}
 8019e0e:	b086      	sub	sp, #24
 8019e10:	af00      	add	r7, sp, #0
 8019e12:	60f8      	str	r0, [r7, #12]
 8019e14:	60b9      	str	r1, [r7, #8]
 8019e16:	607a      	str	r2, [r7, #4]
 8019e18:	603b      	str	r3, [r7, #0]
  if (buffer_count_ >= max_buffer_count_) {
 8019e1a:	68fb      	ldr	r3, [r7, #12]
 8019e1c:	689a      	ldr	r2, [r3, #8]
 8019e1e:	68fb      	ldr	r3, [r7, #12]
 8019e20:	685b      	ldr	r3, [r3, #4]
 8019e22:	429a      	cmp	r2, r3
 8019e24:	db08      	blt.n	8019e38 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter, "Too many buffers (max is %d)",
 8019e26:	68fb      	ldr	r3, [r7, #12]
 8019e28:	685b      	ldr	r3, [r3, #4]
 8019e2a:	461a      	mov	r2, r3
 8019e2c:	4913      	ldr	r1, [pc, #76]	; (8019e7c <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x70>)
 8019e2e:	68b8      	ldr	r0, [r7, #8]
 8019e30:	f7f0 fd68 	bl	800a904 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         max_buffer_count_);
    return kTfLiteError;
 8019e34:	2301      	movs	r3, #1
 8019e36:	e01d      	b.n	8019e74 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x68>
  }
  BufferRequirements* current = &requirements_[buffer_count_];
 8019e38:	68fb      	ldr	r3, [r7, #12]
 8019e3a:	68da      	ldr	r2, [r3, #12]
 8019e3c:	68fb      	ldr	r3, [r7, #12]
 8019e3e:	689b      	ldr	r3, [r3, #8]
 8019e40:	011b      	lsls	r3, r3, #4
 8019e42:	4413      	add	r3, r2
 8019e44:	617b      	str	r3, [r7, #20]
  current->size = size;
 8019e46:	697b      	ldr	r3, [r7, #20]
 8019e48:	687a      	ldr	r2, [r7, #4]
 8019e4a:	601a      	str	r2, [r3, #0]
  current->first_time_used = first_time_used;
 8019e4c:	697b      	ldr	r3, [r7, #20]
 8019e4e:	683a      	ldr	r2, [r7, #0]
 8019e50:	609a      	str	r2, [r3, #8]
  current->last_time_used = last_time_used;
 8019e52:	697b      	ldr	r3, [r7, #20]
 8019e54:	6a3a      	ldr	r2, [r7, #32]
 8019e56:	60da      	str	r2, [r3, #12]
  current->offline_offset = kOnlinePlannedBuffer;
 8019e58:	697b      	ldr	r3, [r7, #20]
 8019e5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019e5e:	605a      	str	r2, [r3, #4]
  ++buffer_count_;
 8019e60:	68fb      	ldr	r3, [r7, #12]
 8019e62:	689b      	ldr	r3, [r3, #8]
 8019e64:	1c5a      	adds	r2, r3, #1
 8019e66:	68fb      	ldr	r3, [r7, #12]
 8019e68:	609a      	str	r2, [r3, #8]
  need_to_calculate_offsets_ = true;
 8019e6a:	68fb      	ldr	r3, [r7, #12]
 8019e6c:	2201      	movs	r2, #1
 8019e6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  return kTfLiteOk;
 8019e72:	2300      	movs	r3, #0
}
 8019e74:	4618      	mov	r0, r3
 8019e76:	3718      	adds	r7, #24
 8019e78:	46bd      	mov	sp, r7
 8019e7a:	bd80      	pop	{r7, pc}
 8019e7c:	0802dfd8 	.word	0x0802dfd8

08019e80 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii>:

TfLiteStatus GreedyMemoryPlanner::AddBuffer(
    tflite::ErrorReporter* error_reporter, int size, int first_time_used,
    int last_time_used, int offline_offset) {
 8019e80:	b590      	push	{r4, r7, lr}
 8019e82:	b089      	sub	sp, #36	; 0x24
 8019e84:	af02      	add	r7, sp, #8
 8019e86:	60f8      	str	r0, [r7, #12]
 8019e88:	60b9      	str	r1, [r7, #8]
 8019e8a:	607a      	str	r2, [r7, #4]
 8019e8c:	603b      	str	r3, [r7, #0]
  BufferRequirements* current = &requirements_[buffer_count_];
 8019e8e:	68fb      	ldr	r3, [r7, #12]
 8019e90:	68da      	ldr	r2, [r3, #12]
 8019e92:	68fb      	ldr	r3, [r7, #12]
 8019e94:	689b      	ldr	r3, [r3, #8]
 8019e96:	011b      	lsls	r3, r3, #4
 8019e98:	4413      	add	r3, r2
 8019e9a:	617b      	str	r3, [r7, #20]
  if (AddBuffer(error_reporter, size, first_time_used, last_time_used) !=
 8019e9c:	68fb      	ldr	r3, [r7, #12]
 8019e9e:	681b      	ldr	r3, [r3, #0]
 8019ea0:	3308      	adds	r3, #8
 8019ea2:	681c      	ldr	r4, [r3, #0]
 8019ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ea6:	9300      	str	r3, [sp, #0]
 8019ea8:	683b      	ldr	r3, [r7, #0]
 8019eaa:	687a      	ldr	r2, [r7, #4]
 8019eac:	68b9      	ldr	r1, [r7, #8]
 8019eae:	68f8      	ldr	r0, [r7, #12]
 8019eb0:	47a0      	blx	r4
 8019eb2:	4603      	mov	r3, r0
 8019eb4:	2b00      	cmp	r3, #0
 8019eb6:	bf14      	ite	ne
 8019eb8:	2301      	movne	r3, #1
 8019eba:	2300      	moveq	r3, #0
 8019ebc:	b2db      	uxtb	r3, r3
 8019ebe:	2b00      	cmp	r3, #0
 8019ec0:	d001      	beq.n	8019ec6 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x46>
      kTfLiteOk) {
    return kTfLiteError;
 8019ec2:	2301      	movs	r3, #1
 8019ec4:	e003      	b.n	8019ece <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x4e>
  }
  current->offline_offset = offline_offset;
 8019ec6:	697b      	ldr	r3, [r7, #20]
 8019ec8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019eca:	605a      	str	r2, [r3, #4]
  return kTfLiteOk;
 8019ecc:	2300      	movs	r3, #0
}
 8019ece:	4618      	mov	r0, r3
 8019ed0:	371c      	adds	r7, #28
 8019ed2:	46bd      	mov	sp, r7
 8019ed4:	bd90      	pop	{r4, r7, pc}

08019ed6 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>:

bool GreedyMemoryPlanner::DoesEntryOverlapInTime(
    const GreedyMemoryPlanner::ListEntry* entry, const int first_time_used,
    const int last_time_used) const {
 8019ed6:	b480      	push	{r7}
 8019ed8:	b087      	sub	sp, #28
 8019eda:	af00      	add	r7, sp, #0
 8019edc:	60f8      	str	r0, [r7, #12]
 8019ede:	60b9      	str	r1, [r7, #8]
 8019ee0:	607a      	str	r2, [r7, #4]
 8019ee2:	603b      	str	r3, [r7, #0]
  const BufferRequirements* entry_requirements =
      &requirements_[entry->requirements_index];
 8019ee4:	68fb      	ldr	r3, [r7, #12]
 8019ee6:	68da      	ldr	r2, [r3, #12]
 8019ee8:	68bb      	ldr	r3, [r7, #8]
 8019eea:	685b      	ldr	r3, [r3, #4]
 8019eec:	011b      	lsls	r3, r3, #4
  const BufferRequirements* entry_requirements =
 8019eee:	4413      	add	r3, r2
 8019ef0:	617b      	str	r3, [r7, #20]
  if (entry_requirements->first_time_used > last_time_used) {
 8019ef2:	697b      	ldr	r3, [r7, #20]
 8019ef4:	689b      	ldr	r3, [r3, #8]
 8019ef6:	683a      	ldr	r2, [r7, #0]
 8019ef8:	429a      	cmp	r2, r3
 8019efa:	da01      	bge.n	8019f00 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x2a>
    return false;
 8019efc:	2300      	movs	r3, #0
 8019efe:	e007      	b.n	8019f10 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x3a>
  }
  if (first_time_used > entry_requirements->last_time_used) {
 8019f00:	697b      	ldr	r3, [r7, #20]
 8019f02:	68db      	ldr	r3, [r3, #12]
 8019f04:	687a      	ldr	r2, [r7, #4]
 8019f06:	429a      	cmp	r2, r3
 8019f08:	dd01      	ble.n	8019f0e <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x38>
    return false;
 8019f0a:	2300      	movs	r3, #0
 8019f0c:	e000      	b.n	8019f10 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x3a>
  }
  return true;
 8019f0e:	2301      	movs	r3, #1
}
 8019f10:	4618      	mov	r0, r3
 8019f12:	371c      	adds	r7, #28
 8019f14:	46bd      	mov	sp, r7
 8019f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f1a:	4770      	bx	lr

08019f1c <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>:

GreedyMemoryPlanner::ListEntry*
GreedyMemoryPlanner::NextSimultaneouslyActiveBuffer(
    const GreedyMemoryPlanner::ListEntry* start, const int first_time_used,
    const int last_time_used) {
 8019f1c:	b580      	push	{r7, lr}
 8019f1e:	b086      	sub	sp, #24
 8019f20:	af00      	add	r7, sp, #0
 8019f22:	60f8      	str	r0, [r7, #12]
 8019f24:	60b9      	str	r1, [r7, #8]
 8019f26:	607a      	str	r2, [r7, #4]
 8019f28:	603b      	str	r3, [r7, #0]
  ListEntry* result = nullptr;
 8019f2a:	2300      	movs	r3, #0
 8019f2c:	617b      	str	r3, [r7, #20]
  ListEntry* candidate_next_entry;
  if (start == nullptr) {
 8019f2e:	68bb      	ldr	r3, [r7, #8]
 8019f30:	2b00      	cmp	r3, #0
 8019f32:	d10b      	bne.n	8019f4c <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x30>
    candidate_next_entry = &buffers_sorted_by_offset_[first_entry_index_];
 8019f34:	68fb      	ldr	r3, [r7, #12]
 8019f36:	699a      	ldr	r2, [r3, #24]
 8019f38:	68fb      	ldr	r3, [r7, #12]
 8019f3a:	6a1b      	ldr	r3, [r3, #32]
 8019f3c:	4619      	mov	r1, r3
 8019f3e:	460b      	mov	r3, r1
 8019f40:	005b      	lsls	r3, r3, #1
 8019f42:	440b      	add	r3, r1
 8019f44:	009b      	lsls	r3, r3, #2
 8019f46:	4413      	add	r3, r2
 8019f48:	613b      	str	r3, [r7, #16]
 8019f4a:	e011      	b.n	8019f70 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x54>
  } else {
    if (start->next_entry_index == -1) {
 8019f4c:	68bb      	ldr	r3, [r7, #8]
 8019f4e:	689b      	ldr	r3, [r3, #8]
 8019f50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8019f54:	d101      	bne.n	8019f5a <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x3e>
      return nullptr;
 8019f56:	2300      	movs	r3, #0
 8019f58:	e029      	b.n	8019fae <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x92>
    }
    candidate_next_entry = &buffers_sorted_by_offset_[start->next_entry_index];
 8019f5a:	68fb      	ldr	r3, [r7, #12]
 8019f5c:	699a      	ldr	r2, [r3, #24]
 8019f5e:	68bb      	ldr	r3, [r7, #8]
 8019f60:	689b      	ldr	r3, [r3, #8]
 8019f62:	4619      	mov	r1, r3
 8019f64:	460b      	mov	r3, r1
 8019f66:	005b      	lsls	r3, r3, #1
 8019f68:	440b      	add	r3, r1
 8019f6a:	009b      	lsls	r3, r3, #2
 8019f6c:	4413      	add	r3, r2
 8019f6e:	613b      	str	r3, [r7, #16]
  }
  do {
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
 8019f70:	683b      	ldr	r3, [r7, #0]
 8019f72:	687a      	ldr	r2, [r7, #4]
 8019f74:	6939      	ldr	r1, [r7, #16]
 8019f76:	68f8      	ldr	r0, [r7, #12]
 8019f78:	f7ff ffad 	bl	8019ed6 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>
 8019f7c:	4603      	mov	r3, r0
 8019f7e:	2b00      	cmp	r3, #0
 8019f80:	d002      	beq.n	8019f88 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x6c>
                               last_time_used)) {
      result = candidate_next_entry;
 8019f82:	693b      	ldr	r3, [r7, #16]
 8019f84:	617b      	str	r3, [r7, #20]
      break;
 8019f86:	e011      	b.n	8019fac <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x90>
    }
    if (candidate_next_entry->next_entry_index == -1) {
 8019f88:	693b      	ldr	r3, [r7, #16]
 8019f8a:	689b      	ldr	r3, [r3, #8]
 8019f8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8019f90:	d00b      	beq.n	8019faa <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x8e>
      break;
    }
    candidate_next_entry =
        &buffers_sorted_by_offset_[candidate_next_entry->next_entry_index];
 8019f92:	68fb      	ldr	r3, [r7, #12]
 8019f94:	699a      	ldr	r2, [r3, #24]
 8019f96:	693b      	ldr	r3, [r7, #16]
 8019f98:	689b      	ldr	r3, [r3, #8]
 8019f9a:	4619      	mov	r1, r3
 8019f9c:	460b      	mov	r3, r1
 8019f9e:	005b      	lsls	r3, r3, #1
 8019fa0:	440b      	add	r3, r1
 8019fa2:	009b      	lsls	r3, r3, #2
    candidate_next_entry =
 8019fa4:	4413      	add	r3, r2
 8019fa6:	613b      	str	r3, [r7, #16]
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
 8019fa8:	e7e2      	b.n	8019f70 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x54>
      break;
 8019faa:	bf00      	nop
  } while (true);
  return result;
 8019fac:	697b      	ldr	r3, [r7, #20]
}
 8019fae:	4618      	mov	r0, r3
 8019fb0:	3718      	adds	r7, #24
 8019fb2:	46bd      	mov	sp, r7
 8019fb4:	bd80      	pop	{r7, pc}

08019fb6 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>:

void GreedyMemoryPlanner::CalculateOffsetsIfNeeded() {
 8019fb6:	b580      	push	{r7, lr}
 8019fb8:	b098      	sub	sp, #96	; 0x60
 8019fba:	af00      	add	r7, sp, #0
 8019fbc:	6078      	str	r0, [r7, #4]
  if (!need_to_calculate_offsets_ || (buffer_count_ == 0)) {
 8019fbe:	687b      	ldr	r3, [r7, #4]
 8019fc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019fc4:	f083 0301 	eor.w	r3, r3, #1
 8019fc8:	b2db      	uxtb	r3, r3
 8019fca:	2b00      	cmp	r3, #0
 8019fcc:	f040 815f 	bne.w	801a28e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d8>
 8019fd0:	687b      	ldr	r3, [r7, #4]
 8019fd2:	689b      	ldr	r3, [r3, #8]
 8019fd4:	2b00      	cmp	r3, #0
 8019fd6:	f000 815a 	beq.w	801a28e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d8>
    return;
  }
  need_to_calculate_offsets_ = false;
 8019fda:	687b      	ldr	r3, [r7, #4]
 8019fdc:	2200      	movs	r2, #0
 8019fde:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  // This helps find a more compact layout. Intuitively, you can think
  // about putting the large buffers in place first, and then the
  // smaller buffers can fit in the gaps, rather than fragmenting the
  // gaps with small buffers at the beginning. Add offline planned offsets
  // first in the list, since they have a predetermined offset.
  int idx_from_tail = buffer_count_;
 8019fe2:	687b      	ldr	r3, [r7, #4]
 8019fe4:	689b      	ldr	r3, [r3, #8]
 8019fe6:	65fb      	str	r3, [r7, #92]	; 0x5c
  int idx_from_head = 0;
 8019fe8:	2300      	movs	r3, #0
 8019fea:	65bb      	str	r3, [r7, #88]	; 0x58
  for (int i = 0; i < buffer_count_; ++i) {
 8019fec:	2300      	movs	r3, #0
 8019fee:	657b      	str	r3, [r7, #84]	; 0x54
 8019ff0:	687b      	ldr	r3, [r7, #4]
 8019ff2:	689b      	ldr	r3, [r3, #8]
 8019ff4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8019ff6:	429a      	cmp	r2, r3
 8019ff8:	da4d      	bge.n	801a096 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xe0>
    if (requirements_[i].offline_offset == kOnlinePlannedBuffer) {
 8019ffa:	687b      	ldr	r3, [r7, #4]
 8019ffc:	68da      	ldr	r2, [r3, #12]
 8019ffe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a000:	011b      	lsls	r3, r3, #4
 801a002:	4413      	add	r3, r2
 801a004:	685b      	ldr	r3, [r3, #4]
 801a006:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801a00a:	d11e      	bne.n	801a04a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x94>
      idx_from_tail--;
 801a00c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a00e:	3b01      	subs	r3, #1
 801a010:	65fb      	str	r3, [r7, #92]	; 0x5c
      buffer_sizes_sorted_[idx_from_tail] = requirements_[i].size;
 801a012:	687b      	ldr	r3, [r7, #4]
 801a014:	68da      	ldr	r2, [r3, #12]
 801a016:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a018:	011b      	lsls	r3, r3, #4
 801a01a:	441a      	add	r2, r3
 801a01c:	687b      	ldr	r3, [r7, #4]
 801a01e:	6919      	ldr	r1, [r3, #16]
 801a020:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a022:	009b      	lsls	r3, r3, #2
 801a024:	440b      	add	r3, r1
 801a026:	6812      	ldr	r2, [r2, #0]
 801a028:	601a      	str	r2, [r3, #0]
      buffer_ids_sorted_[idx_from_tail] = i;
 801a02a:	687b      	ldr	r3, [r7, #4]
 801a02c:	695a      	ldr	r2, [r3, #20]
 801a02e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a030:	009b      	lsls	r3, r3, #2
 801a032:	4413      	add	r3, r2
 801a034:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801a036:	601a      	str	r2, [r3, #0]
      buffer_offsets_[i] = -1;
 801a038:	687b      	ldr	r3, [r7, #4]
 801a03a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801a03c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a03e:	009b      	lsls	r3, r3, #2
 801a040:	4413      	add	r3, r2
 801a042:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a046:	601a      	str	r2, [r3, #0]
 801a048:	e021      	b.n	801a08e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xd8>
    } else {
      buffer_sizes_sorted_[idx_from_head] = requirements_[i].size;
 801a04a:	687b      	ldr	r3, [r7, #4]
 801a04c:	68da      	ldr	r2, [r3, #12]
 801a04e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a050:	011b      	lsls	r3, r3, #4
 801a052:	441a      	add	r2, r3
 801a054:	687b      	ldr	r3, [r7, #4]
 801a056:	6919      	ldr	r1, [r3, #16]
 801a058:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801a05a:	009b      	lsls	r3, r3, #2
 801a05c:	440b      	add	r3, r1
 801a05e:	6812      	ldr	r2, [r2, #0]
 801a060:	601a      	str	r2, [r3, #0]
      buffer_ids_sorted_[idx_from_head] = i;
 801a062:	687b      	ldr	r3, [r7, #4]
 801a064:	695a      	ldr	r2, [r3, #20]
 801a066:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801a068:	009b      	lsls	r3, r3, #2
 801a06a:	4413      	add	r3, r2
 801a06c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801a06e:	601a      	str	r2, [r3, #0]
      buffer_offsets_[i] = requirements_[i].offline_offset;
 801a070:	687b      	ldr	r3, [r7, #4]
 801a072:	68da      	ldr	r2, [r3, #12]
 801a074:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a076:	011b      	lsls	r3, r3, #4
 801a078:	441a      	add	r2, r3
 801a07a:	687b      	ldr	r3, [r7, #4]
 801a07c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 801a07e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a080:	009b      	lsls	r3, r3, #2
 801a082:	440b      	add	r3, r1
 801a084:	6852      	ldr	r2, [r2, #4]
 801a086:	601a      	str	r2, [r3, #0]
      idx_from_head++;
 801a088:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801a08a:	3301      	adds	r3, #1
 801a08c:	65bb      	str	r3, [r7, #88]	; 0x58
  for (int i = 0; i < buffer_count_; ++i) {
 801a08e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a090:	3301      	adds	r3, #1
 801a092:	657b      	str	r3, [r7, #84]	; 0x54
 801a094:	e7ac      	b.n	8019ff0 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x3a>
    }
  }

  // This sorting algorithm is naive, and may end up taking a very long time
  // with hundreds of buffers. Do not sort the offline planned offsets.
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
 801a096:	687b      	ldr	r3, [r7, #4]
 801a098:	691a      	ldr	r2, [r3, #16]
 801a09a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801a09c:	009b      	lsls	r3, r3, #2
 801a09e:	18d0      	adds	r0, r2, r3
                     &buffer_ids_sorted_[idx_from_head],
 801a0a0:	687b      	ldr	r3, [r7, #4]
 801a0a2:	695a      	ldr	r2, [r3, #20]
 801a0a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801a0a6:	009b      	lsls	r3, r3, #2
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
 801a0a8:	18d1      	adds	r1, r2, r3
                     buffer_count_ - idx_from_head);
 801a0aa:	687b      	ldr	r3, [r7, #4]
 801a0ac:	689a      	ldr	r2, [r3, #8]
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
 801a0ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801a0b0:	1ad3      	subs	r3, r2, r3
 801a0b2:	461a      	mov	r2, r3
 801a0b4:	f7ff fdc7 	bl	8019c46 <_ZN6tflite18ReverseSortInPlaceEPiS0_i>
  // buffer_ids_sorted_.
  //   - If there are no offline planned offsets, the largest buffer will be
  //     first, and the buffers will be handled in size order.
  //   - If offline offsets are present, these will be handled first in order
  //     for the greedy algorithm to utilized gaps in the offline plan.
  first_entry_index_ = 0;
 801a0b8:	687b      	ldr	r3, [r7, #4]
 801a0ba:	2200      	movs	r2, #0
 801a0bc:	621a      	str	r2, [r3, #32]
  next_free_entry_ = 1;
 801a0be:	687b      	ldr	r3, [r7, #4]
 801a0c0:	2201      	movs	r2, #1
 801a0c2:	61da      	str	r2, [r3, #28]
  ListEntry* first_entry = &buffers_sorted_by_offset_[first_entry_index_];
 801a0c4:	687b      	ldr	r3, [r7, #4]
 801a0c6:	699a      	ldr	r2, [r3, #24]
 801a0c8:	687b      	ldr	r3, [r7, #4]
 801a0ca:	6a1b      	ldr	r3, [r3, #32]
 801a0cc:	4619      	mov	r1, r3
 801a0ce:	460b      	mov	r3, r1
 801a0d0:	005b      	lsls	r3, r3, #1
 801a0d2:	440b      	add	r3, r1
 801a0d4:	009b      	lsls	r3, r3, #2
 801a0d6:	4413      	add	r3, r2
 801a0d8:	653b      	str	r3, [r7, #80]	; 0x50
  first_entry->next_entry_index = -1;  // to mark the entry as end of list
 801a0da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a0dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a0e0:	609a      	str	r2, [r3, #8]
  int buffer_id = buffer_ids_sorted_[0];
 801a0e2:	687b      	ldr	r3, [r7, #4]
 801a0e4:	695b      	ldr	r3, [r3, #20]
 801a0e6:	681b      	ldr	r3, [r3, #0]
 801a0e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  first_entry->requirements_index = buffer_id;
 801a0ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a0ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801a0ee:	605a      	str	r2, [r3, #4]
  if (requirements_[buffer_id].offline_offset == kOnlinePlannedBuffer) {
 801a0f0:	687b      	ldr	r3, [r7, #4]
 801a0f2:	68da      	ldr	r2, [r3, #12]
 801a0f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a0f6:	011b      	lsls	r3, r3, #4
 801a0f8:	4413      	add	r3, r2
 801a0fa:	685b      	ldr	r3, [r3, #4]
 801a0fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801a100:	d106      	bne.n	801a110 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x15a>
    buffer_offsets_[buffer_id] = 0;
 801a102:	687b      	ldr	r3, [r7, #4]
 801a104:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801a106:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a108:	009b      	lsls	r3, r3, #2
 801a10a:	4413      	add	r3, r2
 801a10c:	2200      	movs	r2, #0
 801a10e:	601a      	str	r2, [r3, #0]
  }
  first_entry->offset = buffer_offsets_[buffer_id];
 801a110:	687b      	ldr	r3, [r7, #4]
 801a112:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801a114:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a116:	009b      	lsls	r3, r3, #2
 801a118:	4413      	add	r3, r2
 801a11a:	681a      	ldr	r2, [r3, #0]
 801a11c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a11e:	601a      	str	r2, [r3, #0]

  // Work through the rest of the buffers to find a good gap to place each one.
  for (int i = 1; i < buffer_count_; ++i) {
 801a120:	2301      	movs	r3, #1
 801a122:	64fb      	str	r3, [r7, #76]	; 0x4c
 801a124:	687b      	ldr	r3, [r7, #4]
 801a126:	689b      	ldr	r3, [r3, #8]
 801a128:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a12a:	429a      	cmp	r2, r3
 801a12c:	f280 80b0 	bge.w	801a290 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2da>
    // The id is the order the buffer was originally added by the client.
    buffer_id = buffer_ids_sorted_[i];
 801a130:	687b      	ldr	r3, [r7, #4]
 801a132:	695a      	ldr	r2, [r3, #20]
 801a134:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a136:	009b      	lsls	r3, r3, #2
 801a138:	4413      	add	r3, r2
 801a13a:	681b      	ldr	r3, [r3, #0]
 801a13c:	63fb      	str	r3, [r7, #60]	; 0x3c
    // Look at what size and time range the buffer needs to be active.
    BufferRequirements* wanted_requirements = &requirements_[buffer_id];
 801a13e:	687b      	ldr	r3, [r7, #4]
 801a140:	68da      	ldr	r2, [r3, #12]
 801a142:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a144:	011b      	lsls	r3, r3, #4
 801a146:	4413      	add	r3, r2
 801a148:	63bb      	str	r3, [r7, #56]	; 0x38
    const int wanted_size = wanted_requirements->size;
 801a14a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a14c:	681b      	ldr	r3, [r3, #0]
 801a14e:	637b      	str	r3, [r7, #52]	; 0x34
    const int wanted_first_time_used = wanted_requirements->first_time_used;
 801a150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a152:	689b      	ldr	r3, [r3, #8]
 801a154:	633b      	str	r3, [r7, #48]	; 0x30
    const int wanted_last_time_used = wanted_requirements->last_time_used;
 801a156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a158:	68db      	ldr	r3, [r3, #12]
 801a15a:	62fb      	str	r3, [r7, #44]	; 0x2c
    // buffers are stored in the order of their starting position in the arena
    // so that it's easy to find the next buffer in memory, and so the gap.
    // The candidate_entry variable holds the buffer that we're considering
    // placing the current buffer after.

    int candidate_offset = 0;
 801a15c:	2300      	movs	r3, #0
 801a15e:	64bb      	str	r3, [r7, #72]	; 0x48
    // Loop through the offset-ordered list of buffers, looking for gaps.
    if (wanted_requirements->offline_offset == kOnlinePlannedBuffer) {
 801a160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a162:	685b      	ldr	r3, [r3, #4]
 801a164:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801a168:	d12d      	bne.n	801a1c6 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x210>
      ListEntry* prior_entry = nullptr;
 801a16a:	2300      	movs	r3, #0
 801a16c:	647b      	str	r3, [r7, #68]	; 0x44
      while (true) {
        // Find out what the next active buffer is.
        ListEntry* next_entry = NextSimultaneouslyActiveBuffer(
 801a16e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a170:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a172:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801a174:	6878      	ldr	r0, [r7, #4]
 801a176:	f7ff fed1 	bl	8019f1c <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>
 801a17a:	62b8      	str	r0, [r7, #40]	; 0x28
            prior_entry, wanted_first_time_used, wanted_last_time_used);

        if (prior_entry) {
 801a17c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a17e:	2b00      	cmp	r3, #0
 801a180:	d012      	beq.n	801a1a8 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1f2>
          BufferRequirements* candidate_requirements =
              &requirements_[prior_entry->requirements_index];
 801a182:	687b      	ldr	r3, [r7, #4]
 801a184:	68da      	ldr	r2, [r3, #12]
 801a186:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a188:	685b      	ldr	r3, [r3, #4]
 801a18a:	011b      	lsls	r3, r3, #4
          BufferRequirements* candidate_requirements =
 801a18c:	4413      	add	r3, r2
 801a18e:	627b      	str	r3, [r7, #36]	; 0x24
          const int prior_entry_offset =
              prior_entry->offset + candidate_requirements->size;
 801a190:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a192:	681a      	ldr	r2, [r3, #0]
 801a194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a196:	681b      	ldr	r3, [r3, #0]
          const int prior_entry_offset =
 801a198:	4413      	add	r3, r2
 801a19a:	623b      	str	r3, [r7, #32]
          if (prior_entry_offset > candidate_offset) {
 801a19c:	6a3a      	ldr	r2, [r7, #32]
 801a19e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a1a0:	429a      	cmp	r2, r3
 801a1a2:	dd01      	ble.n	801a1a8 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1f2>
            candidate_offset = prior_entry_offset;
 801a1a4:	6a3b      	ldr	r3, [r7, #32]
 801a1a6:	64bb      	str	r3, [r7, #72]	; 0x48
          }
        }
        if (next_entry == nullptr) {
 801a1a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a1aa:	2b00      	cmp	r3, #0
 801a1ac:	d00f      	beq.n	801a1ce <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x218>
          // We're at the end of the list, so we can always append the buffer
          // here.
          break;
        }
        // Find out how much space there is between us and the next buffer.
        const int gap = next_entry->offset - candidate_offset;
 801a1ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a1b0:	681a      	ldr	r2, [r3, #0]
 801a1b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a1b4:	1ad3      	subs	r3, r2, r3
 801a1b6:	61fb      	str	r3, [r7, #28]
        if (gap >= wanted_size) {
 801a1b8:	69fa      	ldr	r2, [r7, #28]
 801a1ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a1bc:	429a      	cmp	r2, r3
 801a1be:	da08      	bge.n	801a1d2 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x21c>
          // This entry has a big enough gap between it and the next, so
          // use it!
          break;
        }
        // The gap wasn't big enough, so move on to another candidate.
        prior_entry = next_entry;
 801a1c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a1c2:	647b      	str	r3, [r7, #68]	; 0x44
      }
 801a1c4:	e7d3      	b.n	801a16e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1b8>
    } else {
      // Offline planned offset are to be considered constant
      candidate_offset = wanted_requirements->offline_offset;
 801a1c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a1c8:	685b      	ldr	r3, [r3, #4]
 801a1ca:	64bb      	str	r3, [r7, #72]	; 0x48
 801a1cc:	e002      	b.n	801a1d4 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x21e>
          break;
 801a1ce:	bf00      	nop
 801a1d0:	e000      	b.n	801a1d4 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x21e>
          break;
 801a1d2:	bf00      	nop
    }
    // At this point, we've either found a gap (possibly at the end of the
    // list) and want to place the buffer there, or there are no other active
    // buffers in this time range and so we can put it at offset zero.
    // Record the buffer's offset in our plan.
    buffer_offsets_[buffer_id] = candidate_offset;
 801a1d4:	687b      	ldr	r3, [r7, #4]
 801a1d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801a1d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a1da:	009b      	lsls	r3, r3, #2
 801a1dc:	4413      	add	r3, r2
 801a1de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a1e0:	601a      	str	r2, [r3, #0]
    // Add the newly-placed buffer to our offset-ordered list, so that
    // subsequent passes can fit in their buffers around it.
    ListEntry* new_entry = &buffers_sorted_by_offset_[next_free_entry_];
 801a1e2:	687b      	ldr	r3, [r7, #4]
 801a1e4:	699a      	ldr	r2, [r3, #24]
 801a1e6:	687b      	ldr	r3, [r7, #4]
 801a1e8:	69db      	ldr	r3, [r3, #28]
 801a1ea:	4619      	mov	r1, r3
 801a1ec:	460b      	mov	r3, r1
 801a1ee:	005b      	lsls	r3, r3, #1
 801a1f0:	440b      	add	r3, r1
 801a1f2:	009b      	lsls	r3, r3, #2
 801a1f4:	4413      	add	r3, r2
 801a1f6:	61bb      	str	r3, [r7, #24]
    new_entry->offset = candidate_offset;
 801a1f8:	69bb      	ldr	r3, [r7, #24]
 801a1fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a1fc:	601a      	str	r2, [r3, #0]
    new_entry->requirements_index = buffer_id;
 801a1fe:	69bb      	ldr	r3, [r7, #24]
 801a200:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801a202:	605a      	str	r2, [r3, #4]
    const int new_entry_index = next_free_entry_;
 801a204:	687b      	ldr	r3, [r7, #4]
 801a206:	69db      	ldr	r3, [r3, #28]
 801a208:	617b      	str	r3, [r7, #20]
    ++next_free_entry_;
 801a20a:	687b      	ldr	r3, [r7, #4]
 801a20c:	69db      	ldr	r3, [r3, #28]
 801a20e:	1c5a      	adds	r2, r3, #1
 801a210:	687b      	ldr	r3, [r7, #4]
 801a212:	61da      	str	r2, [r3, #28]

    if (first_entry->offset > candidate_offset) {
 801a214:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a216:	681b      	ldr	r3, [r3, #0]
 801a218:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a21a:	429a      	cmp	r2, r3
 801a21c:	da09      	bge.n	801a232 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x27c>
      // The new entry offset is smaller than the first entry offset =>
      // replace the first entry
      first_entry = new_entry;
 801a21e:	69bb      	ldr	r3, [r7, #24]
 801a220:	653b      	str	r3, [r7, #80]	; 0x50
      first_entry->next_entry_index = first_entry_index_;
 801a222:	687b      	ldr	r3, [r7, #4]
 801a224:	6a1a      	ldr	r2, [r3, #32]
 801a226:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a228:	609a      	str	r2, [r3, #8]
      first_entry_index_ = new_entry_index;
 801a22a:	687b      	ldr	r3, [r7, #4]
 801a22c:	697a      	ldr	r2, [r7, #20]
 801a22e:	621a      	str	r2, [r3, #32]
 801a230:	e029      	b.n	801a286 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d0>
    } else {
      ListEntry* current_entry = first_entry;
 801a232:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a234:	643b      	str	r3, [r7, #64]	; 0x40
      // Make sure that we insert the buffer at the correct place in the
      // buffer-offset-ordered list
      while (true) {
        const int next_entry_index = current_entry->next_entry_index;
 801a236:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a238:	689b      	ldr	r3, [r3, #8]
 801a23a:	613b      	str	r3, [r7, #16]
        if (next_entry_index == -1) {
 801a23c:	693b      	ldr	r3, [r7, #16]
 801a23e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801a242:	d107      	bne.n	801a254 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x29e>
          // We're at the end of the list, so just add the new entry here.
          current_entry->next_entry_index = new_entry_index;
 801a244:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a246:	697a      	ldr	r2, [r7, #20]
 801a248:	609a      	str	r2, [r3, #8]
          new_entry->next_entry_index = -1;
 801a24a:	69bb      	ldr	r3, [r7, #24]
 801a24c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a250:	609a      	str	r2, [r3, #8]
          break;
 801a252:	e018      	b.n	801a286 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d0>
        }
        // not at the end of the list -> take a look at next entry
        ListEntry* next_entry = &buffers_sorted_by_offset_[next_entry_index];
 801a254:	687b      	ldr	r3, [r7, #4]
 801a256:	6999      	ldr	r1, [r3, #24]
 801a258:	693a      	ldr	r2, [r7, #16]
 801a25a:	4613      	mov	r3, r2
 801a25c:	005b      	lsls	r3, r3, #1
 801a25e:	4413      	add	r3, r2
 801a260:	009b      	lsls	r3, r3, #2
 801a262:	440b      	add	r3, r1
 801a264:	60fb      	str	r3, [r7, #12]
        if (next_entry->offset > candidate_offset) {
 801a266:	68fb      	ldr	r3, [r7, #12]
 801a268:	681b      	ldr	r3, [r3, #0]
 801a26a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a26c:	429a      	cmp	r2, r3
 801a26e:	da07      	bge.n	801a280 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2ca>
          // We're at the right spot to do an insertion and retain the sorting
          // order, so place the new entry here.
          new_entry->next_entry_index = current_entry->next_entry_index;
 801a270:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a272:	689a      	ldr	r2, [r3, #8]
 801a274:	69bb      	ldr	r3, [r7, #24]
 801a276:	609a      	str	r2, [r3, #8]
          current_entry->next_entry_index = new_entry_index;
 801a278:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a27a:	697a      	ldr	r2, [r7, #20]
 801a27c:	609a      	str	r2, [r3, #8]
          break;
 801a27e:	e002      	b.n	801a286 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d0>
        }
        current_entry = next_entry;
 801a280:	68fb      	ldr	r3, [r7, #12]
 801a282:	643b      	str	r3, [r7, #64]	; 0x40
      }
 801a284:	e7d7      	b.n	801a236 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x280>
  for (int i = 1; i < buffer_count_; ++i) {
 801a286:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a288:	3301      	adds	r3, #1
 801a28a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801a28c:	e74a      	b.n	801a124 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x16e>
    return;
 801a28e:	bf00      	nop
    }
  }
}
 801a290:	3760      	adds	r7, #96	; 0x60
 801a292:	46bd      	mov	sp, r7
 801a294:	bd80      	pop	{r7, pc}

0801a296 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>:

size_t GreedyMemoryPlanner::GetMaximumMemorySize() {
 801a296:	b580      	push	{r7, lr}
 801a298:	b086      	sub	sp, #24
 801a29a:	af00      	add	r7, sp, #0
 801a29c:	6078      	str	r0, [r7, #4]
  CalculateOffsetsIfNeeded();
 801a29e:	6878      	ldr	r0, [r7, #4]
 801a2a0:	f7ff fe89 	bl	8019fb6 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if (buffer_count_ == 0) {
 801a2a4:	687b      	ldr	r3, [r7, #4]
 801a2a6:	689b      	ldr	r3, [r3, #8]
 801a2a8:	2b00      	cmp	r3, #0
 801a2aa:	d101      	bne.n	801a2b0 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x1a>
    return 0;
 801a2ac:	2300      	movs	r3, #0
 801a2ae:	e035      	b.n	801a31c <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x86>
  }
  ListEntry* entry = &buffers_sorted_by_offset_[first_entry_index_];
 801a2b0:	687b      	ldr	r3, [r7, #4]
 801a2b2:	699a      	ldr	r2, [r3, #24]
 801a2b4:	687b      	ldr	r3, [r7, #4]
 801a2b6:	6a1b      	ldr	r3, [r3, #32]
 801a2b8:	4619      	mov	r1, r3
 801a2ba:	460b      	mov	r3, r1
 801a2bc:	005b      	lsls	r3, r3, #1
 801a2be:	440b      	add	r3, r1
 801a2c0:	009b      	lsls	r3, r3, #2
 801a2c2:	4413      	add	r3, r2
 801a2c4:	617b      	str	r3, [r7, #20]
  size_t max_size = 0;
 801a2c6:	2300      	movs	r3, #0
 801a2c8:	613b      	str	r3, [r7, #16]
  while (entry) {
 801a2ca:	697b      	ldr	r3, [r7, #20]
 801a2cc:	2b00      	cmp	r3, #0
 801a2ce:	d024      	beq.n	801a31a <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x84>
    BufferRequirements* requirements =
        &requirements_[entry->requirements_index];
 801a2d0:	687b      	ldr	r3, [r7, #4]
 801a2d2:	68da      	ldr	r2, [r3, #12]
 801a2d4:	697b      	ldr	r3, [r7, #20]
 801a2d6:	685b      	ldr	r3, [r3, #4]
 801a2d8:	011b      	lsls	r3, r3, #4
    BufferRequirements* requirements =
 801a2da:	4413      	add	r3, r2
 801a2dc:	60fb      	str	r3, [r7, #12]
    const size_t current_size = entry->offset + requirements->size;
 801a2de:	697b      	ldr	r3, [r7, #20]
 801a2e0:	681a      	ldr	r2, [r3, #0]
 801a2e2:	68fb      	ldr	r3, [r7, #12]
 801a2e4:	681b      	ldr	r3, [r3, #0]
 801a2e6:	4413      	add	r3, r2
 801a2e8:	60bb      	str	r3, [r7, #8]
    if (current_size > max_size) {
 801a2ea:	68ba      	ldr	r2, [r7, #8]
 801a2ec:	693b      	ldr	r3, [r7, #16]
 801a2ee:	429a      	cmp	r2, r3
 801a2f0:	d901      	bls.n	801a2f6 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x60>
      max_size = current_size;
 801a2f2:	68bb      	ldr	r3, [r7, #8]
 801a2f4:	613b      	str	r3, [r7, #16]
    }
    if (entry->next_entry_index == -1) {
 801a2f6:	697b      	ldr	r3, [r7, #20]
 801a2f8:	689b      	ldr	r3, [r3, #8]
 801a2fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801a2fe:	d00b      	beq.n	801a318 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x82>
      break;
    }
    entry = &buffers_sorted_by_offset_[entry->next_entry_index];
 801a300:	687b      	ldr	r3, [r7, #4]
 801a302:	699a      	ldr	r2, [r3, #24]
 801a304:	697b      	ldr	r3, [r7, #20]
 801a306:	689b      	ldr	r3, [r3, #8]
 801a308:	4619      	mov	r1, r3
 801a30a:	460b      	mov	r3, r1
 801a30c:	005b      	lsls	r3, r3, #1
 801a30e:	440b      	add	r3, r1
 801a310:	009b      	lsls	r3, r3, #2
 801a312:	4413      	add	r3, r2
 801a314:	617b      	str	r3, [r7, #20]
  while (entry) {
 801a316:	e7d8      	b.n	801a2ca <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x34>
      break;
 801a318:	bf00      	nop
  }
  return max_size;
 801a31a:	693b      	ldr	r3, [r7, #16]
}
 801a31c:	4618      	mov	r0, r3
 801a31e:	3718      	adds	r7, #24
 801a320:	46bd      	mov	sp, r7
 801a322:	bd80      	pop	{r7, pc}

0801a324 <_ZN6tflite19GreedyMemoryPlanner14GetBufferCountEv>:
    MicroPrintf("%s%d: %s (%dk)", t < 10 ? " " : "", t, (const char*)line,
                (memory_use + 1023) / 1024);
  }
}

int GreedyMemoryPlanner::GetBufferCount() { return buffer_count_; }
 801a324:	b480      	push	{r7}
 801a326:	b083      	sub	sp, #12
 801a328:	af00      	add	r7, sp, #0
 801a32a:	6078      	str	r0, [r7, #4]
 801a32c:	687b      	ldr	r3, [r7, #4]
 801a32e:	689b      	ldr	r3, [r3, #8]
 801a330:	4618      	mov	r0, r3
 801a332:	370c      	adds	r7, #12
 801a334:	46bd      	mov	sp, r7
 801a336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a33a:	4770      	bx	lr

0801a33c <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi>:

TfLiteStatus GreedyMemoryPlanner::GetOffsetForBuffer(
    tflite::ErrorReporter* error_reporter, int buffer_index, int* offset) {
 801a33c:	b580      	push	{r7, lr}
 801a33e:	b084      	sub	sp, #16
 801a340:	af00      	add	r7, sp, #0
 801a342:	60f8      	str	r0, [r7, #12]
 801a344:	60b9      	str	r1, [r7, #8]
 801a346:	607a      	str	r2, [r7, #4]
 801a348:	603b      	str	r3, [r7, #0]
  CalculateOffsetsIfNeeded();
 801a34a:	68f8      	ldr	r0, [r7, #12]
 801a34c:	f7ff fe33 	bl	8019fb6 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if ((buffer_index < 0) || (buffer_index >= buffer_count_)) {
 801a350:	687b      	ldr	r3, [r7, #4]
 801a352:	2b00      	cmp	r3, #0
 801a354:	db04      	blt.n	801a360 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x24>
 801a356:	68fb      	ldr	r3, [r7, #12]
 801a358:	689b      	ldr	r3, [r3, #8]
 801a35a:	687a      	ldr	r2, [r7, #4]
 801a35c:	429a      	cmp	r2, r3
 801a35e:	db08      	blt.n	801a372 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x36>
    TF_LITE_REPORT_ERROR(error_reporter,
 801a360:	68fb      	ldr	r3, [r7, #12]
 801a362:	689b      	ldr	r3, [r3, #8]
 801a364:	687a      	ldr	r2, [r7, #4]
 801a366:	4909      	ldr	r1, [pc, #36]	; (801a38c <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x50>)
 801a368:	68b8      	ldr	r0, [r7, #8]
 801a36a:	f7f0 facb 	bl	800a904 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "buffer index %d is outside range 0 to %d",
                         buffer_index, buffer_count_);
    return kTfLiteError;
 801a36e:	2301      	movs	r3, #1
 801a370:	e008      	b.n	801a384 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x48>
  }
  *offset = buffer_offsets_[buffer_index];
 801a372:	68fb      	ldr	r3, [r7, #12]
 801a374:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801a376:	687b      	ldr	r3, [r7, #4]
 801a378:	009b      	lsls	r3, r3, #2
 801a37a:	4413      	add	r3, r2
 801a37c:	681a      	ldr	r2, [r3, #0]
 801a37e:	683b      	ldr	r3, [r7, #0]
 801a380:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 801a382:	2300      	movs	r3, #0
}
 801a384:	4618      	mov	r0, r3
 801a386:	3710      	adds	r7, #16
 801a388:	46bd      	mov	sp, r7
 801a38a:	bd80      	pop	{r7, pc}
 801a38c:	0802e04c 	.word	0x0802e04c

0801a390 <arm_convolve_1_x_n_s8>:
                                 const q7_t *filter_data,
                                 const cmsis_nn_dims *bias_dims,
                                 const int32_t *bias_data,
                                 const cmsis_nn_dims *output_dims,
                                 q7_t *output_data)
{
 801a390:	b580      	push	{r7, lr}
 801a392:	b08e      	sub	sp, #56	; 0x38
 801a394:	af08      	add	r7, sp, #32
 801a396:	60f8      	str	r0, [r7, #12]
 801a398:	60b9      	str	r1, [r7, #8]
 801a39a:	607a      	str	r2, [r7, #4]
 801a39c:	603b      	str	r3, [r7, #0]
    (void)bias_dims;
    arm_status status = ARM_MATH_SUCCESS;
 801a39e:	2300      	movs	r3, #0
 801a3a0:	75fb      	strb	r3, [r7, #23]
    if (output_dims->w % 4 != 0)
 801a3a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a3a4:	689b      	ldr	r3, [r3, #8]
 801a3a6:	f003 0303 	and.w	r3, r3, #3
 801a3aa:	2b00      	cmp	r3, #0
 801a3ac:	d002      	beq.n	801a3b4 <arm_convolve_1_x_n_s8+0x24>
    {
        status = ARM_MATH_SIZE_MISMATCH;
 801a3ae:	23fd      	movs	r3, #253	; 0xfd
 801a3b0:	75fb      	strb	r3, [r7, #23]
        goto out;
 801a3b2:	e015      	b.n	801a3e0 <arm_convolve_1_x_n_s8+0x50>
        }
        output_data += (3 * output_ch);
    }

#else
    status = arm_convolve_s8(ctx,
 801a3b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a3b6:	9306      	str	r3, [sp, #24]
 801a3b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a3ba:	9305      	str	r3, [sp, #20]
 801a3bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a3be:	9304      	str	r3, [sp, #16]
 801a3c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a3c2:	9303      	str	r3, [sp, #12]
 801a3c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a3c6:	9302      	str	r3, [sp, #8]
 801a3c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a3ca:	9301      	str	r3, [sp, #4]
 801a3cc:	6a3b      	ldr	r3, [r7, #32]
 801a3ce:	9300      	str	r3, [sp, #0]
 801a3d0:	683b      	ldr	r3, [r7, #0]
 801a3d2:	687a      	ldr	r2, [r7, #4]
 801a3d4:	68b9      	ldr	r1, [r7, #8]
 801a3d6:	68f8      	ldr	r0, [r7, #12]
 801a3d8:	f000 f87d 	bl	801a4d6 <arm_convolve_s8>
 801a3dc:	4603      	mov	r3, r0
 801a3de:	75fb      	strb	r3, [r7, #23]
                             output_data);
#endif

out:
    /* Return to application */
    return status;
 801a3e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801a3e4:	4618      	mov	r0, r3
 801a3e6:	3718      	adds	r7, #24
 801a3e8:	46bd      	mov	sp, r7
 801a3ea:	bd80      	pop	{r7, pc}

0801a3ec <arm_convolve_1_x_n_s8_get_buffer_size>:

int32_t arm_convolve_1_x_n_s8_get_buffer_size(const cmsis_nn_dims *input_dims, const cmsis_nn_dims *filter_dims)
{
 801a3ec:	b480      	push	{r7}
 801a3ee:	b083      	sub	sp, #12
 801a3f0:	af00      	add	r7, sp, #0
 801a3f2:	6078      	str	r0, [r7, #4]
 801a3f4:	6039      	str	r1, [r7, #0]
#if defined(ARM_MATH_DSP) && !defined(ARM_MATH_MVEI)
    return (2 * input_dims->c * filter_dims->w * filter_dims->h) * sizeof(int16_t);
 801a3f6:	687b      	ldr	r3, [r7, #4]
 801a3f8:	68db      	ldr	r3, [r3, #12]
 801a3fa:	683a      	ldr	r2, [r7, #0]
 801a3fc:	6892      	ldr	r2, [r2, #8]
 801a3fe:	fb02 f303 	mul.w	r3, r2, r3
 801a402:	683a      	ldr	r2, [r7, #0]
 801a404:	6852      	ldr	r2, [r2, #4]
 801a406:	fb02 f303 	mul.w	r3, r2, r3
 801a40a:	009b      	lsls	r3, r3, #2
#else
    (void)input_dims;
    (void)filter_dims;
    return 0;
#endif
}
 801a40c:	4618      	mov	r0, r3
 801a40e:	370c      	adds	r7, #12
 801a410:	46bd      	mov	sp, r7
 801a412:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a416:	4770      	bx	lr

0801a418 <arm_convolve_1x1_s8_fast>:
                                    const q7_t *filter_data,
                                    const cmsis_nn_dims *bias_dims,
                                    const int32_t *bias_data,
                                    const cmsis_nn_dims *output_dims,
                                    q7_t *output_data)
{
 801a418:	b5b0      	push	{r4, r5, r7, lr}
 801a41a:	b092      	sub	sp, #72	; 0x48
 801a41c:	af0a      	add	r7, sp, #40	; 0x28
 801a41e:	60f8      	str	r0, [r7, #12]
 801a420:	60b9      	str	r1, [r7, #8]
 801a422:	607a      	str	r2, [r7, #4]
 801a424:	603b      	str	r3, [r7, #0]
    if (input_dims->c % 4 != 0 || conv_params->padding.w != 0 || conv_params->padding.h != 0 ||
 801a426:	683b      	ldr	r3, [r7, #0]
 801a428:	68db      	ldr	r3, [r3, #12]
 801a42a:	f003 0303 	and.w	r3, r3, #3
 801a42e:	2b00      	cmp	r3, #0
 801a430:	d10f      	bne.n	801a452 <arm_convolve_1x1_s8_fast+0x3a>
 801a432:	68bb      	ldr	r3, [r7, #8]
 801a434:	691b      	ldr	r3, [r3, #16]
 801a436:	2b00      	cmp	r3, #0
 801a438:	d10b      	bne.n	801a452 <arm_convolve_1x1_s8_fast+0x3a>
 801a43a:	68bb      	ldr	r3, [r7, #8]
 801a43c:	695b      	ldr	r3, [r3, #20]
 801a43e:	2b00      	cmp	r3, #0
 801a440:	d107      	bne.n	801a452 <arm_convolve_1x1_s8_fast+0x3a>
        conv_params->stride.w != 1 || conv_params->stride.h != 1)
 801a442:	68bb      	ldr	r3, [r7, #8]
 801a444:	689b      	ldr	r3, [r3, #8]
    if (input_dims->c % 4 != 0 || conv_params->padding.w != 0 || conv_params->padding.h != 0 ||
 801a446:	2b01      	cmp	r3, #1
 801a448:	d103      	bne.n	801a452 <arm_convolve_1x1_s8_fast+0x3a>
        conv_params->stride.w != 1 || conv_params->stride.h != 1)
 801a44a:	68bb      	ldr	r3, [r7, #8]
 801a44c:	68db      	ldr	r3, [r3, #12]
 801a44e:	2b01      	cmp	r3, #1
 801a450:	d002      	beq.n	801a458 <arm_convolve_1x1_s8_fast+0x40>
    {
        return ARM_MATH_SIZE_MISMATCH;
 801a452:	f06f 0302 	mvn.w	r3, #2
 801a456:	e02f      	b.n	801a4b8 <arm_convolve_1x1_s8_fast+0xa0>
    }

#else
    /* Run the following code as reference implementation for Cortex-M processors with or without DSP extension */

    const int32_t lhs_rows = input_dims->w * input_dims->h * input_dims->n;
 801a458:	683b      	ldr	r3, [r7, #0]
 801a45a:	689b      	ldr	r3, [r3, #8]
 801a45c:	683a      	ldr	r2, [r7, #0]
 801a45e:	6852      	ldr	r2, [r2, #4]
 801a460:	fb02 f303 	mul.w	r3, r2, r3
 801a464:	683a      	ldr	r2, [r7, #0]
 801a466:	6812      	ldr	r2, [r2, #0]
 801a468:	fb02 f303 	mul.w	r3, r2, r3
 801a46c:	61fb      	str	r3, [r7, #28]
    const int32_t rhs_rows = output_dims->c;
 801a46e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a470:	68db      	ldr	r3, [r3, #12]
 801a472:	61bb      	str	r3, [r7, #24]
    const int32_t rhs_cols = input_dims->c;
 801a474:	683b      	ldr	r3, [r7, #0]
 801a476:	68db      	ldr	r3, [r3, #12]
 801a478:	617b      	str	r3, [r7, #20]

    arm_nn_mat_mult_nt_t_s8(input_data,
                            filter_data,
                            bias_data,
                            output_data,
                            quant_params->multiplier,
 801a47a:	687b      	ldr	r3, [r7, #4]
 801a47c:	681b      	ldr	r3, [r3, #0]
                            quant_params->shift,
 801a47e:	687a      	ldr	r2, [r7, #4]
 801a480:	6852      	ldr	r2, [r2, #4]
    arm_nn_mat_mult_nt_t_s8(input_data,
 801a482:	68b9      	ldr	r1, [r7, #8]
 801a484:	6809      	ldr	r1, [r1, #0]
 801a486:	68b8      	ldr	r0, [r7, #8]
 801a488:	6840      	ldr	r0, [r0, #4]
 801a48a:	68bc      	ldr	r4, [r7, #8]
 801a48c:	6a24      	ldr	r4, [r4, #32]
 801a48e:	68bd      	ldr	r5, [r7, #8]
 801a490:	6a6d      	ldr	r5, [r5, #36]	; 0x24
 801a492:	9508      	str	r5, [sp, #32]
 801a494:	9407      	str	r4, [sp, #28]
 801a496:	9006      	str	r0, [sp, #24]
 801a498:	9105      	str	r1, [sp, #20]
 801a49a:	6979      	ldr	r1, [r7, #20]
 801a49c:	9104      	str	r1, [sp, #16]
 801a49e:	69b9      	ldr	r1, [r7, #24]
 801a4a0:	9103      	str	r1, [sp, #12]
 801a4a2:	69f9      	ldr	r1, [r7, #28]
 801a4a4:	9102      	str	r1, [sp, #8]
 801a4a6:	9201      	str	r2, [sp, #4]
 801a4a8:	9300      	str	r3, [sp, #0]
 801a4aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a4ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801a4ae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801a4b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a4b2:	f005 f9e0 	bl	801f876 <arm_nn_mat_mult_nt_t_s8>
                            conv_params->activation.max);

#endif

    /* Return to application */
    return ARM_MATH_SUCCESS;
 801a4b6:	2300      	movs	r3, #0
}
 801a4b8:	4618      	mov	r0, r3
 801a4ba:	3720      	adds	r7, #32
 801a4bc:	46bd      	mov	sp, r7
 801a4be:	bdb0      	pop	{r4, r5, r7, pc}

0801a4c0 <arm_convolve_1x1_s8_fast_get_buffer_size>:

int32_t arm_convolve_1x1_s8_fast_get_buffer_size(const cmsis_nn_dims *input_dims)
{
 801a4c0:	b480      	push	{r7}
 801a4c2:	b083      	sub	sp, #12
 801a4c4:	af00      	add	r7, sp, #0
 801a4c6:	6078      	str	r0, [r7, #4]
    (void)input_dims;
    return 0;
 801a4c8:	2300      	movs	r3, #0
}
 801a4ca:	4618      	mov	r0, r3
 801a4cc:	370c      	adds	r7, #12
 801a4ce:	46bd      	mov	sp, r7
 801a4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4d4:	4770      	bx	lr

0801a4d6 <arm_convolve_s8>:
                           const q7_t *filter_data,
                           const cmsis_nn_dims *bias_dims,
                           const int32_t *bias_data,
                           const cmsis_nn_dims *output_dims,
                           q7_t *output_data)
{
 801a4d6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a4da:	b0dd      	sub	sp, #372	; 0x174
 801a4dc:	af08      	add	r7, sp, #32
 801a4de:	f107 040c 	add.w	r4, r7, #12
 801a4e2:	6020      	str	r0, [r4, #0]
 801a4e4:	f107 0008 	add.w	r0, r7, #8
 801a4e8:	6001      	str	r1, [r0, #0]
 801a4ea:	1d39      	adds	r1, r7, #4
 801a4ec:	600a      	str	r2, [r1, #0]
 801a4ee:	463a      	mov	r2, r7
 801a4f0:	6013      	str	r3, [r2, #0]
    (void)bias_dims;
    q15_t *buffer_a = (q15_t *)ctx->buf;
 801a4f2:	f107 030c 	add.w	r3, r7, #12
 801a4f6:	681b      	ldr	r3, [r3, #0]
 801a4f8:	681b      	ldr	r3, [r3, #0]
 801a4fa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

    const int32_t input_batches = input_dims->n;
 801a4fe:	463b      	mov	r3, r7
 801a500:	681b      	ldr	r3, [r3, #0]
 801a502:	681b      	ldr	r3, [r3, #0]
 801a504:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    const uint16_t input_x = input_dims->w;
 801a508:	463b      	mov	r3, r7
 801a50a:	681b      	ldr	r3, [r3, #0]
 801a50c:	689b      	ldr	r3, [r3, #8]
 801a50e:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
    const uint16_t input_y = input_dims->h;
 801a512:	463b      	mov	r3, r7
 801a514:	681b      	ldr	r3, [r3, #0]
 801a516:	685b      	ldr	r3, [r3, #4]
 801a518:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
    const uint16_t input_ch = input_dims->c;
 801a51c:	463b      	mov	r3, r7
 801a51e:	681b      	ldr	r3, [r3, #0]
 801a520:	68db      	ldr	r3, [r3, #12]
 801a522:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
    const uint16_t kernel_x = filter_dims->w;
 801a526:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 801a52a:	689b      	ldr	r3, [r3, #8]
 801a52c:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
    const uint16_t kernel_y = filter_dims->h;
 801a530:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 801a534:	685b      	ldr	r3, [r3, #4]
 801a536:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
    const uint16_t output_x = output_dims->w;
 801a53a:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 801a53e:	689b      	ldr	r3, [r3, #8]
 801a540:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
    const uint16_t output_y = output_dims->h;
 801a544:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 801a548:	685b      	ldr	r3, [r3, #4]
 801a54a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
    const uint16_t output_ch = output_dims->c;
 801a54e:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 801a552:	68db      	ldr	r3, [r3, #12]
 801a554:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c

    const uint16_t pad_x = conv_params->padding.w;
 801a558:	f107 0308 	add.w	r3, r7, #8
 801a55c:	681b      	ldr	r3, [r3, #0]
 801a55e:	691b      	ldr	r3, [r3, #16]
 801a560:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
    const uint16_t pad_y = conv_params->padding.h;
 801a564:	f107 0308 	add.w	r3, r7, #8
 801a568:	681b      	ldr	r3, [r3, #0]
 801a56a:	695b      	ldr	r3, [r3, #20]
 801a56c:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
    const uint16_t stride_x = conv_params->stride.w;
 801a570:	f107 0308 	add.w	r3, r7, #8
 801a574:	681b      	ldr	r3, [r3, #0]
 801a576:	689b      	ldr	r3, [r3, #8]
 801a578:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106
    const uint16_t stride_y = conv_params->stride.h;
 801a57c:	f107 0308 	add.w	r3, r7, #8
 801a580:	681b      	ldr	r3, [r3, #0]
 801a582:	68db      	ldr	r3, [r3, #12]
 801a584:	f8a7 3104 	strh.w	r3, [r7, #260]	; 0x104

    const int32_t input_offset = conv_params->input_offset;
 801a588:	f107 0308 	add.w	r3, r7, #8
 801a58c:	681b      	ldr	r3, [r3, #0]
 801a58e:	681b      	ldr	r3, [r3, #0]
 801a590:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    const int32_t out_offset = conv_params->output_offset;
 801a594:	f107 0308 	add.w	r3, r7, #8
 801a598:	681b      	ldr	r3, [r3, #0]
 801a59a:	685b      	ldr	r3, [r3, #4]
 801a59c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    const int32_t out_activation_min = conv_params->activation.min;
 801a5a0:	f107 0308 	add.w	r3, r7, #8
 801a5a4:	681b      	ldr	r3, [r3, #0]
 801a5a6:	6a1b      	ldr	r3, [r3, #32]
 801a5a8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    const int32_t out_activation_max = conv_params->activation.max;
 801a5ac:	f107 0308 	add.w	r3, r7, #8
 801a5b0:	681b      	ldr	r3, [r3, #0]
 801a5b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a5b4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    int32_t *output_mult = quant_params->multiplier;
 801a5b8:	1d3b      	adds	r3, r7, #4
 801a5ba:	681b      	ldr	r3, [r3, #0]
 801a5bc:	681b      	ldr	r3, [r3, #0]
 801a5be:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    int32_t *output_shift = quant_params->shift;
 801a5c2:	1d3b      	adds	r3, r7, #4
 801a5c4:	681b      	ldr	r3, [r3, #0]
 801a5c6:	685b      	ldr	r3, [r3, #4]
 801a5c8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

    int i_batch;
    for (i_batch = 0; i_batch < input_batches; i_batch++)
 801a5cc:	2300      	movs	r3, #0
 801a5ce:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 801a5d2:	e350      	b.n	801ac76 <arm_convolve_s8+0x7a0>

#elif defined(ARM_MATH_DSP)
        int32_t i_out_y, i_out_x, i_ker_y, i_ker_x;

        /* Generate two columns from the input tensor a GEMM computation */
        q15_t *two_column_buf = buffer_a;
 801a5d4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801a5d8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
        q7_t *out = output_data;
 801a5dc:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 801a5e0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

        /* This part implements the im2col function */
        for (i_out_y = 0; i_out_y < output_y; i_out_y++)
 801a5e4:	2300      	movs	r3, #0
 801a5e6:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 801a5ea:	e0da      	b.n	801a7a2 <arm_convolve_s8+0x2cc>
        {
            for (i_out_x = 0; i_out_x < output_x; i_out_x++)
 801a5ec:	2300      	movs	r3, #0
 801a5ee:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 801a5f2:	e0ca      	b.n	801a78a <arm_convolve_s8+0x2b4>
            {
                for (i_ker_y = i_out_y * stride_y - pad_y; i_ker_y < i_out_y * stride_y - pad_y + kernel_y; i_ker_y++)
 801a5f4:	f8b7 3104 	ldrh.w	r3, [r7, #260]	; 0x104
 801a5f8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 801a5fc:	fb02 f203 	mul.w	r2, r2, r3
 801a600:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
 801a604:	1ad3      	subs	r3, r2, r3
 801a606:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 801a60a:	e065      	b.n	801a6d8 <arm_convolve_s8+0x202>
                {
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x;
 801a60c:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 801a610:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 801a614:	fb02 f203 	mul.w	r2, r2, r3
 801a618:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 801a61c:	1ad3      	subs	r3, r2, r3
 801a61e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 801a622:	e044      	b.n	801a6ae <arm_convolve_s8+0x1d8>
                         i_ker_x++)
                    {
                        if (i_ker_y < 0 || i_ker_y >= input_y || i_ker_x < 0 || i_ker_x >= input_x)
 801a624:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 801a628:	2b00      	cmp	r3, #0
 801a62a:	db0f      	blt.n	801a64c <arm_convolve_s8+0x176>
 801a62c:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 801a630:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 801a634:	429a      	cmp	r2, r3
 801a636:	da09      	bge.n	801a64c <arm_convolve_s8+0x176>
 801a638:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801a63c:	2b00      	cmp	r3, #0
 801a63e:	db05      	blt.n	801a64c <arm_convolve_s8+0x176>
 801a640:	f8b7 311a 	ldrh.w	r3, [r7, #282]	; 0x11a
 801a644:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 801a648:	429a      	cmp	r2, r3
 801a64a:	db09      	blt.n	801a660 <arm_convolve_s8+0x18a>
                        {
                            /* Filling 0 for out-of-bound paddings */
                            memset(two_column_buf, 0, sizeof(q15_t) * input_ch);
 801a64c:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 801a650:	005b      	lsls	r3, r3, #1
 801a652:	461a      	mov	r2, r3
 801a654:	2100      	movs	r1, #0
 801a656:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 801a65a:	f00c fbef 	bl	8026e3c <memset>
 801a65e:	e019      	b.n	801a694 <arm_convolve_s8+0x1be>
                        }
                        else
                        {
                            /* Copying the pixel data to column */
                            arm_q7_to_q15_with_offset(input_data + (i_ker_y * input_x + i_ker_x) * input_ch,
 801a660:	f8b7 311a 	ldrh.w	r3, [r7, #282]	; 0x11a
 801a664:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 801a668:	fb02 f203 	mul.w	r2, r2, r3
 801a66c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801a670:	4413      	add	r3, r2
 801a672:	f8b7 2116 	ldrh.w	r2, [r7, #278]	; 0x116
 801a676:	fb02 f303 	mul.w	r3, r2, r3
 801a67a:	461a      	mov	r2, r3
 801a67c:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 801a680:	1898      	adds	r0, r3, r2
 801a682:	f8b7 2116 	ldrh.w	r2, [r7, #278]	; 0x116
 801a686:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801a68a:	b21b      	sxth	r3, r3
 801a68c:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 801a690:	f008 fbf5 	bl	8022e7e <arm_q7_to_q15_with_offset>
                                                      two_column_buf,
                                                      input_ch,
                                                      input_offset);
                        }
                        two_column_buf += input_ch;
 801a694:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 801a698:	005b      	lsls	r3, r3, #1
 801a69a:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 801a69e:	4413      	add	r3, r2
 801a6a0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
                         i_ker_x++)
 801a6a4:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801a6a8:	3301      	adds	r3, #1
 801a6aa:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x;
 801a6ae:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 801a6b2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 801a6b6:	fb02 f203 	mul.w	r2, r2, r3
 801a6ba:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 801a6be:	1ad2      	subs	r2, r2, r3
 801a6c0:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 801a6c4:	4413      	add	r3, r2
 801a6c6:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 801a6ca:	429a      	cmp	r2, r3
 801a6cc:	dbaa      	blt.n	801a624 <arm_convolve_s8+0x14e>
                for (i_ker_y = i_out_y * stride_y - pad_y; i_ker_y < i_out_y * stride_y - pad_y + kernel_y; i_ker_y++)
 801a6ce:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 801a6d2:	3301      	adds	r3, #1
 801a6d4:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 801a6d8:	f8b7 3104 	ldrh.w	r3, [r7, #260]	; 0x104
 801a6dc:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 801a6e0:	fb02 f203 	mul.w	r2, r2, r3
 801a6e4:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
 801a6e8:	1ad2      	subs	r2, r2, r3
 801a6ea:	f8b7 3112 	ldrh.w	r3, [r7, #274]	; 0x112
 801a6ee:	4413      	add	r3, r2
 801a6f0:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 801a6f4:	429a      	cmp	r2, r3
 801a6f6:	db89      	blt.n	801a60c <arm_convolve_s8+0x136>
                    }
                }

                /* Computation is filed for every 2 columns */
                if (two_column_buf == buffer_a + 2 * input_ch * kernel_y * kernel_x)
 801a6f8:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 801a6fc:	f8b7 2112 	ldrh.w	r2, [r7, #274]	; 0x112
 801a700:	fb02 f303 	mul.w	r3, r2, r3
 801a704:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 801a708:	fb02 f303 	mul.w	r3, r2, r3
 801a70c:	009b      	lsls	r3, r3, #2
 801a70e:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 801a712:	4413      	add	r3, r2
 801a714:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 801a718:	429a      	cmp	r2, r3
 801a71a:	d131      	bne.n	801a780 <arm_convolve_s8+0x2aa>
                {
                    out = arm_nn_mat_mult_kernel_s8_s16(filter_data,
 801a71c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801a720:	b21b      	sxth	r3, r3
 801a722:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 801a726:	b212      	sxth	r2, r2
 801a728:	f8b7 0116 	ldrh.w	r0, [r7, #278]	; 0x116
 801a72c:	f8b7 1112 	ldrh.w	r1, [r7, #274]	; 0x112
 801a730:	fb10 f101 	smulbb	r1, r0, r1
 801a734:	b289      	uxth	r1, r1
 801a736:	f8b7 0114 	ldrh.w	r0, [r7, #276]	; 0x114
 801a73a:	fb10 f101 	smulbb	r1, r0, r1
 801a73e:	b289      	uxth	r1, r1
 801a740:	f8b7 410c 	ldrh.w	r4, [r7, #268]	; 0x10c
 801a744:	f8d7 0134 	ldr.w	r0, [r7, #308]	; 0x134
 801a748:	9006      	str	r0, [sp, #24]
 801a74a:	f8d7 0180 	ldr.w	r0, [r7, #384]	; 0x180
 801a74e:	9005      	str	r0, [sp, #20]
 801a750:	9104      	str	r1, [sp, #16]
 801a752:	9203      	str	r2, [sp, #12]
 801a754:	9302      	str	r3, [sp, #8]
 801a756:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801a75a:	9301      	str	r3, [sp, #4]
 801a75c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801a760:	9300      	str	r3, [sp, #0]
 801a762:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801a766:	4622      	mov	r2, r4
 801a768:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 801a76c:	f8d7 0178 	ldr.w	r0, [r7, #376]	; 0x178
 801a770:	f003 fd2a 	bl	801e1c8 <arm_nn_mat_mult_kernel_s8_s16>
 801a774:	f8c7 0134 	str.w	r0, [r7, #308]	; 0x134
                                                        input_ch * kernel_y * kernel_x,
                                                        bias_data,
                                                        out);

                    /* counter reset */
                    two_column_buf = buffer_a;
 801a778:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801a77c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
            for (i_out_x = 0; i_out_x < output_x; i_out_x++)
 801a780:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 801a784:	3301      	adds	r3, #1
 801a786:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 801a78a:	f8b7 3110 	ldrh.w	r3, [r7, #272]	; 0x110
 801a78e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 801a792:	429a      	cmp	r2, r3
 801a794:	f6ff af2e 	blt.w	801a5f4 <arm_convolve_s8+0x11e>
        for (i_out_y = 0; i_out_y < output_y; i_out_y++)
 801a798:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801a79c:	3301      	adds	r3, #1
 801a79e:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 801a7a2:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 801a7a6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 801a7aa:	429a      	cmp	r2, r3
 801a7ac:	f6ff af1e 	blt.w	801a5ec <arm_convolve_s8+0x116>
                }
            }
        }

        /* left-over because odd number of output pixels */
        if (two_column_buf != buffer_a)
 801a7b0:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 801a7b4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801a7b8:	429a      	cmp	r2, r3
 801a7ba:	f000 8237 	beq.w	801ac2c <arm_convolve_s8+0x756>
        {
            const q7_t *ker_a = filter_data;
 801a7be:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 801a7c2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
            int i;

            for (i = 0; i < output_ch; i++)
 801a7c6:	2300      	movs	r3, #0
 801a7c8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801a7cc:	e227      	b.n	801ac1e <arm_convolve_s8+0x748>
            {
                /* Load the accumulator with bias first */
                q31_t sum = 0;
 801a7ce:	2300      	movs	r3, #0
 801a7d0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
                if (bias_data)
 801a7d4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 801a7d8:	2b00      	cmp	r3, #0
 801a7da:	d008      	beq.n	801a7ee <arm_convolve_s8+0x318>
                {
                    sum = bias_data[i];
 801a7dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801a7e0:	009b      	lsls	r3, r3, #2
 801a7e2:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 801a7e6:	4413      	add	r3, r2
 801a7e8:	681b      	ldr	r3, [r3, #0]
 801a7ea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
                }

                /* Point to the beginning of the im2col buffer where the input is available as a rearranged column */
                const q15_t *ip_as_col = buffer_a;
 801a7ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801a7f2:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 801a7f6:	601a      	str	r2, [r3, #0]

                /* 4 multiply and accumulates are done in one loop. */
                uint16_t col_count = (input_ch * kernel_y * kernel_x) >> 2;
 801a7f8:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 801a7fc:	f8b7 2112 	ldrh.w	r2, [r7, #274]	; 0x112
 801a800:	fb02 f303 	mul.w	r3, r2, r3
 801a804:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 801a808:	fb02 f303 	mul.w	r3, r2, r3
 801a80c:	109b      	asrs	r3, r3, #2
 801a80e:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126

                while (col_count)
 801a812:	e0f3      	b.n	801a9fc <arm_convolve_s8+0x526>
 801a814:	f107 031c 	add.w	r3, r7, #28
 801a818:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 801a81c:	601a      	str	r2, [r3, #0]
 801a81e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801a822:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801a826:	f107 0320 	add.w	r3, r7, #32
 801a82a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801a82e:	f107 031c 	add.w	r3, r7, #28
 801a832:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  @return        q31 value
 */
__STATIC_FORCEINLINE q31_t arm_nn_read_q7x4_ia(const q7_t **in_q7)
{
    q31_t val;
    memcpy(&val, *in_q7, 4);
 801a836:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801a83a:	681b      	ldr	r3, [r3, #0]
 801a83c:	681b      	ldr	r3, [r3, #0]
 801a83e:	461a      	mov	r2, r3
 801a840:	f107 0318 	add.w	r3, r7, #24
 801a844:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801a846:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801a84a:	681b      	ldr	r3, [r3, #0]
 801a84c:	1d1a      	adds	r2, r3, #4
 801a84e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801a852:	601a      	str	r2, [r3, #0]

    return (val);
 801a854:	f107 0318 	add.w	r3, r7, #24
 801a858:	681b      	ldr	r3, [r3, #0]
 * @brief read and expand one q7 word into two q15 words
 */

__STATIC_FORCEINLINE const q7_t *read_and_pad(const q7_t *source, q31_t *out1, q31_t *out2)
{
    q31_t inA = arm_nn_read_q7x4_ia(&source);
 801a85a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    q31_t inAbuf1 = __SXTB16_RORn((uint32_t)inA, 8);
 801a85e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801a862:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801a866:	2308      	movs	r3, #8
 801a868:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 801a86c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801a870:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801a874:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801a878:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  op2 %= 32U;
 801a87c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801a880:	f003 031f 	and.w	r3, r3, #31
 801a884:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (op2 == 0U)
 801a888:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801a88c:	2b00      	cmp	r3, #0
 801a88e:	d102      	bne.n	801a896 <arm_convolve_s8+0x3c0>
    return op1;
 801a890:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801a894:	e005      	b.n	801a8a2 <arm_convolve_s8+0x3cc>
  return (op1 >> op2) | (op1 << (32U - op2));
 801a896:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801a89a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801a89e:	fa62 f303 	ror.w	r3, r2, r3
 801a8a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

__STATIC_FORCEINLINE uint32_t __SXTB16(uint32_t op1)
{
  uint32_t result;

  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801a8a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801a8aa:	fa2f f383 	sxtb16	r3, r3
 801a8ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return(result);
 801a8b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
{
  uint32_t result;
  if (__builtin_constant_p(rotate) && ((rotate == 8U) || (rotate == 16U) || (rotate == 24U))) {
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
  } else {
    result = __SXTB16(__ROR(op1, rotate)) ;
 801a8b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  }
  return result;
 801a8ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801a8be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    q31_t inAbuf2 = __SXTB16(inA);
 801a8c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801a8c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801a8ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801a8ce:	fa2f f383 	sxtb16	r3, r3
 801a8d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  return(result);
 801a8d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801a8da:	67fb      	str	r3, [r7, #124]	; 0x7c

#ifndef ARM_MATH_BIG_ENDIAN
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 801a8dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801a8e0:	67bb      	str	r3, [r7, #120]	; 0x78
 801a8e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801a8e4:	677b      	str	r3, [r7, #116]	; 0x74
 801a8e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801a8e8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801a8ea:	eac3 4322 	pkhtb	r3, r3, r2, asr #16
 801a8ee:	673b      	str	r3, [r7, #112]	; 0x70
 801a8f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801a8f2:	461a      	mov	r2, r3
 801a8f4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801a8f8:	601a      	str	r2, [r3, #0]
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 801a8fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801a8fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 801a8fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801a902:	66bb      	str	r3, [r7, #104]	; 0x68
 801a904:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a906:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801a908:	eac3 4302 	pkhbt	r3, r3, r2, lsl #16
 801a90c:	667b      	str	r3, [r7, #100]	; 0x64
 801a90e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801a910:	461a      	mov	r2, r3
 801a912:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801a916:	601a      	str	r2, [r3, #0]
#else
    *out1 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
    *out2 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
#endif

    return source;
 801a918:	f107 031c 	add.w	r3, r7, #28
 801a91c:	681b      	ldr	r3, [r3, #0]
                {
                    q31_t ker_a1, ker_a2;
                    q31_t ip_b1, ip_b2;

                    ker_a = read_and_pad(ker_a, &ker_a1, &ker_a2);
 801a91e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 801a922:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801a926:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    memcpy(&val, *in_q15, 4);
 801a92a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801a92e:	681b      	ldr	r3, [r3, #0]
 801a930:	681b      	ldr	r3, [r3, #0]
 801a932:	461a      	mov	r2, r3
 801a934:	f107 0314 	add.w	r3, r7, #20
 801a938:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 801a93a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801a93e:	681b      	ldr	r3, [r3, #0]
 801a940:	1d1a      	adds	r2, r3, #4
 801a942:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801a946:	601a      	str	r2, [r3, #0]
    return (val);
 801a948:	f107 0314 	add.w	r3, r7, #20
 801a94c:	681b      	ldr	r3, [r3, #0]

                    ip_b1 = arm_nn_read_q15x2_ia(&ip_as_col);
 801a94e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                    sum = __SMLAD(ker_a1, ip_b1, sum);
 801a952:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801a956:	681b      	ldr	r3, [r3, #0]
 801a958:	4619      	mov	r1, r3
 801a95a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 801a95e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801a962:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 801a966:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 801a96a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

__STATIC_FORCEINLINE uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801a96e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801a972:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801a976:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 801a97a:	fb23 1302 	smlad	r3, r3, r2, r1
 801a97e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  return(result);
 801a982:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801a986:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801a98a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801a98e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    memcpy(&val, *in_q15, 4);
 801a992:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801a996:	681b      	ldr	r3, [r3, #0]
 801a998:	681b      	ldr	r3, [r3, #0]
 801a99a:	461a      	mov	r2, r3
 801a99c:	f107 0310 	add.w	r3, r7, #16
 801a9a0:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 801a9a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801a9a6:	681b      	ldr	r3, [r3, #0]
 801a9a8:	1d1a      	adds	r2, r3, #4
 801a9aa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801a9ae:	601a      	str	r2, [r3, #0]
    return (val);
 801a9b0:	f107 0310 	add.w	r3, r7, #16
 801a9b4:	681b      	ldr	r3, [r3, #0]
                    ip_b2 = arm_nn_read_q15x2_ia(&ip_as_col);
 801a9b6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
                    sum = __SMLAD(ker_a2, ip_b2, sum);
 801a9ba:	f107 0320 	add.w	r3, r7, #32
 801a9be:	681b      	ldr	r3, [r3, #0]
 801a9c0:	4619      	mov	r1, r3
 801a9c2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801a9c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801a9ca:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 801a9ce:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 801a9d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801a9d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801a9da:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 801a9de:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 801a9e2:	fb23 1302 	smlad	r3, r3, r2, r1
 801a9e6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  return(result);
 801a9ea:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801a9ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

                    col_count--;
 801a9f2:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 801a9f6:	3b01      	subs	r3, #1
 801a9f8:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
                while (col_count)
 801a9fc:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 801aa00:	2b00      	cmp	r3, #0
 801aa02:	f47f af07 	bne.w	801a814 <arm_convolve_s8+0x33e>
                }
                /* Handle left over mac */
                col_count = input_ch * kernel_y * kernel_x & 0x3;
 801aa06:	f8b7 2116 	ldrh.w	r2, [r7, #278]	; 0x116
 801aa0a:	f8b7 3112 	ldrh.w	r3, [r7, #274]	; 0x112
 801aa0e:	fb12 f303 	smulbb	r3, r2, r3
 801aa12:	b29b      	uxth	r3, r3
 801aa14:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 801aa18:	fb12 f303 	smulbb	r3, r2, r3
 801aa1c:	b29b      	uxth	r3, r3
 801aa1e:	f003 0303 	and.w	r3, r3, #3
 801aa22:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
                while (col_count)
 801aa26:	e021      	b.n	801aa6c <arm_convolve_s8+0x596>
                {
                    q7_t ker_a1 = *ker_a++;
 801aa28:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 801aa2c:	1c5a      	adds	r2, r3, #1
 801aa2e:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
 801aa32:	781b      	ldrb	r3, [r3, #0]
 801aa34:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
                    q15_t ip_b1 = *ip_as_col++;
 801aa38:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801aa3c:	681b      	ldr	r3, [r3, #0]
 801aa3e:	1c99      	adds	r1, r3, #2
 801aa40:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801aa44:	6011      	str	r1, [r2, #0]
 801aa46:	881b      	ldrh	r3, [r3, #0]
 801aa48:	f8a7 30e8 	strh.w	r3, [r7, #232]	; 0xe8
                    sum += ker_a1 * ip_b1;
 801aa4c:	f997 30eb 	ldrsb.w	r3, [r7, #235]	; 0xeb
 801aa50:	f9b7 20e8 	ldrsh.w	r2, [r7, #232]	; 0xe8
 801aa54:	fb02 f303 	mul.w	r3, r2, r3
 801aa58:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 801aa5c:	4413      	add	r3, r2
 801aa5e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
                    col_count--;
 801aa62:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 801aa66:	3b01      	subs	r3, #1
 801aa68:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
                while (col_count)
 801aa6c:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 801aa70:	2b00      	cmp	r3, #0
 801aa72:	d1d9      	bne.n	801aa28 <arm_convolve_s8+0x552>
                }

                sum = arm_nn_requantize(sum, output_mult[i], output_shift[i]);
 801aa74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801aa78:	009b      	lsls	r3, r3, #2
 801aa7a:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 801aa7e:	4413      	add	r3, r2
 801aa80:	681a      	ldr	r2, [r3, #0]
 801aa82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801aa86:	009b      	lsls	r3, r3, #2
 801aa88:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 801aa8c:	440b      	add	r3, r1
 801aa8e:	681b      	ldr	r3, [r3, #0]
 801aa90:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 801aa94:	6639      	str	r1, [r7, #96]	; 0x60
 801aa96:	65fa      	str	r2, [r7, #92]	; 0x5c
 801aa98:	65bb      	str	r3, [r7, #88]	; 0x58
 * @return          Returns (val * multiplier)/(2 ^ shift)
 *
 */
__STATIC_FORCEINLINE q31_t arm_nn_requantize(const q31_t val, const q31_t multiplier, const q31_t shift)
{
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801aa9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801aa9c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801aaa0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801aaa2:	fa02 f303 	lsl.w	r3, r2, r3
 801aaa6:	657b      	str	r3, [r7, #84]	; 0x54
 801aaa8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801aaac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801aaae:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801aab0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801aab4:	2200      	movs	r2, #0
 801aab6:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 801aab8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801aabc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801aac0:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 801aac2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801aac6:	2200      	movs	r2, #0
 801aac8:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801aaca:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 801aace:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801aad0:	4618      	mov	r0, r3
 801aad2:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801aad6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801aada:	681b      	ldr	r3, [r3, #0]
 801aadc:	461a      	mov	r2, r3
 801aade:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801aae2:	fb02 fc01 	mul.w	ip, r2, r1
 801aae6:	fb00 f603 	mul.w	r6, r0, r3
 801aaea:	4466      	add	r6, ip
 801aaec:	fba0 2302 	umull	r2, r3, r0, r2
 801aaf0:	18f1      	adds	r1, r6, r3
 801aaf2:	460b      	mov	r3, r1
 801aaf4:	eb14 0802 	adds.w	r8, r4, r2
 801aaf8:	eb45 0903 	adc.w	r9, r5, r3
 801aafc:	e9c7 890a 	strd	r8, r9, [r7, #40]	; 0x28
    result = (int32_t)(mult.long_long >> 31);
 801ab00:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801ab04:	f04f 0200 	mov.w	r2, #0
 801ab08:	f04f 0300 	mov.w	r3, #0
 801ab0c:	0fc2      	lsrs	r2, r0, #31
 801ab0e:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801ab12:	17cb      	asrs	r3, r1, #31
 801ab14:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 801ab18:	4613      	mov	r3, r2
 801ab1a:	600b      	str	r3, [r1, #0]
    return result;
 801ab1c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801ab20:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801ab22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801ab24:	2b00      	cmp	r3, #0
 801ab26:	dc02      	bgt.n	801ab2e <arm_convolve_s8+0x658>
 801ab28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801ab2a:	425b      	negs	r3, r3
 801ab2c:	e000      	b.n	801ab30 <arm_convolve_s8+0x65a>
 801ab2e:	2300      	movs	r3, #0
 801ab30:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801ab34:	6011      	str	r1, [r2, #0]
 801ab36:	f107 0244 	add.w	r2, r7, #68	; 0x44
 801ab3a:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801ab3c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801ab40:	2200      	movs	r2, #0
 801ab42:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801ab44:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801ab48:	2201      	movs	r2, #1
 801ab4a:	681b      	ldr	r3, [r3, #0]
 801ab4c:	409a      	lsls	r2, r3
 801ab4e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801ab52:	3a01      	subs	r2, #1
 801ab54:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 801ab56:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801ab5a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 801ab5e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 801ab62:	6809      	ldr	r1, [r1, #0]
 801ab64:	6812      	ldr	r2, [r2, #0]
 801ab66:	400a      	ands	r2, r1
 801ab68:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 801ab6a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801ab6e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 801ab72:	f107 0244 	add.w	r2, r7, #68	; 0x44
 801ab76:	6809      	ldr	r1, [r1, #0]
 801ab78:	6812      	ldr	r2, [r2, #0]
 801ab7a:	fa41 f202 	asr.w	r2, r1, r2
 801ab7e:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 801ab80:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801ab84:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 801ab88:	6812      	ldr	r2, [r2, #0]
 801ab8a:	1052      	asrs	r2, r2, #1
 801ab8c:	601a      	str	r2, [r3, #0]
    if (result < 0)
 801ab8e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801ab92:	681b      	ldr	r3, [r3, #0]
 801ab94:	2b00      	cmp	r3, #0
 801ab96:	da06      	bge.n	801aba6 <arm_convolve_s8+0x6d0>
        threshold++;
 801ab98:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801ab9c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 801aba0:	6812      	ldr	r2, [r2, #0]
 801aba2:	3201      	adds	r2, #1
 801aba4:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 801aba6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801abaa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801abae:	6812      	ldr	r2, [r2, #0]
 801abb0:	681b      	ldr	r3, [r3, #0]
 801abb2:	429a      	cmp	r2, r3
 801abb4:	dd06      	ble.n	801abc4 <arm_convolve_s8+0x6ee>
        result++;
 801abb6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801abba:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801abbe:	6812      	ldr	r2, [r2, #0]
 801abc0:	3201      	adds	r2, #1
 801abc2:	601a      	str	r2, [r3, #0]
    return result;
 801abc4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801abc8:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801abca:	bf00      	nop
 801abcc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
                sum += out_offset;
 801abd0:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 801abd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801abd8:	4413      	add	r3, r2
 801abda:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
                sum = MAX(sum, out_activation_min);
 801abde:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 801abe2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801abe6:	4293      	cmp	r3, r2
 801abe8:	bfb8      	it	lt
 801abea:	4613      	movlt	r3, r2
 801abec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
                sum = MIN(sum, out_activation_max);
 801abf0:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 801abf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801abf8:	4293      	cmp	r3, r2
 801abfa:	bfa8      	it	ge
 801abfc:	4613      	movge	r3, r2
 801abfe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
                *out++ = (q7_t)sum;
 801ac02:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801ac06:	1c5a      	adds	r2, r3, #1
 801ac08:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 801ac0c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 801ac10:	b252      	sxtb	r2, r2
 801ac12:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < output_ch; i++)
 801ac14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801ac18:	3301      	adds	r3, #1
 801ac1a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801ac1e:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 801ac22:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 801ac26:	429a      	cmp	r2, r3
 801ac28:	f6ff add1 	blt.w	801a7ce <arm_convolve_s8+0x2f8>
                }
            }
        }
#endif
        /* Advance to the next batch */
        input_data += (input_x * input_y * input_ch);
 801ac2c:	f8b7 311a 	ldrh.w	r3, [r7, #282]	; 0x11a
 801ac30:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 801ac34:	fb02 f303 	mul.w	r3, r2, r3
 801ac38:	f8b7 2116 	ldrh.w	r2, [r7, #278]	; 0x116
 801ac3c:	fb02 f303 	mul.w	r3, r2, r3
 801ac40:	461a      	mov	r2, r3
 801ac42:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 801ac46:	4413      	add	r3, r2
 801ac48:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
        output_data += (output_x * output_y * output_ch);
 801ac4c:	f8b7 3110 	ldrh.w	r3, [r7, #272]	; 0x110
 801ac50:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 801ac54:	fb02 f303 	mul.w	r3, r2, r3
 801ac58:	f8b7 210c 	ldrh.w	r2, [r7, #268]	; 0x10c
 801ac5c:	fb02 f303 	mul.w	r3, r2, r3
 801ac60:	461a      	mov	r2, r3
 801ac62:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 801ac66:	4413      	add	r3, r2
 801ac68:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
    for (i_batch = 0; i_batch < input_batches; i_batch++)
 801ac6c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801ac70:	3301      	adds	r3, #1
 801ac72:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 801ac76:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 801ac7a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801ac7e:	429a      	cmp	r2, r3
 801ac80:	f6ff aca8 	blt.w	801a5d4 <arm_convolve_s8+0xfe>
    }

    /* Return to application */
    return ARM_MATH_SUCCESS;
 801ac84:	2300      	movs	r3, #0
}
 801ac86:	4618      	mov	r0, r3
 801ac88:	f507 77aa 	add.w	r7, r7, #340	; 0x154
 801ac8c:	46bd      	mov	sp, r7
 801ac8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801ac92 <arm_convolve_s8_get_buffer_size>:

int32_t arm_convolve_s8_get_buffer_size(const cmsis_nn_dims *input_dims, const cmsis_nn_dims *filter_dims)
{
 801ac92:	b480      	push	{r7}
 801ac94:	b083      	sub	sp, #12
 801ac96:	af00      	add	r7, sp, #0
 801ac98:	6078      	str	r0, [r7, #4]
 801ac9a:	6039      	str	r1, [r7, #0]
#if defined(ARM_MATH_DSP)
    return (2 * input_dims->c * filter_dims->w * filter_dims->h) * (int32_t)sizeof(int16_t);
 801ac9c:	687b      	ldr	r3, [r7, #4]
 801ac9e:	68db      	ldr	r3, [r3, #12]
 801aca0:	683a      	ldr	r2, [r7, #0]
 801aca2:	6892      	ldr	r2, [r2, #8]
 801aca4:	fb02 f303 	mul.w	r3, r2, r3
 801aca8:	683a      	ldr	r2, [r7, #0]
 801acaa:	6852      	ldr	r2, [r2, #4]
 801acac:	fb02 f303 	mul.w	r3, r2, r3
 801acb0:	009b      	lsls	r3, r3, #2
#else
    (void)input_dims;
    (void)filter_dims;
    return 0;
#endif
}
 801acb2:	4618      	mov	r0, r3
 801acb4:	370c      	adds	r7, #12
 801acb6:	46bd      	mov	sp, r7
 801acb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801acbc:	4770      	bx	lr

0801acbe <arm_convolve_wrapper_s8>:
                                   const q7_t *filter_data,
                                   const cmsis_nn_dims *bias_dims,
                                   const int32_t *bias_data,
                                   const cmsis_nn_dims *output_dims,
                                   q7_t *output_data)
{
 801acbe:	b580      	push	{r7, lr}
 801acc0:	b08c      	sub	sp, #48	; 0x30
 801acc2:	af08      	add	r7, sp, #32
 801acc4:	60f8      	str	r0, [r7, #12]
 801acc6:	60b9      	str	r1, [r7, #8]
 801acc8:	607a      	str	r2, [r7, #4]
 801acca:	603b      	str	r3, [r7, #0]
    if ((conv_params->padding.w == 0) && (conv_params->padding.h == 0) && (input_dims->c % 4 == 0) &&
 801accc:	68bb      	ldr	r3, [r7, #8]
 801acce:	691b      	ldr	r3, [r3, #16]
 801acd0:	2b00      	cmp	r3, #0
 801acd2:	d12f      	bne.n	801ad34 <arm_convolve_wrapper_s8+0x76>
 801acd4:	68bb      	ldr	r3, [r7, #8]
 801acd6:	695b      	ldr	r3, [r3, #20]
 801acd8:	2b00      	cmp	r3, #0
 801acda:	d12b      	bne.n	801ad34 <arm_convolve_wrapper_s8+0x76>
 801acdc:	683b      	ldr	r3, [r7, #0]
 801acde:	68db      	ldr	r3, [r3, #12]
 801ace0:	f003 0303 	and.w	r3, r3, #3
 801ace4:	2b00      	cmp	r3, #0
 801ace6:	d125      	bne.n	801ad34 <arm_convolve_wrapper_s8+0x76>
        (conv_params->stride.w == 1) && (conv_params->stride.h == 1) && (filter_dims->w == 1) && (filter_dims->h == 1))
 801ace8:	68bb      	ldr	r3, [r7, #8]
 801acea:	689b      	ldr	r3, [r3, #8]
    if ((conv_params->padding.w == 0) && (conv_params->padding.h == 0) && (input_dims->c % 4 == 0) &&
 801acec:	2b01      	cmp	r3, #1
 801acee:	d121      	bne.n	801ad34 <arm_convolve_wrapper_s8+0x76>
        (conv_params->stride.w == 1) && (conv_params->stride.h == 1) && (filter_dims->w == 1) && (filter_dims->h == 1))
 801acf0:	68bb      	ldr	r3, [r7, #8]
 801acf2:	68db      	ldr	r3, [r3, #12]
 801acf4:	2b01      	cmp	r3, #1
 801acf6:	d11d      	bne.n	801ad34 <arm_convolve_wrapper_s8+0x76>
 801acf8:	69fb      	ldr	r3, [r7, #28]
 801acfa:	689b      	ldr	r3, [r3, #8]
 801acfc:	2b01      	cmp	r3, #1
 801acfe:	d119      	bne.n	801ad34 <arm_convolve_wrapper_s8+0x76>
 801ad00:	69fb      	ldr	r3, [r7, #28]
 801ad02:	685b      	ldr	r3, [r3, #4]
 801ad04:	2b01      	cmp	r3, #1
 801ad06:	d115      	bne.n	801ad34 <arm_convolve_wrapper_s8+0x76>
    {
        return arm_convolve_1x1_s8_fast(ctx,
 801ad08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad0a:	9306      	str	r3, [sp, #24]
 801ad0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ad0e:	9305      	str	r3, [sp, #20]
 801ad10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ad12:	9304      	str	r3, [sp, #16]
 801ad14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad16:	9303      	str	r3, [sp, #12]
 801ad18:	6a3b      	ldr	r3, [r7, #32]
 801ad1a:	9302      	str	r3, [sp, #8]
 801ad1c:	69fb      	ldr	r3, [r7, #28]
 801ad1e:	9301      	str	r3, [sp, #4]
 801ad20:	69bb      	ldr	r3, [r7, #24]
 801ad22:	9300      	str	r3, [sp, #0]
 801ad24:	683b      	ldr	r3, [r7, #0]
 801ad26:	687a      	ldr	r2, [r7, #4]
 801ad28:	68b9      	ldr	r1, [r7, #8]
 801ad2a:	68f8      	ldr	r0, [r7, #12]
 801ad2c:	f7ff fb74 	bl	801a418 <arm_convolve_1x1_s8_fast>
 801ad30:	4603      	mov	r3, r0
 801ad32:	e040      	b.n	801adb6 <arm_convolve_wrapper_s8+0xf8>
                                        bias_dims,
                                        bias_data,
                                        output_dims,
                                        output_data);
    }
    else if ((output_dims->h == 1) && (input_dims->h == 1) && (filter_dims->h == 1) && (output_dims->w % 4 == 0) &&
 801ad34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ad36:	685b      	ldr	r3, [r3, #4]
 801ad38:	2b01      	cmp	r3, #1
 801ad3a:	d127      	bne.n	801ad8c <arm_convolve_wrapper_s8+0xce>
 801ad3c:	683b      	ldr	r3, [r7, #0]
 801ad3e:	685b      	ldr	r3, [r3, #4]
 801ad40:	2b01      	cmp	r3, #1
 801ad42:	d123      	bne.n	801ad8c <arm_convolve_wrapper_s8+0xce>
 801ad44:	69fb      	ldr	r3, [r7, #28]
 801ad46:	685b      	ldr	r3, [r3, #4]
 801ad48:	2b01      	cmp	r3, #1
 801ad4a:	d11f      	bne.n	801ad8c <arm_convolve_wrapper_s8+0xce>
 801ad4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ad4e:	689b      	ldr	r3, [r3, #8]
 801ad50:	f003 0303 	and.w	r3, r3, #3
 801ad54:	2b00      	cmp	r3, #0
 801ad56:	d119      	bne.n	801ad8c <arm_convolve_wrapper_s8+0xce>
             (input_dims->n == 1))
 801ad58:	683b      	ldr	r3, [r7, #0]
 801ad5a:	681b      	ldr	r3, [r3, #0]
    else if ((output_dims->h == 1) && (input_dims->h == 1) && (filter_dims->h == 1) && (output_dims->w % 4 == 0) &&
 801ad5c:	2b01      	cmp	r3, #1
 801ad5e:	d115      	bne.n	801ad8c <arm_convolve_wrapper_s8+0xce>
    {
        return arm_convolve_1_x_n_s8(ctx,
 801ad60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad62:	9306      	str	r3, [sp, #24]
 801ad64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ad66:	9305      	str	r3, [sp, #20]
 801ad68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ad6a:	9304      	str	r3, [sp, #16]
 801ad6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad6e:	9303      	str	r3, [sp, #12]
 801ad70:	6a3b      	ldr	r3, [r7, #32]
 801ad72:	9302      	str	r3, [sp, #8]
 801ad74:	69fb      	ldr	r3, [r7, #28]
 801ad76:	9301      	str	r3, [sp, #4]
 801ad78:	69bb      	ldr	r3, [r7, #24]
 801ad7a:	9300      	str	r3, [sp, #0]
 801ad7c:	683b      	ldr	r3, [r7, #0]
 801ad7e:	687a      	ldr	r2, [r7, #4]
 801ad80:	68b9      	ldr	r1, [r7, #8]
 801ad82:	68f8      	ldr	r0, [r7, #12]
 801ad84:	f7ff fb04 	bl	801a390 <arm_convolve_1_x_n_s8>
 801ad88:	4603      	mov	r3, r0
 801ad8a:	e014      	b.n	801adb6 <arm_convolve_wrapper_s8+0xf8>
                                     output_dims,
                                     output_data);
    }
    else
    {
        return arm_convolve_s8(ctx,
 801ad8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad8e:	9306      	str	r3, [sp, #24]
 801ad90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ad92:	9305      	str	r3, [sp, #20]
 801ad94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ad96:	9304      	str	r3, [sp, #16]
 801ad98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad9a:	9303      	str	r3, [sp, #12]
 801ad9c:	6a3b      	ldr	r3, [r7, #32]
 801ad9e:	9302      	str	r3, [sp, #8]
 801ada0:	69fb      	ldr	r3, [r7, #28]
 801ada2:	9301      	str	r3, [sp, #4]
 801ada4:	69bb      	ldr	r3, [r7, #24]
 801ada6:	9300      	str	r3, [sp, #0]
 801ada8:	683b      	ldr	r3, [r7, #0]
 801adaa:	687a      	ldr	r2, [r7, #4]
 801adac:	68b9      	ldr	r1, [r7, #8]
 801adae:	68f8      	ldr	r0, [r7, #12]
 801adb0:	f7ff fb91 	bl	801a4d6 <arm_convolve_s8>
 801adb4:	4603      	mov	r3, r0
                               bias_dims,
                               bias_data,
                               output_dims,
                               output_data);
    }
}
 801adb6:	4618      	mov	r0, r3
 801adb8:	3710      	adds	r7, #16
 801adba:	46bd      	mov	sp, r7
 801adbc:	bd80      	pop	{r7, pc}

0801adbe <arm_convolve_wrapper_s8_get_buffer_size>:

int32_t arm_convolve_wrapper_s8_get_buffer_size(const cmsis_nn_conv_params *conv_params,
                                                const cmsis_nn_dims *input_dims,
                                                const cmsis_nn_dims *filter_dims,
                                                const cmsis_nn_dims *output_dims)
{
 801adbe:	b580      	push	{r7, lr}
 801adc0:	b084      	sub	sp, #16
 801adc2:	af00      	add	r7, sp, #0
 801adc4:	60f8      	str	r0, [r7, #12]
 801adc6:	60b9      	str	r1, [r7, #8]
 801adc8:	607a      	str	r2, [r7, #4]
 801adca:	603b      	str	r3, [r7, #0]
    if ((conv_params->padding.w == 0) && (conv_params->padding.h == 0) && (input_dims->c % 4 == 0) &&
 801adcc:	68fb      	ldr	r3, [r7, #12]
 801adce:	691b      	ldr	r3, [r3, #16]
 801add0:	2b00      	cmp	r3, #0
 801add2:	d11e      	bne.n	801ae12 <arm_convolve_wrapper_s8_get_buffer_size+0x54>
 801add4:	68fb      	ldr	r3, [r7, #12]
 801add6:	695b      	ldr	r3, [r3, #20]
 801add8:	2b00      	cmp	r3, #0
 801adda:	d11a      	bne.n	801ae12 <arm_convolve_wrapper_s8_get_buffer_size+0x54>
 801addc:	68bb      	ldr	r3, [r7, #8]
 801adde:	68db      	ldr	r3, [r3, #12]
 801ade0:	f003 0303 	and.w	r3, r3, #3
 801ade4:	2b00      	cmp	r3, #0
 801ade6:	d114      	bne.n	801ae12 <arm_convolve_wrapper_s8_get_buffer_size+0x54>
        (conv_params->stride.w == 1) && (conv_params->stride.h == 1) && (filter_dims->w == 1) && (filter_dims->h == 1))
 801ade8:	68fb      	ldr	r3, [r7, #12]
 801adea:	689b      	ldr	r3, [r3, #8]
    if ((conv_params->padding.w == 0) && (conv_params->padding.h == 0) && (input_dims->c % 4 == 0) &&
 801adec:	2b01      	cmp	r3, #1
 801adee:	d110      	bne.n	801ae12 <arm_convolve_wrapper_s8_get_buffer_size+0x54>
        (conv_params->stride.w == 1) && (conv_params->stride.h == 1) && (filter_dims->w == 1) && (filter_dims->h == 1))
 801adf0:	68fb      	ldr	r3, [r7, #12]
 801adf2:	68db      	ldr	r3, [r3, #12]
 801adf4:	2b01      	cmp	r3, #1
 801adf6:	d10c      	bne.n	801ae12 <arm_convolve_wrapper_s8_get_buffer_size+0x54>
 801adf8:	687b      	ldr	r3, [r7, #4]
 801adfa:	689b      	ldr	r3, [r3, #8]
 801adfc:	2b01      	cmp	r3, #1
 801adfe:	d108      	bne.n	801ae12 <arm_convolve_wrapper_s8_get_buffer_size+0x54>
 801ae00:	687b      	ldr	r3, [r7, #4]
 801ae02:	685b      	ldr	r3, [r3, #4]
 801ae04:	2b01      	cmp	r3, #1
 801ae06:	d104      	bne.n	801ae12 <arm_convolve_wrapper_s8_get_buffer_size+0x54>
    {
        return arm_convolve_1x1_s8_fast_get_buffer_size(input_dims);
 801ae08:	68b8      	ldr	r0, [r7, #8]
 801ae0a:	f7ff fb59 	bl	801a4c0 <arm_convolve_1x1_s8_fast_get_buffer_size>
 801ae0e:	4603      	mov	r3, r0
 801ae10:	e020      	b.n	801ae54 <arm_convolve_wrapper_s8_get_buffer_size+0x96>
    }
    else if ((output_dims->h == 1) && (input_dims->h == 1) && (filter_dims->h == 1) && (output_dims->w % 4 == 0) &&
 801ae12:	683b      	ldr	r3, [r7, #0]
 801ae14:	685b      	ldr	r3, [r3, #4]
 801ae16:	2b01      	cmp	r3, #1
 801ae18:	d117      	bne.n	801ae4a <arm_convolve_wrapper_s8_get_buffer_size+0x8c>
 801ae1a:	68bb      	ldr	r3, [r7, #8]
 801ae1c:	685b      	ldr	r3, [r3, #4]
 801ae1e:	2b01      	cmp	r3, #1
 801ae20:	d113      	bne.n	801ae4a <arm_convolve_wrapper_s8_get_buffer_size+0x8c>
 801ae22:	687b      	ldr	r3, [r7, #4]
 801ae24:	685b      	ldr	r3, [r3, #4]
 801ae26:	2b01      	cmp	r3, #1
 801ae28:	d10f      	bne.n	801ae4a <arm_convolve_wrapper_s8_get_buffer_size+0x8c>
 801ae2a:	683b      	ldr	r3, [r7, #0]
 801ae2c:	689b      	ldr	r3, [r3, #8]
 801ae2e:	f003 0303 	and.w	r3, r3, #3
 801ae32:	2b00      	cmp	r3, #0
 801ae34:	d109      	bne.n	801ae4a <arm_convolve_wrapper_s8_get_buffer_size+0x8c>
             (input_dims->n == 1))
 801ae36:	68bb      	ldr	r3, [r7, #8]
 801ae38:	681b      	ldr	r3, [r3, #0]
    else if ((output_dims->h == 1) && (input_dims->h == 1) && (filter_dims->h == 1) && (output_dims->w % 4 == 0) &&
 801ae3a:	2b01      	cmp	r3, #1
 801ae3c:	d105      	bne.n	801ae4a <arm_convolve_wrapper_s8_get_buffer_size+0x8c>
    {
        return arm_convolve_1_x_n_s8_get_buffer_size(input_dims, filter_dims);
 801ae3e:	6879      	ldr	r1, [r7, #4]
 801ae40:	68b8      	ldr	r0, [r7, #8]
 801ae42:	f7ff fad3 	bl	801a3ec <arm_convolve_1_x_n_s8_get_buffer_size>
 801ae46:	4603      	mov	r3, r0
 801ae48:	e004      	b.n	801ae54 <arm_convolve_wrapper_s8_get_buffer_size+0x96>
    }
    else
    {
        return arm_convolve_s8_get_buffer_size(input_dims, filter_dims);
 801ae4a:	6879      	ldr	r1, [r7, #4]
 801ae4c:	68b8      	ldr	r0, [r7, #8]
 801ae4e:	f7ff ff20 	bl	801ac92 <arm_convolve_s8_get_buffer_size>
 801ae52:	4603      	mov	r3, r0
    }
}
 801ae54:	4618      	mov	r0, r3
 801ae56:	3710      	adds	r7, #16
 801ae58:	46bd      	mov	sp, r7
 801ae5a:	bd80      	pop	{r7, pc}

0801ae5c <arm_depthwise_conv_3x3_s8>:
                                     const q7_t *kernel,
                                     const cmsis_nn_dims *bias_dims,
                                     const int32_t *bias,
                                     const cmsis_nn_dims *output_dims,
                                     q7_t *output)
{
 801ae5c:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 801ae60:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
 801ae64:	af00      	add	r7, sp, #0
 801ae66:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 801ae6a:	6020      	str	r0, [r4, #0]
 801ae6c:	f107 0028 	add.w	r0, r7, #40	; 0x28
 801ae70:	6001      	str	r1, [r0, #0]
 801ae72:	f107 0124 	add.w	r1, r7, #36	; 0x24
 801ae76:	600a      	str	r2, [r1, #0]
 801ae78:	f107 0220 	add.w	r2, r7, #32
 801ae7c:	6013      	str	r3, [r2, #0]
    (void)ctx;
    (void)bias_dims;

    const int32_t input_x = input_dims->w;
 801ae7e:	f107 0320 	add.w	r3, r7, #32
 801ae82:	681b      	ldr	r3, [r3, #0]
 801ae84:	689b      	ldr	r3, [r3, #8]
 801ae86:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
    const int32_t input_y = input_dims->h;
 801ae8a:	f107 0320 	add.w	r3, r7, #32
 801ae8e:	681b      	ldr	r3, [r3, #0]
 801ae90:	685b      	ldr	r3, [r3, #4]
 801ae92:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
    const int32_t input_ch = input_dims->c;
 801ae96:	f107 0320 	add.w	r3, r7, #32
 801ae9a:	681b      	ldr	r3, [r3, #0]
 801ae9c:	68db      	ldr	r3, [r3, #12]
 801ae9e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
    const int32_t output_ch = output_dims->c;
 801aea2:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 801aea6:	68db      	ldr	r3, [r3, #12]
 801aea8:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
    const int32_t pad_x = dw_conv_params->padding.w;
 801aeac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801aeb0:	681b      	ldr	r3, [r3, #0]
 801aeb2:	695b      	ldr	r3, [r3, #20]
 801aeb4:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
    const int32_t pad_y = dw_conv_params->padding.h;
 801aeb8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801aebc:	681b      	ldr	r3, [r3, #0]
 801aebe:	699b      	ldr	r3, [r3, #24]
 801aec0:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
    const int32_t stride_x = dw_conv_params->stride.w;
 801aec4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801aec8:	681b      	ldr	r3, [r3, #0]
 801aeca:	68db      	ldr	r3, [r3, #12]
 801aecc:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
    const int32_t stride_y = dw_conv_params->stride.h;
 801aed0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801aed4:	681b      	ldr	r3, [r3, #0]
 801aed6:	691b      	ldr	r3, [r3, #16]
 801aed8:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
    const int32_t *output_shift = quant_params->shift;
 801aedc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801aee0:	681b      	ldr	r3, [r3, #0]
 801aee2:	685b      	ldr	r3, [r3, #4]
 801aee4:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
    const int32_t *output_mult = quant_params->multiplier;
 801aee8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801aeec:	681b      	ldr	r3, [r3, #0]
 801aeee:	681b      	ldr	r3, [r3, #0]
 801aef0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
    const int32_t output_x = output_dims->w;
 801aef4:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 801aef8:	689b      	ldr	r3, [r3, #8]
 801aefa:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
    const int32_t output_y = output_dims->h;
 801aefe:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 801af02:	685b      	ldr	r3, [r3, #4]
 801af04:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
    const int32_t output_offset = dw_conv_params->output_offset;
 801af08:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801af0c:	681b      	ldr	r3, [r3, #0]
 801af0e:	685b      	ldr	r3, [r3, #4]
 801af10:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
    const int32_t input_offset = dw_conv_params->input_offset;
 801af14:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801af18:	681b      	ldr	r3, [r3, #0]
 801af1a:	681b      	ldr	r3, [r3, #0]
 801af1c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
    const int32_t output_activation_min = dw_conv_params->activation.min;
 801af20:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801af24:	681b      	ldr	r3, [r3, #0]
 801af26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801af28:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
    const int32_t output_activation_max = dw_conv_params->activation.max;
 801af2c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801af30:	681b      	ldr	r3, [r3, #0]
 801af32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801af34:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c

    /* Check input constraints input_ch == output_ch */
    if (input_ch != output_ch)
 801af38:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 801af3c:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 801af40:	429a      	cmp	r2, r3
 801af42:	d003      	beq.n	801af4c <arm_depthwise_conv_3x3_s8+0xf0>
    {
        return ARM_MATH_SIZE_MISMATCH;
 801af44:	f06f 0302 	mvn.w	r3, #2
 801af48:	f000 bf70 	b.w	801be2c <arm_depthwise_conv_3x3_s8+0xfd0>
    }
    /* Check input constraints pad_x <= 1 */
    if (pad_x > 1 || filter_dims->w != 3 || filter_dims->h != 3)
 801af4c:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 801af50:	2b01      	cmp	r3, #1
 801af52:	dc09      	bgt.n	801af68 <arm_depthwise_conv_3x3_s8+0x10c>
 801af54:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 801af58:	689b      	ldr	r3, [r3, #8]
 801af5a:	2b03      	cmp	r3, #3
 801af5c:	d104      	bne.n	801af68 <arm_depthwise_conv_3x3_s8+0x10c>
 801af5e:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 801af62:	685b      	ldr	r3, [r3, #4]
 801af64:	2b03      	cmp	r3, #3
 801af66:	d003      	beq.n	801af70 <arm_depthwise_conv_3x3_s8+0x114>
    {
        return ARM_MATH_ARGUMENT_ERROR;
 801af68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801af6c:	f000 bf5e 	b.w	801be2c <arm_depthwise_conv_3x3_s8+0xfd0>
    }

    for (int32_t in_h = -pad_y, out_h = 0, out_idx = 0; out_h < output_y; in_h += stride_y, ++out_h)
 801af70:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 801af74:	425b      	negs	r3, r3
 801af76:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 801af7a:	2300      	movs	r3, #0
 801af7c:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
 801af80:	2300      	movs	r3, #0
 801af82:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 801af86:	f000 bf49 	b.w	801be1c <arm_depthwise_conv_3x3_s8+0xfc0>
    {
        for (int32_t in_w = -pad_x, out_w = 0, ker_h_start = MAX(0, -in_h); out_w < output_x; in_w += stride_x, ++out_w)
 801af8a:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 801af8e:	425b      	negs	r3, r3
 801af90:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 801af94:	2300      	movs	r3, #0
 801af96:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 801af9a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 801af9e:	2b00      	cmp	r3, #0
 801afa0:	dc03      	bgt.n	801afaa <arm_depthwise_conv_3x3_s8+0x14e>
 801afa2:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 801afa6:	425b      	negs	r3, r3
 801afa8:	e000      	b.n	801afac <arm_depthwise_conv_3x3_s8+0x150>
 801afaa:	2300      	movs	r3, #0
 801afac:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 801afb0:	f000 bf21 	b.w	801bdf6 <arm_depthwise_conv_3x3_s8+0xf9a>
        {
            int32_t in_ch = 0;
 801afb4:	2300      	movs	r3, #0
 801afb6:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
            int32_t ker_w_start = MAX(0, -in_w);
 801afba:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 801afbe:	2b00      	cmp	r3, #0
 801afc0:	dc03      	bgt.n	801afca <arm_depthwise_conv_3x3_s8+0x16e>
 801afc2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 801afc6:	425b      	negs	r3, r3
 801afc8:	e000      	b.n	801afcc <arm_depthwise_conv_3x3_s8+0x170>
 801afca:	2300      	movs	r3, #0
 801afcc:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184

            for (; in_ch <= (input_ch - 4); in_ch += 4)
 801afd0:	f000 bd50 	b.w	801ba74 <arm_depthwise_conv_3x3_s8+0xc18>
            {
                int32_t out_buff0 = bias[in_ch + 0];
 801afd4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801afd8:	009b      	lsls	r3, r3, #2
 801afda:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 801afde:	4413      	add	r3, r2
 801afe0:	681b      	ldr	r3, [r3, #0]
 801afe2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
                int32_t out_buff1 = bias[in_ch + 1];
 801afe6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801afea:	3301      	adds	r3, #1
 801afec:	009b      	lsls	r3, r3, #2
 801afee:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 801aff2:	4413      	add	r3, r2
 801aff4:	681b      	ldr	r3, [r3, #0]
 801aff6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
                int32_t out_buff2 = bias[in_ch + 2];
 801affa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801affe:	3302      	adds	r3, #2
 801b000:	009b      	lsls	r3, r3, #2
 801b002:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 801b006:	4413      	add	r3, r2
 801b008:	681b      	ldr	r3, [r3, #0]
 801b00a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
                int32_t out_buff3 = bias[in_ch + 3];
 801b00e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801b012:	3303      	adds	r3, #3
 801b014:	009b      	lsls	r3, r3, #2
 801b016:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 801b01a:	4413      	add	r3, r2
 801b01c:	681b      	ldr	r3, [r3, #0]
 801b01e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8

                const int8_t *input_ptr = input + (in_h + ker_h_start) * (input_ch * input_x) + in_w * input_ch + in_ch;
 801b022:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 801b026:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 801b02a:	4413      	add	r3, r2
 801b02c:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 801b030:	f8d7 11c8 	ldr.w	r1, [r7, #456]	; 0x1c8
 801b034:	fb01 f202 	mul.w	r2, r1, r2
 801b038:	fb02 f303 	mul.w	r3, r2, r3
 801b03c:	4619      	mov	r1, r3
 801b03e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 801b042:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 801b046:	fb02 f303 	mul.w	r3, r2, r3
 801b04a:	18ca      	adds	r2, r1, r3
 801b04c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801b050:	4413      	add	r3, r2
 801b052:	f8d7 2230 	ldr.w	r2, [r7, #560]	; 0x230
 801b056:	4413      	add	r3, r2
 801b058:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
                const int8_t *kernel_ptr = kernel + ker_h_start * (input_ch * 3) + in_ch;
 801b05c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 801b060:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 801b064:	fb02 f203 	mul.w	r2, r2, r3
 801b068:	4613      	mov	r3, r2
 801b06a:	005b      	lsls	r3, r3, #1
 801b06c:	4413      	add	r3, r2
 801b06e:	461a      	mov	r2, r3
 801b070:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801b074:	4413      	add	r3, r2
 801b076:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 801b07a:	4413      	add	r3, r2
 801b07c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0

                for (int32_t ker_h = ker_h_start; ker_h < MIN(3, input_y - in_h); ++ker_h)
 801b080:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 801b084:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 801b088:	e17a      	b.n	801b380 <arm_depthwise_conv_3x3_s8+0x524>
                {
                    int32_t in_val = 0;
 801b08a:	2300      	movs	r3, #0
 801b08c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
                    int32_t ker_val = 0;
 801b090:	2300      	movs	r3, #0
 801b092:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c

                    if (ker_w_start == 0)
 801b096:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 801b09a:	2b00      	cmp	r3, #0
 801b09c:	d169      	bne.n	801b172 <arm_depthwise_conv_3x3_s8+0x316>
 801b09e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 801b0a2:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 801b0a6:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 801b0aa:	681b      	ldr	r3, [r3, #0]
 801b0ac:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801b0ae:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801b0b2:	601a      	str	r2, [r3, #0]
    return (val);
 801b0b4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801b0b8:	681b      	ldr	r3, [r3, #0]
                    {
                        in_val = arm_nn_read_q7x4(input_ptr);
 801b0ba:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 801b0be:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 801b0c2:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 801b0c6:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 801b0ca:	681b      	ldr	r3, [r3, #0]
 801b0cc:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801b0ce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801b0d2:	601a      	str	r2, [r3, #0]
    return (val);
 801b0d4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801b0d8:	681b      	ldr	r3, [r3, #0]
                        ker_val = arm_nn_read_q7x4(kernel_ptr);
 801b0da:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c

                        out_buff0 += ((int8_t)in_val + input_offset) * (int8_t)ker_val;
 801b0de:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 801b0e2:	b25b      	sxtb	r3, r3
 801b0e4:	461a      	mov	r2, r3
 801b0e6:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 801b0ea:	4413      	add	r3, r2
 801b0ec:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 801b0f0:	b252      	sxtb	r2, r2
 801b0f2:	fb02 f303 	mul.w	r3, r2, r3
 801b0f6:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 801b0fa:	4413      	add	r3, r2
 801b0fc:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
                        out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8);
 801b100:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 801b104:	121b      	asrs	r3, r3, #8
 801b106:	b25b      	sxtb	r3, r3
 801b108:	461a      	mov	r2, r3
 801b10a:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 801b10e:	4413      	add	r3, r2
 801b110:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 801b114:	1212      	asrs	r2, r2, #8
 801b116:	b252      	sxtb	r2, r2
 801b118:	fb02 f303 	mul.w	r3, r2, r3
 801b11c:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 801b120:	4413      	add	r3, r2
 801b122:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
                        out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 16);
 801b126:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 801b12a:	141b      	asrs	r3, r3, #16
 801b12c:	b25b      	sxtb	r3, r3
 801b12e:	461a      	mov	r2, r3
 801b130:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 801b134:	4413      	add	r3, r2
 801b136:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 801b13a:	1412      	asrs	r2, r2, #16
 801b13c:	b252      	sxtb	r2, r2
 801b13e:	fb02 f303 	mul.w	r3, r2, r3
 801b142:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 801b146:	4413      	add	r3, r2
 801b148:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
                        out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 24);
 801b14c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 801b150:	161b      	asrs	r3, r3, #24
 801b152:	b25b      	sxtb	r3, r3
 801b154:	461a      	mov	r2, r3
 801b156:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 801b15a:	4413      	add	r3, r2
 801b15c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 801b160:	1612      	asrs	r2, r2, #24
 801b162:	b252      	sxtb	r2, r2
 801b164:	fb02 f303 	mul.w	r3, r2, r3
 801b168:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
 801b16c:	4413      	add	r3, r2
 801b16e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
                    }

                    in_val = arm_nn_read_q7x4(input_ptr + input_ch);
 801b172:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 801b176:	f8d7 21e4 	ldr.w	r2, [r7, #484]	; 0x1e4
 801b17a:	4413      	add	r3, r2
 801b17c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 801b180:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 801b184:	681b      	ldr	r3, [r3, #0]
 801b186:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801b188:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801b18c:	601a      	str	r2, [r3, #0]
    return (val);
 801b18e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801b192:	681b      	ldr	r3, [r3, #0]
 801b194:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
                    ker_val = arm_nn_read_q7x4(kernel_ptr + input_ch);
 801b198:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 801b19c:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 801b1a0:	4413      	add	r3, r2
 801b1a2:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 801b1a6:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 801b1aa:	681b      	ldr	r3, [r3, #0]
 801b1ac:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801b1ae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801b1b2:	601a      	str	r2, [r3, #0]
    return (val);
 801b1b4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801b1b8:	681b      	ldr	r3, [r3, #0]
 801b1ba:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c

                    out_buff0 += ((int8_t)in_val + input_offset) * (int8_t)ker_val;
 801b1be:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 801b1c2:	b25b      	sxtb	r3, r3
 801b1c4:	461a      	mov	r2, r3
 801b1c6:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 801b1ca:	4413      	add	r3, r2
 801b1cc:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 801b1d0:	b252      	sxtb	r2, r2
 801b1d2:	fb02 f303 	mul.w	r3, r2, r3
 801b1d6:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 801b1da:	4413      	add	r3, r2
 801b1dc:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
                    out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8);
 801b1e0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 801b1e4:	121b      	asrs	r3, r3, #8
 801b1e6:	b25b      	sxtb	r3, r3
 801b1e8:	461a      	mov	r2, r3
 801b1ea:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 801b1ee:	4413      	add	r3, r2
 801b1f0:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 801b1f4:	1212      	asrs	r2, r2, #8
 801b1f6:	b252      	sxtb	r2, r2
 801b1f8:	fb02 f303 	mul.w	r3, r2, r3
 801b1fc:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 801b200:	4413      	add	r3, r2
 801b202:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
                    out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 16);
 801b206:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 801b20a:	141b      	asrs	r3, r3, #16
 801b20c:	b25b      	sxtb	r3, r3
 801b20e:	461a      	mov	r2, r3
 801b210:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 801b214:	4413      	add	r3, r2
 801b216:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 801b21a:	1412      	asrs	r2, r2, #16
 801b21c:	b252      	sxtb	r2, r2
 801b21e:	fb02 f303 	mul.w	r3, r2, r3
 801b222:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 801b226:	4413      	add	r3, r2
 801b228:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
                    out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 24);
 801b22c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 801b230:	161b      	asrs	r3, r3, #24
 801b232:	b25b      	sxtb	r3, r3
 801b234:	461a      	mov	r2, r3
 801b236:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 801b23a:	4413      	add	r3, r2
 801b23c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 801b240:	1612      	asrs	r2, r2, #24
 801b242:	b252      	sxtb	r2, r2
 801b244:	fb02 f303 	mul.w	r3, r2, r3
 801b248:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
 801b24c:	4413      	add	r3, r2
 801b24e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8

                    if ((input_x - in_w) >= 3)
 801b252:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 801b256:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 801b25a:	1ad3      	subs	r3, r2, r3
 801b25c:	2b02      	cmp	r3, #2
 801b25e:	dd73      	ble.n	801b348 <arm_depthwise_conv_3x3_s8+0x4ec>
                    {
                        in_val = arm_nn_read_q7x4(input_ptr + (input_ch << 1));
 801b260:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 801b264:	005b      	lsls	r3, r3, #1
 801b266:	461a      	mov	r2, r3
 801b268:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 801b26c:	4413      	add	r3, r2
 801b26e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 801b272:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 801b276:	681b      	ldr	r3, [r3, #0]
 801b278:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801b27a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801b27e:	601a      	str	r2, [r3, #0]
    return (val);
 801b280:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801b284:	681b      	ldr	r3, [r3, #0]
 801b286:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
                        ker_val = arm_nn_read_q7x4(kernel_ptr + (input_ch << 1));
 801b28a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 801b28e:	005b      	lsls	r3, r3, #1
 801b290:	461a      	mov	r2, r3
 801b292:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 801b296:	4413      	add	r3, r2
 801b298:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 801b29c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 801b2a0:	681b      	ldr	r3, [r3, #0]
 801b2a2:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801b2a4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801b2a8:	601a      	str	r2, [r3, #0]
    return (val);
 801b2aa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801b2ae:	681b      	ldr	r3, [r3, #0]
 801b2b0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c

                        out_buff0 += ((int8_t)in_val + input_offset) * (int8_t)ker_val;
 801b2b4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 801b2b8:	b25b      	sxtb	r3, r3
 801b2ba:	461a      	mov	r2, r3
 801b2bc:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 801b2c0:	4413      	add	r3, r2
 801b2c2:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 801b2c6:	b252      	sxtb	r2, r2
 801b2c8:	fb02 f303 	mul.w	r3, r2, r3
 801b2cc:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 801b2d0:	4413      	add	r3, r2
 801b2d2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
                        out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8);
 801b2d6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 801b2da:	121b      	asrs	r3, r3, #8
 801b2dc:	b25b      	sxtb	r3, r3
 801b2de:	461a      	mov	r2, r3
 801b2e0:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 801b2e4:	4413      	add	r3, r2
 801b2e6:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 801b2ea:	1212      	asrs	r2, r2, #8
 801b2ec:	b252      	sxtb	r2, r2
 801b2ee:	fb02 f303 	mul.w	r3, r2, r3
 801b2f2:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 801b2f6:	4413      	add	r3, r2
 801b2f8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
                        out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 16);
 801b2fc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 801b300:	141b      	asrs	r3, r3, #16
 801b302:	b25b      	sxtb	r3, r3
 801b304:	461a      	mov	r2, r3
 801b306:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 801b30a:	4413      	add	r3, r2
 801b30c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 801b310:	1412      	asrs	r2, r2, #16
 801b312:	b252      	sxtb	r2, r2
 801b314:	fb02 f303 	mul.w	r3, r2, r3
 801b318:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 801b31c:	4413      	add	r3, r2
 801b31e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
                        out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 24);
 801b322:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 801b326:	161b      	asrs	r3, r3, #24
 801b328:	b25b      	sxtb	r3, r3
 801b32a:	461a      	mov	r2, r3
 801b32c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 801b330:	4413      	add	r3, r2
 801b332:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 801b336:	1612      	asrs	r2, r2, #24
 801b338:	b252      	sxtb	r2, r2
 801b33a:	fb02 f303 	mul.w	r3, r2, r3
 801b33e:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
 801b342:	4413      	add	r3, r2
 801b344:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
                    }

                    input_ptr += (input_ch * input_x);
 801b348:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 801b34c:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 801b350:	fb02 f303 	mul.w	r3, r2, r3
 801b354:	461a      	mov	r2, r3
 801b356:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 801b35a:	4413      	add	r3, r2
 801b35c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
                    kernel_ptr += (input_ch * 3);
 801b360:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 801b364:	4613      	mov	r3, r2
 801b366:	005b      	lsls	r3, r3, #1
 801b368:	4413      	add	r3, r2
 801b36a:	461a      	mov	r2, r3
 801b36c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 801b370:	4413      	add	r3, r2
 801b372:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
                for (int32_t ker_h = ker_h_start; ker_h < MIN(3, input_y - in_h); ++ker_h)
 801b376:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 801b37a:	3301      	adds	r3, #1
 801b37c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 801b380:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 801b384:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 801b388:	1ad3      	subs	r3, r2, r3
 801b38a:	2b03      	cmp	r3, #3
 801b38c:	bfa8      	it	ge
 801b38e:	2303      	movge	r3, #3
 801b390:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 801b394:	429a      	cmp	r2, r3
 801b396:	f6ff ae78 	blt.w	801b08a <arm_depthwise_conv_3x3_s8+0x22e>
                }

                out_buff0 = arm_nn_requantize(out_buff0, output_mult[in_ch + 0], output_shift[in_ch + 0]);
 801b39a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801b39e:	009b      	lsls	r3, r3, #2
 801b3a0:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 801b3a4:	4413      	add	r3, r2
 801b3a6:	6819      	ldr	r1, [r3, #0]
 801b3a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801b3ac:	009b      	lsls	r3, r3, #2
 801b3ae:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 801b3b2:	4413      	add	r3, r2
 801b3b4:	681a      	ldr	r2, [r3, #0]
 801b3b6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801b3ba:	f8d7 01f4 	ldr.w	r0, [r7, #500]	; 0x1f4
 801b3be:	6018      	str	r0, [r3, #0]
 801b3c0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801b3c4:	6019      	str	r1, [r3, #0]
 801b3c6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801b3ca:	601a      	str	r2, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801b3cc:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801b3d0:	681b      	ldr	r3, [r3, #0]
 801b3d2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b3d6:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 801b3da:	6812      	ldr	r2, [r2, #0]
 801b3dc:	409a      	lsls	r2, r3
 801b3de:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 801b3e2:	601a      	str	r2, [r3, #0]
 801b3e4:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801b3e8:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 801b3ec:	6812      	ldr	r2, [r2, #0]
 801b3ee:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801b3f0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801b3f4:	2200      	movs	r2, #0
 801b3f6:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 801b3f8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801b3fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801b400:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 801b402:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801b406:	2200      	movs	r2, #0
 801b408:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801b40a:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 801b40e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 801b412:	681b      	ldr	r3, [r3, #0]
 801b414:	4618      	mov	r0, r3
 801b416:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801b41a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801b41e:	681b      	ldr	r3, [r3, #0]
 801b420:	461a      	mov	r2, r3
 801b422:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801b426:	fb02 f501 	mul.w	r5, r2, r1
 801b42a:	fb00 f403 	mul.w	r4, r0, r3
 801b42e:	442c      	add	r4, r5
 801b430:	fba0 2302 	umull	r2, r3, r0, r2
 801b434:	18e1      	adds	r1, r4, r3
 801b436:	460b      	mov	r3, r1
 801b438:	eb18 0102 	adds.w	r1, r8, r2
 801b43c:	60b9      	str	r1, [r7, #8]
 801b43e:	eb49 0303 	adc.w	r3, r9, r3
 801b442:	60fb      	str	r3, [r7, #12]
 801b444:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 801b448:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
    result = (int32_t)(mult.long_long >> 31);
 801b44c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 801b450:	f04f 0200 	mov.w	r2, #0
 801b454:	f04f 0300 	mov.w	r3, #0
 801b458:	0fc2      	lsrs	r2, r0, #31
 801b45a:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801b45e:	17cb      	asrs	r3, r1, #31
 801b460:	f107 01bc 	add.w	r1, r7, #188	; 0xbc
 801b464:	4613      	mov	r3, r2
 801b466:	600b      	str	r3, [r1, #0]
    return result;
 801b468:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801b46c:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801b46e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801b472:	681b      	ldr	r3, [r3, #0]
 801b474:	2b00      	cmp	r3, #0
 801b476:	dc04      	bgt.n	801b482 <arm_depthwise_conv_3x3_s8+0x626>
 801b478:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801b47c:	681b      	ldr	r3, [r3, #0]
 801b47e:	425b      	negs	r3, r3
 801b480:	e000      	b.n	801b484 <arm_depthwise_conv_3x3_s8+0x628>
 801b482:	2300      	movs	r3, #0
 801b484:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 801b488:	6011      	str	r1, [r2, #0]
 801b48a:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 801b48e:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801b490:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801b494:	2200      	movs	r2, #0
 801b496:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801b498:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 801b49c:	2201      	movs	r2, #1
 801b49e:	681b      	ldr	r3, [r3, #0]
 801b4a0:	409a      	lsls	r2, r3
 801b4a2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 801b4a6:	3a01      	subs	r2, #1
 801b4a8:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 801b4aa:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801b4ae:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 801b4b2:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 801b4b6:	6809      	ldr	r1, [r1, #0]
 801b4b8:	6812      	ldr	r2, [r2, #0]
 801b4ba:	400a      	ands	r2, r1
 801b4bc:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 801b4be:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801b4c2:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 801b4c6:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 801b4ca:	6809      	ldr	r1, [r1, #0]
 801b4cc:	6812      	ldr	r2, [r2, #0]
 801b4ce:	fa41 f202 	asr.w	r2, r1, r2
 801b4d2:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 801b4d4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801b4d8:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 801b4dc:	6812      	ldr	r2, [r2, #0]
 801b4de:	1052      	asrs	r2, r2, #1
 801b4e0:	601a      	str	r2, [r3, #0]
    if (result < 0)
 801b4e2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801b4e6:	681b      	ldr	r3, [r3, #0]
 801b4e8:	2b00      	cmp	r3, #0
 801b4ea:	da06      	bge.n	801b4fa <arm_depthwise_conv_3x3_s8+0x69e>
        threshold++;
 801b4ec:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801b4f0:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 801b4f4:	6812      	ldr	r2, [r2, #0]
 801b4f6:	3201      	adds	r2, #1
 801b4f8:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 801b4fa:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 801b4fe:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801b502:	6812      	ldr	r2, [r2, #0]
 801b504:	681b      	ldr	r3, [r3, #0]
 801b506:	429a      	cmp	r2, r3
 801b508:	dd06      	ble.n	801b518 <arm_depthwise_conv_3x3_s8+0x6bc>
        result++;
 801b50a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801b50e:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 801b512:	6812      	ldr	r2, [r2, #0]
 801b514:	3201      	adds	r2, #1
 801b516:	601a      	str	r2, [r3, #0]
    return result;
 801b518:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801b51c:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801b51e:	bf00      	nop
 801b520:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
                out_buff1 = arm_nn_requantize(out_buff1, output_mult[in_ch + 1], output_shift[in_ch + 1]);
 801b524:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801b528:	3301      	adds	r3, #1
 801b52a:	009b      	lsls	r3, r3, #2
 801b52c:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 801b530:	4413      	add	r3, r2
 801b532:	6819      	ldr	r1, [r3, #0]
 801b534:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801b538:	3301      	adds	r3, #1
 801b53a:	009b      	lsls	r3, r3, #2
 801b53c:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 801b540:	4413      	add	r3, r2
 801b542:	681a      	ldr	r2, [r3, #0]
 801b544:	f507 7380 	add.w	r3, r7, #256	; 0x100
 801b548:	f8d7 01f0 	ldr.w	r0, [r7, #496]	; 0x1f0
 801b54c:	6018      	str	r0, [r3, #0]
 801b54e:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 801b552:	6019      	str	r1, [r3, #0]
 801b554:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801b558:	601a      	str	r2, [r3, #0]
 801b55a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801b55e:	681b      	ldr	r3, [r3, #0]
 801b560:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b564:	f507 7280 	add.w	r2, r7, #256	; 0x100
 801b568:	6812      	ldr	r2, [r2, #0]
 801b56a:	409a      	lsls	r2, r3
 801b56c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 801b570:	601a      	str	r2, [r3, #0]
 801b572:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801b576:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 801b57a:	6812      	ldr	r2, [r2, #0]
 801b57c:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801b57e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 801b582:	2200      	movs	r2, #0
 801b584:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 801b586:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801b58a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801b58e:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 801b590:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801b594:	2200      	movs	r2, #0
 801b596:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801b598:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 801b59c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 801b5a0:	681b      	ldr	r3, [r3, #0]
 801b5a2:	4618      	mov	r0, r3
 801b5a4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801b5a8:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801b5ac:	681b      	ldr	r3, [r3, #0]
 801b5ae:	461a      	mov	r2, r3
 801b5b0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801b5b4:	fb02 f501 	mul.w	r5, r2, r1
 801b5b8:	fb00 f403 	mul.w	r4, r0, r3
 801b5bc:	442c      	add	r4, r5
 801b5be:	fba0 2302 	umull	r2, r3, r0, r2
 801b5c2:	18e1      	adds	r1, r4, r3
 801b5c4:	460b      	mov	r3, r1
 801b5c6:	eb18 0102 	adds.w	r1, r8, r2
 801b5ca:	6139      	str	r1, [r7, #16]
 801b5cc:	eb49 0303 	adc.w	r3, r9, r3
 801b5d0:	617b      	str	r3, [r7, #20]
 801b5d2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 801b5d6:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
    result = (int32_t)(mult.long_long >> 31);
 801b5da:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 801b5de:	f04f 0200 	mov.w	r2, #0
 801b5e2:	f04f 0300 	mov.w	r3, #0
 801b5e6:	0fc2      	lsrs	r2, r0, #31
 801b5e8:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801b5ec:	17cb      	asrs	r3, r1, #31
 801b5ee:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 801b5f2:	4613      	mov	r3, r2
 801b5f4:	600b      	str	r3, [r1, #0]
    return result;
 801b5f6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 801b5fa:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801b5fc:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801b600:	681b      	ldr	r3, [r3, #0]
 801b602:	2b00      	cmp	r3, #0
 801b604:	dc04      	bgt.n	801b610 <arm_depthwise_conv_3x3_s8+0x7b4>
 801b606:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801b60a:	681b      	ldr	r3, [r3, #0]
 801b60c:	425b      	negs	r3, r3
 801b60e:	e000      	b.n	801b612 <arm_depthwise_conv_3x3_s8+0x7b6>
 801b610:	2300      	movs	r3, #0
 801b612:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 801b616:	6011      	str	r1, [r2, #0]
 801b618:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 801b61c:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801b61e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801b622:	2200      	movs	r2, #0
 801b624:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801b626:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 801b62a:	2201      	movs	r2, #1
 801b62c:	681b      	ldr	r3, [r3, #0]
 801b62e:	409a      	lsls	r2, r3
 801b630:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 801b634:	3a01      	subs	r2, #1
 801b636:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 801b638:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801b63c:	f107 01e8 	add.w	r1, r7, #232	; 0xe8
 801b640:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 801b644:	6809      	ldr	r1, [r1, #0]
 801b646:	6812      	ldr	r2, [r2, #0]
 801b648:	400a      	ands	r2, r1
 801b64a:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 801b64c:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801b650:	f107 01e8 	add.w	r1, r7, #232	; 0xe8
 801b654:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 801b658:	6809      	ldr	r1, [r1, #0]
 801b65a:	6812      	ldr	r2, [r2, #0]
 801b65c:	fa41 f202 	asr.w	r2, r1, r2
 801b660:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 801b662:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 801b666:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 801b66a:	6812      	ldr	r2, [r2, #0]
 801b66c:	1052      	asrs	r2, r2, #1
 801b66e:	601a      	str	r2, [r3, #0]
    if (result < 0)
 801b670:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801b674:	681b      	ldr	r3, [r3, #0]
 801b676:	2b00      	cmp	r3, #0
 801b678:	da06      	bge.n	801b688 <arm_depthwise_conv_3x3_s8+0x82c>
        threshold++;
 801b67a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 801b67e:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 801b682:	6812      	ldr	r2, [r2, #0]
 801b684:	3201      	adds	r2, #1
 801b686:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 801b688:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 801b68c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 801b690:	6812      	ldr	r2, [r2, #0]
 801b692:	681b      	ldr	r3, [r3, #0]
 801b694:	429a      	cmp	r2, r3
 801b696:	dd06      	ble.n	801b6a6 <arm_depthwise_conv_3x3_s8+0x84a>
        result++;
 801b698:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801b69c:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 801b6a0:	6812      	ldr	r2, [r2, #0]
 801b6a2:	3201      	adds	r2, #1
 801b6a4:	601a      	str	r2, [r3, #0]
    return result;
 801b6a6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801b6aa:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801b6ac:	bf00      	nop
 801b6ae:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
                out_buff2 = arm_nn_requantize(out_buff2, output_mult[in_ch + 2], output_shift[in_ch + 2]);
 801b6b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801b6b6:	3302      	adds	r3, #2
 801b6b8:	009b      	lsls	r3, r3, #2
 801b6ba:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 801b6be:	4413      	add	r3, r2
 801b6c0:	681a      	ldr	r2, [r3, #0]
 801b6c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801b6c6:	3302      	adds	r3, #2
 801b6c8:	009b      	lsls	r3, r3, #2
 801b6ca:	f8d7 11a8 	ldr.w	r1, [r7, #424]	; 0x1a8
 801b6ce:	440b      	add	r3, r1
 801b6d0:	681b      	ldr	r3, [r3, #0]
 801b6d2:	f8d7 11ec 	ldr.w	r1, [r7, #492]	; 0x1ec
 801b6d6:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 801b6da:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 801b6de:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801b6e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801b6e6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b6ea:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 801b6ee:	fa02 f303 	lsl.w	r3, r2, r3
 801b6f2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 801b6f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801b6fa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    q31_t result = 0;
 801b6fe:	2300      	movs	r3, #0
 801b700:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    mult.word.low = 1 << 30;
 801b704:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801b708:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801b70c:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 801b70e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801b712:	2200      	movs	r2, #0
 801b714:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801b716:	e9d7 8916 	ldrd	r8, r9, [r7, #88]	; 0x58
 801b71a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801b71e:	4618      	mov	r0, r3
 801b720:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801b724:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801b728:	461a      	mov	r2, r3
 801b72a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801b72e:	fb02 f501 	mul.w	r5, r2, r1
 801b732:	fb00 f403 	mul.w	r4, r0, r3
 801b736:	442c      	add	r4, r5
 801b738:	fba0 2302 	umull	r2, r3, r0, r2
 801b73c:	18e1      	adds	r1, r4, r3
 801b73e:	460b      	mov	r3, r1
 801b740:	eb18 0102 	adds.w	r1, r8, r2
 801b744:	61b9      	str	r1, [r7, #24]
 801b746:	eb49 0303 	adc.w	r3, r9, r3
 801b74a:	61fb      	str	r3, [r7, #28]
 801b74c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 801b750:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
    result = (int32_t)(mult.long_long >> 31);
 801b754:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 801b758:	f04f 0200 	mov.w	r2, #0
 801b75c:	f04f 0300 	mov.w	r3, #0
 801b760:	0fc2      	lsrs	r2, r0, #31
 801b762:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801b766:	17cb      	asrs	r3, r1, #31
 801b768:	4613      	mov	r3, r2
 801b76a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    return result;
 801b76e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801b772:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801b776:	2b00      	cmp	r3, #0
 801b778:	dc03      	bgt.n	801b782 <arm_depthwise_conv_3x3_s8+0x926>
 801b77a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801b77e:	425b      	negs	r3, r3
 801b780:	e000      	b.n	801b784 <arm_depthwise_conv_3x3_s8+0x928>
 801b782:	2300      	movs	r3, #0
 801b784:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 801b788:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    q31_t result = 0;
 801b78c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801b790:	2200      	movs	r2, #0
 801b792:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801b794:	2201      	movs	r2, #1
 801b796:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b79a:	409a      	lsls	r2, r3
 801b79c:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 801b7a0:	3a01      	subs	r2, #1
 801b7a2:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 801b7a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801b7a8:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 801b7ac:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 801b7b0:	6812      	ldr	r2, [r2, #0]
 801b7b2:	400a      	ands	r2, r1
 801b7b4:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 801b7b6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801b7ba:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 801b7be:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801b7c2:	fa41 f202 	asr.w	r2, r1, r2
 801b7c6:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 801b7c8:	f507 7382 	add.w	r3, r7, #260	; 0x104
 801b7cc:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 801b7d0:	6812      	ldr	r2, [r2, #0]
 801b7d2:	1052      	asrs	r2, r2, #1
 801b7d4:	601a      	str	r2, [r3, #0]
    if (result < 0)
 801b7d6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801b7da:	681b      	ldr	r3, [r3, #0]
 801b7dc:	2b00      	cmp	r3, #0
 801b7de:	da06      	bge.n	801b7ee <arm_depthwise_conv_3x3_s8+0x992>
        threshold++;
 801b7e0:	f507 7382 	add.w	r3, r7, #260	; 0x104
 801b7e4:	f507 7282 	add.w	r2, r7, #260	; 0x104
 801b7e8:	6812      	ldr	r2, [r2, #0]
 801b7ea:	3201      	adds	r2, #1
 801b7ec:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 801b7ee:	f507 7284 	add.w	r2, r7, #264	; 0x108
 801b7f2:	f507 7382 	add.w	r3, r7, #260	; 0x104
 801b7f6:	6812      	ldr	r2, [r2, #0]
 801b7f8:	681b      	ldr	r3, [r3, #0]
 801b7fa:	429a      	cmp	r2, r3
 801b7fc:	dd06      	ble.n	801b80c <arm_depthwise_conv_3x3_s8+0x9b0>
        result++;
 801b7fe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801b802:	f507 7288 	add.w	r2, r7, #272	; 0x110
 801b806:	6812      	ldr	r2, [r2, #0]
 801b808:	3201      	adds	r2, #1
 801b80a:	601a      	str	r2, [r3, #0]
    return result;
 801b80c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801b810:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801b812:	bf00      	nop
 801b814:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
                out_buff3 = arm_nn_requantize(out_buff3, output_mult[in_ch + 3], output_shift[in_ch + 3]);
 801b818:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801b81c:	3303      	adds	r3, #3
 801b81e:	009b      	lsls	r3, r3, #2
 801b820:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 801b824:	4413      	add	r3, r2
 801b826:	681a      	ldr	r2, [r3, #0]
 801b828:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801b82c:	3303      	adds	r3, #3
 801b82e:	009b      	lsls	r3, r3, #2
 801b830:	f8d7 11a8 	ldr.w	r1, [r7, #424]	; 0x1a8
 801b834:	440b      	add	r3, r1
 801b836:	681b      	ldr	r3, [r3, #0]
 801b838:	f8d7 11e8 	ldr.w	r1, [r7, #488]	; 0x1e8
 801b83c:	f8c7 1160 	str.w	r1, [r7, #352]	; 0x160
 801b840:	f8c7 215c 	str.w	r2, [r7, #348]	; 0x15c
 801b844:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 801b848:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 801b84c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b850:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 801b854:	fa02 f303 	lsl.w	r3, r2, r3
 801b858:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 801b85c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 801b860:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
    q31_t result = 0;
 801b864:	2300      	movs	r3, #0
 801b866:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    mult.word.low = 1 << 30;
 801b86a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801b86e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801b872:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 801b874:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801b878:	2200      	movs	r2, #0
 801b87a:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801b87c:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 801b880:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 801b884:	4618      	mov	r0, r3
 801b886:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801b88a:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 801b88e:	461a      	mov	r2, r3
 801b890:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801b894:	fb02 f501 	mul.w	r5, r2, r1
 801b898:	fb00 f403 	mul.w	r4, r0, r3
 801b89c:	442c      	add	r4, r5
 801b89e:	fba0 2302 	umull	r2, r3, r0, r2
 801b8a2:	18e1      	adds	r1, r4, r3
 801b8a4:	460b      	mov	r3, r1
 801b8a6:	eb18 0a02 	adds.w	sl, r8, r2
 801b8aa:	eb49 0b03 	adc.w	fp, r9, r3
 801b8ae:	e9c7 ab14 	strd	sl, fp, [r7, #80]	; 0x50
    result = (int32_t)(mult.long_long >> 31);
 801b8b2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 801b8b6:	f04f 0200 	mov.w	r2, #0
 801b8ba:	f04f 0300 	mov.w	r3, #0
 801b8be:	0fc2      	lsrs	r2, r0, #31
 801b8c0:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801b8c4:	17cb      	asrs	r3, r1, #31
 801b8c6:	4613      	mov	r3, r2
 801b8c8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    return result;
 801b8cc:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801b8d0:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 801b8d4:	2b00      	cmp	r3, #0
 801b8d6:	dc03      	bgt.n	801b8e0 <arm_depthwise_conv_3x3_s8+0xa84>
 801b8d8:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 801b8dc:	425b      	negs	r3, r3
 801b8de:	e000      	b.n	801b8e2 <arm_depthwise_conv_3x3_s8+0xa86>
 801b8e0:	2300      	movs	r3, #0
 801b8e2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 801b8e6:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    q31_t result = 0;
 801b8ea:	2300      	movs	r3, #0
 801b8ec:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    const q31_t remainder_mask = (1 << exponent) - 1;
 801b8f0:	2201      	movs	r2, #1
 801b8f2:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 801b8f6:	fa02 f303 	lsl.w	r3, r2, r3
 801b8fa:	3b01      	subs	r3, #1
 801b8fc:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    int32_t remainder = remainder_mask & dividend;
 801b900:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 801b904:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801b908:	4013      	ands	r3, r2
 801b90a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    result = dividend >> exponent;
 801b90e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 801b912:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 801b916:	fa42 f303 	asr.w	r3, r2, r3
 801b91a:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    q31_t threshold = remainder_mask >> 1;
 801b91e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801b922:	105b      	asrs	r3, r3, #1
 801b924:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    if (result < 0)
 801b928:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 801b92c:	2b00      	cmp	r3, #0
 801b92e:	da04      	bge.n	801b93a <arm_depthwise_conv_3x3_s8+0xade>
        threshold++;
 801b930:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801b934:	3301      	adds	r3, #1
 801b936:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    if (remainder > threshold)
 801b93a:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 801b93e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801b942:	429a      	cmp	r2, r3
 801b944:	dd04      	ble.n	801b950 <arm_depthwise_conv_3x3_s8+0xaf4>
        result++;
 801b946:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 801b94a:	3301      	adds	r3, #1
 801b94c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    return result;
 801b950:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801b954:	bf00      	nop
 801b956:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8

                out_buff0 += output_offset;
 801b95a:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 801b95e:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 801b962:	4413      	add	r3, r2
 801b964:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
                out_buff1 += output_offset;
 801b968:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 801b96c:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 801b970:	4413      	add	r3, r2
 801b972:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
                out_buff2 += output_offset;
 801b976:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 801b97a:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 801b97e:	4413      	add	r3, r2
 801b980:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
                out_buff3 += output_offset;
 801b984:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
 801b988:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 801b98c:	4413      	add	r3, r2
 801b98e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8

                out_buff0 = MIN(MAX(out_buff0, output_activation_min), output_activation_max);
 801b992:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 801b996:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 801b99a:	4293      	cmp	r3, r2
 801b99c:	bfb8      	it	lt
 801b99e:	4613      	movlt	r3, r2
 801b9a0:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 801b9a4:	4293      	cmp	r3, r2
 801b9a6:	bfa8      	it	ge
 801b9a8:	4613      	movge	r3, r2
 801b9aa:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
                out_buff1 = MIN(MAX(out_buff1, output_activation_min), output_activation_max);
 801b9ae:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 801b9b2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801b9b6:	4293      	cmp	r3, r2
 801b9b8:	bfb8      	it	lt
 801b9ba:	4613      	movlt	r3, r2
 801b9bc:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 801b9c0:	4293      	cmp	r3, r2
 801b9c2:	bfa8      	it	ge
 801b9c4:	4613      	movge	r3, r2
 801b9c6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
                out_buff2 = MIN(MAX(out_buff2, output_activation_min), output_activation_max);
 801b9ca:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 801b9ce:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801b9d2:	4293      	cmp	r3, r2
 801b9d4:	bfb8      	it	lt
 801b9d6:	4613      	movlt	r3, r2
 801b9d8:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 801b9dc:	4293      	cmp	r3, r2
 801b9de:	bfa8      	it	ge
 801b9e0:	4613      	movge	r3, r2
 801b9e2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
                out_buff3 = MIN(MAX(out_buff3, output_activation_min), output_activation_max);
 801b9e6:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 801b9ea:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 801b9ee:	4293      	cmp	r3, r2
 801b9f0:	bfb8      	it	lt
 801b9f2:	4613      	movlt	r3, r2
 801b9f4:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 801b9f8:	4293      	cmp	r3, r2
 801b9fa:	bfa8      	it	ge
 801b9fc:	4613      	movge	r3, r2
 801b9fe:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8

                output[out_idx++] = (int8_t)out_buff0;
 801ba02:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 801ba06:	1c5a      	adds	r2, r3, #1
 801ba08:	f8c7 2204 	str.w	r2, [r7, #516]	; 0x204
 801ba0c:	461a      	mov	r2, r3
 801ba0e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 801ba12:	4413      	add	r3, r2
 801ba14:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 801ba18:	b252      	sxtb	r2, r2
 801ba1a:	701a      	strb	r2, [r3, #0]
                output[out_idx++] = (int8_t)out_buff1;
 801ba1c:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 801ba20:	1c5a      	adds	r2, r3, #1
 801ba22:	f8c7 2204 	str.w	r2, [r7, #516]	; 0x204
 801ba26:	461a      	mov	r2, r3
 801ba28:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 801ba2c:	4413      	add	r3, r2
 801ba2e:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 801ba32:	b252      	sxtb	r2, r2
 801ba34:	701a      	strb	r2, [r3, #0]
                output[out_idx++] = (int8_t)out_buff2;
 801ba36:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 801ba3a:	1c5a      	adds	r2, r3, #1
 801ba3c:	f8c7 2204 	str.w	r2, [r7, #516]	; 0x204
 801ba40:	461a      	mov	r2, r3
 801ba42:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 801ba46:	4413      	add	r3, r2
 801ba48:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 801ba4c:	b252      	sxtb	r2, r2
 801ba4e:	701a      	strb	r2, [r3, #0]
                output[out_idx++] = (int8_t)out_buff3;
 801ba50:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 801ba54:	1c5a      	adds	r2, r3, #1
 801ba56:	f8c7 2204 	str.w	r2, [r7, #516]	; 0x204
 801ba5a:	461a      	mov	r2, r3
 801ba5c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 801ba60:	4413      	add	r3, r2
 801ba62:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
 801ba66:	b252      	sxtb	r2, r2
 801ba68:	701a      	strb	r2, [r3, #0]
            for (; in_ch <= (input_ch - 4); in_ch += 4)
 801ba6a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801ba6e:	3304      	adds	r3, #4
 801ba70:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 801ba74:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 801ba78:	3b03      	subs	r3, #3
 801ba7a:	f8d7 21f8 	ldr.w	r2, [r7, #504]	; 0x1f8
 801ba7e:	429a      	cmp	r2, r3
 801ba80:	f6ff aaa8 	blt.w	801afd4 <arm_depthwise_conv_3x3_s8+0x178>
            }

            // Leftover
            for (; in_ch < input_ch; ++in_ch)
 801ba84:	e1a4      	b.n	801bdd0 <arm_depthwise_conv_3x3_s8+0xf74>
            {
                int32_t out_buff = bias[in_ch];
 801ba86:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801ba8a:	009b      	lsls	r3, r3, #2
 801ba8c:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 801ba90:	4413      	add	r3, r2
 801ba92:	681b      	ldr	r3, [r3, #0]
 801ba94:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8

                const int8_t *input_ptr = input + (in_h + ker_h_start) * (input_ch * input_x) + in_w * input_ch + in_ch;
 801ba98:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 801ba9c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 801baa0:	4413      	add	r3, r2
 801baa2:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 801baa6:	f8d7 11c8 	ldr.w	r1, [r7, #456]	; 0x1c8
 801baaa:	fb01 f202 	mul.w	r2, r1, r2
 801baae:	fb02 f303 	mul.w	r3, r2, r3
 801bab2:	4619      	mov	r1, r3
 801bab4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 801bab8:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 801babc:	fb02 f303 	mul.w	r3, r2, r3
 801bac0:	18ca      	adds	r2, r1, r3
 801bac2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801bac6:	4413      	add	r3, r2
 801bac8:	f8d7 2230 	ldr.w	r2, [r7, #560]	; 0x230
 801bacc:	4413      	add	r3, r2
 801bace:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
                const int8_t *kernel_ptr = kernel + ker_h_start * (input_ch * 3) + in_ch;
 801bad2:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 801bad6:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 801bada:	fb02 f203 	mul.w	r2, r2, r3
 801bade:	4613      	mov	r3, r2
 801bae0:	005b      	lsls	r3, r3, #1
 801bae2:	4413      	add	r3, r2
 801bae4:	461a      	mov	r2, r3
 801bae6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801baea:	4413      	add	r3, r2
 801baec:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 801baf0:	4413      	add	r3, r2
 801baf2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0

                for (int32_t ker_h = ker_h_start; ker_h < MIN(3, input_y - in_h); ++ker_h)
 801baf6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 801bafa:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 801bafe:	e06f      	b.n	801bbe0 <arm_depthwise_conv_3x3_s8+0xd84>
                {
                    if (ker_w_start == 0)
 801bb00:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 801bb04:	2b00      	cmp	r3, #0
 801bb06:	d112      	bne.n	801bb2e <arm_depthwise_conv_3x3_s8+0xcd2>
                    {
                        out_buff += (*(input_ptr) + input_offset) * *(kernel_ptr);
 801bb08:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 801bb0c:	f993 3000 	ldrsb.w	r3, [r3]
 801bb10:	461a      	mov	r2, r3
 801bb12:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 801bb16:	4413      	add	r3, r2
 801bb18:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 801bb1c:	f992 2000 	ldrsb.w	r2, [r2]
 801bb20:	fb02 f303 	mul.w	r3, r2, r3
 801bb24:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 801bb28:	4413      	add	r3, r2
 801bb2a:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
                    }

                    out_buff += (*(input_ptr + input_ch) + input_offset) * *(kernel_ptr + input_ch);
 801bb2e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 801bb32:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 801bb36:	4413      	add	r3, r2
 801bb38:	f993 3000 	ldrsb.w	r3, [r3]
 801bb3c:	461a      	mov	r2, r3
 801bb3e:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 801bb42:	4413      	add	r3, r2
 801bb44:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 801bb48:	f8d7 11d0 	ldr.w	r1, [r7, #464]	; 0x1d0
 801bb4c:	440a      	add	r2, r1
 801bb4e:	f992 2000 	ldrsb.w	r2, [r2]
 801bb52:	fb02 f303 	mul.w	r3, r2, r3
 801bb56:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 801bb5a:	4413      	add	r3, r2
 801bb5c:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8

                    if ((input_x - in_w) >= 3)
 801bb60:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 801bb64:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 801bb68:	1ad3      	subs	r3, r2, r3
 801bb6a:	2b02      	cmp	r3, #2
 801bb6c:	dd1c      	ble.n	801bba8 <arm_depthwise_conv_3x3_s8+0xd4c>
                    {
                        out_buff += (*(input_ptr + (input_ch << 1)) + input_offset) * *(kernel_ptr + (input_ch << 1));
 801bb6e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 801bb72:	005b      	lsls	r3, r3, #1
 801bb74:	461a      	mov	r2, r3
 801bb76:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 801bb7a:	4413      	add	r3, r2
 801bb7c:	f993 3000 	ldrsb.w	r3, [r3]
 801bb80:	461a      	mov	r2, r3
 801bb82:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 801bb86:	4413      	add	r3, r2
 801bb88:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 801bb8c:	0052      	lsls	r2, r2, #1
 801bb8e:	4611      	mov	r1, r2
 801bb90:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 801bb94:	440a      	add	r2, r1
 801bb96:	f992 2000 	ldrsb.w	r2, [r2]
 801bb9a:	fb02 f303 	mul.w	r3, r2, r3
 801bb9e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 801bba2:	4413      	add	r3, r2
 801bba4:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
                    }

                    input_ptr += (input_ch * input_x);
 801bba8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 801bbac:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 801bbb0:	fb02 f303 	mul.w	r3, r2, r3
 801bbb4:	461a      	mov	r2, r3
 801bbb6:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 801bbba:	4413      	add	r3, r2
 801bbbc:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
                    kernel_ptr += (input_ch * 3);
 801bbc0:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 801bbc4:	4613      	mov	r3, r2
 801bbc6:	005b      	lsls	r3, r3, #1
 801bbc8:	4413      	add	r3, r2
 801bbca:	461a      	mov	r2, r3
 801bbcc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 801bbd0:	4413      	add	r3, r2
 801bbd2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
                for (int32_t ker_h = ker_h_start; ker_h < MIN(3, input_y - in_h); ++ker_h)
 801bbd6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 801bbda:	3301      	adds	r3, #1
 801bbdc:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 801bbe0:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 801bbe4:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 801bbe8:	1ad3      	subs	r3, r2, r3
 801bbea:	2b03      	cmp	r3, #3
 801bbec:	bfa8      	it	ge
 801bbee:	2303      	movge	r3, #3
 801bbf0:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 801bbf4:	429a      	cmp	r2, r3
 801bbf6:	db83      	blt.n	801bb00 <arm_depthwise_conv_3x3_s8+0xca4>
                }

                out_buff = arm_nn_requantize(out_buff, output_mult[in_ch], output_shift[in_ch]);
 801bbf8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801bbfc:	009b      	lsls	r3, r3, #2
 801bbfe:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 801bc02:	4413      	add	r3, r2
 801bc04:	6819      	ldr	r1, [r3, #0]
 801bc06:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801bc0a:	009b      	lsls	r3, r3, #2
 801bc0c:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 801bc10:	4413      	add	r3, r2
 801bc12:	681a      	ldr	r2, [r3, #0]
 801bc14:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801bc18:	f8d7 01d8 	ldr.w	r0, [r7, #472]	; 0x1d8
 801bc1c:	6018      	str	r0, [r3, #0]
 801bc1e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 801bc22:	6019      	str	r1, [r3, #0]
 801bc24:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801bc28:	601a      	str	r2, [r3, #0]
 801bc2a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801bc2e:	681b      	ldr	r3, [r3, #0]
 801bc30:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bc34:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 801bc38:	6812      	ldr	r2, [r2, #0]
 801bc3a:	409a      	lsls	r2, r3
 801bc3c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801bc40:	601a      	str	r2, [r3, #0]
 801bc42:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801bc46:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 801bc4a:	6812      	ldr	r2, [r2, #0]
 801bc4c:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801bc4e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801bc52:	2200      	movs	r2, #0
 801bc54:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 801bc56:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801bc5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801bc5e:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 801bc60:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801bc64:	2200      	movs	r2, #0
 801bc66:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801bc68:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	; 0x30
 801bc6c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801bc70:	681b      	ldr	r3, [r3, #0]
 801bc72:	4618      	mov	r0, r3
 801bc74:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801bc78:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801bc7c:	681b      	ldr	r3, [r3, #0]
 801bc7e:	461a      	mov	r2, r3
 801bc80:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801bc84:	fb02 f501 	mul.w	r5, r2, r1
 801bc88:	fb00 f403 	mul.w	r4, r0, r3
 801bc8c:	442c      	add	r4, r5
 801bc8e:	fba0 2302 	umull	r2, r3, r0, r2
 801bc92:	18e1      	adds	r1, r4, r3
 801bc94:	460b      	mov	r3, r1
 801bc96:	eb18 0102 	adds.w	r1, r8, r2
 801bc9a:	6039      	str	r1, [r7, #0]
 801bc9c:	eb49 0303 	adc.w	r3, r9, r3
 801bca0:	607b      	str	r3, [r7, #4]
 801bca2:	e9d7 3400 	ldrd	r3, r4, [r7]
 801bca6:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    result = (int32_t)(mult.long_long >> 31);
 801bcaa:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 801bcae:	f04f 0200 	mov.w	r2, #0
 801bcb2:	f04f 0300 	mov.w	r3, #0
 801bcb6:	0fc2      	lsrs	r2, r0, #31
 801bcb8:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801bcbc:	17cb      	asrs	r3, r1, #31
 801bcbe:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 801bcc2:	4613      	mov	r3, r2
 801bcc4:	600b      	str	r3, [r1, #0]
    return result;
 801bcc6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801bcca:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801bccc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801bcd0:	681b      	ldr	r3, [r3, #0]
 801bcd2:	2b00      	cmp	r3, #0
 801bcd4:	dc04      	bgt.n	801bce0 <arm_depthwise_conv_3x3_s8+0xe84>
 801bcd6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801bcda:	681b      	ldr	r3, [r3, #0]
 801bcdc:	425b      	negs	r3, r3
 801bcde:	e000      	b.n	801bce2 <arm_depthwise_conv_3x3_s8+0xe86>
 801bce0:	2300      	movs	r3, #0
 801bce2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 801bce6:	6011      	str	r1, [r2, #0]
 801bce8:	f107 0284 	add.w	r2, r7, #132	; 0x84
 801bcec:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801bcee:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801bcf2:	2200      	movs	r2, #0
 801bcf4:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801bcf6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801bcfa:	2201      	movs	r2, #1
 801bcfc:	681b      	ldr	r3, [r3, #0]
 801bcfe:	409a      	lsls	r2, r3
 801bd00:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 801bd04:	3a01      	subs	r2, #1
 801bd06:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 801bd08:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801bd0c:	f107 0188 	add.w	r1, r7, #136	; 0x88
 801bd10:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 801bd14:	6809      	ldr	r1, [r1, #0]
 801bd16:	6812      	ldr	r2, [r2, #0]
 801bd18:	400a      	ands	r2, r1
 801bd1a:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 801bd1c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801bd20:	f107 0188 	add.w	r1, r7, #136	; 0x88
 801bd24:	f107 0284 	add.w	r2, r7, #132	; 0x84
 801bd28:	6809      	ldr	r1, [r1, #0]
 801bd2a:	6812      	ldr	r2, [r2, #0]
 801bd2c:	fa41 f202 	asr.w	r2, r1, r2
 801bd30:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 801bd32:	f107 0374 	add.w	r3, r7, #116	; 0x74
 801bd36:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 801bd3a:	6812      	ldr	r2, [r2, #0]
 801bd3c:	1052      	asrs	r2, r2, #1
 801bd3e:	601a      	str	r2, [r3, #0]
    if (result < 0)
 801bd40:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801bd44:	681b      	ldr	r3, [r3, #0]
 801bd46:	2b00      	cmp	r3, #0
 801bd48:	da06      	bge.n	801bd58 <arm_depthwise_conv_3x3_s8+0xefc>
        threshold++;
 801bd4a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 801bd4e:	f107 0274 	add.w	r2, r7, #116	; 0x74
 801bd52:	6812      	ldr	r2, [r2, #0]
 801bd54:	3201      	adds	r2, #1
 801bd56:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 801bd58:	f107 0278 	add.w	r2, r7, #120	; 0x78
 801bd5c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 801bd60:	6812      	ldr	r2, [r2, #0]
 801bd62:	681b      	ldr	r3, [r3, #0]
 801bd64:	429a      	cmp	r2, r3
 801bd66:	dd06      	ble.n	801bd76 <arm_depthwise_conv_3x3_s8+0xf1a>
        result++;
 801bd68:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801bd6c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 801bd70:	6812      	ldr	r2, [r2, #0]
 801bd72:	3201      	adds	r2, #1
 801bd74:	601a      	str	r2, [r3, #0]
    return result;
 801bd76:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801bd7a:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801bd7c:	bf00      	nop
 801bd7e:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
                out_buff += output_offset;
 801bd82:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 801bd86:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 801bd8a:	4413      	add	r3, r2
 801bd8c:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
                out_buff = MIN(MAX(out_buff, output_activation_min), output_activation_max);
 801bd90:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 801bd94:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 801bd98:	4293      	cmp	r3, r2
 801bd9a:	bfb8      	it	lt
 801bd9c:	4613      	movlt	r3, r2
 801bd9e:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 801bda2:	4293      	cmp	r3, r2
 801bda4:	bfa8      	it	ge
 801bda6:	4613      	movge	r3, r2
 801bda8:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
                output[out_idx++] = (int8_t)out_buff;
 801bdac:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 801bdb0:	1c5a      	adds	r2, r3, #1
 801bdb2:	f8c7 2204 	str.w	r2, [r7, #516]	; 0x204
 801bdb6:	461a      	mov	r2, r3
 801bdb8:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 801bdbc:	4413      	add	r3, r2
 801bdbe:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 801bdc2:	b252      	sxtb	r2, r2
 801bdc4:	701a      	strb	r2, [r3, #0]
            for (; in_ch < input_ch; ++in_ch)
 801bdc6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801bdca:	3301      	adds	r3, #1
 801bdcc:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 801bdd0:	f8d7 21f8 	ldr.w	r2, [r7, #504]	; 0x1f8
 801bdd4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 801bdd8:	429a      	cmp	r2, r3
 801bdda:	f6ff ae54 	blt.w	801ba86 <arm_depthwise_conv_3x3_s8+0xc2a>
        for (int32_t in_w = -pad_x, out_w = 0, ker_h_start = MAX(0, -in_h); out_w < output_x; in_w += stride_x, ++out_w)
 801bdde:	f8d7 2200 	ldr.w	r2, [r7, #512]	; 0x200
 801bde2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 801bde6:	4413      	add	r3, r2
 801bde8:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 801bdec:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801bdf0:	3301      	adds	r3, #1
 801bdf2:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 801bdf6:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 801bdfa:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 801bdfe:	429a      	cmp	r2, r3
 801be00:	f6ff a8d8 	blt.w	801afb4 <arm_depthwise_conv_3x3_s8+0x158>
    for (int32_t in_h = -pad_y, out_h = 0, out_idx = 0; out_h < output_y; in_h += stride_y, ++out_h)
 801be04:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 801be08:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 801be0c:	4413      	add	r3, r2
 801be0e:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 801be12:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 801be16:	3301      	adds	r3, #1
 801be18:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
 801be1c:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 801be20:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 801be24:	429a      	cmp	r2, r3
 801be26:	f6ff a8b0 	blt.w	801af8a <arm_depthwise_conv_3x3_s8+0x12e>
            }
        }
    }

    /* Return to application */
    return ARM_MATH_SUCCESS;
 801be2a:	2300      	movs	r3, #0
}
 801be2c:	4618      	mov	r0, r3
 801be2e:	f507 7705 	add.w	r7, r7, #532	; 0x214
 801be32:	46bd      	mov	sp, r7
 801be34:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 801be38:	4770      	bx	lr

0801be3a <depthwise_conv_s8_mult_4>:
                                     const int32_t output_y,
                                     const int32_t output_offset,
                                     const int32_t input_offset,
                                     const int32_t output_activation_min,
                                     const int32_t output_activation_max)
{
 801be3a:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 801be3e:	b0d7      	sub	sp, #348	; 0x15c
 801be40:	af00      	add	r7, sp, #0
 801be42:	f107 0424 	add.w	r4, r7, #36	; 0x24
 801be46:	6020      	str	r0, [r4, #0]
 801be48:	f107 0020 	add.w	r0, r7, #32
 801be4c:	6001      	str	r1, [r0, #0]
 801be4e:	f107 011c 	add.w	r1, r7, #28
 801be52:	600a      	str	r2, [r1, #0]
 801be54:	f107 0218 	add.w	r2, r7, #24
 801be58:	6013      	str	r3, [r2, #0]
    for (int32_t in_h = -pad_y, out_h = 0, out_idx = 0; out_h < output_y; in_h += stride_y, ++out_h)
 801be5a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 801be5e:	425b      	negs	r3, r3
 801be60:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 801be64:	2300      	movs	r3, #0
 801be66:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 801be6a:	2300      	movs	r3, #0
 801be6c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 801be70:	f000 bcb3 	b.w	801c7da <depthwise_conv_s8_mult_4+0x9a0>
    {
        for (int32_t in_w = -pad_x, out_w = 0, ker_h_start = MAX(0, -in_h); out_w < output_x; in_w += stride_x, ++out_w)
 801be74:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 801be78:	425b      	negs	r3, r3
 801be7a:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 801be7e:	2300      	movs	r3, #0
 801be80:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 801be84:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 801be88:	2b00      	cmp	r3, #0
 801be8a:	dc03      	bgt.n	801be94 <depthwise_conv_s8_mult_4+0x5a>
 801be8c:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 801be90:	425b      	negs	r3, r3
 801be92:	e000      	b.n	801be96 <depthwise_conv_s8_mult_4+0x5c>
 801be94:	2300      	movs	r3, #0
 801be96:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801be9a:	f000 bc8b 	b.w	801c7b4 <depthwise_conv_s8_mult_4+0x97a>
        {
            for (int32_t in_ch = 0, out_ch = 0, ker_w_start = MAX(0, -in_w); out_ch < output_ch;
 801be9e:	2300      	movs	r3, #0
 801bea0:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 801bea4:	2300      	movs	r3, #0
 801bea6:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 801beaa:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801beae:	2b00      	cmp	r3, #0
 801beb0:	dc03      	bgt.n	801beba <depthwise_conv_s8_mult_4+0x80>
 801beb2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801beb6:	425b      	negs	r3, r3
 801beb8:	e000      	b.n	801bebc <depthwise_conv_s8_mult_4+0x82>
 801beba:	2300      	movs	r3, #0
 801bebc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 801bec0:	f000 bc65 	b.w	801c78e <depthwise_conv_s8_mult_4+0x954>
                 ++in_ch, out_ch += ch_mult)
            {
                for (int mult_tile = 0; mult_tile < ch_mult; mult_tile += 4)
 801bec4:	2300      	movs	r3, #0
 801bec6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 801beca:	f000 bc4d 	b.w	801c768 <depthwise_conv_s8_mult_4+0x92e>
                {
                    int32_t out_buff[4];

                    out_buff[0] = bias[out_ch + 0 + mult_tile];
 801bece:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 801bed2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801bed6:	4413      	add	r3, r2
 801bed8:	009b      	lsls	r3, r3, #2
 801beda:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 801bede:	4413      	add	r3, r2
 801bee0:	681a      	ldr	r2, [r3, #0]
 801bee2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801bee6:	601a      	str	r2, [r3, #0]
                    out_buff[1] = bias[out_ch + 1 + mult_tile];
 801bee8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801beec:	1c5a      	adds	r2, r3, #1
 801beee:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801bef2:	4413      	add	r3, r2
 801bef4:	009b      	lsls	r3, r3, #2
 801bef6:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 801befa:	4413      	add	r3, r2
 801befc:	681a      	ldr	r2, [r3, #0]
 801befe:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801bf02:	605a      	str	r2, [r3, #4]
                    out_buff[2] = bias[out_ch + 2 + mult_tile];
 801bf04:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801bf08:	1c9a      	adds	r2, r3, #2
 801bf0a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801bf0e:	4413      	add	r3, r2
 801bf10:	009b      	lsls	r3, r3, #2
 801bf12:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 801bf16:	4413      	add	r3, r2
 801bf18:	681a      	ldr	r2, [r3, #0]
 801bf1a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801bf1e:	609a      	str	r2, [r3, #8]
                    out_buff[3] = bias[out_ch + 3 + mult_tile];
 801bf20:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801bf24:	1cda      	adds	r2, r3, #3
 801bf26:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801bf2a:	4413      	add	r3, r2
 801bf2c:	009b      	lsls	r3, r3, #2
 801bf2e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 801bf32:	4413      	add	r3, r2
 801bf34:	681a      	ldr	r2, [r3, #0]
 801bf36:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801bf3a:	60da      	str	r2, [r3, #12]

                    for (int32_t ker_h = ker_h_start; ker_h < MIN(kernel_y, input_y - in_h); ++ker_h)
 801bf3c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801bf40:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 801bf44:	e0cd      	b.n	801c0e2 <depthwise_conv_s8_mult_4+0x2a8>
                    {
                        int32_t ker_idx = ker_h * (output_ch * kernel_x) + ker_w_start * output_ch + out_ch;
 801bf46:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 801bf4a:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 801bf4e:	fb02 f303 	mul.w	r3, r2, r3
 801bf52:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 801bf56:	fb02 f203 	mul.w	r2, r2, r3
 801bf5a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801bf5e:	f8d7 117c 	ldr.w	r1, [r7, #380]	; 0x17c
 801bf62:	fb01 f303 	mul.w	r3, r1, r3
 801bf66:	4413      	add	r3, r2
 801bf68:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 801bf6c:	4413      	add	r3, r2
 801bf6e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
                        int32_t in_idx = (in_h + ker_h) * (input_ch * input_x) + in_w * input_ch + in_ch;
 801bf72:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 801bf76:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801bf7a:	4413      	add	r3, r2
 801bf7c:	f107 0218 	add.w	r2, r7, #24
 801bf80:	f107 0120 	add.w	r1, r7, #32
 801bf84:	6812      	ldr	r2, [r2, #0]
 801bf86:	6809      	ldr	r1, [r1, #0]
 801bf88:	fb01 f202 	mul.w	r2, r1, r2
 801bf8c:	fb02 f203 	mul.w	r2, r2, r3
 801bf90:	f107 0118 	add.w	r1, r7, #24
 801bf94:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801bf98:	6809      	ldr	r1, [r1, #0]
 801bf9a:	fb01 f303 	mul.w	r3, r1, r3
 801bf9e:	4413      	add	r3, r2
 801bfa0:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 801bfa4:	4413      	add	r3, r2
 801bfa6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

                        for (int32_t ker_w = ker_w_start; ker_w < MIN(kernel_x, input_x - in_w);
 801bfaa:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801bfae:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801bfb2:	e081      	b.n	801c0b8 <depthwise_conv_s8_mult_4+0x27e>
                             ++ker_w, ker_idx += output_ch)
                        {
                            int32_t in_val = input[in_idx + ker_w * input_ch] + input_offset;
 801bfb4:	f107 0218 	add.w	r2, r7, #24
 801bfb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801bfbc:	6812      	ldr	r2, [r2, #0]
 801bfbe:	fb02 f203 	mul.w	r2, r2, r3
 801bfc2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801bfc6:	4413      	add	r3, r2
 801bfc8:	461a      	mov	r2, r3
 801bfca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801bfce:	681b      	ldr	r3, [r3, #0]
 801bfd0:	4413      	add	r3, r2
 801bfd2:	f993 3000 	ldrsb.w	r3, [r3]
 801bfd6:	461a      	mov	r2, r3
 801bfd8:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 801bfdc:	4413      	add	r3, r2
 801bfde:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
                            out_buff[0] += in_val * kernel[ker_idx + 0 + mult_tile];
 801bfe2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801bfe6:	681a      	ldr	r2, [r3, #0]
 801bfe8:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 801bfec:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801bff0:	440b      	add	r3, r1
 801bff2:	4619      	mov	r1, r3
 801bff4:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 801bff8:	440b      	add	r3, r1
 801bffa:	f993 3000 	ldrsb.w	r3, [r3]
 801bffe:	4619      	mov	r1, r3
 801c000:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801c004:	fb03 f301 	mul.w	r3, r3, r1
 801c008:	441a      	add	r2, r3
 801c00a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801c00e:	601a      	str	r2, [r3, #0]
                            out_buff[1] += in_val * kernel[ker_idx + 1 + mult_tile];
 801c010:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801c014:	685a      	ldr	r2, [r3, #4]
 801c016:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 801c01a:	1c59      	adds	r1, r3, #1
 801c01c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801c020:	440b      	add	r3, r1
 801c022:	4619      	mov	r1, r3
 801c024:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 801c028:	440b      	add	r3, r1
 801c02a:	f993 3000 	ldrsb.w	r3, [r3]
 801c02e:	4619      	mov	r1, r3
 801c030:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801c034:	fb03 f301 	mul.w	r3, r3, r1
 801c038:	441a      	add	r2, r3
 801c03a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801c03e:	605a      	str	r2, [r3, #4]
                            out_buff[2] += in_val * kernel[ker_idx + 2 + mult_tile];
 801c040:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801c044:	689a      	ldr	r2, [r3, #8]
 801c046:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 801c04a:	1c99      	adds	r1, r3, #2
 801c04c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801c050:	440b      	add	r3, r1
 801c052:	4619      	mov	r1, r3
 801c054:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 801c058:	440b      	add	r3, r1
 801c05a:	f993 3000 	ldrsb.w	r3, [r3]
 801c05e:	4619      	mov	r1, r3
 801c060:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801c064:	fb03 f301 	mul.w	r3, r3, r1
 801c068:	441a      	add	r2, r3
 801c06a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801c06e:	609a      	str	r2, [r3, #8]
                            out_buff[3] += in_val * kernel[ker_idx + 3 + mult_tile];
 801c070:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801c074:	68da      	ldr	r2, [r3, #12]
 801c076:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 801c07a:	1cd9      	adds	r1, r3, #3
 801c07c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801c080:	440b      	add	r3, r1
 801c082:	4619      	mov	r1, r3
 801c084:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 801c088:	440b      	add	r3, r1
 801c08a:	f993 3000 	ldrsb.w	r3, [r3]
 801c08e:	4619      	mov	r1, r3
 801c090:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801c094:	fb03 f301 	mul.w	r3, r3, r1
 801c098:	441a      	add	r2, r3
 801c09a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801c09e:	60da      	str	r2, [r3, #12]
                             ++ker_w, ker_idx += output_ch)
 801c0a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801c0a4:	3301      	adds	r3, #1
 801c0a6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801c0aa:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 801c0ae:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 801c0b2:	4413      	add	r3, r2
 801c0b4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
                        for (int32_t ker_w = ker_w_start; ker_w < MIN(kernel_x, input_x - in_w);
 801c0b8:	f107 0320 	add.w	r3, r7, #32
 801c0bc:	681a      	ldr	r2, [r3, #0]
 801c0be:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801c0c2:	1ad2      	subs	r2, r2, r3
 801c0c4:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 801c0c8:	4293      	cmp	r3, r2
 801c0ca:	bfa8      	it	ge
 801c0cc:	4613      	movge	r3, r2
 801c0ce:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 801c0d2:	429a      	cmp	r2, r3
 801c0d4:	f6ff af6e 	blt.w	801bfb4 <depthwise_conv_s8_mult_4+0x17a>
                    for (int32_t ker_h = ker_h_start; ker_h < MIN(kernel_y, input_y - in_h); ++ker_h)
 801c0d8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801c0dc:	3301      	adds	r3, #1
 801c0de:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 801c0e2:	f107 031c 	add.w	r3, r7, #28
 801c0e6:	681a      	ldr	r2, [r3, #0]
 801c0e8:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 801c0ec:	1ad2      	subs	r2, r2, r3
 801c0ee:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 801c0f2:	4293      	cmp	r3, r2
 801c0f4:	bfa8      	it	ge
 801c0f6:	4613      	movge	r3, r2
 801c0f8:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 801c0fc:	429a      	cmp	r2, r3
 801c0fe:	f6ff af22 	blt.w	801bf46 <depthwise_conv_s8_mult_4+0x10c>
                    res = vmaxq_s32(res, vdupq_n_s32(output_activation_min));
                    res = vminq_s32(res, vdupq_n_s32(output_activation_max));
                    vstrbq_s32(output, res);
                    output += 4;
#else
                    out_buff[0] = arm_nn_requantize(
 801c102:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801c106:	6819      	ldr	r1, [r3, #0]
                        out_buff[0], output_mult[out_ch + 0 + mult_tile], output_shift[out_ch + 0 + mult_tile]);
 801c108:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 801c10c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801c110:	4413      	add	r3, r2
 801c112:	009b      	lsls	r3, r3, #2
 801c114:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 801c118:	4413      	add	r3, r2
                    out_buff[0] = arm_nn_requantize(
 801c11a:	681a      	ldr	r2, [r3, #0]
                        out_buff[0], output_mult[out_ch + 0 + mult_tile], output_shift[out_ch + 0 + mult_tile]);
 801c11c:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 801c120:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801c124:	4403      	add	r3, r0
 801c126:	009b      	lsls	r3, r3, #2
 801c128:	f8d7 01a4 	ldr.w	r0, [r7, #420]	; 0x1a4
 801c12c:	4403      	add	r3, r0
                    out_buff[0] = arm_nn_requantize(
 801c12e:	681b      	ldr	r3, [r3, #0]
 801c130:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 801c134:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 801c138:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801c13c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801c140:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c144:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801c148:	fa02 f303 	lsl.w	r3, r2, r3
 801c14c:	67fb      	str	r3, [r7, #124]	; 0x7c
 801c14e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801c152:	67bb      	str	r3, [r7, #120]	; 0x78
    q31_t result = 0;
 801c154:	2300      	movs	r3, #0
 801c156:	677b      	str	r3, [r7, #116]	; 0x74
    mult.word.low = 1 << 30;
 801c158:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801c15c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801c160:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 801c162:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801c166:	2200      	movs	r2, #0
 801c168:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801c16a:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 801c16e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801c170:	461a      	mov	r2, r3
 801c172:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801c176:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 801c178:	4608      	mov	r0, r1
 801c17a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801c17e:	fb00 f503 	mul.w	r5, r0, r3
 801c182:	fb02 f401 	mul.w	r4, r2, r1
 801c186:	442c      	add	r4, r5
 801c188:	fba2 2300 	umull	r2, r3, r2, r0
 801c18c:	18e1      	adds	r1, r4, r3
 801c18e:	460b      	mov	r3, r1
 801c190:	eb18 0102 	adds.w	r1, r8, r2
 801c194:	6039      	str	r1, [r7, #0]
 801c196:	eb49 0303 	adc.w	r3, r9, r3
 801c19a:	607b      	str	r3, [r7, #4]
 801c19c:	e9d7 3400 	ldrd	r3, r4, [r7]
 801c1a0:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
    result = (int32_t)(mult.long_long >> 31);
 801c1a4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 801c1a8:	f04f 0200 	mov.w	r2, #0
 801c1ac:	f04f 0300 	mov.w	r3, #0
 801c1b0:	0fc2      	lsrs	r2, r0, #31
 801c1b2:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801c1b6:	17cb      	asrs	r3, r1, #31
 801c1b8:	4613      	mov	r3, r2
 801c1ba:	677b      	str	r3, [r7, #116]	; 0x74
    return result;
 801c1bc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801c1be:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801c1c2:	2b00      	cmp	r3, #0
 801c1c4:	dc03      	bgt.n	801c1ce <depthwise_conv_s8_mult_4+0x394>
 801c1c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801c1ca:	425b      	negs	r3, r3
 801c1cc:	e000      	b.n	801c1d0 <depthwise_conv_s8_mult_4+0x396>
 801c1ce:	2300      	movs	r3, #0
 801c1d0:	673a      	str	r2, [r7, #112]	; 0x70
 801c1d2:	66fb      	str	r3, [r7, #108]	; 0x6c
    q31_t result = 0;
 801c1d4:	2300      	movs	r3, #0
 801c1d6:	66bb      	str	r3, [r7, #104]	; 0x68
    const q31_t remainder_mask = (1 << exponent) - 1;
 801c1d8:	2201      	movs	r2, #1
 801c1da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c1dc:	fa02 f303 	lsl.w	r3, r2, r3
 801c1e0:	3b01      	subs	r3, #1
 801c1e2:	667b      	str	r3, [r7, #100]	; 0x64
    int32_t remainder = remainder_mask & dividend;
 801c1e4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801c1e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c1e8:	4013      	ands	r3, r2
 801c1ea:	663b      	str	r3, [r7, #96]	; 0x60
    result = dividend >> exponent;
 801c1ec:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801c1ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c1f0:	fa42 f303 	asr.w	r3, r2, r3
 801c1f4:	66bb      	str	r3, [r7, #104]	; 0x68
    q31_t threshold = remainder_mask >> 1;
 801c1f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c1f8:	105b      	asrs	r3, r3, #1
 801c1fa:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (result < 0)
 801c1fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c1fe:	2b00      	cmp	r3, #0
 801c200:	da02      	bge.n	801c208 <depthwise_conv_s8_mult_4+0x3ce>
        threshold++;
 801c202:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801c204:	3301      	adds	r3, #1
 801c206:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (remainder > threshold)
 801c208:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801c20a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801c20c:	429a      	cmp	r2, r3
 801c20e:	dd02      	ble.n	801c216 <depthwise_conv_s8_mult_4+0x3dc>
        result++;
 801c210:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c212:	3301      	adds	r3, #1
 801c214:	66bb      	str	r3, [r7, #104]	; 0x68
    return result;
 801c216:	6eba      	ldr	r2, [r7, #104]	; 0x68
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801c218:	bf00      	nop
 801c21a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801c21e:	601a      	str	r2, [r3, #0]
                    out_buff[1] = arm_nn_requantize(
 801c220:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801c224:	6859      	ldr	r1, [r3, #4]
                        out_buff[1], output_mult[out_ch + 1 + mult_tile], output_shift[out_ch + 1 + mult_tile]);
 801c226:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801c22a:	1c5a      	adds	r2, r3, #1
 801c22c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801c230:	4413      	add	r3, r2
 801c232:	009b      	lsls	r3, r3, #2
 801c234:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 801c238:	4413      	add	r3, r2
                    out_buff[1] = arm_nn_requantize(
 801c23a:	681a      	ldr	r2, [r3, #0]
                        out_buff[1], output_mult[out_ch + 1 + mult_tile], output_shift[out_ch + 1 + mult_tile]);
 801c23c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801c240:	1c58      	adds	r0, r3, #1
 801c242:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801c246:	4403      	add	r3, r0
 801c248:	009b      	lsls	r3, r3, #2
 801c24a:	f8d7 01a4 	ldr.w	r0, [r7, #420]	; 0x1a4
 801c24e:	4403      	add	r3, r0
                    out_buff[1] = arm_nn_requantize(
 801c250:	681b      	ldr	r3, [r3, #0]
 801c252:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 801c256:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 801c25a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801c25e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801c262:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c266:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 801c26a:	fa02 f303 	lsl.w	r3, r2, r3
 801c26e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801c272:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801c276:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    q31_t result = 0;
 801c27a:	2300      	movs	r3, #0
 801c27c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    mult.word.low = 1 << 30;
 801c280:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801c284:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801c288:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 801c28a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801c28e:	2200      	movs	r2, #0
 801c290:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801c292:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 801c296:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801c29a:	461a      	mov	r2, r3
 801c29c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801c2a0:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 801c2a4:	4608      	mov	r0, r1
 801c2a6:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801c2aa:	fb00 f503 	mul.w	r5, r0, r3
 801c2ae:	fb02 f401 	mul.w	r4, r2, r1
 801c2b2:	442c      	add	r4, r5
 801c2b4:	fba2 2300 	umull	r2, r3, r2, r0
 801c2b8:	18e1      	adds	r1, r4, r3
 801c2ba:	460b      	mov	r3, r1
 801c2bc:	eb18 0102 	adds.w	r1, r8, r2
 801c2c0:	60b9      	str	r1, [r7, #8]
 801c2c2:	eb49 0303 	adc.w	r3, r9, r3
 801c2c6:	60fb      	str	r3, [r7, #12]
 801c2c8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 801c2cc:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
    result = (int32_t)(mult.long_long >> 31);
 801c2d0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 801c2d4:	f04f 0200 	mov.w	r2, #0
 801c2d8:	f04f 0300 	mov.w	r3, #0
 801c2dc:	0fc2      	lsrs	r2, r0, #31
 801c2de:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801c2e2:	17cb      	asrs	r3, r1, #31
 801c2e4:	4613      	mov	r3, r2
 801c2e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    return result;
 801c2ea:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801c2ee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801c2f2:	2b00      	cmp	r3, #0
 801c2f4:	dc03      	bgt.n	801c2fe <depthwise_conv_s8_mult_4+0x4c4>
 801c2f6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801c2fa:	425b      	negs	r3, r3
 801c2fc:	e000      	b.n	801c300 <depthwise_conv_s8_mult_4+0x4c6>
 801c2fe:	2300      	movs	r3, #0
 801c300:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 801c304:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    q31_t result = 0;
 801c308:	2300      	movs	r3, #0
 801c30a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    const q31_t remainder_mask = (1 << exponent) - 1;
 801c30e:	2201      	movs	r2, #1
 801c310:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801c314:	fa02 f303 	lsl.w	r3, r2, r3
 801c318:	3b01      	subs	r3, #1
 801c31a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    int32_t remainder = remainder_mask & dividend;
 801c31e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 801c322:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801c326:	4013      	ands	r3, r2
 801c328:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    result = dividend >> exponent;
 801c32c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 801c330:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801c334:	fa42 f303 	asr.w	r3, r2, r3
 801c338:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    q31_t threshold = remainder_mask >> 1;
 801c33c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801c340:	105b      	asrs	r3, r3, #1
 801c342:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (result < 0)
 801c346:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801c34a:	2b00      	cmp	r3, #0
 801c34c:	da04      	bge.n	801c358 <depthwise_conv_s8_mult_4+0x51e>
        threshold++;
 801c34e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801c352:	3301      	adds	r3, #1
 801c354:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (remainder > threshold)
 801c358:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801c35c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801c360:	429a      	cmp	r2, r3
 801c362:	dd04      	ble.n	801c36e <depthwise_conv_s8_mult_4+0x534>
        result++;
 801c364:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801c368:	3301      	adds	r3, #1
 801c36a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    return result;
 801c36e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801c372:	bf00      	nop
 801c374:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801c378:	605a      	str	r2, [r3, #4]
                    out_buff[2] = arm_nn_requantize(
 801c37a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801c37e:	6899      	ldr	r1, [r3, #8]
                        out_buff[2], output_mult[out_ch + 2 + mult_tile], output_shift[out_ch + 2 + mult_tile]);
 801c380:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801c384:	1c9a      	adds	r2, r3, #2
 801c386:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801c38a:	4413      	add	r3, r2
 801c38c:	009b      	lsls	r3, r3, #2
 801c38e:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 801c392:	4413      	add	r3, r2
                    out_buff[2] = arm_nn_requantize(
 801c394:	681a      	ldr	r2, [r3, #0]
                        out_buff[2], output_mult[out_ch + 2 + mult_tile], output_shift[out_ch + 2 + mult_tile]);
 801c396:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801c39a:	1c98      	adds	r0, r3, #2
 801c39c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801c3a0:	4403      	add	r3, r0
 801c3a2:	009b      	lsls	r3, r3, #2
 801c3a4:	f8d7 01a4 	ldr.w	r0, [r7, #420]	; 0x1a4
 801c3a8:	4403      	add	r3, r0
                    out_buff[2] = arm_nn_requantize(
 801c3aa:	681b      	ldr	r3, [r3, #0]
 801c3ac:	f8c7 10e8 	str.w	r1, [r7, #232]	; 0xe8
 801c3b0:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 801c3b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801c3b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801c3bc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c3c0:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 801c3c4:	fa02 f303 	lsl.w	r3, r2, r3
 801c3c8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 801c3cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c3d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    q31_t result = 0;
 801c3d4:	2300      	movs	r3, #0
 801c3d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    mult.word.low = 1 << 30;
 801c3da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c3de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801c3e2:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 801c3e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c3e8:	2200      	movs	r2, #0
 801c3ea:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801c3ec:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	; 0x30
 801c3f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801c3f4:	461a      	mov	r2, r3
 801c3f6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801c3fa:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 801c3fe:	4608      	mov	r0, r1
 801c400:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801c404:	fb00 f503 	mul.w	r5, r0, r3
 801c408:	fb02 f401 	mul.w	r4, r2, r1
 801c40c:	442c      	add	r4, r5
 801c40e:	fba2 2300 	umull	r2, r3, r2, r0
 801c412:	18e1      	adds	r1, r4, r3
 801c414:	460b      	mov	r3, r1
 801c416:	eb18 0102 	adds.w	r1, r8, r2
 801c41a:	6139      	str	r1, [r7, #16]
 801c41c:	eb49 0303 	adc.w	r3, r9, r3
 801c420:	617b      	str	r3, [r7, #20]
 801c422:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 801c426:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    result = (int32_t)(mult.long_long >> 31);
 801c42a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 801c42e:	f04f 0200 	mov.w	r2, #0
 801c432:	f04f 0300 	mov.w	r3, #0
 801c436:	0fc2      	lsrs	r2, r0, #31
 801c438:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801c43c:	17cb      	asrs	r3, r1, #31
 801c43e:	4613      	mov	r3, r2
 801c440:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    return result;
 801c444:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801c448:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801c44c:	2b00      	cmp	r3, #0
 801c44e:	dc03      	bgt.n	801c458 <depthwise_conv_s8_mult_4+0x61e>
 801c450:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801c454:	425b      	negs	r3, r3
 801c456:	e000      	b.n	801c45a <depthwise_conv_s8_mult_4+0x620>
 801c458:	2300      	movs	r3, #0
 801c45a:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 801c45e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    q31_t result = 0;
 801c462:	2300      	movs	r3, #0
 801c464:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    const q31_t remainder_mask = (1 << exponent) - 1;
 801c468:	2201      	movs	r2, #1
 801c46a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801c46e:	fa02 f303 	lsl.w	r3, r2, r3
 801c472:	3b01      	subs	r3, #1
 801c474:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    int32_t remainder = remainder_mask & dividend;
 801c478:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801c47c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801c480:	4013      	ands	r3, r2
 801c482:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result = dividend >> exponent;
 801c486:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801c48a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801c48e:	fa42 f303 	asr.w	r3, r2, r3
 801c492:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    q31_t threshold = remainder_mask >> 1;
 801c496:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801c49a:	105b      	asrs	r3, r3, #1
 801c49c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (result < 0)
 801c4a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801c4a4:	2b00      	cmp	r3, #0
 801c4a6:	da04      	bge.n	801c4b2 <depthwise_conv_s8_mult_4+0x678>
        threshold++;
 801c4a8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801c4ac:	3301      	adds	r3, #1
 801c4ae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (remainder > threshold)
 801c4b2:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 801c4b6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801c4ba:	429a      	cmp	r2, r3
 801c4bc:	dd04      	ble.n	801c4c8 <depthwise_conv_s8_mult_4+0x68e>
        result++;
 801c4be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801c4c2:	3301      	adds	r3, #1
 801c4c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    return result;
 801c4c8:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801c4cc:	bf00      	nop
 801c4ce:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801c4d2:	609a      	str	r2, [r3, #8]
                    out_buff[3] = arm_nn_requantize(
 801c4d4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801c4d8:	68d9      	ldr	r1, [r3, #12]
                        out_buff[3], output_mult[out_ch + 3 + mult_tile], output_shift[out_ch + 3 + mult_tile]);
 801c4da:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801c4de:	1cda      	adds	r2, r3, #3
 801c4e0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801c4e4:	4413      	add	r3, r2
 801c4e6:	009b      	lsls	r3, r3, #2
 801c4e8:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 801c4ec:	4413      	add	r3, r2
                    out_buff[3] = arm_nn_requantize(
 801c4ee:	681a      	ldr	r2, [r3, #0]
                        out_buff[3], output_mult[out_ch + 3 + mult_tile], output_shift[out_ch + 3 + mult_tile]);
 801c4f0:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801c4f4:	1cd8      	adds	r0, r3, #3
 801c4f6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801c4fa:	4403      	add	r3, r0
 801c4fc:	009b      	lsls	r3, r3, #2
 801c4fe:	f8d7 01a4 	ldr.w	r0, [r7, #420]	; 0x1a4
 801c502:	4403      	add	r3, r0
                    out_buff[3] = arm_nn_requantize(
 801c504:	681b      	ldr	r3, [r3, #0]
 801c506:	f8c7 1118 	str.w	r1, [r7, #280]	; 0x118
 801c50a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 801c50e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 801c512:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801c516:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c51a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 801c51e:	fa02 f303 	lsl.w	r3, r2, r3
 801c522:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 801c526:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c52a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    q31_t result = 0;
 801c52e:	2300      	movs	r3, #0
 801c530:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    mult.word.low = 1 << 30;
 801c534:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801c538:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801c53c:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 801c53e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801c542:	2200      	movs	r2, #0
 801c544:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801c546:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 801c54a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801c54e:	461a      	mov	r2, r3
 801c550:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801c554:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 801c558:	4608      	mov	r0, r1
 801c55a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801c55e:	fb00 f503 	mul.w	r5, r0, r3
 801c562:	fb02 f401 	mul.w	r4, r2, r1
 801c566:	442c      	add	r4, r5
 801c568:	fba2 2300 	umull	r2, r3, r2, r0
 801c56c:	18e1      	adds	r1, r4, r3
 801c56e:	460b      	mov	r3, r1
 801c570:	eb18 0a02 	adds.w	sl, r8, r2
 801c574:	eb49 0b03 	adc.w	fp, r9, r3
 801c578:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	; 0x28
    result = (int32_t)(mult.long_long >> 31);
 801c57c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801c580:	f04f 0200 	mov.w	r2, #0
 801c584:	f04f 0300 	mov.w	r3, #0
 801c588:	0fc2      	lsrs	r2, r0, #31
 801c58a:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801c58e:	17cb      	asrs	r3, r1, #31
 801c590:	4613      	mov	r3, r2
 801c592:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    return result;
 801c596:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801c59a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801c59e:	2b00      	cmp	r3, #0
 801c5a0:	dc03      	bgt.n	801c5aa <depthwise_conv_s8_mult_4+0x770>
 801c5a2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801c5a6:	425b      	negs	r3, r3
 801c5a8:	e000      	b.n	801c5ac <depthwise_conv_s8_mult_4+0x772>
 801c5aa:	2300      	movs	r3, #0
 801c5ac:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 801c5b0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    q31_t result = 0;
 801c5b4:	2300      	movs	r3, #0
 801c5b6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    const q31_t remainder_mask = (1 << exponent) - 1;
 801c5ba:	2201      	movs	r2, #1
 801c5bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801c5c0:	fa02 f303 	lsl.w	r3, r2, r3
 801c5c4:	3b01      	subs	r3, #1
 801c5c6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    int32_t remainder = remainder_mask & dividend;
 801c5ca:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 801c5ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c5d2:	4013      	ands	r3, r2
 801c5d4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    result = dividend >> exponent;
 801c5d8:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 801c5dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801c5e0:	fa42 f303 	asr.w	r3, r2, r3
 801c5e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    q31_t threshold = remainder_mask >> 1;
 801c5e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c5ec:	105b      	asrs	r3, r3, #1
 801c5ee:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    if (result < 0)
 801c5f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801c5f6:	2b00      	cmp	r3, #0
 801c5f8:	da04      	bge.n	801c604 <depthwise_conv_s8_mult_4+0x7ca>
        threshold++;
 801c5fa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801c5fe:	3301      	adds	r3, #1
 801c600:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    if (remainder > threshold)
 801c604:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 801c608:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801c60c:	429a      	cmp	r2, r3
 801c60e:	dd04      	ble.n	801c61a <depthwise_conv_s8_mult_4+0x7e0>
        result++;
 801c610:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801c614:	3301      	adds	r3, #1
 801c616:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    return result;
 801c61a:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801c61e:	bf00      	nop
 801c620:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801c624:	60da      	str	r2, [r3, #12]

                    out_buff[0] += output_offset;
 801c626:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801c62a:	681a      	ldr	r2, [r3, #0]
 801c62c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 801c630:	441a      	add	r2, r3
 801c632:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801c636:	601a      	str	r2, [r3, #0]
                    out_buff[1] += output_offset;
 801c638:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801c63c:	685a      	ldr	r2, [r3, #4]
 801c63e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 801c642:	441a      	add	r2, r3
 801c644:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801c648:	605a      	str	r2, [r3, #4]
                    out_buff[2] += output_offset;
 801c64a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801c64e:	689a      	ldr	r2, [r3, #8]
 801c650:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 801c654:	441a      	add	r2, r3
 801c656:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801c65a:	609a      	str	r2, [r3, #8]
                    out_buff[3] += output_offset;
 801c65c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801c660:	68da      	ldr	r2, [r3, #12]
 801c662:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 801c666:	441a      	add	r2, r3
 801c668:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801c66c:	60da      	str	r2, [r3, #12]

                    out_buff[0] = MIN(MAX(out_buff[0], output_activation_min), output_activation_max);
 801c66e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801c672:	681a      	ldr	r2, [r3, #0]
 801c674:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 801c678:	429a      	cmp	r2, r3
 801c67a:	bfb8      	it	lt
 801c67c:	461a      	movlt	r2, r3
 801c67e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 801c682:	429a      	cmp	r2, r3
 801c684:	bfa8      	it	ge
 801c686:	461a      	movge	r2, r3
 801c688:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801c68c:	601a      	str	r2, [r3, #0]
                    out_buff[1] = MIN(MAX(out_buff[1], output_activation_min), output_activation_max);
 801c68e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801c692:	685a      	ldr	r2, [r3, #4]
 801c694:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 801c698:	429a      	cmp	r2, r3
 801c69a:	bfb8      	it	lt
 801c69c:	461a      	movlt	r2, r3
 801c69e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 801c6a2:	429a      	cmp	r2, r3
 801c6a4:	bfa8      	it	ge
 801c6a6:	461a      	movge	r2, r3
 801c6a8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801c6ac:	605a      	str	r2, [r3, #4]
                    out_buff[2] = MIN(MAX(out_buff[2], output_activation_min), output_activation_max);
 801c6ae:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801c6b2:	689a      	ldr	r2, [r3, #8]
 801c6b4:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 801c6b8:	429a      	cmp	r2, r3
 801c6ba:	bfb8      	it	lt
 801c6bc:	461a      	movlt	r2, r3
 801c6be:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 801c6c2:	429a      	cmp	r2, r3
 801c6c4:	bfa8      	it	ge
 801c6c6:	461a      	movge	r2, r3
 801c6c8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801c6cc:	609a      	str	r2, [r3, #8]
                    out_buff[3] = MIN(MAX(out_buff[3], output_activation_min), output_activation_max);
 801c6ce:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801c6d2:	68da      	ldr	r2, [r3, #12]
 801c6d4:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 801c6d8:	429a      	cmp	r2, r3
 801c6da:	bfb8      	it	lt
 801c6dc:	461a      	movlt	r2, r3
 801c6de:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 801c6e2:	429a      	cmp	r2, r3
 801c6e4:	bfa8      	it	ge
 801c6e6:	461a      	movge	r2, r3
 801c6e8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801c6ec:	60da      	str	r2, [r3, #12]

                    output[out_idx++] = (int8_t)out_buff[0];
 801c6ee:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801c6f2:	6819      	ldr	r1, [r3, #0]
 801c6f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801c6f8:	1c5a      	adds	r2, r3, #1
 801c6fa:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 801c6fe:	461a      	mov	r2, r3
 801c700:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 801c704:	4413      	add	r3, r2
 801c706:	b24a      	sxtb	r2, r1
 801c708:	701a      	strb	r2, [r3, #0]
                    output[out_idx++] = (int8_t)out_buff[1];
 801c70a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801c70e:	6859      	ldr	r1, [r3, #4]
 801c710:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801c714:	1c5a      	adds	r2, r3, #1
 801c716:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 801c71a:	461a      	mov	r2, r3
 801c71c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 801c720:	4413      	add	r3, r2
 801c722:	b24a      	sxtb	r2, r1
 801c724:	701a      	strb	r2, [r3, #0]
                    output[out_idx++] = (int8_t)out_buff[2];
 801c726:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801c72a:	6899      	ldr	r1, [r3, #8]
 801c72c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801c730:	1c5a      	adds	r2, r3, #1
 801c732:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 801c736:	461a      	mov	r2, r3
 801c738:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 801c73c:	4413      	add	r3, r2
 801c73e:	b24a      	sxtb	r2, r1
 801c740:	701a      	strb	r2, [r3, #0]
                    output[out_idx++] = (int8_t)out_buff[3];
 801c742:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801c746:	68d9      	ldr	r1, [r3, #12]
 801c748:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801c74c:	1c5a      	adds	r2, r3, #1
 801c74e:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 801c752:	461a      	mov	r2, r3
 801c754:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 801c758:	4413      	add	r3, r2
 801c75a:	b24a      	sxtb	r2, r1
 801c75c:	701a      	strb	r2, [r3, #0]
                for (int mult_tile = 0; mult_tile < ch_mult; mult_tile += 4)
 801c75e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801c762:	3304      	adds	r3, #4
 801c764:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 801c768:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 801c76c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 801c770:	429a      	cmp	r2, r3
 801c772:	f6ff abac 	blt.w	801bece <depthwise_conv_s8_mult_4+0x94>
                 ++in_ch, out_ch += ch_mult)
 801c776:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 801c77a:	3301      	adds	r3, #1
 801c77c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 801c780:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 801c784:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 801c788:	4413      	add	r3, r2
 801c78a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
            for (int32_t in_ch = 0, out_ch = 0, ker_w_start = MAX(0, -in_w); out_ch < output_ch;
 801c78e:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 801c792:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 801c796:	429a      	cmp	r2, r3
 801c798:	f6ff ab94 	blt.w	801bec4 <depthwise_conv_s8_mult_4+0x8a>
        for (int32_t in_w = -pad_x, out_w = 0, ker_h_start = MAX(0, -in_h); out_w < output_x; in_w += stride_x, ++out_w)
 801c79c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 801c7a0:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 801c7a4:	4413      	add	r3, r2
 801c7a6:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 801c7aa:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 801c7ae:	3301      	adds	r3, #1
 801c7b0:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 801c7b4:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 801c7b8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 801c7bc:	429a      	cmp	r2, r3
 801c7be:	f6ff ab6e 	blt.w	801be9e <depthwise_conv_s8_mult_4+0x64>
    for (int32_t in_h = -pad_y, out_h = 0, out_idx = 0; out_h < output_y; in_h += stride_y, ++out_h)
 801c7c2:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 801c7c6:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 801c7ca:	4413      	add	r3, r2
 801c7cc:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 801c7d0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 801c7d4:	3301      	adds	r3, #1
 801c7d6:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 801c7da:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 801c7de:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 801c7e2:	429a      	cmp	r2, r3
 801c7e4:	f6ff ab46 	blt.w	801be74 <depthwise_conv_s8_mult_4+0x3a>
#endif
                }
            }
        }
    }
}
 801c7e8:	bf00      	nop
 801c7ea:	bf00      	nop
 801c7ec:	f507 77ae 	add.w	r7, r7, #348	; 0x15c
 801c7f0:	46bd      	mov	sp, r7
 801c7f2:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 801c7f6:	4770      	bx	lr

0801c7f8 <depthwise_conv_s8_generic>:
                                      const uint16_t output_y,
                                      const int32_t output_offset,
                                      const int32_t input_offset,
                                      const int32_t output_activation_min,
                                      const int32_t output_activation_max)
{
 801c7f8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 801c7fc:	b0a6      	sub	sp, #152	; 0x98
 801c7fe:	af00      	add	r7, sp, #0
 801c800:	60f8      	str	r0, [r7, #12]
 801c802:	4608      	mov	r0, r1
 801c804:	4611      	mov	r1, r2
 801c806:	461a      	mov	r2, r3
 801c808:	4603      	mov	r3, r0
 801c80a:	817b      	strh	r3, [r7, #10]
 801c80c:	460b      	mov	r3, r1
 801c80e:	813b      	strh	r3, [r7, #8]
 801c810:	4613      	mov	r3, r2
 801c812:	80fb      	strh	r3, [r7, #6]
    (void)output_ch;
    int i_out = 0;
 801c814:	2300      	movs	r3, #0
 801c816:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    int i_batch;

    for (i_batch = 0; i_batch < input_batches; i_batch++)
 801c81a:	2300      	movs	r3, #0
 801c81c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801c820:	e189      	b.n	801cb36 <depthwise_conv_s8_generic+0x33e>
    {
        for (int i_out_y = 0; i_out_y < output_y; i_out_y++)
 801c822:	2300      	movs	r3, #0
 801c824:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801c828:	e16d      	b.n	801cb06 <depthwise_conv_s8_generic+0x30e>
        {
            const int16_t base_idx_y = (i_out_y * stride_y) - pad_y;
 801c82a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801c82e:	b29b      	uxth	r3, r3
 801c830:	f8b7 20d4 	ldrh.w	r2, [r7, #212]	; 0xd4
 801c834:	fb12 f303 	smulbb	r3, r2, r3
 801c838:	b29a      	uxth	r2, r3
 801c83a:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 801c83e:	1ad3      	subs	r3, r2, r3
 801c840:	b29b      	uxth	r3, r3
 801c842:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
            for (int i_out_x = 0; i_out_x < output_x; i_out_x++)
 801c846:	2300      	movs	r3, #0
 801c848:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801c84c:	e14f      	b.n	801caee <depthwise_conv_s8_generic+0x2f6>
            {
                const int16_t base_idx_x = (i_out_x * stride_x) - pad_x;
 801c84e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801c852:	b29b      	uxth	r3, r3
 801c854:	f8b7 20d0 	ldrh.w	r2, [r7, #208]	; 0xd0
 801c858:	fb12 f303 	smulbb	r3, r2, r3
 801c85c:	b29a      	uxth	r2, r3
 801c85e:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 801c862:	1ad3      	subs	r3, r2, r3
 801c864:	b29b      	uxth	r3, r3
 801c866:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
                for (int i_input_ch = 0; i_input_ch < input_ch; i_input_ch++)
 801c86a:	2300      	movs	r3, #0
 801c86c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801c870:	e131      	b.n	801cad6 <depthwise_conv_s8_generic+0x2de>
                {
                    for (int i_ch_mult = 0; i_ch_mult < ch_mult; i_ch_mult++)
 801c872:	2300      	movs	r3, #0
 801c874:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801c878:	e121      	b.n	801cabe <depthwise_conv_s8_generic+0x2c6>
                    {
                        const int idx_out_ch = i_ch_mult + i_input_ch * ch_mult;
 801c87a:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 801c87e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801c882:	fb02 f303 	mul.w	r3, r2, r3
 801c886:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801c88a:	4413      	add	r3, r2
 801c88c:	66fb      	str	r3, [r7, #108]	; 0x6c
                        int32_t acc_0;
                        /* Condition for kernel start dimension: (base_idx_<x,y> + ker_<x,y>_start) >= 0 */
                        const int ker_y_start = MAX(0, -base_idx_y);
 801c88e:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 801c892:	2b00      	cmp	r3, #0
 801c894:	dc03      	bgt.n	801c89e <depthwise_conv_s8_generic+0xa6>
 801c896:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 801c89a:	425b      	negs	r3, r3
 801c89c:	e000      	b.n	801c8a0 <depthwise_conv_s8_generic+0xa8>
 801c89e:	2300      	movs	r3, #0
 801c8a0:	66bb      	str	r3, [r7, #104]	; 0x68
                        const int ker_x_start = MAX(0, -base_idx_x);
 801c8a2:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 801c8a6:	2b00      	cmp	r3, #0
 801c8a8:	dc03      	bgt.n	801c8b2 <depthwise_conv_s8_generic+0xba>
 801c8aa:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 801c8ae:	425b      	negs	r3, r3
 801c8b0:	e000      	b.n	801c8b4 <depthwise_conv_s8_generic+0xbc>
 801c8b2:	2300      	movs	r3, #0
 801c8b4:	667b      	str	r3, [r7, #100]	; 0x64
                        /* Condition for kernel end dimension: (base_idx_<x,y> + ker_<x,y>_end) < input_<x,y> */
                        const int ker_y_end = MIN(kernel_y, input_y - base_idx_y);
 801c8b6:	88fa      	ldrh	r2, [r7, #6]
 801c8b8:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 801c8bc:	1ad2      	subs	r2, r2, r3
 801c8be:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 801c8c2:	4293      	cmp	r3, r2
 801c8c4:	bfa8      	it	ge
 801c8c6:	4613      	movge	r3, r2
 801c8c8:	663b      	str	r3, [r7, #96]	; 0x60
                        const int ker_x_end = MIN(kernel_x, input_x - base_idx_x);
 801c8ca:	893a      	ldrh	r2, [r7, #8]
 801c8cc:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 801c8d0:	1ad2      	subs	r2, r2, r3
 801c8d2:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 801c8d6:	4293      	cmp	r3, r2
 801c8d8:	bfa8      	it	ge
 801c8da:	4613      	movge	r3, r2
 801c8dc:	65fb      	str	r3, [r7, #92]	; 0x5c
                        acc_0 = bias[idx_out_ch];
 801c8de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c8e0:	009b      	lsls	r3, r3, #2
 801c8e2:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 801c8e6:	4413      	add	r3, r2
 801c8e8:	681b      	ldr	r3, [r3, #0]
 801c8ea:	67fb      	str	r3, [r7, #124]	; 0x7c

                        for (int i_ker_y = ker_y_start; i_ker_y < ker_y_end; i_ker_y++)
 801c8ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c8ee:	67bb      	str	r3, [r7, #120]	; 0x78
 801c8f0:	e04a      	b.n	801c988 <depthwise_conv_s8_generic+0x190>
                        {
                            const int32_t idx_y = base_idx_y + i_ker_y;
 801c8f2:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 801c8f6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801c8f8:	4413      	add	r3, r2
 801c8fa:	65bb      	str	r3, [r7, #88]	; 0x58
                            for (int i_ker_x = ker_x_start; i_ker_x < ker_x_end; i_ker_x++)
 801c8fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c8fe:	677b      	str	r3, [r7, #116]	; 0x74
 801c900:	e03b      	b.n	801c97a <depthwise_conv_s8_generic+0x182>
                            {
                                const int32_t idx_x = base_idx_x + i_ker_x;
 801c902:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 801c906:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801c908:	4413      	add	r3, r2
 801c90a:	657b      	str	r3, [r7, #84]	; 0x54
                                int32_t idx_0 = (idx_y * input_x + idx_x) * input_ch + i_input_ch;
 801c90c:	893b      	ldrh	r3, [r7, #8]
 801c90e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801c910:	fb02 f203 	mul.w	r2, r2, r3
 801c914:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c916:	4413      	add	r3, r2
 801c918:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 801c91c:	fb02 f303 	mul.w	r3, r2, r3
 801c920:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801c924:	4413      	add	r3, r2
 801c926:	653b      	str	r3, [r7, #80]	; 0x50
                                int32_t ker_idx_0 = (i_ker_y * kernel_x + i_ker_x) * (input_ch * ch_mult) + idx_out_ch;
 801c928:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 801c92c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801c92e:	fb02 f203 	mul.w	r2, r2, r3
 801c932:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801c934:	4413      	add	r3, r2
 801c936:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 801c93a:	f8b7 10bc 	ldrh.w	r1, [r7, #188]	; 0xbc
 801c93e:	fb01 f202 	mul.w	r2, r1, r2
 801c942:	fb02 f303 	mul.w	r3, r2, r3
 801c946:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801c948:	4413      	add	r3, r2
 801c94a:	64fb      	str	r3, [r7, #76]	; 0x4c

                                acc_0 += (input[idx_0] + input_offset) * kernel[ker_idx_0];
 801c94c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c94e:	68fa      	ldr	r2, [r7, #12]
 801c950:	4413      	add	r3, r2
 801c952:	f993 3000 	ldrsb.w	r3, [r3]
 801c956:	461a      	mov	r2, r3
 801c958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c95c:	4413      	add	r3, r2
 801c95e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801c960:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 801c964:	440a      	add	r2, r1
 801c966:	f992 2000 	ldrsb.w	r2, [r2]
 801c96a:	fb02 f303 	mul.w	r3, r2, r3
 801c96e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801c970:	4413      	add	r3, r2
 801c972:	67fb      	str	r3, [r7, #124]	; 0x7c
                            for (int i_ker_x = ker_x_start; i_ker_x < ker_x_end; i_ker_x++)
 801c974:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801c976:	3301      	adds	r3, #1
 801c978:	677b      	str	r3, [r7, #116]	; 0x74
 801c97a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801c97c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801c97e:	429a      	cmp	r2, r3
 801c980:	dbbf      	blt.n	801c902 <depthwise_conv_s8_generic+0x10a>
                        for (int i_ker_y = ker_y_start; i_ker_y < ker_y_end; i_ker_y++)
 801c982:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801c984:	3301      	adds	r3, #1
 801c986:	67bb      	str	r3, [r7, #120]	; 0x78
 801c988:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801c98a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801c98c:	429a      	cmp	r2, r3
 801c98e:	dbb0      	blt.n	801c8f2 <depthwise_conv_s8_generic+0xfa>
                            }
                        }

                        /* Requantize and clamp output to provided range */
                        acc_0 = arm_nn_requantize(acc_0, output_mult[idx_out_ch], output_shift[idx_out_ch]);
 801c990:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c992:	009b      	lsls	r3, r3, #2
 801c994:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 801c998:	4413      	add	r3, r2
 801c99a:	681a      	ldr	r2, [r3, #0]
 801c99c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c99e:	009b      	lsls	r3, r3, #2
 801c9a0:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 801c9a4:	440b      	add	r3, r1
 801c9a6:	681b      	ldr	r3, [r3, #0]
 801c9a8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801c9aa:	64b9      	str	r1, [r7, #72]	; 0x48
 801c9ac:	647a      	str	r2, [r7, #68]	; 0x44
 801c9ae:	643b      	str	r3, [r7, #64]	; 0x40
 801c9b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c9b2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c9b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801c9b8:	fa02 f303 	lsl.w	r3, r2, r3
 801c9bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 801c9be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c9c0:	63bb      	str	r3, [r7, #56]	; 0x38
    q31_t result = 0;
 801c9c2:	2300      	movs	r3, #0
 801c9c4:	637b      	str	r3, [r7, #52]	; 0x34
    mult.word.low = 1 << 30;
 801c9c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801c9ca:	613b      	str	r3, [r7, #16]
    mult.word.high = 0;
 801c9cc:	2300      	movs	r3, #0
 801c9ce:	617b      	str	r3, [r7, #20]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801c9d0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 801c9d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c9d6:	4618      	mov	r0, r3
 801c9d8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801c9dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c9de:	461a      	mov	r2, r3
 801c9e0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801c9e4:	fb02 fc01 	mul.w	ip, r2, r1
 801c9e8:	fb00 f603 	mul.w	r6, r0, r3
 801c9ec:	4466      	add	r6, ip
 801c9ee:	fba0 2302 	umull	r2, r3, r0, r2
 801c9f2:	18f1      	adds	r1, r6, r3
 801c9f4:	460b      	mov	r3, r1
 801c9f6:	eb14 0802 	adds.w	r8, r4, r2
 801c9fa:	eb45 0903 	adc.w	r9, r5, r3
 801c9fe:	e9c7 8904 	strd	r8, r9, [r7, #16]
    result = (int32_t)(mult.long_long >> 31);
 801ca02:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801ca06:	f04f 0200 	mov.w	r2, #0
 801ca0a:	f04f 0300 	mov.w	r3, #0
 801ca0e:	0fc2      	lsrs	r2, r0, #31
 801ca10:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801ca14:	17cb      	asrs	r3, r1, #31
 801ca16:	4613      	mov	r3, r2
 801ca18:	637b      	str	r3, [r7, #52]	; 0x34
    return result;
 801ca1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801ca1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ca1e:	2b00      	cmp	r3, #0
 801ca20:	dc02      	bgt.n	801ca28 <depthwise_conv_s8_generic+0x230>
 801ca22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ca24:	425b      	negs	r3, r3
 801ca26:	e000      	b.n	801ca2a <depthwise_conv_s8_generic+0x232>
 801ca28:	2300      	movs	r3, #0
 801ca2a:	633a      	str	r2, [r7, #48]	; 0x30
 801ca2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    q31_t result = 0;
 801ca2e:	2300      	movs	r3, #0
 801ca30:	62bb      	str	r3, [r7, #40]	; 0x28
    const q31_t remainder_mask = (1 << exponent) - 1;
 801ca32:	2201      	movs	r2, #1
 801ca34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ca36:	fa02 f303 	lsl.w	r3, r2, r3
 801ca3a:	3b01      	subs	r3, #1
 801ca3c:	627b      	str	r3, [r7, #36]	; 0x24
    int32_t remainder = remainder_mask & dividend;
 801ca3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ca40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ca42:	4013      	ands	r3, r2
 801ca44:	623b      	str	r3, [r7, #32]
    result = dividend >> exponent;
 801ca46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ca48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ca4a:	fa42 f303 	asr.w	r3, r2, r3
 801ca4e:	62bb      	str	r3, [r7, #40]	; 0x28
    q31_t threshold = remainder_mask >> 1;
 801ca50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ca52:	105b      	asrs	r3, r3, #1
 801ca54:	61fb      	str	r3, [r7, #28]
    if (result < 0)
 801ca56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ca58:	2b00      	cmp	r3, #0
 801ca5a:	da02      	bge.n	801ca62 <depthwise_conv_s8_generic+0x26a>
        threshold++;
 801ca5c:	69fb      	ldr	r3, [r7, #28]
 801ca5e:	3301      	adds	r3, #1
 801ca60:	61fb      	str	r3, [r7, #28]
    if (remainder > threshold)
 801ca62:	6a3a      	ldr	r2, [r7, #32]
 801ca64:	69fb      	ldr	r3, [r7, #28]
 801ca66:	429a      	cmp	r2, r3
 801ca68:	dd02      	ble.n	801ca70 <depthwise_conv_s8_generic+0x278>
        result++;
 801ca6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ca6c:	3301      	adds	r3, #1
 801ca6e:	62bb      	str	r3, [r7, #40]	; 0x28
    return result;
 801ca70:	6abb      	ldr	r3, [r7, #40]	; 0x28
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801ca72:	bf00      	nop
 801ca74:	67fb      	str	r3, [r7, #124]	; 0x7c
                        acc_0 += output_offset;
 801ca76:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801ca78:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801ca7c:	4413      	add	r3, r2
 801ca7e:	67fb      	str	r3, [r7, #124]	; 0x7c
                        acc_0 = MAX(acc_0, output_activation_min);
 801ca80:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801ca82:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801ca86:	4293      	cmp	r3, r2
 801ca88:	bfb8      	it	lt
 801ca8a:	4613      	movlt	r3, r2
 801ca8c:	67fb      	str	r3, [r7, #124]	; 0x7c
                        acc_0 = MIN(acc_0, output_activation_max);
 801ca8e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801ca90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801ca94:	4293      	cmp	r3, r2
 801ca96:	bfa8      	it	ge
 801ca98:	4613      	movge	r3, r2
 801ca9a:	67fb      	str	r3, [r7, #124]	; 0x7c

                        output[i_out++] = acc_0;
 801ca9c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801caa0:	1c5a      	adds	r2, r3, #1
 801caa2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 801caa6:	461a      	mov	r2, r3
 801caa8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801caac:	4413      	add	r3, r2
 801caae:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801cab0:	b252      	sxtb	r2, r2
 801cab2:	701a      	strb	r2, [r3, #0]
                    for (int i_ch_mult = 0; i_ch_mult < ch_mult; i_ch_mult++)
 801cab4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801cab8:	3301      	adds	r3, #1
 801caba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801cabe:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 801cac2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801cac6:	429a      	cmp	r2, r3
 801cac8:	f6ff aed7 	blt.w	801c87a <depthwise_conv_s8_generic+0x82>
                for (int i_input_ch = 0; i_input_ch < input_ch; i_input_ch++)
 801cacc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801cad0:	3301      	adds	r3, #1
 801cad2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801cad6:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 801cada:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801cade:	429a      	cmp	r2, r3
 801cae0:	f6ff aec7 	blt.w	801c872 <depthwise_conv_s8_generic+0x7a>
            for (int i_out_x = 0; i_out_x < output_x; i_out_x++)
 801cae4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801cae8:	3301      	adds	r3, #1
 801caea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801caee:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
 801caf2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801caf6:	429a      	cmp	r2, r3
 801caf8:	f6ff aea9 	blt.w	801c84e <depthwise_conv_s8_generic+0x56>
        for (int i_out_y = 0; i_out_y < output_y; i_out_y++)
 801cafc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801cb00:	3301      	adds	r3, #1
 801cb02:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801cb06:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	; 0xec
 801cb0a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801cb0e:	429a      	cmp	r2, r3
 801cb10:	f6ff ae8b 	blt.w	801c82a <depthwise_conv_s8_generic+0x32>
                    }
                }
            }
        }
        /* Advance to the next batch */
        input += (input_x * input_y * input_ch);
 801cb14:	893b      	ldrh	r3, [r7, #8]
 801cb16:	88fa      	ldrh	r2, [r7, #6]
 801cb18:	fb02 f303 	mul.w	r3, r2, r3
 801cb1c:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 801cb20:	fb02 f303 	mul.w	r3, r2, r3
 801cb24:	461a      	mov	r2, r3
 801cb26:	68fb      	ldr	r3, [r7, #12]
 801cb28:	4413      	add	r3, r2
 801cb2a:	60fb      	str	r3, [r7, #12]
    for (i_batch = 0; i_batch < input_batches; i_batch++)
 801cb2c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801cb30:	3301      	adds	r3, #1
 801cb32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801cb36:	897b      	ldrh	r3, [r7, #10]
 801cb38:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801cb3c:	429a      	cmp	r2, r3
 801cb3e:	f6ff ae70 	blt.w	801c822 <depthwise_conv_s8_generic+0x2a>
    }
}
 801cb42:	bf00      	nop
 801cb44:	bf00      	nop
 801cb46:	3798      	adds	r7, #152	; 0x98
 801cb48:	46bd      	mov	sp, r7
 801cb4a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 801cb4e:	4770      	bx	lr

0801cb50 <arm_depthwise_conv_s8>:
                                 const q7_t *kernel,
                                 const cmsis_nn_dims *bias_dims,
                                 const int32_t *bias,
                                 const cmsis_nn_dims *output_dims,
                                 q7_t *output)
{
 801cb50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cb54:	b0a4      	sub	sp, #144	; 0x90
 801cb56:	af14      	add	r7, sp, #80	; 0x50
 801cb58:	63f8      	str	r0, [r7, #60]	; 0x3c
 801cb5a:	63b9      	str	r1, [r7, #56]	; 0x38
 801cb5c:	637a      	str	r2, [r7, #52]	; 0x34
 801cb5e:	633b      	str	r3, [r7, #48]	; 0x30
    (void)dw_conv_params->dilation;
    (void)bias_dims;
    (void)ctx;

    if (dw_conv_params->ch_mult % 4 == 0 && input_dims->n == 1)
 801cb60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cb62:	689b      	ldr	r3, [r3, #8]
 801cb64:	f003 0303 	and.w	r3, r3, #3
 801cb68:	2b00      	cmp	r3, #0
 801cb6a:	d15b      	bne.n	801cc24 <arm_depthwise_conv_s8+0xd4>
 801cb6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cb6e:	681b      	ldr	r3, [r3, #0]
 801cb70:	2b01      	cmp	r3, #1
 801cb72:	d157      	bne.n	801cc24 <arm_depthwise_conv_s8+0xd4>
    {
        depthwise_conv_s8_mult_4(input,
 801cb74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cb76:	689b      	ldr	r3, [r3, #8]
 801cb78:	62fb      	str	r3, [r7, #44]	; 0x2c
 801cb7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cb7c:	685a      	ldr	r2, [r3, #4]
 801cb7e:	62ba      	str	r2, [r7, #40]	; 0x28
 801cb80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cb82:	68d8      	ldr	r0, [r3, #12]
 801cb84:	6278      	str	r0, [r7, #36]	; 0x24
 801cb86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801cb88:	68de      	ldr	r6, [r3, #12]
 801cb8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cb8c:	689c      	ldr	r4, [r3, #8]
 801cb8e:	623c      	str	r4, [r7, #32]
 801cb90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801cb92:	689d      	ldr	r5, [r3, #8]
 801cb94:	61fd      	str	r5, [r7, #28]
 801cb96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801cb98:	6859      	ldr	r1, [r3, #4]
 801cb9a:	61b9      	str	r1, [r7, #24]
 801cb9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cb9e:	6958      	ldr	r0, [r3, #20]
 801cba0:	6178      	str	r0, [r7, #20]
 801cba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cba4:	699b      	ldr	r3, [r3, #24]
 801cba6:	613b      	str	r3, [r7, #16]
 801cba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cbaa:	68da      	ldr	r2, [r3, #12]
 801cbac:	60fa      	str	r2, [r7, #12]
 801cbae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cbb0:	691c      	ldr	r4, [r3, #16]
 801cbb2:	60bc      	str	r4, [r7, #8]
                                 dw_conv_params->padding.h,
                                 dw_conv_params->stride.w,
                                 dw_conv_params->stride.h,
                                 bias,
                                 output,
                                 quant_params->shift,
 801cbb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cbb6:	685d      	ldr	r5, [r3, #4]
 801cbb8:	607d      	str	r5, [r7, #4]
                                 quant_params->multiplier,
 801cbba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cbbc:	6819      	ldr	r1, [r3, #0]
 801cbbe:	6039      	str	r1, [r7, #0]
        depthwise_conv_s8_mult_4(input,
 801cbc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801cbc2:	689d      	ldr	r5, [r3, #8]
 801cbc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801cbc6:	685c      	ldr	r4, [r3, #4]
 801cbc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cbca:	6858      	ldr	r0, [r3, #4]
 801cbcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cbce:	6819      	ldr	r1, [r3, #0]
 801cbd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cbd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801cbd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cbd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cbd8:	9312      	str	r3, [sp, #72]	; 0x48
 801cbda:	9211      	str	r2, [sp, #68]	; 0x44
 801cbdc:	9110      	str	r1, [sp, #64]	; 0x40
 801cbde:	900f      	str	r0, [sp, #60]	; 0x3c
 801cbe0:	940e      	str	r4, [sp, #56]	; 0x38
 801cbe2:	950d      	str	r5, [sp, #52]	; 0x34
 801cbe4:	6839      	ldr	r1, [r7, #0]
 801cbe6:	910c      	str	r1, [sp, #48]	; 0x30
 801cbe8:	687d      	ldr	r5, [r7, #4]
 801cbea:	950b      	str	r5, [sp, #44]	; 0x2c
 801cbec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801cbee:	930a      	str	r3, [sp, #40]	; 0x28
 801cbf0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801cbf2:	9309      	str	r3, [sp, #36]	; 0x24
 801cbf4:	68bc      	ldr	r4, [r7, #8]
 801cbf6:	9408      	str	r4, [sp, #32]
 801cbf8:	68fa      	ldr	r2, [r7, #12]
 801cbfa:	9207      	str	r2, [sp, #28]
 801cbfc:	693b      	ldr	r3, [r7, #16]
 801cbfe:	9306      	str	r3, [sp, #24]
 801cc00:	6978      	ldr	r0, [r7, #20]
 801cc02:	9005      	str	r0, [sp, #20]
 801cc04:	69b9      	ldr	r1, [r7, #24]
 801cc06:	9104      	str	r1, [sp, #16]
 801cc08:	69fd      	ldr	r5, [r7, #28]
 801cc0a:	9503      	str	r5, [sp, #12]
 801cc0c:	6a3c      	ldr	r4, [r7, #32]
 801cc0e:	9402      	str	r4, [sp, #8]
 801cc10:	9601      	str	r6, [sp, #4]
 801cc12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801cc14:	9300      	str	r3, [sp, #0]
 801cc16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cc18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801cc1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801cc1c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801cc1e:	f7ff f90c 	bl	801be3a <depthwise_conv_s8_mult_4>
 801cc22:	e069      	b.n	801ccf8 <arm_depthwise_conv_s8+0x1a8>
                                 dw_conv_params->activation.max);
    }
    else
    {
        depthwise_conv_s8_generic(input,
                                  input_dims->n,
 801cc24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cc26:	681b      	ldr	r3, [r3, #0]
        depthwise_conv_s8_generic(input,
 801cc28:	fa1f fc83 	uxth.w	ip, r3
                                  input_dims->w,
 801cc2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cc2e:	689b      	ldr	r3, [r3, #8]
        depthwise_conv_s8_generic(input,
 801cc30:	fa1f fe83 	uxth.w	lr, r3
                                  input_dims->h,
 801cc34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cc36:	685b      	ldr	r3, [r3, #4]
        depthwise_conv_s8_generic(input,
 801cc38:	fa1f f883 	uxth.w	r8, r3
                                  input_dims->c,
 801cc3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cc3e:	68db      	ldr	r3, [r3, #12]
        depthwise_conv_s8_generic(input,
 801cc40:	b29b      	uxth	r3, r3
 801cc42:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  kernel,
                                  output_dims->c,
 801cc44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801cc46:	68db      	ldr	r3, [r3, #12]
        depthwise_conv_s8_generic(input,
 801cc48:	b29a      	uxth	r2, r3
 801cc4a:	62ba      	str	r2, [r7, #40]	; 0x28
                                  dw_conv_params->ch_mult,
 801cc4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cc4e:	689b      	ldr	r3, [r3, #8]
        depthwise_conv_s8_generic(input,
 801cc50:	b299      	uxth	r1, r3
 801cc52:	6279      	str	r1, [r7, #36]	; 0x24
                                  filter_dims->w,
 801cc54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801cc56:	689b      	ldr	r3, [r3, #8]
        depthwise_conv_s8_generic(input,
 801cc58:	b298      	uxth	r0, r3
 801cc5a:	6238      	str	r0, [r7, #32]
                                  filter_dims->h,
 801cc5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801cc5e:	685b      	ldr	r3, [r3, #4]
        depthwise_conv_s8_generic(input,
 801cc60:	b29c      	uxth	r4, r3
 801cc62:	61fc      	str	r4, [r7, #28]
                                  dw_conv_params->padding.w,
 801cc64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cc66:	695b      	ldr	r3, [r3, #20]
        depthwise_conv_s8_generic(input,
 801cc68:	b29d      	uxth	r5, r3
 801cc6a:	61bd      	str	r5, [r7, #24]
                                  dw_conv_params->padding.h,
 801cc6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cc6e:	699b      	ldr	r3, [r3, #24]
        depthwise_conv_s8_generic(input,
 801cc70:	b29e      	uxth	r6, r3
 801cc72:	617e      	str	r6, [r7, #20]
                                  dw_conv_params->stride.w,
 801cc74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cc76:	68db      	ldr	r3, [r3, #12]
        depthwise_conv_s8_generic(input,
 801cc78:	b29b      	uxth	r3, r3
 801cc7a:	613b      	str	r3, [r7, #16]
                                  dw_conv_params->stride.h,
 801cc7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cc7e:	691b      	ldr	r3, [r3, #16]
        depthwise_conv_s8_generic(input,
 801cc80:	b29a      	uxth	r2, r3
 801cc82:	60fa      	str	r2, [r7, #12]
                                  bias,
                                  output,
                                  quant_params->shift,
 801cc84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cc86:	6859      	ldr	r1, [r3, #4]
 801cc88:	60b9      	str	r1, [r7, #8]
                                  quant_params->multiplier,
 801cc8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cc8c:	681e      	ldr	r6, [r3, #0]
                                  output_dims->w,
 801cc8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801cc90:	689b      	ldr	r3, [r3, #8]
        depthwise_conv_s8_generic(input,
 801cc92:	b29d      	uxth	r5, r3
                                  output_dims->h,
 801cc94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801cc96:	685b      	ldr	r3, [r3, #4]
        depthwise_conv_s8_generic(input,
 801cc98:	b29c      	uxth	r4, r3
 801cc9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cc9c:	6858      	ldr	r0, [r3, #4]
 801cc9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cca0:	6819      	ldr	r1, [r3, #0]
 801cca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cca4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801cca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ccaa:	9313      	str	r3, [sp, #76]	; 0x4c
 801ccac:	9212      	str	r2, [sp, #72]	; 0x48
 801ccae:	9111      	str	r1, [sp, #68]	; 0x44
 801ccb0:	9010      	str	r0, [sp, #64]	; 0x40
 801ccb2:	940f      	str	r4, [sp, #60]	; 0x3c
 801ccb4:	950e      	str	r5, [sp, #56]	; 0x38
 801ccb6:	960d      	str	r6, [sp, #52]	; 0x34
 801ccb8:	68b9      	ldr	r1, [r7, #8]
 801ccba:	910c      	str	r1, [sp, #48]	; 0x30
 801ccbc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801ccbe:	930b      	str	r3, [sp, #44]	; 0x2c
 801ccc0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801ccc2:	930a      	str	r3, [sp, #40]	; 0x28
 801ccc4:	68fa      	ldr	r2, [r7, #12]
 801ccc6:	9209      	str	r2, [sp, #36]	; 0x24
 801ccc8:	693b      	ldr	r3, [r7, #16]
 801ccca:	9308      	str	r3, [sp, #32]
 801cccc:	697e      	ldr	r6, [r7, #20]
 801ccce:	9607      	str	r6, [sp, #28]
 801ccd0:	69bd      	ldr	r5, [r7, #24]
 801ccd2:	9506      	str	r5, [sp, #24]
 801ccd4:	69fc      	ldr	r4, [r7, #28]
 801ccd6:	9405      	str	r4, [sp, #20]
 801ccd8:	6a38      	ldr	r0, [r7, #32]
 801ccda:	9004      	str	r0, [sp, #16]
 801ccdc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801ccde:	9103      	str	r1, [sp, #12]
 801cce0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801cce2:	9202      	str	r2, [sp, #8]
 801cce4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801cce6:	9301      	str	r3, [sp, #4]
 801cce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ccea:	9300      	str	r3, [sp, #0]
 801ccec:	4643      	mov	r3, r8
 801ccee:	4672      	mov	r2, lr
 801ccf0:	4661      	mov	r1, ip
 801ccf2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801ccf4:	f7ff fd80 	bl	801c7f8 <depthwise_conv_s8_generic>
                                  dw_conv_params->activation.min,
                                  dw_conv_params->activation.max);
    }

    /* Return to application */
    return ARM_MATH_SUCCESS;
 801ccf8:	2300      	movs	r3, #0
}
 801ccfa:	4618      	mov	r0, r3
 801ccfc:	3740      	adds	r7, #64	; 0x40
 801ccfe:	46bd      	mov	sp, r7
 801cd00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801cd04 <arm_depthwise_conv_s8_opt>:
                                     const q7_t *kernel,
                                     const cmsis_nn_dims *bias_dims,
                                     const int32_t *bias,
                                     const cmsis_nn_dims *output_dims,
                                     q7_t *output)
{
 801cd04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801cd08:	f5ad 7d4a 	sub.w	sp, sp, #808	; 0x328
 801cd0c:	af00      	add	r7, sp, #0
 801cd0e:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 801cd12:	6020      	str	r0, [r4, #0]
 801cd14:	f107 0028 	add.w	r0, r7, #40	; 0x28
 801cd18:	6001      	str	r1, [r0, #0]
 801cd1a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 801cd1e:	600a      	str	r2, [r1, #0]
 801cd20:	f107 0220 	add.w	r2, r7, #32
 801cd24:	6013      	str	r3, [r2, #0]

    const int32_t input_ch = input_dims->c;
 801cd26:	f107 0320 	add.w	r3, r7, #32
 801cd2a:	681b      	ldr	r3, [r3, #0]
 801cd2c:	68db      	ldr	r3, [r3, #12]
 801cd2e:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
    const int32_t output_ch = output_dims->c;
 801cd32:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 801cd36:	68db      	ldr	r3, [r3, #12]
 801cd38:	f8c7 32d8 	str.w	r3, [r7, #728]	; 0x2d8

    /* Check input constraints input_ch == output_ch */
    if (input_ch != output_ch)
 801cd3c:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 801cd40:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 801cd44:	429a      	cmp	r2, r3
 801cd46:	d003      	beq.n	801cd50 <arm_depthwise_conv_s8_opt+0x4c>
    {
        return ARM_MATH_SIZE_MISMATCH;
 801cd48:	f06f 0302 	mvn.w	r3, #2
 801cd4c:	f001 b99b 	b.w	801e086 <arm_depthwise_conv_s8_opt+0x1382>
    }
#ifdef ARM_MATH_DSP
    const int32_t input_x = input_dims->w;
 801cd50:	f107 0320 	add.w	r3, r7, #32
 801cd54:	681b      	ldr	r3, [r3, #0]
 801cd56:	689b      	ldr	r3, [r3, #8]
 801cd58:	f8c7 32d4 	str.w	r3, [r7, #724]	; 0x2d4
    const int32_t input_y = input_dims->h;
 801cd5c:	f107 0320 	add.w	r3, r7, #32
 801cd60:	681b      	ldr	r3, [r3, #0]
 801cd62:	685b      	ldr	r3, [r3, #4]
 801cd64:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
    const int32_t kernel_x = filter_dims->w;
 801cd68:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 801cd6c:	689b      	ldr	r3, [r3, #8]
 801cd6e:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
    const int32_t kernel_y = filter_dims->h;
 801cd72:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 801cd76:	685b      	ldr	r3, [r3, #4]
 801cd78:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
    const int32_t pad_x = dw_conv_params->padding.w;
 801cd7c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801cd80:	681b      	ldr	r3, [r3, #0]
 801cd82:	695b      	ldr	r3, [r3, #20]
 801cd84:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
    const int32_t pad_y = dw_conv_params->padding.h;
 801cd88:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801cd8c:	681b      	ldr	r3, [r3, #0]
 801cd8e:	699b      	ldr	r3, [r3, #24]
 801cd90:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
    const int32_t stride_x = dw_conv_params->stride.w;
 801cd94:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801cd98:	681b      	ldr	r3, [r3, #0]
 801cd9a:	68db      	ldr	r3, [r3, #12]
 801cd9c:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
    const int32_t stride_y = dw_conv_params->stride.h;
 801cda0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801cda4:	681b      	ldr	r3, [r3, #0]
 801cda6:	691b      	ldr	r3, [r3, #16]
 801cda8:	f8c7 32b8 	str.w	r3, [r7, #696]	; 0x2b8
    const int32_t *output_shift = quant_params->shift;
 801cdac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801cdb0:	681b      	ldr	r3, [r3, #0]
 801cdb2:	685b      	ldr	r3, [r3, #4]
 801cdb4:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
    const int32_t *output_mult = quant_params->multiplier;
 801cdb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801cdbc:	681b      	ldr	r3, [r3, #0]
 801cdbe:	681b      	ldr	r3, [r3, #0]
 801cdc0:	f8c7 3320 	str.w	r3, [r7, #800]	; 0x320
    const int32_t output_x = output_dims->w;
 801cdc4:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 801cdc8:	689b      	ldr	r3, [r3, #8]
 801cdca:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
    const int32_t output_y = output_dims->h;
 801cdce:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 801cdd2:	685b      	ldr	r3, [r3, #4]
 801cdd4:	f8c7 32b0 	str.w	r3, [r7, #688]	; 0x2b0
    const int32_t output_offset = dw_conv_params->output_offset;
 801cdd8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801cddc:	681b      	ldr	r3, [r3, #0]
 801cdde:	685b      	ldr	r3, [r3, #4]
 801cde0:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
    const int32_t input_offset = dw_conv_params->input_offset;
 801cde4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801cde8:	681b      	ldr	r3, [r3, #0]
 801cdea:	681b      	ldr	r3, [r3, #0]
 801cdec:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
    const int32_t output_activation_min = dw_conv_params->activation.min;
 801cdf0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801cdf4:	681b      	ldr	r3, [r3, #0]
 801cdf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cdf8:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
    const int32_t output_activation_max = dw_conv_params->activation.max;
 801cdfc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801ce00:	681b      	ldr	r3, [r3, #0]
 801ce02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ce04:	f8c7 32a0 	str.w	r3, [r7, #672]	; 0x2a0
    q15_t *buffer_a = (q15_t *)ctx->buf;
 801ce08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801ce0c:	681b      	ldr	r3, [r3, #0]
 801ce0e:	681b      	ldr	r3, [r3, #0]
 801ce10:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
    }

#else // ARM_MATH_DSP
    (void)bias_dims;
    /* Run the following code in cores using DSP extension */
    q15_t *const col_buffer_start = buffer_a;
 801ce14:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 801ce18:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
    q15_t *col_buffer = col_buffer_start;
 801ce1c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801ce20:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
    const int32_t *const bias_start_pos = bias;
 801ce24:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 801ce28:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
    const q31_t *const out_mult_start_pos = output_mult;
 801ce2c:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 801ce30:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
    const q31_t *const out_shift_start_pos = output_shift;
 801ce34:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 801ce38:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
    uint16_t row_count;
    uint16_t row_shift;

    for (int i_out_y = 0; i_out_y < output_y; i_out_y++)
 801ce3c:	2300      	movs	r3, #0
 801ce3e:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
 801ce42:	f001 b918 	b.w	801e076 <arm_depthwise_conv_s8_opt+0x1372>
    {
        const int16_t base_idx_y = (i_out_y * stride_y) - pad_y;
 801ce46:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 801ce4a:	b29a      	uxth	r2, r3
 801ce4c:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 801ce50:	b29b      	uxth	r3, r3
 801ce52:	fb12 f303 	smulbb	r3, r2, r3
 801ce56:	b29a      	uxth	r2, r3
 801ce58:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 801ce5c:	b29b      	uxth	r3, r3
 801ce5e:	1ad3      	subs	r3, r2, r3
 801ce60:	b29b      	uxth	r3, r3
 801ce62:	f8a7 328a 	strh.w	r3, [r7, #650]	; 0x28a
        for (int i_out_x = 0; i_out_x < output_x; i_out_x++)
 801ce66:	2300      	movs	r3, #0
 801ce68:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
 801ce6c:	f001 b8f7 	b.w	801e05e <arm_depthwise_conv_s8_opt+0x135a>
        {
            const int16_t base_idx_x = (i_out_x * stride_x) - pad_x;
 801ce70:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 801ce74:	b29a      	uxth	r2, r3
 801ce76:	f8d7 32bc 	ldr.w	r3, [r7, #700]	; 0x2bc
 801ce7a:	b29b      	uxth	r3, r3
 801ce7c:	fb12 f303 	smulbb	r3, r2, r3
 801ce80:	b29a      	uxth	r2, r3
 801ce82:	f8d7 32c4 	ldr.w	r3, [r7, #708]	; 0x2c4
 801ce86:	b29b      	uxth	r3, r3
 801ce88:	1ad3      	subs	r3, r2, r3
 801ce8a:	b29b      	uxth	r3, r3
 801ce8c:	f8a7 3288 	strh.w	r3, [r7, #648]	; 0x288

            /* Out of bounds is only considered for the y axis as it provides a contiguous zero'ing opportunity than
               along the x axis */
            const int ker_y_start = MAX(0, -base_idx_y);
 801ce90:	f9b7 328a 	ldrsh.w	r3, [r7, #650]	; 0x28a
 801ce94:	2b00      	cmp	r3, #0
 801ce96:	dc03      	bgt.n	801cea0 <arm_depthwise_conv_s8_opt+0x19c>
 801ce98:	f9b7 328a 	ldrsh.w	r3, [r7, #650]	; 0x28a
 801ce9c:	425b      	negs	r3, r3
 801ce9e:	e000      	b.n	801cea2 <arm_depthwise_conv_s8_opt+0x19e>
 801cea0:	2300      	movs	r3, #0
 801cea2:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
            /* Condition for kernel end dimension: (base_idx_y + ker_y_end) < input_y */
            const int ker_y_end = MIN(kernel_y, input_y - base_idx_y);
 801cea6:	f9b7 328a 	ldrsh.w	r3, [r7, #650]	; 0x28a
 801ceaa:	f8d7 22d0 	ldr.w	r2, [r7, #720]	; 0x2d0
 801ceae:	1ad3      	subs	r3, r2, r3
 801ceb0:	f8d7 22c8 	ldr.w	r2, [r7, #712]	; 0x2c8
 801ceb4:	4293      	cmp	r3, r2
 801ceb6:	bfa8      	it	ge
 801ceb8:	4613      	movge	r3, r2
 801ceba:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280

            int32_t index = 0;
 801cebe:	2300      	movs	r3, #0
 801cec0:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
            if (ker_y_start != 0)
 801cec4:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 801cec8:	2b00      	cmp	r3, #0
 801ceca:	d023      	beq.n	801cf14 <arm_depthwise_conv_s8_opt+0x210>
            {
                memset(&col_buffer[index], 0, (kernel_x * input_ch) * ker_y_start * sizeof(q15_t));
 801cecc:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
 801ced0:	005b      	lsls	r3, r3, #1
 801ced2:	f8d7 231c 	ldr.w	r2, [r7, #796]	; 0x31c
 801ced6:	18d0      	adds	r0, r2, r3
 801ced8:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 801cedc:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 801cee0:	fb02 f303 	mul.w	r3, r2, r3
 801cee4:	f8d7 2284 	ldr.w	r2, [r7, #644]	; 0x284
 801cee8:	fb02 f303 	mul.w	r3, r2, r3
 801ceec:	005b      	lsls	r3, r3, #1
 801ceee:	461a      	mov	r2, r3
 801cef0:	2100      	movs	r1, #0
 801cef2:	f009 ffa3 	bl	8026e3c <memset>
                index += (kernel_x * input_ch) * ker_y_start;
 801cef6:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 801cefa:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 801cefe:	fb02 f303 	mul.w	r3, r2, r3
 801cf02:	f8d7 2284 	ldr.w	r2, [r7, #644]	; 0x284
 801cf06:	fb02 f303 	mul.w	r3, r2, r3
 801cf0a:	f8d7 230c 	ldr.w	r2, [r7, #780]	; 0x30c
 801cf0e:	4413      	add	r3, r2
 801cf10:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
            }

            for (int i_ker_y = ker_y_start; i_ker_y < ker_y_end; i_ker_y++)
 801cf14:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 801cf18:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
 801cf1c:	e064      	b.n	801cfe8 <arm_depthwise_conv_s8_opt+0x2e4>
            {
                const int32_t idx_y = base_idx_y + i_ker_y;
 801cf1e:	f9b7 228a 	ldrsh.w	r2, [r7, #650]	; 0x28a
 801cf22:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 801cf26:	f8d7 1308 	ldr.w	r1, [r7, #776]	; 0x308
 801cf2a:	440a      	add	r2, r1
 801cf2c:	601a      	str	r2, [r3, #0]

                for (int i_ker_x = 0; i_ker_x < kernel_x; i_ker_x++)
 801cf2e:	2300      	movs	r3, #0
 801cf30:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
 801cf34:	e04d      	b.n	801cfd2 <arm_depthwise_conv_s8_opt+0x2ce>
                {
                    const int32_t idx_x = base_idx_x + i_ker_x;
 801cf36:	f9b7 2288 	ldrsh.w	r2, [r7, #648]	; 0x288
 801cf3a:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 801cf3e:	f8d7 1304 	ldr.w	r1, [r7, #772]	; 0x304
 801cf42:	440a      	add	r2, r1
 801cf44:	601a      	str	r2, [r3, #0]
                    if (idx_x < 0 || idx_x >= input_x)
 801cf46:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 801cf4a:	681b      	ldr	r3, [r3, #0]
 801cf4c:	2b00      	cmp	r3, #0
 801cf4e:	db06      	blt.n	801cf5e <arm_depthwise_conv_s8_opt+0x25a>
 801cf50:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 801cf54:	681a      	ldr	r2, [r3, #0]
 801cf56:	f8d7 32d4 	ldr.w	r3, [r7, #724]	; 0x2d4
 801cf5a:	429a      	cmp	r2, r3
 801cf5c:	db0d      	blt.n	801cf7a <arm_depthwise_conv_s8_opt+0x276>
                    {
                        memset(&col_buffer[index], 0, input_ch * sizeof(q15_t));
 801cf5e:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
 801cf62:	005b      	lsls	r3, r3, #1
 801cf64:	f8d7 231c 	ldr.w	r2, [r7, #796]	; 0x31c
 801cf68:	18d0      	adds	r0, r2, r3
 801cf6a:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 801cf6e:	005b      	lsls	r3, r3, #1
 801cf70:	461a      	mov	r2, r3
 801cf72:	2100      	movs	r1, #0
 801cf74:	f009 ff62 	bl	8026e3c <memset>
 801cf78:	e01f      	b.n	801cfba <arm_depthwise_conv_s8_opt+0x2b6>
                    }
                    else
                    {
                        arm_q7_to_q15_with_offset((q7_t *)input + (idx_y * input_x + idx_x) * input_ch,
 801cf7a:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 801cf7e:	681b      	ldr	r3, [r3, #0]
 801cf80:	f8d7 22d4 	ldr.w	r2, [r7, #724]	; 0x2d4
 801cf84:	fb02 f203 	mul.w	r2, r2, r3
 801cf88:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 801cf8c:	681b      	ldr	r3, [r3, #0]
 801cf8e:	4413      	add	r3, r2
 801cf90:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 801cf94:	fb02 f303 	mul.w	r3, r2, r3
 801cf98:	461a      	mov	r2, r3
 801cf9a:	f8d7 3348 	ldr.w	r3, [r7, #840]	; 0x348
 801cf9e:	1898      	adds	r0, r3, r2
                                                  &col_buffer[index],
 801cfa0:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
 801cfa4:	005b      	lsls	r3, r3, #1
                        arm_q7_to_q15_with_offset((q7_t *)input + (idx_y * input_x + idx_x) * input_ch,
 801cfa6:	f8d7 231c 	ldr.w	r2, [r7, #796]	; 0x31c
 801cfaa:	18d1      	adds	r1, r2, r3
 801cfac:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 801cfb0:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 801cfb4:	b21b      	sxth	r3, r3
 801cfb6:	f005 ff62 	bl	8022e7e <arm_q7_to_q15_with_offset>
                                                  input_ch,
                                                  input_offset);
                    }
                    index += input_ch;
 801cfba:	f8d7 230c 	ldr.w	r2, [r7, #780]	; 0x30c
 801cfbe:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 801cfc2:	4413      	add	r3, r2
 801cfc4:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
                for (int i_ker_x = 0; i_ker_x < kernel_x; i_ker_x++)
 801cfc8:	f8d7 3304 	ldr.w	r3, [r7, #772]	; 0x304
 801cfcc:	3301      	adds	r3, #1
 801cfce:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
 801cfd2:	f8d7 2304 	ldr.w	r2, [r7, #772]	; 0x304
 801cfd6:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 801cfda:	429a      	cmp	r2, r3
 801cfdc:	dbab      	blt.n	801cf36 <arm_depthwise_conv_s8_opt+0x232>
            for (int i_ker_y = ker_y_start; i_ker_y < ker_y_end; i_ker_y++)
 801cfde:	f8d7 3308 	ldr.w	r3, [r7, #776]	; 0x308
 801cfe2:	3301      	adds	r3, #1
 801cfe4:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
 801cfe8:	f8d7 2308 	ldr.w	r2, [r7, #776]	; 0x308
 801cfec:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 801cff0:	429a      	cmp	r2, r3
 801cff2:	db94      	blt.n	801cf1e <arm_depthwise_conv_s8_opt+0x21a>
                }
            }

            const int diff = kernel_y - ker_y_end;
 801cff4:	f8d7 22c8 	ldr.w	r2, [r7, #712]	; 0x2c8
 801cff8:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 801cffc:	1ad3      	subs	r3, r2, r3
 801cffe:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
            if (diff != 0)
 801d002:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 801d006:	2b00      	cmp	r3, #0
 801d008:	d014      	beq.n	801d034 <arm_depthwise_conv_s8_opt+0x330>
            {
                memset(&col_buffer[index], 0, (kernel_x * input_ch) * diff * sizeof(q15_t));
 801d00a:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
 801d00e:	005b      	lsls	r3, r3, #1
 801d010:	f8d7 231c 	ldr.w	r2, [r7, #796]	; 0x31c
 801d014:	18d0      	adds	r0, r2, r3
 801d016:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 801d01a:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 801d01e:	fb02 f303 	mul.w	r3, r2, r3
 801d022:	f8d7 227c 	ldr.w	r2, [r7, #636]	; 0x27c
 801d026:	fb02 f303 	mul.w	r3, r2, r3
 801d02a:	005b      	lsls	r3, r3, #1
 801d02c:	461a      	mov	r2, r3
 801d02e:	2100      	movs	r1, #0
 801d030:	f009 ff04 	bl	8026e3c <memset>
            }

            row_count = output_ch / 4;
 801d034:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 801d038:	2b00      	cmp	r3, #0
 801d03a:	da00      	bge.n	801d03e <arm_depthwise_conv_s8_opt+0x33a>
 801d03c:	3303      	adds	r3, #3
 801d03e:	109b      	asrs	r3, r3, #2
 801d040:	f8a7 331a 	strh.w	r3, [r7, #794]	; 0x31a
            row_shift = 0;
 801d044:	2300      	movs	r3, #0
 801d046:	f8a7 3318 	strh.w	r3, [r7, #792]	; 0x318
            bias = bias_start_pos;
 801d04a:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 801d04e:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358
            output_mult = out_mult_start_pos;
 801d052:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 801d056:	f8c7 3320 	str.w	r3, [r7, #800]	; 0x320
            output_shift = out_shift_start_pos;
 801d05a:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801d05e:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324

            while (row_count)
 801d062:	f000 bea2 	b.w	801ddaa <arm_depthwise_conv_s8_opt+0x10a6>
            {
                q31_t sum = *bias++;
 801d066:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 801d06a:	1d1a      	adds	r2, r3, #4
 801d06c:	f8c7 2358 	str.w	r2, [r7, #856]	; 0x358
 801d070:	681b      	ldr	r3, [r3, #0]
 801d072:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
                q31_t sum_2 = *bias++;
 801d076:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 801d07a:	1d1a      	adds	r2, r3, #4
 801d07c:	f8c7 2358 	str.w	r2, [r7, #856]	; 0x358
 801d080:	681b      	ldr	r3, [r3, #0]
 801d082:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
                q31_t sum_3 = *bias++;
 801d086:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 801d08a:	1d1a      	adds	r2, r3, #4
 801d08c:	f8c7 2358 	str.w	r2, [r7, #856]	; 0x358
 801d090:	681b      	ldr	r3, [r3, #0]
 801d092:	f8c7 32f8 	str.w	r3, [r7, #760]	; 0x2f8
                q31_t sum_4 = *bias++;
 801d096:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 801d09a:	1d1a      	adds	r2, r3, #4
 801d09c:	f8c7 2358 	str.w	r2, [r7, #856]	; 0x358
 801d0a0:	681b      	ldr	r3, [r3, #0]
 801d0a2:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4

                uint16_t col_count = (kernel_x * kernel_y) / 2;
 801d0a6:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 801d0aa:	f8d7 22c8 	ldr.w	r2, [r7, #712]	; 0x2c8
 801d0ae:	fb02 f303 	mul.w	r3, r2, r3
 801d0b2:	0fda      	lsrs	r2, r3, #31
 801d0b4:	4413      	add	r3, r2
 801d0b6:	105b      	asrs	r3, r3, #1
 801d0b8:	f8a7 32f2 	strh.w	r3, [r7, #754]	; 0x2f2
                q15_t *col_pos = col_buffer_start + row_shift;
 801d0bc:	f8b7 3318 	ldrh.w	r3, [r7, #792]	; 0x318
 801d0c0:	005b      	lsls	r3, r3, #1
 801d0c2:	f8d7 2298 	ldr.w	r2, [r7, #664]	; 0x298
 801d0c6:	4413      	add	r3, r2
 801d0c8:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
                const q7_t *row_pos = kernel + row_shift;
 801d0cc:	f8b7 3318 	ldrh.w	r3, [r7, #792]	; 0x318
 801d0d0:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 801d0d4:	4413      	add	r3, r2
 801d0d6:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
                row_shift += 4;
 801d0da:	f8b7 3318 	ldrh.w	r3, [r7, #792]	; 0x318
 801d0de:	3304      	adds	r3, #4
 801d0e0:	f8a7 3318 	strh.w	r3, [r7, #792]	; 0x318

                while (col_count)
 801d0e4:	e25b      	b.n	801d59e <arm_depthwise_conv_s8_opt+0x89a>
 801d0e6:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 801d0ea:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 801d0ee:	601a      	str	r2, [r3, #0]
 801d0f0:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 801d0f4:	681b      	ldr	r3, [r3, #0]
 801d0f6:	681b      	ldr	r3, [r3, #0]
 801d0f8:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801d0fa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801d0fe:	601a      	str	r2, [r3, #0]
    return (val);
 801d100:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801d104:	681b      	ldr	r3, [r3, #0]
                    /* General idea is to read 4 + 4 (input, kernel) pair and re-arrange them in the right order to
                    use in a SMLAD instruction . One run of this loop produces 4 partial outputs with 8 MACs. */
                    /* Note: variable names can be improved here to align with rows and columns. */
                    q31_t ip_a1, ip_a2, ip_b1, ip_b2, op_a, op_b, op_c;
                    /* Read 4 weights */
                    ip_b1 = arm_nn_read_q7x4(row_pos);
 801d106:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
                    ip_a1 = arm_nn_read_q7x4(row_pos + input_ch);
 801d10a:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 801d10e:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 801d112:	441a      	add	r2, r3
 801d114:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 801d118:	601a      	str	r2, [r3, #0]
 801d11a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 801d11e:	681b      	ldr	r3, [r3, #0]
 801d120:	681b      	ldr	r3, [r3, #0]
 801d122:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801d124:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801d128:	601a      	str	r2, [r3, #0]
    return (val);
 801d12a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801d12e:	681b      	ldr	r3, [r3, #0]
 801d130:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
 801d134:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 801d138:	f8d7 22ec 	ldr.w	r2, [r7, #748]	; 0x2ec
 801d13c:	601a      	str	r2, [r3, #0]
 801d13e:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 801d142:	681b      	ldr	r3, [r3, #0]
 801d144:	681b      	ldr	r3, [r3, #0]
 801d146:	461a      	mov	r2, r3
    memcpy(&val, in_q15, 4);
 801d148:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801d14c:	601a      	str	r2, [r3, #0]
    return (val);
 801d14e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801d152:	681b      	ldr	r3, [r3, #0]
                    op_a = arm_nn_read_q15x2(col_pos);
 801d154:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
                    op_b = arm_nn_read_q15x2(col_pos + input_ch);
 801d158:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 801d15c:	005b      	lsls	r3, r3, #1
 801d15e:	f8d7 22ec 	ldr.w	r2, [r7, #748]	; 0x2ec
 801d162:	441a      	add	r2, r3
 801d164:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 801d168:	601a      	str	r2, [r3, #0]
 801d16a:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 801d16e:	681b      	ldr	r3, [r3, #0]
 801d170:	681b      	ldr	r3, [r3, #0]
 801d172:	461a      	mov	r2, r3
    memcpy(&val, in_q15, 4);
 801d174:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801d178:	601a      	str	r2, [r3, #0]
    return (val);
 801d17a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801d17e:	681b      	ldr	r3, [r3, #0]
 801d180:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260

                    ip_a2 = __SXTB16(ip_b1);
 801d184:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 801d188:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 801d18c:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801d18e:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 801d192:	681b      	ldr	r3, [r3, #0]
 801d194:	fa2f f283 	sxtb16	r2, r3
 801d198:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 801d19c:	601a      	str	r2, [r3, #0]
  return(result);
 801d19e:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 801d1a2:	681b      	ldr	r3, [r3, #0]
 801d1a4:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
                    ip_b1 = __SXTB16(__ROR(ip_b1, 8));
 801d1a8:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 801d1ac:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801d1b0:	601a      	str	r2, [r3, #0]
 801d1b2:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 801d1b6:	2208      	movs	r2, #8
 801d1b8:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 801d1ba:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 801d1be:	f507 72e2 	add.w	r2, r7, #452	; 0x1c4
 801d1c2:	6812      	ldr	r2, [r2, #0]
 801d1c4:	f002 021f 	and.w	r2, r2, #31
 801d1c8:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 801d1ca:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 801d1ce:	681b      	ldr	r3, [r3, #0]
 801d1d0:	2b00      	cmp	r3, #0
 801d1d2:	d103      	bne.n	801d1dc <arm_depthwise_conv_s8_opt+0x4d8>
    return op1;
 801d1d4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801d1d8:	681b      	ldr	r3, [r3, #0]
 801d1da:	e007      	b.n	801d1ec <arm_depthwise_conv_s8_opt+0x4e8>
  return (op1 >> op2) | (op1 << (32U - op2));
 801d1dc:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 801d1e0:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 801d1e4:	6812      	ldr	r2, [r2, #0]
 801d1e6:	681b      	ldr	r3, [r3, #0]
 801d1e8:	fa62 f303 	ror.w	r3, r2, r3
 801d1ec:	f507 72e8 	add.w	r2, r7, #464	; 0x1d0
 801d1f0:	6013      	str	r3, [r2, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801d1f2:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 801d1f6:	681b      	ldr	r3, [r3, #0]
 801d1f8:	fa2f f283 	sxtb16	r2, r3
 801d1fc:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 801d200:	601a      	str	r2, [r3, #0]
  return(result);
 801d202:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 801d206:	681b      	ldr	r3, [r3, #0]
 801d208:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c

                    ip_b2 = __SXTB16(ip_a1);
 801d20c:	f8d7 2268 	ldr.w	r2, [r7, #616]	; 0x268
 801d210:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 801d214:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801d216:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 801d21a:	681b      	ldr	r3, [r3, #0]
 801d21c:	fa2f f283 	sxtb16	r2, r3
 801d220:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 801d224:	601a      	str	r2, [r3, #0]
  return(result);
 801d226:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 801d22a:	681b      	ldr	r3, [r3, #0]
 801d22c:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
                    ip_a1 = __SXTB16(__ROR(ip_a1, 8));
 801d230:	f8d7 2268 	ldr.w	r2, [r7, #616]	; 0x268
 801d234:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 801d238:	601a      	str	r2, [r3, #0]
 801d23a:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 801d23e:	2208      	movs	r2, #8
 801d240:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 801d242:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 801d246:	f507 72ee 	add.w	r2, r7, #476	; 0x1dc
 801d24a:	6812      	ldr	r2, [r2, #0]
 801d24c:	f002 021f 	and.w	r2, r2, #31
 801d250:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 801d252:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 801d256:	681b      	ldr	r3, [r3, #0]
 801d258:	2b00      	cmp	r3, #0
 801d25a:	d103      	bne.n	801d264 <arm_depthwise_conv_s8_opt+0x560>
    return op1;
 801d25c:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 801d260:	681b      	ldr	r3, [r3, #0]
 801d262:	e007      	b.n	801d274 <arm_depthwise_conv_s8_opt+0x570>
  return (op1 >> op2) | (op1 << (32U - op2));
 801d264:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 801d268:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 801d26c:	6812      	ldr	r2, [r2, #0]
 801d26e:	681b      	ldr	r3, [r3, #0]
 801d270:	fa62 f303 	ror.w	r3, r2, r3
 801d274:	f507 72f4 	add.w	r2, r7, #488	; 0x1e8
 801d278:	6013      	str	r3, [r2, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801d27a:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 801d27e:	681b      	ldr	r3, [r3, #0]
 801d280:	fa2f f283 	sxtb16	r2, r3
 801d284:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 801d288:	601a      	str	r2, [r3, #0]
  return(result);
 801d28a:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 801d28e:	681b      	ldr	r3, [r3, #0]
 801d290:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268

                    op_c = __PKHBT(op_b, op_a, 16);
 801d294:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 801d298:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 801d29c:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 801d2a0:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 801d2a4:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 801d2a8:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 801d2ac:	eac3 4302 	pkhbt	r3, r3, r2, lsl #16
 801d2b0:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 801d2b4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 801d2b8:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
                    op_a = __PKHTB(op_b, op_a, 16);
 801d2bc:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 801d2c0:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 801d2c4:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 801d2c8:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 801d2cc:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 801d2d0:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 801d2d4:	eac3 4322 	pkhtb	r3, r3, r2, asr #16
 801d2d8:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 801d2dc:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 801d2e0:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
                    op_b = __PKHBT(ip_b2, ip_a2, 16);
 801d2e4:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 801d2e8:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 801d2ec:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 801d2f0:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 801d2f4:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 801d2f8:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 801d2fc:	eac3 4302 	pkhbt	r3, r3, r2, lsl #16
 801d300:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
 801d304:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 801d308:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
                    sum = __SMLAD(op_c, op_b, sum);
 801d30c:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 801d310:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 801d314:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 801d318:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 801d31c:	6018      	str	r0, [r3, #0]
 801d31e:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 801d322:	6019      	str	r1, [r3, #0]
 801d324:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 801d328:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801d32a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 801d32e:	681b      	ldr	r3, [r3, #0]
 801d330:	f507 72c6 	add.w	r2, r7, #396	; 0x18c
 801d334:	6812      	ldr	r2, [r2, #0]
 801d336:	f507 71c4 	add.w	r1, r7, #392	; 0x188
 801d33a:	6809      	ldr	r1, [r1, #0]
 801d33c:	fb23 1202 	smlad	r2, r3, r2, r1
 801d340:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 801d344:	601a      	str	r2, [r3, #0]
  return(result);
 801d346:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 801d34a:	681b      	ldr	r3, [r3, #0]
 801d34c:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300

                    op_b = __PKHBT(ip_b1, ip_a1, 16);
 801d350:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 801d354:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 801d358:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801d35c:	f8d7 2268 	ldr.w	r2, [r7, #616]	; 0x268
 801d360:	601a      	str	r2, [r3, #0]
 801d362:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 801d366:	f507 720a 	add.w	r2, r7, #552	; 0x228
 801d36a:	6812      	ldr	r2, [r2, #0]
 801d36c:	eac3 4202 	pkhbt	r2, r3, r2, lsl #16
 801d370:	f507 7309 	add.w	r3, r7, #548	; 0x224
 801d374:	601a      	str	r2, [r3, #0]
 801d376:	f507 7309 	add.w	r3, r7, #548	; 0x224
 801d37a:	681b      	ldr	r3, [r3, #0]
 801d37c:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
                    sum_2 = __SMLAD(op_a, op_b, sum_2);
 801d380:	f8d7 0264 	ldr.w	r0, [r7, #612]	; 0x264
 801d384:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 801d388:	f8d7 22fc 	ldr.w	r2, [r7, #764]	; 0x2fc
 801d38c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 801d390:	6018      	str	r0, [r3, #0]
 801d392:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 801d396:	6019      	str	r1, [r3, #0]
 801d398:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 801d39c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801d39e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 801d3a2:	681b      	ldr	r3, [r3, #0]
 801d3a4:	f507 72ce 	add.w	r2, r7, #412	; 0x19c
 801d3a8:	6812      	ldr	r2, [r2, #0]
 801d3aa:	f507 71cc 	add.w	r1, r7, #408	; 0x198
 801d3ae:	6809      	ldr	r1, [r1, #0]
 801d3b0:	fb23 1202 	smlad	r2, r3, r2, r1
 801d3b4:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 801d3b8:	601a      	str	r2, [r3, #0]
  return(result);
 801d3ba:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 801d3be:	681b      	ldr	r3, [r3, #0]
 801d3c0:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc

                    op_a = arm_nn_read_q15x2(col_pos + 2);
 801d3c4:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 801d3c8:	1d1a      	adds	r2, r3, #4
 801d3ca:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 801d3ce:	601a      	str	r2, [r3, #0]
 801d3d0:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 801d3d4:	681b      	ldr	r3, [r3, #0]
 801d3d6:	681b      	ldr	r3, [r3, #0]
 801d3d8:	461a      	mov	r2, r3
    memcpy(&val, in_q15, 4);
 801d3da:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801d3de:	601a      	str	r2, [r3, #0]
    return (val);
 801d3e0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801d3e4:	681b      	ldr	r3, [r3, #0]
 801d3e6:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
                    op_b = arm_nn_read_q15x2(col_pos + input_ch + 2);
 801d3ea:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 801d3ee:	3302      	adds	r3, #2
 801d3f0:	005b      	lsls	r3, r3, #1
 801d3f2:	f8d7 22ec 	ldr.w	r2, [r7, #748]	; 0x2ec
 801d3f6:	441a      	add	r2, r3
 801d3f8:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 801d3fc:	601a      	str	r2, [r3, #0]
 801d3fe:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 801d402:	681b      	ldr	r3, [r3, #0]
 801d404:	681b      	ldr	r3, [r3, #0]
 801d406:	461a      	mov	r2, r3
    memcpy(&val, in_q15, 4);
 801d408:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801d40c:	601a      	str	r2, [r3, #0]
    return (val);
 801d40e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801d412:	681b      	ldr	r3, [r3, #0]
 801d414:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260

                    op_c = __PKHBT(op_b, op_a, 16);
 801d418:	f507 7308 	add.w	r3, r7, #544	; 0x220
 801d41c:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 801d420:	601a      	str	r2, [r3, #0]
 801d422:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 801d426:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 801d42a:	601a      	str	r2, [r3, #0]
 801d42c:	f507 7308 	add.w	r3, r7, #544	; 0x220
 801d430:	681b      	ldr	r3, [r3, #0]
 801d432:	f507 7207 	add.w	r2, r7, #540	; 0x21c
 801d436:	6812      	ldr	r2, [r2, #0]
 801d438:	eac3 4202 	pkhbt	r2, r3, r2, lsl #16
 801d43c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 801d440:	601a      	str	r2, [r3, #0]
 801d442:	f507 7306 	add.w	r3, r7, #536	; 0x218
 801d446:	681b      	ldr	r3, [r3, #0]
 801d448:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
                    op_a = __PKHTB(op_b, op_a, 16);
 801d44c:	f507 7305 	add.w	r3, r7, #532	; 0x214
 801d450:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 801d454:	601a      	str	r2, [r3, #0]
 801d456:	f507 7304 	add.w	r3, r7, #528	; 0x210
 801d45a:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 801d45e:	601a      	str	r2, [r3, #0]
 801d460:	f507 7305 	add.w	r3, r7, #532	; 0x214
 801d464:	681b      	ldr	r3, [r3, #0]
 801d466:	f507 7204 	add.w	r2, r7, #528	; 0x210
 801d46a:	6812      	ldr	r2, [r2, #0]
 801d46c:	eac3 4222 	pkhtb	r2, r3, r2, asr #16
 801d470:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 801d474:	601a      	str	r2, [r3, #0]
 801d476:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 801d47a:	681b      	ldr	r3, [r3, #0]
 801d47c:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
                    op_b = __PKHTB(ip_a2, ip_b2, 16);
 801d480:	f507 7302 	add.w	r3, r7, #520	; 0x208
 801d484:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 801d488:	601a      	str	r2, [r3, #0]
 801d48a:	f507 7301 	add.w	r3, r7, #516	; 0x204
 801d48e:	f8d7 2258 	ldr.w	r2, [r7, #600]	; 0x258
 801d492:	601a      	str	r2, [r3, #0]
 801d494:	f507 7302 	add.w	r3, r7, #520	; 0x208
 801d498:	681b      	ldr	r3, [r3, #0]
 801d49a:	f507 7201 	add.w	r2, r7, #516	; 0x204
 801d49e:	6812      	ldr	r2, [r2, #0]
 801d4a0:	eac3 4222 	pkhtb	r2, r3, r2, asr #16
 801d4a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801d4a8:	601a      	str	r2, [r3, #0]
 801d4aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801d4ae:	681b      	ldr	r3, [r3, #0]
 801d4b0:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
                    sum_3 = __SMLAD(op_c, op_b, sum_3);
 801d4b4:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 801d4b8:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 801d4bc:	f8d7 22f8 	ldr.w	r2, [r7, #760]	; 0x2f8
 801d4c0:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 801d4c4:	6018      	str	r0, [r3, #0]
 801d4c6:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 801d4ca:	6019      	str	r1, [r3, #0]
 801d4cc:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 801d4d0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801d4d2:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 801d4d6:	681b      	ldr	r3, [r3, #0]
 801d4d8:	f507 72be 	add.w	r2, r7, #380	; 0x17c
 801d4dc:	6812      	ldr	r2, [r2, #0]
 801d4de:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 801d4e2:	6809      	ldr	r1, [r1, #0]
 801d4e4:	fb23 1202 	smlad	r2, r3, r2, r1
 801d4e8:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 801d4ec:	601a      	str	r2, [r3, #0]
  return(result);
 801d4ee:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 801d4f2:	681b      	ldr	r3, [r3, #0]
 801d4f4:	f8c7 32f8 	str.w	r3, [r7, #760]	; 0x2f8

                    op_b = __PKHTB(ip_a1, ip_b1, 16);
 801d4f8:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 801d4fc:	f8d7 2268 	ldr.w	r2, [r7, #616]	; 0x268
 801d500:	601a      	str	r2, [r3, #0]
 801d502:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 801d506:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 801d50a:	601a      	str	r2, [r3, #0]
 801d50c:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 801d510:	681b      	ldr	r3, [r3, #0]
 801d512:	f507 72fc 	add.w	r2, r7, #504	; 0x1f8
 801d516:	6812      	ldr	r2, [r2, #0]
 801d518:	eac3 4222 	pkhtb	r2, r3, r2, asr #16
 801d51c:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 801d520:	601a      	str	r2, [r3, #0]
 801d522:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 801d526:	681b      	ldr	r3, [r3, #0]
 801d528:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
                    sum_4 = __SMLAD(op_a, op_b, sum_4);
 801d52c:	f8d7 0264 	ldr.w	r0, [r7, #612]	; 0x264
 801d530:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 801d534:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 801d538:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 801d53c:	6018      	str	r0, [r3, #0]
 801d53e:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 801d542:	6019      	str	r1, [r3, #0]
 801d544:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 801d548:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801d54a:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 801d54e:	681b      	ldr	r3, [r3, #0]
 801d550:	f507 72b6 	add.w	r2, r7, #364	; 0x16c
 801d554:	6812      	ldr	r2, [r2, #0]
 801d556:	f507 71b4 	add.w	r1, r7, #360	; 0x168
 801d55a:	6809      	ldr	r1, [r1, #0]
 801d55c:	fb23 1202 	smlad	r2, r3, r2, r1
 801d560:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 801d564:	601a      	str	r2, [r3, #0]
  return(result);
 801d566:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 801d56a:	681b      	ldr	r3, [r3, #0]
 801d56c:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4

                    row_pos += input_ch << 1;
 801d570:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 801d574:	005b      	lsls	r3, r3, #1
 801d576:	461a      	mov	r2, r3
 801d578:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 801d57c:	4413      	add	r3, r2
 801d57e:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
                    col_pos += input_ch << 1;
 801d582:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 801d586:	005b      	lsls	r3, r3, #1
 801d588:	005b      	lsls	r3, r3, #1
 801d58a:	f8d7 22ec 	ldr.w	r2, [r7, #748]	; 0x2ec
 801d58e:	4413      	add	r3, r2
 801d590:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
                    col_count--;
 801d594:	f8b7 32f2 	ldrh.w	r3, [r7, #754]	; 0x2f2
 801d598:	3b01      	subs	r3, #1
 801d59a:	f8a7 32f2 	strh.w	r3, [r7, #754]	; 0x2f2
                while (col_count)
 801d59e:	f8b7 32f2 	ldrh.w	r3, [r7, #754]	; 0x2f2
 801d5a2:	2b00      	cmp	r3, #0
 801d5a4:	f47f ad9f 	bne.w	801d0e6 <arm_depthwise_conv_s8_opt+0x3e2>
                }

                col_count = (kernel_x * kernel_y) & 0x1;
 801d5a8:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 801d5ac:	b29a      	uxth	r2, r3
 801d5ae:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 801d5b2:	b29b      	uxth	r3, r3
 801d5b4:	fb12 f303 	smulbb	r3, r2, r3
 801d5b8:	b29b      	uxth	r3, r3
 801d5ba:	f003 0301 	and.w	r3, r3, #1
 801d5be:	f8a7 32f2 	strh.w	r3, [r7, #754]	; 0x2f2
                while (col_count)
 801d5c2:	e059      	b.n	801d678 <arm_depthwise_conv_s8_opt+0x974>
                {
                    sum += row_pos[0] * col_pos[0];
 801d5c4:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 801d5c8:	f993 3000 	ldrsb.w	r3, [r3]
 801d5cc:	461a      	mov	r2, r3
 801d5ce:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 801d5d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d5d6:	fb03 f302 	mul.w	r3, r3, r2
 801d5da:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 801d5de:	4413      	add	r3, r2
 801d5e0:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
                    sum_2 += row_pos[1] * col_pos[1];
 801d5e4:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 801d5e8:	3301      	adds	r3, #1
 801d5ea:	f993 3000 	ldrsb.w	r3, [r3]
 801d5ee:	461a      	mov	r2, r3
 801d5f0:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 801d5f4:	3302      	adds	r3, #2
 801d5f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d5fa:	fb03 f302 	mul.w	r3, r3, r2
 801d5fe:	f8d7 22fc 	ldr.w	r2, [r7, #764]	; 0x2fc
 801d602:	4413      	add	r3, r2
 801d604:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
                    sum_3 += row_pos[2] * col_pos[2];
 801d608:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 801d60c:	3302      	adds	r3, #2
 801d60e:	f993 3000 	ldrsb.w	r3, [r3]
 801d612:	461a      	mov	r2, r3
 801d614:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 801d618:	3304      	adds	r3, #4
 801d61a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d61e:	fb03 f302 	mul.w	r3, r3, r2
 801d622:	f8d7 22f8 	ldr.w	r2, [r7, #760]	; 0x2f8
 801d626:	4413      	add	r3, r2
 801d628:	f8c7 32f8 	str.w	r3, [r7, #760]	; 0x2f8
                    sum_4 += row_pos[3] * col_pos[3];
 801d62c:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 801d630:	3303      	adds	r3, #3
 801d632:	f993 3000 	ldrsb.w	r3, [r3]
 801d636:	461a      	mov	r2, r3
 801d638:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 801d63c:	3306      	adds	r3, #6
 801d63e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d642:	fb03 f302 	mul.w	r3, r3, r2
 801d646:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 801d64a:	4413      	add	r3, r2
 801d64c:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4

                    row_pos += input_ch;
 801d650:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 801d654:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 801d658:	4413      	add	r3, r2
 801d65a:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
                    col_pos += input_ch;
 801d65e:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 801d662:	005b      	lsls	r3, r3, #1
 801d664:	f8d7 22ec 	ldr.w	r2, [r7, #748]	; 0x2ec
 801d668:	4413      	add	r3, r2
 801d66a:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec

                    col_count--;
 801d66e:	f8b7 32f2 	ldrh.w	r3, [r7, #754]	; 0x2f2
 801d672:	3b01      	subs	r3, #1
 801d674:	f8a7 32f2 	strh.w	r3, [r7, #754]	; 0x2f2
                while (col_count)
 801d678:	f8b7 32f2 	ldrh.w	r3, [r7, #754]	; 0x2f2
 801d67c:	2b00      	cmp	r3, #0
 801d67e:	d1a1      	bne.n	801d5c4 <arm_depthwise_conv_s8_opt+0x8c0>
                }
                sum = arm_nn_requantize(sum, *output_mult++, *output_shift++);
 801d680:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 801d684:	1d1a      	adds	r2, r3, #4
 801d686:	f8c7 2320 	str.w	r2, [r7, #800]	; 0x320
 801d68a:	6819      	ldr	r1, [r3, #0]
 801d68c:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 801d690:	1d1a      	adds	r2, r3, #4
 801d692:	f8c7 2324 	str.w	r2, [r7, #804]	; 0x324
 801d696:	681a      	ldr	r2, [r3, #0]
 801d698:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801d69c:	f8d7 0300 	ldr.w	r0, [r7, #768]	; 0x300
 801d6a0:	6018      	str	r0, [r3, #0]
 801d6a2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801d6a6:	6019      	str	r1, [r3, #0]
 801d6a8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801d6ac:	601a      	str	r2, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801d6ae:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801d6b2:	681b      	ldr	r3, [r3, #0]
 801d6b4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d6b8:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 801d6bc:	6812      	ldr	r2, [r2, #0]
 801d6be:	409a      	lsls	r2, r3
 801d6c0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 801d6c4:	601a      	str	r2, [r3, #0]
 801d6c6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801d6ca:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 801d6ce:	6812      	ldr	r2, [r2, #0]
 801d6d0:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801d6d2:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801d6d6:	2200      	movs	r2, #0
 801d6d8:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 801d6da:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801d6de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801d6e2:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 801d6e4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801d6e8:	2200      	movs	r2, #0
 801d6ea:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801d6ec:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 801d6f0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 801d6f4:	681b      	ldr	r3, [r3, #0]
 801d6f6:	4618      	mov	r0, r3
 801d6f8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801d6fc:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801d700:	681b      	ldr	r3, [r3, #0]
 801d702:	461a      	mov	r2, r3
 801d704:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801d708:	fb02 f501 	mul.w	r5, r2, r1
 801d70c:	fb00 f403 	mul.w	r4, r0, r3
 801d710:	442c      	add	r4, r5
 801d712:	fba0 2302 	umull	r2, r3, r0, r2
 801d716:	18e1      	adds	r1, r4, r3
 801d718:	460b      	mov	r3, r1
 801d71a:	eb18 0102 	adds.w	r1, r8, r2
 801d71e:	60b9      	str	r1, [r7, #8]
 801d720:	eb49 0303 	adc.w	r3, r9, r3
 801d724:	60fb      	str	r3, [r7, #12]
 801d726:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 801d72a:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
    result = (int32_t)(mult.long_long >> 31);
 801d72e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 801d732:	f04f 0200 	mov.w	r2, #0
 801d736:	f04f 0300 	mov.w	r3, #0
 801d73a:	0fc2      	lsrs	r2, r0, #31
 801d73c:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801d740:	17cb      	asrs	r3, r1, #31
 801d742:	f107 01bc 	add.w	r1, r7, #188	; 0xbc
 801d746:	4613      	mov	r3, r2
 801d748:	600b      	str	r3, [r1, #0]
    return result;
 801d74a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801d74e:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801d750:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801d754:	681b      	ldr	r3, [r3, #0]
 801d756:	2b00      	cmp	r3, #0
 801d758:	dc04      	bgt.n	801d764 <arm_depthwise_conv_s8_opt+0xa60>
 801d75a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801d75e:	681b      	ldr	r3, [r3, #0]
 801d760:	425b      	negs	r3, r3
 801d762:	e000      	b.n	801d766 <arm_depthwise_conv_s8_opt+0xa62>
 801d764:	2300      	movs	r3, #0
 801d766:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 801d76a:	6011      	str	r1, [r2, #0]
 801d76c:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 801d770:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801d772:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801d776:	2200      	movs	r2, #0
 801d778:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801d77a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 801d77e:	2201      	movs	r2, #1
 801d780:	681b      	ldr	r3, [r3, #0]
 801d782:	409a      	lsls	r2, r3
 801d784:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 801d788:	3a01      	subs	r2, #1
 801d78a:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 801d78c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801d790:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 801d794:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 801d798:	6809      	ldr	r1, [r1, #0]
 801d79a:	6812      	ldr	r2, [r2, #0]
 801d79c:	400a      	ands	r2, r1
 801d79e:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 801d7a0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801d7a4:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 801d7a8:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 801d7ac:	6809      	ldr	r1, [r1, #0]
 801d7ae:	6812      	ldr	r2, [r2, #0]
 801d7b0:	fa41 f202 	asr.w	r2, r1, r2
 801d7b4:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 801d7b6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801d7ba:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 801d7be:	6812      	ldr	r2, [r2, #0]
 801d7c0:	1052      	asrs	r2, r2, #1
 801d7c2:	601a      	str	r2, [r3, #0]
    if (result < 0)
 801d7c4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801d7c8:	681b      	ldr	r3, [r3, #0]
 801d7ca:	2b00      	cmp	r3, #0
 801d7cc:	da06      	bge.n	801d7dc <arm_depthwise_conv_s8_opt+0xad8>
        threshold++;
 801d7ce:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801d7d2:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 801d7d6:	6812      	ldr	r2, [r2, #0]
 801d7d8:	3201      	adds	r2, #1
 801d7da:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 801d7dc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 801d7e0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801d7e4:	6812      	ldr	r2, [r2, #0]
 801d7e6:	681b      	ldr	r3, [r3, #0]
 801d7e8:	429a      	cmp	r2, r3
 801d7ea:	dd06      	ble.n	801d7fa <arm_depthwise_conv_s8_opt+0xaf6>
        result++;
 801d7ec:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801d7f0:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 801d7f4:	6812      	ldr	r2, [r2, #0]
 801d7f6:	3201      	adds	r2, #1
 801d7f8:	601a      	str	r2, [r3, #0]
    return result;
 801d7fa:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801d7fe:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801d800:	bf00      	nop
 801d802:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
                sum += output_offset;
 801d806:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 801d80a:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 801d80e:	4413      	add	r3, r2
 801d810:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
                sum = MAX(sum, output_activation_min);
 801d814:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 801d818:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 801d81c:	4293      	cmp	r3, r2
 801d81e:	bfb8      	it	lt
 801d820:	4613      	movlt	r3, r2
 801d822:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
                sum = MIN(sum, output_activation_max);
 801d826:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 801d82a:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 801d82e:	4293      	cmp	r3, r2
 801d830:	bfa8      	it	ge
 801d832:	4613      	movge	r3, r2
 801d834:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
                *output++ = (q7_t)sum;
 801d838:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 801d83c:	1c5a      	adds	r2, r3, #1
 801d83e:	f8c7 2360 	str.w	r2, [r7, #864]	; 0x360
 801d842:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 801d846:	b252      	sxtb	r2, r2
 801d848:	701a      	strb	r2, [r3, #0]

                sum_2 = arm_nn_requantize(sum_2, *output_mult++, *output_shift++);
 801d84a:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 801d84e:	1d1a      	adds	r2, r3, #4
 801d850:	f8c7 2320 	str.w	r2, [r7, #800]	; 0x320
 801d854:	6819      	ldr	r1, [r3, #0]
 801d856:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 801d85a:	1d1a      	adds	r2, r3, #4
 801d85c:	f8c7 2324 	str.w	r2, [r7, #804]	; 0x324
 801d860:	681a      	ldr	r2, [r3, #0]
 801d862:	f507 7380 	add.w	r3, r7, #256	; 0x100
 801d866:	f8d7 02fc 	ldr.w	r0, [r7, #764]	; 0x2fc
 801d86a:	6018      	str	r0, [r3, #0]
 801d86c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 801d870:	6019      	str	r1, [r3, #0]
 801d872:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801d876:	601a      	str	r2, [r3, #0]
 801d878:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801d87c:	681b      	ldr	r3, [r3, #0]
 801d87e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d882:	f507 7280 	add.w	r2, r7, #256	; 0x100
 801d886:	6812      	ldr	r2, [r2, #0]
 801d888:	409a      	lsls	r2, r3
 801d88a:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 801d88e:	601a      	str	r2, [r3, #0]
 801d890:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801d894:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 801d898:	6812      	ldr	r2, [r2, #0]
 801d89a:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801d89c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 801d8a0:	2200      	movs	r2, #0
 801d8a2:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 801d8a4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801d8a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801d8ac:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 801d8ae:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801d8b2:	2200      	movs	r2, #0
 801d8b4:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801d8b6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 801d8ba:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 801d8be:	681b      	ldr	r3, [r3, #0]
 801d8c0:	4618      	mov	r0, r3
 801d8c2:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801d8c6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801d8ca:	681b      	ldr	r3, [r3, #0]
 801d8cc:	461a      	mov	r2, r3
 801d8ce:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801d8d2:	fb02 f501 	mul.w	r5, r2, r1
 801d8d6:	fb00 f403 	mul.w	r4, r0, r3
 801d8da:	442c      	add	r4, r5
 801d8dc:	fba0 2302 	umull	r2, r3, r0, r2
 801d8e0:	18e1      	adds	r1, r4, r3
 801d8e2:	460b      	mov	r3, r1
 801d8e4:	eb18 0102 	adds.w	r1, r8, r2
 801d8e8:	6139      	str	r1, [r7, #16]
 801d8ea:	eb49 0303 	adc.w	r3, r9, r3
 801d8ee:	617b      	str	r3, [r7, #20]
 801d8f0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 801d8f4:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
    result = (int32_t)(mult.long_long >> 31);
 801d8f8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 801d8fc:	f04f 0200 	mov.w	r2, #0
 801d900:	f04f 0300 	mov.w	r3, #0
 801d904:	0fc2      	lsrs	r2, r0, #31
 801d906:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801d90a:	17cb      	asrs	r3, r1, #31
 801d90c:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 801d910:	4613      	mov	r3, r2
 801d912:	600b      	str	r3, [r1, #0]
    return result;
 801d914:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 801d918:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801d91a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801d91e:	681b      	ldr	r3, [r3, #0]
 801d920:	2b00      	cmp	r3, #0
 801d922:	dc04      	bgt.n	801d92e <arm_depthwise_conv_s8_opt+0xc2a>
 801d924:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801d928:	681b      	ldr	r3, [r3, #0]
 801d92a:	425b      	negs	r3, r3
 801d92c:	e000      	b.n	801d930 <arm_depthwise_conv_s8_opt+0xc2c>
 801d92e:	2300      	movs	r3, #0
 801d930:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 801d934:	6011      	str	r1, [r2, #0]
 801d936:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 801d93a:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801d93c:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801d940:	2200      	movs	r2, #0
 801d942:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801d944:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 801d948:	2201      	movs	r2, #1
 801d94a:	681b      	ldr	r3, [r3, #0]
 801d94c:	409a      	lsls	r2, r3
 801d94e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 801d952:	3a01      	subs	r2, #1
 801d954:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 801d956:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801d95a:	f107 01e8 	add.w	r1, r7, #232	; 0xe8
 801d95e:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 801d962:	6809      	ldr	r1, [r1, #0]
 801d964:	6812      	ldr	r2, [r2, #0]
 801d966:	400a      	ands	r2, r1
 801d968:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 801d96a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801d96e:	f107 01e8 	add.w	r1, r7, #232	; 0xe8
 801d972:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 801d976:	6809      	ldr	r1, [r1, #0]
 801d978:	6812      	ldr	r2, [r2, #0]
 801d97a:	fa41 f202 	asr.w	r2, r1, r2
 801d97e:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 801d980:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 801d984:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 801d988:	6812      	ldr	r2, [r2, #0]
 801d98a:	1052      	asrs	r2, r2, #1
 801d98c:	601a      	str	r2, [r3, #0]
    if (result < 0)
 801d98e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801d992:	681b      	ldr	r3, [r3, #0]
 801d994:	2b00      	cmp	r3, #0
 801d996:	da06      	bge.n	801d9a6 <arm_depthwise_conv_s8_opt+0xca2>
        threshold++;
 801d998:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 801d99c:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 801d9a0:	6812      	ldr	r2, [r2, #0]
 801d9a2:	3201      	adds	r2, #1
 801d9a4:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 801d9a6:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 801d9aa:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 801d9ae:	6812      	ldr	r2, [r2, #0]
 801d9b0:	681b      	ldr	r3, [r3, #0]
 801d9b2:	429a      	cmp	r2, r3
 801d9b4:	dd06      	ble.n	801d9c4 <arm_depthwise_conv_s8_opt+0xcc0>
        result++;
 801d9b6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801d9ba:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 801d9be:	6812      	ldr	r2, [r2, #0]
 801d9c0:	3201      	adds	r2, #1
 801d9c2:	601a      	str	r2, [r3, #0]
    return result;
 801d9c4:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801d9c8:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801d9ca:	bf00      	nop
 801d9cc:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
                sum_2 += output_offset;
 801d9d0:	f8d7 22fc 	ldr.w	r2, [r7, #764]	; 0x2fc
 801d9d4:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 801d9d8:	4413      	add	r3, r2
 801d9da:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
                sum_2 = MAX(sum_2, output_activation_min);
 801d9de:	f8d7 22fc 	ldr.w	r2, [r7, #764]	; 0x2fc
 801d9e2:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 801d9e6:	4293      	cmp	r3, r2
 801d9e8:	bfb8      	it	lt
 801d9ea:	4613      	movlt	r3, r2
 801d9ec:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
                sum_2 = MIN(sum_2, output_activation_max);
 801d9f0:	f8d7 22fc 	ldr.w	r2, [r7, #764]	; 0x2fc
 801d9f4:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 801d9f8:	4293      	cmp	r3, r2
 801d9fa:	bfa8      	it	ge
 801d9fc:	4613      	movge	r3, r2
 801d9fe:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
                *output++ = (q7_t)sum_2;
 801da02:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 801da06:	1c5a      	adds	r2, r3, #1
 801da08:	f8c7 2360 	str.w	r2, [r7, #864]	; 0x360
 801da0c:	f8d7 22fc 	ldr.w	r2, [r7, #764]	; 0x2fc
 801da10:	b252      	sxtb	r2, r2
 801da12:	701a      	strb	r2, [r3, #0]
                sum_3 = arm_nn_requantize(sum_3, *output_mult++, *output_shift++);
 801da14:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 801da18:	1d1a      	adds	r2, r3, #4
 801da1a:	f8c7 2320 	str.w	r2, [r7, #800]	; 0x320
 801da1e:	6819      	ldr	r1, [r3, #0]
 801da20:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 801da24:	1d1a      	adds	r2, r3, #4
 801da26:	f8c7 2324 	str.w	r2, [r7, #804]	; 0x324
 801da2a:	681a      	ldr	r2, [r3, #0]
 801da2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801da30:	f8d7 02f8 	ldr.w	r0, [r7, #760]	; 0x2f8
 801da34:	6018      	str	r0, [r3, #0]
 801da36:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 801da3a:	6019      	str	r1, [r3, #0]
 801da3c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801da40:	601a      	str	r2, [r3, #0]
 801da42:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801da46:	681b      	ldr	r3, [r3, #0]
 801da48:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801da4c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 801da50:	6812      	ldr	r2, [r2, #0]
 801da52:	409a      	lsls	r2, r3
 801da54:	f507 7392 	add.w	r3, r7, #292	; 0x124
 801da58:	601a      	str	r2, [r3, #0]
 801da5a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801da5e:	f507 7296 	add.w	r2, r7, #300	; 0x12c
 801da62:	6812      	ldr	r2, [r2, #0]
 801da64:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801da66:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 801da6a:	2200      	movs	r2, #0
 801da6c:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 801da6e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801da72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801da76:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 801da78:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801da7c:	2200      	movs	r2, #0
 801da7e:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801da80:	e9d7 8916 	ldrd	r8, r9, [r7, #88]	; 0x58
 801da84:	f507 7392 	add.w	r3, r7, #292	; 0x124
 801da88:	681b      	ldr	r3, [r3, #0]
 801da8a:	4618      	mov	r0, r3
 801da8c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801da90:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801da94:	681b      	ldr	r3, [r3, #0]
 801da96:	461a      	mov	r2, r3
 801da98:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801da9c:	fb02 f501 	mul.w	r5, r2, r1
 801daa0:	fb00 f403 	mul.w	r4, r0, r3
 801daa4:	442c      	add	r4, r5
 801daa6:	fba0 2302 	umull	r2, r3, r0, r2
 801daaa:	18e1      	adds	r1, r4, r3
 801daac:	460b      	mov	r3, r1
 801daae:	eb18 0102 	adds.w	r1, r8, r2
 801dab2:	61b9      	str	r1, [r7, #24]
 801dab4:	eb49 0303 	adc.w	r3, r9, r3
 801dab8:	61fb      	str	r3, [r7, #28]
 801daba:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 801dabe:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
    result = (int32_t)(mult.long_long >> 31);
 801dac2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 801dac6:	f04f 0200 	mov.w	r2, #0
 801daca:	f04f 0300 	mov.w	r3, #0
 801dace:	0fc2      	lsrs	r2, r0, #31
 801dad0:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801dad4:	17cb      	asrs	r3, r1, #31
 801dad6:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 801dada:	4613      	mov	r3, r2
 801dadc:	600b      	str	r3, [r1, #0]
    return result;
 801dade:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 801dae2:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801dae4:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801dae8:	681b      	ldr	r3, [r3, #0]
 801daea:	2b00      	cmp	r3, #0
 801daec:	dc04      	bgt.n	801daf8 <arm_depthwise_conv_s8_opt+0xdf4>
 801daee:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801daf2:	681b      	ldr	r3, [r3, #0]
 801daf4:	425b      	negs	r3, r3
 801daf6:	e000      	b.n	801dafa <arm_depthwise_conv_s8_opt+0xdf6>
 801daf8:	2300      	movs	r3, #0
 801dafa:	f507 728c 	add.w	r2, r7, #280	; 0x118
 801dafe:	6011      	str	r1, [r2, #0]
 801db00:	f507 728a 	add.w	r2, r7, #276	; 0x114
 801db04:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801db06:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801db0a:	2200      	movs	r2, #0
 801db0c:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801db0e:	f507 738a 	add.w	r3, r7, #276	; 0x114
 801db12:	2201      	movs	r2, #1
 801db14:	681b      	ldr	r3, [r3, #0]
 801db16:	409a      	lsls	r2, r3
 801db18:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 801db1c:	3a01      	subs	r2, #1
 801db1e:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 801db20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801db24:	f507 718c 	add.w	r1, r7, #280	; 0x118
 801db28:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 801db2c:	6809      	ldr	r1, [r1, #0]
 801db2e:	6812      	ldr	r2, [r2, #0]
 801db30:	400a      	ands	r2, r1
 801db32:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 801db34:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801db38:	f507 718c 	add.w	r1, r7, #280	; 0x118
 801db3c:	f507 728a 	add.w	r2, r7, #276	; 0x114
 801db40:	6809      	ldr	r1, [r1, #0]
 801db42:	6812      	ldr	r2, [r2, #0]
 801db44:	fa41 f202 	asr.w	r2, r1, r2
 801db48:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 801db4a:	f507 7382 	add.w	r3, r7, #260	; 0x104
 801db4e:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 801db52:	6812      	ldr	r2, [r2, #0]
 801db54:	1052      	asrs	r2, r2, #1
 801db56:	601a      	str	r2, [r3, #0]
    if (result < 0)
 801db58:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801db5c:	681b      	ldr	r3, [r3, #0]
 801db5e:	2b00      	cmp	r3, #0
 801db60:	da06      	bge.n	801db70 <arm_depthwise_conv_s8_opt+0xe6c>
        threshold++;
 801db62:	f507 7382 	add.w	r3, r7, #260	; 0x104
 801db66:	f507 7282 	add.w	r2, r7, #260	; 0x104
 801db6a:	6812      	ldr	r2, [r2, #0]
 801db6c:	3201      	adds	r2, #1
 801db6e:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 801db70:	f507 7284 	add.w	r2, r7, #264	; 0x108
 801db74:	f507 7382 	add.w	r3, r7, #260	; 0x104
 801db78:	6812      	ldr	r2, [r2, #0]
 801db7a:	681b      	ldr	r3, [r3, #0]
 801db7c:	429a      	cmp	r2, r3
 801db7e:	dd06      	ble.n	801db8e <arm_depthwise_conv_s8_opt+0xe8a>
        result++;
 801db80:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801db84:	f507 7288 	add.w	r2, r7, #272	; 0x110
 801db88:	6812      	ldr	r2, [r2, #0]
 801db8a:	3201      	adds	r2, #1
 801db8c:	601a      	str	r2, [r3, #0]
    return result;
 801db8e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801db92:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801db94:	bf00      	nop
 801db96:	f8c7 32f8 	str.w	r3, [r7, #760]	; 0x2f8
                sum_3 += output_offset;
 801db9a:	f8d7 22f8 	ldr.w	r2, [r7, #760]	; 0x2f8
 801db9e:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 801dba2:	4413      	add	r3, r2
 801dba4:	f8c7 32f8 	str.w	r3, [r7, #760]	; 0x2f8
                sum_3 = MAX(sum_3, output_activation_min);
 801dba8:	f8d7 22f8 	ldr.w	r2, [r7, #760]	; 0x2f8
 801dbac:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 801dbb0:	4293      	cmp	r3, r2
 801dbb2:	bfb8      	it	lt
 801dbb4:	4613      	movlt	r3, r2
 801dbb6:	f8c7 32f8 	str.w	r3, [r7, #760]	; 0x2f8
                sum_3 = MIN(sum_3, output_activation_max);
 801dbba:	f8d7 22f8 	ldr.w	r2, [r7, #760]	; 0x2f8
 801dbbe:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 801dbc2:	4293      	cmp	r3, r2
 801dbc4:	bfa8      	it	ge
 801dbc6:	4613      	movge	r3, r2
 801dbc8:	f8c7 32f8 	str.w	r3, [r7, #760]	; 0x2f8
                *output++ = (q7_t)sum_3;
 801dbcc:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 801dbd0:	1c5a      	adds	r2, r3, #1
 801dbd2:	f8c7 2360 	str.w	r2, [r7, #864]	; 0x360
 801dbd6:	f8d7 22f8 	ldr.w	r2, [r7, #760]	; 0x2f8
 801dbda:	b252      	sxtb	r2, r2
 801dbdc:	701a      	strb	r2, [r3, #0]

                sum_4 = arm_nn_requantize(sum_4, *output_mult++, *output_shift++);
 801dbde:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 801dbe2:	1d1a      	adds	r2, r3, #4
 801dbe4:	f8c7 2320 	str.w	r2, [r7, #800]	; 0x320
 801dbe8:	6819      	ldr	r1, [r3, #0]
 801dbea:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 801dbee:	1d1a      	adds	r2, r3, #4
 801dbf0:	f8c7 2324 	str.w	r2, [r7, #804]	; 0x324
 801dbf4:	681a      	ldr	r2, [r3, #0]
 801dbf6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 801dbfa:	f8d7 02f4 	ldr.w	r0, [r7, #756]	; 0x2f4
 801dbfe:	6018      	str	r0, [r3, #0]
 801dc00:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 801dc04:	6019      	str	r1, [r3, #0]
 801dc06:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 801dc0a:	601a      	str	r2, [r3, #0]
 801dc0c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 801dc10:	681b      	ldr	r3, [r3, #0]
 801dc12:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801dc16:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 801dc1a:	6812      	ldr	r2, [r2, #0]
 801dc1c:	409a      	lsls	r2, r3
 801dc1e:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 801dc22:	601a      	str	r2, [r3, #0]
 801dc24:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 801dc28:	f507 72ae 	add.w	r2, r7, #348	; 0x15c
 801dc2c:	6812      	ldr	r2, [r2, #0]
 801dc2e:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801dc30:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 801dc34:	2200      	movs	r2, #0
 801dc36:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 801dc38:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801dc3c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801dc40:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 801dc42:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801dc46:	2200      	movs	r2, #0
 801dc48:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801dc4a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 801dc4e:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 801dc52:	681b      	ldr	r3, [r3, #0]
 801dc54:	4618      	mov	r0, r3
 801dc56:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801dc5a:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 801dc5e:	681b      	ldr	r3, [r3, #0]
 801dc60:	461a      	mov	r2, r3
 801dc62:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801dc66:	fb02 f501 	mul.w	r5, r2, r1
 801dc6a:	fb00 f403 	mul.w	r4, r0, r3
 801dc6e:	442c      	add	r4, r5
 801dc70:	fba0 2302 	umull	r2, r3, r0, r2
 801dc74:	18e1      	adds	r1, r4, r3
 801dc76:	460b      	mov	r3, r1
 801dc78:	eb18 0a02 	adds.w	sl, r8, r2
 801dc7c:	eb49 0b03 	adc.w	fp, r9, r3
 801dc80:	e9c7 ab14 	strd	sl, fp, [r7, #80]	; 0x50
    result = (int32_t)(mult.long_long >> 31);
 801dc84:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 801dc88:	f04f 0200 	mov.w	r2, #0
 801dc8c:	f04f 0300 	mov.w	r3, #0
 801dc90:	0fc2      	lsrs	r2, r0, #31
 801dc92:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801dc96:	17cb      	asrs	r3, r1, #31
 801dc98:	f507 71a6 	add.w	r1, r7, #332	; 0x14c
 801dc9c:	4613      	mov	r3, r2
 801dc9e:	600b      	str	r3, [r1, #0]
    return result;
 801dca0:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 801dca4:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801dca6:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 801dcaa:	681b      	ldr	r3, [r3, #0]
 801dcac:	2b00      	cmp	r3, #0
 801dcae:	dc04      	bgt.n	801dcba <arm_depthwise_conv_s8_opt+0xfb6>
 801dcb0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 801dcb4:	681b      	ldr	r3, [r3, #0]
 801dcb6:	425b      	negs	r3, r3
 801dcb8:	e000      	b.n	801dcbc <arm_depthwise_conv_s8_opt+0xfb8>
 801dcba:	2300      	movs	r3, #0
 801dcbc:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 801dcc0:	6011      	str	r1, [r2, #0]
 801dcc2:	f507 72a2 	add.w	r2, r7, #324	; 0x144
 801dcc6:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801dcc8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801dccc:	2200      	movs	r2, #0
 801dcce:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801dcd0:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 801dcd4:	2201      	movs	r2, #1
 801dcd6:	681b      	ldr	r3, [r3, #0]
 801dcd8:	409a      	lsls	r2, r3
 801dcda:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 801dcde:	3a01      	subs	r2, #1
 801dce0:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 801dce2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801dce6:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 801dcea:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 801dcee:	6809      	ldr	r1, [r1, #0]
 801dcf0:	6812      	ldr	r2, [r2, #0]
 801dcf2:	400a      	ands	r2, r1
 801dcf4:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 801dcf6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801dcfa:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 801dcfe:	f507 72a2 	add.w	r2, r7, #324	; 0x144
 801dd02:	6809      	ldr	r1, [r1, #0]
 801dd04:	6812      	ldr	r2, [r2, #0]
 801dd06:	fa41 f202 	asr.w	r2, r1, r2
 801dd0a:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 801dd0c:	f507 739a 	add.w	r3, r7, #308	; 0x134
 801dd10:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 801dd14:	6812      	ldr	r2, [r2, #0]
 801dd16:	1052      	asrs	r2, r2, #1
 801dd18:	601a      	str	r2, [r3, #0]
    if (result < 0)
 801dd1a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801dd1e:	681b      	ldr	r3, [r3, #0]
 801dd20:	2b00      	cmp	r3, #0
 801dd22:	da06      	bge.n	801dd32 <arm_depthwise_conv_s8_opt+0x102e>
        threshold++;
 801dd24:	f507 739a 	add.w	r3, r7, #308	; 0x134
 801dd28:	f507 729a 	add.w	r2, r7, #308	; 0x134
 801dd2c:	6812      	ldr	r2, [r2, #0]
 801dd2e:	3201      	adds	r2, #1
 801dd30:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 801dd32:	f507 729c 	add.w	r2, r7, #312	; 0x138
 801dd36:	f507 739a 	add.w	r3, r7, #308	; 0x134
 801dd3a:	6812      	ldr	r2, [r2, #0]
 801dd3c:	681b      	ldr	r3, [r3, #0]
 801dd3e:	429a      	cmp	r2, r3
 801dd40:	dd06      	ble.n	801dd50 <arm_depthwise_conv_s8_opt+0x104c>
        result++;
 801dd42:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801dd46:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 801dd4a:	6812      	ldr	r2, [r2, #0]
 801dd4c:	3201      	adds	r2, #1
 801dd4e:	601a      	str	r2, [r3, #0]
    return result;
 801dd50:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801dd54:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801dd56:	bf00      	nop
 801dd58:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
                sum_4 += output_offset;
 801dd5c:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 801dd60:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 801dd64:	4413      	add	r3, r2
 801dd66:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
                sum_4 = MAX(sum_4, output_activation_min);
 801dd6a:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 801dd6e:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 801dd72:	4293      	cmp	r3, r2
 801dd74:	bfb8      	it	lt
 801dd76:	4613      	movlt	r3, r2
 801dd78:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
                sum_4 = MIN(sum_4, output_activation_max);
 801dd7c:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 801dd80:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 801dd84:	4293      	cmp	r3, r2
 801dd86:	bfa8      	it	ge
 801dd88:	4613      	movge	r3, r2
 801dd8a:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
                *output++ = (q7_t)sum_4;
 801dd8e:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 801dd92:	1c5a      	adds	r2, r3, #1
 801dd94:	f8c7 2360 	str.w	r2, [r7, #864]	; 0x360
 801dd98:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 801dd9c:	b252      	sxtb	r2, r2
 801dd9e:	701a      	strb	r2, [r3, #0]

                row_count--;
 801dda0:	f8b7 331a 	ldrh.w	r3, [r7, #794]	; 0x31a
 801dda4:	3b01      	subs	r3, #1
 801dda6:	f8a7 331a 	strh.w	r3, [r7, #794]	; 0x31a
            while (row_count)
 801ddaa:	f8b7 331a 	ldrh.w	r3, [r7, #794]	; 0x31a
 801ddae:	2b00      	cmp	r3, #0
 801ddb0:	f47f a959 	bne.w	801d066 <arm_depthwise_conv_s8_opt+0x362>
            }

            row_count = output_ch & 0x3;
 801ddb4:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 801ddb8:	b29b      	uxth	r3, r3
 801ddba:	f003 0303 	and.w	r3, r3, #3
 801ddbe:	f8a7 331a 	strh.w	r3, [r7, #794]	; 0x31a
            while (row_count)
 801ddc2:	e13e      	b.n	801e042 <arm_depthwise_conv_s8_opt+0x133e>
            {
                q15_t *col_pos = col_buffer_start + row_shift;
 801ddc4:	f8b7 3318 	ldrh.w	r3, [r7, #792]	; 0x318
 801ddc8:	005b      	lsls	r3, r3, #1
 801ddca:	f8d7 2298 	ldr.w	r2, [r7, #664]	; 0x298
 801ddce:	4413      	add	r3, r2
 801ddd0:	f8c7 3278 	str.w	r3, [r7, #632]	; 0x278
                const q7_t *row_pos = kernel + row_shift;
 801ddd4:	f8b7 3318 	ldrh.w	r3, [r7, #792]	; 0x318
 801ddd8:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 801dddc:	4413      	add	r3, r2
 801ddde:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
                q31_t sum = *bias++;
 801dde2:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 801dde6:	1d1a      	adds	r2, r3, #4
 801dde8:	f8c7 2358 	str.w	r2, [r7, #856]	; 0x358
 801ddec:	681b      	ldr	r3, [r3, #0]
 801ddee:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
                const uint16_t col_count = (kernel_x * kernel_y);
 801ddf2:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 801ddf6:	b29a      	uxth	r2, r3
 801ddf8:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 801ddfc:	b29b      	uxth	r3, r3
 801ddfe:	fb12 f303 	smulbb	r3, r2, r3
 801de02:	f8a7 3272 	strh.w	r3, [r7, #626]	; 0x272
                row_shift += 1;
 801de06:	f8b7 3318 	ldrh.w	r3, [r7, #792]	; 0x318
 801de0a:	3301      	adds	r3, #1
 801de0c:	f8a7 3318 	strh.w	r3, [r7, #792]	; 0x318

                for (int i = 0; i < col_count; i++)
 801de10:	2300      	movs	r3, #0
 801de12:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 801de16:	e024      	b.n	801de62 <arm_depthwise_conv_s8_opt+0x115e>
                {
                    sum += row_pos[i * input_ch] * col_pos[i * input_ch];
 801de18:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801de1c:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 801de20:	fb02 f303 	mul.w	r3, r2, r3
 801de24:	461a      	mov	r2, r3
 801de26:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 801de2a:	4413      	add	r3, r2
 801de2c:	f993 3000 	ldrsb.w	r3, [r3]
 801de30:	4619      	mov	r1, r3
 801de32:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801de36:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 801de3a:	fb02 f303 	mul.w	r3, r2, r3
 801de3e:	005b      	lsls	r3, r3, #1
 801de40:	f8d7 2278 	ldr.w	r2, [r7, #632]	; 0x278
 801de44:	4413      	add	r3, r2
 801de46:	f9b3 3000 	ldrsh.w	r3, [r3]
 801de4a:	fb03 f301 	mul.w	r3, r3, r1
 801de4e:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801de52:	4413      	add	r3, r2
 801de54:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
                for (int i = 0; i < col_count; i++)
 801de58:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801de5c:	3301      	adds	r3, #1
 801de5e:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 801de62:	f8b7 3272 	ldrh.w	r3, [r7, #626]	; 0x272
 801de66:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 801de6a:	429a      	cmp	r2, r3
 801de6c:	dbd4      	blt.n	801de18 <arm_depthwise_conv_s8_opt+0x1114>
                }
                sum = arm_nn_requantize(sum, *output_mult++, *output_shift++);
 801de6e:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 801de72:	1d1a      	adds	r2, r3, #4
 801de74:	f8c7 2320 	str.w	r2, [r7, #800]	; 0x320
 801de78:	6819      	ldr	r1, [r3, #0]
 801de7a:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 801de7e:	1d1a      	adds	r2, r3, #4
 801de80:	f8c7 2324 	str.w	r2, [r7, #804]	; 0x324
 801de84:	681a      	ldr	r2, [r3, #0]
 801de86:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801de8a:	f8d7 02e4 	ldr.w	r0, [r7, #740]	; 0x2e4
 801de8e:	6018      	str	r0, [r3, #0]
 801de90:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 801de94:	6019      	str	r1, [r3, #0]
 801de96:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801de9a:	601a      	str	r2, [r3, #0]
 801de9c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801dea0:	681b      	ldr	r3, [r3, #0]
 801dea2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801dea6:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 801deaa:	6812      	ldr	r2, [r2, #0]
 801deac:	409a      	lsls	r2, r3
 801deae:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801deb2:	601a      	str	r2, [r3, #0]
 801deb4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801deb8:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 801debc:	6812      	ldr	r2, [r2, #0]
 801debe:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801dec0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801dec4:	2200      	movs	r2, #0
 801dec6:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 801dec8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801decc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801ded0:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 801ded2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801ded6:	2200      	movs	r2, #0
 801ded8:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801deda:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	; 0x30
 801dede:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801dee2:	681b      	ldr	r3, [r3, #0]
 801dee4:	4618      	mov	r0, r3
 801dee6:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801deea:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801deee:	681b      	ldr	r3, [r3, #0]
 801def0:	461a      	mov	r2, r3
 801def2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801def6:	fb02 f501 	mul.w	r5, r2, r1
 801defa:	fb00 f403 	mul.w	r4, r0, r3
 801defe:	442c      	add	r4, r5
 801df00:	fba0 2302 	umull	r2, r3, r0, r2
 801df04:	18e1      	adds	r1, r4, r3
 801df06:	460b      	mov	r3, r1
 801df08:	eb18 0102 	adds.w	r1, r8, r2
 801df0c:	6039      	str	r1, [r7, #0]
 801df0e:	eb49 0303 	adc.w	r3, r9, r3
 801df12:	607b      	str	r3, [r7, #4]
 801df14:	e9d7 3400 	ldrd	r3, r4, [r7]
 801df18:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    result = (int32_t)(mult.long_long >> 31);
 801df1c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 801df20:	f04f 0200 	mov.w	r2, #0
 801df24:	f04f 0300 	mov.w	r3, #0
 801df28:	0fc2      	lsrs	r2, r0, #31
 801df2a:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801df2e:	17cb      	asrs	r3, r1, #31
 801df30:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 801df34:	4613      	mov	r3, r2
 801df36:	600b      	str	r3, [r1, #0]
    return result;
 801df38:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801df3c:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801df3e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801df42:	681b      	ldr	r3, [r3, #0]
 801df44:	2b00      	cmp	r3, #0
 801df46:	dc04      	bgt.n	801df52 <arm_depthwise_conv_s8_opt+0x124e>
 801df48:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801df4c:	681b      	ldr	r3, [r3, #0]
 801df4e:	425b      	negs	r3, r3
 801df50:	e000      	b.n	801df54 <arm_depthwise_conv_s8_opt+0x1250>
 801df52:	2300      	movs	r3, #0
 801df54:	f107 0288 	add.w	r2, r7, #136	; 0x88
 801df58:	6011      	str	r1, [r2, #0]
 801df5a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 801df5e:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801df60:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801df64:	2200      	movs	r2, #0
 801df66:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801df68:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801df6c:	2201      	movs	r2, #1
 801df6e:	681b      	ldr	r3, [r3, #0]
 801df70:	409a      	lsls	r2, r3
 801df72:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 801df76:	3a01      	subs	r2, #1
 801df78:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 801df7a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801df7e:	f107 0188 	add.w	r1, r7, #136	; 0x88
 801df82:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 801df86:	6809      	ldr	r1, [r1, #0]
 801df88:	6812      	ldr	r2, [r2, #0]
 801df8a:	400a      	ands	r2, r1
 801df8c:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 801df8e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801df92:	f107 0188 	add.w	r1, r7, #136	; 0x88
 801df96:	f107 0284 	add.w	r2, r7, #132	; 0x84
 801df9a:	6809      	ldr	r1, [r1, #0]
 801df9c:	6812      	ldr	r2, [r2, #0]
 801df9e:	fa41 f202 	asr.w	r2, r1, r2
 801dfa2:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 801dfa4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 801dfa8:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 801dfac:	6812      	ldr	r2, [r2, #0]
 801dfae:	1052      	asrs	r2, r2, #1
 801dfb0:	601a      	str	r2, [r3, #0]
    if (result < 0)
 801dfb2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801dfb6:	681b      	ldr	r3, [r3, #0]
 801dfb8:	2b00      	cmp	r3, #0
 801dfba:	da06      	bge.n	801dfca <arm_depthwise_conv_s8_opt+0x12c6>
        threshold++;
 801dfbc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 801dfc0:	f107 0274 	add.w	r2, r7, #116	; 0x74
 801dfc4:	6812      	ldr	r2, [r2, #0]
 801dfc6:	3201      	adds	r2, #1
 801dfc8:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 801dfca:	f107 0278 	add.w	r2, r7, #120	; 0x78
 801dfce:	f107 0374 	add.w	r3, r7, #116	; 0x74
 801dfd2:	6812      	ldr	r2, [r2, #0]
 801dfd4:	681b      	ldr	r3, [r3, #0]
 801dfd6:	429a      	cmp	r2, r3
 801dfd8:	dd06      	ble.n	801dfe8 <arm_depthwise_conv_s8_opt+0x12e4>
        result++;
 801dfda:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801dfde:	f107 0280 	add.w	r2, r7, #128	; 0x80
 801dfe2:	6812      	ldr	r2, [r2, #0]
 801dfe4:	3201      	adds	r2, #1
 801dfe6:	601a      	str	r2, [r3, #0]
    return result;
 801dfe8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801dfec:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801dfee:	bf00      	nop
 801dff0:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
                sum += output_offset;
 801dff4:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801dff8:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 801dffc:	4413      	add	r3, r2
 801dffe:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
                sum = MAX(sum, output_activation_min);
 801e002:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801e006:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 801e00a:	4293      	cmp	r3, r2
 801e00c:	bfb8      	it	lt
 801e00e:	4613      	movlt	r3, r2
 801e010:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
                sum = MIN(sum, output_activation_max);
 801e014:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801e018:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 801e01c:	4293      	cmp	r3, r2
 801e01e:	bfa8      	it	ge
 801e020:	4613      	movge	r3, r2
 801e022:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
                *output++ = (q7_t)sum;
 801e026:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 801e02a:	1c5a      	adds	r2, r3, #1
 801e02c:	f8c7 2360 	str.w	r2, [r7, #864]	; 0x360
 801e030:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801e034:	b252      	sxtb	r2, r2
 801e036:	701a      	strb	r2, [r3, #0]

                row_count--;
 801e038:	f8b7 331a 	ldrh.w	r3, [r7, #794]	; 0x31a
 801e03c:	3b01      	subs	r3, #1
 801e03e:	f8a7 331a 	strh.w	r3, [r7, #794]	; 0x31a
            while (row_count)
 801e042:	f8b7 331a 	ldrh.w	r3, [r7, #794]	; 0x31a
 801e046:	2b00      	cmp	r3, #0
 801e048:	f47f aebc 	bne.w	801ddc4 <arm_depthwise_conv_s8_opt+0x10c0>
            }

            // clear counter and pointers
            col_buffer = col_buffer_start;
 801e04c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801e050:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
        for (int i_out_x = 0; i_out_x < output_x; i_out_x++)
 801e054:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 801e058:	3301      	adds	r3, #1
 801e05a:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
 801e05e:	f8d7 2310 	ldr.w	r2, [r7, #784]	; 0x310
 801e062:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 801e066:	429a      	cmp	r2, r3
 801e068:	f6fe af02 	blt.w	801ce70 <arm_depthwise_conv_s8_opt+0x16c>
    for (int i_out_y = 0; i_out_y < output_y; i_out_y++)
 801e06c:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 801e070:	3301      	adds	r3, #1
 801e072:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
 801e076:	f8d7 2314 	ldr.w	r2, [r7, #788]	; 0x314
 801e07a:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 801e07e:	429a      	cmp	r2, r3
 801e080:	f6fe aee1 	blt.w	801ce46 <arm_depthwise_conv_s8_opt+0x142>
                                 output_dims,
                                 output);
#endif /* ARM_MATH_MVEI | ARM_MATH_DSP */

    /* Return to application */
    return ARM_MATH_SUCCESS;
 801e084:	2300      	movs	r3, #0
}
 801e086:	4618      	mov	r0, r3
 801e088:	f507 774a 	add.w	r7, r7, #808	; 0x328
 801e08c:	46bd      	mov	sp, r7
 801e08e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801e092 <arm_depthwise_conv_s8_opt_get_buffer_size>:

int32_t arm_depthwise_conv_s8_opt_get_buffer_size(const cmsis_nn_dims *input_dims, const cmsis_nn_dims *filter_dims)
{
 801e092:	b480      	push	{r7}
 801e094:	b083      	sub	sp, #12
 801e096:	af00      	add	r7, sp, #0
 801e098:	6078      	str	r0, [r7, #4]
 801e09a:	6039      	str	r1, [r7, #0]
#if defined(ARM_MATH_MVEI)
    /* The + 4 accounts for out of bounds read of the lhs buffers in the *_nt_t_* functions.  */
    return (2 * input_dims->c * filter_dims->w * filter_dims->h) * (int32_t)sizeof(int16_t) + 4;
#elif defined(ARM_MATH_DSP)
    return (input_dims->c * filter_dims->w * filter_dims->h) * sizeof(int16_t);
 801e09c:	687b      	ldr	r3, [r7, #4]
 801e09e:	68db      	ldr	r3, [r3, #12]
 801e0a0:	683a      	ldr	r2, [r7, #0]
 801e0a2:	6892      	ldr	r2, [r2, #8]
 801e0a4:	fb02 f303 	mul.w	r3, r2, r3
 801e0a8:	683a      	ldr	r2, [r7, #0]
 801e0aa:	6852      	ldr	r2, [r2, #4]
 801e0ac:	fb02 f303 	mul.w	r3, r2, r3
 801e0b0:	005b      	lsls	r3, r3, #1
#else
    (void)input_dims;
    (void)filter_dims;
    return 0;
#endif
}
 801e0b2:	4618      	mov	r0, r3
 801e0b4:	370c      	adds	r7, #12
 801e0b6:	46bd      	mov	sp, r7
 801e0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e0bc:	4770      	bx	lr

0801e0be <arm_depthwise_conv_wrapper_s8>:
                                         const q7_t *filter,
                                         const cmsis_nn_dims *bias_dims,
                                         const int32_t *bias,
                                         const cmsis_nn_dims *output_dims,
                                         q7_t *output)
{
 801e0be:	b580      	push	{r7, lr}
 801e0c0:	b08e      	sub	sp, #56	; 0x38
 801e0c2:	af08      	add	r7, sp, #32
 801e0c4:	60f8      	str	r0, [r7, #12]
 801e0c6:	60b9      	str	r1, [r7, #8]
 801e0c8:	607a      	str	r2, [r7, #4]
 801e0ca:	603b      	str	r3, [r7, #0]
    arm_status status = ARM_MATH_SUCCESS;
 801e0cc:	2300      	movs	r3, #0
 801e0ce:	75fb      	strb	r3, [r7, #23]
    if (1 == dw_conv_params->ch_mult && input_dims->n == 1)
 801e0d0:	68bb      	ldr	r3, [r7, #8]
 801e0d2:	689b      	ldr	r3, [r3, #8]
 801e0d4:	2b01      	cmp	r3, #1
 801e0d6:	d13e      	bne.n	801e156 <arm_depthwise_conv_wrapper_s8+0x98>
 801e0d8:	683b      	ldr	r3, [r7, #0]
 801e0da:	681b      	ldr	r3, [r3, #0]
 801e0dc:	2b01      	cmp	r3, #1
 801e0de:	d13a      	bne.n	801e156 <arm_depthwise_conv_wrapper_s8+0x98>
    {
#if !defined(ARM_MATH_MVEI)
        if ((filter_dims->w == 3) && (filter_dims->h == 3) && (dw_conv_params->padding.h <= 1))
 801e0e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e0e2:	689b      	ldr	r3, [r3, #8]
 801e0e4:	2b03      	cmp	r3, #3
 801e0e6:	d11f      	bne.n	801e128 <arm_depthwise_conv_wrapper_s8+0x6a>
 801e0e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e0ea:	685b      	ldr	r3, [r3, #4]
 801e0ec:	2b03      	cmp	r3, #3
 801e0ee:	d11b      	bne.n	801e128 <arm_depthwise_conv_wrapper_s8+0x6a>
 801e0f0:	68bb      	ldr	r3, [r7, #8]
 801e0f2:	699b      	ldr	r3, [r3, #24]
 801e0f4:	2b01      	cmp	r3, #1
 801e0f6:	dc17      	bgt.n	801e128 <arm_depthwise_conv_wrapper_s8+0x6a>
        {
            status = arm_depthwise_conv_3x3_s8(ctx,
 801e0f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e0fa:	9306      	str	r3, [sp, #24]
 801e0fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e0fe:	9305      	str	r3, [sp, #20]
 801e100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e102:	9304      	str	r3, [sp, #16]
 801e104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e106:	9303      	str	r3, [sp, #12]
 801e108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e10a:	9302      	str	r3, [sp, #8]
 801e10c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e10e:	9301      	str	r3, [sp, #4]
 801e110:	6a3b      	ldr	r3, [r7, #32]
 801e112:	9300      	str	r3, [sp, #0]
 801e114:	683b      	ldr	r3, [r7, #0]
 801e116:	687a      	ldr	r2, [r7, #4]
 801e118:	68b9      	ldr	r1, [r7, #8]
 801e11a:	68f8      	ldr	r0, [r7, #12]
 801e11c:	f7fc fe9e 	bl	801ae5c <arm_depthwise_conv_3x3_s8>
 801e120:	4603      	mov	r3, r0
 801e122:	75fb      	strb	r3, [r7, #23]
 801e124:	bf00      	nop
        if ((filter_dims->w == 3) && (filter_dims->h == 3) && (dw_conv_params->padding.h <= 1))
 801e126:	e02c      	b.n	801e182 <arm_depthwise_conv_wrapper_s8+0xc4>
                                               output);
        }
        else
#endif
        {
            status = arm_depthwise_conv_s8_opt(ctx,
 801e128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e12a:	9306      	str	r3, [sp, #24]
 801e12c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e12e:	9305      	str	r3, [sp, #20]
 801e130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e132:	9304      	str	r3, [sp, #16]
 801e134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e136:	9303      	str	r3, [sp, #12]
 801e138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e13a:	9302      	str	r3, [sp, #8]
 801e13c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e13e:	9301      	str	r3, [sp, #4]
 801e140:	6a3b      	ldr	r3, [r7, #32]
 801e142:	9300      	str	r3, [sp, #0]
 801e144:	683b      	ldr	r3, [r7, #0]
 801e146:	687a      	ldr	r2, [r7, #4]
 801e148:	68b9      	ldr	r1, [r7, #8]
 801e14a:	68f8      	ldr	r0, [r7, #12]
 801e14c:	f7fe fdda 	bl	801cd04 <arm_depthwise_conv_s8_opt>
 801e150:	4603      	mov	r3, r0
 801e152:	75fb      	strb	r3, [r7, #23]
        if ((filter_dims->w == 3) && (filter_dims->h == 3) && (dw_conv_params->padding.h <= 1))
 801e154:	e015      	b.n	801e182 <arm_depthwise_conv_wrapper_s8+0xc4>
                                               output);
        }
    }
    else
    {
        status = arm_depthwise_conv_s8(ctx,
 801e156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e158:	9306      	str	r3, [sp, #24]
 801e15a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e15c:	9305      	str	r3, [sp, #20]
 801e15e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e160:	9304      	str	r3, [sp, #16]
 801e162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e164:	9303      	str	r3, [sp, #12]
 801e166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e168:	9302      	str	r3, [sp, #8]
 801e16a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e16c:	9301      	str	r3, [sp, #4]
 801e16e:	6a3b      	ldr	r3, [r7, #32]
 801e170:	9300      	str	r3, [sp, #0]
 801e172:	683b      	ldr	r3, [r7, #0]
 801e174:	687a      	ldr	r2, [r7, #4]
 801e176:	68b9      	ldr	r1, [r7, #8]
 801e178:	68f8      	ldr	r0, [r7, #12]
 801e17a:	f7fe fce9 	bl	801cb50 <arm_depthwise_conv_s8>
 801e17e:	4603      	mov	r3, r0
 801e180:	75fb      	strb	r3, [r7, #23]
                                       output_dims,
                                       output);
    }

    /* Return to application */
    return status;
 801e182:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801e186:	4618      	mov	r0, r3
 801e188:	3718      	adds	r7, #24
 801e18a:	46bd      	mov	sp, r7
 801e18c:	bd80      	pop	{r7, pc}

0801e18e <arm_depthwise_conv_wrapper_s8_get_buffer_size>:

int32_t arm_depthwise_conv_wrapper_s8_get_buffer_size(const cmsis_nn_dw_conv_params *dw_conv_params,
                                                      const cmsis_nn_dims *input_dims,
                                                      const cmsis_nn_dims *filter_dims,
                                                      const cmsis_nn_dims *output_dims)
{
 801e18e:	b580      	push	{r7, lr}
 801e190:	b086      	sub	sp, #24
 801e192:	af00      	add	r7, sp, #0
 801e194:	60f8      	str	r0, [r7, #12]
 801e196:	60b9      	str	r1, [r7, #8]
 801e198:	607a      	str	r2, [r7, #4]
 801e19a:	603b      	str	r3, [r7, #0]
    (void)dw_conv_params;
    int32_t size = 0;
 801e19c:	2300      	movs	r3, #0
 801e19e:	617b      	str	r3, [r7, #20]

    if (input_dims->c == output_dims->c && input_dims->n == 1)
 801e1a0:	68bb      	ldr	r3, [r7, #8]
 801e1a2:	68da      	ldr	r2, [r3, #12]
 801e1a4:	683b      	ldr	r3, [r7, #0]
 801e1a6:	68db      	ldr	r3, [r3, #12]
 801e1a8:	429a      	cmp	r2, r3
 801e1aa:	d108      	bne.n	801e1be <arm_depthwise_conv_wrapper_s8_get_buffer_size+0x30>
 801e1ac:	68bb      	ldr	r3, [r7, #8]
 801e1ae:	681b      	ldr	r3, [r3, #0]
 801e1b0:	2b01      	cmp	r3, #1
 801e1b2:	d104      	bne.n	801e1be <arm_depthwise_conv_wrapper_s8_get_buffer_size+0x30>
    {
        size = arm_depthwise_conv_s8_opt_get_buffer_size(input_dims, filter_dims);
 801e1b4:	6879      	ldr	r1, [r7, #4]
 801e1b6:	68b8      	ldr	r0, [r7, #8]
 801e1b8:	f7ff ff6b 	bl	801e092 <arm_depthwise_conv_s8_opt_get_buffer_size>
 801e1bc:	6178      	str	r0, [r7, #20]
    }

    return size;
 801e1be:	697b      	ldr	r3, [r7, #20]
}
 801e1c0:	4618      	mov	r0, r3
 801e1c2:	3718      	adds	r7, #24
 801e1c4:	46bd      	mov	sp, r7
 801e1c6:	bd80      	pop	{r7, pc}

0801e1c8 <arm_nn_mat_mult_kernel_s8_s16>:
                                    const int16_t activation_min,
                                    const int16_t activation_max,
                                    const uint16_t num_col_a,
                                    const int32_t *const output_bias,
                                    q7_t *out_0)
{
 801e1c8:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 801e1cc:	f5ad 6d83 	sub.w	sp, sp, #1048	; 0x418
 801e1d0:	af00      	add	r7, sp, #0
 801e1d2:	f107 0434 	add.w	r4, r7, #52	; 0x34
 801e1d6:	6020      	str	r0, [r4, #0]
 801e1d8:	f107 0030 	add.w	r0, r7, #48	; 0x30
 801e1dc:	6001      	str	r1, [r0, #0]
 801e1de:	4611      	mov	r1, r2
 801e1e0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801e1e4:	6013      	str	r3, [r2, #0]
 801e1e6:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 801e1ea:	460b      	mov	r3, r1
 801e1ec:	8013      	strh	r3, [r2, #0]

    return out_1;

#elif defined(ARM_MATH_DSP)
    /* set up the second output pointers */
    q7_t *out_1 = out_0 + output_ch;
 801e1ee:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 801e1f2:	881b      	ldrh	r3, [r3, #0]
 801e1f4:	f8d7 2450 	ldr.w	r2, [r7, #1104]	; 0x450
 801e1f8:	4413      	add	r3, r2
 801e1fa:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
    const int32_t *bias = output_bias;
 801e1fe:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 801e202:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410

    uint16_t row_count = output_ch / 2;
 801e206:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 801e20a:	881b      	ldrh	r3, [r3, #0]
 801e20c:	085b      	lsrs	r3, r3, #1
 801e20e:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
    const q7_t *ip_a0 = input_a;
 801e212:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801e216:	681b      	ldr	r3, [r3, #0]
 801e218:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
    /* this loop over rows in A */
    while (row_count)
 801e21c:	f000 bf0e 	b.w	801f03c <arm_nn_mat_mult_kernel_s8_s16+0xe74>
    {
        /* setup pointers for B */
        const q15_t *ip_b0 = input_b;
 801e220:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 801e224:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801e228:	681b      	ldr	r3, [r3, #0]
 801e22a:	6013      	str	r3, [r2, #0]
        const q15_t *ip_b1 = ip_b0 + num_col_a;
 801e22c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801e230:	681a      	ldr	r2, [r3, #0]
 801e232:	f8b7 3448 	ldrh.w	r3, [r7, #1096]	; 0x448
 801e236:	005b      	lsls	r3, r3, #1
 801e238:	441a      	add	r2, r3
 801e23a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 801e23e:	601a      	str	r2, [r3, #0]

        /* align the second pointer for A */
        const q7_t *ip_a1 = ip_a0 + num_col_a;
 801e240:	f8b7 3448 	ldrh.w	r3, [r7, #1096]	; 0x448
 801e244:	f8d7 2408 	ldr.w	r2, [r7, #1032]	; 0x408
 801e248:	4413      	add	r3, r2
 801e24a:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404

        /* Init accumulator with bias for channel N and N + 1 */
        q31_t ch_0_out_0 = *bias;
 801e24e:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 801e252:	681b      	ldr	r3, [r3, #0]
 801e254:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
        q31_t ch_0_out_1 = *bias++;
 801e258:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 801e25c:	1d1a      	adds	r2, r3, #4
 801e25e:	f8c7 2410 	str.w	r2, [r7, #1040]	; 0x410
 801e262:	681b      	ldr	r3, [r3, #0]
 801e264:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
        q31_t ch_1_out_0 = *bias;
 801e268:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 801e26c:	681b      	ldr	r3, [r3, #0]
 801e26e:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
        q31_t ch_1_out_1 = *bias++;
 801e272:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 801e276:	1d1a      	adds	r2, r3, #4
 801e278:	f8c7 2410 	str.w	r2, [r7, #1040]	; 0x410
 801e27c:	681b      	ldr	r3, [r3, #0]
 801e27e:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4

        uint16_t col_count = num_col_a / 4;
 801e282:	f8b7 3448 	ldrh.w	r3, [r7, #1096]	; 0x448
 801e286:	089b      	lsrs	r3, r3, #2
 801e288:	f8a7 33f2 	strh.w	r3, [r7, #1010]	; 0x3f2
        /* accumulate over the vector */
        while (col_count)
 801e28c:	e2c5      	b.n	801e81a <arm_nn_mat_mult_kernel_s8_s16+0x652>
 801e28e:	f507 7324 	add.w	r3, r7, #656	; 0x290
 801e292:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 801e296:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q15, 4);
 801e298:	f507 7324 	add.w	r3, r7, #656	; 0x290
 801e29c:	681b      	ldr	r3, [r3, #0]
 801e29e:	681b      	ldr	r3, [r3, #0]
 801e2a0:	681b      	ldr	r3, [r3, #0]
 801e2a2:	461a      	mov	r2, r3
 801e2a4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801e2a8:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 801e2aa:	f507 7324 	add.w	r3, r7, #656	; 0x290
 801e2ae:	681b      	ldr	r3, [r3, #0]
 801e2b0:	681b      	ldr	r3, [r3, #0]
 801e2b2:	1d1a      	adds	r2, r3, #4
 801e2b4:	f507 7324 	add.w	r3, r7, #656	; 0x290
 801e2b8:	681b      	ldr	r3, [r3, #0]
 801e2ba:	601a      	str	r2, [r3, #0]
    return (val);
 801e2bc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801e2c0:	681b      	ldr	r3, [r3, #0]
        {
            q31_t a01, a02, a11, a12;
            q31_t b0 = arm_nn_read_q15x2_ia(&ip_b0);
 801e2c2:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 801e2c6:	f507 7325 	add.w	r3, r7, #660	; 0x294
 801e2ca:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 801e2ce:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q15, 4);
 801e2d0:	f507 7325 	add.w	r3, r7, #660	; 0x294
 801e2d4:	681b      	ldr	r3, [r3, #0]
 801e2d6:	681b      	ldr	r3, [r3, #0]
 801e2d8:	681b      	ldr	r3, [r3, #0]
 801e2da:	461a      	mov	r2, r3
 801e2dc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801e2e0:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 801e2e2:	f507 7325 	add.w	r3, r7, #660	; 0x294
 801e2e6:	681b      	ldr	r3, [r3, #0]
 801e2e8:	681b      	ldr	r3, [r3, #0]
 801e2ea:	1d1a      	adds	r2, r3, #4
 801e2ec:	f507 7325 	add.w	r3, r7, #660	; 0x294
 801e2f0:	681b      	ldr	r3, [r3, #0]
 801e2f2:	601a      	str	r2, [r3, #0]
    return (val);
 801e2f4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801e2f8:	681b      	ldr	r3, [r3, #0]
            q31_t b1 = arm_nn_read_q15x2_ia(&ip_b1);
 801e2fa:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 801e2fe:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801e302:	f8d7 2408 	ldr.w	r2, [r7, #1032]	; 0x408
 801e306:	601a      	str	r2, [r3, #0]
 801e308:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 801e30c:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 801e310:	601a      	str	r2, [r3, #0]
 801e312:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 801e316:	f107 0298 	add.w	r2, r7, #152	; 0x98
 801e31a:	601a      	str	r2, [r3, #0]
 801e31c:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 801e320:	f107 0284 	add.w	r2, r7, #132	; 0x84
 801e324:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 801e326:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 801e32a:	681b      	ldr	r3, [r3, #0]
 801e32c:	681b      	ldr	r3, [r3, #0]
 801e32e:	681b      	ldr	r3, [r3, #0]
 801e330:	461a      	mov	r2, r3
 801e332:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801e336:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801e338:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 801e33c:	681b      	ldr	r3, [r3, #0]
 801e33e:	681b      	ldr	r3, [r3, #0]
 801e340:	1d1a      	adds	r2, r3, #4
 801e342:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 801e346:	681b      	ldr	r3, [r3, #0]
 801e348:	601a      	str	r2, [r3, #0]
    return (val);
 801e34a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801e34e:	681a      	ldr	r2, [r3, #0]
    q31_t inA = arm_nn_read_q7x4_ia(&source);
 801e350:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 801e354:	601a      	str	r2, [r3, #0]
    q31_t inAbuf1 = __SXTB16_RORn((uint32_t)inA, 8);
 801e356:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 801e35a:	681a      	ldr	r2, [r3, #0]
 801e35c:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e360:	601a      	str	r2, [r3, #0]
 801e362:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 801e366:	2208      	movs	r2, #8
 801e368:	601a      	str	r2, [r3, #0]
 801e36a:	f507 7234 	add.w	r2, r7, #720	; 0x2d0
 801e36e:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801e372:	681b      	ldr	r3, [r3, #0]
 801e374:	6013      	str	r3, [r2, #0]
 801e376:	f507 7233 	add.w	r2, r7, #716	; 0x2cc
 801e37a:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 801e37e:	681b      	ldr	r3, [r3, #0]
 801e380:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801e382:	f507 7233 	add.w	r2, r7, #716	; 0x2cc
 801e386:	f507 7333 	add.w	r3, r7, #716	; 0x2cc
 801e38a:	681b      	ldr	r3, [r3, #0]
 801e38c:	f003 031f 	and.w	r3, r3, #31
 801e390:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801e392:	f507 7333 	add.w	r3, r7, #716	; 0x2cc
 801e396:	681b      	ldr	r3, [r3, #0]
 801e398:	2b00      	cmp	r3, #0
 801e39a:	d103      	bne.n	801e3a4 <arm_nn_mat_mult_kernel_s8_s16+0x1dc>
    return op1;
 801e39c:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 801e3a0:	681b      	ldr	r3, [r3, #0]
 801e3a2:	e007      	b.n	801e3b4 <arm_nn_mat_mult_kernel_s8_s16+0x1ec>
  return (op1 >> op2) | (op1 << (32U - op2));
 801e3a4:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 801e3a8:	f507 7133 	add.w	r1, r7, #716	; 0x2cc
 801e3ac:	681a      	ldr	r2, [r3, #0]
 801e3ae:	680b      	ldr	r3, [r1, #0]
 801e3b0:	fa62 f303 	ror.w	r3, r2, r3
 801e3b4:	f507 7232 	add.w	r2, r7, #712	; 0x2c8
 801e3b8:	6013      	str	r3, [r2, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801e3ba:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 801e3be:	681b      	ldr	r3, [r3, #0]
 801e3c0:	fa2f f283 	sxtb16	r2, r3
 801e3c4:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 801e3c8:	601a      	str	r2, [r3, #0]
  return(result);
 801e3ca:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 801e3ce:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801e3d0:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 801e3d4:	601a      	str	r2, [r3, #0]
  return result;
 801e3d6:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 801e3da:	681a      	ldr	r2, [r3, #0]
 801e3dc:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 801e3e0:	601a      	str	r2, [r3, #0]
    q31_t inAbuf2 = __SXTB16(inA);
 801e3e2:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 801e3e6:	681a      	ldr	r2, [r3, #0]
 801e3e8:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 801e3ec:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801e3ee:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 801e3f2:	681b      	ldr	r3, [r3, #0]
 801e3f4:	fa2f f283 	sxtb16	r2, r3
 801e3f8:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 801e3fc:	601a      	str	r2, [r3, #0]
  return(result);
 801e3fe:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 801e402:	681a      	ldr	r2, [r3, #0]
 801e404:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 801e408:	601a      	str	r2, [r3, #0]
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 801e40a:	f507 722b 	add.w	r2, r7, #684	; 0x2ac
 801e40e:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 801e412:	681b      	ldr	r3, [r3, #0]
 801e414:	6013      	str	r3, [r2, #0]
 801e416:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 801e41a:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 801e41e:	681b      	ldr	r3, [r3, #0]
 801e420:	6013      	str	r3, [r2, #0]
 801e422:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 801e426:	681a      	ldr	r2, [r3, #0]
 801e428:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 801e42c:	681b      	ldr	r3, [r3, #0]
 801e42e:	eac2 4223 	pkhtb	r2, r2, r3, asr #16
 801e432:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 801e436:	601a      	str	r2, [r3, #0]
 801e438:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 801e43c:	681b      	ldr	r3, [r3, #0]
 801e43e:	461a      	mov	r2, r3
 801e440:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 801e444:	681b      	ldr	r3, [r3, #0]
 801e446:	601a      	str	r2, [r3, #0]
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 801e448:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 801e44c:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 801e450:	681b      	ldr	r3, [r3, #0]
 801e452:	6013      	str	r3, [r2, #0]
 801e454:	f507 7227 	add.w	r2, r7, #668	; 0x29c
 801e458:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 801e45c:	681b      	ldr	r3, [r3, #0]
 801e45e:	6013      	str	r3, [r2, #0]
 801e460:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 801e464:	681a      	ldr	r2, [r3, #0]
 801e466:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 801e46a:	681b      	ldr	r3, [r3, #0]
 801e46c:	eac2 4203 	pkhbt	r2, r2, r3, lsl #16
 801e470:	f507 7326 	add.w	r3, r7, #664	; 0x298
 801e474:	601a      	str	r2, [r3, #0]
 801e476:	f507 7326 	add.w	r3, r7, #664	; 0x298
 801e47a:	681b      	ldr	r3, [r3, #0]
 801e47c:	461a      	mov	r2, r3
 801e47e:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 801e482:	681b      	ldr	r3, [r3, #0]
 801e484:	601a      	str	r2, [r3, #0]
    return source;
 801e486:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801e48a:	681b      	ldr	r3, [r3, #0]

            ip_a0 = read_and_pad(ip_a0, &a01, &a02);
 801e48c:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
 801e490:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 801e494:	f8d7 2404 	ldr.w	r2, [r7, #1028]	; 0x404
 801e498:	601a      	str	r2, [r3, #0]
 801e49a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801e49e:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 801e4a2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801e4a6:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338
 801e4aa:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 801e4ae:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
    memcpy(&val, *in_q7, 4);
 801e4b2:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 801e4b6:	681b      	ldr	r3, [r3, #0]
 801e4b8:	681b      	ldr	r3, [r3, #0]
 801e4ba:	461a      	mov	r2, r3
 801e4bc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801e4c0:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801e4c2:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 801e4c6:	681b      	ldr	r3, [r3, #0]
 801e4c8:	1d1a      	adds	r2, r3, #4
 801e4ca:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 801e4ce:	601a      	str	r2, [r3, #0]
    return (val);
 801e4d0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801e4d4:	681b      	ldr	r3, [r3, #0]
    q31_t inA = arm_nn_read_q7x4_ia(&source);
 801e4d6:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330
    q31_t inAbuf1 = __SXTB16_RORn((uint32_t)inA, 8);
 801e4da:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 801e4de:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
 801e4e2:	2308      	movs	r3, #8
 801e4e4:	f8c7 3328 	str.w	r3, [r7, #808]	; 0x328
 801e4e8:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 801e4ec:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
 801e4f0:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 801e4f4:	f8c7 3320 	str.w	r3, [r7, #800]	; 0x320
  op2 %= 32U;
 801e4f8:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 801e4fc:	f003 031f 	and.w	r3, r3, #31
 801e500:	f8c7 3320 	str.w	r3, [r7, #800]	; 0x320
  if (op2 == 0U)
 801e504:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 801e508:	2b00      	cmp	r3, #0
 801e50a:	d102      	bne.n	801e512 <arm_nn_mat_mult_kernel_s8_s16+0x34a>
    return op1;
 801e50c:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 801e510:	e005      	b.n	801e51e <arm_nn_mat_mult_kernel_s8_s16+0x356>
  return (op1 >> op2) | (op1 << (32U - op2));
 801e512:	f8d7 2324 	ldr.w	r2, [r7, #804]	; 0x324
 801e516:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 801e51a:	fa62 f303 	ror.w	r3, r2, r3
 801e51e:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801e522:	f8d7 331c 	ldr.w	r3, [r7, #796]	; 0x31c
 801e526:	fa2f f283 	sxtb16	r2, r3
 801e52a:	f507 7346 	add.w	r3, r7, #792	; 0x318
 801e52e:	601a      	str	r2, [r3, #0]
  return(result);
 801e530:	f507 7346 	add.w	r3, r7, #792	; 0x318
 801e534:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801e536:	f507 7345 	add.w	r3, r7, #788	; 0x314
 801e53a:	601a      	str	r2, [r3, #0]
  return result;
 801e53c:	f507 7345 	add.w	r3, r7, #788	; 0x314
 801e540:	681a      	ldr	r2, [r3, #0]
 801e542:	f507 7344 	add.w	r3, r7, #784	; 0x310
 801e546:	601a      	str	r2, [r3, #0]
    q31_t inAbuf2 = __SXTB16(inA);
 801e548:	f8d7 2330 	ldr.w	r2, [r7, #816]	; 0x330
 801e54c:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 801e550:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801e552:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 801e556:	681b      	ldr	r3, [r3, #0]
 801e558:	fa2f f283 	sxtb16	r2, r3
 801e55c:	f507 7342 	add.w	r3, r7, #776	; 0x308
 801e560:	601a      	str	r2, [r3, #0]
  return(result);
 801e562:	f507 7342 	add.w	r3, r7, #776	; 0x308
 801e566:	681a      	ldr	r2, [r3, #0]
 801e568:	f507 7341 	add.w	r3, r7, #772	; 0x304
 801e56c:	601a      	str	r2, [r3, #0]
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 801e56e:	f507 7240 	add.w	r2, r7, #768	; 0x300
 801e572:	f507 7344 	add.w	r3, r7, #784	; 0x310
 801e576:	681b      	ldr	r3, [r3, #0]
 801e578:	6013      	str	r3, [r2, #0]
 801e57a:	f507 723f 	add.w	r2, r7, #764	; 0x2fc
 801e57e:	f507 7341 	add.w	r3, r7, #772	; 0x304
 801e582:	681b      	ldr	r3, [r3, #0]
 801e584:	6013      	str	r3, [r2, #0]
 801e586:	f507 7340 	add.w	r3, r7, #768	; 0x300
 801e58a:	681a      	ldr	r2, [r3, #0]
 801e58c:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 801e590:	681b      	ldr	r3, [r3, #0]
 801e592:	eac2 4223 	pkhtb	r2, r2, r3, asr #16
 801e596:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 801e59a:	601a      	str	r2, [r3, #0]
 801e59c:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 801e5a0:	681b      	ldr	r3, [r3, #0]
 801e5a2:	461a      	mov	r2, r3
 801e5a4:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 801e5a8:	601a      	str	r2, [r3, #0]
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 801e5aa:	f507 723d 	add.w	r2, r7, #756	; 0x2f4
 801e5ae:	f507 7341 	add.w	r3, r7, #772	; 0x304
 801e5b2:	681b      	ldr	r3, [r3, #0]
 801e5b4:	6013      	str	r3, [r2, #0]
 801e5b6:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 801e5ba:	f507 7344 	add.w	r3, r7, #784	; 0x310
 801e5be:	681b      	ldr	r3, [r3, #0]
 801e5c0:	6013      	str	r3, [r2, #0]
 801e5c2:	f507 733d 	add.w	r3, r7, #756	; 0x2f4
 801e5c6:	681a      	ldr	r2, [r3, #0]
 801e5c8:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 801e5cc:	681b      	ldr	r3, [r3, #0]
 801e5ce:	eac2 4203 	pkhbt	r2, r2, r3, lsl #16
 801e5d2:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 801e5d6:	601a      	str	r2, [r3, #0]
 801e5d8:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 801e5dc:	681b      	ldr	r3, [r3, #0]
 801e5de:	461a      	mov	r2, r3
 801e5e0:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 801e5e4:	601a      	str	r2, [r3, #0]
    return source;
 801e5e6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 801e5ea:	681b      	ldr	r3, [r3, #0]
            ip_a1 = read_and_pad(ip_a1, &a11, &a12);
 801e5ec:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404

            ch_0_out_0 = __SMLAD(a01, b0, ch_0_out_0);
 801e5f0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 801e5f4:	681b      	ldr	r3, [r3, #0]
 801e5f6:	4619      	mov	r1, r3
 801e5f8:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 801e5fc:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 801e600:	f8c7 134c 	str.w	r1, [r7, #844]	; 0x34c
 801e604:	f8c7 2348 	str.w	r2, [r7, #840]	; 0x348
 801e608:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801e60c:	f8d7 234c 	ldr.w	r2, [r7, #844]	; 0x34c
 801e610:	f8d7 1348 	ldr.w	r1, [r7, #840]	; 0x348
 801e614:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 801e618:	fb22 3301 	smlad	r3, r2, r1, r3
 801e61c:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
  return(result);
 801e620:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 801e624:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
            ch_0_out_1 = __SMLAD(a01, b1, ch_0_out_1);
 801e628:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 801e62c:	681b      	ldr	r3, [r3, #0]
 801e62e:	4619      	mov	r1, r3
 801e630:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 801e634:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 801e638:	f8c7 135c 	str.w	r1, [r7, #860]	; 0x35c
 801e63c:	f8c7 2358 	str.w	r2, [r7, #856]	; 0x358
 801e640:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801e644:	f8d7 235c 	ldr.w	r2, [r7, #860]	; 0x35c
 801e648:	f8d7 1358 	ldr.w	r1, [r7, #856]	; 0x358
 801e64c:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 801e650:	fb22 3301 	smlad	r3, r2, r1, r3
 801e654:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
  return(result);
 801e658:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 801e65c:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
            ch_1_out_0 = __SMLAD(a11, b0, ch_1_out_0);
 801e660:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801e664:	681b      	ldr	r3, [r3, #0]
 801e666:	4619      	mov	r1, r3
 801e668:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 801e66c:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 801e670:	f8c7 136c 	str.w	r1, [r7, #876]	; 0x36c
 801e674:	f8c7 2368 	str.w	r2, [r7, #872]	; 0x368
 801e678:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801e67c:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 801e680:	f8d7 1368 	ldr.w	r1, [r7, #872]	; 0x368
 801e684:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 801e688:	fb22 3301 	smlad	r3, r2, r1, r3
 801e68c:	f8c7 3360 	str.w	r3, [r7, #864]	; 0x360
  return(result);
 801e690:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 801e694:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
            ch_1_out_1 = __SMLAD(a11, b1, ch_1_out_1);
 801e698:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801e69c:	681b      	ldr	r3, [r3, #0]
 801e69e:	4619      	mov	r1, r3
 801e6a0:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 801e6a4:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 801e6a8:	f8c7 137c 	str.w	r1, [r7, #892]	; 0x37c
 801e6ac:	f8c7 2378 	str.w	r2, [r7, #888]	; 0x378
 801e6b0:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801e6b4:	f8d7 237c 	ldr.w	r2, [r7, #892]	; 0x37c
 801e6b8:	f8d7 1378 	ldr.w	r1, [r7, #888]	; 0x378
 801e6bc:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 801e6c0:	fb22 3301 	smlad	r3, r2, r1, r3
 801e6c4:	f8c7 3370 	str.w	r3, [r7, #880]	; 0x370
  return(result);
 801e6c8:	f8d7 3370 	ldr.w	r3, [r7, #880]	; 0x370
 801e6cc:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
 801e6d0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801e6d4:	f8c7 3380 	str.w	r3, [r7, #896]	; 0x380
    memcpy(&val, *in_q15, 4);
 801e6d8:	f8d7 3380 	ldr.w	r3, [r7, #896]	; 0x380
 801e6dc:	681b      	ldr	r3, [r3, #0]
 801e6de:	681b      	ldr	r3, [r3, #0]
 801e6e0:	461a      	mov	r2, r3
 801e6e2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 801e6e6:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 801e6e8:	f8d7 3380 	ldr.w	r3, [r7, #896]	; 0x380
 801e6ec:	681b      	ldr	r3, [r3, #0]
 801e6ee:	1d1a      	adds	r2, r3, #4
 801e6f0:	f8d7 3380 	ldr.w	r3, [r7, #896]	; 0x380
 801e6f4:	601a      	str	r2, [r3, #0]
    return (val);
 801e6f6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 801e6fa:	681b      	ldr	r3, [r3, #0]

            b0 = arm_nn_read_q15x2_ia(&ip_b0);
 801e6fc:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 801e700:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 801e704:	f8c7 3384 	str.w	r3, [r7, #900]	; 0x384
    memcpy(&val, *in_q15, 4);
 801e708:	f8d7 3384 	ldr.w	r3, [r7, #900]	; 0x384
 801e70c:	681b      	ldr	r3, [r3, #0]
 801e70e:	681b      	ldr	r3, [r3, #0]
 801e710:	461a      	mov	r2, r3
 801e712:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801e716:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 801e718:	f8d7 3384 	ldr.w	r3, [r7, #900]	; 0x384
 801e71c:	681b      	ldr	r3, [r3, #0]
 801e71e:	1d1a      	adds	r2, r3, #4
 801e720:	f8d7 3384 	ldr.w	r3, [r7, #900]	; 0x384
 801e724:	601a      	str	r2, [r3, #0]
    return (val);
 801e726:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801e72a:	681b      	ldr	r3, [r3, #0]
            b1 = arm_nn_read_q15x2_ia(&ip_b1);
 801e72c:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8

            ch_0_out_0 = __SMLAD(a02, b0, ch_0_out_0);
 801e730:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801e734:	681b      	ldr	r3, [r3, #0]
 801e736:	4619      	mov	r1, r3
 801e738:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 801e73c:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 801e740:	f8c7 1394 	str.w	r1, [r7, #916]	; 0x394
 801e744:	f8c7 2390 	str.w	r2, [r7, #912]	; 0x390
 801e748:	f8c7 338c 	str.w	r3, [r7, #908]	; 0x38c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801e74c:	f8d7 2394 	ldr.w	r2, [r7, #916]	; 0x394
 801e750:	f8d7 1390 	ldr.w	r1, [r7, #912]	; 0x390
 801e754:	f8d7 338c 	ldr.w	r3, [r7, #908]	; 0x38c
 801e758:	fb22 3301 	smlad	r3, r2, r1, r3
 801e75c:	f8c7 3388 	str.w	r3, [r7, #904]	; 0x388
  return(result);
 801e760:	f8d7 3388 	ldr.w	r3, [r7, #904]	; 0x388
 801e764:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
            ch_0_out_1 = __SMLAD(a02, b1, ch_0_out_1);
 801e768:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801e76c:	681b      	ldr	r3, [r3, #0]
 801e76e:	4619      	mov	r1, r3
 801e770:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 801e774:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 801e778:	f8c7 13a4 	str.w	r1, [r7, #932]	; 0x3a4
 801e77c:	f8c7 23a0 	str.w	r2, [r7, #928]	; 0x3a0
 801e780:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801e784:	f8d7 23a4 	ldr.w	r2, [r7, #932]	; 0x3a4
 801e788:	f8d7 13a0 	ldr.w	r1, [r7, #928]	; 0x3a0
 801e78c:	f8d7 339c 	ldr.w	r3, [r7, #924]	; 0x39c
 801e790:	fb22 3301 	smlad	r3, r2, r1, r3
 801e794:	f8c7 3398 	str.w	r3, [r7, #920]	; 0x398
  return(result);
 801e798:	f8d7 3398 	ldr.w	r3, [r7, #920]	; 0x398
 801e79c:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
            ch_1_out_0 = __SMLAD(a12, b0, ch_1_out_0);
 801e7a0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801e7a4:	681b      	ldr	r3, [r3, #0]
 801e7a6:	4619      	mov	r1, r3
 801e7a8:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 801e7ac:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 801e7b0:	f8c7 13b4 	str.w	r1, [r7, #948]	; 0x3b4
 801e7b4:	f8c7 23b0 	str.w	r2, [r7, #944]	; 0x3b0
 801e7b8:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801e7bc:	f8d7 23b4 	ldr.w	r2, [r7, #948]	; 0x3b4
 801e7c0:	f8d7 13b0 	ldr.w	r1, [r7, #944]	; 0x3b0
 801e7c4:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
 801e7c8:	fb22 3301 	smlad	r3, r2, r1, r3
 801e7cc:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8
  return(result);
 801e7d0:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 801e7d4:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
            ch_1_out_1 = __SMLAD(a12, b1, ch_1_out_1);
 801e7d8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801e7dc:	681b      	ldr	r3, [r3, #0]
 801e7de:	4619      	mov	r1, r3
 801e7e0:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 801e7e4:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 801e7e8:	f8c7 13c4 	str.w	r1, [r7, #964]	; 0x3c4
 801e7ec:	f8c7 23c0 	str.w	r2, [r7, #960]	; 0x3c0
 801e7f0:	f8c7 33bc 	str.w	r3, [r7, #956]	; 0x3bc
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801e7f4:	f8d7 23c4 	ldr.w	r2, [r7, #964]	; 0x3c4
 801e7f8:	f8d7 13c0 	ldr.w	r1, [r7, #960]	; 0x3c0
 801e7fc:	f8d7 33bc 	ldr.w	r3, [r7, #956]	; 0x3bc
 801e800:	fb22 3301 	smlad	r3, r2, r1, r3
 801e804:	f8c7 33b8 	str.w	r3, [r7, #952]	; 0x3b8
  return(result);
 801e808:	f8d7 33b8 	ldr.w	r3, [r7, #952]	; 0x3b8
 801e80c:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4

            col_count--;
 801e810:	f8b7 33f2 	ldrh.w	r3, [r7, #1010]	; 0x3f2
 801e814:	3b01      	subs	r3, #1
 801e816:	f8a7 33f2 	strh.w	r3, [r7, #1010]	; 0x3f2
        while (col_count)
 801e81a:	f8b7 33f2 	ldrh.w	r3, [r7, #1010]	; 0x3f2
 801e81e:	2b00      	cmp	r3, #0
 801e820:	f47f ad35 	bne.w	801e28e <arm_nn_mat_mult_kernel_s8_s16+0xc6>
        } /* while over col_count */
        col_count = num_col_a & 0x3;
 801e824:	f8b7 3448 	ldrh.w	r3, [r7, #1096]	; 0x448
 801e828:	f003 0303 	and.w	r3, r3, #3
 801e82c:	f8a7 33f2 	strh.w	r3, [r7, #1010]	; 0x3f2
        while (col_count)
 801e830:	e054      	b.n	801e8dc <arm_nn_mat_mult_kernel_s8_s16+0x714>
        {
            q7_t a0 = *ip_a0++;
 801e832:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 801e836:	1c5a      	adds	r2, r3, #1
 801e838:	f8c7 2408 	str.w	r2, [r7, #1032]	; 0x408
 801e83c:	781b      	ldrb	r3, [r3, #0]
 801e83e:	f887 33d7 	strb.w	r3, [r7, #983]	; 0x3d7
            q15_t b0 = *ip_b0++;
 801e842:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801e846:	681a      	ldr	r2, [r3, #0]
 801e848:	1c91      	adds	r1, r2, #2
 801e84a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801e84e:	6019      	str	r1, [r3, #0]
 801e850:	8813      	ldrh	r3, [r2, #0]
 801e852:	f8a7 33d4 	strh.w	r3, [r7, #980]	; 0x3d4
            q7_t a1 = *ip_a1++;
 801e856:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 801e85a:	1c5a      	adds	r2, r3, #1
 801e85c:	f8c7 2404 	str.w	r2, [r7, #1028]	; 0x404
 801e860:	781b      	ldrb	r3, [r3, #0]
 801e862:	f887 33d3 	strb.w	r3, [r7, #979]	; 0x3d3
            q15_t b1 = *ip_b1++;
 801e866:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 801e86a:	681a      	ldr	r2, [r3, #0]
 801e86c:	1c91      	adds	r1, r2, #2
 801e86e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 801e872:	6019      	str	r1, [r3, #0]
 801e874:	8813      	ldrh	r3, [r2, #0]
 801e876:	f8a7 33d0 	strh.w	r3, [r7, #976]	; 0x3d0

            ch_0_out_0 += a0 * b0;
 801e87a:	f997 33d7 	ldrsb.w	r3, [r7, #983]	; 0x3d7
 801e87e:	f9b7 23d4 	ldrsh.w	r2, [r7, #980]	; 0x3d4
 801e882:	fb02 f303 	mul.w	r3, r2, r3
 801e886:	f8d7 2400 	ldr.w	r2, [r7, #1024]	; 0x400
 801e88a:	4413      	add	r3, r2
 801e88c:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
            ch_0_out_1 += a0 * b1;
 801e890:	f997 33d7 	ldrsb.w	r3, [r7, #983]	; 0x3d7
 801e894:	f9b7 23d0 	ldrsh.w	r2, [r7, #976]	; 0x3d0
 801e898:	fb02 f303 	mul.w	r3, r2, r3
 801e89c:	f8d7 23fc 	ldr.w	r2, [r7, #1020]	; 0x3fc
 801e8a0:	4413      	add	r3, r2
 801e8a2:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
            ch_1_out_0 += a1 * b0;
 801e8a6:	f997 33d3 	ldrsb.w	r3, [r7, #979]	; 0x3d3
 801e8aa:	f9b7 23d4 	ldrsh.w	r2, [r7, #980]	; 0x3d4
 801e8ae:	fb02 f303 	mul.w	r3, r2, r3
 801e8b2:	f8d7 23f8 	ldr.w	r2, [r7, #1016]	; 0x3f8
 801e8b6:	4413      	add	r3, r2
 801e8b8:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
            ch_1_out_1 += a1 * b1;
 801e8bc:	f997 33d3 	ldrsb.w	r3, [r7, #979]	; 0x3d3
 801e8c0:	f9b7 23d0 	ldrsh.w	r2, [r7, #976]	; 0x3d0
 801e8c4:	fb02 f303 	mul.w	r3, r2, r3
 801e8c8:	f8d7 23f4 	ldr.w	r2, [r7, #1012]	; 0x3f4
 801e8cc:	4413      	add	r3, r2
 801e8ce:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
            col_count--;
 801e8d2:	f8b7 33f2 	ldrh.w	r3, [r7, #1010]	; 0x3f2
 801e8d6:	3b01      	subs	r3, #1
 801e8d8:	f8a7 33f2 	strh.w	r3, [r7, #1010]	; 0x3f2
        while (col_count)
 801e8dc:	f8b7 33f2 	ldrh.w	r3, [r7, #1010]	; 0x3f2
 801e8e0:	2b00      	cmp	r3, #0
 801e8e2:	d1a6      	bne.n	801e832 <arm_nn_mat_mult_kernel_s8_s16+0x66a>
        } /* while over col_count */

        ch_0_out_0 = arm_nn_requantize(ch_0_out_0, *out_mult, *out_shift);
 801e8e4:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 801e8e8:	6818      	ldr	r0, [r3, #0]
 801e8ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801e8ee:	681b      	ldr	r3, [r3, #0]
 801e8f0:	6819      	ldr	r1, [r3, #0]
 801e8f2:	f507 72fe 	add.w	r2, r7, #508	; 0x1fc
 801e8f6:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 801e8fa:	6013      	str	r3, [r2, #0]
 801e8fc:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 801e900:	6018      	str	r0, [r3, #0]
 801e902:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 801e906:	6019      	str	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801e908:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 801e90c:	681b      	ldr	r3, [r3, #0]
 801e90e:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 801e912:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 801e916:	681b      	ldr	r3, [r3, #0]
 801e918:	fa03 f202 	lsl.w	r2, r3, r2
 801e91c:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 801e920:	601a      	str	r2, [r3, #0]
 801e922:	f507 72f6 	add.w	r2, r7, #492	; 0x1ec
 801e926:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 801e92a:	681b      	ldr	r3, [r3, #0]
 801e92c:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801e92e:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 801e932:	2200      	movs	r2, #0
 801e934:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 801e936:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801e93a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801e93e:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 801e940:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801e944:	2200      	movs	r2, #0
 801e946:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801e948:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 801e94c:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 801e950:	681b      	ldr	r3, [r3, #0]
 801e952:	4618      	mov	r0, r3
 801e954:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801e958:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 801e95c:	681b      	ldr	r3, [r3, #0]
 801e95e:	461a      	mov	r2, r3
 801e960:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801e964:	fb02 f501 	mul.w	r5, r2, r1
 801e968:	fb00 f403 	mul.w	r4, r0, r3
 801e96c:	442c      	add	r4, r5
 801e96e:	fba0 2302 	umull	r2, r3, r0, r2
 801e972:	18e1      	adds	r1, r4, r3
 801e974:	460b      	mov	r3, r1
 801e976:	eb18 0102 	adds.w	r1, r8, r2
 801e97a:	60b9      	str	r1, [r7, #8]
 801e97c:	eb49 0303 	adc.w	r3, r9, r3
 801e980:	60fb      	str	r3, [r7, #12]
 801e982:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 801e986:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
    result = (int32_t)(mult.long_long >> 31);
 801e98a:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 801e98e:	f04f 0000 	mov.w	r0, #0
 801e992:	f04f 0100 	mov.w	r1, #0
 801e996:	0fd0      	lsrs	r0, r2, #31
 801e998:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801e99c:	17d9      	asrs	r1, r3, #31
 801e99e:	f507 72f4 	add.w	r2, r7, #488	; 0x1e8
 801e9a2:	4603      	mov	r3, r0
 801e9a4:	6013      	str	r3, [r2, #0]
    return result;
 801e9a6:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 801e9aa:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801e9ac:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 801e9b0:	681b      	ldr	r3, [r3, #0]
 801e9b2:	2b00      	cmp	r3, #0
 801e9b4:	dc04      	bgt.n	801e9c0 <arm_nn_mat_mult_kernel_s8_s16+0x7f8>
 801e9b6:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 801e9ba:	681b      	ldr	r3, [r3, #0]
 801e9bc:	425a      	negs	r2, r3
 801e9be:	e000      	b.n	801e9c2 <arm_nn_mat_mult_kernel_s8_s16+0x7fa>
 801e9c0:	2200      	movs	r2, #0
 801e9c2:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 801e9c6:	6019      	str	r1, [r3, #0]
 801e9c8:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 801e9cc:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801e9ce:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 801e9d2:	2200      	movs	r2, #0
 801e9d4:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801e9d6:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 801e9da:	2201      	movs	r2, #1
 801e9dc:	681b      	ldr	r3, [r3, #0]
 801e9de:	fa02 f303 	lsl.w	r3, r2, r3
 801e9e2:	f507 72ec 	add.w	r2, r7, #472	; 0x1d8
 801e9e6:	3b01      	subs	r3, #1
 801e9e8:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 801e9ea:	f507 71ea 	add.w	r1, r7, #468	; 0x1d4
 801e9ee:	f507 72f2 	add.w	r2, r7, #484	; 0x1e4
 801e9f2:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 801e9f6:	6812      	ldr	r2, [r2, #0]
 801e9f8:	681b      	ldr	r3, [r3, #0]
 801e9fa:	4013      	ands	r3, r2
 801e9fc:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 801e9fe:	f507 71ee 	add.w	r1, r7, #476	; 0x1dc
 801ea02:	f507 72f2 	add.w	r2, r7, #484	; 0x1e4
 801ea06:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 801ea0a:	6812      	ldr	r2, [r2, #0]
 801ea0c:	681b      	ldr	r3, [r3, #0]
 801ea0e:	fa42 f303 	asr.w	r3, r2, r3
 801ea12:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 801ea14:	f507 72e8 	add.w	r2, r7, #464	; 0x1d0
 801ea18:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 801ea1c:	681b      	ldr	r3, [r3, #0]
 801ea1e:	105b      	asrs	r3, r3, #1
 801ea20:	6013      	str	r3, [r2, #0]
    if (result < 0)
 801ea22:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 801ea26:	681b      	ldr	r3, [r3, #0]
 801ea28:	2b00      	cmp	r3, #0
 801ea2a:	da06      	bge.n	801ea3a <arm_nn_mat_mult_kernel_s8_s16+0x872>
        threshold++;
 801ea2c:	f507 72e8 	add.w	r2, r7, #464	; 0x1d0
 801ea30:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 801ea34:	681b      	ldr	r3, [r3, #0]
 801ea36:	3301      	adds	r3, #1
 801ea38:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 801ea3a:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 801ea3e:	f507 71e8 	add.w	r1, r7, #464	; 0x1d0
 801ea42:	681a      	ldr	r2, [r3, #0]
 801ea44:	680b      	ldr	r3, [r1, #0]
 801ea46:	429a      	cmp	r2, r3
 801ea48:	dd06      	ble.n	801ea58 <arm_nn_mat_mult_kernel_s8_s16+0x890>
        result++;
 801ea4a:	f507 72ee 	add.w	r2, r7, #476	; 0x1dc
 801ea4e:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 801ea52:	681b      	ldr	r3, [r3, #0]
 801ea54:	3301      	adds	r3, #1
 801ea56:	6013      	str	r3, [r2, #0]
    return result;
 801ea58:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 801ea5c:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801ea5e:	bf00      	nop
 801ea60:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
        ch_0_out_0 += out_offset;
 801ea64:	f8d7 2400 	ldr.w	r2, [r7, #1024]	; 0x400
 801ea68:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 801ea6c:	4413      	add	r3, r2
 801ea6e:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
        ch_0_out_0 = MAX(ch_0_out_0, activation_min);
 801ea72:	f9b7 3440 	ldrsh.w	r3, [r7, #1088]	; 0x440
 801ea76:	f8d7 2400 	ldr.w	r2, [r7, #1024]	; 0x400
 801ea7a:	4293      	cmp	r3, r2
 801ea7c:	bfb8      	it	lt
 801ea7e:	4613      	movlt	r3, r2
 801ea80:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 801ea84:	f9b7 3444 	ldrsh.w	r3, [r7, #1092]	; 0x444
 801ea88:	f8d7 2400 	ldr.w	r2, [r7, #1024]	; 0x400
 801ea8c:	4293      	cmp	r3, r2
 801ea8e:	bfa8      	it	ge
 801ea90:	4613      	movge	r3, r2
 801ea92:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
        *out_0++ = (q7_t)ch_0_out_0;
 801ea96:	f8d7 2450 	ldr.w	r2, [r7, #1104]	; 0x450
 801ea9a:	1c53      	adds	r3, r2, #1
 801ea9c:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
 801eaa0:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 801eaa4:	b25b      	sxtb	r3, r3
 801eaa6:	7013      	strb	r3, [r2, #0]

        ch_0_out_1 = arm_nn_requantize(ch_0_out_1, *out_mult, *out_shift);
 801eaa8:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 801eaac:	6818      	ldr	r0, [r3, #0]
 801eaae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801eab2:	681b      	ldr	r3, [r3, #0]
 801eab4:	6819      	ldr	r1, [r3, #0]
 801eab6:	f507 720b 	add.w	r2, r7, #556	; 0x22c
 801eaba:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 801eabe:	6013      	str	r3, [r2, #0]
 801eac0:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801eac4:	6018      	str	r0, [r3, #0]
 801eac6:	f507 7309 	add.w	r3, r7, #548	; 0x224
 801eaca:	6019      	str	r1, [r3, #0]
 801eacc:	f507 7309 	add.w	r3, r7, #548	; 0x224
 801ead0:	681b      	ldr	r3, [r3, #0]
 801ead2:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 801ead6:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 801eada:	681b      	ldr	r3, [r3, #0]
 801eadc:	fa03 f202 	lsl.w	r2, r3, r2
 801eae0:	f507 7308 	add.w	r3, r7, #544	; 0x220
 801eae4:	601a      	str	r2, [r3, #0]
 801eae6:	f507 7207 	add.w	r2, r7, #540	; 0x21c
 801eaea:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801eaee:	681b      	ldr	r3, [r3, #0]
 801eaf0:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801eaf2:	f507 7306 	add.w	r3, r7, #536	; 0x218
 801eaf6:	2200      	movs	r2, #0
 801eaf8:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 801eafa:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801eafe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801eb02:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 801eb04:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801eb08:	2200      	movs	r2, #0
 801eb0a:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801eb0c:	e9d7 892c 	ldrd	r8, r9, [r7, #176]	; 0xb0
 801eb10:	f507 7308 	add.w	r3, r7, #544	; 0x220
 801eb14:	681b      	ldr	r3, [r3, #0]
 801eb16:	4618      	mov	r0, r3
 801eb18:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801eb1c:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 801eb20:	681b      	ldr	r3, [r3, #0]
 801eb22:	461a      	mov	r2, r3
 801eb24:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801eb28:	fb02 f501 	mul.w	r5, r2, r1
 801eb2c:	fb00 f403 	mul.w	r4, r0, r3
 801eb30:	442c      	add	r4, r5
 801eb32:	fba0 2302 	umull	r2, r3, r0, r2
 801eb36:	18e1      	adds	r1, r4, r3
 801eb38:	460b      	mov	r3, r1
 801eb3a:	eb18 0102 	adds.w	r1, r8, r2
 801eb3e:	6139      	str	r1, [r7, #16]
 801eb40:	eb49 0303 	adc.w	r3, r9, r3
 801eb44:	617b      	str	r3, [r7, #20]
 801eb46:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 801eb4a:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
    result = (int32_t)(mult.long_long >> 31);
 801eb4e:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 801eb52:	f04f 0000 	mov.w	r0, #0
 801eb56:	f04f 0100 	mov.w	r1, #0
 801eb5a:	0fd0      	lsrs	r0, r2, #31
 801eb5c:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801eb60:	17d9      	asrs	r1, r3, #31
 801eb62:	f507 7206 	add.w	r2, r7, #536	; 0x218
 801eb66:	4603      	mov	r3, r0
 801eb68:	6013      	str	r3, [r2, #0]
    return result;
 801eb6a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 801eb6e:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801eb70:	f507 7309 	add.w	r3, r7, #548	; 0x224
 801eb74:	681b      	ldr	r3, [r3, #0]
 801eb76:	2b00      	cmp	r3, #0
 801eb78:	dc04      	bgt.n	801eb84 <arm_nn_mat_mult_kernel_s8_s16+0x9bc>
 801eb7a:	f507 7309 	add.w	r3, r7, #548	; 0x224
 801eb7e:	681b      	ldr	r3, [r3, #0]
 801eb80:	425a      	negs	r2, r3
 801eb82:	e000      	b.n	801eb86 <arm_nn_mat_mult_kernel_s8_s16+0x9be>
 801eb84:	2200      	movs	r2, #0
 801eb86:	f507 7305 	add.w	r3, r7, #532	; 0x214
 801eb8a:	6019      	str	r1, [r3, #0]
 801eb8c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 801eb90:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801eb92:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 801eb96:	2200      	movs	r2, #0
 801eb98:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801eb9a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 801eb9e:	2201      	movs	r2, #1
 801eba0:	681b      	ldr	r3, [r3, #0]
 801eba2:	fa02 f303 	lsl.w	r3, r2, r3
 801eba6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 801ebaa:	3b01      	subs	r3, #1
 801ebac:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 801ebae:	f507 7101 	add.w	r1, r7, #516	; 0x204
 801ebb2:	f507 7205 	add.w	r2, r7, #532	; 0x214
 801ebb6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 801ebba:	6812      	ldr	r2, [r2, #0]
 801ebbc:	681b      	ldr	r3, [r3, #0]
 801ebbe:	4013      	ands	r3, r2
 801ebc0:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 801ebc2:	f507 7103 	add.w	r1, r7, #524	; 0x20c
 801ebc6:	f507 7205 	add.w	r2, r7, #532	; 0x214
 801ebca:	f507 7304 	add.w	r3, r7, #528	; 0x210
 801ebce:	6812      	ldr	r2, [r2, #0]
 801ebd0:	681b      	ldr	r3, [r3, #0]
 801ebd2:	fa42 f303 	asr.w	r3, r2, r3
 801ebd6:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 801ebd8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 801ebdc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 801ebe0:	681b      	ldr	r3, [r3, #0]
 801ebe2:	105b      	asrs	r3, r3, #1
 801ebe4:	6013      	str	r3, [r2, #0]
    if (result < 0)
 801ebe6:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 801ebea:	681b      	ldr	r3, [r3, #0]
 801ebec:	2b00      	cmp	r3, #0
 801ebee:	da06      	bge.n	801ebfe <arm_nn_mat_mult_kernel_s8_s16+0xa36>
        threshold++;
 801ebf0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 801ebf4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801ebf8:	681b      	ldr	r3, [r3, #0]
 801ebfa:	3301      	adds	r3, #1
 801ebfc:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 801ebfe:	f507 7301 	add.w	r3, r7, #516	; 0x204
 801ec02:	f507 7100 	add.w	r1, r7, #512	; 0x200
 801ec06:	681a      	ldr	r2, [r3, #0]
 801ec08:	680b      	ldr	r3, [r1, #0]
 801ec0a:	429a      	cmp	r2, r3
 801ec0c:	dd06      	ble.n	801ec1c <arm_nn_mat_mult_kernel_s8_s16+0xa54>
        result++;
 801ec0e:	f507 7203 	add.w	r2, r7, #524	; 0x20c
 801ec12:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 801ec16:	681b      	ldr	r3, [r3, #0]
 801ec18:	3301      	adds	r3, #1
 801ec1a:	6013      	str	r3, [r2, #0]
    return result;
 801ec1c:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 801ec20:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801ec22:	bf00      	nop
 801ec24:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
        ch_0_out_1 += out_offset;
 801ec28:	f8d7 23fc 	ldr.w	r2, [r7, #1020]	; 0x3fc
 801ec2c:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 801ec30:	4413      	add	r3, r2
 801ec32:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
        ch_0_out_1 = MAX(ch_0_out_1, activation_min);
 801ec36:	f9b7 3440 	ldrsh.w	r3, [r7, #1088]	; 0x440
 801ec3a:	f8d7 23fc 	ldr.w	r2, [r7, #1020]	; 0x3fc
 801ec3e:	4293      	cmp	r3, r2
 801ec40:	bfb8      	it	lt
 801ec42:	4613      	movlt	r3, r2
 801ec44:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
        ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 801ec48:	f9b7 3444 	ldrsh.w	r3, [r7, #1092]	; 0x444
 801ec4c:	f8d7 23fc 	ldr.w	r2, [r7, #1020]	; 0x3fc
 801ec50:	4293      	cmp	r3, r2
 801ec52:	bfa8      	it	ge
 801ec54:	4613      	movge	r3, r2
 801ec56:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
        *out_1++ = (q7_t)ch_0_out_1;
 801ec5a:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 801ec5e:	1c53      	adds	r3, r2, #1
 801ec60:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
 801ec64:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 801ec68:	b25b      	sxtb	r3, r3
 801ec6a:	7013      	strb	r3, [r2, #0]
        out_mult++;
 801ec6c:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 801ec70:	3304      	adds	r3, #4
 801ec72:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
        out_shift++;
 801ec76:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801ec7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801ec7e:	681b      	ldr	r3, [r3, #0]
 801ec80:	3304      	adds	r3, #4
 801ec82:	6013      	str	r3, [r2, #0]

        ch_1_out_0 = arm_nn_requantize(ch_1_out_0, *out_mult, *out_shift);
 801ec84:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 801ec88:	6818      	ldr	r0, [r3, #0]
 801ec8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801ec8e:	681b      	ldr	r3, [r3, #0]
 801ec90:	6819      	ldr	r1, [r3, #0]
 801ec92:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 801ec96:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 801ec9a:	6013      	str	r3, [r2, #0]
 801ec9c:	f507 7316 	add.w	r3, r7, #600	; 0x258
 801eca0:	6018      	str	r0, [r3, #0]
 801eca2:	f507 7315 	add.w	r3, r7, #596	; 0x254
 801eca6:	6019      	str	r1, [r3, #0]
 801eca8:	f507 7315 	add.w	r3, r7, #596	; 0x254
 801ecac:	681b      	ldr	r3, [r3, #0]
 801ecae:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 801ecb2:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 801ecb6:	681b      	ldr	r3, [r3, #0]
 801ecb8:	fa03 f202 	lsl.w	r2, r3, r2
 801ecbc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 801ecc0:	601a      	str	r2, [r3, #0]
 801ecc2:	f507 7213 	add.w	r2, r7, #588	; 0x24c
 801ecc6:	f507 7316 	add.w	r3, r7, #600	; 0x258
 801ecca:	681b      	ldr	r3, [r3, #0]
 801eccc:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801ecce:	f507 7312 	add.w	r3, r7, #584	; 0x248
 801ecd2:	2200      	movs	r2, #0
 801ecd4:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 801ecd6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801ecda:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801ecde:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 801ece0:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801ece4:	2200      	movs	r2, #0
 801ece6:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801ece8:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 801ecec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 801ecf0:	681b      	ldr	r3, [r3, #0]
 801ecf2:	4618      	mov	r0, r3
 801ecf4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801ecf8:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 801ecfc:	681b      	ldr	r3, [r3, #0]
 801ecfe:	461a      	mov	r2, r3
 801ed00:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801ed04:	fb02 f501 	mul.w	r5, r2, r1
 801ed08:	fb00 f403 	mul.w	r4, r0, r3
 801ed0c:	442c      	add	r4, r5
 801ed0e:	fba0 2302 	umull	r2, r3, r0, r2
 801ed12:	18e1      	adds	r1, r4, r3
 801ed14:	460b      	mov	r3, r1
 801ed16:	eb18 0102 	adds.w	r1, r8, r2
 801ed1a:	61b9      	str	r1, [r7, #24]
 801ed1c:	eb49 0303 	adc.w	r3, r9, r3
 801ed20:	61fb      	str	r3, [r7, #28]
 801ed22:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 801ed26:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
    result = (int32_t)(mult.long_long >> 31);
 801ed2a:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 801ed2e:	f04f 0000 	mov.w	r0, #0
 801ed32:	f04f 0100 	mov.w	r1, #0
 801ed36:	0fd0      	lsrs	r0, r2, #31
 801ed38:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801ed3c:	17d9      	asrs	r1, r3, #31
 801ed3e:	f507 7212 	add.w	r2, r7, #584	; 0x248
 801ed42:	4603      	mov	r3, r0
 801ed44:	6013      	str	r3, [r2, #0]
    return result;
 801ed46:	f507 7312 	add.w	r3, r7, #584	; 0x248
 801ed4a:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801ed4c:	f507 7315 	add.w	r3, r7, #596	; 0x254
 801ed50:	681b      	ldr	r3, [r3, #0]
 801ed52:	2b00      	cmp	r3, #0
 801ed54:	dc04      	bgt.n	801ed60 <arm_nn_mat_mult_kernel_s8_s16+0xb98>
 801ed56:	f507 7315 	add.w	r3, r7, #596	; 0x254
 801ed5a:	681b      	ldr	r3, [r3, #0]
 801ed5c:	425a      	negs	r2, r3
 801ed5e:	e000      	b.n	801ed62 <arm_nn_mat_mult_kernel_s8_s16+0xb9a>
 801ed60:	2200      	movs	r2, #0
 801ed62:	f507 7311 	add.w	r3, r7, #580	; 0x244
 801ed66:	6019      	str	r1, [r3, #0]
 801ed68:	f507 7310 	add.w	r3, r7, #576	; 0x240
 801ed6c:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801ed6e:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 801ed72:	2200      	movs	r2, #0
 801ed74:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801ed76:	f507 7310 	add.w	r3, r7, #576	; 0x240
 801ed7a:	2201      	movs	r2, #1
 801ed7c:	681b      	ldr	r3, [r3, #0]
 801ed7e:	fa02 f303 	lsl.w	r3, r2, r3
 801ed82:	f507 720e 	add.w	r2, r7, #568	; 0x238
 801ed86:	3b01      	subs	r3, #1
 801ed88:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 801ed8a:	f507 710d 	add.w	r1, r7, #564	; 0x234
 801ed8e:	f507 7211 	add.w	r2, r7, #580	; 0x244
 801ed92:	f507 730e 	add.w	r3, r7, #568	; 0x238
 801ed96:	6812      	ldr	r2, [r2, #0]
 801ed98:	681b      	ldr	r3, [r3, #0]
 801ed9a:	4013      	ands	r3, r2
 801ed9c:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 801ed9e:	f507 710f 	add.w	r1, r7, #572	; 0x23c
 801eda2:	f507 7211 	add.w	r2, r7, #580	; 0x244
 801eda6:	f507 7310 	add.w	r3, r7, #576	; 0x240
 801edaa:	6812      	ldr	r2, [r2, #0]
 801edac:	681b      	ldr	r3, [r3, #0]
 801edae:	fa42 f303 	asr.w	r3, r2, r3
 801edb2:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 801edb4:	f507 720c 	add.w	r2, r7, #560	; 0x230
 801edb8:	f507 730e 	add.w	r3, r7, #568	; 0x238
 801edbc:	681b      	ldr	r3, [r3, #0]
 801edbe:	105b      	asrs	r3, r3, #1
 801edc0:	6013      	str	r3, [r2, #0]
    if (result < 0)
 801edc2:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 801edc6:	681b      	ldr	r3, [r3, #0]
 801edc8:	2b00      	cmp	r3, #0
 801edca:	da06      	bge.n	801edda <arm_nn_mat_mult_kernel_s8_s16+0xc12>
        threshold++;
 801edcc:	f507 720c 	add.w	r2, r7, #560	; 0x230
 801edd0:	f507 730c 	add.w	r3, r7, #560	; 0x230
 801edd4:	681b      	ldr	r3, [r3, #0]
 801edd6:	3301      	adds	r3, #1
 801edd8:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 801edda:	f507 730d 	add.w	r3, r7, #564	; 0x234
 801edde:	f507 710c 	add.w	r1, r7, #560	; 0x230
 801ede2:	681a      	ldr	r2, [r3, #0]
 801ede4:	680b      	ldr	r3, [r1, #0]
 801ede6:	429a      	cmp	r2, r3
 801ede8:	dd06      	ble.n	801edf8 <arm_nn_mat_mult_kernel_s8_s16+0xc30>
        result++;
 801edea:	f507 720f 	add.w	r2, r7, #572	; 0x23c
 801edee:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 801edf2:	681b      	ldr	r3, [r3, #0]
 801edf4:	3301      	adds	r3, #1
 801edf6:	6013      	str	r3, [r2, #0]
    return result;
 801edf8:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 801edfc:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801edfe:	bf00      	nop
 801ee00:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
        ch_1_out_0 += out_offset;
 801ee04:	f8d7 23f8 	ldr.w	r2, [r7, #1016]	; 0x3f8
 801ee08:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 801ee0c:	4413      	add	r3, r2
 801ee0e:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
        ch_1_out_0 = MAX(ch_1_out_0, activation_min);
 801ee12:	f9b7 3440 	ldrsh.w	r3, [r7, #1088]	; 0x440
 801ee16:	f8d7 23f8 	ldr.w	r2, [r7, #1016]	; 0x3f8
 801ee1a:	4293      	cmp	r3, r2
 801ee1c:	bfb8      	it	lt
 801ee1e:	4613      	movlt	r3, r2
 801ee20:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
        ch_1_out_0 = MIN(ch_1_out_0, activation_max);
 801ee24:	f9b7 3444 	ldrsh.w	r3, [r7, #1092]	; 0x444
 801ee28:	f8d7 23f8 	ldr.w	r2, [r7, #1016]	; 0x3f8
 801ee2c:	4293      	cmp	r3, r2
 801ee2e:	bfa8      	it	ge
 801ee30:	4613      	movge	r3, r2
 801ee32:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
        *out_0++ = (q7_t)ch_1_out_0;
 801ee36:	f8d7 2450 	ldr.w	r2, [r7, #1104]	; 0x450
 801ee3a:	1c53      	adds	r3, r2, #1
 801ee3c:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
 801ee40:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 801ee44:	b25b      	sxtb	r3, r3
 801ee46:	7013      	strb	r3, [r2, #0]

        ch_1_out_1 = arm_nn_requantize(ch_1_out_1, *out_mult, *out_shift);
 801ee48:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 801ee4c:	6818      	ldr	r0, [r3, #0]
 801ee4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801ee52:	681b      	ldr	r3, [r3, #0]
 801ee54:	6819      	ldr	r1, [r3, #0]
 801ee56:	f507 7223 	add.w	r2, r7, #652	; 0x28c
 801ee5a:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 801ee5e:	6013      	str	r3, [r2, #0]
 801ee60:	f507 7322 	add.w	r3, r7, #648	; 0x288
 801ee64:	6018      	str	r0, [r3, #0]
 801ee66:	f507 7321 	add.w	r3, r7, #644	; 0x284
 801ee6a:	6019      	str	r1, [r3, #0]
 801ee6c:	f507 7321 	add.w	r3, r7, #644	; 0x284
 801ee70:	681b      	ldr	r3, [r3, #0]
 801ee72:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 801ee76:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 801ee7a:	681b      	ldr	r3, [r3, #0]
 801ee7c:	fa03 f202 	lsl.w	r2, r3, r2
 801ee80:	f507 7320 	add.w	r3, r7, #640	; 0x280
 801ee84:	601a      	str	r2, [r3, #0]
 801ee86:	f507 721f 	add.w	r2, r7, #636	; 0x27c
 801ee8a:	f507 7322 	add.w	r3, r7, #648	; 0x288
 801ee8e:	681b      	ldr	r3, [r3, #0]
 801ee90:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801ee92:	f507 731e 	add.w	r3, r7, #632	; 0x278
 801ee96:	2200      	movs	r2, #0
 801ee98:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 801ee9a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801ee9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801eea2:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 801eea4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801eea8:	2200      	movs	r2, #0
 801eeaa:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801eeac:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 801eeb0:	f507 7320 	add.w	r3, r7, #640	; 0x280
 801eeb4:	681b      	ldr	r3, [r3, #0]
 801eeb6:	4618      	mov	r0, r3
 801eeb8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801eebc:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 801eec0:	681b      	ldr	r3, [r3, #0]
 801eec2:	461a      	mov	r2, r3
 801eec4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801eec8:	fb02 f501 	mul.w	r5, r2, r1
 801eecc:	fb00 f403 	mul.w	r4, r0, r3
 801eed0:	442c      	add	r4, r5
 801eed2:	fba0 2302 	umull	r2, r3, r0, r2
 801eed6:	18e1      	adds	r1, r4, r3
 801eed8:	460b      	mov	r3, r1
 801eeda:	eb18 0102 	adds.w	r1, r8, r2
 801eede:	6239      	str	r1, [r7, #32]
 801eee0:	eb49 0303 	adc.w	r3, r9, r3
 801eee4:	627b      	str	r3, [r7, #36]	; 0x24
 801eee6:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 801eeea:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
    result = (int32_t)(mult.long_long >> 31);
 801eeee:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 801eef2:	f04f 0000 	mov.w	r0, #0
 801eef6:	f04f 0100 	mov.w	r1, #0
 801eefa:	0fd0      	lsrs	r0, r2, #31
 801eefc:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801ef00:	17d9      	asrs	r1, r3, #31
 801ef02:	f507 721e 	add.w	r2, r7, #632	; 0x278
 801ef06:	4603      	mov	r3, r0
 801ef08:	6013      	str	r3, [r2, #0]
    return result;
 801ef0a:	f507 731e 	add.w	r3, r7, #632	; 0x278
 801ef0e:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801ef10:	f507 7321 	add.w	r3, r7, #644	; 0x284
 801ef14:	681b      	ldr	r3, [r3, #0]
 801ef16:	2b00      	cmp	r3, #0
 801ef18:	dc04      	bgt.n	801ef24 <arm_nn_mat_mult_kernel_s8_s16+0xd5c>
 801ef1a:	f507 7321 	add.w	r3, r7, #644	; 0x284
 801ef1e:	681b      	ldr	r3, [r3, #0]
 801ef20:	425a      	negs	r2, r3
 801ef22:	e000      	b.n	801ef26 <arm_nn_mat_mult_kernel_s8_s16+0xd5e>
 801ef24:	2200      	movs	r2, #0
 801ef26:	f507 731d 	add.w	r3, r7, #628	; 0x274
 801ef2a:	6019      	str	r1, [r3, #0]
 801ef2c:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801ef30:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801ef32:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 801ef36:	2200      	movs	r2, #0
 801ef38:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801ef3a:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801ef3e:	2201      	movs	r2, #1
 801ef40:	681b      	ldr	r3, [r3, #0]
 801ef42:	fa02 f303 	lsl.w	r3, r2, r3
 801ef46:	f507 721a 	add.w	r2, r7, #616	; 0x268
 801ef4a:	3b01      	subs	r3, #1
 801ef4c:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 801ef4e:	f507 7119 	add.w	r1, r7, #612	; 0x264
 801ef52:	f507 721d 	add.w	r2, r7, #628	; 0x274
 801ef56:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801ef5a:	6812      	ldr	r2, [r2, #0]
 801ef5c:	681b      	ldr	r3, [r3, #0]
 801ef5e:	4013      	ands	r3, r2
 801ef60:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 801ef62:	f507 711b 	add.w	r1, r7, #620	; 0x26c
 801ef66:	f507 721d 	add.w	r2, r7, #628	; 0x274
 801ef6a:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801ef6e:	6812      	ldr	r2, [r2, #0]
 801ef70:	681b      	ldr	r3, [r3, #0]
 801ef72:	fa42 f303 	asr.w	r3, r2, r3
 801ef76:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 801ef78:	f507 7218 	add.w	r2, r7, #608	; 0x260
 801ef7c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801ef80:	681b      	ldr	r3, [r3, #0]
 801ef82:	105b      	asrs	r3, r3, #1
 801ef84:	6013      	str	r3, [r2, #0]
    if (result < 0)
 801ef86:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 801ef8a:	681b      	ldr	r3, [r3, #0]
 801ef8c:	2b00      	cmp	r3, #0
 801ef8e:	da06      	bge.n	801ef9e <arm_nn_mat_mult_kernel_s8_s16+0xdd6>
        threshold++;
 801ef90:	f507 7218 	add.w	r2, r7, #608	; 0x260
 801ef94:	f507 7318 	add.w	r3, r7, #608	; 0x260
 801ef98:	681b      	ldr	r3, [r3, #0]
 801ef9a:	3301      	adds	r3, #1
 801ef9c:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 801ef9e:	f507 7319 	add.w	r3, r7, #612	; 0x264
 801efa2:	f507 7118 	add.w	r1, r7, #608	; 0x260
 801efa6:	681a      	ldr	r2, [r3, #0]
 801efa8:	680b      	ldr	r3, [r1, #0]
 801efaa:	429a      	cmp	r2, r3
 801efac:	dd06      	ble.n	801efbc <arm_nn_mat_mult_kernel_s8_s16+0xdf4>
        result++;
 801efae:	f507 721b 	add.w	r2, r7, #620	; 0x26c
 801efb2:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 801efb6:	681b      	ldr	r3, [r3, #0]
 801efb8:	3301      	adds	r3, #1
 801efba:	6013      	str	r3, [r2, #0]
    return result;
 801efbc:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 801efc0:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801efc2:	bf00      	nop
 801efc4:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
        ch_1_out_1 += out_offset;
 801efc8:	f8d7 23f4 	ldr.w	r2, [r7, #1012]	; 0x3f4
 801efcc:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 801efd0:	4413      	add	r3, r2
 801efd2:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
        ch_1_out_1 = MAX(ch_1_out_1, activation_min);
 801efd6:	f9b7 3440 	ldrsh.w	r3, [r7, #1088]	; 0x440
 801efda:	f8d7 23f4 	ldr.w	r2, [r7, #1012]	; 0x3f4
 801efde:	4293      	cmp	r3, r2
 801efe0:	bfb8      	it	lt
 801efe2:	4613      	movlt	r3, r2
 801efe4:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
        ch_1_out_1 = MIN(ch_1_out_1, activation_max);
 801efe8:	f9b7 3444 	ldrsh.w	r3, [r7, #1092]	; 0x444
 801efec:	f8d7 23f4 	ldr.w	r2, [r7, #1012]	; 0x3f4
 801eff0:	4293      	cmp	r3, r2
 801eff2:	bfa8      	it	ge
 801eff4:	4613      	movge	r3, r2
 801eff6:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
        *out_1++ = (q7_t)ch_1_out_1;
 801effa:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 801effe:	1c53      	adds	r3, r2, #1
 801f000:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
 801f004:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 801f008:	b25b      	sxtb	r3, r3
 801f00a:	7013      	strb	r3, [r2, #0]
        out_mult++;
 801f00c:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 801f010:	3304      	adds	r3, #4
 801f012:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
        out_shift++;
 801f016:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801f01a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801f01e:	681b      	ldr	r3, [r3, #0]
 801f020:	3304      	adds	r3, #4
 801f022:	6013      	str	r3, [r2, #0]

        /* skip row */
        ip_a0 += num_col_a;
 801f024:	f8b7 3448 	ldrh.w	r3, [r7, #1096]	; 0x448
 801f028:	f8d7 2408 	ldr.w	r2, [r7, #1032]	; 0x408
 801f02c:	4413      	add	r3, r2
 801f02e:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
        row_count--;
 801f032:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	; 0x40e
 801f036:	3b01      	subs	r3, #1
 801f038:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
    while (row_count)
 801f03c:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	; 0x40e
 801f040:	2b00      	cmp	r3, #0
 801f042:	f47f a8ed 	bne.w	801e220 <arm_nn_mat_mult_kernel_s8_s16+0x58>
    }

    /* compute the last odd numbered row if any */
    if (output_ch & 0x1)
 801f046:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 801f04a:	881b      	ldrh	r3, [r3, #0]
 801f04c:	f003 0301 	and.w	r3, r3, #1
 801f050:	2b00      	cmp	r3, #0
 801f052:	f000 83ff 	beq.w	801f854 <arm_nn_mat_mult_kernel_s8_s16+0x168c>
    {
        /* setup pointers for B */
        const q15_t *ip_b0 = input_b;
 801f056:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801f05a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801f05e:	6812      	ldr	r2, [r2, #0]
 801f060:	601a      	str	r2, [r3, #0]
        const q15_t *ip_b1 = ip_b0 + num_col_a;
 801f062:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801f066:	681a      	ldr	r2, [r3, #0]
 801f068:	f8b7 3448 	ldrh.w	r3, [r7, #1096]	; 0x448
 801f06c:	005b      	lsls	r3, r3, #1
 801f06e:	441a      	add	r2, r3
 801f070:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801f074:	601a      	str	r2, [r3, #0]

        /* load the bias */
        q31_t ch_0_out_0 = *bias;
 801f076:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 801f07a:	681b      	ldr	r3, [r3, #0]
 801f07c:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
        q31_t ch_0_out_1 = *bias++;
 801f080:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 801f084:	1d1a      	adds	r2, r3, #4
 801f086:	f8c7 2410 	str.w	r2, [r7, #1040]	; 0x410
 801f08a:	681b      	ldr	r3, [r3, #0]
 801f08c:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8

        uint16_t col_count = num_col_a >> 2;
 801f090:	f8b7 3448 	ldrh.w	r3, [r7, #1096]	; 0x448
 801f094:	089b      	lsrs	r3, r3, #2
 801f096:	f8a7 33e6 	strh.w	r3, [r7, #998]	; 0x3e6
        while (col_count)
 801f09a:	e1cd      	b.n	801f438 <arm_nn_mat_mult_kernel_s8_s16+0x1270>
 801f09c:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 801f0a0:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 801f0a4:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q15, 4);
 801f0a6:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 801f0aa:	681b      	ldr	r3, [r3, #0]
 801f0ac:	681b      	ldr	r3, [r3, #0]
 801f0ae:	681b      	ldr	r3, [r3, #0]
 801f0b0:	461a      	mov	r2, r3
 801f0b2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801f0b6:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 801f0b8:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 801f0bc:	681b      	ldr	r3, [r3, #0]
 801f0be:	681b      	ldr	r3, [r3, #0]
 801f0c0:	1d1a      	adds	r2, r3, #4
 801f0c2:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 801f0c6:	681b      	ldr	r3, [r3, #0]
 801f0c8:	601a      	str	r2, [r3, #0]
    return (val);
 801f0ca:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801f0ce:	681b      	ldr	r3, [r3, #0]
        {
            q31_t a01, a02;
            q31_t b0 = arm_nn_read_q15x2_ia(&ip_b0);
 801f0d0:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc
 801f0d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801f0d8:	f107 0268 	add.w	r2, r7, #104	; 0x68
 801f0dc:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q15, 4);
 801f0de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801f0e2:	681b      	ldr	r3, [r3, #0]
 801f0e4:	681b      	ldr	r3, [r3, #0]
 801f0e6:	681b      	ldr	r3, [r3, #0]
 801f0e8:	461a      	mov	r2, r3
 801f0ea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801f0ee:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 801f0f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801f0f4:	681b      	ldr	r3, [r3, #0]
 801f0f6:	681b      	ldr	r3, [r3, #0]
 801f0f8:	1d1a      	adds	r2, r3, #4
 801f0fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801f0fe:	681b      	ldr	r3, [r3, #0]
 801f100:	601a      	str	r2, [r3, #0]
    return (val);
 801f102:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801f106:	681b      	ldr	r3, [r3, #0]
            q31_t b1 = arm_nn_read_q15x2_ia(&ip_b1);
 801f108:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
 801f10c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801f110:	f8d7 2408 	ldr.w	r2, [r7, #1032]	; 0x408
 801f114:	601a      	str	r2, [r3, #0]
 801f116:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 801f11a:	f107 0254 	add.w	r2, r7, #84	; 0x54
 801f11e:	601a      	str	r2, [r3, #0]
 801f120:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 801f124:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801f128:	601a      	str	r2, [r3, #0]
 801f12a:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 801f12e:	f107 0244 	add.w	r2, r7, #68	; 0x44
 801f132:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 801f134:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 801f138:	681b      	ldr	r3, [r3, #0]
 801f13a:	681b      	ldr	r3, [r3, #0]
 801f13c:	681b      	ldr	r3, [r3, #0]
 801f13e:	461a      	mov	r2, r3
 801f140:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801f144:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801f146:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 801f14a:	681b      	ldr	r3, [r3, #0]
 801f14c:	681b      	ldr	r3, [r3, #0]
 801f14e:	1d1a      	adds	r2, r3, #4
 801f150:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 801f154:	681b      	ldr	r3, [r3, #0]
 801f156:	601a      	str	r2, [r3, #0]
    return (val);
 801f158:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801f15c:	681a      	ldr	r2, [r3, #0]
    q31_t inA = arm_nn_read_q7x4_ia(&source);
 801f15e:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 801f162:	601a      	str	r2, [r3, #0]
    q31_t inAbuf1 = __SXTB16_RORn((uint32_t)inA, 8);
 801f164:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 801f168:	681a      	ldr	r2, [r3, #0]
 801f16a:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 801f16e:	601a      	str	r2, [r3, #0]
 801f170:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 801f174:	2208      	movs	r2, #8
 801f176:	601a      	str	r2, [r3, #0]
 801f178:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 801f17c:	f507 72ba 	add.w	r2, r7, #372	; 0x174
 801f180:	6812      	ldr	r2, [r2, #0]
 801f182:	601a      	str	r2, [r3, #0]
 801f184:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 801f188:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 801f18c:	6812      	ldr	r2, [r2, #0]
 801f18e:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 801f190:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 801f194:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 801f198:	6812      	ldr	r2, [r2, #0]
 801f19a:	f002 021f 	and.w	r2, r2, #31
 801f19e:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 801f1a0:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 801f1a4:	681b      	ldr	r3, [r3, #0]
 801f1a6:	2b00      	cmp	r3, #0
 801f1a8:	d103      	bne.n	801f1b2 <arm_nn_mat_mult_kernel_s8_s16+0xfea>
    return op1;
 801f1aa:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 801f1ae:	681b      	ldr	r3, [r3, #0]
 801f1b0:	e007      	b.n	801f1c2 <arm_nn_mat_mult_kernel_s8_s16+0xffa>
  return (op1 >> op2) | (op1 << (32U - op2));
 801f1b2:	f507 72b6 	add.w	r2, r7, #364	; 0x16c
 801f1b6:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 801f1ba:	6812      	ldr	r2, [r2, #0]
 801f1bc:	681b      	ldr	r3, [r3, #0]
 801f1be:	fa62 f303 	ror.w	r3, r2, r3
 801f1c2:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 801f1c6:	6013      	str	r3, [r2, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801f1c8:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 801f1cc:	681b      	ldr	r3, [r3, #0]
 801f1ce:	fa2f f283 	sxtb16	r2, r3
 801f1d2:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 801f1d6:	601a      	str	r2, [r3, #0]
  return(result);
 801f1d8:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 801f1dc:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801f1de:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 801f1e2:	601a      	str	r2, [r3, #0]
  return result;
 801f1e4:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 801f1e8:	681a      	ldr	r2, [r3, #0]
 801f1ea:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 801f1ee:	601a      	str	r2, [r3, #0]
    q31_t inAbuf2 = __SXTB16(inA);
 801f1f0:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 801f1f4:	681a      	ldr	r2, [r3, #0]
 801f1f6:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 801f1fa:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801f1fc:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 801f200:	681b      	ldr	r3, [r3, #0]
 801f202:	fa2f f283 	sxtb16	r2, r3
 801f206:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 801f20a:	601a      	str	r2, [r3, #0]
  return(result);
 801f20c:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 801f210:	681a      	ldr	r2, [r3, #0]
 801f212:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 801f216:	601a      	str	r2, [r3, #0]
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 801f218:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 801f21c:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801f220:	6812      	ldr	r2, [r2, #0]
 801f222:	601a      	str	r2, [r3, #0]
 801f224:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 801f228:	f507 72a6 	add.w	r2, r7, #332	; 0x14c
 801f22c:	6812      	ldr	r2, [r2, #0]
 801f22e:	601a      	str	r2, [r3, #0]
 801f230:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 801f234:	681b      	ldr	r3, [r3, #0]
 801f236:	f507 72a2 	add.w	r2, r7, #324	; 0x144
 801f23a:	6812      	ldr	r2, [r2, #0]
 801f23c:	eac3 4222 	pkhtb	r2, r3, r2, asr #16
 801f240:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801f244:	601a      	str	r2, [r3, #0]
 801f246:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801f24a:	681b      	ldr	r3, [r3, #0]
 801f24c:	461a      	mov	r2, r3
 801f24e:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 801f252:	681b      	ldr	r3, [r3, #0]
 801f254:	601a      	str	r2, [r3, #0]
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 801f256:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 801f25a:	f507 72a6 	add.w	r2, r7, #332	; 0x14c
 801f25e:	6812      	ldr	r2, [r2, #0]
 801f260:	601a      	str	r2, [r3, #0]
 801f262:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801f266:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801f26a:	6812      	ldr	r2, [r2, #0]
 801f26c:	601a      	str	r2, [r3, #0]
 801f26e:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 801f272:	681b      	ldr	r3, [r3, #0]
 801f274:	f507 729c 	add.w	r2, r7, #312	; 0x138
 801f278:	6812      	ldr	r2, [r2, #0]
 801f27a:	eac3 4202 	pkhbt	r2, r3, r2, lsl #16
 801f27e:	f507 739a 	add.w	r3, r7, #308	; 0x134
 801f282:	601a      	str	r2, [r3, #0]
 801f284:	f507 739a 	add.w	r3, r7, #308	; 0x134
 801f288:	681b      	ldr	r3, [r3, #0]
 801f28a:	461a      	mov	r2, r3
 801f28c:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 801f290:	681b      	ldr	r3, [r3, #0]
 801f292:	601a      	str	r2, [r3, #0]
    return source;
 801f294:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801f298:	681b      	ldr	r3, [r3, #0]

            ip_a0 = read_and_pad(ip_a0, &a01, &a02);
 801f29a:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408

            ch_0_out_0 = __SMLAD(a01, b0, ch_0_out_0);
 801f29e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801f2a2:	681b      	ldr	r3, [r3, #0]
 801f2a4:	4618      	mov	r0, r3
 801f2a6:	f8d7 13dc 	ldr.w	r1, [r7, #988]	; 0x3dc
 801f2aa:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	; 0x3ec
 801f2ae:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 801f2b2:	6018      	str	r0, [r3, #0]
 801f2b4:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 801f2b8:	6019      	str	r1, [r3, #0]
 801f2ba:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 801f2be:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801f2c0:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 801f2c4:	681b      	ldr	r3, [r3, #0]
 801f2c6:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 801f2ca:	6812      	ldr	r2, [r2, #0]
 801f2cc:	f507 71c6 	add.w	r1, r7, #396	; 0x18c
 801f2d0:	6809      	ldr	r1, [r1, #0]
 801f2d2:	fb23 1202 	smlad	r2, r3, r2, r1
 801f2d6:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 801f2da:	601a      	str	r2, [r3, #0]
  return(result);
 801f2dc:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 801f2e0:	681b      	ldr	r3, [r3, #0]
 801f2e2:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
            ch_0_out_1 = __SMLAD(a01, b1, ch_0_out_1);
 801f2e6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801f2ea:	681b      	ldr	r3, [r3, #0]
 801f2ec:	4618      	mov	r0, r3
 801f2ee:	f8d7 13d8 	ldr.w	r1, [r7, #984]	; 0x3d8
 801f2f2:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 801f2f6:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 801f2fa:	6018      	str	r0, [r3, #0]
 801f2fc:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 801f300:	6019      	str	r1, [r3, #0]
 801f302:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 801f306:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801f308:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 801f30c:	681b      	ldr	r3, [r3, #0]
 801f30e:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 801f312:	6812      	ldr	r2, [r2, #0]
 801f314:	f507 71ce 	add.w	r1, r7, #412	; 0x19c
 801f318:	6809      	ldr	r1, [r1, #0]
 801f31a:	fb23 1202 	smlad	r2, r3, r2, r1
 801f31e:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 801f322:	601a      	str	r2, [r3, #0]
  return(result);
 801f324:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 801f328:	681b      	ldr	r3, [r3, #0]
 801f32a:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8
 801f32e:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 801f332:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 801f336:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q15, 4);
 801f338:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 801f33c:	681b      	ldr	r3, [r3, #0]
 801f33e:	681b      	ldr	r3, [r3, #0]
 801f340:	681b      	ldr	r3, [r3, #0]
 801f342:	461a      	mov	r2, r3
 801f344:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801f348:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 801f34a:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 801f34e:	681b      	ldr	r3, [r3, #0]
 801f350:	681b      	ldr	r3, [r3, #0]
 801f352:	1d1a      	adds	r2, r3, #4
 801f354:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 801f358:	681b      	ldr	r3, [r3, #0]
 801f35a:	601a      	str	r2, [r3, #0]
    return (val);
 801f35c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801f360:	681b      	ldr	r3, [r3, #0]

            b0 = arm_nn_read_q15x2_ia(&ip_b0);
 801f362:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc
 801f366:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 801f36a:	f107 0268 	add.w	r2, r7, #104	; 0x68
 801f36e:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q15, 4);
 801f370:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 801f374:	681b      	ldr	r3, [r3, #0]
 801f376:	681b      	ldr	r3, [r3, #0]
 801f378:	681b      	ldr	r3, [r3, #0]
 801f37a:	461a      	mov	r2, r3
 801f37c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801f380:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 801f382:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 801f386:	681b      	ldr	r3, [r3, #0]
 801f388:	681b      	ldr	r3, [r3, #0]
 801f38a:	1d1a      	adds	r2, r3, #4
 801f38c:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 801f390:	681b      	ldr	r3, [r3, #0]
 801f392:	601a      	str	r2, [r3, #0]
    return (val);
 801f394:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801f398:	681b      	ldr	r3, [r3, #0]
            b1 = arm_nn_read_q15x2_ia(&ip_b1);
 801f39a:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
            ch_0_out_0 = __SMLAD(a02, b0, ch_0_out_0);
 801f39e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801f3a2:	681b      	ldr	r3, [r3, #0]
 801f3a4:	4618      	mov	r0, r3
 801f3a6:	f8d7 13dc 	ldr.w	r1, [r7, #988]	; 0x3dc
 801f3aa:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	; 0x3ec
 801f3ae:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 801f3b2:	6018      	str	r0, [r3, #0]
 801f3b4:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 801f3b8:	6019      	str	r1, [r3, #0]
 801f3ba:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 801f3be:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801f3c0:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 801f3c4:	681b      	ldr	r3, [r3, #0]
 801f3c6:	f507 72dc 	add.w	r2, r7, #440	; 0x1b8
 801f3ca:	6812      	ldr	r2, [r2, #0]
 801f3cc:	f507 71da 	add.w	r1, r7, #436	; 0x1b4
 801f3d0:	6809      	ldr	r1, [r1, #0]
 801f3d2:	fb23 1202 	smlad	r2, r3, r2, r1
 801f3d6:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 801f3da:	601a      	str	r2, [r3, #0]
  return(result);
 801f3dc:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 801f3e0:	681b      	ldr	r3, [r3, #0]
 801f3e2:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
            ch_0_out_1 = __SMLAD(a02, b1, ch_0_out_1);
 801f3e6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801f3ea:	681b      	ldr	r3, [r3, #0]
 801f3ec:	4618      	mov	r0, r3
 801f3ee:	f8d7 13d8 	ldr.w	r1, [r7, #984]	; 0x3d8
 801f3f2:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 801f3f6:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 801f3fa:	6018      	str	r0, [r3, #0]
 801f3fc:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801f400:	6019      	str	r1, [r3, #0]
 801f402:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 801f406:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801f408:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 801f40c:	681b      	ldr	r3, [r3, #0]
 801f40e:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 801f412:	6812      	ldr	r2, [r2, #0]
 801f414:	f507 71e2 	add.w	r1, r7, #452	; 0x1c4
 801f418:	6809      	ldr	r1, [r1, #0]
 801f41a:	fb23 1202 	smlad	r2, r3, r2, r1
 801f41e:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 801f422:	601a      	str	r2, [r3, #0]
  return(result);
 801f424:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 801f428:	681b      	ldr	r3, [r3, #0]
 801f42a:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8

            col_count--;
 801f42e:	f8b7 33e6 	ldrh.w	r3, [r7, #998]	; 0x3e6
 801f432:	3b01      	subs	r3, #1
 801f434:	f8a7 33e6 	strh.w	r3, [r7, #998]	; 0x3e6
        while (col_count)
 801f438:	f8b7 33e6 	ldrh.w	r3, [r7, #998]	; 0x3e6
 801f43c:	2b00      	cmp	r3, #0
 801f43e:	f47f ae2d 	bne.w	801f09c <arm_nn_mat_mult_kernel_s8_s16+0xed4>
        }
        col_count = num_col_a & 0x3;
 801f442:	f8b7 3448 	ldrh.w	r3, [r7, #1096]	; 0x448
 801f446:	f003 0303 	and.w	r3, r3, #3
 801f44a:	f8a7 33e6 	strh.w	r3, [r7, #998]	; 0x3e6
        while (col_count)
 801f44e:	e036      	b.n	801f4be <arm_nn_mat_mult_kernel_s8_s16+0x12f6>
        {
            q7_t a0 = *ip_a0++;
 801f450:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 801f454:	1c5a      	adds	r2, r3, #1
 801f456:	f8c7 2408 	str.w	r2, [r7, #1032]	; 0x408
 801f45a:	781b      	ldrb	r3, [r3, #0]
 801f45c:	f887 33e5 	strb.w	r3, [r7, #997]	; 0x3e5
            q15_t b0 = *ip_b0++;
 801f460:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801f464:	681b      	ldr	r3, [r3, #0]
 801f466:	1c99      	adds	r1, r3, #2
 801f468:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 801f46c:	6011      	str	r1, [r2, #0]
 801f46e:	881b      	ldrh	r3, [r3, #0]
 801f470:	f8a7 33e2 	strh.w	r3, [r7, #994]	; 0x3e2
            q15_t b1 = *ip_b1++;
 801f474:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801f478:	681b      	ldr	r3, [r3, #0]
 801f47a:	1c99      	adds	r1, r3, #2
 801f47c:	f107 0268 	add.w	r2, r7, #104	; 0x68
 801f480:	6011      	str	r1, [r2, #0]
 801f482:	881b      	ldrh	r3, [r3, #0]
 801f484:	f8a7 33e0 	strh.w	r3, [r7, #992]	; 0x3e0

            ch_0_out_0 += a0 * b0;
 801f488:	f997 33e5 	ldrsb.w	r3, [r7, #997]	; 0x3e5
 801f48c:	f9b7 23e2 	ldrsh.w	r2, [r7, #994]	; 0x3e2
 801f490:	fb02 f303 	mul.w	r3, r2, r3
 801f494:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	; 0x3ec
 801f498:	4413      	add	r3, r2
 801f49a:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
            ch_0_out_1 += a0 * b1;
 801f49e:	f997 33e5 	ldrsb.w	r3, [r7, #997]	; 0x3e5
 801f4a2:	f9b7 23e0 	ldrsh.w	r2, [r7, #992]	; 0x3e0
 801f4a6:	fb02 f303 	mul.w	r3, r2, r3
 801f4aa:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 801f4ae:	4413      	add	r3, r2
 801f4b0:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8
            col_count--;
 801f4b4:	f8b7 33e6 	ldrh.w	r3, [r7, #998]	; 0x3e6
 801f4b8:	3b01      	subs	r3, #1
 801f4ba:	f8a7 33e6 	strh.w	r3, [r7, #998]	; 0x3e6
        while (col_count)
 801f4be:	f8b7 33e6 	ldrh.w	r3, [r7, #998]	; 0x3e6
 801f4c2:	2b00      	cmp	r3, #0
 801f4c4:	d1c4      	bne.n	801f450 <arm_nn_mat_mult_kernel_s8_s16+0x1288>
        }
        ch_0_out_0 = arm_nn_requantize(ch_0_out_0, *out_mult, *out_shift);
 801f4c6:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 801f4ca:	6819      	ldr	r1, [r3, #0]
 801f4cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801f4d0:	681b      	ldr	r3, [r3, #0]
 801f4d2:	681a      	ldr	r2, [r3, #0]
 801f4d4:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801f4d8:	f8d7 03ec 	ldr.w	r0, [r7, #1004]	; 0x3ec
 801f4dc:	6018      	str	r0, [r3, #0]
 801f4de:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 801f4e2:	6019      	str	r1, [r3, #0]
 801f4e4:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801f4e8:	601a      	str	r2, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801f4ea:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801f4ee:	681b      	ldr	r3, [r3, #0]
 801f4f0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f4f4:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 801f4f8:	6812      	ldr	r2, [r2, #0]
 801f4fa:	409a      	lsls	r2, r3
 801f4fc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 801f500:	601a      	str	r2, [r3, #0]
 801f502:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801f506:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 801f50a:	6812      	ldr	r2, [r2, #0]
 801f50c:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801f50e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 801f512:	2200      	movs	r2, #0
 801f514:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 801f516:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801f51a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801f51e:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 801f520:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801f524:	2200      	movs	r2, #0
 801f526:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801f528:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 801f52c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 801f530:	681b      	ldr	r3, [r3, #0]
 801f532:	4618      	mov	r0, r3
 801f534:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801f538:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801f53c:	681b      	ldr	r3, [r3, #0]
 801f53e:	461a      	mov	r2, r3
 801f540:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801f544:	fb02 fc01 	mul.w	ip, r2, r1
 801f548:	fb00 f603 	mul.w	r6, r0, r3
 801f54c:	4466      	add	r6, ip
 801f54e:	fba0 2302 	umull	r2, r3, r0, r2
 801f552:	18f1      	adds	r1, r6, r3
 801f554:	460b      	mov	r3, r1
 801f556:	18a1      	adds	r1, r4, r2
 801f558:	6039      	str	r1, [r7, #0]
 801f55a:	eb45 0303 	adc.w	r3, r5, r3
 801f55e:	607b      	str	r3, [r7, #4]
 801f560:	e9d7 3400 	ldrd	r3, r4, [r7]
 801f564:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
    result = (int32_t)(mult.long_long >> 31);
 801f568:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 801f56c:	f04f 0200 	mov.w	r2, #0
 801f570:	f04f 0300 	mov.w	r3, #0
 801f574:	0fc2      	lsrs	r2, r0, #31
 801f576:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801f57a:	17cb      	asrs	r3, r1, #31
 801f57c:	f107 01e4 	add.w	r1, r7, #228	; 0xe4
 801f580:	4613      	mov	r3, r2
 801f582:	600b      	str	r3, [r1, #0]
    return result;
 801f584:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 801f588:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801f58a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801f58e:	681b      	ldr	r3, [r3, #0]
 801f590:	2b00      	cmp	r3, #0
 801f592:	dc04      	bgt.n	801f59e <arm_nn_mat_mult_kernel_s8_s16+0x13d6>
 801f594:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801f598:	681b      	ldr	r3, [r3, #0]
 801f59a:	425b      	negs	r3, r3
 801f59c:	e000      	b.n	801f5a0 <arm_nn_mat_mult_kernel_s8_s16+0x13d8>
 801f59e:	2300      	movs	r3, #0
 801f5a0:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 801f5a4:	6011      	str	r1, [r2, #0]
 801f5a6:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 801f5aa:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801f5ac:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801f5b0:	2200      	movs	r2, #0
 801f5b2:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801f5b4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 801f5b8:	2201      	movs	r2, #1
 801f5ba:	681b      	ldr	r3, [r3, #0]
 801f5bc:	409a      	lsls	r2, r3
 801f5be:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 801f5c2:	3a01      	subs	r2, #1
 801f5c4:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 801f5c6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801f5ca:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 801f5ce:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 801f5d2:	6809      	ldr	r1, [r1, #0]
 801f5d4:	6812      	ldr	r2, [r2, #0]
 801f5d6:	400a      	ands	r2, r1
 801f5d8:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 801f5da:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801f5de:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 801f5e2:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 801f5e6:	6809      	ldr	r1, [r1, #0]
 801f5e8:	6812      	ldr	r2, [r2, #0]
 801f5ea:	fa41 f202 	asr.w	r2, r1, r2
 801f5ee:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 801f5f0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801f5f4:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 801f5f8:	6812      	ldr	r2, [r2, #0]
 801f5fa:	1052      	asrs	r2, r2, #1
 801f5fc:	601a      	str	r2, [r3, #0]
    if (result < 0)
 801f5fe:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801f602:	681b      	ldr	r3, [r3, #0]
 801f604:	2b00      	cmp	r3, #0
 801f606:	da06      	bge.n	801f616 <arm_nn_mat_mult_kernel_s8_s16+0x144e>
        threshold++;
 801f608:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801f60c:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 801f610:	6812      	ldr	r2, [r2, #0]
 801f612:	3201      	adds	r2, #1
 801f614:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 801f616:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 801f61a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801f61e:	6812      	ldr	r2, [r2, #0]
 801f620:	681b      	ldr	r3, [r3, #0]
 801f622:	429a      	cmp	r2, r3
 801f624:	dd06      	ble.n	801f634 <arm_nn_mat_mult_kernel_s8_s16+0x146c>
        result++;
 801f626:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801f62a:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 801f62e:	6812      	ldr	r2, [r2, #0]
 801f630:	3201      	adds	r2, #1
 801f632:	601a      	str	r2, [r3, #0]
    return result;
 801f634:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801f638:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801f63a:	bf00      	nop
 801f63c:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
        ch_0_out_0 += out_offset;
 801f640:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	; 0x3ec
 801f644:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 801f648:	4413      	add	r3, r2
 801f64a:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
        ch_0_out_0 = MAX(ch_0_out_0, activation_min);
 801f64e:	f9b7 3440 	ldrsh.w	r3, [r7, #1088]	; 0x440
 801f652:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	; 0x3ec
 801f656:	4293      	cmp	r3, r2
 801f658:	bfb8      	it	lt
 801f65a:	4613      	movlt	r3, r2
 801f65c:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 801f660:	f9b7 3444 	ldrsh.w	r3, [r7, #1092]	; 0x444
 801f664:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	; 0x3ec
 801f668:	4293      	cmp	r3, r2
 801f66a:	bfa8      	it	ge
 801f66c:	4613      	movge	r3, r2
 801f66e:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
        *out_0++ = (q7_t)ch_0_out_0;
 801f672:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 801f676:	1c5a      	adds	r2, r3, #1
 801f678:	f8c7 2450 	str.w	r2, [r7, #1104]	; 0x450
 801f67c:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	; 0x3ec
 801f680:	b252      	sxtb	r2, r2
 801f682:	701a      	strb	r2, [r3, #0]

        ch_0_out_1 = arm_nn_requantize(ch_0_out_1, *out_mult, *out_shift);
 801f684:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 801f688:	6819      	ldr	r1, [r3, #0]
 801f68a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801f68e:	681b      	ldr	r3, [r3, #0]
 801f690:	681a      	ldr	r2, [r3, #0]
 801f692:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801f696:	f8d7 03e8 	ldr.w	r0, [r7, #1000]	; 0x3e8
 801f69a:	6018      	str	r0, [r3, #0]
 801f69c:	f507 7392 	add.w	r3, r7, #292	; 0x124
 801f6a0:	6019      	str	r1, [r3, #0]
 801f6a2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801f6a6:	601a      	str	r2, [r3, #0]
 801f6a8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801f6ac:	681b      	ldr	r3, [r3, #0]
 801f6ae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f6b2:	f507 7294 	add.w	r2, r7, #296	; 0x128
 801f6b6:	6812      	ldr	r2, [r2, #0]
 801f6b8:	409a      	lsls	r2, r3
 801f6ba:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 801f6be:	601a      	str	r2, [r3, #0]
 801f6c0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801f6c4:	f507 7292 	add.w	r2, r7, #292	; 0x124
 801f6c8:	6812      	ldr	r2, [r2, #0]
 801f6ca:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801f6cc:	f507 738a 	add.w	r3, r7, #276	; 0x114
 801f6d0:	2200      	movs	r2, #0
 801f6d2:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 801f6d4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801f6d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801f6dc:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 801f6de:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801f6e2:	2200      	movs	r2, #0
 801f6e4:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801f6e6:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 801f6ea:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 801f6ee:	681b      	ldr	r3, [r3, #0]
 801f6f0:	4618      	mov	r0, r3
 801f6f2:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801f6f6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801f6fa:	681b      	ldr	r3, [r3, #0]
 801f6fc:	461a      	mov	r2, r3
 801f6fe:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801f702:	fb02 fc01 	mul.w	ip, r2, r1
 801f706:	fb00 f603 	mul.w	r6, r0, r3
 801f70a:	4466      	add	r6, ip
 801f70c:	fba0 2302 	umull	r2, r3, r0, r2
 801f710:	18f1      	adds	r1, r6, r3
 801f712:	460b      	mov	r3, r1
 801f714:	eb14 0a02 	adds.w	sl, r4, r2
 801f718:	eb45 0b03 	adc.w	fp, r5, r3
 801f71c:	e9c7 ab16 	strd	sl, fp, [r7, #88]	; 0x58
    result = (int32_t)(mult.long_long >> 31);
 801f720:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 801f724:	f04f 0200 	mov.w	r2, #0
 801f728:	f04f 0300 	mov.w	r3, #0
 801f72c:	0fc2      	lsrs	r2, r0, #31
 801f72e:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801f732:	17cb      	asrs	r3, r1, #31
 801f734:	f507 718a 	add.w	r1, r7, #276	; 0x114
 801f738:	4613      	mov	r3, r2
 801f73a:	600b      	str	r3, [r1, #0]
    return result;
 801f73c:	f507 738a 	add.w	r3, r7, #276	; 0x114
 801f740:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801f742:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801f746:	681b      	ldr	r3, [r3, #0]
 801f748:	2b00      	cmp	r3, #0
 801f74a:	dc04      	bgt.n	801f756 <arm_nn_mat_mult_kernel_s8_s16+0x158e>
 801f74c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801f750:	681b      	ldr	r3, [r3, #0]
 801f752:	425b      	negs	r3, r3
 801f754:	e000      	b.n	801f758 <arm_nn_mat_mult_kernel_s8_s16+0x1590>
 801f756:	2300      	movs	r3, #0
 801f758:	f507 7288 	add.w	r2, r7, #272	; 0x110
 801f75c:	6011      	str	r1, [r2, #0]
 801f75e:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 801f762:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801f764:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801f768:	2200      	movs	r2, #0
 801f76a:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801f76c:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 801f770:	2201      	movs	r2, #1
 801f772:	681b      	ldr	r3, [r3, #0]
 801f774:	409a      	lsls	r2, r3
 801f776:	f507 7382 	add.w	r3, r7, #260	; 0x104
 801f77a:	3a01      	subs	r2, #1
 801f77c:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 801f77e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 801f782:	f507 7188 	add.w	r1, r7, #272	; 0x110
 801f786:	f507 7282 	add.w	r2, r7, #260	; 0x104
 801f78a:	6809      	ldr	r1, [r1, #0]
 801f78c:	6812      	ldr	r2, [r2, #0]
 801f78e:	400a      	ands	r2, r1
 801f790:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 801f792:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801f796:	f507 7188 	add.w	r1, r7, #272	; 0x110
 801f79a:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 801f79e:	6809      	ldr	r1, [r1, #0]
 801f7a0:	6812      	ldr	r2, [r2, #0]
 801f7a2:	fa41 f202 	asr.w	r2, r1, r2
 801f7a6:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 801f7a8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 801f7ac:	f507 7282 	add.w	r2, r7, #260	; 0x104
 801f7b0:	6812      	ldr	r2, [r2, #0]
 801f7b2:	1052      	asrs	r2, r2, #1
 801f7b4:	601a      	str	r2, [r3, #0]
    if (result < 0)
 801f7b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801f7ba:	681b      	ldr	r3, [r3, #0]
 801f7bc:	2b00      	cmp	r3, #0
 801f7be:	da06      	bge.n	801f7ce <arm_nn_mat_mult_kernel_s8_s16+0x1606>
        threshold++;
 801f7c0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 801f7c4:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 801f7c8:	6812      	ldr	r2, [r2, #0]
 801f7ca:	3201      	adds	r2, #1
 801f7cc:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 801f7ce:	f507 7280 	add.w	r2, r7, #256	; 0x100
 801f7d2:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 801f7d6:	6812      	ldr	r2, [r2, #0]
 801f7d8:	681b      	ldr	r3, [r3, #0]
 801f7da:	429a      	cmp	r2, r3
 801f7dc:	dd06      	ble.n	801f7ec <arm_nn_mat_mult_kernel_s8_s16+0x1624>
        result++;
 801f7de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801f7e2:	f507 7284 	add.w	r2, r7, #264	; 0x108
 801f7e6:	6812      	ldr	r2, [r2, #0]
 801f7e8:	3201      	adds	r2, #1
 801f7ea:	601a      	str	r2, [r3, #0]
    return result;
 801f7ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801f7f0:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801f7f2:	bf00      	nop
 801f7f4:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8
        ch_0_out_1 += out_offset;
 801f7f8:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 801f7fc:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 801f800:	4413      	add	r3, r2
 801f802:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8
        ch_0_out_1 = MAX(ch_0_out_1, activation_min);
 801f806:	f9b7 3440 	ldrsh.w	r3, [r7, #1088]	; 0x440
 801f80a:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 801f80e:	4293      	cmp	r3, r2
 801f810:	bfb8      	it	lt
 801f812:	4613      	movlt	r3, r2
 801f814:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8
        ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 801f818:	f9b7 3444 	ldrsh.w	r3, [r7, #1092]	; 0x444
 801f81c:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 801f820:	4293      	cmp	r3, r2
 801f822:	bfa8      	it	ge
 801f824:	4613      	movge	r3, r2
 801f826:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8
        *out_1++ = (q7_t)ch_0_out_1;
 801f82a:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 801f82e:	1c5a      	adds	r2, r3, #1
 801f830:	f8c7 2414 	str.w	r2, [r7, #1044]	; 0x414
 801f834:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 801f838:	b252      	sxtb	r2, r2
 801f83a:	701a      	strb	r2, [r3, #0]
        out_mult++;
 801f83c:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 801f840:	3304      	adds	r3, #4
 801f842:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
        out_shift++;
 801f846:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801f84a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801f84e:	6812      	ldr	r2, [r2, #0]
 801f850:	3204      	adds	r2, #4
 801f852:	601a      	str	r2, [r3, #0]
    }

    out_0 += output_ch;
 801f854:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 801f858:	881b      	ldrh	r3, [r3, #0]
 801f85a:	f8d7 2450 	ldr.w	r2, [r7, #1104]	; 0x450
 801f85e:	4413      	add	r3, r2
 801f860:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450

    /* return the new output pointer with offset */
    return out_0;
 801f864:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
    (void)output_bias;
    (void)out_0;
    /* To be completed */
    return NULL;
#endif
}
 801f868:	4618      	mov	r0, r3
 801f86a:	f507 6783 	add.w	r7, r7, #1048	; 0x418
 801f86e:	46bd      	mov	sp, r7
 801f870:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 801f874:	4770      	bx	lr

0801f876 <arm_nn_mat_mult_nt_t_s8>:
                                   const int32_t rhs_cols,
                                   const int32_t lhs_offset,
                                   const int32_t dst_offset,
                                   const int32_t activation_min,
                                   const int32_t activation_max)
{
 801f876:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 801f87a:	f5ad 6d24 	sub.w	sp, sp, #2624	; 0xa40
 801f87e:	af00      	add	r7, sp, #0
 801f880:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 801f884:	6020      	str	r0, [r4, #0]
 801f886:	f107 0038 	add.w	r0, r7, #56	; 0x38
 801f88a:	6001      	str	r1, [r0, #0]
 801f88c:	f107 0134 	add.w	r1, r7, #52	; 0x34
 801f890:	600a      	str	r2, [r1, #0]
 801f892:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801f896:	6013      	str	r3, [r2, #0]
#if defined(ARM_MATH_DSP)
    const int32_t off0 = rhs_cols - 4;
 801f898:	f8d7 3a70 	ldr.w	r3, [r7, #2672]	; 0xa70
 801f89c:	3b04      	subs	r3, #4
 801f89e:	f8c7 39ec 	str.w	r3, [r7, #2540]	; 0x9ec

    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 801f8a2:	2300      	movs	r3, #0
 801f8a4:	f8c7 3a3c 	str.w	r3, [r7, #2620]	; 0xa3c
 801f8a8:	f003 b977 	b.w	8022b9a <arm_nn_mat_mult_nt_t_s8+0x3324>
    {
        const q7_t *lhs_ptr = &lhs[0];
 801f8ac:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 801f8b0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801f8b4:	681b      	ldr	r3, [r3, #0]
 801f8b6:	6013      	str	r3, [r2, #0]
        q7_t *dst_ptr = &dst[0];
 801f8b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801f8bc:	681b      	ldr	r3, [r3, #0]
 801f8be:	f8c7 3a38 	str.w	r3, [r7, #2616]	; 0xa38

        q31_t lhs_offset_contribution0 = 0;
 801f8c2:	2300      	movs	r3, #0
 801f8c4:	f8c7 3a34 	str.w	r3, [r7, #2612]	; 0xa34
        q31_t lhs_offset_contribution1 = 0;
 801f8c8:	2300      	movs	r3, #0
 801f8ca:	f8c7 3a30 	str.w	r3, [r7, #2608]	; 0xa30

        for (int32_t x = 0; x < rhs_cols; ++x)
 801f8ce:	2300      	movs	r3, #0
 801f8d0:	f8c7 3a2c 	str.w	r3, [r7, #2604]	; 0xa2c
 801f8d4:	e024      	b.n	801f920 <arm_nn_mat_mult_nt_t_s8+0xaa>
        {
            lhs_offset_contribution0 += rhs[x];
 801f8d6:	f8d7 2a2c 	ldr.w	r2, [r7, #2604]	; 0xa2c
 801f8da:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801f8de:	681b      	ldr	r3, [r3, #0]
 801f8e0:	4413      	add	r3, r2
 801f8e2:	f993 3000 	ldrsb.w	r3, [r3]
 801f8e6:	461a      	mov	r2, r3
 801f8e8:	f8d7 3a34 	ldr.w	r3, [r7, #2612]	; 0xa34
 801f8ec:	4413      	add	r3, r2
 801f8ee:	f8c7 3a34 	str.w	r3, [r7, #2612]	; 0xa34
            lhs_offset_contribution1 += rhs[x + rhs_cols];
 801f8f2:	f8d7 2a2c 	ldr.w	r2, [r7, #2604]	; 0xa2c
 801f8f6:	f8d7 3a70 	ldr.w	r3, [r7, #2672]	; 0xa70
 801f8fa:	4413      	add	r3, r2
 801f8fc:	461a      	mov	r2, r3
 801f8fe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801f902:	681b      	ldr	r3, [r3, #0]
 801f904:	4413      	add	r3, r2
 801f906:	f993 3000 	ldrsb.w	r3, [r3]
 801f90a:	461a      	mov	r2, r3
 801f90c:	f8d7 3a30 	ldr.w	r3, [r7, #2608]	; 0xa30
 801f910:	4413      	add	r3, r2
 801f912:	f8c7 3a30 	str.w	r3, [r7, #2608]	; 0xa30
        for (int32_t x = 0; x < rhs_cols; ++x)
 801f916:	f8d7 3a2c 	ldr.w	r3, [r7, #2604]	; 0xa2c
 801f91a:	3301      	adds	r3, #1
 801f91c:	f8c7 3a2c 	str.w	r3, [r7, #2604]	; 0xa2c
 801f920:	f8d7 2a2c 	ldr.w	r2, [r7, #2604]	; 0xa2c
 801f924:	f8d7 3a70 	ldr.w	r3, [r7, #2672]	; 0xa70
 801f928:	429a      	cmp	r2, r3
 801f92a:	dbd4      	blt.n	801f8d6 <arm_nn_mat_mult_nt_t_s8+0x60>
        }

        lhs_offset_contribution0 *= lhs_offset;
 801f92c:	f8d7 2a34 	ldr.w	r2, [r7, #2612]	; 0xa34
 801f930:	f8d7 3a74 	ldr.w	r3, [r7, #2676]	; 0xa74
 801f934:	fb03 f302 	mul.w	r3, r3, r2
 801f938:	f8c7 3a34 	str.w	r3, [r7, #2612]	; 0xa34
        lhs_offset_contribution1 *= lhs_offset;
 801f93c:	f8d7 2a30 	ldr.w	r2, [r7, #2608]	; 0xa30
 801f940:	f8d7 3a74 	ldr.w	r3, [r7, #2676]	; 0xa74
 801f944:	fb03 f302 	mul.w	r3, r3, r2
 801f948:	f8c7 3a30 	str.w	r3, [r7, #2608]	; 0xa30
        if (bias)
 801f94c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801f950:	681b      	ldr	r3, [r3, #0]
 801f952:	2b00      	cmp	r3, #0
 801f954:	d01a      	beq.n	801f98c <arm_nn_mat_mult_nt_t_s8+0x116>
        {
            lhs_offset_contribution0 += bias[rhs_rows_idx];
 801f956:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 801f95a:	009a      	lsls	r2, r3, #2
 801f95c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801f960:	681b      	ldr	r3, [r3, #0]
 801f962:	4413      	add	r3, r2
 801f964:	681a      	ldr	r2, [r3, #0]
 801f966:	f8d7 3a34 	ldr.w	r3, [r7, #2612]	; 0xa34
 801f96a:	4413      	add	r3, r2
 801f96c:	f8c7 3a34 	str.w	r3, [r7, #2612]	; 0xa34
            lhs_offset_contribution1 += bias[rhs_rows_idx + 1];
 801f970:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 801f974:	3301      	adds	r3, #1
 801f976:	009a      	lsls	r2, r3, #2
 801f978:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801f97c:	681b      	ldr	r3, [r3, #0]
 801f97e:	4413      	add	r3, r2
 801f980:	681a      	ldr	r2, [r3, #0]
 801f982:	f8d7 3a30 	ldr.w	r3, [r7, #2608]	; 0xa30
 801f986:	4413      	add	r3, r2
 801f988:	f8c7 3a30 	str.w	r3, [r7, #2608]	; 0xa30
        }

        int32_t lhs_rows_idx = lhs_rows >> 1;
 801f98c:	f8d7 3a68 	ldr.w	r3, [r7, #2664]	; 0xa68
 801f990:	105b      	asrs	r3, r3, #1
 801f992:	f8c7 3a28 	str.w	r3, [r7, #2600]	; 0xa28

        while (lhs_rows_idx)
 801f996:	f001 bf48 	b.w	802182a <arm_nn_mat_mult_nt_t_s8+0x1fb4>
        {
            const q7_t *rhs_ptr = &rhs[0];
 801f99a:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 801f99e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801f9a2:	681b      	ldr	r3, [r3, #0]
 801f9a4:	6013      	str	r3, [r2, #0]

            q31_t res00 = lhs_offset_contribution0;
 801f9a6:	f8d7 3a34 	ldr.w	r3, [r7, #2612]	; 0xa34
 801f9aa:	f8c7 3a24 	str.w	r3, [r7, #2596]	; 0xa24
            q31_t res01 = lhs_offset_contribution1;
 801f9ae:	f8d7 3a30 	ldr.w	r3, [r7, #2608]	; 0xa30
 801f9b2:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20
            q31_t res10 = lhs_offset_contribution0;
 801f9b6:	f8d7 3a34 	ldr.w	r3, [r7, #2612]	; 0xa34
 801f9ba:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
            q31_t res11 = lhs_offset_contribution1;
 801f9be:	f8d7 3a30 	ldr.w	r3, [r7, #2608]	; 0xa30
 801f9c2:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18

            int32_t rhs_cols_idx = 0;
 801f9c6:	2300      	movs	r3, #0
 801f9c8:	f8c7 3a14 	str.w	r3, [r7, #2580]	; 0xa14

            q31_t val0, val1, val2, val3, val4, val5;

            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 801f9cc:	f001 baee 	b.w	8020fac <arm_nn_mat_mult_nt_t_s8+0x1736>
 801f9d0:	f207 522c 	addw	r2, r7, #1324	; 0x52c
 801f9d4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 801f9d8:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801f9da:	f207 532c 	addw	r3, r7, #1324	; 0x52c
 801f9de:	681b      	ldr	r3, [r3, #0]
 801f9e0:	681b      	ldr	r3, [r3, #0]
 801f9e2:	681b      	ldr	r3, [r3, #0]
 801f9e4:	461a      	mov	r2, r3
 801f9e6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801f9ea:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801f9ec:	f207 532c 	addw	r3, r7, #1324	; 0x52c
 801f9f0:	681b      	ldr	r3, [r3, #0]
 801f9f2:	681b      	ldr	r3, [r3, #0]
 801f9f4:	1d1a      	adds	r2, r3, #4
 801f9f6:	f207 532c 	addw	r3, r7, #1324	; 0x52c
 801f9fa:	681b      	ldr	r3, [r3, #0]
 801f9fc:	601a      	str	r2, [r3, #0]
    return (val);
 801f9fe:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801fa02:	681b      	ldr	r3, [r3, #0]
            {
                val1 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 801fa04:	f8c7 39c0 	str.w	r3, [r7, #2496]	; 0x9c0
                val2 = __SXTB16(val1);
 801fa08:	f8d7 29c0 	ldr.w	r2, [r7, #2496]	; 0x9c0
 801fa0c:	f207 5334 	addw	r3, r7, #1332	; 0x534
 801fa10:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801fa12:	f207 5334 	addw	r3, r7, #1332	; 0x534
 801fa16:	681b      	ldr	r3, [r3, #0]
 801fa18:	fa2f f283 	sxtb16	r2, r3
 801fa1c:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 801fa20:	601a      	str	r2, [r3, #0]
  return(result);
 801fa22:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 801fa26:	681b      	ldr	r3, [r3, #0]
 801fa28:	f8c7 39bc 	str.w	r3, [r7, #2492]	; 0x9bc
 801fa2c:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 801fa30:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801fa34:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801fa36:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 801fa3a:	681b      	ldr	r3, [r3, #0]
 801fa3c:	681b      	ldr	r3, [r3, #0]
 801fa3e:	681b      	ldr	r3, [r3, #0]
 801fa40:	461a      	mov	r2, r3
 801fa42:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801fa46:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801fa48:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 801fa4c:	681b      	ldr	r3, [r3, #0]
 801fa4e:	681b      	ldr	r3, [r3, #0]
 801fa50:	1d1a      	adds	r2, r3, #4
 801fa52:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 801fa56:	681b      	ldr	r3, [r3, #0]
 801fa58:	601a      	str	r2, [r3, #0]
    return (val);
 801fa5a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801fa5e:	681b      	ldr	r3, [r3, #0]
                val0 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 801fa60:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8
                val3 = __SXTB16(val0);
 801fa64:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801fa68:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 801fa6c:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801fa6e:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 801fa72:	681b      	ldr	r3, [r3, #0]
 801fa74:	fa2f f283 	sxtb16	r2, r3
 801fa78:	f207 533c 	addw	r3, r7, #1340	; 0x53c
 801fa7c:	601a      	str	r2, [r3, #0]
  return(result);
 801fa7e:	f207 533c 	addw	r3, r7, #1340	; 0x53c
 801fa82:	681b      	ldr	r3, [r3, #0]
 801fa84:	f8c7 39b4 	str.w	r3, [r7, #2484]	; 0x9b4
                val4 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 801fa88:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 801fa8c:	681a      	ldr	r2, [r3, #0]
 801fa8e:	f8d7 39ec 	ldr.w	r3, [r7, #2540]	; 0x9ec
 801fa92:	441a      	add	r2, r3
 801fa94:	f207 5344 	addw	r3, r7, #1348	; 0x544
 801fa98:	601a      	str	r2, [r3, #0]
 801fa9a:	f207 5344 	addw	r3, r7, #1348	; 0x544
 801fa9e:	681b      	ldr	r3, [r3, #0]
 801faa0:	681b      	ldr	r3, [r3, #0]
 801faa2:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801faa4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 801faa8:	601a      	str	r2, [r3, #0]
    return (val);
 801faaa:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 801faae:	681b      	ldr	r3, [r3, #0]
 801fab0:	f8c7 39b0 	str.w	r3, [r7, #2480]	; 0x9b0
                val1 = __SXTB16_RORn(val1, 8);
 801fab4:	f8d7 29c0 	ldr.w	r2, [r7, #2496]	; 0x9c0
 801fab8:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 801fabc:	601a      	str	r2, [r3, #0]
 801fabe:	f207 525c 	addw	r2, r7, #1372	; 0x55c
 801fac2:	2308      	movs	r3, #8
 801fac4:	6013      	str	r3, [r2, #0]
 801fac6:	f507 62ab 	add.w	r2, r7, #1368	; 0x558
 801faca:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 801face:	681b      	ldr	r3, [r3, #0]
 801fad0:	6013      	str	r3, [r2, #0]
 801fad2:	f207 5254 	addw	r2, r7, #1364	; 0x554
 801fad6:	f207 535c 	addw	r3, r7, #1372	; 0x55c
 801fada:	681b      	ldr	r3, [r3, #0]
 801fadc:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801fade:	f207 5254 	addw	r2, r7, #1364	; 0x554
 801fae2:	f207 5354 	addw	r3, r7, #1364	; 0x554
 801fae6:	681b      	ldr	r3, [r3, #0]
 801fae8:	f003 031f 	and.w	r3, r3, #31
 801faec:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801faee:	f207 5354 	addw	r3, r7, #1364	; 0x554
 801faf2:	681b      	ldr	r3, [r3, #0]
 801faf4:	2b00      	cmp	r3, #0
 801faf6:	d103      	bne.n	801fb00 <arm_nn_mat_mult_nt_t_s8+0x28a>
    return op1;
 801faf8:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
 801fafc:	681a      	ldr	r2, [r3, #0]
 801fafe:	e006      	b.n	801fb0e <arm_nn_mat_mult_nt_t_s8+0x298>
  return (op1 >> op2) | (op1 << (32U - op2));
 801fb00:	f507 62ab 	add.w	r2, r7, #1368	; 0x558
 801fb04:	f207 5354 	addw	r3, r7, #1364	; 0x554
 801fb08:	6812      	ldr	r2, [r2, #0]
 801fb0a:	681b      	ldr	r3, [r3, #0]
 801fb0c:	41da      	rors	r2, r3
 801fb0e:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 801fb12:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801fb14:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 801fb18:	681b      	ldr	r3, [r3, #0]
 801fb1a:	fa2f f283 	sxtb16	r2, r3
 801fb1e:	f207 534c 	addw	r3, r7, #1356	; 0x54c
 801fb22:	601a      	str	r2, [r3, #0]
  return(result);
 801fb24:	f207 534c 	addw	r3, r7, #1356	; 0x54c
 801fb28:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801fb2a:	f507 63a9 	add.w	r3, r7, #1352	; 0x548
 801fb2e:	601a      	str	r2, [r3, #0]
  return result;
 801fb30:	f507 63a9 	add.w	r3, r7, #1352	; 0x548
 801fb34:	681b      	ldr	r3, [r3, #0]
 801fb36:	f8c7 39c0 	str.w	r3, [r7, #2496]	; 0x9c0
                val0 = __SXTB16_RORn(val0, 8);
 801fb3a:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801fb3e:	f207 537c 	addw	r3, r7, #1404	; 0x57c
 801fb42:	601a      	str	r2, [r3, #0]
 801fb44:	f507 62af 	add.w	r2, r7, #1400	; 0x578
 801fb48:	2308      	movs	r3, #8
 801fb4a:	6013      	str	r3, [r2, #0]
 801fb4c:	f207 5274 	addw	r2, r7, #1396	; 0x574
 801fb50:	f207 537c 	addw	r3, r7, #1404	; 0x57c
 801fb54:	681b      	ldr	r3, [r3, #0]
 801fb56:	6013      	str	r3, [r2, #0]
 801fb58:	f507 62ae 	add.w	r2, r7, #1392	; 0x570
 801fb5c:	f507 63af 	add.w	r3, r7, #1400	; 0x578
 801fb60:	681b      	ldr	r3, [r3, #0]
 801fb62:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801fb64:	f507 62ae 	add.w	r2, r7, #1392	; 0x570
 801fb68:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 801fb6c:	681b      	ldr	r3, [r3, #0]
 801fb6e:	f003 031f 	and.w	r3, r3, #31
 801fb72:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801fb74:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 801fb78:	681b      	ldr	r3, [r3, #0]
 801fb7a:	2b00      	cmp	r3, #0
 801fb7c:	d103      	bne.n	801fb86 <arm_nn_mat_mult_nt_t_s8+0x310>
    return op1;
 801fb7e:	f207 5374 	addw	r3, r7, #1396	; 0x574
 801fb82:	681a      	ldr	r2, [r3, #0]
 801fb84:	e006      	b.n	801fb94 <arm_nn_mat_mult_nt_t_s8+0x31e>
  return (op1 >> op2) | (op1 << (32U - op2));
 801fb86:	f207 5274 	addw	r2, r7, #1396	; 0x574
 801fb8a:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 801fb8e:	6812      	ldr	r2, [r2, #0]
 801fb90:	681b      	ldr	r3, [r3, #0]
 801fb92:	41da      	rors	r2, r3
 801fb94:	f207 536c 	addw	r3, r7, #1388	; 0x56c
 801fb98:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801fb9a:	f207 536c 	addw	r3, r7, #1388	; 0x56c
 801fb9e:	681b      	ldr	r3, [r3, #0]
 801fba0:	fa2f f283 	sxtb16	r2, r3
 801fba4:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 801fba8:	601a      	str	r2, [r3, #0]
  return(result);
 801fbaa:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 801fbae:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801fbb0:	f207 5364 	addw	r3, r7, #1380	; 0x564
 801fbb4:	601a      	str	r2, [r3, #0]
  return result;
 801fbb6:	f207 5364 	addw	r3, r7, #1380	; 0x564
 801fbba:	681b      	ldr	r3, [r3, #0]
 801fbbc:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8

                // 4 x MAC res00, res01
                res00 = __SMLAD(val3, val2, res00);
 801fbc0:	f8d7 29b4 	ldr.w	r2, [r7, #2484]	; 0x9b4
 801fbc4:	f8d7 19bc 	ldr.w	r1, [r7, #2492]	; 0x9bc
 801fbc8:	f8d7 0a24 	ldr.w	r0, [r7, #2596]	; 0xa24
 801fbcc:	f207 538c 	addw	r3, r7, #1420	; 0x58c
 801fbd0:	601a      	str	r2, [r3, #0]
 801fbd2:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 801fbd6:	6019      	str	r1, [r3, #0]
 801fbd8:	f207 5384 	addw	r3, r7, #1412	; 0x584
 801fbdc:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801fbde:	f207 538c 	addw	r3, r7, #1420	; 0x58c
 801fbe2:	6819      	ldr	r1, [r3, #0]
 801fbe4:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 801fbe8:	681a      	ldr	r2, [r3, #0]
 801fbea:	f207 5384 	addw	r3, r7, #1412	; 0x584
 801fbee:	681b      	ldr	r3, [r3, #0]
 801fbf0:	fb21 3202 	smlad	r2, r1, r2, r3
 801fbf4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801fbf8:	601a      	str	r2, [r3, #0]
  return(result);
 801fbfa:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801fbfe:	681b      	ldr	r3, [r3, #0]
 801fc00:	f8c7 3a24 	str.w	r3, [r7, #2596]	; 0xa24
                val5 = __SXTB16(val4);
 801fc04:	f8d7 29b0 	ldr.w	r2, [r7, #2480]	; 0x9b0
 801fc08:	f207 5394 	addw	r3, r7, #1428	; 0x594
 801fc0c:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801fc0e:	f207 5394 	addw	r3, r7, #1428	; 0x594
 801fc12:	681b      	ldr	r3, [r3, #0]
 801fc14:	fa2f f283 	sxtb16	r2, r3
 801fc18:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 801fc1c:	601a      	str	r2, [r3, #0]
  return(result);
 801fc1e:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 801fc22:	681b      	ldr	r3, [r3, #0]
 801fc24:	f8c7 39ac 	str.w	r3, [r7, #2476]	; 0x9ac
                res00 = __SMLAD(val0, val1, res00);
 801fc28:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801fc2c:	f8d7 19c0 	ldr.w	r1, [r7, #2496]	; 0x9c0
 801fc30:	f8d7 0a24 	ldr.w	r0, [r7, #2596]	; 0xa24
 801fc34:	f207 53a4 	addw	r3, r7, #1444	; 0x5a4
 801fc38:	601a      	str	r2, [r3, #0]
 801fc3a:	f507 63b4 	add.w	r3, r7, #1440	; 0x5a0
 801fc3e:	6019      	str	r1, [r3, #0]
 801fc40:	f207 539c 	addw	r3, r7, #1436	; 0x59c
 801fc44:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801fc46:	f207 53a4 	addw	r3, r7, #1444	; 0x5a4
 801fc4a:	6819      	ldr	r1, [r3, #0]
 801fc4c:	f507 63b4 	add.w	r3, r7, #1440	; 0x5a0
 801fc50:	681a      	ldr	r2, [r3, #0]
 801fc52:	f207 539c 	addw	r3, r7, #1436	; 0x59c
 801fc56:	681b      	ldr	r3, [r3, #0]
 801fc58:	fb21 3202 	smlad	r2, r1, r2, r3
 801fc5c:	f507 63b3 	add.w	r3, r7, #1432	; 0x598
 801fc60:	601a      	str	r2, [r3, #0]
  return(result);
 801fc62:	f507 63b3 	add.w	r3, r7, #1432	; 0x598
 801fc66:	681b      	ldr	r3, [r3, #0]
 801fc68:	f8c7 3a24 	str.w	r3, [r7, #2596]	; 0xa24
                val4 = __SXTB16_RORn(val4, 8);
 801fc6c:	f8d7 29b0 	ldr.w	r2, [r7, #2480]	; 0x9b0
 801fc70:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 801fc74:	601a      	str	r2, [r3, #0]
 801fc76:	f207 52bc 	addw	r2, r7, #1468	; 0x5bc
 801fc7a:	2308      	movs	r3, #8
 801fc7c:	6013      	str	r3, [r2, #0]
 801fc7e:	f507 62b7 	add.w	r2, r7, #1464	; 0x5b8
 801fc82:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 801fc86:	681b      	ldr	r3, [r3, #0]
 801fc88:	6013      	str	r3, [r2, #0]
 801fc8a:	f207 52b4 	addw	r2, r7, #1460	; 0x5b4
 801fc8e:	f207 53bc 	addw	r3, r7, #1468	; 0x5bc
 801fc92:	681b      	ldr	r3, [r3, #0]
 801fc94:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801fc96:	f207 52b4 	addw	r2, r7, #1460	; 0x5b4
 801fc9a:	f207 53b4 	addw	r3, r7, #1460	; 0x5b4
 801fc9e:	681b      	ldr	r3, [r3, #0]
 801fca0:	f003 031f 	and.w	r3, r3, #31
 801fca4:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801fca6:	f207 53b4 	addw	r3, r7, #1460	; 0x5b4
 801fcaa:	681b      	ldr	r3, [r3, #0]
 801fcac:	2b00      	cmp	r3, #0
 801fcae:	d103      	bne.n	801fcb8 <arm_nn_mat_mult_nt_t_s8+0x442>
    return op1;
 801fcb0:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 801fcb4:	681a      	ldr	r2, [r3, #0]
 801fcb6:	e006      	b.n	801fcc6 <arm_nn_mat_mult_nt_t_s8+0x450>
  return (op1 >> op2) | (op1 << (32U - op2));
 801fcb8:	f507 62b7 	add.w	r2, r7, #1464	; 0x5b8
 801fcbc:	f207 53b4 	addw	r3, r7, #1460	; 0x5b4
 801fcc0:	6812      	ldr	r2, [r2, #0]
 801fcc2:	681b      	ldr	r3, [r3, #0]
 801fcc4:	41da      	rors	r2, r3
 801fcc6:	f507 63b6 	add.w	r3, r7, #1456	; 0x5b0
 801fcca:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801fccc:	f507 63b6 	add.w	r3, r7, #1456	; 0x5b0
 801fcd0:	681b      	ldr	r3, [r3, #0]
 801fcd2:	fa2f f283 	sxtb16	r2, r3
 801fcd6:	f207 53ac 	addw	r3, r7, #1452	; 0x5ac
 801fcda:	601a      	str	r2, [r3, #0]
  return(result);
 801fcdc:	f207 53ac 	addw	r3, r7, #1452	; 0x5ac
 801fce0:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801fce2:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 801fce6:	601a      	str	r2, [r3, #0]
  return result;
 801fce8:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 801fcec:	681b      	ldr	r3, [r3, #0]
 801fcee:	f8c7 39b0 	str.w	r3, [r7, #2480]	; 0x9b0
                res01 = __SMLAD(val3, val5, res01);
 801fcf2:	f8d7 29b4 	ldr.w	r2, [r7, #2484]	; 0x9b4
 801fcf6:	f8d7 19ac 	ldr.w	r1, [r7, #2476]	; 0x9ac
 801fcfa:	f8d7 0a20 	ldr.w	r0, [r7, #2592]	; 0xa20
 801fcfe:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 801fd02:	601a      	str	r2, [r3, #0]
 801fd04:	f207 53cc 	addw	r3, r7, #1484	; 0x5cc
 801fd08:	6019      	str	r1, [r3, #0]
 801fd0a:	f507 63b9 	add.w	r3, r7, #1480	; 0x5c8
 801fd0e:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801fd10:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 801fd14:	6819      	ldr	r1, [r3, #0]
 801fd16:	f207 53cc 	addw	r3, r7, #1484	; 0x5cc
 801fd1a:	681a      	ldr	r2, [r3, #0]
 801fd1c:	f507 63b9 	add.w	r3, r7, #1480	; 0x5c8
 801fd20:	681b      	ldr	r3, [r3, #0]
 801fd22:	fb21 3202 	smlad	r2, r1, r2, r3
 801fd26:	f207 53c4 	addw	r3, r7, #1476	; 0x5c4
 801fd2a:	601a      	str	r2, [r3, #0]
  return(result);
 801fd2c:	f207 53c4 	addw	r3, r7, #1476	; 0x5c4
 801fd30:	681b      	ldr	r3, [r3, #0]
 801fd32:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20
                res01 = __SMLAD(val0, val4, res01);
 801fd36:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801fd3a:	f8d7 19b0 	ldr.w	r1, [r7, #2480]	; 0x9b0
 801fd3e:	f8d7 0a20 	ldr.w	r0, [r7, #2592]	; 0xa20
 801fd42:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 801fd46:	601a      	str	r2, [r3, #0]
 801fd48:	f207 53dc 	addw	r3, r7, #1500	; 0x5dc
 801fd4c:	6019      	str	r1, [r3, #0]
 801fd4e:	f507 63bb 	add.w	r3, r7, #1496	; 0x5d8
 801fd52:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801fd54:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 801fd58:	6819      	ldr	r1, [r3, #0]
 801fd5a:	f207 53dc 	addw	r3, r7, #1500	; 0x5dc
 801fd5e:	681a      	ldr	r2, [r3, #0]
 801fd60:	f507 63bb 	add.w	r3, r7, #1496	; 0x5d8
 801fd64:	681b      	ldr	r3, [r3, #0]
 801fd66:	fb21 3202 	smlad	r2, r1, r2, r3
 801fd6a:	f207 53d4 	addw	r3, r7, #1492	; 0x5d4
 801fd6e:	601a      	str	r2, [r3, #0]
  return(result);
 801fd70:	f207 53d4 	addw	r3, r7, #1492	; 0x5d4
 801fd74:	681b      	ldr	r3, [r3, #0]
 801fd76:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20

                // 4 x MAC res10, res11
                val0 = arm_nn_read_q7x4((const q7_t *)&lhs_ptr[off0]);
 801fd7a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801fd7e:	681a      	ldr	r2, [r3, #0]
 801fd80:	f8d7 39ec 	ldr.w	r3, [r7, #2540]	; 0x9ec
 801fd84:	441a      	add	r2, r3
 801fd86:	f207 53e4 	addw	r3, r7, #1508	; 0x5e4
 801fd8a:	601a      	str	r2, [r3, #0]
 801fd8c:	f207 53e4 	addw	r3, r7, #1508	; 0x5e4
 801fd90:	681b      	ldr	r3, [r3, #0]
 801fd92:	681b      	ldr	r3, [r3, #0]
 801fd94:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801fd96:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801fd9a:	601a      	str	r2, [r3, #0]
    return (val);
 801fd9c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801fda0:	681b      	ldr	r3, [r3, #0]
 801fda2:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8
                val3 = __SXTB16(val0);
 801fda6:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801fdaa:	f207 53ec 	addw	r3, r7, #1516	; 0x5ec
 801fdae:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801fdb0:	f207 53ec 	addw	r3, r7, #1516	; 0x5ec
 801fdb4:	681b      	ldr	r3, [r3, #0]
 801fdb6:	fa2f f283 	sxtb16	r2, r3
 801fdba:	f507 63bd 	add.w	r3, r7, #1512	; 0x5e8
 801fdbe:	601a      	str	r2, [r3, #0]
  return(result);
 801fdc0:	f507 63bd 	add.w	r3, r7, #1512	; 0x5e8
 801fdc4:	681b      	ldr	r3, [r3, #0]
 801fdc6:	f8c7 39b4 	str.w	r3, [r7, #2484]	; 0x9b4
                val0 = __SXTB16_RORn(val0, 8);
 801fdca:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801fdce:	f507 63c1 	add.w	r3, r7, #1544	; 0x608
 801fdd2:	601a      	str	r2, [r3, #0]
 801fdd4:	f207 6204 	addw	r2, r7, #1540	; 0x604
 801fdd8:	2308      	movs	r3, #8
 801fdda:	6013      	str	r3, [r2, #0]
 801fddc:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 801fde0:	f507 63c1 	add.w	r3, r7, #1544	; 0x608
 801fde4:	681b      	ldr	r3, [r3, #0]
 801fde6:	6013      	str	r3, [r2, #0]
 801fde8:	f207 52fc 	addw	r2, r7, #1532	; 0x5fc
 801fdec:	f207 6304 	addw	r3, r7, #1540	; 0x604
 801fdf0:	681b      	ldr	r3, [r3, #0]
 801fdf2:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801fdf4:	f207 52fc 	addw	r2, r7, #1532	; 0x5fc
 801fdf8:	f207 53fc 	addw	r3, r7, #1532	; 0x5fc
 801fdfc:	681b      	ldr	r3, [r3, #0]
 801fdfe:	f003 031f 	and.w	r3, r3, #31
 801fe02:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801fe04:	f207 53fc 	addw	r3, r7, #1532	; 0x5fc
 801fe08:	681b      	ldr	r3, [r3, #0]
 801fe0a:	2b00      	cmp	r3, #0
 801fe0c:	d103      	bne.n	801fe16 <arm_nn_mat_mult_nt_t_s8+0x5a0>
    return op1;
 801fe0e:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 801fe12:	681a      	ldr	r2, [r3, #0]
 801fe14:	e006      	b.n	801fe24 <arm_nn_mat_mult_nt_t_s8+0x5ae>
  return (op1 >> op2) | (op1 << (32U - op2));
 801fe16:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 801fe1a:	f207 53fc 	addw	r3, r7, #1532	; 0x5fc
 801fe1e:	6812      	ldr	r2, [r2, #0]
 801fe20:	681b      	ldr	r3, [r3, #0]
 801fe22:	41da      	rors	r2, r3
 801fe24:	f507 63bf 	add.w	r3, r7, #1528	; 0x5f8
 801fe28:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801fe2a:	f507 63bf 	add.w	r3, r7, #1528	; 0x5f8
 801fe2e:	681b      	ldr	r3, [r3, #0]
 801fe30:	fa2f f283 	sxtb16	r2, r3
 801fe34:	f207 53f4 	addw	r3, r7, #1524	; 0x5f4
 801fe38:	601a      	str	r2, [r3, #0]
  return(result);
 801fe3a:	f207 53f4 	addw	r3, r7, #1524	; 0x5f4
 801fe3e:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801fe40:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 801fe44:	601a      	str	r2, [r3, #0]
  return result;
 801fe46:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 801fe4a:	681b      	ldr	r3, [r3, #0]
 801fe4c:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8
                res10 = __SMLAD(val3, val2, res10);
 801fe50:	f8d7 29b4 	ldr.w	r2, [r7, #2484]	; 0x9b4
 801fe54:	f8d7 19bc 	ldr.w	r1, [r7, #2492]	; 0x9bc
 801fe58:	f8d7 0a1c 	ldr.w	r0, [r7, #2588]	; 0xa1c
 801fe5c:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 801fe60:	601a      	str	r2, [r3, #0]
 801fe62:	f207 6314 	addw	r3, r7, #1556	; 0x614
 801fe66:	6019      	str	r1, [r3, #0]
 801fe68:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 801fe6c:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801fe6e:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 801fe72:	6819      	ldr	r1, [r3, #0]
 801fe74:	f207 6314 	addw	r3, r7, #1556	; 0x614
 801fe78:	681a      	ldr	r2, [r3, #0]
 801fe7a:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 801fe7e:	681b      	ldr	r3, [r3, #0]
 801fe80:	fb21 3202 	smlad	r2, r1, r2, r3
 801fe84:	f207 630c 	addw	r3, r7, #1548	; 0x60c
 801fe88:	601a      	str	r2, [r3, #0]
  return(result);
 801fe8a:	f207 630c 	addw	r3, r7, #1548	; 0x60c
 801fe8e:	681b      	ldr	r3, [r3, #0]
 801fe90:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
                res11 = __SMLAD(val3, val5, res11);
 801fe94:	f8d7 29b4 	ldr.w	r2, [r7, #2484]	; 0x9b4
 801fe98:	f8d7 19ac 	ldr.w	r1, [r7, #2476]	; 0x9ac
 801fe9c:	f8d7 0a18 	ldr.w	r0, [r7, #2584]	; 0xa18
 801fea0:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 801fea4:	601a      	str	r2, [r3, #0]
 801fea6:	f207 6324 	addw	r3, r7, #1572	; 0x624
 801feaa:	6019      	str	r1, [r3, #0]
 801feac:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 801feb0:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801feb2:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 801feb6:	6819      	ldr	r1, [r3, #0]
 801feb8:	f207 6324 	addw	r3, r7, #1572	; 0x624
 801febc:	681a      	ldr	r2, [r3, #0]
 801febe:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 801fec2:	681b      	ldr	r3, [r3, #0]
 801fec4:	fb21 3202 	smlad	r2, r1, r2, r3
 801fec8:	f207 631c 	addw	r3, r7, #1564	; 0x61c
 801fecc:	601a      	str	r2, [r3, #0]
  return(result);
 801fece:	f207 631c 	addw	r3, r7, #1564	; 0x61c
 801fed2:	681b      	ldr	r3, [r3, #0]
 801fed4:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18
                res10 = __SMLAD(val0, val1, res10);
 801fed8:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801fedc:	f8d7 19c0 	ldr.w	r1, [r7, #2496]	; 0x9c0
 801fee0:	f8d7 0a1c 	ldr.w	r0, [r7, #2588]	; 0xa1c
 801fee4:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 801fee8:	601a      	str	r2, [r3, #0]
 801feea:	f207 6334 	addw	r3, r7, #1588	; 0x634
 801feee:	6019      	str	r1, [r3, #0]
 801fef0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fef4:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801fef6:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 801fefa:	6819      	ldr	r1, [r3, #0]
 801fefc:	f207 6334 	addw	r3, r7, #1588	; 0x634
 801ff00:	681a      	ldr	r2, [r3, #0]
 801ff02:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ff06:	681b      	ldr	r3, [r3, #0]
 801ff08:	fb21 3202 	smlad	r2, r1, r2, r3
 801ff0c:	f207 632c 	addw	r3, r7, #1580	; 0x62c
 801ff10:	601a      	str	r2, [r3, #0]
  return(result);
 801ff12:	f207 632c 	addw	r3, r7, #1580	; 0x62c
 801ff16:	681b      	ldr	r3, [r3, #0]
 801ff18:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
 801ff1c:	f207 623c 	addw	r2, r7, #1596	; 0x63c
 801ff20:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 801ff24:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801ff26:	f207 633c 	addw	r3, r7, #1596	; 0x63c
 801ff2a:	681b      	ldr	r3, [r3, #0]
 801ff2c:	681b      	ldr	r3, [r3, #0]
 801ff2e:	681b      	ldr	r3, [r3, #0]
 801ff30:	461a      	mov	r2, r3
 801ff32:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801ff36:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801ff38:	f207 633c 	addw	r3, r7, #1596	; 0x63c
 801ff3c:	681b      	ldr	r3, [r3, #0]
 801ff3e:	681b      	ldr	r3, [r3, #0]
 801ff40:	1d1a      	adds	r2, r3, #4
 801ff42:	f207 633c 	addw	r3, r7, #1596	; 0x63c
 801ff46:	681b      	ldr	r3, [r3, #0]
 801ff48:	601a      	str	r2, [r3, #0]
    return (val);
 801ff4a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801ff4e:	681b      	ldr	r3, [r3, #0]
                val1 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 801ff50:	f8c7 39c0 	str.w	r3, [r7, #2496]	; 0x9c0
                res11 = __SMLAD(val0, val4, res11);
 801ff54:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801ff58:	f8d7 19b0 	ldr.w	r1, [r7, #2480]	; 0x9b0
 801ff5c:	f8d7 0a18 	ldr.w	r0, [r7, #2584]	; 0xa18
 801ff60:	f207 634c 	addw	r3, r7, #1612	; 0x64c
 801ff64:	601a      	str	r2, [r3, #0]
 801ff66:	f507 63c9 	add.w	r3, r7, #1608	; 0x648
 801ff6a:	6019      	str	r1, [r3, #0]
 801ff6c:	f207 6344 	addw	r3, r7, #1604	; 0x644
 801ff70:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801ff72:	f207 634c 	addw	r3, r7, #1612	; 0x64c
 801ff76:	6819      	ldr	r1, [r3, #0]
 801ff78:	f507 63c9 	add.w	r3, r7, #1608	; 0x648
 801ff7c:	681a      	ldr	r2, [r3, #0]
 801ff7e:	f207 6344 	addw	r3, r7, #1604	; 0x644
 801ff82:	681b      	ldr	r3, [r3, #0]
 801ff84:	fb21 3202 	smlad	r2, r1, r2, r3
 801ff88:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 801ff8c:	601a      	str	r2, [r3, #0]
  return(result);
 801ff8e:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 801ff92:	681b      	ldr	r3, [r3, #0]
 801ff94:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18

                val4 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 801ff98:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 801ff9c:	681a      	ldr	r2, [r3, #0]
 801ff9e:	f8d7 39ec 	ldr.w	r3, [r7, #2540]	; 0x9ec
 801ffa2:	441a      	add	r2, r3
 801ffa4:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 801ffa8:	601a      	str	r2, [r3, #0]
 801ffaa:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 801ffae:	681b      	ldr	r3, [r3, #0]
 801ffb0:	681b      	ldr	r3, [r3, #0]
 801ffb2:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801ffb4:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801ffb8:	601a      	str	r2, [r3, #0]
    return (val);
 801ffba:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801ffbe:	681b      	ldr	r3, [r3, #0]
 801ffc0:	f8c7 39b0 	str.w	r3, [r7, #2480]	; 0x9b0
                val2 = __SXTB16(val1);
 801ffc4:	f8d7 29c0 	ldr.w	r2, [r7, #2496]	; 0x9c0
 801ffc8:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 801ffcc:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801ffce:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 801ffd2:	681b      	ldr	r3, [r3, #0]
 801ffd4:	fa2f f283 	sxtb16	r2, r3
 801ffd8:	f207 6354 	addw	r3, r7, #1620	; 0x654
 801ffdc:	601a      	str	r2, [r3, #0]
  return(result);
 801ffde:	f207 6354 	addw	r3, r7, #1620	; 0x654
 801ffe2:	681b      	ldr	r3, [r3, #0]
 801ffe4:	f8c7 39bc 	str.w	r3, [r7, #2492]	; 0x9bc
 801ffe8:	f207 625c 	addw	r2, r7, #1628	; 0x65c
 801ffec:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801fff0:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801fff2:	f207 635c 	addw	r3, r7, #1628	; 0x65c
 801fff6:	681b      	ldr	r3, [r3, #0]
 801fff8:	681b      	ldr	r3, [r3, #0]
 801fffa:	681b      	ldr	r3, [r3, #0]
 801fffc:	461a      	mov	r2, r3
 801fffe:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8020002:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8020004:	f207 635c 	addw	r3, r7, #1628	; 0x65c
 8020008:	681b      	ldr	r3, [r3, #0]
 802000a:	681b      	ldr	r3, [r3, #0]
 802000c:	1d1a      	adds	r2, r3, #4
 802000e:	f207 635c 	addw	r3, r7, #1628	; 0x65c
 8020012:	681b      	ldr	r3, [r3, #0]
 8020014:	601a      	str	r2, [r3, #0]
    return (val);
 8020016:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 802001a:	681b      	ldr	r3, [r3, #0]
                val0 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 802001c:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8
                val3 = __SXTB16(val0);
 8020020:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 8020024:	f207 6364 	addw	r3, r7, #1636	; 0x664
 8020028:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 802002a:	f207 6364 	addw	r3, r7, #1636	; 0x664
 802002e:	681b      	ldr	r3, [r3, #0]
 8020030:	fa2f f283 	sxtb16	r2, r3
 8020034:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 8020038:	601a      	str	r2, [r3, #0]
  return(result);
 802003a:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 802003e:	681b      	ldr	r3, [r3, #0]
 8020040:	f8c7 39b4 	str.w	r3, [r7, #2484]	; 0x9b4
                val1 = __SXTB16_RORn(val1, 8);
 8020044:	f8d7 29c0 	ldr.w	r2, [r7, #2496]	; 0x9c0
 8020048:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 802004c:	601a      	str	r2, [r3, #0]
 802004e:	f207 627c 	addw	r2, r7, #1660	; 0x67c
 8020052:	2308      	movs	r3, #8
 8020054:	6013      	str	r3, [r2, #0]
 8020056:	f507 62cf 	add.w	r2, r7, #1656	; 0x678
 802005a:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 802005e:	681b      	ldr	r3, [r3, #0]
 8020060:	6013      	str	r3, [r2, #0]
 8020062:	f207 6274 	addw	r2, r7, #1652	; 0x674
 8020066:	f207 637c 	addw	r3, r7, #1660	; 0x67c
 802006a:	681b      	ldr	r3, [r3, #0]
 802006c:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 802006e:	f207 6274 	addw	r2, r7, #1652	; 0x674
 8020072:	f207 6374 	addw	r3, r7, #1652	; 0x674
 8020076:	681b      	ldr	r3, [r3, #0]
 8020078:	f003 031f 	and.w	r3, r3, #31
 802007c:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 802007e:	f207 6374 	addw	r3, r7, #1652	; 0x674
 8020082:	681b      	ldr	r3, [r3, #0]
 8020084:	2b00      	cmp	r3, #0
 8020086:	d103      	bne.n	8020090 <arm_nn_mat_mult_nt_t_s8+0x81a>
    return op1;
 8020088:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 802008c:	681a      	ldr	r2, [r3, #0]
 802008e:	e006      	b.n	802009e <arm_nn_mat_mult_nt_t_s8+0x828>
  return (op1 >> op2) | (op1 << (32U - op2));
 8020090:	f507 62cf 	add.w	r2, r7, #1656	; 0x678
 8020094:	f207 6374 	addw	r3, r7, #1652	; 0x674
 8020098:	6812      	ldr	r2, [r2, #0]
 802009a:	681b      	ldr	r3, [r3, #0]
 802009c:	41da      	rors	r2, r3
 802009e:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 80200a2:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80200a4:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 80200a8:	681b      	ldr	r3, [r3, #0]
 80200aa:	fa2f f283 	sxtb16	r2, r3
 80200ae:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 80200b2:	601a      	str	r2, [r3, #0]
  return(result);
 80200b4:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 80200b8:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 80200ba:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 80200be:	601a      	str	r2, [r3, #0]
  return result;
 80200c0:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 80200c4:	681b      	ldr	r3, [r3, #0]
 80200c6:	f8c7 39c0 	str.w	r3, [r7, #2496]	; 0x9c0
                val0 = __SXTB16_RORn(val0, 8);
 80200ca:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 80200ce:	f207 639c 	addw	r3, r7, #1692	; 0x69c
 80200d2:	601a      	str	r2, [r3, #0]
 80200d4:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 80200d8:	2308      	movs	r3, #8
 80200da:	6013      	str	r3, [r2, #0]
 80200dc:	f207 6294 	addw	r2, r7, #1684	; 0x694
 80200e0:	f207 639c 	addw	r3, r7, #1692	; 0x69c
 80200e4:	681b      	ldr	r3, [r3, #0]
 80200e6:	6013      	str	r3, [r2, #0]
 80200e8:	f507 62d2 	add.w	r2, r7, #1680	; 0x690
 80200ec:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 80200f0:	681b      	ldr	r3, [r3, #0]
 80200f2:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 80200f4:	f507 62d2 	add.w	r2, r7, #1680	; 0x690
 80200f8:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 80200fc:	681b      	ldr	r3, [r3, #0]
 80200fe:	f003 031f 	and.w	r3, r3, #31
 8020102:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8020104:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8020108:	681b      	ldr	r3, [r3, #0]
 802010a:	2b00      	cmp	r3, #0
 802010c:	d103      	bne.n	8020116 <arm_nn_mat_mult_nt_t_s8+0x8a0>
    return op1;
 802010e:	f207 6394 	addw	r3, r7, #1684	; 0x694
 8020112:	681a      	ldr	r2, [r3, #0]
 8020114:	e006      	b.n	8020124 <arm_nn_mat_mult_nt_t_s8+0x8ae>
  return (op1 >> op2) | (op1 << (32U - op2));
 8020116:	f207 6294 	addw	r2, r7, #1684	; 0x694
 802011a:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 802011e:	6812      	ldr	r2, [r2, #0]
 8020120:	681b      	ldr	r3, [r3, #0]
 8020122:	41da      	rors	r2, r3
 8020124:	f207 638c 	addw	r3, r7, #1676	; 0x68c
 8020128:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 802012a:	f207 638c 	addw	r3, r7, #1676	; 0x68c
 802012e:	681b      	ldr	r3, [r3, #0]
 8020130:	fa2f f283 	sxtb16	r2, r3
 8020134:	f507 63d1 	add.w	r3, r7, #1672	; 0x688
 8020138:	601a      	str	r2, [r3, #0]
  return(result);
 802013a:	f507 63d1 	add.w	r3, r7, #1672	; 0x688
 802013e:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 8020140:	f207 6384 	addw	r3, r7, #1668	; 0x684
 8020144:	601a      	str	r2, [r3, #0]
  return result;
 8020146:	f207 6384 	addw	r3, r7, #1668	; 0x684
 802014a:	681b      	ldr	r3, [r3, #0]
 802014c:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8

                // 4 x MAC res00, res01
                res00 = __SMLAD(val3, val2, res00);
 8020150:	f8d7 29b4 	ldr.w	r2, [r7, #2484]	; 0x9b4
 8020154:	f8d7 19bc 	ldr.w	r1, [r7, #2492]	; 0x9bc
 8020158:	f8d7 0a24 	ldr.w	r0, [r7, #2596]	; 0xa24
 802015c:	f207 63ac 	addw	r3, r7, #1708	; 0x6ac
 8020160:	601a      	str	r2, [r3, #0]
 8020162:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
 8020166:	6019      	str	r1, [r3, #0]
 8020168:	f207 63a4 	addw	r3, r7, #1700	; 0x6a4
 802016c:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 802016e:	f207 63ac 	addw	r3, r7, #1708	; 0x6ac
 8020172:	6819      	ldr	r1, [r3, #0]
 8020174:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
 8020178:	681a      	ldr	r2, [r3, #0]
 802017a:	f207 63a4 	addw	r3, r7, #1700	; 0x6a4
 802017e:	681b      	ldr	r3, [r3, #0]
 8020180:	fb21 3202 	smlad	r2, r1, r2, r3
 8020184:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 8020188:	601a      	str	r2, [r3, #0]
  return(result);
 802018a:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 802018e:	681b      	ldr	r3, [r3, #0]
 8020190:	f8c7 3a24 	str.w	r3, [r7, #2596]	; 0xa24
                val5 = __SXTB16(val4);
 8020194:	f8d7 29b0 	ldr.w	r2, [r7, #2480]	; 0x9b0
 8020198:	f207 63b4 	addw	r3, r7, #1716	; 0x6b4
 802019c:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 802019e:	f207 63b4 	addw	r3, r7, #1716	; 0x6b4
 80201a2:	681b      	ldr	r3, [r3, #0]
 80201a4:	fa2f f283 	sxtb16	r2, r3
 80201a8:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 80201ac:	601a      	str	r2, [r3, #0]
  return(result);
 80201ae:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 80201b2:	681b      	ldr	r3, [r3, #0]
 80201b4:	f8c7 39ac 	str.w	r3, [r7, #2476]	; 0x9ac
                res00 = __SMLAD(val0, val1, res00);
 80201b8:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 80201bc:	f8d7 19c0 	ldr.w	r1, [r7, #2496]	; 0x9c0
 80201c0:	f8d7 0a24 	ldr.w	r0, [r7, #2596]	; 0xa24
 80201c4:	f207 63c4 	addw	r3, r7, #1732	; 0x6c4
 80201c8:	601a      	str	r2, [r3, #0]
 80201ca:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 80201ce:	6019      	str	r1, [r3, #0]
 80201d0:	f207 63bc 	addw	r3, r7, #1724	; 0x6bc
 80201d4:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80201d6:	f207 63c4 	addw	r3, r7, #1732	; 0x6c4
 80201da:	6819      	ldr	r1, [r3, #0]
 80201dc:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 80201e0:	681a      	ldr	r2, [r3, #0]
 80201e2:	f207 63bc 	addw	r3, r7, #1724	; 0x6bc
 80201e6:	681b      	ldr	r3, [r3, #0]
 80201e8:	fb21 3202 	smlad	r2, r1, r2, r3
 80201ec:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 80201f0:	601a      	str	r2, [r3, #0]
  return(result);
 80201f2:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 80201f6:	681b      	ldr	r3, [r3, #0]
 80201f8:	f8c7 3a24 	str.w	r3, [r7, #2596]	; 0xa24
                val4 = __SXTB16_RORn(val4, 8);
 80201fc:	f8d7 29b0 	ldr.w	r2, [r7, #2480]	; 0x9b0
 8020200:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 8020204:	601a      	str	r2, [r3, #0]
 8020206:	f207 62dc 	addw	r2, r7, #1756	; 0x6dc
 802020a:	2308      	movs	r3, #8
 802020c:	6013      	str	r3, [r2, #0]
 802020e:	f507 62db 	add.w	r2, r7, #1752	; 0x6d8
 8020212:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 8020216:	681b      	ldr	r3, [r3, #0]
 8020218:	6013      	str	r3, [r2, #0]
 802021a:	f207 62d4 	addw	r2, r7, #1748	; 0x6d4
 802021e:	f207 63dc 	addw	r3, r7, #1756	; 0x6dc
 8020222:	681b      	ldr	r3, [r3, #0]
 8020224:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8020226:	f207 62d4 	addw	r2, r7, #1748	; 0x6d4
 802022a:	f207 63d4 	addw	r3, r7, #1748	; 0x6d4
 802022e:	681b      	ldr	r3, [r3, #0]
 8020230:	f003 031f 	and.w	r3, r3, #31
 8020234:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8020236:	f207 63d4 	addw	r3, r7, #1748	; 0x6d4
 802023a:	681b      	ldr	r3, [r3, #0]
 802023c:	2b00      	cmp	r3, #0
 802023e:	d103      	bne.n	8020248 <arm_nn_mat_mult_nt_t_s8+0x9d2>
    return op1;
 8020240:	f507 63db 	add.w	r3, r7, #1752	; 0x6d8
 8020244:	681a      	ldr	r2, [r3, #0]
 8020246:	e006      	b.n	8020256 <arm_nn_mat_mult_nt_t_s8+0x9e0>
  return (op1 >> op2) | (op1 << (32U - op2));
 8020248:	f507 62db 	add.w	r2, r7, #1752	; 0x6d8
 802024c:	f207 63d4 	addw	r3, r7, #1748	; 0x6d4
 8020250:	6812      	ldr	r2, [r2, #0]
 8020252:	681b      	ldr	r3, [r3, #0]
 8020254:	41da      	rors	r2, r3
 8020256:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
 802025a:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 802025c:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
 8020260:	681b      	ldr	r3, [r3, #0]
 8020262:	fa2f f283 	sxtb16	r2, r3
 8020266:	f207 63cc 	addw	r3, r7, #1740	; 0x6cc
 802026a:	601a      	str	r2, [r3, #0]
  return(result);
 802026c:	f207 63cc 	addw	r3, r7, #1740	; 0x6cc
 8020270:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 8020272:	f507 63d9 	add.w	r3, r7, #1736	; 0x6c8
 8020276:	601a      	str	r2, [r3, #0]
  return result;
 8020278:	f507 63d9 	add.w	r3, r7, #1736	; 0x6c8
 802027c:	681b      	ldr	r3, [r3, #0]
 802027e:	f8c7 39b0 	str.w	r3, [r7, #2480]	; 0x9b0
                res01 = __SMLAD(val3, val5, res01);
 8020282:	f8d7 29b4 	ldr.w	r2, [r7, #2484]	; 0x9b4
 8020286:	f8d7 19ac 	ldr.w	r1, [r7, #2476]	; 0x9ac
 802028a:	f8d7 0a20 	ldr.w	r0, [r7, #2592]	; 0xa20
 802028e:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8020292:	601a      	str	r2, [r3, #0]
 8020294:	f207 63ec 	addw	r3, r7, #1772	; 0x6ec
 8020298:	6019      	str	r1, [r3, #0]
 802029a:	f507 63dd 	add.w	r3, r7, #1768	; 0x6e8
 802029e:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80202a0:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 80202a4:	6819      	ldr	r1, [r3, #0]
 80202a6:	f207 63ec 	addw	r3, r7, #1772	; 0x6ec
 80202aa:	681a      	ldr	r2, [r3, #0]
 80202ac:	f507 63dd 	add.w	r3, r7, #1768	; 0x6e8
 80202b0:	681b      	ldr	r3, [r3, #0]
 80202b2:	fb21 3202 	smlad	r2, r1, r2, r3
 80202b6:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 80202ba:	601a      	str	r2, [r3, #0]
  return(result);
 80202bc:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 80202c0:	681b      	ldr	r3, [r3, #0]
 80202c2:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20
                res01 = __SMLAD(val0, val4, res01);
 80202c6:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 80202ca:	f8d7 19b0 	ldr.w	r1, [r7, #2480]	; 0x9b0
 80202ce:	f8d7 0a20 	ldr.w	r0, [r7, #2592]	; 0xa20
 80202d2:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
 80202d6:	601a      	str	r2, [r3, #0]
 80202d8:	f207 63fc 	addw	r3, r7, #1788	; 0x6fc
 80202dc:	6019      	str	r1, [r3, #0]
 80202de:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 80202e2:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80202e4:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
 80202e8:	6819      	ldr	r1, [r3, #0]
 80202ea:	f207 63fc 	addw	r3, r7, #1788	; 0x6fc
 80202ee:	681a      	ldr	r2, [r3, #0]
 80202f0:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 80202f4:	681b      	ldr	r3, [r3, #0]
 80202f6:	fb21 3202 	smlad	r2, r1, r2, r3
 80202fa:	f207 63f4 	addw	r3, r7, #1780	; 0x6f4
 80202fe:	601a      	str	r2, [r3, #0]
  return(result);
 8020300:	f207 63f4 	addw	r3, r7, #1780	; 0x6f4
 8020304:	681b      	ldr	r3, [r3, #0]
 8020306:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20

                // 4 x MAC res10, res11
                val0 = arm_nn_read_q7x4((const q7_t *)&lhs_ptr[off0]);
 802030a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 802030e:	681a      	ldr	r2, [r3, #0]
 8020310:	f8d7 39ec 	ldr.w	r3, [r7, #2540]	; 0x9ec
 8020314:	441a      	add	r2, r3
 8020316:	f207 7304 	addw	r3, r7, #1796	; 0x704
 802031a:	601a      	str	r2, [r3, #0]
 802031c:	f207 7304 	addw	r3, r7, #1796	; 0x704
 8020320:	681b      	ldr	r3, [r3, #0]
 8020322:	681b      	ldr	r3, [r3, #0]
 8020324:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 8020326:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 802032a:	601a      	str	r2, [r3, #0]
    return (val);
 802032c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8020330:	681b      	ldr	r3, [r3, #0]
 8020332:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8
                val3 = __SXTB16(val0);
 8020336:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 802033a:	f207 730c 	addw	r3, r7, #1804	; 0x70c
 802033e:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8020340:	f207 730c 	addw	r3, r7, #1804	; 0x70c
 8020344:	681b      	ldr	r3, [r3, #0]
 8020346:	fa2f f283 	sxtb16	r2, r3
 802034a:	f507 63e1 	add.w	r3, r7, #1800	; 0x708
 802034e:	601a      	str	r2, [r3, #0]
  return(result);
 8020350:	f507 63e1 	add.w	r3, r7, #1800	; 0x708
 8020354:	681b      	ldr	r3, [r3, #0]
 8020356:	f8c7 39b4 	str.w	r3, [r7, #2484]	; 0x9b4
                val0 = __SXTB16_RORn(val0, 8);
 802035a:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 802035e:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8020362:	601a      	str	r2, [r3, #0]
 8020364:	f207 7224 	addw	r2, r7, #1828	; 0x724
 8020368:	2308      	movs	r3, #8
 802036a:	6013      	str	r3, [r2, #0]
 802036c:	f507 62e4 	add.w	r2, r7, #1824	; 0x720
 8020370:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8020374:	681b      	ldr	r3, [r3, #0]
 8020376:	6013      	str	r3, [r2, #0]
 8020378:	f207 721c 	addw	r2, r7, #1820	; 0x71c
 802037c:	f207 7324 	addw	r3, r7, #1828	; 0x724
 8020380:	681b      	ldr	r3, [r3, #0]
 8020382:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8020384:	f207 721c 	addw	r2, r7, #1820	; 0x71c
 8020388:	f207 731c 	addw	r3, r7, #1820	; 0x71c
 802038c:	681b      	ldr	r3, [r3, #0]
 802038e:	f003 031f 	and.w	r3, r3, #31
 8020392:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8020394:	f207 731c 	addw	r3, r7, #1820	; 0x71c
 8020398:	681b      	ldr	r3, [r3, #0]
 802039a:	2b00      	cmp	r3, #0
 802039c:	d103      	bne.n	80203a6 <arm_nn_mat_mult_nt_t_s8+0xb30>
    return op1;
 802039e:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 80203a2:	681a      	ldr	r2, [r3, #0]
 80203a4:	e006      	b.n	80203b4 <arm_nn_mat_mult_nt_t_s8+0xb3e>
  return (op1 >> op2) | (op1 << (32U - op2));
 80203a6:	f507 62e4 	add.w	r2, r7, #1824	; 0x720
 80203aa:	f207 731c 	addw	r3, r7, #1820	; 0x71c
 80203ae:	6812      	ldr	r2, [r2, #0]
 80203b0:	681b      	ldr	r3, [r3, #0]
 80203b2:	41da      	rors	r2, r3
 80203b4:	f507 63e3 	add.w	r3, r7, #1816	; 0x718
 80203b8:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80203ba:	f507 63e3 	add.w	r3, r7, #1816	; 0x718
 80203be:	681b      	ldr	r3, [r3, #0]
 80203c0:	fa2f f283 	sxtb16	r2, r3
 80203c4:	f207 7314 	addw	r3, r7, #1812	; 0x714
 80203c8:	601a      	str	r2, [r3, #0]
  return(result);
 80203ca:	f207 7314 	addw	r3, r7, #1812	; 0x714
 80203ce:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 80203d0:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 80203d4:	601a      	str	r2, [r3, #0]
  return result;
 80203d6:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 80203da:	681b      	ldr	r3, [r3, #0]
 80203dc:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8
                res10 = __SMLAD(val3, val2, res10);
 80203e0:	f8d7 29b4 	ldr.w	r2, [r7, #2484]	; 0x9b4
 80203e4:	f8d7 19bc 	ldr.w	r1, [r7, #2492]	; 0x9bc
 80203e8:	f8d7 0a1c 	ldr.w	r0, [r7, #2588]	; 0xa1c
 80203ec:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 80203f0:	601a      	str	r2, [r3, #0]
 80203f2:	f207 7334 	addw	r3, r7, #1844	; 0x734
 80203f6:	6019      	str	r1, [r3, #0]
 80203f8:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 80203fc:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80203fe:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 8020402:	6819      	ldr	r1, [r3, #0]
 8020404:	f207 7334 	addw	r3, r7, #1844	; 0x734
 8020408:	681a      	ldr	r2, [r3, #0]
 802040a:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 802040e:	681b      	ldr	r3, [r3, #0]
 8020410:	fb21 3202 	smlad	r2, r1, r2, r3
 8020414:	f207 732c 	addw	r3, r7, #1836	; 0x72c
 8020418:	601a      	str	r2, [r3, #0]
  return(result);
 802041a:	f207 732c 	addw	r3, r7, #1836	; 0x72c
 802041e:	681b      	ldr	r3, [r3, #0]
 8020420:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
                res11 = __SMLAD(val3, val5, res11);
 8020424:	f8d7 29b4 	ldr.w	r2, [r7, #2484]	; 0x9b4
 8020428:	f8d7 19ac 	ldr.w	r1, [r7, #2476]	; 0x9ac
 802042c:	f8d7 0a18 	ldr.w	r0, [r7, #2584]	; 0xa18
 8020430:	f507 63e9 	add.w	r3, r7, #1864	; 0x748
 8020434:	601a      	str	r2, [r3, #0]
 8020436:	f207 7344 	addw	r3, r7, #1860	; 0x744
 802043a:	6019      	str	r1, [r3, #0]
 802043c:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 8020440:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8020442:	f507 63e9 	add.w	r3, r7, #1864	; 0x748
 8020446:	6819      	ldr	r1, [r3, #0]
 8020448:	f207 7344 	addw	r3, r7, #1860	; 0x744
 802044c:	681a      	ldr	r2, [r3, #0]
 802044e:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 8020452:	681b      	ldr	r3, [r3, #0]
 8020454:	fb21 3202 	smlad	r2, r1, r2, r3
 8020458:	f207 733c 	addw	r3, r7, #1852	; 0x73c
 802045c:	601a      	str	r2, [r3, #0]
  return(result);
 802045e:	f207 733c 	addw	r3, r7, #1852	; 0x73c
 8020462:	681b      	ldr	r3, [r3, #0]
 8020464:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18
                res10 = __SMLAD(val0, val1, res10);
 8020468:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 802046c:	f8d7 19c0 	ldr.w	r1, [r7, #2496]	; 0x9c0
 8020470:	f8d7 0a1c 	ldr.w	r0, [r7, #2588]	; 0xa1c
 8020474:	f507 63eb 	add.w	r3, r7, #1880	; 0x758
 8020478:	601a      	str	r2, [r3, #0]
 802047a:	f207 7354 	addw	r3, r7, #1876	; 0x754
 802047e:	6019      	str	r1, [r3, #0]
 8020480:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 8020484:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8020486:	f507 63eb 	add.w	r3, r7, #1880	; 0x758
 802048a:	6819      	ldr	r1, [r3, #0]
 802048c:	f207 7354 	addw	r3, r7, #1876	; 0x754
 8020490:	681a      	ldr	r2, [r3, #0]
 8020492:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 8020496:	681b      	ldr	r3, [r3, #0]
 8020498:	fb21 3202 	smlad	r2, r1, r2, r3
 802049c:	f207 734c 	addw	r3, r7, #1868	; 0x74c
 80204a0:	601a      	str	r2, [r3, #0]
  return(result);
 80204a2:	f207 734c 	addw	r3, r7, #1868	; 0x74c
 80204a6:	681b      	ldr	r3, [r3, #0]
 80204a8:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
 80204ac:	f207 725c 	addw	r2, r7, #1884	; 0x75c
 80204b0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80204b4:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 80204b6:	f207 735c 	addw	r3, r7, #1884	; 0x75c
 80204ba:	681b      	ldr	r3, [r3, #0]
 80204bc:	681b      	ldr	r3, [r3, #0]
 80204be:	681b      	ldr	r3, [r3, #0]
 80204c0:	461a      	mov	r2, r3
 80204c2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80204c6:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 80204c8:	f207 735c 	addw	r3, r7, #1884	; 0x75c
 80204cc:	681b      	ldr	r3, [r3, #0]
 80204ce:	681b      	ldr	r3, [r3, #0]
 80204d0:	1d1a      	adds	r2, r3, #4
 80204d2:	f207 735c 	addw	r3, r7, #1884	; 0x75c
 80204d6:	681b      	ldr	r3, [r3, #0]
 80204d8:	601a      	str	r2, [r3, #0]
    return (val);
 80204da:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80204de:	681b      	ldr	r3, [r3, #0]
                val1 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 80204e0:	f8c7 39c0 	str.w	r3, [r7, #2496]	; 0x9c0
                res11 = __SMLAD(val0, val4, res11);
 80204e4:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 80204e8:	f8d7 19b0 	ldr.w	r1, [r7, #2480]	; 0x9b0
 80204ec:	f8d7 0a18 	ldr.w	r0, [r7, #2584]	; 0xa18
 80204f0:	f207 736c 	addw	r3, r7, #1900	; 0x76c
 80204f4:	601a      	str	r2, [r3, #0]
 80204f6:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 80204fa:	6019      	str	r1, [r3, #0]
 80204fc:	f207 7364 	addw	r3, r7, #1892	; 0x764
 8020500:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8020502:	f207 736c 	addw	r3, r7, #1900	; 0x76c
 8020506:	6819      	ldr	r1, [r3, #0]
 8020508:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 802050c:	681a      	ldr	r2, [r3, #0]
 802050e:	f207 7364 	addw	r3, r7, #1892	; 0x764
 8020512:	681b      	ldr	r3, [r3, #0]
 8020514:	fb21 3202 	smlad	r2, r1, r2, r3
 8020518:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 802051c:	601a      	str	r2, [r3, #0]
  return(result);
 802051e:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 8020522:	681b      	ldr	r3, [r3, #0]
 8020524:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18

                val4 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 8020528:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 802052c:	681a      	ldr	r2, [r3, #0]
 802052e:	f8d7 39ec 	ldr.w	r3, [r7, #2540]	; 0x9ec
 8020532:	441a      	add	r2, r3
 8020534:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 8020538:	601a      	str	r2, [r3, #0]
 802053a:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 802053e:	681b      	ldr	r3, [r3, #0]
 8020540:	681b      	ldr	r3, [r3, #0]
 8020542:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 8020544:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8020548:	601a      	str	r2, [r3, #0]
    return (val);
 802054a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 802054e:	681b      	ldr	r3, [r3, #0]
 8020550:	f8c7 39b0 	str.w	r3, [r7, #2480]	; 0x9b0
                val2 = __SXTB16(val1);
 8020554:	f8d7 29c0 	ldr.w	r2, [r7, #2496]	; 0x9c0
 8020558:	f507 63ef 	add.w	r3, r7, #1912	; 0x778
 802055c:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 802055e:	f507 63ef 	add.w	r3, r7, #1912	; 0x778
 8020562:	681b      	ldr	r3, [r3, #0]
 8020564:	fa2f f283 	sxtb16	r2, r3
 8020568:	f207 7374 	addw	r3, r7, #1908	; 0x774
 802056c:	601a      	str	r2, [r3, #0]
  return(result);
 802056e:	f207 7374 	addw	r3, r7, #1908	; 0x774
 8020572:	681b      	ldr	r3, [r3, #0]
 8020574:	f8c7 39bc 	str.w	r3, [r7, #2492]	; 0x9bc
 8020578:	f207 727c 	addw	r2, r7, #1916	; 0x77c
 802057c:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8020580:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 8020582:	f207 737c 	addw	r3, r7, #1916	; 0x77c
 8020586:	681b      	ldr	r3, [r3, #0]
 8020588:	681b      	ldr	r3, [r3, #0]
 802058a:	681b      	ldr	r3, [r3, #0]
 802058c:	461a      	mov	r2, r3
 802058e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8020592:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8020594:	f207 737c 	addw	r3, r7, #1916	; 0x77c
 8020598:	681b      	ldr	r3, [r3, #0]
 802059a:	681b      	ldr	r3, [r3, #0]
 802059c:	1d1a      	adds	r2, r3, #4
 802059e:	f207 737c 	addw	r3, r7, #1916	; 0x77c
 80205a2:	681b      	ldr	r3, [r3, #0]
 80205a4:	601a      	str	r2, [r3, #0]
    return (val);
 80205a6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80205aa:	681b      	ldr	r3, [r3, #0]
                val0 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 80205ac:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8
                val3 = __SXTB16(val0);
 80205b0:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 80205b4:	f207 7384 	addw	r3, r7, #1924	; 0x784
 80205b8:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80205ba:	f207 7384 	addw	r3, r7, #1924	; 0x784
 80205be:	681b      	ldr	r3, [r3, #0]
 80205c0:	fa2f f283 	sxtb16	r2, r3
 80205c4:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 80205c8:	601a      	str	r2, [r3, #0]
  return(result);
 80205ca:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 80205ce:	681b      	ldr	r3, [r3, #0]
 80205d0:	f8c7 39b4 	str.w	r3, [r7, #2484]	; 0x9b4
                val1 = __SXTB16_RORn(val1, 8);
 80205d4:	f8d7 29c0 	ldr.w	r2, [r7, #2496]	; 0x9c0
 80205d8:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 80205dc:	601a      	str	r2, [r3, #0]
 80205de:	f207 729c 	addw	r2, r7, #1948	; 0x79c
 80205e2:	2308      	movs	r3, #8
 80205e4:	6013      	str	r3, [r2, #0]
 80205e6:	f507 62f3 	add.w	r2, r7, #1944	; 0x798
 80205ea:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 80205ee:	681b      	ldr	r3, [r3, #0]
 80205f0:	6013      	str	r3, [r2, #0]
 80205f2:	f207 7294 	addw	r2, r7, #1940	; 0x794
 80205f6:	f207 739c 	addw	r3, r7, #1948	; 0x79c
 80205fa:	681b      	ldr	r3, [r3, #0]
 80205fc:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 80205fe:	f207 7294 	addw	r2, r7, #1940	; 0x794
 8020602:	f207 7394 	addw	r3, r7, #1940	; 0x794
 8020606:	681b      	ldr	r3, [r3, #0]
 8020608:	f003 031f 	and.w	r3, r3, #31
 802060c:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 802060e:	f207 7394 	addw	r3, r7, #1940	; 0x794
 8020612:	681b      	ldr	r3, [r3, #0]
 8020614:	2b00      	cmp	r3, #0
 8020616:	d103      	bne.n	8020620 <arm_nn_mat_mult_nt_t_s8+0xdaa>
    return op1;
 8020618:	f507 63f3 	add.w	r3, r7, #1944	; 0x798
 802061c:	681a      	ldr	r2, [r3, #0]
 802061e:	e006      	b.n	802062e <arm_nn_mat_mult_nt_t_s8+0xdb8>
  return (op1 >> op2) | (op1 << (32U - op2));
 8020620:	f507 62f3 	add.w	r2, r7, #1944	; 0x798
 8020624:	f207 7394 	addw	r3, r7, #1940	; 0x794
 8020628:	6812      	ldr	r2, [r2, #0]
 802062a:	681b      	ldr	r3, [r3, #0]
 802062c:	41da      	rors	r2, r3
 802062e:	f507 63f2 	add.w	r3, r7, #1936	; 0x790
 8020632:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8020634:	f507 63f2 	add.w	r3, r7, #1936	; 0x790
 8020638:	681b      	ldr	r3, [r3, #0]
 802063a:	fa2f f283 	sxtb16	r2, r3
 802063e:	f207 738c 	addw	r3, r7, #1932	; 0x78c
 8020642:	601a      	str	r2, [r3, #0]
  return(result);
 8020644:	f207 738c 	addw	r3, r7, #1932	; 0x78c
 8020648:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 802064a:	f507 63f1 	add.w	r3, r7, #1928	; 0x788
 802064e:	601a      	str	r2, [r3, #0]
  return result;
 8020650:	f507 63f1 	add.w	r3, r7, #1928	; 0x788
 8020654:	681b      	ldr	r3, [r3, #0]
 8020656:	f8c7 39c0 	str.w	r3, [r7, #2496]	; 0x9c0
                val0 = __SXTB16_RORn(val0, 8);
 802065a:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 802065e:	f207 73bc 	addw	r3, r7, #1980	; 0x7bc
 8020662:	601a      	str	r2, [r3, #0]
 8020664:	f507 62f7 	add.w	r2, r7, #1976	; 0x7b8
 8020668:	2308      	movs	r3, #8
 802066a:	6013      	str	r3, [r2, #0]
 802066c:	f207 72b4 	addw	r2, r7, #1972	; 0x7b4
 8020670:	f207 73bc 	addw	r3, r7, #1980	; 0x7bc
 8020674:	681b      	ldr	r3, [r3, #0]
 8020676:	6013      	str	r3, [r2, #0]
 8020678:	f507 62f6 	add.w	r2, r7, #1968	; 0x7b0
 802067c:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 8020680:	681b      	ldr	r3, [r3, #0]
 8020682:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8020684:	f507 62f6 	add.w	r2, r7, #1968	; 0x7b0
 8020688:	f507 63f6 	add.w	r3, r7, #1968	; 0x7b0
 802068c:	681b      	ldr	r3, [r3, #0]
 802068e:	f003 031f 	and.w	r3, r3, #31
 8020692:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8020694:	f507 63f6 	add.w	r3, r7, #1968	; 0x7b0
 8020698:	681b      	ldr	r3, [r3, #0]
 802069a:	2b00      	cmp	r3, #0
 802069c:	d103      	bne.n	80206a6 <arm_nn_mat_mult_nt_t_s8+0xe30>
    return op1;
 802069e:	f207 73b4 	addw	r3, r7, #1972	; 0x7b4
 80206a2:	681a      	ldr	r2, [r3, #0]
 80206a4:	e006      	b.n	80206b4 <arm_nn_mat_mult_nt_t_s8+0xe3e>
  return (op1 >> op2) | (op1 << (32U - op2));
 80206a6:	f207 72b4 	addw	r2, r7, #1972	; 0x7b4
 80206aa:	f507 63f6 	add.w	r3, r7, #1968	; 0x7b0
 80206ae:	6812      	ldr	r2, [r2, #0]
 80206b0:	681b      	ldr	r3, [r3, #0]
 80206b2:	41da      	rors	r2, r3
 80206b4:	f207 73ac 	addw	r3, r7, #1964	; 0x7ac
 80206b8:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80206ba:	f207 73ac 	addw	r3, r7, #1964	; 0x7ac
 80206be:	681b      	ldr	r3, [r3, #0]
 80206c0:	fa2f f283 	sxtb16	r2, r3
 80206c4:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 80206c8:	601a      	str	r2, [r3, #0]
  return(result);
 80206ca:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 80206ce:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 80206d0:	f207 73a4 	addw	r3, r7, #1956	; 0x7a4
 80206d4:	601a      	str	r2, [r3, #0]
  return result;
 80206d6:	f207 73a4 	addw	r3, r7, #1956	; 0x7a4
 80206da:	681b      	ldr	r3, [r3, #0]
 80206dc:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8

                // 4 x MAC res00, res01
                res00 = __SMLAD(val3, val2, res00);
 80206e0:	f8d7 29b4 	ldr.w	r2, [r7, #2484]	; 0x9b4
 80206e4:	f8d7 19bc 	ldr.w	r1, [r7, #2492]	; 0x9bc
 80206e8:	f8d7 0a24 	ldr.w	r0, [r7, #2596]	; 0xa24
 80206ec:	f207 73cc 	addw	r3, r7, #1996	; 0x7cc
 80206f0:	601a      	str	r2, [r3, #0]
 80206f2:	f507 63f9 	add.w	r3, r7, #1992	; 0x7c8
 80206f6:	6019      	str	r1, [r3, #0]
 80206f8:	f207 73c4 	addw	r3, r7, #1988	; 0x7c4
 80206fc:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80206fe:	f207 73cc 	addw	r3, r7, #1996	; 0x7cc
 8020702:	6819      	ldr	r1, [r3, #0]
 8020704:	f507 63f9 	add.w	r3, r7, #1992	; 0x7c8
 8020708:	681a      	ldr	r2, [r3, #0]
 802070a:	f207 73c4 	addw	r3, r7, #1988	; 0x7c4
 802070e:	681b      	ldr	r3, [r3, #0]
 8020710:	fb21 3202 	smlad	r2, r1, r2, r3
 8020714:	f507 63f8 	add.w	r3, r7, #1984	; 0x7c0
 8020718:	601a      	str	r2, [r3, #0]
  return(result);
 802071a:	f507 63f8 	add.w	r3, r7, #1984	; 0x7c0
 802071e:	681b      	ldr	r3, [r3, #0]
 8020720:	f8c7 3a24 	str.w	r3, [r7, #2596]	; 0xa24
                val5 = __SXTB16(val4);
 8020724:	f8d7 29b0 	ldr.w	r2, [r7, #2480]	; 0x9b0
 8020728:	f207 73d4 	addw	r3, r7, #2004	; 0x7d4
 802072c:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 802072e:	f207 73d4 	addw	r3, r7, #2004	; 0x7d4
 8020732:	681b      	ldr	r3, [r3, #0]
 8020734:	fa2f f283 	sxtb16	r2, r3
 8020738:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 802073c:	601a      	str	r2, [r3, #0]
  return(result);
 802073e:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 8020742:	681b      	ldr	r3, [r3, #0]
 8020744:	f8c7 39ac 	str.w	r3, [r7, #2476]	; 0x9ac
                res00 = __SMLAD(val0, val1, res00);
 8020748:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 802074c:	f8d7 19c0 	ldr.w	r1, [r7, #2496]	; 0x9c0
 8020750:	f8d7 0a24 	ldr.w	r0, [r7, #2596]	; 0xa24
 8020754:	f207 73e4 	addw	r3, r7, #2020	; 0x7e4
 8020758:	601a      	str	r2, [r3, #0]
 802075a:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 802075e:	6019      	str	r1, [r3, #0]
 8020760:	f207 73dc 	addw	r3, r7, #2012	; 0x7dc
 8020764:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8020766:	f207 73e4 	addw	r3, r7, #2020	; 0x7e4
 802076a:	6819      	ldr	r1, [r3, #0]
 802076c:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 8020770:	681a      	ldr	r2, [r3, #0]
 8020772:	f207 73dc 	addw	r3, r7, #2012	; 0x7dc
 8020776:	681b      	ldr	r3, [r3, #0]
 8020778:	fb21 3202 	smlad	r2, r1, r2, r3
 802077c:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 8020780:	601a      	str	r2, [r3, #0]
  return(result);
 8020782:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 8020786:	681b      	ldr	r3, [r3, #0]
 8020788:	f8c7 3a24 	str.w	r3, [r7, #2596]	; 0xa24
                val4 = __SXTB16_RORn(val4, 8);
 802078c:	f8d7 29b0 	ldr.w	r2, [r7, #2480]	; 0x9b0
 8020790:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 8020794:	601a      	str	r2, [r3, #0]
 8020796:	f207 72fc 	addw	r2, r7, #2044	; 0x7fc
 802079a:	2308      	movs	r3, #8
 802079c:	6013      	str	r3, [r2, #0]
 802079e:	f507 62ff 	add.w	r2, r7, #2040	; 0x7f8
 80207a2:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 80207a6:	681b      	ldr	r3, [r3, #0]
 80207a8:	6013      	str	r3, [r2, #0]
 80207aa:	f207 72f4 	addw	r2, r7, #2036	; 0x7f4
 80207ae:	f207 73fc 	addw	r3, r7, #2044	; 0x7fc
 80207b2:	681b      	ldr	r3, [r3, #0]
 80207b4:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 80207b6:	f207 72f4 	addw	r2, r7, #2036	; 0x7f4
 80207ba:	f207 73f4 	addw	r3, r7, #2036	; 0x7f4
 80207be:	681b      	ldr	r3, [r3, #0]
 80207c0:	f003 031f 	and.w	r3, r3, #31
 80207c4:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 80207c6:	f207 73f4 	addw	r3, r7, #2036	; 0x7f4
 80207ca:	681b      	ldr	r3, [r3, #0]
 80207cc:	2b00      	cmp	r3, #0
 80207ce:	d103      	bne.n	80207d8 <arm_nn_mat_mult_nt_t_s8+0xf62>
    return op1;
 80207d0:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 80207d4:	681a      	ldr	r2, [r3, #0]
 80207d6:	e006      	b.n	80207e6 <arm_nn_mat_mult_nt_t_s8+0xf70>
  return (op1 >> op2) | (op1 << (32U - op2));
 80207d8:	f507 62ff 	add.w	r2, r7, #2040	; 0x7f8
 80207dc:	f207 73f4 	addw	r3, r7, #2036	; 0x7f4
 80207e0:	6812      	ldr	r2, [r2, #0]
 80207e2:	681b      	ldr	r3, [r3, #0]
 80207e4:	41da      	rors	r2, r3
 80207e6:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 80207ea:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80207ec:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 80207f0:	681b      	ldr	r3, [r3, #0]
 80207f2:	fa2f f283 	sxtb16	r2, r3
 80207f6:	f207 73ec 	addw	r3, r7, #2028	; 0x7ec
 80207fa:	601a      	str	r2, [r3, #0]
  return(result);
 80207fc:	f207 73ec 	addw	r3, r7, #2028	; 0x7ec
 8020800:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 8020802:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 8020806:	601a      	str	r2, [r3, #0]
  return result;
 8020808:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 802080c:	681b      	ldr	r3, [r3, #0]
 802080e:	f8c7 39b0 	str.w	r3, [r7, #2480]	; 0x9b0
                res01 = __SMLAD(val3, val5, res01);
 8020812:	f8d7 29b4 	ldr.w	r2, [r7, #2484]	; 0x9b4
 8020816:	f8d7 19ac 	ldr.w	r1, [r7, #2476]	; 0x9ac
 802081a:	f8d7 0a20 	ldr.w	r0, [r7, #2592]	; 0xa20
 802081e:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8020822:	601a      	str	r2, [r3, #0]
 8020824:	f607 030c 	addw	r3, r7, #2060	; 0x80c
 8020828:	6019      	str	r1, [r3, #0]
 802082a:	f607 0308 	addw	r3, r7, #2056	; 0x808
 802082e:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8020830:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8020834:	6819      	ldr	r1, [r3, #0]
 8020836:	f607 030c 	addw	r3, r7, #2060	; 0x80c
 802083a:	681a      	ldr	r2, [r3, #0]
 802083c:	f607 0308 	addw	r3, r7, #2056	; 0x808
 8020840:	681b      	ldr	r3, [r3, #0]
 8020842:	fb21 3202 	smlad	r2, r1, r2, r3
 8020846:	f607 0304 	addw	r3, r7, #2052	; 0x804
 802084a:	601a      	str	r2, [r3, #0]
  return(result);
 802084c:	f607 0304 	addw	r3, r7, #2052	; 0x804
 8020850:	681b      	ldr	r3, [r3, #0]
 8020852:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20
                res01 = __SMLAD(val0, val4, res01);
 8020856:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 802085a:	f8d7 19b0 	ldr.w	r1, [r7, #2480]	; 0x9b0
 802085e:	f8d7 0a20 	ldr.w	r0, [r7, #2592]	; 0xa20
 8020862:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 8020866:	601a      	str	r2, [r3, #0]
 8020868:	f607 031c 	addw	r3, r7, #2076	; 0x81c
 802086c:	6019      	str	r1, [r3, #0]
 802086e:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8020872:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8020874:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 8020878:	6819      	ldr	r1, [r3, #0]
 802087a:	f607 031c 	addw	r3, r7, #2076	; 0x81c
 802087e:	681a      	ldr	r2, [r3, #0]
 8020880:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8020884:	681b      	ldr	r3, [r3, #0]
 8020886:	fb21 3202 	smlad	r2, r1, r2, r3
 802088a:	f607 0314 	addw	r3, r7, #2068	; 0x814
 802088e:	601a      	str	r2, [r3, #0]
  return(result);
 8020890:	f607 0314 	addw	r3, r7, #2068	; 0x814
 8020894:	681b      	ldr	r3, [r3, #0]
 8020896:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20

                // 4 x MAC res10, res11
                val0 = arm_nn_read_q7x4((const q7_t *)&lhs_ptr[off0]);
 802089a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 802089e:	681a      	ldr	r2, [r3, #0]
 80208a0:	f8d7 39ec 	ldr.w	r3, [r7, #2540]	; 0x9ec
 80208a4:	441a      	add	r2, r3
 80208a6:	f607 0324 	addw	r3, r7, #2084	; 0x824
 80208aa:	601a      	str	r2, [r3, #0]
 80208ac:	f607 0324 	addw	r3, r7, #2084	; 0x824
 80208b0:	681b      	ldr	r3, [r3, #0]
 80208b2:	681b      	ldr	r3, [r3, #0]
 80208b4:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 80208b6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80208ba:	601a      	str	r2, [r3, #0]
    return (val);
 80208bc:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80208c0:	681b      	ldr	r3, [r3, #0]
 80208c2:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8
                val3 = __SXTB16(val0);
 80208c6:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 80208ca:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 80208ce:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80208d0:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 80208d4:	681b      	ldr	r3, [r3, #0]
 80208d6:	fa2f f283 	sxtb16	r2, r3
 80208da:	f607 0328 	addw	r3, r7, #2088	; 0x828
 80208de:	601a      	str	r2, [r3, #0]
  return(result);
 80208e0:	f607 0328 	addw	r3, r7, #2088	; 0x828
 80208e4:	681b      	ldr	r3, [r3, #0]
 80208e6:	f8c7 39b4 	str.w	r3, [r7, #2484]	; 0x9b4
                val0 = __SXTB16_RORn(val0, 8);
 80208ea:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 80208ee:	f607 0348 	addw	r3, r7, #2120	; 0x848
 80208f2:	601a      	str	r2, [r3, #0]
 80208f4:	f607 0244 	addw	r2, r7, #2116	; 0x844
 80208f8:	2308      	movs	r3, #8
 80208fa:	6013      	str	r3, [r2, #0]
 80208fc:	f507 6204 	add.w	r2, r7, #2112	; 0x840
 8020900:	f607 0348 	addw	r3, r7, #2120	; 0x848
 8020904:	681b      	ldr	r3, [r3, #0]
 8020906:	6013      	str	r3, [r2, #0]
 8020908:	f607 023c 	addw	r2, r7, #2108	; 0x83c
 802090c:	f607 0344 	addw	r3, r7, #2116	; 0x844
 8020910:	681b      	ldr	r3, [r3, #0]
 8020912:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8020914:	f607 023c 	addw	r2, r7, #2108	; 0x83c
 8020918:	f607 033c 	addw	r3, r7, #2108	; 0x83c
 802091c:	681b      	ldr	r3, [r3, #0]
 802091e:	f003 031f 	and.w	r3, r3, #31
 8020922:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8020924:	f607 033c 	addw	r3, r7, #2108	; 0x83c
 8020928:	681b      	ldr	r3, [r3, #0]
 802092a:	2b00      	cmp	r3, #0
 802092c:	d103      	bne.n	8020936 <arm_nn_mat_mult_nt_t_s8+0x10c0>
    return op1;
 802092e:	f507 6304 	add.w	r3, r7, #2112	; 0x840
 8020932:	681a      	ldr	r2, [r3, #0]
 8020934:	e006      	b.n	8020944 <arm_nn_mat_mult_nt_t_s8+0x10ce>
  return (op1 >> op2) | (op1 << (32U - op2));
 8020936:	f507 6204 	add.w	r2, r7, #2112	; 0x840
 802093a:	f607 033c 	addw	r3, r7, #2108	; 0x83c
 802093e:	6812      	ldr	r2, [r2, #0]
 8020940:	681b      	ldr	r3, [r3, #0]
 8020942:	41da      	rors	r2, r3
 8020944:	f607 0338 	addw	r3, r7, #2104	; 0x838
 8020948:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 802094a:	f607 0338 	addw	r3, r7, #2104	; 0x838
 802094e:	681b      	ldr	r3, [r3, #0]
 8020950:	fa2f f283 	sxtb16	r2, r3
 8020954:	f607 0334 	addw	r3, r7, #2100	; 0x834
 8020958:	601a      	str	r2, [r3, #0]
  return(result);
 802095a:	f607 0334 	addw	r3, r7, #2100	; 0x834
 802095e:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 8020960:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 8020964:	601a      	str	r2, [r3, #0]
  return result;
 8020966:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 802096a:	681b      	ldr	r3, [r3, #0]
 802096c:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8
                res10 = __SMLAD(val3, val2, res10);
 8020970:	f8d7 29b4 	ldr.w	r2, [r7, #2484]	; 0x9b4
 8020974:	f8d7 19bc 	ldr.w	r1, [r7, #2492]	; 0x9bc
 8020978:	f8d7 0a1c 	ldr.w	r0, [r7, #2588]	; 0xa1c
 802097c:	f607 0358 	addw	r3, r7, #2136	; 0x858
 8020980:	601a      	str	r2, [r3, #0]
 8020982:	f607 0354 	addw	r3, r7, #2132	; 0x854
 8020986:	6019      	str	r1, [r3, #0]
 8020988:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 802098c:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 802098e:	f607 0358 	addw	r3, r7, #2136	; 0x858
 8020992:	6819      	ldr	r1, [r3, #0]
 8020994:	f607 0354 	addw	r3, r7, #2132	; 0x854
 8020998:	681a      	ldr	r2, [r3, #0]
 802099a:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 802099e:	681b      	ldr	r3, [r3, #0]
 80209a0:	fb21 3202 	smlad	r2, r1, r2, r3
 80209a4:	f607 034c 	addw	r3, r7, #2124	; 0x84c
 80209a8:	601a      	str	r2, [r3, #0]
  return(result);
 80209aa:	f607 034c 	addw	r3, r7, #2124	; 0x84c
 80209ae:	681b      	ldr	r3, [r3, #0]
 80209b0:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
                res11 = __SMLAD(val3, val5, res11);
 80209b4:	f8d7 29b4 	ldr.w	r2, [r7, #2484]	; 0x9b4
 80209b8:	f8d7 19ac 	ldr.w	r1, [r7, #2476]	; 0x9ac
 80209bc:	f8d7 0a18 	ldr.w	r0, [r7, #2584]	; 0xa18
 80209c0:	f607 0368 	addw	r3, r7, #2152	; 0x868
 80209c4:	601a      	str	r2, [r3, #0]
 80209c6:	f607 0364 	addw	r3, r7, #2148	; 0x864
 80209ca:	6019      	str	r1, [r3, #0]
 80209cc:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 80209d0:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80209d2:	f607 0368 	addw	r3, r7, #2152	; 0x868
 80209d6:	6819      	ldr	r1, [r3, #0]
 80209d8:	f607 0364 	addw	r3, r7, #2148	; 0x864
 80209dc:	681a      	ldr	r2, [r3, #0]
 80209de:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 80209e2:	681b      	ldr	r3, [r3, #0]
 80209e4:	fb21 3202 	smlad	r2, r1, r2, r3
 80209e8:	f607 035c 	addw	r3, r7, #2140	; 0x85c
 80209ec:	601a      	str	r2, [r3, #0]
  return(result);
 80209ee:	f607 035c 	addw	r3, r7, #2140	; 0x85c
 80209f2:	681b      	ldr	r3, [r3, #0]
 80209f4:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18
                res10 = __SMLAD(val0, val1, res10);
 80209f8:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 80209fc:	f8d7 19c0 	ldr.w	r1, [r7, #2496]	; 0x9c0
 8020a00:	f8d7 0a1c 	ldr.w	r0, [r7, #2588]	; 0xa1c
 8020a04:	f607 0378 	addw	r3, r7, #2168	; 0x878
 8020a08:	601a      	str	r2, [r3, #0]
 8020a0a:	f607 0374 	addw	r3, r7, #2164	; 0x874
 8020a0e:	6019      	str	r1, [r3, #0]
 8020a10:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 8020a14:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8020a16:	f607 0378 	addw	r3, r7, #2168	; 0x878
 8020a1a:	6819      	ldr	r1, [r3, #0]
 8020a1c:	f607 0374 	addw	r3, r7, #2164	; 0x874
 8020a20:	681a      	ldr	r2, [r3, #0]
 8020a22:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 8020a26:	681b      	ldr	r3, [r3, #0]
 8020a28:	fb21 3202 	smlad	r2, r1, r2, r3
 8020a2c:	f607 036c 	addw	r3, r7, #2156	; 0x86c
 8020a30:	601a      	str	r2, [r3, #0]
  return(result);
 8020a32:	f607 036c 	addw	r3, r7, #2156	; 0x86c
 8020a36:	681b      	ldr	r3, [r3, #0]
 8020a38:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
 8020a3c:	f607 027c 	addw	r2, r7, #2172	; 0x87c
 8020a40:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8020a44:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 8020a46:	f607 037c 	addw	r3, r7, #2172	; 0x87c
 8020a4a:	681b      	ldr	r3, [r3, #0]
 8020a4c:	681b      	ldr	r3, [r3, #0]
 8020a4e:	681b      	ldr	r3, [r3, #0]
 8020a50:	461a      	mov	r2, r3
 8020a52:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8020a56:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8020a58:	f607 037c 	addw	r3, r7, #2172	; 0x87c
 8020a5c:	681b      	ldr	r3, [r3, #0]
 8020a5e:	681b      	ldr	r3, [r3, #0]
 8020a60:	1d1a      	adds	r2, r3, #4
 8020a62:	f607 037c 	addw	r3, r7, #2172	; 0x87c
 8020a66:	681b      	ldr	r3, [r3, #0]
 8020a68:	601a      	str	r2, [r3, #0]
    return (val);
 8020a6a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8020a6e:	681b      	ldr	r3, [r3, #0]
                val1 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 8020a70:	f8c7 39c0 	str.w	r3, [r7, #2496]	; 0x9c0
                res11 = __SMLAD(val0, val4, res11);
 8020a74:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 8020a78:	f8d7 19b0 	ldr.w	r1, [r7, #2480]	; 0x9b0
 8020a7c:	f8d7 0a18 	ldr.w	r0, [r7, #2584]	; 0xa18
 8020a80:	f607 038c 	addw	r3, r7, #2188	; 0x88c
 8020a84:	601a      	str	r2, [r3, #0]
 8020a86:	f607 0388 	addw	r3, r7, #2184	; 0x888
 8020a8a:	6019      	str	r1, [r3, #0]
 8020a8c:	f607 0384 	addw	r3, r7, #2180	; 0x884
 8020a90:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8020a92:	f607 038c 	addw	r3, r7, #2188	; 0x88c
 8020a96:	6819      	ldr	r1, [r3, #0]
 8020a98:	f607 0388 	addw	r3, r7, #2184	; 0x888
 8020a9c:	681a      	ldr	r2, [r3, #0]
 8020a9e:	f607 0384 	addw	r3, r7, #2180	; 0x884
 8020aa2:	681b      	ldr	r3, [r3, #0]
 8020aa4:	fb21 3202 	smlad	r2, r1, r2, r3
 8020aa8:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8020aac:	601a      	str	r2, [r3, #0]
  return(result);
 8020aae:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8020ab2:	681b      	ldr	r3, [r3, #0]
 8020ab4:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18

                val4 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 8020ab8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8020abc:	681a      	ldr	r2, [r3, #0]
 8020abe:	f8d7 39ec 	ldr.w	r3, [r7, #2540]	; 0x9ec
 8020ac2:	441a      	add	r2, r3
 8020ac4:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 8020ac8:	601a      	str	r2, [r3, #0]
 8020aca:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 8020ace:	681b      	ldr	r3, [r3, #0]
 8020ad0:	681b      	ldr	r3, [r3, #0]
 8020ad2:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 8020ad4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8020ad8:	601a      	str	r2, [r3, #0]
    return (val);
 8020ada:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8020ade:	681b      	ldr	r3, [r3, #0]
 8020ae0:	f8c7 39b0 	str.w	r3, [r7, #2480]	; 0x9b0
                val2 = __SXTB16(val1);
 8020ae4:	f8d7 29c0 	ldr.w	r2, [r7, #2496]	; 0x9c0
 8020ae8:	f607 0398 	addw	r3, r7, #2200	; 0x898
 8020aec:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8020aee:	f607 0398 	addw	r3, r7, #2200	; 0x898
 8020af2:	681b      	ldr	r3, [r3, #0]
 8020af4:	fa2f f283 	sxtb16	r2, r3
 8020af8:	f607 0394 	addw	r3, r7, #2196	; 0x894
 8020afc:	601a      	str	r2, [r3, #0]
  return(result);
 8020afe:	f607 0394 	addw	r3, r7, #2196	; 0x894
 8020b02:	681b      	ldr	r3, [r3, #0]
 8020b04:	f8c7 39bc 	str.w	r3, [r7, #2492]	; 0x9bc
 8020b08:	f607 029c 	addw	r2, r7, #2204	; 0x89c
 8020b0c:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8020b10:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 8020b12:	f607 039c 	addw	r3, r7, #2204	; 0x89c
 8020b16:	681b      	ldr	r3, [r3, #0]
 8020b18:	681b      	ldr	r3, [r3, #0]
 8020b1a:	681b      	ldr	r3, [r3, #0]
 8020b1c:	461a      	mov	r2, r3
 8020b1e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8020b22:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8020b24:	f607 039c 	addw	r3, r7, #2204	; 0x89c
 8020b28:	681b      	ldr	r3, [r3, #0]
 8020b2a:	681b      	ldr	r3, [r3, #0]
 8020b2c:	1d1a      	adds	r2, r3, #4
 8020b2e:	f607 039c 	addw	r3, r7, #2204	; 0x89c
 8020b32:	681b      	ldr	r3, [r3, #0]
 8020b34:	601a      	str	r2, [r3, #0]
    return (val);
 8020b36:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8020b3a:	681b      	ldr	r3, [r3, #0]
                val0 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 8020b3c:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8
                val3 = __SXTB16(val0);
 8020b40:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 8020b44:	f607 03a4 	addw	r3, r7, #2212	; 0x8a4
 8020b48:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8020b4a:	f607 03a4 	addw	r3, r7, #2212	; 0x8a4
 8020b4e:	681b      	ldr	r3, [r3, #0]
 8020b50:	fa2f f283 	sxtb16	r2, r3
 8020b54:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 8020b58:	601a      	str	r2, [r3, #0]
  return(result);
 8020b5a:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 8020b5e:	681b      	ldr	r3, [r3, #0]
 8020b60:	f8c7 39b4 	str.w	r3, [r7, #2484]	; 0x9b4
                val1 = __SXTB16_RORn(val1, 8);
 8020b64:	f8d7 29c0 	ldr.w	r2, [r7, #2496]	; 0x9c0
 8020b68:	f507 630c 	add.w	r3, r7, #2240	; 0x8c0
 8020b6c:	601a      	str	r2, [r3, #0]
 8020b6e:	f607 02bc 	addw	r2, r7, #2236	; 0x8bc
 8020b72:	2308      	movs	r3, #8
 8020b74:	6013      	str	r3, [r2, #0]
 8020b76:	f607 02b8 	addw	r2, r7, #2232	; 0x8b8
 8020b7a:	f507 630c 	add.w	r3, r7, #2240	; 0x8c0
 8020b7e:	681b      	ldr	r3, [r3, #0]
 8020b80:	6013      	str	r3, [r2, #0]
 8020b82:	f607 02b4 	addw	r2, r7, #2228	; 0x8b4
 8020b86:	f607 03bc 	addw	r3, r7, #2236	; 0x8bc
 8020b8a:	681b      	ldr	r3, [r3, #0]
 8020b8c:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8020b8e:	f607 02b4 	addw	r2, r7, #2228	; 0x8b4
 8020b92:	f607 03b4 	addw	r3, r7, #2228	; 0x8b4
 8020b96:	681b      	ldr	r3, [r3, #0]
 8020b98:	f003 031f 	and.w	r3, r3, #31
 8020b9c:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8020b9e:	f607 03b4 	addw	r3, r7, #2228	; 0x8b4
 8020ba2:	681b      	ldr	r3, [r3, #0]
 8020ba4:	2b00      	cmp	r3, #0
 8020ba6:	d103      	bne.n	8020bb0 <arm_nn_mat_mult_nt_t_s8+0x133a>
    return op1;
 8020ba8:	f607 03b8 	addw	r3, r7, #2232	; 0x8b8
 8020bac:	681a      	ldr	r2, [r3, #0]
 8020bae:	e006      	b.n	8020bbe <arm_nn_mat_mult_nt_t_s8+0x1348>
  return (op1 >> op2) | (op1 << (32U - op2));
 8020bb0:	f607 02b8 	addw	r2, r7, #2232	; 0x8b8
 8020bb4:	f607 03b4 	addw	r3, r7, #2228	; 0x8b4
 8020bb8:	6812      	ldr	r2, [r2, #0]
 8020bba:	681b      	ldr	r3, [r3, #0]
 8020bbc:	41da      	rors	r2, r3
 8020bbe:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8020bc2:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8020bc4:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8020bc8:	681b      	ldr	r3, [r3, #0]
 8020bca:	fa2f f283 	sxtb16	r2, r3
 8020bce:	f607 03ac 	addw	r3, r7, #2220	; 0x8ac
 8020bd2:	601a      	str	r2, [r3, #0]
  return(result);
 8020bd4:	f607 03ac 	addw	r3, r7, #2220	; 0x8ac
 8020bd8:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 8020bda:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 8020bde:	601a      	str	r2, [r3, #0]
  return result;
 8020be0:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 8020be4:	681b      	ldr	r3, [r3, #0]
 8020be6:	f8c7 39c0 	str.w	r3, [r7, #2496]	; 0x9c0
                val0 = __SXTB16_RORn(val0, 8);
 8020bea:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 8020bee:	f607 03dc 	addw	r3, r7, #2268	; 0x8dc
 8020bf2:	601a      	str	r2, [r3, #0]
 8020bf4:	f607 02d8 	addw	r2, r7, #2264	; 0x8d8
 8020bf8:	2308      	movs	r3, #8
 8020bfa:	6013      	str	r3, [r2, #0]
 8020bfc:	f607 02d4 	addw	r2, r7, #2260	; 0x8d4
 8020c00:	f607 03dc 	addw	r3, r7, #2268	; 0x8dc
 8020c04:	681b      	ldr	r3, [r3, #0]
 8020c06:	6013      	str	r3, [r2, #0]
 8020c08:	f507 620d 	add.w	r2, r7, #2256	; 0x8d0
 8020c0c:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 8020c10:	681b      	ldr	r3, [r3, #0]
 8020c12:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8020c14:	f507 620d 	add.w	r2, r7, #2256	; 0x8d0
 8020c18:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 8020c1c:	681b      	ldr	r3, [r3, #0]
 8020c1e:	f003 031f 	and.w	r3, r3, #31
 8020c22:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8020c24:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 8020c28:	681b      	ldr	r3, [r3, #0]
 8020c2a:	2b00      	cmp	r3, #0
 8020c2c:	d103      	bne.n	8020c36 <arm_nn_mat_mult_nt_t_s8+0x13c0>
    return op1;
 8020c2e:	f607 03d4 	addw	r3, r7, #2260	; 0x8d4
 8020c32:	681a      	ldr	r2, [r3, #0]
 8020c34:	e006      	b.n	8020c44 <arm_nn_mat_mult_nt_t_s8+0x13ce>
  return (op1 >> op2) | (op1 << (32U - op2));
 8020c36:	f607 02d4 	addw	r2, r7, #2260	; 0x8d4
 8020c3a:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 8020c3e:	6812      	ldr	r2, [r2, #0]
 8020c40:	681b      	ldr	r3, [r3, #0]
 8020c42:	41da      	rors	r2, r3
 8020c44:	f607 03cc 	addw	r3, r7, #2252	; 0x8cc
 8020c48:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8020c4a:	f607 03cc 	addw	r3, r7, #2252	; 0x8cc
 8020c4e:	681b      	ldr	r3, [r3, #0]
 8020c50:	fa2f f283 	sxtb16	r2, r3
 8020c54:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8020c58:	601a      	str	r2, [r3, #0]
  return(result);
 8020c5a:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8020c5e:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 8020c60:	f607 03c4 	addw	r3, r7, #2244	; 0x8c4
 8020c64:	601a      	str	r2, [r3, #0]
  return result;
 8020c66:	f607 03c4 	addw	r3, r7, #2244	; 0x8c4
 8020c6a:	681b      	ldr	r3, [r3, #0]
 8020c6c:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8

                // 4 x MAC res00, res01
                res00 = __SMLAD(val3, val2, res00);
 8020c70:	f8d7 29b4 	ldr.w	r2, [r7, #2484]	; 0x9b4
 8020c74:	f8d7 19bc 	ldr.w	r1, [r7, #2492]	; 0x9bc
 8020c78:	f8d7 0a24 	ldr.w	r0, [r7, #2596]	; 0xa24
 8020c7c:	f607 03ec 	addw	r3, r7, #2284	; 0x8ec
 8020c80:	601a      	str	r2, [r3, #0]
 8020c82:	f607 03e8 	addw	r3, r7, #2280	; 0x8e8
 8020c86:	6019      	str	r1, [r3, #0]
 8020c88:	f607 03e4 	addw	r3, r7, #2276	; 0x8e4
 8020c8c:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8020c8e:	f607 03ec 	addw	r3, r7, #2284	; 0x8ec
 8020c92:	6819      	ldr	r1, [r3, #0]
 8020c94:	f607 03e8 	addw	r3, r7, #2280	; 0x8e8
 8020c98:	681a      	ldr	r2, [r3, #0]
 8020c9a:	f607 03e4 	addw	r3, r7, #2276	; 0x8e4
 8020c9e:	681b      	ldr	r3, [r3, #0]
 8020ca0:	fb21 3202 	smlad	r2, r1, r2, r3
 8020ca4:	f507 630e 	add.w	r3, r7, #2272	; 0x8e0
 8020ca8:	601a      	str	r2, [r3, #0]
  return(result);
 8020caa:	f507 630e 	add.w	r3, r7, #2272	; 0x8e0
 8020cae:	681b      	ldr	r3, [r3, #0]
 8020cb0:	f8c7 3a24 	str.w	r3, [r7, #2596]	; 0xa24
                val5 = __SXTB16(val4);
 8020cb4:	f8d7 29b0 	ldr.w	r2, [r7, #2480]	; 0x9b0
 8020cb8:	f607 03f4 	addw	r3, r7, #2292	; 0x8f4
 8020cbc:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8020cbe:	f607 03f4 	addw	r3, r7, #2292	; 0x8f4
 8020cc2:	681b      	ldr	r3, [r3, #0]
 8020cc4:	fa2f f283 	sxtb16	r2, r3
 8020cc8:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 8020ccc:	601a      	str	r2, [r3, #0]
  return(result);
 8020cce:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 8020cd2:	681b      	ldr	r3, [r3, #0]
 8020cd4:	f8c7 39ac 	str.w	r3, [r7, #2476]	; 0x9ac
                res00 = __SMLAD(val0, val1, res00);
 8020cd8:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 8020cdc:	f8d7 19c0 	ldr.w	r1, [r7, #2496]	; 0x9c0
 8020ce0:	f8d7 0a24 	ldr.w	r0, [r7, #2596]	; 0xa24
 8020ce4:	f607 1304 	addw	r3, r7, #2308	; 0x904
 8020ce8:	601a      	str	r2, [r3, #0]
 8020cea:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 8020cee:	6019      	str	r1, [r3, #0]
 8020cf0:	f607 03fc 	addw	r3, r7, #2300	; 0x8fc
 8020cf4:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8020cf6:	f607 1304 	addw	r3, r7, #2308	; 0x904
 8020cfa:	6819      	ldr	r1, [r3, #0]
 8020cfc:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 8020d00:	681a      	ldr	r2, [r3, #0]
 8020d02:	f607 03fc 	addw	r3, r7, #2300	; 0x8fc
 8020d06:	681b      	ldr	r3, [r3, #0]
 8020d08:	fb21 3202 	smlad	r2, r1, r2, r3
 8020d0c:	f607 03f8 	addw	r3, r7, #2296	; 0x8f8
 8020d10:	601a      	str	r2, [r3, #0]
  return(result);
 8020d12:	f607 03f8 	addw	r3, r7, #2296	; 0x8f8
 8020d16:	681b      	ldr	r3, [r3, #0]
 8020d18:	f8c7 3a24 	str.w	r3, [r7, #2596]	; 0xa24
                val4 = __SXTB16_RORn(val4, 8);
 8020d1c:	f8d7 29b0 	ldr.w	r2, [r7, #2480]	; 0x9b0
 8020d20:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8020d24:	601a      	str	r2, [r3, #0]
 8020d26:	f607 121c 	addw	r2, r7, #2332	; 0x91c
 8020d2a:	2308      	movs	r3, #8
 8020d2c:	6013      	str	r3, [r2, #0]
 8020d2e:	f607 1218 	addw	r2, r7, #2328	; 0x918
 8020d32:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8020d36:	681b      	ldr	r3, [r3, #0]
 8020d38:	6013      	str	r3, [r2, #0]
 8020d3a:	f607 1214 	addw	r2, r7, #2324	; 0x914
 8020d3e:	f607 131c 	addw	r3, r7, #2332	; 0x91c
 8020d42:	681b      	ldr	r3, [r3, #0]
 8020d44:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8020d46:	f607 1214 	addw	r2, r7, #2324	; 0x914
 8020d4a:	f607 1314 	addw	r3, r7, #2324	; 0x914
 8020d4e:	681b      	ldr	r3, [r3, #0]
 8020d50:	f003 031f 	and.w	r3, r3, #31
 8020d54:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8020d56:	f607 1314 	addw	r3, r7, #2324	; 0x914
 8020d5a:	681b      	ldr	r3, [r3, #0]
 8020d5c:	2b00      	cmp	r3, #0
 8020d5e:	d103      	bne.n	8020d68 <arm_nn_mat_mult_nt_t_s8+0x14f2>
    return op1;
 8020d60:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8020d64:	681a      	ldr	r2, [r3, #0]
 8020d66:	e006      	b.n	8020d76 <arm_nn_mat_mult_nt_t_s8+0x1500>
  return (op1 >> op2) | (op1 << (32U - op2));
 8020d68:	f607 1218 	addw	r2, r7, #2328	; 0x918
 8020d6c:	f607 1314 	addw	r3, r7, #2324	; 0x914
 8020d70:	6812      	ldr	r2, [r2, #0]
 8020d72:	681b      	ldr	r3, [r3, #0]
 8020d74:	41da      	rors	r2, r3
 8020d76:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 8020d7a:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8020d7c:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 8020d80:	681b      	ldr	r3, [r3, #0]
 8020d82:	fa2f f283 	sxtb16	r2, r3
 8020d86:	f607 130c 	addw	r3, r7, #2316	; 0x90c
 8020d8a:	601a      	str	r2, [r3, #0]
  return(result);
 8020d8c:	f607 130c 	addw	r3, r7, #2316	; 0x90c
 8020d90:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 8020d92:	f607 1308 	addw	r3, r7, #2312	; 0x908
 8020d96:	601a      	str	r2, [r3, #0]
  return result;
 8020d98:	f607 1308 	addw	r3, r7, #2312	; 0x908
 8020d9c:	681b      	ldr	r3, [r3, #0]
 8020d9e:	f8c7 39b0 	str.w	r3, [r7, #2480]	; 0x9b0
                res01 = __SMLAD(val3, val5, res01);
 8020da2:	f8d7 29b4 	ldr.w	r2, [r7, #2484]	; 0x9b4
 8020da6:	f8d7 19ac 	ldr.w	r1, [r7, #2476]	; 0x9ac
 8020daa:	f8d7 0a20 	ldr.w	r0, [r7, #2592]	; 0xa20
 8020dae:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 8020db2:	601a      	str	r2, [r3, #0]
 8020db4:	f607 132c 	addw	r3, r7, #2348	; 0x92c
 8020db8:	6019      	str	r1, [r3, #0]
 8020dba:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8020dbe:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8020dc0:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 8020dc4:	6819      	ldr	r1, [r3, #0]
 8020dc6:	f607 132c 	addw	r3, r7, #2348	; 0x92c
 8020dca:	681a      	ldr	r2, [r3, #0]
 8020dcc:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8020dd0:	681b      	ldr	r3, [r3, #0]
 8020dd2:	fb21 3202 	smlad	r2, r1, r2, r3
 8020dd6:	f607 1324 	addw	r3, r7, #2340	; 0x924
 8020dda:	601a      	str	r2, [r3, #0]
  return(result);
 8020ddc:	f607 1324 	addw	r3, r7, #2340	; 0x924
 8020de0:	681b      	ldr	r3, [r3, #0]
 8020de2:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20
                res01 = __SMLAD(val0, val4, res01);
 8020de6:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 8020dea:	f8d7 19b0 	ldr.w	r1, [r7, #2480]	; 0x9b0
 8020dee:	f8d7 0a20 	ldr.w	r0, [r7, #2592]	; 0xa20
 8020df2:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8020df6:	601a      	str	r2, [r3, #0]
 8020df8:	f607 133c 	addw	r3, r7, #2364	; 0x93c
 8020dfc:	6019      	str	r1, [r3, #0]
 8020dfe:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8020e02:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8020e04:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8020e08:	6819      	ldr	r1, [r3, #0]
 8020e0a:	f607 133c 	addw	r3, r7, #2364	; 0x93c
 8020e0e:	681a      	ldr	r2, [r3, #0]
 8020e10:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8020e14:	681b      	ldr	r3, [r3, #0]
 8020e16:	fb21 3202 	smlad	r2, r1, r2, r3
 8020e1a:	f607 1334 	addw	r3, r7, #2356	; 0x934
 8020e1e:	601a      	str	r2, [r3, #0]
  return(result);
 8020e20:	f607 1334 	addw	r3, r7, #2356	; 0x934
 8020e24:	681b      	ldr	r3, [r3, #0]
 8020e26:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20

                // 4 x MAC res10, res11
                val0 = arm_nn_read_q7x4((const q7_t *)&lhs_ptr[off0]);
 8020e2a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8020e2e:	681a      	ldr	r2, [r3, #0]
 8020e30:	f8d7 39ec 	ldr.w	r3, [r7, #2540]	; 0x9ec
 8020e34:	4413      	add	r3, r2
 8020e36:	f8c7 3944 	str.w	r3, [r7, #2372]	; 0x944
 8020e3a:	f8d7 3944 	ldr.w	r3, [r7, #2372]	; 0x944
 8020e3e:	681b      	ldr	r3, [r3, #0]
 8020e40:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 8020e42:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8020e46:	601a      	str	r2, [r3, #0]
    return (val);
 8020e48:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8020e4c:	681b      	ldr	r3, [r3, #0]
 8020e4e:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8
                val3 = __SXTB16(val0);
 8020e52:	f8d7 39b8 	ldr.w	r3, [r7, #2488]	; 0x9b8
 8020e56:	f8c7 394c 	str.w	r3, [r7, #2380]	; 0x94c
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8020e5a:	f8d7 394c 	ldr.w	r3, [r7, #2380]	; 0x94c
 8020e5e:	fa2f f383 	sxtb16	r3, r3
 8020e62:	f8c7 3948 	str.w	r3, [r7, #2376]	; 0x948
  return(result);
 8020e66:	f8d7 3948 	ldr.w	r3, [r7, #2376]	; 0x948
 8020e6a:	f8c7 39b4 	str.w	r3, [r7, #2484]	; 0x9b4
                val0 = __SXTB16_RORn(val0, 8);
 8020e6e:	f8d7 39b8 	ldr.w	r3, [r7, #2488]	; 0x9b8
 8020e72:	f8c7 3968 	str.w	r3, [r7, #2408]	; 0x968
 8020e76:	2308      	movs	r3, #8
 8020e78:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 8020e7c:	f8d7 3968 	ldr.w	r3, [r7, #2408]	; 0x968
 8020e80:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 8020e84:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8020e88:	f8c7 395c 	str.w	r3, [r7, #2396]	; 0x95c
  op2 %= 32U;
 8020e8c:	f8d7 395c 	ldr.w	r3, [r7, #2396]	; 0x95c
 8020e90:	f003 031f 	and.w	r3, r3, #31
 8020e94:	f8c7 395c 	str.w	r3, [r7, #2396]	; 0x95c
  if (op2 == 0U)
 8020e98:	f8d7 395c 	ldr.w	r3, [r7, #2396]	; 0x95c
 8020e9c:	2b00      	cmp	r3, #0
 8020e9e:	d102      	bne.n	8020ea6 <arm_nn_mat_mult_nt_t_s8+0x1630>
    return op1;
 8020ea0:	f8d7 3960 	ldr.w	r3, [r7, #2400]	; 0x960
 8020ea4:	e005      	b.n	8020eb2 <arm_nn_mat_mult_nt_t_s8+0x163c>
  return (op1 >> op2) | (op1 << (32U - op2));
 8020ea6:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 8020eaa:	f8d7 395c 	ldr.w	r3, [r7, #2396]	; 0x95c
 8020eae:	fa62 f303 	ror.w	r3, r2, r3
 8020eb2:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8020eb6:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8020eba:	fa2f f383 	sxtb16	r3, r3
 8020ebe:	f8c7 3954 	str.w	r3, [r7, #2388]	; 0x954
  return(result);
 8020ec2:	f8d7 3954 	ldr.w	r3, [r7, #2388]	; 0x954
    result = __SXTB16(__ROR(op1, rotate)) ;
 8020ec6:	f8c7 3950 	str.w	r3, [r7, #2384]	; 0x950
  return result;
 8020eca:	f8d7 3950 	ldr.w	r3, [r7, #2384]	; 0x950
 8020ece:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8
                res10 = __SMLAD(val3, val2, res10);
 8020ed2:	f8d7 19b4 	ldr.w	r1, [r7, #2484]	; 0x9b4
 8020ed6:	f8d7 29bc 	ldr.w	r2, [r7, #2492]	; 0x9bc
 8020eda:	f8d7 3a1c 	ldr.w	r3, [r7, #2588]	; 0xa1c
 8020ede:	f8c7 1978 	str.w	r1, [r7, #2424]	; 0x978
 8020ee2:	f8c7 2974 	str.w	r2, [r7, #2420]	; 0x974
 8020ee6:	f8c7 3970 	str.w	r3, [r7, #2416]	; 0x970
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8020eea:	f8d7 1978 	ldr.w	r1, [r7, #2424]	; 0x978
 8020eee:	f8d7 2974 	ldr.w	r2, [r7, #2420]	; 0x974
 8020ef2:	f8d7 3970 	ldr.w	r3, [r7, #2416]	; 0x970
 8020ef6:	fb21 3302 	smlad	r3, r1, r2, r3
 8020efa:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
  return(result);
 8020efe:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 8020f02:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
                res11 = __SMLAD(val3, val5, res11);
 8020f06:	f8d7 19b4 	ldr.w	r1, [r7, #2484]	; 0x9b4
 8020f0a:	f8d7 29ac 	ldr.w	r2, [r7, #2476]	; 0x9ac
 8020f0e:	f8d7 3a18 	ldr.w	r3, [r7, #2584]	; 0xa18
 8020f12:	f8c7 1988 	str.w	r1, [r7, #2440]	; 0x988
 8020f16:	f8c7 2984 	str.w	r2, [r7, #2436]	; 0x984
 8020f1a:	f8c7 3980 	str.w	r3, [r7, #2432]	; 0x980
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8020f1e:	f8d7 1988 	ldr.w	r1, [r7, #2440]	; 0x988
 8020f22:	f8d7 2984 	ldr.w	r2, [r7, #2436]	; 0x984
 8020f26:	f8d7 3980 	ldr.w	r3, [r7, #2432]	; 0x980
 8020f2a:	fb21 3302 	smlad	r3, r1, r2, r3
 8020f2e:	f8c7 397c 	str.w	r3, [r7, #2428]	; 0x97c
  return(result);
 8020f32:	f8d7 397c 	ldr.w	r3, [r7, #2428]	; 0x97c
 8020f36:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18
                res10 = __SMLAD(val0, val1, res10);
 8020f3a:	f8d7 19b8 	ldr.w	r1, [r7, #2488]	; 0x9b8
 8020f3e:	f8d7 29c0 	ldr.w	r2, [r7, #2496]	; 0x9c0
 8020f42:	f8d7 3a1c 	ldr.w	r3, [r7, #2588]	; 0xa1c
 8020f46:	f8c7 1998 	str.w	r1, [r7, #2456]	; 0x998
 8020f4a:	f8c7 2994 	str.w	r2, [r7, #2452]	; 0x994
 8020f4e:	f8c7 3990 	str.w	r3, [r7, #2448]	; 0x990
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8020f52:	f8d7 1998 	ldr.w	r1, [r7, #2456]	; 0x998
 8020f56:	f8d7 2994 	ldr.w	r2, [r7, #2452]	; 0x994
 8020f5a:	f8d7 3990 	ldr.w	r3, [r7, #2448]	; 0x990
 8020f5e:	fb21 3302 	smlad	r3, r1, r2, r3
 8020f62:	f8c7 398c 	str.w	r3, [r7, #2444]	; 0x98c
  return(result);
 8020f66:	f8d7 398c 	ldr.w	r3, [r7, #2444]	; 0x98c
 8020f6a:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
                res11 = __SMLAD(val0, val4, res11);
 8020f6e:	f8d7 19b8 	ldr.w	r1, [r7, #2488]	; 0x9b8
 8020f72:	f8d7 29b0 	ldr.w	r2, [r7, #2480]	; 0x9b0
 8020f76:	f8d7 3a18 	ldr.w	r3, [r7, #2584]	; 0xa18
 8020f7a:	f8c7 19a8 	str.w	r1, [r7, #2472]	; 0x9a8
 8020f7e:	f8c7 29a4 	str.w	r2, [r7, #2468]	; 0x9a4
 8020f82:	f8c7 39a0 	str.w	r3, [r7, #2464]	; 0x9a0
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8020f86:	f8d7 19a8 	ldr.w	r1, [r7, #2472]	; 0x9a8
 8020f8a:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 8020f8e:	f8d7 39a0 	ldr.w	r3, [r7, #2464]	; 0x9a0
 8020f92:	fb21 3302 	smlad	r3, r1, r2, r3
 8020f96:	f8c7 399c 	str.w	r3, [r7, #2460]	; 0x99c
  return(result);
 8020f9a:	f8d7 399c 	ldr.w	r3, [r7, #2460]	; 0x99c
 8020f9e:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 8020fa2:	f8d7 3a14 	ldr.w	r3, [r7, #2580]	; 0xa14
 8020fa6:	3310      	adds	r3, #16
 8020fa8:	f8c7 3a14 	str.w	r3, [r7, #2580]	; 0xa14
 8020fac:	f8d7 3a70 	ldr.w	r3, [r7, #2672]	; 0xa70
 8020fb0:	f1a3 020f 	sub.w	r2, r3, #15
 8020fb4:	f8d7 3a14 	ldr.w	r3, [r7, #2580]	; 0xa14
 8020fb8:	4293      	cmp	r3, r2
 8020fba:	f6fe ad09 	blt.w	801f9d0 <arm_nn_mat_mult_nt_t_s8+0x15a>
            }

            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 8020fbe:	e05c      	b.n	802107a <arm_nn_mat_mult_nt_t_s8+0x1804>
            {
                q7_t rhs_value0 = rhs_ptr[0];
 8020fc0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8020fc4:	681b      	ldr	r3, [r3, #0]
 8020fc6:	781b      	ldrb	r3, [r3, #0]
 8020fc8:	f887 39c7 	strb.w	r3, [r7, #2503]	; 0x9c7
                q7_t rhs_value1 = rhs_ptr[rhs_cols];
 8020fcc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8020fd0:	681a      	ldr	r2, [r3, #0]
 8020fd2:	f8d7 3a70 	ldr.w	r3, [r7, #2672]	; 0xa70
 8020fd6:	4413      	add	r3, r2
 8020fd8:	781b      	ldrb	r3, [r3, #0]
 8020fda:	f887 39c6 	strb.w	r3, [r7, #2502]	; 0x9c6
                q7_t lhs_value = lhs_ptr[0];
 8020fde:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8020fe2:	681b      	ldr	r3, [r3, #0]
 8020fe4:	781b      	ldrb	r3, [r3, #0]
 8020fe6:	f887 39c5 	strb.w	r3, [r7, #2501]	; 0x9c5

                res00 += lhs_value * rhs_value0;
 8020fea:	f997 29c5 	ldrsb.w	r2, [r7, #2501]	; 0x9c5
 8020fee:	f997 39c7 	ldrsb.w	r3, [r7, #2503]	; 0x9c7
 8020ff2:	fb03 f202 	mul.w	r2, r3, r2
 8020ff6:	f8d7 3a24 	ldr.w	r3, [r7, #2596]	; 0xa24
 8020ffa:	4413      	add	r3, r2
 8020ffc:	f8c7 3a24 	str.w	r3, [r7, #2596]	; 0xa24
                res01 += lhs_value * rhs_value1;
 8021000:	f997 29c5 	ldrsb.w	r2, [r7, #2501]	; 0x9c5
 8021004:	f997 39c6 	ldrsb.w	r3, [r7, #2502]	; 0x9c6
 8021008:	fb03 f202 	mul.w	r2, r3, r2
 802100c:	f8d7 3a20 	ldr.w	r3, [r7, #2592]	; 0xa20
 8021010:	4413      	add	r3, r2
 8021012:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20

                lhs_value = lhs_ptr[rhs_cols];
 8021016:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 802101a:	681a      	ldr	r2, [r3, #0]
 802101c:	f8d7 3a70 	ldr.w	r3, [r7, #2672]	; 0xa70
 8021020:	4413      	add	r3, r2
 8021022:	781b      	ldrb	r3, [r3, #0]
 8021024:	f887 39c5 	strb.w	r3, [r7, #2501]	; 0x9c5
                res10 += lhs_value * rhs_value0;
 8021028:	f997 29c5 	ldrsb.w	r2, [r7, #2501]	; 0x9c5
 802102c:	f997 39c7 	ldrsb.w	r3, [r7, #2503]	; 0x9c7
 8021030:	fb03 f202 	mul.w	r2, r3, r2
 8021034:	f8d7 3a1c 	ldr.w	r3, [r7, #2588]	; 0xa1c
 8021038:	4413      	add	r3, r2
 802103a:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
                res11 += lhs_value * rhs_value1;
 802103e:	f997 29c5 	ldrsb.w	r2, [r7, #2501]	; 0x9c5
 8021042:	f997 39c6 	ldrsb.w	r3, [r7, #2502]	; 0x9c6
 8021046:	fb03 f202 	mul.w	r2, r3, r2
 802104a:	f8d7 3a18 	ldr.w	r3, [r7, #2584]	; 0xa18
 802104e:	4413      	add	r3, r2
 8021050:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18

                ++rhs_ptr;
 8021054:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8021058:	681b      	ldr	r3, [r3, #0]
 802105a:	1c5a      	adds	r2, r3, #1
 802105c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8021060:	601a      	str	r2, [r3, #0]
                ++lhs_ptr;
 8021062:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8021066:	681b      	ldr	r3, [r3, #0]
 8021068:	1c5a      	adds	r2, r3, #1
 802106a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 802106e:	601a      	str	r2, [r3, #0]
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 8021070:	f8d7 3a14 	ldr.w	r3, [r7, #2580]	; 0xa14
 8021074:	3301      	adds	r3, #1
 8021076:	f8c7 3a14 	str.w	r3, [r7, #2580]	; 0xa14
 802107a:	f8d7 2a14 	ldr.w	r2, [r7, #2580]	; 0xa14
 802107e:	f8d7 3a70 	ldr.w	r3, [r7, #2672]	; 0xa70
 8021082:	429a      	cmp	r2, r3
 8021084:	db9c      	blt.n	8020fc0 <arm_nn_mat_mult_nt_t_s8+0x174a>
            }

            // Quantize down
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows_idx], dst_shifts[rhs_rows_idx]);
 8021086:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 802108a:	009a      	lsls	r2, r3, #2
 802108c:	f8d7 3a60 	ldr.w	r3, [r7, #2656]	; 0xa60
 8021090:	4413      	add	r3, r2
 8021092:	6818      	ldr	r0, [r3, #0]
 8021094:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 8021098:	009a      	lsls	r2, r3, #2
 802109a:	f8d7 3a64 	ldr.w	r3, [r7, #2660]	; 0xa64
 802109e:	4413      	add	r3, r2
 80210a0:	6819      	ldr	r1, [r3, #0]
 80210a2:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 80210a6:	f8d7 3a24 	ldr.w	r3, [r7, #2596]	; 0xa24
 80210aa:	6013      	str	r3, [r2, #0]
 80210ac:	f207 4394 	addw	r3, r7, #1172	; 0x494
 80210b0:	6018      	str	r0, [r3, #0]
 80210b2:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 80210b6:	6019      	str	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80210b8:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 80210bc:	681b      	ldr	r3, [r3, #0]
 80210be:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 80210c2:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80210c6:	681b      	ldr	r3, [r3, #0]
 80210c8:	fa03 f202 	lsl.w	r2, r3, r2
 80210cc:	f207 438c 	addw	r3, r7, #1164	; 0x48c
 80210d0:	601a      	str	r2, [r3, #0]
 80210d2:	f507 6291 	add.w	r2, r7, #1160	; 0x488
 80210d6:	f207 4394 	addw	r3, r7, #1172	; 0x494
 80210da:	681b      	ldr	r3, [r3, #0]
 80210dc:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80210de:	f207 4284 	addw	r2, r7, #1156	; 0x484
 80210e2:	2300      	movs	r3, #0
 80210e4:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 80210e6:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 80210ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80210ee:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 80210f0:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 80210f4:	2300      	movs	r3, #0
 80210f6:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 80210f8:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80210fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8021100:	f207 438c 	addw	r3, r7, #1164	; 0x48c
 8021104:	681b      	ldr	r3, [r3, #0]
 8021106:	4618      	mov	r0, r3
 8021108:	ea4f 71e0 	mov.w	r1, r0, asr #31
 802110c:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8021110:	681b      	ldr	r3, [r3, #0]
 8021112:	461a      	mov	r2, r3
 8021114:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8021118:	fb02 f501 	mul.w	r5, r2, r1
 802111c:	fb00 f403 	mul.w	r4, r0, r3
 8021120:	442c      	add	r4, r5
 8021122:	fba0 2302 	umull	r2, r3, r0, r2
 8021126:	18e1      	adds	r1, r4, r3
 8021128:	460b      	mov	r3, r1
 802112a:	eb18 0102 	adds.w	r1, r8, r2
 802112e:	6139      	str	r1, [r7, #16]
 8021130:	eb49 0303 	adc.w	r3, r9, r3
 8021134:	617b      	str	r3, [r7, #20]
 8021136:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 802113a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 802113e:	e9c3 1200 	strd	r1, r2, [r3]
    result = (int32_t)(mult.long_long >> 31);
 8021142:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8021146:	e9d3 2300 	ldrd	r2, r3, [r3]
 802114a:	f04f 0000 	mov.w	r0, #0
 802114e:	f04f 0100 	mov.w	r1, #0
 8021152:	0fd0      	lsrs	r0, r2, #31
 8021154:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8021158:	17d9      	asrs	r1, r3, #31
 802115a:	f207 4284 	addw	r2, r7, #1156	; 0x484
 802115e:	4603      	mov	r3, r0
 8021160:	6013      	str	r3, [r2, #0]
    return result;
 8021162:	f207 4384 	addw	r3, r7, #1156	; 0x484
 8021166:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8021168:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 802116c:	681b      	ldr	r3, [r3, #0]
 802116e:	2b00      	cmp	r3, #0
 8021170:	dc04      	bgt.n	802117c <arm_nn_mat_mult_nt_t_s8+0x1906>
 8021172:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8021176:	681b      	ldr	r3, [r3, #0]
 8021178:	425a      	negs	r2, r3
 802117a:	e000      	b.n	802117e <arm_nn_mat_mult_nt_t_s8+0x1908>
 802117c:	2200      	movs	r2, #0
 802117e:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8021182:	6019      	str	r1, [r3, #0]
 8021184:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 8021188:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 802118a:	f507 628f 	add.w	r2, r7, #1144	; 0x478
 802118e:	2300      	movs	r3, #0
 8021190:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8021192:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 8021196:	2201      	movs	r2, #1
 8021198:	681b      	ldr	r3, [r3, #0]
 802119a:	fa02 f303 	lsl.w	r3, r2, r3
 802119e:	f207 4274 	addw	r2, r7, #1140	; 0x474
 80211a2:	3b01      	subs	r3, #1
 80211a4:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 80211a6:	f507 618e 	add.w	r1, r7, #1136	; 0x470
 80211aa:	f507 6290 	add.w	r2, r7, #1152	; 0x480
 80211ae:	f207 4374 	addw	r3, r7, #1140	; 0x474
 80211b2:	6812      	ldr	r2, [r2, #0]
 80211b4:	681b      	ldr	r3, [r3, #0]
 80211b6:	4013      	ands	r3, r2
 80211b8:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 80211ba:	f507 618f 	add.w	r1, r7, #1144	; 0x478
 80211be:	f507 6290 	add.w	r2, r7, #1152	; 0x480
 80211c2:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 80211c6:	6812      	ldr	r2, [r2, #0]
 80211c8:	681b      	ldr	r3, [r3, #0]
 80211ca:	fa42 f303 	asr.w	r3, r2, r3
 80211ce:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 80211d0:	f207 426c 	addw	r2, r7, #1132	; 0x46c
 80211d4:	f207 4374 	addw	r3, r7, #1140	; 0x474
 80211d8:	681b      	ldr	r3, [r3, #0]
 80211da:	105b      	asrs	r3, r3, #1
 80211dc:	6013      	str	r3, [r2, #0]
    if (result < 0)
 80211de:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 80211e2:	681b      	ldr	r3, [r3, #0]
 80211e4:	2b00      	cmp	r3, #0
 80211e6:	da06      	bge.n	80211f6 <arm_nn_mat_mult_nt_t_s8+0x1980>
        threshold++;
 80211e8:	f207 426c 	addw	r2, r7, #1132	; 0x46c
 80211ec:	f207 436c 	addw	r3, r7, #1132	; 0x46c
 80211f0:	681b      	ldr	r3, [r3, #0]
 80211f2:	3301      	adds	r3, #1
 80211f4:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 80211f6:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 80211fa:	f207 436c 	addw	r3, r7, #1132	; 0x46c
 80211fe:	6812      	ldr	r2, [r2, #0]
 8021200:	681b      	ldr	r3, [r3, #0]
 8021202:	429a      	cmp	r2, r3
 8021204:	dd06      	ble.n	8021214 <arm_nn_mat_mult_nt_t_s8+0x199e>
        result++;
 8021206:	f507 628f 	add.w	r2, r7, #1144	; 0x478
 802120a:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 802120e:	681b      	ldr	r3, [r3, #0]
 8021210:	3301      	adds	r3, #1
 8021212:	6013      	str	r3, [r2, #0]
    return result;
 8021214:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8021218:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 802121a:	bf00      	nop
 802121c:	f8c7 3a24 	str.w	r3, [r7, #2596]	; 0xa24
            res01 = arm_nn_requantize(res01, dst_multipliers[rhs_rows_idx + 1], dst_shifts[rhs_rows_idx + 1]);
 8021220:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 8021224:	3301      	adds	r3, #1
 8021226:	009a      	lsls	r2, r3, #2
 8021228:	f8d7 3a60 	ldr.w	r3, [r7, #2656]	; 0xa60
 802122c:	4413      	add	r3, r2
 802122e:	6818      	ldr	r0, [r3, #0]
 8021230:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 8021234:	3301      	adds	r3, #1
 8021236:	009a      	lsls	r2, r3, #2
 8021238:	f8d7 3a64 	ldr.w	r3, [r7, #2660]	; 0xa64
 802123c:	4413      	add	r3, r2
 802123e:	6819      	ldr	r1, [r3, #0]
 8021240:	f507 6299 	add.w	r2, r7, #1224	; 0x4c8
 8021244:	f8d7 3a20 	ldr.w	r3, [r7, #2592]	; 0xa20
 8021248:	6013      	str	r3, [r2, #0]
 802124a:	f207 43c4 	addw	r3, r7, #1220	; 0x4c4
 802124e:	6018      	str	r0, [r3, #0]
 8021250:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8021254:	6019      	str	r1, [r3, #0]
 8021256:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 802125a:	681b      	ldr	r3, [r3, #0]
 802125c:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8021260:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 8021264:	681b      	ldr	r3, [r3, #0]
 8021266:	fa03 f202 	lsl.w	r2, r3, r2
 802126a:	f207 43bc 	addw	r3, r7, #1212	; 0x4bc
 802126e:	601a      	str	r2, [r3, #0]
 8021270:	f507 6297 	add.w	r2, r7, #1208	; 0x4b8
 8021274:	f207 43c4 	addw	r3, r7, #1220	; 0x4c4
 8021278:	681b      	ldr	r3, [r3, #0]
 802127a:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 802127c:	f207 42b4 	addw	r2, r7, #1204	; 0x4b4
 8021280:	2300      	movs	r3, #0
 8021282:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 8021284:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8021288:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 802128c:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 802128e:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8021292:	2300      	movs	r3, #0
 8021294:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8021296:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 802129a:	e9d3 8900 	ldrd	r8, r9, [r3]
 802129e:	f207 43bc 	addw	r3, r7, #1212	; 0x4bc
 80212a2:	681b      	ldr	r3, [r3, #0]
 80212a4:	4618      	mov	r0, r3
 80212a6:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80212aa:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 80212ae:	681b      	ldr	r3, [r3, #0]
 80212b0:	461a      	mov	r2, r3
 80212b2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80212b6:	fb02 f501 	mul.w	r5, r2, r1
 80212ba:	fb00 f403 	mul.w	r4, r0, r3
 80212be:	442c      	add	r4, r5
 80212c0:	fba0 2302 	umull	r2, r3, r0, r2
 80212c4:	18e1      	adds	r1, r4, r3
 80212c6:	460b      	mov	r3, r1
 80212c8:	eb18 0102 	adds.w	r1, r8, r2
 80212cc:	61b9      	str	r1, [r7, #24]
 80212ce:	eb49 0303 	adc.w	r3, r9, r3
 80212d2:	61fb      	str	r3, [r7, #28]
 80212d4:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80212d8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80212dc:	e9c3 1200 	strd	r1, r2, [r3]
    result = (int32_t)(mult.long_long >> 31);
 80212e0:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80212e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80212e8:	f04f 0000 	mov.w	r0, #0
 80212ec:	f04f 0100 	mov.w	r1, #0
 80212f0:	0fd0      	lsrs	r0, r2, #31
 80212f2:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80212f6:	17d9      	asrs	r1, r3, #31
 80212f8:	f207 42b4 	addw	r2, r7, #1204	; 0x4b4
 80212fc:	4603      	mov	r3, r0
 80212fe:	6013      	str	r3, [r2, #0]
    return result;
 8021300:	f207 43b4 	addw	r3, r7, #1204	; 0x4b4
 8021304:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8021306:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 802130a:	681b      	ldr	r3, [r3, #0]
 802130c:	2b00      	cmp	r3, #0
 802130e:	dc04      	bgt.n	802131a <arm_nn_mat_mult_nt_t_s8+0x1aa4>
 8021310:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8021314:	681b      	ldr	r3, [r3, #0]
 8021316:	425a      	negs	r2, r3
 8021318:	e000      	b.n	802131c <arm_nn_mat_mult_nt_t_s8+0x1aa6>
 802131a:	2200      	movs	r2, #0
 802131c:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8021320:	6019      	str	r1, [r3, #0]
 8021322:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 8021326:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8021328:	f507 6295 	add.w	r2, r7, #1192	; 0x4a8
 802132c:	2300      	movs	r3, #0
 802132e:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8021330:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 8021334:	2201      	movs	r2, #1
 8021336:	681b      	ldr	r3, [r3, #0]
 8021338:	fa02 f303 	lsl.w	r3, r2, r3
 802133c:	f207 42a4 	addw	r2, r7, #1188	; 0x4a4
 8021340:	3b01      	subs	r3, #1
 8021342:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 8021344:	f507 6194 	add.w	r1, r7, #1184	; 0x4a0
 8021348:	f507 6296 	add.w	r2, r7, #1200	; 0x4b0
 802134c:	f207 43a4 	addw	r3, r7, #1188	; 0x4a4
 8021350:	6812      	ldr	r2, [r2, #0]
 8021352:	681b      	ldr	r3, [r3, #0]
 8021354:	4013      	ands	r3, r2
 8021356:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 8021358:	f507 6195 	add.w	r1, r7, #1192	; 0x4a8
 802135c:	f507 6296 	add.w	r2, r7, #1200	; 0x4b0
 8021360:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 8021364:	6812      	ldr	r2, [r2, #0]
 8021366:	681b      	ldr	r3, [r3, #0]
 8021368:	fa42 f303 	asr.w	r3, r2, r3
 802136c:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 802136e:	f207 429c 	addw	r2, r7, #1180	; 0x49c
 8021372:	f207 43a4 	addw	r3, r7, #1188	; 0x4a4
 8021376:	681b      	ldr	r3, [r3, #0]
 8021378:	105b      	asrs	r3, r3, #1
 802137a:	6013      	str	r3, [r2, #0]
    if (result < 0)
 802137c:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 8021380:	681b      	ldr	r3, [r3, #0]
 8021382:	2b00      	cmp	r3, #0
 8021384:	da06      	bge.n	8021394 <arm_nn_mat_mult_nt_t_s8+0x1b1e>
        threshold++;
 8021386:	f207 429c 	addw	r2, r7, #1180	; 0x49c
 802138a:	f207 439c 	addw	r3, r7, #1180	; 0x49c
 802138e:	681b      	ldr	r3, [r3, #0]
 8021390:	3301      	adds	r3, #1
 8021392:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 8021394:	f507 6294 	add.w	r2, r7, #1184	; 0x4a0
 8021398:	f207 439c 	addw	r3, r7, #1180	; 0x49c
 802139c:	6812      	ldr	r2, [r2, #0]
 802139e:	681b      	ldr	r3, [r3, #0]
 80213a0:	429a      	cmp	r2, r3
 80213a2:	dd06      	ble.n	80213b2 <arm_nn_mat_mult_nt_t_s8+0x1b3c>
        result++;
 80213a4:	f507 6295 	add.w	r2, r7, #1192	; 0x4a8
 80213a8:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 80213ac:	681b      	ldr	r3, [r3, #0]
 80213ae:	3301      	adds	r3, #1
 80213b0:	6013      	str	r3, [r2, #0]
    return result;
 80213b2:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 80213b6:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80213b8:	bf00      	nop
 80213ba:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20
            res10 = arm_nn_requantize(res10, dst_multipliers[rhs_rows_idx], dst_shifts[rhs_rows_idx]);
 80213be:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 80213c2:	009a      	lsls	r2, r3, #2
 80213c4:	f8d7 3a60 	ldr.w	r3, [r7, #2656]	; 0xa60
 80213c8:	4413      	add	r3, r2
 80213ca:	6818      	ldr	r0, [r3, #0]
 80213cc:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 80213d0:	009a      	lsls	r2, r3, #2
 80213d2:	f8d7 3a64 	ldr.w	r3, [r7, #2660]	; 0xa64
 80213d6:	4413      	add	r3, r2
 80213d8:	6819      	ldr	r1, [r3, #0]
 80213da:	f507 629f 	add.w	r2, r7, #1272	; 0x4f8
 80213de:	f8d7 3a1c 	ldr.w	r3, [r7, #2588]	; 0xa1c
 80213e2:	6013      	str	r3, [r2, #0]
 80213e4:	f207 43f4 	addw	r3, r7, #1268	; 0x4f4
 80213e8:	6018      	str	r0, [r3, #0]
 80213ea:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 80213ee:	6019      	str	r1, [r3, #0]
 80213f0:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 80213f4:	681b      	ldr	r3, [r3, #0]
 80213f6:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 80213fa:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 80213fe:	681b      	ldr	r3, [r3, #0]
 8021400:	fa03 f202 	lsl.w	r2, r3, r2
 8021404:	f207 43ec 	addw	r3, r7, #1260	; 0x4ec
 8021408:	601a      	str	r2, [r3, #0]
 802140a:	f507 629d 	add.w	r2, r7, #1256	; 0x4e8
 802140e:	f207 43f4 	addw	r3, r7, #1268	; 0x4f4
 8021412:	681b      	ldr	r3, [r3, #0]
 8021414:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8021416:	f207 42e4 	addw	r2, r7, #1252	; 0x4e4
 802141a:	2300      	movs	r3, #0
 802141c:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 802141e:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8021422:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8021426:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 8021428:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 802142c:	2300      	movs	r3, #0
 802142e:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8021430:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8021434:	e9d3 8900 	ldrd	r8, r9, [r3]
 8021438:	f207 43ec 	addw	r3, r7, #1260	; 0x4ec
 802143c:	681b      	ldr	r3, [r3, #0]
 802143e:	4618      	mov	r0, r3
 8021440:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8021444:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8021448:	681b      	ldr	r3, [r3, #0]
 802144a:	461a      	mov	r2, r3
 802144c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8021450:	fb02 f501 	mul.w	r5, r2, r1
 8021454:	fb00 f403 	mul.w	r4, r0, r3
 8021458:	442c      	add	r4, r5
 802145a:	fba0 2302 	umull	r2, r3, r0, r2
 802145e:	18e1      	adds	r1, r4, r3
 8021460:	460b      	mov	r3, r1
 8021462:	eb18 0102 	adds.w	r1, r8, r2
 8021466:	6239      	str	r1, [r7, #32]
 8021468:	eb49 0303 	adc.w	r3, r9, r3
 802146c:	627b      	str	r3, [r7, #36]	; 0x24
 802146e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8021472:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8021476:	e9c3 1200 	strd	r1, r2, [r3]
    result = (int32_t)(mult.long_long >> 31);
 802147a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 802147e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021482:	f04f 0000 	mov.w	r0, #0
 8021486:	f04f 0100 	mov.w	r1, #0
 802148a:	0fd0      	lsrs	r0, r2, #31
 802148c:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8021490:	17d9      	asrs	r1, r3, #31
 8021492:	f207 42e4 	addw	r2, r7, #1252	; 0x4e4
 8021496:	4603      	mov	r3, r0
 8021498:	6013      	str	r3, [r2, #0]
    return result;
 802149a:	f207 43e4 	addw	r3, r7, #1252	; 0x4e4
 802149e:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80214a0:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 80214a4:	681b      	ldr	r3, [r3, #0]
 80214a6:	2b00      	cmp	r3, #0
 80214a8:	dc04      	bgt.n	80214b4 <arm_nn_mat_mult_nt_t_s8+0x1c3e>
 80214aa:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 80214ae:	681b      	ldr	r3, [r3, #0]
 80214b0:	425a      	negs	r2, r3
 80214b2:	e000      	b.n	80214b6 <arm_nn_mat_mult_nt_t_s8+0x1c40>
 80214b4:	2200      	movs	r2, #0
 80214b6:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 80214ba:	6019      	str	r1, [r3, #0]
 80214bc:	f207 43dc 	addw	r3, r7, #1244	; 0x4dc
 80214c0:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 80214c2:	f507 629b 	add.w	r2, r7, #1240	; 0x4d8
 80214c6:	2300      	movs	r3, #0
 80214c8:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 80214ca:	f207 43dc 	addw	r3, r7, #1244	; 0x4dc
 80214ce:	2201      	movs	r2, #1
 80214d0:	681b      	ldr	r3, [r3, #0]
 80214d2:	fa02 f303 	lsl.w	r3, r2, r3
 80214d6:	f207 42d4 	addw	r2, r7, #1236	; 0x4d4
 80214da:	3b01      	subs	r3, #1
 80214dc:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 80214de:	f507 619a 	add.w	r1, r7, #1232	; 0x4d0
 80214e2:	f507 629c 	add.w	r2, r7, #1248	; 0x4e0
 80214e6:	f207 43d4 	addw	r3, r7, #1236	; 0x4d4
 80214ea:	6812      	ldr	r2, [r2, #0]
 80214ec:	681b      	ldr	r3, [r3, #0]
 80214ee:	4013      	ands	r3, r2
 80214f0:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 80214f2:	f507 619b 	add.w	r1, r7, #1240	; 0x4d8
 80214f6:	f507 629c 	add.w	r2, r7, #1248	; 0x4e0
 80214fa:	f207 43dc 	addw	r3, r7, #1244	; 0x4dc
 80214fe:	6812      	ldr	r2, [r2, #0]
 8021500:	681b      	ldr	r3, [r3, #0]
 8021502:	fa42 f303 	asr.w	r3, r2, r3
 8021506:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 8021508:	f207 42cc 	addw	r2, r7, #1228	; 0x4cc
 802150c:	f207 43d4 	addw	r3, r7, #1236	; 0x4d4
 8021510:	681b      	ldr	r3, [r3, #0]
 8021512:	105b      	asrs	r3, r3, #1
 8021514:	6013      	str	r3, [r2, #0]
    if (result < 0)
 8021516:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 802151a:	681b      	ldr	r3, [r3, #0]
 802151c:	2b00      	cmp	r3, #0
 802151e:	da06      	bge.n	802152e <arm_nn_mat_mult_nt_t_s8+0x1cb8>
        threshold++;
 8021520:	f207 42cc 	addw	r2, r7, #1228	; 0x4cc
 8021524:	f207 43cc 	addw	r3, r7, #1228	; 0x4cc
 8021528:	681b      	ldr	r3, [r3, #0]
 802152a:	3301      	adds	r3, #1
 802152c:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 802152e:	f507 629a 	add.w	r2, r7, #1232	; 0x4d0
 8021532:	f207 43cc 	addw	r3, r7, #1228	; 0x4cc
 8021536:	6812      	ldr	r2, [r2, #0]
 8021538:	681b      	ldr	r3, [r3, #0]
 802153a:	429a      	cmp	r2, r3
 802153c:	dd06      	ble.n	802154c <arm_nn_mat_mult_nt_t_s8+0x1cd6>
        result++;
 802153e:	f507 629b 	add.w	r2, r7, #1240	; 0x4d8
 8021542:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8021546:	681b      	ldr	r3, [r3, #0]
 8021548:	3301      	adds	r3, #1
 802154a:	6013      	str	r3, [r2, #0]
    return result;
 802154c:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8021550:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8021552:	bf00      	nop
 8021554:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
            res11 = arm_nn_requantize(res11, dst_multipliers[rhs_rows_idx + 1], dst_shifts[rhs_rows_idx + 1]);
 8021558:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 802155c:	3301      	adds	r3, #1
 802155e:	009a      	lsls	r2, r3, #2
 8021560:	f8d7 3a60 	ldr.w	r3, [r7, #2656]	; 0xa60
 8021564:	4413      	add	r3, r2
 8021566:	6818      	ldr	r0, [r3, #0]
 8021568:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 802156c:	3301      	adds	r3, #1
 802156e:	009a      	lsls	r2, r3, #2
 8021570:	f8d7 3a64 	ldr.w	r3, [r7, #2660]	; 0xa64
 8021574:	4413      	add	r3, r2
 8021576:	6819      	ldr	r1, [r3, #0]
 8021578:	f507 62a5 	add.w	r2, r7, #1320	; 0x528
 802157c:	f8d7 3a18 	ldr.w	r3, [r7, #2584]	; 0xa18
 8021580:	6013      	str	r3, [r2, #0]
 8021582:	f207 5324 	addw	r3, r7, #1316	; 0x524
 8021586:	6018      	str	r0, [r3, #0]
 8021588:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 802158c:	6019      	str	r1, [r3, #0]
 802158e:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8021592:	681b      	ldr	r3, [r3, #0]
 8021594:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8021598:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 802159c:	681b      	ldr	r3, [r3, #0]
 802159e:	fa03 f202 	lsl.w	r2, r3, r2
 80215a2:	f207 531c 	addw	r3, r7, #1308	; 0x51c
 80215a6:	601a      	str	r2, [r3, #0]
 80215a8:	f507 62a3 	add.w	r2, r7, #1304	; 0x518
 80215ac:	f207 5324 	addw	r3, r7, #1316	; 0x524
 80215b0:	681b      	ldr	r3, [r3, #0]
 80215b2:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80215b4:	f207 5214 	addw	r2, r7, #1300	; 0x514
 80215b8:	2300      	movs	r3, #0
 80215ba:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 80215bc:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 80215c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80215c4:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 80215c6:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 80215ca:	2300      	movs	r3, #0
 80215cc:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 80215ce:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80215d2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80215d6:	f207 531c 	addw	r3, r7, #1308	; 0x51c
 80215da:	681b      	ldr	r3, [r3, #0]
 80215dc:	4618      	mov	r0, r3
 80215de:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80215e2:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 80215e6:	681b      	ldr	r3, [r3, #0]
 80215e8:	461a      	mov	r2, r3
 80215ea:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80215ee:	fb02 f501 	mul.w	r5, r2, r1
 80215f2:	fb00 f403 	mul.w	r4, r0, r3
 80215f6:	442c      	add	r4, r5
 80215f8:	fba0 2302 	umull	r2, r3, r0, r2
 80215fc:	18e1      	adds	r1, r4, r3
 80215fe:	460b      	mov	r3, r1
 8021600:	eb18 0102 	adds.w	r1, r8, r2
 8021604:	62b9      	str	r1, [r7, #40]	; 0x28
 8021606:	eb49 0303 	adc.w	r3, r9, r3
 802160a:	62fb      	str	r3, [r7, #44]	; 0x2c
 802160c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8021610:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8021614:	e9c3 1200 	strd	r1, r2, [r3]
    result = (int32_t)(mult.long_long >> 31);
 8021618:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 802161c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021620:	f04f 0000 	mov.w	r0, #0
 8021624:	f04f 0100 	mov.w	r1, #0
 8021628:	0fd0      	lsrs	r0, r2, #31
 802162a:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 802162e:	17d9      	asrs	r1, r3, #31
 8021630:	f207 5214 	addw	r2, r7, #1300	; 0x514
 8021634:	4603      	mov	r3, r0
 8021636:	6013      	str	r3, [r2, #0]
    return result;
 8021638:	f207 5314 	addw	r3, r7, #1300	; 0x514
 802163c:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 802163e:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8021642:	681b      	ldr	r3, [r3, #0]
 8021644:	2b00      	cmp	r3, #0
 8021646:	dc04      	bgt.n	8021652 <arm_nn_mat_mult_nt_t_s8+0x1ddc>
 8021648:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 802164c:	681b      	ldr	r3, [r3, #0]
 802164e:	425a      	negs	r2, r3
 8021650:	e000      	b.n	8021654 <arm_nn_mat_mult_nt_t_s8+0x1dde>
 8021652:	2200      	movs	r2, #0
 8021654:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8021658:	6019      	str	r1, [r3, #0]
 802165a:	f207 530c 	addw	r3, r7, #1292	; 0x50c
 802165e:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8021660:	f507 62a1 	add.w	r2, r7, #1288	; 0x508
 8021664:	2300      	movs	r3, #0
 8021666:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8021668:	f207 530c 	addw	r3, r7, #1292	; 0x50c
 802166c:	2201      	movs	r2, #1
 802166e:	681b      	ldr	r3, [r3, #0]
 8021670:	fa02 f303 	lsl.w	r3, r2, r3
 8021674:	f207 5204 	addw	r2, r7, #1284	; 0x504
 8021678:	3b01      	subs	r3, #1
 802167a:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 802167c:	f507 61a0 	add.w	r1, r7, #1280	; 0x500
 8021680:	f507 62a2 	add.w	r2, r7, #1296	; 0x510
 8021684:	f207 5304 	addw	r3, r7, #1284	; 0x504
 8021688:	6812      	ldr	r2, [r2, #0]
 802168a:	681b      	ldr	r3, [r3, #0]
 802168c:	4013      	ands	r3, r2
 802168e:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 8021690:	f507 61a1 	add.w	r1, r7, #1288	; 0x508
 8021694:	f507 62a2 	add.w	r2, r7, #1296	; 0x510
 8021698:	f207 530c 	addw	r3, r7, #1292	; 0x50c
 802169c:	6812      	ldr	r2, [r2, #0]
 802169e:	681b      	ldr	r3, [r3, #0]
 80216a0:	fa42 f303 	asr.w	r3, r2, r3
 80216a4:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 80216a6:	f207 42fc 	addw	r2, r7, #1276	; 0x4fc
 80216aa:	f207 5304 	addw	r3, r7, #1284	; 0x504
 80216ae:	681b      	ldr	r3, [r3, #0]
 80216b0:	105b      	asrs	r3, r3, #1
 80216b2:	6013      	str	r3, [r2, #0]
    if (result < 0)
 80216b4:	f507 63a1 	add.w	r3, r7, #1288	; 0x508
 80216b8:	681b      	ldr	r3, [r3, #0]
 80216ba:	2b00      	cmp	r3, #0
 80216bc:	da06      	bge.n	80216cc <arm_nn_mat_mult_nt_t_s8+0x1e56>
        threshold++;
 80216be:	f207 42fc 	addw	r2, r7, #1276	; 0x4fc
 80216c2:	f207 43fc 	addw	r3, r7, #1276	; 0x4fc
 80216c6:	681b      	ldr	r3, [r3, #0]
 80216c8:	3301      	adds	r3, #1
 80216ca:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 80216cc:	f507 62a0 	add.w	r2, r7, #1280	; 0x500
 80216d0:	f207 43fc 	addw	r3, r7, #1276	; 0x4fc
 80216d4:	6812      	ldr	r2, [r2, #0]
 80216d6:	681b      	ldr	r3, [r3, #0]
 80216d8:	429a      	cmp	r2, r3
 80216da:	dd06      	ble.n	80216ea <arm_nn_mat_mult_nt_t_s8+0x1e74>
        result++;
 80216dc:	f507 62a1 	add.w	r2, r7, #1288	; 0x508
 80216e0:	f507 63a1 	add.w	r3, r7, #1288	; 0x508
 80216e4:	681b      	ldr	r3, [r3, #0]
 80216e6:	3301      	adds	r3, #1
 80216e8:	6013      	str	r3, [r2, #0]
    return result;
 80216ea:	f507 63a1 	add.w	r3, r7, #1288	; 0x508
 80216ee:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80216f0:	bf00      	nop
 80216f2:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18

            // Add offset
            res00 += dst_offset;
 80216f6:	f8d7 2a24 	ldr.w	r2, [r7, #2596]	; 0xa24
 80216fa:	f8d7 3a78 	ldr.w	r3, [r7, #2680]	; 0xa78
 80216fe:	4413      	add	r3, r2
 8021700:	f8c7 3a24 	str.w	r3, [r7, #2596]	; 0xa24
            res01 += dst_offset;
 8021704:	f8d7 2a20 	ldr.w	r2, [r7, #2592]	; 0xa20
 8021708:	f8d7 3a78 	ldr.w	r3, [r7, #2680]	; 0xa78
 802170c:	4413      	add	r3, r2
 802170e:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20
            res10 += dst_offset;
 8021712:	f8d7 2a1c 	ldr.w	r2, [r7, #2588]	; 0xa1c
 8021716:	f8d7 3a78 	ldr.w	r3, [r7, #2680]	; 0xa78
 802171a:	4413      	add	r3, r2
 802171c:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
            res11 += dst_offset;
 8021720:	f8d7 2a18 	ldr.w	r2, [r7, #2584]	; 0xa18
 8021724:	f8d7 3a78 	ldr.w	r3, [r7, #2680]	; 0xa78
 8021728:	4413      	add	r3, r2
 802172a:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18

            // Clamp the result
            res00 = MAX(res00, activation_min);
 802172e:	f8d7 2a24 	ldr.w	r2, [r7, #2596]	; 0xa24
 8021732:	f8d7 3a7c 	ldr.w	r3, [r7, #2684]	; 0xa7c
 8021736:	4293      	cmp	r3, r2
 8021738:	bfb8      	it	lt
 802173a:	4613      	movlt	r3, r2
 802173c:	f8c7 3a24 	str.w	r3, [r7, #2596]	; 0xa24
            res00 = MIN(res00, activation_max);
 8021740:	f8d7 2a24 	ldr.w	r2, [r7, #2596]	; 0xa24
 8021744:	f8d7 3a80 	ldr.w	r3, [r7, #2688]	; 0xa80
 8021748:	4293      	cmp	r3, r2
 802174a:	bfa8      	it	ge
 802174c:	4613      	movge	r3, r2
 802174e:	f8c7 3a24 	str.w	r3, [r7, #2596]	; 0xa24
            res01 = MAX(res01, activation_min);
 8021752:	f8d7 2a20 	ldr.w	r2, [r7, #2592]	; 0xa20
 8021756:	f8d7 3a7c 	ldr.w	r3, [r7, #2684]	; 0xa7c
 802175a:	4293      	cmp	r3, r2
 802175c:	bfb8      	it	lt
 802175e:	4613      	movlt	r3, r2
 8021760:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20
            res01 = MIN(res01, activation_max);
 8021764:	f8d7 2a20 	ldr.w	r2, [r7, #2592]	; 0xa20
 8021768:	f8d7 3a80 	ldr.w	r3, [r7, #2688]	; 0xa80
 802176c:	4293      	cmp	r3, r2
 802176e:	bfa8      	it	ge
 8021770:	4613      	movge	r3, r2
 8021772:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20
            res10 = MAX(res10, activation_min);
 8021776:	f8d7 2a1c 	ldr.w	r2, [r7, #2588]	; 0xa1c
 802177a:	f8d7 3a7c 	ldr.w	r3, [r7, #2684]	; 0xa7c
 802177e:	4293      	cmp	r3, r2
 8021780:	bfb8      	it	lt
 8021782:	4613      	movlt	r3, r2
 8021784:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
            res10 = MIN(res10, activation_max);
 8021788:	f8d7 2a1c 	ldr.w	r2, [r7, #2588]	; 0xa1c
 802178c:	f8d7 3a80 	ldr.w	r3, [r7, #2688]	; 0xa80
 8021790:	4293      	cmp	r3, r2
 8021792:	bfa8      	it	ge
 8021794:	4613      	movge	r3, r2
 8021796:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
            res11 = MAX(res11, activation_min);
 802179a:	f8d7 2a18 	ldr.w	r2, [r7, #2584]	; 0xa18
 802179e:	f8d7 3a7c 	ldr.w	r3, [r7, #2684]	; 0xa7c
 80217a2:	4293      	cmp	r3, r2
 80217a4:	bfb8      	it	lt
 80217a6:	4613      	movlt	r3, r2
 80217a8:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18
            res11 = MIN(res11, activation_max);
 80217ac:	f8d7 2a18 	ldr.w	r2, [r7, #2584]	; 0xa18
 80217b0:	f8d7 3a80 	ldr.w	r3, [r7, #2688]	; 0xa80
 80217b4:	4293      	cmp	r3, r2
 80217b6:	bfa8      	it	ge
 80217b8:	4613      	movge	r3, r2
 80217ba:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18

            dst_ptr[0] = (q7_t)res00;
 80217be:	f8d7 3a24 	ldr.w	r3, [r7, #2596]	; 0xa24
 80217c2:	b25b      	sxtb	r3, r3
 80217c4:	f8d7 2a38 	ldr.w	r2, [r7, #2616]	; 0xa38
 80217c8:	7013      	strb	r3, [r2, #0]
            dst_ptr[1] = (q7_t)res01;
 80217ca:	f8d7 3a38 	ldr.w	r3, [r7, #2616]	; 0xa38
 80217ce:	1c5a      	adds	r2, r3, #1
 80217d0:	f8d7 3a20 	ldr.w	r3, [r7, #2592]	; 0xa20
 80217d4:	b25b      	sxtb	r3, r3
 80217d6:	7013      	strb	r3, [r2, #0]
            dst_ptr += rhs_rows;
 80217d8:	f8d7 2a6c 	ldr.w	r2, [r7, #2668]	; 0xa6c
 80217dc:	f8d7 3a38 	ldr.w	r3, [r7, #2616]	; 0xa38
 80217e0:	4413      	add	r3, r2
 80217e2:	f8c7 3a38 	str.w	r3, [r7, #2616]	; 0xa38
            dst_ptr[0] = (q7_t)res10;
 80217e6:	f8d7 3a1c 	ldr.w	r3, [r7, #2588]	; 0xa1c
 80217ea:	b25b      	sxtb	r3, r3
 80217ec:	f8d7 2a38 	ldr.w	r2, [r7, #2616]	; 0xa38
 80217f0:	7013      	strb	r3, [r2, #0]
            dst_ptr[1] = (q7_t)res11;
 80217f2:	f8d7 3a38 	ldr.w	r3, [r7, #2616]	; 0xa38
 80217f6:	1c5a      	adds	r2, r3, #1
 80217f8:	f8d7 3a18 	ldr.w	r3, [r7, #2584]	; 0xa18
 80217fc:	b25b      	sxtb	r3, r3
 80217fe:	7013      	strb	r3, [r2, #0]
            dst_ptr += rhs_rows;
 8021800:	f8d7 2a6c 	ldr.w	r2, [r7, #2668]	; 0xa6c
 8021804:	f8d7 3a38 	ldr.w	r3, [r7, #2616]	; 0xa38
 8021808:	4413      	add	r3, r2
 802180a:	f8c7 3a38 	str.w	r3, [r7, #2616]	; 0xa38

            lhs_ptr += rhs_cols;
 802180e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8021812:	681a      	ldr	r2, [r3, #0]
 8021814:	f8d7 3a70 	ldr.w	r3, [r7, #2672]	; 0xa70
 8021818:	441a      	add	r2, r3
 802181a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 802181e:	601a      	str	r2, [r3, #0]

            lhs_rows_idx--;
 8021820:	f8d7 3a28 	ldr.w	r3, [r7, #2600]	; 0xa28
 8021824:	3b01      	subs	r3, #1
 8021826:	f8c7 3a28 	str.w	r3, [r7, #2600]	; 0xa28
        while (lhs_rows_idx)
 802182a:	f8d7 3a28 	ldr.w	r3, [r7, #2600]	; 0xa28
 802182e:	2b00      	cmp	r3, #0
 8021830:	f47e a8b3 	bne.w	801f99a <arm_nn_mat_mult_nt_t_s8+0x124>
        }

        // Left-over rows
        if (lhs_rows % 2)
 8021834:	f8d7 3a68 	ldr.w	r3, [r7, #2664]	; 0xa68
 8021838:	f003 0301 	and.w	r3, r3, #1
 802183c:	2b00      	cmp	r3, #0
 802183e:	f001 8195 	beq.w	8022b6c <arm_nn_mat_mult_nt_t_s8+0x32f6>
        {
            const q7_t *rhs_ptr = &rhs[0];
 8021842:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8021846:	f107 0338 	add.w	r3, r7, #56	; 0x38
 802184a:	681b      	ldr	r3, [r3, #0]
 802184c:	6013      	str	r3, [r2, #0]

            q31_t res00 = lhs_offset_contribution0;
 802184e:	f8d7 3a34 	ldr.w	r3, [r7, #2612]	; 0xa34
 8021852:	f8c7 3a10 	str.w	r3, [r7, #2576]	; 0xa10
            q31_t res01 = lhs_offset_contribution1;
 8021856:	f8d7 3a30 	ldr.w	r3, [r7, #2608]	; 0xa30
 802185a:	f8c7 3a0c 	str.w	r3, [r7, #2572]	; 0xa0c

            int32_t rhs_cols_idx = 0;
 802185e:	2300      	movs	r3, #0
 8021860:	f8c7 3a08 	str.w	r3, [r7, #2568]	; 0xa08

            q31_t val0, val1, val2, val3, val4, val5;
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 8021864:	f000 bf59 	b.w	802271a <arm_nn_mat_mult_nt_t_s8+0x2ea4>
 8021868:	f507 72c6 	add.w	r2, r7, #396	; 0x18c
 802186c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8021870:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 8021872:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8021876:	681b      	ldr	r3, [r3, #0]
 8021878:	681b      	ldr	r3, [r3, #0]
 802187a:	681b      	ldr	r3, [r3, #0]
 802187c:	461a      	mov	r2, r3
 802187e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8021882:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8021884:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8021888:	681b      	ldr	r3, [r3, #0]
 802188a:	681b      	ldr	r3, [r3, #0]
 802188c:	1d1a      	adds	r2, r3, #4
 802188e:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8021892:	681b      	ldr	r3, [r3, #0]
 8021894:	601a      	str	r2, [r3, #0]
    return (val);
 8021896:	f107 0374 	add.w	r3, r7, #116	; 0x74
 802189a:	681b      	ldr	r3, [r3, #0]
            {
                val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 802189c:	f8c7 39dc 	str.w	r3, [r7, #2524]	; 0x9dc
                val1 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 80218a0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80218a4:	681a      	ldr	r2, [r3, #0]
 80218a6:	f8d7 39ec 	ldr.w	r3, [r7, #2540]	; 0x9ec
 80218aa:	441a      	add	r2, r3
 80218ac:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80218b0:	601a      	str	r2, [r3, #0]
 80218b2:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80218b6:	681b      	ldr	r3, [r3, #0]
 80218b8:	681b      	ldr	r3, [r3, #0]
 80218ba:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 80218bc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80218c0:	601a      	str	r2, [r3, #0]
    return (val);
 80218c2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80218c6:	681b      	ldr	r3, [r3, #0]
 80218c8:	f8c7 39d8 	str.w	r3, [r7, #2520]	; 0x9d8
 80218cc:	f507 72ca 	add.w	r2, r7, #404	; 0x194
 80218d0:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80218d4:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 80218d6:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 80218da:	681b      	ldr	r3, [r3, #0]
 80218dc:	681b      	ldr	r3, [r3, #0]
 80218de:	681b      	ldr	r3, [r3, #0]
 80218e0:	461a      	mov	r2, r3
 80218e2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80218e6:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 80218e8:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 80218ec:	681b      	ldr	r3, [r3, #0]
 80218ee:	681b      	ldr	r3, [r3, #0]
 80218f0:	1d1a      	adds	r2, r3, #4
 80218f2:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 80218f6:	681b      	ldr	r3, [r3, #0]
 80218f8:	601a      	str	r2, [r3, #0]
    return (val);
 80218fa:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80218fe:	681b      	ldr	r3, [r3, #0]
                val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 8021900:	f8c7 39d4 	str.w	r3, [r7, #2516]	; 0x9d4
                val3 = __SXTB16(val0);
 8021904:	f8d7 29dc 	ldr.w	r2, [r7, #2524]	; 0x9dc
 8021908:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 802190c:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 802190e:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8021912:	681b      	ldr	r3, [r3, #0]
 8021914:	fa2f f283 	sxtb16	r2, r3
 8021918:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 802191c:	601a      	str	r2, [r3, #0]
  return(result);
 802191e:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8021922:	681b      	ldr	r3, [r3, #0]
 8021924:	f8c7 39d0 	str.w	r3, [r7, #2512]	; 0x9d0
                val5 = __SXTB16(val2);
 8021928:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 802192c:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 8021930:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8021932:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 8021936:	681b      	ldr	r3, [r3, #0]
 8021938:	fa2f f283 	sxtb16	r2, r3
 802193c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8021940:	601a      	str	r2, [r3, #0]
  return(result);
 8021942:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8021946:	681b      	ldr	r3, [r3, #0]
 8021948:	f8c7 39cc 	str.w	r3, [r7, #2508]	; 0x9cc
                val4 = __SXTB16(val1);
 802194c:	f8d7 29d8 	ldr.w	r2, [r7, #2520]	; 0x9d8
 8021950:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8021954:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8021956:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 802195a:	681b      	ldr	r3, [r3, #0]
 802195c:	fa2f f283 	sxtb16	r2, r3
 8021960:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8021964:	601a      	str	r2, [r3, #0]
  return(result);
 8021966:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 802196a:	681b      	ldr	r3, [r3, #0]
 802196c:	f8c7 39c8 	str.w	r3, [r7, #2504]	; 0x9c8
                val0 = __SXTB16_RORn(val0, 8);
 8021970:	f8d7 29dc 	ldr.w	r2, [r7, #2524]	; 0x9dc
 8021974:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8021978:	601a      	str	r2, [r3, #0]
 802197a:	f507 72e2 	add.w	r2, r7, #452	; 0x1c4
 802197e:	2308      	movs	r3, #8
 8021980:	6013      	str	r3, [r2, #0]
 8021982:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
 8021986:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 802198a:	681b      	ldr	r3, [r3, #0]
 802198c:	6013      	str	r3, [r2, #0]
 802198e:	f507 72de 	add.w	r2, r7, #444	; 0x1bc
 8021992:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 8021996:	681b      	ldr	r3, [r3, #0]
 8021998:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 802199a:	f507 72de 	add.w	r2, r7, #444	; 0x1bc
 802199e:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 80219a2:	681b      	ldr	r3, [r3, #0]
 80219a4:	f003 031f 	and.w	r3, r3, #31
 80219a8:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 80219aa:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 80219ae:	681b      	ldr	r3, [r3, #0]
 80219b0:	2b00      	cmp	r3, #0
 80219b2:	d103      	bne.n	80219bc <arm_nn_mat_mult_nt_t_s8+0x2146>
    return op1;
 80219b4:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 80219b8:	681a      	ldr	r2, [r3, #0]
 80219ba:	e006      	b.n	80219ca <arm_nn_mat_mult_nt_t_s8+0x2154>
  return (op1 >> op2) | (op1 << (32U - op2));
 80219bc:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
 80219c0:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 80219c4:	6812      	ldr	r2, [r2, #0]
 80219c6:	681b      	ldr	r3, [r3, #0]
 80219c8:	41da      	rors	r2, r3
 80219ca:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80219ce:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80219d0:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80219d4:	681b      	ldr	r3, [r3, #0]
 80219d6:	fa2f f283 	sxtb16	r2, r3
 80219da:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 80219de:	601a      	str	r2, [r3, #0]
  return(result);
 80219e0:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 80219e4:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 80219e6:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80219ea:	601a      	str	r2, [r3, #0]
  return result;
 80219ec:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80219f0:	681b      	ldr	r3, [r3, #0]
 80219f2:	f8c7 39dc 	str.w	r3, [r7, #2524]	; 0x9dc
                val2 = __SXTB16_RORn(val2, 8);
 80219f6:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 80219fa:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 80219fe:	601a      	str	r2, [r3, #0]
 8021a00:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 8021a04:	2308      	movs	r3, #8
 8021a06:	6013      	str	r3, [r2, #0]
 8021a08:	f507 72ee 	add.w	r2, r7, #476	; 0x1dc
 8021a0c:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 8021a10:	681b      	ldr	r3, [r3, #0]
 8021a12:	6013      	str	r3, [r2, #0]
 8021a14:	f507 72ec 	add.w	r2, r7, #472	; 0x1d8
 8021a18:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8021a1c:	681b      	ldr	r3, [r3, #0]
 8021a1e:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8021a20:	f507 72ec 	add.w	r2, r7, #472	; 0x1d8
 8021a24:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8021a28:	681b      	ldr	r3, [r3, #0]
 8021a2a:	f003 031f 	and.w	r3, r3, #31
 8021a2e:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8021a30:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8021a34:	681b      	ldr	r3, [r3, #0]
 8021a36:	2b00      	cmp	r3, #0
 8021a38:	d103      	bne.n	8021a42 <arm_nn_mat_mult_nt_t_s8+0x21cc>
    return op1;
 8021a3a:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 8021a3e:	681a      	ldr	r2, [r3, #0]
 8021a40:	e006      	b.n	8021a50 <arm_nn_mat_mult_nt_t_s8+0x21da>
  return (op1 >> op2) | (op1 << (32U - op2));
 8021a42:	f507 72ee 	add.w	r2, r7, #476	; 0x1dc
 8021a46:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8021a4a:	6812      	ldr	r2, [r2, #0]
 8021a4c:	681b      	ldr	r3, [r3, #0]
 8021a4e:	41da      	rors	r2, r3
 8021a50:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 8021a54:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8021a56:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 8021a5a:	681b      	ldr	r3, [r3, #0]
 8021a5c:	fa2f f283 	sxtb16	r2, r3
 8021a60:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8021a64:	601a      	str	r2, [r3, #0]
  return(result);
 8021a66:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8021a6a:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 8021a6c:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 8021a70:	601a      	str	r2, [r3, #0]
  return result;
 8021a72:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 8021a76:	681b      	ldr	r3, [r3, #0]
 8021a78:	f8c7 39d4 	str.w	r3, [r7, #2516]	; 0x9d4
                val1 = __SXTB16_RORn(val1, 8);
 8021a7c:	f8d7 29d8 	ldr.w	r2, [r7, #2520]	; 0x9d8
 8021a80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8021a84:	601a      	str	r2, [r3, #0]
 8021a86:	f507 72fe 	add.w	r2, r7, #508	; 0x1fc
 8021a8a:	2308      	movs	r3, #8
 8021a8c:	6013      	str	r3, [r2, #0]
 8021a8e:	f507 72fc 	add.w	r2, r7, #504	; 0x1f8
 8021a92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8021a96:	681b      	ldr	r3, [r3, #0]
 8021a98:	6013      	str	r3, [r2, #0]
 8021a9a:	f507 72fa 	add.w	r2, r7, #500	; 0x1f4
 8021a9e:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8021aa2:	681b      	ldr	r3, [r3, #0]
 8021aa4:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8021aa6:	f507 72fa 	add.w	r2, r7, #500	; 0x1f4
 8021aaa:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 8021aae:	681b      	ldr	r3, [r3, #0]
 8021ab0:	f003 031f 	and.w	r3, r3, #31
 8021ab4:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8021ab6:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 8021aba:	681b      	ldr	r3, [r3, #0]
 8021abc:	2b00      	cmp	r3, #0
 8021abe:	d103      	bne.n	8021ac8 <arm_nn_mat_mult_nt_t_s8+0x2252>
    return op1;
 8021ac0:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8021ac4:	681a      	ldr	r2, [r3, #0]
 8021ac6:	e006      	b.n	8021ad6 <arm_nn_mat_mult_nt_t_s8+0x2260>
  return (op1 >> op2) | (op1 << (32U - op2));
 8021ac8:	f507 72fc 	add.w	r2, r7, #504	; 0x1f8
 8021acc:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 8021ad0:	6812      	ldr	r2, [r2, #0]
 8021ad2:	681b      	ldr	r3, [r3, #0]
 8021ad4:	41da      	rors	r2, r3
 8021ad6:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8021ada:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8021adc:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8021ae0:	681b      	ldr	r3, [r3, #0]
 8021ae2:	fa2f f283 	sxtb16	r2, r3
 8021ae6:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 8021aea:	601a      	str	r2, [r3, #0]
  return(result);
 8021aec:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 8021af0:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 8021af2:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8021af6:	601a      	str	r2, [r3, #0]
  return result;
 8021af8:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8021afc:	681b      	ldr	r3, [r3, #0]
 8021afe:	f8c7 39d8 	str.w	r3, [r7, #2520]	; 0x9d8

                // 4 x MAC res00, res01
                res00 = __SMLAD(val5, val3, res00);
 8021b02:	f8d7 29cc 	ldr.w	r2, [r7, #2508]	; 0x9cc
 8021b06:	f8d7 19d0 	ldr.w	r1, [r7, #2512]	; 0x9d0
 8021b0a:	f8d7 0a10 	ldr.w	r0, [r7, #2576]	; 0xa10
 8021b0e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8021b12:	601a      	str	r2, [r3, #0]
 8021b14:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8021b18:	6019      	str	r1, [r3, #0]
 8021b1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8021b1e:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8021b20:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8021b24:	6819      	ldr	r1, [r3, #0]
 8021b26:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8021b2a:	681a      	ldr	r2, [r3, #0]
 8021b2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8021b30:	681b      	ldr	r3, [r3, #0]
 8021b32:	fb21 3202 	smlad	r2, r1, r2, r3
 8021b36:	f507 7301 	add.w	r3, r7, #516	; 0x204
 8021b3a:	601a      	str	r2, [r3, #0]
  return(result);
 8021b3c:	f507 7301 	add.w	r3, r7, #516	; 0x204
 8021b40:	681b      	ldr	r3, [r3, #0]
 8021b42:	f8c7 3a10 	str.w	r3, [r7, #2576]	; 0xa10
                res00 = __SMLAD(val2, val0, res00);
 8021b46:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 8021b4a:	f8d7 19dc 	ldr.w	r1, [r7, #2524]	; 0x9dc
 8021b4e:	f8d7 0a10 	ldr.w	r0, [r7, #2576]	; 0xa10
 8021b52:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8021b56:	601a      	str	r2, [r3, #0]
 8021b58:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8021b5c:	6019      	str	r1, [r3, #0]
 8021b5e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8021b62:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8021b64:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8021b68:	6819      	ldr	r1, [r3, #0]
 8021b6a:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8021b6e:	681a      	ldr	r2, [r3, #0]
 8021b70:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8021b74:	681b      	ldr	r3, [r3, #0]
 8021b76:	fb21 3202 	smlad	r2, r1, r2, r3
 8021b7a:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8021b7e:	601a      	str	r2, [r3, #0]
  return(result);
 8021b80:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8021b84:	681b      	ldr	r3, [r3, #0]
 8021b86:	f8c7 3a10 	str.w	r3, [r7, #2576]	; 0xa10
                res01 = __SMLAD(val5, val4, res01);
 8021b8a:	f8d7 29cc 	ldr.w	r2, [r7, #2508]	; 0x9cc
 8021b8e:	f8d7 19c8 	ldr.w	r1, [r7, #2504]	; 0x9c8
 8021b92:	f8d7 0a0c 	ldr.w	r0, [r7, #2572]	; 0xa0c
 8021b96:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8021b9a:	601a      	str	r2, [r3, #0]
 8021b9c:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 8021ba0:	6019      	str	r1, [r3, #0]
 8021ba2:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8021ba6:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8021ba8:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8021bac:	6819      	ldr	r1, [r3, #0]
 8021bae:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 8021bb2:	681a      	ldr	r2, [r3, #0]
 8021bb4:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8021bb8:	681b      	ldr	r3, [r3, #0]
 8021bba:	fb21 3202 	smlad	r2, r1, r2, r3
 8021bbe:	f507 7309 	add.w	r3, r7, #548	; 0x224
 8021bc2:	601a      	str	r2, [r3, #0]
  return(result);
 8021bc4:	f507 7309 	add.w	r3, r7, #548	; 0x224
 8021bc8:	681b      	ldr	r3, [r3, #0]
 8021bca:	f8c7 3a0c 	str.w	r3, [r7, #2572]	; 0xa0c
                res01 = __SMLAD(val2, val1, res01);
 8021bce:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 8021bd2:	f8d7 19d8 	ldr.w	r1, [r7, #2520]	; 0x9d8
 8021bd6:	f8d7 0a0c 	ldr.w	r0, [r7, #2572]	; 0xa0c
 8021bda:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8021bde:	601a      	str	r2, [r3, #0]
 8021be0:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8021be4:	6019      	str	r1, [r3, #0]
 8021be6:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8021bea:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8021bec:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8021bf0:	6819      	ldr	r1, [r3, #0]
 8021bf2:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8021bf6:	681a      	ldr	r2, [r3, #0]
 8021bf8:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8021bfc:	681b      	ldr	r3, [r3, #0]
 8021bfe:	fb21 3202 	smlad	r2, r1, r2, r3
 8021c02:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8021c06:	601a      	str	r2, [r3, #0]
  return(result);
 8021c08:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8021c0c:	681b      	ldr	r3, [r3, #0]
 8021c0e:	f8c7 3a0c 	str.w	r3, [r7, #2572]	; 0xa0c
 8021c12:	f507 7211 	add.w	r2, r7, #580	; 0x244
 8021c16:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8021c1a:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 8021c1c:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8021c20:	681b      	ldr	r3, [r3, #0]
 8021c22:	681b      	ldr	r3, [r3, #0]
 8021c24:	681b      	ldr	r3, [r3, #0]
 8021c26:	461a      	mov	r2, r3
 8021c28:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8021c2c:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8021c2e:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8021c32:	681b      	ldr	r3, [r3, #0]
 8021c34:	681b      	ldr	r3, [r3, #0]
 8021c36:	1d1a      	adds	r2, r3, #4
 8021c38:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8021c3c:	681b      	ldr	r3, [r3, #0]
 8021c3e:	601a      	str	r2, [r3, #0]
    return (val);
 8021c40:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8021c44:	681b      	ldr	r3, [r3, #0]

                val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 8021c46:	f8c7 39dc 	str.w	r3, [r7, #2524]	; 0x9dc
                val1 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 8021c4a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8021c4e:	681a      	ldr	r2, [r3, #0]
 8021c50:	f8d7 39ec 	ldr.w	r3, [r7, #2540]	; 0x9ec
 8021c54:	441a      	add	r2, r3
 8021c56:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8021c5a:	601a      	str	r2, [r3, #0]
 8021c5c:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8021c60:	681b      	ldr	r3, [r3, #0]
 8021c62:	681b      	ldr	r3, [r3, #0]
 8021c64:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 8021c66:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8021c6a:	601a      	str	r2, [r3, #0]
    return (val);
 8021c6c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8021c70:	681b      	ldr	r3, [r3, #0]
 8021c72:	f8c7 39d8 	str.w	r3, [r7, #2520]	; 0x9d8
 8021c76:	f507 7213 	add.w	r2, r7, #588	; 0x24c
 8021c7a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8021c7e:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 8021c80:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 8021c84:	681b      	ldr	r3, [r3, #0]
 8021c86:	681b      	ldr	r3, [r3, #0]
 8021c88:	681b      	ldr	r3, [r3, #0]
 8021c8a:	461a      	mov	r2, r3
 8021c8c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8021c90:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8021c92:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 8021c96:	681b      	ldr	r3, [r3, #0]
 8021c98:	681b      	ldr	r3, [r3, #0]
 8021c9a:	1d1a      	adds	r2, r3, #4
 8021c9c:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 8021ca0:	681b      	ldr	r3, [r3, #0]
 8021ca2:	601a      	str	r2, [r3, #0]
    return (val);
 8021ca4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8021ca8:	681b      	ldr	r3, [r3, #0]
                val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 8021caa:	f8c7 39d4 	str.w	r3, [r7, #2516]	; 0x9d4
                val3 = __SXTB16(val0);
 8021cae:	f8d7 29dc 	ldr.w	r2, [r7, #2524]	; 0x9dc
 8021cb2:	f507 7315 	add.w	r3, r7, #596	; 0x254
 8021cb6:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8021cb8:	f507 7315 	add.w	r3, r7, #596	; 0x254
 8021cbc:	681b      	ldr	r3, [r3, #0]
 8021cbe:	fa2f f283 	sxtb16	r2, r3
 8021cc2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8021cc6:	601a      	str	r2, [r3, #0]
  return(result);
 8021cc8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8021ccc:	681b      	ldr	r3, [r3, #0]
 8021cce:	f8c7 39d0 	str.w	r3, [r7, #2512]	; 0x9d0
                val5 = __SXTB16(val2);
 8021cd2:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 8021cd6:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8021cda:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8021cdc:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8021ce0:	681b      	ldr	r3, [r3, #0]
 8021ce2:	fa2f f283 	sxtb16	r2, r3
 8021ce6:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8021cea:	601a      	str	r2, [r3, #0]
  return(result);
 8021cec:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8021cf0:	681b      	ldr	r3, [r3, #0]
 8021cf2:	f8c7 39cc 	str.w	r3, [r7, #2508]	; 0x9cc
                val4 = __SXTB16(val1);
 8021cf6:	f8d7 29d8 	ldr.w	r2, [r7, #2520]	; 0x9d8
 8021cfa:	f507 7319 	add.w	r3, r7, #612	; 0x264
 8021cfe:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8021d00:	f507 7319 	add.w	r3, r7, #612	; 0x264
 8021d04:	681b      	ldr	r3, [r3, #0]
 8021d06:	fa2f f283 	sxtb16	r2, r3
 8021d0a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8021d0e:	601a      	str	r2, [r3, #0]
  return(result);
 8021d10:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8021d14:	681b      	ldr	r3, [r3, #0]
 8021d16:	f8c7 39c8 	str.w	r3, [r7, #2504]	; 0x9c8
                val0 = __SXTB16_RORn(val0, 8);
 8021d1a:	f8d7 29dc 	ldr.w	r2, [r7, #2524]	; 0x9dc
 8021d1e:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8021d22:	601a      	str	r2, [r3, #0]
 8021d24:	f507 721f 	add.w	r2, r7, #636	; 0x27c
 8021d28:	2308      	movs	r3, #8
 8021d2a:	6013      	str	r3, [r2, #0]
 8021d2c:	f507 721e 	add.w	r2, r7, #632	; 0x278
 8021d30:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8021d34:	681b      	ldr	r3, [r3, #0]
 8021d36:	6013      	str	r3, [r2, #0]
 8021d38:	f507 721d 	add.w	r2, r7, #628	; 0x274
 8021d3c:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 8021d40:	681b      	ldr	r3, [r3, #0]
 8021d42:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8021d44:	f507 721d 	add.w	r2, r7, #628	; 0x274
 8021d48:	f507 731d 	add.w	r3, r7, #628	; 0x274
 8021d4c:	681b      	ldr	r3, [r3, #0]
 8021d4e:	f003 031f 	and.w	r3, r3, #31
 8021d52:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8021d54:	f507 731d 	add.w	r3, r7, #628	; 0x274
 8021d58:	681b      	ldr	r3, [r3, #0]
 8021d5a:	2b00      	cmp	r3, #0
 8021d5c:	d103      	bne.n	8021d66 <arm_nn_mat_mult_nt_t_s8+0x24f0>
    return op1;
 8021d5e:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8021d62:	681a      	ldr	r2, [r3, #0]
 8021d64:	e006      	b.n	8021d74 <arm_nn_mat_mult_nt_t_s8+0x24fe>
  return (op1 >> op2) | (op1 << (32U - op2));
 8021d66:	f507 721e 	add.w	r2, r7, #632	; 0x278
 8021d6a:	f507 731d 	add.w	r3, r7, #628	; 0x274
 8021d6e:	6812      	ldr	r2, [r2, #0]
 8021d70:	681b      	ldr	r3, [r3, #0]
 8021d72:	41da      	rors	r2, r3
 8021d74:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8021d78:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8021d7a:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8021d7e:	681b      	ldr	r3, [r3, #0]
 8021d80:	fa2f f283 	sxtb16	r2, r3
 8021d84:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 8021d88:	601a      	str	r2, [r3, #0]
  return(result);
 8021d8a:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 8021d8e:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 8021d90:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8021d94:	601a      	str	r2, [r3, #0]
  return result;
 8021d96:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8021d9a:	681b      	ldr	r3, [r3, #0]
 8021d9c:	f8c7 39dc 	str.w	r3, [r7, #2524]	; 0x9dc
                val2 = __SXTB16_RORn(val2, 8);
 8021da0:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 8021da4:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 8021da8:	601a      	str	r2, [r3, #0]
 8021daa:	f507 7226 	add.w	r2, r7, #664	; 0x298
 8021dae:	2308      	movs	r3, #8
 8021db0:	6013      	str	r3, [r2, #0]
 8021db2:	f507 7225 	add.w	r2, r7, #660	; 0x294
 8021db6:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 8021dba:	681b      	ldr	r3, [r3, #0]
 8021dbc:	6013      	str	r3, [r2, #0]
 8021dbe:	f507 7224 	add.w	r2, r7, #656	; 0x290
 8021dc2:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8021dc6:	681b      	ldr	r3, [r3, #0]
 8021dc8:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8021dca:	f507 7224 	add.w	r2, r7, #656	; 0x290
 8021dce:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8021dd2:	681b      	ldr	r3, [r3, #0]
 8021dd4:	f003 031f 	and.w	r3, r3, #31
 8021dd8:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8021dda:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8021dde:	681b      	ldr	r3, [r3, #0]
 8021de0:	2b00      	cmp	r3, #0
 8021de2:	d103      	bne.n	8021dec <arm_nn_mat_mult_nt_t_s8+0x2576>
    return op1;
 8021de4:	f507 7325 	add.w	r3, r7, #660	; 0x294
 8021de8:	681a      	ldr	r2, [r3, #0]
 8021dea:	e006      	b.n	8021dfa <arm_nn_mat_mult_nt_t_s8+0x2584>
  return (op1 >> op2) | (op1 << (32U - op2));
 8021dec:	f507 7225 	add.w	r2, r7, #660	; 0x294
 8021df0:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8021df4:	6812      	ldr	r2, [r2, #0]
 8021df6:	681b      	ldr	r3, [r3, #0]
 8021df8:	41da      	rors	r2, r3
 8021dfa:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 8021dfe:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8021e00:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 8021e04:	681b      	ldr	r3, [r3, #0]
 8021e06:	fa2f f283 	sxtb16	r2, r3
 8021e0a:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8021e0e:	601a      	str	r2, [r3, #0]
  return(result);
 8021e10:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8021e14:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 8021e16:	f507 7321 	add.w	r3, r7, #644	; 0x284
 8021e1a:	601a      	str	r2, [r3, #0]
  return result;
 8021e1c:	f507 7321 	add.w	r3, r7, #644	; 0x284
 8021e20:	681b      	ldr	r3, [r3, #0]
 8021e22:	f8c7 39d4 	str.w	r3, [r7, #2516]	; 0x9d4
                val1 = __SXTB16_RORn(val1, 8);
 8021e26:	f8d7 29d8 	ldr.w	r2, [r7, #2520]	; 0x9d8
 8021e2a:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8021e2e:	601a      	str	r2, [r3, #0]
 8021e30:	f507 722d 	add.w	r2, r7, #692	; 0x2b4
 8021e34:	2308      	movs	r3, #8
 8021e36:	6013      	str	r3, [r2, #0]
 8021e38:	f507 722c 	add.w	r2, r7, #688	; 0x2b0
 8021e3c:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8021e40:	681b      	ldr	r3, [r3, #0]
 8021e42:	6013      	str	r3, [r2, #0]
 8021e44:	f507 722b 	add.w	r2, r7, #684	; 0x2ac
 8021e48:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 8021e4c:	681b      	ldr	r3, [r3, #0]
 8021e4e:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8021e50:	f507 722b 	add.w	r2, r7, #684	; 0x2ac
 8021e54:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 8021e58:	681b      	ldr	r3, [r3, #0]
 8021e5a:	f003 031f 	and.w	r3, r3, #31
 8021e5e:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8021e60:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 8021e64:	681b      	ldr	r3, [r3, #0]
 8021e66:	2b00      	cmp	r3, #0
 8021e68:	d103      	bne.n	8021e72 <arm_nn_mat_mult_nt_t_s8+0x25fc>
    return op1;
 8021e6a:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8021e6e:	681a      	ldr	r2, [r3, #0]
 8021e70:	e006      	b.n	8021e80 <arm_nn_mat_mult_nt_t_s8+0x260a>
  return (op1 >> op2) | (op1 << (32U - op2));
 8021e72:	f507 722c 	add.w	r2, r7, #688	; 0x2b0
 8021e76:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 8021e7a:	6812      	ldr	r2, [r2, #0]
 8021e7c:	681b      	ldr	r3, [r3, #0]
 8021e7e:	41da      	rors	r2, r3
 8021e80:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8021e84:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8021e86:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8021e8a:	681b      	ldr	r3, [r3, #0]
 8021e8c:	fa2f f283 	sxtb16	r2, r3
 8021e90:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 8021e94:	601a      	str	r2, [r3, #0]
  return(result);
 8021e96:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 8021e9a:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 8021e9c:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8021ea0:	601a      	str	r2, [r3, #0]
  return result;
 8021ea2:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8021ea6:	681b      	ldr	r3, [r3, #0]
 8021ea8:	f8c7 39d8 	str.w	r3, [r7, #2520]	; 0x9d8

                // 4 x MAC res00, res01
                res00 = __SMLAD(val5, val3, res00);
 8021eac:	f8d7 29cc 	ldr.w	r2, [r7, #2508]	; 0x9cc
 8021eb0:	f8d7 19d0 	ldr.w	r1, [r7, #2512]	; 0x9d0
 8021eb4:	f8d7 0a10 	ldr.w	r0, [r7, #2576]	; 0xa10
 8021eb8:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8021ebc:	601a      	str	r2, [r3, #0]
 8021ebe:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 8021ec2:	6019      	str	r1, [r3, #0]
 8021ec4:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8021ec8:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8021eca:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8021ece:	6819      	ldr	r1, [r3, #0]
 8021ed0:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 8021ed4:	681a      	ldr	r2, [r3, #0]
 8021ed6:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8021eda:	681b      	ldr	r3, [r3, #0]
 8021edc:	fb21 3202 	smlad	r2, r1, r2, r3
 8021ee0:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 8021ee4:	601a      	str	r2, [r3, #0]
  return(result);
 8021ee6:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 8021eea:	681b      	ldr	r3, [r3, #0]
 8021eec:	f8c7 3a10 	str.w	r3, [r7, #2576]	; 0xa10
                res00 = __SMLAD(val2, val0, res00);
 8021ef0:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 8021ef4:	f8d7 19dc 	ldr.w	r1, [r7, #2524]	; 0x9dc
 8021ef8:	f8d7 0a10 	ldr.w	r0, [r7, #2576]	; 0xa10
 8021efc:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8021f00:	601a      	str	r2, [r3, #0]
 8021f02:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 8021f06:	6019      	str	r1, [r3, #0]
 8021f08:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8021f0c:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8021f0e:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8021f12:	6819      	ldr	r1, [r3, #0]
 8021f14:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 8021f18:	681a      	ldr	r2, [r3, #0]
 8021f1a:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8021f1e:	681b      	ldr	r3, [r3, #0]
 8021f20:	fb21 3202 	smlad	r2, r1, r2, r3
 8021f24:	f507 7333 	add.w	r3, r7, #716	; 0x2cc
 8021f28:	601a      	str	r2, [r3, #0]
  return(result);
 8021f2a:	f507 7333 	add.w	r3, r7, #716	; 0x2cc
 8021f2e:	681b      	ldr	r3, [r3, #0]
 8021f30:	f8c7 3a10 	str.w	r3, [r7, #2576]	; 0xa10
                res01 = __SMLAD(val5, val4, res01);
 8021f34:	f8d7 29cc 	ldr.w	r2, [r7, #2508]	; 0x9cc
 8021f38:	f8d7 19c8 	ldr.w	r1, [r7, #2504]	; 0x9c8
 8021f3c:	f8d7 0a0c 	ldr.w	r0, [r7, #2572]	; 0xa0c
 8021f40:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 8021f44:	601a      	str	r2, [r3, #0]
 8021f46:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 8021f4a:	6019      	str	r1, [r3, #0]
 8021f4c:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8021f50:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8021f52:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 8021f56:	6819      	ldr	r1, [r3, #0]
 8021f58:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 8021f5c:	681a      	ldr	r2, [r3, #0]
 8021f5e:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8021f62:	681b      	ldr	r3, [r3, #0]
 8021f64:	fb21 3202 	smlad	r2, r1, r2, r3
 8021f68:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 8021f6c:	601a      	str	r2, [r3, #0]
  return(result);
 8021f6e:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 8021f72:	681b      	ldr	r3, [r3, #0]
 8021f74:	f8c7 3a0c 	str.w	r3, [r7, #2572]	; 0xa0c
                res01 = __SMLAD(val2, val1, res01);
 8021f78:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 8021f7c:	f8d7 19d8 	ldr.w	r1, [r7, #2520]	; 0x9d8
 8021f80:	f8d7 0a0c 	ldr.w	r0, [r7, #2572]	; 0xa0c
 8021f84:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8021f88:	601a      	str	r2, [r3, #0]
 8021f8a:	f507 733d 	add.w	r3, r7, #756	; 0x2f4
 8021f8e:	6019      	str	r1, [r3, #0]
 8021f90:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8021f94:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8021f96:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8021f9a:	6819      	ldr	r1, [r3, #0]
 8021f9c:	f507 733d 	add.w	r3, r7, #756	; 0x2f4
 8021fa0:	681a      	ldr	r2, [r3, #0]
 8021fa2:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8021fa6:	681b      	ldr	r3, [r3, #0]
 8021fa8:	fb21 3202 	smlad	r2, r1, r2, r3
 8021fac:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 8021fb0:	601a      	str	r2, [r3, #0]
  return(result);
 8021fb2:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 8021fb6:	681b      	ldr	r3, [r3, #0]
 8021fb8:	f8c7 3a0c 	str.w	r3, [r7, #2572]	; 0xa0c
 8021fbc:	f507 723f 	add.w	r2, r7, #764	; 0x2fc
 8021fc0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8021fc4:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 8021fc6:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 8021fca:	681b      	ldr	r3, [r3, #0]
 8021fcc:	681b      	ldr	r3, [r3, #0]
 8021fce:	681b      	ldr	r3, [r3, #0]
 8021fd0:	461a      	mov	r2, r3
 8021fd2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8021fd6:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8021fd8:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 8021fdc:	681b      	ldr	r3, [r3, #0]
 8021fde:	681b      	ldr	r3, [r3, #0]
 8021fe0:	1d1a      	adds	r2, r3, #4
 8021fe2:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 8021fe6:	681b      	ldr	r3, [r3, #0]
 8021fe8:	601a      	str	r2, [r3, #0]
    return (val);
 8021fea:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8021fee:	681b      	ldr	r3, [r3, #0]

                val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 8021ff0:	f8c7 39dc 	str.w	r3, [r7, #2524]	; 0x9dc
                val1 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 8021ff4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8021ff8:	681a      	ldr	r2, [r3, #0]
 8021ffa:	f8d7 39ec 	ldr.w	r3, [r7, #2540]	; 0x9ec
 8021ffe:	441a      	add	r2, r3
 8022000:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8022004:	601a      	str	r2, [r3, #0]
 8022006:	f507 7340 	add.w	r3, r7, #768	; 0x300
 802200a:	681b      	ldr	r3, [r3, #0]
 802200c:	681b      	ldr	r3, [r3, #0]
 802200e:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 8022010:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8022014:	601a      	str	r2, [r3, #0]
    return (val);
 8022016:	f107 0358 	add.w	r3, r7, #88	; 0x58
 802201a:	681b      	ldr	r3, [r3, #0]
 802201c:	f8c7 39d8 	str.w	r3, [r7, #2520]	; 0x9d8
 8022020:	f507 7241 	add.w	r2, r7, #772	; 0x304
 8022024:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8022028:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 802202a:	f507 7341 	add.w	r3, r7, #772	; 0x304
 802202e:	681b      	ldr	r3, [r3, #0]
 8022030:	681b      	ldr	r3, [r3, #0]
 8022032:	681b      	ldr	r3, [r3, #0]
 8022034:	461a      	mov	r2, r3
 8022036:	f107 0354 	add.w	r3, r7, #84	; 0x54
 802203a:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 802203c:	f507 7341 	add.w	r3, r7, #772	; 0x304
 8022040:	681b      	ldr	r3, [r3, #0]
 8022042:	681b      	ldr	r3, [r3, #0]
 8022044:	1d1a      	adds	r2, r3, #4
 8022046:	f507 7341 	add.w	r3, r7, #772	; 0x304
 802204a:	681b      	ldr	r3, [r3, #0]
 802204c:	601a      	str	r2, [r3, #0]
    return (val);
 802204e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8022052:	681b      	ldr	r3, [r3, #0]
                val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 8022054:	f8c7 39d4 	str.w	r3, [r7, #2516]	; 0x9d4
                val3 = __SXTB16(val0);
 8022058:	f8d7 29dc 	ldr.w	r2, [r7, #2524]	; 0x9dc
 802205c:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 8022060:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8022062:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 8022066:	681b      	ldr	r3, [r3, #0]
 8022068:	fa2f f283 	sxtb16	r2, r3
 802206c:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8022070:	601a      	str	r2, [r3, #0]
  return(result);
 8022072:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8022076:	681b      	ldr	r3, [r3, #0]
 8022078:	f8c7 39d0 	str.w	r3, [r7, #2512]	; 0x9d0
                val5 = __SXTB16(val2);
 802207c:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 8022080:	f507 7345 	add.w	r3, r7, #788	; 0x314
 8022084:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8022086:	f507 7345 	add.w	r3, r7, #788	; 0x314
 802208a:	681b      	ldr	r3, [r3, #0]
 802208c:	fa2f f283 	sxtb16	r2, r3
 8022090:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8022094:	601a      	str	r2, [r3, #0]
  return(result);
 8022096:	f507 7344 	add.w	r3, r7, #784	; 0x310
 802209a:	681b      	ldr	r3, [r3, #0]
 802209c:	f8c7 39cc 	str.w	r3, [r7, #2508]	; 0x9cc
                val4 = __SXTB16(val1);
 80220a0:	f8d7 29d8 	ldr.w	r2, [r7, #2520]	; 0x9d8
 80220a4:	f507 7347 	add.w	r3, r7, #796	; 0x31c
 80220a8:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80220aa:	f507 7347 	add.w	r3, r7, #796	; 0x31c
 80220ae:	681b      	ldr	r3, [r3, #0]
 80220b0:	fa2f f283 	sxtb16	r2, r3
 80220b4:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80220b8:	601a      	str	r2, [r3, #0]
  return(result);
 80220ba:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80220be:	681b      	ldr	r3, [r3, #0]
 80220c0:	f8c7 39c8 	str.w	r3, [r7, #2504]	; 0x9c8
                val0 = __SXTB16_RORn(val0, 8);
 80220c4:	f8d7 29dc 	ldr.w	r2, [r7, #2524]	; 0x9dc
 80220c8:	f507 734e 	add.w	r3, r7, #824	; 0x338
 80220cc:	601a      	str	r2, [r3, #0]
 80220ce:	f507 724d 	add.w	r2, r7, #820	; 0x334
 80220d2:	2308      	movs	r3, #8
 80220d4:	6013      	str	r3, [r2, #0]
 80220d6:	f507 724c 	add.w	r2, r7, #816	; 0x330
 80220da:	f507 734e 	add.w	r3, r7, #824	; 0x338
 80220de:	681b      	ldr	r3, [r3, #0]
 80220e0:	6013      	str	r3, [r2, #0]
 80220e2:	f507 724b 	add.w	r2, r7, #812	; 0x32c
 80220e6:	f507 734d 	add.w	r3, r7, #820	; 0x334
 80220ea:	681b      	ldr	r3, [r3, #0]
 80220ec:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 80220ee:	f507 724b 	add.w	r2, r7, #812	; 0x32c
 80220f2:	f507 734b 	add.w	r3, r7, #812	; 0x32c
 80220f6:	681b      	ldr	r3, [r3, #0]
 80220f8:	f003 031f 	and.w	r3, r3, #31
 80220fc:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 80220fe:	f507 734b 	add.w	r3, r7, #812	; 0x32c
 8022102:	681b      	ldr	r3, [r3, #0]
 8022104:	2b00      	cmp	r3, #0
 8022106:	d103      	bne.n	8022110 <arm_nn_mat_mult_nt_t_s8+0x289a>
    return op1;
 8022108:	f507 734c 	add.w	r3, r7, #816	; 0x330
 802210c:	681a      	ldr	r2, [r3, #0]
 802210e:	e006      	b.n	802211e <arm_nn_mat_mult_nt_t_s8+0x28a8>
  return (op1 >> op2) | (op1 << (32U - op2));
 8022110:	f507 724c 	add.w	r2, r7, #816	; 0x330
 8022114:	f507 734b 	add.w	r3, r7, #812	; 0x32c
 8022118:	6812      	ldr	r2, [r2, #0]
 802211a:	681b      	ldr	r3, [r3, #0]
 802211c:	41da      	rors	r2, r3
 802211e:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8022122:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8022124:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8022128:	681b      	ldr	r3, [r3, #0]
 802212a:	fa2f f283 	sxtb16	r2, r3
 802212e:	f507 7349 	add.w	r3, r7, #804	; 0x324
 8022132:	601a      	str	r2, [r3, #0]
  return(result);
 8022134:	f507 7349 	add.w	r3, r7, #804	; 0x324
 8022138:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 802213a:	f507 7348 	add.w	r3, r7, #800	; 0x320
 802213e:	601a      	str	r2, [r3, #0]
  return result;
 8022140:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8022144:	681b      	ldr	r3, [r3, #0]
 8022146:	f8c7 39dc 	str.w	r3, [r7, #2524]	; 0x9dc
                val2 = __SXTB16_RORn(val2, 8);
 802214a:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 802214e:	f507 7355 	add.w	r3, r7, #852	; 0x354
 8022152:	601a      	str	r2, [r3, #0]
 8022154:	f507 7254 	add.w	r2, r7, #848	; 0x350
 8022158:	2308      	movs	r3, #8
 802215a:	6013      	str	r3, [r2, #0]
 802215c:	f507 7253 	add.w	r2, r7, #844	; 0x34c
 8022160:	f507 7355 	add.w	r3, r7, #852	; 0x354
 8022164:	681b      	ldr	r3, [r3, #0]
 8022166:	6013      	str	r3, [r2, #0]
 8022168:	f507 7252 	add.w	r2, r7, #840	; 0x348
 802216c:	f507 7354 	add.w	r3, r7, #848	; 0x350
 8022170:	681b      	ldr	r3, [r3, #0]
 8022172:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8022174:	f507 7252 	add.w	r2, r7, #840	; 0x348
 8022178:	f507 7352 	add.w	r3, r7, #840	; 0x348
 802217c:	681b      	ldr	r3, [r3, #0]
 802217e:	f003 031f 	and.w	r3, r3, #31
 8022182:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8022184:	f507 7352 	add.w	r3, r7, #840	; 0x348
 8022188:	681b      	ldr	r3, [r3, #0]
 802218a:	2b00      	cmp	r3, #0
 802218c:	d103      	bne.n	8022196 <arm_nn_mat_mult_nt_t_s8+0x2920>
    return op1;
 802218e:	f507 7353 	add.w	r3, r7, #844	; 0x34c
 8022192:	681a      	ldr	r2, [r3, #0]
 8022194:	e006      	b.n	80221a4 <arm_nn_mat_mult_nt_t_s8+0x292e>
  return (op1 >> op2) | (op1 << (32U - op2));
 8022196:	f507 7253 	add.w	r2, r7, #844	; 0x34c
 802219a:	f507 7352 	add.w	r3, r7, #840	; 0x348
 802219e:	6812      	ldr	r2, [r2, #0]
 80221a0:	681b      	ldr	r3, [r3, #0]
 80221a2:	41da      	rors	r2, r3
 80221a4:	f507 7351 	add.w	r3, r7, #836	; 0x344
 80221a8:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80221aa:	f507 7351 	add.w	r3, r7, #836	; 0x344
 80221ae:	681b      	ldr	r3, [r3, #0]
 80221b0:	fa2f f283 	sxtb16	r2, r3
 80221b4:	f507 7350 	add.w	r3, r7, #832	; 0x340
 80221b8:	601a      	str	r2, [r3, #0]
  return(result);
 80221ba:	f507 7350 	add.w	r3, r7, #832	; 0x340
 80221be:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 80221c0:	f507 734f 	add.w	r3, r7, #828	; 0x33c
 80221c4:	601a      	str	r2, [r3, #0]
  return result;
 80221c6:	f507 734f 	add.w	r3, r7, #828	; 0x33c
 80221ca:	681b      	ldr	r3, [r3, #0]
 80221cc:	f8c7 39d4 	str.w	r3, [r7, #2516]	; 0x9d4
                val1 = __SXTB16_RORn(val1, 8);
 80221d0:	f8d7 29d8 	ldr.w	r2, [r7, #2520]	; 0x9d8
 80221d4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80221d8:	601a      	str	r2, [r3, #0]
 80221da:	f507 725b 	add.w	r2, r7, #876	; 0x36c
 80221de:	2308      	movs	r3, #8
 80221e0:	6013      	str	r3, [r2, #0]
 80221e2:	f507 725a 	add.w	r2, r7, #872	; 0x368
 80221e6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80221ea:	681b      	ldr	r3, [r3, #0]
 80221ec:	6013      	str	r3, [r2, #0]
 80221ee:	f507 7259 	add.w	r2, r7, #868	; 0x364
 80221f2:	f507 735b 	add.w	r3, r7, #876	; 0x36c
 80221f6:	681b      	ldr	r3, [r3, #0]
 80221f8:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 80221fa:	f507 7259 	add.w	r2, r7, #868	; 0x364
 80221fe:	f507 7359 	add.w	r3, r7, #868	; 0x364
 8022202:	681b      	ldr	r3, [r3, #0]
 8022204:	f003 031f 	and.w	r3, r3, #31
 8022208:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 802220a:	f507 7359 	add.w	r3, r7, #868	; 0x364
 802220e:	681b      	ldr	r3, [r3, #0]
 8022210:	2b00      	cmp	r3, #0
 8022212:	d103      	bne.n	802221c <arm_nn_mat_mult_nt_t_s8+0x29a6>
    return op1;
 8022214:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8022218:	681a      	ldr	r2, [r3, #0]
 802221a:	e006      	b.n	802222a <arm_nn_mat_mult_nt_t_s8+0x29b4>
  return (op1 >> op2) | (op1 << (32U - op2));
 802221c:	f507 725a 	add.w	r2, r7, #872	; 0x368
 8022220:	f507 7359 	add.w	r3, r7, #868	; 0x364
 8022224:	6812      	ldr	r2, [r2, #0]
 8022226:	681b      	ldr	r3, [r3, #0]
 8022228:	41da      	rors	r2, r3
 802222a:	f507 7358 	add.w	r3, r7, #864	; 0x360
 802222e:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8022230:	f507 7358 	add.w	r3, r7, #864	; 0x360
 8022234:	681b      	ldr	r3, [r3, #0]
 8022236:	fa2f f283 	sxtb16	r2, r3
 802223a:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 802223e:	601a      	str	r2, [r3, #0]
  return(result);
 8022240:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 8022244:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 8022246:	f507 7356 	add.w	r3, r7, #856	; 0x358
 802224a:	601a      	str	r2, [r3, #0]
  return result;
 802224c:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8022250:	681b      	ldr	r3, [r3, #0]
 8022252:	f8c7 39d8 	str.w	r3, [r7, #2520]	; 0x9d8

                // 4 x MAC res00, res01
                res00 = __SMLAD(val5, val3, res00);
 8022256:	f8d7 29cc 	ldr.w	r2, [r7, #2508]	; 0x9cc
 802225a:	f8d7 19d0 	ldr.w	r1, [r7, #2512]	; 0x9d0
 802225e:	f8d7 0a10 	ldr.w	r0, [r7, #2576]	; 0xa10
 8022262:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8022266:	601a      	str	r2, [r3, #0]
 8022268:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 802226c:	6019      	str	r1, [r3, #0]
 802226e:	f507 735e 	add.w	r3, r7, #888	; 0x378
 8022272:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8022274:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8022278:	6819      	ldr	r1, [r3, #0]
 802227a:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 802227e:	681a      	ldr	r2, [r3, #0]
 8022280:	f507 735e 	add.w	r3, r7, #888	; 0x378
 8022284:	681b      	ldr	r3, [r3, #0]
 8022286:	fb21 3202 	smlad	r2, r1, r2, r3
 802228a:	f507 735d 	add.w	r3, r7, #884	; 0x374
 802228e:	601a      	str	r2, [r3, #0]
  return(result);
 8022290:	f507 735d 	add.w	r3, r7, #884	; 0x374
 8022294:	681b      	ldr	r3, [r3, #0]
 8022296:	f8c7 3a10 	str.w	r3, [r7, #2576]	; 0xa10
                res00 = __SMLAD(val2, val0, res00);
 802229a:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 802229e:	f8d7 19dc 	ldr.w	r1, [r7, #2524]	; 0x9dc
 80222a2:	f8d7 0a10 	ldr.w	r0, [r7, #2576]	; 0xa10
 80222a6:	f507 7364 	add.w	r3, r7, #912	; 0x390
 80222aa:	601a      	str	r2, [r3, #0]
 80222ac:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 80222b0:	6019      	str	r1, [r3, #0]
 80222b2:	f507 7362 	add.w	r3, r7, #904	; 0x388
 80222b6:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80222b8:	f507 7364 	add.w	r3, r7, #912	; 0x390
 80222bc:	6819      	ldr	r1, [r3, #0]
 80222be:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 80222c2:	681a      	ldr	r2, [r3, #0]
 80222c4:	f507 7362 	add.w	r3, r7, #904	; 0x388
 80222c8:	681b      	ldr	r3, [r3, #0]
 80222ca:	fb21 3202 	smlad	r2, r1, r2, r3
 80222ce:	f507 7361 	add.w	r3, r7, #900	; 0x384
 80222d2:	601a      	str	r2, [r3, #0]
  return(result);
 80222d4:	f507 7361 	add.w	r3, r7, #900	; 0x384
 80222d8:	681b      	ldr	r3, [r3, #0]
 80222da:	f8c7 3a10 	str.w	r3, [r7, #2576]	; 0xa10
                res01 = __SMLAD(val5, val4, res01);
 80222de:	f8d7 29cc 	ldr.w	r2, [r7, #2508]	; 0x9cc
 80222e2:	f8d7 19c8 	ldr.w	r1, [r7, #2504]	; 0x9c8
 80222e6:	f8d7 0a0c 	ldr.w	r0, [r7, #2572]	; 0xa0c
 80222ea:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 80222ee:	601a      	str	r2, [r3, #0]
 80222f0:	f507 7367 	add.w	r3, r7, #924	; 0x39c
 80222f4:	6019      	str	r1, [r3, #0]
 80222f6:	f507 7366 	add.w	r3, r7, #920	; 0x398
 80222fa:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80222fc:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8022300:	6819      	ldr	r1, [r3, #0]
 8022302:	f507 7367 	add.w	r3, r7, #924	; 0x39c
 8022306:	681a      	ldr	r2, [r3, #0]
 8022308:	f507 7366 	add.w	r3, r7, #920	; 0x398
 802230c:	681b      	ldr	r3, [r3, #0]
 802230e:	fb21 3202 	smlad	r2, r1, r2, r3
 8022312:	f507 7365 	add.w	r3, r7, #916	; 0x394
 8022316:	601a      	str	r2, [r3, #0]
  return(result);
 8022318:	f507 7365 	add.w	r3, r7, #916	; 0x394
 802231c:	681b      	ldr	r3, [r3, #0]
 802231e:	f8c7 3a0c 	str.w	r3, [r7, #2572]	; 0xa0c
                res01 = __SMLAD(val2, val1, res01);
 8022322:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 8022326:	f8d7 19d8 	ldr.w	r1, [r7, #2520]	; 0x9d8
 802232a:	f8d7 0a0c 	ldr.w	r0, [r7, #2572]	; 0xa0c
 802232e:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8022332:	601a      	str	r2, [r3, #0]
 8022334:	f507 736b 	add.w	r3, r7, #940	; 0x3ac
 8022338:	6019      	str	r1, [r3, #0]
 802233a:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 802233e:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8022340:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8022344:	6819      	ldr	r1, [r3, #0]
 8022346:	f507 736b 	add.w	r3, r7, #940	; 0x3ac
 802234a:	681a      	ldr	r2, [r3, #0]
 802234c:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8022350:	681b      	ldr	r3, [r3, #0]
 8022352:	fb21 3202 	smlad	r2, r1, r2, r3
 8022356:	f507 7369 	add.w	r3, r7, #932	; 0x3a4
 802235a:	601a      	str	r2, [r3, #0]
  return(result);
 802235c:	f507 7369 	add.w	r3, r7, #932	; 0x3a4
 8022360:	681b      	ldr	r3, [r3, #0]
 8022362:	f8c7 3a0c 	str.w	r3, [r7, #2572]	; 0xa0c
 8022366:	f507 726d 	add.w	r2, r7, #948	; 0x3b4
 802236a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 802236e:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 8022370:	f507 736d 	add.w	r3, r7, #948	; 0x3b4
 8022374:	681b      	ldr	r3, [r3, #0]
 8022376:	681b      	ldr	r3, [r3, #0]
 8022378:	681b      	ldr	r3, [r3, #0]
 802237a:	461a      	mov	r2, r3
 802237c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8022380:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8022382:	f507 736d 	add.w	r3, r7, #948	; 0x3b4
 8022386:	681b      	ldr	r3, [r3, #0]
 8022388:	681b      	ldr	r3, [r3, #0]
 802238a:	1d1a      	adds	r2, r3, #4
 802238c:	f507 736d 	add.w	r3, r7, #948	; 0x3b4
 8022390:	681b      	ldr	r3, [r3, #0]
 8022392:	601a      	str	r2, [r3, #0]
    return (val);
 8022394:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8022398:	681b      	ldr	r3, [r3, #0]

                val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 802239a:	f8c7 39dc 	str.w	r3, [r7, #2524]	; 0x9dc
                val1 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 802239e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80223a2:	681a      	ldr	r2, [r3, #0]
 80223a4:	f8d7 39ec 	ldr.w	r3, [r7, #2540]	; 0x9ec
 80223a8:	441a      	add	r2, r3
 80223aa:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80223ae:	601a      	str	r2, [r3, #0]
 80223b0:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80223b4:	681b      	ldr	r3, [r3, #0]
 80223b6:	681b      	ldr	r3, [r3, #0]
 80223b8:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 80223ba:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80223be:	601a      	str	r2, [r3, #0]
    return (val);
 80223c0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80223c4:	681b      	ldr	r3, [r3, #0]
 80223c6:	f8c7 39d8 	str.w	r3, [r7, #2520]	; 0x9d8
 80223ca:	f507 726f 	add.w	r2, r7, #956	; 0x3bc
 80223ce:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80223d2:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 80223d4:	f507 736f 	add.w	r3, r7, #956	; 0x3bc
 80223d8:	681b      	ldr	r3, [r3, #0]
 80223da:	681b      	ldr	r3, [r3, #0]
 80223dc:	681b      	ldr	r3, [r3, #0]
 80223de:	461a      	mov	r2, r3
 80223e0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80223e4:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 80223e6:	f507 736f 	add.w	r3, r7, #956	; 0x3bc
 80223ea:	681b      	ldr	r3, [r3, #0]
 80223ec:	681b      	ldr	r3, [r3, #0]
 80223ee:	1d1a      	adds	r2, r3, #4
 80223f0:	f507 736f 	add.w	r3, r7, #956	; 0x3bc
 80223f4:	681b      	ldr	r3, [r3, #0]
 80223f6:	601a      	str	r2, [r3, #0]
    return (val);
 80223f8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80223fc:	681b      	ldr	r3, [r3, #0]
                val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 80223fe:	f8c7 39d4 	str.w	r3, [r7, #2516]	; 0x9d4
                val3 = __SXTB16(val0);
 8022402:	f8d7 29dc 	ldr.w	r2, [r7, #2524]	; 0x9dc
 8022406:	f507 7371 	add.w	r3, r7, #964	; 0x3c4
 802240a:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 802240c:	f507 7371 	add.w	r3, r7, #964	; 0x3c4
 8022410:	681b      	ldr	r3, [r3, #0]
 8022412:	fa2f f283 	sxtb16	r2, r3
 8022416:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 802241a:	601a      	str	r2, [r3, #0]
  return(result);
 802241c:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 8022420:	681b      	ldr	r3, [r3, #0]
 8022422:	f8c7 39d0 	str.w	r3, [r7, #2512]	; 0x9d0
                val5 = __SXTB16(val2);
 8022426:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 802242a:	f507 7373 	add.w	r3, r7, #972	; 0x3cc
 802242e:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8022430:	f507 7373 	add.w	r3, r7, #972	; 0x3cc
 8022434:	681b      	ldr	r3, [r3, #0]
 8022436:	fa2f f283 	sxtb16	r2, r3
 802243a:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 802243e:	601a      	str	r2, [r3, #0]
  return(result);
 8022440:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 8022444:	681b      	ldr	r3, [r3, #0]
 8022446:	f8c7 39cc 	str.w	r3, [r7, #2508]	; 0x9cc
                val4 = __SXTB16(val1);
 802244a:	f8d7 29d8 	ldr.w	r2, [r7, #2520]	; 0x9d8
 802244e:	f507 7375 	add.w	r3, r7, #980	; 0x3d4
 8022452:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8022454:	f507 7375 	add.w	r3, r7, #980	; 0x3d4
 8022458:	681b      	ldr	r3, [r3, #0]
 802245a:	fa2f f283 	sxtb16	r2, r3
 802245e:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8022462:	601a      	str	r2, [r3, #0]
  return(result);
 8022464:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8022468:	681b      	ldr	r3, [r3, #0]
 802246a:	f8c7 39c8 	str.w	r3, [r7, #2504]	; 0x9c8
                val0 = __SXTB16_RORn(val0, 8);
 802246e:	f8d7 29dc 	ldr.w	r2, [r7, #2524]	; 0x9dc
 8022472:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8022476:	601a      	str	r2, [r3, #0]
 8022478:	f507 727b 	add.w	r2, r7, #1004	; 0x3ec
 802247c:	2308      	movs	r3, #8
 802247e:	6013      	str	r3, [r2, #0]
 8022480:	f507 727a 	add.w	r2, r7, #1000	; 0x3e8
 8022484:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8022488:	681b      	ldr	r3, [r3, #0]
 802248a:	6013      	str	r3, [r2, #0]
 802248c:	f507 7279 	add.w	r2, r7, #996	; 0x3e4
 8022490:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 8022494:	681b      	ldr	r3, [r3, #0]
 8022496:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8022498:	f507 7279 	add.w	r2, r7, #996	; 0x3e4
 802249c:	f507 7379 	add.w	r3, r7, #996	; 0x3e4
 80224a0:	681b      	ldr	r3, [r3, #0]
 80224a2:	f003 031f 	and.w	r3, r3, #31
 80224a6:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 80224a8:	f507 7379 	add.w	r3, r7, #996	; 0x3e4
 80224ac:	681b      	ldr	r3, [r3, #0]
 80224ae:	2b00      	cmp	r3, #0
 80224b0:	d103      	bne.n	80224ba <arm_nn_mat_mult_nt_t_s8+0x2c44>
    return op1;
 80224b2:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 80224b6:	681a      	ldr	r2, [r3, #0]
 80224b8:	e006      	b.n	80224c8 <arm_nn_mat_mult_nt_t_s8+0x2c52>
  return (op1 >> op2) | (op1 << (32U - op2));
 80224ba:	f507 727a 	add.w	r2, r7, #1000	; 0x3e8
 80224be:	f507 7379 	add.w	r3, r7, #996	; 0x3e4
 80224c2:	6812      	ldr	r2, [r2, #0]
 80224c4:	681b      	ldr	r3, [r3, #0]
 80224c6:	41da      	rors	r2, r3
 80224c8:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80224cc:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80224ce:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80224d2:	681b      	ldr	r3, [r3, #0]
 80224d4:	fa2f f283 	sxtb16	r2, r3
 80224d8:	f507 7377 	add.w	r3, r7, #988	; 0x3dc
 80224dc:	601a      	str	r2, [r3, #0]
  return(result);
 80224de:	f507 7377 	add.w	r3, r7, #988	; 0x3dc
 80224e2:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 80224e4:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 80224e8:	601a      	str	r2, [r3, #0]
  return result;
 80224ea:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 80224ee:	681b      	ldr	r3, [r3, #0]
 80224f0:	f8c7 39dc 	str.w	r3, [r7, #2524]	; 0x9dc
                val2 = __SXTB16_RORn(val2, 8);
 80224f4:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 80224f8:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 80224fc:	601a      	str	r2, [r3, #0]
 80224fe:	f507 6281 	add.w	r2, r7, #1032	; 0x408
 8022502:	2308      	movs	r3, #8
 8022504:	6013      	str	r3, [r2, #0]
 8022506:	f207 4204 	addw	r2, r7, #1028	; 0x404
 802250a:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 802250e:	681b      	ldr	r3, [r3, #0]
 8022510:	6013      	str	r3, [r2, #0]
 8022512:	f507 6280 	add.w	r2, r7, #1024	; 0x400
 8022516:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 802251a:	681b      	ldr	r3, [r3, #0]
 802251c:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 802251e:	f507 6280 	add.w	r2, r7, #1024	; 0x400
 8022522:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8022526:	681b      	ldr	r3, [r3, #0]
 8022528:	f003 031f 	and.w	r3, r3, #31
 802252c:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 802252e:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8022532:	681b      	ldr	r3, [r3, #0]
 8022534:	2b00      	cmp	r3, #0
 8022536:	d103      	bne.n	8022540 <arm_nn_mat_mult_nt_t_s8+0x2cca>
    return op1;
 8022538:	f207 4304 	addw	r3, r7, #1028	; 0x404
 802253c:	681a      	ldr	r2, [r3, #0]
 802253e:	e006      	b.n	802254e <arm_nn_mat_mult_nt_t_s8+0x2cd8>
  return (op1 >> op2) | (op1 << (32U - op2));
 8022540:	f207 4204 	addw	r2, r7, #1028	; 0x404
 8022544:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8022548:	6812      	ldr	r2, [r2, #0]
 802254a:	681b      	ldr	r3, [r3, #0]
 802254c:	41da      	rors	r2, r3
 802254e:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 8022552:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8022554:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 8022558:	681b      	ldr	r3, [r3, #0]
 802255a:	fa2f f283 	sxtb16	r2, r3
 802255e:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8022562:	601a      	str	r2, [r3, #0]
  return(result);
 8022564:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8022568:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 802256a:	f507 737d 	add.w	r3, r7, #1012	; 0x3f4
 802256e:	601a      	str	r2, [r3, #0]
  return result;
 8022570:	f507 737d 	add.w	r3, r7, #1012	; 0x3f4
 8022574:	681b      	ldr	r3, [r3, #0]
 8022576:	f8c7 39d4 	str.w	r3, [r7, #2516]	; 0x9d4
                val1 = __SXTB16_RORn(val1, 8);
 802257a:	f8d7 29d8 	ldr.w	r2, [r7, #2520]	; 0x9d8
 802257e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8022582:	601a      	str	r2, [r3, #0]
 8022584:	f207 4224 	addw	r2, r7, #1060	; 0x424
 8022588:	2308      	movs	r3, #8
 802258a:	6013      	str	r3, [r2, #0]
 802258c:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 8022590:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8022594:	681b      	ldr	r3, [r3, #0]
 8022596:	6013      	str	r3, [r2, #0]
 8022598:	f207 421c 	addw	r2, r7, #1052	; 0x41c
 802259c:	f207 4324 	addw	r3, r7, #1060	; 0x424
 80225a0:	681b      	ldr	r3, [r3, #0]
 80225a2:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 80225a4:	f207 421c 	addw	r2, r7, #1052	; 0x41c
 80225a8:	f207 431c 	addw	r3, r7, #1052	; 0x41c
 80225ac:	681b      	ldr	r3, [r3, #0]
 80225ae:	f003 031f 	and.w	r3, r3, #31
 80225b2:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 80225b4:	f207 431c 	addw	r3, r7, #1052	; 0x41c
 80225b8:	681b      	ldr	r3, [r3, #0]
 80225ba:	2b00      	cmp	r3, #0
 80225bc:	d103      	bne.n	80225c6 <arm_nn_mat_mult_nt_t_s8+0x2d50>
    return op1;
 80225be:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80225c2:	681a      	ldr	r2, [r3, #0]
 80225c4:	e006      	b.n	80225d4 <arm_nn_mat_mult_nt_t_s8+0x2d5e>
  return (op1 >> op2) | (op1 << (32U - op2));
 80225c6:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 80225ca:	f207 431c 	addw	r3, r7, #1052	; 0x41c
 80225ce:	6812      	ldr	r2, [r2, #0]
 80225d0:	681b      	ldr	r3, [r3, #0]
 80225d2:	41da      	rors	r2, r3
 80225d4:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80225d8:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80225da:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80225de:	681b      	ldr	r3, [r3, #0]
 80225e0:	fa2f f283 	sxtb16	r2, r3
 80225e4:	f207 4314 	addw	r3, r7, #1044	; 0x414
 80225e8:	601a      	str	r2, [r3, #0]
  return(result);
 80225ea:	f207 4314 	addw	r3, r7, #1044	; 0x414
 80225ee:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 80225f0:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80225f4:	601a      	str	r2, [r3, #0]
  return result;
 80225f6:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80225fa:	681b      	ldr	r3, [r3, #0]
 80225fc:	f8c7 39d8 	str.w	r3, [r7, #2520]	; 0x9d8

                // 4 x MAC res00, res01
                res00 = __SMLAD(val5, val3, res00);
 8022600:	f8d7 29cc 	ldr.w	r2, [r7, #2508]	; 0x9cc
 8022604:	f8d7 19d0 	ldr.w	r1, [r7, #2512]	; 0x9d0
 8022608:	f8d7 0a10 	ldr.w	r0, [r7, #2576]	; 0xa10
 802260c:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8022610:	601a      	str	r2, [r3, #0]
 8022612:	f207 4334 	addw	r3, r7, #1076	; 0x434
 8022616:	6019      	str	r1, [r3, #0]
 8022618:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 802261c:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 802261e:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8022622:	6819      	ldr	r1, [r3, #0]
 8022624:	f207 4334 	addw	r3, r7, #1076	; 0x434
 8022628:	681a      	ldr	r2, [r3, #0]
 802262a:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 802262e:	681b      	ldr	r3, [r3, #0]
 8022630:	fb21 3202 	smlad	r2, r1, r2, r3
 8022634:	f207 432c 	addw	r3, r7, #1068	; 0x42c
 8022638:	601a      	str	r2, [r3, #0]
  return(result);
 802263a:	f207 432c 	addw	r3, r7, #1068	; 0x42c
 802263e:	681b      	ldr	r3, [r3, #0]
 8022640:	f8c7 3a10 	str.w	r3, [r7, #2576]	; 0xa10
                res00 = __SMLAD(val2, val0, res00);
 8022644:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 8022648:	f8d7 19dc 	ldr.w	r1, [r7, #2524]	; 0x9dc
 802264c:	f8d7 0a10 	ldr.w	r0, [r7, #2576]	; 0xa10
 8022650:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8022654:	601a      	str	r2, [r3, #0]
 8022656:	f207 4344 	addw	r3, r7, #1092	; 0x444
 802265a:	6019      	str	r1, [r3, #0]
 802265c:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8022660:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8022662:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8022666:	6819      	ldr	r1, [r3, #0]
 8022668:	f207 4344 	addw	r3, r7, #1092	; 0x444
 802266c:	681a      	ldr	r2, [r3, #0]
 802266e:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8022672:	681b      	ldr	r3, [r3, #0]
 8022674:	fb21 3202 	smlad	r2, r1, r2, r3
 8022678:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 802267c:	601a      	str	r2, [r3, #0]
  return(result);
 802267e:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8022682:	681b      	ldr	r3, [r3, #0]
 8022684:	f8c7 3a10 	str.w	r3, [r7, #2576]	; 0xa10
                res01 = __SMLAD(val5, val4, res01);
 8022688:	f8d7 29cc 	ldr.w	r2, [r7, #2508]	; 0x9cc
 802268c:	f8d7 19c8 	ldr.w	r1, [r7, #2504]	; 0x9c8
 8022690:	f8d7 0a0c 	ldr.w	r0, [r7, #2572]	; 0xa0c
 8022694:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8022698:	601a      	str	r2, [r3, #0]
 802269a:	f207 4354 	addw	r3, r7, #1108	; 0x454
 802269e:	6019      	str	r1, [r3, #0]
 80226a0:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80226a4:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80226a6:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 80226aa:	6819      	ldr	r1, [r3, #0]
 80226ac:	f207 4354 	addw	r3, r7, #1108	; 0x454
 80226b0:	681a      	ldr	r2, [r3, #0]
 80226b2:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80226b6:	681b      	ldr	r3, [r3, #0]
 80226b8:	fb21 3202 	smlad	r2, r1, r2, r3
 80226bc:	f207 434c 	addw	r3, r7, #1100	; 0x44c
 80226c0:	601a      	str	r2, [r3, #0]
  return(result);
 80226c2:	f207 434c 	addw	r3, r7, #1100	; 0x44c
 80226c6:	681b      	ldr	r3, [r3, #0]
 80226c8:	f8c7 3a0c 	str.w	r3, [r7, #2572]	; 0xa0c
                res01 = __SMLAD(val2, val1, res01);
 80226cc:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 80226d0:	f8d7 19d8 	ldr.w	r1, [r7, #2520]	; 0x9d8
 80226d4:	f8d7 0a0c 	ldr.w	r0, [r7, #2572]	; 0xa0c
 80226d8:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 80226dc:	601a      	str	r2, [r3, #0]
 80226de:	f207 4364 	addw	r3, r7, #1124	; 0x464
 80226e2:	6019      	str	r1, [r3, #0]
 80226e4:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 80226e8:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80226ea:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 80226ee:	6819      	ldr	r1, [r3, #0]
 80226f0:	f207 4364 	addw	r3, r7, #1124	; 0x464
 80226f4:	681a      	ldr	r2, [r3, #0]
 80226f6:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 80226fa:	681b      	ldr	r3, [r3, #0]
 80226fc:	fb21 3202 	smlad	r2, r1, r2, r3
 8022700:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 8022704:	601a      	str	r2, [r3, #0]
  return(result);
 8022706:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 802270a:	681b      	ldr	r3, [r3, #0]
 802270c:	f8c7 3a0c 	str.w	r3, [r7, #2572]	; 0xa0c
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 8022710:	f8d7 3a08 	ldr.w	r3, [r7, #2568]	; 0xa08
 8022714:	3310      	adds	r3, #16
 8022716:	f8c7 3a08 	str.w	r3, [r7, #2568]	; 0xa08
 802271a:	f8d7 3a70 	ldr.w	r3, [r7, #2672]	; 0xa70
 802271e:	f1a3 020f 	sub.w	r2, r3, #15
 8022722:	f8d7 3a08 	ldr.w	r3, [r7, #2568]	; 0xa08
 8022726:	4293      	cmp	r3, r2
 8022728:	f6ff a89e 	blt.w	8021868 <arm_nn_mat_mult_nt_t_s8+0x1ff2>
            }

            // Left-over accumulations
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 802272c:	e03d      	b.n	80227aa <arm_nn_mat_mult_nt_t_s8+0x2f34>
            {
                q7_t rhs_value0 = rhs_ptr[0];
 802272e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8022732:	681b      	ldr	r3, [r3, #0]
 8022734:	781b      	ldrb	r3, [r3, #0]
 8022736:	f887 39e3 	strb.w	r3, [r7, #2531]	; 0x9e3
                q7_t rhs_value1 = rhs_ptr[rhs_cols];
 802273a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 802273e:	681a      	ldr	r2, [r3, #0]
 8022740:	f8d7 3a70 	ldr.w	r3, [r7, #2672]	; 0xa70
 8022744:	4413      	add	r3, r2
 8022746:	781b      	ldrb	r3, [r3, #0]
 8022748:	f887 39e2 	strb.w	r3, [r7, #2530]	; 0x9e2
                q7_t lhs_value = lhs_ptr[0];
 802274c:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8022750:	681b      	ldr	r3, [r3, #0]
 8022752:	781b      	ldrb	r3, [r3, #0]
 8022754:	f887 39e1 	strb.w	r3, [r7, #2529]	; 0x9e1

                res00 += lhs_value * rhs_value0;
 8022758:	f997 29e1 	ldrsb.w	r2, [r7, #2529]	; 0x9e1
 802275c:	f997 39e3 	ldrsb.w	r3, [r7, #2531]	; 0x9e3
 8022760:	fb03 f202 	mul.w	r2, r3, r2
 8022764:	f8d7 3a10 	ldr.w	r3, [r7, #2576]	; 0xa10
 8022768:	4413      	add	r3, r2
 802276a:	f8c7 3a10 	str.w	r3, [r7, #2576]	; 0xa10
                res01 += lhs_value * rhs_value1;
 802276e:	f997 29e1 	ldrsb.w	r2, [r7, #2529]	; 0x9e1
 8022772:	f997 39e2 	ldrsb.w	r3, [r7, #2530]	; 0x9e2
 8022776:	fb03 f202 	mul.w	r2, r3, r2
 802277a:	f8d7 3a0c 	ldr.w	r3, [r7, #2572]	; 0xa0c
 802277e:	4413      	add	r3, r2
 8022780:	f8c7 3a0c 	str.w	r3, [r7, #2572]	; 0xa0c

                ++rhs_ptr;
 8022784:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8022788:	681b      	ldr	r3, [r3, #0]
 802278a:	1c5a      	adds	r2, r3, #1
 802278c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8022790:	601a      	str	r2, [r3, #0]
                ++lhs_ptr;
 8022792:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8022796:	681b      	ldr	r3, [r3, #0]
 8022798:	1c5a      	adds	r2, r3, #1
 802279a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 802279e:	601a      	str	r2, [r3, #0]
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 80227a0:	f8d7 3a08 	ldr.w	r3, [r7, #2568]	; 0xa08
 80227a4:	3301      	adds	r3, #1
 80227a6:	f8c7 3a08 	str.w	r3, [r7, #2568]	; 0xa08
 80227aa:	f8d7 2a08 	ldr.w	r2, [r7, #2568]	; 0xa08
 80227ae:	f8d7 3a70 	ldr.w	r3, [r7, #2672]	; 0xa70
 80227b2:	429a      	cmp	r2, r3
 80227b4:	dbbb      	blt.n	802272e <arm_nn_mat_mult_nt_t_s8+0x2eb8>
            }

            // Quantize down
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows_idx], dst_shifts[rhs_rows_idx]);
 80227b6:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 80227ba:	009a      	lsls	r2, r3, #2
 80227bc:	f8d7 3a60 	ldr.w	r3, [r7, #2656]	; 0xa60
 80227c0:	4413      	add	r3, r2
 80227c2:	6818      	ldr	r0, [r3, #0]
 80227c4:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 80227c8:	009a      	lsls	r2, r3, #2
 80227ca:	f8d7 3a64 	ldr.w	r3, [r7, #2660]	; 0xa64
 80227ce:	4413      	add	r3, r2
 80227d0:	6819      	ldr	r1, [r3, #0]
 80227d2:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 80227d6:	f8d7 3a10 	ldr.w	r3, [r7, #2576]	; 0xa10
 80227da:	6013      	str	r3, [r2, #0]
 80227dc:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 80227e0:	6018      	str	r0, [r3, #0]
 80227e2:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80227e6:	6019      	str	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80227e8:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80227ec:	681b      	ldr	r3, [r3, #0]
 80227ee:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 80227f2:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80227f6:	681b      	ldr	r3, [r3, #0]
 80227f8:	fa03 f202 	lsl.w	r2, r3, r2
 80227fc:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8022800:	601a      	str	r2, [r3, #0]
 8022802:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8022806:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 802280a:	681b      	ldr	r3, [r3, #0]
 802280c:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 802280e:	f507 72a2 	add.w	r2, r7, #324	; 0x144
 8022812:	2300      	movs	r3, #0
 8022814:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 8022816:	f107 0280 	add.w	r2, r7, #128	; 0x80
 802281a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 802281e:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 8022820:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8022824:	2300      	movs	r3, #0
 8022826:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8022828:	f107 0380 	add.w	r3, r7, #128	; 0x80
 802282c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8022830:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8022834:	681b      	ldr	r3, [r3, #0]
 8022836:	4618      	mov	r0, r3
 8022838:	ea4f 71e0 	mov.w	r1, r0, asr #31
 802283c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8022840:	681b      	ldr	r3, [r3, #0]
 8022842:	461a      	mov	r2, r3
 8022844:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8022848:	fb02 f501 	mul.w	r5, r2, r1
 802284c:	fb00 f403 	mul.w	r4, r0, r3
 8022850:	442c      	add	r4, r5
 8022852:	fba0 2302 	umull	r2, r3, r0, r2
 8022856:	18e1      	adds	r1, r4, r3
 8022858:	460b      	mov	r3, r1
 802285a:	eb18 0102 	adds.w	r1, r8, r2
 802285e:	6039      	str	r1, [r7, #0]
 8022860:	eb49 0303 	adc.w	r3, r9, r3
 8022864:	607b      	str	r3, [r7, #4]
 8022866:	f107 0380 	add.w	r3, r7, #128	; 0x80
 802286a:	e9d7 1200 	ldrd	r1, r2, [r7]
 802286e:	e9c3 1200 	strd	r1, r2, [r3]
    result = (int32_t)(mult.long_long >> 31);
 8022872:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8022876:	e9d3 2300 	ldrd	r2, r3, [r3]
 802287a:	f04f 0000 	mov.w	r0, #0
 802287e:	f04f 0100 	mov.w	r1, #0
 8022882:	0fd0      	lsrs	r0, r2, #31
 8022884:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8022888:	17d9      	asrs	r1, r3, #31
 802288a:	f507 72a2 	add.w	r2, r7, #324	; 0x144
 802288e:	4603      	mov	r3, r0
 8022890:	6013      	str	r3, [r2, #0]
    return result;
 8022892:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8022896:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8022898:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 802289c:	681b      	ldr	r3, [r3, #0]
 802289e:	2b00      	cmp	r3, #0
 80228a0:	dc04      	bgt.n	80228ac <arm_nn_mat_mult_nt_t_s8+0x3036>
 80228a2:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80228a6:	681b      	ldr	r3, [r3, #0]
 80228a8:	425a      	negs	r2, r3
 80228aa:	e000      	b.n	80228ae <arm_nn_mat_mult_nt_t_s8+0x3038>
 80228ac:	2200      	movs	r2, #0
 80228ae:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80228b2:	6019      	str	r1, [r3, #0]
 80228b4:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 80228b8:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 80228ba:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80228be:	2300      	movs	r3, #0
 80228c0:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 80228c2:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 80228c6:	2201      	movs	r2, #1
 80228c8:	681b      	ldr	r3, [r3, #0]
 80228ca:	fa02 f303 	lsl.w	r3, r2, r3
 80228ce:	f507 729a 	add.w	r2, r7, #308	; 0x134
 80228d2:	3b01      	subs	r3, #1
 80228d4:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 80228d6:	f507 7198 	add.w	r1, r7, #304	; 0x130
 80228da:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80228de:	f507 739a 	add.w	r3, r7, #308	; 0x134
 80228e2:	6812      	ldr	r2, [r2, #0]
 80228e4:	681b      	ldr	r3, [r3, #0]
 80228e6:	4013      	ands	r3, r2
 80228e8:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 80228ea:	f507 719c 	add.w	r1, r7, #312	; 0x138
 80228ee:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80228f2:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 80228f6:	6812      	ldr	r2, [r2, #0]
 80228f8:	681b      	ldr	r3, [r3, #0]
 80228fa:	fa42 f303 	asr.w	r3, r2, r3
 80228fe:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 8022900:	f507 7296 	add.w	r2, r7, #300	; 0x12c
 8022904:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8022908:	681b      	ldr	r3, [r3, #0]
 802290a:	105b      	asrs	r3, r3, #1
 802290c:	6013      	str	r3, [r2, #0]
    if (result < 0)
 802290e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8022912:	681b      	ldr	r3, [r3, #0]
 8022914:	2b00      	cmp	r3, #0
 8022916:	da06      	bge.n	8022926 <arm_nn_mat_mult_nt_t_s8+0x30b0>
        threshold++;
 8022918:	f507 7296 	add.w	r2, r7, #300	; 0x12c
 802291c:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8022920:	681b      	ldr	r3, [r3, #0]
 8022922:	3301      	adds	r3, #1
 8022924:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 8022926:	f507 7298 	add.w	r2, r7, #304	; 0x130
 802292a:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 802292e:	6812      	ldr	r2, [r2, #0]
 8022930:	681b      	ldr	r3, [r3, #0]
 8022932:	429a      	cmp	r2, r3
 8022934:	dd06      	ble.n	8022944 <arm_nn_mat_mult_nt_t_s8+0x30ce>
        result++;
 8022936:	f507 729c 	add.w	r2, r7, #312	; 0x138
 802293a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 802293e:	681b      	ldr	r3, [r3, #0]
 8022940:	3301      	adds	r3, #1
 8022942:	6013      	str	r3, [r2, #0]
    return result;
 8022944:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8022948:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 802294a:	bf00      	nop
 802294c:	f8c7 3a10 	str.w	r3, [r7, #2576]	; 0xa10
            res01 = arm_nn_requantize(res01, dst_multipliers[rhs_rows_idx + 1], dst_shifts[rhs_rows_idx + 1]);
 8022950:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 8022954:	3301      	adds	r3, #1
 8022956:	009a      	lsls	r2, r3, #2
 8022958:	f8d7 3a60 	ldr.w	r3, [r7, #2656]	; 0xa60
 802295c:	4413      	add	r3, r2
 802295e:	6818      	ldr	r0, [r3, #0]
 8022960:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 8022964:	3301      	adds	r3, #1
 8022966:	009a      	lsls	r2, r3, #2
 8022968:	f8d7 3a64 	ldr.w	r3, [r7, #2660]	; 0xa64
 802296c:	4413      	add	r3, r2
 802296e:	6819      	ldr	r1, [r3, #0]
 8022970:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8022974:	f8d7 3a0c 	ldr.w	r3, [r7, #2572]	; 0xa0c
 8022978:	6013      	str	r3, [r2, #0]
 802297a:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 802297e:	6018      	str	r0, [r3, #0]
 8022980:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8022984:	6019      	str	r1, [r3, #0]
 8022986:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 802298a:	681b      	ldr	r3, [r3, #0]
 802298c:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8022990:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8022994:	681b      	ldr	r3, [r3, #0]
 8022996:	fa03 f202 	lsl.w	r2, r3, r2
 802299a:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 802299e:	601a      	str	r2, [r3, #0]
 80229a0:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 80229a4:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 80229a8:	681b      	ldr	r3, [r3, #0]
 80229aa:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80229ac:	f507 72ba 	add.w	r2, r7, #372	; 0x174
 80229b0:	2300      	movs	r3, #0
 80229b2:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 80229b4:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80229b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80229bc:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 80229be:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80229c2:	2300      	movs	r3, #0
 80229c4:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 80229c6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80229ca:	e9d3 8900 	ldrd	r8, r9, [r3]
 80229ce:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 80229d2:	681b      	ldr	r3, [r3, #0]
 80229d4:	4618      	mov	r0, r3
 80229d6:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80229da:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80229de:	681b      	ldr	r3, [r3, #0]
 80229e0:	461a      	mov	r2, r3
 80229e2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80229e6:	fb02 f501 	mul.w	r5, r2, r1
 80229ea:	fb00 f403 	mul.w	r4, r0, r3
 80229ee:	442c      	add	r4, r5
 80229f0:	fba0 2302 	umull	r2, r3, r0, r2
 80229f4:	18e1      	adds	r1, r4, r3
 80229f6:	460b      	mov	r3, r1
 80229f8:	eb18 0102 	adds.w	r1, r8, r2
 80229fc:	60b9      	str	r1, [r7, #8]
 80229fe:	eb49 0303 	adc.w	r3, r9, r3
 8022a02:	60fb      	str	r3, [r7, #12]
 8022a04:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8022a08:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8022a0c:	e9c3 1200 	strd	r1, r2, [r3]
    result = (int32_t)(mult.long_long >> 31);
 8022a10:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8022a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022a18:	f04f 0000 	mov.w	r0, #0
 8022a1c:	f04f 0100 	mov.w	r1, #0
 8022a20:	0fd0      	lsrs	r0, r2, #31
 8022a22:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8022a26:	17d9      	asrs	r1, r3, #31
 8022a28:	f507 72ba 	add.w	r2, r7, #372	; 0x174
 8022a2c:	4603      	mov	r3, r0
 8022a2e:	6013      	str	r3, [r2, #0]
    return result;
 8022a30:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8022a34:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8022a36:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8022a3a:	681b      	ldr	r3, [r3, #0]
 8022a3c:	2b00      	cmp	r3, #0
 8022a3e:	dc04      	bgt.n	8022a4a <arm_nn_mat_mult_nt_t_s8+0x31d4>
 8022a40:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8022a44:	681b      	ldr	r3, [r3, #0]
 8022a46:	425a      	negs	r2, r3
 8022a48:	e000      	b.n	8022a4c <arm_nn_mat_mult_nt_t_s8+0x31d6>
 8022a4a:	2200      	movs	r2, #0
 8022a4c:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8022a50:	6019      	str	r1, [r3, #0]
 8022a52:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8022a56:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8022a58:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8022a5c:	2300      	movs	r3, #0
 8022a5e:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8022a60:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8022a64:	2201      	movs	r2, #1
 8022a66:	681b      	ldr	r3, [r3, #0]
 8022a68:	fa02 f303 	lsl.w	r3, r2, r3
 8022a6c:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8022a70:	3b01      	subs	r3, #1
 8022a72:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 8022a74:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 8022a78:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8022a7c:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8022a80:	6812      	ldr	r2, [r2, #0]
 8022a82:	681b      	ldr	r3, [r3, #0]
 8022a84:	4013      	ands	r3, r2
 8022a86:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 8022a88:	f507 71b4 	add.w	r1, r7, #360	; 0x168
 8022a8c:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8022a90:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8022a94:	6812      	ldr	r2, [r2, #0]
 8022a96:	681b      	ldr	r3, [r3, #0]
 8022a98:	fa42 f303 	asr.w	r3, r2, r3
 8022a9c:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 8022a9e:	f507 72ae 	add.w	r2, r7, #348	; 0x15c
 8022aa2:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8022aa6:	681b      	ldr	r3, [r3, #0]
 8022aa8:	105b      	asrs	r3, r3, #1
 8022aaa:	6013      	str	r3, [r2, #0]
    if (result < 0)
 8022aac:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8022ab0:	681b      	ldr	r3, [r3, #0]
 8022ab2:	2b00      	cmp	r3, #0
 8022ab4:	da06      	bge.n	8022ac4 <arm_nn_mat_mult_nt_t_s8+0x324e>
        threshold++;
 8022ab6:	f507 72ae 	add.w	r2, r7, #348	; 0x15c
 8022aba:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8022abe:	681b      	ldr	r3, [r3, #0]
 8022ac0:	3301      	adds	r3, #1
 8022ac2:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 8022ac4:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8022ac8:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8022acc:	6812      	ldr	r2, [r2, #0]
 8022ace:	681b      	ldr	r3, [r3, #0]
 8022ad0:	429a      	cmp	r2, r3
 8022ad2:	dd06      	ble.n	8022ae2 <arm_nn_mat_mult_nt_t_s8+0x326c>
        result++;
 8022ad4:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8022ad8:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8022adc:	681b      	ldr	r3, [r3, #0]
 8022ade:	3301      	adds	r3, #1
 8022ae0:	6013      	str	r3, [r2, #0]
    return result;
 8022ae2:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8022ae6:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8022ae8:	bf00      	nop
 8022aea:	f8c7 3a0c 	str.w	r3, [r7, #2572]	; 0xa0c

            // Add offset
            res00 += dst_offset;
 8022aee:	f8d7 2a10 	ldr.w	r2, [r7, #2576]	; 0xa10
 8022af2:	f8d7 3a78 	ldr.w	r3, [r7, #2680]	; 0xa78
 8022af6:	4413      	add	r3, r2
 8022af8:	f8c7 3a10 	str.w	r3, [r7, #2576]	; 0xa10
            res01 += dst_offset;
 8022afc:	f8d7 2a0c 	ldr.w	r2, [r7, #2572]	; 0xa0c
 8022b00:	f8d7 3a78 	ldr.w	r3, [r7, #2680]	; 0xa78
 8022b04:	4413      	add	r3, r2
 8022b06:	f8c7 3a0c 	str.w	r3, [r7, #2572]	; 0xa0c

            // Clamp the result
            res00 = MAX(res00, activation_min);
 8022b0a:	f8d7 2a10 	ldr.w	r2, [r7, #2576]	; 0xa10
 8022b0e:	f8d7 3a7c 	ldr.w	r3, [r7, #2684]	; 0xa7c
 8022b12:	4293      	cmp	r3, r2
 8022b14:	bfb8      	it	lt
 8022b16:	4613      	movlt	r3, r2
 8022b18:	f8c7 3a10 	str.w	r3, [r7, #2576]	; 0xa10
            res00 = MIN(res00, activation_max);
 8022b1c:	f8d7 2a10 	ldr.w	r2, [r7, #2576]	; 0xa10
 8022b20:	f8d7 3a80 	ldr.w	r3, [r7, #2688]	; 0xa80
 8022b24:	4293      	cmp	r3, r2
 8022b26:	bfa8      	it	ge
 8022b28:	4613      	movge	r3, r2
 8022b2a:	f8c7 3a10 	str.w	r3, [r7, #2576]	; 0xa10
            res01 = MAX(res01, activation_min);
 8022b2e:	f8d7 2a0c 	ldr.w	r2, [r7, #2572]	; 0xa0c
 8022b32:	f8d7 3a7c 	ldr.w	r3, [r7, #2684]	; 0xa7c
 8022b36:	4293      	cmp	r3, r2
 8022b38:	bfb8      	it	lt
 8022b3a:	4613      	movlt	r3, r2
 8022b3c:	f8c7 3a0c 	str.w	r3, [r7, #2572]	; 0xa0c
            res01 = MIN(res01, activation_max);
 8022b40:	f8d7 2a0c 	ldr.w	r2, [r7, #2572]	; 0xa0c
 8022b44:	f8d7 3a80 	ldr.w	r3, [r7, #2688]	; 0xa80
 8022b48:	4293      	cmp	r3, r2
 8022b4a:	bfa8      	it	ge
 8022b4c:	4613      	movge	r3, r2
 8022b4e:	f8c7 3a0c 	str.w	r3, [r7, #2572]	; 0xa0c

            dst_ptr[0] = (q7_t)res00;
 8022b52:	f8d7 3a10 	ldr.w	r3, [r7, #2576]	; 0xa10
 8022b56:	b25b      	sxtb	r3, r3
 8022b58:	f8d7 2a38 	ldr.w	r2, [r7, #2616]	; 0xa38
 8022b5c:	7013      	strb	r3, [r2, #0]
            dst_ptr[1] = (q7_t)res01;
 8022b5e:	f8d7 3a38 	ldr.w	r3, [r7, #2616]	; 0xa38
 8022b62:	1c5a      	adds	r2, r3, #1
 8022b64:	f8d7 3a0c 	ldr.w	r3, [r7, #2572]	; 0xa0c
 8022b68:	b25b      	sxtb	r3, r3
 8022b6a:	7013      	strb	r3, [r2, #0]
        }

        rhs += 2 * rhs_cols;
 8022b6c:	f8d7 3a70 	ldr.w	r3, [r7, #2672]	; 0xa70
 8022b70:	005b      	lsls	r3, r3, #1
 8022b72:	4619      	mov	r1, r3
 8022b74:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8022b78:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8022b7c:	681b      	ldr	r3, [r3, #0]
 8022b7e:	440b      	add	r3, r1
 8022b80:	6013      	str	r3, [r2, #0]
        dst += 2;
 8022b82:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8022b86:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8022b8a:	681b      	ldr	r3, [r3, #0]
 8022b8c:	3302      	adds	r3, #2
 8022b8e:	6013      	str	r3, [r2, #0]
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 8022b90:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 8022b94:	3302      	adds	r3, #2
 8022b96:	f8c7 3a3c 	str.w	r3, [r7, #2620]	; 0xa3c
 8022b9a:	f8d7 3a6c 	ldr.w	r3, [r7, #2668]	; 0xa6c
 8022b9e:	1e5a      	subs	r2, r3, #1
 8022ba0:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 8022ba4:	4293      	cmp	r3, r2
 8022ba6:	f6fc ae81 	blt.w	801f8ac <arm_nn_mat_mult_nt_t_s8+0x36>
    }

    if (rhs_rows % 2)
 8022baa:	f8d7 3a6c 	ldr.w	r3, [r7, #2668]	; 0xa6c
 8022bae:	f003 0301 	and.w	r3, r3, #1
 8022bb2:	2b00      	cmp	r3, #0
 8022bb4:	f000 815b 	beq.w	8022e6e <arm_nn_mat_mult_nt_t_s8+0x35f8>
    {
        const q7_t *lhs_ptr = &lhs[0];
 8022bb8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8022bbc:	681b      	ldr	r3, [r3, #0]
 8022bbe:	f8c7 3a04 	str.w	r3, [r7, #2564]	; 0xa04
        q7_t *dst_ptr = &dst[0];
 8022bc2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8022bc6:	681b      	ldr	r3, [r3, #0]
 8022bc8:	f8c7 3a00 	str.w	r3, [r7, #2560]	; 0xa00

        for (int32_t lhs_rows_idx = 0; lhs_rows_idx < lhs_rows; ++lhs_rows_idx)
 8022bcc:	2300      	movs	r3, #0
 8022bce:	f8c7 39fc 	str.w	r3, [r7, #2556]	; 0x9fc
 8022bd2:	e145      	b.n	8022e60 <arm_nn_mat_mult_nt_t_s8+0x35ea>
        {
            const q7_t *rhs_ptr = &rhs[0];
 8022bd4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8022bd8:	681b      	ldr	r3, [r3, #0]
 8022bda:	f8c7 39f8 	str.w	r3, [r7, #2552]	; 0x9f8
            q31_t res00 = 0;
 8022bde:	2300      	movs	r3, #0
 8022be0:	f8c7 39f4 	str.w	r3, [r7, #2548]	; 0x9f4
            if (bias)
 8022be4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8022be8:	681b      	ldr	r3, [r3, #0]
 8022bea:	2b00      	cmp	r3, #0
 8022bec:	d00c      	beq.n	8022c08 <arm_nn_mat_mult_nt_t_s8+0x3392>
            {
                res00 = bias[rhs_rows - 1];
 8022bee:	f8d7 3a6c 	ldr.w	r3, [r7, #2668]	; 0xa6c
 8022bf2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8022bf6:	3b01      	subs	r3, #1
 8022bf8:	009b      	lsls	r3, r3, #2
 8022bfa:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8022bfe:	6812      	ldr	r2, [r2, #0]
 8022c00:	4413      	add	r3, r2
 8022c02:	681b      	ldr	r3, [r3, #0]
 8022c04:	f8c7 39f4 	str.w	r3, [r7, #2548]	; 0x9f4
            }

            for (int32_t rhs_cols_idx = 0; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 8022c08:	2300      	movs	r3, #0
 8022c0a:	f8c7 39f0 	str.w	r3, [r7, #2544]	; 0x9f0
 8022c0e:	e029      	b.n	8022c64 <arm_nn_mat_mult_nt_t_s8+0x33ee>
            {
                q31_t rhs_value = rhs_ptr[0];
 8022c10:	f8d7 39f8 	ldr.w	r3, [r7, #2552]	; 0x9f8
 8022c14:	f993 3000 	ldrsb.w	r3, [r3]
 8022c18:	f8c7 39e8 	str.w	r3, [r7, #2536]	; 0x9e8
                q31_t lhs_value = lhs_ptr[0] + lhs_offset;
 8022c1c:	f8d7 3a04 	ldr.w	r3, [r7, #2564]	; 0xa04
 8022c20:	f993 3000 	ldrsb.w	r3, [r3]
 8022c24:	461a      	mov	r2, r3
 8022c26:	f8d7 3a74 	ldr.w	r3, [r7, #2676]	; 0xa74
 8022c2a:	4413      	add	r3, r2
 8022c2c:	f8c7 39e4 	str.w	r3, [r7, #2532]	; 0x9e4

                res00 += lhs_value * rhs_value;
 8022c30:	f8d7 39e4 	ldr.w	r3, [r7, #2532]	; 0x9e4
 8022c34:	f8d7 29e8 	ldr.w	r2, [r7, #2536]	; 0x9e8
 8022c38:	fb02 f303 	mul.w	r3, r2, r3
 8022c3c:	f8d7 29f4 	ldr.w	r2, [r7, #2548]	; 0x9f4
 8022c40:	4413      	add	r3, r2
 8022c42:	f8c7 39f4 	str.w	r3, [r7, #2548]	; 0x9f4

                ++rhs_ptr;
 8022c46:	f8d7 39f8 	ldr.w	r3, [r7, #2552]	; 0x9f8
 8022c4a:	3301      	adds	r3, #1
 8022c4c:	f8c7 39f8 	str.w	r3, [r7, #2552]	; 0x9f8
                ++lhs_ptr;
 8022c50:	f8d7 3a04 	ldr.w	r3, [r7, #2564]	; 0xa04
 8022c54:	3301      	adds	r3, #1
 8022c56:	f8c7 3a04 	str.w	r3, [r7, #2564]	; 0xa04
            for (int32_t rhs_cols_idx = 0; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 8022c5a:	f8d7 39f0 	ldr.w	r3, [r7, #2544]	; 0x9f0
 8022c5e:	3301      	adds	r3, #1
 8022c60:	f8c7 39f0 	str.w	r3, [r7, #2544]	; 0x9f0
 8022c64:	f8d7 29f0 	ldr.w	r2, [r7, #2544]	; 0x9f0
 8022c68:	f8d7 3a70 	ldr.w	r3, [r7, #2672]	; 0xa70
 8022c6c:	429a      	cmp	r2, r3
 8022c6e:	dbcf      	blt.n	8022c10 <arm_nn_mat_mult_nt_t_s8+0x339a>
            }

            // Quantize down
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows - 1], dst_shifts[rhs_rows - 1]);
 8022c70:	f8d7 3a6c 	ldr.w	r3, [r7, #2668]	; 0xa6c
 8022c74:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8022c78:	3b01      	subs	r3, #1
 8022c7a:	009b      	lsls	r3, r3, #2
 8022c7c:	f8d7 2a60 	ldr.w	r2, [r7, #2656]	; 0xa60
 8022c80:	4413      	add	r3, r2
 8022c82:	6819      	ldr	r1, [r3, #0]
 8022c84:	f8d7 3a6c 	ldr.w	r3, [r7, #2668]	; 0xa6c
 8022c88:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8022c8c:	3b01      	subs	r3, #1
 8022c8e:	009b      	lsls	r3, r3, #2
 8022c90:	f8d7 2a64 	ldr.w	r2, [r7, #2660]	; 0xa64
 8022c94:	4413      	add	r3, r2
 8022c96:	681a      	ldr	r2, [r3, #0]
 8022c98:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8022c9c:	f8d7 09f4 	ldr.w	r0, [r7, #2548]	; 0x9f4
 8022ca0:	6018      	str	r0, [r3, #0]
 8022ca2:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8022ca6:	6019      	str	r1, [r3, #0]
 8022ca8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8022cac:	601a      	str	r2, [r3, #0]
 8022cae:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8022cb2:	681b      	ldr	r3, [r3, #0]
 8022cb4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8022cb8:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8022cbc:	6812      	ldr	r2, [r2, #0]
 8022cbe:	409a      	lsls	r2, r3
 8022cc0:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8022cc4:	601a      	str	r2, [r3, #0]
 8022cc6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8022cca:	f507 7292 	add.w	r2, r7, #292	; 0x124
 8022cce:	6812      	ldr	r2, [r2, #0]
 8022cd0:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8022cd2:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8022cd6:	2200      	movs	r2, #0
 8022cd8:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 8022cda:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8022cde:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8022ce2:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 8022ce4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8022ce8:	2200      	movs	r2, #0
 8022cea:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8022cec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8022cf0:	e9d3 4500 	ldrd	r4, r5, [r3]
 8022cf4:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8022cf8:	681b      	ldr	r3, [r3, #0]
 8022cfa:	4618      	mov	r0, r3
 8022cfc:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8022d00:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8022d04:	681b      	ldr	r3, [r3, #0]
 8022d06:	461a      	mov	r2, r3
 8022d08:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8022d0c:	fb02 fc01 	mul.w	ip, r2, r1
 8022d10:	fb00 f603 	mul.w	r6, r0, r3
 8022d14:	4466      	add	r6, ip
 8022d16:	fba0 2302 	umull	r2, r3, r0, r2
 8022d1a:	18f1      	adds	r1, r6, r3
 8022d1c:	460b      	mov	r3, r1
 8022d1e:	eb14 0a02 	adds.w	sl, r4, r2
 8022d22:	eb45 0b03 	adc.w	fp, r5, r3
 8022d26:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8022d2a:	e9c3 ab00 	strd	sl, fp, [r3]
    result = (int32_t)(mult.long_long >> 31);
 8022d2e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8022d32:	e9d3 0100 	ldrd	r0, r1, [r3]
 8022d36:	f04f 0200 	mov.w	r2, #0
 8022d3a:	f04f 0300 	mov.w	r3, #0
 8022d3e:	0fc2      	lsrs	r2, r0, #31
 8022d40:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8022d44:	17cb      	asrs	r3, r1, #31
 8022d46:	f507 718a 	add.w	r1, r7, #276	; 0x114
 8022d4a:	4613      	mov	r3, r2
 8022d4c:	600b      	str	r3, [r1, #0]
    return result;
 8022d4e:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8022d52:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8022d54:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8022d58:	681b      	ldr	r3, [r3, #0]
 8022d5a:	2b00      	cmp	r3, #0
 8022d5c:	dc04      	bgt.n	8022d68 <arm_nn_mat_mult_nt_t_s8+0x34f2>
 8022d5e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8022d62:	681b      	ldr	r3, [r3, #0]
 8022d64:	425b      	negs	r3, r3
 8022d66:	e000      	b.n	8022d6a <arm_nn_mat_mult_nt_t_s8+0x34f4>
 8022d68:	2300      	movs	r3, #0
 8022d6a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8022d6e:	6011      	str	r1, [r2, #0]
 8022d70:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8022d74:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8022d76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8022d7a:	2200      	movs	r2, #0
 8022d7c:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8022d7e:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8022d82:	2201      	movs	r2, #1
 8022d84:	681b      	ldr	r3, [r3, #0]
 8022d86:	409a      	lsls	r2, r3
 8022d88:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8022d8c:	3a01      	subs	r2, #1
 8022d8e:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 8022d90:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8022d94:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8022d98:	f507 7282 	add.w	r2, r7, #260	; 0x104
 8022d9c:	6809      	ldr	r1, [r1, #0]
 8022d9e:	6812      	ldr	r2, [r2, #0]
 8022da0:	400a      	ands	r2, r1
 8022da2:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 8022da4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8022da8:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8022dac:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8022db0:	6809      	ldr	r1, [r1, #0]
 8022db2:	6812      	ldr	r2, [r2, #0]
 8022db4:	fa41 f202 	asr.w	r2, r1, r2
 8022db8:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 8022dba:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8022dbe:	f507 7282 	add.w	r2, r7, #260	; 0x104
 8022dc2:	6812      	ldr	r2, [r2, #0]
 8022dc4:	1052      	asrs	r2, r2, #1
 8022dc6:	601a      	str	r2, [r3, #0]
    if (result < 0)
 8022dc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8022dcc:	681b      	ldr	r3, [r3, #0]
 8022dce:	2b00      	cmp	r3, #0
 8022dd0:	da06      	bge.n	8022de0 <arm_nn_mat_mult_nt_t_s8+0x356a>
        threshold++;
 8022dd2:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8022dd6:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 8022dda:	6812      	ldr	r2, [r2, #0]
 8022ddc:	3201      	adds	r2, #1
 8022dde:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 8022de0:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8022de4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8022de8:	6812      	ldr	r2, [r2, #0]
 8022dea:	681b      	ldr	r3, [r3, #0]
 8022dec:	429a      	cmp	r2, r3
 8022dee:	dd06      	ble.n	8022dfe <arm_nn_mat_mult_nt_t_s8+0x3588>
        result++;
 8022df0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8022df4:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8022df8:	6812      	ldr	r2, [r2, #0]
 8022dfa:	3201      	adds	r2, #1
 8022dfc:	601a      	str	r2, [r3, #0]
    return result;
 8022dfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8022e02:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8022e04:	bf00      	nop
 8022e06:	f8c7 39f4 	str.w	r3, [r7, #2548]	; 0x9f4

            // Add offset
            res00 += dst_offset;
 8022e0a:	f8d7 29f4 	ldr.w	r2, [r7, #2548]	; 0x9f4
 8022e0e:	f8d7 3a78 	ldr.w	r3, [r7, #2680]	; 0xa78
 8022e12:	4413      	add	r3, r2
 8022e14:	f8c7 39f4 	str.w	r3, [r7, #2548]	; 0x9f4

            // Clamp the result
            res00 = MAX(res00, activation_min);
 8022e18:	f8d7 29f4 	ldr.w	r2, [r7, #2548]	; 0x9f4
 8022e1c:	f8d7 3a7c 	ldr.w	r3, [r7, #2684]	; 0xa7c
 8022e20:	4293      	cmp	r3, r2
 8022e22:	bfb8      	it	lt
 8022e24:	4613      	movlt	r3, r2
 8022e26:	f8c7 39f4 	str.w	r3, [r7, #2548]	; 0x9f4
            res00 = MIN(res00, activation_max);
 8022e2a:	f8d7 29f4 	ldr.w	r2, [r7, #2548]	; 0x9f4
 8022e2e:	f8d7 3a80 	ldr.w	r3, [r7, #2688]	; 0xa80
 8022e32:	4293      	cmp	r3, r2
 8022e34:	bfa8      	it	ge
 8022e36:	4613      	movge	r3, r2
 8022e38:	f8c7 39f4 	str.w	r3, [r7, #2548]	; 0x9f4

            dst_ptr[0] = (q7_t)res00;
 8022e3c:	f8d7 39f4 	ldr.w	r3, [r7, #2548]	; 0x9f4
 8022e40:	b25a      	sxtb	r2, r3
 8022e42:	f8d7 3a00 	ldr.w	r3, [r7, #2560]	; 0xa00
 8022e46:	701a      	strb	r2, [r3, #0]
            dst_ptr += rhs_rows;
 8022e48:	f8d7 3a6c 	ldr.w	r3, [r7, #2668]	; 0xa6c
 8022e4c:	f8d7 2a00 	ldr.w	r2, [r7, #2560]	; 0xa00
 8022e50:	4413      	add	r3, r2
 8022e52:	f8c7 3a00 	str.w	r3, [r7, #2560]	; 0xa00
        for (int32_t lhs_rows_idx = 0; lhs_rows_idx < lhs_rows; ++lhs_rows_idx)
 8022e56:	f8d7 39fc 	ldr.w	r3, [r7, #2556]	; 0x9fc
 8022e5a:	3301      	adds	r3, #1
 8022e5c:	f8c7 39fc 	str.w	r3, [r7, #2556]	; 0x9fc
 8022e60:	f8d7 29fc 	ldr.w	r2, [r7, #2556]	; 0x9fc
 8022e64:	f8d7 3a68 	ldr.w	r3, [r7, #2664]	; 0xa68
 8022e68:	429a      	cmp	r2, r3
 8022e6a:	f6ff aeb3 	blt.w	8022bd4 <arm_nn_mat_mult_nt_t_s8+0x335e>
            dst_ptr[0] = (q7_t)res00;
            dst_ptr += rhs_rows;
        }
    }
#endif
    return ARM_MATH_SUCCESS;
 8022e6e:	2300      	movs	r3, #0
}
 8022e70:	4618      	mov	r0, r3
 8022e72:	f507 6724 	add.w	r7, r7, #2624	; 0xa40
 8022e76:	46bd      	mov	sp, r7
 8022e78:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8022e7c:	4770      	bx	lr

08022e7e <arm_q7_to_q15_with_offset>:
 * @addtogroup nndata_convert
 * @{
 */

void arm_q7_to_q15_with_offset(const q7_t *src, q15_t *dst, uint32_t block_size, q15_t offset)
{
 8022e7e:	b480      	push	{r7}
 8022e80:	b0a5      	sub	sp, #148	; 0x94
 8022e82:	af00      	add	r7, sp, #0
 8022e84:	60f8      	str	r0, [r7, #12]
 8022e86:	60b9      	str	r1, [r7, #8]
 8022e88:	607a      	str	r2, [r7, #4]
 8022e8a:	807b      	strh	r3, [r7, #2]
    q31_t in_q15x2_2;
    q31_t out_q15x2_1;
    q31_t out_q15x2_2;

    /*loop unrolling */
    block_cnt = block_size >> 2;
 8022e8c:	687b      	ldr	r3, [r7, #4]
 8022e8e:	089b      	lsrs	r3, r3, #2
 8022e90:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

    /* First part of the processing with loop unrolling.  Compute 4 outputs at a time. */
    const q31_t offset_q15x2 = __PKHBT(offset, offset, 16);
 8022e94:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8022e98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8022e9c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8022ea0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8022ea4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8022ea8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8022eac:	eac3 4302 	pkhbt	r3, r3, r2, lsl #16
 8022eb0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8022eb4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8022eb8:	67fb      	str	r3, [r7, #124]	; 0x7c
    while (block_cnt > 0)
 8022eba:	e070      	b.n	8022f9e <arm_q7_to_q15_with_offset+0x120>
 8022ebc:	f107 030c 	add.w	r3, r7, #12
 8022ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
    memcpy(&val, *in_q7, 4);
 8022ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022ec4:	681b      	ldr	r3, [r3, #0]
 8022ec6:	681b      	ldr	r3, [r3, #0]
 8022ec8:	613b      	str	r3, [r7, #16]
    *in_q7 += 4;
 8022eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022ecc:	681b      	ldr	r3, [r3, #0]
 8022ece:	1d1a      	adds	r2, r3, #4
 8022ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022ed2:	601a      	str	r2, [r3, #0]
    return (val);
 8022ed4:	693b      	ldr	r3, [r7, #16]
    {
        /* convert from q7 to q15 and then store the results in the destination buffer */
        in_q7x4 = arm_nn_read_q7x4_ia(&src);
 8022ed6:	67bb      	str	r3, [r7, #120]	; 0x78

        /* Extract and sign extend each of the four q7 values to q15 */
        in_q15x2_1 = __SXTAB16(offset_q15x2, __ROR(in_q7x4, 8));
 8022ed8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8022eda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8022edc:	637b      	str	r3, [r7, #52]	; 0x34
 8022ede:	2308      	movs	r3, #8
 8022ee0:	633b      	str	r3, [r7, #48]	; 0x30
  op2 %= 32U;
 8022ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022ee4:	f003 031f 	and.w	r3, r3, #31
 8022ee8:	633b      	str	r3, [r7, #48]	; 0x30
  if (op2 == 0U)
 8022eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022eec:	2b00      	cmp	r3, #0
 8022eee:	d101      	bne.n	8022ef4 <arm_q7_to_q15_with_offset+0x76>
    return op1;
 8022ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8022ef2:	e003      	b.n	8022efc <arm_q7_to_q15_with_offset+0x7e>
  return (op1 >> op2) | (op1 << (32U - op2));
 8022ef4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8022ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022ef8:	fa61 f303 	ror.w	r3, r1, r3
 8022efc:	643a      	str	r2, [r7, #64]	; 0x40
 8022efe:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8022f00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8022f02:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8022f04:	fa23 f382 	sxtab16	r3, r3, r2
 8022f08:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8022f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8022f0c:	677b      	str	r3, [r7, #116]	; 0x74
        in_q15x2_2 = __SXTAB16(offset_q15x2, in_q7x4);
 8022f0e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8022f10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8022f12:	64fa      	str	r2, [r7, #76]	; 0x4c
 8022f14:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8022f16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8022f18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8022f1a:	fa23 f382 	sxtab16	r3, r3, r2
 8022f1e:	647b      	str	r3, [r7, #68]	; 0x44
  return(result);
 8022f20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8022f22:	673b      	str	r3, [r7, #112]	; 0x70

        out_q15x2_2 = __PKHTB(in_q15x2_1, in_q15x2_2, 16);
 8022f24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8022f26:	66fb      	str	r3, [r7, #108]	; 0x6c
 8022f28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8022f2a:	66bb      	str	r3, [r7, #104]	; 0x68
 8022f2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8022f2e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8022f30:	eac3 4322 	pkhtb	r3, r3, r2, asr #16
 8022f34:	667b      	str	r3, [r7, #100]	; 0x64
 8022f36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8022f38:	663b      	str	r3, [r7, #96]	; 0x60
        out_q15x2_1 = __PKHBT(in_q15x2_2, in_q15x2_1, 16);
 8022f3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8022f3c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8022f3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8022f40:	65bb      	str	r3, [r7, #88]	; 0x58
 8022f42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8022f44:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8022f46:	eac3 4302 	pkhbt	r3, r3, r2, lsl #16
 8022f4a:	657b      	str	r3, [r7, #84]	; 0x54
 8022f4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8022f4e:	653b      	str	r3, [r7, #80]	; 0x50
 8022f50:	f107 0308 	add.w	r3, r7, #8
 8022f54:	623b      	str	r3, [r7, #32]
 8022f56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8022f58:	61fb      	str	r3, [r7, #28]
  @param[in]     src_q31   Input value to be written.
  @return        none
 */
__STATIC_FORCEINLINE void arm_nn_write_q15x2_ia(q15_t **dest_q15, q31_t src_q31)
{
    q31_t val = src_q31;
 8022f5a:	69fb      	ldr	r3, [r7, #28]
 8022f5c:	61bb      	str	r3, [r7, #24]

    memcpy(*dest_q15, &val, 4);
 8022f5e:	6a3b      	ldr	r3, [r7, #32]
 8022f60:	681b      	ldr	r3, [r3, #0]
 8022f62:	69ba      	ldr	r2, [r7, #24]
 8022f64:	601a      	str	r2, [r3, #0]
    *dest_q15 += 2;
 8022f66:	6a3b      	ldr	r3, [r7, #32]
 8022f68:	681b      	ldr	r3, [r3, #0]
 8022f6a:	1d1a      	adds	r2, r3, #4
 8022f6c:	6a3b      	ldr	r3, [r7, #32]
 8022f6e:	601a      	str	r2, [r3, #0]
}
 8022f70:	bf00      	nop
 8022f72:	f107 0308 	add.w	r3, r7, #8
 8022f76:	62bb      	str	r3, [r7, #40]	; 0x28
 8022f78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8022f7a:	627b      	str	r3, [r7, #36]	; 0x24
    q31_t val = src_q31;
 8022f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022f7e:	617b      	str	r3, [r7, #20]
    memcpy(*dest_q15, &val, 4);
 8022f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022f82:	681b      	ldr	r3, [r3, #0]
 8022f84:	697a      	ldr	r2, [r7, #20]
 8022f86:	601a      	str	r2, [r3, #0]
    *dest_q15 += 2;
 8022f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022f8a:	681b      	ldr	r3, [r3, #0]
 8022f8c:	1d1a      	adds	r2, r3, #4
 8022f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022f90:	601a      	str	r2, [r3, #0]
}
 8022f92:	bf00      	nop

        arm_nn_write_q15x2_ia(&dst, out_q15x2_1);
        arm_nn_write_q15x2_ia(&dst, out_q15x2_2);

        block_cnt--;
 8022f94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8022f98:	3b01      	subs	r3, #1
 8022f9a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    while (block_cnt > 0)
 8022f9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8022fa2:	2b00      	cmp	r3, #0
 8022fa4:	dc8a      	bgt.n	8022ebc <arm_q7_to_q15_with_offset+0x3e>
    }
    /* Handle left over samples */
    block_cnt = block_size % 0x4;
 8022fa6:	687b      	ldr	r3, [r7, #4]
 8022fa8:	f003 0303 	and.w	r3, r3, #3
 8022fac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    /* Run the below code for Cortex-M0 */
    /* Loop over block_size number of values */
    block_cnt = block_size;
#endif

    while (block_cnt > 0)
 8022fb0:	e012      	b.n	8022fd8 <arm_q7_to_q15_with_offset+0x15a>
    {
        *dst++ = (q15_t)*src++ + offset;
 8022fb2:	68fb      	ldr	r3, [r7, #12]
 8022fb4:	1c5a      	adds	r2, r3, #1
 8022fb6:	60fa      	str	r2, [r7, #12]
 8022fb8:	f993 3000 	ldrsb.w	r3, [r3]
 8022fbc:	b29a      	uxth	r2, r3
 8022fbe:	887b      	ldrh	r3, [r7, #2]
 8022fc0:	4413      	add	r3, r2
 8022fc2:	b299      	uxth	r1, r3
 8022fc4:	68bb      	ldr	r3, [r7, #8]
 8022fc6:	1c9a      	adds	r2, r3, #2
 8022fc8:	60ba      	str	r2, [r7, #8]
 8022fca:	b20a      	sxth	r2, r1
 8022fcc:	801a      	strh	r2, [r3, #0]

        /* Decrement the loop counter */
        block_cnt--;
 8022fce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8022fd2:	3b01      	subs	r3, #1
 8022fd4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    while (block_cnt > 0)
 8022fd8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8022fdc:	2b00      	cmp	r3, #0
 8022fde:	dce8      	bgt.n	8022fb2 <arm_q7_to_q15_with_offset+0x134>
    }
}
 8022fe0:	bf00      	nop
 8022fe2:	bf00      	nop
 8022fe4:	3794      	adds	r7, #148	; 0x94
 8022fe6:	46bd      	mov	sp, r7
 8022fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022fec:	4770      	bx	lr

08022fee <scale_q31_to_q7_and_clamp>:
                                      q7_t *target,
                                      int32_t length,
                                      const int32_t count,
                                      const int act_min,
                                      const int act_max)
{
 8022fee:	b480      	push	{r7}
 8022ff0:	b089      	sub	sp, #36	; 0x24
 8022ff2:	af00      	add	r7, sp, #0
 8022ff4:	60f8      	str	r0, [r7, #12]
 8022ff6:	60b9      	str	r1, [r7, #8]
 8022ff8:	607a      	str	r2, [r7, #4]
 8022ffa:	603b      	str	r3, [r7, #0]
    const int half_count = count / 2;
 8022ffc:	683b      	ldr	r3, [r7, #0]
 8022ffe:	0fda      	lsrs	r2, r3, #31
 8023000:	4413      	add	r3, r2
 8023002:	105b      	asrs	r3, r3, #1
 8023004:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < length; i++)
 8023006:	2300      	movs	r3, #0
 8023008:	61fb      	str	r3, [r7, #28]
 802300a:	e030      	b.n	802306e <scale_q31_to_q7_and_clamp+0x80>
    {
        int32_t sum = buffer[i] > 0 ? (buffer[i] + half_count) : (buffer[i] - half_count);
 802300c:	69fb      	ldr	r3, [r7, #28]
 802300e:	009b      	lsls	r3, r3, #2
 8023010:	68fa      	ldr	r2, [r7, #12]
 8023012:	4413      	add	r3, r2
 8023014:	681b      	ldr	r3, [r3, #0]
 8023016:	2b00      	cmp	r3, #0
 8023018:	dd07      	ble.n	802302a <scale_q31_to_q7_and_clamp+0x3c>
 802301a:	69fb      	ldr	r3, [r7, #28]
 802301c:	009b      	lsls	r3, r3, #2
 802301e:	68fa      	ldr	r2, [r7, #12]
 8023020:	4413      	add	r3, r2
 8023022:	681a      	ldr	r2, [r3, #0]
 8023024:	69bb      	ldr	r3, [r7, #24]
 8023026:	4413      	add	r3, r2
 8023028:	e006      	b.n	8023038 <scale_q31_to_q7_and_clamp+0x4a>
 802302a:	69fb      	ldr	r3, [r7, #28]
 802302c:	009b      	lsls	r3, r3, #2
 802302e:	68fa      	ldr	r2, [r7, #12]
 8023030:	4413      	add	r3, r2
 8023032:	681a      	ldr	r2, [r3, #0]
 8023034:	69bb      	ldr	r3, [r7, #24]
 8023036:	1ad3      	subs	r3, r2, r3
 8023038:	617b      	str	r3, [r7, #20]
        sum = sum / count;
 802303a:	697a      	ldr	r2, [r7, #20]
 802303c:	683b      	ldr	r3, [r7, #0]
 802303e:	fb92 f3f3 	sdiv	r3, r2, r3
 8023042:	617b      	str	r3, [r7, #20]
        sum = MAX(sum, act_min);
 8023044:	697a      	ldr	r2, [r7, #20]
 8023046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023048:	4293      	cmp	r3, r2
 802304a:	bfb8      	it	lt
 802304c:	4613      	movlt	r3, r2
 802304e:	617b      	str	r3, [r7, #20]
        sum = MIN(sum, act_max);
 8023050:	697a      	ldr	r2, [r7, #20]
 8023052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023054:	4293      	cmp	r3, r2
 8023056:	bfa8      	it	ge
 8023058:	4613      	movge	r3, r2
 802305a:	617b      	str	r3, [r7, #20]

        target[i] = (q7_t)sum;
 802305c:	69fb      	ldr	r3, [r7, #28]
 802305e:	68ba      	ldr	r2, [r7, #8]
 8023060:	4413      	add	r3, r2
 8023062:	697a      	ldr	r2, [r7, #20]
 8023064:	b252      	sxtb	r2, r2
 8023066:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < length; i++)
 8023068:	69fb      	ldr	r3, [r7, #28]
 802306a:	3301      	adds	r3, #1
 802306c:	61fb      	str	r3, [r7, #28]
 802306e:	69fa      	ldr	r2, [r7, #28]
 8023070:	687b      	ldr	r3, [r7, #4]
 8023072:	429a      	cmp	r2, r3
 8023074:	dbca      	blt.n	802300c <scale_q31_to_q7_and_clamp+0x1e>
    }
}
 8023076:	bf00      	nop
 8023078:	bf00      	nop
 802307a:	3724      	adds	r7, #36	; 0x24
 802307c:	46bd      	mov	sp, r7
 802307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023082:	4770      	bx	lr

08023084 <arm_avgpool_s8>:
                          const cmsis_nn_dims *input_dims,
                          const q7_t *src,
                          const cmsis_nn_dims *filter_dims,
                          const cmsis_nn_dims *output_dims,
                          q7_t *dst)
{
 8023084:	b580      	push	{r7, lr}
 8023086:	b0a6      	sub	sp, #152	; 0x98
 8023088:	af02      	add	r7, sp, #8
 802308a:	60f8      	str	r0, [r7, #12]
 802308c:	60b9      	str	r1, [r7, #8]
 802308e:	607a      	str	r2, [r7, #4]
 8023090:	603b      	str	r3, [r7, #0]
    const int32_t input_y = input_dims->h;
 8023092:	687b      	ldr	r3, [r7, #4]
 8023094:	685b      	ldr	r3, [r3, #4]
 8023096:	66bb      	str	r3, [r7, #104]	; 0x68
    const int32_t input_x = input_dims->w;
 8023098:	687b      	ldr	r3, [r7, #4]
 802309a:	689b      	ldr	r3, [r3, #8]
 802309c:	667b      	str	r3, [r7, #100]	; 0x64
    const int32_t output_y = output_dims->h;
 802309e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80230a2:	685b      	ldr	r3, [r3, #4]
 80230a4:	663b      	str	r3, [r7, #96]	; 0x60
    const int32_t output_x = output_dims->w;
 80230a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80230aa:	689b      	ldr	r3, [r3, #8]
 80230ac:	65fb      	str	r3, [r7, #92]	; 0x5c
    const int32_t stride_y = pool_params->stride.h;
 80230ae:	68bb      	ldr	r3, [r7, #8]
 80230b0:	685b      	ldr	r3, [r3, #4]
 80230b2:	65bb      	str	r3, [r7, #88]	; 0x58
    const int32_t stride_x = pool_params->stride.w;
 80230b4:	68bb      	ldr	r3, [r7, #8]
 80230b6:	681b      	ldr	r3, [r3, #0]
 80230b8:	657b      	str	r3, [r7, #84]	; 0x54
    const int32_t kernel_y = filter_dims->h;
 80230ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80230be:	685b      	ldr	r3, [r3, #4]
 80230c0:	653b      	str	r3, [r7, #80]	; 0x50
    const int32_t kernel_x = filter_dims->w;
 80230c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80230c6:	689b      	ldr	r3, [r3, #8]
 80230c8:	64fb      	str	r3, [r7, #76]	; 0x4c
    const int32_t pad_y = pool_params->padding.h;
 80230ca:	68bb      	ldr	r3, [r7, #8]
 80230cc:	68db      	ldr	r3, [r3, #12]
 80230ce:	64bb      	str	r3, [r7, #72]	; 0x48
    const int32_t pad_x = pool_params->padding.w;
 80230d0:	68bb      	ldr	r3, [r7, #8]
 80230d2:	689b      	ldr	r3, [r3, #8]
 80230d4:	647b      	str	r3, [r7, #68]	; 0x44
    const int32_t act_min = pool_params->activation.min;
 80230d6:	68bb      	ldr	r3, [r7, #8]
 80230d8:	691b      	ldr	r3, [r3, #16]
 80230da:	643b      	str	r3, [r7, #64]	; 0x40
    const int32_t act_max = pool_params->activation.max;
 80230dc:	68bb      	ldr	r3, [r7, #8]
 80230de:	695b      	ldr	r3, [r3, #20]
 80230e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    const int32_t ch_src = input_dims->c;
 80230e2:	687b      	ldr	r3, [r7, #4]
 80230e4:	68db      	ldr	r3, [r3, #12]
 80230e6:	63bb      	str	r3, [r7, #56]	; 0x38
    q31_t *buffer = (q31_t *)ctx->buf;
 80230e8:	68fb      	ldr	r3, [r7, #12]
 80230ea:	681b      	ldr	r3, [r3, #0]
 80230ec:	637b      	str	r3, [r7, #52]	; 0x34

#if defined(ARM_MATH_DSP)

    /* Run the following code for CPU's with DSP extension
     */
    for (int i_y = 0, idx_y = -pad_y; i_y < output_y; idx_y += stride_y, i_y++)
 80230ee:	2300      	movs	r3, #0
 80230f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80230f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80230f6:	425b      	negs	r3, r3
 80230f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80230fc:	e0c7      	b.n	802328e <arm_avgpool_s8+0x20a>
    {
        for (int i_x = 0, idx_x = -pad_x; i_x < output_x; idx_x += stride_x, i_x++)
 80230fe:	2300      	movs	r3, #0
 8023100:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8023104:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8023106:	425b      	negs	r3, r3
 8023108:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 802310c:	e0ae      	b.n	802326c <arm_avgpool_s8+0x1e8>
        {
            /* Condition for kernel start dimension:
                      (base_idx_<x,y> + kernel_<x,y>_start) >= 0 */
            const int32_t kernel_y_start = MAX(0, -idx_y);
 802310e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8023112:	2b00      	cmp	r3, #0
 8023114:	dc03      	bgt.n	802311e <arm_avgpool_s8+0x9a>
 8023116:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 802311a:	425b      	negs	r3, r3
 802311c:	e000      	b.n	8023120 <arm_avgpool_s8+0x9c>
 802311e:	2300      	movs	r3, #0
 8023120:	633b      	str	r3, [r7, #48]	; 0x30
            const int32_t kernel_x_start = MAX(0, -idx_x);
 8023122:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8023126:	2b00      	cmp	r3, #0
 8023128:	dc03      	bgt.n	8023132 <arm_avgpool_s8+0xae>
 802312a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 802312e:	425b      	negs	r3, r3
 8023130:	e000      	b.n	8023134 <arm_avgpool_s8+0xb0>
 8023132:	2300      	movs	r3, #0
 8023134:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Condition for kernel end dimension:
                   (base_idx_<x,y> + kernel_<x,y>_end) < dim_src_<width,height> */
            const int32_t kernel_y_end = MIN(kernel_y, input_y - idx_y);
 8023136:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8023138:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 802313c:	1ad3      	subs	r3, r2, r3
 802313e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8023140:	4293      	cmp	r3, r2
 8023142:	bfa8      	it	ge
 8023144:	4613      	movge	r3, r2
 8023146:	62bb      	str	r3, [r7, #40]	; 0x28
            const int32_t kernel_x_end = MIN(kernel_x, input_x - idx_x);
 8023148:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 802314a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 802314e:	1ad3      	subs	r3, r2, r3
 8023150:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8023152:	4293      	cmp	r3, r2
 8023154:	bfa8      	it	ge
 8023156:	4613      	movge	r3, r2
 8023158:	627b      	str	r3, [r7, #36]	; 0x24

            int count = 0;
 802315a:	2300      	movs	r3, #0
 802315c:	67fb      	str	r3, [r7, #124]	; 0x7c

            for (int k_y = kernel_y_start; k_y < kernel_y_end; k_y++)
 802315e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023160:	67bb      	str	r3, [r7, #120]	; 0x78
 8023162:	e05d      	b.n	8023220 <arm_avgpool_s8+0x19c>
            {
                for (int k_x = kernel_x_start; k_x < kernel_x_end; k_x++)
 8023164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023166:	677b      	str	r3, [r7, #116]	; 0x74
 8023168:	e053      	b.n	8023212 <arm_avgpool_s8+0x18e>
                {
                    const q7_t *start = src + ch_src * (k_x + idx_x + (k_y + idx_y) * input_x);
 802316a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 802316c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8023170:	441a      	add	r2, r3
 8023172:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8023174:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8023178:	440b      	add	r3, r1
 802317a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 802317c:	fb01 f303 	mul.w	r3, r1, r3
 8023180:	4413      	add	r3, r2
 8023182:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8023184:	fb02 f303 	mul.w	r3, r2, r3
 8023188:	461a      	mov	r2, r3
 802318a:	683b      	ldr	r3, [r7, #0]
 802318c:	4413      	add	r3, r2
 802318e:	623b      	str	r3, [r7, #32]

                    if (count == 0)
 8023190:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8023192:	2b00      	cmp	r3, #0
 8023194:	d115      	bne.n	80231c2 <arm_avgpool_s8+0x13e>
                    {
                        for (int i = 0; i < ch_src; i++)
 8023196:	2300      	movs	r3, #0
 8023198:	673b      	str	r3, [r7, #112]	; 0x70
 802319a:	e00d      	b.n	80231b8 <arm_avgpool_s8+0x134>
                        {
                            buffer[i] = start[i];
 802319c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 802319e:	6a3a      	ldr	r2, [r7, #32]
 80231a0:	4413      	add	r3, r2
 80231a2:	f993 1000 	ldrsb.w	r1, [r3]
 80231a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80231a8:	009b      	lsls	r3, r3, #2
 80231aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80231ac:	4413      	add	r3, r2
 80231ae:	460a      	mov	r2, r1
 80231b0:	601a      	str	r2, [r3, #0]
                        for (int i = 0; i < ch_src; i++)
 80231b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80231b4:	3301      	adds	r3, #1
 80231b6:	673b      	str	r3, [r7, #112]	; 0x70
 80231b8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80231ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80231bc:	429a      	cmp	r2, r3
 80231be:	dbed      	blt.n	802319c <arm_avgpool_s8+0x118>
 80231c0:	e021      	b.n	8023206 <arm_avgpool_s8+0x182>
                        }
                    }
                    else
                    {
                        for (int i = 0; i < ch_src; i++)
 80231c2:	2300      	movs	r3, #0
 80231c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80231c6:	e01a      	b.n	80231fe <arm_avgpool_s8+0x17a>
                        {
                            buffer[i] = __QADD(start[i], buffer[i]);
 80231c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80231ca:	6a3a      	ldr	r2, [r7, #32]
 80231cc:	4413      	add	r3, r2
 80231ce:	f993 3000 	ldrsb.w	r3, [r3]
 80231d2:	4618      	mov	r0, r3
 80231d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80231d6:	009b      	lsls	r3, r3, #2
 80231d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80231da:	4413      	add	r3, r2
 80231dc:	681a      	ldr	r2, [r3, #0]
 80231de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80231e0:	009b      	lsls	r3, r3, #2
 80231e2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80231e4:	440b      	add	r3, r1
 80231e6:	61f8      	str	r0, [r7, #28]
 80231e8:	61ba      	str	r2, [r7, #24]

__STATIC_FORCEINLINE  int32_t __QADD( int32_t op1,  int32_t op2)
{
  int32_t result;

  __ASM volatile ("qadd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80231ea:	69fa      	ldr	r2, [r7, #28]
 80231ec:	69b9      	ldr	r1, [r7, #24]
 80231ee:	fa81 f282 	qadd	r2, r2, r1
 80231f2:	617a      	str	r2, [r7, #20]
  return(result);
 80231f4:	697a      	ldr	r2, [r7, #20]
 80231f6:	601a      	str	r2, [r3, #0]
                        for (int i = 0; i < ch_src; i++)
 80231f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80231fa:	3301      	adds	r3, #1
 80231fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80231fe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8023200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023202:	429a      	cmp	r2, r3
 8023204:	dbe0      	blt.n	80231c8 <arm_avgpool_s8+0x144>
                        }
                    }
                    count++;
 8023206:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8023208:	3301      	adds	r3, #1
 802320a:	67fb      	str	r3, [r7, #124]	; 0x7c
                for (int k_x = kernel_x_start; k_x < kernel_x_end; k_x++)
 802320c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802320e:	3301      	adds	r3, #1
 8023210:	677b      	str	r3, [r7, #116]	; 0x74
 8023212:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8023214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023216:	429a      	cmp	r2, r3
 8023218:	dba7      	blt.n	802316a <arm_avgpool_s8+0xe6>
            for (int k_y = kernel_y_start; k_y < kernel_y_end; k_y++)
 802321a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 802321c:	3301      	adds	r3, #1
 802321e:	67bb      	str	r3, [r7, #120]	; 0x78
 8023220:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8023222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023224:	429a      	cmp	r2, r3
 8023226:	db9d      	blt.n	8023164 <arm_avgpool_s8+0xe0>
                }
            }

            // Prevent static code issue DIVIDE_BY_ZERO.
            if (count == 0)
 8023228:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 802322a:	2b00      	cmp	r3, #0
 802322c:	d102      	bne.n	8023234 <arm_avgpool_s8+0x1b0>
            {
                return ARM_MATH_ARGUMENT_ERROR;
 802322e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8023232:	e033      	b.n	802329c <arm_avgpool_s8+0x218>
            }

            scale_q31_to_q7_and_clamp(buffer, dst, ch_src, count, act_min, act_max);
 8023234:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8023236:	9301      	str	r3, [sp, #4]
 8023238:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802323a:	9300      	str	r3, [sp, #0]
 802323c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 802323e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8023240:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8023244:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8023246:	f7ff fed2 	bl	8022fee <scale_q31_to_q7_and_clamp>
            dst += ch_src;
 802324a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802324c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8023250:	4413      	add	r3, r2
 8023252:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        for (int i_x = 0, idx_x = -pad_x; i_x < output_x; idx_x += stride_x, i_x++)
 8023256:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 802325a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802325c:	4413      	add	r3, r2
 802325e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8023262:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8023266:	3301      	adds	r3, #1
 8023268:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 802326c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8023270:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8023272:	429a      	cmp	r2, r3
 8023274:	f6ff af4b 	blt.w	802310e <arm_avgpool_s8+0x8a>
    for (int i_y = 0, idx_y = -pad_y; i_y < output_y; idx_y += stride_y, i_y++)
 8023278:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 802327c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802327e:	4413      	add	r3, r2
 8023280:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8023284:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8023288:	3301      	adds	r3, #1
 802328a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 802328e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8023292:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8023294:	429a      	cmp	r2, r3
 8023296:	f6ff af32 	blt.w	80230fe <arm_avgpool_s8+0x7a>
            }
        }
    }

#endif
    return ARM_MATH_SUCCESS;
 802329a:	2300      	movs	r3, #0
}
 802329c:	4618      	mov	r0, r3
 802329e:	3790      	adds	r7, #144	; 0x90
 80232a0:	46bd      	mov	sp, r7
 80232a2:	bd80      	pop	{r7, pc}

080232a4 <arm_avgpool_s8_get_buffer_size>:

#endif /* ARM_MATH_MVEI */

int32_t arm_avgpool_s8_get_buffer_size(const int output_x, const int ch_src)
{
 80232a4:	b480      	push	{r7}
 80232a6:	b083      	sub	sp, #12
 80232a8:	af00      	add	r7, sp, #0
 80232aa:	6078      	str	r0, [r7, #4]
 80232ac:	6039      	str	r1, [r7, #0]
    (void)output_x;

#if defined(ARM_MATH_DSP) && !defined(ARM_MATH_MVEI)
    return (ch_src * sizeof(int32_t));
 80232ae:	683b      	ldr	r3, [r7, #0]
 80232b0:	009b      	lsls	r3, r3, #2
#else
    (void)ch_src;
    return 0;
#endif
}
 80232b2:	4618      	mov	r0, r3
 80232b4:	370c      	adds	r7, #12
 80232b6:	46bd      	mov	sp, r7
 80232b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80232bc:	4770      	bx	lr

080232be <compare_and_replace_if_larger_q7>:

#include "arm_nnfunctions.h"
#include "arm_nnsupportfunctions.h"

static void compare_and_replace_if_larger_q7(q7_t *base, const q7_t *target, int32_t length)
{
 80232be:	b480      	push	{r7}
 80232c0:	b091      	sub	sp, #68	; 0x44
 80232c2:	af00      	add	r7, sp, #0
 80232c4:	60f8      	str	r0, [r7, #12]
 80232c6:	60b9      	str	r1, [r7, #8]
 80232c8:	607a      	str	r2, [r7, #4]
        base += 16;
        target += 16;
        length -= 16;
    }
#else
    q7_t *dst = base;
 80232ca:	68fb      	ldr	r3, [r7, #12]
 80232cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    const q7_t *src = target;
 80232ce:	68bb      	ldr	r3, [r7, #8]
 80232d0:	62bb      	str	r3, [r7, #40]	; 0x28
    union arm_nnword ref_max;
    union arm_nnword comp_max;
    int32_t cnt = length >> 2;
 80232d2:	687b      	ldr	r3, [r7, #4]
 80232d4:	109b      	asrs	r3, r3, #2
 80232d6:	63fb      	str	r3, [r7, #60]	; 0x3c

    while (cnt > 0l)
 80232d8:	e04e      	b.n	8023378 <compare_and_replace_if_larger_q7+0xba>
    {
        ref_max.word = arm_nn_read_q7x4(dst);
 80232da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80232dc:	637b      	str	r3, [r7, #52]	; 0x34
 80232de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80232e0:	681b      	ldr	r3, [r3, #0]
    memcpy(&val, in_q7, 4);
 80232e2:	61bb      	str	r3, [r7, #24]
    return (val);
 80232e4:	69bb      	ldr	r3, [r7, #24]
 80232e6:	627b      	str	r3, [r7, #36]	; 0x24
 80232e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80232ec:	63bb      	str	r3, [r7, #56]	; 0x38
    memcpy(&val, *in_q7, 4);
 80232ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80232f0:	681b      	ldr	r3, [r3, #0]
 80232f2:	681b      	ldr	r3, [r3, #0]
 80232f4:	617b      	str	r3, [r7, #20]
    *in_q7 += 4;
 80232f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80232f8:	681b      	ldr	r3, [r3, #0]
 80232fa:	1d1a      	adds	r2, r3, #4
 80232fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80232fe:	601a      	str	r2, [r3, #0]
    return (val);
 8023300:	697b      	ldr	r3, [r7, #20]
        comp_max.word = arm_nn_read_q7x4_ia(&src);
 8023302:	623b      	str	r3, [r7, #32]

        if (comp_max.bytes[0] > ref_max.bytes[0])
 8023304:	f997 2020 	ldrsb.w	r2, [r7, #32]
 8023308:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 802330c:	429a      	cmp	r2, r3
 802330e:	dd03      	ble.n	8023318 <compare_and_replace_if_larger_q7+0x5a>
        {
            ref_max.bytes[0] = comp_max.bytes[0];
 8023310:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8023314:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        }
        if (comp_max.bytes[1] > ref_max.bytes[1])
 8023318:	f997 2021 	ldrsb.w	r2, [r7, #33]	; 0x21
 802331c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8023320:	429a      	cmp	r2, r3
 8023322:	dd03      	ble.n	802332c <compare_and_replace_if_larger_q7+0x6e>
        {
            ref_max.bytes[1] = comp_max.bytes[1];
 8023324:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8023328:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        }
        if (comp_max.bytes[2] > ref_max.bytes[2])
 802332c:	f997 2022 	ldrsb.w	r2, [r7, #34]	; 0x22
 8023330:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 8023334:	429a      	cmp	r2, r3
 8023336:	dd03      	ble.n	8023340 <compare_and_replace_if_larger_q7+0x82>
        {
            ref_max.bytes[2] = comp_max.bytes[2];
 8023338:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 802333c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        }
        if (comp_max.bytes[3] > ref_max.bytes[3])
 8023340:	f997 2023 	ldrsb.w	r2, [r7, #35]	; 0x23
 8023344:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8023348:	429a      	cmp	r2, r3
 802334a:	dd03      	ble.n	8023354 <compare_and_replace_if_larger_q7+0x96>
        {
            ref_max.bytes[3] = comp_max.bytes[3];
 802334c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8023350:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }

        arm_nn_write_q7x4_ia(&dst, ref_max.word);
 8023354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023356:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 802335a:	633a      	str	r2, [r7, #48]	; 0x30
 802335c:	61fb      	str	r3, [r7, #28]
    memcpy(*in, &value, 4);
 802335e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023360:	681b      	ldr	r3, [r3, #0]
 8023362:	69fa      	ldr	r2, [r7, #28]
 8023364:	601a      	str	r2, [r3, #0]
    *in += 4;
 8023366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023368:	681b      	ldr	r3, [r3, #0]
 802336a:	1d1a      	adds	r2, r3, #4
 802336c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802336e:	601a      	str	r2, [r3, #0]
}
 8023370:	bf00      	nop

        cnt--;
 8023372:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8023374:	3b01      	subs	r3, #1
 8023376:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (cnt > 0l)
 8023378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802337a:	2b00      	cmp	r3, #0
 802337c:	dcad      	bgt.n	80232da <compare_and_replace_if_larger_q7+0x1c>
    }

    cnt = length & 0x3;
 802337e:	687b      	ldr	r3, [r7, #4]
 8023380:	f003 0303 	and.w	r3, r3, #3
 8023384:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (cnt > 0l)
 8023386:	e015      	b.n	80233b4 <compare_and_replace_if_larger_q7+0xf6>
    {
        if (*src > *dst)
 8023388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802338a:	f993 2000 	ldrsb.w	r2, [r3]
 802338e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023390:	f993 3000 	ldrsb.w	r3, [r3]
 8023394:	429a      	cmp	r2, r3
 8023396:	dd04      	ble.n	80233a2 <compare_and_replace_if_larger_q7+0xe4>
        {
            *dst = *src;
 8023398:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802339a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802339c:	f992 2000 	ldrsb.w	r2, [r2]
 80233a0:	701a      	strb	r2, [r3, #0]
        }
        dst++;
 80233a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80233a4:	3301      	adds	r3, #1
 80233a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        src++;
 80233a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80233aa:	3301      	adds	r3, #1
 80233ac:	62bb      	str	r3, [r7, #40]	; 0x28
        cnt--;
 80233ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80233b0:	3b01      	subs	r3, #1
 80233b2:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (cnt > 0l)
 80233b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80233b6:	2b00      	cmp	r3, #0
 80233b8:	dce6      	bgt.n	8023388 <compare_and_replace_if_larger_q7+0xca>
    }
#endif
}
 80233ba:	bf00      	nop
 80233bc:	bf00      	nop
 80233be:	3744      	adds	r7, #68	; 0x44
 80233c0:	46bd      	mov	sp, r7
 80233c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80233c6:	4770      	bx	lr

080233c8 <clamp_output>:

static void clamp_output(q7_t *source, int32_t length, const int32_t act_min, const int32_t act_max)
{
 80233c8:	b480      	push	{r7}
 80233ca:	b08d      	sub	sp, #52	; 0x34
 80233cc:	af00      	add	r7, sp, #0
 80233ce:	60f8      	str	r0, [r7, #12]
 80233d0:	60b9      	str	r1, [r7, #8]
 80233d2:	607a      	str	r2, [r7, #4]
 80233d4:	603b      	str	r3, [r7, #0]
        vstrbq_p_s8(source, res, p);
        source += 16;
    }
#else
    union arm_nnword in;
    int32_t cnt = length >> 2;
 80233d6:	68bb      	ldr	r3, [r7, #8]
 80233d8:	109b      	asrs	r3, r3, #2
 80233da:	62fb      	str	r3, [r7, #44]	; 0x2c

    while (cnt > 0l)
 80233dc:	e060      	b.n	80234a0 <clamp_output+0xd8>
    {
        in.word = arm_nn_read_q7x4(source);
 80233de:	68fb      	ldr	r3, [r7, #12]
 80233e0:	623b      	str	r3, [r7, #32]
 80233e2:	6a3b      	ldr	r3, [r7, #32]
 80233e4:	681b      	ldr	r3, [r3, #0]
    memcpy(&val, in_q7, 4);
 80233e6:	61bb      	str	r3, [r7, #24]
    return (val);
 80233e8:	69bb      	ldr	r3, [r7, #24]
 80233ea:	61fb      	str	r3, [r7, #28]

        in.bytes[0] = MAX(in.bytes[0], act_min);
 80233ec:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80233f0:	461a      	mov	r2, r3
 80233f2:	687b      	ldr	r3, [r7, #4]
 80233f4:	4293      	cmp	r3, r2
 80233f6:	bfb8      	it	lt
 80233f8:	4613      	movlt	r3, r2
 80233fa:	b25b      	sxtb	r3, r3
 80233fc:	773b      	strb	r3, [r7, #28]
        in.bytes[0] = MIN(in.bytes[0], act_max);
 80233fe:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8023402:	461a      	mov	r2, r3
 8023404:	683b      	ldr	r3, [r7, #0]
 8023406:	4293      	cmp	r3, r2
 8023408:	bfa8      	it	ge
 802340a:	4613      	movge	r3, r2
 802340c:	b25b      	sxtb	r3, r3
 802340e:	773b      	strb	r3, [r7, #28]
        in.bytes[1] = MAX(in.bytes[1], act_min);
 8023410:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8023414:	461a      	mov	r2, r3
 8023416:	687b      	ldr	r3, [r7, #4]
 8023418:	4293      	cmp	r3, r2
 802341a:	bfb8      	it	lt
 802341c:	4613      	movlt	r3, r2
 802341e:	b25b      	sxtb	r3, r3
 8023420:	777b      	strb	r3, [r7, #29]
        in.bytes[1] = MIN(in.bytes[1], act_max);
 8023422:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8023426:	461a      	mov	r2, r3
 8023428:	683b      	ldr	r3, [r7, #0]
 802342a:	4293      	cmp	r3, r2
 802342c:	bfa8      	it	ge
 802342e:	4613      	movge	r3, r2
 8023430:	b25b      	sxtb	r3, r3
 8023432:	777b      	strb	r3, [r7, #29]
        in.bytes[2] = MAX(in.bytes[2], act_min);
 8023434:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8023438:	461a      	mov	r2, r3
 802343a:	687b      	ldr	r3, [r7, #4]
 802343c:	4293      	cmp	r3, r2
 802343e:	bfb8      	it	lt
 8023440:	4613      	movlt	r3, r2
 8023442:	b25b      	sxtb	r3, r3
 8023444:	77bb      	strb	r3, [r7, #30]
        in.bytes[2] = MIN(in.bytes[2], act_max);
 8023446:	f997 301e 	ldrsb.w	r3, [r7, #30]
 802344a:	461a      	mov	r2, r3
 802344c:	683b      	ldr	r3, [r7, #0]
 802344e:	4293      	cmp	r3, r2
 8023450:	bfa8      	it	ge
 8023452:	4613      	movge	r3, r2
 8023454:	b25b      	sxtb	r3, r3
 8023456:	77bb      	strb	r3, [r7, #30]
        in.bytes[3] = MAX(in.bytes[3], act_min);
 8023458:	f997 301f 	ldrsb.w	r3, [r7, #31]
 802345c:	461a      	mov	r2, r3
 802345e:	687b      	ldr	r3, [r7, #4]
 8023460:	4293      	cmp	r3, r2
 8023462:	bfb8      	it	lt
 8023464:	4613      	movlt	r3, r2
 8023466:	b25b      	sxtb	r3, r3
 8023468:	77fb      	strb	r3, [r7, #31]
        in.bytes[3] = MIN(in.bytes[3], act_max);
 802346a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 802346e:	461a      	mov	r2, r3
 8023470:	683b      	ldr	r3, [r7, #0]
 8023472:	4293      	cmp	r3, r2
 8023474:	bfa8      	it	ge
 8023476:	4613      	movge	r3, r2
 8023478:	b25b      	sxtb	r3, r3
 802347a:	77fb      	strb	r3, [r7, #31]

        arm_nn_write_q7x4_ia(&source, in.word);
 802347c:	69fb      	ldr	r3, [r7, #28]
 802347e:	f107 020c 	add.w	r2, r7, #12
 8023482:	627a      	str	r2, [r7, #36]	; 0x24
 8023484:	617b      	str	r3, [r7, #20]
    memcpy(*in, &value, 4);
 8023486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023488:	681b      	ldr	r3, [r3, #0]
 802348a:	697a      	ldr	r2, [r7, #20]
 802348c:	601a      	str	r2, [r3, #0]
    *in += 4;
 802348e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023490:	681b      	ldr	r3, [r3, #0]
 8023492:	1d1a      	adds	r2, r3, #4
 8023494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023496:	601a      	str	r2, [r3, #0]
}
 8023498:	bf00      	nop
        cnt--;
 802349a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802349c:	3b01      	subs	r3, #1
 802349e:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (cnt > 0l)
 80234a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80234a2:	2b00      	cmp	r3, #0
 80234a4:	dc9b      	bgt.n	80233de <clamp_output+0x16>
    }

    cnt = length & 0x3;
 80234a6:	68bb      	ldr	r3, [r7, #8]
 80234a8:	f003 0303 	and.w	r3, r3, #3
 80234ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (cnt > 0l)
 80234ae:	e018      	b.n	80234e2 <clamp_output+0x11a>
    {
        int32_t comp = *source;
 80234b0:	68fb      	ldr	r3, [r7, #12]
 80234b2:	f993 3000 	ldrsb.w	r3, [r3]
 80234b6:	62bb      	str	r3, [r7, #40]	; 0x28
        comp = MAX(comp, act_min);
 80234b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80234ba:	687b      	ldr	r3, [r7, #4]
 80234bc:	4293      	cmp	r3, r2
 80234be:	bfb8      	it	lt
 80234c0:	4613      	movlt	r3, r2
 80234c2:	62bb      	str	r3, [r7, #40]	; 0x28
        comp = MIN(comp, act_max);
 80234c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80234c6:	683b      	ldr	r3, [r7, #0]
 80234c8:	4293      	cmp	r3, r2
 80234ca:	bfa8      	it	ge
 80234cc:	4613      	movge	r3, r2
 80234ce:	62bb      	str	r3, [r7, #40]	; 0x28
        *source++ = (int8_t)comp;
 80234d0:	68fb      	ldr	r3, [r7, #12]
 80234d2:	1c5a      	adds	r2, r3, #1
 80234d4:	60fa      	str	r2, [r7, #12]
 80234d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80234d8:	b252      	sxtb	r2, r2
 80234da:	701a      	strb	r2, [r3, #0]
        cnt--;
 80234dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80234de:	3b01      	subs	r3, #1
 80234e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (cnt > 0l)
 80234e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80234e4:	2b00      	cmp	r3, #0
 80234e6:	dce3      	bgt.n	80234b0 <clamp_output+0xe8>
    }
#endif
}
 80234e8:	bf00      	nop
 80234ea:	bf00      	nop
 80234ec:	3734      	adds	r7, #52	; 0x34
 80234ee:	46bd      	mov	sp, r7
 80234f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80234f4:	4770      	bx	lr

080234f6 <arm_max_pool_s8>:
                           const cmsis_nn_dims *input_dims,
                           const q7_t *src,
                           const cmsis_nn_dims *filter_dims,
                           const cmsis_nn_dims *output_dims,
                           q7_t *dst)
{
 80234f6:	b580      	push	{r7, lr}
 80234f8:	b09e      	sub	sp, #120	; 0x78
 80234fa:	af00      	add	r7, sp, #0
 80234fc:	60f8      	str	r0, [r7, #12]
 80234fe:	60b9      	str	r1, [r7, #8]
 8023500:	607a      	str	r2, [r7, #4]
 8023502:	603b      	str	r3, [r7, #0]
    const int32_t input_y = input_dims->h;
 8023504:	687b      	ldr	r3, [r7, #4]
 8023506:	685b      	ldr	r3, [r3, #4]
 8023508:	65bb      	str	r3, [r7, #88]	; 0x58
    const int32_t input_x = input_dims->w;
 802350a:	687b      	ldr	r3, [r7, #4]
 802350c:	689b      	ldr	r3, [r3, #8]
 802350e:	657b      	str	r3, [r7, #84]	; 0x54
    const int32_t output_y = output_dims->h;
 8023510:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8023514:	685b      	ldr	r3, [r3, #4]
 8023516:	653b      	str	r3, [r7, #80]	; 0x50
    const int32_t output_x = output_dims->w;
 8023518:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 802351c:	689b      	ldr	r3, [r3, #8]
 802351e:	64fb      	str	r3, [r7, #76]	; 0x4c
    const int32_t stride_y = pool_params->stride.h;
 8023520:	68bb      	ldr	r3, [r7, #8]
 8023522:	685b      	ldr	r3, [r3, #4]
 8023524:	64bb      	str	r3, [r7, #72]	; 0x48
    const int32_t stride_x = pool_params->stride.w;
 8023526:	68bb      	ldr	r3, [r7, #8]
 8023528:	681b      	ldr	r3, [r3, #0]
 802352a:	647b      	str	r3, [r7, #68]	; 0x44
    const int32_t kernel_y = filter_dims->h;
 802352c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8023530:	685b      	ldr	r3, [r3, #4]
 8023532:	643b      	str	r3, [r7, #64]	; 0x40
    const int32_t kernel_x = filter_dims->w;
 8023534:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8023538:	689b      	ldr	r3, [r3, #8]
 802353a:	63fb      	str	r3, [r7, #60]	; 0x3c
    const int32_t pad_y = pool_params->padding.h;
 802353c:	68bb      	ldr	r3, [r7, #8]
 802353e:	68db      	ldr	r3, [r3, #12]
 8023540:	63bb      	str	r3, [r7, #56]	; 0x38
    const int32_t pad_x = pool_params->padding.w;
 8023542:	68bb      	ldr	r3, [r7, #8]
 8023544:	689b      	ldr	r3, [r3, #8]
 8023546:	637b      	str	r3, [r7, #52]	; 0x34
    const int32_t act_min = pool_params->activation.min;
 8023548:	68bb      	ldr	r3, [r7, #8]
 802354a:	691b      	ldr	r3, [r3, #16]
 802354c:	633b      	str	r3, [r7, #48]	; 0x30
    const int32_t act_max = pool_params->activation.max;
 802354e:	68bb      	ldr	r3, [r7, #8]
 8023550:	695b      	ldr	r3, [r3, #20]
 8023552:	62fb      	str	r3, [r7, #44]	; 0x2c
    const int32_t channel_in = input_dims->c;
 8023554:	687b      	ldr	r3, [r7, #4]
 8023556:	68db      	ldr	r3, [r3, #12]
 8023558:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)ctx;
    q7_t *dst_base = dst;
 802355a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 802355e:	627b      	str	r3, [r7, #36]	; 0x24

    for (int i_y = 0, base_idx_y = -pad_y; i_y < output_y; base_idx_y += stride_y, i_y++)
 8023560:	2300      	movs	r3, #0
 8023562:	677b      	str	r3, [r7, #116]	; 0x74
 8023564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023566:	425b      	negs	r3, r3
 8023568:	673b      	str	r3, [r7, #112]	; 0x70
 802356a:	e078      	b.n	802365e <arm_max_pool_s8+0x168>
    {
        for (int i_x = 0, base_idx_x = -pad_x; i_x < output_x; base_idx_x += stride_x, i_x++)
 802356c:	2300      	movs	r3, #0
 802356e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8023570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023572:	425b      	negs	r3, r3
 8023574:	66bb      	str	r3, [r7, #104]	; 0x68
 8023576:	e067      	b.n	8023648 <arm_max_pool_s8+0x152>
        {
            /* Condition for kernel start dimension: (base_idx_<x,y> + kernel_<x,y>_start) >= 0 */
            const int32_t ker_y_start = MAX(0, -base_idx_y);
 8023578:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 802357a:	2b00      	cmp	r3, #0
 802357c:	dc02      	bgt.n	8023584 <arm_max_pool_s8+0x8e>
 802357e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8023580:	425b      	negs	r3, r3
 8023582:	e000      	b.n	8023586 <arm_max_pool_s8+0x90>
 8023584:	2300      	movs	r3, #0
 8023586:	623b      	str	r3, [r7, #32]
            const int32_t ker_x_start = MAX(0, -base_idx_x);
 8023588:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 802358a:	2b00      	cmp	r3, #0
 802358c:	dc02      	bgt.n	8023594 <arm_max_pool_s8+0x9e>
 802358e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8023590:	425b      	negs	r3, r3
 8023592:	e000      	b.n	8023596 <arm_max_pool_s8+0xa0>
 8023594:	2300      	movs	r3, #0
 8023596:	61fb      	str	r3, [r7, #28]

            /* Condition for kernel end dimension: (base_idx_<x,y> + kernel_<x,y>_end) < dim_src_<width,height> */
            const int32_t kernel_y_end = MIN(kernel_y, input_y - base_idx_y);
 8023598:	6dba      	ldr	r2, [r7, #88]	; 0x58
 802359a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 802359c:	1ad3      	subs	r3, r2, r3
 802359e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80235a0:	4293      	cmp	r3, r2
 80235a2:	bfa8      	it	ge
 80235a4:	4613      	movge	r3, r2
 80235a6:	61bb      	str	r3, [r7, #24]
            const int32_t kernel_x_end = MIN(kernel_x, input_x - base_idx_x);
 80235a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80235aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80235ac:	1ad3      	subs	r3, r2, r3
 80235ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80235b0:	4293      	cmp	r3, r2
 80235b2:	bfa8      	it	ge
 80235b4:	4613      	movge	r3, r2
 80235b6:	617b      	str	r3, [r7, #20]

            int count = 0;
 80235b8:	2300      	movs	r3, #0
 80235ba:	667b      	str	r3, [r7, #100]	; 0x64

            for (int k_y = ker_y_start; k_y < kernel_y_end; k_y++)
 80235bc:	6a3b      	ldr	r3, [r7, #32]
 80235be:	663b      	str	r3, [r7, #96]	; 0x60
 80235c0:	e031      	b.n	8023626 <arm_max_pool_s8+0x130>
            {
                for (int k_x = ker_x_start; k_x < kernel_x_end; k_x++)
 80235c2:	69fb      	ldr	r3, [r7, #28]
 80235c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80235c6:	e027      	b.n	8023618 <arm_max_pool_s8+0x122>
                {
                    const q7_t *start = src + channel_in * (k_x + base_idx_x + (k_y + base_idx_y) * input_x);
 80235c8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80235ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80235cc:	441a      	add	r2, r3
 80235ce:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80235d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80235d2:	440b      	add	r3, r1
 80235d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80235d6:	fb01 f303 	mul.w	r3, r1, r3
 80235da:	4413      	add	r3, r2
 80235dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80235de:	fb02 f303 	mul.w	r3, r2, r3
 80235e2:	461a      	mov	r2, r3
 80235e4:	683b      	ldr	r3, [r7, #0]
 80235e6:	4413      	add	r3, r2
 80235e8:	613b      	str	r3, [r7, #16]

                    if (count == 0)
 80235ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80235ec:	2b00      	cmp	r3, #0
 80235ee:	d10a      	bne.n	8023606 <arm_max_pool_s8+0x110>
                    {
                        memcpy(dst, start, channel_in);
 80235f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80235f2:	461a      	mov	r2, r3
 80235f4:	6939      	ldr	r1, [r7, #16]
 80235f6:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80235fa:	f003 fbf7 	bl	8026dec <memcpy>
                        count++;
 80235fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8023600:	3301      	adds	r3, #1
 8023602:	667b      	str	r3, [r7, #100]	; 0x64
 8023604:	e005      	b.n	8023612 <arm_max_pool_s8+0x11c>
                    }
                    else
                    {
                        compare_and_replace_if_larger_q7(dst, start, channel_in);
 8023606:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8023608:	6939      	ldr	r1, [r7, #16]
 802360a:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 802360e:	f7ff fe56 	bl	80232be <compare_and_replace_if_larger_q7>
                for (int k_x = ker_x_start; k_x < kernel_x_end; k_x++)
 8023612:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8023614:	3301      	adds	r3, #1
 8023616:	65fb      	str	r3, [r7, #92]	; 0x5c
 8023618:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 802361a:	697b      	ldr	r3, [r7, #20]
 802361c:	429a      	cmp	r2, r3
 802361e:	dbd3      	blt.n	80235c8 <arm_max_pool_s8+0xd2>
            for (int k_y = ker_y_start; k_y < kernel_y_end; k_y++)
 8023620:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8023622:	3301      	adds	r3, #1
 8023624:	663b      	str	r3, [r7, #96]	; 0x60
 8023626:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8023628:	69bb      	ldr	r3, [r7, #24]
 802362a:	429a      	cmp	r2, r3
 802362c:	dbc9      	blt.n	80235c2 <arm_max_pool_s8+0xcc>
                    }
                }
            }
            /* 'count' is expected to be non-zero here. */
            dst += channel_in;
 802362e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023630:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8023634:	4413      	add	r3, r2
 8023636:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (int i_x = 0, base_idx_x = -pad_x; i_x < output_x; base_idx_x += stride_x, i_x++)
 802363a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 802363c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802363e:	4413      	add	r3, r2
 8023640:	66bb      	str	r3, [r7, #104]	; 0x68
 8023642:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8023644:	3301      	adds	r3, #1
 8023646:	66fb      	str	r3, [r7, #108]	; 0x6c
 8023648:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 802364a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802364c:	429a      	cmp	r2, r3
 802364e:	db93      	blt.n	8023578 <arm_max_pool_s8+0x82>
    for (int i_y = 0, base_idx_y = -pad_y; i_y < output_y; base_idx_y += stride_y, i_y++)
 8023650:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8023652:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8023654:	4413      	add	r3, r2
 8023656:	673b      	str	r3, [r7, #112]	; 0x70
 8023658:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802365a:	3301      	adds	r3, #1
 802365c:	677b      	str	r3, [r7, #116]	; 0x74
 802365e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8023660:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8023662:	429a      	cmp	r2, r3
 8023664:	db82      	blt.n	802356c <arm_max_pool_s8+0x76>
        }
    }

    clamp_output(dst_base, output_x * output_y * channel_in, act_min, act_max);
 8023666:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8023668:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802366a:	fb02 f303 	mul.w	r3, r2, r3
 802366e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8023670:	fb02 f103 	mul.w	r1, r2, r3
 8023674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023676:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8023678:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802367a:	f7ff fea5 	bl	80233c8 <clamp_output>

    return ARM_MATH_SUCCESS;
 802367e:	2300      	movs	r3, #0
}
 8023680:	4618      	mov	r0, r3
 8023682:	3778      	adds	r7, #120	; 0x78
 8023684:	46bd      	mov	sp, r7
 8023686:	bd80      	pop	{r7, pc}

08023688 <arm_softmax_s8>:
                    const int32_t row_size,
                    const int32_t mult,
                    const int32_t shift,
                    const int32_t diff_min,
                    int8_t *output)
{
 8023688:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 802368c:	f5ad 6dbf 	sub.w	sp, sp, #1528	; 0x5f8
 8023690:	af00      	add	r7, sp, #0
 8023692:	f507 740d 	add.w	r4, r7, #564	; 0x234
 8023696:	6020      	str	r0, [r4, #0]
 8023698:	f507 700c 	add.w	r0, r7, #560	; 0x230
 802369c:	6001      	str	r1, [r0, #0]
 802369e:	f507 710b 	add.w	r1, r7, #556	; 0x22c
 80236a2:	600a      	str	r2, [r1, #0]
 80236a4:	f507 720a 	add.w	r2, r7, #552	; 0x228
 80236a8:	6013      	str	r3, [r2, #0]

        input += row_size;
        output += row_size;
    }
#else
    const int32_t mask = (1 << shift);
 80236aa:	2201      	movs	r2, #1
 80236ac:	f8d7 3618 	ldr.w	r3, [r7, #1560]	; 0x618
 80236b0:	fa02 f303 	lsl.w	r3, r2, r3
 80236b4:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4

    int32_t col = 0;
 80236b8:	2300      	movs	r3, #0
 80236ba:	f8c7 35f4 	str.w	r3, [r7, #1524]	; 0x5f4
    int32_t row_idx;

    for (row_idx = 0; row_idx < num_rows; ++row_idx)
 80236be:	2300      	movs	r3, #0
 80236c0:	f8c7 35f0 	str.w	r3, [r7, #1520]	; 0x5f0
 80236c4:	f003 b84a 	b.w	802675c <arm_softmax_s8+0x30d4>
    {
        // Find the maximum value in order to ensure numerical stability
        int8_t max = *input;
 80236c8:	f507 730d 	add.w	r3, r7, #564	; 0x234
 80236cc:	681b      	ldr	r3, [r3, #0]
 80236ce:	781b      	ldrb	r3, [r3, #0]
 80236d0:	f887 35ef 	strb.w	r3, [r7, #1519]	; 0x5ef

        for (col = 1; col < row_size; ++col)
 80236d4:	2301      	movs	r3, #1
 80236d6:	f8c7 35f4 	str.w	r3, [r7, #1524]	; 0x5f4
 80236da:	e013      	b.n	8023704 <arm_softmax_s8+0x7c>
        {
            max = MAX(max, input[col]);
 80236dc:	f8d7 25f4 	ldr.w	r2, [r7, #1524]	; 0x5f4
 80236e0:	f507 730d 	add.w	r3, r7, #564	; 0x234
 80236e4:	681b      	ldr	r3, [r3, #0]
 80236e6:	4413      	add	r3, r2
 80236e8:	f993 2000 	ldrsb.w	r2, [r3]
 80236ec:	f997 35ef 	ldrsb.w	r3, [r7, #1519]	; 0x5ef
 80236f0:	4293      	cmp	r3, r2
 80236f2:	bfb8      	it	lt
 80236f4:	4613      	movlt	r3, r2
 80236f6:	f887 35ef 	strb.w	r3, [r7, #1519]	; 0x5ef
        for (col = 1; col < row_size; ++col)
 80236fa:	f8d7 35f4 	ldr.w	r3, [r7, #1524]	; 0x5f4
 80236fe:	3301      	adds	r3, #1
 8023700:	f8c7 35f4 	str.w	r3, [r7, #1524]	; 0x5f4
 8023704:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 8023708:	f8d7 25f4 	ldr.w	r2, [r7, #1524]	; 0x5f4
 802370c:	681b      	ldr	r3, [r3, #0]
 802370e:	429a      	cmp	r2, r3
 8023710:	dbe4      	blt.n	80236dc <arm_softmax_s8+0x54>
        }

        int32_t diff = 0;
 8023712:	2300      	movs	r3, #0
 8023714:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
        int32_t sum = 0;
 8023718:	2300      	movs	r3, #0
 802371a:	f8c7 35e8 	str.w	r3, [r7, #1512]	; 0x5e8

        for (col = 0; col < row_size; ++col)
 802371e:	2300      	movs	r3, #0
 8023720:	f8c7 35f4 	str.w	r3, [r7, #1524]	; 0x5f4
 8023724:	f001 b8a1 	b.w	802486a <arm_softmax_s8+0x11e2>
        {
            diff = input[col] - max;
 8023728:	f8d7 25f4 	ldr.w	r2, [r7, #1524]	; 0x5f4
 802372c:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8023730:	681b      	ldr	r3, [r3, #0]
 8023732:	4413      	add	r3, r2
 8023734:	f993 3000 	ldrsb.w	r3, [r3]
 8023738:	461a      	mov	r2, r3
 802373a:	f997 35ef 	ldrsb.w	r3, [r7, #1519]	; 0x5ef
 802373e:	1ad3      	subs	r3, r2, r3
 8023740:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
            if (diff >= diff_min)
 8023744:	f8d7 25e0 	ldr.w	r2, [r7, #1504]	; 0x5e0
 8023748:	f8d7 361c 	ldr.w	r3, [r7, #1564]	; 0x61c
 802374c:	429a      	cmp	r2, r3
 802374e:	f2c1 8087 	blt.w	8024860 <arm_softmax_s8+0x11d8>
            {
                sum += DIV_POW2(EXP_ON_NEG(MUL_SAT(diff * mask, mult)), ACCUM_BITS);
 8023752:	f8d7 25e0 	ldr.w	r2, [r7, #1504]	; 0x5e0
 8023756:	f8d7 35e4 	ldr.w	r3, [r7, #1508]	; 0x5e4
 802375a:	fb03 f202 	mul.w	r2, r3, r2
 802375e:	f207 439c 	addw	r3, r7, #1180	; 0x49c
 8023762:	601a      	str	r2, [r3, #0]
 8023764:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 8023768:	f507 730a 	add.w	r3, r7, #552	; 0x228
 802376c:	681b      	ldr	r3, [r3, #0]
 802376e:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8023770:	f207 4294 	addw	r2, r7, #1172	; 0x494
 8023774:	2300      	movs	r3, #0
 8023776:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8023778:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 802377c:	f04f 0300 	mov.w	r3, #0
 8023780:	f507 6191 	add.w	r1, r7, #1160	; 0x488
 8023784:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8023788:	f207 439c 	addw	r3, r7, #1180	; 0x49c
 802378c:	681b      	ldr	r3, [r3, #0]
 802378e:	0fdb      	lsrs	r3, r3, #31
 8023790:	b2da      	uxtb	r2, r3
 8023792:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8023796:	681b      	ldr	r3, [r3, #0]
 8023798:	0fdb      	lsrs	r3, r3, #31
 802379a:	b2db      	uxtb	r3, r3
 802379c:	4053      	eors	r3, r2
 802379e:	b2db      	uxtb	r3, r3
 80237a0:	2b00      	cmp	r3, #0
 80237a2:	d014      	beq.n	80237ce <arm_softmax_s8+0x146>
        mult = 1 - mult;
 80237a4:	f04f 0001 	mov.w	r0, #1
 80237a8:	f04f 0100 	mov.w	r1, #0
 80237ac:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 80237b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80237b4:	1a84      	subs	r4, r0, r2
 80237b6:	f8c7 4220 	str.w	r4, [r7, #544]	; 0x220
 80237ba:	eb61 0303 	sbc.w	r3, r1, r3
 80237be:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 80237c2:	e9d7 3488 	ldrd	r3, r4, [r7, #544]	; 0x220
 80237c6:	f507 6291 	add.w	r2, r7, #1160	; 0x488
 80237ca:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80237ce:	f207 439c 	addw	r3, r7, #1180	; 0x49c
 80237d2:	681b      	ldr	r3, [r3, #0]
 80237d4:	4618      	mov	r0, r3
 80237d6:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80237da:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80237de:	681b      	ldr	r3, [r3, #0]
 80237e0:	461a      	mov	r2, r3
 80237e2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80237e6:	fb02 f501 	mul.w	r5, r2, r1
 80237ea:	fb00 f403 	mul.w	r4, r0, r3
 80237ee:	442c      	add	r4, r5
 80237f0:	fba0 0102 	umull	r0, r1, r0, r2
 80237f4:	1863      	adds	r3, r4, r1
 80237f6:	4619      	mov	r1, r3
 80237f8:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 80237fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023800:	1814      	adds	r4, r2, r0
 8023802:	f8c7 4218 	str.w	r4, [r7, #536]	; 0x218
 8023806:	414b      	adcs	r3, r1
 8023808:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 802380c:	e9d7 3486 	ldrd	r3, r4, [r7, #536]	; 0x218
 8023810:	f507 6291 	add.w	r2, r7, #1160	; 0x488
 8023814:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8023818:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 802381c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023820:	4610      	mov	r0, r2
 8023822:	4619      	mov	r1, r3
 8023824:	2800      	cmp	r0, #0
 8023826:	f171 0300 	sbcs.w	r3, r1, #0
 802382a:	da06      	bge.n	802383a <arm_softmax_s8+0x1b2>
 802382c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8023830:	f04f 0300 	mov.w	r3, #0
 8023834:	1880      	adds	r0, r0, r2
 8023836:	eb43 0101 	adc.w	r1, r3, r1
 802383a:	f04f 0200 	mov.w	r2, #0
 802383e:	f04f 0300 	mov.w	r3, #0
 8023842:	0fc2      	lsrs	r2, r0, #31
 8023844:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8023848:	17cb      	asrs	r3, r1, #31
 802384a:	4610      	mov	r0, r2
 802384c:	4619      	mov	r1, r3
 802384e:	f207 4294 	addw	r2, r7, #1172	; 0x494
 8023852:	4603      	mov	r3, r0
 8023854:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 8023856:	f207 429c 	addw	r2, r7, #1180	; 0x49c
 802385a:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 802385e:	6812      	ldr	r2, [r2, #0]
 8023860:	681b      	ldr	r3, [r3, #0]
 8023862:	429a      	cmp	r2, r3
 8023864:	d10a      	bne.n	802387c <arm_softmax_s8+0x1f4>
 8023866:	f207 439c 	addw	r3, r7, #1180	; 0x49c
 802386a:	681b      	ldr	r3, [r3, #0]
 802386c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8023870:	d104      	bne.n	802387c <arm_softmax_s8+0x1f4>
        result = NN_Q31_MAX;
 8023872:	f207 4294 	addw	r2, r7, #1172	; 0x494
 8023876:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 802387a:	6013      	str	r3, [r2, #0]
    return result;
 802387c:	f207 4394 	addw	r3, r7, #1172	; 0x494
 8023880:	681b      	ldr	r3, [r3, #0]
 8023882:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
    int32_t mask = 0;
 8023886:	2300      	movs	r3, #0
 8023888:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
    int32_t shift = 24;
 802388c:	2318      	movs	r3, #24
 802388e:	f8c7 35b0 	str.w	r3, [r7, #1456]	; 0x5b0
    const int32_t val_mod_minus_quarter = (val & ((1 << shift) - 1)) - (1 << shift);
 8023892:	2201      	movs	r2, #1
 8023894:	f8d7 35b0 	ldr.w	r3, [r7, #1456]	; 0x5b0
 8023898:	fa02 f303 	lsl.w	r3, r2, r3
 802389c:	1e5a      	subs	r2, r3, #1
 802389e:	f8d7 35b8 	ldr.w	r3, [r7, #1464]	; 0x5b8
 80238a2:	ea02 0103 	and.w	r1, r2, r3
 80238a6:	2201      	movs	r2, #1
 80238a8:	f8d7 35b0 	ldr.w	r3, [r7, #1456]	; 0x5b0
 80238ac:	fa02 f303 	lsl.w	r3, r2, r3
 80238b0:	1acb      	subs	r3, r1, r3
 80238b2:	f8c7 35ac 	str.w	r3, [r7, #1452]	; 0x5ac
    const int32_t remainder = val_mod_minus_quarter - val;
 80238b6:	f8d7 25ac 	ldr.w	r2, [r7, #1452]	; 0x5ac
 80238ba:	f8d7 35b8 	ldr.w	r3, [r7, #1464]	; 0x5b8
 80238be:	1ad3      	subs	r3, r2, r3
 80238c0:	f8c7 35a8 	str.w	r3, [r7, #1448]	; 0x5a8
    const int32_t x = (val_mod_minus_quarter << 5) + (1 << 28);
 80238c4:	f8d7 35ac 	ldr.w	r3, [r7, #1452]	; 0x5ac
 80238c8:	015b      	lsls	r3, r3, #5
 80238ca:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 80238ce:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
 80238d2:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 80238d6:	f8c7 35a0 	str.w	r3, [r7, #1440]	; 0x5a0
 80238da:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 80238de:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c
    q31_t result = 0;
 80238e2:	2300      	movs	r3, #0
 80238e4:	f8c7 3598 	str.w	r3, [r7, #1432]	; 0x598
    q63_t mult = 1 << 30;
 80238e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80238ec:	f04f 0300 	mov.w	r3, #0
 80238f0:	f507 61b2 	add.w	r1, r7, #1424	; 0x590
 80238f4:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80238f8:	f8d7 35a0 	ldr.w	r3, [r7, #1440]	; 0x5a0
 80238fc:	0fdb      	lsrs	r3, r3, #31
 80238fe:	b2da      	uxtb	r2, r3
 8023900:	f8d7 359c 	ldr.w	r3, [r7, #1436]	; 0x59c
 8023904:	0fdb      	lsrs	r3, r3, #31
 8023906:	b2db      	uxtb	r3, r3
 8023908:	4053      	eors	r3, r2
 802390a:	b2db      	uxtb	r3, r3
 802390c:	2b00      	cmp	r3, #0
 802390e:	d014      	beq.n	802393a <arm_softmax_s8+0x2b2>
        mult = 1 - mult;
 8023910:	f04f 0001 	mov.w	r0, #1
 8023914:	f04f 0100 	mov.w	r1, #0
 8023918:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 802391c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023920:	1a84      	subs	r4, r0, r2
 8023922:	f8c7 4210 	str.w	r4, [r7, #528]	; 0x210
 8023926:	eb61 0303 	sbc.w	r3, r1, r3
 802392a:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 802392e:	e9d7 3484 	ldrd	r3, r4, [r7, #528]	; 0x210
 8023932:	f507 62b2 	add.w	r2, r7, #1424	; 0x590
 8023936:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 802393a:	f8d7 35a0 	ldr.w	r3, [r7, #1440]	; 0x5a0
 802393e:	4618      	mov	r0, r3
 8023940:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8023944:	f8d7 359c 	ldr.w	r3, [r7, #1436]	; 0x59c
 8023948:	461a      	mov	r2, r3
 802394a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 802394e:	fb02 f501 	mul.w	r5, r2, r1
 8023952:	fb00 f403 	mul.w	r4, r0, r3
 8023956:	442c      	add	r4, r5
 8023958:	fba0 0102 	umull	r0, r1, r0, r2
 802395c:	1863      	adds	r3, r4, r1
 802395e:	4619      	mov	r1, r3
 8023960:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 8023964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023968:	1814      	adds	r4, r2, r0
 802396a:	f8c7 4208 	str.w	r4, [r7, #520]	; 0x208
 802396e:	414b      	adcs	r3, r1
 8023970:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8023974:	e9d7 3482 	ldrd	r3, r4, [r7, #520]	; 0x208
 8023978:	f507 62b2 	add.w	r2, r7, #1424	; 0x590
 802397c:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8023980:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 8023984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023988:	4610      	mov	r0, r2
 802398a:	4619      	mov	r1, r3
 802398c:	2800      	cmp	r0, #0
 802398e:	f171 0300 	sbcs.w	r3, r1, #0
 8023992:	da06      	bge.n	80239a2 <arm_softmax_s8+0x31a>
 8023994:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8023998:	f04f 0300 	mov.w	r3, #0
 802399c:	1880      	adds	r0, r0, r2
 802399e:	eb43 0101 	adc.w	r1, r3, r1
 80239a2:	f04f 0200 	mov.w	r2, #0
 80239a6:	f04f 0300 	mov.w	r3, #0
 80239aa:	0fc2      	lsrs	r2, r0, #31
 80239ac:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80239b0:	17cb      	asrs	r3, r1, #31
 80239b2:	4613      	mov	r3, r2
 80239b4:	f8c7 3598 	str.w	r3, [r7, #1432]	; 0x598
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 80239b8:	f8d7 25a0 	ldr.w	r2, [r7, #1440]	; 0x5a0
 80239bc:	f8d7 359c 	ldr.w	r3, [r7, #1436]	; 0x59c
 80239c0:	429a      	cmp	r2, r3
 80239c2:	d108      	bne.n	80239d6 <arm_softmax_s8+0x34e>
 80239c4:	f8d7 35a0 	ldr.w	r3, [r7, #1440]	; 0x5a0
 80239c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80239cc:	d103      	bne.n	80239d6 <arm_softmax_s8+0x34e>
        result = NN_Q31_MAX;
 80239ce:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80239d2:	f8c7 3598 	str.w	r3, [r7, #1432]	; 0x598
    return result;
 80239d6:	f8d7 3598 	ldr.w	r3, [r7, #1432]	; 0x598
    const int32_t x2 = MUL_SAT(x, x);
 80239da:	f8c7 358c 	str.w	r3, [r7, #1420]	; 0x58c
 80239de:	f8d7 358c 	ldr.w	r3, [r7, #1420]	; 0x58c
 80239e2:	f8c7 3588 	str.w	r3, [r7, #1416]	; 0x588
 80239e6:	f8d7 358c 	ldr.w	r3, [r7, #1420]	; 0x58c
 80239ea:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
    q31_t result = 0;
 80239ee:	2300      	movs	r3, #0
 80239f0:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580
    q63_t mult = 1 << 30;
 80239f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80239f8:	f04f 0300 	mov.w	r3, #0
 80239fc:	f507 61af 	add.w	r1, r7, #1400	; 0x578
 8023a00:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8023a04:	f8d7 3588 	ldr.w	r3, [r7, #1416]	; 0x588
 8023a08:	0fdb      	lsrs	r3, r3, #31
 8023a0a:	b2da      	uxtb	r2, r3
 8023a0c:	f8d7 3584 	ldr.w	r3, [r7, #1412]	; 0x584
 8023a10:	0fdb      	lsrs	r3, r3, #31
 8023a12:	b2db      	uxtb	r3, r3
 8023a14:	4053      	eors	r3, r2
 8023a16:	b2db      	uxtb	r3, r3
 8023a18:	2b00      	cmp	r3, #0
 8023a1a:	d014      	beq.n	8023a46 <arm_softmax_s8+0x3be>
        mult = 1 - mult;
 8023a1c:	f04f 0001 	mov.w	r0, #1
 8023a20:	f04f 0100 	mov.w	r1, #0
 8023a24:	f507 63af 	add.w	r3, r7, #1400	; 0x578
 8023a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023a2c:	1a84      	subs	r4, r0, r2
 8023a2e:	f8c7 4200 	str.w	r4, [r7, #512]	; 0x200
 8023a32:	eb61 0303 	sbc.w	r3, r1, r3
 8023a36:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8023a3a:	e9d7 3480 	ldrd	r3, r4, [r7, #512]	; 0x200
 8023a3e:	f507 62af 	add.w	r2, r7, #1400	; 0x578
 8023a42:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8023a46:	f8d7 3588 	ldr.w	r3, [r7, #1416]	; 0x588
 8023a4a:	4618      	mov	r0, r3
 8023a4c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8023a50:	f8d7 3584 	ldr.w	r3, [r7, #1412]	; 0x584
 8023a54:	461a      	mov	r2, r3
 8023a56:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8023a5a:	fb02 f501 	mul.w	r5, r2, r1
 8023a5e:	fb00 f403 	mul.w	r4, r0, r3
 8023a62:	442c      	add	r4, r5
 8023a64:	fba0 0102 	umull	r0, r1, r0, r2
 8023a68:	1863      	adds	r3, r4, r1
 8023a6a:	4619      	mov	r1, r3
 8023a6c:	f507 63af 	add.w	r3, r7, #1400	; 0x578
 8023a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023a74:	1814      	adds	r4, r2, r0
 8023a76:	f8c7 41f8 	str.w	r4, [r7, #504]	; 0x1f8
 8023a7a:	414b      	adcs	r3, r1
 8023a7c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 8023a80:	e9d7 347e 	ldrd	r3, r4, [r7, #504]	; 0x1f8
 8023a84:	f507 62af 	add.w	r2, r7, #1400	; 0x578
 8023a88:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8023a8c:	f507 63af 	add.w	r3, r7, #1400	; 0x578
 8023a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023a94:	4610      	mov	r0, r2
 8023a96:	4619      	mov	r1, r3
 8023a98:	2800      	cmp	r0, #0
 8023a9a:	f171 0300 	sbcs.w	r3, r1, #0
 8023a9e:	da06      	bge.n	8023aae <arm_softmax_s8+0x426>
 8023aa0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8023aa4:	f04f 0300 	mov.w	r3, #0
 8023aa8:	1880      	adds	r0, r0, r2
 8023aaa:	eb43 0101 	adc.w	r1, r3, r1
 8023aae:	f04f 0200 	mov.w	r2, #0
 8023ab2:	f04f 0300 	mov.w	r3, #0
 8023ab6:	0fc2      	lsrs	r2, r0, #31
 8023ab8:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8023abc:	17cb      	asrs	r3, r1, #31
 8023abe:	4613      	mov	r3, r2
 8023ac0:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 8023ac4:	f8d7 2588 	ldr.w	r2, [r7, #1416]	; 0x588
 8023ac8:	f8d7 3584 	ldr.w	r3, [r7, #1412]	; 0x584
 8023acc:	429a      	cmp	r2, r3
 8023ace:	d108      	bne.n	8023ae2 <arm_softmax_s8+0x45a>
 8023ad0:	f8d7 3588 	ldr.w	r3, [r7, #1416]	; 0x588
 8023ad4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8023ad8:	d103      	bne.n	8023ae2 <arm_softmax_s8+0x45a>
        result = NN_Q31_MAX;
 8023ada:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8023ade:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580
    return result;
 8023ae2:	f8d7 3580 	ldr.w	r3, [r7, #1408]	; 0x580
 8023ae6:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
    q31_t result = 0;
 8023aea:	2300      	movs	r3, #0
 8023aec:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
    const q31_t remainder_mask = (1 << exponent) - 1;
 8023af0:	2304      	movs	r3, #4
 8023af2:	3b01      	subs	r3, #1
 8023af4:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
    int32_t remainder = remainder_mask & dividend;
 8023af8:	f8d7 2574 	ldr.w	r2, [r7, #1396]	; 0x574
 8023afc:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8023b00:	4013      	ands	r3, r2
 8023b02:	f8c7 3568 	str.w	r3, [r7, #1384]	; 0x568
    result = dividend >> exponent;
 8023b06:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8023b0a:	109b      	asrs	r3, r3, #2
 8023b0c:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
    q31_t threshold = remainder_mask >> 1;
 8023b10:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8023b14:	105b      	asrs	r3, r3, #1
 8023b16:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
    if (result < 0)
 8023b1a:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8023b1e:	2b00      	cmp	r3, #0
 8023b20:	da04      	bge.n	8023b2c <arm_softmax_s8+0x4a4>
        threshold++;
 8023b22:	f8d7 3564 	ldr.w	r3, [r7, #1380]	; 0x564
 8023b26:	3301      	adds	r3, #1
 8023b28:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
    if (remainder > threshold)
 8023b2c:	f8d7 2568 	ldr.w	r2, [r7, #1384]	; 0x568
 8023b30:	f8d7 3564 	ldr.w	r3, [r7, #1380]	; 0x564
 8023b34:	429a      	cmp	r2, r3
 8023b36:	dd04      	ble.n	8023b42 <arm_softmax_s8+0x4ba>
        result++;
 8023b38:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8023b3c:	3301      	adds	r3, #1
 8023b3e:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
    return result;
 8023b42:	f8d7 6570 	ldr.w	r6, [r7, #1392]	; 0x570
 8023b46:	f8d7 358c 	ldr.w	r3, [r7, #1420]	; 0x58c
 8023b4a:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
 8023b4e:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 8023b52:	f8c7 355c 	str.w	r3, [r7, #1372]	; 0x55c
    q31_t result = 0;
 8023b56:	2300      	movs	r3, #0
 8023b58:	f8c7 3558 	str.w	r3, [r7, #1368]	; 0x558
    q63_t mult = 1 << 30;
 8023b5c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8023b60:	f04f 0300 	mov.w	r3, #0
 8023b64:	f507 61aa 	add.w	r1, r7, #1360	; 0x550
 8023b68:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8023b6c:	f8d7 3560 	ldr.w	r3, [r7, #1376]	; 0x560
 8023b70:	0fdb      	lsrs	r3, r3, #31
 8023b72:	b2da      	uxtb	r2, r3
 8023b74:	f8d7 355c 	ldr.w	r3, [r7, #1372]	; 0x55c
 8023b78:	0fdb      	lsrs	r3, r3, #31
 8023b7a:	b2db      	uxtb	r3, r3
 8023b7c:	4053      	eors	r3, r2
 8023b7e:	b2db      	uxtb	r3, r3
 8023b80:	2b00      	cmp	r3, #0
 8023b82:	d014      	beq.n	8023bae <arm_softmax_s8+0x526>
        mult = 1 - mult;
 8023b84:	f04f 0001 	mov.w	r0, #1
 8023b88:	f04f 0100 	mov.w	r1, #0
 8023b8c:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 8023b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023b94:	1a84      	subs	r4, r0, r2
 8023b96:	f8c7 41f0 	str.w	r4, [r7, #496]	; 0x1f0
 8023b9a:	eb61 0303 	sbc.w	r3, r1, r3
 8023b9e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 8023ba2:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 8023ba6:	f507 62aa 	add.w	r2, r7, #1360	; 0x550
 8023baa:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8023bae:	f8d7 3560 	ldr.w	r3, [r7, #1376]	; 0x560
 8023bb2:	4618      	mov	r0, r3
 8023bb4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8023bb8:	f8d7 355c 	ldr.w	r3, [r7, #1372]	; 0x55c
 8023bbc:	461a      	mov	r2, r3
 8023bbe:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8023bc2:	fb02 f501 	mul.w	r5, r2, r1
 8023bc6:	fb00 f403 	mul.w	r4, r0, r3
 8023bca:	442c      	add	r4, r5
 8023bcc:	fba0 0102 	umull	r0, r1, r0, r2
 8023bd0:	1863      	adds	r3, r4, r1
 8023bd2:	4619      	mov	r1, r3
 8023bd4:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 8023bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023bdc:	1814      	adds	r4, r2, r0
 8023bde:	f8c7 41e8 	str.w	r4, [r7, #488]	; 0x1e8
 8023be2:	414b      	adcs	r3, r1
 8023be4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8023be8:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 8023bec:	f507 62aa 	add.w	r2, r7, #1360	; 0x550
 8023bf0:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8023bf4:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 8023bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023bfc:	4610      	mov	r0, r2
 8023bfe:	4619      	mov	r1, r3
 8023c00:	2800      	cmp	r0, #0
 8023c02:	f171 0300 	sbcs.w	r3, r1, #0
 8023c06:	da06      	bge.n	8023c16 <arm_softmax_s8+0x58e>
 8023c08:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8023c0c:	f04f 0300 	mov.w	r3, #0
 8023c10:	1880      	adds	r0, r0, r2
 8023c12:	eb43 0101 	adc.w	r1, r3, r1
 8023c16:	f04f 0200 	mov.w	r2, #0
 8023c1a:	f04f 0300 	mov.w	r3, #0
 8023c1e:	0fc2      	lsrs	r2, r0, #31
 8023c20:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8023c24:	17cb      	asrs	r3, r1, #31
 8023c26:	4613      	mov	r3, r2
 8023c28:	f8c7 3558 	str.w	r3, [r7, #1368]	; 0x558
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 8023c2c:	f8d7 2560 	ldr.w	r2, [r7, #1376]	; 0x560
 8023c30:	f8d7 355c 	ldr.w	r3, [r7, #1372]	; 0x55c
 8023c34:	429a      	cmp	r2, r3
 8023c36:	d108      	bne.n	8023c4a <arm_softmax_s8+0x5c2>
 8023c38:	f8d7 3560 	ldr.w	r3, [r7, #1376]	; 0x560
 8023c3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8023c40:	d103      	bne.n	8023c4a <arm_softmax_s8+0x5c2>
        result = NN_Q31_MAX;
 8023c42:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8023c46:	f8c7 3558 	str.w	r3, [r7, #1368]	; 0x558
    return result;
 8023c4a:	f8d7 3558 	ldr.w	r3, [r7, #1368]	; 0x558
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 8023c4e:	4433      	add	r3, r6
 8023c50:	f8c7 354c 	str.w	r3, [r7, #1356]	; 0x54c
    q31_t result = 0;
 8023c54:	2300      	movs	r3, #0
 8023c56:	f8c7 3548 	str.w	r3, [r7, #1352]	; 0x548
    q63_t mult = 1 << 30;
 8023c5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8023c5e:	f04f 0300 	mov.w	r3, #0
 8023c62:	f507 61a8 	add.w	r1, r7, #1344	; 0x540
 8023c66:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8023c6a:	f8d7 354c 	ldr.w	r3, [r7, #1356]	; 0x54c
 8023c6e:	0fdb      	lsrs	r3, r3, #31
 8023c70:	b2da      	uxtb	r2, r3
 8023c72:	2300      	movs	r3, #0
 8023c74:	4053      	eors	r3, r2
 8023c76:	b2db      	uxtb	r3, r3
 8023c78:	2b00      	cmp	r3, #0
 8023c7a:	d014      	beq.n	8023ca6 <arm_softmax_s8+0x61e>
        mult = 1 - mult;
 8023c7c:	f04f 0001 	mov.w	r0, #1
 8023c80:	f04f 0100 	mov.w	r1, #0
 8023c84:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 8023c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023c8c:	1a84      	subs	r4, r0, r2
 8023c8e:	f8c7 41e0 	str.w	r4, [r7, #480]	; 0x1e0
 8023c92:	eb61 0303 	sbc.w	r3, r1, r3
 8023c96:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8023c9a:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 8023c9e:	f507 62a8 	add.w	r2, r7, #1344	; 0x540
 8023ca2:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8023ca6:	f8d7 354c 	ldr.w	r3, [r7, #1356]	; 0x54c
 8023caa:	4618      	mov	r0, r3
 8023cac:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8023cb0:	a3d2      	add	r3, pc, #840	; (adr r3, 8023ffc <arm_softmax_s8+0x974>)
 8023cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023cb6:	fb02 f501 	mul.w	r5, r2, r1
 8023cba:	fb00 f403 	mul.w	r4, r0, r3
 8023cbe:	442c      	add	r4, r5
 8023cc0:	fba0 0102 	umull	r0, r1, r0, r2
 8023cc4:	1863      	adds	r3, r4, r1
 8023cc6:	4619      	mov	r1, r3
 8023cc8:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 8023ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023cd0:	1814      	adds	r4, r2, r0
 8023cd2:	f8c7 41d8 	str.w	r4, [r7, #472]	; 0x1d8
 8023cd6:	414b      	adcs	r3, r1
 8023cd8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8023cdc:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 8023ce0:	f507 62a8 	add.w	r2, r7, #1344	; 0x540
 8023ce4:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8023ce8:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 8023cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023cf0:	4610      	mov	r0, r2
 8023cf2:	4619      	mov	r1, r3
 8023cf4:	2800      	cmp	r0, #0
 8023cf6:	f171 0300 	sbcs.w	r3, r1, #0
 8023cfa:	da06      	bge.n	8023d0a <arm_softmax_s8+0x682>
 8023cfc:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8023d00:	f04f 0300 	mov.w	r3, #0
 8023d04:	1880      	adds	r0, r0, r2
 8023d06:	eb43 0101 	adc.w	r1, r3, r1
 8023d0a:	f04f 0200 	mov.w	r2, #0
 8023d0e:	f04f 0300 	mov.w	r3, #0
 8023d12:	0fc2      	lsrs	r2, r0, #31
 8023d14:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8023d18:	17cb      	asrs	r3, r1, #31
 8023d1a:	4613      	mov	r3, r2
 8023d1c:	f8c7 3548 	str.w	r3, [r7, #1352]	; 0x548
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 8023d20:	f8d7 254c 	ldr.w	r2, [r7, #1356]	; 0x54c
 8023d24:	4bb2      	ldr	r3, [pc, #712]	; (8023ff0 <arm_softmax_s8+0x968>)
 8023d26:	429a      	cmp	r2, r3
 8023d28:	d108      	bne.n	8023d3c <arm_softmax_s8+0x6b4>
 8023d2a:	f8d7 354c 	ldr.w	r3, [r7, #1356]	; 0x54c
 8023d2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8023d32:	d103      	bne.n	8023d3c <arm_softmax_s8+0x6b4>
        result = NN_Q31_MAX;
 8023d34:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8023d38:	f8c7 3548 	str.w	r3, [r7, #1352]	; 0x548
    return result;
 8023d3c:	f8d7 2548 	ldr.w	r2, [r7, #1352]	; 0x548
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 8023d40:	f8d7 358c 	ldr.w	r3, [r7, #1420]	; 0x58c
 8023d44:	4413      	add	r3, r2
 8023d46:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
    q31_t result = 0;
 8023d4a:	2300      	movs	r3, #0
 8023d4c:	f8c7 3538 	str.w	r3, [r7, #1336]	; 0x538
    const q31_t remainder_mask = (1 << exponent) - 1;
 8023d50:	2302      	movs	r3, #2
 8023d52:	3b01      	subs	r3, #1
 8023d54:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
    int32_t remainder = remainder_mask & dividend;
 8023d58:	f8d7 253c 	ldr.w	r2, [r7, #1340]	; 0x53c
 8023d5c:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 8023d60:	4013      	ands	r3, r2
 8023d62:	f8c7 3530 	str.w	r3, [r7, #1328]	; 0x530
    result = dividend >> exponent;
 8023d66:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 8023d6a:	105b      	asrs	r3, r3, #1
 8023d6c:	f8c7 3538 	str.w	r3, [r7, #1336]	; 0x538
    q31_t threshold = remainder_mask >> 1;
 8023d70:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 8023d74:	105b      	asrs	r3, r3, #1
 8023d76:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
    if (result < 0)
 8023d7a:	f8d7 3538 	ldr.w	r3, [r7, #1336]	; 0x538
 8023d7e:	2b00      	cmp	r3, #0
 8023d80:	da04      	bge.n	8023d8c <arm_softmax_s8+0x704>
        threshold++;
 8023d82:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 8023d86:	3301      	adds	r3, #1
 8023d88:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
    if (remainder > threshold)
 8023d8c:	f8d7 2530 	ldr.w	r2, [r7, #1328]	; 0x530
 8023d90:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 8023d94:	429a      	cmp	r2, r3
 8023d96:	dd04      	ble.n	8023da2 <arm_softmax_s8+0x71a>
        result++;
 8023d98:	f8d7 3538 	ldr.w	r3, [r7, #1336]	; 0x538
 8023d9c:	3301      	adds	r3, #1
 8023d9e:	f8c7 3538 	str.w	r3, [r7, #1336]	; 0x538
    return result;
 8023da2:	f8d7 2538 	ldr.w	r2, [r7, #1336]	; 0x538
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 8023da6:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 8023daa:	4413      	add	r3, r2
 8023dac:	f8c7 3528 	str.w	r3, [r7, #1320]	; 0x528
    q31_t result = 0;
 8023db0:	2300      	movs	r3, #0
 8023db2:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
    q63_t mult = 1 << 30;
 8023db6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8023dba:	f04f 0300 	mov.w	r3, #0
 8023dbe:	f507 61a3 	add.w	r1, r7, #1304	; 0x518
 8023dc2:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8023dc6:	2200      	movs	r2, #0
 8023dc8:	f8d7 3528 	ldr.w	r3, [r7, #1320]	; 0x528
 8023dcc:	0fdb      	lsrs	r3, r3, #31
 8023dce:	b2db      	uxtb	r3, r3
 8023dd0:	4053      	eors	r3, r2
 8023dd2:	b2db      	uxtb	r3, r3
 8023dd4:	2b00      	cmp	r3, #0
 8023dd6:	d014      	beq.n	8023e02 <arm_softmax_s8+0x77a>
        mult = 1 - mult;
 8023dd8:	f04f 0001 	mov.w	r0, #1
 8023ddc:	f04f 0100 	mov.w	r1, #0
 8023de0:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 8023de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023de8:	1a84      	subs	r4, r0, r2
 8023dea:	f8c7 41d0 	str.w	r4, [r7, #464]	; 0x1d0
 8023dee:	eb61 0303 	sbc.w	r3, r1, r3
 8023df2:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8023df6:	e9d7 3474 	ldrd	r3, r4, [r7, #464]	; 0x1d0
 8023dfa:	f507 62a3 	add.w	r2, r7, #1304	; 0x518
 8023dfe:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8023e02:	a177      	add	r1, pc, #476	; (adr r1, 8023fe0 <arm_softmax_s8+0x958>)
 8023e04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8023e08:	f8d7 3528 	ldr.w	r3, [r7, #1320]	; 0x528
 8023e0c:	461a      	mov	r2, r3
 8023e0e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8023e12:	fb02 f501 	mul.w	r5, r2, r1
 8023e16:	fb00 f403 	mul.w	r4, r0, r3
 8023e1a:	442c      	add	r4, r5
 8023e1c:	fba0 0102 	umull	r0, r1, r0, r2
 8023e20:	1863      	adds	r3, r4, r1
 8023e22:	4619      	mov	r1, r3
 8023e24:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 8023e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023e2c:	1814      	adds	r4, r2, r0
 8023e2e:	f8c7 41c8 	str.w	r4, [r7, #456]	; 0x1c8
 8023e32:	414b      	adcs	r3, r1
 8023e34:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 8023e38:	e9d7 3472 	ldrd	r3, r4, [r7, #456]	; 0x1c8
 8023e3c:	f507 62a3 	add.w	r2, r7, #1304	; 0x518
 8023e40:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8023e44:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 8023e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023e4c:	4610      	mov	r0, r2
 8023e4e:	4619      	mov	r1, r3
 8023e50:	2800      	cmp	r0, #0
 8023e52:	f171 0300 	sbcs.w	r3, r1, #0
 8023e56:	da06      	bge.n	8023e66 <arm_softmax_s8+0x7de>
 8023e58:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8023e5c:	f04f 0300 	mov.w	r3, #0
 8023e60:	1880      	adds	r0, r0, r2
 8023e62:	eb43 0101 	adc.w	r1, r3, r1
 8023e66:	f04f 0200 	mov.w	r2, #0
 8023e6a:	f04f 0300 	mov.w	r3, #0
 8023e6e:	0fc2      	lsrs	r2, r0, #31
 8023e70:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8023e74:	17cb      	asrs	r3, r1, #31
 8023e76:	4613      	mov	r3, r2
 8023e78:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
    return result;
 8023e7c:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
    int32_t result = 1895147668 +
 8023e80:	4b5c      	ldr	r3, [pc, #368]	; (8023ff4 <arm_softmax_s8+0x96c>)
 8023e82:	4413      	add	r3, r2
 8023e84:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
    SELECT_IF_NON_ZERO(1672461947)
 8023e88:	f8d7 25b0 	ldr.w	r2, [r7, #1456]	; 0x5b0
 8023e8c:	1c53      	adds	r3, r2, #1
 8023e8e:	f8c7 35b0 	str.w	r3, [r7, #1456]	; 0x5b0
 8023e92:	2301      	movs	r3, #1
 8023e94:	fa03 f202 	lsl.w	r2, r3, r2
 8023e98:	f8d7 35a8 	ldr.w	r3, [r7, #1448]	; 0x5a8
 8023e9c:	4013      	ands	r3, r2
 8023e9e:	2b00      	cmp	r3, #0
 8023ea0:	d002      	beq.n	8023ea8 <arm_softmax_s8+0x820>
 8023ea2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8023ea6:	e000      	b.n	8023eaa <arm_softmax_s8+0x822>
 8023ea8:	2300      	movs	r3, #0
 8023eaa:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 8023eae:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8023eb2:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
    q31_t result = 0;
 8023eb6:	2300      	movs	r3, #0
 8023eb8:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
    q63_t mult = 1 << 30;
 8023ebc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8023ec0:	f04f 0300 	mov.w	r3, #0
 8023ec4:	f507 61a0 	add.w	r1, r7, #1280	; 0x500
 8023ec8:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8023ecc:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 8023ed0:	0fdb      	lsrs	r3, r3, #31
 8023ed2:	b2da      	uxtb	r2, r3
 8023ed4:	2300      	movs	r3, #0
 8023ed6:	4053      	eors	r3, r2
 8023ed8:	b2db      	uxtb	r3, r3
 8023eda:	2b00      	cmp	r3, #0
 8023edc:	d014      	beq.n	8023f08 <arm_softmax_s8+0x880>
        mult = 1 - mult;
 8023ede:	f04f 0001 	mov.w	r0, #1
 8023ee2:	f04f 0100 	mov.w	r1, #0
 8023ee6:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 8023eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023eee:	1a84      	subs	r4, r0, r2
 8023ef0:	f8c7 41c0 	str.w	r4, [r7, #448]	; 0x1c0
 8023ef4:	eb61 0303 	sbc.w	r3, r1, r3
 8023ef8:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8023efc:	e9d7 3470 	ldrd	r3, r4, [r7, #448]	; 0x1c0
 8023f00:	f507 62a0 	add.w	r2, r7, #1280	; 0x500
 8023f04:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8023f08:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 8023f0c:	4618      	mov	r0, r3
 8023f0e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8023f12:	a335      	add	r3, pc, #212	; (adr r3, 8023fe8 <arm_softmax_s8+0x960>)
 8023f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023f18:	fb02 f501 	mul.w	r5, r2, r1
 8023f1c:	fb00 f403 	mul.w	r4, r0, r3
 8023f20:	442c      	add	r4, r5
 8023f22:	fba0 0102 	umull	r0, r1, r0, r2
 8023f26:	1863      	adds	r3, r4, r1
 8023f28:	4619      	mov	r1, r3
 8023f2a:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 8023f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023f32:	1814      	adds	r4, r2, r0
 8023f34:	f8c7 41b8 	str.w	r4, [r7, #440]	; 0x1b8
 8023f38:	414b      	adcs	r3, r1
 8023f3a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8023f3e:	e9d7 346e 	ldrd	r3, r4, [r7, #440]	; 0x1b8
 8023f42:	f507 62a0 	add.w	r2, r7, #1280	; 0x500
 8023f46:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8023f4a:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 8023f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023f52:	4610      	mov	r0, r2
 8023f54:	4619      	mov	r1, r3
 8023f56:	2800      	cmp	r0, #0
 8023f58:	f171 0300 	sbcs.w	r3, r1, #0
 8023f5c:	da06      	bge.n	8023f6c <arm_softmax_s8+0x8e4>
 8023f5e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8023f62:	f04f 0300 	mov.w	r3, #0
 8023f66:	1880      	adds	r0, r0, r2
 8023f68:	eb43 0101 	adc.w	r1, r3, r1
 8023f6c:	f04f 0200 	mov.w	r2, #0
 8023f70:	f04f 0300 	mov.w	r3, #0
 8023f74:	0fc2      	lsrs	r2, r0, #31
 8023f76:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8023f7a:	17cb      	asrs	r3, r1, #31
 8023f7c:	4613      	mov	r3, r2
 8023f7e:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 8023f82:	f8d7 2510 	ldr.w	r2, [r7, #1296]	; 0x510
 8023f86:	4b1c      	ldr	r3, [pc, #112]	; (8023ff8 <arm_softmax_s8+0x970>)
 8023f88:	429a      	cmp	r2, r3
 8023f8a:	d108      	bne.n	8023f9e <arm_softmax_s8+0x916>
 8023f8c:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 8023f90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8023f94:	d103      	bne.n	8023f9e <arm_softmax_s8+0x916>
        result = NN_Q31_MAX;
 8023f96:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8023f9a:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
    return result;
 8023f9e:	f8d7 250c 	ldr.w	r2, [r7, #1292]	; 0x50c
    SELECT_IF_NON_ZERO(1672461947)
 8023fa2:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 8023fa6:	ea02 0103 	and.w	r1, r2, r3
 8023faa:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 8023fae:	43da      	mvns	r2, r3
 8023fb0:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8023fb4:	4013      	ands	r3, r2
 8023fb6:	404b      	eors	r3, r1
 8023fb8:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
    SELECT_IF_NON_ZERO(1302514674)
 8023fbc:	f8d7 25b0 	ldr.w	r2, [r7, #1456]	; 0x5b0
 8023fc0:	1c53      	adds	r3, r2, #1
 8023fc2:	f8c7 35b0 	str.w	r3, [r7, #1456]	; 0x5b0
 8023fc6:	2301      	movs	r3, #1
 8023fc8:	fa03 f202 	lsl.w	r2, r3, r2
 8023fcc:	f8d7 35a8 	ldr.w	r3, [r7, #1448]	; 0x5a8
 8023fd0:	4013      	ands	r3, r2
 8023fd2:	2b00      	cmp	r3, #0
 8023fd4:	d016      	beq.n	8024004 <arm_softmax_s8+0x97c>
 8023fd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8023fda:	e014      	b.n	8024006 <arm_softmax_s8+0x97e>
 8023fdc:	f3af 8000 	nop.w
 8023fe0:	70f5a894 	.word	0x70f5a894
 8023fe4:	00000000 	.word	0x00000000
 8023fe8:	63afbe7b 	.word	0x63afbe7b
 8023fec:	00000000 	.word	0x00000000
 8023ff0:	2aaaaaab 	.word	0x2aaaaaab
 8023ff4:	70f5a894 	.word	0x70f5a894
 8023ff8:	63afbe7b 	.word	0x63afbe7b
 8023ffc:	2aaaaaab 	.word	0x2aaaaaab
 8024000:	00000000 	.word	0x00000000
 8024004:	2300      	movs	r3, #0
 8024006:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 802400a:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 802400e:	f8c7 34fc 	str.w	r3, [r7, #1276]	; 0x4fc
    q31_t result = 0;
 8024012:	f507 629f 	add.w	r2, r7, #1272	; 0x4f8
 8024016:	2300      	movs	r3, #0
 8024018:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 802401a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 802401e:	f04f 0300 	mov.w	r3, #0
 8024022:	f507 619e 	add.w	r1, r7, #1264	; 0x4f0
 8024026:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 802402a:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	; 0x4fc
 802402e:	0fdb      	lsrs	r3, r3, #31
 8024030:	b2da      	uxtb	r2, r3
 8024032:	2300      	movs	r3, #0
 8024034:	4053      	eors	r3, r2
 8024036:	b2db      	uxtb	r3, r3
 8024038:	2b00      	cmp	r3, #0
 802403a:	d014      	beq.n	8024066 <arm_softmax_s8+0x9de>
        mult = 1 - mult;
 802403c:	f04f 0001 	mov.w	r0, #1
 8024040:	f04f 0100 	mov.w	r1, #0
 8024044:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8024048:	e9d3 2300 	ldrd	r2, r3, [r3]
 802404c:	1a84      	subs	r4, r0, r2
 802404e:	f8c7 41b0 	str.w	r4, [r7, #432]	; 0x1b0
 8024052:	eb61 0303 	sbc.w	r3, r1, r3
 8024056:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 802405a:	e9d7 346c 	ldrd	r3, r4, [r7, #432]	; 0x1b0
 802405e:	f507 629e 	add.w	r2, r7, #1264	; 0x4f0
 8024062:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8024066:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	; 0x4fc
 802406a:	4618      	mov	r0, r3
 802406c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8024070:	a3e0      	add	r3, pc, #896	; (adr r3, 80243f4 <arm_softmax_s8+0xd6c>)
 8024072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024076:	fb02 f501 	mul.w	r5, r2, r1
 802407a:	fb00 f403 	mul.w	r4, r0, r3
 802407e:	442c      	add	r4, r5
 8024080:	fba0 0102 	umull	r0, r1, r0, r2
 8024084:	1863      	adds	r3, r4, r1
 8024086:	4619      	mov	r1, r3
 8024088:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 802408c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024090:	1814      	adds	r4, r2, r0
 8024092:	f8c7 41a8 	str.w	r4, [r7, #424]	; 0x1a8
 8024096:	414b      	adcs	r3, r1
 8024098:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 802409c:	e9d7 346a 	ldrd	r3, r4, [r7, #424]	; 0x1a8
 80240a0:	f507 629e 	add.w	r2, r7, #1264	; 0x4f0
 80240a4:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80240a8:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 80240ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80240b0:	4610      	mov	r0, r2
 80240b2:	4619      	mov	r1, r3
 80240b4:	2800      	cmp	r0, #0
 80240b6:	f171 0300 	sbcs.w	r3, r1, #0
 80240ba:	da06      	bge.n	80240ca <arm_softmax_s8+0xa42>
 80240bc:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80240c0:	f04f 0300 	mov.w	r3, #0
 80240c4:	1880      	adds	r0, r0, r2
 80240c6:	eb43 0101 	adc.w	r1, r3, r1
 80240ca:	f04f 0200 	mov.w	r2, #0
 80240ce:	f04f 0300 	mov.w	r3, #0
 80240d2:	0fc2      	lsrs	r2, r0, #31
 80240d4:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80240d8:	17cb      	asrs	r3, r1, #31
 80240da:	4610      	mov	r0, r2
 80240dc:	4619      	mov	r1, r3
 80240de:	f507 629f 	add.w	r2, r7, #1272	; 0x4f8
 80240e2:	4603      	mov	r3, r0
 80240e4:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 80240e6:	f8d7 24fc 	ldr.w	r2, [r7, #1276]	; 0x4fc
 80240ea:	4bbf      	ldr	r3, [pc, #764]	; (80243e8 <arm_softmax_s8+0xd60>)
 80240ec:	429a      	cmp	r2, r3
 80240ee:	d109      	bne.n	8024104 <arm_softmax_s8+0xa7c>
 80240f0:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	; 0x4fc
 80240f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80240f8:	d104      	bne.n	8024104 <arm_softmax_s8+0xa7c>
        result = NN_Q31_MAX;
 80240fa:	f507 629f 	add.w	r2, r7, #1272	; 0x4f8
 80240fe:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8024102:	6013      	str	r3, [r2, #0]
    return result;
 8024104:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 8024108:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(1302514674)
 802410a:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 802410e:	ea02 0103 	and.w	r1, r2, r3
 8024112:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 8024116:	43da      	mvns	r2, r3
 8024118:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 802411c:	4013      	ands	r3, r2
 802411e:	404b      	eors	r3, r1
 8024120:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
    SELECT_IF_NON_ZERO(790015084)
 8024124:	f8d7 25b0 	ldr.w	r2, [r7, #1456]	; 0x5b0
 8024128:	1c53      	adds	r3, r2, #1
 802412a:	f8c7 35b0 	str.w	r3, [r7, #1456]	; 0x5b0
 802412e:	2301      	movs	r3, #1
 8024130:	fa03 f202 	lsl.w	r2, r3, r2
 8024134:	f8d7 35a8 	ldr.w	r3, [r7, #1448]	; 0x5a8
 8024138:	4013      	ands	r3, r2
 802413a:	2b00      	cmp	r3, #0
 802413c:	d002      	beq.n	8024144 <arm_softmax_s8+0xabc>
 802413e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8024142:	e000      	b.n	8024146 <arm_softmax_s8+0xabe>
 8024144:	2300      	movs	r3, #0
 8024146:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 802414a:	f207 42ec 	addw	r2, r7, #1260	; 0x4ec
 802414e:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8024152:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8024154:	f507 629d 	add.w	r2, r7, #1256	; 0x4e8
 8024158:	2300      	movs	r3, #0
 802415a:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 802415c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8024160:	f04f 0300 	mov.w	r3, #0
 8024164:	f507 619c 	add.w	r1, r7, #1248	; 0x4e0
 8024168:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 802416c:	f207 43ec 	addw	r3, r7, #1260	; 0x4ec
 8024170:	681b      	ldr	r3, [r3, #0]
 8024172:	0fdb      	lsrs	r3, r3, #31
 8024174:	b2da      	uxtb	r2, r3
 8024176:	2300      	movs	r3, #0
 8024178:	4053      	eors	r3, r2
 802417a:	b2db      	uxtb	r3, r3
 802417c:	2b00      	cmp	r3, #0
 802417e:	d014      	beq.n	80241aa <arm_softmax_s8+0xb22>
        mult = 1 - mult;
 8024180:	f04f 0001 	mov.w	r0, #1
 8024184:	f04f 0100 	mov.w	r1, #0
 8024188:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 802418c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024190:	1a84      	subs	r4, r0, r2
 8024192:	f8c7 41a0 	str.w	r4, [r7, #416]	; 0x1a0
 8024196:	eb61 0303 	sbc.w	r3, r1, r3
 802419a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 802419e:	e9d7 3468 	ldrd	r3, r4, [r7, #416]	; 0x1a0
 80241a2:	f507 629c 	add.w	r2, r7, #1248	; 0x4e0
 80241a6:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80241aa:	f207 43ec 	addw	r3, r7, #1260	; 0x4ec
 80241ae:	681b      	ldr	r3, [r3, #0]
 80241b0:	4618      	mov	r0, r3
 80241b2:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80241b6:	a388      	add	r3, pc, #544	; (adr r3, 80243d8 <arm_softmax_s8+0xd50>)
 80241b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80241bc:	fb02 f501 	mul.w	r5, r2, r1
 80241c0:	fb00 f403 	mul.w	r4, r0, r3
 80241c4:	442c      	add	r4, r5
 80241c6:	fba0 0102 	umull	r0, r1, r0, r2
 80241ca:	1863      	adds	r3, r4, r1
 80241cc:	4619      	mov	r1, r3
 80241ce:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 80241d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80241d6:	1814      	adds	r4, r2, r0
 80241d8:	f8c7 4198 	str.w	r4, [r7, #408]	; 0x198
 80241dc:	414b      	adcs	r3, r1
 80241de:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80241e2:	e9d7 3466 	ldrd	r3, r4, [r7, #408]	; 0x198
 80241e6:	f507 629c 	add.w	r2, r7, #1248	; 0x4e0
 80241ea:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80241ee:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 80241f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80241f6:	4610      	mov	r0, r2
 80241f8:	4619      	mov	r1, r3
 80241fa:	2800      	cmp	r0, #0
 80241fc:	f171 0300 	sbcs.w	r3, r1, #0
 8024200:	da06      	bge.n	8024210 <arm_softmax_s8+0xb88>
 8024202:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8024206:	f04f 0300 	mov.w	r3, #0
 802420a:	1880      	adds	r0, r0, r2
 802420c:	eb43 0101 	adc.w	r1, r3, r1
 8024210:	f04f 0200 	mov.w	r2, #0
 8024214:	f04f 0300 	mov.w	r3, #0
 8024218:	0fc2      	lsrs	r2, r0, #31
 802421a:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 802421e:	17cb      	asrs	r3, r1, #31
 8024220:	4610      	mov	r0, r2
 8024222:	4619      	mov	r1, r3
 8024224:	f507 629d 	add.w	r2, r7, #1256	; 0x4e8
 8024228:	4603      	mov	r3, r0
 802422a:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 802422c:	f207 43ec 	addw	r3, r7, #1260	; 0x4ec
 8024230:	681a      	ldr	r2, [r3, #0]
 8024232:	4b6e      	ldr	r3, [pc, #440]	; (80243ec <arm_softmax_s8+0xd64>)
 8024234:	429a      	cmp	r2, r3
 8024236:	d10a      	bne.n	802424e <arm_softmax_s8+0xbc6>
 8024238:	f207 43ec 	addw	r3, r7, #1260	; 0x4ec
 802423c:	681b      	ldr	r3, [r3, #0]
 802423e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8024242:	d104      	bne.n	802424e <arm_softmax_s8+0xbc6>
        result = NN_Q31_MAX;
 8024244:	f507 629d 	add.w	r2, r7, #1256	; 0x4e8
 8024248:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 802424c:	6013      	str	r3, [r2, #0]
    return result;
 802424e:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8024252:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(790015084)
 8024254:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 8024258:	ea02 0103 	and.w	r1, r2, r3
 802425c:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 8024260:	43da      	mvns	r2, r3
 8024262:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8024266:	4013      	ands	r3, r2
 8024268:	404b      	eors	r3, r1
 802426a:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
    SELECT_IF_NON_ZERO(290630308)
 802426e:	f8d7 25b0 	ldr.w	r2, [r7, #1456]	; 0x5b0
 8024272:	1c53      	adds	r3, r2, #1
 8024274:	f8c7 35b0 	str.w	r3, [r7, #1456]	; 0x5b0
 8024278:	2301      	movs	r3, #1
 802427a:	fa03 f202 	lsl.w	r2, r3, r2
 802427e:	f8d7 35a8 	ldr.w	r3, [r7, #1448]	; 0x5a8
 8024282:	4013      	ands	r3, r2
 8024284:	2b00      	cmp	r3, #0
 8024286:	d002      	beq.n	802428e <arm_softmax_s8+0xc06>
 8024288:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802428c:	e000      	b.n	8024290 <arm_softmax_s8+0xc08>
 802428e:	2300      	movs	r3, #0
 8024290:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 8024294:	f207 42dc 	addw	r2, r7, #1244	; 0x4dc
 8024298:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 802429c:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 802429e:	f507 629b 	add.w	r2, r7, #1240	; 0x4d8
 80242a2:	2300      	movs	r3, #0
 80242a4:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80242a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80242aa:	f04f 0300 	mov.w	r3, #0
 80242ae:	f507 619a 	add.w	r1, r7, #1232	; 0x4d0
 80242b2:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80242b6:	f207 43dc 	addw	r3, r7, #1244	; 0x4dc
 80242ba:	681b      	ldr	r3, [r3, #0]
 80242bc:	0fdb      	lsrs	r3, r3, #31
 80242be:	b2da      	uxtb	r2, r3
 80242c0:	2300      	movs	r3, #0
 80242c2:	4053      	eors	r3, r2
 80242c4:	b2db      	uxtb	r3, r3
 80242c6:	2b00      	cmp	r3, #0
 80242c8:	d014      	beq.n	80242f4 <arm_softmax_s8+0xc6c>
        mult = 1 - mult;
 80242ca:	f04f 0001 	mov.w	r0, #1
 80242ce:	f04f 0100 	mov.w	r1, #0
 80242d2:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 80242d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80242da:	1a84      	subs	r4, r0, r2
 80242dc:	f8c7 4190 	str.w	r4, [r7, #400]	; 0x190
 80242e0:	eb61 0303 	sbc.w	r3, r1, r3
 80242e4:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 80242e8:	e9d7 3464 	ldrd	r3, r4, [r7, #400]	; 0x190
 80242ec:	f507 629a 	add.w	r2, r7, #1232	; 0x4d0
 80242f0:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80242f4:	f207 43dc 	addw	r3, r7, #1244	; 0x4dc
 80242f8:	681b      	ldr	r3, [r3, #0]
 80242fa:	4618      	mov	r0, r3
 80242fc:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8024300:	a337      	add	r3, pc, #220	; (adr r3, 80243e0 <arm_softmax_s8+0xd58>)
 8024302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024306:	fb02 f501 	mul.w	r5, r2, r1
 802430a:	fb00 f403 	mul.w	r4, r0, r3
 802430e:	442c      	add	r4, r5
 8024310:	fba0 0102 	umull	r0, r1, r0, r2
 8024314:	1863      	adds	r3, r4, r1
 8024316:	4619      	mov	r1, r3
 8024318:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 802431c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024320:	1814      	adds	r4, r2, r0
 8024322:	f8c7 4188 	str.w	r4, [r7, #392]	; 0x188
 8024326:	414b      	adcs	r3, r1
 8024328:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 802432c:	e9d7 3462 	ldrd	r3, r4, [r7, #392]	; 0x188
 8024330:	f507 629a 	add.w	r2, r7, #1232	; 0x4d0
 8024334:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8024338:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 802433c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024340:	4610      	mov	r0, r2
 8024342:	4619      	mov	r1, r3
 8024344:	2800      	cmp	r0, #0
 8024346:	f171 0300 	sbcs.w	r3, r1, #0
 802434a:	da06      	bge.n	802435a <arm_softmax_s8+0xcd2>
 802434c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8024350:	f04f 0300 	mov.w	r3, #0
 8024354:	1880      	adds	r0, r0, r2
 8024356:	eb43 0101 	adc.w	r1, r3, r1
 802435a:	f04f 0200 	mov.w	r2, #0
 802435e:	f04f 0300 	mov.w	r3, #0
 8024362:	0fc2      	lsrs	r2, r0, #31
 8024364:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8024368:	17cb      	asrs	r3, r1, #31
 802436a:	4610      	mov	r0, r2
 802436c:	4619      	mov	r1, r3
 802436e:	f507 629b 	add.w	r2, r7, #1240	; 0x4d8
 8024372:	4603      	mov	r3, r0
 8024374:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 8024376:	f207 43dc 	addw	r3, r7, #1244	; 0x4dc
 802437a:	681a      	ldr	r2, [r3, #0]
 802437c:	4b1c      	ldr	r3, [pc, #112]	; (80243f0 <arm_softmax_s8+0xd68>)
 802437e:	429a      	cmp	r2, r3
 8024380:	d10a      	bne.n	8024398 <arm_softmax_s8+0xd10>
 8024382:	f207 43dc 	addw	r3, r7, #1244	; 0x4dc
 8024386:	681b      	ldr	r3, [r3, #0]
 8024388:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802438c:	d104      	bne.n	8024398 <arm_softmax_s8+0xd10>
        result = NN_Q31_MAX;
 802438e:	f507 629b 	add.w	r2, r7, #1240	; 0x4d8
 8024392:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8024396:	6013      	str	r3, [r2, #0]
    return result;
 8024398:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 802439c:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(290630308)
 802439e:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 80243a2:	ea02 0103 	and.w	r1, r2, r3
 80243a6:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 80243aa:	43da      	mvns	r2, r3
 80243ac:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 80243b0:	4013      	ands	r3, r2
 80243b2:	404b      	eors	r3, r1
 80243b4:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
    SELECT_IF_NON_ZERO(39332535)
 80243b8:	f8d7 25b0 	ldr.w	r2, [r7, #1456]	; 0x5b0
 80243bc:	1c53      	adds	r3, r2, #1
 80243be:	f8c7 35b0 	str.w	r3, [r7, #1456]	; 0x5b0
 80243c2:	2301      	movs	r3, #1
 80243c4:	fa03 f202 	lsl.w	r2, r3, r2
 80243c8:	f8d7 35a8 	ldr.w	r3, [r7, #1448]	; 0x5a8
 80243cc:	4013      	ands	r3, r2
 80243ce:	2b00      	cmp	r3, #0
 80243d0:	d014      	beq.n	80243fc <arm_softmax_s8+0xd74>
 80243d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80243d6:	e012      	b.n	80243fe <arm_softmax_s8+0xd76>
 80243d8:	2f16ac6c 	.word	0x2f16ac6c
 80243dc:	00000000 	.word	0x00000000
 80243e0:	1152aaa4 	.word	0x1152aaa4
 80243e4:	00000000 	.word	0x00000000
 80243e8:	4da2cbf2 	.word	0x4da2cbf2
 80243ec:	2f16ac6c 	.word	0x2f16ac6c
 80243f0:	1152aaa4 	.word	0x1152aaa4
 80243f4:	4da2cbf2 	.word	0x4da2cbf2
 80243f8:	00000000 	.word	0x00000000
 80243fc:	2300      	movs	r3, #0
 80243fe:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 8024402:	f207 42cc 	addw	r2, r7, #1228	; 0x4cc
 8024406:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 802440a:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 802440c:	f507 6299 	add.w	r2, r7, #1224	; 0x4c8
 8024410:	2300      	movs	r3, #0
 8024412:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8024414:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8024418:	f04f 0300 	mov.w	r3, #0
 802441c:	f507 6198 	add.w	r1, r7, #1216	; 0x4c0
 8024420:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8024424:	f207 43cc 	addw	r3, r7, #1228	; 0x4cc
 8024428:	681b      	ldr	r3, [r3, #0]
 802442a:	0fdb      	lsrs	r3, r3, #31
 802442c:	b2da      	uxtb	r2, r3
 802442e:	2300      	movs	r3, #0
 8024430:	4053      	eors	r3, r2
 8024432:	b2db      	uxtb	r3, r3
 8024434:	2b00      	cmp	r3, #0
 8024436:	d014      	beq.n	8024462 <arm_softmax_s8+0xdda>
        mult = 1 - mult;
 8024438:	f04f 0001 	mov.w	r0, #1
 802443c:	f04f 0100 	mov.w	r1, #0
 8024440:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8024444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024448:	1a84      	subs	r4, r0, r2
 802444a:	f8c7 4180 	str.w	r4, [r7, #384]	; 0x180
 802444e:	eb61 0303 	sbc.w	r3, r1, r3
 8024452:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8024456:	e9d7 3460 	ldrd	r3, r4, [r7, #384]	; 0x180
 802445a:	f507 6298 	add.w	r2, r7, #1216	; 0x4c0
 802445e:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8024462:	f207 43cc 	addw	r3, r7, #1228	; 0x4cc
 8024466:	681b      	ldr	r3, [r3, #0]
 8024468:	4618      	mov	r0, r3
 802446a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 802446e:	a3d8      	add	r3, pc, #864	; (adr r3, 80247d0 <arm_softmax_s8+0x1148>)
 8024470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024474:	fb02 f501 	mul.w	r5, r2, r1
 8024478:	fb00 f403 	mul.w	r4, r0, r3
 802447c:	442c      	add	r4, r5
 802447e:	fba0 0102 	umull	r0, r1, r0, r2
 8024482:	1863      	adds	r3, r4, r1
 8024484:	4619      	mov	r1, r3
 8024486:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 802448a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802448e:	1814      	adds	r4, r2, r0
 8024490:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 8024494:	414b      	adcs	r3, r1
 8024496:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 802449a:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 802449e:	f507 6298 	add.w	r2, r7, #1216	; 0x4c0
 80244a2:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80244a6:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 80244aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80244ae:	4610      	mov	r0, r2
 80244b0:	4619      	mov	r1, r3
 80244b2:	2800      	cmp	r0, #0
 80244b4:	f171 0300 	sbcs.w	r3, r1, #0
 80244b8:	da06      	bge.n	80244c8 <arm_softmax_s8+0xe40>
 80244ba:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80244be:	f04f 0300 	mov.w	r3, #0
 80244c2:	1880      	adds	r0, r0, r2
 80244c4:	eb43 0101 	adc.w	r1, r3, r1
 80244c8:	f04f 0200 	mov.w	r2, #0
 80244cc:	f04f 0300 	mov.w	r3, #0
 80244d0:	0fc2      	lsrs	r2, r0, #31
 80244d2:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80244d6:	17cb      	asrs	r3, r1, #31
 80244d8:	4610      	mov	r0, r2
 80244da:	4619      	mov	r1, r3
 80244dc:	f507 6299 	add.w	r2, r7, #1224	; 0x4c8
 80244e0:	4603      	mov	r3, r0
 80244e2:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 80244e4:	f207 43cc 	addw	r3, r7, #1228	; 0x4cc
 80244e8:	681a      	ldr	r2, [r3, #0]
 80244ea:	4bb7      	ldr	r3, [pc, #732]	; (80247c8 <arm_softmax_s8+0x1140>)
 80244ec:	429a      	cmp	r2, r3
 80244ee:	d10a      	bne.n	8024506 <arm_softmax_s8+0xe7e>
 80244f0:	f207 43cc 	addw	r3, r7, #1228	; 0x4cc
 80244f4:	681b      	ldr	r3, [r3, #0]
 80244f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80244fa:	d104      	bne.n	8024506 <arm_softmax_s8+0xe7e>
        result = NN_Q31_MAX;
 80244fc:	f507 6299 	add.w	r2, r7, #1224	; 0x4c8
 8024500:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8024504:	6013      	str	r3, [r2, #0]
    return result;
 8024506:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 802450a:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(39332535)
 802450c:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 8024510:	ea02 0103 	and.w	r1, r2, r3
 8024514:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 8024518:	43da      	mvns	r2, r3
 802451a:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 802451e:	4013      	ands	r3, r2
 8024520:	404b      	eors	r3, r1
 8024522:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
    SELECT_IF_NON_ZERO(720401)
 8024526:	f8d7 25b0 	ldr.w	r2, [r7, #1456]	; 0x5b0
 802452a:	1c53      	adds	r3, r2, #1
 802452c:	f8c7 35b0 	str.w	r3, [r7, #1456]	; 0x5b0
 8024530:	2301      	movs	r3, #1
 8024532:	fa03 f202 	lsl.w	r2, r3, r2
 8024536:	f8d7 35a8 	ldr.w	r3, [r7, #1448]	; 0x5a8
 802453a:	4013      	ands	r3, r2
 802453c:	2b00      	cmp	r3, #0
 802453e:	d002      	beq.n	8024546 <arm_softmax_s8+0xebe>
 8024540:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8024544:	e000      	b.n	8024548 <arm_softmax_s8+0xec0>
 8024546:	2300      	movs	r3, #0
 8024548:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 802454c:	f207 42bc 	addw	r2, r7, #1212	; 0x4bc
 8024550:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8024554:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8024556:	f507 6297 	add.w	r2, r7, #1208	; 0x4b8
 802455a:	2300      	movs	r3, #0
 802455c:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 802455e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8024562:	f04f 0300 	mov.w	r3, #0
 8024566:	f507 6196 	add.w	r1, r7, #1200	; 0x4b0
 802456a:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 802456e:	f207 43bc 	addw	r3, r7, #1212	; 0x4bc
 8024572:	681b      	ldr	r3, [r3, #0]
 8024574:	0fdb      	lsrs	r3, r3, #31
 8024576:	b2da      	uxtb	r2, r3
 8024578:	2300      	movs	r3, #0
 802457a:	4053      	eors	r3, r2
 802457c:	b2db      	uxtb	r3, r3
 802457e:	2b00      	cmp	r3, #0
 8024580:	d014      	beq.n	80245ac <arm_softmax_s8+0xf24>
        mult = 1 - mult;
 8024582:	f04f 0001 	mov.w	r0, #1
 8024586:	f04f 0100 	mov.w	r1, #0
 802458a:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 802458e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024592:	1a84      	subs	r4, r0, r2
 8024594:	f8c7 4170 	str.w	r4, [r7, #368]	; 0x170
 8024598:	eb61 0303 	sbc.w	r3, r1, r3
 802459c:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 80245a0:	e9d7 345c 	ldrd	r3, r4, [r7, #368]	; 0x170
 80245a4:	f507 6296 	add.w	r2, r7, #1200	; 0x4b0
 80245a8:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80245ac:	f207 43bc 	addw	r3, r7, #1212	; 0x4bc
 80245b0:	681b      	ldr	r3, [r3, #0]
 80245b2:	4618      	mov	r0, r3
 80245b4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80245b8:	4a84      	ldr	r2, [pc, #528]	; (80247cc <arm_softmax_s8+0x1144>)
 80245ba:	f04f 0300 	mov.w	r3, #0
 80245be:	fb02 f501 	mul.w	r5, r2, r1
 80245c2:	fb00 f403 	mul.w	r4, r0, r3
 80245c6:	442c      	add	r4, r5
 80245c8:	fba0 0102 	umull	r0, r1, r0, r2
 80245cc:	1863      	adds	r3, r4, r1
 80245ce:	4619      	mov	r1, r3
 80245d0:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 80245d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80245d8:	1814      	adds	r4, r2, r0
 80245da:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 80245de:	414b      	adcs	r3, r1
 80245e0:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80245e4:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 80245e8:	f507 6296 	add.w	r2, r7, #1200	; 0x4b0
 80245ec:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80245f0:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 80245f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80245f8:	4610      	mov	r0, r2
 80245fa:	4619      	mov	r1, r3
 80245fc:	2800      	cmp	r0, #0
 80245fe:	f171 0300 	sbcs.w	r3, r1, #0
 8024602:	da06      	bge.n	8024612 <arm_softmax_s8+0xf8a>
 8024604:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8024608:	f04f 0300 	mov.w	r3, #0
 802460c:	1880      	adds	r0, r0, r2
 802460e:	eb43 0101 	adc.w	r1, r3, r1
 8024612:	f04f 0200 	mov.w	r2, #0
 8024616:	f04f 0300 	mov.w	r3, #0
 802461a:	0fc2      	lsrs	r2, r0, #31
 802461c:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8024620:	17cb      	asrs	r3, r1, #31
 8024622:	4610      	mov	r0, r2
 8024624:	4619      	mov	r1, r3
 8024626:	f507 6297 	add.w	r2, r7, #1208	; 0x4b8
 802462a:	4603      	mov	r3, r0
 802462c:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 802462e:	f207 43bc 	addw	r3, r7, #1212	; 0x4bc
 8024632:	681a      	ldr	r2, [r3, #0]
 8024634:	4b65      	ldr	r3, [pc, #404]	; (80247cc <arm_softmax_s8+0x1144>)
 8024636:	429a      	cmp	r2, r3
 8024638:	d10a      	bne.n	8024650 <arm_softmax_s8+0xfc8>
 802463a:	f207 43bc 	addw	r3, r7, #1212	; 0x4bc
 802463e:	681b      	ldr	r3, [r3, #0]
 8024640:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8024644:	d104      	bne.n	8024650 <arm_softmax_s8+0xfc8>
        result = NN_Q31_MAX;
 8024646:	f507 6297 	add.w	r2, r7, #1208	; 0x4b8
 802464a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 802464e:	6013      	str	r3, [r2, #0]
    return result;
 8024650:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8024654:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(720401)
 8024656:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 802465a:	ea02 0103 	and.w	r1, r2, r3
 802465e:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 8024662:	43da      	mvns	r2, r3
 8024664:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8024668:	4013      	ands	r3, r2
 802466a:	404b      	eors	r3, r1
 802466c:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
    SELECT_IF_NON_ZERO(242)
 8024670:	f8d7 25b0 	ldr.w	r2, [r7, #1456]	; 0x5b0
 8024674:	1c53      	adds	r3, r2, #1
 8024676:	f8c7 35b0 	str.w	r3, [r7, #1456]	; 0x5b0
 802467a:	2301      	movs	r3, #1
 802467c:	fa03 f202 	lsl.w	r2, r3, r2
 8024680:	f8d7 35a8 	ldr.w	r3, [r7, #1448]	; 0x5a8
 8024684:	4013      	ands	r3, r2
 8024686:	2b00      	cmp	r3, #0
 8024688:	d002      	beq.n	8024690 <arm_softmax_s8+0x1008>
 802468a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802468e:	e000      	b.n	8024692 <arm_softmax_s8+0x100a>
 8024690:	2300      	movs	r3, #0
 8024692:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 8024696:	f207 42ac 	addw	r2, r7, #1196	; 0x4ac
 802469a:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 802469e:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80246a0:	f507 6295 	add.w	r2, r7, #1192	; 0x4a8
 80246a4:	2300      	movs	r3, #0
 80246a6:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80246a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80246ac:	f04f 0300 	mov.w	r3, #0
 80246b0:	f507 6194 	add.w	r1, r7, #1184	; 0x4a0
 80246b4:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80246b8:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 80246bc:	681b      	ldr	r3, [r3, #0]
 80246be:	0fdb      	lsrs	r3, r3, #31
 80246c0:	b2da      	uxtb	r2, r3
 80246c2:	2300      	movs	r3, #0
 80246c4:	4053      	eors	r3, r2
 80246c6:	b2db      	uxtb	r3, r3
 80246c8:	2b00      	cmp	r3, #0
 80246ca:	d014      	beq.n	80246f6 <arm_softmax_s8+0x106e>
        mult = 1 - mult;
 80246cc:	f04f 0001 	mov.w	r0, #1
 80246d0:	f04f 0100 	mov.w	r1, #0
 80246d4:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 80246d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80246dc:	1a84      	subs	r4, r0, r2
 80246de:	f8c7 4160 	str.w	r4, [r7, #352]	; 0x160
 80246e2:	eb61 0303 	sbc.w	r3, r1, r3
 80246e6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 80246ea:	e9d7 3458 	ldrd	r3, r4, [r7, #352]	; 0x160
 80246ee:	f507 6294 	add.w	r2, r7, #1184	; 0x4a0
 80246f2:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80246f6:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 80246fa:	681b      	ldr	r3, [r3, #0]
 80246fc:	4618      	mov	r0, r3
 80246fe:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8024702:	f04f 02f2 	mov.w	r2, #242	; 0xf2
 8024706:	f04f 0300 	mov.w	r3, #0
 802470a:	fb02 f501 	mul.w	r5, r2, r1
 802470e:	fb00 f403 	mul.w	r4, r0, r3
 8024712:	442c      	add	r4, r5
 8024714:	fba0 0102 	umull	r0, r1, r0, r2
 8024718:	1863      	adds	r3, r4, r1
 802471a:	4619      	mov	r1, r3
 802471c:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 8024720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024724:	1814      	adds	r4, r2, r0
 8024726:	f8c7 4158 	str.w	r4, [r7, #344]	; 0x158
 802472a:	414b      	adcs	r3, r1
 802472c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8024730:	e9d7 3456 	ldrd	r3, r4, [r7, #344]	; 0x158
 8024734:	f507 6294 	add.w	r2, r7, #1184	; 0x4a0
 8024738:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 802473c:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 8024740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024744:	4610      	mov	r0, r2
 8024746:	4619      	mov	r1, r3
 8024748:	2800      	cmp	r0, #0
 802474a:	f171 0300 	sbcs.w	r3, r1, #0
 802474e:	da06      	bge.n	802475e <arm_softmax_s8+0x10d6>
 8024750:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8024754:	f04f 0300 	mov.w	r3, #0
 8024758:	1880      	adds	r0, r0, r2
 802475a:	eb43 0101 	adc.w	r1, r3, r1
 802475e:	f04f 0200 	mov.w	r2, #0
 8024762:	f04f 0300 	mov.w	r3, #0
 8024766:	0fc2      	lsrs	r2, r0, #31
 8024768:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 802476c:	17cb      	asrs	r3, r1, #31
 802476e:	4610      	mov	r0, r2
 8024770:	4619      	mov	r1, r3
 8024772:	f507 6295 	add.w	r2, r7, #1192	; 0x4a8
 8024776:	4603      	mov	r3, r0
 8024778:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 802477a:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 802477e:	681b      	ldr	r3, [r3, #0]
 8024780:	2bf2      	cmp	r3, #242	; 0xf2
 8024782:	d10a      	bne.n	802479a <arm_softmax_s8+0x1112>
 8024784:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 8024788:	681b      	ldr	r3, [r3, #0]
 802478a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802478e:	d104      	bne.n	802479a <arm_softmax_s8+0x1112>
        result = NN_Q31_MAX;
 8024790:	f507 6295 	add.w	r2, r7, #1192	; 0x4a8
 8024794:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8024798:	6013      	str	r3, [r2, #0]
    return result;
 802479a:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 802479e:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(242)
 80247a0:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 80247a4:	ea02 0103 	and.w	r1, r2, r3
 80247a8:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 80247ac:	43da      	mvns	r2, r3
 80247ae:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 80247b2:	4013      	ands	r3, r2
 80247b4:	404b      	eors	r3, r1
 80247b6:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
    mask = MASK_IF_ZERO(val);
 80247ba:	f8d7 35b8 	ldr.w	r3, [r7, #1464]	; 0x5b8
 80247be:	2b00      	cmp	r3, #0
 80247c0:	d10a      	bne.n	80247d8 <arm_softmax_s8+0x1150>
 80247c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80247c6:	e008      	b.n	80247da <arm_softmax_s8+0x1152>
 80247c8:	02582ab7 	.word	0x02582ab7
 80247cc:	000afe11 	.word	0x000afe11
 80247d0:	02582ab7 	.word	0x02582ab7
 80247d4:	00000000 	.word	0x00000000
 80247d8:	2300      	movs	r3, #0
 80247da:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
    return SELECT_USING_MASK(mask, NN_Q31_MAX, result);
 80247de:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 80247e2:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80247e6:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 80247ea:	43da      	mvns	r2, r3
 80247ec:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 80247f0:	4013      	ands	r3, r2
 80247f2:	404b      	eors	r3, r1
 80247f4:	f8c7 35cc 	str.w	r3, [r7, #1484]	; 0x5cc
    q31_t result = 0;
 80247f8:	2300      	movs	r3, #0
 80247fa:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
    const q31_t remainder_mask = (1 << exponent) - 1;
 80247fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8024802:	3b01      	subs	r3, #1
 8024804:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
    int32_t remainder = remainder_mask & dividend;
 8024808:	f8d7 25cc 	ldr.w	r2, [r7, #1484]	; 0x5cc
 802480c:	f8d7 35c4 	ldr.w	r3, [r7, #1476]	; 0x5c4
 8024810:	4013      	ands	r3, r2
 8024812:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
    result = dividend >> exponent;
 8024816:	f8d7 35cc 	ldr.w	r3, [r7, #1484]	; 0x5cc
 802481a:	131b      	asrs	r3, r3, #12
 802481c:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
    q31_t threshold = remainder_mask >> 1;
 8024820:	f8d7 35c4 	ldr.w	r3, [r7, #1476]	; 0x5c4
 8024824:	105b      	asrs	r3, r3, #1
 8024826:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
    if (result < 0)
 802482a:	f8d7 35c8 	ldr.w	r3, [r7, #1480]	; 0x5c8
 802482e:	2b00      	cmp	r3, #0
 8024830:	da04      	bge.n	802483c <arm_softmax_s8+0x11b4>
        threshold++;
 8024832:	f8d7 35bc 	ldr.w	r3, [r7, #1468]	; 0x5bc
 8024836:	3301      	adds	r3, #1
 8024838:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
    if (remainder > threshold)
 802483c:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 8024840:	f8d7 35bc 	ldr.w	r3, [r7, #1468]	; 0x5bc
 8024844:	429a      	cmp	r2, r3
 8024846:	dd04      	ble.n	8024852 <arm_softmax_s8+0x11ca>
        result++;
 8024848:	f8d7 35c8 	ldr.w	r3, [r7, #1480]	; 0x5c8
 802484c:	3301      	adds	r3, #1
 802484e:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
    return result;
 8024852:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 8024856:	f8d7 35e8 	ldr.w	r3, [r7, #1512]	; 0x5e8
 802485a:	4413      	add	r3, r2
 802485c:	f8c7 35e8 	str.w	r3, [r7, #1512]	; 0x5e8
        for (col = 0; col < row_size; ++col)
 8024860:	f8d7 35f4 	ldr.w	r3, [r7, #1524]	; 0x5f4
 8024864:	3301      	adds	r3, #1
 8024866:	f8c7 35f4 	str.w	r3, [r7, #1524]	; 0x5f4
 802486a:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 802486e:	f8d7 25f4 	ldr.w	r2, [r7, #1524]	; 0x5f4
 8024872:	681b      	ldr	r3, [r3, #0]
 8024874:	429a      	cmp	r2, r3
 8024876:	f6fe af57 	blt.w	8023728 <arm_softmax_s8+0xa0>
            }
        }

        const int32_t headroom = __CLZ(sum);
 802487a:	f8d7 25e8 	ldr.w	r2, [r7, #1512]	; 0x5e8
 802487e:	f207 4384 	addw	r3, r7, #1156	; 0x484
 8024882:	601a      	str	r2, [r3, #0]
  if (value == 0U)
 8024884:	f207 4384 	addw	r3, r7, #1156	; 0x484
 8024888:	681b      	ldr	r3, [r3, #0]
 802488a:	2b00      	cmp	r3, #0
 802488c:	d101      	bne.n	8024892 <arm_softmax_s8+0x120a>
    return 32U;
 802488e:	2320      	movs	r3, #32
 8024890:	e005      	b.n	802489e <arm_softmax_s8+0x1216>
  return __builtin_clz(value);
 8024892:	f207 4384 	addw	r3, r7, #1156	; 0x484
 8024896:	681b      	ldr	r3, [r3, #0]
 8024898:	fab3 f383 	clz	r3, r3
 802489c:	b2db      	uxtb	r3, r3
 802489e:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
        const int32_t bits_over_unit = ACCUM_BITS - headroom + 23;
 80248a2:	f8d7 35dc 	ldr.w	r3, [r7, #1500]	; 0x5dc
 80248a6:	f1c3 0323 	rsb	r3, r3, #35	; 0x23
 80248aa:	f8c7 35d8 	str.w	r3, [r7, #1496]	; 0x5d8
        const int32_t shifted_scale = ONE_OVER1((sum > 0 ? sum << headroom : 0) - (1 << 31));
 80248ae:	f8d7 35e8 	ldr.w	r3, [r7, #1512]	; 0x5e8
 80248b2:	2b00      	cmp	r3, #0
 80248b4:	dd08      	ble.n	80248c8 <arm_softmax_s8+0x1240>
 80248b6:	f8d7 25e8 	ldr.w	r2, [r7, #1512]	; 0x5e8
 80248ba:	f8d7 35dc 	ldr.w	r3, [r7, #1500]	; 0x5dc
 80248be:	fa02 f303 	lsl.w	r3, r2, r3
 80248c2:	f103 4200 	add.w	r2, r3, #2147483648	; 0x80000000
 80248c6:	e001      	b.n	80248cc <arm_softmax_s8+0x1244>
 80248c8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80248cc:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 80248d0:	601a      	str	r2, [r3, #0]
    const int64_t sum = (int64_t)val + (int64_t)NN_Q31_MAX;
 80248d2:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 80248d6:	681b      	ldr	r3, [r3, #0]
 80248d8:	4618      	mov	r0, r3
 80248da:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80248de:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80248e2:	f04f 0300 	mov.w	r3, #0
 80248e6:	1884      	adds	r4, r0, r2
 80248e8:	f8c7 4150 	str.w	r4, [r7, #336]	; 0x150
 80248ec:	eb41 0303 	adc.w	r3, r1, r3
 80248f0:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80248f4:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 80248f8:	f507 628f 	add.w	r2, r7, #1144	; 0x478
 80248fc:	e9c2 3400 	strd	r3, r4, [r2]
    const int32_t half_denominator = (int32_t)((sum + (sum >= 0 ? 1 : -1)) / 2L);
 8024900:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8024904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024908:	2a00      	cmp	r2, #0
 802490a:	f173 0300 	sbcs.w	r3, r3, #0
 802490e:	db04      	blt.n	802491a <arm_softmax_s8+0x1292>
 8024910:	f04f 0001 	mov.w	r0, #1
 8024914:	f04f 0100 	mov.w	r1, #0
 8024918:	e003      	b.n	8024922 <arm_softmax_s8+0x129a>
 802491a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802491e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8024922:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8024926:	e9d3 2300 	ldrd	r2, r3, [r3]
 802492a:	eb10 0a02 	adds.w	sl, r0, r2
 802492e:	eb41 0b03 	adc.w	fp, r1, r3
 8024932:	ea4f 73db 	mov.w	r3, fp, lsr #31
 8024936:	461a      	mov	r2, r3
 8024938:	f04f 0300 	mov.w	r3, #0
 802493c:	eb12 080a 	adds.w	r8, r2, sl
 8024940:	eb43 090b 	adc.w	r9, r3, fp
 8024944:	f04f 0200 	mov.w	r2, #0
 8024948:	f04f 0300 	mov.w	r3, #0
 802494c:	ea4f 0258 	mov.w	r2, r8, lsr #1
 8024950:	ea42 72c9 	orr.w	r2, r2, r9, lsl #31
 8024954:	ea4f 0369 	mov.w	r3, r9, asr #1
 8024958:	4610      	mov	r0, r2
 802495a:	4619      	mov	r1, r3
 802495c:	f207 4274 	addw	r2, r7, #1140	; 0x474
 8024960:	4603      	mov	r3, r0
 8024962:	6013      	str	r3, [r2, #0]
 8024964:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8024968:	f207 4374 	addw	r3, r7, #1140	; 0x474
 802496c:	681b      	ldr	r3, [r3, #0]
 802496e:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8024970:	f207 426c 	addw	r2, r7, #1132	; 0x46c
 8024974:	2300      	movs	r3, #0
 8024976:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8024978:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 802497c:	f04f 0300 	mov.w	r3, #0
 8024980:	f507 618c 	add.w	r1, r7, #1120	; 0x460
 8024984:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8024988:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 802498c:	681b      	ldr	r3, [r3, #0]
 802498e:	0fdb      	lsrs	r3, r3, #31
 8024990:	b2da      	uxtb	r2, r3
 8024992:	2301      	movs	r3, #1
 8024994:	4053      	eors	r3, r2
 8024996:	b2db      	uxtb	r3, r3
 8024998:	2b00      	cmp	r3, #0
 802499a:	d014      	beq.n	80249c6 <arm_softmax_s8+0x133e>
        mult = 1 - mult;
 802499c:	f04f 0001 	mov.w	r0, #1
 80249a0:	f04f 0100 	mov.w	r1, #0
 80249a4:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 80249a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80249ac:	1a84      	subs	r4, r0, r2
 80249ae:	f8c7 4148 	str.w	r4, [r7, #328]	; 0x148
 80249b2:	eb61 0303 	sbc.w	r3, r1, r3
 80249b6:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80249ba:	e9d7 3452 	ldrd	r3, r4, [r7, #328]	; 0x148
 80249be:	f507 628c 	add.w	r2, r7, #1120	; 0x460
 80249c2:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80249c6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80249ca:	681b      	ldr	r3, [r3, #0]
 80249cc:	4618      	mov	r0, r3
 80249ce:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80249d2:	f60f 2354 	addw	r3, pc, #2644	; 0xa54
 80249d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80249da:	fb02 f501 	mul.w	r5, r2, r1
 80249de:	fb00 f403 	mul.w	r4, r0, r3
 80249e2:	442c      	add	r4, r5
 80249e4:	fba0 0102 	umull	r0, r1, r0, r2
 80249e8:	1863      	adds	r3, r4, r1
 80249ea:	4619      	mov	r1, r3
 80249ec:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 80249f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80249f4:	1814      	adds	r4, r2, r0
 80249f6:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 80249fa:	414b      	adcs	r3, r1
 80249fc:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8024a00:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8024a04:	f507 628c 	add.w	r2, r7, #1120	; 0x460
 8024a08:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8024a0c:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8024a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024a14:	4610      	mov	r0, r2
 8024a16:	4619      	mov	r1, r3
 8024a18:	2800      	cmp	r0, #0
 8024a1a:	f171 0300 	sbcs.w	r3, r1, #0
 8024a1e:	da06      	bge.n	8024a2e <arm_softmax_s8+0x13a6>
 8024a20:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8024a24:	f04f 0300 	mov.w	r3, #0
 8024a28:	1880      	adds	r0, r0, r2
 8024a2a:	eb43 0101 	adc.w	r1, r3, r1
 8024a2e:	f04f 0200 	mov.w	r2, #0
 8024a32:	f04f 0300 	mov.w	r3, #0
 8024a36:	0fc2      	lsrs	r2, r0, #31
 8024a38:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8024a3c:	17cb      	asrs	r3, r1, #31
 8024a3e:	4610      	mov	r0, r2
 8024a40:	4619      	mov	r1, r3
 8024a42:	f207 426c 	addw	r2, r7, #1132	; 0x46c
 8024a46:	4603      	mov	r3, r0
 8024a48:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 8024a4a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8024a4e:	681b      	ldr	r3, [r3, #0]
 8024a50:	f113 3f3c 	cmn.w	r3, #1010580540	; 0x3c3c3c3c
 8024a54:	d10a      	bne.n	8024a6c <arm_softmax_s8+0x13e4>
 8024a56:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8024a5a:	681b      	ldr	r3, [r3, #0]
 8024a5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8024a60:	d104      	bne.n	8024a6c <arm_softmax_s8+0x13e4>
        result = NN_Q31_MAX;
 8024a62:	f207 426c 	addw	r2, r7, #1132	; 0x46c
 8024a66:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8024a6a:	6013      	str	r3, [r2, #0]
    return result;
 8024a6c:	f207 436c 	addw	r3, r7, #1132	; 0x46c
 8024a70:	681b      	ldr	r3, [r3, #0]
    int32_t x = 1515870810 + MUL_SAT(half_denominator, -1010580540);
 8024a72:	f207 425c 	addw	r2, r7, #1116	; 0x45c
 8024a76:	f103 335a 	add.w	r3, r3, #1515870810	; 0x5a5a5a5a
 8024a7a:	6013      	str	r3, [r2, #0]
    const int32_t shift = (1 << 29);
 8024a7c:	f507 628b 	add.w	r2, r7, #1112	; 0x458
 8024a80:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8024a84:	6013      	str	r3, [r2, #0]
 8024a86:	f207 4254 	addw	r2, r7, #1108	; 0x454
 8024a8a:	f207 4374 	addw	r3, r7, #1140	; 0x474
 8024a8e:	681b      	ldr	r3, [r3, #0]
 8024a90:	6013      	str	r3, [r2, #0]
 8024a92:	f507 628a 	add.w	r2, r7, #1104	; 0x450
 8024a96:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 8024a9a:	681b      	ldr	r3, [r3, #0]
 8024a9c:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8024a9e:	f207 424c 	addw	r2, r7, #1100	; 0x44c
 8024aa2:	2300      	movs	r3, #0
 8024aa4:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8024aa6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8024aaa:	f04f 0300 	mov.w	r3, #0
 8024aae:	f507 6188 	add.w	r1, r7, #1088	; 0x440
 8024ab2:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8024ab6:	f207 4354 	addw	r3, r7, #1108	; 0x454
 8024aba:	681b      	ldr	r3, [r3, #0]
 8024abc:	0fdb      	lsrs	r3, r3, #31
 8024abe:	b2da      	uxtb	r2, r3
 8024ac0:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8024ac4:	681b      	ldr	r3, [r3, #0]
 8024ac6:	0fdb      	lsrs	r3, r3, #31
 8024ac8:	b2db      	uxtb	r3, r3
 8024aca:	4053      	eors	r3, r2
 8024acc:	b2db      	uxtb	r3, r3
 8024ace:	2b00      	cmp	r3, #0
 8024ad0:	d014      	beq.n	8024afc <arm_softmax_s8+0x1474>
        mult = 1 - mult;
 8024ad2:	f04f 0001 	mov.w	r0, #1
 8024ad6:	f04f 0100 	mov.w	r1, #0
 8024ada:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8024ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024ae2:	1a84      	subs	r4, r0, r2
 8024ae4:	f8c7 4138 	str.w	r4, [r7, #312]	; 0x138
 8024ae8:	eb61 0303 	sbc.w	r3, r1, r3
 8024aec:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8024af0:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 8024af4:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 8024af8:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8024afc:	f207 4354 	addw	r3, r7, #1108	; 0x454
 8024b00:	681b      	ldr	r3, [r3, #0]
 8024b02:	4618      	mov	r0, r3
 8024b04:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8024b08:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8024b0c:	681b      	ldr	r3, [r3, #0]
 8024b0e:	461a      	mov	r2, r3
 8024b10:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8024b14:	fb02 f501 	mul.w	r5, r2, r1
 8024b18:	fb00 f403 	mul.w	r4, r0, r3
 8024b1c:	442c      	add	r4, r5
 8024b1e:	fba0 0102 	umull	r0, r1, r0, r2
 8024b22:	1863      	adds	r3, r4, r1
 8024b24:	4619      	mov	r1, r3
 8024b26:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8024b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024b2e:	1814      	adds	r4, r2, r0
 8024b30:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 8024b34:	414b      	adcs	r3, r1
 8024b36:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8024b3a:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8024b3e:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 8024b42:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8024b46:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8024b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024b4e:	4610      	mov	r0, r2
 8024b50:	4619      	mov	r1, r3
 8024b52:	2800      	cmp	r0, #0
 8024b54:	f171 0300 	sbcs.w	r3, r1, #0
 8024b58:	da06      	bge.n	8024b68 <arm_softmax_s8+0x14e0>
 8024b5a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8024b5e:	f04f 0300 	mov.w	r3, #0
 8024b62:	1880      	adds	r0, r0, r2
 8024b64:	eb43 0101 	adc.w	r1, r3, r1
 8024b68:	f04f 0200 	mov.w	r2, #0
 8024b6c:	f04f 0300 	mov.w	r3, #0
 8024b70:	0fc2      	lsrs	r2, r0, #31
 8024b72:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8024b76:	17cb      	asrs	r3, r1, #31
 8024b78:	4610      	mov	r0, r2
 8024b7a:	4619      	mov	r1, r3
 8024b7c:	f207 424c 	addw	r2, r7, #1100	; 0x44c
 8024b80:	4603      	mov	r3, r0
 8024b82:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 8024b84:	f207 4254 	addw	r2, r7, #1108	; 0x454
 8024b88:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8024b8c:	6812      	ldr	r2, [r2, #0]
 8024b8e:	681b      	ldr	r3, [r3, #0]
 8024b90:	429a      	cmp	r2, r3
 8024b92:	d10a      	bne.n	8024baa <arm_softmax_s8+0x1522>
 8024b94:	f207 4354 	addw	r3, r7, #1108	; 0x454
 8024b98:	681b      	ldr	r3, [r3, #0]
 8024b9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8024b9e:	d104      	bne.n	8024baa <arm_softmax_s8+0x1522>
        result = NN_Q31_MAX;
 8024ba0:	f207 424c 	addw	r2, r7, #1100	; 0x44c
 8024ba4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8024ba8:	6013      	str	r3, [r2, #0]
    return result;
 8024baa:	f207 434c 	addw	r3, r7, #1100	; 0x44c
 8024bae:	681a      	ldr	r2, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 8024bb0:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8024bb4:	681b      	ldr	r3, [r3, #0]
 8024bb6:	1a99      	subs	r1, r3, r2
 8024bb8:	f207 423c 	addw	r2, r7, #1084	; 0x43c
 8024bbc:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 8024bc0:	681b      	ldr	r3, [r3, #0]
 8024bc2:	6013      	str	r3, [r2, #0]
 8024bc4:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8024bc8:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 8024bca:	f207 4234 	addw	r2, r7, #1076	; 0x434
 8024bce:	2300      	movs	r3, #0
 8024bd0:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8024bd2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8024bd6:	f04f 0300 	mov.w	r3, #0
 8024bda:	f507 6185 	add.w	r1, r7, #1064	; 0x428
 8024bde:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8024be2:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8024be6:	681b      	ldr	r3, [r3, #0]
 8024be8:	0fdb      	lsrs	r3, r3, #31
 8024bea:	b2da      	uxtb	r2, r3
 8024bec:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8024bf0:	681b      	ldr	r3, [r3, #0]
 8024bf2:	0fdb      	lsrs	r3, r3, #31
 8024bf4:	b2db      	uxtb	r3, r3
 8024bf6:	4053      	eors	r3, r2
 8024bf8:	b2db      	uxtb	r3, r3
 8024bfa:	2b00      	cmp	r3, #0
 8024bfc:	d014      	beq.n	8024c28 <arm_softmax_s8+0x15a0>
        mult = 1 - mult;
 8024bfe:	f04f 0001 	mov.w	r0, #1
 8024c02:	f04f 0100 	mov.w	r1, #0
 8024c06:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8024c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024c0e:	1a84      	subs	r4, r0, r2
 8024c10:	f8c7 4128 	str.w	r4, [r7, #296]	; 0x128
 8024c14:	eb61 0303 	sbc.w	r3, r1, r3
 8024c18:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8024c1c:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	; 0x128
 8024c20:	f507 6285 	add.w	r2, r7, #1064	; 0x428
 8024c24:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8024c28:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8024c2c:	681b      	ldr	r3, [r3, #0]
 8024c2e:	4618      	mov	r0, r3
 8024c30:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8024c34:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8024c38:	681b      	ldr	r3, [r3, #0]
 8024c3a:	461a      	mov	r2, r3
 8024c3c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8024c40:	fb02 f501 	mul.w	r5, r2, r1
 8024c44:	fb00 f403 	mul.w	r4, r0, r3
 8024c48:	442c      	add	r4, r5
 8024c4a:	fba0 0102 	umull	r0, r1, r0, r2
 8024c4e:	1863      	adds	r3, r4, r1
 8024c50:	4619      	mov	r1, r3
 8024c52:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8024c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024c5a:	1814      	adds	r4, r2, r0
 8024c5c:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 8024c60:	414b      	adcs	r3, r1
 8024c62:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8024c66:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 8024c6a:	f507 6285 	add.w	r2, r7, #1064	; 0x428
 8024c6e:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8024c72:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8024c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024c7a:	4610      	mov	r0, r2
 8024c7c:	4619      	mov	r1, r3
 8024c7e:	2800      	cmp	r0, #0
 8024c80:	f171 0300 	sbcs.w	r3, r1, #0
 8024c84:	da06      	bge.n	8024c94 <arm_softmax_s8+0x160c>
 8024c86:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8024c8a:	f04f 0300 	mov.w	r3, #0
 8024c8e:	1880      	adds	r0, r0, r2
 8024c90:	eb43 0101 	adc.w	r1, r3, r1
 8024c94:	f04f 0200 	mov.w	r2, #0
 8024c98:	f04f 0300 	mov.w	r3, #0
 8024c9c:	0fc2      	lsrs	r2, r0, #31
 8024c9e:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8024ca2:	17cb      	asrs	r3, r1, #31
 8024ca4:	4610      	mov	r0, r2
 8024ca6:	4619      	mov	r1, r3
 8024ca8:	f207 4234 	addw	r2, r7, #1076	; 0x434
 8024cac:	4603      	mov	r3, r0
 8024cae:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 8024cb0:	f207 423c 	addw	r2, r7, #1084	; 0x43c
 8024cb4:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8024cb8:	6812      	ldr	r2, [r2, #0]
 8024cba:	681b      	ldr	r3, [r3, #0]
 8024cbc:	429a      	cmp	r2, r3
 8024cbe:	d10a      	bne.n	8024cd6 <arm_softmax_s8+0x164e>
 8024cc0:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8024cc4:	681b      	ldr	r3, [r3, #0]
 8024cc6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8024cca:	d104      	bne.n	8024cd6 <arm_softmax_s8+0x164e>
        result = NN_Q31_MAX;
 8024ccc:	f207 4234 	addw	r2, r7, #1076	; 0x434
 8024cd0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8024cd4:	6013      	str	r3, [r2, #0]
    return result;
 8024cd6:	f207 4334 	addw	r3, r7, #1076	; 0x434
 8024cda:	681a      	ldr	r2, [r3, #0]
 8024cdc:	f207 4324 	addw	r3, r7, #1060	; 0x424
 8024ce0:	601a      	str	r2, [r3, #0]
    const int32_t thresh = ((1 << (31 - exp)) - 1);
 8024ce2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8024ce6:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 8024cea:	3b01      	subs	r3, #1
 8024cec:	6013      	str	r3, [r2, #0]
    int32_t result = val << exp;
 8024cee:	f207 421c 	addw	r2, r7, #1052	; 0x41c
 8024cf2:	f207 4324 	addw	r3, r7, #1060	; 0x424
 8024cf6:	681b      	ldr	r3, [r3, #0]
 8024cf8:	009b      	lsls	r3, r3, #2
 8024cfa:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), NN_Q31_MAX, result);
 8024cfc:	f207 4224 	addw	r2, r7, #1060	; 0x424
 8024d00:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8024d04:	6812      	ldr	r2, [r2, #0]
 8024d06:	681b      	ldr	r3, [r3, #0]
 8024d08:	429a      	cmp	r2, r3
 8024d0a:	dd02      	ble.n	8024d12 <arm_softmax_s8+0x168a>
 8024d0c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8024d10:	e000      	b.n	8024d14 <arm_softmax_s8+0x168c>
 8024d12:	2100      	movs	r1, #0
 8024d14:	f207 4224 	addw	r2, r7, #1060	; 0x424
 8024d18:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8024d1c:	6812      	ldr	r2, [r2, #0]
 8024d1e:	681b      	ldr	r3, [r3, #0]
 8024d20:	429a      	cmp	r2, r3
 8024d22:	dd01      	ble.n	8024d28 <arm_softmax_s8+0x16a0>
 8024d24:	2200      	movs	r2, #0
 8024d26:	e001      	b.n	8024d2c <arm_softmax_s8+0x16a4>
 8024d28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8024d2c:	f207 431c 	addw	r3, r7, #1052	; 0x41c
 8024d30:	681b      	ldr	r3, [r3, #0]
 8024d32:	4013      	ands	r3, r2
 8024d34:	f207 421c 	addw	r2, r7, #1052	; 0x41c
 8024d38:	404b      	eors	r3, r1
 8024d3a:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), NN_Q31_MIN, result);
 8024d3c:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8024d40:	681b      	ldr	r3, [r3, #0]
 8024d42:	425a      	negs	r2, r3
 8024d44:	f207 4324 	addw	r3, r7, #1060	; 0x424
 8024d48:	681b      	ldr	r3, [r3, #0]
 8024d4a:	4293      	cmp	r3, r2
 8024d4c:	da02      	bge.n	8024d54 <arm_softmax_s8+0x16cc>
 8024d4e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8024d52:	e000      	b.n	8024d56 <arm_softmax_s8+0x16ce>
 8024d54:	2100      	movs	r1, #0
 8024d56:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8024d5a:	681b      	ldr	r3, [r3, #0]
 8024d5c:	425a      	negs	r2, r3
 8024d5e:	f207 4324 	addw	r3, r7, #1060	; 0x424
 8024d62:	681b      	ldr	r3, [r3, #0]
 8024d64:	4293      	cmp	r3, r2
 8024d66:	da01      	bge.n	8024d6c <arm_softmax_s8+0x16e4>
 8024d68:	2200      	movs	r2, #0
 8024d6a:	e001      	b.n	8024d70 <arm_softmax_s8+0x16e8>
 8024d6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8024d70:	f207 431c 	addw	r3, r7, #1052	; 0x41c
 8024d74:	681b      	ldr	r3, [r3, #0]
 8024d76:	4013      	ands	r3, r2
 8024d78:	f207 421c 	addw	r2, r7, #1052	; 0x41c
 8024d7c:	404b      	eors	r3, r1
 8024d7e:	6013      	str	r3, [r2, #0]
    return result;
 8024d80:	f207 431c 	addw	r3, r7, #1052	; 0x41c
 8024d84:	6819      	ldr	r1, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 8024d86:	f207 425c 	addw	r2, r7, #1116	; 0x45c
 8024d8a:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 8024d8e:	681b      	ldr	r3, [r3, #0]
 8024d90:	440b      	add	r3, r1
 8024d92:	6013      	str	r3, [r2, #0]
 8024d94:	f507 6283 	add.w	r2, r7, #1048	; 0x418
 8024d98:	f207 4374 	addw	r3, r7, #1140	; 0x474
 8024d9c:	681b      	ldr	r3, [r3, #0]
 8024d9e:	6013      	str	r3, [r2, #0]
 8024da0:	f207 4214 	addw	r2, r7, #1044	; 0x414
 8024da4:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 8024da8:	681b      	ldr	r3, [r3, #0]
 8024daa:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8024dac:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8024db0:	2300      	movs	r3, #0
 8024db2:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8024db4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8024db8:	f04f 0300 	mov.w	r3, #0
 8024dbc:	f507 6181 	add.w	r1, r7, #1032	; 0x408
 8024dc0:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8024dc4:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8024dc8:	681b      	ldr	r3, [r3, #0]
 8024dca:	0fdb      	lsrs	r3, r3, #31
 8024dcc:	b2da      	uxtb	r2, r3
 8024dce:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8024dd2:	681b      	ldr	r3, [r3, #0]
 8024dd4:	0fdb      	lsrs	r3, r3, #31
 8024dd6:	b2db      	uxtb	r3, r3
 8024dd8:	4053      	eors	r3, r2
 8024dda:	b2db      	uxtb	r3, r3
 8024ddc:	2b00      	cmp	r3, #0
 8024dde:	d014      	beq.n	8024e0a <arm_softmax_s8+0x1782>
        mult = 1 - mult;
 8024de0:	f04f 0001 	mov.w	r0, #1
 8024de4:	f04f 0100 	mov.w	r1, #0
 8024de8:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8024dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024df0:	1a84      	subs	r4, r0, r2
 8024df2:	f8c7 4118 	str.w	r4, [r7, #280]	; 0x118
 8024df6:	eb61 0303 	sbc.w	r3, r1, r3
 8024dfa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8024dfe:	e9d7 3446 	ldrd	r3, r4, [r7, #280]	; 0x118
 8024e02:	f507 6281 	add.w	r2, r7, #1032	; 0x408
 8024e06:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8024e0a:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8024e0e:	681b      	ldr	r3, [r3, #0]
 8024e10:	4618      	mov	r0, r3
 8024e12:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8024e16:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8024e1a:	681b      	ldr	r3, [r3, #0]
 8024e1c:	461a      	mov	r2, r3
 8024e1e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8024e22:	fb02 f501 	mul.w	r5, r2, r1
 8024e26:	fb00 f403 	mul.w	r4, r0, r3
 8024e2a:	442c      	add	r4, r5
 8024e2c:	fba0 0102 	umull	r0, r1, r0, r2
 8024e30:	1863      	adds	r3, r4, r1
 8024e32:	4619      	mov	r1, r3
 8024e34:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8024e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024e3c:	1814      	adds	r4, r2, r0
 8024e3e:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 8024e42:	414b      	adcs	r3, r1
 8024e44:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8024e48:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8024e4c:	f507 6281 	add.w	r2, r7, #1032	; 0x408
 8024e50:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8024e54:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8024e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024e5c:	4610      	mov	r0, r2
 8024e5e:	4619      	mov	r1, r3
 8024e60:	2800      	cmp	r0, #0
 8024e62:	f171 0300 	sbcs.w	r3, r1, #0
 8024e66:	da06      	bge.n	8024e76 <arm_softmax_s8+0x17ee>
 8024e68:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8024e6c:	f04f 0300 	mov.w	r3, #0
 8024e70:	1880      	adds	r0, r0, r2
 8024e72:	eb43 0101 	adc.w	r1, r3, r1
 8024e76:	f04f 0200 	mov.w	r2, #0
 8024e7a:	f04f 0300 	mov.w	r3, #0
 8024e7e:	0fc2      	lsrs	r2, r0, #31
 8024e80:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8024e84:	17cb      	asrs	r3, r1, #31
 8024e86:	4610      	mov	r0, r2
 8024e88:	4619      	mov	r1, r3
 8024e8a:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8024e8e:	4603      	mov	r3, r0
 8024e90:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 8024e92:	f507 6283 	add.w	r2, r7, #1048	; 0x418
 8024e96:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8024e9a:	6812      	ldr	r2, [r2, #0]
 8024e9c:	681b      	ldr	r3, [r3, #0]
 8024e9e:	429a      	cmp	r2, r3
 8024ea0:	d10a      	bne.n	8024eb8 <arm_softmax_s8+0x1830>
 8024ea2:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8024ea6:	681b      	ldr	r3, [r3, #0]
 8024ea8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8024eac:	d104      	bne.n	8024eb8 <arm_softmax_s8+0x1830>
        result = NN_Q31_MAX;
 8024eae:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8024eb2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8024eb6:	6013      	str	r3, [r2, #0]
    return result;
 8024eb8:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8024ebc:	681a      	ldr	r2, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 8024ebe:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8024ec2:	681b      	ldr	r3, [r3, #0]
 8024ec4:	1a99      	subs	r1, r3, r2
 8024ec6:	f207 4204 	addw	r2, r7, #1028	; 0x404
 8024eca:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 8024ece:	681b      	ldr	r3, [r3, #0]
 8024ed0:	6013      	str	r3, [r2, #0]
 8024ed2:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8024ed6:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 8024ed8:	f507 727f 	add.w	r2, r7, #1020	; 0x3fc
 8024edc:	2300      	movs	r3, #0
 8024ede:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8024ee0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8024ee4:	f04f 0300 	mov.w	r3, #0
 8024ee8:	e9c7 23fc 	strd	r2, r3, [r7, #1008]	; 0x3f0
    if ((m1 < 0) ^ (m2 < 0))
 8024eec:	f207 4304 	addw	r3, r7, #1028	; 0x404
 8024ef0:	681b      	ldr	r3, [r3, #0]
 8024ef2:	0fdb      	lsrs	r3, r3, #31
 8024ef4:	b2da      	uxtb	r2, r3
 8024ef6:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8024efa:	681b      	ldr	r3, [r3, #0]
 8024efc:	0fdb      	lsrs	r3, r3, #31
 8024efe:	b2db      	uxtb	r3, r3
 8024f00:	4053      	eors	r3, r2
 8024f02:	b2db      	uxtb	r3, r3
 8024f04:	2b00      	cmp	r3, #0
 8024f06:	d010      	beq.n	8024f2a <arm_softmax_s8+0x18a2>
        mult = 1 - mult;
 8024f08:	f04f 0001 	mov.w	r0, #1
 8024f0c:	f04f 0100 	mov.w	r1, #0
 8024f10:	e9d7 23fc 	ldrd	r2, r3, [r7, #1008]	; 0x3f0
 8024f14:	1a84      	subs	r4, r0, r2
 8024f16:	f8c7 4108 	str.w	r4, [r7, #264]	; 0x108
 8024f1a:	eb61 0303 	sbc.w	r3, r1, r3
 8024f1e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8024f22:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	; 0x108
 8024f26:	e9c7 34fc 	strd	r3, r4, [r7, #1008]	; 0x3f0
    mult = mult + (q63_t)m1 * m2;
 8024f2a:	f207 4304 	addw	r3, r7, #1028	; 0x404
 8024f2e:	681b      	ldr	r3, [r3, #0]
 8024f30:	4618      	mov	r0, r3
 8024f32:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8024f36:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8024f3a:	681b      	ldr	r3, [r3, #0]
 8024f3c:	461a      	mov	r2, r3
 8024f3e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8024f42:	fb02 f501 	mul.w	r5, r2, r1
 8024f46:	fb00 f403 	mul.w	r4, r0, r3
 8024f4a:	442c      	add	r4, r5
 8024f4c:	fba0 0102 	umull	r0, r1, r0, r2
 8024f50:	1863      	adds	r3, r4, r1
 8024f52:	4619      	mov	r1, r3
 8024f54:	e9d7 23fc 	ldrd	r2, r3, [r7, #1008]	; 0x3f0
 8024f58:	1814      	adds	r4, r2, r0
 8024f5a:	f8c7 4100 	str.w	r4, [r7, #256]	; 0x100
 8024f5e:	414b      	adcs	r3, r1
 8024f60:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8024f64:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8024f68:	e9c7 34fc 	strd	r3, r4, [r7, #1008]	; 0x3f0
    result = (int32_t)(mult / (1ll << 31));
 8024f6c:	e9d7 23fc 	ldrd	r2, r3, [r7, #1008]	; 0x3f0
 8024f70:	4610      	mov	r0, r2
 8024f72:	4619      	mov	r1, r3
 8024f74:	2800      	cmp	r0, #0
 8024f76:	f171 0300 	sbcs.w	r3, r1, #0
 8024f7a:	da06      	bge.n	8024f8a <arm_softmax_s8+0x1902>
 8024f7c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8024f80:	f04f 0300 	mov.w	r3, #0
 8024f84:	1880      	adds	r0, r0, r2
 8024f86:	eb43 0101 	adc.w	r1, r3, r1
 8024f8a:	f04f 0200 	mov.w	r2, #0
 8024f8e:	f04f 0300 	mov.w	r3, #0
 8024f92:	0fc2      	lsrs	r2, r0, #31
 8024f94:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8024f98:	17cb      	asrs	r3, r1, #31
 8024f9a:	4610      	mov	r0, r2
 8024f9c:	4619      	mov	r1, r3
 8024f9e:	f507 727f 	add.w	r2, r7, #1020	; 0x3fc
 8024fa2:	4603      	mov	r3, r0
 8024fa4:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 8024fa6:	f207 4204 	addw	r2, r7, #1028	; 0x404
 8024faa:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8024fae:	6812      	ldr	r2, [r2, #0]
 8024fb0:	681b      	ldr	r3, [r3, #0]
 8024fb2:	429a      	cmp	r2, r3
 8024fb4:	d10a      	bne.n	8024fcc <arm_softmax_s8+0x1944>
 8024fb6:	f207 4304 	addw	r3, r7, #1028	; 0x404
 8024fba:	681b      	ldr	r3, [r3, #0]
 8024fbc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8024fc0:	d104      	bne.n	8024fcc <arm_softmax_s8+0x1944>
        result = NN_Q31_MAX;
 8024fc2:	f507 727f 	add.w	r2, r7, #1020	; 0x3fc
 8024fc6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8024fca:	6013      	str	r3, [r2, #0]
    return result;
 8024fcc:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 8024fd0:	681a      	ldr	r2, [r3, #0]
 8024fd2:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 8024fd6:	601a      	str	r2, [r3, #0]
    const int32_t thresh = ((1 << (31 - exp)) - 1);
 8024fd8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8024fdc:	f507 727a 	add.w	r2, r7, #1000	; 0x3e8
 8024fe0:	3b01      	subs	r3, #1
 8024fe2:	6013      	str	r3, [r2, #0]
    int32_t result = val << exp;
 8024fe4:	f507 7279 	add.w	r2, r7, #996	; 0x3e4
 8024fe8:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 8024fec:	681b      	ldr	r3, [r3, #0]
 8024fee:	009b      	lsls	r3, r3, #2
 8024ff0:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), NN_Q31_MAX, result);
 8024ff2:	f507 727b 	add.w	r2, r7, #1004	; 0x3ec
 8024ff6:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 8024ffa:	6812      	ldr	r2, [r2, #0]
 8024ffc:	681b      	ldr	r3, [r3, #0]
 8024ffe:	429a      	cmp	r2, r3
 8025000:	dd02      	ble.n	8025008 <arm_softmax_s8+0x1980>
 8025002:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8025006:	e000      	b.n	802500a <arm_softmax_s8+0x1982>
 8025008:	2100      	movs	r1, #0
 802500a:	f507 727b 	add.w	r2, r7, #1004	; 0x3ec
 802500e:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 8025012:	6812      	ldr	r2, [r2, #0]
 8025014:	681b      	ldr	r3, [r3, #0]
 8025016:	429a      	cmp	r2, r3
 8025018:	dd01      	ble.n	802501e <arm_softmax_s8+0x1996>
 802501a:	2200      	movs	r2, #0
 802501c:	e001      	b.n	8025022 <arm_softmax_s8+0x199a>
 802501e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8025022:	f507 7379 	add.w	r3, r7, #996	; 0x3e4
 8025026:	681b      	ldr	r3, [r3, #0]
 8025028:	4013      	ands	r3, r2
 802502a:	f507 7279 	add.w	r2, r7, #996	; 0x3e4
 802502e:	404b      	eors	r3, r1
 8025030:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), NN_Q31_MIN, result);
 8025032:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 8025036:	681b      	ldr	r3, [r3, #0]
 8025038:	425a      	negs	r2, r3
 802503a:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 802503e:	681b      	ldr	r3, [r3, #0]
 8025040:	4293      	cmp	r3, r2
 8025042:	da02      	bge.n	802504a <arm_softmax_s8+0x19c2>
 8025044:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8025048:	e000      	b.n	802504c <arm_softmax_s8+0x19c4>
 802504a:	2100      	movs	r1, #0
 802504c:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 8025050:	681b      	ldr	r3, [r3, #0]
 8025052:	425a      	negs	r2, r3
 8025054:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 8025058:	681b      	ldr	r3, [r3, #0]
 802505a:	4293      	cmp	r3, r2
 802505c:	da01      	bge.n	8025062 <arm_softmax_s8+0x19da>
 802505e:	2200      	movs	r2, #0
 8025060:	e001      	b.n	8025066 <arm_softmax_s8+0x19de>
 8025062:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8025066:	f507 7379 	add.w	r3, r7, #996	; 0x3e4
 802506a:	681b      	ldr	r3, [r3, #0]
 802506c:	4013      	ands	r3, r2
 802506e:	f507 7279 	add.w	r2, r7, #996	; 0x3e4
 8025072:	404b      	eors	r3, r1
 8025074:	6013      	str	r3, [r2, #0]
    return result;
 8025076:	f507 7379 	add.w	r3, r7, #996	; 0x3e4
 802507a:	6819      	ldr	r1, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 802507c:	f207 425c 	addw	r2, r7, #1116	; 0x45c
 8025080:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 8025084:	681b      	ldr	r3, [r3, #0]
 8025086:	440b      	add	r3, r1
 8025088:	6013      	str	r3, [r2, #0]
 802508a:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 802508e:	f207 4374 	addw	r3, r7, #1140	; 0x474
 8025092:	681b      	ldr	r3, [r3, #0]
 8025094:	6013      	str	r3, [r2, #0]
 8025096:	f507 7277 	add.w	r2, r7, #988	; 0x3dc
 802509a:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 802509e:	681b      	ldr	r3, [r3, #0]
 80250a0:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80250a2:	f507 7276 	add.w	r2, r7, #984	; 0x3d8
 80250a6:	2300      	movs	r3, #0
 80250a8:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80250aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80250ae:	f04f 0300 	mov.w	r3, #0
 80250b2:	e9c7 23f4 	strd	r2, r3, [r7, #976]	; 0x3d0
    if ((m1 < 0) ^ (m2 < 0))
 80250b6:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80250ba:	681b      	ldr	r3, [r3, #0]
 80250bc:	0fdb      	lsrs	r3, r3, #31
 80250be:	b2da      	uxtb	r2, r3
 80250c0:	f507 7377 	add.w	r3, r7, #988	; 0x3dc
 80250c4:	681b      	ldr	r3, [r3, #0]
 80250c6:	0fdb      	lsrs	r3, r3, #31
 80250c8:	b2db      	uxtb	r3, r3
 80250ca:	4053      	eors	r3, r2
 80250cc:	b2db      	uxtb	r3, r3
 80250ce:	2b00      	cmp	r3, #0
 80250d0:	d010      	beq.n	80250f4 <arm_softmax_s8+0x1a6c>
        mult = 1 - mult;
 80250d2:	f04f 0001 	mov.w	r0, #1
 80250d6:	f04f 0100 	mov.w	r1, #0
 80250da:	e9d7 23f4 	ldrd	r2, r3, [r7, #976]	; 0x3d0
 80250de:	1a84      	subs	r4, r0, r2
 80250e0:	f8c7 40f8 	str.w	r4, [r7, #248]	; 0xf8
 80250e4:	eb61 0303 	sbc.w	r3, r1, r3
 80250e8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80250ec:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 80250f0:	e9c7 34f4 	strd	r3, r4, [r7, #976]	; 0x3d0
    mult = mult + (q63_t)m1 * m2;
 80250f4:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80250f8:	681b      	ldr	r3, [r3, #0]
 80250fa:	4618      	mov	r0, r3
 80250fc:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8025100:	f507 7377 	add.w	r3, r7, #988	; 0x3dc
 8025104:	681b      	ldr	r3, [r3, #0]
 8025106:	461a      	mov	r2, r3
 8025108:	ea4f 73e2 	mov.w	r3, r2, asr #31
 802510c:	fb02 f501 	mul.w	r5, r2, r1
 8025110:	fb00 f403 	mul.w	r4, r0, r3
 8025114:	442c      	add	r4, r5
 8025116:	fba0 0102 	umull	r0, r1, r0, r2
 802511a:	1863      	adds	r3, r4, r1
 802511c:	4619      	mov	r1, r3
 802511e:	e9d7 23f4 	ldrd	r2, r3, [r7, #976]	; 0x3d0
 8025122:	1814      	adds	r4, r2, r0
 8025124:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 8025128:	414b      	adcs	r3, r1
 802512a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 802512e:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8025132:	e9c7 34f4 	strd	r3, r4, [r7, #976]	; 0x3d0
    result = (int32_t)(mult / (1ll << 31));
 8025136:	e9d7 23f4 	ldrd	r2, r3, [r7, #976]	; 0x3d0
 802513a:	4610      	mov	r0, r2
 802513c:	4619      	mov	r1, r3
 802513e:	2800      	cmp	r0, #0
 8025140:	f171 0300 	sbcs.w	r3, r1, #0
 8025144:	da06      	bge.n	8025154 <arm_softmax_s8+0x1acc>
 8025146:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 802514a:	f04f 0300 	mov.w	r3, #0
 802514e:	1880      	adds	r0, r0, r2
 8025150:	eb43 0101 	adc.w	r1, r3, r1
 8025154:	f04f 0200 	mov.w	r2, #0
 8025158:	f04f 0300 	mov.w	r3, #0
 802515c:	0fc2      	lsrs	r2, r0, #31
 802515e:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8025162:	17cb      	asrs	r3, r1, #31
 8025164:	4610      	mov	r0, r2
 8025166:	4619      	mov	r1, r3
 8025168:	f507 7276 	add.w	r2, r7, #984	; 0x3d8
 802516c:	4603      	mov	r3, r0
 802516e:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 8025170:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 8025174:	f507 7377 	add.w	r3, r7, #988	; 0x3dc
 8025178:	6812      	ldr	r2, [r2, #0]
 802517a:	681b      	ldr	r3, [r3, #0]
 802517c:	429a      	cmp	r2, r3
 802517e:	d10a      	bne.n	8025196 <arm_softmax_s8+0x1b0e>
 8025180:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8025184:	681b      	ldr	r3, [r3, #0]
 8025186:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802518a:	d104      	bne.n	8025196 <arm_softmax_s8+0x1b0e>
        result = NN_Q31_MAX;
 802518c:	f507 7276 	add.w	r2, r7, #984	; 0x3d8
 8025190:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8025194:	6013      	str	r3, [r2, #0]
    return result;
 8025196:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 802519a:	681a      	ldr	r2, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 802519c:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 80251a0:	681b      	ldr	r3, [r3, #0]
 80251a2:	1a99      	subs	r1, r3, r2
 80251a4:	f507 7273 	add.w	r2, r7, #972	; 0x3cc
 80251a8:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 80251ac:	681b      	ldr	r3, [r3, #0]
 80251ae:	6013      	str	r3, [r2, #0]
 80251b0:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 80251b4:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 80251b6:	f507 7271 	add.w	r2, r7, #964	; 0x3c4
 80251ba:	2300      	movs	r3, #0
 80251bc:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80251be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80251c2:	f04f 0300 	mov.w	r3, #0
 80251c6:	e9c7 23ee 	strd	r2, r3, [r7, #952]	; 0x3b8
    if ((m1 < 0) ^ (m2 < 0))
 80251ca:	f507 7373 	add.w	r3, r7, #972	; 0x3cc
 80251ce:	681b      	ldr	r3, [r3, #0]
 80251d0:	0fdb      	lsrs	r3, r3, #31
 80251d2:	b2da      	uxtb	r2, r3
 80251d4:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 80251d8:	681b      	ldr	r3, [r3, #0]
 80251da:	0fdb      	lsrs	r3, r3, #31
 80251dc:	b2db      	uxtb	r3, r3
 80251de:	4053      	eors	r3, r2
 80251e0:	b2db      	uxtb	r3, r3
 80251e2:	2b00      	cmp	r3, #0
 80251e4:	d010      	beq.n	8025208 <arm_softmax_s8+0x1b80>
        mult = 1 - mult;
 80251e6:	f04f 0001 	mov.w	r0, #1
 80251ea:	f04f 0100 	mov.w	r1, #0
 80251ee:	e9d7 23ee 	ldrd	r2, r3, [r7, #952]	; 0x3b8
 80251f2:	1a84      	subs	r4, r0, r2
 80251f4:	f8c7 40e8 	str.w	r4, [r7, #232]	; 0xe8
 80251f8:	eb61 0303 	sbc.w	r3, r1, r3
 80251fc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8025200:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 8025204:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
    mult = mult + (q63_t)m1 * m2;
 8025208:	f507 7373 	add.w	r3, r7, #972	; 0x3cc
 802520c:	681b      	ldr	r3, [r3, #0]
 802520e:	4618      	mov	r0, r3
 8025210:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8025214:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 8025218:	681b      	ldr	r3, [r3, #0]
 802521a:	461a      	mov	r2, r3
 802521c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8025220:	fb02 f501 	mul.w	r5, r2, r1
 8025224:	fb00 f403 	mul.w	r4, r0, r3
 8025228:	442c      	add	r4, r5
 802522a:	fba0 0102 	umull	r0, r1, r0, r2
 802522e:	1863      	adds	r3, r4, r1
 8025230:	4619      	mov	r1, r3
 8025232:	e9d7 23ee 	ldrd	r2, r3, [r7, #952]	; 0x3b8
 8025236:	1814      	adds	r4, r2, r0
 8025238:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 802523c:	414b      	adcs	r3, r1
 802523e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8025242:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8025246:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
    result = (int32_t)(mult / (1ll << 31));
 802524a:	e9d7 23ee 	ldrd	r2, r3, [r7, #952]	; 0x3b8
 802524e:	4610      	mov	r0, r2
 8025250:	4619      	mov	r1, r3
 8025252:	2800      	cmp	r0, #0
 8025254:	f171 0300 	sbcs.w	r3, r1, #0
 8025258:	da06      	bge.n	8025268 <arm_softmax_s8+0x1be0>
 802525a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 802525e:	f04f 0300 	mov.w	r3, #0
 8025262:	1880      	adds	r0, r0, r2
 8025264:	eb43 0101 	adc.w	r1, r3, r1
 8025268:	f04f 0200 	mov.w	r2, #0
 802526c:	f04f 0300 	mov.w	r3, #0
 8025270:	0fc2      	lsrs	r2, r0, #31
 8025272:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8025276:	17cb      	asrs	r3, r1, #31
 8025278:	4610      	mov	r0, r2
 802527a:	4619      	mov	r1, r3
 802527c:	f507 7271 	add.w	r2, r7, #964	; 0x3c4
 8025280:	4603      	mov	r3, r0
 8025282:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 8025284:	f507 7273 	add.w	r2, r7, #972	; 0x3cc
 8025288:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 802528c:	6812      	ldr	r2, [r2, #0]
 802528e:	681b      	ldr	r3, [r3, #0]
 8025290:	429a      	cmp	r2, r3
 8025292:	d10a      	bne.n	80252aa <arm_softmax_s8+0x1c22>
 8025294:	f507 7373 	add.w	r3, r7, #972	; 0x3cc
 8025298:	681b      	ldr	r3, [r3, #0]
 802529a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802529e:	d104      	bne.n	80252aa <arm_softmax_s8+0x1c22>
        result = NN_Q31_MAX;
 80252a0:	f507 7271 	add.w	r2, r7, #964	; 0x3c4
 80252a4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80252a8:	6013      	str	r3, [r2, #0]
    return result;
 80252aa:	f507 7371 	add.w	r3, r7, #964	; 0x3c4
 80252ae:	681a      	ldr	r2, [r3, #0]
 80252b0:	f507 736d 	add.w	r3, r7, #948	; 0x3b4
 80252b4:	601a      	str	r2, [r3, #0]
    const int32_t thresh = ((1 << (31 - exp)) - 1);
 80252b6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80252ba:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 80252be:	3b01      	subs	r3, #1
 80252c0:	6013      	str	r3, [r2, #0]
    int32_t result = val << exp;
 80252c2:	f507 726b 	add.w	r2, r7, #940	; 0x3ac
 80252c6:	f507 736d 	add.w	r3, r7, #948	; 0x3b4
 80252ca:	681b      	ldr	r3, [r3, #0]
 80252cc:	009b      	lsls	r3, r3, #2
 80252ce:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), NN_Q31_MAX, result);
 80252d0:	f507 726d 	add.w	r2, r7, #948	; 0x3b4
 80252d4:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 80252d8:	6812      	ldr	r2, [r2, #0]
 80252da:	681b      	ldr	r3, [r3, #0]
 80252dc:	429a      	cmp	r2, r3
 80252de:	dd02      	ble.n	80252e6 <arm_softmax_s8+0x1c5e>
 80252e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80252e4:	e000      	b.n	80252e8 <arm_softmax_s8+0x1c60>
 80252e6:	2100      	movs	r1, #0
 80252e8:	f507 726d 	add.w	r2, r7, #948	; 0x3b4
 80252ec:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 80252f0:	6812      	ldr	r2, [r2, #0]
 80252f2:	681b      	ldr	r3, [r3, #0]
 80252f4:	429a      	cmp	r2, r3
 80252f6:	dd01      	ble.n	80252fc <arm_softmax_s8+0x1c74>
 80252f8:	2200      	movs	r2, #0
 80252fa:	e001      	b.n	8025300 <arm_softmax_s8+0x1c78>
 80252fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8025300:	f507 736b 	add.w	r3, r7, #940	; 0x3ac
 8025304:	681b      	ldr	r3, [r3, #0]
 8025306:	4013      	ands	r3, r2
 8025308:	f507 726b 	add.w	r2, r7, #940	; 0x3ac
 802530c:	404b      	eors	r3, r1
 802530e:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), NN_Q31_MIN, result);
 8025310:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8025314:	681b      	ldr	r3, [r3, #0]
 8025316:	425a      	negs	r2, r3
 8025318:	f507 736d 	add.w	r3, r7, #948	; 0x3b4
 802531c:	681b      	ldr	r3, [r3, #0]
 802531e:	4293      	cmp	r3, r2
 8025320:	da02      	bge.n	8025328 <arm_softmax_s8+0x1ca0>
 8025322:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8025326:	e000      	b.n	802532a <arm_softmax_s8+0x1ca2>
 8025328:	2100      	movs	r1, #0
 802532a:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 802532e:	681b      	ldr	r3, [r3, #0]
 8025330:	425a      	negs	r2, r3
 8025332:	f507 736d 	add.w	r3, r7, #948	; 0x3b4
 8025336:	681b      	ldr	r3, [r3, #0]
 8025338:	4293      	cmp	r3, r2
 802533a:	da01      	bge.n	8025340 <arm_softmax_s8+0x1cb8>
 802533c:	2200      	movs	r2, #0
 802533e:	e001      	b.n	8025344 <arm_softmax_s8+0x1cbc>
 8025340:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8025344:	f507 736b 	add.w	r3, r7, #940	; 0x3ac
 8025348:	681b      	ldr	r3, [r3, #0]
 802534a:	4013      	ands	r3, r2
 802534c:	f507 726b 	add.w	r2, r7, #940	; 0x3ac
 8025350:	404b      	eors	r3, r1
 8025352:	6013      	str	r3, [r2, #0]
    return result;
 8025354:	f507 736b 	add.w	r3, r7, #940	; 0x3ac
 8025358:	6819      	ldr	r1, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 802535a:	f207 425c 	addw	r2, r7, #1116	; 0x45c
 802535e:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 8025362:	681b      	ldr	r3, [r3, #0]
 8025364:	440b      	add	r3, r1
 8025366:	6013      	str	r3, [r2, #0]
 8025368:	f507 726a 	add.w	r2, r7, #936	; 0x3a8
 802536c:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 8025370:	681b      	ldr	r3, [r3, #0]
 8025372:	6013      	str	r3, [r2, #0]
    const int32_t thresh = ((1 << (31 - exp)) - 1);
 8025374:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8025378:	f507 7269 	add.w	r2, r7, #932	; 0x3a4
 802537c:	3b01      	subs	r3, #1
 802537e:	6013      	str	r3, [r2, #0]
    int32_t result = val << exp;
 8025380:	f507 7268 	add.w	r2, r7, #928	; 0x3a0
 8025384:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8025388:	681b      	ldr	r3, [r3, #0]
 802538a:	005b      	lsls	r3, r3, #1
 802538c:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), NN_Q31_MAX, result);
 802538e:	f507 726a 	add.w	r2, r7, #936	; 0x3a8
 8025392:	f507 7369 	add.w	r3, r7, #932	; 0x3a4
 8025396:	6812      	ldr	r2, [r2, #0]
 8025398:	681b      	ldr	r3, [r3, #0]
 802539a:	429a      	cmp	r2, r3
 802539c:	dd02      	ble.n	80253a4 <arm_softmax_s8+0x1d1c>
 802539e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80253a2:	e000      	b.n	80253a6 <arm_softmax_s8+0x1d1e>
 80253a4:	2100      	movs	r1, #0
 80253a6:	f507 726a 	add.w	r2, r7, #936	; 0x3a8
 80253aa:	f507 7369 	add.w	r3, r7, #932	; 0x3a4
 80253ae:	6812      	ldr	r2, [r2, #0]
 80253b0:	681b      	ldr	r3, [r3, #0]
 80253b2:	429a      	cmp	r2, r3
 80253b4:	dd01      	ble.n	80253ba <arm_softmax_s8+0x1d32>
 80253b6:	2200      	movs	r2, #0
 80253b8:	e001      	b.n	80253be <arm_softmax_s8+0x1d36>
 80253ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80253be:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 80253c2:	681b      	ldr	r3, [r3, #0]
 80253c4:	4013      	ands	r3, r2
 80253c6:	f507 7268 	add.w	r2, r7, #928	; 0x3a0
 80253ca:	404b      	eors	r3, r1
 80253cc:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), NN_Q31_MIN, result);
 80253ce:	f507 7369 	add.w	r3, r7, #932	; 0x3a4
 80253d2:	681b      	ldr	r3, [r3, #0]
 80253d4:	425a      	negs	r2, r3
 80253d6:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 80253da:	681b      	ldr	r3, [r3, #0]
 80253dc:	4293      	cmp	r3, r2
 80253de:	da02      	bge.n	80253e6 <arm_softmax_s8+0x1d5e>
 80253e0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80253e4:	e000      	b.n	80253e8 <arm_softmax_s8+0x1d60>
 80253e6:	2100      	movs	r1, #0
 80253e8:	f507 7369 	add.w	r3, r7, #932	; 0x3a4
 80253ec:	681b      	ldr	r3, [r3, #0]
 80253ee:	425a      	negs	r2, r3
 80253f0:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 80253f4:	681b      	ldr	r3, [r3, #0]
 80253f6:	4293      	cmp	r3, r2
 80253f8:	da01      	bge.n	80253fe <arm_softmax_s8+0x1d76>
 80253fa:	2200      	movs	r2, #0
 80253fc:	e001      	b.n	8025402 <arm_softmax_s8+0x1d7a>
 80253fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8025402:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8025406:	681b      	ldr	r3, [r3, #0]
 8025408:	4013      	ands	r3, r2
 802540a:	f507 7268 	add.w	r2, r7, #928	; 0x3a0
 802540e:	404b      	eors	r3, r1
 8025410:	6013      	str	r3, [r2, #0]
    return result;
 8025412:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8025416:	681b      	ldr	r3, [r3, #0]
    return MUL_POW2(x, 1);
 8025418:	bf00      	nop
 802541a:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4

        for (col = 0; col < row_size; ++col)
 802541e:	2300      	movs	r3, #0
 8025420:	f8c7 35f4 	str.w	r3, [r7, #1524]	; 0x5f4
 8025424:	f001 b97b 	b.w	802671e <arm_softmax_s8+0x3096>
 8025428:	c3c3c3c4 	.word	0xc3c3c3c4
 802542c:	ffffffff 	.word	0xffffffff
        {
            diff = input[col] - max;
 8025430:	f8d7 25f4 	ldr.w	r2, [r7, #1524]	; 0x5f4
 8025434:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8025438:	681b      	ldr	r3, [r3, #0]
 802543a:	4413      	add	r3, r2
 802543c:	f993 3000 	ldrsb.w	r3, [r3]
 8025440:	461a      	mov	r2, r3
 8025442:	f997 35ef 	ldrsb.w	r3, [r7, #1519]	; 0x5ef
 8025446:	1ad3      	subs	r3, r2, r3
 8025448:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
            if (diff >= diff_min)
 802544c:	f8d7 25e0 	ldr.w	r2, [r7, #1504]	; 0x5e0
 8025450:	f8d7 361c 	ldr.w	r3, [r7, #1564]	; 0x61c
 8025454:	429a      	cmp	r2, r3
 8025456:	f2c1 8156 	blt.w	8026706 <arm_softmax_s8+0x307e>
            {
                const int32_t res =
                    DIV_POW2(MUL_SAT(shifted_scale, EXP_ON_NEG(MUL_SAT(diff * mask, mult))), bits_over_unit) - 128;
 802545a:	f8d7 25e0 	ldr.w	r2, [r7, #1504]	; 0x5e0
 802545e:	f8d7 35e4 	ldr.w	r3, [r7, #1508]	; 0x5e4
 8025462:	fb03 f202 	mul.w	r2, r3, r2
 8025466:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 802546a:	601a      	str	r2, [r3, #0]
 802546c:	f507 7212 	add.w	r2, r7, #584	; 0x248
 8025470:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8025474:	681b      	ldr	r3, [r3, #0]
 8025476:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8025478:	f507 7211 	add.w	r2, r7, #580	; 0x244
 802547c:	2300      	movs	r3, #0
 802547e:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8025480:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8025484:	f04f 0300 	mov.w	r3, #0
 8025488:	e9c7 238e 	strd	r2, r3, [r7, #568]	; 0x238
    if ((m1 < 0) ^ (m2 < 0))
 802548c:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 8025490:	681b      	ldr	r3, [r3, #0]
 8025492:	0fdb      	lsrs	r3, r3, #31
 8025494:	b2da      	uxtb	r2, r3
 8025496:	f507 7312 	add.w	r3, r7, #584	; 0x248
 802549a:	681b      	ldr	r3, [r3, #0]
 802549c:	0fdb      	lsrs	r3, r3, #31
 802549e:	b2db      	uxtb	r3, r3
 80254a0:	4053      	eors	r3, r2
 80254a2:	b2db      	uxtb	r3, r3
 80254a4:	2b00      	cmp	r3, #0
 80254a6:	d010      	beq.n	80254ca <arm_softmax_s8+0x1e42>
        mult = 1 - mult;
 80254a8:	f04f 0001 	mov.w	r0, #1
 80254ac:	f04f 0100 	mov.w	r1, #0
 80254b0:	e9d7 238e 	ldrd	r2, r3, [r7, #568]	; 0x238
 80254b4:	1a84      	subs	r4, r0, r2
 80254b6:	f8c7 40d8 	str.w	r4, [r7, #216]	; 0xd8
 80254ba:	eb61 0303 	sbc.w	r3, r1, r3
 80254be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80254c2:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 80254c6:	e9c7 348e 	strd	r3, r4, [r7, #568]	; 0x238
    mult = mult + (q63_t)m1 * m2;
 80254ca:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 80254ce:	681b      	ldr	r3, [r3, #0]
 80254d0:	4618      	mov	r0, r3
 80254d2:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80254d6:	f507 7312 	add.w	r3, r7, #584	; 0x248
 80254da:	681b      	ldr	r3, [r3, #0]
 80254dc:	461a      	mov	r2, r3
 80254de:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80254e2:	fb02 f501 	mul.w	r5, r2, r1
 80254e6:	fb00 f403 	mul.w	r4, r0, r3
 80254ea:	442c      	add	r4, r5
 80254ec:	fba0 0102 	umull	r0, r1, r0, r2
 80254f0:	1863      	adds	r3, r4, r1
 80254f2:	4619      	mov	r1, r3
 80254f4:	e9d7 238e 	ldrd	r2, r3, [r7, #568]	; 0x238
 80254f8:	1814      	adds	r4, r2, r0
 80254fa:	f8c7 40d0 	str.w	r4, [r7, #208]	; 0xd0
 80254fe:	414b      	adcs	r3, r1
 8025500:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8025504:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 8025508:	e9c7 348e 	strd	r3, r4, [r7, #568]	; 0x238
    result = (int32_t)(mult / (1ll << 31));
 802550c:	e9d7 238e 	ldrd	r2, r3, [r7, #568]	; 0x238
 8025510:	4610      	mov	r0, r2
 8025512:	4619      	mov	r1, r3
 8025514:	2800      	cmp	r0, #0
 8025516:	f171 0300 	sbcs.w	r3, r1, #0
 802551a:	da06      	bge.n	802552a <arm_softmax_s8+0x1ea2>
 802551c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8025520:	f04f 0300 	mov.w	r3, #0
 8025524:	1880      	adds	r0, r0, r2
 8025526:	eb43 0101 	adc.w	r1, r3, r1
 802552a:	f04f 0200 	mov.w	r2, #0
 802552e:	f04f 0300 	mov.w	r3, #0
 8025532:	0fc2      	lsrs	r2, r0, #31
 8025534:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8025538:	17cb      	asrs	r3, r1, #31
 802553a:	4610      	mov	r0, r2
 802553c:	4619      	mov	r1, r3
 802553e:	f507 7211 	add.w	r2, r7, #580	; 0x244
 8025542:	4603      	mov	r3, r0
 8025544:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 8025546:	f507 7213 	add.w	r2, r7, #588	; 0x24c
 802554a:	f507 7312 	add.w	r3, r7, #584	; 0x248
 802554e:	6812      	ldr	r2, [r2, #0]
 8025550:	681b      	ldr	r3, [r3, #0]
 8025552:	429a      	cmp	r2, r3
 8025554:	d10a      	bne.n	802556c <arm_softmax_s8+0x1ee4>
 8025556:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 802555a:	681b      	ldr	r3, [r3, #0]
 802555c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8025560:	d104      	bne.n	802556c <arm_softmax_s8+0x1ee4>
        result = NN_Q31_MAX;
 8025562:	f507 7211 	add.w	r2, r7, #580	; 0x244
 8025566:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 802556a:	6013      	str	r3, [r2, #0]
    return result;
 802556c:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8025570:	681a      	ldr	r2, [r3, #0]
 8025572:	f507 735b 	add.w	r3, r7, #876	; 0x36c
 8025576:	601a      	str	r2, [r3, #0]
    int32_t mask = 0;
 8025578:	f507 725a 	add.w	r2, r7, #872	; 0x368
 802557c:	2300      	movs	r3, #0
 802557e:	6013      	str	r3, [r2, #0]
    int32_t shift = 24;
 8025580:	f507 7259 	add.w	r2, r7, #868	; 0x364
 8025584:	2318      	movs	r3, #24
 8025586:	6013      	str	r3, [r2, #0]
    const int32_t val_mod_minus_quarter = (val & ((1 << shift) - 1)) - (1 << shift);
 8025588:	f507 7359 	add.w	r3, r7, #868	; 0x364
 802558c:	2201      	movs	r2, #1
 802558e:	681b      	ldr	r3, [r3, #0]
 8025590:	fa02 f303 	lsl.w	r3, r2, r3
 8025594:	1e5a      	subs	r2, r3, #1
 8025596:	f507 735b 	add.w	r3, r7, #876	; 0x36c
 802559a:	681b      	ldr	r3, [r3, #0]
 802559c:	ea02 0103 	and.w	r1, r2, r3
 80255a0:	f507 7359 	add.w	r3, r7, #868	; 0x364
 80255a4:	2201      	movs	r2, #1
 80255a6:	681b      	ldr	r3, [r3, #0]
 80255a8:	fa02 f303 	lsl.w	r3, r2, r3
 80255ac:	f507 7258 	add.w	r2, r7, #864	; 0x360
 80255b0:	1acb      	subs	r3, r1, r3
 80255b2:	6013      	str	r3, [r2, #0]
    const int32_t remainder = val_mod_minus_quarter - val;
 80255b4:	f507 7157 	add.w	r1, r7, #860	; 0x35c
 80255b8:	f507 7258 	add.w	r2, r7, #864	; 0x360
 80255bc:	f507 735b 	add.w	r3, r7, #876	; 0x36c
 80255c0:	6812      	ldr	r2, [r2, #0]
 80255c2:	681b      	ldr	r3, [r3, #0]
 80255c4:	1ad3      	subs	r3, r2, r3
 80255c6:	600b      	str	r3, [r1, #0]
    const int32_t x = (val_mod_minus_quarter << 5) + (1 << 28);
 80255c8:	f507 7358 	add.w	r3, r7, #864	; 0x360
 80255cc:	681b      	ldr	r3, [r3, #0]
 80255ce:	015b      	lsls	r3, r3, #5
 80255d0:	f507 7256 	add.w	r2, r7, #856	; 0x358
 80255d4:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 80255d8:	6013      	str	r3, [r2, #0]
 80255da:	f507 7255 	add.w	r2, r7, #852	; 0x354
 80255de:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80255e2:	681b      	ldr	r3, [r3, #0]
 80255e4:	6013      	str	r3, [r2, #0]
 80255e6:	f507 7254 	add.w	r2, r7, #848	; 0x350
 80255ea:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80255ee:	681b      	ldr	r3, [r3, #0]
 80255f0:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80255f2:	f507 7253 	add.w	r2, r7, #844	; 0x34c
 80255f6:	2300      	movs	r3, #0
 80255f8:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80255fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80255fe:	f04f 0300 	mov.w	r3, #0
 8025602:	e9c7 23d0 	strd	r2, r3, [r7, #832]	; 0x340
    if ((m1 < 0) ^ (m2 < 0))
 8025606:	f507 7355 	add.w	r3, r7, #852	; 0x354
 802560a:	681b      	ldr	r3, [r3, #0]
 802560c:	0fdb      	lsrs	r3, r3, #31
 802560e:	b2da      	uxtb	r2, r3
 8025610:	f507 7354 	add.w	r3, r7, #848	; 0x350
 8025614:	681b      	ldr	r3, [r3, #0]
 8025616:	0fdb      	lsrs	r3, r3, #31
 8025618:	b2db      	uxtb	r3, r3
 802561a:	4053      	eors	r3, r2
 802561c:	b2db      	uxtb	r3, r3
 802561e:	2b00      	cmp	r3, #0
 8025620:	d010      	beq.n	8025644 <arm_softmax_s8+0x1fbc>
        mult = 1 - mult;
 8025622:	f04f 0001 	mov.w	r0, #1
 8025626:	f04f 0100 	mov.w	r1, #0
 802562a:	e9d7 23d0 	ldrd	r2, r3, [r7, #832]	; 0x340
 802562e:	1a84      	subs	r4, r0, r2
 8025630:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8025634:	eb61 0303 	sbc.w	r3, r1, r3
 8025638:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 802563c:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8025640:	e9c7 34d0 	strd	r3, r4, [r7, #832]	; 0x340
    mult = mult + (q63_t)m1 * m2;
 8025644:	f507 7355 	add.w	r3, r7, #852	; 0x354
 8025648:	681b      	ldr	r3, [r3, #0]
 802564a:	4618      	mov	r0, r3
 802564c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8025650:	f507 7354 	add.w	r3, r7, #848	; 0x350
 8025654:	681b      	ldr	r3, [r3, #0]
 8025656:	461a      	mov	r2, r3
 8025658:	ea4f 73e2 	mov.w	r3, r2, asr #31
 802565c:	fb02 f501 	mul.w	r5, r2, r1
 8025660:	fb00 f403 	mul.w	r4, r0, r3
 8025664:	442c      	add	r4, r5
 8025666:	fba0 0102 	umull	r0, r1, r0, r2
 802566a:	1863      	adds	r3, r4, r1
 802566c:	4619      	mov	r1, r3
 802566e:	e9d7 23d0 	ldrd	r2, r3, [r7, #832]	; 0x340
 8025672:	1814      	adds	r4, r2, r0
 8025674:	f8c7 40c0 	str.w	r4, [r7, #192]	; 0xc0
 8025678:	414b      	adcs	r3, r1
 802567a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 802567e:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8025682:	e9c7 34d0 	strd	r3, r4, [r7, #832]	; 0x340
    result = (int32_t)(mult / (1ll << 31));
 8025686:	e9d7 23d0 	ldrd	r2, r3, [r7, #832]	; 0x340
 802568a:	4610      	mov	r0, r2
 802568c:	4619      	mov	r1, r3
 802568e:	2800      	cmp	r0, #0
 8025690:	f171 0300 	sbcs.w	r3, r1, #0
 8025694:	da06      	bge.n	80256a4 <arm_softmax_s8+0x201c>
 8025696:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 802569a:	f04f 0300 	mov.w	r3, #0
 802569e:	1880      	adds	r0, r0, r2
 80256a0:	eb43 0101 	adc.w	r1, r3, r1
 80256a4:	f04f 0200 	mov.w	r2, #0
 80256a8:	f04f 0300 	mov.w	r3, #0
 80256ac:	0fc2      	lsrs	r2, r0, #31
 80256ae:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80256b2:	17cb      	asrs	r3, r1, #31
 80256b4:	4610      	mov	r0, r2
 80256b6:	4619      	mov	r1, r3
 80256b8:	f507 7253 	add.w	r2, r7, #844	; 0x34c
 80256bc:	4603      	mov	r3, r0
 80256be:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 80256c0:	f507 7255 	add.w	r2, r7, #852	; 0x354
 80256c4:	f507 7354 	add.w	r3, r7, #848	; 0x350
 80256c8:	6812      	ldr	r2, [r2, #0]
 80256ca:	681b      	ldr	r3, [r3, #0]
 80256cc:	429a      	cmp	r2, r3
 80256ce:	d10a      	bne.n	80256e6 <arm_softmax_s8+0x205e>
 80256d0:	f507 7355 	add.w	r3, r7, #852	; 0x354
 80256d4:	681b      	ldr	r3, [r3, #0]
 80256d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80256da:	d104      	bne.n	80256e6 <arm_softmax_s8+0x205e>
        result = NN_Q31_MAX;
 80256dc:	f507 7253 	add.w	r2, r7, #844	; 0x34c
 80256e0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80256e4:	6013      	str	r3, [r2, #0]
    return result;
 80256e6:	f507 7353 	add.w	r3, r7, #844	; 0x34c
 80256ea:	681a      	ldr	r2, [r3, #0]
    const int32_t x2 = MUL_SAT(x, x);
 80256ec:	f507 734f 	add.w	r3, r7, #828	; 0x33c
 80256f0:	601a      	str	r2, [r3, #0]
 80256f2:	f507 724e 	add.w	r2, r7, #824	; 0x338
 80256f6:	f507 734f 	add.w	r3, r7, #828	; 0x33c
 80256fa:	681b      	ldr	r3, [r3, #0]
 80256fc:	6013      	str	r3, [r2, #0]
 80256fe:	f507 724d 	add.w	r2, r7, #820	; 0x334
 8025702:	f507 734f 	add.w	r3, r7, #828	; 0x33c
 8025706:	681b      	ldr	r3, [r3, #0]
 8025708:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 802570a:	f507 724c 	add.w	r2, r7, #816	; 0x330
 802570e:	2300      	movs	r3, #0
 8025710:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8025712:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8025716:	f04f 0300 	mov.w	r3, #0
 802571a:	e9c7 23ca 	strd	r2, r3, [r7, #808]	; 0x328
    if ((m1 < 0) ^ (m2 < 0))
 802571e:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8025722:	681b      	ldr	r3, [r3, #0]
 8025724:	0fdb      	lsrs	r3, r3, #31
 8025726:	b2da      	uxtb	r2, r3
 8025728:	f507 734d 	add.w	r3, r7, #820	; 0x334
 802572c:	681b      	ldr	r3, [r3, #0]
 802572e:	0fdb      	lsrs	r3, r3, #31
 8025730:	b2db      	uxtb	r3, r3
 8025732:	4053      	eors	r3, r2
 8025734:	b2db      	uxtb	r3, r3
 8025736:	2b00      	cmp	r3, #0
 8025738:	d010      	beq.n	802575c <arm_softmax_s8+0x20d4>
        mult = 1 - mult;
 802573a:	f04f 0001 	mov.w	r0, #1
 802573e:	f04f 0100 	mov.w	r1, #0
 8025742:	e9d7 23ca 	ldrd	r2, r3, [r7, #808]	; 0x328
 8025746:	1a84      	subs	r4, r0, r2
 8025748:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 802574c:	eb61 0303 	sbc.w	r3, r1, r3
 8025750:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8025754:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8025758:	e9c7 34ca 	strd	r3, r4, [r7, #808]	; 0x328
    mult = mult + (q63_t)m1 * m2;
 802575c:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8025760:	681b      	ldr	r3, [r3, #0]
 8025762:	4618      	mov	r0, r3
 8025764:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8025768:	f507 734d 	add.w	r3, r7, #820	; 0x334
 802576c:	681b      	ldr	r3, [r3, #0]
 802576e:	461a      	mov	r2, r3
 8025770:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8025774:	fb02 f501 	mul.w	r5, r2, r1
 8025778:	fb00 f403 	mul.w	r4, r0, r3
 802577c:	442c      	add	r4, r5
 802577e:	fba0 0102 	umull	r0, r1, r0, r2
 8025782:	1863      	adds	r3, r4, r1
 8025784:	4619      	mov	r1, r3
 8025786:	e9d7 23ca 	ldrd	r2, r3, [r7, #808]	; 0x328
 802578a:	1814      	adds	r4, r2, r0
 802578c:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8025790:	414b      	adcs	r3, r1
 8025792:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8025796:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 802579a:	e9c7 34ca 	strd	r3, r4, [r7, #808]	; 0x328
    result = (int32_t)(mult / (1ll << 31));
 802579e:	e9d7 23ca 	ldrd	r2, r3, [r7, #808]	; 0x328
 80257a2:	4610      	mov	r0, r2
 80257a4:	4619      	mov	r1, r3
 80257a6:	2800      	cmp	r0, #0
 80257a8:	f171 0300 	sbcs.w	r3, r1, #0
 80257ac:	da06      	bge.n	80257bc <arm_softmax_s8+0x2134>
 80257ae:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80257b2:	f04f 0300 	mov.w	r3, #0
 80257b6:	1880      	adds	r0, r0, r2
 80257b8:	eb43 0101 	adc.w	r1, r3, r1
 80257bc:	f04f 0200 	mov.w	r2, #0
 80257c0:	f04f 0300 	mov.w	r3, #0
 80257c4:	0fc2      	lsrs	r2, r0, #31
 80257c6:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80257ca:	17cb      	asrs	r3, r1, #31
 80257cc:	4610      	mov	r0, r2
 80257ce:	4619      	mov	r1, r3
 80257d0:	f507 724c 	add.w	r2, r7, #816	; 0x330
 80257d4:	4603      	mov	r3, r0
 80257d6:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 80257d8:	f507 724e 	add.w	r2, r7, #824	; 0x338
 80257dc:	f507 734d 	add.w	r3, r7, #820	; 0x334
 80257e0:	6812      	ldr	r2, [r2, #0]
 80257e2:	681b      	ldr	r3, [r3, #0]
 80257e4:	429a      	cmp	r2, r3
 80257e6:	d10a      	bne.n	80257fe <arm_softmax_s8+0x2176>
 80257e8:	f507 734e 	add.w	r3, r7, #824	; 0x338
 80257ec:	681b      	ldr	r3, [r3, #0]
 80257ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80257f2:	d104      	bne.n	80257fe <arm_softmax_s8+0x2176>
        result = NN_Q31_MAX;
 80257f4:	f507 724c 	add.w	r2, r7, #816	; 0x330
 80257f8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80257fc:	6013      	str	r3, [r2, #0]
    return result;
 80257fe:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8025802:	681a      	ldr	r2, [r3, #0]
 8025804:	f507 7349 	add.w	r3, r7, #804	; 0x324
 8025808:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 802580a:	f507 7248 	add.w	r2, r7, #800	; 0x320
 802580e:	2300      	movs	r3, #0
 8025810:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8025812:	2304      	movs	r3, #4
 8025814:	f507 7247 	add.w	r2, r7, #796	; 0x31c
 8025818:	3b01      	subs	r3, #1
 802581a:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 802581c:	f507 7146 	add.w	r1, r7, #792	; 0x318
 8025820:	f507 7249 	add.w	r2, r7, #804	; 0x324
 8025824:	f507 7347 	add.w	r3, r7, #796	; 0x31c
 8025828:	6812      	ldr	r2, [r2, #0]
 802582a:	681b      	ldr	r3, [r3, #0]
 802582c:	4013      	ands	r3, r2
 802582e:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 8025830:	f507 7248 	add.w	r2, r7, #800	; 0x320
 8025834:	f507 7349 	add.w	r3, r7, #804	; 0x324
 8025838:	681b      	ldr	r3, [r3, #0]
 802583a:	109b      	asrs	r3, r3, #2
 802583c:	6013      	str	r3, [r2, #0]
    q31_t threshold = remainder_mask >> 1;
 802583e:	f507 7245 	add.w	r2, r7, #788	; 0x314
 8025842:	f507 7347 	add.w	r3, r7, #796	; 0x31c
 8025846:	681b      	ldr	r3, [r3, #0]
 8025848:	105b      	asrs	r3, r3, #1
 802584a:	6013      	str	r3, [r2, #0]
    if (result < 0)
 802584c:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8025850:	681b      	ldr	r3, [r3, #0]
 8025852:	2b00      	cmp	r3, #0
 8025854:	da06      	bge.n	8025864 <arm_softmax_s8+0x21dc>
        threshold++;
 8025856:	f507 7245 	add.w	r2, r7, #788	; 0x314
 802585a:	f507 7345 	add.w	r3, r7, #788	; 0x314
 802585e:	681b      	ldr	r3, [r3, #0]
 8025860:	3301      	adds	r3, #1
 8025862:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 8025864:	f507 7246 	add.w	r2, r7, #792	; 0x318
 8025868:	f507 7345 	add.w	r3, r7, #788	; 0x314
 802586c:	6812      	ldr	r2, [r2, #0]
 802586e:	681b      	ldr	r3, [r3, #0]
 8025870:	429a      	cmp	r2, r3
 8025872:	dd06      	ble.n	8025882 <arm_softmax_s8+0x21fa>
        result++;
 8025874:	f507 7248 	add.w	r2, r7, #800	; 0x320
 8025878:	f507 7348 	add.w	r3, r7, #800	; 0x320
 802587c:	681b      	ldr	r3, [r3, #0]
 802587e:	3301      	adds	r3, #1
 8025880:	6013      	str	r3, [r2, #0]
    return result;
 8025882:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8025886:	681e      	ldr	r6, [r3, #0]
 8025888:	f507 7244 	add.w	r2, r7, #784	; 0x310
 802588c:	f507 734f 	add.w	r3, r7, #828	; 0x33c
 8025890:	681b      	ldr	r3, [r3, #0]
 8025892:	6013      	str	r3, [r2, #0]
 8025894:	f507 7243 	add.w	r2, r7, #780	; 0x30c
 8025898:	f507 7356 	add.w	r3, r7, #856	; 0x358
 802589c:	681b      	ldr	r3, [r3, #0]
 802589e:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80258a0:	f507 7242 	add.w	r2, r7, #776	; 0x308
 80258a4:	2300      	movs	r3, #0
 80258a6:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80258a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80258ac:	f04f 0300 	mov.w	r3, #0
 80258b0:	e9c7 23c0 	strd	r2, r3, [r7, #768]	; 0x300
    if ((m1 < 0) ^ (m2 < 0))
 80258b4:	f507 7344 	add.w	r3, r7, #784	; 0x310
 80258b8:	681b      	ldr	r3, [r3, #0]
 80258ba:	0fdb      	lsrs	r3, r3, #31
 80258bc:	b2da      	uxtb	r2, r3
 80258be:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 80258c2:	681b      	ldr	r3, [r3, #0]
 80258c4:	0fdb      	lsrs	r3, r3, #31
 80258c6:	b2db      	uxtb	r3, r3
 80258c8:	4053      	eors	r3, r2
 80258ca:	b2db      	uxtb	r3, r3
 80258cc:	2b00      	cmp	r3, #0
 80258ce:	d010      	beq.n	80258f2 <arm_softmax_s8+0x226a>
        mult = 1 - mult;
 80258d0:	f04f 0001 	mov.w	r0, #1
 80258d4:	f04f 0100 	mov.w	r1, #0
 80258d8:	e9d7 23c0 	ldrd	r2, r3, [r7, #768]	; 0x300
 80258dc:	1a84      	subs	r4, r0, r2
 80258de:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 80258e2:	eb61 0303 	sbc.w	r3, r1, r3
 80258e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80258ea:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 80258ee:	e9c7 34c0 	strd	r3, r4, [r7, #768]	; 0x300
    mult = mult + (q63_t)m1 * m2;
 80258f2:	f507 7344 	add.w	r3, r7, #784	; 0x310
 80258f6:	681b      	ldr	r3, [r3, #0]
 80258f8:	4618      	mov	r0, r3
 80258fa:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80258fe:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 8025902:	681b      	ldr	r3, [r3, #0]
 8025904:	461a      	mov	r2, r3
 8025906:	ea4f 73e2 	mov.w	r3, r2, asr #31
 802590a:	fb02 f501 	mul.w	r5, r2, r1
 802590e:	fb00 f403 	mul.w	r4, r0, r3
 8025912:	442c      	add	r4, r5
 8025914:	fba0 0102 	umull	r0, r1, r0, r2
 8025918:	1863      	adds	r3, r4, r1
 802591a:	4619      	mov	r1, r3
 802591c:	e9d7 23c0 	ldrd	r2, r3, [r7, #768]	; 0x300
 8025920:	1814      	adds	r4, r2, r0
 8025922:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8025926:	414b      	adcs	r3, r1
 8025928:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 802592c:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 8025930:	e9c7 34c0 	strd	r3, r4, [r7, #768]	; 0x300
    result = (int32_t)(mult / (1ll << 31));
 8025934:	e9d7 23c0 	ldrd	r2, r3, [r7, #768]	; 0x300
 8025938:	4610      	mov	r0, r2
 802593a:	4619      	mov	r1, r3
 802593c:	2800      	cmp	r0, #0
 802593e:	f171 0300 	sbcs.w	r3, r1, #0
 8025942:	da06      	bge.n	8025952 <arm_softmax_s8+0x22ca>
 8025944:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8025948:	f04f 0300 	mov.w	r3, #0
 802594c:	1880      	adds	r0, r0, r2
 802594e:	eb43 0101 	adc.w	r1, r3, r1
 8025952:	f04f 0200 	mov.w	r2, #0
 8025956:	f04f 0300 	mov.w	r3, #0
 802595a:	0fc2      	lsrs	r2, r0, #31
 802595c:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8025960:	17cb      	asrs	r3, r1, #31
 8025962:	4610      	mov	r0, r2
 8025964:	4619      	mov	r1, r3
 8025966:	f507 7242 	add.w	r2, r7, #776	; 0x308
 802596a:	4603      	mov	r3, r0
 802596c:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 802596e:	f507 7244 	add.w	r2, r7, #784	; 0x310
 8025972:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 8025976:	6812      	ldr	r2, [r2, #0]
 8025978:	681b      	ldr	r3, [r3, #0]
 802597a:	429a      	cmp	r2, r3
 802597c:	d10a      	bne.n	8025994 <arm_softmax_s8+0x230c>
 802597e:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8025982:	681b      	ldr	r3, [r3, #0]
 8025984:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8025988:	d104      	bne.n	8025994 <arm_softmax_s8+0x230c>
        result = NN_Q31_MAX;
 802598a:	f507 7242 	add.w	r2, r7, #776	; 0x308
 802598e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8025992:	6013      	str	r3, [r2, #0]
    return result;
 8025994:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8025998:	681b      	ldr	r3, [r3, #0]
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 802599a:	18f2      	adds	r2, r6, r3
 802599c:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 80259a0:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 80259a2:	f507 723e 	add.w	r2, r7, #760	; 0x2f8
 80259a6:	2300      	movs	r3, #0
 80259a8:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80259aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80259ae:	f04f 0300 	mov.w	r3, #0
 80259b2:	e9c7 23bc 	strd	r2, r3, [r7, #752]	; 0x2f0
    if ((m1 < 0) ^ (m2 < 0))
 80259b6:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 80259ba:	681b      	ldr	r3, [r3, #0]
 80259bc:	0fdb      	lsrs	r3, r3, #31
 80259be:	b2da      	uxtb	r2, r3
 80259c0:	2300      	movs	r3, #0
 80259c2:	4053      	eors	r3, r2
 80259c4:	b2db      	uxtb	r3, r3
 80259c6:	2b00      	cmp	r3, #0
 80259c8:	d010      	beq.n	80259ec <arm_softmax_s8+0x2364>
        mult = 1 - mult;
 80259ca:	f04f 0001 	mov.w	r0, #1
 80259ce:	f04f 0100 	mov.w	r1, #0
 80259d2:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	; 0x2f0
 80259d6:	1a84      	subs	r4, r0, r2
 80259d8:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 80259dc:	eb61 0303 	sbc.w	r3, r1, r3
 80259e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80259e4:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 80259e8:	e9c7 34bc 	strd	r3, r4, [r7, #752]	; 0x2f0
    mult = mult + (q63_t)m1 * m2;
 80259ec:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 80259f0:	681b      	ldr	r3, [r3, #0]
 80259f2:	4618      	mov	r0, r3
 80259f4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80259f8:	a3de      	add	r3, pc, #888	; (adr r3, 8025d74 <arm_softmax_s8+0x26ec>)
 80259fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80259fe:	fb02 f501 	mul.w	r5, r2, r1
 8025a02:	fb00 f403 	mul.w	r4, r0, r3
 8025a06:	442c      	add	r4, r5
 8025a08:	fba0 0102 	umull	r0, r1, r0, r2
 8025a0c:	1863      	adds	r3, r4, r1
 8025a0e:	4619      	mov	r1, r3
 8025a10:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	; 0x2f0
 8025a14:	1814      	adds	r4, r2, r0
 8025a16:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8025a1a:	414b      	adcs	r3, r1
 8025a1c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8025a20:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 8025a24:	e9c7 34bc 	strd	r3, r4, [r7, #752]	; 0x2f0
    result = (int32_t)(mult / (1ll << 31));
 8025a28:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	; 0x2f0
 8025a2c:	4610      	mov	r0, r2
 8025a2e:	4619      	mov	r1, r3
 8025a30:	2800      	cmp	r0, #0
 8025a32:	f171 0300 	sbcs.w	r3, r1, #0
 8025a36:	da06      	bge.n	8025a46 <arm_softmax_s8+0x23be>
 8025a38:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8025a3c:	f04f 0300 	mov.w	r3, #0
 8025a40:	1880      	adds	r0, r0, r2
 8025a42:	eb43 0101 	adc.w	r1, r3, r1
 8025a46:	f04f 0200 	mov.w	r2, #0
 8025a4a:	f04f 0300 	mov.w	r3, #0
 8025a4e:	0fc2      	lsrs	r2, r0, #31
 8025a50:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8025a54:	17cb      	asrs	r3, r1, #31
 8025a56:	4610      	mov	r0, r2
 8025a58:	4619      	mov	r1, r3
 8025a5a:	f507 723e 	add.w	r2, r7, #760	; 0x2f8
 8025a5e:	4603      	mov	r3, r0
 8025a60:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 8025a62:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 8025a66:	681a      	ldr	r2, [r3, #0]
 8025a68:	4bbf      	ldr	r3, [pc, #764]	; (8025d68 <arm_softmax_s8+0x26e0>)
 8025a6a:	429a      	cmp	r2, r3
 8025a6c:	d10a      	bne.n	8025a84 <arm_softmax_s8+0x23fc>
 8025a6e:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 8025a72:	681b      	ldr	r3, [r3, #0]
 8025a74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8025a78:	d104      	bne.n	8025a84 <arm_softmax_s8+0x23fc>
        result = NN_Q31_MAX;
 8025a7a:	f507 723e 	add.w	r2, r7, #760	; 0x2f8
 8025a7e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8025a82:	6013      	str	r3, [r2, #0]
    return result;
 8025a84:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8025a88:	681a      	ldr	r2, [r3, #0]
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 8025a8a:	f507 734f 	add.w	r3, r7, #828	; 0x33c
 8025a8e:	681b      	ldr	r3, [r3, #0]
 8025a90:	441a      	add	r2, r3
 8025a92:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 8025a96:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8025a98:	f507 723a 	add.w	r2, r7, #744	; 0x2e8
 8025a9c:	2300      	movs	r3, #0
 8025a9e:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8025aa0:	2302      	movs	r3, #2
 8025aa2:	f507 7239 	add.w	r2, r7, #740	; 0x2e4
 8025aa6:	3b01      	subs	r3, #1
 8025aa8:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 8025aaa:	f507 7138 	add.w	r1, r7, #736	; 0x2e0
 8025aae:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
 8025ab2:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 8025ab6:	6812      	ldr	r2, [r2, #0]
 8025ab8:	681b      	ldr	r3, [r3, #0]
 8025aba:	4013      	ands	r3, r2
 8025abc:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 8025abe:	f507 723a 	add.w	r2, r7, #744	; 0x2e8
 8025ac2:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 8025ac6:	681b      	ldr	r3, [r3, #0]
 8025ac8:	105b      	asrs	r3, r3, #1
 8025aca:	6013      	str	r3, [r2, #0]
    q31_t threshold = remainder_mask >> 1;
 8025acc:	f507 7237 	add.w	r2, r7, #732	; 0x2dc
 8025ad0:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 8025ad4:	681b      	ldr	r3, [r3, #0]
 8025ad6:	105b      	asrs	r3, r3, #1
 8025ad8:	6013      	str	r3, [r2, #0]
    if (result < 0)
 8025ada:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 8025ade:	681b      	ldr	r3, [r3, #0]
 8025ae0:	2b00      	cmp	r3, #0
 8025ae2:	da06      	bge.n	8025af2 <arm_softmax_s8+0x246a>
        threshold++;
 8025ae4:	f507 7237 	add.w	r2, r7, #732	; 0x2dc
 8025ae8:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 8025aec:	681b      	ldr	r3, [r3, #0]
 8025aee:	3301      	adds	r3, #1
 8025af0:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 8025af2:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 8025af6:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 8025afa:	6812      	ldr	r2, [r2, #0]
 8025afc:	681b      	ldr	r3, [r3, #0]
 8025afe:	429a      	cmp	r2, r3
 8025b00:	dd06      	ble.n	8025b10 <arm_softmax_s8+0x2488>
        result++;
 8025b02:	f507 723a 	add.w	r2, r7, #744	; 0x2e8
 8025b06:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 8025b0a:	681b      	ldr	r3, [r3, #0]
 8025b0c:	3301      	adds	r3, #1
 8025b0e:	6013      	str	r3, [r2, #0]
    return result;
 8025b10:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 8025b14:	681a      	ldr	r2, [r3, #0]
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 8025b16:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8025b1a:	681b      	ldr	r3, [r3, #0]
 8025b1c:	441a      	add	r2, r3
 8025b1e:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8025b22:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8025b24:	f507 7235 	add.w	r2, r7, #724	; 0x2d4
 8025b28:	2300      	movs	r3, #0
 8025b2a:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8025b2c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8025b30:	f04f 0300 	mov.w	r3, #0
 8025b34:	e9c7 23b2 	strd	r2, r3, [r7, #712]	; 0x2c8
    if ((m1 < 0) ^ (m2 < 0))
 8025b38:	2200      	movs	r2, #0
 8025b3a:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8025b3e:	681b      	ldr	r3, [r3, #0]
 8025b40:	0fdb      	lsrs	r3, r3, #31
 8025b42:	b2db      	uxtb	r3, r3
 8025b44:	4053      	eors	r3, r2
 8025b46:	b2db      	uxtb	r3, r3
 8025b48:	2b00      	cmp	r3, #0
 8025b4a:	d010      	beq.n	8025b6e <arm_softmax_s8+0x24e6>
        mult = 1 - mult;
 8025b4c:	f04f 0001 	mov.w	r0, #1
 8025b50:	f04f 0100 	mov.w	r1, #0
 8025b54:	e9d7 23b2 	ldrd	r2, r3, [r7, #712]	; 0x2c8
 8025b58:	1a84      	subs	r4, r0, r2
 8025b5a:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8025b5e:	eb61 0303 	sbc.w	r3, r1, r3
 8025b62:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8025b66:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8025b6a:	e9c7 34b2 	strd	r3, r4, [r7, #712]	; 0x2c8
    mult = mult + (q63_t)m1 * m2;
 8025b6e:	a57a      	add	r5, pc, #488	; (adr r5, 8025d58 <arm_softmax_s8+0x26d0>)
 8025b70:	e9d5 4500 	ldrd	r4, r5, [r5]
 8025b74:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8025b78:	681b      	ldr	r3, [r3, #0]
 8025b7a:	461a      	mov	r2, r3
 8025b7c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8025b80:	fb02 f005 	mul.w	r0, r2, r5
 8025b84:	fb04 f103 	mul.w	r1, r4, r3
 8025b88:	1846      	adds	r6, r0, r1
 8025b8a:	fba4 0102 	umull	r0, r1, r4, r2
 8025b8e:	1873      	adds	r3, r6, r1
 8025b90:	4619      	mov	r1, r3
 8025b92:	e9d7 23b2 	ldrd	r2, r3, [r7, #712]	; 0x2c8
 8025b96:	1814      	adds	r4, r2, r0
 8025b98:	f8c7 4080 	str.w	r4, [r7, #128]	; 0x80
 8025b9c:	414b      	adcs	r3, r1
 8025b9e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8025ba2:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8025ba6:	e9c7 34b2 	strd	r3, r4, [r7, #712]	; 0x2c8
    result = (int32_t)(mult / (1ll << 31));
 8025baa:	e9d7 23b2 	ldrd	r2, r3, [r7, #712]	; 0x2c8
 8025bae:	4610      	mov	r0, r2
 8025bb0:	4619      	mov	r1, r3
 8025bb2:	2800      	cmp	r0, #0
 8025bb4:	f171 0300 	sbcs.w	r3, r1, #0
 8025bb8:	da06      	bge.n	8025bc8 <arm_softmax_s8+0x2540>
 8025bba:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8025bbe:	f04f 0300 	mov.w	r3, #0
 8025bc2:	1880      	adds	r0, r0, r2
 8025bc4:	eb43 0101 	adc.w	r1, r3, r1
 8025bc8:	f04f 0200 	mov.w	r2, #0
 8025bcc:	f04f 0300 	mov.w	r3, #0
 8025bd0:	0fc2      	lsrs	r2, r0, #31
 8025bd2:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8025bd6:	17cb      	asrs	r3, r1, #31
 8025bd8:	4610      	mov	r0, r2
 8025bda:	4619      	mov	r1, r3
 8025bdc:	f507 7235 	add.w	r2, r7, #724	; 0x2d4
 8025be0:	4603      	mov	r3, r0
 8025be2:	6013      	str	r3, [r2, #0]
    return result;
 8025be4:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 8025be8:	6819      	ldr	r1, [r3, #0]
    int32_t result = 1895147668 +
 8025bea:	f507 7231 	add.w	r2, r7, #708	; 0x2c4
 8025bee:	4b5f      	ldr	r3, [pc, #380]	; (8025d6c <arm_softmax_s8+0x26e4>)
 8025bf0:	440b      	add	r3, r1
 8025bf2:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(1672461947)
 8025bf4:	f507 7359 	add.w	r3, r7, #868	; 0x364
 8025bf8:	6819      	ldr	r1, [r3, #0]
 8025bfa:	f507 7259 	add.w	r2, r7, #868	; 0x364
 8025bfe:	1c4b      	adds	r3, r1, #1
 8025c00:	6013      	str	r3, [r2, #0]
 8025c02:	2301      	movs	r3, #1
 8025c04:	fa03 f201 	lsl.w	r2, r3, r1
 8025c08:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 8025c0c:	681b      	ldr	r3, [r3, #0]
 8025c0e:	4013      	ands	r3, r2
 8025c10:	2b00      	cmp	r3, #0
 8025c12:	d002      	beq.n	8025c1a <arm_softmax_s8+0x2592>
 8025c14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8025c18:	e000      	b.n	8025c1c <arm_softmax_s8+0x2594>
 8025c1a:	2200      	movs	r2, #0
 8025c1c:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8025c20:	601a      	str	r2, [r3, #0]
 8025c22:	f507 7230 	add.w	r2, r7, #704	; 0x2c0
 8025c26:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 8025c2a:	681b      	ldr	r3, [r3, #0]
 8025c2c:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8025c2e:	f507 722f 	add.w	r2, r7, #700	; 0x2bc
 8025c32:	2300      	movs	r3, #0
 8025c34:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8025c36:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8025c3a:	f04f 0300 	mov.w	r3, #0
 8025c3e:	e9c7 23ac 	strd	r2, r3, [r7, #688]	; 0x2b0
    if ((m1 < 0) ^ (m2 < 0))
 8025c42:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8025c46:	681b      	ldr	r3, [r3, #0]
 8025c48:	0fdb      	lsrs	r3, r3, #31
 8025c4a:	b2da      	uxtb	r2, r3
 8025c4c:	2300      	movs	r3, #0
 8025c4e:	4053      	eors	r3, r2
 8025c50:	b2db      	uxtb	r3, r3
 8025c52:	2b00      	cmp	r3, #0
 8025c54:	d00e      	beq.n	8025c74 <arm_softmax_s8+0x25ec>
        mult = 1 - mult;
 8025c56:	f04f 0001 	mov.w	r0, #1
 8025c5a:	f04f 0100 	mov.w	r1, #0
 8025c5e:	e9d7 23ac 	ldrd	r2, r3, [r7, #688]	; 0x2b0
 8025c62:	1a84      	subs	r4, r0, r2
 8025c64:	67bc      	str	r4, [r7, #120]	; 0x78
 8025c66:	eb61 0303 	sbc.w	r3, r1, r3
 8025c6a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8025c6c:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8025c70:	e9c7 34ac 	strd	r3, r4, [r7, #688]	; 0x2b0
    mult = mult + (q63_t)m1 * m2;
 8025c74:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8025c78:	681b      	ldr	r3, [r3, #0]
 8025c7a:	4618      	mov	r0, r3
 8025c7c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8025c80:	a337      	add	r3, pc, #220	; (adr r3, 8025d60 <arm_softmax_s8+0x26d8>)
 8025c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025c86:	fb02 f501 	mul.w	r5, r2, r1
 8025c8a:	fb00 f403 	mul.w	r4, r0, r3
 8025c8e:	442c      	add	r4, r5
 8025c90:	fba0 0102 	umull	r0, r1, r0, r2
 8025c94:	1863      	adds	r3, r4, r1
 8025c96:	4619      	mov	r1, r3
 8025c98:	e9d7 23ac 	ldrd	r2, r3, [r7, #688]	; 0x2b0
 8025c9c:	1814      	adds	r4, r2, r0
 8025c9e:	673c      	str	r4, [r7, #112]	; 0x70
 8025ca0:	414b      	adcs	r3, r1
 8025ca2:	677b      	str	r3, [r7, #116]	; 0x74
 8025ca4:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8025ca8:	e9c7 34ac 	strd	r3, r4, [r7, #688]	; 0x2b0
    result = (int32_t)(mult / (1ll << 31));
 8025cac:	e9d7 23ac 	ldrd	r2, r3, [r7, #688]	; 0x2b0
 8025cb0:	4610      	mov	r0, r2
 8025cb2:	4619      	mov	r1, r3
 8025cb4:	2800      	cmp	r0, #0
 8025cb6:	f171 0300 	sbcs.w	r3, r1, #0
 8025cba:	da06      	bge.n	8025cca <arm_softmax_s8+0x2642>
 8025cbc:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8025cc0:	f04f 0300 	mov.w	r3, #0
 8025cc4:	1880      	adds	r0, r0, r2
 8025cc6:	eb43 0101 	adc.w	r1, r3, r1
 8025cca:	f04f 0200 	mov.w	r2, #0
 8025cce:	f04f 0300 	mov.w	r3, #0
 8025cd2:	0fc2      	lsrs	r2, r0, #31
 8025cd4:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8025cd8:	17cb      	asrs	r3, r1, #31
 8025cda:	4610      	mov	r0, r2
 8025cdc:	4619      	mov	r1, r3
 8025cde:	f507 722f 	add.w	r2, r7, #700	; 0x2bc
 8025ce2:	4603      	mov	r3, r0
 8025ce4:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 8025ce6:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8025cea:	681a      	ldr	r2, [r3, #0]
 8025cec:	4b20      	ldr	r3, [pc, #128]	; (8025d70 <arm_softmax_s8+0x26e8>)
 8025cee:	429a      	cmp	r2, r3
 8025cf0:	d10a      	bne.n	8025d08 <arm_softmax_s8+0x2680>
 8025cf2:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8025cf6:	681b      	ldr	r3, [r3, #0]
 8025cf8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8025cfc:	d104      	bne.n	8025d08 <arm_softmax_s8+0x2680>
        result = NN_Q31_MAX;
 8025cfe:	f507 722f 	add.w	r2, r7, #700	; 0x2bc
 8025d02:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8025d06:	6013      	str	r3, [r2, #0]
    return result;
 8025d08:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 8025d0c:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(1672461947)
 8025d0e:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8025d12:	681b      	ldr	r3, [r3, #0]
 8025d14:	ea02 0103 	and.w	r1, r2, r3
 8025d18:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8025d1c:	681b      	ldr	r3, [r3, #0]
 8025d1e:	43da      	mvns	r2, r3
 8025d20:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 8025d24:	681b      	ldr	r3, [r3, #0]
 8025d26:	4013      	ands	r3, r2
 8025d28:	f507 7231 	add.w	r2, r7, #708	; 0x2c4
 8025d2c:	404b      	eors	r3, r1
 8025d2e:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(1302514674)
 8025d30:	f507 7359 	add.w	r3, r7, #868	; 0x364
 8025d34:	6819      	ldr	r1, [r3, #0]
 8025d36:	f507 7259 	add.w	r2, r7, #868	; 0x364
 8025d3a:	1c4b      	adds	r3, r1, #1
 8025d3c:	6013      	str	r3, [r2, #0]
 8025d3e:	2301      	movs	r3, #1
 8025d40:	fa03 f201 	lsl.w	r2, r3, r1
 8025d44:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 8025d48:	681b      	ldr	r3, [r3, #0]
 8025d4a:	4013      	ands	r3, r2
 8025d4c:	2b00      	cmp	r3, #0
 8025d4e:	d015      	beq.n	8025d7c <arm_softmax_s8+0x26f4>
 8025d50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8025d54:	e013      	b.n	8025d7e <arm_softmax_s8+0x26f6>
 8025d56:	bf00      	nop
 8025d58:	70f5a894 	.word	0x70f5a894
 8025d5c:	00000000 	.word	0x00000000
 8025d60:	63afbe7b 	.word	0x63afbe7b
 8025d64:	00000000 	.word	0x00000000
 8025d68:	2aaaaaab 	.word	0x2aaaaaab
 8025d6c:	70f5a894 	.word	0x70f5a894
 8025d70:	63afbe7b 	.word	0x63afbe7b
 8025d74:	2aaaaaab 	.word	0x2aaaaaab
 8025d78:	00000000 	.word	0x00000000
 8025d7c:	2200      	movs	r2, #0
 8025d7e:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8025d82:	601a      	str	r2, [r3, #0]
 8025d84:	f507 722b 	add.w	r2, r7, #684	; 0x2ac
 8025d88:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 8025d8c:	681b      	ldr	r3, [r3, #0]
 8025d8e:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8025d90:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8025d94:	2300      	movs	r3, #0
 8025d96:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8025d98:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8025d9c:	f04f 0300 	mov.w	r3, #0
 8025da0:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
    if ((m1 < 0) ^ (m2 < 0))
 8025da4:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 8025da8:	681b      	ldr	r3, [r3, #0]
 8025daa:	0fdb      	lsrs	r3, r3, #31
 8025dac:	b2da      	uxtb	r2, r3
 8025dae:	2300      	movs	r3, #0
 8025db0:	4053      	eors	r3, r2
 8025db2:	b2db      	uxtb	r3, r3
 8025db4:	2b00      	cmp	r3, #0
 8025db6:	d00e      	beq.n	8025dd6 <arm_softmax_s8+0x274e>
        mult = 1 - mult;
 8025db8:	f04f 0001 	mov.w	r0, #1
 8025dbc:	f04f 0100 	mov.w	r1, #0
 8025dc0:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 8025dc4:	1a84      	subs	r4, r0, r2
 8025dc6:	66bc      	str	r4, [r7, #104]	; 0x68
 8025dc8:	eb61 0303 	sbc.w	r3, r1, r3
 8025dcc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8025dce:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8025dd2:	e9c7 34a8 	strd	r3, r4, [r7, #672]	; 0x2a0
    mult = mult + (q63_t)m1 * m2;
 8025dd6:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 8025dda:	681b      	ldr	r3, [r3, #0]
 8025ddc:	4618      	mov	r0, r3
 8025dde:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8025de2:	a3da      	add	r3, pc, #872	; (adr r3, 802614c <arm_softmax_s8+0x2ac4>)
 8025de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025de8:	fb02 f501 	mul.w	r5, r2, r1
 8025dec:	fb00 f403 	mul.w	r4, r0, r3
 8025df0:	442c      	add	r4, r5
 8025df2:	fba0 0102 	umull	r0, r1, r0, r2
 8025df6:	1863      	adds	r3, r4, r1
 8025df8:	4619      	mov	r1, r3
 8025dfa:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 8025dfe:	1814      	adds	r4, r2, r0
 8025e00:	663c      	str	r4, [r7, #96]	; 0x60
 8025e02:	414b      	adcs	r3, r1
 8025e04:	667b      	str	r3, [r7, #100]	; 0x64
 8025e06:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8025e0a:	e9c7 34a8 	strd	r3, r4, [r7, #672]	; 0x2a0
    result = (int32_t)(mult / (1ll << 31));
 8025e0e:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 8025e12:	4610      	mov	r0, r2
 8025e14:	4619      	mov	r1, r3
 8025e16:	2800      	cmp	r0, #0
 8025e18:	f171 0300 	sbcs.w	r3, r1, #0
 8025e1c:	da06      	bge.n	8025e2c <arm_softmax_s8+0x27a4>
 8025e1e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8025e22:	f04f 0300 	mov.w	r3, #0
 8025e26:	1880      	adds	r0, r0, r2
 8025e28:	eb43 0101 	adc.w	r1, r3, r1
 8025e2c:	f04f 0200 	mov.w	r2, #0
 8025e30:	f04f 0300 	mov.w	r3, #0
 8025e34:	0fc2      	lsrs	r2, r0, #31
 8025e36:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8025e3a:	17cb      	asrs	r3, r1, #31
 8025e3c:	4610      	mov	r0, r2
 8025e3e:	4619      	mov	r1, r3
 8025e40:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8025e44:	4603      	mov	r3, r0
 8025e46:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 8025e48:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 8025e4c:	681a      	ldr	r2, [r3, #0]
 8025e4e:	4bbc      	ldr	r3, [pc, #752]	; (8026140 <arm_softmax_s8+0x2ab8>)
 8025e50:	429a      	cmp	r2, r3
 8025e52:	d10a      	bne.n	8025e6a <arm_softmax_s8+0x27e2>
 8025e54:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 8025e58:	681b      	ldr	r3, [r3, #0]
 8025e5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8025e5e:	d104      	bne.n	8025e6a <arm_softmax_s8+0x27e2>
        result = NN_Q31_MAX;
 8025e60:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8025e64:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8025e68:	6013      	str	r3, [r2, #0]
    return result;
 8025e6a:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025e6e:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(1302514674)
 8025e70:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8025e74:	681b      	ldr	r3, [r3, #0]
 8025e76:	ea02 0103 	and.w	r1, r2, r3
 8025e7a:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8025e7e:	681b      	ldr	r3, [r3, #0]
 8025e80:	43da      	mvns	r2, r3
 8025e82:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 8025e86:	681b      	ldr	r3, [r3, #0]
 8025e88:	4013      	ands	r3, r2
 8025e8a:	f507 7231 	add.w	r2, r7, #708	; 0x2c4
 8025e8e:	404b      	eors	r3, r1
 8025e90:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(790015084)
 8025e92:	f507 7359 	add.w	r3, r7, #868	; 0x364
 8025e96:	6819      	ldr	r1, [r3, #0]
 8025e98:	f507 7259 	add.w	r2, r7, #868	; 0x364
 8025e9c:	1c4b      	adds	r3, r1, #1
 8025e9e:	6013      	str	r3, [r2, #0]
 8025ea0:	2301      	movs	r3, #1
 8025ea2:	fa03 f201 	lsl.w	r2, r3, r1
 8025ea6:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 8025eaa:	681b      	ldr	r3, [r3, #0]
 8025eac:	4013      	ands	r3, r2
 8025eae:	2b00      	cmp	r3, #0
 8025eb0:	d002      	beq.n	8025eb8 <arm_softmax_s8+0x2830>
 8025eb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8025eb6:	e000      	b.n	8025eba <arm_softmax_s8+0x2832>
 8025eb8:	2200      	movs	r2, #0
 8025eba:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8025ebe:	601a      	str	r2, [r3, #0]
 8025ec0:	f507 7227 	add.w	r2, r7, #668	; 0x29c
 8025ec4:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 8025ec8:	681b      	ldr	r3, [r3, #0]
 8025eca:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8025ecc:	f507 7226 	add.w	r2, r7, #664	; 0x298
 8025ed0:	2300      	movs	r3, #0
 8025ed2:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8025ed4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8025ed8:	f04f 0300 	mov.w	r3, #0
 8025edc:	e9c7 23a4 	strd	r2, r3, [r7, #656]	; 0x290
    if ((m1 < 0) ^ (m2 < 0))
 8025ee0:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 8025ee4:	681b      	ldr	r3, [r3, #0]
 8025ee6:	0fdb      	lsrs	r3, r3, #31
 8025ee8:	b2da      	uxtb	r2, r3
 8025eea:	2300      	movs	r3, #0
 8025eec:	4053      	eors	r3, r2
 8025eee:	b2db      	uxtb	r3, r3
 8025ef0:	2b00      	cmp	r3, #0
 8025ef2:	d00e      	beq.n	8025f12 <arm_softmax_s8+0x288a>
        mult = 1 - mult;
 8025ef4:	f04f 0001 	mov.w	r0, #1
 8025ef8:	f04f 0100 	mov.w	r1, #0
 8025efc:	e9d7 23a4 	ldrd	r2, r3, [r7, #656]	; 0x290
 8025f00:	1a84      	subs	r4, r0, r2
 8025f02:	65bc      	str	r4, [r7, #88]	; 0x58
 8025f04:	eb61 0303 	sbc.w	r3, r1, r3
 8025f08:	65fb      	str	r3, [r7, #92]	; 0x5c
 8025f0a:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8025f0e:	e9c7 34a4 	strd	r3, r4, [r7, #656]	; 0x290
    mult = mult + (q63_t)m1 * m2;
 8025f12:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 8025f16:	681b      	ldr	r3, [r3, #0]
 8025f18:	4618      	mov	r0, r3
 8025f1a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8025f1e:	a384      	add	r3, pc, #528	; (adr r3, 8026130 <arm_softmax_s8+0x2aa8>)
 8025f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025f24:	fb02 f501 	mul.w	r5, r2, r1
 8025f28:	fb00 f403 	mul.w	r4, r0, r3
 8025f2c:	442c      	add	r4, r5
 8025f2e:	fba0 0102 	umull	r0, r1, r0, r2
 8025f32:	1863      	adds	r3, r4, r1
 8025f34:	4619      	mov	r1, r3
 8025f36:	e9d7 23a4 	ldrd	r2, r3, [r7, #656]	; 0x290
 8025f3a:	1814      	adds	r4, r2, r0
 8025f3c:	653c      	str	r4, [r7, #80]	; 0x50
 8025f3e:	414b      	adcs	r3, r1
 8025f40:	657b      	str	r3, [r7, #84]	; 0x54
 8025f42:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8025f46:	e9c7 34a4 	strd	r3, r4, [r7, #656]	; 0x290
    result = (int32_t)(mult / (1ll << 31));
 8025f4a:	e9d7 23a4 	ldrd	r2, r3, [r7, #656]	; 0x290
 8025f4e:	4610      	mov	r0, r2
 8025f50:	4619      	mov	r1, r3
 8025f52:	2800      	cmp	r0, #0
 8025f54:	f171 0300 	sbcs.w	r3, r1, #0
 8025f58:	da06      	bge.n	8025f68 <arm_softmax_s8+0x28e0>
 8025f5a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8025f5e:	f04f 0300 	mov.w	r3, #0
 8025f62:	1880      	adds	r0, r0, r2
 8025f64:	eb43 0101 	adc.w	r1, r3, r1
 8025f68:	f04f 0200 	mov.w	r2, #0
 8025f6c:	f04f 0300 	mov.w	r3, #0
 8025f70:	0fc2      	lsrs	r2, r0, #31
 8025f72:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8025f76:	17cb      	asrs	r3, r1, #31
 8025f78:	4610      	mov	r0, r2
 8025f7a:	4619      	mov	r1, r3
 8025f7c:	f507 7226 	add.w	r2, r7, #664	; 0x298
 8025f80:	4603      	mov	r3, r0
 8025f82:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 8025f84:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 8025f88:	681a      	ldr	r2, [r3, #0]
 8025f8a:	4b6e      	ldr	r3, [pc, #440]	; (8026144 <arm_softmax_s8+0x2abc>)
 8025f8c:	429a      	cmp	r2, r3
 8025f8e:	d10a      	bne.n	8025fa6 <arm_softmax_s8+0x291e>
 8025f90:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 8025f94:	681b      	ldr	r3, [r3, #0]
 8025f96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8025f9a:	d104      	bne.n	8025fa6 <arm_softmax_s8+0x291e>
        result = NN_Q31_MAX;
 8025f9c:	f507 7226 	add.w	r2, r7, #664	; 0x298
 8025fa0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8025fa4:	6013      	str	r3, [r2, #0]
    return result;
 8025fa6:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8025faa:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(790015084)
 8025fac:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8025fb0:	681b      	ldr	r3, [r3, #0]
 8025fb2:	ea02 0103 	and.w	r1, r2, r3
 8025fb6:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8025fba:	681b      	ldr	r3, [r3, #0]
 8025fbc:	43da      	mvns	r2, r3
 8025fbe:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 8025fc2:	681b      	ldr	r3, [r3, #0]
 8025fc4:	4013      	ands	r3, r2
 8025fc6:	f507 7231 	add.w	r2, r7, #708	; 0x2c4
 8025fca:	404b      	eors	r3, r1
 8025fcc:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(290630308)
 8025fce:	f507 7359 	add.w	r3, r7, #868	; 0x364
 8025fd2:	6819      	ldr	r1, [r3, #0]
 8025fd4:	f507 7259 	add.w	r2, r7, #868	; 0x364
 8025fd8:	1c4b      	adds	r3, r1, #1
 8025fda:	6013      	str	r3, [r2, #0]
 8025fdc:	2301      	movs	r3, #1
 8025fde:	fa03 f201 	lsl.w	r2, r3, r1
 8025fe2:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 8025fe6:	681b      	ldr	r3, [r3, #0]
 8025fe8:	4013      	ands	r3, r2
 8025fea:	2b00      	cmp	r3, #0
 8025fec:	d002      	beq.n	8025ff4 <arm_softmax_s8+0x296c>
 8025fee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8025ff2:	e000      	b.n	8025ff6 <arm_softmax_s8+0x296e>
 8025ff4:	2200      	movs	r2, #0
 8025ff6:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8025ffa:	601a      	str	r2, [r3, #0]
 8025ffc:	f507 7223 	add.w	r2, r7, #652	; 0x28c
 8026000:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 8026004:	681b      	ldr	r3, [r3, #0]
 8026006:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8026008:	f507 7222 	add.w	r2, r7, #648	; 0x288
 802600c:	2300      	movs	r3, #0
 802600e:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8026010:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8026014:	f04f 0300 	mov.w	r3, #0
 8026018:	e9c7 23a0 	strd	r2, r3, [r7, #640]	; 0x280
    if ((m1 < 0) ^ (m2 < 0))
 802601c:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 8026020:	681b      	ldr	r3, [r3, #0]
 8026022:	0fdb      	lsrs	r3, r3, #31
 8026024:	b2da      	uxtb	r2, r3
 8026026:	2300      	movs	r3, #0
 8026028:	4053      	eors	r3, r2
 802602a:	b2db      	uxtb	r3, r3
 802602c:	2b00      	cmp	r3, #0
 802602e:	d00e      	beq.n	802604e <arm_softmax_s8+0x29c6>
        mult = 1 - mult;
 8026030:	f04f 0001 	mov.w	r0, #1
 8026034:	f04f 0100 	mov.w	r1, #0
 8026038:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	; 0x280
 802603c:	1a84      	subs	r4, r0, r2
 802603e:	64bc      	str	r4, [r7, #72]	; 0x48
 8026040:	eb61 0303 	sbc.w	r3, r1, r3
 8026044:	64fb      	str	r3, [r7, #76]	; 0x4c
 8026046:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 802604a:	e9c7 34a0 	strd	r3, r4, [r7, #640]	; 0x280
    mult = mult + (q63_t)m1 * m2;
 802604e:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 8026052:	681b      	ldr	r3, [r3, #0]
 8026054:	4618      	mov	r0, r3
 8026056:	ea4f 71e0 	mov.w	r1, r0, asr #31
 802605a:	a337      	add	r3, pc, #220	; (adr r3, 8026138 <arm_softmax_s8+0x2ab0>)
 802605c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026060:	fb02 f501 	mul.w	r5, r2, r1
 8026064:	fb00 f403 	mul.w	r4, r0, r3
 8026068:	442c      	add	r4, r5
 802606a:	fba0 0102 	umull	r0, r1, r0, r2
 802606e:	1863      	adds	r3, r4, r1
 8026070:	4619      	mov	r1, r3
 8026072:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	; 0x280
 8026076:	1814      	adds	r4, r2, r0
 8026078:	643c      	str	r4, [r7, #64]	; 0x40
 802607a:	414b      	adcs	r3, r1
 802607c:	647b      	str	r3, [r7, #68]	; 0x44
 802607e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8026082:	e9c7 34a0 	strd	r3, r4, [r7, #640]	; 0x280
    result = (int32_t)(mult / (1ll << 31));
 8026086:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	; 0x280
 802608a:	4610      	mov	r0, r2
 802608c:	4619      	mov	r1, r3
 802608e:	2800      	cmp	r0, #0
 8026090:	f171 0300 	sbcs.w	r3, r1, #0
 8026094:	da06      	bge.n	80260a4 <arm_softmax_s8+0x2a1c>
 8026096:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 802609a:	f04f 0300 	mov.w	r3, #0
 802609e:	1880      	adds	r0, r0, r2
 80260a0:	eb43 0101 	adc.w	r1, r3, r1
 80260a4:	f04f 0200 	mov.w	r2, #0
 80260a8:	f04f 0300 	mov.w	r3, #0
 80260ac:	0fc2      	lsrs	r2, r0, #31
 80260ae:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80260b2:	17cb      	asrs	r3, r1, #31
 80260b4:	4610      	mov	r0, r2
 80260b6:	4619      	mov	r1, r3
 80260b8:	f507 7222 	add.w	r2, r7, #648	; 0x288
 80260bc:	4603      	mov	r3, r0
 80260be:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 80260c0:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 80260c4:	681a      	ldr	r2, [r3, #0]
 80260c6:	4b20      	ldr	r3, [pc, #128]	; (8026148 <arm_softmax_s8+0x2ac0>)
 80260c8:	429a      	cmp	r2, r3
 80260ca:	d10a      	bne.n	80260e2 <arm_softmax_s8+0x2a5a>
 80260cc:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 80260d0:	681b      	ldr	r3, [r3, #0]
 80260d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80260d6:	d104      	bne.n	80260e2 <arm_softmax_s8+0x2a5a>
        result = NN_Q31_MAX;
 80260d8:	f507 7222 	add.w	r2, r7, #648	; 0x288
 80260dc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80260e0:	6013      	str	r3, [r2, #0]
    return result;
 80260e2:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80260e6:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(290630308)
 80260e8:	f507 735a 	add.w	r3, r7, #872	; 0x368
 80260ec:	681b      	ldr	r3, [r3, #0]
 80260ee:	ea02 0103 	and.w	r1, r2, r3
 80260f2:	f507 735a 	add.w	r3, r7, #872	; 0x368
 80260f6:	681b      	ldr	r3, [r3, #0]
 80260f8:	43da      	mvns	r2, r3
 80260fa:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 80260fe:	681b      	ldr	r3, [r3, #0]
 8026100:	4013      	ands	r3, r2
 8026102:	f507 7231 	add.w	r2, r7, #708	; 0x2c4
 8026106:	404b      	eors	r3, r1
 8026108:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(39332535)
 802610a:	f507 7359 	add.w	r3, r7, #868	; 0x364
 802610e:	6819      	ldr	r1, [r3, #0]
 8026110:	f507 7259 	add.w	r2, r7, #868	; 0x364
 8026114:	1c4b      	adds	r3, r1, #1
 8026116:	6013      	str	r3, [r2, #0]
 8026118:	2301      	movs	r3, #1
 802611a:	fa03 f201 	lsl.w	r2, r3, r1
 802611e:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 8026122:	681b      	ldr	r3, [r3, #0]
 8026124:	4013      	ands	r3, r2
 8026126:	2b00      	cmp	r3, #0
 8026128:	d014      	beq.n	8026154 <arm_softmax_s8+0x2acc>
 802612a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802612e:	e012      	b.n	8026156 <arm_softmax_s8+0x2ace>
 8026130:	2f16ac6c 	.word	0x2f16ac6c
 8026134:	00000000 	.word	0x00000000
 8026138:	1152aaa4 	.word	0x1152aaa4
 802613c:	00000000 	.word	0x00000000
 8026140:	4da2cbf2 	.word	0x4da2cbf2
 8026144:	2f16ac6c 	.word	0x2f16ac6c
 8026148:	1152aaa4 	.word	0x1152aaa4
 802614c:	4da2cbf2 	.word	0x4da2cbf2
 8026150:	00000000 	.word	0x00000000
 8026154:	2200      	movs	r2, #0
 8026156:	f507 735a 	add.w	r3, r7, #872	; 0x368
 802615a:	601a      	str	r2, [r3, #0]
 802615c:	f507 721f 	add.w	r2, r7, #636	; 0x27c
 8026160:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 8026164:	681b      	ldr	r3, [r3, #0]
 8026166:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8026168:	f507 721e 	add.w	r2, r7, #632	; 0x278
 802616c:	2300      	movs	r3, #0
 802616e:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8026170:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8026174:	f04f 0300 	mov.w	r3, #0
 8026178:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
    if ((m1 < 0) ^ (m2 < 0))
 802617c:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 8026180:	681b      	ldr	r3, [r3, #0]
 8026182:	0fdb      	lsrs	r3, r3, #31
 8026184:	b2da      	uxtb	r2, r3
 8026186:	2300      	movs	r3, #0
 8026188:	4053      	eors	r3, r2
 802618a:	b2db      	uxtb	r3, r3
 802618c:	2b00      	cmp	r3, #0
 802618e:	d00e      	beq.n	80261ae <arm_softmax_s8+0x2b26>
        mult = 1 - mult;
 8026190:	f04f 0001 	mov.w	r0, #1
 8026194:	f04f 0100 	mov.w	r1, #0
 8026198:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 802619c:	1a84      	subs	r4, r0, r2
 802619e:	63bc      	str	r4, [r7, #56]	; 0x38
 80261a0:	eb61 0303 	sbc.w	r3, r1, r3
 80261a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80261a6:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80261aa:	e9c7 349c 	strd	r3, r4, [r7, #624]	; 0x270
    mult = mult + (q63_t)m1 * m2;
 80261ae:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 80261b2:	681b      	ldr	r3, [r3, #0]
 80261b4:	4618      	mov	r0, r3
 80261b6:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80261ba:	a3d1      	add	r3, pc, #836	; (adr r3, 8026500 <arm_softmax_s8+0x2e78>)
 80261bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80261c0:	fb02 f501 	mul.w	r5, r2, r1
 80261c4:	fb00 f403 	mul.w	r4, r0, r3
 80261c8:	442c      	add	r4, r5
 80261ca:	fba0 0102 	umull	r0, r1, r0, r2
 80261ce:	1863      	adds	r3, r4, r1
 80261d0:	4619      	mov	r1, r3
 80261d2:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 80261d6:	1814      	adds	r4, r2, r0
 80261d8:	633c      	str	r4, [r7, #48]	; 0x30
 80261da:	414b      	adcs	r3, r1
 80261dc:	637b      	str	r3, [r7, #52]	; 0x34
 80261de:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80261e2:	e9c7 349c 	strd	r3, r4, [r7, #624]	; 0x270
    result = (int32_t)(mult / (1ll << 31));
 80261e6:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 80261ea:	4610      	mov	r0, r2
 80261ec:	4619      	mov	r1, r3
 80261ee:	2800      	cmp	r0, #0
 80261f0:	f171 0300 	sbcs.w	r3, r1, #0
 80261f4:	da06      	bge.n	8026204 <arm_softmax_s8+0x2b7c>
 80261f6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80261fa:	f04f 0300 	mov.w	r3, #0
 80261fe:	1880      	adds	r0, r0, r2
 8026200:	eb43 0101 	adc.w	r1, r3, r1
 8026204:	f04f 0200 	mov.w	r2, #0
 8026208:	f04f 0300 	mov.w	r3, #0
 802620c:	0fc2      	lsrs	r2, r0, #31
 802620e:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8026212:	17cb      	asrs	r3, r1, #31
 8026214:	4610      	mov	r0, r2
 8026216:	4619      	mov	r1, r3
 8026218:	f507 721e 	add.w	r2, r7, #632	; 0x278
 802621c:	4603      	mov	r3, r0
 802621e:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 8026220:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 8026224:	681a      	ldr	r2, [r3, #0]
 8026226:	4bb4      	ldr	r3, [pc, #720]	; (80264f8 <arm_softmax_s8+0x2e70>)
 8026228:	429a      	cmp	r2, r3
 802622a:	d10a      	bne.n	8026242 <arm_softmax_s8+0x2bba>
 802622c:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 8026230:	681b      	ldr	r3, [r3, #0]
 8026232:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8026236:	d104      	bne.n	8026242 <arm_softmax_s8+0x2bba>
        result = NN_Q31_MAX;
 8026238:	f507 721e 	add.w	r2, r7, #632	; 0x278
 802623c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8026240:	6013      	str	r3, [r2, #0]
    return result;
 8026242:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8026246:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(39332535)
 8026248:	f507 735a 	add.w	r3, r7, #872	; 0x368
 802624c:	681b      	ldr	r3, [r3, #0]
 802624e:	ea02 0103 	and.w	r1, r2, r3
 8026252:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8026256:	681b      	ldr	r3, [r3, #0]
 8026258:	43da      	mvns	r2, r3
 802625a:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 802625e:	681b      	ldr	r3, [r3, #0]
 8026260:	4013      	ands	r3, r2
 8026262:	f507 7231 	add.w	r2, r7, #708	; 0x2c4
 8026266:	404b      	eors	r3, r1
 8026268:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(720401)
 802626a:	f507 7359 	add.w	r3, r7, #868	; 0x364
 802626e:	6819      	ldr	r1, [r3, #0]
 8026270:	f507 7259 	add.w	r2, r7, #868	; 0x364
 8026274:	1c4b      	adds	r3, r1, #1
 8026276:	6013      	str	r3, [r2, #0]
 8026278:	2301      	movs	r3, #1
 802627a:	fa03 f201 	lsl.w	r2, r3, r1
 802627e:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 8026282:	681b      	ldr	r3, [r3, #0]
 8026284:	4013      	ands	r3, r2
 8026286:	2b00      	cmp	r3, #0
 8026288:	d002      	beq.n	8026290 <arm_softmax_s8+0x2c08>
 802628a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802628e:	e000      	b.n	8026292 <arm_softmax_s8+0x2c0a>
 8026290:	2200      	movs	r2, #0
 8026292:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8026296:	601a      	str	r2, [r3, #0]
 8026298:	f507 721b 	add.w	r2, r7, #620	; 0x26c
 802629c:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 80262a0:	681b      	ldr	r3, [r3, #0]
 80262a2:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80262a4:	f507 721a 	add.w	r2, r7, #616	; 0x268
 80262a8:	2300      	movs	r3, #0
 80262aa:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80262ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80262b0:	f04f 0300 	mov.w	r3, #0
 80262b4:	e9c7 2398 	strd	r2, r3, [r7, #608]	; 0x260
    if ((m1 < 0) ^ (m2 < 0))
 80262b8:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 80262bc:	681b      	ldr	r3, [r3, #0]
 80262be:	0fdb      	lsrs	r3, r3, #31
 80262c0:	b2da      	uxtb	r2, r3
 80262c2:	2300      	movs	r3, #0
 80262c4:	4053      	eors	r3, r2
 80262c6:	b2db      	uxtb	r3, r3
 80262c8:	2b00      	cmp	r3, #0
 80262ca:	d00e      	beq.n	80262ea <arm_softmax_s8+0x2c62>
        mult = 1 - mult;
 80262cc:	f04f 0001 	mov.w	r0, #1
 80262d0:	f04f 0100 	mov.w	r1, #0
 80262d4:	e9d7 2398 	ldrd	r2, r3, [r7, #608]	; 0x260
 80262d8:	1a84      	subs	r4, r0, r2
 80262da:	62bc      	str	r4, [r7, #40]	; 0x28
 80262dc:	eb61 0303 	sbc.w	r3, r1, r3
 80262e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80262e2:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80262e6:	e9c7 3498 	strd	r3, r4, [r7, #608]	; 0x260
    mult = mult + (q63_t)m1 * m2;
 80262ea:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 80262ee:	681b      	ldr	r3, [r3, #0]
 80262f0:	4618      	mov	r0, r3
 80262f2:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80262f6:	4a81      	ldr	r2, [pc, #516]	; (80264fc <arm_softmax_s8+0x2e74>)
 80262f8:	f04f 0300 	mov.w	r3, #0
 80262fc:	fb02 f501 	mul.w	r5, r2, r1
 8026300:	fb00 f403 	mul.w	r4, r0, r3
 8026304:	442c      	add	r4, r5
 8026306:	fba0 0102 	umull	r0, r1, r0, r2
 802630a:	1863      	adds	r3, r4, r1
 802630c:	4619      	mov	r1, r3
 802630e:	e9d7 2398 	ldrd	r2, r3, [r7, #608]	; 0x260
 8026312:	1814      	adds	r4, r2, r0
 8026314:	623c      	str	r4, [r7, #32]
 8026316:	414b      	adcs	r3, r1
 8026318:	627b      	str	r3, [r7, #36]	; 0x24
 802631a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 802631e:	e9c7 3498 	strd	r3, r4, [r7, #608]	; 0x260
    result = (int32_t)(mult / (1ll << 31));
 8026322:	e9d7 2398 	ldrd	r2, r3, [r7, #608]	; 0x260
 8026326:	4610      	mov	r0, r2
 8026328:	4619      	mov	r1, r3
 802632a:	2800      	cmp	r0, #0
 802632c:	f171 0300 	sbcs.w	r3, r1, #0
 8026330:	da06      	bge.n	8026340 <arm_softmax_s8+0x2cb8>
 8026332:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8026336:	f04f 0300 	mov.w	r3, #0
 802633a:	1880      	adds	r0, r0, r2
 802633c:	eb43 0101 	adc.w	r1, r3, r1
 8026340:	f04f 0200 	mov.w	r2, #0
 8026344:	f04f 0300 	mov.w	r3, #0
 8026348:	0fc2      	lsrs	r2, r0, #31
 802634a:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 802634e:	17cb      	asrs	r3, r1, #31
 8026350:	4610      	mov	r0, r2
 8026352:	4619      	mov	r1, r3
 8026354:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8026358:	4603      	mov	r3, r0
 802635a:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 802635c:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 8026360:	681a      	ldr	r2, [r3, #0]
 8026362:	4b66      	ldr	r3, [pc, #408]	; (80264fc <arm_softmax_s8+0x2e74>)
 8026364:	429a      	cmp	r2, r3
 8026366:	d10a      	bne.n	802637e <arm_softmax_s8+0x2cf6>
 8026368:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 802636c:	681b      	ldr	r3, [r3, #0]
 802636e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8026372:	d104      	bne.n	802637e <arm_softmax_s8+0x2cf6>
        result = NN_Q31_MAX;
 8026374:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8026378:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 802637c:	6013      	str	r3, [r2, #0]
    return result;
 802637e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8026382:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(720401)
 8026384:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8026388:	681b      	ldr	r3, [r3, #0]
 802638a:	ea02 0103 	and.w	r1, r2, r3
 802638e:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8026392:	681b      	ldr	r3, [r3, #0]
 8026394:	43da      	mvns	r2, r3
 8026396:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 802639a:	681b      	ldr	r3, [r3, #0]
 802639c:	4013      	ands	r3, r2
 802639e:	f507 7231 	add.w	r2, r7, #708	; 0x2c4
 80263a2:	404b      	eors	r3, r1
 80263a4:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(242)
 80263a6:	f507 7359 	add.w	r3, r7, #868	; 0x364
 80263aa:	6819      	ldr	r1, [r3, #0]
 80263ac:	f507 7259 	add.w	r2, r7, #868	; 0x364
 80263b0:	1c4b      	adds	r3, r1, #1
 80263b2:	6013      	str	r3, [r2, #0]
 80263b4:	2301      	movs	r3, #1
 80263b6:	fa03 f201 	lsl.w	r2, r3, r1
 80263ba:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 80263be:	681b      	ldr	r3, [r3, #0]
 80263c0:	4013      	ands	r3, r2
 80263c2:	2b00      	cmp	r3, #0
 80263c4:	d002      	beq.n	80263cc <arm_softmax_s8+0x2d44>
 80263c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80263ca:	e000      	b.n	80263ce <arm_softmax_s8+0x2d46>
 80263cc:	2200      	movs	r2, #0
 80263ce:	f507 735a 	add.w	r3, r7, #872	; 0x368
 80263d2:	601a      	str	r2, [r3, #0]
 80263d4:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 80263d8:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 80263dc:	681b      	ldr	r3, [r3, #0]
 80263de:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80263e0:	f507 7216 	add.w	r2, r7, #600	; 0x258
 80263e4:	2300      	movs	r3, #0
 80263e6:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80263e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80263ec:	f04f 0300 	mov.w	r3, #0
 80263f0:	e9c7 2394 	strd	r2, r3, [r7, #592]	; 0x250
    if ((m1 < 0) ^ (m2 < 0))
 80263f4:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 80263f8:	681b      	ldr	r3, [r3, #0]
 80263fa:	0fdb      	lsrs	r3, r3, #31
 80263fc:	b2da      	uxtb	r2, r3
 80263fe:	2300      	movs	r3, #0
 8026400:	4053      	eors	r3, r2
 8026402:	b2db      	uxtb	r3, r3
 8026404:	2b00      	cmp	r3, #0
 8026406:	d00e      	beq.n	8026426 <arm_softmax_s8+0x2d9e>
        mult = 1 - mult;
 8026408:	f04f 0001 	mov.w	r0, #1
 802640c:	f04f 0100 	mov.w	r1, #0
 8026410:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 8026414:	1a84      	subs	r4, r0, r2
 8026416:	61bc      	str	r4, [r7, #24]
 8026418:	eb61 0303 	sbc.w	r3, r1, r3
 802641c:	61fb      	str	r3, [r7, #28]
 802641e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8026422:	e9c7 3494 	strd	r3, r4, [r7, #592]	; 0x250
    mult = mult + (q63_t)m1 * m2;
 8026426:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 802642a:	681b      	ldr	r3, [r3, #0]
 802642c:	4618      	mov	r0, r3
 802642e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8026432:	f04f 02f2 	mov.w	r2, #242	; 0xf2
 8026436:	f04f 0300 	mov.w	r3, #0
 802643a:	fb02 f501 	mul.w	r5, r2, r1
 802643e:	fb00 f403 	mul.w	r4, r0, r3
 8026442:	442c      	add	r4, r5
 8026444:	fba0 0102 	umull	r0, r1, r0, r2
 8026448:	1863      	adds	r3, r4, r1
 802644a:	4619      	mov	r1, r3
 802644c:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 8026450:	1814      	adds	r4, r2, r0
 8026452:	613c      	str	r4, [r7, #16]
 8026454:	414b      	adcs	r3, r1
 8026456:	617b      	str	r3, [r7, #20]
 8026458:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 802645c:	e9c7 3494 	strd	r3, r4, [r7, #592]	; 0x250
    result = (int32_t)(mult / (1ll << 31));
 8026460:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 8026464:	4610      	mov	r0, r2
 8026466:	4619      	mov	r1, r3
 8026468:	2800      	cmp	r0, #0
 802646a:	f171 0300 	sbcs.w	r3, r1, #0
 802646e:	da06      	bge.n	802647e <arm_softmax_s8+0x2df6>
 8026470:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8026474:	f04f 0300 	mov.w	r3, #0
 8026478:	1880      	adds	r0, r0, r2
 802647a:	eb43 0101 	adc.w	r1, r3, r1
 802647e:	f04f 0200 	mov.w	r2, #0
 8026482:	f04f 0300 	mov.w	r3, #0
 8026486:	0fc2      	lsrs	r2, r0, #31
 8026488:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 802648c:	17cb      	asrs	r3, r1, #31
 802648e:	4610      	mov	r0, r2
 8026490:	4619      	mov	r1, r3
 8026492:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8026496:	4603      	mov	r3, r0
 8026498:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 802649a:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 802649e:	681b      	ldr	r3, [r3, #0]
 80264a0:	2bf2      	cmp	r3, #242	; 0xf2
 80264a2:	d10a      	bne.n	80264ba <arm_softmax_s8+0x2e32>
 80264a4:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 80264a8:	681b      	ldr	r3, [r3, #0]
 80264aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80264ae:	d104      	bne.n	80264ba <arm_softmax_s8+0x2e32>
        result = NN_Q31_MAX;
 80264b0:	f507 7216 	add.w	r2, r7, #600	; 0x258
 80264b4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80264b8:	6013      	str	r3, [r2, #0]
    return result;
 80264ba:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80264be:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(242)
 80264c0:	f507 735a 	add.w	r3, r7, #872	; 0x368
 80264c4:	681b      	ldr	r3, [r3, #0]
 80264c6:	ea02 0103 	and.w	r1, r2, r3
 80264ca:	f507 735a 	add.w	r3, r7, #872	; 0x368
 80264ce:	681b      	ldr	r3, [r3, #0]
 80264d0:	43da      	mvns	r2, r3
 80264d2:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 80264d6:	681b      	ldr	r3, [r3, #0]
 80264d8:	4013      	ands	r3, r2
 80264da:	f507 7231 	add.w	r2, r7, #708	; 0x2c4
 80264de:	404b      	eors	r3, r1
 80264e0:	6013      	str	r3, [r2, #0]
    mask = MASK_IF_ZERO(val);
 80264e2:	f507 735b 	add.w	r3, r7, #876	; 0x36c
 80264e6:	681b      	ldr	r3, [r3, #0]
 80264e8:	2b00      	cmp	r3, #0
 80264ea:	d10d      	bne.n	8026508 <arm_softmax_s8+0x2e80>
 80264ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80264f0:	e00b      	b.n	802650a <arm_softmax_s8+0x2e82>
 80264f2:	bf00      	nop
 80264f4:	f3af 8000 	nop.w
 80264f8:	02582ab7 	.word	0x02582ab7
 80264fc:	000afe11 	.word	0x000afe11
 8026500:	02582ab7 	.word	0x02582ab7
 8026504:	00000000 	.word	0x00000000
 8026508:	2200      	movs	r2, #0
 802650a:	f507 735a 	add.w	r3, r7, #872	; 0x368
 802650e:	601a      	str	r2, [r3, #0]
    return SELECT_USING_MASK(mask, NN_Q31_MAX, result);
 8026510:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8026514:	681b      	ldr	r3, [r3, #0]
 8026516:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 802651a:	f507 735a 	add.w	r3, r7, #872	; 0x368
 802651e:	681b      	ldr	r3, [r3, #0]
 8026520:	43da      	mvns	r2, r3
 8026522:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 8026526:	681b      	ldr	r3, [r3, #0]
 8026528:	4013      	ands	r3, r2
 802652a:	4059      	eors	r1, r3
 802652c:	f507 7261 	add.w	r2, r7, #900	; 0x384
 8026530:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 8026534:	6013      	str	r3, [r2, #0]
 8026536:	f507 7360 	add.w	r3, r7, #896	; 0x380
 802653a:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 802653c:	f507 725f 	add.w	r2, r7, #892	; 0x37c
 8026540:	2300      	movs	r3, #0
 8026542:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8026544:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8026548:	f04f 0300 	mov.w	r3, #0
 802654c:	e9c7 23dc 	strd	r2, r3, [r7, #880]	; 0x370
    if ((m1 < 0) ^ (m2 < 0))
 8026550:	f507 7361 	add.w	r3, r7, #900	; 0x384
 8026554:	681b      	ldr	r3, [r3, #0]
 8026556:	0fdb      	lsrs	r3, r3, #31
 8026558:	b2da      	uxtb	r2, r3
 802655a:	f507 7360 	add.w	r3, r7, #896	; 0x380
 802655e:	681b      	ldr	r3, [r3, #0]
 8026560:	0fdb      	lsrs	r3, r3, #31
 8026562:	b2db      	uxtb	r3, r3
 8026564:	4053      	eors	r3, r2
 8026566:	b2db      	uxtb	r3, r3
 8026568:	2b00      	cmp	r3, #0
 802656a:	d00e      	beq.n	802658a <arm_softmax_s8+0x2f02>
        mult = 1 - mult;
 802656c:	f04f 0001 	mov.w	r0, #1
 8026570:	f04f 0100 	mov.w	r1, #0
 8026574:	e9d7 23dc 	ldrd	r2, r3, [r7, #880]	; 0x370
 8026578:	1a84      	subs	r4, r0, r2
 802657a:	60bc      	str	r4, [r7, #8]
 802657c:	eb61 0303 	sbc.w	r3, r1, r3
 8026580:	60fb      	str	r3, [r7, #12]
 8026582:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8026586:	e9c7 34dc 	strd	r3, r4, [r7, #880]	; 0x370
    mult = mult + (q63_t)m1 * m2;
 802658a:	f507 7361 	add.w	r3, r7, #900	; 0x384
 802658e:	681b      	ldr	r3, [r3, #0]
 8026590:	4618      	mov	r0, r3
 8026592:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8026596:	f507 7360 	add.w	r3, r7, #896	; 0x380
 802659a:	681b      	ldr	r3, [r3, #0]
 802659c:	461a      	mov	r2, r3
 802659e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80265a2:	fb02 f501 	mul.w	r5, r2, r1
 80265a6:	fb00 f403 	mul.w	r4, r0, r3
 80265aa:	442c      	add	r4, r5
 80265ac:	fba0 0102 	umull	r0, r1, r0, r2
 80265b0:	1863      	adds	r3, r4, r1
 80265b2:	4619      	mov	r1, r3
 80265b4:	e9d7 23dc 	ldrd	r2, r3, [r7, #880]	; 0x370
 80265b8:	1814      	adds	r4, r2, r0
 80265ba:	603c      	str	r4, [r7, #0]
 80265bc:	414b      	adcs	r3, r1
 80265be:	607b      	str	r3, [r7, #4]
 80265c0:	e9d7 3400 	ldrd	r3, r4, [r7]
 80265c4:	e9c7 34dc 	strd	r3, r4, [r7, #880]	; 0x370
    result = (int32_t)(mult / (1ll << 31));
 80265c8:	e9d7 23dc 	ldrd	r2, r3, [r7, #880]	; 0x370
 80265cc:	4610      	mov	r0, r2
 80265ce:	4619      	mov	r1, r3
 80265d0:	2800      	cmp	r0, #0
 80265d2:	f171 0300 	sbcs.w	r3, r1, #0
 80265d6:	da06      	bge.n	80265e6 <arm_softmax_s8+0x2f5e>
 80265d8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80265dc:	f04f 0300 	mov.w	r3, #0
 80265e0:	1880      	adds	r0, r0, r2
 80265e2:	eb43 0101 	adc.w	r1, r3, r1
 80265e6:	f04f 0200 	mov.w	r2, #0
 80265ea:	f04f 0300 	mov.w	r3, #0
 80265ee:	0fc2      	lsrs	r2, r0, #31
 80265f0:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80265f4:	17cb      	asrs	r3, r1, #31
 80265f6:	4610      	mov	r0, r2
 80265f8:	4619      	mov	r1, r3
 80265fa:	f507 725f 	add.w	r2, r7, #892	; 0x37c
 80265fe:	4603      	mov	r3, r0
 8026600:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 8026602:	f507 7261 	add.w	r2, r7, #900	; 0x384
 8026606:	f507 7360 	add.w	r3, r7, #896	; 0x380
 802660a:	6812      	ldr	r2, [r2, #0]
 802660c:	681b      	ldr	r3, [r3, #0]
 802660e:	429a      	cmp	r2, r3
 8026610:	d10a      	bne.n	8026628 <arm_softmax_s8+0x2fa0>
 8026612:	f507 7361 	add.w	r3, r7, #900	; 0x384
 8026616:	681b      	ldr	r3, [r3, #0]
 8026618:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802661c:	d104      	bne.n	8026628 <arm_softmax_s8+0x2fa0>
        result = NN_Q31_MAX;
 802661e:	f507 725f 	add.w	r2, r7, #892	; 0x37c
 8026622:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8026626:	6013      	str	r3, [r2, #0]
    return result;
 8026628:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 802662c:	681a      	ldr	r2, [r3, #0]
 802662e:	f507 7367 	add.w	r3, r7, #924	; 0x39c
 8026632:	601a      	str	r2, [r3, #0]
 8026634:	f507 7266 	add.w	r2, r7, #920	; 0x398
 8026638:	f8d7 35d8 	ldr.w	r3, [r7, #1496]	; 0x5d8
 802663c:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 802663e:	f507 7265 	add.w	r2, r7, #916	; 0x394
 8026642:	2300      	movs	r3, #0
 8026644:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8026646:	f507 7366 	add.w	r3, r7, #920	; 0x398
 802664a:	2201      	movs	r2, #1
 802664c:	681b      	ldr	r3, [r3, #0]
 802664e:	fa02 f303 	lsl.w	r3, r2, r3
 8026652:	f507 7264 	add.w	r2, r7, #912	; 0x390
 8026656:	3b01      	subs	r3, #1
 8026658:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 802665a:	f507 7163 	add.w	r1, r7, #908	; 0x38c
 802665e:	f507 7267 	add.w	r2, r7, #924	; 0x39c
 8026662:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8026666:	6812      	ldr	r2, [r2, #0]
 8026668:	681b      	ldr	r3, [r3, #0]
 802666a:	4013      	ands	r3, r2
 802666c:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 802666e:	f507 7165 	add.w	r1, r7, #916	; 0x394
 8026672:	f507 7267 	add.w	r2, r7, #924	; 0x39c
 8026676:	f507 7366 	add.w	r3, r7, #920	; 0x398
 802667a:	6812      	ldr	r2, [r2, #0]
 802667c:	681b      	ldr	r3, [r3, #0]
 802667e:	fa42 f303 	asr.w	r3, r2, r3
 8026682:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 8026684:	f507 7262 	add.w	r2, r7, #904	; 0x388
 8026688:	f507 7364 	add.w	r3, r7, #912	; 0x390
 802668c:	681b      	ldr	r3, [r3, #0]
 802668e:	105b      	asrs	r3, r3, #1
 8026690:	6013      	str	r3, [r2, #0]
    if (result < 0)
 8026692:	f507 7365 	add.w	r3, r7, #916	; 0x394
 8026696:	681b      	ldr	r3, [r3, #0]
 8026698:	2b00      	cmp	r3, #0
 802669a:	da06      	bge.n	80266aa <arm_softmax_s8+0x3022>
        threshold++;
 802669c:	f507 7262 	add.w	r2, r7, #904	; 0x388
 80266a0:	f507 7362 	add.w	r3, r7, #904	; 0x388
 80266a4:	681b      	ldr	r3, [r3, #0]
 80266a6:	3301      	adds	r3, #1
 80266a8:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 80266aa:	f507 7263 	add.w	r2, r7, #908	; 0x38c
 80266ae:	f507 7362 	add.w	r3, r7, #904	; 0x388
 80266b2:	6812      	ldr	r2, [r2, #0]
 80266b4:	681b      	ldr	r3, [r3, #0]
 80266b6:	429a      	cmp	r2, r3
 80266b8:	dd06      	ble.n	80266c8 <arm_softmax_s8+0x3040>
        result++;
 80266ba:	f507 7265 	add.w	r2, r7, #916	; 0x394
 80266be:	f507 7365 	add.w	r3, r7, #916	; 0x394
 80266c2:	681b      	ldr	r3, [r3, #0]
 80266c4:	3301      	adds	r3, #1
 80266c6:	6013      	str	r3, [r2, #0]
    return result;
 80266c8:	f507 7365 	add.w	r3, r7, #916	; 0x394
 80266cc:	681b      	ldr	r3, [r3, #0]
                const int32_t res =
 80266ce:	3b80      	subs	r3, #128	; 0x80
 80266d0:	f8c7 35d0 	str.w	r3, [r7, #1488]	; 0x5d0
                output[col] = (int8_t)CLAMP(res, (int32_t)127, (int32_t)-128);
 80266d4:	f8d7 35d0 	ldr.w	r3, [r7, #1488]	; 0x5d0
 80266d8:	f113 0f7f 	cmn.w	r3, #127	; 0x7f
 80266dc:	db09      	blt.n	80266f2 <arm_softmax_s8+0x306a>
 80266de:	f8d7 35d0 	ldr.w	r3, [r7, #1488]	; 0x5d0
 80266e2:	2b7e      	cmp	r3, #126	; 0x7e
 80266e4:	dc03      	bgt.n	80266ee <arm_softmax_s8+0x3066>
 80266e6:	f8d7 35d0 	ldr.w	r3, [r7, #1488]	; 0x5d0
 80266ea:	b259      	sxtb	r1, r3
 80266ec:	e003      	b.n	80266f6 <arm_softmax_s8+0x306e>
 80266ee:	217f      	movs	r1, #127	; 0x7f
 80266f0:	e001      	b.n	80266f6 <arm_softmax_s8+0x306e>
 80266f2:	f06f 017f 	mvn.w	r1, #127	; 0x7f
 80266f6:	f8d7 25f4 	ldr.w	r2, [r7, #1524]	; 0x5f4
 80266fa:	f8d7 3620 	ldr.w	r3, [r7, #1568]	; 0x620
 80266fe:	441a      	add	r2, r3
 8026700:	460b      	mov	r3, r1
 8026702:	7013      	strb	r3, [r2, #0]
 8026704:	e006      	b.n	8026714 <arm_softmax_s8+0x308c>
            }
            else
            {
                output[col] = -128;
 8026706:	f8d7 25f4 	ldr.w	r2, [r7, #1524]	; 0x5f4
 802670a:	f8d7 3620 	ldr.w	r3, [r7, #1568]	; 0x620
 802670e:	441a      	add	r2, r3
 8026710:	2380      	movs	r3, #128	; 0x80
 8026712:	7013      	strb	r3, [r2, #0]
        for (col = 0; col < row_size; ++col)
 8026714:	f8d7 35f4 	ldr.w	r3, [r7, #1524]	; 0x5f4
 8026718:	3301      	adds	r3, #1
 802671a:	f8c7 35f4 	str.w	r3, [r7, #1524]	; 0x5f4
 802671e:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 8026722:	f8d7 25f4 	ldr.w	r2, [r7, #1524]	; 0x5f4
 8026726:	681b      	ldr	r3, [r3, #0]
 8026728:	429a      	cmp	r2, r3
 802672a:	f6fe ae81 	blt.w	8025430 <arm_softmax_s8+0x1da8>
            }
        }
        input += row_size;
 802672e:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 8026732:	6819      	ldr	r1, [r3, #0]
 8026734:	f507 720d 	add.w	r2, r7, #564	; 0x234
 8026738:	f507 730d 	add.w	r3, r7, #564	; 0x234
 802673c:	681b      	ldr	r3, [r3, #0]
 802673e:	440b      	add	r3, r1
 8026740:	6013      	str	r3, [r2, #0]
        output += row_size;
 8026742:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 8026746:	681a      	ldr	r2, [r3, #0]
 8026748:	f8d7 3620 	ldr.w	r3, [r7, #1568]	; 0x620
 802674c:	4413      	add	r3, r2
 802674e:	f8c7 3620 	str.w	r3, [r7, #1568]	; 0x620
    for (row_idx = 0; row_idx < num_rows; ++row_idx)
 8026752:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 8026756:	3301      	adds	r3, #1
 8026758:	f8c7 35f0 	str.w	r3, [r7, #1520]	; 0x5f0
 802675c:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8026760:	f8d7 25f0 	ldr.w	r2, [r7, #1520]	; 0x5f0
 8026764:	681b      	ldr	r3, [r3, #0]
 8026766:	429a      	cmp	r2, r3
 8026768:	f6fc afae 	blt.w	80236c8 <arm_softmax_s8+0x40>
    }

#endif
}
 802676c:	bf00      	nop
 802676e:	bf00      	nop
 8026770:	f507 67bf 	add.w	r7, r7, #1528	; 0x5f8
 8026774:	46bd      	mov	sp, r7
 8026776:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 802677a:	4770      	bx	lr

0802677c <_ZNK6tflite12OperatorCode23deprecated_builtin_codeEv>:
  int8_t deprecated_builtin_code() const {
 802677c:	b580      	push	{r7, lr}
 802677e:	b082      	sub	sp, #8
 8026780:	af00      	add	r7, sp, #0
 8026782:	6078      	str	r0, [r7, #4]
    return GetField<int8_t>(VT_DEPRECATED_BUILTIN_CODE, 0);
 8026784:	687b      	ldr	r3, [r7, #4]
 8026786:	2200      	movs	r2, #0
 8026788:	2104      	movs	r1, #4
 802678a:	4618      	mov	r0, r3
 802678c:	f7e4 ffd4 	bl	800b738 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8026790:	4603      	mov	r3, r0
  }
 8026792:	4618      	mov	r0, r3
 8026794:	3708      	adds	r7, #8
 8026796:	46bd      	mov	sp, r7
 8026798:	bd80      	pop	{r7, pc}

0802679a <_ZNK6tflite12OperatorCode12builtin_codeEv>:
  tflite::BuiltinOperator builtin_code() const {
 802679a:	b580      	push	{r7, lr}
 802679c:	b082      	sub	sp, #8
 802679e:	af00      	add	r7, sp, #0
 80267a0:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::BuiltinOperator>(GetField<int32_t>(VT_BUILTIN_CODE, 0));
 80267a2:	687b      	ldr	r3, [r7, #4]
 80267a4:	2200      	movs	r2, #0
 80267a6:	210a      	movs	r1, #10
 80267a8:	4618      	mov	r0, r3
 80267aa:	f7e4 ff97 	bl	800b6dc <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 80267ae:	4603      	mov	r3, r0
 80267b0:	b2db      	uxtb	r3, r3
  }
 80267b2:	4618      	mov	r0, r3
 80267b4:	3708      	adds	r7, #8
 80267b6:	46bd      	mov	sp, r7
 80267b8:	bd80      	pop	{r7, pc}

080267ba <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>:
// assigned to the `deprecated_builtin_code` field. In such cases, the
// value of the `builtin_code` field should be used for the builtin operator
// code. In the case, the maximum value of the two fields will be the value of
// the `builtin_code` as the right value.

BuiltinOperator GetBuiltinCode(const OperatorCode* op_code) {
 80267ba:	b580      	push	{r7, lr}
 80267bc:	b084      	sub	sp, #16
 80267be:	af00      	add	r7, sp, #0
 80267c0:	6078      	str	r0, [r7, #4]
  // Caller should guarantee that the given argument value is not a nullptr.
  TFLITE_DCHECK(op_code != nullptr);
 80267c2:	687b      	ldr	r3, [r7, #4]
 80267c4:	2b00      	cmp	r3, #0
 80267c6:	d101      	bne.n	80267cc <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x12>
 80267c8:	f000 fa99 	bl	8026cfe <abort>

  return std::max(
      op_code->builtin_code(),
 80267cc:	6878      	ldr	r0, [r7, #4]
 80267ce:	f7ff ffe4 	bl	802679a <_ZNK6tflite12OperatorCode12builtin_codeEv>
 80267d2:	4603      	mov	r3, r0
 80267d4:	73bb      	strb	r3, [r7, #14]
      static_cast<BuiltinOperator>(op_code->deprecated_builtin_code()));
 80267d6:	6878      	ldr	r0, [r7, #4]
 80267d8:	f7ff ffd0 	bl	802677c <_ZNK6tflite12OperatorCode23deprecated_builtin_codeEv>
 80267dc:	4603      	mov	r3, r0
 80267de:	b2db      	uxtb	r3, r3
 80267e0:	73fb      	strb	r3, [r7, #15]
 80267e2:	f107 020f 	add.w	r2, r7, #15
 80267e6:	f107 030e 	add.w	r3, r7, #14
 80267ea:	4611      	mov	r1, r2
 80267ec:	4618      	mov	r0, r3
 80267ee:	f000 f806 	bl	80267fe <_ZSt3maxIN6tflite15BuiltinOperatorEERKT_S4_S4_>
 80267f2:	4603      	mov	r3, r0
 80267f4:	781b      	ldrb	r3, [r3, #0]
}
 80267f6:	4618      	mov	r0, r3
 80267f8:	3710      	adds	r7, #16
 80267fa:	46bd      	mov	sp, r7
 80267fc:	bd80      	pop	{r7, pc}

080267fe <_ZSt3maxIN6tflite15BuiltinOperatorEERKT_S4_S4_>:
    max(const _Tp& __a, const _Tp& __b)
 80267fe:	b480      	push	{r7}
 8026800:	b083      	sub	sp, #12
 8026802:	af00      	add	r7, sp, #0
 8026804:	6078      	str	r0, [r7, #4]
 8026806:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8026808:	687b      	ldr	r3, [r7, #4]
 802680a:	781a      	ldrb	r2, [r3, #0]
 802680c:	683b      	ldr	r3, [r7, #0]
 802680e:	781b      	ldrb	r3, [r3, #0]
 8026810:	429a      	cmp	r2, r3
 8026812:	d201      	bcs.n	8026818 <_ZSt3maxIN6tflite15BuiltinOperatorEERKT_S4_S4_+0x1a>
	return __b;
 8026814:	683b      	ldr	r3, [r7, #0]
 8026816:	e000      	b.n	802681a <_ZSt3maxIN6tflite15BuiltinOperatorEERKT_S4_S4_+0x1c>
      return __a;
 8026818:	687b      	ldr	r3, [r7, #4]
    }
 802681a:	4618      	mov	r0, r3
 802681c:	370c      	adds	r7, #12
 802681e:	46bd      	mov	sp, r7
 8026820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026824:	4770      	bx	lr

08026826 <_ZdlPv>:
 8026826:	f000 bad9 	b.w	8026ddc <free>

0802682a <_ZdlPvj>:
 802682a:	f7ff bffc 	b.w	8026826 <_ZdlPv>

0802682e <__cxa_guard_acquire>:
 802682e:	6803      	ldr	r3, [r0, #0]
 8026830:	07db      	lsls	r3, r3, #31
 8026832:	d406      	bmi.n	8026842 <__cxa_guard_acquire+0x14>
 8026834:	7843      	ldrb	r3, [r0, #1]
 8026836:	b103      	cbz	r3, 802683a <__cxa_guard_acquire+0xc>
 8026838:	deff      	udf	#255	; 0xff
 802683a:	2301      	movs	r3, #1
 802683c:	7043      	strb	r3, [r0, #1]
 802683e:	4618      	mov	r0, r3
 8026840:	4770      	bx	lr
 8026842:	2000      	movs	r0, #0
 8026844:	4770      	bx	lr

08026846 <__cxa_guard_release>:
 8026846:	2301      	movs	r3, #1
 8026848:	6003      	str	r3, [r0, #0]
 802684a:	4770      	bx	lr

0802684c <__cxa_pure_virtual>:
 802684c:	b508      	push	{r3, lr}
 802684e:	f000 f80d 	bl	802686c <_ZSt9terminatev>

08026852 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8026852:	b508      	push	{r3, lr}
 8026854:	4780      	blx	r0
 8026856:	f000 fa52 	bl	8026cfe <abort>
	...

0802685c <_ZSt13get_terminatev>:
 802685c:	4b02      	ldr	r3, [pc, #8]	; (8026868 <_ZSt13get_terminatev+0xc>)
 802685e:	6818      	ldr	r0, [r3, #0]
 8026860:	f3bf 8f5b 	dmb	ish
 8026864:	4770      	bx	lr
 8026866:	bf00      	nop
 8026868:	20000054 	.word	0x20000054

0802686c <_ZSt9terminatev>:
 802686c:	b508      	push	{r3, lr}
 802686e:	f7ff fff5 	bl	802685c <_ZSt13get_terminatev>
 8026872:	f7ff ffee 	bl	8026852 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08026878 <floor>:
 8026878:	ec51 0b10 	vmov	r0, r1, d0
 802687c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026880:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8026884:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8026888:	2e13      	cmp	r6, #19
 802688a:	ee10 5a10 	vmov	r5, s0
 802688e:	ee10 8a10 	vmov	r8, s0
 8026892:	460c      	mov	r4, r1
 8026894:	dc32      	bgt.n	80268fc <floor+0x84>
 8026896:	2e00      	cmp	r6, #0
 8026898:	da14      	bge.n	80268c4 <floor+0x4c>
 802689a:	a333      	add	r3, pc, #204	; (adr r3, 8026968 <floor+0xf0>)
 802689c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80268a0:	f7d9 fd26 	bl	80002f0 <__adddf3>
 80268a4:	2200      	movs	r2, #0
 80268a6:	2300      	movs	r3, #0
 80268a8:	f7da f968 	bl	8000b7c <__aeabi_dcmpgt>
 80268ac:	b138      	cbz	r0, 80268be <floor+0x46>
 80268ae:	2c00      	cmp	r4, #0
 80268b0:	da57      	bge.n	8026962 <floor+0xea>
 80268b2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80268b6:	431d      	orrs	r5, r3
 80268b8:	d001      	beq.n	80268be <floor+0x46>
 80268ba:	4c2d      	ldr	r4, [pc, #180]	; (8026970 <floor+0xf8>)
 80268bc:	2500      	movs	r5, #0
 80268be:	4621      	mov	r1, r4
 80268c0:	4628      	mov	r0, r5
 80268c2:	e025      	b.n	8026910 <floor+0x98>
 80268c4:	4f2b      	ldr	r7, [pc, #172]	; (8026974 <floor+0xfc>)
 80268c6:	4137      	asrs	r7, r6
 80268c8:	ea01 0307 	and.w	r3, r1, r7
 80268cc:	4303      	orrs	r3, r0
 80268ce:	d01f      	beq.n	8026910 <floor+0x98>
 80268d0:	a325      	add	r3, pc, #148	; (adr r3, 8026968 <floor+0xf0>)
 80268d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80268d6:	f7d9 fd0b 	bl	80002f0 <__adddf3>
 80268da:	2200      	movs	r2, #0
 80268dc:	2300      	movs	r3, #0
 80268de:	f7da f94d 	bl	8000b7c <__aeabi_dcmpgt>
 80268e2:	2800      	cmp	r0, #0
 80268e4:	d0eb      	beq.n	80268be <floor+0x46>
 80268e6:	2c00      	cmp	r4, #0
 80268e8:	bfbe      	ittt	lt
 80268ea:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80268ee:	fa43 f606 	asrlt.w	r6, r3, r6
 80268f2:	19a4      	addlt	r4, r4, r6
 80268f4:	ea24 0407 	bic.w	r4, r4, r7
 80268f8:	2500      	movs	r5, #0
 80268fa:	e7e0      	b.n	80268be <floor+0x46>
 80268fc:	2e33      	cmp	r6, #51	; 0x33
 80268fe:	dd0b      	ble.n	8026918 <floor+0xa0>
 8026900:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8026904:	d104      	bne.n	8026910 <floor+0x98>
 8026906:	ee10 2a10 	vmov	r2, s0
 802690a:	460b      	mov	r3, r1
 802690c:	f7d9 fcf0 	bl	80002f0 <__adddf3>
 8026910:	ec41 0b10 	vmov	d0, r0, r1
 8026914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026918:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 802691c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8026920:	fa23 f707 	lsr.w	r7, r3, r7
 8026924:	4207      	tst	r7, r0
 8026926:	d0f3      	beq.n	8026910 <floor+0x98>
 8026928:	a30f      	add	r3, pc, #60	; (adr r3, 8026968 <floor+0xf0>)
 802692a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802692e:	f7d9 fcdf 	bl	80002f0 <__adddf3>
 8026932:	2200      	movs	r2, #0
 8026934:	2300      	movs	r3, #0
 8026936:	f7da f921 	bl	8000b7c <__aeabi_dcmpgt>
 802693a:	2800      	cmp	r0, #0
 802693c:	d0bf      	beq.n	80268be <floor+0x46>
 802693e:	2c00      	cmp	r4, #0
 8026940:	da02      	bge.n	8026948 <floor+0xd0>
 8026942:	2e14      	cmp	r6, #20
 8026944:	d103      	bne.n	802694e <floor+0xd6>
 8026946:	3401      	adds	r4, #1
 8026948:	ea25 0507 	bic.w	r5, r5, r7
 802694c:	e7b7      	b.n	80268be <floor+0x46>
 802694e:	2301      	movs	r3, #1
 8026950:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8026954:	fa03 f606 	lsl.w	r6, r3, r6
 8026958:	4435      	add	r5, r6
 802695a:	4545      	cmp	r5, r8
 802695c:	bf38      	it	cc
 802695e:	18e4      	addcc	r4, r4, r3
 8026960:	e7f2      	b.n	8026948 <floor+0xd0>
 8026962:	2500      	movs	r5, #0
 8026964:	462c      	mov	r4, r5
 8026966:	e7aa      	b.n	80268be <floor+0x46>
 8026968:	8800759c 	.word	0x8800759c
 802696c:	7e37e43c 	.word	0x7e37e43c
 8026970:	bff00000 	.word	0xbff00000
 8026974:	000fffff 	.word	0x000fffff

08026978 <frexp>:
 8026978:	b570      	push	{r4, r5, r6, lr}
 802697a:	2100      	movs	r1, #0
 802697c:	ec55 4b10 	vmov	r4, r5, d0
 8026980:	6001      	str	r1, [r0, #0]
 8026982:	4916      	ldr	r1, [pc, #88]	; (80269dc <frexp+0x64>)
 8026984:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8026988:	428a      	cmp	r2, r1
 802698a:	4606      	mov	r6, r0
 802698c:	462b      	mov	r3, r5
 802698e:	dc22      	bgt.n	80269d6 <frexp+0x5e>
 8026990:	ee10 1a10 	vmov	r1, s0
 8026994:	4311      	orrs	r1, r2
 8026996:	d01e      	beq.n	80269d6 <frexp+0x5e>
 8026998:	4911      	ldr	r1, [pc, #68]	; (80269e0 <frexp+0x68>)
 802699a:	4029      	ands	r1, r5
 802699c:	b969      	cbnz	r1, 80269ba <frexp+0x42>
 802699e:	4b11      	ldr	r3, [pc, #68]	; (80269e4 <frexp+0x6c>)
 80269a0:	2200      	movs	r2, #0
 80269a2:	ee10 0a10 	vmov	r0, s0
 80269a6:	4629      	mov	r1, r5
 80269a8:	f7d9 fe58 	bl	800065c <__aeabi_dmul>
 80269ac:	460b      	mov	r3, r1
 80269ae:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80269b2:	f06f 0135 	mvn.w	r1, #53	; 0x35
 80269b6:	4604      	mov	r4, r0
 80269b8:	6031      	str	r1, [r6, #0]
 80269ba:	6831      	ldr	r1, [r6, #0]
 80269bc:	1512      	asrs	r2, r2, #20
 80269be:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80269c2:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 80269c6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80269ca:	440a      	add	r2, r1
 80269cc:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 80269d0:	6032      	str	r2, [r6, #0]
 80269d2:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 80269d6:	ec45 4b10 	vmov	d0, r4, r5
 80269da:	bd70      	pop	{r4, r5, r6, pc}
 80269dc:	7fefffff 	.word	0x7fefffff
 80269e0:	7ff00000 	.word	0x7ff00000
 80269e4:	43500000 	.word	0x43500000

080269e8 <round>:
 80269e8:	ec51 0b10 	vmov	r0, r1, d0
 80269ec:	b570      	push	{r4, r5, r6, lr}
 80269ee:	f3c1 550a 	ubfx	r5, r1, #20, #11
 80269f2:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 80269f6:	2c13      	cmp	r4, #19
 80269f8:	ee10 2a10 	vmov	r2, s0
 80269fc:	460b      	mov	r3, r1
 80269fe:	dc19      	bgt.n	8026a34 <round+0x4c>
 8026a00:	2c00      	cmp	r4, #0
 8026a02:	da09      	bge.n	8026a18 <round+0x30>
 8026a04:	3401      	adds	r4, #1
 8026a06:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8026a0a:	d103      	bne.n	8026a14 <round+0x2c>
 8026a0c:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8026a10:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8026a14:	2100      	movs	r1, #0
 8026a16:	e028      	b.n	8026a6a <round+0x82>
 8026a18:	4d15      	ldr	r5, [pc, #84]	; (8026a70 <round+0x88>)
 8026a1a:	4125      	asrs	r5, r4
 8026a1c:	ea01 0605 	and.w	r6, r1, r5
 8026a20:	4332      	orrs	r2, r6
 8026a22:	d00e      	beq.n	8026a42 <round+0x5a>
 8026a24:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8026a28:	fa42 f404 	asr.w	r4, r2, r4
 8026a2c:	4423      	add	r3, r4
 8026a2e:	ea23 0305 	bic.w	r3, r3, r5
 8026a32:	e7ef      	b.n	8026a14 <round+0x2c>
 8026a34:	2c33      	cmp	r4, #51	; 0x33
 8026a36:	dd07      	ble.n	8026a48 <round+0x60>
 8026a38:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8026a3c:	d101      	bne.n	8026a42 <round+0x5a>
 8026a3e:	f7d9 fc57 	bl	80002f0 <__adddf3>
 8026a42:	ec41 0b10 	vmov	d0, r0, r1
 8026a46:	bd70      	pop	{r4, r5, r6, pc}
 8026a48:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8026a4c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8026a50:	40f5      	lsrs	r5, r6
 8026a52:	4228      	tst	r0, r5
 8026a54:	d0f5      	beq.n	8026a42 <round+0x5a>
 8026a56:	2101      	movs	r1, #1
 8026a58:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8026a5c:	fa01 f404 	lsl.w	r4, r1, r4
 8026a60:	1912      	adds	r2, r2, r4
 8026a62:	bf28      	it	cs
 8026a64:	185b      	addcs	r3, r3, r1
 8026a66:	ea22 0105 	bic.w	r1, r2, r5
 8026a6a:	4608      	mov	r0, r1
 8026a6c:	4619      	mov	r1, r3
 8026a6e:	e7e8      	b.n	8026a42 <round+0x5a>
 8026a70:	000fffff 	.word	0x000fffff

08026a74 <roundf>:
 8026a74:	ee10 0a10 	vmov	r0, s0
 8026a78:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8026a7c:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 8026a80:	2a16      	cmp	r2, #22
 8026a82:	dc15      	bgt.n	8026ab0 <roundf+0x3c>
 8026a84:	2a00      	cmp	r2, #0
 8026a86:	da08      	bge.n	8026a9a <roundf+0x26>
 8026a88:	3201      	adds	r2, #1
 8026a8a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8026a8e:	d101      	bne.n	8026a94 <roundf+0x20>
 8026a90:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8026a94:	ee00 3a10 	vmov	s0, r3
 8026a98:	4770      	bx	lr
 8026a9a:	4908      	ldr	r1, [pc, #32]	; (8026abc <roundf+0x48>)
 8026a9c:	4111      	asrs	r1, r2
 8026a9e:	4208      	tst	r0, r1
 8026aa0:	d0fa      	beq.n	8026a98 <roundf+0x24>
 8026aa2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8026aa6:	4113      	asrs	r3, r2
 8026aa8:	4403      	add	r3, r0
 8026aaa:	ea23 0301 	bic.w	r3, r3, r1
 8026aae:	e7f1      	b.n	8026a94 <roundf+0x20>
 8026ab0:	2a80      	cmp	r2, #128	; 0x80
 8026ab2:	d1f1      	bne.n	8026a98 <roundf+0x24>
 8026ab4:	ee30 0a00 	vadd.f32	s0, s0, s0
 8026ab8:	4770      	bx	lr
 8026aba:	bf00      	nop
 8026abc:	007fffff 	.word	0x007fffff

08026ac0 <expf>:
 8026ac0:	b508      	push	{r3, lr}
 8026ac2:	ed2d 8b02 	vpush	{d8}
 8026ac6:	eef0 8a40 	vmov.f32	s17, s0
 8026aca:	f000 f837 	bl	8026b3c <__ieee754_expf>
 8026ace:	4b16      	ldr	r3, [pc, #88]	; (8026b28 <expf+0x68>)
 8026ad0:	f993 3000 	ldrsb.w	r3, [r3]
 8026ad4:	3301      	adds	r3, #1
 8026ad6:	eeb0 8a40 	vmov.f32	s16, s0
 8026ada:	d011      	beq.n	8026b00 <expf+0x40>
 8026adc:	eeb0 0a68 	vmov.f32	s0, s17
 8026ae0:	f000 f900 	bl	8026ce4 <finitef>
 8026ae4:	b160      	cbz	r0, 8026b00 <expf+0x40>
 8026ae6:	eddf 7a11 	vldr	s15, [pc, #68]	; 8026b2c <expf+0x6c>
 8026aea:	eef4 8ae7 	vcmpe.f32	s17, s15
 8026aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026af2:	dd0a      	ble.n	8026b0a <expf+0x4a>
 8026af4:	f000 f92e 	bl	8026d54 <__errno>
 8026af8:	ed9f 8a0d 	vldr	s16, [pc, #52]	; 8026b30 <expf+0x70>
 8026afc:	2322      	movs	r3, #34	; 0x22
 8026afe:	6003      	str	r3, [r0, #0]
 8026b00:	eeb0 0a48 	vmov.f32	s0, s16
 8026b04:	ecbd 8b02 	vpop	{d8}
 8026b08:	bd08      	pop	{r3, pc}
 8026b0a:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8026b34 <expf+0x74>
 8026b0e:	eef4 8ae7 	vcmpe.f32	s17, s15
 8026b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026b16:	d5f3      	bpl.n	8026b00 <expf+0x40>
 8026b18:	f000 f91c 	bl	8026d54 <__errno>
 8026b1c:	2322      	movs	r3, #34	; 0x22
 8026b1e:	ed9f 8a06 	vldr	s16, [pc, #24]	; 8026b38 <expf+0x78>
 8026b22:	6003      	str	r3, [r0, #0]
 8026b24:	e7ec      	b.n	8026b00 <expf+0x40>
 8026b26:	bf00      	nop
 8026b28:	20000058 	.word	0x20000058
 8026b2c:	42b17180 	.word	0x42b17180
 8026b30:	7f800000 	.word	0x7f800000
 8026b34:	c2cff1b5 	.word	0xc2cff1b5
 8026b38:	00000000 	.word	0x00000000

08026b3c <__ieee754_expf>:
 8026b3c:	ee10 2a10 	vmov	r2, s0
 8026b40:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8026b44:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8026b48:	d902      	bls.n	8026b50 <__ieee754_expf+0x14>
 8026b4a:	ee30 0a00 	vadd.f32	s0, s0, s0
 8026b4e:	4770      	bx	lr
 8026b50:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 8026b54:	d106      	bne.n	8026b64 <__ieee754_expf+0x28>
 8026b56:	eddf 7a51 	vldr	s15, [pc, #324]	; 8026c9c <__ieee754_expf+0x160>
 8026b5a:	2b00      	cmp	r3, #0
 8026b5c:	bf18      	it	ne
 8026b5e:	eeb0 0a67 	vmovne.f32	s0, s15
 8026b62:	4770      	bx	lr
 8026b64:	484e      	ldr	r0, [pc, #312]	; (8026ca0 <__ieee754_expf+0x164>)
 8026b66:	4282      	cmp	r2, r0
 8026b68:	dd04      	ble.n	8026b74 <__ieee754_expf+0x38>
 8026b6a:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 8026ca4 <__ieee754_expf+0x168>
 8026b6e:	ee20 0a00 	vmul.f32	s0, s0, s0
 8026b72:	4770      	bx	lr
 8026b74:	2a00      	cmp	r2, #0
 8026b76:	da03      	bge.n	8026b80 <__ieee754_expf+0x44>
 8026b78:	4a4b      	ldr	r2, [pc, #300]	; (8026ca8 <__ieee754_expf+0x16c>)
 8026b7a:	4291      	cmp	r1, r2
 8026b7c:	f200 808a 	bhi.w	8026c94 <__ieee754_expf+0x158>
 8026b80:	4a4a      	ldr	r2, [pc, #296]	; (8026cac <__ieee754_expf+0x170>)
 8026b82:	4291      	cmp	r1, r2
 8026b84:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8026b88:	d954      	bls.n	8026c34 <__ieee754_expf+0xf8>
 8026b8a:	4a49      	ldr	r2, [pc, #292]	; (8026cb0 <__ieee754_expf+0x174>)
 8026b8c:	4291      	cmp	r1, r2
 8026b8e:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8026b92:	d836      	bhi.n	8026c02 <__ieee754_expf+0xc6>
 8026b94:	4947      	ldr	r1, [pc, #284]	; (8026cb4 <__ieee754_expf+0x178>)
 8026b96:	4411      	add	r1, r2
 8026b98:	ed91 7a00 	vldr	s14, [r1]
 8026b9c:	4946      	ldr	r1, [pc, #280]	; (8026cb8 <__ieee754_expf+0x17c>)
 8026b9e:	440a      	add	r2, r1
 8026ba0:	edd2 7a00 	vldr	s15, [r2]
 8026ba4:	ee30 7a47 	vsub.f32	s14, s0, s14
 8026ba8:	f1c3 0201 	rsb	r2, r3, #1
 8026bac:	1ad2      	subs	r2, r2, r3
 8026bae:	ee37 0a67 	vsub.f32	s0, s14, s15
 8026bb2:	ee60 6a00 	vmul.f32	s13, s0, s0
 8026bb6:	eddf 5a41 	vldr	s11, [pc, #260]	; 8026cbc <__ieee754_expf+0x180>
 8026bba:	ed9f 5a41 	vldr	s10, [pc, #260]	; 8026cc0 <__ieee754_expf+0x184>
 8026bbe:	eea6 5aa5 	vfma.f32	s10, s13, s11
 8026bc2:	eddf 5a40 	vldr	s11, [pc, #256]	; 8026cc4 <__ieee754_expf+0x188>
 8026bc6:	eee5 5a26 	vfma.f32	s11, s10, s13
 8026bca:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 8026cc8 <__ieee754_expf+0x18c>
 8026bce:	eea5 5aa6 	vfma.f32	s10, s11, s13
 8026bd2:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8026ccc <__ieee754_expf+0x190>
 8026bd6:	eee5 5a26 	vfma.f32	s11, s10, s13
 8026bda:	eeb0 5a40 	vmov.f32	s10, s0
 8026bde:	eea5 5ae6 	vfms.f32	s10, s11, s13
 8026be2:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8026be6:	eef0 6a45 	vmov.f32	s13, s10
 8026bea:	ee20 5a05 	vmul.f32	s10, s0, s10
 8026bee:	bb92      	cbnz	r2, 8026c56 <__ieee754_expf+0x11a>
 8026bf0:	ee76 6ae5 	vsub.f32	s13, s13, s11
 8026bf4:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8026bf8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8026bfc:	ee36 0a40 	vsub.f32	s0, s12, s0
 8026c00:	4770      	bx	lr
 8026c02:	4b33      	ldr	r3, [pc, #204]	; (8026cd0 <__ieee754_expf+0x194>)
 8026c04:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8026cd4 <__ieee754_expf+0x198>
 8026c08:	4413      	add	r3, r2
 8026c0a:	edd3 7a00 	vldr	s15, [r3]
 8026c0e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8026c12:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8026cd8 <__ieee754_expf+0x19c>
 8026c16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8026c1a:	ee17 2a90 	vmov	r2, s15
 8026c1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8026c22:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8026c26:	eeb0 7a40 	vmov.f32	s14, s0
 8026c2a:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8026cdc <__ieee754_expf+0x1a0>
 8026c2e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8026c32:	e7bc      	b.n	8026bae <__ieee754_expf+0x72>
 8026c34:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 8026c38:	d20b      	bcs.n	8026c52 <__ieee754_expf+0x116>
 8026c3a:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8026ca4 <__ieee754_expf+0x168>
 8026c3e:	ee70 6a26 	vadd.f32	s13, s0, s13
 8026c42:	eef4 6ac6 	vcmpe.f32	s13, s12
 8026c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026c4a:	dd02      	ble.n	8026c52 <__ieee754_expf+0x116>
 8026c4c:	ee30 0a06 	vadd.f32	s0, s0, s12
 8026c50:	4770      	bx	lr
 8026c52:	2200      	movs	r2, #0
 8026c54:	e7ad      	b.n	8026bb2 <__ieee754_expf+0x76>
 8026c56:	ee75 6ae6 	vsub.f32	s13, s11, s13
 8026c5a:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8026c5e:	ee85 0a26 	vdiv.f32	s0, s10, s13
 8026c62:	bfb8      	it	lt
 8026c64:	3264      	addlt	r2, #100	; 0x64
 8026c66:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8026c6a:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8026c6e:	ee76 7a40 	vsub.f32	s15, s12, s0
 8026c72:	ee17 3a90 	vmov	r3, s15
 8026c76:	bfab      	itete	ge
 8026c78:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8026c7c:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8026c80:	ee00 3a10 	vmovge	s0, r3
 8026c84:	eddf 7a16 	vldrlt	s15, [pc, #88]	; 8026ce0 <__ieee754_expf+0x1a4>
 8026c88:	bfbc      	itt	lt
 8026c8a:	ee00 3a10 	vmovlt	s0, r3
 8026c8e:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8026c92:	4770      	bx	lr
 8026c94:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8026c9c <__ieee754_expf+0x160>
 8026c98:	4770      	bx	lr
 8026c9a:	bf00      	nop
 8026c9c:	00000000 	.word	0x00000000
 8026ca0:	42b17217 	.word	0x42b17217
 8026ca4:	7149f2ca 	.word	0x7149f2ca
 8026ca8:	42cff1b5 	.word	0x42cff1b5
 8026cac:	3eb17218 	.word	0x3eb17218
 8026cb0:	3f851591 	.word	0x3f851591
 8026cb4:	08089600 	.word	0x08089600
 8026cb8:	08089608 	.word	0x08089608
 8026cbc:	3331bb4c 	.word	0x3331bb4c
 8026cc0:	b5ddea0e 	.word	0xb5ddea0e
 8026cc4:	388ab355 	.word	0x388ab355
 8026cc8:	bb360b61 	.word	0xbb360b61
 8026ccc:	3e2aaaab 	.word	0x3e2aaaab
 8026cd0:	080895f8 	.word	0x080895f8
 8026cd4:	3fb8aa3b 	.word	0x3fb8aa3b
 8026cd8:	3f317180 	.word	0x3f317180
 8026cdc:	3717f7d1 	.word	0x3717f7d1
 8026ce0:	0d800000 	.word	0x0d800000

08026ce4 <finitef>:
 8026ce4:	b082      	sub	sp, #8
 8026ce6:	ed8d 0a01 	vstr	s0, [sp, #4]
 8026cea:	9801      	ldr	r0, [sp, #4]
 8026cec:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8026cf0:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8026cf4:	bfac      	ite	ge
 8026cf6:	2000      	movge	r0, #0
 8026cf8:	2001      	movlt	r0, #1
 8026cfa:	b002      	add	sp, #8
 8026cfc:	4770      	bx	lr

08026cfe <abort>:
 8026cfe:	b508      	push	{r3, lr}
 8026d00:	2006      	movs	r0, #6
 8026d02:	f000 fc73 	bl	80275ec <raise>
 8026d06:	2001      	movs	r0, #1
 8026d08:	f7db fe5a 	bl	80029c0 <_exit>

08026d0c <__assert_func>:
 8026d0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8026d0e:	4614      	mov	r4, r2
 8026d10:	461a      	mov	r2, r3
 8026d12:	4b09      	ldr	r3, [pc, #36]	; (8026d38 <__assert_func+0x2c>)
 8026d14:	681b      	ldr	r3, [r3, #0]
 8026d16:	4605      	mov	r5, r0
 8026d18:	68d8      	ldr	r0, [r3, #12]
 8026d1a:	b14c      	cbz	r4, 8026d30 <__assert_func+0x24>
 8026d1c:	4b07      	ldr	r3, [pc, #28]	; (8026d3c <__assert_func+0x30>)
 8026d1e:	9100      	str	r1, [sp, #0]
 8026d20:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8026d24:	4906      	ldr	r1, [pc, #24]	; (8026d40 <__assert_func+0x34>)
 8026d26:	462b      	mov	r3, r5
 8026d28:	f000 f81a 	bl	8026d60 <fiprintf>
 8026d2c:	f7ff ffe7 	bl	8026cfe <abort>
 8026d30:	4b04      	ldr	r3, [pc, #16]	; (8026d44 <__assert_func+0x38>)
 8026d32:	461c      	mov	r4, r3
 8026d34:	e7f3      	b.n	8026d1e <__assert_func+0x12>
 8026d36:	bf00      	nop
 8026d38:	2000005c 	.word	0x2000005c
 8026d3c:	08089610 	.word	0x08089610
 8026d40:	0808961d 	.word	0x0808961d
 8026d44:	0808964b 	.word	0x0808964b

08026d48 <atexit>:
 8026d48:	2300      	movs	r3, #0
 8026d4a:	4601      	mov	r1, r0
 8026d4c:	461a      	mov	r2, r3
 8026d4e:	4618      	mov	r0, r3
 8026d50:	f000 be72 	b.w	8027a38 <__register_exitproc>

08026d54 <__errno>:
 8026d54:	4b01      	ldr	r3, [pc, #4]	; (8026d5c <__errno+0x8>)
 8026d56:	6818      	ldr	r0, [r3, #0]
 8026d58:	4770      	bx	lr
 8026d5a:	bf00      	nop
 8026d5c:	2000005c 	.word	0x2000005c

08026d60 <fiprintf>:
 8026d60:	b40e      	push	{r1, r2, r3}
 8026d62:	b503      	push	{r0, r1, lr}
 8026d64:	4601      	mov	r1, r0
 8026d66:	ab03      	add	r3, sp, #12
 8026d68:	4805      	ldr	r0, [pc, #20]	; (8026d80 <fiprintf+0x20>)
 8026d6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8026d6e:	6800      	ldr	r0, [r0, #0]
 8026d70:	9301      	str	r3, [sp, #4]
 8026d72:	f000 f93f 	bl	8026ff4 <_vfiprintf_r>
 8026d76:	b002      	add	sp, #8
 8026d78:	f85d eb04 	ldr.w	lr, [sp], #4
 8026d7c:	b003      	add	sp, #12
 8026d7e:	4770      	bx	lr
 8026d80:	2000005c 	.word	0x2000005c

08026d84 <__libc_init_array>:
 8026d84:	b570      	push	{r4, r5, r6, lr}
 8026d86:	4d0d      	ldr	r5, [pc, #52]	; (8026dbc <__libc_init_array+0x38>)
 8026d88:	4c0d      	ldr	r4, [pc, #52]	; (8026dc0 <__libc_init_array+0x3c>)
 8026d8a:	1b64      	subs	r4, r4, r5
 8026d8c:	10a4      	asrs	r4, r4, #2
 8026d8e:	2600      	movs	r6, #0
 8026d90:	42a6      	cmp	r6, r4
 8026d92:	d109      	bne.n	8026da8 <__libc_init_array+0x24>
 8026d94:	4d0b      	ldr	r5, [pc, #44]	; (8026dc4 <__libc_init_array+0x40>)
 8026d96:	4c0c      	ldr	r4, [pc, #48]	; (8026dc8 <__libc_init_array+0x44>)
 8026d98:	f001 fb12 	bl	80283c0 <_init>
 8026d9c:	1b64      	subs	r4, r4, r5
 8026d9e:	10a4      	asrs	r4, r4, #2
 8026da0:	2600      	movs	r6, #0
 8026da2:	42a6      	cmp	r6, r4
 8026da4:	d105      	bne.n	8026db2 <__libc_init_array+0x2e>
 8026da6:	bd70      	pop	{r4, r5, r6, pc}
 8026da8:	f855 3b04 	ldr.w	r3, [r5], #4
 8026dac:	4798      	blx	r3
 8026dae:	3601      	adds	r6, #1
 8026db0:	e7ee      	b.n	8026d90 <__libc_init_array+0xc>
 8026db2:	f855 3b04 	ldr.w	r3, [r5], #4
 8026db6:	4798      	blx	r3
 8026db8:	3601      	adds	r6, #1
 8026dba:	e7f2      	b.n	8026da2 <__libc_init_array+0x1e>
 8026dbc:	08089864 	.word	0x08089864
 8026dc0:	08089864 	.word	0x08089864
 8026dc4:	08089864 	.word	0x08089864
 8026dc8:	08089868 	.word	0x08089868

08026dcc <malloc>:
 8026dcc:	4b02      	ldr	r3, [pc, #8]	; (8026dd8 <malloc+0xc>)
 8026dce:	4601      	mov	r1, r0
 8026dd0:	6818      	ldr	r0, [r3, #0]
 8026dd2:	f000 b88b 	b.w	8026eec <_malloc_r>
 8026dd6:	bf00      	nop
 8026dd8:	2000005c 	.word	0x2000005c

08026ddc <free>:
 8026ddc:	4b02      	ldr	r3, [pc, #8]	; (8026de8 <free+0xc>)
 8026dde:	4601      	mov	r1, r0
 8026de0:	6818      	ldr	r0, [r3, #0]
 8026de2:	f000 b833 	b.w	8026e4c <_free_r>
 8026de6:	bf00      	nop
 8026de8:	2000005c 	.word	0x2000005c

08026dec <memcpy>:
 8026dec:	440a      	add	r2, r1
 8026dee:	4291      	cmp	r1, r2
 8026df0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8026df4:	d100      	bne.n	8026df8 <memcpy+0xc>
 8026df6:	4770      	bx	lr
 8026df8:	b510      	push	{r4, lr}
 8026dfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8026dfe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8026e02:	4291      	cmp	r1, r2
 8026e04:	d1f9      	bne.n	8026dfa <memcpy+0xe>
 8026e06:	bd10      	pop	{r4, pc}

08026e08 <memmove>:
 8026e08:	4288      	cmp	r0, r1
 8026e0a:	b510      	push	{r4, lr}
 8026e0c:	eb01 0402 	add.w	r4, r1, r2
 8026e10:	d902      	bls.n	8026e18 <memmove+0x10>
 8026e12:	4284      	cmp	r4, r0
 8026e14:	4623      	mov	r3, r4
 8026e16:	d807      	bhi.n	8026e28 <memmove+0x20>
 8026e18:	1e43      	subs	r3, r0, #1
 8026e1a:	42a1      	cmp	r1, r4
 8026e1c:	d008      	beq.n	8026e30 <memmove+0x28>
 8026e1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8026e22:	f803 2f01 	strb.w	r2, [r3, #1]!
 8026e26:	e7f8      	b.n	8026e1a <memmove+0x12>
 8026e28:	4402      	add	r2, r0
 8026e2a:	4601      	mov	r1, r0
 8026e2c:	428a      	cmp	r2, r1
 8026e2e:	d100      	bne.n	8026e32 <memmove+0x2a>
 8026e30:	bd10      	pop	{r4, pc}
 8026e32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8026e36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8026e3a:	e7f7      	b.n	8026e2c <memmove+0x24>

08026e3c <memset>:
 8026e3c:	4402      	add	r2, r0
 8026e3e:	4603      	mov	r3, r0
 8026e40:	4293      	cmp	r3, r2
 8026e42:	d100      	bne.n	8026e46 <memset+0xa>
 8026e44:	4770      	bx	lr
 8026e46:	f803 1b01 	strb.w	r1, [r3], #1
 8026e4a:	e7f9      	b.n	8026e40 <memset+0x4>

08026e4c <_free_r>:
 8026e4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8026e4e:	2900      	cmp	r1, #0
 8026e50:	d048      	beq.n	8026ee4 <_free_r+0x98>
 8026e52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8026e56:	9001      	str	r0, [sp, #4]
 8026e58:	2b00      	cmp	r3, #0
 8026e5a:	f1a1 0404 	sub.w	r4, r1, #4
 8026e5e:	bfb8      	it	lt
 8026e60:	18e4      	addlt	r4, r4, r3
 8026e62:	f001 f86b 	bl	8027f3c <__malloc_lock>
 8026e66:	4a20      	ldr	r2, [pc, #128]	; (8026ee8 <_free_r+0x9c>)
 8026e68:	9801      	ldr	r0, [sp, #4]
 8026e6a:	6813      	ldr	r3, [r2, #0]
 8026e6c:	4615      	mov	r5, r2
 8026e6e:	b933      	cbnz	r3, 8026e7e <_free_r+0x32>
 8026e70:	6063      	str	r3, [r4, #4]
 8026e72:	6014      	str	r4, [r2, #0]
 8026e74:	b003      	add	sp, #12
 8026e76:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8026e7a:	f001 b865 	b.w	8027f48 <__malloc_unlock>
 8026e7e:	42a3      	cmp	r3, r4
 8026e80:	d90b      	bls.n	8026e9a <_free_r+0x4e>
 8026e82:	6821      	ldr	r1, [r4, #0]
 8026e84:	1862      	adds	r2, r4, r1
 8026e86:	4293      	cmp	r3, r2
 8026e88:	bf04      	itt	eq
 8026e8a:	681a      	ldreq	r2, [r3, #0]
 8026e8c:	685b      	ldreq	r3, [r3, #4]
 8026e8e:	6063      	str	r3, [r4, #4]
 8026e90:	bf04      	itt	eq
 8026e92:	1852      	addeq	r2, r2, r1
 8026e94:	6022      	streq	r2, [r4, #0]
 8026e96:	602c      	str	r4, [r5, #0]
 8026e98:	e7ec      	b.n	8026e74 <_free_r+0x28>
 8026e9a:	461a      	mov	r2, r3
 8026e9c:	685b      	ldr	r3, [r3, #4]
 8026e9e:	b10b      	cbz	r3, 8026ea4 <_free_r+0x58>
 8026ea0:	42a3      	cmp	r3, r4
 8026ea2:	d9fa      	bls.n	8026e9a <_free_r+0x4e>
 8026ea4:	6811      	ldr	r1, [r2, #0]
 8026ea6:	1855      	adds	r5, r2, r1
 8026ea8:	42a5      	cmp	r5, r4
 8026eaa:	d10b      	bne.n	8026ec4 <_free_r+0x78>
 8026eac:	6824      	ldr	r4, [r4, #0]
 8026eae:	4421      	add	r1, r4
 8026eb0:	1854      	adds	r4, r2, r1
 8026eb2:	42a3      	cmp	r3, r4
 8026eb4:	6011      	str	r1, [r2, #0]
 8026eb6:	d1dd      	bne.n	8026e74 <_free_r+0x28>
 8026eb8:	681c      	ldr	r4, [r3, #0]
 8026eba:	685b      	ldr	r3, [r3, #4]
 8026ebc:	6053      	str	r3, [r2, #4]
 8026ebe:	4421      	add	r1, r4
 8026ec0:	6011      	str	r1, [r2, #0]
 8026ec2:	e7d7      	b.n	8026e74 <_free_r+0x28>
 8026ec4:	d902      	bls.n	8026ecc <_free_r+0x80>
 8026ec6:	230c      	movs	r3, #12
 8026ec8:	6003      	str	r3, [r0, #0]
 8026eca:	e7d3      	b.n	8026e74 <_free_r+0x28>
 8026ecc:	6825      	ldr	r5, [r4, #0]
 8026ece:	1961      	adds	r1, r4, r5
 8026ed0:	428b      	cmp	r3, r1
 8026ed2:	bf04      	itt	eq
 8026ed4:	6819      	ldreq	r1, [r3, #0]
 8026ed6:	685b      	ldreq	r3, [r3, #4]
 8026ed8:	6063      	str	r3, [r4, #4]
 8026eda:	bf04      	itt	eq
 8026edc:	1949      	addeq	r1, r1, r5
 8026ede:	6021      	streq	r1, [r4, #0]
 8026ee0:	6054      	str	r4, [r2, #4]
 8026ee2:	e7c7      	b.n	8026e74 <_free_r+0x28>
 8026ee4:	b003      	add	sp, #12
 8026ee6:	bd30      	pop	{r4, r5, pc}
 8026ee8:	20047bb4 	.word	0x20047bb4

08026eec <_malloc_r>:
 8026eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026eee:	1ccd      	adds	r5, r1, #3
 8026ef0:	f025 0503 	bic.w	r5, r5, #3
 8026ef4:	3508      	adds	r5, #8
 8026ef6:	2d0c      	cmp	r5, #12
 8026ef8:	bf38      	it	cc
 8026efa:	250c      	movcc	r5, #12
 8026efc:	2d00      	cmp	r5, #0
 8026efe:	4606      	mov	r6, r0
 8026f00:	db01      	blt.n	8026f06 <_malloc_r+0x1a>
 8026f02:	42a9      	cmp	r1, r5
 8026f04:	d903      	bls.n	8026f0e <_malloc_r+0x22>
 8026f06:	230c      	movs	r3, #12
 8026f08:	6033      	str	r3, [r6, #0]
 8026f0a:	2000      	movs	r0, #0
 8026f0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8026f0e:	f001 f815 	bl	8027f3c <__malloc_lock>
 8026f12:	4921      	ldr	r1, [pc, #132]	; (8026f98 <_malloc_r+0xac>)
 8026f14:	680a      	ldr	r2, [r1, #0]
 8026f16:	4614      	mov	r4, r2
 8026f18:	b99c      	cbnz	r4, 8026f42 <_malloc_r+0x56>
 8026f1a:	4f20      	ldr	r7, [pc, #128]	; (8026f9c <_malloc_r+0xb0>)
 8026f1c:	683b      	ldr	r3, [r7, #0]
 8026f1e:	b923      	cbnz	r3, 8026f2a <_malloc_r+0x3e>
 8026f20:	4621      	mov	r1, r4
 8026f22:	4630      	mov	r0, r6
 8026f24:	f000 fb2a 	bl	802757c <_sbrk_r>
 8026f28:	6038      	str	r0, [r7, #0]
 8026f2a:	4629      	mov	r1, r5
 8026f2c:	4630      	mov	r0, r6
 8026f2e:	f000 fb25 	bl	802757c <_sbrk_r>
 8026f32:	1c43      	adds	r3, r0, #1
 8026f34:	d123      	bne.n	8026f7e <_malloc_r+0x92>
 8026f36:	230c      	movs	r3, #12
 8026f38:	6033      	str	r3, [r6, #0]
 8026f3a:	4630      	mov	r0, r6
 8026f3c:	f001 f804 	bl	8027f48 <__malloc_unlock>
 8026f40:	e7e3      	b.n	8026f0a <_malloc_r+0x1e>
 8026f42:	6823      	ldr	r3, [r4, #0]
 8026f44:	1b5b      	subs	r3, r3, r5
 8026f46:	d417      	bmi.n	8026f78 <_malloc_r+0x8c>
 8026f48:	2b0b      	cmp	r3, #11
 8026f4a:	d903      	bls.n	8026f54 <_malloc_r+0x68>
 8026f4c:	6023      	str	r3, [r4, #0]
 8026f4e:	441c      	add	r4, r3
 8026f50:	6025      	str	r5, [r4, #0]
 8026f52:	e004      	b.n	8026f5e <_malloc_r+0x72>
 8026f54:	6863      	ldr	r3, [r4, #4]
 8026f56:	42a2      	cmp	r2, r4
 8026f58:	bf0c      	ite	eq
 8026f5a:	600b      	streq	r3, [r1, #0]
 8026f5c:	6053      	strne	r3, [r2, #4]
 8026f5e:	4630      	mov	r0, r6
 8026f60:	f000 fff2 	bl	8027f48 <__malloc_unlock>
 8026f64:	f104 000b 	add.w	r0, r4, #11
 8026f68:	1d23      	adds	r3, r4, #4
 8026f6a:	f020 0007 	bic.w	r0, r0, #7
 8026f6e:	1ac2      	subs	r2, r0, r3
 8026f70:	d0cc      	beq.n	8026f0c <_malloc_r+0x20>
 8026f72:	1a1b      	subs	r3, r3, r0
 8026f74:	50a3      	str	r3, [r4, r2]
 8026f76:	e7c9      	b.n	8026f0c <_malloc_r+0x20>
 8026f78:	4622      	mov	r2, r4
 8026f7a:	6864      	ldr	r4, [r4, #4]
 8026f7c:	e7cc      	b.n	8026f18 <_malloc_r+0x2c>
 8026f7e:	1cc4      	adds	r4, r0, #3
 8026f80:	f024 0403 	bic.w	r4, r4, #3
 8026f84:	42a0      	cmp	r0, r4
 8026f86:	d0e3      	beq.n	8026f50 <_malloc_r+0x64>
 8026f88:	1a21      	subs	r1, r4, r0
 8026f8a:	4630      	mov	r0, r6
 8026f8c:	f000 faf6 	bl	802757c <_sbrk_r>
 8026f90:	3001      	adds	r0, #1
 8026f92:	d1dd      	bne.n	8026f50 <_malloc_r+0x64>
 8026f94:	e7cf      	b.n	8026f36 <_malloc_r+0x4a>
 8026f96:	bf00      	nop
 8026f98:	20047bb4 	.word	0x20047bb4
 8026f9c:	20047bb8 	.word	0x20047bb8

08026fa0 <__sfputc_r>:
 8026fa0:	6893      	ldr	r3, [r2, #8]
 8026fa2:	3b01      	subs	r3, #1
 8026fa4:	2b00      	cmp	r3, #0
 8026fa6:	b410      	push	{r4}
 8026fa8:	6093      	str	r3, [r2, #8]
 8026faa:	da08      	bge.n	8026fbe <__sfputc_r+0x1e>
 8026fac:	6994      	ldr	r4, [r2, #24]
 8026fae:	42a3      	cmp	r3, r4
 8026fb0:	db01      	blt.n	8026fb6 <__sfputc_r+0x16>
 8026fb2:	290a      	cmp	r1, #10
 8026fb4:	d103      	bne.n	8026fbe <__sfputc_r+0x1e>
 8026fb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8026fba:	f000 bc7d 	b.w	80278b8 <__swbuf_r>
 8026fbe:	6813      	ldr	r3, [r2, #0]
 8026fc0:	1c58      	adds	r0, r3, #1
 8026fc2:	6010      	str	r0, [r2, #0]
 8026fc4:	7019      	strb	r1, [r3, #0]
 8026fc6:	4608      	mov	r0, r1
 8026fc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8026fcc:	4770      	bx	lr

08026fce <__sfputs_r>:
 8026fce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026fd0:	4606      	mov	r6, r0
 8026fd2:	460f      	mov	r7, r1
 8026fd4:	4614      	mov	r4, r2
 8026fd6:	18d5      	adds	r5, r2, r3
 8026fd8:	42ac      	cmp	r4, r5
 8026fda:	d101      	bne.n	8026fe0 <__sfputs_r+0x12>
 8026fdc:	2000      	movs	r0, #0
 8026fde:	e007      	b.n	8026ff0 <__sfputs_r+0x22>
 8026fe0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8026fe4:	463a      	mov	r2, r7
 8026fe6:	4630      	mov	r0, r6
 8026fe8:	f7ff ffda 	bl	8026fa0 <__sfputc_r>
 8026fec:	1c43      	adds	r3, r0, #1
 8026fee:	d1f3      	bne.n	8026fd8 <__sfputs_r+0xa>
 8026ff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08026ff4 <_vfiprintf_r>:
 8026ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026ff8:	460d      	mov	r5, r1
 8026ffa:	b09d      	sub	sp, #116	; 0x74
 8026ffc:	4614      	mov	r4, r2
 8026ffe:	4698      	mov	r8, r3
 8027000:	4606      	mov	r6, r0
 8027002:	b118      	cbz	r0, 802700c <_vfiprintf_r+0x18>
 8027004:	6983      	ldr	r3, [r0, #24]
 8027006:	b90b      	cbnz	r3, 802700c <_vfiprintf_r+0x18>
 8027008:	f000 fe92 	bl	8027d30 <__sinit>
 802700c:	4b89      	ldr	r3, [pc, #548]	; (8027234 <_vfiprintf_r+0x240>)
 802700e:	429d      	cmp	r5, r3
 8027010:	d11b      	bne.n	802704a <_vfiprintf_r+0x56>
 8027012:	6875      	ldr	r5, [r6, #4]
 8027014:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8027016:	07d9      	lsls	r1, r3, #31
 8027018:	d405      	bmi.n	8027026 <_vfiprintf_r+0x32>
 802701a:	89ab      	ldrh	r3, [r5, #12]
 802701c:	059a      	lsls	r2, r3, #22
 802701e:	d402      	bmi.n	8027026 <_vfiprintf_r+0x32>
 8027020:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8027022:	f000 ff23 	bl	8027e6c <__retarget_lock_acquire_recursive>
 8027026:	89ab      	ldrh	r3, [r5, #12]
 8027028:	071b      	lsls	r3, r3, #28
 802702a:	d501      	bpl.n	8027030 <_vfiprintf_r+0x3c>
 802702c:	692b      	ldr	r3, [r5, #16]
 802702e:	b9eb      	cbnz	r3, 802706c <_vfiprintf_r+0x78>
 8027030:	4629      	mov	r1, r5
 8027032:	4630      	mov	r0, r6
 8027034:	f000 fc92 	bl	802795c <__swsetup_r>
 8027038:	b1c0      	cbz	r0, 802706c <_vfiprintf_r+0x78>
 802703a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802703c:	07dc      	lsls	r4, r3, #31
 802703e:	d50e      	bpl.n	802705e <_vfiprintf_r+0x6a>
 8027040:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8027044:	b01d      	add	sp, #116	; 0x74
 8027046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802704a:	4b7b      	ldr	r3, [pc, #492]	; (8027238 <_vfiprintf_r+0x244>)
 802704c:	429d      	cmp	r5, r3
 802704e:	d101      	bne.n	8027054 <_vfiprintf_r+0x60>
 8027050:	68b5      	ldr	r5, [r6, #8]
 8027052:	e7df      	b.n	8027014 <_vfiprintf_r+0x20>
 8027054:	4b79      	ldr	r3, [pc, #484]	; (802723c <_vfiprintf_r+0x248>)
 8027056:	429d      	cmp	r5, r3
 8027058:	bf08      	it	eq
 802705a:	68f5      	ldreq	r5, [r6, #12]
 802705c:	e7da      	b.n	8027014 <_vfiprintf_r+0x20>
 802705e:	89ab      	ldrh	r3, [r5, #12]
 8027060:	0598      	lsls	r0, r3, #22
 8027062:	d4ed      	bmi.n	8027040 <_vfiprintf_r+0x4c>
 8027064:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8027066:	f000 ff03 	bl	8027e70 <__retarget_lock_release_recursive>
 802706a:	e7e9      	b.n	8027040 <_vfiprintf_r+0x4c>
 802706c:	2300      	movs	r3, #0
 802706e:	9309      	str	r3, [sp, #36]	; 0x24
 8027070:	2320      	movs	r3, #32
 8027072:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8027076:	f8cd 800c 	str.w	r8, [sp, #12]
 802707a:	2330      	movs	r3, #48	; 0x30
 802707c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8027240 <_vfiprintf_r+0x24c>
 8027080:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8027084:	f04f 0901 	mov.w	r9, #1
 8027088:	4623      	mov	r3, r4
 802708a:	469a      	mov	sl, r3
 802708c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8027090:	b10a      	cbz	r2, 8027096 <_vfiprintf_r+0xa2>
 8027092:	2a25      	cmp	r2, #37	; 0x25
 8027094:	d1f9      	bne.n	802708a <_vfiprintf_r+0x96>
 8027096:	ebba 0b04 	subs.w	fp, sl, r4
 802709a:	d00b      	beq.n	80270b4 <_vfiprintf_r+0xc0>
 802709c:	465b      	mov	r3, fp
 802709e:	4622      	mov	r2, r4
 80270a0:	4629      	mov	r1, r5
 80270a2:	4630      	mov	r0, r6
 80270a4:	f7ff ff93 	bl	8026fce <__sfputs_r>
 80270a8:	3001      	adds	r0, #1
 80270aa:	f000 80aa 	beq.w	8027202 <_vfiprintf_r+0x20e>
 80270ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80270b0:	445a      	add	r2, fp
 80270b2:	9209      	str	r2, [sp, #36]	; 0x24
 80270b4:	f89a 3000 	ldrb.w	r3, [sl]
 80270b8:	2b00      	cmp	r3, #0
 80270ba:	f000 80a2 	beq.w	8027202 <_vfiprintf_r+0x20e>
 80270be:	2300      	movs	r3, #0
 80270c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80270c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80270c8:	f10a 0a01 	add.w	sl, sl, #1
 80270cc:	9304      	str	r3, [sp, #16]
 80270ce:	9307      	str	r3, [sp, #28]
 80270d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80270d4:	931a      	str	r3, [sp, #104]	; 0x68
 80270d6:	4654      	mov	r4, sl
 80270d8:	2205      	movs	r2, #5
 80270da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80270de:	4858      	ldr	r0, [pc, #352]	; (8027240 <_vfiprintf_r+0x24c>)
 80270e0:	f7d9 f89e 	bl	8000220 <memchr>
 80270e4:	9a04      	ldr	r2, [sp, #16]
 80270e6:	b9d8      	cbnz	r0, 8027120 <_vfiprintf_r+0x12c>
 80270e8:	06d1      	lsls	r1, r2, #27
 80270ea:	bf44      	itt	mi
 80270ec:	2320      	movmi	r3, #32
 80270ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80270f2:	0713      	lsls	r3, r2, #28
 80270f4:	bf44      	itt	mi
 80270f6:	232b      	movmi	r3, #43	; 0x2b
 80270f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80270fc:	f89a 3000 	ldrb.w	r3, [sl]
 8027100:	2b2a      	cmp	r3, #42	; 0x2a
 8027102:	d015      	beq.n	8027130 <_vfiprintf_r+0x13c>
 8027104:	9a07      	ldr	r2, [sp, #28]
 8027106:	4654      	mov	r4, sl
 8027108:	2000      	movs	r0, #0
 802710a:	f04f 0c0a 	mov.w	ip, #10
 802710e:	4621      	mov	r1, r4
 8027110:	f811 3b01 	ldrb.w	r3, [r1], #1
 8027114:	3b30      	subs	r3, #48	; 0x30
 8027116:	2b09      	cmp	r3, #9
 8027118:	d94e      	bls.n	80271b8 <_vfiprintf_r+0x1c4>
 802711a:	b1b0      	cbz	r0, 802714a <_vfiprintf_r+0x156>
 802711c:	9207      	str	r2, [sp, #28]
 802711e:	e014      	b.n	802714a <_vfiprintf_r+0x156>
 8027120:	eba0 0308 	sub.w	r3, r0, r8
 8027124:	fa09 f303 	lsl.w	r3, r9, r3
 8027128:	4313      	orrs	r3, r2
 802712a:	9304      	str	r3, [sp, #16]
 802712c:	46a2      	mov	sl, r4
 802712e:	e7d2      	b.n	80270d6 <_vfiprintf_r+0xe2>
 8027130:	9b03      	ldr	r3, [sp, #12]
 8027132:	1d19      	adds	r1, r3, #4
 8027134:	681b      	ldr	r3, [r3, #0]
 8027136:	9103      	str	r1, [sp, #12]
 8027138:	2b00      	cmp	r3, #0
 802713a:	bfbb      	ittet	lt
 802713c:	425b      	neglt	r3, r3
 802713e:	f042 0202 	orrlt.w	r2, r2, #2
 8027142:	9307      	strge	r3, [sp, #28]
 8027144:	9307      	strlt	r3, [sp, #28]
 8027146:	bfb8      	it	lt
 8027148:	9204      	strlt	r2, [sp, #16]
 802714a:	7823      	ldrb	r3, [r4, #0]
 802714c:	2b2e      	cmp	r3, #46	; 0x2e
 802714e:	d10c      	bne.n	802716a <_vfiprintf_r+0x176>
 8027150:	7863      	ldrb	r3, [r4, #1]
 8027152:	2b2a      	cmp	r3, #42	; 0x2a
 8027154:	d135      	bne.n	80271c2 <_vfiprintf_r+0x1ce>
 8027156:	9b03      	ldr	r3, [sp, #12]
 8027158:	1d1a      	adds	r2, r3, #4
 802715a:	681b      	ldr	r3, [r3, #0]
 802715c:	9203      	str	r2, [sp, #12]
 802715e:	2b00      	cmp	r3, #0
 8027160:	bfb8      	it	lt
 8027162:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8027166:	3402      	adds	r4, #2
 8027168:	9305      	str	r3, [sp, #20]
 802716a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8027250 <_vfiprintf_r+0x25c>
 802716e:	7821      	ldrb	r1, [r4, #0]
 8027170:	2203      	movs	r2, #3
 8027172:	4650      	mov	r0, sl
 8027174:	f7d9 f854 	bl	8000220 <memchr>
 8027178:	b140      	cbz	r0, 802718c <_vfiprintf_r+0x198>
 802717a:	2340      	movs	r3, #64	; 0x40
 802717c:	eba0 000a 	sub.w	r0, r0, sl
 8027180:	fa03 f000 	lsl.w	r0, r3, r0
 8027184:	9b04      	ldr	r3, [sp, #16]
 8027186:	4303      	orrs	r3, r0
 8027188:	3401      	adds	r4, #1
 802718a:	9304      	str	r3, [sp, #16]
 802718c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027190:	482c      	ldr	r0, [pc, #176]	; (8027244 <_vfiprintf_r+0x250>)
 8027192:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8027196:	2206      	movs	r2, #6
 8027198:	f7d9 f842 	bl	8000220 <memchr>
 802719c:	2800      	cmp	r0, #0
 802719e:	d03f      	beq.n	8027220 <_vfiprintf_r+0x22c>
 80271a0:	4b29      	ldr	r3, [pc, #164]	; (8027248 <_vfiprintf_r+0x254>)
 80271a2:	bb1b      	cbnz	r3, 80271ec <_vfiprintf_r+0x1f8>
 80271a4:	9b03      	ldr	r3, [sp, #12]
 80271a6:	3307      	adds	r3, #7
 80271a8:	f023 0307 	bic.w	r3, r3, #7
 80271ac:	3308      	adds	r3, #8
 80271ae:	9303      	str	r3, [sp, #12]
 80271b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80271b2:	443b      	add	r3, r7
 80271b4:	9309      	str	r3, [sp, #36]	; 0x24
 80271b6:	e767      	b.n	8027088 <_vfiprintf_r+0x94>
 80271b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80271bc:	460c      	mov	r4, r1
 80271be:	2001      	movs	r0, #1
 80271c0:	e7a5      	b.n	802710e <_vfiprintf_r+0x11a>
 80271c2:	2300      	movs	r3, #0
 80271c4:	3401      	adds	r4, #1
 80271c6:	9305      	str	r3, [sp, #20]
 80271c8:	4619      	mov	r1, r3
 80271ca:	f04f 0c0a 	mov.w	ip, #10
 80271ce:	4620      	mov	r0, r4
 80271d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80271d4:	3a30      	subs	r2, #48	; 0x30
 80271d6:	2a09      	cmp	r2, #9
 80271d8:	d903      	bls.n	80271e2 <_vfiprintf_r+0x1ee>
 80271da:	2b00      	cmp	r3, #0
 80271dc:	d0c5      	beq.n	802716a <_vfiprintf_r+0x176>
 80271de:	9105      	str	r1, [sp, #20]
 80271e0:	e7c3      	b.n	802716a <_vfiprintf_r+0x176>
 80271e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80271e6:	4604      	mov	r4, r0
 80271e8:	2301      	movs	r3, #1
 80271ea:	e7f0      	b.n	80271ce <_vfiprintf_r+0x1da>
 80271ec:	ab03      	add	r3, sp, #12
 80271ee:	9300      	str	r3, [sp, #0]
 80271f0:	462a      	mov	r2, r5
 80271f2:	4b16      	ldr	r3, [pc, #88]	; (802724c <_vfiprintf_r+0x258>)
 80271f4:	a904      	add	r1, sp, #16
 80271f6:	4630      	mov	r0, r6
 80271f8:	f3af 8000 	nop.w
 80271fc:	4607      	mov	r7, r0
 80271fe:	1c78      	adds	r0, r7, #1
 8027200:	d1d6      	bne.n	80271b0 <_vfiprintf_r+0x1bc>
 8027202:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8027204:	07d9      	lsls	r1, r3, #31
 8027206:	d405      	bmi.n	8027214 <_vfiprintf_r+0x220>
 8027208:	89ab      	ldrh	r3, [r5, #12]
 802720a:	059a      	lsls	r2, r3, #22
 802720c:	d402      	bmi.n	8027214 <_vfiprintf_r+0x220>
 802720e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8027210:	f000 fe2e 	bl	8027e70 <__retarget_lock_release_recursive>
 8027214:	89ab      	ldrh	r3, [r5, #12]
 8027216:	065b      	lsls	r3, r3, #25
 8027218:	f53f af12 	bmi.w	8027040 <_vfiprintf_r+0x4c>
 802721c:	9809      	ldr	r0, [sp, #36]	; 0x24
 802721e:	e711      	b.n	8027044 <_vfiprintf_r+0x50>
 8027220:	ab03      	add	r3, sp, #12
 8027222:	9300      	str	r3, [sp, #0]
 8027224:	462a      	mov	r2, r5
 8027226:	4b09      	ldr	r3, [pc, #36]	; (802724c <_vfiprintf_r+0x258>)
 8027228:	a904      	add	r1, sp, #16
 802722a:	4630      	mov	r0, r6
 802722c:	f000 f880 	bl	8027330 <_printf_i>
 8027230:	e7e4      	b.n	80271fc <_vfiprintf_r+0x208>
 8027232:	bf00      	nop
 8027234:	0808981c 	.word	0x0808981c
 8027238:	0808983c 	.word	0x0808983c
 802723c:	080897fc 	.word	0x080897fc
 8027240:	08089650 	.word	0x08089650
 8027244:	0808965a 	.word	0x0808965a
 8027248:	00000000 	.word	0x00000000
 802724c:	08026fcf 	.word	0x08026fcf
 8027250:	08089656 	.word	0x08089656

08027254 <_printf_common>:
 8027254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027258:	4616      	mov	r6, r2
 802725a:	4699      	mov	r9, r3
 802725c:	688a      	ldr	r2, [r1, #8]
 802725e:	690b      	ldr	r3, [r1, #16]
 8027260:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8027264:	4293      	cmp	r3, r2
 8027266:	bfb8      	it	lt
 8027268:	4613      	movlt	r3, r2
 802726a:	6033      	str	r3, [r6, #0]
 802726c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8027270:	4607      	mov	r7, r0
 8027272:	460c      	mov	r4, r1
 8027274:	b10a      	cbz	r2, 802727a <_printf_common+0x26>
 8027276:	3301      	adds	r3, #1
 8027278:	6033      	str	r3, [r6, #0]
 802727a:	6823      	ldr	r3, [r4, #0]
 802727c:	0699      	lsls	r1, r3, #26
 802727e:	bf42      	ittt	mi
 8027280:	6833      	ldrmi	r3, [r6, #0]
 8027282:	3302      	addmi	r3, #2
 8027284:	6033      	strmi	r3, [r6, #0]
 8027286:	6825      	ldr	r5, [r4, #0]
 8027288:	f015 0506 	ands.w	r5, r5, #6
 802728c:	d106      	bne.n	802729c <_printf_common+0x48>
 802728e:	f104 0a19 	add.w	sl, r4, #25
 8027292:	68e3      	ldr	r3, [r4, #12]
 8027294:	6832      	ldr	r2, [r6, #0]
 8027296:	1a9b      	subs	r3, r3, r2
 8027298:	42ab      	cmp	r3, r5
 802729a:	dc26      	bgt.n	80272ea <_printf_common+0x96>
 802729c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80272a0:	1e13      	subs	r3, r2, #0
 80272a2:	6822      	ldr	r2, [r4, #0]
 80272a4:	bf18      	it	ne
 80272a6:	2301      	movne	r3, #1
 80272a8:	0692      	lsls	r2, r2, #26
 80272aa:	d42b      	bmi.n	8027304 <_printf_common+0xb0>
 80272ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80272b0:	4649      	mov	r1, r9
 80272b2:	4638      	mov	r0, r7
 80272b4:	47c0      	blx	r8
 80272b6:	3001      	adds	r0, #1
 80272b8:	d01e      	beq.n	80272f8 <_printf_common+0xa4>
 80272ba:	6823      	ldr	r3, [r4, #0]
 80272bc:	68e5      	ldr	r5, [r4, #12]
 80272be:	6832      	ldr	r2, [r6, #0]
 80272c0:	f003 0306 	and.w	r3, r3, #6
 80272c4:	2b04      	cmp	r3, #4
 80272c6:	bf08      	it	eq
 80272c8:	1aad      	subeq	r5, r5, r2
 80272ca:	68a3      	ldr	r3, [r4, #8]
 80272cc:	6922      	ldr	r2, [r4, #16]
 80272ce:	bf0c      	ite	eq
 80272d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80272d4:	2500      	movne	r5, #0
 80272d6:	4293      	cmp	r3, r2
 80272d8:	bfc4      	itt	gt
 80272da:	1a9b      	subgt	r3, r3, r2
 80272dc:	18ed      	addgt	r5, r5, r3
 80272de:	2600      	movs	r6, #0
 80272e0:	341a      	adds	r4, #26
 80272e2:	42b5      	cmp	r5, r6
 80272e4:	d11a      	bne.n	802731c <_printf_common+0xc8>
 80272e6:	2000      	movs	r0, #0
 80272e8:	e008      	b.n	80272fc <_printf_common+0xa8>
 80272ea:	2301      	movs	r3, #1
 80272ec:	4652      	mov	r2, sl
 80272ee:	4649      	mov	r1, r9
 80272f0:	4638      	mov	r0, r7
 80272f2:	47c0      	blx	r8
 80272f4:	3001      	adds	r0, #1
 80272f6:	d103      	bne.n	8027300 <_printf_common+0xac>
 80272f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80272fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027300:	3501      	adds	r5, #1
 8027302:	e7c6      	b.n	8027292 <_printf_common+0x3e>
 8027304:	18e1      	adds	r1, r4, r3
 8027306:	1c5a      	adds	r2, r3, #1
 8027308:	2030      	movs	r0, #48	; 0x30
 802730a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802730e:	4422      	add	r2, r4
 8027310:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8027314:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8027318:	3302      	adds	r3, #2
 802731a:	e7c7      	b.n	80272ac <_printf_common+0x58>
 802731c:	2301      	movs	r3, #1
 802731e:	4622      	mov	r2, r4
 8027320:	4649      	mov	r1, r9
 8027322:	4638      	mov	r0, r7
 8027324:	47c0      	blx	r8
 8027326:	3001      	adds	r0, #1
 8027328:	d0e6      	beq.n	80272f8 <_printf_common+0xa4>
 802732a:	3601      	adds	r6, #1
 802732c:	e7d9      	b.n	80272e2 <_printf_common+0x8e>
	...

08027330 <_printf_i>:
 8027330:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8027334:	460c      	mov	r4, r1
 8027336:	4691      	mov	r9, r2
 8027338:	7e27      	ldrb	r7, [r4, #24]
 802733a:	990c      	ldr	r1, [sp, #48]	; 0x30
 802733c:	2f78      	cmp	r7, #120	; 0x78
 802733e:	4680      	mov	r8, r0
 8027340:	469a      	mov	sl, r3
 8027342:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8027346:	d807      	bhi.n	8027358 <_printf_i+0x28>
 8027348:	2f62      	cmp	r7, #98	; 0x62
 802734a:	d80a      	bhi.n	8027362 <_printf_i+0x32>
 802734c:	2f00      	cmp	r7, #0
 802734e:	f000 80d8 	beq.w	8027502 <_printf_i+0x1d2>
 8027352:	2f58      	cmp	r7, #88	; 0x58
 8027354:	f000 80a3 	beq.w	802749e <_printf_i+0x16e>
 8027358:	f104 0642 	add.w	r6, r4, #66	; 0x42
 802735c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8027360:	e03a      	b.n	80273d8 <_printf_i+0xa8>
 8027362:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8027366:	2b15      	cmp	r3, #21
 8027368:	d8f6      	bhi.n	8027358 <_printf_i+0x28>
 802736a:	a001      	add	r0, pc, #4	; (adr r0, 8027370 <_printf_i+0x40>)
 802736c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8027370:	080273c9 	.word	0x080273c9
 8027374:	080273dd 	.word	0x080273dd
 8027378:	08027359 	.word	0x08027359
 802737c:	08027359 	.word	0x08027359
 8027380:	08027359 	.word	0x08027359
 8027384:	08027359 	.word	0x08027359
 8027388:	080273dd 	.word	0x080273dd
 802738c:	08027359 	.word	0x08027359
 8027390:	08027359 	.word	0x08027359
 8027394:	08027359 	.word	0x08027359
 8027398:	08027359 	.word	0x08027359
 802739c:	080274e9 	.word	0x080274e9
 80273a0:	0802740d 	.word	0x0802740d
 80273a4:	080274cb 	.word	0x080274cb
 80273a8:	08027359 	.word	0x08027359
 80273ac:	08027359 	.word	0x08027359
 80273b0:	0802750b 	.word	0x0802750b
 80273b4:	08027359 	.word	0x08027359
 80273b8:	0802740d 	.word	0x0802740d
 80273bc:	08027359 	.word	0x08027359
 80273c0:	08027359 	.word	0x08027359
 80273c4:	080274d3 	.word	0x080274d3
 80273c8:	680b      	ldr	r3, [r1, #0]
 80273ca:	1d1a      	adds	r2, r3, #4
 80273cc:	681b      	ldr	r3, [r3, #0]
 80273ce:	600a      	str	r2, [r1, #0]
 80273d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80273d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80273d8:	2301      	movs	r3, #1
 80273da:	e0a3      	b.n	8027524 <_printf_i+0x1f4>
 80273dc:	6825      	ldr	r5, [r4, #0]
 80273de:	6808      	ldr	r0, [r1, #0]
 80273e0:	062e      	lsls	r6, r5, #24
 80273e2:	f100 0304 	add.w	r3, r0, #4
 80273e6:	d50a      	bpl.n	80273fe <_printf_i+0xce>
 80273e8:	6805      	ldr	r5, [r0, #0]
 80273ea:	600b      	str	r3, [r1, #0]
 80273ec:	2d00      	cmp	r5, #0
 80273ee:	da03      	bge.n	80273f8 <_printf_i+0xc8>
 80273f0:	232d      	movs	r3, #45	; 0x2d
 80273f2:	426d      	negs	r5, r5
 80273f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80273f8:	485e      	ldr	r0, [pc, #376]	; (8027574 <_printf_i+0x244>)
 80273fa:	230a      	movs	r3, #10
 80273fc:	e019      	b.n	8027432 <_printf_i+0x102>
 80273fe:	f015 0f40 	tst.w	r5, #64	; 0x40
 8027402:	6805      	ldr	r5, [r0, #0]
 8027404:	600b      	str	r3, [r1, #0]
 8027406:	bf18      	it	ne
 8027408:	b22d      	sxthne	r5, r5
 802740a:	e7ef      	b.n	80273ec <_printf_i+0xbc>
 802740c:	680b      	ldr	r3, [r1, #0]
 802740e:	6825      	ldr	r5, [r4, #0]
 8027410:	1d18      	adds	r0, r3, #4
 8027412:	6008      	str	r0, [r1, #0]
 8027414:	0628      	lsls	r0, r5, #24
 8027416:	d501      	bpl.n	802741c <_printf_i+0xec>
 8027418:	681d      	ldr	r5, [r3, #0]
 802741a:	e002      	b.n	8027422 <_printf_i+0xf2>
 802741c:	0669      	lsls	r1, r5, #25
 802741e:	d5fb      	bpl.n	8027418 <_printf_i+0xe8>
 8027420:	881d      	ldrh	r5, [r3, #0]
 8027422:	4854      	ldr	r0, [pc, #336]	; (8027574 <_printf_i+0x244>)
 8027424:	2f6f      	cmp	r7, #111	; 0x6f
 8027426:	bf0c      	ite	eq
 8027428:	2308      	moveq	r3, #8
 802742a:	230a      	movne	r3, #10
 802742c:	2100      	movs	r1, #0
 802742e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8027432:	6866      	ldr	r6, [r4, #4]
 8027434:	60a6      	str	r6, [r4, #8]
 8027436:	2e00      	cmp	r6, #0
 8027438:	bfa2      	ittt	ge
 802743a:	6821      	ldrge	r1, [r4, #0]
 802743c:	f021 0104 	bicge.w	r1, r1, #4
 8027440:	6021      	strge	r1, [r4, #0]
 8027442:	b90d      	cbnz	r5, 8027448 <_printf_i+0x118>
 8027444:	2e00      	cmp	r6, #0
 8027446:	d04d      	beq.n	80274e4 <_printf_i+0x1b4>
 8027448:	4616      	mov	r6, r2
 802744a:	fbb5 f1f3 	udiv	r1, r5, r3
 802744e:	fb03 5711 	mls	r7, r3, r1, r5
 8027452:	5dc7      	ldrb	r7, [r0, r7]
 8027454:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8027458:	462f      	mov	r7, r5
 802745a:	42bb      	cmp	r3, r7
 802745c:	460d      	mov	r5, r1
 802745e:	d9f4      	bls.n	802744a <_printf_i+0x11a>
 8027460:	2b08      	cmp	r3, #8
 8027462:	d10b      	bne.n	802747c <_printf_i+0x14c>
 8027464:	6823      	ldr	r3, [r4, #0]
 8027466:	07df      	lsls	r7, r3, #31
 8027468:	d508      	bpl.n	802747c <_printf_i+0x14c>
 802746a:	6923      	ldr	r3, [r4, #16]
 802746c:	6861      	ldr	r1, [r4, #4]
 802746e:	4299      	cmp	r1, r3
 8027470:	bfde      	ittt	le
 8027472:	2330      	movle	r3, #48	; 0x30
 8027474:	f806 3c01 	strble.w	r3, [r6, #-1]
 8027478:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 802747c:	1b92      	subs	r2, r2, r6
 802747e:	6122      	str	r2, [r4, #16]
 8027480:	f8cd a000 	str.w	sl, [sp]
 8027484:	464b      	mov	r3, r9
 8027486:	aa03      	add	r2, sp, #12
 8027488:	4621      	mov	r1, r4
 802748a:	4640      	mov	r0, r8
 802748c:	f7ff fee2 	bl	8027254 <_printf_common>
 8027490:	3001      	adds	r0, #1
 8027492:	d14c      	bne.n	802752e <_printf_i+0x1fe>
 8027494:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8027498:	b004      	add	sp, #16
 802749a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802749e:	4835      	ldr	r0, [pc, #212]	; (8027574 <_printf_i+0x244>)
 80274a0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80274a4:	6823      	ldr	r3, [r4, #0]
 80274a6:	680e      	ldr	r6, [r1, #0]
 80274a8:	061f      	lsls	r7, r3, #24
 80274aa:	f856 5b04 	ldr.w	r5, [r6], #4
 80274ae:	600e      	str	r6, [r1, #0]
 80274b0:	d514      	bpl.n	80274dc <_printf_i+0x1ac>
 80274b2:	07d9      	lsls	r1, r3, #31
 80274b4:	bf44      	itt	mi
 80274b6:	f043 0320 	orrmi.w	r3, r3, #32
 80274ba:	6023      	strmi	r3, [r4, #0]
 80274bc:	b91d      	cbnz	r5, 80274c6 <_printf_i+0x196>
 80274be:	6823      	ldr	r3, [r4, #0]
 80274c0:	f023 0320 	bic.w	r3, r3, #32
 80274c4:	6023      	str	r3, [r4, #0]
 80274c6:	2310      	movs	r3, #16
 80274c8:	e7b0      	b.n	802742c <_printf_i+0xfc>
 80274ca:	6823      	ldr	r3, [r4, #0]
 80274cc:	f043 0320 	orr.w	r3, r3, #32
 80274d0:	6023      	str	r3, [r4, #0]
 80274d2:	2378      	movs	r3, #120	; 0x78
 80274d4:	4828      	ldr	r0, [pc, #160]	; (8027578 <_printf_i+0x248>)
 80274d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80274da:	e7e3      	b.n	80274a4 <_printf_i+0x174>
 80274dc:	065e      	lsls	r6, r3, #25
 80274de:	bf48      	it	mi
 80274e0:	b2ad      	uxthmi	r5, r5
 80274e2:	e7e6      	b.n	80274b2 <_printf_i+0x182>
 80274e4:	4616      	mov	r6, r2
 80274e6:	e7bb      	b.n	8027460 <_printf_i+0x130>
 80274e8:	680b      	ldr	r3, [r1, #0]
 80274ea:	6826      	ldr	r6, [r4, #0]
 80274ec:	6960      	ldr	r0, [r4, #20]
 80274ee:	1d1d      	adds	r5, r3, #4
 80274f0:	600d      	str	r5, [r1, #0]
 80274f2:	0635      	lsls	r5, r6, #24
 80274f4:	681b      	ldr	r3, [r3, #0]
 80274f6:	d501      	bpl.n	80274fc <_printf_i+0x1cc>
 80274f8:	6018      	str	r0, [r3, #0]
 80274fa:	e002      	b.n	8027502 <_printf_i+0x1d2>
 80274fc:	0671      	lsls	r1, r6, #25
 80274fe:	d5fb      	bpl.n	80274f8 <_printf_i+0x1c8>
 8027500:	8018      	strh	r0, [r3, #0]
 8027502:	2300      	movs	r3, #0
 8027504:	6123      	str	r3, [r4, #16]
 8027506:	4616      	mov	r6, r2
 8027508:	e7ba      	b.n	8027480 <_printf_i+0x150>
 802750a:	680b      	ldr	r3, [r1, #0]
 802750c:	1d1a      	adds	r2, r3, #4
 802750e:	600a      	str	r2, [r1, #0]
 8027510:	681e      	ldr	r6, [r3, #0]
 8027512:	6862      	ldr	r2, [r4, #4]
 8027514:	2100      	movs	r1, #0
 8027516:	4630      	mov	r0, r6
 8027518:	f7d8 fe82 	bl	8000220 <memchr>
 802751c:	b108      	cbz	r0, 8027522 <_printf_i+0x1f2>
 802751e:	1b80      	subs	r0, r0, r6
 8027520:	6060      	str	r0, [r4, #4]
 8027522:	6863      	ldr	r3, [r4, #4]
 8027524:	6123      	str	r3, [r4, #16]
 8027526:	2300      	movs	r3, #0
 8027528:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802752c:	e7a8      	b.n	8027480 <_printf_i+0x150>
 802752e:	6923      	ldr	r3, [r4, #16]
 8027530:	4632      	mov	r2, r6
 8027532:	4649      	mov	r1, r9
 8027534:	4640      	mov	r0, r8
 8027536:	47d0      	blx	sl
 8027538:	3001      	adds	r0, #1
 802753a:	d0ab      	beq.n	8027494 <_printf_i+0x164>
 802753c:	6823      	ldr	r3, [r4, #0]
 802753e:	079b      	lsls	r3, r3, #30
 8027540:	d413      	bmi.n	802756a <_printf_i+0x23a>
 8027542:	68e0      	ldr	r0, [r4, #12]
 8027544:	9b03      	ldr	r3, [sp, #12]
 8027546:	4298      	cmp	r0, r3
 8027548:	bfb8      	it	lt
 802754a:	4618      	movlt	r0, r3
 802754c:	e7a4      	b.n	8027498 <_printf_i+0x168>
 802754e:	2301      	movs	r3, #1
 8027550:	4632      	mov	r2, r6
 8027552:	4649      	mov	r1, r9
 8027554:	4640      	mov	r0, r8
 8027556:	47d0      	blx	sl
 8027558:	3001      	adds	r0, #1
 802755a:	d09b      	beq.n	8027494 <_printf_i+0x164>
 802755c:	3501      	adds	r5, #1
 802755e:	68e3      	ldr	r3, [r4, #12]
 8027560:	9903      	ldr	r1, [sp, #12]
 8027562:	1a5b      	subs	r3, r3, r1
 8027564:	42ab      	cmp	r3, r5
 8027566:	dcf2      	bgt.n	802754e <_printf_i+0x21e>
 8027568:	e7eb      	b.n	8027542 <_printf_i+0x212>
 802756a:	2500      	movs	r5, #0
 802756c:	f104 0619 	add.w	r6, r4, #25
 8027570:	e7f5      	b.n	802755e <_printf_i+0x22e>
 8027572:	bf00      	nop
 8027574:	08089661 	.word	0x08089661
 8027578:	08089672 	.word	0x08089672

0802757c <_sbrk_r>:
 802757c:	b538      	push	{r3, r4, r5, lr}
 802757e:	4d06      	ldr	r5, [pc, #24]	; (8027598 <_sbrk_r+0x1c>)
 8027580:	2300      	movs	r3, #0
 8027582:	4604      	mov	r4, r0
 8027584:	4608      	mov	r0, r1
 8027586:	602b      	str	r3, [r5, #0]
 8027588:	f7db fa92 	bl	8002ab0 <_sbrk>
 802758c:	1c43      	adds	r3, r0, #1
 802758e:	d102      	bne.n	8027596 <_sbrk_r+0x1a>
 8027590:	682b      	ldr	r3, [r5, #0]
 8027592:	b103      	cbz	r3, 8027596 <_sbrk_r+0x1a>
 8027594:	6023      	str	r3, [r4, #0]
 8027596:	bd38      	pop	{r3, r4, r5, pc}
 8027598:	20047fb0 	.word	0x20047fb0

0802759c <_raise_r>:
 802759c:	291f      	cmp	r1, #31
 802759e:	b538      	push	{r3, r4, r5, lr}
 80275a0:	4604      	mov	r4, r0
 80275a2:	460d      	mov	r5, r1
 80275a4:	d904      	bls.n	80275b0 <_raise_r+0x14>
 80275a6:	2316      	movs	r3, #22
 80275a8:	6003      	str	r3, [r0, #0]
 80275aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80275ae:	bd38      	pop	{r3, r4, r5, pc}
 80275b0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80275b2:	b112      	cbz	r2, 80275ba <_raise_r+0x1e>
 80275b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80275b8:	b94b      	cbnz	r3, 80275ce <_raise_r+0x32>
 80275ba:	4620      	mov	r0, r4
 80275bc:	f000 f830 	bl	8027620 <_getpid_r>
 80275c0:	462a      	mov	r2, r5
 80275c2:	4601      	mov	r1, r0
 80275c4:	4620      	mov	r0, r4
 80275c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80275ca:	f000 b817 	b.w	80275fc <_kill_r>
 80275ce:	2b01      	cmp	r3, #1
 80275d0:	d00a      	beq.n	80275e8 <_raise_r+0x4c>
 80275d2:	1c59      	adds	r1, r3, #1
 80275d4:	d103      	bne.n	80275de <_raise_r+0x42>
 80275d6:	2316      	movs	r3, #22
 80275d8:	6003      	str	r3, [r0, #0]
 80275da:	2001      	movs	r0, #1
 80275dc:	e7e7      	b.n	80275ae <_raise_r+0x12>
 80275de:	2400      	movs	r4, #0
 80275e0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80275e4:	4628      	mov	r0, r5
 80275e6:	4798      	blx	r3
 80275e8:	2000      	movs	r0, #0
 80275ea:	e7e0      	b.n	80275ae <_raise_r+0x12>

080275ec <raise>:
 80275ec:	4b02      	ldr	r3, [pc, #8]	; (80275f8 <raise+0xc>)
 80275ee:	4601      	mov	r1, r0
 80275f0:	6818      	ldr	r0, [r3, #0]
 80275f2:	f7ff bfd3 	b.w	802759c <_raise_r>
 80275f6:	bf00      	nop
 80275f8:	2000005c 	.word	0x2000005c

080275fc <_kill_r>:
 80275fc:	b538      	push	{r3, r4, r5, lr}
 80275fe:	4d07      	ldr	r5, [pc, #28]	; (802761c <_kill_r+0x20>)
 8027600:	2300      	movs	r3, #0
 8027602:	4604      	mov	r4, r0
 8027604:	4608      	mov	r0, r1
 8027606:	4611      	mov	r1, r2
 8027608:	602b      	str	r3, [r5, #0]
 802760a:	f7db f9c9 	bl	80029a0 <_kill>
 802760e:	1c43      	adds	r3, r0, #1
 8027610:	d102      	bne.n	8027618 <_kill_r+0x1c>
 8027612:	682b      	ldr	r3, [r5, #0]
 8027614:	b103      	cbz	r3, 8027618 <_kill_r+0x1c>
 8027616:	6023      	str	r3, [r4, #0]
 8027618:	bd38      	pop	{r3, r4, r5, pc}
 802761a:	bf00      	nop
 802761c:	20047fb0 	.word	0x20047fb0

08027620 <_getpid_r>:
 8027620:	f7db b9b6 	b.w	8002990 <_getpid>

08027624 <siprintf>:
 8027624:	b40e      	push	{r1, r2, r3}
 8027626:	b500      	push	{lr}
 8027628:	b09c      	sub	sp, #112	; 0x70
 802762a:	ab1d      	add	r3, sp, #116	; 0x74
 802762c:	9002      	str	r0, [sp, #8]
 802762e:	9006      	str	r0, [sp, #24]
 8027630:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8027634:	4809      	ldr	r0, [pc, #36]	; (802765c <siprintf+0x38>)
 8027636:	9107      	str	r1, [sp, #28]
 8027638:	9104      	str	r1, [sp, #16]
 802763a:	4909      	ldr	r1, [pc, #36]	; (8027660 <siprintf+0x3c>)
 802763c:	f853 2b04 	ldr.w	r2, [r3], #4
 8027640:	9105      	str	r1, [sp, #20]
 8027642:	6800      	ldr	r0, [r0, #0]
 8027644:	9301      	str	r3, [sp, #4]
 8027646:	a902      	add	r1, sp, #8
 8027648:	f000 fd06 	bl	8028058 <_svfiprintf_r>
 802764c:	9b02      	ldr	r3, [sp, #8]
 802764e:	2200      	movs	r2, #0
 8027650:	701a      	strb	r2, [r3, #0]
 8027652:	b01c      	add	sp, #112	; 0x70
 8027654:	f85d eb04 	ldr.w	lr, [sp], #4
 8027658:	b003      	add	sp, #12
 802765a:	4770      	bx	lr
 802765c:	2000005c 	.word	0x2000005c
 8027660:	ffff0208 	.word	0xffff0208

08027664 <strcpy>:
 8027664:	4603      	mov	r3, r0
 8027666:	f811 2b01 	ldrb.w	r2, [r1], #1
 802766a:	f803 2b01 	strb.w	r2, [r3], #1
 802766e:	2a00      	cmp	r2, #0
 8027670:	d1f9      	bne.n	8027666 <strcpy+0x2>
 8027672:	4770      	bx	lr

08027674 <strncmp>:
 8027674:	b510      	push	{r4, lr}
 8027676:	b16a      	cbz	r2, 8027694 <strncmp+0x20>
 8027678:	3901      	subs	r1, #1
 802767a:	1884      	adds	r4, r0, r2
 802767c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8027680:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8027684:	4293      	cmp	r3, r2
 8027686:	d103      	bne.n	8027690 <strncmp+0x1c>
 8027688:	42a0      	cmp	r0, r4
 802768a:	d001      	beq.n	8027690 <strncmp+0x1c>
 802768c:	2b00      	cmp	r3, #0
 802768e:	d1f5      	bne.n	802767c <strncmp+0x8>
 8027690:	1a98      	subs	r0, r3, r2
 8027692:	bd10      	pop	{r4, pc}
 8027694:	4610      	mov	r0, r2
 8027696:	e7fc      	b.n	8027692 <strncmp+0x1e>

08027698 <strncpy>:
 8027698:	b510      	push	{r4, lr}
 802769a:	3901      	subs	r1, #1
 802769c:	4603      	mov	r3, r0
 802769e:	b132      	cbz	r2, 80276ae <strncpy+0x16>
 80276a0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80276a4:	f803 4b01 	strb.w	r4, [r3], #1
 80276a8:	3a01      	subs	r2, #1
 80276aa:	2c00      	cmp	r4, #0
 80276ac:	d1f7      	bne.n	802769e <strncpy+0x6>
 80276ae:	441a      	add	r2, r3
 80276b0:	2100      	movs	r1, #0
 80276b2:	4293      	cmp	r3, r2
 80276b4:	d100      	bne.n	80276b8 <strncpy+0x20>
 80276b6:	bd10      	pop	{r4, pc}
 80276b8:	f803 1b01 	strb.w	r1, [r3], #1
 80276bc:	e7f9      	b.n	80276b2 <strncpy+0x1a>
	...

080276c0 <strtok>:
 80276c0:	4b16      	ldr	r3, [pc, #88]	; (802771c <strtok+0x5c>)
 80276c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80276c4:	681e      	ldr	r6, [r3, #0]
 80276c6:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80276c8:	4605      	mov	r5, r0
 80276ca:	b9fc      	cbnz	r4, 802770c <strtok+0x4c>
 80276cc:	2050      	movs	r0, #80	; 0x50
 80276ce:	9101      	str	r1, [sp, #4]
 80276d0:	f7ff fb7c 	bl	8026dcc <malloc>
 80276d4:	9901      	ldr	r1, [sp, #4]
 80276d6:	65b0      	str	r0, [r6, #88]	; 0x58
 80276d8:	4602      	mov	r2, r0
 80276da:	b920      	cbnz	r0, 80276e6 <strtok+0x26>
 80276dc:	4b10      	ldr	r3, [pc, #64]	; (8027720 <strtok+0x60>)
 80276de:	4811      	ldr	r0, [pc, #68]	; (8027724 <strtok+0x64>)
 80276e0:	2157      	movs	r1, #87	; 0x57
 80276e2:	f7ff fb13 	bl	8026d0c <__assert_func>
 80276e6:	e9c0 4400 	strd	r4, r4, [r0]
 80276ea:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80276ee:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80276f2:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80276f6:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80276fa:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80276fe:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8027702:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8027706:	6184      	str	r4, [r0, #24]
 8027708:	7704      	strb	r4, [r0, #28]
 802770a:	6244      	str	r4, [r0, #36]	; 0x24
 802770c:	6db2      	ldr	r2, [r6, #88]	; 0x58
 802770e:	2301      	movs	r3, #1
 8027710:	4628      	mov	r0, r5
 8027712:	b002      	add	sp, #8
 8027714:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8027718:	f000 b806 	b.w	8027728 <__strtok_r>
 802771c:	2000005c 	.word	0x2000005c
 8027720:	08089683 	.word	0x08089683
 8027724:	0808969a 	.word	0x0808969a

08027728 <__strtok_r>:
 8027728:	b5f0      	push	{r4, r5, r6, r7, lr}
 802772a:	b908      	cbnz	r0, 8027730 <__strtok_r+0x8>
 802772c:	6810      	ldr	r0, [r2, #0]
 802772e:	b188      	cbz	r0, 8027754 <__strtok_r+0x2c>
 8027730:	4604      	mov	r4, r0
 8027732:	4620      	mov	r0, r4
 8027734:	f814 5b01 	ldrb.w	r5, [r4], #1
 8027738:	460f      	mov	r7, r1
 802773a:	f817 6b01 	ldrb.w	r6, [r7], #1
 802773e:	b91e      	cbnz	r6, 8027748 <__strtok_r+0x20>
 8027740:	b965      	cbnz	r5, 802775c <__strtok_r+0x34>
 8027742:	6015      	str	r5, [r2, #0]
 8027744:	4628      	mov	r0, r5
 8027746:	e005      	b.n	8027754 <__strtok_r+0x2c>
 8027748:	42b5      	cmp	r5, r6
 802774a:	d1f6      	bne.n	802773a <__strtok_r+0x12>
 802774c:	2b00      	cmp	r3, #0
 802774e:	d1f0      	bne.n	8027732 <__strtok_r+0xa>
 8027750:	6014      	str	r4, [r2, #0]
 8027752:	7003      	strb	r3, [r0, #0]
 8027754:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027756:	461c      	mov	r4, r3
 8027758:	e00c      	b.n	8027774 <__strtok_r+0x4c>
 802775a:	b915      	cbnz	r5, 8027762 <__strtok_r+0x3a>
 802775c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8027760:	460e      	mov	r6, r1
 8027762:	f816 5b01 	ldrb.w	r5, [r6], #1
 8027766:	42ab      	cmp	r3, r5
 8027768:	d1f7      	bne.n	802775a <__strtok_r+0x32>
 802776a:	2b00      	cmp	r3, #0
 802776c:	d0f3      	beq.n	8027756 <__strtok_r+0x2e>
 802776e:	2300      	movs	r3, #0
 8027770:	f804 3c01 	strb.w	r3, [r4, #-1]
 8027774:	6014      	str	r4, [r2, #0]
 8027776:	e7ed      	b.n	8027754 <__strtok_r+0x2c>

08027778 <_strtoll_l.isra.0>:
 8027778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802777c:	b087      	sub	sp, #28
 802777e:	4691      	mov	r9, r2
 8027780:	4a47      	ldr	r2, [pc, #284]	; (80278a0 <_strtoll_l.isra.0+0x128>)
 8027782:	9005      	str	r0, [sp, #20]
 8027784:	4688      	mov	r8, r1
 8027786:	461f      	mov	r7, r3
 8027788:	460d      	mov	r5, r1
 802778a:	462b      	mov	r3, r5
 802778c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8027790:	5ca6      	ldrb	r6, [r4, r2]
 8027792:	f016 0608 	ands.w	r6, r6, #8
 8027796:	d1f8      	bne.n	802778a <_strtoll_l.isra.0+0x12>
 8027798:	2c2d      	cmp	r4, #45	; 0x2d
 802779a:	d147      	bne.n	802782c <_strtoll_l.isra.0+0xb4>
 802779c:	782c      	ldrb	r4, [r5, #0]
 802779e:	2601      	movs	r6, #1
 80277a0:	1c9d      	adds	r5, r3, #2
 80277a2:	2f00      	cmp	r7, #0
 80277a4:	d077      	beq.n	8027896 <_strtoll_l.isra.0+0x11e>
 80277a6:	2f10      	cmp	r7, #16
 80277a8:	d109      	bne.n	80277be <_strtoll_l.isra.0+0x46>
 80277aa:	2c30      	cmp	r4, #48	; 0x30
 80277ac:	d107      	bne.n	80277be <_strtoll_l.isra.0+0x46>
 80277ae:	782b      	ldrb	r3, [r5, #0]
 80277b0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80277b4:	2b58      	cmp	r3, #88	; 0x58
 80277b6:	d169      	bne.n	802788c <_strtoll_l.isra.0+0x114>
 80277b8:	786c      	ldrb	r4, [r5, #1]
 80277ba:	2710      	movs	r7, #16
 80277bc:	3502      	adds	r5, #2
 80277be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80277c2:	1990      	adds	r0, r2, r6
 80277c4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80277c8:	ea4f 7be7 	mov.w	fp, r7, asr #31
 80277cc:	eb43 71e6 	adc.w	r1, r3, r6, asr #31
 80277d0:	463a      	mov	r2, r7
 80277d2:	465b      	mov	r3, fp
 80277d4:	e9cd 0100 	strd	r0, r1, [sp]
 80277d8:	f7d9 fa72 	bl	8000cc0 <__aeabi_uldivmod>
 80277dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80277e0:	46ba      	mov	sl, r7
 80277e2:	4696      	mov	lr, r2
 80277e4:	2300      	movs	r3, #0
 80277e6:	2000      	movs	r0, #0
 80277e8:	2100      	movs	r1, #0
 80277ea:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80277ee:	f1bc 0f09 	cmp.w	ip, #9
 80277f2:	d820      	bhi.n	8027836 <_strtoll_l.isra.0+0xbe>
 80277f4:	4664      	mov	r4, ip
 80277f6:	42a7      	cmp	r7, r4
 80277f8:	dd2e      	ble.n	8027858 <_strtoll_l.isra.0+0xe0>
 80277fa:	1c5a      	adds	r2, r3, #1
 80277fc:	d013      	beq.n	8027826 <_strtoll_l.isra.0+0xae>
 80277fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8027802:	428b      	cmp	r3, r1
 8027804:	bf08      	it	eq
 8027806:	4282      	cmpeq	r2, r0
 8027808:	d323      	bcc.n	8027852 <_strtoll_l.isra.0+0xda>
 802780a:	d101      	bne.n	8027810 <_strtoll_l.isra.0+0x98>
 802780c:	45a6      	cmp	lr, r4
 802780e:	db20      	blt.n	8027852 <_strtoll_l.isra.0+0xda>
 8027810:	fb0a f301 	mul.w	r3, sl, r1
 8027814:	fb00 330b 	mla	r3, r0, fp, r3
 8027818:	fbaa 0100 	umull	r0, r1, sl, r0
 802781c:	4419      	add	r1, r3
 802781e:	1900      	adds	r0, r0, r4
 8027820:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8027824:	2301      	movs	r3, #1
 8027826:	f815 4b01 	ldrb.w	r4, [r5], #1
 802782a:	e7de      	b.n	80277ea <_strtoll_l.isra.0+0x72>
 802782c:	2c2b      	cmp	r4, #43	; 0x2b
 802782e:	bf04      	itt	eq
 8027830:	782c      	ldrbeq	r4, [r5, #0]
 8027832:	1c9d      	addeq	r5, r3, #2
 8027834:	e7b5      	b.n	80277a2 <_strtoll_l.isra.0+0x2a>
 8027836:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 802783a:	f1bc 0f19 	cmp.w	ip, #25
 802783e:	d801      	bhi.n	8027844 <_strtoll_l.isra.0+0xcc>
 8027840:	3c37      	subs	r4, #55	; 0x37
 8027842:	e7d8      	b.n	80277f6 <_strtoll_l.isra.0+0x7e>
 8027844:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8027848:	f1bc 0f19 	cmp.w	ip, #25
 802784c:	d804      	bhi.n	8027858 <_strtoll_l.isra.0+0xe0>
 802784e:	3c57      	subs	r4, #87	; 0x57
 8027850:	e7d1      	b.n	80277f6 <_strtoll_l.isra.0+0x7e>
 8027852:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8027856:	e7e6      	b.n	8027826 <_strtoll_l.isra.0+0xae>
 8027858:	1c5a      	adds	r2, r3, #1
 802785a:	d10a      	bne.n	8027872 <_strtoll_l.isra.0+0xfa>
 802785c:	9a05      	ldr	r2, [sp, #20]
 802785e:	2322      	movs	r3, #34	; 0x22
 8027860:	e9dd 0100 	ldrd	r0, r1, [sp]
 8027864:	6013      	str	r3, [r2, #0]
 8027866:	f1b9 0f00 	cmp.w	r9, #0
 802786a:	d10a      	bne.n	8027882 <_strtoll_l.isra.0+0x10a>
 802786c:	b007      	add	sp, #28
 802786e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027872:	b116      	cbz	r6, 802787a <_strtoll_l.isra.0+0x102>
 8027874:	4240      	negs	r0, r0
 8027876:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 802787a:	f1b9 0f00 	cmp.w	r9, #0
 802787e:	d0f5      	beq.n	802786c <_strtoll_l.isra.0+0xf4>
 8027880:	b10b      	cbz	r3, 8027886 <_strtoll_l.isra.0+0x10e>
 8027882:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8027886:	f8c9 8000 	str.w	r8, [r9]
 802788a:	e7ef      	b.n	802786c <_strtoll_l.isra.0+0xf4>
 802788c:	2430      	movs	r4, #48	; 0x30
 802788e:	2f00      	cmp	r7, #0
 8027890:	d195      	bne.n	80277be <_strtoll_l.isra.0+0x46>
 8027892:	2708      	movs	r7, #8
 8027894:	e793      	b.n	80277be <_strtoll_l.isra.0+0x46>
 8027896:	2c30      	cmp	r4, #48	; 0x30
 8027898:	d089      	beq.n	80277ae <_strtoll_l.isra.0+0x36>
 802789a:	270a      	movs	r7, #10
 802789c:	e78f      	b.n	80277be <_strtoll_l.isra.0+0x46>
 802789e:	bf00      	nop
 80278a0:	080896fc 	.word	0x080896fc

080278a4 <strtoll>:
 80278a4:	4613      	mov	r3, r2
 80278a6:	460a      	mov	r2, r1
 80278a8:	4601      	mov	r1, r0
 80278aa:	4802      	ldr	r0, [pc, #8]	; (80278b4 <strtoll+0x10>)
 80278ac:	6800      	ldr	r0, [r0, #0]
 80278ae:	f7ff bf63 	b.w	8027778 <_strtoll_l.isra.0>
 80278b2:	bf00      	nop
 80278b4:	2000005c 	.word	0x2000005c

080278b8 <__swbuf_r>:
 80278b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80278ba:	460e      	mov	r6, r1
 80278bc:	4614      	mov	r4, r2
 80278be:	4605      	mov	r5, r0
 80278c0:	b118      	cbz	r0, 80278ca <__swbuf_r+0x12>
 80278c2:	6983      	ldr	r3, [r0, #24]
 80278c4:	b90b      	cbnz	r3, 80278ca <__swbuf_r+0x12>
 80278c6:	f000 fa33 	bl	8027d30 <__sinit>
 80278ca:	4b21      	ldr	r3, [pc, #132]	; (8027950 <__swbuf_r+0x98>)
 80278cc:	429c      	cmp	r4, r3
 80278ce:	d12b      	bne.n	8027928 <__swbuf_r+0x70>
 80278d0:	686c      	ldr	r4, [r5, #4]
 80278d2:	69a3      	ldr	r3, [r4, #24]
 80278d4:	60a3      	str	r3, [r4, #8]
 80278d6:	89a3      	ldrh	r3, [r4, #12]
 80278d8:	071a      	lsls	r2, r3, #28
 80278da:	d52f      	bpl.n	802793c <__swbuf_r+0x84>
 80278dc:	6923      	ldr	r3, [r4, #16]
 80278de:	b36b      	cbz	r3, 802793c <__swbuf_r+0x84>
 80278e0:	6923      	ldr	r3, [r4, #16]
 80278e2:	6820      	ldr	r0, [r4, #0]
 80278e4:	1ac0      	subs	r0, r0, r3
 80278e6:	6963      	ldr	r3, [r4, #20]
 80278e8:	b2f6      	uxtb	r6, r6
 80278ea:	4283      	cmp	r3, r0
 80278ec:	4637      	mov	r7, r6
 80278ee:	dc04      	bgt.n	80278fa <__swbuf_r+0x42>
 80278f0:	4621      	mov	r1, r4
 80278f2:	4628      	mov	r0, r5
 80278f4:	f000 f988 	bl	8027c08 <_fflush_r>
 80278f8:	bb30      	cbnz	r0, 8027948 <__swbuf_r+0x90>
 80278fa:	68a3      	ldr	r3, [r4, #8]
 80278fc:	3b01      	subs	r3, #1
 80278fe:	60a3      	str	r3, [r4, #8]
 8027900:	6823      	ldr	r3, [r4, #0]
 8027902:	1c5a      	adds	r2, r3, #1
 8027904:	6022      	str	r2, [r4, #0]
 8027906:	701e      	strb	r6, [r3, #0]
 8027908:	6963      	ldr	r3, [r4, #20]
 802790a:	3001      	adds	r0, #1
 802790c:	4283      	cmp	r3, r0
 802790e:	d004      	beq.n	802791a <__swbuf_r+0x62>
 8027910:	89a3      	ldrh	r3, [r4, #12]
 8027912:	07db      	lsls	r3, r3, #31
 8027914:	d506      	bpl.n	8027924 <__swbuf_r+0x6c>
 8027916:	2e0a      	cmp	r6, #10
 8027918:	d104      	bne.n	8027924 <__swbuf_r+0x6c>
 802791a:	4621      	mov	r1, r4
 802791c:	4628      	mov	r0, r5
 802791e:	f000 f973 	bl	8027c08 <_fflush_r>
 8027922:	b988      	cbnz	r0, 8027948 <__swbuf_r+0x90>
 8027924:	4638      	mov	r0, r7
 8027926:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8027928:	4b0a      	ldr	r3, [pc, #40]	; (8027954 <__swbuf_r+0x9c>)
 802792a:	429c      	cmp	r4, r3
 802792c:	d101      	bne.n	8027932 <__swbuf_r+0x7a>
 802792e:	68ac      	ldr	r4, [r5, #8]
 8027930:	e7cf      	b.n	80278d2 <__swbuf_r+0x1a>
 8027932:	4b09      	ldr	r3, [pc, #36]	; (8027958 <__swbuf_r+0xa0>)
 8027934:	429c      	cmp	r4, r3
 8027936:	bf08      	it	eq
 8027938:	68ec      	ldreq	r4, [r5, #12]
 802793a:	e7ca      	b.n	80278d2 <__swbuf_r+0x1a>
 802793c:	4621      	mov	r1, r4
 802793e:	4628      	mov	r0, r5
 8027940:	f000 f80c 	bl	802795c <__swsetup_r>
 8027944:	2800      	cmp	r0, #0
 8027946:	d0cb      	beq.n	80278e0 <__swbuf_r+0x28>
 8027948:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 802794c:	e7ea      	b.n	8027924 <__swbuf_r+0x6c>
 802794e:	bf00      	nop
 8027950:	0808981c 	.word	0x0808981c
 8027954:	0808983c 	.word	0x0808983c
 8027958:	080897fc 	.word	0x080897fc

0802795c <__swsetup_r>:
 802795c:	4b32      	ldr	r3, [pc, #200]	; (8027a28 <__swsetup_r+0xcc>)
 802795e:	b570      	push	{r4, r5, r6, lr}
 8027960:	681d      	ldr	r5, [r3, #0]
 8027962:	4606      	mov	r6, r0
 8027964:	460c      	mov	r4, r1
 8027966:	b125      	cbz	r5, 8027972 <__swsetup_r+0x16>
 8027968:	69ab      	ldr	r3, [r5, #24]
 802796a:	b913      	cbnz	r3, 8027972 <__swsetup_r+0x16>
 802796c:	4628      	mov	r0, r5
 802796e:	f000 f9df 	bl	8027d30 <__sinit>
 8027972:	4b2e      	ldr	r3, [pc, #184]	; (8027a2c <__swsetup_r+0xd0>)
 8027974:	429c      	cmp	r4, r3
 8027976:	d10f      	bne.n	8027998 <__swsetup_r+0x3c>
 8027978:	686c      	ldr	r4, [r5, #4]
 802797a:	89a3      	ldrh	r3, [r4, #12]
 802797c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8027980:	0719      	lsls	r1, r3, #28
 8027982:	d42c      	bmi.n	80279de <__swsetup_r+0x82>
 8027984:	06dd      	lsls	r5, r3, #27
 8027986:	d411      	bmi.n	80279ac <__swsetup_r+0x50>
 8027988:	2309      	movs	r3, #9
 802798a:	6033      	str	r3, [r6, #0]
 802798c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8027990:	81a3      	strh	r3, [r4, #12]
 8027992:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8027996:	e03e      	b.n	8027a16 <__swsetup_r+0xba>
 8027998:	4b25      	ldr	r3, [pc, #148]	; (8027a30 <__swsetup_r+0xd4>)
 802799a:	429c      	cmp	r4, r3
 802799c:	d101      	bne.n	80279a2 <__swsetup_r+0x46>
 802799e:	68ac      	ldr	r4, [r5, #8]
 80279a0:	e7eb      	b.n	802797a <__swsetup_r+0x1e>
 80279a2:	4b24      	ldr	r3, [pc, #144]	; (8027a34 <__swsetup_r+0xd8>)
 80279a4:	429c      	cmp	r4, r3
 80279a6:	bf08      	it	eq
 80279a8:	68ec      	ldreq	r4, [r5, #12]
 80279aa:	e7e6      	b.n	802797a <__swsetup_r+0x1e>
 80279ac:	0758      	lsls	r0, r3, #29
 80279ae:	d512      	bpl.n	80279d6 <__swsetup_r+0x7a>
 80279b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80279b2:	b141      	cbz	r1, 80279c6 <__swsetup_r+0x6a>
 80279b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80279b8:	4299      	cmp	r1, r3
 80279ba:	d002      	beq.n	80279c2 <__swsetup_r+0x66>
 80279bc:	4630      	mov	r0, r6
 80279be:	f7ff fa45 	bl	8026e4c <_free_r>
 80279c2:	2300      	movs	r3, #0
 80279c4:	6363      	str	r3, [r4, #52]	; 0x34
 80279c6:	89a3      	ldrh	r3, [r4, #12]
 80279c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80279cc:	81a3      	strh	r3, [r4, #12]
 80279ce:	2300      	movs	r3, #0
 80279d0:	6063      	str	r3, [r4, #4]
 80279d2:	6923      	ldr	r3, [r4, #16]
 80279d4:	6023      	str	r3, [r4, #0]
 80279d6:	89a3      	ldrh	r3, [r4, #12]
 80279d8:	f043 0308 	orr.w	r3, r3, #8
 80279dc:	81a3      	strh	r3, [r4, #12]
 80279de:	6923      	ldr	r3, [r4, #16]
 80279e0:	b94b      	cbnz	r3, 80279f6 <__swsetup_r+0x9a>
 80279e2:	89a3      	ldrh	r3, [r4, #12]
 80279e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80279e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80279ec:	d003      	beq.n	80279f6 <__swsetup_r+0x9a>
 80279ee:	4621      	mov	r1, r4
 80279f0:	4630      	mov	r0, r6
 80279f2:	f000 fa63 	bl	8027ebc <__smakebuf_r>
 80279f6:	89a0      	ldrh	r0, [r4, #12]
 80279f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80279fc:	f010 0301 	ands.w	r3, r0, #1
 8027a00:	d00a      	beq.n	8027a18 <__swsetup_r+0xbc>
 8027a02:	2300      	movs	r3, #0
 8027a04:	60a3      	str	r3, [r4, #8]
 8027a06:	6963      	ldr	r3, [r4, #20]
 8027a08:	425b      	negs	r3, r3
 8027a0a:	61a3      	str	r3, [r4, #24]
 8027a0c:	6923      	ldr	r3, [r4, #16]
 8027a0e:	b943      	cbnz	r3, 8027a22 <__swsetup_r+0xc6>
 8027a10:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8027a14:	d1ba      	bne.n	802798c <__swsetup_r+0x30>
 8027a16:	bd70      	pop	{r4, r5, r6, pc}
 8027a18:	0781      	lsls	r1, r0, #30
 8027a1a:	bf58      	it	pl
 8027a1c:	6963      	ldrpl	r3, [r4, #20]
 8027a1e:	60a3      	str	r3, [r4, #8]
 8027a20:	e7f4      	b.n	8027a0c <__swsetup_r+0xb0>
 8027a22:	2000      	movs	r0, #0
 8027a24:	e7f7      	b.n	8027a16 <__swsetup_r+0xba>
 8027a26:	bf00      	nop
 8027a28:	2000005c 	.word	0x2000005c
 8027a2c:	0808981c 	.word	0x0808981c
 8027a30:	0808983c 	.word	0x0808983c
 8027a34:	080897fc 	.word	0x080897fc

08027a38 <__register_exitproc>:
 8027a38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8027a3c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8027af8 <__register_exitproc+0xc0>
 8027a40:	4606      	mov	r6, r0
 8027a42:	f8d8 0000 	ldr.w	r0, [r8]
 8027a46:	461f      	mov	r7, r3
 8027a48:	460d      	mov	r5, r1
 8027a4a:	4691      	mov	r9, r2
 8027a4c:	f000 fa0e 	bl	8027e6c <__retarget_lock_acquire_recursive>
 8027a50:	4b25      	ldr	r3, [pc, #148]	; (8027ae8 <__register_exitproc+0xb0>)
 8027a52:	681c      	ldr	r4, [r3, #0]
 8027a54:	b934      	cbnz	r4, 8027a64 <__register_exitproc+0x2c>
 8027a56:	4c25      	ldr	r4, [pc, #148]	; (8027aec <__register_exitproc+0xb4>)
 8027a58:	601c      	str	r4, [r3, #0]
 8027a5a:	4b25      	ldr	r3, [pc, #148]	; (8027af0 <__register_exitproc+0xb8>)
 8027a5c:	b113      	cbz	r3, 8027a64 <__register_exitproc+0x2c>
 8027a5e:	681b      	ldr	r3, [r3, #0]
 8027a60:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8027a64:	6863      	ldr	r3, [r4, #4]
 8027a66:	2b1f      	cmp	r3, #31
 8027a68:	dd07      	ble.n	8027a7a <__register_exitproc+0x42>
 8027a6a:	f8d8 0000 	ldr.w	r0, [r8]
 8027a6e:	f000 f9ff 	bl	8027e70 <__retarget_lock_release_recursive>
 8027a72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8027a76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8027a7a:	b34e      	cbz	r6, 8027ad0 <__register_exitproc+0x98>
 8027a7c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8027a80:	b988      	cbnz	r0, 8027aa6 <__register_exitproc+0x6e>
 8027a82:	4b1c      	ldr	r3, [pc, #112]	; (8027af4 <__register_exitproc+0xbc>)
 8027a84:	b923      	cbnz	r3, 8027a90 <__register_exitproc+0x58>
 8027a86:	f8d8 0000 	ldr.w	r0, [r8]
 8027a8a:	f000 f9f0 	bl	8027e6e <__retarget_lock_release>
 8027a8e:	e7f0      	b.n	8027a72 <__register_exitproc+0x3a>
 8027a90:	f44f 7084 	mov.w	r0, #264	; 0x108
 8027a94:	f7ff f99a 	bl	8026dcc <malloc>
 8027a98:	2800      	cmp	r0, #0
 8027a9a:	d0f4      	beq.n	8027a86 <__register_exitproc+0x4e>
 8027a9c:	2300      	movs	r3, #0
 8027a9e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8027aa2:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8027aa6:	6863      	ldr	r3, [r4, #4]
 8027aa8:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8027aac:	2201      	movs	r2, #1
 8027aae:	409a      	lsls	r2, r3
 8027ab0:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8027ab4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8027ab8:	4313      	orrs	r3, r2
 8027aba:	2e02      	cmp	r6, #2
 8027abc:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8027ac0:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8027ac4:	bf02      	ittt	eq
 8027ac6:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8027aca:	431a      	orreq	r2, r3
 8027acc:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 8027ad0:	6863      	ldr	r3, [r4, #4]
 8027ad2:	f8d8 0000 	ldr.w	r0, [r8]
 8027ad6:	1c5a      	adds	r2, r3, #1
 8027ad8:	3302      	adds	r3, #2
 8027ada:	6062      	str	r2, [r4, #4]
 8027adc:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8027ae0:	f000 f9c6 	bl	8027e70 <__retarget_lock_release_recursive>
 8027ae4:	2000      	movs	r0, #0
 8027ae6:	e7c6      	b.n	8027a76 <__register_exitproc+0x3e>
 8027ae8:	20047c48 	.word	0x20047c48
 8027aec:	20047bbc 	.word	0x20047bbc
 8027af0:	00000000 	.word	0x00000000
 8027af4:	08026dcd 	.word	0x08026dcd
 8027af8:	200000c0 	.word	0x200000c0

08027afc <__sflush_r>:
 8027afc:	898a      	ldrh	r2, [r1, #12]
 8027afe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027b02:	4605      	mov	r5, r0
 8027b04:	0710      	lsls	r0, r2, #28
 8027b06:	460c      	mov	r4, r1
 8027b08:	d458      	bmi.n	8027bbc <__sflush_r+0xc0>
 8027b0a:	684b      	ldr	r3, [r1, #4]
 8027b0c:	2b00      	cmp	r3, #0
 8027b0e:	dc05      	bgt.n	8027b1c <__sflush_r+0x20>
 8027b10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8027b12:	2b00      	cmp	r3, #0
 8027b14:	dc02      	bgt.n	8027b1c <__sflush_r+0x20>
 8027b16:	2000      	movs	r0, #0
 8027b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027b1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8027b1e:	2e00      	cmp	r6, #0
 8027b20:	d0f9      	beq.n	8027b16 <__sflush_r+0x1a>
 8027b22:	2300      	movs	r3, #0
 8027b24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8027b28:	682f      	ldr	r7, [r5, #0]
 8027b2a:	602b      	str	r3, [r5, #0]
 8027b2c:	d032      	beq.n	8027b94 <__sflush_r+0x98>
 8027b2e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8027b30:	89a3      	ldrh	r3, [r4, #12]
 8027b32:	075a      	lsls	r2, r3, #29
 8027b34:	d505      	bpl.n	8027b42 <__sflush_r+0x46>
 8027b36:	6863      	ldr	r3, [r4, #4]
 8027b38:	1ac0      	subs	r0, r0, r3
 8027b3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8027b3c:	b10b      	cbz	r3, 8027b42 <__sflush_r+0x46>
 8027b3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8027b40:	1ac0      	subs	r0, r0, r3
 8027b42:	2300      	movs	r3, #0
 8027b44:	4602      	mov	r2, r0
 8027b46:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8027b48:	6a21      	ldr	r1, [r4, #32]
 8027b4a:	4628      	mov	r0, r5
 8027b4c:	47b0      	blx	r6
 8027b4e:	1c43      	adds	r3, r0, #1
 8027b50:	89a3      	ldrh	r3, [r4, #12]
 8027b52:	d106      	bne.n	8027b62 <__sflush_r+0x66>
 8027b54:	6829      	ldr	r1, [r5, #0]
 8027b56:	291d      	cmp	r1, #29
 8027b58:	d82c      	bhi.n	8027bb4 <__sflush_r+0xb8>
 8027b5a:	4a2a      	ldr	r2, [pc, #168]	; (8027c04 <__sflush_r+0x108>)
 8027b5c:	40ca      	lsrs	r2, r1
 8027b5e:	07d6      	lsls	r6, r2, #31
 8027b60:	d528      	bpl.n	8027bb4 <__sflush_r+0xb8>
 8027b62:	2200      	movs	r2, #0
 8027b64:	6062      	str	r2, [r4, #4]
 8027b66:	04d9      	lsls	r1, r3, #19
 8027b68:	6922      	ldr	r2, [r4, #16]
 8027b6a:	6022      	str	r2, [r4, #0]
 8027b6c:	d504      	bpl.n	8027b78 <__sflush_r+0x7c>
 8027b6e:	1c42      	adds	r2, r0, #1
 8027b70:	d101      	bne.n	8027b76 <__sflush_r+0x7a>
 8027b72:	682b      	ldr	r3, [r5, #0]
 8027b74:	b903      	cbnz	r3, 8027b78 <__sflush_r+0x7c>
 8027b76:	6560      	str	r0, [r4, #84]	; 0x54
 8027b78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8027b7a:	602f      	str	r7, [r5, #0]
 8027b7c:	2900      	cmp	r1, #0
 8027b7e:	d0ca      	beq.n	8027b16 <__sflush_r+0x1a>
 8027b80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8027b84:	4299      	cmp	r1, r3
 8027b86:	d002      	beq.n	8027b8e <__sflush_r+0x92>
 8027b88:	4628      	mov	r0, r5
 8027b8a:	f7ff f95f 	bl	8026e4c <_free_r>
 8027b8e:	2000      	movs	r0, #0
 8027b90:	6360      	str	r0, [r4, #52]	; 0x34
 8027b92:	e7c1      	b.n	8027b18 <__sflush_r+0x1c>
 8027b94:	6a21      	ldr	r1, [r4, #32]
 8027b96:	2301      	movs	r3, #1
 8027b98:	4628      	mov	r0, r5
 8027b9a:	47b0      	blx	r6
 8027b9c:	1c41      	adds	r1, r0, #1
 8027b9e:	d1c7      	bne.n	8027b30 <__sflush_r+0x34>
 8027ba0:	682b      	ldr	r3, [r5, #0]
 8027ba2:	2b00      	cmp	r3, #0
 8027ba4:	d0c4      	beq.n	8027b30 <__sflush_r+0x34>
 8027ba6:	2b1d      	cmp	r3, #29
 8027ba8:	d001      	beq.n	8027bae <__sflush_r+0xb2>
 8027baa:	2b16      	cmp	r3, #22
 8027bac:	d101      	bne.n	8027bb2 <__sflush_r+0xb6>
 8027bae:	602f      	str	r7, [r5, #0]
 8027bb0:	e7b1      	b.n	8027b16 <__sflush_r+0x1a>
 8027bb2:	89a3      	ldrh	r3, [r4, #12]
 8027bb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8027bb8:	81a3      	strh	r3, [r4, #12]
 8027bba:	e7ad      	b.n	8027b18 <__sflush_r+0x1c>
 8027bbc:	690f      	ldr	r7, [r1, #16]
 8027bbe:	2f00      	cmp	r7, #0
 8027bc0:	d0a9      	beq.n	8027b16 <__sflush_r+0x1a>
 8027bc2:	0793      	lsls	r3, r2, #30
 8027bc4:	680e      	ldr	r6, [r1, #0]
 8027bc6:	bf08      	it	eq
 8027bc8:	694b      	ldreq	r3, [r1, #20]
 8027bca:	600f      	str	r7, [r1, #0]
 8027bcc:	bf18      	it	ne
 8027bce:	2300      	movne	r3, #0
 8027bd0:	eba6 0807 	sub.w	r8, r6, r7
 8027bd4:	608b      	str	r3, [r1, #8]
 8027bd6:	f1b8 0f00 	cmp.w	r8, #0
 8027bda:	dd9c      	ble.n	8027b16 <__sflush_r+0x1a>
 8027bdc:	6a21      	ldr	r1, [r4, #32]
 8027bde:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8027be0:	4643      	mov	r3, r8
 8027be2:	463a      	mov	r2, r7
 8027be4:	4628      	mov	r0, r5
 8027be6:	47b0      	blx	r6
 8027be8:	2800      	cmp	r0, #0
 8027bea:	dc06      	bgt.n	8027bfa <__sflush_r+0xfe>
 8027bec:	89a3      	ldrh	r3, [r4, #12]
 8027bee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8027bf2:	81a3      	strh	r3, [r4, #12]
 8027bf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8027bf8:	e78e      	b.n	8027b18 <__sflush_r+0x1c>
 8027bfa:	4407      	add	r7, r0
 8027bfc:	eba8 0800 	sub.w	r8, r8, r0
 8027c00:	e7e9      	b.n	8027bd6 <__sflush_r+0xda>
 8027c02:	bf00      	nop
 8027c04:	20400001 	.word	0x20400001

08027c08 <_fflush_r>:
 8027c08:	b538      	push	{r3, r4, r5, lr}
 8027c0a:	690b      	ldr	r3, [r1, #16]
 8027c0c:	4605      	mov	r5, r0
 8027c0e:	460c      	mov	r4, r1
 8027c10:	b913      	cbnz	r3, 8027c18 <_fflush_r+0x10>
 8027c12:	2500      	movs	r5, #0
 8027c14:	4628      	mov	r0, r5
 8027c16:	bd38      	pop	{r3, r4, r5, pc}
 8027c18:	b118      	cbz	r0, 8027c22 <_fflush_r+0x1a>
 8027c1a:	6983      	ldr	r3, [r0, #24]
 8027c1c:	b90b      	cbnz	r3, 8027c22 <_fflush_r+0x1a>
 8027c1e:	f000 f887 	bl	8027d30 <__sinit>
 8027c22:	4b14      	ldr	r3, [pc, #80]	; (8027c74 <_fflush_r+0x6c>)
 8027c24:	429c      	cmp	r4, r3
 8027c26:	d11b      	bne.n	8027c60 <_fflush_r+0x58>
 8027c28:	686c      	ldr	r4, [r5, #4]
 8027c2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8027c2e:	2b00      	cmp	r3, #0
 8027c30:	d0ef      	beq.n	8027c12 <_fflush_r+0xa>
 8027c32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8027c34:	07d0      	lsls	r0, r2, #31
 8027c36:	d404      	bmi.n	8027c42 <_fflush_r+0x3a>
 8027c38:	0599      	lsls	r1, r3, #22
 8027c3a:	d402      	bmi.n	8027c42 <_fflush_r+0x3a>
 8027c3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8027c3e:	f000 f915 	bl	8027e6c <__retarget_lock_acquire_recursive>
 8027c42:	4628      	mov	r0, r5
 8027c44:	4621      	mov	r1, r4
 8027c46:	f7ff ff59 	bl	8027afc <__sflush_r>
 8027c4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8027c4c:	07da      	lsls	r2, r3, #31
 8027c4e:	4605      	mov	r5, r0
 8027c50:	d4e0      	bmi.n	8027c14 <_fflush_r+0xc>
 8027c52:	89a3      	ldrh	r3, [r4, #12]
 8027c54:	059b      	lsls	r3, r3, #22
 8027c56:	d4dd      	bmi.n	8027c14 <_fflush_r+0xc>
 8027c58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8027c5a:	f000 f909 	bl	8027e70 <__retarget_lock_release_recursive>
 8027c5e:	e7d9      	b.n	8027c14 <_fflush_r+0xc>
 8027c60:	4b05      	ldr	r3, [pc, #20]	; (8027c78 <_fflush_r+0x70>)
 8027c62:	429c      	cmp	r4, r3
 8027c64:	d101      	bne.n	8027c6a <_fflush_r+0x62>
 8027c66:	68ac      	ldr	r4, [r5, #8]
 8027c68:	e7df      	b.n	8027c2a <_fflush_r+0x22>
 8027c6a:	4b04      	ldr	r3, [pc, #16]	; (8027c7c <_fflush_r+0x74>)
 8027c6c:	429c      	cmp	r4, r3
 8027c6e:	bf08      	it	eq
 8027c70:	68ec      	ldreq	r4, [r5, #12]
 8027c72:	e7da      	b.n	8027c2a <_fflush_r+0x22>
 8027c74:	0808981c 	.word	0x0808981c
 8027c78:	0808983c 	.word	0x0808983c
 8027c7c:	080897fc 	.word	0x080897fc

08027c80 <std>:
 8027c80:	2300      	movs	r3, #0
 8027c82:	b510      	push	{r4, lr}
 8027c84:	4604      	mov	r4, r0
 8027c86:	e9c0 3300 	strd	r3, r3, [r0]
 8027c8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8027c8e:	6083      	str	r3, [r0, #8]
 8027c90:	8181      	strh	r1, [r0, #12]
 8027c92:	6643      	str	r3, [r0, #100]	; 0x64
 8027c94:	81c2      	strh	r2, [r0, #14]
 8027c96:	6183      	str	r3, [r0, #24]
 8027c98:	4619      	mov	r1, r3
 8027c9a:	2208      	movs	r2, #8
 8027c9c:	305c      	adds	r0, #92	; 0x5c
 8027c9e:	f7ff f8cd 	bl	8026e3c <memset>
 8027ca2:	4b05      	ldr	r3, [pc, #20]	; (8027cb8 <std+0x38>)
 8027ca4:	6263      	str	r3, [r4, #36]	; 0x24
 8027ca6:	4b05      	ldr	r3, [pc, #20]	; (8027cbc <std+0x3c>)
 8027ca8:	62a3      	str	r3, [r4, #40]	; 0x28
 8027caa:	4b05      	ldr	r3, [pc, #20]	; (8027cc0 <std+0x40>)
 8027cac:	62e3      	str	r3, [r4, #44]	; 0x2c
 8027cae:	4b05      	ldr	r3, [pc, #20]	; (8027cc4 <std+0x44>)
 8027cb0:	6224      	str	r4, [r4, #32]
 8027cb2:	6323      	str	r3, [r4, #48]	; 0x30
 8027cb4:	bd10      	pop	{r4, pc}
 8027cb6:	bf00      	nop
 8027cb8:	08028259 	.word	0x08028259
 8027cbc:	0802827b 	.word	0x0802827b
 8027cc0:	080282b3 	.word	0x080282b3
 8027cc4:	080282d7 	.word	0x080282d7

08027cc8 <_cleanup_r>:
 8027cc8:	4901      	ldr	r1, [pc, #4]	; (8027cd0 <_cleanup_r+0x8>)
 8027cca:	f000 b8af 	b.w	8027e2c <_fwalk_reent>
 8027cce:	bf00      	nop
 8027cd0:	08027c09 	.word	0x08027c09

08027cd4 <__sfmoreglue>:
 8027cd4:	b570      	push	{r4, r5, r6, lr}
 8027cd6:	1e4a      	subs	r2, r1, #1
 8027cd8:	2568      	movs	r5, #104	; 0x68
 8027cda:	4355      	muls	r5, r2
 8027cdc:	460e      	mov	r6, r1
 8027cde:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8027ce2:	f7ff f903 	bl	8026eec <_malloc_r>
 8027ce6:	4604      	mov	r4, r0
 8027ce8:	b140      	cbz	r0, 8027cfc <__sfmoreglue+0x28>
 8027cea:	2100      	movs	r1, #0
 8027cec:	e9c0 1600 	strd	r1, r6, [r0]
 8027cf0:	300c      	adds	r0, #12
 8027cf2:	60a0      	str	r0, [r4, #8]
 8027cf4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8027cf8:	f7ff f8a0 	bl	8026e3c <memset>
 8027cfc:	4620      	mov	r0, r4
 8027cfe:	bd70      	pop	{r4, r5, r6, pc}

08027d00 <__sfp_lock_acquire>:
 8027d00:	4801      	ldr	r0, [pc, #4]	; (8027d08 <__sfp_lock_acquire+0x8>)
 8027d02:	f000 b8b3 	b.w	8027e6c <__retarget_lock_acquire_recursive>
 8027d06:	bf00      	nop
 8027d08:	20047fa8 	.word	0x20047fa8

08027d0c <__sfp_lock_release>:
 8027d0c:	4801      	ldr	r0, [pc, #4]	; (8027d14 <__sfp_lock_release+0x8>)
 8027d0e:	f000 b8af 	b.w	8027e70 <__retarget_lock_release_recursive>
 8027d12:	bf00      	nop
 8027d14:	20047fa8 	.word	0x20047fa8

08027d18 <__sinit_lock_acquire>:
 8027d18:	4801      	ldr	r0, [pc, #4]	; (8027d20 <__sinit_lock_acquire+0x8>)
 8027d1a:	f000 b8a7 	b.w	8027e6c <__retarget_lock_acquire_recursive>
 8027d1e:	bf00      	nop
 8027d20:	20047fa7 	.word	0x20047fa7

08027d24 <__sinit_lock_release>:
 8027d24:	4801      	ldr	r0, [pc, #4]	; (8027d2c <__sinit_lock_release+0x8>)
 8027d26:	f000 b8a3 	b.w	8027e70 <__retarget_lock_release_recursive>
 8027d2a:	bf00      	nop
 8027d2c:	20047fa7 	.word	0x20047fa7

08027d30 <__sinit>:
 8027d30:	b510      	push	{r4, lr}
 8027d32:	4604      	mov	r4, r0
 8027d34:	f7ff fff0 	bl	8027d18 <__sinit_lock_acquire>
 8027d38:	69a3      	ldr	r3, [r4, #24]
 8027d3a:	b11b      	cbz	r3, 8027d44 <__sinit+0x14>
 8027d3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8027d40:	f7ff bff0 	b.w	8027d24 <__sinit_lock_release>
 8027d44:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8027d48:	6523      	str	r3, [r4, #80]	; 0x50
 8027d4a:	4b13      	ldr	r3, [pc, #76]	; (8027d98 <__sinit+0x68>)
 8027d4c:	4a13      	ldr	r2, [pc, #76]	; (8027d9c <__sinit+0x6c>)
 8027d4e:	681b      	ldr	r3, [r3, #0]
 8027d50:	62a2      	str	r2, [r4, #40]	; 0x28
 8027d52:	42a3      	cmp	r3, r4
 8027d54:	bf04      	itt	eq
 8027d56:	2301      	moveq	r3, #1
 8027d58:	61a3      	streq	r3, [r4, #24]
 8027d5a:	4620      	mov	r0, r4
 8027d5c:	f000 f820 	bl	8027da0 <__sfp>
 8027d60:	6060      	str	r0, [r4, #4]
 8027d62:	4620      	mov	r0, r4
 8027d64:	f000 f81c 	bl	8027da0 <__sfp>
 8027d68:	60a0      	str	r0, [r4, #8]
 8027d6a:	4620      	mov	r0, r4
 8027d6c:	f000 f818 	bl	8027da0 <__sfp>
 8027d70:	2200      	movs	r2, #0
 8027d72:	60e0      	str	r0, [r4, #12]
 8027d74:	2104      	movs	r1, #4
 8027d76:	6860      	ldr	r0, [r4, #4]
 8027d78:	f7ff ff82 	bl	8027c80 <std>
 8027d7c:	68a0      	ldr	r0, [r4, #8]
 8027d7e:	2201      	movs	r2, #1
 8027d80:	2109      	movs	r1, #9
 8027d82:	f7ff ff7d 	bl	8027c80 <std>
 8027d86:	68e0      	ldr	r0, [r4, #12]
 8027d88:	2202      	movs	r2, #2
 8027d8a:	2112      	movs	r1, #18
 8027d8c:	f7ff ff78 	bl	8027c80 <std>
 8027d90:	2301      	movs	r3, #1
 8027d92:	61a3      	str	r3, [r4, #24]
 8027d94:	e7d2      	b.n	8027d3c <__sinit+0xc>
 8027d96:	bf00      	nop
 8027d98:	0808964c 	.word	0x0808964c
 8027d9c:	08027cc9 	.word	0x08027cc9

08027da0 <__sfp>:
 8027da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027da2:	4607      	mov	r7, r0
 8027da4:	f7ff ffac 	bl	8027d00 <__sfp_lock_acquire>
 8027da8:	4b1e      	ldr	r3, [pc, #120]	; (8027e24 <__sfp+0x84>)
 8027daa:	681e      	ldr	r6, [r3, #0]
 8027dac:	69b3      	ldr	r3, [r6, #24]
 8027dae:	b913      	cbnz	r3, 8027db6 <__sfp+0x16>
 8027db0:	4630      	mov	r0, r6
 8027db2:	f7ff ffbd 	bl	8027d30 <__sinit>
 8027db6:	3648      	adds	r6, #72	; 0x48
 8027db8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8027dbc:	3b01      	subs	r3, #1
 8027dbe:	d503      	bpl.n	8027dc8 <__sfp+0x28>
 8027dc0:	6833      	ldr	r3, [r6, #0]
 8027dc2:	b30b      	cbz	r3, 8027e08 <__sfp+0x68>
 8027dc4:	6836      	ldr	r6, [r6, #0]
 8027dc6:	e7f7      	b.n	8027db8 <__sfp+0x18>
 8027dc8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8027dcc:	b9d5      	cbnz	r5, 8027e04 <__sfp+0x64>
 8027dce:	4b16      	ldr	r3, [pc, #88]	; (8027e28 <__sfp+0x88>)
 8027dd0:	60e3      	str	r3, [r4, #12]
 8027dd2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8027dd6:	6665      	str	r5, [r4, #100]	; 0x64
 8027dd8:	f000 f847 	bl	8027e6a <__retarget_lock_init_recursive>
 8027ddc:	f7ff ff96 	bl	8027d0c <__sfp_lock_release>
 8027de0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8027de4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8027de8:	6025      	str	r5, [r4, #0]
 8027dea:	61a5      	str	r5, [r4, #24]
 8027dec:	2208      	movs	r2, #8
 8027dee:	4629      	mov	r1, r5
 8027df0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8027df4:	f7ff f822 	bl	8026e3c <memset>
 8027df8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8027dfc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8027e00:	4620      	mov	r0, r4
 8027e02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8027e04:	3468      	adds	r4, #104	; 0x68
 8027e06:	e7d9      	b.n	8027dbc <__sfp+0x1c>
 8027e08:	2104      	movs	r1, #4
 8027e0a:	4638      	mov	r0, r7
 8027e0c:	f7ff ff62 	bl	8027cd4 <__sfmoreglue>
 8027e10:	4604      	mov	r4, r0
 8027e12:	6030      	str	r0, [r6, #0]
 8027e14:	2800      	cmp	r0, #0
 8027e16:	d1d5      	bne.n	8027dc4 <__sfp+0x24>
 8027e18:	f7ff ff78 	bl	8027d0c <__sfp_lock_release>
 8027e1c:	230c      	movs	r3, #12
 8027e1e:	603b      	str	r3, [r7, #0]
 8027e20:	e7ee      	b.n	8027e00 <__sfp+0x60>
 8027e22:	bf00      	nop
 8027e24:	0808964c 	.word	0x0808964c
 8027e28:	ffff0001 	.word	0xffff0001

08027e2c <_fwalk_reent>:
 8027e2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8027e30:	4606      	mov	r6, r0
 8027e32:	4688      	mov	r8, r1
 8027e34:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8027e38:	2700      	movs	r7, #0
 8027e3a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8027e3e:	f1b9 0901 	subs.w	r9, r9, #1
 8027e42:	d505      	bpl.n	8027e50 <_fwalk_reent+0x24>
 8027e44:	6824      	ldr	r4, [r4, #0]
 8027e46:	2c00      	cmp	r4, #0
 8027e48:	d1f7      	bne.n	8027e3a <_fwalk_reent+0xe>
 8027e4a:	4638      	mov	r0, r7
 8027e4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8027e50:	89ab      	ldrh	r3, [r5, #12]
 8027e52:	2b01      	cmp	r3, #1
 8027e54:	d907      	bls.n	8027e66 <_fwalk_reent+0x3a>
 8027e56:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8027e5a:	3301      	adds	r3, #1
 8027e5c:	d003      	beq.n	8027e66 <_fwalk_reent+0x3a>
 8027e5e:	4629      	mov	r1, r5
 8027e60:	4630      	mov	r0, r6
 8027e62:	47c0      	blx	r8
 8027e64:	4307      	orrs	r7, r0
 8027e66:	3568      	adds	r5, #104	; 0x68
 8027e68:	e7e9      	b.n	8027e3e <_fwalk_reent+0x12>

08027e6a <__retarget_lock_init_recursive>:
 8027e6a:	4770      	bx	lr

08027e6c <__retarget_lock_acquire_recursive>:
 8027e6c:	4770      	bx	lr

08027e6e <__retarget_lock_release>:
 8027e6e:	4770      	bx	lr

08027e70 <__retarget_lock_release_recursive>:
 8027e70:	4770      	bx	lr

08027e72 <__swhatbuf_r>:
 8027e72:	b570      	push	{r4, r5, r6, lr}
 8027e74:	460e      	mov	r6, r1
 8027e76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8027e7a:	2900      	cmp	r1, #0
 8027e7c:	b096      	sub	sp, #88	; 0x58
 8027e7e:	4614      	mov	r4, r2
 8027e80:	461d      	mov	r5, r3
 8027e82:	da07      	bge.n	8027e94 <__swhatbuf_r+0x22>
 8027e84:	2300      	movs	r3, #0
 8027e86:	602b      	str	r3, [r5, #0]
 8027e88:	89b3      	ldrh	r3, [r6, #12]
 8027e8a:	061a      	lsls	r2, r3, #24
 8027e8c:	d410      	bmi.n	8027eb0 <__swhatbuf_r+0x3e>
 8027e8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8027e92:	e00e      	b.n	8027eb2 <__swhatbuf_r+0x40>
 8027e94:	466a      	mov	r2, sp
 8027e96:	f000 fa45 	bl	8028324 <_fstat_r>
 8027e9a:	2800      	cmp	r0, #0
 8027e9c:	dbf2      	blt.n	8027e84 <__swhatbuf_r+0x12>
 8027e9e:	9a01      	ldr	r2, [sp, #4]
 8027ea0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8027ea4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8027ea8:	425a      	negs	r2, r3
 8027eaa:	415a      	adcs	r2, r3
 8027eac:	602a      	str	r2, [r5, #0]
 8027eae:	e7ee      	b.n	8027e8e <__swhatbuf_r+0x1c>
 8027eb0:	2340      	movs	r3, #64	; 0x40
 8027eb2:	2000      	movs	r0, #0
 8027eb4:	6023      	str	r3, [r4, #0]
 8027eb6:	b016      	add	sp, #88	; 0x58
 8027eb8:	bd70      	pop	{r4, r5, r6, pc}
	...

08027ebc <__smakebuf_r>:
 8027ebc:	898b      	ldrh	r3, [r1, #12]
 8027ebe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8027ec0:	079d      	lsls	r5, r3, #30
 8027ec2:	4606      	mov	r6, r0
 8027ec4:	460c      	mov	r4, r1
 8027ec6:	d507      	bpl.n	8027ed8 <__smakebuf_r+0x1c>
 8027ec8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8027ecc:	6023      	str	r3, [r4, #0]
 8027ece:	6123      	str	r3, [r4, #16]
 8027ed0:	2301      	movs	r3, #1
 8027ed2:	6163      	str	r3, [r4, #20]
 8027ed4:	b002      	add	sp, #8
 8027ed6:	bd70      	pop	{r4, r5, r6, pc}
 8027ed8:	ab01      	add	r3, sp, #4
 8027eda:	466a      	mov	r2, sp
 8027edc:	f7ff ffc9 	bl	8027e72 <__swhatbuf_r>
 8027ee0:	9900      	ldr	r1, [sp, #0]
 8027ee2:	4605      	mov	r5, r0
 8027ee4:	4630      	mov	r0, r6
 8027ee6:	f7ff f801 	bl	8026eec <_malloc_r>
 8027eea:	b948      	cbnz	r0, 8027f00 <__smakebuf_r+0x44>
 8027eec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8027ef0:	059a      	lsls	r2, r3, #22
 8027ef2:	d4ef      	bmi.n	8027ed4 <__smakebuf_r+0x18>
 8027ef4:	f023 0303 	bic.w	r3, r3, #3
 8027ef8:	f043 0302 	orr.w	r3, r3, #2
 8027efc:	81a3      	strh	r3, [r4, #12]
 8027efe:	e7e3      	b.n	8027ec8 <__smakebuf_r+0xc>
 8027f00:	4b0d      	ldr	r3, [pc, #52]	; (8027f38 <__smakebuf_r+0x7c>)
 8027f02:	62b3      	str	r3, [r6, #40]	; 0x28
 8027f04:	89a3      	ldrh	r3, [r4, #12]
 8027f06:	6020      	str	r0, [r4, #0]
 8027f08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8027f0c:	81a3      	strh	r3, [r4, #12]
 8027f0e:	9b00      	ldr	r3, [sp, #0]
 8027f10:	6163      	str	r3, [r4, #20]
 8027f12:	9b01      	ldr	r3, [sp, #4]
 8027f14:	6120      	str	r0, [r4, #16]
 8027f16:	b15b      	cbz	r3, 8027f30 <__smakebuf_r+0x74>
 8027f18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8027f1c:	4630      	mov	r0, r6
 8027f1e:	f000 fa13 	bl	8028348 <_isatty_r>
 8027f22:	b128      	cbz	r0, 8027f30 <__smakebuf_r+0x74>
 8027f24:	89a3      	ldrh	r3, [r4, #12]
 8027f26:	f023 0303 	bic.w	r3, r3, #3
 8027f2a:	f043 0301 	orr.w	r3, r3, #1
 8027f2e:	81a3      	strh	r3, [r4, #12]
 8027f30:	89a0      	ldrh	r0, [r4, #12]
 8027f32:	4305      	orrs	r5, r0
 8027f34:	81a5      	strh	r5, [r4, #12]
 8027f36:	e7cd      	b.n	8027ed4 <__smakebuf_r+0x18>
 8027f38:	08027cc9 	.word	0x08027cc9

08027f3c <__malloc_lock>:
 8027f3c:	4801      	ldr	r0, [pc, #4]	; (8027f44 <__malloc_lock+0x8>)
 8027f3e:	f7ff bf95 	b.w	8027e6c <__retarget_lock_acquire_recursive>
 8027f42:	bf00      	nop
 8027f44:	20047fa4 	.word	0x20047fa4

08027f48 <__malloc_unlock>:
 8027f48:	4801      	ldr	r0, [pc, #4]	; (8027f50 <__malloc_unlock+0x8>)
 8027f4a:	f7ff bf91 	b.w	8027e70 <__retarget_lock_release_recursive>
 8027f4e:	bf00      	nop
 8027f50:	20047fa4 	.word	0x20047fa4

08027f54 <_realloc_r>:
 8027f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027f56:	4607      	mov	r7, r0
 8027f58:	4614      	mov	r4, r2
 8027f5a:	460e      	mov	r6, r1
 8027f5c:	b921      	cbnz	r1, 8027f68 <_realloc_r+0x14>
 8027f5e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8027f62:	4611      	mov	r1, r2
 8027f64:	f7fe bfc2 	b.w	8026eec <_malloc_r>
 8027f68:	b922      	cbnz	r2, 8027f74 <_realloc_r+0x20>
 8027f6a:	f7fe ff6f 	bl	8026e4c <_free_r>
 8027f6e:	4625      	mov	r5, r4
 8027f70:	4628      	mov	r0, r5
 8027f72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8027f74:	f000 fa0a 	bl	802838c <_malloc_usable_size_r>
 8027f78:	42a0      	cmp	r0, r4
 8027f7a:	d20f      	bcs.n	8027f9c <_realloc_r+0x48>
 8027f7c:	4621      	mov	r1, r4
 8027f7e:	4638      	mov	r0, r7
 8027f80:	f7fe ffb4 	bl	8026eec <_malloc_r>
 8027f84:	4605      	mov	r5, r0
 8027f86:	2800      	cmp	r0, #0
 8027f88:	d0f2      	beq.n	8027f70 <_realloc_r+0x1c>
 8027f8a:	4631      	mov	r1, r6
 8027f8c:	4622      	mov	r2, r4
 8027f8e:	f7fe ff2d 	bl	8026dec <memcpy>
 8027f92:	4631      	mov	r1, r6
 8027f94:	4638      	mov	r0, r7
 8027f96:	f7fe ff59 	bl	8026e4c <_free_r>
 8027f9a:	e7e9      	b.n	8027f70 <_realloc_r+0x1c>
 8027f9c:	4635      	mov	r5, r6
 8027f9e:	e7e7      	b.n	8027f70 <_realloc_r+0x1c>

08027fa0 <__ssputs_r>:
 8027fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027fa4:	688e      	ldr	r6, [r1, #8]
 8027fa6:	429e      	cmp	r6, r3
 8027fa8:	4682      	mov	sl, r0
 8027faa:	460c      	mov	r4, r1
 8027fac:	4690      	mov	r8, r2
 8027fae:	461f      	mov	r7, r3
 8027fb0:	d838      	bhi.n	8028024 <__ssputs_r+0x84>
 8027fb2:	898a      	ldrh	r2, [r1, #12]
 8027fb4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8027fb8:	d032      	beq.n	8028020 <__ssputs_r+0x80>
 8027fba:	6825      	ldr	r5, [r4, #0]
 8027fbc:	6909      	ldr	r1, [r1, #16]
 8027fbe:	eba5 0901 	sub.w	r9, r5, r1
 8027fc2:	6965      	ldr	r5, [r4, #20]
 8027fc4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8027fc8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8027fcc:	3301      	adds	r3, #1
 8027fce:	444b      	add	r3, r9
 8027fd0:	106d      	asrs	r5, r5, #1
 8027fd2:	429d      	cmp	r5, r3
 8027fd4:	bf38      	it	cc
 8027fd6:	461d      	movcc	r5, r3
 8027fd8:	0553      	lsls	r3, r2, #21
 8027fda:	d531      	bpl.n	8028040 <__ssputs_r+0xa0>
 8027fdc:	4629      	mov	r1, r5
 8027fde:	f7fe ff85 	bl	8026eec <_malloc_r>
 8027fe2:	4606      	mov	r6, r0
 8027fe4:	b950      	cbnz	r0, 8027ffc <__ssputs_r+0x5c>
 8027fe6:	230c      	movs	r3, #12
 8027fe8:	f8ca 3000 	str.w	r3, [sl]
 8027fec:	89a3      	ldrh	r3, [r4, #12]
 8027fee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8027ff2:	81a3      	strh	r3, [r4, #12]
 8027ff4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8027ff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027ffc:	6921      	ldr	r1, [r4, #16]
 8027ffe:	464a      	mov	r2, r9
 8028000:	f7fe fef4 	bl	8026dec <memcpy>
 8028004:	89a3      	ldrh	r3, [r4, #12]
 8028006:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802800a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802800e:	81a3      	strh	r3, [r4, #12]
 8028010:	6126      	str	r6, [r4, #16]
 8028012:	6165      	str	r5, [r4, #20]
 8028014:	444e      	add	r6, r9
 8028016:	eba5 0509 	sub.w	r5, r5, r9
 802801a:	6026      	str	r6, [r4, #0]
 802801c:	60a5      	str	r5, [r4, #8]
 802801e:	463e      	mov	r6, r7
 8028020:	42be      	cmp	r6, r7
 8028022:	d900      	bls.n	8028026 <__ssputs_r+0x86>
 8028024:	463e      	mov	r6, r7
 8028026:	4632      	mov	r2, r6
 8028028:	6820      	ldr	r0, [r4, #0]
 802802a:	4641      	mov	r1, r8
 802802c:	f7fe feec 	bl	8026e08 <memmove>
 8028030:	68a3      	ldr	r3, [r4, #8]
 8028032:	6822      	ldr	r2, [r4, #0]
 8028034:	1b9b      	subs	r3, r3, r6
 8028036:	4432      	add	r2, r6
 8028038:	60a3      	str	r3, [r4, #8]
 802803a:	6022      	str	r2, [r4, #0]
 802803c:	2000      	movs	r0, #0
 802803e:	e7db      	b.n	8027ff8 <__ssputs_r+0x58>
 8028040:	462a      	mov	r2, r5
 8028042:	f7ff ff87 	bl	8027f54 <_realloc_r>
 8028046:	4606      	mov	r6, r0
 8028048:	2800      	cmp	r0, #0
 802804a:	d1e1      	bne.n	8028010 <__ssputs_r+0x70>
 802804c:	6921      	ldr	r1, [r4, #16]
 802804e:	4650      	mov	r0, sl
 8028050:	f7fe fefc 	bl	8026e4c <_free_r>
 8028054:	e7c7      	b.n	8027fe6 <__ssputs_r+0x46>
	...

08028058 <_svfiprintf_r>:
 8028058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802805c:	4698      	mov	r8, r3
 802805e:	898b      	ldrh	r3, [r1, #12]
 8028060:	061b      	lsls	r3, r3, #24
 8028062:	b09d      	sub	sp, #116	; 0x74
 8028064:	4607      	mov	r7, r0
 8028066:	460d      	mov	r5, r1
 8028068:	4614      	mov	r4, r2
 802806a:	d50e      	bpl.n	802808a <_svfiprintf_r+0x32>
 802806c:	690b      	ldr	r3, [r1, #16]
 802806e:	b963      	cbnz	r3, 802808a <_svfiprintf_r+0x32>
 8028070:	2140      	movs	r1, #64	; 0x40
 8028072:	f7fe ff3b 	bl	8026eec <_malloc_r>
 8028076:	6028      	str	r0, [r5, #0]
 8028078:	6128      	str	r0, [r5, #16]
 802807a:	b920      	cbnz	r0, 8028086 <_svfiprintf_r+0x2e>
 802807c:	230c      	movs	r3, #12
 802807e:	603b      	str	r3, [r7, #0]
 8028080:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8028084:	e0d1      	b.n	802822a <_svfiprintf_r+0x1d2>
 8028086:	2340      	movs	r3, #64	; 0x40
 8028088:	616b      	str	r3, [r5, #20]
 802808a:	2300      	movs	r3, #0
 802808c:	9309      	str	r3, [sp, #36]	; 0x24
 802808e:	2320      	movs	r3, #32
 8028090:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8028094:	f8cd 800c 	str.w	r8, [sp, #12]
 8028098:	2330      	movs	r3, #48	; 0x30
 802809a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8028244 <_svfiprintf_r+0x1ec>
 802809e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80280a2:	f04f 0901 	mov.w	r9, #1
 80280a6:	4623      	mov	r3, r4
 80280a8:	469a      	mov	sl, r3
 80280aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80280ae:	b10a      	cbz	r2, 80280b4 <_svfiprintf_r+0x5c>
 80280b0:	2a25      	cmp	r2, #37	; 0x25
 80280b2:	d1f9      	bne.n	80280a8 <_svfiprintf_r+0x50>
 80280b4:	ebba 0b04 	subs.w	fp, sl, r4
 80280b8:	d00b      	beq.n	80280d2 <_svfiprintf_r+0x7a>
 80280ba:	465b      	mov	r3, fp
 80280bc:	4622      	mov	r2, r4
 80280be:	4629      	mov	r1, r5
 80280c0:	4638      	mov	r0, r7
 80280c2:	f7ff ff6d 	bl	8027fa0 <__ssputs_r>
 80280c6:	3001      	adds	r0, #1
 80280c8:	f000 80aa 	beq.w	8028220 <_svfiprintf_r+0x1c8>
 80280cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80280ce:	445a      	add	r2, fp
 80280d0:	9209      	str	r2, [sp, #36]	; 0x24
 80280d2:	f89a 3000 	ldrb.w	r3, [sl]
 80280d6:	2b00      	cmp	r3, #0
 80280d8:	f000 80a2 	beq.w	8028220 <_svfiprintf_r+0x1c8>
 80280dc:	2300      	movs	r3, #0
 80280de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80280e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80280e6:	f10a 0a01 	add.w	sl, sl, #1
 80280ea:	9304      	str	r3, [sp, #16]
 80280ec:	9307      	str	r3, [sp, #28]
 80280ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80280f2:	931a      	str	r3, [sp, #104]	; 0x68
 80280f4:	4654      	mov	r4, sl
 80280f6:	2205      	movs	r2, #5
 80280f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80280fc:	4851      	ldr	r0, [pc, #324]	; (8028244 <_svfiprintf_r+0x1ec>)
 80280fe:	f7d8 f88f 	bl	8000220 <memchr>
 8028102:	9a04      	ldr	r2, [sp, #16]
 8028104:	b9d8      	cbnz	r0, 802813e <_svfiprintf_r+0xe6>
 8028106:	06d0      	lsls	r0, r2, #27
 8028108:	bf44      	itt	mi
 802810a:	2320      	movmi	r3, #32
 802810c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8028110:	0711      	lsls	r1, r2, #28
 8028112:	bf44      	itt	mi
 8028114:	232b      	movmi	r3, #43	; 0x2b
 8028116:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802811a:	f89a 3000 	ldrb.w	r3, [sl]
 802811e:	2b2a      	cmp	r3, #42	; 0x2a
 8028120:	d015      	beq.n	802814e <_svfiprintf_r+0xf6>
 8028122:	9a07      	ldr	r2, [sp, #28]
 8028124:	4654      	mov	r4, sl
 8028126:	2000      	movs	r0, #0
 8028128:	f04f 0c0a 	mov.w	ip, #10
 802812c:	4621      	mov	r1, r4
 802812e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8028132:	3b30      	subs	r3, #48	; 0x30
 8028134:	2b09      	cmp	r3, #9
 8028136:	d94e      	bls.n	80281d6 <_svfiprintf_r+0x17e>
 8028138:	b1b0      	cbz	r0, 8028168 <_svfiprintf_r+0x110>
 802813a:	9207      	str	r2, [sp, #28]
 802813c:	e014      	b.n	8028168 <_svfiprintf_r+0x110>
 802813e:	eba0 0308 	sub.w	r3, r0, r8
 8028142:	fa09 f303 	lsl.w	r3, r9, r3
 8028146:	4313      	orrs	r3, r2
 8028148:	9304      	str	r3, [sp, #16]
 802814a:	46a2      	mov	sl, r4
 802814c:	e7d2      	b.n	80280f4 <_svfiprintf_r+0x9c>
 802814e:	9b03      	ldr	r3, [sp, #12]
 8028150:	1d19      	adds	r1, r3, #4
 8028152:	681b      	ldr	r3, [r3, #0]
 8028154:	9103      	str	r1, [sp, #12]
 8028156:	2b00      	cmp	r3, #0
 8028158:	bfbb      	ittet	lt
 802815a:	425b      	neglt	r3, r3
 802815c:	f042 0202 	orrlt.w	r2, r2, #2
 8028160:	9307      	strge	r3, [sp, #28]
 8028162:	9307      	strlt	r3, [sp, #28]
 8028164:	bfb8      	it	lt
 8028166:	9204      	strlt	r2, [sp, #16]
 8028168:	7823      	ldrb	r3, [r4, #0]
 802816a:	2b2e      	cmp	r3, #46	; 0x2e
 802816c:	d10c      	bne.n	8028188 <_svfiprintf_r+0x130>
 802816e:	7863      	ldrb	r3, [r4, #1]
 8028170:	2b2a      	cmp	r3, #42	; 0x2a
 8028172:	d135      	bne.n	80281e0 <_svfiprintf_r+0x188>
 8028174:	9b03      	ldr	r3, [sp, #12]
 8028176:	1d1a      	adds	r2, r3, #4
 8028178:	681b      	ldr	r3, [r3, #0]
 802817a:	9203      	str	r2, [sp, #12]
 802817c:	2b00      	cmp	r3, #0
 802817e:	bfb8      	it	lt
 8028180:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8028184:	3402      	adds	r4, #2
 8028186:	9305      	str	r3, [sp, #20]
 8028188:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8028254 <_svfiprintf_r+0x1fc>
 802818c:	7821      	ldrb	r1, [r4, #0]
 802818e:	2203      	movs	r2, #3
 8028190:	4650      	mov	r0, sl
 8028192:	f7d8 f845 	bl	8000220 <memchr>
 8028196:	b140      	cbz	r0, 80281aa <_svfiprintf_r+0x152>
 8028198:	2340      	movs	r3, #64	; 0x40
 802819a:	eba0 000a 	sub.w	r0, r0, sl
 802819e:	fa03 f000 	lsl.w	r0, r3, r0
 80281a2:	9b04      	ldr	r3, [sp, #16]
 80281a4:	4303      	orrs	r3, r0
 80281a6:	3401      	adds	r4, #1
 80281a8:	9304      	str	r3, [sp, #16]
 80281aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80281ae:	4826      	ldr	r0, [pc, #152]	; (8028248 <_svfiprintf_r+0x1f0>)
 80281b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80281b4:	2206      	movs	r2, #6
 80281b6:	f7d8 f833 	bl	8000220 <memchr>
 80281ba:	2800      	cmp	r0, #0
 80281bc:	d038      	beq.n	8028230 <_svfiprintf_r+0x1d8>
 80281be:	4b23      	ldr	r3, [pc, #140]	; (802824c <_svfiprintf_r+0x1f4>)
 80281c0:	bb1b      	cbnz	r3, 802820a <_svfiprintf_r+0x1b2>
 80281c2:	9b03      	ldr	r3, [sp, #12]
 80281c4:	3307      	adds	r3, #7
 80281c6:	f023 0307 	bic.w	r3, r3, #7
 80281ca:	3308      	adds	r3, #8
 80281cc:	9303      	str	r3, [sp, #12]
 80281ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80281d0:	4433      	add	r3, r6
 80281d2:	9309      	str	r3, [sp, #36]	; 0x24
 80281d4:	e767      	b.n	80280a6 <_svfiprintf_r+0x4e>
 80281d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80281da:	460c      	mov	r4, r1
 80281dc:	2001      	movs	r0, #1
 80281de:	e7a5      	b.n	802812c <_svfiprintf_r+0xd4>
 80281e0:	2300      	movs	r3, #0
 80281e2:	3401      	adds	r4, #1
 80281e4:	9305      	str	r3, [sp, #20]
 80281e6:	4619      	mov	r1, r3
 80281e8:	f04f 0c0a 	mov.w	ip, #10
 80281ec:	4620      	mov	r0, r4
 80281ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80281f2:	3a30      	subs	r2, #48	; 0x30
 80281f4:	2a09      	cmp	r2, #9
 80281f6:	d903      	bls.n	8028200 <_svfiprintf_r+0x1a8>
 80281f8:	2b00      	cmp	r3, #0
 80281fa:	d0c5      	beq.n	8028188 <_svfiprintf_r+0x130>
 80281fc:	9105      	str	r1, [sp, #20]
 80281fe:	e7c3      	b.n	8028188 <_svfiprintf_r+0x130>
 8028200:	fb0c 2101 	mla	r1, ip, r1, r2
 8028204:	4604      	mov	r4, r0
 8028206:	2301      	movs	r3, #1
 8028208:	e7f0      	b.n	80281ec <_svfiprintf_r+0x194>
 802820a:	ab03      	add	r3, sp, #12
 802820c:	9300      	str	r3, [sp, #0]
 802820e:	462a      	mov	r2, r5
 8028210:	4b0f      	ldr	r3, [pc, #60]	; (8028250 <_svfiprintf_r+0x1f8>)
 8028212:	a904      	add	r1, sp, #16
 8028214:	4638      	mov	r0, r7
 8028216:	f3af 8000 	nop.w
 802821a:	1c42      	adds	r2, r0, #1
 802821c:	4606      	mov	r6, r0
 802821e:	d1d6      	bne.n	80281ce <_svfiprintf_r+0x176>
 8028220:	89ab      	ldrh	r3, [r5, #12]
 8028222:	065b      	lsls	r3, r3, #25
 8028224:	f53f af2c 	bmi.w	8028080 <_svfiprintf_r+0x28>
 8028228:	9809      	ldr	r0, [sp, #36]	; 0x24
 802822a:	b01d      	add	sp, #116	; 0x74
 802822c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028230:	ab03      	add	r3, sp, #12
 8028232:	9300      	str	r3, [sp, #0]
 8028234:	462a      	mov	r2, r5
 8028236:	4b06      	ldr	r3, [pc, #24]	; (8028250 <_svfiprintf_r+0x1f8>)
 8028238:	a904      	add	r1, sp, #16
 802823a:	4638      	mov	r0, r7
 802823c:	f7ff f878 	bl	8027330 <_printf_i>
 8028240:	e7eb      	b.n	802821a <_svfiprintf_r+0x1c2>
 8028242:	bf00      	nop
 8028244:	08089650 	.word	0x08089650
 8028248:	0808965a 	.word	0x0808965a
 802824c:	00000000 	.word	0x00000000
 8028250:	08027fa1 	.word	0x08027fa1
 8028254:	08089656 	.word	0x08089656

08028258 <__sread>:
 8028258:	b510      	push	{r4, lr}
 802825a:	460c      	mov	r4, r1
 802825c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8028260:	f000 f89c 	bl	802839c <_read_r>
 8028264:	2800      	cmp	r0, #0
 8028266:	bfab      	itete	ge
 8028268:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802826a:	89a3      	ldrhlt	r3, [r4, #12]
 802826c:	181b      	addge	r3, r3, r0
 802826e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8028272:	bfac      	ite	ge
 8028274:	6563      	strge	r3, [r4, #84]	; 0x54
 8028276:	81a3      	strhlt	r3, [r4, #12]
 8028278:	bd10      	pop	{r4, pc}

0802827a <__swrite>:
 802827a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802827e:	461f      	mov	r7, r3
 8028280:	898b      	ldrh	r3, [r1, #12]
 8028282:	05db      	lsls	r3, r3, #23
 8028284:	4605      	mov	r5, r0
 8028286:	460c      	mov	r4, r1
 8028288:	4616      	mov	r6, r2
 802828a:	d505      	bpl.n	8028298 <__swrite+0x1e>
 802828c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8028290:	2302      	movs	r3, #2
 8028292:	2200      	movs	r2, #0
 8028294:	f000 f868 	bl	8028368 <_lseek_r>
 8028298:	89a3      	ldrh	r3, [r4, #12]
 802829a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802829e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80282a2:	81a3      	strh	r3, [r4, #12]
 80282a4:	4632      	mov	r2, r6
 80282a6:	463b      	mov	r3, r7
 80282a8:	4628      	mov	r0, r5
 80282aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80282ae:	f000 b817 	b.w	80282e0 <_write_r>

080282b2 <__sseek>:
 80282b2:	b510      	push	{r4, lr}
 80282b4:	460c      	mov	r4, r1
 80282b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80282ba:	f000 f855 	bl	8028368 <_lseek_r>
 80282be:	1c43      	adds	r3, r0, #1
 80282c0:	89a3      	ldrh	r3, [r4, #12]
 80282c2:	bf15      	itete	ne
 80282c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80282c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80282ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80282ce:	81a3      	strheq	r3, [r4, #12]
 80282d0:	bf18      	it	ne
 80282d2:	81a3      	strhne	r3, [r4, #12]
 80282d4:	bd10      	pop	{r4, pc}

080282d6 <__sclose>:
 80282d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80282da:	f000 b813 	b.w	8028304 <_close_r>
	...

080282e0 <_write_r>:
 80282e0:	b538      	push	{r3, r4, r5, lr}
 80282e2:	4d07      	ldr	r5, [pc, #28]	; (8028300 <_write_r+0x20>)
 80282e4:	4604      	mov	r4, r0
 80282e6:	4608      	mov	r0, r1
 80282e8:	4611      	mov	r1, r2
 80282ea:	2200      	movs	r2, #0
 80282ec:	602a      	str	r2, [r5, #0]
 80282ee:	461a      	mov	r2, r3
 80282f0:	f7da fb8d 	bl	8002a0e <_write>
 80282f4:	1c43      	adds	r3, r0, #1
 80282f6:	d102      	bne.n	80282fe <_write_r+0x1e>
 80282f8:	682b      	ldr	r3, [r5, #0]
 80282fa:	b103      	cbz	r3, 80282fe <_write_r+0x1e>
 80282fc:	6023      	str	r3, [r4, #0]
 80282fe:	bd38      	pop	{r3, r4, r5, pc}
 8028300:	20047fb0 	.word	0x20047fb0

08028304 <_close_r>:
 8028304:	b538      	push	{r3, r4, r5, lr}
 8028306:	4d06      	ldr	r5, [pc, #24]	; (8028320 <_close_r+0x1c>)
 8028308:	2300      	movs	r3, #0
 802830a:	4604      	mov	r4, r0
 802830c:	4608      	mov	r0, r1
 802830e:	602b      	str	r3, [r5, #0]
 8028310:	f7da fb99 	bl	8002a46 <_close>
 8028314:	1c43      	adds	r3, r0, #1
 8028316:	d102      	bne.n	802831e <_close_r+0x1a>
 8028318:	682b      	ldr	r3, [r5, #0]
 802831a:	b103      	cbz	r3, 802831e <_close_r+0x1a>
 802831c:	6023      	str	r3, [r4, #0]
 802831e:	bd38      	pop	{r3, r4, r5, pc}
 8028320:	20047fb0 	.word	0x20047fb0

08028324 <_fstat_r>:
 8028324:	b538      	push	{r3, r4, r5, lr}
 8028326:	4d07      	ldr	r5, [pc, #28]	; (8028344 <_fstat_r+0x20>)
 8028328:	2300      	movs	r3, #0
 802832a:	4604      	mov	r4, r0
 802832c:	4608      	mov	r0, r1
 802832e:	4611      	mov	r1, r2
 8028330:	602b      	str	r3, [r5, #0]
 8028332:	f7da fb94 	bl	8002a5e <_fstat>
 8028336:	1c43      	adds	r3, r0, #1
 8028338:	d102      	bne.n	8028340 <_fstat_r+0x1c>
 802833a:	682b      	ldr	r3, [r5, #0]
 802833c:	b103      	cbz	r3, 8028340 <_fstat_r+0x1c>
 802833e:	6023      	str	r3, [r4, #0]
 8028340:	bd38      	pop	{r3, r4, r5, pc}
 8028342:	bf00      	nop
 8028344:	20047fb0 	.word	0x20047fb0

08028348 <_isatty_r>:
 8028348:	b538      	push	{r3, r4, r5, lr}
 802834a:	4d06      	ldr	r5, [pc, #24]	; (8028364 <_isatty_r+0x1c>)
 802834c:	2300      	movs	r3, #0
 802834e:	4604      	mov	r4, r0
 8028350:	4608      	mov	r0, r1
 8028352:	602b      	str	r3, [r5, #0]
 8028354:	f7da fb93 	bl	8002a7e <_isatty>
 8028358:	1c43      	adds	r3, r0, #1
 802835a:	d102      	bne.n	8028362 <_isatty_r+0x1a>
 802835c:	682b      	ldr	r3, [r5, #0]
 802835e:	b103      	cbz	r3, 8028362 <_isatty_r+0x1a>
 8028360:	6023      	str	r3, [r4, #0]
 8028362:	bd38      	pop	{r3, r4, r5, pc}
 8028364:	20047fb0 	.word	0x20047fb0

08028368 <_lseek_r>:
 8028368:	b538      	push	{r3, r4, r5, lr}
 802836a:	4d07      	ldr	r5, [pc, #28]	; (8028388 <_lseek_r+0x20>)
 802836c:	4604      	mov	r4, r0
 802836e:	4608      	mov	r0, r1
 8028370:	4611      	mov	r1, r2
 8028372:	2200      	movs	r2, #0
 8028374:	602a      	str	r2, [r5, #0]
 8028376:	461a      	mov	r2, r3
 8028378:	f7da fb8c 	bl	8002a94 <_lseek>
 802837c:	1c43      	adds	r3, r0, #1
 802837e:	d102      	bne.n	8028386 <_lseek_r+0x1e>
 8028380:	682b      	ldr	r3, [r5, #0]
 8028382:	b103      	cbz	r3, 8028386 <_lseek_r+0x1e>
 8028384:	6023      	str	r3, [r4, #0]
 8028386:	bd38      	pop	{r3, r4, r5, pc}
 8028388:	20047fb0 	.word	0x20047fb0

0802838c <_malloc_usable_size_r>:
 802838c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8028390:	1f18      	subs	r0, r3, #4
 8028392:	2b00      	cmp	r3, #0
 8028394:	bfbc      	itt	lt
 8028396:	580b      	ldrlt	r3, [r1, r0]
 8028398:	18c0      	addlt	r0, r0, r3
 802839a:	4770      	bx	lr

0802839c <_read_r>:
 802839c:	b538      	push	{r3, r4, r5, lr}
 802839e:	4d07      	ldr	r5, [pc, #28]	; (80283bc <_read_r+0x20>)
 80283a0:	4604      	mov	r4, r0
 80283a2:	4608      	mov	r0, r1
 80283a4:	4611      	mov	r1, r2
 80283a6:	2200      	movs	r2, #0
 80283a8:	602a      	str	r2, [r5, #0]
 80283aa:	461a      	mov	r2, r3
 80283ac:	f7da fb12 	bl	80029d4 <_read>
 80283b0:	1c43      	adds	r3, r0, #1
 80283b2:	d102      	bne.n	80283ba <_read_r+0x1e>
 80283b4:	682b      	ldr	r3, [r5, #0]
 80283b6:	b103      	cbz	r3, 80283ba <_read_r+0x1e>
 80283b8:	6023      	str	r3, [r4, #0]
 80283ba:	bd38      	pop	{r3, r4, r5, pc}
 80283bc:	20047fb0 	.word	0x20047fb0

080283c0 <_init>:
 80283c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80283c2:	bf00      	nop
 80283c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80283c6:	bc08      	pop	{r3}
 80283c8:	469e      	mov	lr, r3
 80283ca:	4770      	bx	lr

080283cc <_fini>:
 80283cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80283ce:	bf00      	nop
 80283d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80283d2:	bc08      	pop	{r3}
 80283d4:	469e      	mov	lr, r3
 80283d6:	4770      	bx	lr
