
smart_intercom.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00026a8c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0004f57c  08026c70  08026c70  00036c70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080761ec  080761ec  00090084  2**0
                  CONTENTS
  4 .ARM          00000008  080761ec  080761ec  000861ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080761f4  080761f4  00090084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080761f4  080761f4  000861f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080761f8  080761f8  000861f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080761fc  00090000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0004aab8  20000084  08076280  00090084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2004ab3c  08076280  0009ab3c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00090084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00342a57  00000000  00000000  000900b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00021f2e  00000000  00000000  003d2b0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 0000a010  00000000  00000000  003f4a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00009b68  00000000  00000000  003fea50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000404fc  00000000  00000000  004085b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00088a59  00000000  00000000  00448ab4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001b4ec9  00000000  00000000  004d150d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  006863d6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0002e028  00000000  00000000  0068642c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000084 	.word	0x20000084
 80001fc:	00000000 	.word	0x00000000
 8000200:	08026c54 	.word	0x08026c54

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000088 	.word	0x20000088
 800021c:	08026c54 	.word	0x08026c54

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strcmp>:
 80002c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002c8:	2a01      	cmp	r2, #1
 80002ca:	bf28      	it	cs
 80002cc:	429a      	cmpcs	r2, r3
 80002ce:	d0f7      	beq.n	80002c0 <strcmp>
 80002d0:	1ad0      	subs	r0, r2, r3
 80002d2:	4770      	bx	lr

080002d4 <strlen>:
 80002d4:	4603      	mov	r3, r0
 80002d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002da:	2a00      	cmp	r2, #0
 80002dc:	d1fb      	bne.n	80002d6 <strlen+0x2>
 80002de:	1a18      	subs	r0, r3, r0
 80002e0:	3801      	subs	r0, #1
 80002e2:	4770      	bx	lr

080002e4 <__aeabi_drsub>:
 80002e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e8:	e002      	b.n	80002f0 <__adddf3>
 80002ea:	bf00      	nop

080002ec <__aeabi_dsub>:
 80002ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002f0 <__adddf3>:
 80002f0:	b530      	push	{r4, r5, lr}
 80002f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002fa:	ea94 0f05 	teq	r4, r5
 80002fe:	bf08      	it	eq
 8000300:	ea90 0f02 	teqeq	r0, r2
 8000304:	bf1f      	itttt	ne
 8000306:	ea54 0c00 	orrsne.w	ip, r4, r0
 800030a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000312:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000316:	f000 80e2 	beq.w	80004de <__adddf3+0x1ee>
 800031a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000322:	bfb8      	it	lt
 8000324:	426d      	neglt	r5, r5
 8000326:	dd0c      	ble.n	8000342 <__adddf3+0x52>
 8000328:	442c      	add	r4, r5
 800032a:	ea80 0202 	eor.w	r2, r0, r2
 800032e:	ea81 0303 	eor.w	r3, r1, r3
 8000332:	ea82 0000 	eor.w	r0, r2, r0
 8000336:	ea83 0101 	eor.w	r1, r3, r1
 800033a:	ea80 0202 	eor.w	r2, r0, r2
 800033e:	ea81 0303 	eor.w	r3, r1, r3
 8000342:	2d36      	cmp	r5, #54	; 0x36
 8000344:	bf88      	it	hi
 8000346:	bd30      	pophi	{r4, r5, pc}
 8000348:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800034c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000350:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000354:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x70>
 800035a:	4240      	negs	r0, r0
 800035c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000360:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000364:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000368:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800036c:	d002      	beq.n	8000374 <__adddf3+0x84>
 800036e:	4252      	negs	r2, r2
 8000370:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000374:	ea94 0f05 	teq	r4, r5
 8000378:	f000 80a7 	beq.w	80004ca <__adddf3+0x1da>
 800037c:	f1a4 0401 	sub.w	r4, r4, #1
 8000380:	f1d5 0e20 	rsbs	lr, r5, #32
 8000384:	db0d      	blt.n	80003a2 <__adddf3+0xb2>
 8000386:	fa02 fc0e 	lsl.w	ip, r2, lr
 800038a:	fa22 f205 	lsr.w	r2, r2, r5
 800038e:	1880      	adds	r0, r0, r2
 8000390:	f141 0100 	adc.w	r1, r1, #0
 8000394:	fa03 f20e 	lsl.w	r2, r3, lr
 8000398:	1880      	adds	r0, r0, r2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	4159      	adcs	r1, r3
 80003a0:	e00e      	b.n	80003c0 <__adddf3+0xd0>
 80003a2:	f1a5 0520 	sub.w	r5, r5, #32
 80003a6:	f10e 0e20 	add.w	lr, lr, #32
 80003aa:	2a01      	cmp	r2, #1
 80003ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003b0:	bf28      	it	cs
 80003b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b6:	fa43 f305 	asr.w	r3, r3, r5
 80003ba:	18c0      	adds	r0, r0, r3
 80003bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c4:	d507      	bpl.n	80003d6 <__adddf3+0xe6>
 80003c6:	f04f 0e00 	mov.w	lr, #0
 80003ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003da:	d31b      	bcc.n	8000414 <__adddf3+0x124>
 80003dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003e0:	d30c      	bcc.n	80003fc <__adddf3+0x10c>
 80003e2:	0849      	lsrs	r1, r1, #1
 80003e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003ec:	f104 0401 	add.w	r4, r4, #1
 80003f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f8:	f080 809a 	bcs.w	8000530 <__adddf3+0x240>
 80003fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000400:	bf08      	it	eq
 8000402:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000406:	f150 0000 	adcs.w	r0, r0, #0
 800040a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040e:	ea41 0105 	orr.w	r1, r1, r5
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000418:	4140      	adcs	r0, r0
 800041a:	eb41 0101 	adc.w	r1, r1, r1
 800041e:	3c01      	subs	r4, #1
 8000420:	bf28      	it	cs
 8000422:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000426:	d2e9      	bcs.n	80003fc <__adddf3+0x10c>
 8000428:	f091 0f00 	teq	r1, #0
 800042c:	bf04      	itt	eq
 800042e:	4601      	moveq	r1, r0
 8000430:	2000      	moveq	r0, #0
 8000432:	fab1 f381 	clz	r3, r1
 8000436:	bf08      	it	eq
 8000438:	3320      	addeq	r3, #32
 800043a:	f1a3 030b 	sub.w	r3, r3, #11
 800043e:	f1b3 0220 	subs.w	r2, r3, #32
 8000442:	da0c      	bge.n	800045e <__adddf3+0x16e>
 8000444:	320c      	adds	r2, #12
 8000446:	dd08      	ble.n	800045a <__adddf3+0x16a>
 8000448:	f102 0c14 	add.w	ip, r2, #20
 800044c:	f1c2 020c 	rsb	r2, r2, #12
 8000450:	fa01 f00c 	lsl.w	r0, r1, ip
 8000454:	fa21 f102 	lsr.w	r1, r1, r2
 8000458:	e00c      	b.n	8000474 <__adddf3+0x184>
 800045a:	f102 0214 	add.w	r2, r2, #20
 800045e:	bfd8      	it	le
 8000460:	f1c2 0c20 	rsble	ip, r2, #32
 8000464:	fa01 f102 	lsl.w	r1, r1, r2
 8000468:	fa20 fc0c 	lsr.w	ip, r0, ip
 800046c:	bfdc      	itt	le
 800046e:	ea41 010c 	orrle.w	r1, r1, ip
 8000472:	4090      	lslle	r0, r2
 8000474:	1ae4      	subs	r4, r4, r3
 8000476:	bfa2      	ittt	ge
 8000478:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800047c:	4329      	orrge	r1, r5
 800047e:	bd30      	popge	{r4, r5, pc}
 8000480:	ea6f 0404 	mvn.w	r4, r4
 8000484:	3c1f      	subs	r4, #31
 8000486:	da1c      	bge.n	80004c2 <__adddf3+0x1d2>
 8000488:	340c      	adds	r4, #12
 800048a:	dc0e      	bgt.n	80004aa <__adddf3+0x1ba>
 800048c:	f104 0414 	add.w	r4, r4, #20
 8000490:	f1c4 0220 	rsb	r2, r4, #32
 8000494:	fa20 f004 	lsr.w	r0, r0, r4
 8000498:	fa01 f302 	lsl.w	r3, r1, r2
 800049c:	ea40 0003 	orr.w	r0, r0, r3
 80004a0:	fa21 f304 	lsr.w	r3, r1, r4
 80004a4:	ea45 0103 	orr.w	r1, r5, r3
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	f1c4 040c 	rsb	r4, r4, #12
 80004ae:	f1c4 0220 	rsb	r2, r4, #32
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 f304 	lsl.w	r3, r1, r4
 80004ba:	ea40 0003 	orr.w	r0, r0, r3
 80004be:	4629      	mov	r1, r5
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	fa21 f004 	lsr.w	r0, r1, r4
 80004c6:	4629      	mov	r1, r5
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	f094 0f00 	teq	r4, #0
 80004ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004d2:	bf06      	itte	eq
 80004d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d8:	3401      	addeq	r4, #1
 80004da:	3d01      	subne	r5, #1
 80004dc:	e74e      	b.n	800037c <__adddf3+0x8c>
 80004de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e2:	bf18      	it	ne
 80004e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e8:	d029      	beq.n	800053e <__adddf3+0x24e>
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	d005      	beq.n	8000502 <__adddf3+0x212>
 80004f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004fa:	bf04      	itt	eq
 80004fc:	4619      	moveq	r1, r3
 80004fe:	4610      	moveq	r0, r2
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	ea91 0f03 	teq	r1, r3
 8000506:	bf1e      	ittt	ne
 8000508:	2100      	movne	r1, #0
 800050a:	2000      	movne	r0, #0
 800050c:	bd30      	popne	{r4, r5, pc}
 800050e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000512:	d105      	bne.n	8000520 <__adddf3+0x230>
 8000514:	0040      	lsls	r0, r0, #1
 8000516:	4149      	adcs	r1, r1
 8000518:	bf28      	it	cs
 800051a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051e:	bd30      	pop	{r4, r5, pc}
 8000520:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000524:	bf3c      	itt	cc
 8000526:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800052a:	bd30      	popcc	{r4, r5, pc}
 800052c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000530:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000534:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000538:	f04f 0000 	mov.w	r0, #0
 800053c:	bd30      	pop	{r4, r5, pc}
 800053e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000542:	bf1a      	itte	ne
 8000544:	4619      	movne	r1, r3
 8000546:	4610      	movne	r0, r2
 8000548:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800054c:	bf1c      	itt	ne
 800054e:	460b      	movne	r3, r1
 8000550:	4602      	movne	r2, r0
 8000552:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000556:	bf06      	itte	eq
 8000558:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800055c:	ea91 0f03 	teqeq	r1, r3
 8000560:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	bf00      	nop

08000568 <__aeabi_ui2d>:
 8000568:	f090 0f00 	teq	r0, #0
 800056c:	bf04      	itt	eq
 800056e:	2100      	moveq	r1, #0
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000578:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800057c:	f04f 0500 	mov.w	r5, #0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e750      	b.n	8000428 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_i2d>:
 8000588:	f090 0f00 	teq	r0, #0
 800058c:	bf04      	itt	eq
 800058e:	2100      	moveq	r1, #0
 8000590:	4770      	bxeq	lr
 8000592:	b530      	push	{r4, r5, lr}
 8000594:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000598:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800059c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005a0:	bf48      	it	mi
 80005a2:	4240      	negmi	r0, r0
 80005a4:	f04f 0100 	mov.w	r1, #0
 80005a8:	e73e      	b.n	8000428 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_f2d>:
 80005ac:	0042      	lsls	r2, r0, #1
 80005ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005ba:	bf1f      	itttt	ne
 80005bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c8:	4770      	bxne	lr
 80005ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ce:	bf08      	it	eq
 80005d0:	4770      	bxeq	lr
 80005d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d6:	bf04      	itt	eq
 80005d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005dc:	4770      	bxeq	lr
 80005de:	b530      	push	{r4, r5, lr}
 80005e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005ec:	e71c      	b.n	8000428 <__adddf3+0x138>
 80005ee:	bf00      	nop

080005f0 <__aeabi_ul2d>:
 80005f0:	ea50 0201 	orrs.w	r2, r0, r1
 80005f4:	bf08      	it	eq
 80005f6:	4770      	bxeq	lr
 80005f8:	b530      	push	{r4, r5, lr}
 80005fa:	f04f 0500 	mov.w	r5, #0
 80005fe:	e00a      	b.n	8000616 <__aeabi_l2d+0x16>

08000600 <__aeabi_l2d>:
 8000600:	ea50 0201 	orrs.w	r2, r0, r1
 8000604:	bf08      	it	eq
 8000606:	4770      	bxeq	lr
 8000608:	b530      	push	{r4, r5, lr}
 800060a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060e:	d502      	bpl.n	8000616 <__aeabi_l2d+0x16>
 8000610:	4240      	negs	r0, r0
 8000612:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000616:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800061a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000622:	f43f aed8 	beq.w	80003d6 <__adddf3+0xe6>
 8000626:	f04f 0203 	mov.w	r2, #3
 800062a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062e:	bf18      	it	ne
 8000630:	3203      	addne	r2, #3
 8000632:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000636:	bf18      	it	ne
 8000638:	3203      	addne	r2, #3
 800063a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063e:	f1c2 0320 	rsb	r3, r2, #32
 8000642:	fa00 fc03 	lsl.w	ip, r0, r3
 8000646:	fa20 f002 	lsr.w	r0, r0, r2
 800064a:	fa01 fe03 	lsl.w	lr, r1, r3
 800064e:	ea40 000e 	orr.w	r0, r0, lr
 8000652:	fa21 f102 	lsr.w	r1, r1, r2
 8000656:	4414      	add	r4, r2
 8000658:	e6bd      	b.n	80003d6 <__adddf3+0xe6>
 800065a:	bf00      	nop

0800065c <__aeabi_dmul>:
 800065c:	b570      	push	{r4, r5, r6, lr}
 800065e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000662:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000666:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800066a:	bf1d      	ittte	ne
 800066c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000670:	ea94 0f0c 	teqne	r4, ip
 8000674:	ea95 0f0c 	teqne	r5, ip
 8000678:	f000 f8de 	bleq	8000838 <__aeabi_dmul+0x1dc>
 800067c:	442c      	add	r4, r5
 800067e:	ea81 0603 	eor.w	r6, r1, r3
 8000682:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000686:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800068a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068e:	bf18      	it	ne
 8000690:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000694:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000698:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800069c:	d038      	beq.n	8000710 <__aeabi_dmul+0xb4>
 800069e:	fba0 ce02 	umull	ip, lr, r0, r2
 80006a2:	f04f 0500 	mov.w	r5, #0
 80006a6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006aa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006ae:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006b2:	f04f 0600 	mov.w	r6, #0
 80006b6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006ba:	f09c 0f00 	teq	ip, #0
 80006be:	bf18      	it	ne
 80006c0:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006cc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006d0:	d204      	bcs.n	80006dc <__aeabi_dmul+0x80>
 80006d2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d6:	416d      	adcs	r5, r5
 80006d8:	eb46 0606 	adc.w	r6, r6, r6
 80006dc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006e0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006ec:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006f0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f4:	bf88      	it	hi
 80006f6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006fa:	d81e      	bhi.n	800073a <__aeabi_dmul+0xde>
 80006fc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000700:	bf08      	it	eq
 8000702:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000706:	f150 0000 	adcs.w	r0, r0, #0
 800070a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070e:	bd70      	pop	{r4, r5, r6, pc}
 8000710:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000714:	ea46 0101 	orr.w	r1, r6, r1
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	ea81 0103 	eor.w	r1, r1, r3
 8000720:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000724:	bfc2      	ittt	gt
 8000726:	ebd4 050c 	rsbsgt	r5, r4, ip
 800072a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072e:	bd70      	popgt	{r4, r5, r6, pc}
 8000730:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000734:	f04f 0e00 	mov.w	lr, #0
 8000738:	3c01      	subs	r4, #1
 800073a:	f300 80ab 	bgt.w	8000894 <__aeabi_dmul+0x238>
 800073e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000742:	bfde      	ittt	le
 8000744:	2000      	movle	r0, #0
 8000746:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800074a:	bd70      	pople	{r4, r5, r6, pc}
 800074c:	f1c4 0400 	rsb	r4, r4, #0
 8000750:	3c20      	subs	r4, #32
 8000752:	da35      	bge.n	80007c0 <__aeabi_dmul+0x164>
 8000754:	340c      	adds	r4, #12
 8000756:	dc1b      	bgt.n	8000790 <__aeabi_dmul+0x134>
 8000758:	f104 0414 	add.w	r4, r4, #20
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f305 	lsl.w	r3, r0, r5
 8000764:	fa20 f004 	lsr.w	r0, r0, r4
 8000768:	fa01 f205 	lsl.w	r2, r1, r5
 800076c:	ea40 0002 	orr.w	r0, r0, r2
 8000770:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000774:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	fa21 f604 	lsr.w	r6, r1, r4
 8000780:	eb42 0106 	adc.w	r1, r2, r6
 8000784:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000788:	bf08      	it	eq
 800078a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078e:	bd70      	pop	{r4, r5, r6, pc}
 8000790:	f1c4 040c 	rsb	r4, r4, #12
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f304 	lsl.w	r3, r0, r4
 800079c:	fa20 f005 	lsr.w	r0, r0, r5
 80007a0:	fa01 f204 	lsl.w	r2, r1, r4
 80007a4:	ea40 0002 	orr.w	r0, r0, r2
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007b0:	f141 0100 	adc.w	r1, r1, #0
 80007b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b8:	bf08      	it	eq
 80007ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007be:	bd70      	pop	{r4, r5, r6, pc}
 80007c0:	f1c4 0520 	rsb	r5, r4, #32
 80007c4:	fa00 f205 	lsl.w	r2, r0, r5
 80007c8:	ea4e 0e02 	orr.w	lr, lr, r2
 80007cc:	fa20 f304 	lsr.w	r3, r0, r4
 80007d0:	fa01 f205 	lsl.w	r2, r1, r5
 80007d4:	ea43 0302 	orr.w	r3, r3, r2
 80007d8:	fa21 f004 	lsr.w	r0, r1, r4
 80007dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e0:	fa21 f204 	lsr.w	r2, r1, r4
 80007e4:	ea20 0002 	bic.w	r0, r0, r2
 80007e8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007f0:	bf08      	it	eq
 80007f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f6:	bd70      	pop	{r4, r5, r6, pc}
 80007f8:	f094 0f00 	teq	r4, #0
 80007fc:	d10f      	bne.n	800081e <__aeabi_dmul+0x1c2>
 80007fe:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000802:	0040      	lsls	r0, r0, #1
 8000804:	eb41 0101 	adc.w	r1, r1, r1
 8000808:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800080c:	bf08      	it	eq
 800080e:	3c01      	subeq	r4, #1
 8000810:	d0f7      	beq.n	8000802 <__aeabi_dmul+0x1a6>
 8000812:	ea41 0106 	orr.w	r1, r1, r6
 8000816:	f095 0f00 	teq	r5, #0
 800081a:	bf18      	it	ne
 800081c:	4770      	bxne	lr
 800081e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000822:	0052      	lsls	r2, r2, #1
 8000824:	eb43 0303 	adc.w	r3, r3, r3
 8000828:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800082c:	bf08      	it	eq
 800082e:	3d01      	subeq	r5, #1
 8000830:	d0f7      	beq.n	8000822 <__aeabi_dmul+0x1c6>
 8000832:	ea43 0306 	orr.w	r3, r3, r6
 8000836:	4770      	bx	lr
 8000838:	ea94 0f0c 	teq	r4, ip
 800083c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000840:	bf18      	it	ne
 8000842:	ea95 0f0c 	teqne	r5, ip
 8000846:	d00c      	beq.n	8000862 <__aeabi_dmul+0x206>
 8000848:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084c:	bf18      	it	ne
 800084e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000852:	d1d1      	bne.n	80007f8 <__aeabi_dmul+0x19c>
 8000854:	ea81 0103 	eor.w	r1, r1, r3
 8000858:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000866:	bf06      	itte	eq
 8000868:	4610      	moveq	r0, r2
 800086a:	4619      	moveq	r1, r3
 800086c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000870:	d019      	beq.n	80008a6 <__aeabi_dmul+0x24a>
 8000872:	ea94 0f0c 	teq	r4, ip
 8000876:	d102      	bne.n	800087e <__aeabi_dmul+0x222>
 8000878:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800087c:	d113      	bne.n	80008a6 <__aeabi_dmul+0x24a>
 800087e:	ea95 0f0c 	teq	r5, ip
 8000882:	d105      	bne.n	8000890 <__aeabi_dmul+0x234>
 8000884:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000888:	bf1c      	itt	ne
 800088a:	4610      	movne	r0, r2
 800088c:	4619      	movne	r1, r3
 800088e:	d10a      	bne.n	80008a6 <__aeabi_dmul+0x24a>
 8000890:	ea81 0103 	eor.w	r1, r1, r3
 8000894:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000898:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800089c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008a0:	f04f 0000 	mov.w	r0, #0
 80008a4:	bd70      	pop	{r4, r5, r6, pc}
 80008a6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008aa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008ae:	bd70      	pop	{r4, r5, r6, pc}

080008b0 <__aeabi_ddiv>:
 80008b0:	b570      	push	{r4, r5, r6, lr}
 80008b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008be:	bf1d      	ittte	ne
 80008c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c4:	ea94 0f0c 	teqne	r4, ip
 80008c8:	ea95 0f0c 	teqne	r5, ip
 80008cc:	f000 f8a7 	bleq	8000a1e <__aeabi_ddiv+0x16e>
 80008d0:	eba4 0405 	sub.w	r4, r4, r5
 80008d4:	ea81 0e03 	eor.w	lr, r1, r3
 80008d8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008e0:	f000 8088 	beq.w	80009f4 <__aeabi_ddiv+0x144>
 80008e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008ec:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008f0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008fc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000900:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000904:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000908:	429d      	cmp	r5, r3
 800090a:	bf08      	it	eq
 800090c:	4296      	cmpeq	r6, r2
 800090e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000912:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000916:	d202      	bcs.n	800091e <__aeabi_ddiv+0x6e>
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	1ab6      	subs	r6, r6, r2
 8000920:	eb65 0503 	sbc.w	r5, r5, r3
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000932:	ebb6 0e02 	subs.w	lr, r6, r2
 8000936:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093a:	bf22      	ittt	cs
 800093c:	1ab6      	subcs	r6, r6, r2
 800093e:	4675      	movcs	r5, lr
 8000940:	ea40 000c 	orrcs.w	r0, r0, ip
 8000944:	085b      	lsrs	r3, r3, #1
 8000946:	ea4f 0232 	mov.w	r2, r2, rrx
 800094a:	ebb6 0e02 	subs.w	lr, r6, r2
 800094e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000952:	bf22      	ittt	cs
 8000954:	1ab6      	subcs	r6, r6, r2
 8000956:	4675      	movcs	r5, lr
 8000958:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800095c:	085b      	lsrs	r3, r3, #1
 800095e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000962:	ebb6 0e02 	subs.w	lr, r6, r2
 8000966:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096a:	bf22      	ittt	cs
 800096c:	1ab6      	subcs	r6, r6, r2
 800096e:	4675      	movcs	r5, lr
 8000970:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000974:	085b      	lsrs	r3, r3, #1
 8000976:	ea4f 0232 	mov.w	r2, r2, rrx
 800097a:	ebb6 0e02 	subs.w	lr, r6, r2
 800097e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000982:	bf22      	ittt	cs
 8000984:	1ab6      	subcs	r6, r6, r2
 8000986:	4675      	movcs	r5, lr
 8000988:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800098c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000990:	d018      	beq.n	80009c4 <__aeabi_ddiv+0x114>
 8000992:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000996:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800099a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009a2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009aa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ae:	d1c0      	bne.n	8000932 <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	d10b      	bne.n	80009ce <__aeabi_ddiv+0x11e>
 80009b6:	ea41 0100 	orr.w	r1, r1, r0
 80009ba:	f04f 0000 	mov.w	r0, #0
 80009be:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009c2:	e7b6      	b.n	8000932 <__aeabi_ddiv+0x82>
 80009c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c8:	bf04      	itt	eq
 80009ca:	4301      	orreq	r1, r0
 80009cc:	2000      	moveq	r0, #0
 80009ce:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009d2:	bf88      	it	hi
 80009d4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d8:	f63f aeaf 	bhi.w	800073a <__aeabi_dmul+0xde>
 80009dc:	ebb5 0c03 	subs.w	ip, r5, r3
 80009e0:	bf04      	itt	eq
 80009e2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ea:	f150 0000 	adcs.w	r0, r0, #0
 80009ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009f2:	bd70      	pop	{r4, r5, r6, pc}
 80009f4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009fc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a00:	bfc2      	ittt	gt
 8000a02:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a06:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a0a:	bd70      	popgt	{r4, r5, r6, pc}
 8000a0c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a10:	f04f 0e00 	mov.w	lr, #0
 8000a14:	3c01      	subs	r4, #1
 8000a16:	e690      	b.n	800073a <__aeabi_dmul+0xde>
 8000a18:	ea45 0e06 	orr.w	lr, r5, r6
 8000a1c:	e68d      	b.n	800073a <__aeabi_dmul+0xde>
 8000a1e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a22:	ea94 0f0c 	teq	r4, ip
 8000a26:	bf08      	it	eq
 8000a28:	ea95 0f0c 	teqeq	r5, ip
 8000a2c:	f43f af3b 	beq.w	80008a6 <__aeabi_dmul+0x24a>
 8000a30:	ea94 0f0c 	teq	r4, ip
 8000a34:	d10a      	bne.n	8000a4c <__aeabi_ddiv+0x19c>
 8000a36:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a3a:	f47f af34 	bne.w	80008a6 <__aeabi_dmul+0x24a>
 8000a3e:	ea95 0f0c 	teq	r5, ip
 8000a42:	f47f af25 	bne.w	8000890 <__aeabi_dmul+0x234>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e72c      	b.n	80008a6 <__aeabi_dmul+0x24a>
 8000a4c:	ea95 0f0c 	teq	r5, ip
 8000a50:	d106      	bne.n	8000a60 <__aeabi_ddiv+0x1b0>
 8000a52:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a56:	f43f aefd 	beq.w	8000854 <__aeabi_dmul+0x1f8>
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	e722      	b.n	80008a6 <__aeabi_dmul+0x24a>
 8000a60:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a64:	bf18      	it	ne
 8000a66:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a6a:	f47f aec5 	bne.w	80007f8 <__aeabi_dmul+0x19c>
 8000a6e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a72:	f47f af0d 	bne.w	8000890 <__aeabi_dmul+0x234>
 8000a76:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a7a:	f47f aeeb 	bne.w	8000854 <__aeabi_dmul+0x1f8>
 8000a7e:	e712      	b.n	80008a6 <__aeabi_dmul+0x24a>

08000a80 <__gedf2>:
 8000a80:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a84:	e006      	b.n	8000a94 <__cmpdf2+0x4>
 8000a86:	bf00      	nop

08000a88 <__ledf2>:
 8000a88:	f04f 0c01 	mov.w	ip, #1
 8000a8c:	e002      	b.n	8000a94 <__cmpdf2+0x4>
 8000a8e:	bf00      	nop

08000a90 <__cmpdf2>:
 8000a90:	f04f 0c01 	mov.w	ip, #1
 8000a94:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	bf18      	it	ne
 8000aa6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aaa:	d01b      	beq.n	8000ae4 <__cmpdf2+0x54>
 8000aac:	b001      	add	sp, #4
 8000aae:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000ab2:	bf0c      	ite	eq
 8000ab4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab8:	ea91 0f03 	teqne	r1, r3
 8000abc:	bf02      	ittt	eq
 8000abe:	ea90 0f02 	teqeq	r0, r2
 8000ac2:	2000      	moveq	r0, #0
 8000ac4:	4770      	bxeq	lr
 8000ac6:	f110 0f00 	cmn.w	r0, #0
 8000aca:	ea91 0f03 	teq	r1, r3
 8000ace:	bf58      	it	pl
 8000ad0:	4299      	cmppl	r1, r3
 8000ad2:	bf08      	it	eq
 8000ad4:	4290      	cmpeq	r0, r2
 8000ad6:	bf2c      	ite	cs
 8000ad8:	17d8      	asrcs	r0, r3, #31
 8000ada:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ade:	f040 0001 	orr.w	r0, r0, #1
 8000ae2:	4770      	bx	lr
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__cmpdf2+0x64>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d107      	bne.n	8000b04 <__cmpdf2+0x74>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d1d6      	bne.n	8000aac <__cmpdf2+0x1c>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d0d3      	beq.n	8000aac <__cmpdf2+0x1c>
 8000b04:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <__aeabi_cdrcmple>:
 8000b0c:	4684      	mov	ip, r0
 8000b0e:	4610      	mov	r0, r2
 8000b10:	4662      	mov	r2, ip
 8000b12:	468c      	mov	ip, r1
 8000b14:	4619      	mov	r1, r3
 8000b16:	4663      	mov	r3, ip
 8000b18:	e000      	b.n	8000b1c <__aeabi_cdcmpeq>
 8000b1a:	bf00      	nop

08000b1c <__aeabi_cdcmpeq>:
 8000b1c:	b501      	push	{r0, lr}
 8000b1e:	f7ff ffb7 	bl	8000a90 <__cmpdf2>
 8000b22:	2800      	cmp	r0, #0
 8000b24:	bf48      	it	mi
 8000b26:	f110 0f00 	cmnmi.w	r0, #0
 8000b2a:	bd01      	pop	{r0, pc}

08000b2c <__aeabi_dcmpeq>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff fff4 	bl	8000b1c <__aeabi_cdcmpeq>
 8000b34:	bf0c      	ite	eq
 8000b36:	2001      	moveq	r0, #1
 8000b38:	2000      	movne	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmplt>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffea 	bl	8000b1c <__aeabi_cdcmpeq>
 8000b48:	bf34      	ite	cc
 8000b4a:	2001      	movcc	r0, #1
 8000b4c:	2000      	movcs	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmple>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffe0 	bl	8000b1c <__aeabi_cdcmpeq>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpge>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffce 	bl	8000b0c <__aeabi_cdrcmple>
 8000b70:	bf94      	ite	ls
 8000b72:	2001      	movls	r0, #1
 8000b74:	2000      	movhi	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpgt>:
 8000b7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b80:	f7ff ffc4 	bl	8000b0c <__aeabi_cdrcmple>
 8000b84:	bf34      	ite	cc
 8000b86:	2001      	movcc	r0, #1
 8000b88:	2000      	movcs	r0, #0
 8000b8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8e:	bf00      	nop

08000b90 <__aeabi_d2iz>:
 8000b90:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b94:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b98:	d215      	bcs.n	8000bc6 <__aeabi_d2iz+0x36>
 8000b9a:	d511      	bpl.n	8000bc0 <__aeabi_d2iz+0x30>
 8000b9c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba4:	d912      	bls.n	8000bcc <__aeabi_d2iz+0x3c>
 8000ba6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000baa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bae:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bb2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bb6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bba:	bf18      	it	ne
 8000bbc:	4240      	negne	r0, r0
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bca:	d105      	bne.n	8000bd8 <__aeabi_d2iz+0x48>
 8000bcc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd0:	bf08      	it	eq
 8000bd2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <__aeabi_d2f>:
 8000be0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000be4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be8:	bf24      	itt	cs
 8000bea:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bee:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bf2:	d90d      	bls.n	8000c10 <__aeabi_d2f+0x30>
 8000bf4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bfc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c00:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c04:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c08:	bf08      	it	eq
 8000c0a:	f020 0001 	biceq.w	r0, r0, #1
 8000c0e:	4770      	bx	lr
 8000c10:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c14:	d121      	bne.n	8000c5a <__aeabi_d2f+0x7a>
 8000c16:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c1a:	bfbc      	itt	lt
 8000c1c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c20:	4770      	bxlt	lr
 8000c22:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c26:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c2a:	f1c2 0218 	rsb	r2, r2, #24
 8000c2e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c32:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c36:	fa20 f002 	lsr.w	r0, r0, r2
 8000c3a:	bf18      	it	ne
 8000c3c:	f040 0001 	orrne.w	r0, r0, #1
 8000c40:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c44:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c48:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c4c:	ea40 000c 	orr.w	r0, r0, ip
 8000c50:	fa23 f302 	lsr.w	r3, r3, r2
 8000c54:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c58:	e7cc      	b.n	8000bf4 <__aeabi_d2f+0x14>
 8000c5a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c5e:	d107      	bne.n	8000c70 <__aeabi_d2f+0x90>
 8000c60:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c64:	bf1e      	ittt	ne
 8000c66:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c6a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c6e:	4770      	bxne	lr
 8000c70:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c74:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c78:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop

08000c80 <__aeabi_uldivmod>:
 8000c80:	b953      	cbnz	r3, 8000c98 <__aeabi_uldivmod+0x18>
 8000c82:	b94a      	cbnz	r2, 8000c98 <__aeabi_uldivmod+0x18>
 8000c84:	2900      	cmp	r1, #0
 8000c86:	bf08      	it	eq
 8000c88:	2800      	cmpeq	r0, #0
 8000c8a:	bf1c      	itt	ne
 8000c8c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c90:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c94:	f000 b9a4 	b.w	8000fe0 <__aeabi_idiv0>
 8000c98:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c9c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca0:	f000 f83c 	bl	8000d1c <__udivmoddi4>
 8000ca4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cac:	b004      	add	sp, #16
 8000cae:	4770      	bx	lr

08000cb0 <__aeabi_d2lz>:
 8000cb0:	b538      	push	{r3, r4, r5, lr}
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	4604      	mov	r4, r0
 8000cb8:	460d      	mov	r5, r1
 8000cba:	f7ff ff41 	bl	8000b40 <__aeabi_dcmplt>
 8000cbe:	b928      	cbnz	r0, 8000ccc <__aeabi_d2lz+0x1c>
 8000cc0:	4620      	mov	r0, r4
 8000cc2:	4629      	mov	r1, r5
 8000cc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cc8:	f000 b80a 	b.w	8000ce0 <__aeabi_d2ulz>
 8000ccc:	4620      	mov	r0, r4
 8000cce:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cd2:	f000 f805 	bl	8000ce0 <__aeabi_d2ulz>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	bd38      	pop	{r3, r4, r5, pc}
 8000cde:	bf00      	nop

08000ce0 <__aeabi_d2ulz>:
 8000ce0:	b5d0      	push	{r4, r6, r7, lr}
 8000ce2:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <__aeabi_d2ulz+0x34>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	4606      	mov	r6, r0
 8000ce8:	460f      	mov	r7, r1
 8000cea:	f7ff fcb7 	bl	800065c <__aeabi_dmul>
 8000cee:	f000 f979 	bl	8000fe4 <__aeabi_d2uiz>
 8000cf2:	4604      	mov	r4, r0
 8000cf4:	f7ff fc38 	bl	8000568 <__aeabi_ui2d>
 8000cf8:	4b07      	ldr	r3, [pc, #28]	; (8000d18 <__aeabi_d2ulz+0x38>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	f7ff fcae 	bl	800065c <__aeabi_dmul>
 8000d00:	4602      	mov	r2, r0
 8000d02:	460b      	mov	r3, r1
 8000d04:	4630      	mov	r0, r6
 8000d06:	4639      	mov	r1, r7
 8000d08:	f7ff faf0 	bl	80002ec <__aeabi_dsub>
 8000d0c:	f000 f96a 	bl	8000fe4 <__aeabi_d2uiz>
 8000d10:	4621      	mov	r1, r4
 8000d12:	bdd0      	pop	{r4, r6, r7, pc}
 8000d14:	3df00000 	.word	0x3df00000
 8000d18:	41f00000 	.word	0x41f00000

08000d1c <__udivmoddi4>:
 8000d1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d20:	9d08      	ldr	r5, [sp, #32]
 8000d22:	4604      	mov	r4, r0
 8000d24:	468c      	mov	ip, r1
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	f040 8083 	bne.w	8000e32 <__udivmoddi4+0x116>
 8000d2c:	428a      	cmp	r2, r1
 8000d2e:	4617      	mov	r7, r2
 8000d30:	d947      	bls.n	8000dc2 <__udivmoddi4+0xa6>
 8000d32:	fab2 f282 	clz	r2, r2
 8000d36:	b142      	cbz	r2, 8000d4a <__udivmoddi4+0x2e>
 8000d38:	f1c2 0020 	rsb	r0, r2, #32
 8000d3c:	fa24 f000 	lsr.w	r0, r4, r0
 8000d40:	4091      	lsls	r1, r2
 8000d42:	4097      	lsls	r7, r2
 8000d44:	ea40 0c01 	orr.w	ip, r0, r1
 8000d48:	4094      	lsls	r4, r2
 8000d4a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d4e:	0c23      	lsrs	r3, r4, #16
 8000d50:	fbbc f6f8 	udiv	r6, ip, r8
 8000d54:	fa1f fe87 	uxth.w	lr, r7
 8000d58:	fb08 c116 	mls	r1, r8, r6, ip
 8000d5c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d60:	fb06 f10e 	mul.w	r1, r6, lr
 8000d64:	4299      	cmp	r1, r3
 8000d66:	d909      	bls.n	8000d7c <__udivmoddi4+0x60>
 8000d68:	18fb      	adds	r3, r7, r3
 8000d6a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d6e:	f080 8119 	bcs.w	8000fa4 <__udivmoddi4+0x288>
 8000d72:	4299      	cmp	r1, r3
 8000d74:	f240 8116 	bls.w	8000fa4 <__udivmoddi4+0x288>
 8000d78:	3e02      	subs	r6, #2
 8000d7a:	443b      	add	r3, r7
 8000d7c:	1a5b      	subs	r3, r3, r1
 8000d7e:	b2a4      	uxth	r4, r4
 8000d80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d84:	fb08 3310 	mls	r3, r8, r0, r3
 8000d88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d8c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d90:	45a6      	cmp	lr, r4
 8000d92:	d909      	bls.n	8000da8 <__udivmoddi4+0x8c>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d9a:	f080 8105 	bcs.w	8000fa8 <__udivmoddi4+0x28c>
 8000d9e:	45a6      	cmp	lr, r4
 8000da0:	f240 8102 	bls.w	8000fa8 <__udivmoddi4+0x28c>
 8000da4:	3802      	subs	r0, #2
 8000da6:	443c      	add	r4, r7
 8000da8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dac:	eba4 040e 	sub.w	r4, r4, lr
 8000db0:	2600      	movs	r6, #0
 8000db2:	b11d      	cbz	r5, 8000dbc <__udivmoddi4+0xa0>
 8000db4:	40d4      	lsrs	r4, r2
 8000db6:	2300      	movs	r3, #0
 8000db8:	e9c5 4300 	strd	r4, r3, [r5]
 8000dbc:	4631      	mov	r1, r6
 8000dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc2:	b902      	cbnz	r2, 8000dc6 <__udivmoddi4+0xaa>
 8000dc4:	deff      	udf	#255	; 0xff
 8000dc6:	fab2 f282 	clz	r2, r2
 8000dca:	2a00      	cmp	r2, #0
 8000dcc:	d150      	bne.n	8000e70 <__udivmoddi4+0x154>
 8000dce:	1bcb      	subs	r3, r1, r7
 8000dd0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dd4:	fa1f f887 	uxth.w	r8, r7
 8000dd8:	2601      	movs	r6, #1
 8000dda:	fbb3 fcfe 	udiv	ip, r3, lr
 8000dde:	0c21      	lsrs	r1, r4, #16
 8000de0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000de4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000de8:	fb08 f30c 	mul.w	r3, r8, ip
 8000dec:	428b      	cmp	r3, r1
 8000dee:	d907      	bls.n	8000e00 <__udivmoddi4+0xe4>
 8000df0:	1879      	adds	r1, r7, r1
 8000df2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0xe2>
 8000df8:	428b      	cmp	r3, r1
 8000dfa:	f200 80e9 	bhi.w	8000fd0 <__udivmoddi4+0x2b4>
 8000dfe:	4684      	mov	ip, r0
 8000e00:	1ac9      	subs	r1, r1, r3
 8000e02:	b2a3      	uxth	r3, r4
 8000e04:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e08:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e0c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e10:	fb08 f800 	mul.w	r8, r8, r0
 8000e14:	45a0      	cmp	r8, r4
 8000e16:	d907      	bls.n	8000e28 <__udivmoddi4+0x10c>
 8000e18:	193c      	adds	r4, r7, r4
 8000e1a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e1e:	d202      	bcs.n	8000e26 <__udivmoddi4+0x10a>
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	f200 80d9 	bhi.w	8000fd8 <__udivmoddi4+0x2bc>
 8000e26:	4618      	mov	r0, r3
 8000e28:	eba4 0408 	sub.w	r4, r4, r8
 8000e2c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e30:	e7bf      	b.n	8000db2 <__udivmoddi4+0x96>
 8000e32:	428b      	cmp	r3, r1
 8000e34:	d909      	bls.n	8000e4a <__udivmoddi4+0x12e>
 8000e36:	2d00      	cmp	r5, #0
 8000e38:	f000 80b1 	beq.w	8000f9e <__udivmoddi4+0x282>
 8000e3c:	2600      	movs	r6, #0
 8000e3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000e42:	4630      	mov	r0, r6
 8000e44:	4631      	mov	r1, r6
 8000e46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e4a:	fab3 f683 	clz	r6, r3
 8000e4e:	2e00      	cmp	r6, #0
 8000e50:	d14a      	bne.n	8000ee8 <__udivmoddi4+0x1cc>
 8000e52:	428b      	cmp	r3, r1
 8000e54:	d302      	bcc.n	8000e5c <__udivmoddi4+0x140>
 8000e56:	4282      	cmp	r2, r0
 8000e58:	f200 80b8 	bhi.w	8000fcc <__udivmoddi4+0x2b0>
 8000e5c:	1a84      	subs	r4, r0, r2
 8000e5e:	eb61 0103 	sbc.w	r1, r1, r3
 8000e62:	2001      	movs	r0, #1
 8000e64:	468c      	mov	ip, r1
 8000e66:	2d00      	cmp	r5, #0
 8000e68:	d0a8      	beq.n	8000dbc <__udivmoddi4+0xa0>
 8000e6a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e6e:	e7a5      	b.n	8000dbc <__udivmoddi4+0xa0>
 8000e70:	f1c2 0320 	rsb	r3, r2, #32
 8000e74:	fa20 f603 	lsr.w	r6, r0, r3
 8000e78:	4097      	lsls	r7, r2
 8000e7a:	fa01 f002 	lsl.w	r0, r1, r2
 8000e7e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e82:	40d9      	lsrs	r1, r3
 8000e84:	4330      	orrs	r0, r6
 8000e86:	0c03      	lsrs	r3, r0, #16
 8000e88:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e8c:	fa1f f887 	uxth.w	r8, r7
 8000e90:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e98:	fb06 f108 	mul.w	r1, r6, r8
 8000e9c:	4299      	cmp	r1, r3
 8000e9e:	fa04 f402 	lsl.w	r4, r4, r2
 8000ea2:	d909      	bls.n	8000eb8 <__udivmoddi4+0x19c>
 8000ea4:	18fb      	adds	r3, r7, r3
 8000ea6:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000eaa:	f080 808d 	bcs.w	8000fc8 <__udivmoddi4+0x2ac>
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	f240 808a 	bls.w	8000fc8 <__udivmoddi4+0x2ac>
 8000eb4:	3e02      	subs	r6, #2
 8000eb6:	443b      	add	r3, r7
 8000eb8:	1a5b      	subs	r3, r3, r1
 8000eba:	b281      	uxth	r1, r0
 8000ebc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ec4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec8:	fb00 f308 	mul.w	r3, r0, r8
 8000ecc:	428b      	cmp	r3, r1
 8000ece:	d907      	bls.n	8000ee0 <__udivmoddi4+0x1c4>
 8000ed0:	1879      	adds	r1, r7, r1
 8000ed2:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000ed6:	d273      	bcs.n	8000fc0 <__udivmoddi4+0x2a4>
 8000ed8:	428b      	cmp	r3, r1
 8000eda:	d971      	bls.n	8000fc0 <__udivmoddi4+0x2a4>
 8000edc:	3802      	subs	r0, #2
 8000ede:	4439      	add	r1, r7
 8000ee0:	1acb      	subs	r3, r1, r3
 8000ee2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ee6:	e778      	b.n	8000dda <__udivmoddi4+0xbe>
 8000ee8:	f1c6 0c20 	rsb	ip, r6, #32
 8000eec:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ef4:	431c      	orrs	r4, r3
 8000ef6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000efa:	fa01 f306 	lsl.w	r3, r1, r6
 8000efe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f02:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f06:	431f      	orrs	r7, r3
 8000f08:	0c3b      	lsrs	r3, r7, #16
 8000f0a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f0e:	fa1f f884 	uxth.w	r8, r4
 8000f12:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f16:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f1a:	fb09 fa08 	mul.w	sl, r9, r8
 8000f1e:	458a      	cmp	sl, r1
 8000f20:	fa02 f206 	lsl.w	r2, r2, r6
 8000f24:	fa00 f306 	lsl.w	r3, r0, r6
 8000f28:	d908      	bls.n	8000f3c <__udivmoddi4+0x220>
 8000f2a:	1861      	adds	r1, r4, r1
 8000f2c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000f30:	d248      	bcs.n	8000fc4 <__udivmoddi4+0x2a8>
 8000f32:	458a      	cmp	sl, r1
 8000f34:	d946      	bls.n	8000fc4 <__udivmoddi4+0x2a8>
 8000f36:	f1a9 0902 	sub.w	r9, r9, #2
 8000f3a:	4421      	add	r1, r4
 8000f3c:	eba1 010a 	sub.w	r1, r1, sl
 8000f40:	b2bf      	uxth	r7, r7
 8000f42:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f46:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f4a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f4e:	fb00 f808 	mul.w	r8, r0, r8
 8000f52:	45b8      	cmp	r8, r7
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x24a>
 8000f56:	19e7      	adds	r7, r4, r7
 8000f58:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f5c:	d22e      	bcs.n	8000fbc <__udivmoddi4+0x2a0>
 8000f5e:	45b8      	cmp	r8, r7
 8000f60:	d92c      	bls.n	8000fbc <__udivmoddi4+0x2a0>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4427      	add	r7, r4
 8000f66:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f6a:	eba7 0708 	sub.w	r7, r7, r8
 8000f6e:	fba0 8902 	umull	r8, r9, r0, r2
 8000f72:	454f      	cmp	r7, r9
 8000f74:	46c6      	mov	lr, r8
 8000f76:	4649      	mov	r1, r9
 8000f78:	d31a      	bcc.n	8000fb0 <__udivmoddi4+0x294>
 8000f7a:	d017      	beq.n	8000fac <__udivmoddi4+0x290>
 8000f7c:	b15d      	cbz	r5, 8000f96 <__udivmoddi4+0x27a>
 8000f7e:	ebb3 020e 	subs.w	r2, r3, lr
 8000f82:	eb67 0701 	sbc.w	r7, r7, r1
 8000f86:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f8a:	40f2      	lsrs	r2, r6
 8000f8c:	ea4c 0202 	orr.w	r2, ip, r2
 8000f90:	40f7      	lsrs	r7, r6
 8000f92:	e9c5 2700 	strd	r2, r7, [r5]
 8000f96:	2600      	movs	r6, #0
 8000f98:	4631      	mov	r1, r6
 8000f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f9e:	462e      	mov	r6, r5
 8000fa0:	4628      	mov	r0, r5
 8000fa2:	e70b      	b.n	8000dbc <__udivmoddi4+0xa0>
 8000fa4:	4606      	mov	r6, r0
 8000fa6:	e6e9      	b.n	8000d7c <__udivmoddi4+0x60>
 8000fa8:	4618      	mov	r0, r3
 8000faa:	e6fd      	b.n	8000da8 <__udivmoddi4+0x8c>
 8000fac:	4543      	cmp	r3, r8
 8000fae:	d2e5      	bcs.n	8000f7c <__udivmoddi4+0x260>
 8000fb0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fb4:	eb69 0104 	sbc.w	r1, r9, r4
 8000fb8:	3801      	subs	r0, #1
 8000fba:	e7df      	b.n	8000f7c <__udivmoddi4+0x260>
 8000fbc:	4608      	mov	r0, r1
 8000fbe:	e7d2      	b.n	8000f66 <__udivmoddi4+0x24a>
 8000fc0:	4660      	mov	r0, ip
 8000fc2:	e78d      	b.n	8000ee0 <__udivmoddi4+0x1c4>
 8000fc4:	4681      	mov	r9, r0
 8000fc6:	e7b9      	b.n	8000f3c <__udivmoddi4+0x220>
 8000fc8:	4666      	mov	r6, ip
 8000fca:	e775      	b.n	8000eb8 <__udivmoddi4+0x19c>
 8000fcc:	4630      	mov	r0, r6
 8000fce:	e74a      	b.n	8000e66 <__udivmoddi4+0x14a>
 8000fd0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fd4:	4439      	add	r1, r7
 8000fd6:	e713      	b.n	8000e00 <__udivmoddi4+0xe4>
 8000fd8:	3802      	subs	r0, #2
 8000fda:	443c      	add	r4, r7
 8000fdc:	e724      	b.n	8000e28 <__udivmoddi4+0x10c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_d2uiz>:
 8000fe4:	004a      	lsls	r2, r1, #1
 8000fe6:	d211      	bcs.n	800100c <__aeabi_d2uiz+0x28>
 8000fe8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000fec:	d211      	bcs.n	8001012 <__aeabi_d2uiz+0x2e>
 8000fee:	d50d      	bpl.n	800100c <__aeabi_d2uiz+0x28>
 8000ff0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ff4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ff8:	d40e      	bmi.n	8001018 <__aeabi_d2uiz+0x34>
 8000ffa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ffe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001002:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8001006:	fa23 f002 	lsr.w	r0, r3, r2
 800100a:	4770      	bx	lr
 800100c:	f04f 0000 	mov.w	r0, #0
 8001010:	4770      	bx	lr
 8001012:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8001016:	d102      	bne.n	800101e <__aeabi_d2uiz+0x3a>
 8001018:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800101c:	4770      	bx	lr
 800101e:	f04f 0000 	mov.w	r0, #0
 8001022:	4770      	bx	lr

08001024 <app_main_init>:



//=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~
void app_main_init()
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af02      	add	r7, sp, #8
	NT35510_Init();
 800102a:	f000 fd5d 	bl	8001ae8 <NT35510_Init>

	LCD_ClearScreen(0x7FFFU);
 800102e:	f647 70ff 	movw	r0, #32767	; 0x7fff
 8001032:	f000 fbdf 	bl	80017f4 <LCD_ClearScreen>
	LCD_SetDirection(HORIZONTAL_RIGHT);
 8001036:	2003      	movs	r0, #3
 8001038:	f000 fb84 	bl	8001744 <LCD_SetDirection>
	LCD_ClearScreen(0xffffU);
 800103c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001040:	f000 fbd8 	bl	80017f4 <LCD_ClearScreen>

	// Draw frame:
	LCD_DrawLine(10, 10, 790, 10, 0xF800U,4);		// up
 8001044:	2304      	movs	r3, #4
 8001046:	9301      	str	r3, [sp, #4]
 8001048:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800104c:	9300      	str	r3, [sp, #0]
 800104e:	230a      	movs	r3, #10
 8001050:	f240 3216 	movw	r2, #790	; 0x316
 8001054:	210a      	movs	r1, #10
 8001056:	200a      	movs	r0, #10
 8001058:	f000 fc1f 	bl	800189a <LCD_DrawLine>
	LCD_DrawLine(10, 10, 10, 470, 0x07E0U,4);		// left
 800105c:	2304      	movs	r3, #4
 800105e:	9301      	str	r3, [sp, #4]
 8001060:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001064:	9300      	str	r3, [sp, #0]
 8001066:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 800106a:	220a      	movs	r2, #10
 800106c:	210a      	movs	r1, #10
 800106e:	200a      	movs	r0, #10
 8001070:	f000 fc13 	bl	800189a <LCD_DrawLine>
	LCD_DrawLine(790, 10, 790, 470, 0x001FU,4);		// right
 8001074:	2304      	movs	r3, #4
 8001076:	9301      	str	r3, [sp, #4]
 8001078:	231f      	movs	r3, #31
 800107a:	9300      	str	r3, [sp, #0]
 800107c:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 8001080:	f240 3216 	movw	r2, #790	; 0x316
 8001084:	210a      	movs	r1, #10
 8001086:	f240 3016 	movw	r0, #790	; 0x316
 800108a:	f000 fc06 	bl	800189a <LCD_DrawLine>
	LCD_DrawLine(10, 470, 790, 470, 0xF800U,4);		// down
 800108e:	2304      	movs	r3, #4
 8001090:	9301      	str	r3, [sp, #4]
 8001092:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001096:	9300      	str	r3, [sp, #0]
 8001098:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 800109c:	f240 3216 	movw	r2, #790	; 0x316
 80010a0:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 80010a4:	200a      	movs	r0, #10
 80010a6:	f000 fbf8 	bl	800189a <LCD_DrawLine>


	//////////////////////////////////////////////////////////
	//HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
	OV7670_RST_LOW;
 80010aa:	2200      	movs	r2, #0
 80010ac:	2104      	movs	r1, #4
 80010ae:	4815      	ldr	r0, [pc, #84]	; (8001104 <app_main_init+0xe0>)
 80010b0:	f002 fe32 	bl	8003d18 <HAL_GPIO_WritePin>
	HAL_Delay(300);
 80010b4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80010b8:	f002 f8c8 	bl	800324c <HAL_Delay>
	OV7670_RST_HIGH;
 80010bc:	2201      	movs	r2, #1
 80010be:	2104      	movs	r1, #4
 80010c0:	4810      	ldr	r0, [pc, #64]	; (8001104 <app_main_init+0xe0>)
 80010c2:	f002 fe29 	bl	8003d18 <HAL_GPIO_WritePin>
	HAL_Delay(300);
 80010c6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80010ca:	f002 f8bf 	bl	800324c <HAL_Delay>

	///////////
	setMode(QVGA_RGB565);
 80010ce:	2002      	movs	r0, #2
 80010d0:	f001 faa3 	bl	800261a <setMode>
	HAL_Delay(300);
 80010d4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80010d8:	f002 f8b8 	bl	800324c <HAL_Delay>
	////////////

	TIM1->DIER |= TIM_DIER_TDE;// | TIM_DIER_TDE TIM_DIER_UDE;
 80010dc:	4b0a      	ldr	r3, [pc, #40]	; (8001108 <app_main_init+0xe4>)
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	4a09      	ldr	r2, [pc, #36]	; (8001108 <app_main_init+0xe4>)
 80010e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010e6:	60d3      	str	r3, [r2, #12]
	HAL_TIM_Base_Start(&htim1);
 80010e8:	4808      	ldr	r0, [pc, #32]	; (800110c <app_main_init+0xe8>)
 80010ea:	f006 f955 	bl	8007398 <HAL_TIM_Base_Start>

	HAL_NVIC_SetPriority(OV7670_VSYNC_EXTI_IRQn, 0, 0);
 80010ee:	2200      	movs	r2, #0
 80010f0:	2100      	movs	r1, #0
 80010f2:	2007      	movs	r0, #7
 80010f4:	f002 f9cd 	bl	8003492 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(OV7670_VSYNC_EXTI_IRQn);
 80010f8:	2007      	movs	r0, #7
 80010fa:	f002 f9e6 	bl	80034ca <HAL_NVIC_EnableIRQ>
	//////////////////////////////////////////////////////////
}
 80010fe:	bf00      	nop
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	40021400 	.word	0x40021400
 8001108:	40010000 	.word	0x40010000
 800110c:	2004a668 	.word	0x2004a668

08001110 <app_main_loop>:


//=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~
void app_main_loop()
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b08e      	sub	sp, #56	; 0x38
 8001114:	af00      	add	r7, sp, #0
	uint8_t buff[10] = {0};
 8001116:	2300      	movs	r3, #0
 8001118:	617b      	str	r3, [r7, #20]
 800111a:	f107 0318 	add.w	r3, r7, #24
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	809a      	strh	r2, [r3, #4]
	uint8_t i2cDatToSnd[5] = {0};
 8001124:	2300      	movs	r3, #0
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	2300      	movs	r3, #0
 800112a:	743b      	strb	r3, [r7, #16]
	uint8_t i2cDatToRec[5] = {0};
 800112c:	2300      	movs	r3, #0
 800112e:	607b      	str	r3, [r7, #4]
 8001130:	2300      	movs	r3, #0
 8001132:	723b      	strb	r3, [r7, #8]
	uint32_t milis = 0;
 8001134:	2300      	movs	r3, #0
 8001136:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t milis2 = 0;
 8001138:	2300      	movs	r3, #0
 800113a:	633b      	str	r3, [r7, #48]	; 0x30


	LCD_SetDirection(VERTICAL_UP);
 800113c:	2000      	movs	r0, #0
 800113e:	f000 fb01 	bl	8001744 <LCD_SetDirection>
	LCD_SetWindow(20, 20, 340-1, 260-1); // 320 x 240
 8001142:	f240 1303 	movw	r3, #259	; 0x103
 8001146:	f240 1253 	movw	r2, #339	; 0x153
 800114a:	2114      	movs	r1, #20
 800114c:	2014      	movs	r0, #20
 800114e:	f000 fa91 	bl	8001674 <LCD_SetWindow>
	setup();
 8001152:	f00f fa3b 	bl	80105cc <setup>

	int j,z,k = 0;
 8001156:	2300      	movs	r3, #0
 8001158:	627b      	str	r3, [r7, #36]	; 0x24
	while(1)
	{
		loop();
 800115a:	f00f fb29 	bl	80107b0 <loop>

		uart_tx_process();
 800115e:	f001 fd33 	bl	8002bc8 <uart_tx_process>
		uart_rx_process();
 8001162:	f001 fdd1 	bl	8002d08 <uart_rx_process>


		LCD_SetWindow(20 , 280, 20+96-1, 280+96-1); // 320 x 240
 8001166:	f240 1377 	movw	r3, #375	; 0x177
 800116a:	2273      	movs	r2, #115	; 0x73
 800116c:	f44f 718c 	mov.w	r1, #280	; 0x118
 8001170:	2014      	movs	r0, #20
 8001172:	f000 fa7f 	bl	8001674 <LCD_SetWindow>
		for(j = 72; j <= 72 + 96; j++)
 8001176:	2348      	movs	r3, #72	; 0x48
 8001178:	62fb      	str	r3, [r7, #44]	; 0x2c
 800117a:	e06b      	b.n	8001254 <app_main_loop+0x144>
		{
			for(z = 112*2; z < 112*2 + 96*2; z+=2)
 800117c:	23e0      	movs	r3, #224	; 0xe0
 800117e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001180:	e061      	b.n	8001246 <app_main_loop+0x136>
			{
				uint16_t gray =
						(((cam_buff[(j-1)*320*2+z] & 0xF8U) >> 3) +	//red
 8001182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001184:	1e5a      	subs	r2, r3, #1
 8001186:	4613      	mov	r3, r2
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	4413      	add	r3, r2
 800118c:	01db      	lsls	r3, r3, #7
 800118e:	461a      	mov	r2, r3
 8001190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001192:	4413      	add	r3, r2
 8001194:	4a56      	ldr	r2, [pc, #344]	; (80012f0 <app_main_loop+0x1e0>)
 8001196:	5cd3      	ldrb	r3, [r2, r3]
 8001198:	08db      	lsrs	r3, r3, #3
 800119a:	b2db      	uxtb	r3, r3
 800119c:	4618      	mov	r0, r3
								(((cam_buff[(j-1)*320*2+z] & 0x07U) << 3) | ((cam_buff[(j-1)*320*2+z+1] & 0xC0U) >> 6)) +	//green
 800119e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011a0:	1e5a      	subs	r2, r3, #1
 80011a2:	4613      	mov	r3, r2
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	4413      	add	r3, r2
 80011a8:	01db      	lsls	r3, r3, #7
 80011aa:	461a      	mov	r2, r3
 80011ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011ae:	4413      	add	r3, r2
 80011b0:	4a4f      	ldr	r2, [pc, #316]	; (80012f0 <app_main_loop+0x1e0>)
 80011b2:	5cd3      	ldrb	r3, [r2, r3]
 80011b4:	00db      	lsls	r3, r3, #3
 80011b6:	f003 0138 	and.w	r1, r3, #56	; 0x38
 80011ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011bc:	1e5a      	subs	r2, r3, #1
 80011be:	4613      	mov	r3, r2
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	4413      	add	r3, r2
 80011c4:	01db      	lsls	r3, r3, #7
 80011c6:	461a      	mov	r2, r3
 80011c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011ca:	4413      	add	r3, r2
 80011cc:	3301      	adds	r3, #1
 80011ce:	4a48      	ldr	r2, [pc, #288]	; (80012f0 <app_main_loop+0x1e0>)
 80011d0:	5cd3      	ldrb	r3, [r2, r3]
 80011d2:	099b      	lsrs	r3, r3, #6
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	430b      	orrs	r3, r1
						(((cam_buff[(j-1)*320*2+z] & 0xF8U) >> 3) +	//red
 80011d8:	18c1      	adds	r1, r0, r3
								((cam_buff[(j-1)*320*2+z+1] & 0x1FU))	//blue
 80011da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011dc:	1e5a      	subs	r2, r3, #1
 80011de:	4613      	mov	r3, r2
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	4413      	add	r3, r2
 80011e4:	01db      	lsls	r3, r3, #7
 80011e6:	461a      	mov	r2, r3
 80011e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011ea:	4413      	add	r3, r2
 80011ec:	3301      	adds	r3, #1
 80011ee:	4a40      	ldr	r2, [pc, #256]	; (80012f0 <app_main_loop+0x1e0>)
 80011f0:	5cd3      	ldrb	r3, [r2, r3]
 80011f2:	f003 031f 	and.w	r3, r3, #31
								(((cam_buff[(j-1)*320*2+z] & 0x07U) << 3) | ((cam_buff[(j-1)*320*2+z+1] & 0xC0U) >> 6)) +	//green
 80011f6:	440b      	add	r3, r1
						) / 3;
 80011f8:	4a3e      	ldr	r2, [pc, #248]	; (80012f4 <app_main_loop+0x1e4>)
 80011fa:	fba2 2303 	umull	r2, r3, r2, r3
 80011fe:	085b      	lsrs	r3, r3, #1
				uint16_t gray =
 8001200:	847b      	strh	r3, [r7, #34]	; 0x22

				uint16_t graysc =
						(((gray << 11) & 0xF800U) |
 8001202:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001204:	02db      	lsls	r3, r3, #11
 8001206:	b29a      	uxth	r2, r3
								((gray << 6) & 0x07C0U) |
 8001208:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800120a:	019b      	lsls	r3, r3, #6
 800120c:	b29b      	uxth	r3, r3
 800120e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001212:	b29b      	uxth	r3, r3
						(((gray << 11) & 0xF800U) |
 8001214:	4313      	orrs	r3, r2
 8001216:	b29a      	uxth	r2, r3
								(gray & 0x001FU));
 8001218:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800121a:	f003 031f 	and.w	r3, r3, #31
 800121e:	b29b      	uxth	r3, r3
				uint16_t graysc =
 8001220:	4313      	orrs	r3, r2
 8001222:	843b      	strh	r3, [r7, #32]

				g_cam_gray_frame[k] = gray;
 8001224:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001226:	b2d9      	uxtb	r1, r3
 8001228:	4a33      	ldr	r2, [pc, #204]	; (80012f8 <app_main_loop+0x1e8>)
 800122a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122c:	4413      	add	r3, r2
 800122e:	460a      	mov	r2, r1
 8001230:	701a      	strb	r2, [r3, #0]
				k++;
 8001232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001234:	3301      	adds	r3, #1
 8001236:	627b      	str	r3, [r7, #36]	; 0x24

				FSMC_WR_DAT(graysc);
 8001238:	8c3b      	ldrh	r3, [r7, #32]
 800123a:	4618      	mov	r0, r3
 800123c:	f000 fa08 	bl	8001650 <FSMC_WR_DAT>
			for(z = 112*2; z < 112*2 + 96*2; z+=2)
 8001240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001242:	3302      	adds	r3, #2
 8001244:	62bb      	str	r3, [r7, #40]	; 0x28
 8001246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001248:	f5b3 7fd0 	cmp.w	r3, #416	; 0x1a0
 800124c:	db99      	blt.n	8001182 <app_main_loop+0x72>
		for(j = 72; j <= 72 + 96; j++)
 800124e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001250:	3301      	adds	r3, #1
 8001252:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001256:	2ba8      	cmp	r3, #168	; 0xa8
 8001258:	dd90      	ble.n	800117c <app_main_loop+0x6c>
			}
		}


		LCD_SetWindow(20, 20, 340-1, 260-1); // 320 x 240
 800125a:	f240 1303 	movw	r3, #259	; 0x103
 800125e:	f240 1253 	movw	r2, #339	; 0x153
 8001262:	2114      	movs	r1, #20
 8001264:	2014      	movs	r0, #20
 8001266:	f000 fa05 	bl	8001674 <LCD_SetWindow>
		for(j = 0; j <= OV7670_FRAME_SIZE_QVGA - 2; j+=2)
 800126a:	2300      	movs	r3, #0
 800126c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800126e:	e013      	b.n	8001298 <app_main_loop+0x188>
					(gray & 0x001FU));
			 FSMC_WR_DAT(graysc);
			 */

			// RRRRR GGGGGG BBBBB
			FSMC_WR_DAT(((cam_buff[j] << 8) & 0xFF00U) | (cam_buff[j+1] & 0x00FFU));
 8001270:	4a1f      	ldr	r2, [pc, #124]	; (80012f0 <app_main_loop+0x1e0>)
 8001272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001274:	4413      	add	r3, r2
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	b29b      	uxth	r3, r3
 800127a:	021b      	lsls	r3, r3, #8
 800127c:	b29a      	uxth	r2, r3
 800127e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001280:	3301      	adds	r3, #1
 8001282:	491b      	ldr	r1, [pc, #108]	; (80012f0 <app_main_loop+0x1e0>)
 8001284:	5ccb      	ldrb	r3, [r1, r3]
 8001286:	b29b      	uxth	r3, r3
 8001288:	4313      	orrs	r3, r2
 800128a:	b29b      	uxth	r3, r3
 800128c:	4618      	mov	r0, r3
 800128e:	f000 f9df 	bl	8001650 <FSMC_WR_DAT>
		for(j = 0; j <= OV7670_FRAME_SIZE_QVGA - 2; j+=2)
 8001292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001294:	3302      	adds	r3, #2
 8001296:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800129a:	4a18      	ldr	r2, [pc, #96]	; (80012fc <app_main_loop+0x1ec>)
 800129c:	4293      	cmp	r3, r2
 800129e:	dde7      	ble.n	8001270 <app_main_loop+0x160>
		}

		if(HAL_GetTick() > milis + 1000)
 80012a0:	f001 ffc8 	bl	8003234 <HAL_GetTick>
 80012a4:	4602      	mov	r2, r0
 80012a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012a8:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d909      	bls.n	80012c4 <app_main_loop+0x1b4>
		{
			milis = HAL_GetTick();
 80012b0:	f001 ffc0 	bl	8003234 <HAL_GetTick>
 80012b4:	6378      	str	r0, [r7, #52]	; 0x34
			if(milis >= (0xFFFFFFFFU - 1000U))
 80012b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012b8:	f46f 727a 	mvn.w	r2, #1000	; 0x3e8
 80012bc:	4293      	cmp	r3, r2
 80012be:	d301      	bcc.n	80012c4 <app_main_loop+0x1b4>
			{
				milis = 0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	637b      	str	r3, [r7, #52]	; 0x34
				sprintf(buff + strlen(buff), "%02x", dejta);
				uart_write(buff);*/
				//LCD_PrintStr(20, 20, 0, 0x841FU, buff, 5);
			}
		}
		if(HAL_GetTick() > milis2 + 5000)
 80012c4:	f001 ffb6 	bl	8003234 <HAL_GetTick>
 80012c8:	4602      	mov	r2, r0
 80012ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012cc:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80012d0:	3308      	adds	r3, #8
 80012d2:	429a      	cmp	r2, r3
 80012d4:	f67f af41 	bls.w	800115a <app_main_loop+0x4a>
		{
			milis2 = HAL_GetTick();
 80012d8:	f001 ffac 	bl	8003234 <HAL_GetTick>
 80012dc:	6338      	str	r0, [r7, #48]	; 0x30
			if(milis2 >= (0xFFFFFFFFU - 5000U))
 80012de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012e0:	4a07      	ldr	r2, [pc, #28]	; (8001300 <app_main_loop+0x1f0>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	f67f af39 	bls.w	800115a <app_main_loop+0x4a>
			{
				milis2 = 0;
 80012e8:	2300      	movs	r3, #0
 80012ea:	633b      	str	r3, [r7, #48]	; 0x30
		loop();
 80012ec:	e735      	b.n	800115a <app_main_loop+0x4a>
 80012ee:	bf00      	nop
 80012f0:	200000a0 	.word	0x200000a0
 80012f4:	aaaaaaab 	.word	0xaaaaaaab
 80012f8:	20025b20 	.word	0x20025b20
 80012fc:	000257fe 	.word	0x000257fe
 8001300:	ffffec76 	.word	0xffffec76

08001304 <HAL_GPIO_EXTI_Callback>:



//=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == OV7670_VSYNC_Pin)
 800130e:	88fb      	ldrh	r3, [r7, #6]
 8001310:	2b02      	cmp	r3, #2
 8001312:	d102      	bne.n	800131a <HAL_GPIO_EXTI_Callback+0x16>
		EXTI1_VSYNC_Callback();
 8001314:	f000 f838 	bl	8001388 <EXTI1_VSYNC_Callback>
	else if(GPIO_Pin == OV7670_HREF_Pin)
		EXTI0_HREF_Callback();
}
 8001318:	e004      	b.n	8001324 <HAL_GPIO_EXTI_Callback+0x20>
	else if(GPIO_Pin == OV7670_HREF_Pin)
 800131a:	88fb      	ldrh	r3, [r7, #6]
 800131c:	2b01      	cmp	r3, #1
 800131e:	d101      	bne.n	8001324 <HAL_GPIO_EXTI_Callback+0x20>
		EXTI0_HREF_Callback();
 8001320:	f000 f804 	bl	800132c <EXTI0_HREF_Callback>
}
 8001324:	bf00      	nop
 8001326:	3708      	adds	r7, #8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}

0800132c <EXTI0_HREF_Callback>:



//=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~
void EXTI0_HREF_Callback()
{	// Falling edge
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
	HAL_DMA_Abort(&hdma_tim1_trig);
 8001330:	4810      	ldr	r0, [pc, #64]	; (8001374 <EXTI0_HREF_Callback+0x48>)
 8001332:	f002 f9dc 	bl	80036ee <HAL_DMA_Abort>
	HAL_DMA_Start(&hdma_tim1_trig, (uint32_t) &(GPIOB->IDR), (uint32_t)(cam_buff + g_offset), 640);
 8001336:	4b10      	ldr	r3, [pc, #64]	; (8001378 <EXTI0_HREF_Callback+0x4c>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a10      	ldr	r2, [pc, #64]	; (800137c <EXTI0_HREF_Callback+0x50>)
 800133c:	4413      	add	r3, r2
 800133e:	461a      	mov	r2, r3
 8001340:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001344:	490e      	ldr	r1, [pc, #56]	; (8001380 <EXTI0_HREF_Callback+0x54>)
 8001346:	480b      	ldr	r0, [pc, #44]	; (8001374 <EXTI0_HREF_Callback+0x48>)
 8001348:	f002 f996 	bl	8003678 <HAL_DMA_Start>
	if(cam_buff + g_offset >= cam_buff + OV7670_FRAME_SIZE_QVGA - 640)//38080=38400-320
 800134c:	4b0a      	ldr	r3, [pc, #40]	; (8001378 <EXTI0_HREF_Callback+0x4c>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a0a      	ldr	r2, [pc, #40]	; (800137c <EXTI0_HREF_Callback+0x50>)
 8001352:	4413      	add	r3, r2
 8001354:	4a0b      	ldr	r2, [pc, #44]	; (8001384 <EXTI0_HREF_Callback+0x58>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d303      	bcc.n	8001362 <EXTI0_HREF_Callback+0x36>
	{
		g_offset = 0;
 800135a:	4b07      	ldr	r3, [pc, #28]	; (8001378 <EXTI0_HREF_Callback+0x4c>)
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		g_offset += 640;
	}
}
 8001360:	e005      	b.n	800136e <EXTI0_HREF_Callback+0x42>
		g_offset += 640;
 8001362:	4b05      	ldr	r3, [pc, #20]	; (8001378 <EXTI0_HREF_Callback+0x4c>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800136a:	4a03      	ldr	r2, [pc, #12]	; (8001378 <EXTI0_HREF_Callback+0x4c>)
 800136c:	6013      	str	r3, [r2, #0]
}
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	2004a608 	.word	0x2004a608
 8001378:	20027f20 	.word	0x20027f20
 800137c:	200000a0 	.word	0x200000a0
 8001380:	40020410 	.word	0x40020410
 8001384:	20025620 	.word	0x20025620

08001388 <EXTI1_VSYNC_Callback>:



//=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~
void EXTI1_VSYNC_Callback()
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
	// Rising edge
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 800138c:	2201      	movs	r2, #1
 800138e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001392:	4818      	ldr	r0, [pc, #96]	; (80013f4 <EXTI1_VSYNC_Callback+0x6c>)
 8001394:	f002 fcc0 	bl	8003d18 <HAL_GPIO_WritePin>
	if(OV7670_VSYNC_GPIO_Port->IDR & OV7670_VSYNC_Pin)
 8001398:	4b17      	ldr	r3, [pc, #92]	; (80013f8 <EXTI1_VSYNC_Callback+0x70>)
 800139a:	691b      	ldr	r3, [r3, #16]
 800139c:	f003 0302 	and.w	r3, r3, #2
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d006      	beq.n	80013b2 <EXTI1_VSYNC_Callback+0x2a>
	{

		HAL_DMA_Abort(&hdma_tim1_trig);
 80013a4:	4815      	ldr	r0, [pc, #84]	; (80013fc <EXTI1_VSYNC_Callback+0x74>)
 80013a6:	f002 f9a2 	bl	80036ee <HAL_DMA_Abort>
		HAL_NVIC_DisableIRQ(OV7670_HREF_EXTI_IRQn);
 80013aa:	2006      	movs	r0, #6
 80013ac:	f002 f89b 	bl	80034e6 <HAL_NVIC_DisableIRQ>
 80013b0:	e017      	b.n	80013e2 <EXTI1_VSYNC_Callback+0x5a>
	}
	// Falling edge
	else
	{
		HAL_NVIC_SetPriority(OV7670_HREF_EXTI_IRQn, 0, 0);
 80013b2:	2200      	movs	r2, #0
 80013b4:	2100      	movs	r1, #0
 80013b6:	2006      	movs	r0, #6
 80013b8:	f002 f86b 	bl	8003492 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(OV7670_HREF_EXTI_IRQn);
 80013bc:	2006      	movs	r0, #6
 80013be:	f002 f884 	bl	80034ca <HAL_NVIC_EnableIRQ>
		HAL_DMA_Abort(&hdma_tim1_trig);
 80013c2:	480e      	ldr	r0, [pc, #56]	; (80013fc <EXTI1_VSYNC_Callback+0x74>)
 80013c4:	f002 f993 	bl	80036ee <HAL_DMA_Abort>
		HAL_DMA_Start(&hdma_tim1_trig, (uint32_t) &(GPIOB->IDR), (uint32_t)cam_buff, 640); // first line
 80013c8:	4a0d      	ldr	r2, [pc, #52]	; (8001400 <EXTI1_VSYNC_Callback+0x78>)
 80013ca:	f44f 7320 	mov.w	r3, #640	; 0x280
 80013ce:	490d      	ldr	r1, [pc, #52]	; (8001404 <EXTI1_VSYNC_Callback+0x7c>)
 80013d0:	480a      	ldr	r0, [pc, #40]	; (80013fc <EXTI1_VSYNC_Callback+0x74>)
 80013d2:	f002 f951 	bl	8003678 <HAL_DMA_Start>
		g_offset += 640;
 80013d6:	4b0c      	ldr	r3, [pc, #48]	; (8001408 <EXTI1_VSYNC_Callback+0x80>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80013de:	4a0a      	ldr	r2, [pc, #40]	; (8001408 <EXTI1_VSYNC_Callback+0x80>)
 80013e0:	6013      	str	r3, [r2, #0]
	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 80013e2:	2200      	movs	r2, #0
 80013e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013e8:	4802      	ldr	r0, [pc, #8]	; (80013f4 <EXTI1_VSYNC_Callback+0x6c>)
 80013ea:	f002 fc95 	bl	8003d18 <HAL_GPIO_WritePin>
}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40020400 	.word	0x40020400
 80013f8:	40021800 	.word	0x40021800
 80013fc:	2004a608 	.word	0x2004a608
 8001400:	200000a0 	.word	0x200000a0
 8001404:	40020410 	.word	0x40020410
 8001408:	20027f20 	.word	0x20027f20

0800140c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	607b      	str	r3, [r7, #4]
 8001416:	4b09      	ldr	r3, [pc, #36]	; (800143c <MX_DMA_Init+0x30>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141a:	4a08      	ldr	r2, [pc, #32]	; (800143c <MX_DMA_Init+0x30>)
 800141c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001420:	6313      	str	r3, [r2, #48]	; 0x30
 8001422:	4b06      	ldr	r3, [pc, #24]	; (800143c <MX_DMA_Init+0x30>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800142a:	607b      	str	r3, [r7, #4]
 800142c:	687b      	ldr	r3, [r7, #4]

}
 800142e:	bf00      	nop
 8001430:	370c      	adds	r7, #12
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	40023800 	.word	0x40023800

08001440 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b08e      	sub	sp, #56	; 0x38
 8001444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001446:	f107 031c 	add.w	r3, r7, #28
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	605a      	str	r2, [r3, #4]
 8001450:	609a      	str	r2, [r3, #8]
 8001452:	60da      	str	r2, [r3, #12]
 8001454:	611a      	str	r2, [r3, #16]
 8001456:	615a      	str	r2, [r3, #20]
 8001458:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 800145a:	463b      	mov	r3, r7
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	60da      	str	r2, [r3, #12]
 8001466:	611a      	str	r2, [r3, #16]
 8001468:	615a      	str	r2, [r3, #20]
 800146a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 800146c:	4b30      	ldr	r3, [pc, #192]	; (8001530 <MX_FSMC_Init+0xf0>)
 800146e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001472:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001474:	4b2e      	ldr	r3, [pc, #184]	; (8001530 <MX_FSMC_Init+0xf0>)
 8001476:	4a2f      	ldr	r2, [pc, #188]	; (8001534 <MX_FSMC_Init+0xf4>)
 8001478:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800147a:	4b2d      	ldr	r3, [pc, #180]	; (8001530 <MX_FSMC_Init+0xf0>)
 800147c:	2200      	movs	r2, #0
 800147e:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001480:	4b2b      	ldr	r3, [pc, #172]	; (8001530 <MX_FSMC_Init+0xf0>)
 8001482:	2200      	movs	r2, #0
 8001484:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001486:	4b2a      	ldr	r3, [pc, #168]	; (8001530 <MX_FSMC_Init+0xf0>)
 8001488:	2200      	movs	r2, #0
 800148a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800148c:	4b28      	ldr	r3, [pc, #160]	; (8001530 <MX_FSMC_Init+0xf0>)
 800148e:	2210      	movs	r2, #16
 8001490:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001492:	4b27      	ldr	r3, [pc, #156]	; (8001530 <MX_FSMC_Init+0xf0>)
 8001494:	2200      	movs	r2, #0
 8001496:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001498:	4b25      	ldr	r3, [pc, #148]	; (8001530 <MX_FSMC_Init+0xf0>)
 800149a:	2200      	movs	r2, #0
 800149c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 800149e:	4b24      	ldr	r3, [pc, #144]	; (8001530 <MX_FSMC_Init+0xf0>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80014a4:	4b22      	ldr	r3, [pc, #136]	; (8001530 <MX_FSMC_Init+0xf0>)
 80014a6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014aa:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80014ac:	4b20      	ldr	r3, [pc, #128]	; (8001530 <MX_FSMC_Init+0xf0>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 80014b2:	4b1f      	ldr	r3, [pc, #124]	; (8001530 <MX_FSMC_Init+0xf0>)
 80014b4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014b8:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80014ba:	4b1d      	ldr	r3, [pc, #116]	; (8001530 <MX_FSMC_Init+0xf0>)
 80014bc:	2200      	movs	r2, #0
 80014be:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80014c0:	4b1b      	ldr	r3, [pc, #108]	; (8001530 <MX_FSMC_Init+0xf0>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80014c6:	4b1a      	ldr	r3, [pc, #104]	; (8001530 <MX_FSMC_Init+0xf0>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 80014cc:	4b18      	ldr	r3, [pc, #96]	; (8001530 <MX_FSMC_Init+0xf0>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	641a      	str	r2, [r3, #64]	; 0x40
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80014d2:	4b17      	ldr	r3, [pc, #92]	; (8001530 <MX_FSMC_Init+0xf0>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 9;
 80014d8:	2309      	movs	r3, #9
 80014da:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80014dc:	230f      	movs	r3, #15
 80014de:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 5;
 80014e0:	2305      	movs	r3, #5
 80014e2:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 1;
 80014e4:	2301      	movs	r3, #1
 80014e6:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 80014e8:	2310      	movs	r3, #16
 80014ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 80014ec:	2311      	movs	r3, #17
 80014ee:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80014f0:	2300      	movs	r3, #0
 80014f2:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 2;
 80014f4:	2302      	movs	r3, #2
 80014f6:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 80014f8:	230f      	movs	r3, #15
 80014fa:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 3;
 80014fc:	2303      	movs	r3, #3
 80014fe:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 1;
 8001500:	2301      	movs	r3, #1
 8001502:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8001504:	2310      	movs	r3, #16
 8001506:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8001508:	2311      	movs	r3, #17
 800150a:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 800150c:	2300      	movs	r3, #0
 800150e:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8001510:	463a      	mov	r2, r7
 8001512:	f107 031c 	add.w	r3, r7, #28
 8001516:	4619      	mov	r1, r3
 8001518:	4805      	ldr	r0, [pc, #20]	; (8001530 <MX_FSMC_Init+0xf0>)
 800151a:	f005 fea9 	bl	8007270 <HAL_SRAM_Init>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_FSMC_Init+0xe8>
  {
    Error_Handler( );
 8001524:	f000 ff6c 	bl	8002400 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001528:	bf00      	nop
 800152a:	3738      	adds	r7, #56	; 0x38
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	2004a564 	.word	0x2004a564
 8001534:	a0000104 	.word	0xa0000104

08001538 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001538:	b580      	push	{r7, lr}
 800153a:	b086      	sub	sp, #24
 800153c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800153e:	1d3b      	adds	r3, r7, #4
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	605a      	str	r2, [r3, #4]
 8001546:	609a      	str	r2, [r3, #8]
 8001548:	60da      	str	r2, [r3, #12]
 800154a:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 800154c:	4b2c      	ldr	r3, [pc, #176]	; (8001600 <HAL_FSMC_MspInit+0xc8>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d151      	bne.n	80015f8 <HAL_FSMC_MspInit+0xc0>
    return;
  }
  FSMC_Initialized = 1;
 8001554:	4b2a      	ldr	r3, [pc, #168]	; (8001600 <HAL_FSMC_MspInit+0xc8>)
 8001556:	2201      	movs	r2, #1
 8001558:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	603b      	str	r3, [r7, #0]
 800155e:	4b29      	ldr	r3, [pc, #164]	; (8001604 <HAL_FSMC_MspInit+0xcc>)
 8001560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001562:	4a28      	ldr	r2, [pc, #160]	; (8001604 <HAL_FSMC_MspInit+0xcc>)
 8001564:	f043 0301 	orr.w	r3, r3, #1
 8001568:	6393      	str	r3, [r2, #56]	; 0x38
 800156a:	4b26      	ldr	r3, [pc, #152]	; (8001604 <HAL_FSMC_MspInit+0xcc>)
 800156c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	603b      	str	r3, [r7, #0]
 8001574:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001576:	f64f 7380 	movw	r3, #65408	; 0xff80
 800157a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157c:	2302      	movs	r3, #2
 800157e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001584:	2303      	movs	r3, #3
 8001586:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001588:	230c      	movs	r3, #12
 800158a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800158c:	1d3b      	adds	r3, r7, #4
 800158e:	4619      	mov	r1, r3
 8001590:	481d      	ldr	r0, [pc, #116]	; (8001608 <HAL_FSMC_MspInit+0xd0>)
 8001592:	f002 fa2d 	bl	80039f0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001596:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800159a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159c:	2302      	movs	r3, #2
 800159e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a4:	2303      	movs	r3, #3
 80015a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80015a8:	230c      	movs	r3, #12
 80015aa:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ac:	1d3b      	adds	r3, r7, #4
 80015ae:	4619      	mov	r1, r3
 80015b0:	4816      	ldr	r0, [pc, #88]	; (800160c <HAL_FSMC_MspInit+0xd4>)
 80015b2:	f002 fa1d 	bl	80039f0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14
 80015b6:	f64c 63b0 	movw	r3, #52912	; 0xceb0
 80015ba:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015bc:	2302      	movs	r3, #2
 80015be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c0:	2300      	movs	r3, #0
 80015c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c4:	2303      	movs	r3, #3
 80015c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80015c8:	230c      	movs	r3, #12
 80015ca:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015cc:	1d3b      	adds	r3, r7, #4
 80015ce:	4619      	mov	r1, r3
 80015d0:	480f      	ldr	r0, [pc, #60]	; (8001610 <HAL_FSMC_MspInit+0xd8>)
 80015d2:	f002 fa0d 	bl	80039f0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80015d6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80015da:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015dc:	2302      	movs	r3, #2
 80015de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e0:	2300      	movs	r3, #0
 80015e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e4:	2303      	movs	r3, #3
 80015e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80015e8:	230a      	movs	r3, #10
 80015ea:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015ec:	1d3b      	adds	r3, r7, #4
 80015ee:	4619      	mov	r1, r3
 80015f0:	4808      	ldr	r0, [pc, #32]	; (8001614 <HAL_FSMC_MspInit+0xdc>)
 80015f2:	f002 f9fd 	bl	80039f0 <HAL_GPIO_Init>
 80015f6:	e000      	b.n	80015fa <HAL_FSMC_MspInit+0xc2>
    return;
 80015f8:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80015fa:	3718      	adds	r7, #24
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	20027f24 	.word	0x20027f24
 8001604:	40023800 	.word	0x40023800
 8001608:	40021000 	.word	0x40021000
 800160c:	40020400 	.word	0x40020400
 8001610:	40020c00 	.word	0x40020c00
 8001614:	40020800 	.word	0x40020800

08001618 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001620:	f7ff ff8a 	bl	8001538 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001624:	bf00      	nop
 8001626:	3708      	adds	r7, #8
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <FSMC_WR_REG>:
 * function   :
 * parameters :
 * retvalue   :N/A
 *******************************************************************************************************************************/
void FSMC_WR_REG(uint32_t Reg)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
	LCD_FSMC->REG = Reg;
 8001634:	4b05      	ldr	r3, [pc, #20]	; (800164c <FSMC_WR_REG+0x20>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	b292      	uxth	r2, r2
 800163c:	801a      	strh	r2, [r3, #0]
}
 800163e:	bf00      	nop
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	20000000 	.word	0x20000000

08001650 <FSMC_WR_DAT>:
* function   :
* parameters :N/A
* retvalue   :N/A
*******************************************************************************************************************************/
void FSMC_WR_DAT(uint16_t Dat)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	4603      	mov	r3, r0
 8001658:	80fb      	strh	r3, [r7, #6]
	LCD_FSMC->DAT = Dat;
 800165a:	4b05      	ldr	r3, [pc, #20]	; (8001670 <FSMC_WR_DAT+0x20>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	88fa      	ldrh	r2, [r7, #6]
 8001660:	805a      	strh	r2, [r3, #2]
}
 8001662:	bf00      	nop
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	20000000 	.word	0x20000000

08001674 <LCD_SetWindow>:
							LCD_SetDirection function. It calls to FSMC_WR_REG(RAMWR) function at the end.
* parameters :XS(x start address), YS(y start address), XE(x end address) and YE(y end address)
* retvalue   :N/A
*******************************************************************************************************************************/
void LCD_SetWindow(uint16_t Xs, uint16_t Ys, uint16_t Xe, uint16_t Ye)
{
 8001674:	b590      	push	{r4, r7, lr}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	4604      	mov	r4, r0
 800167c:	4608      	mov	r0, r1
 800167e:	4611      	mov	r1, r2
 8001680:	461a      	mov	r2, r3
 8001682:	4623      	mov	r3, r4
 8001684:	80fb      	strh	r3, [r7, #6]
 8001686:	4603      	mov	r3, r0
 8001688:	80bb      	strh	r3, [r7, #4]
 800168a:	460b      	mov	r3, r1
 800168c:	807b      	strh	r3, [r7, #2]
 800168e:	4613      	mov	r3, r2
 8001690:	803b      	strh	r3, [r7, #0]
	FSMC_WR_REG(CASET_XS_H);		FSMC_WR_DAT(Xs >> 8);
 8001692:	f44f 5028 	mov.w	r0, #10752	; 0x2a00
 8001696:	f7ff ffc9 	bl	800162c <FSMC_WR_REG>
 800169a:	88fb      	ldrh	r3, [r7, #6]
 800169c:	0a1b      	lsrs	r3, r3, #8
 800169e:	b29b      	uxth	r3, r3
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff ffd5 	bl	8001650 <FSMC_WR_DAT>
	FSMC_WR_REG(CASET_XS_L);		FSMC_WR_DAT(Xs & 0x00FFU);
 80016a6:	f642 2001 	movw	r0, #10753	; 0x2a01
 80016aa:	f7ff ffbf 	bl	800162c <FSMC_WR_REG>
 80016ae:	88fb      	ldrh	r3, [r7, #6]
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff ffcb 	bl	8001650 <FSMC_WR_DAT>
	FSMC_WR_REG(CASET_XE_H);		FSMC_WR_DAT(Xe >> 8);
 80016ba:	f642 2002 	movw	r0, #10754	; 0x2a02
 80016be:	f7ff ffb5 	bl	800162c <FSMC_WR_REG>
 80016c2:	887b      	ldrh	r3, [r7, #2]
 80016c4:	0a1b      	lsrs	r3, r3, #8
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff ffc1 	bl	8001650 <FSMC_WR_DAT>
	FSMC_WR_REG(CASET_XE_L);		FSMC_WR_DAT(Xe & 0x00FFU);
 80016ce:	f642 2003 	movw	r0, #10755	; 0x2a03
 80016d2:	f7ff ffab 	bl	800162c <FSMC_WR_REG>
 80016d6:	887b      	ldrh	r3, [r7, #2]
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	b29b      	uxth	r3, r3
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff ffb7 	bl	8001650 <FSMC_WR_DAT>
	FSMC_WR_REG(RASET_YS_H);		FSMC_WR_DAT(Ys >> 8);
 80016e2:	f44f 502c 	mov.w	r0, #11008	; 0x2b00
 80016e6:	f7ff ffa1 	bl	800162c <FSMC_WR_REG>
 80016ea:	88bb      	ldrh	r3, [r7, #4]
 80016ec:	0a1b      	lsrs	r3, r3, #8
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff ffad 	bl	8001650 <FSMC_WR_DAT>
	FSMC_WR_REG(RASET_YS_L);		FSMC_WR_DAT(Ys & 0x00FFU);
 80016f6:	f642 3001 	movw	r0, #11009	; 0x2b01
 80016fa:	f7ff ff97 	bl	800162c <FSMC_WR_REG>
 80016fe:	88bb      	ldrh	r3, [r7, #4]
 8001700:	b2db      	uxtb	r3, r3
 8001702:	b29b      	uxth	r3, r3
 8001704:	4618      	mov	r0, r3
 8001706:	f7ff ffa3 	bl	8001650 <FSMC_WR_DAT>
	FSMC_WR_REG(RASET_YE_H);		FSMC_WR_DAT(Ye >> 8);
 800170a:	f642 3002 	movw	r0, #11010	; 0x2b02
 800170e:	f7ff ff8d 	bl	800162c <FSMC_WR_REG>
 8001712:	883b      	ldrh	r3, [r7, #0]
 8001714:	0a1b      	lsrs	r3, r3, #8
 8001716:	b29b      	uxth	r3, r3
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff ff99 	bl	8001650 <FSMC_WR_DAT>
	FSMC_WR_REG(RASET_YE_L);		FSMC_WR_DAT(Ye & 0x00FFU);
 800171e:	f642 3003 	movw	r0, #11011	; 0x2b03
 8001722:	f7ff ff83 	bl	800162c <FSMC_WR_REG>
 8001726:	883b      	ldrh	r3, [r7, #0]
 8001728:	b2db      	uxtb	r3, r3
 800172a:	b29b      	uxth	r3, r3
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff ff8f 	bl	8001650 <FSMC_WR_DAT>

	FSMC_WR_REG(RAMWR);
 8001732:	f44f 5030 	mov.w	r0, #11264	; 0x2c00
 8001736:	f7ff ff79 	bl	800162c <FSMC_WR_REG>
}
 800173a:	bf00      	nop
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	bd90      	pop	{r4, r7, pc}
	...

08001744 <LCD_SetDirection>:
							the selected orientation.
* parameters :Direction(Use Orientation Direction Definitions defined in FSMC_NT35510.h)
* retvalue   :N/A
*******************************************************************************************************************************/
void LCD_SetDirection(uint8_t Direction)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	4603      	mov	r3, r0
 800174c:	71fb      	strb	r3, [r7, #7]
	switch(Direction)
 800174e:	79fb      	ldrb	r3, [r7, #7]
 8001750:	2b03      	cmp	r3, #3
 8001752:	d84b      	bhi.n	80017ec <LCD_SetDirection+0xa8>
 8001754:	a201      	add	r2, pc, #4	; (adr r2, 800175c <LCD_SetDirection+0x18>)
 8001756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800175a:	bf00      	nop
 800175c:	0800176d 	.word	0x0800176d
 8001760:	0800178d 	.word	0x0800178d
 8001764:	080017ad 	.word	0x080017ad
 8001768:	080017cd 	.word	0x080017cd
	{
		case 0:

			FSMC_WR_REG(MADCTL); FSMC_WR_DAT(0x0000U);
 800176c:	f44f 5058 	mov.w	r0, #13824	; 0x3600
 8001770:	f7ff ff5c 	bl	800162c <FSMC_WR_REG>
 8001774:	2000      	movs	r0, #0
 8001776:	f7ff ff6b 	bl	8001650 <FSMC_WR_DAT>
			LCD_SetWindow(0, 0, 479, 799);
 800177a:	f240 331f 	movw	r3, #799	; 0x31f
 800177e:	f240 12df 	movw	r2, #479	; 0x1df
 8001782:	2100      	movs	r1, #0
 8001784:	2000      	movs	r0, #0
 8001786:	f7ff ff75 	bl	8001674 <LCD_SetWindow>
		break;
 800178a:	e02f      	b.n	80017ec <LCD_SetDirection+0xa8>
		case 1:

			FSMC_WR_REG(MADCTL); FSMC_WR_DAT(0x00C0U);
 800178c:	f44f 5058 	mov.w	r0, #13824	; 0x3600
 8001790:	f7ff ff4c 	bl	800162c <FSMC_WR_REG>
 8001794:	20c0      	movs	r0, #192	; 0xc0
 8001796:	f7ff ff5b 	bl	8001650 <FSMC_WR_DAT>
			LCD_SetWindow(0, 0, 479, 799);
 800179a:	f240 331f 	movw	r3, #799	; 0x31f
 800179e:	f240 12df 	movw	r2, #479	; 0x1df
 80017a2:	2100      	movs	r1, #0
 80017a4:	2000      	movs	r0, #0
 80017a6:	f7ff ff65 	bl	8001674 <LCD_SetWindow>
		break;
 80017aa:	e01f      	b.n	80017ec <LCD_SetDirection+0xa8>
		case 2:

			FSMC_WR_REG(MADCTL); FSMC_WR_DAT(0x0060U);
 80017ac:	f44f 5058 	mov.w	r0, #13824	; 0x3600
 80017b0:	f7ff ff3c 	bl	800162c <FSMC_WR_REG>
 80017b4:	2060      	movs	r0, #96	; 0x60
 80017b6:	f7ff ff4b 	bl	8001650 <FSMC_WR_DAT>
			LCD_SetWindow(0, 0, 799, 479);
 80017ba:	f240 13df 	movw	r3, #479	; 0x1df
 80017be:	f240 321f 	movw	r2, #799	; 0x31f
 80017c2:	2100      	movs	r1, #0
 80017c4:	2000      	movs	r0, #0
 80017c6:	f7ff ff55 	bl	8001674 <LCD_SetWindow>
		break;
 80017ca:	e00f      	b.n	80017ec <LCD_SetDirection+0xa8>
		case 3:

			FSMC_WR_REG(MADCTL); FSMC_WR_DAT(0x00A0U);
 80017cc:	f44f 5058 	mov.w	r0, #13824	; 0x3600
 80017d0:	f7ff ff2c 	bl	800162c <FSMC_WR_REG>
 80017d4:	20a0      	movs	r0, #160	; 0xa0
 80017d6:	f7ff ff3b 	bl	8001650 <FSMC_WR_DAT>
			LCD_SetWindow(0, 0, 799, 479);
 80017da:	f240 13df 	movw	r3, #479	; 0x1df
 80017de:	f240 321f 	movw	r2, #799	; 0x31f
 80017e2:	2100      	movs	r1, #0
 80017e4:	2000      	movs	r0, #0
 80017e6:	f7ff ff45 	bl	8001674 <LCD_SetWindow>
		break;
 80017ea:	bf00      	nop
	}
}
 80017ec:	bf00      	nop
 80017ee:	3708      	adds	r7, #8
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <LCD_ClearScreen>:
							orientation direction change.
* parameters :Color(Desired screen color)
* retvalue   :N/A
*******************************************************************************************************************************/
void LCD_ClearScreen(uint16_t Color)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4603      	mov	r3, r0
 80017fc:	80fb      	strh	r3, [r7, #6]
  uint32_t i;

	for(i=0; i<(480*800); i++)
 80017fe:	2300      	movs	r3, #0
 8001800:	60fb      	str	r3, [r7, #12]
 8001802:	e006      	b.n	8001812 <LCD_ClearScreen+0x1e>
	{
		FSMC_WR_DAT(Color);
 8001804:	88fb      	ldrh	r3, [r7, #6]
 8001806:	4618      	mov	r0, r3
 8001808:	f7ff ff22 	bl	8001650 <FSMC_WR_DAT>
	for(i=0; i<(480*800); i++)
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	3301      	adds	r3, #1
 8001810:	60fb      	str	r3, [r7, #12]
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	4a03      	ldr	r2, [pc, #12]	; (8001824 <LCD_ClearScreen+0x30>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d9f4      	bls.n	8001804 <LCD_ClearScreen+0x10>
	}
}
 800181a:	bf00      	nop
 800181c:	bf00      	nop
 800181e:	3710      	adds	r7, #16
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	0005dbff 	.word	0x0005dbff

08001828 <LCD_DrawPoint>:
* parameters :X(x address of the center of the point), Y(y address of the center of the point)
							Color(point color), Size(point size)
* retvalue   :N/A
*******************************************************************************************************************************/
void LCD_DrawPoint(uint16_t X, uint16_t Y, uint16_t Color, uint8_t Size)
{
 8001828:	b590      	push	{r4, r7, lr}
 800182a:	b085      	sub	sp, #20
 800182c:	af00      	add	r7, sp, #0
 800182e:	4604      	mov	r4, r0
 8001830:	4608      	mov	r0, r1
 8001832:	4611      	mov	r1, r2
 8001834:	461a      	mov	r2, r3
 8001836:	4623      	mov	r3, r4
 8001838:	80fb      	strh	r3, [r7, #6]
 800183a:	4603      	mov	r3, r0
 800183c:	80bb      	strh	r3, [r7, #4]
 800183e:	460b      	mov	r3, r1
 8001840:	807b      	strh	r3, [r7, #2]
 8001842:	4613      	mov	r3, r2
 8001844:	707b      	strb	r3, [r7, #1]
  uint32_t i;
	LCD_SetWindow(X, Y, X + (Size - 1), Y + (Size - 1));
 8001846:	787b      	ldrb	r3, [r7, #1]
 8001848:	b29a      	uxth	r2, r3
 800184a:	88fb      	ldrh	r3, [r7, #6]
 800184c:	4413      	add	r3, r2
 800184e:	b29b      	uxth	r3, r3
 8001850:	3b01      	subs	r3, #1
 8001852:	b29c      	uxth	r4, r3
 8001854:	787b      	ldrb	r3, [r7, #1]
 8001856:	b29a      	uxth	r2, r3
 8001858:	88bb      	ldrh	r3, [r7, #4]
 800185a:	4413      	add	r3, r2
 800185c:	b29b      	uxth	r3, r3
 800185e:	3b01      	subs	r3, #1
 8001860:	b29b      	uxth	r3, r3
 8001862:	88b9      	ldrh	r1, [r7, #4]
 8001864:	88f8      	ldrh	r0, [r7, #6]
 8001866:	4622      	mov	r2, r4
 8001868:	f7ff ff04 	bl	8001674 <LCD_SetWindow>
	for(i=0; i < (Size) * (Size); i++)
 800186c:	2300      	movs	r3, #0
 800186e:	60fb      	str	r3, [r7, #12]
 8001870:	e006      	b.n	8001880 <LCD_DrawPoint+0x58>
	{
		FSMC_WR_DAT(Color);
 8001872:	887b      	ldrh	r3, [r7, #2]
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff feeb 	bl	8001650 <FSMC_WR_DAT>
	for(i=0; i < (Size) * (Size); i++)
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	3301      	adds	r3, #1
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	787b      	ldrb	r3, [r7, #1]
 8001882:	787a      	ldrb	r2, [r7, #1]
 8001884:	fb02 f303 	mul.w	r3, r2, r3
 8001888:	461a      	mov	r2, r3
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	4293      	cmp	r3, r2
 800188e:	d3f0      	bcc.n	8001872 <LCD_DrawPoint+0x4a>
	}
}
 8001890:	bf00      	nop
 8001892:	bf00      	nop
 8001894:	3714      	adds	r7, #20
 8001896:	46bd      	mov	sp, r7
 8001898:	bd90      	pop	{r4, r7, pc}

0800189a <LCD_DrawLine>:
* function   :
* parameters :Xs(x start address), Ys(y start address), Xe(x end address), Ye(y end address), Color(line color), Size(line size)
* retvalue   :N/A
*******************************************************************************************************************************/
void LCD_DrawLine(uint16_t Xs, uint16_t Ys, uint16_t Xe, uint16_t Ye, uint16_t Color, uint8_t Size)
{
 800189a:	b590      	push	{r4, r7, lr}
 800189c:	b087      	sub	sp, #28
 800189e:	af00      	add	r7, sp, #0
 80018a0:	4604      	mov	r4, r0
 80018a2:	4608      	mov	r0, r1
 80018a4:	4611      	mov	r1, r2
 80018a6:	461a      	mov	r2, r3
 80018a8:	4623      	mov	r3, r4
 80018aa:	80fb      	strh	r3, [r7, #6]
 80018ac:	4603      	mov	r3, r0
 80018ae:	80bb      	strh	r3, [r7, #4]
 80018b0:	460b      	mov	r3, r1
 80018b2:	807b      	strh	r3, [r7, #2]
 80018b4:	4613      	mov	r3, r2
 80018b6:	803b      	strh	r3, [r7, #0]


	int16_t	deltaX = Xe - Xs;
 80018b8:	887a      	ldrh	r2, [r7, #2]
 80018ba:	88fb      	ldrh	r3, [r7, #6]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	b29b      	uxth	r3, r3
 80018c0:	82fb      	strh	r3, [r7, #22]
	if(deltaX<0)
 80018c2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	da03      	bge.n	80018d2 <LCD_DrawLine+0x38>
		deltaX = deltaX * (-1);
 80018ca:	8afb      	ldrh	r3, [r7, #22]
 80018cc:	425b      	negs	r3, r3
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	82fb      	strh	r3, [r7, #22]

	int16_t	deltaY = Ye - Ys;
 80018d2:	883a      	ldrh	r2, [r7, #0]
 80018d4:	88bb      	ldrh	r3, [r7, #4]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	b29b      	uxth	r3, r3
 80018da:	827b      	strh	r3, [r7, #18]
	if(deltaY<0)
 80018dc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	da03      	bge.n	80018ec <LCD_DrawLine+0x52>
		deltaX = deltaY * (-1);
 80018e4:	8a7b      	ldrh	r3, [r7, #18]
 80018e6:	425b      	negs	r3, r3
 80018e8:	b29b      	uxth	r3, r3
 80018ea:	82fb      	strh	r3, [r7, #22]

	int8_t		signX = (Xs < Xe) ? (1) : (-1);
 80018ec:	88fa      	ldrh	r2, [r7, #6]
 80018ee:	887b      	ldrh	r3, [r7, #2]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d201      	bcs.n	80018f8 <LCD_DrawLine+0x5e>
 80018f4:	2301      	movs	r3, #1
 80018f6:	e001      	b.n	80018fc <LCD_DrawLine+0x62>
 80018f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018fc:	747b      	strb	r3, [r7, #17]
	int8_t		signY = (Ys < Ye) ? (1) : (-1);
 80018fe:	88ba      	ldrh	r2, [r7, #4]
 8001900:	883b      	ldrh	r3, [r7, #0]
 8001902:	429a      	cmp	r2, r3
 8001904:	d201      	bcs.n	800190a <LCD_DrawLine+0x70>
 8001906:	2301      	movs	r3, #1
 8001908:	e001      	b.n	800190e <LCD_DrawLine+0x74>
 800190a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800190e:	743b      	strb	r3, [r7, #16]
	int16_t		error = deltaX - deltaY;
 8001910:	8afa      	ldrh	r2, [r7, #22]
 8001912:	8a7b      	ldrh	r3, [r7, #18]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	b29b      	uxth	r3, r3
 8001918:	82bb      	strh	r3, [r7, #20]

	for (;;)
	{
		LCD_DrawPoint(Xs, Ys, Color, Size);
 800191a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800191e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001920:	88b9      	ldrh	r1, [r7, #4]
 8001922:	88f8      	ldrh	r0, [r7, #6]
 8001924:	f7ff ff80 	bl	8001828 <LCD_DrawPoint>

		if(Xs == Xe && Ys == Ye)
 8001928:	88fa      	ldrh	r2, [r7, #6]
 800192a:	887b      	ldrh	r3, [r7, #2]
 800192c:	429a      	cmp	r2, r3
 800192e:	d103      	bne.n	8001938 <LCD_DrawLine+0x9e>
 8001930:	88ba      	ldrh	r2, [r7, #4]
 8001932:	883b      	ldrh	r3, [r7, #0]
 8001934:	429a      	cmp	r2, r3
 8001936:	d025      	beq.n	8001984 <LCD_DrawLine+0xea>
			break;

		int16_t error2 = error;
 8001938:	8abb      	ldrh	r3, [r7, #20]
 800193a:	81fb      	strh	r3, [r7, #14]

		if(error2 > -deltaY)
 800193c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001940:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001944:	425b      	negs	r3, r3
 8001946:	429a      	cmp	r2, r3
 8001948:	dd0a      	ble.n	8001960 <LCD_DrawLine+0xc6>
		{
			error -= deltaY;
 800194a:	8aba      	ldrh	r2, [r7, #20]
 800194c:	8a7b      	ldrh	r3, [r7, #18]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	b29b      	uxth	r3, r3
 8001952:	82bb      	strh	r3, [r7, #20]
			Xs += signX;
 8001954:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8001958:	b29a      	uxth	r2, r3
 800195a:	88fb      	ldrh	r3, [r7, #6]
 800195c:	4413      	add	r3, r2
 800195e:	80fb      	strh	r3, [r7, #6]
		}

		if(error2 < deltaX)
 8001960:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001964:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001968:	429a      	cmp	r2, r3
 800196a:	dad6      	bge.n	800191a <LCD_DrawLine+0x80>
		{
			error += deltaX;
 800196c:	8aba      	ldrh	r2, [r7, #20]
 800196e:	8afb      	ldrh	r3, [r7, #22]
 8001970:	4413      	add	r3, r2
 8001972:	b29b      	uxth	r3, r3
 8001974:	82bb      	strh	r3, [r7, #20]
			Ys += signY;
 8001976:	f997 3010 	ldrsb.w	r3, [r7, #16]
 800197a:	b29a      	uxth	r2, r3
 800197c:	88bb      	ldrh	r3, [r7, #4]
 800197e:	4413      	add	r3, r2
 8001980:	80bb      	strh	r3, [r7, #4]
	{
 8001982:	e7ca      	b.n	800191a <LCD_DrawLine+0x80>
			break;
 8001984:	bf00      	nop
		}
	}
}
 8001986:	bf00      	nop
 8001988:	371c      	adds	r7, #28
 800198a:	46bd      	mov	sp, r7
 800198c:	bd90      	pop	{r4, r7, pc}
	...

08001990 <LCD_PrintCh>:
* parameters :X(x start address), Y(y start address), Color(character color), Bcolor(background
							color), Character(use standard ASCII values for characters) and Size(characters size)
* retvalue   :N/A
********************************************************************************************************************************/
void LCD_PrintCh(uint16_t X, uint16_t Y, uint16_t Color, uint16_t Bcolor, uint8_t Character, uint8_t Size)
{
 8001990:	b590      	push	{r4, r7, lr}
 8001992:	b085      	sub	sp, #20
 8001994:	af00      	add	r7, sp, #0
 8001996:	4604      	mov	r4, r0
 8001998:	4608      	mov	r0, r1
 800199a:	4611      	mov	r1, r2
 800199c:	461a      	mov	r2, r3
 800199e:	4623      	mov	r3, r4
 80019a0:	80fb      	strh	r3, [r7, #6]
 80019a2:	4603      	mov	r3, r0
 80019a4:	80bb      	strh	r3, [r7, #4]
 80019a6:	460b      	mov	r3, r1
 80019a8:	807b      	strh	r3, [r7, #2]
 80019aa:	4613      	mov	r3, r2
 80019ac:	803b      	strh	r3, [r7, #0]
	uint8_t i, j, k, p=0;
 80019ae:	2300      	movs	r3, #0
 80019b0:	733b      	strb	r3, [r7, #12]
	uint16_t c=0;
 80019b2:	2300      	movs	r3, #0
 80019b4:	817b      	strh	r3, [r7, #10]
	LCD_SetWindow(X, Y, X+(8 * Size - 1), Y+(8  *Size - 1));									// Define area by character size.
 80019b6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80019ba:	b29b      	uxth	r3, r3
 80019bc:	00db      	lsls	r3, r3, #3
 80019be:	b29a      	uxth	r2, r3
 80019c0:	88fb      	ldrh	r3, [r7, #6]
 80019c2:	4413      	add	r3, r2
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	3b01      	subs	r3, #1
 80019c8:	b29c      	uxth	r4, r3
 80019ca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80019ce:	b29b      	uxth	r3, r3
 80019d0:	00db      	lsls	r3, r3, #3
 80019d2:	b29a      	uxth	r2, r3
 80019d4:	88bb      	ldrh	r3, [r7, #4]
 80019d6:	4413      	add	r3, r2
 80019d8:	b29b      	uxth	r3, r3
 80019da:	3b01      	subs	r3, #1
 80019dc:	b29b      	uxth	r3, r3
 80019de:	88b9      	ldrh	r1, [r7, #4]
 80019e0:	88f8      	ldrh	r0, [r7, #6]
 80019e2:	4622      	mov	r2, r4
 80019e4:	f7ff fe46 	bl	8001674 <LCD_SetWindow>

	for(i=0; i<8; i++)																							// 8 row-loops because there are 8 row-bytes per character.
 80019e8:	2300      	movs	r3, #0
 80019ea:	73fb      	strb	r3, [r7, #15]
 80019ec:	e03c      	b.n	8001a68 <LCD_PrintCh+0xd8>
	{
		for(j=0; j < Size; j++)																					// Print each row size times.
 80019ee:	2300      	movs	r3, #0
 80019f0:	73bb      	strb	r3, [r7, #14]
 80019f2:	e031      	b.n	8001a58 <LCD_PrintCh+0xc8>
		{
			for(k=0; k < 8; k++)																					// 8 column-loops because there are 8 column-bits per row-byte
 80019f4:	2300      	movs	r3, #0
 80019f6:	737b      	strb	r3, [r7, #13]
 80019f8:	e028      	b.n	8001a4c <LCD_PrintCh+0xbc>
			{
				if((ASCIItable[Character][i]>>(7-k)) & 0x01)
 80019fa:	f897 2020 	ldrb.w	r2, [r7, #32]
 80019fe:	7bfb      	ldrb	r3, [r7, #15]
 8001a00:	491d      	ldr	r1, [pc, #116]	; (8001a78 <LCD_PrintCh+0xe8>)
 8001a02:	00d2      	lsls	r2, r2, #3
 8001a04:	440a      	add	r2, r1
 8001a06:	4413      	add	r3, r2
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	7b7b      	ldrb	r3, [r7, #13]
 8001a0e:	f1c3 0307 	rsb	r3, r3, #7
 8001a12:	fa42 f303 	asr.w	r3, r2, r3
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d002      	beq.n	8001a24 <LCD_PrintCh+0x94>
					c=Color;
 8001a1e:	887b      	ldrh	r3, [r7, #2]
 8001a20:	817b      	strh	r3, [r7, #10]
 8001a22:	e001      	b.n	8001a28 <LCD_PrintCh+0x98>
				else
					c=Bcolor;
 8001a24:	883b      	ldrh	r3, [r7, #0]
 8001a26:	817b      	strh	r3, [r7, #10]
				for(p = 0; p < Size; p++)																			// Print each column-bit size times.
 8001a28:	2300      	movs	r3, #0
 8001a2a:	733b      	strb	r3, [r7, #12]
 8001a2c:	e006      	b.n	8001a3c <LCD_PrintCh+0xac>
				{
					FSMC_WR_DAT(c);
 8001a2e:	897b      	ldrh	r3, [r7, #10]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff fe0d 	bl	8001650 <FSMC_WR_DAT>
				for(p = 0; p < Size; p++)																			// Print each column-bit size times.
 8001a36:	7b3b      	ldrb	r3, [r7, #12]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	733b      	strb	r3, [r7, #12]
 8001a3c:	7b3a      	ldrb	r2, [r7, #12]
 8001a3e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d3f3      	bcc.n	8001a2e <LCD_PrintCh+0x9e>
			for(k=0; k < 8; k++)																					// 8 column-loops because there are 8 column-bits per row-byte
 8001a46:	7b7b      	ldrb	r3, [r7, #13]
 8001a48:	3301      	adds	r3, #1
 8001a4a:	737b      	strb	r3, [r7, #13]
 8001a4c:	7b7b      	ldrb	r3, [r7, #13]
 8001a4e:	2b07      	cmp	r3, #7
 8001a50:	d9d3      	bls.n	80019fa <LCD_PrintCh+0x6a>
		for(j=0; j < Size; j++)																					// Print each row size times.
 8001a52:	7bbb      	ldrb	r3, [r7, #14]
 8001a54:	3301      	adds	r3, #1
 8001a56:	73bb      	strb	r3, [r7, #14]
 8001a58:	7bba      	ldrb	r2, [r7, #14]
 8001a5a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d3c8      	bcc.n	80019f4 <LCD_PrintCh+0x64>
	for(i=0; i<8; i++)																							// 8 row-loops because there are 8 row-bytes per character.
 8001a62:	7bfb      	ldrb	r3, [r7, #15]
 8001a64:	3301      	adds	r3, #1
 8001a66:	73fb      	strb	r3, [r7, #15]
 8001a68:	7bfb      	ldrb	r3, [r7, #15]
 8001a6a:	2b07      	cmp	r3, #7
 8001a6c:	d9bf      	bls.n	80019ee <LCD_PrintCh+0x5e>
				}
			}
		}
	}
}
 8001a6e:	bf00      	nop
 8001a70:	bf00      	nop
 8001a72:	3714      	adds	r7, #20
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd90      	pop	{r4, r7, pc}
 8001a78:	0802c2a4 	.word	0x0802c2a4

08001a7c <LCD_PrintStr>:
							color), string(pointer to an array of characters, standard ASCII values) and size
							(character size)
* retvalue   :N/A
********************************************************************************************************************************/
void LCD_PrintStr(uint16_t X, uint16_t Y, uint16_t Color, uint16_t Bcolor, uint8_t* String, uint8_t Size)
{
 8001a7c:	b5b0      	push	{r4, r5, r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af02      	add	r7, sp, #8
 8001a82:	4604      	mov	r4, r0
 8001a84:	4608      	mov	r0, r1
 8001a86:	4611      	mov	r1, r2
 8001a88:	461a      	mov	r2, r3
 8001a8a:	4623      	mov	r3, r4
 8001a8c:	80fb      	strh	r3, [r7, #6]
 8001a8e:	4603      	mov	r3, r0
 8001a90:	80bb      	strh	r3, [r7, #4]
 8001a92:	460b      	mov	r3, r1
 8001a94:	807b      	strh	r3, [r7, #2]
 8001a96:	4613      	mov	r3, r2
 8001a98:	803b      	strh	r3, [r7, #0]
	X=X-8*Size;
 8001a9a:	7f3b      	ldrb	r3, [r7, #28]
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	00db      	lsls	r3, r3, #3
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	88fa      	ldrh	r2, [r7, #6]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	80fb      	strh	r3, [r7, #6]
	while(*String)
 8001aa8:	e015      	b.n	8001ad6 <LCD_PrintStr+0x5a>
		LCD_PrintCh(X = X + 8 * Size, Y, Color, Bcolor, *String++, Size);
 8001aaa:	7f3b      	ldrb	r3, [r7, #28]
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	00db      	lsls	r3, r3, #3
 8001ab0:	b29a      	uxth	r2, r3
 8001ab2:	88fb      	ldrh	r3, [r7, #6]
 8001ab4:	4413      	add	r3, r2
 8001ab6:	80fb      	strh	r3, [r7, #6]
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	1c5a      	adds	r2, r3, #1
 8001abc:	61ba      	str	r2, [r7, #24]
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	883d      	ldrh	r5, [r7, #0]
 8001ac2:	887c      	ldrh	r4, [r7, #2]
 8001ac4:	88b9      	ldrh	r1, [r7, #4]
 8001ac6:	88f8      	ldrh	r0, [r7, #6]
 8001ac8:	7f3a      	ldrb	r2, [r7, #28]
 8001aca:	9201      	str	r2, [sp, #4]
 8001acc:	9300      	str	r3, [sp, #0]
 8001ace:	462b      	mov	r3, r5
 8001ad0:	4622      	mov	r2, r4
 8001ad2:	f7ff ff5d 	bl	8001990 <LCD_PrintCh>
	while(*String)
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d1e5      	bne.n	8001aaa <LCD_PrintStr+0x2e>
}
 8001ade:	bf00      	nop
 8001ae0:	bf00      	nop
 8001ae2:	3708      	adds	r7, #8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bdb0      	pop	{r4, r5, r7, pc}

08001ae8 <NT35510_Init>:
 * function   :
 * parameters :
 * retvalue   :N/A
 *******************************************************************************************************************************/
void NT35510_Init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
	RST_LOW;													// Reset on.
 8001aec:	2200      	movs	r2, #0
 8001aee:	2140      	movs	r1, #64	; 0x40
 8001af0:	48fd      	ldr	r0, [pc, #1012]	; (8001ee8 <NT35510_Init+0x400>)
 8001af2:	f002 f911 	bl	8003d18 <HAL_GPIO_WritePin>
	HAL_Delay(300);											// Short delay needed on power up
 8001af6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001afa:	f001 fba7 	bl	800324c <HAL_Delay>
	RST_HIGH;													// Reset off.
 8001afe:	2201      	movs	r2, #1
 8001b00:	2140      	movs	r1, #64	; 0x40
 8001b02:	48f9      	ldr	r0, [pc, #996]	; (8001ee8 <NT35510_Init+0x400>)
 8001b04:	f002 f908 	bl	8003d18 <HAL_GPIO_WritePin>
	HAL_Delay(800);											// Short delay needed on power up
 8001b08:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001b0c:	f001 fb9e 	bl	800324c <HAL_Delay>

	// Manufacture Command Set selection
	FSMC_WR_REG(MAUCCTR_0);			FSMC_WR_DAT(0x0055U);
 8001b10:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8001b14:	f7ff fd8a 	bl	800162c <FSMC_WR_REG>
 8001b18:	2055      	movs	r0, #85	; 0x55
 8001b1a:	f7ff fd99 	bl	8001650 <FSMC_WR_DAT>
	FSMC_WR_REG(MAUCCTR_1);			FSMC_WR_DAT(0x00AAU);
 8001b1e:	f24f 0001 	movw	r0, #61441	; 0xf001
 8001b22:	f7ff fd83 	bl	800162c <FSMC_WR_REG>
 8001b26:	20aa      	movs	r0, #170	; 0xaa
 8001b28:	f7ff fd92 	bl	8001650 <FSMC_WR_DAT>
	FSMC_WR_REG(MAUCCTR_2);			FSMC_WR_DAT(0x0052U);
 8001b2c:	f24f 0002 	movw	r0, #61442	; 0xf002
 8001b30:	f7ff fd7c 	bl	800162c <FSMC_WR_REG>
 8001b34:	2052      	movs	r0, #82	; 0x52
 8001b36:	f7ff fd8b 	bl	8001650 <FSMC_WR_DAT>
	FSMC_WR_REG(MAUCCTR_3);			FSMC_WR_DAT(0x0008U);		// Enable Manufacture Command Set
 8001b3a:	f24f 0003 	movw	r0, #61443	; 0xf003
 8001b3e:	f7ff fd75 	bl	800162c <FSMC_WR_REG>
 8001b42:	2008      	movs	r0, #8
 8001b44:	f7ff fd84 	bl	8001650 <FSMC_WR_DAT>
	FSMC_WR_REG(MAUCCTR_4);			FSMC_WR_DAT(0x0001U);		// Select page 1
 8001b48:	f24f 0004 	movw	r0, #61444	; 0xf004
 8001b4c:	f7ff fd6e 	bl	800162c <FSMC_WR_REG>
 8001b50:	2001      	movs	r0, #1
 8001b52:	f7ff fd7d 	bl	8001650 <FSMC_WR_DAT>

	// AVDD 5.2V
	FSMC_WR_REG(SETAVDD_NORM);		FSMC_WR_DAT(0x000DU);
 8001b56:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 8001b5a:	f7ff fd67 	bl	800162c <FSMC_WR_REG>
 8001b5e:	200d      	movs	r0, #13
 8001b60:	f7ff fd76 	bl	8001650 <FSMC_WR_DAT>
	FSMC_WR_REG(SETAVDD_IDLE);		FSMC_WR_DAT(0x000DU);
 8001b64:	f24b 0001 	movw	r0, #45057	; 0xb001
 8001b68:	f7ff fd60 	bl	800162c <FSMC_WR_REG>
 8001b6c:	200d      	movs	r0, #13
 8001b6e:	f7ff fd6f 	bl	8001650 <FSMC_WR_DAT>
	FSMC_WR_REG(SETAVDD_PART);		FSMC_WR_DAT(0x000DU);
 8001b72:	f24b 0002 	movw	r0, #45058	; 0xb002
 8001b76:	f7ff fd59 	bl	800162c <FSMC_WR_REG>
 8001b7a:	200d      	movs	r0, #13
 8001b7c:	f7ff fd68 	bl	8001650 <FSMC_WR_DAT>

	// AVDD ratio
	FSMC_WR_REG(BT1CTR_NORM);		FSMC_WR_DAT(0x0034U);
 8001b80:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 8001b84:	f7ff fd52 	bl	800162c <FSMC_WR_REG>
 8001b88:	2034      	movs	r0, #52	; 0x34
 8001b8a:	f7ff fd61 	bl	8001650 <FSMC_WR_DAT>
	FSMC_WR_REG(BT1CTR_IDLE);		FSMC_WR_DAT(0x0034U);
 8001b8e:	f24b 6001 	movw	r0, #46593	; 0xb601
 8001b92:	f7ff fd4b 	bl	800162c <FSMC_WR_REG>
 8001b96:	2034      	movs	r0, #52	; 0x34
 8001b98:	f7ff fd5a 	bl	8001650 <FSMC_WR_DAT>
	FSMC_WR_REG(BT1CTR_PART);		FSMC_WR_DAT(0x0034U);
 8001b9c:	f24b 6002 	movw	r0, #46594	; 0xb602
 8001ba0:	f7ff fd44 	bl	800162c <FSMC_WR_REG>
 8001ba4:	2034      	movs	r0, #52	; 0x34
 8001ba6:	f7ff fd53 	bl	8001650 <FSMC_WR_DAT>

	// AVEE  -5.2V
	FSMC_WR_REG(SETAVEE_NORM);		FSMC_WR_DAT(0x000DU);
 8001baa:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 8001bae:	f7ff fd3d 	bl	800162c <FSMC_WR_REG>
 8001bb2:	200d      	movs	r0, #13
 8001bb4:	f7ff fd4c 	bl	8001650 <FSMC_WR_DAT>
	FSMC_WR_REG(SETAVEE_IDLE);		FSMC_WR_DAT(0x000DU);
 8001bb8:	f24b 1001 	movw	r0, #45313	; 0xb101
 8001bbc:	f7ff fd36 	bl	800162c <FSMC_WR_REG>
 8001bc0:	200d      	movs	r0, #13
 8001bc2:	f7ff fd45 	bl	8001650 <FSMC_WR_DAT>
	FSMC_WR_REG(SETAVEE_PART);		FSMC_WR_DAT(0x000DU);
 8001bc6:	f24b 1002 	movw	r0, #45314	; 0xb102
 8001bca:	f7ff fd2f 	bl	800162c <FSMC_WR_REG>
 8001bce:	200d      	movs	r0, #13
 8001bd0:	f7ff fd3e 	bl	8001650 <FSMC_WR_DAT>

	// AVEE ratio
	FSMC_WR_REG(BT2CTR_NORM);		FSMC_WR_DAT(0x0034U);
 8001bd4:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8001bd8:	f7ff fd28 	bl	800162c <FSMC_WR_REG>
 8001bdc:	2034      	movs	r0, #52	; 0x34
 8001bde:	f7ff fd37 	bl	8001650 <FSMC_WR_DAT>
	FSMC_WR_REG(BT2CTR_IDLE);		FSMC_WR_DAT(0x0034U);
 8001be2:	f24b 7001 	movw	r0, #46849	; 0xb701
 8001be6:	f7ff fd21 	bl	800162c <FSMC_WR_REG>
 8001bea:	2034      	movs	r0, #52	; 0x34
 8001bec:	f7ff fd30 	bl	8001650 <FSMC_WR_DAT>
	FSMC_WR_REG(BT2CTR_PART);		FSMC_WR_DAT(0x0034U);
 8001bf0:	f24b 7002 	movw	r0, #46850	; 0xb702
 8001bf4:	f7ff fd1a 	bl	800162c <FSMC_WR_REG>
 8001bf8:	2034      	movs	r0, #52	; 0x34
 8001bfa:	f7ff fd29 	bl	8001650 <FSMC_WR_DAT>

	// VCL  -2.5V
	FSMC_WR_REG(SETVCL_NORM);		FSMC_WR_DAT(0x0000U);
 8001bfe:	f44f 4032 	mov.w	r0, #45568	; 0xb200
 8001c02:	f7ff fd13 	bl	800162c <FSMC_WR_REG>
 8001c06:	2000      	movs	r0, #0
 8001c08:	f7ff fd22 	bl	8001650 <FSMC_WR_DAT>
	FSMC_WR_REG(SETVCL_IDLE);		FSMC_WR_DAT(0x0000U);
 8001c0c:	f24b 2001 	movw	r0, #45569	; 0xb201
 8001c10:	f7ff fd0c 	bl	800162c <FSMC_WR_REG>
 8001c14:	2000      	movs	r0, #0
 8001c16:	f7ff fd1b 	bl	8001650 <FSMC_WR_DAT>
	FSMC_WR_REG(SETVCL_PART);		FSMC_WR_DAT(0x0000U);
 8001c1a:	f24b 2002 	movw	r0, #45570	; 0xb202
 8001c1e:	f7ff fd05 	bl	800162c <FSMC_WR_REG>
 8001c22:	2000      	movs	r0, #0
 8001c24:	f7ff fd14 	bl	8001650 <FSMC_WR_DAT>

	// VCL ratio
	FSMC_WR_REG(BT3CTR_NORM);		FSMC_WR_DAT(0x0024U);
 8001c28:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 8001c2c:	f7ff fcfe 	bl	800162c <FSMC_WR_REG>
 8001c30:	2024      	movs	r0, #36	; 0x24
 8001c32:	f7ff fd0d 	bl	8001650 <FSMC_WR_DAT>
	FSMC_WR_REG(BT3CTR_IDLE);		FSMC_WR_DAT(0x0024U);
 8001c36:	f64b 0001 	movw	r0, #47105	; 0xb801
 8001c3a:	f7ff fcf7 	bl	800162c <FSMC_WR_REG>
 8001c3e:	2024      	movs	r0, #36	; 0x24
 8001c40:	f7ff fd06 	bl	8001650 <FSMC_WR_DAT>
	FSMC_WR_REG(BT3CTR_PART);		FSMC_WR_DAT(0x0024U);
 8001c44:	f64b 0002 	movw	r0, #47106	; 0xb802
 8001c48:	f7ff fcf0 	bl	800162c <FSMC_WR_REG>
 8001c4c:	2024      	movs	r0, #36	; 0x24
 8001c4e:	f7ff fcff 	bl	8001650 <FSMC_WR_DAT>

	// VGH  15V
	FSMC_WR_REG(VGHCTR);			FSMC_WR_DAT(0x01);
 8001c52:	f44f 403f 	mov.w	r0, #48896	; 0xbf00
 8001c56:	f7ff fce9 	bl	800162c <FSMC_WR_REG>
 8001c5a:	2001      	movs	r0, #1
 8001c5c:	f7ff fcf8 	bl	8001650 <FSMC_WR_DAT>
	FSMC_WR_REG(SETVGH_NORM);		FSMC_WR_DAT(0x000FU);
 8001c60:	f44f 4033 	mov.w	r0, #45824	; 0xb300
 8001c64:	f7ff fce2 	bl	800162c <FSMC_WR_REG>
 8001c68:	200f      	movs	r0, #15
 8001c6a:	f7ff fcf1 	bl	8001650 <FSMC_WR_DAT>
	FSMC_WR_REG(SETVGH_IDLE);		FSMC_WR_DAT(0x000FU);
 8001c6e:	f24b 3001 	movw	r0, #45825	; 0xb301
 8001c72:	f7ff fcdb 	bl	800162c <FSMC_WR_REG>
 8001c76:	200f      	movs	r0, #15
 8001c78:	f7ff fcea 	bl	8001650 <FSMC_WR_DAT>
	FSMC_WR_REG(SETVGH_PART);		FSMC_WR_DAT(0x000FU);
 8001c7c:	f24b 3002 	movw	r0, #45826	; 0xb302
 8001c80:	f7ff fcd4 	bl	800162c <FSMC_WR_REG>
 8001c84:	200f      	movs	r0, #15
 8001c86:	f7ff fce3 	bl	8001650 <FSMC_WR_DAT>

	// VGH  ratio
	FSMC_WR_REG(BT4CTR_NORM);		FSMC_WR_DAT(0x0034U);
 8001c8a:	f44f 4039 	mov.w	r0, #47360	; 0xb900
 8001c8e:	f7ff fccd 	bl	800162c <FSMC_WR_REG>
 8001c92:	2034      	movs	r0, #52	; 0x34
 8001c94:	f7ff fcdc 	bl	8001650 <FSMC_WR_DAT>
	FSMC_WR_REG(BT4CTR_IDLE);		FSMC_WR_DAT(0x0034U);
 8001c98:	f64b 1001 	movw	r0, #47361	; 0xb901
 8001c9c:	f7ff fcc6 	bl	800162c <FSMC_WR_REG>
 8001ca0:	2034      	movs	r0, #52	; 0x34
 8001ca2:	f7ff fcd5 	bl	8001650 <FSMC_WR_DAT>
	FSMC_WR_REG(BT4CTR_PART);		FSMC_WR_DAT(0x0034U);
 8001ca6:	f64b 1002 	movw	r0, #47362	; 0xb902
 8001caa:	f7ff fcbf 	bl	800162c <FSMC_WR_REG>
 8001cae:	2034      	movs	r0, #52	; 0x34
 8001cb0:	f7ff fcce 	bl	8001650 <FSMC_WR_DAT>

	// VGL_REG  -10V
	FSMC_WR_REG(0xB500);			FSMC_WR_DAT(0x0008U);
 8001cb4:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 8001cb8:	f7ff fcb8 	bl	800162c <FSMC_WR_REG>
 8001cbc:	2008      	movs	r0, #8
 8001cbe:	f7ff fcc7 	bl	8001650 <FSMC_WR_DAT>
	FSMC_WR_REG(0xB500);			FSMC_WR_DAT(0x0008U);
 8001cc2:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 8001cc6:	f7ff fcb1 	bl	800162c <FSMC_WR_REG>
 8001cca:	2008      	movs	r0, #8
 8001ccc:	f7ff fcc0 	bl	8001650 <FSMC_WR_DAT>
	FSMC_WR_REG(0xB501);			FSMC_WR_DAT(0x0008U);
 8001cd0:	f24b 5001 	movw	r0, #46337	; 0xb501
 8001cd4:	f7ff fcaa 	bl	800162c <FSMC_WR_REG>
 8001cd8:	2008      	movs	r0, #8
 8001cda:	f7ff fcb9 	bl	8001650 <FSMC_WR_DAT>
	FSMC_WR_REG(0xC200);			FSMC_WR_DAT(0x0003U);
 8001cde:	f44f 4042 	mov.w	r0, #49664	; 0xc200
 8001ce2:	f7ff fca3 	bl	800162c <FSMC_WR_REG>
 8001ce6:	2003      	movs	r0, #3
 8001ce8:	f7ff fcb2 	bl	8001650 <FSMC_WR_DAT>

	// VGLX  ratio
	FSMC_WR_REG(BT5CTR_NORM);		FSMC_WR_DAT(0x0024U);
 8001cec:	f44f 403a 	mov.w	r0, #47616	; 0xba00
 8001cf0:	f7ff fc9c 	bl	800162c <FSMC_WR_REG>
 8001cf4:	2024      	movs	r0, #36	; 0x24
 8001cf6:	f7ff fcab 	bl	8001650 <FSMC_WR_DAT>
	FSMC_WR_REG(BT5CTR_IDLE);		FSMC_WR_DAT(0x0024U);
 8001cfa:	f64b 2001 	movw	r0, #47617	; 0xba01
 8001cfe:	f7ff fc95 	bl	800162c <FSMC_WR_REG>
 8001d02:	2024      	movs	r0, #36	; 0x24
 8001d04:	f7ff fca4 	bl	8001650 <FSMC_WR_DAT>
	FSMC_WR_REG(BT5CTR_PART);		FSMC_WR_DAT(0x0024U);
 8001d08:	f64b 2002 	movw	r0, #47618	; 0xba02
 8001d0c:	f7ff fc8e 	bl	800162c <FSMC_WR_REG>
 8001d10:	2024      	movs	r0, #36	; 0x24
 8001d12:	f7ff fc9d 	bl	8001650 <FSMC_WR_DAT>

	// VGMP/VGSP 4.5V/0V
	FSMC_WR_REG(SETVGP_0);			FSMC_WR_DAT(0x0000U);
 8001d16:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8001d1a:	f7ff fc87 	bl	800162c <FSMC_WR_REG>
 8001d1e:	2000      	movs	r0, #0
 8001d20:	f7ff fc96 	bl	8001650 <FSMC_WR_DAT>
	FSMC_WR_REG(SETVGP_1);			FSMC_WR_DAT(0x0078U);
 8001d24:	f64b 4001 	movw	r0, #48129	; 0xbc01
 8001d28:	f7ff fc80 	bl	800162c <FSMC_WR_REG>
 8001d2c:	2078      	movs	r0, #120	; 0x78
 8001d2e:	f7ff fc8f 	bl	8001650 <FSMC_WR_DAT>
	FSMC_WR_REG(SETVGP_2);			FSMC_WR_DAT(0x0000U);
 8001d32:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8001d36:	f7ff fc79 	bl	800162c <FSMC_WR_REG>
 8001d3a:	2000      	movs	r0, #0
 8001d3c:	f7ff fc88 	bl	8001650 <FSMC_WR_DAT>

	// VGMN/VGSN -4.5V/0V
	FSMC_WR_REG(SETVGN_0);			FSMC_WR_DAT(0x0000U);
 8001d40:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
 8001d44:	f7ff fc72 	bl	800162c <FSMC_WR_REG>
 8001d48:	2000      	movs	r0, #0
 8001d4a:	f7ff fc81 	bl	8001650 <FSMC_WR_DAT>
	FSMC_WR_REG(SETVGN_1);			FSMC_WR_DAT(0x0078U);
 8001d4e:	f64b 5001 	movw	r0, #48385	; 0xbd01
 8001d52:	f7ff fc6b 	bl	800162c <FSMC_WR_REG>
 8001d56:	2078      	movs	r0, #120	; 0x78
 8001d58:	f7ff fc7a 	bl	8001650 <FSMC_WR_DAT>
	FSMC_WR_REG(SETVGN_2);			FSMC_WR_DAT(0x0000U);
 8001d5c:	f64b 5002 	movw	r0, #48386	; 0xbd02
 8001d60:	f7ff fc64 	bl	800162c <FSMC_WR_REG>
 8001d64:	2000      	movs	r0, #0
 8001d66:	f7ff fc73 	bl	8001650 <FSMC_WR_DAT>

	// VCOM  -1.325V
	FSMC_WR_REG(SETVCMOFF_0);		FSMC_WR_DAT(0x0000);
 8001d6a:	f44f 403e 	mov.w	r0, #48640	; 0xbe00
 8001d6e:	f7ff fc5d 	bl	800162c <FSMC_WR_REG>
 8001d72:	2000      	movs	r0, #0
 8001d74:	f7ff fc6c 	bl	8001650 <FSMC_WR_DAT>
	FSMC_WR_REG(SETVCMOFF_1);		FSMC_WR_DAT(0x0089);
 8001d78:	f64b 6001 	movw	r0, #48641	; 0xbe01
 8001d7c:	f7ff fc56 	bl	800162c <FSMC_WR_REG>
 8001d80:	2089      	movs	r0, #137	; 0x89
 8001d82:	f7ff fc65 	bl	8001650 <FSMC_WR_DAT>
	FSMC_WR_REG(GMBCTR2_BASE | 0x0033U);    FSMC_WR_DAT(0x007FU);
*/
	//**************************************************************************************************************************//

	// Select Page 0
	FSMC_WR_REG(MAUCCTR_0);			FSMC_WR_DAT(0x0055U);
 8001d86:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8001d8a:	f7ff fc4f 	bl	800162c <FSMC_WR_REG>
 8001d8e:	2055      	movs	r0, #85	; 0x55
 8001d90:	f7ff fc5e 	bl	8001650 <FSMC_WR_DAT>
	FSMC_WR_REG(MAUCCTR_1);			FSMC_WR_DAT(0x00AAU);
 8001d94:	f24f 0001 	movw	r0, #61441	; 0xf001
 8001d98:	f7ff fc48 	bl	800162c <FSMC_WR_REG>
 8001d9c:	20aa      	movs	r0, #170	; 0xaa
 8001d9e:	f7ff fc57 	bl	8001650 <FSMC_WR_DAT>
	FSMC_WR_REG(MAUCCTR_2);			FSMC_WR_DAT(0x0052U);
 8001da2:	f24f 0002 	movw	r0, #61442	; 0xf002
 8001da6:	f7ff fc41 	bl	800162c <FSMC_WR_REG>
 8001daa:	2052      	movs	r0, #82	; 0x52
 8001dac:	f7ff fc50 	bl	8001650 <FSMC_WR_DAT>
	FSMC_WR_REG(MAUCCTR_3);			FSMC_WR_DAT(0x0008U);		// Enable Manufacture Command Set
 8001db0:	f24f 0003 	movw	r0, #61443	; 0xf003
 8001db4:	f7ff fc3a 	bl	800162c <FSMC_WR_REG>
 8001db8:	2008      	movs	r0, #8
 8001dba:	f7ff fc49 	bl	8001650 <FSMC_WR_DAT>
	FSMC_WR_REG(MAUCCTR_4);			FSMC_WR_DAT(0x0000U);		// Select page 0
 8001dbe:	f24f 0004 	movw	r0, #61444	; 0xf004
 8001dc2:	f7ff fc33 	bl	800162c <FSMC_WR_REG>
 8001dc6:	2000      	movs	r0, #0
 8001dc8:	f7ff fc42 	bl	8001650 <FSMC_WR_DAT>

	// DISPLAY CONTROL
	FSMC_WR_REG(DOPCTR_0);			FSMC_WR_DAT(0x00CCU);
 8001dcc:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 8001dd0:	f7ff fc2c 	bl	800162c <FSMC_WR_REG>
 8001dd4:	20cc      	movs	r0, #204	; 0xcc
 8001dd6:	f7ff fc3b 	bl	8001650 <FSMC_WR_DAT>
	FSMC_WR_REG(DOPCTR_1);			FSMC_WR_DAT(0x0000U);
 8001dda:	f24b 1001 	movw	r0, #45313	; 0xb101
 8001dde:	f7ff fc25 	bl	800162c <FSMC_WR_REG>
 8001de2:	2000      	movs	r0, #0
 8001de4:	f7ff fc34 	bl	8001650 <FSMC_WR_DAT>

	FSMC_WR_REG(DPRSLCTR);			FSMC_WR_DAT(0x0050U);			// Display Resolution 480RGB x 800
 8001de8:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 8001dec:	f7ff fc1e 	bl	800162c <FSMC_WR_REG>
 8001df0:	2050      	movs	r0, #80	; 0x50
 8001df2:	f7ff fc2d 	bl	8001650 <FSMC_WR_DAT>

	// SOURCE HOLD TIME
	FSMC_WR_REG(SDHDTCTR);			FSMC_WR_DAT(0x0005U);
 8001df6:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 8001dfa:	f7ff fc17 	bl	800162c <FSMC_WR_REG>
 8001dfe:	2005      	movs	r0, #5
 8001e00:	f7ff fc26 	bl	8001650 <FSMC_WR_DAT>

	// Set Gate EQ
	FSMC_WR_REG(GSEQCTR_ST);		FSMC_WR_DAT(0x0070U);
 8001e04:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8001e08:	f7ff fc10 	bl	800162c <FSMC_WR_REG>
 8001e0c:	2070      	movs	r0, #112	; 0x70
 8001e0e:	f7ff fc1f 	bl	8001650 <FSMC_WR_DAT>
	FSMC_WR_REG(GSEQCTR_CK);		FSMC_WR_DAT(0x0070U);
 8001e12:	f24b 7001 	movw	r0, #46849	; 0xb701
 8001e16:	f7ff fc09 	bl	800162c <FSMC_WR_REG>
 8001e1a:	2070      	movs	r0, #112	; 0x70
 8001e1c:	f7ff fc18 	bl	8001650 <FSMC_WR_DAT>

	// Source EQ control (Mode 2)
	FSMC_WR_REG(SDEQCTR_MOD );	FSMC_WR_DAT(0x0001U);
 8001e20:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 8001e24:	f7ff fc02 	bl	800162c <FSMC_WR_REG>
 8001e28:	2001      	movs	r0, #1
 8001e2a:	f7ff fc11 	bl	8001650 <FSMC_WR_DAT>
	FSMC_WR_REG(SDEQCTR_EQS1);	FSMC_WR_DAT(0x0003U);
 8001e2e:	f64b 0001 	movw	r0, #47105	; 0xb801
 8001e32:	f7ff fbfb 	bl	800162c <FSMC_WR_REG>
 8001e36:	2003      	movs	r0, #3
 8001e38:	f7ff fc0a 	bl	8001650 <FSMC_WR_DAT>
	FSMC_WR_REG(SDEQCTR_EQS2);	FSMC_WR_DAT(0x0003U);
 8001e3c:	f64b 0002 	movw	r0, #47106	; 0xb802
 8001e40:	f7ff fbf4 	bl	800162c <FSMC_WR_REG>
 8001e44:	2003      	movs	r0, #3
 8001e46:	f7ff fc03 	bl	8001650 <FSMC_WR_DAT>
	FSMC_WR_REG(SDEQCTR_EQS3);	FSMC_WR_DAT(0x0003U);
 8001e4a:	f64b 0003 	movw	r0, #47107	; 0xb803
 8001e4e:	f7ff fbed 	bl	800162c <FSMC_WR_REG>
 8001e52:	2003      	movs	r0, #3
 8001e54:	f7ff fbfc 	bl	8001650 <FSMC_WR_DAT>

	// INVERSION MODE
	FSMC_WR_REG(INVCTR_NORM);		FSMC_WR_DAT(0x0002U);
 8001e58:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8001e5c:	f7ff fbe6 	bl	800162c <FSMC_WR_REG>
 8001e60:	2002      	movs	r0, #2
 8001e62:	f7ff fbf5 	bl	8001650 <FSMC_WR_DAT>
	FSMC_WR_REG(INVCTR_IDLE);		FSMC_WR_DAT(0x0000U);
 8001e66:	f64b 4001 	movw	r0, #48129	; 0xbc01
 8001e6a:	f7ff fbdf 	bl	800162c <FSMC_WR_REG>
 8001e6e:	2000      	movs	r0, #0
 8001e70:	f7ff fbee 	bl	8001650 <FSMC_WR_DAT>
	FSMC_WR_REG(INVCTR_PART);		FSMC_WR_DAT(0x0000U);
 8001e74:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8001e78:	f7ff fbd8 	bl	800162c <FSMC_WR_REG>
 8001e7c:	2000      	movs	r0, #0
 8001e7e:	f7ff fbe7 	bl	8001650 <FSMC_WR_DAT>

	// Timing control
	FSMC_WR_REG(0xC900);				FSMC_WR_DAT(0x00D0U);
 8001e82:	f44f 4049 	mov.w	r0, #51456	; 0xc900
 8001e86:	f7ff fbd1 	bl	800162c <FSMC_WR_REG>
 8001e8a:	20d0      	movs	r0, #208	; 0xd0
 8001e8c:	f7ff fbe0 	bl	8001650 <FSMC_WR_DAT>
	FSMC_WR_REG(0xC901);				FSMC_WR_DAT(0x0002U);
 8001e90:	f64c 1001 	movw	r0, #51457	; 0xc901
 8001e94:	f7ff fbca 	bl	800162c <FSMC_WR_REG>
 8001e98:	2002      	movs	r0, #2
 8001e9a:	f7ff fbd9 	bl	8001650 <FSMC_WR_DAT>
	FSMC_WR_REG(0xC902);				FSMC_WR_DAT(0x0050U);
 8001e9e:	f64c 1002 	movw	r0, #51458	; 0xc902
 8001ea2:	f7ff fbc3 	bl	800162c <FSMC_WR_REG>
 8001ea6:	2050      	movs	r0, #80	; 0x50
 8001ea8:	f7ff fbd2 	bl	8001650 <FSMC_WR_DAT>
	FSMC_WR_REG(0xC903);				FSMC_WR_DAT(0x0050U);
 8001eac:	f64c 1003 	movw	r0, #51459	; 0xc903
 8001eb0:	f7ff fbbc 	bl	800162c <FSMC_WR_REG>
 8001eb4:	2050      	movs	r0, #80	; 0x50
 8001eb6:	f7ff fbcb 	bl	8001650 <FSMC_WR_DAT>
	FSMC_WR_REG(0xC904);				FSMC_WR_DAT(0x0050U);
 8001eba:	f64c 1004 	movw	r0, #51460	; 0xc904
 8001ebe:	f7ff fbb5 	bl	800162c <FSMC_WR_REG>
 8001ec2:	2050      	movs	r0, #80	; 0x50
 8001ec4:	f7ff fbc4 	bl	8001650 <FSMC_WR_DAT>

	//**************************************************************************************************************************//
	// User Command Set
	FSMC_WR_REG(TEON);   				FSMC_WR_DAT(0x0000U);			// V-Blanking information only
 8001ec8:	f44f 5054 	mov.w	r0, #13568	; 0x3500
 8001ecc:	f7ff fbae 	bl	800162c <FSMC_WR_REG>
 8001ed0:	2000      	movs	r0, #0
 8001ed2:	f7ff fbbd 	bl	8001650 <FSMC_WR_DAT>


	FSMC_WR_REG(COLMOD);   			FSMC_WR_DAT(0x0055U);		// RGB and MCU Interface Data format 16-Bits
 8001ed6:	f44f 5068 	mov.w	r0, #14848	; 0x3a00
 8001eda:	f7ff fba7 	bl	800162c <FSMC_WR_REG>
 8001ede:	2055      	movs	r0, #85	; 0x55
 8001ee0:	f7ff fbb6 	bl	8001650 <FSMC_WR_DAT>
 8001ee4:	e002      	b.n	8001eec <NT35510_Init+0x404>
 8001ee6:	bf00      	nop
 8001ee8:	40020800 	.word	0x40020800
	FSMC_WR_REG(MADCTL);   			FSMC_WR_DAT(0x0000U);		// MADCTL: MY MX MV RGB MH RSMX RSMY
 8001eec:	f44f 5058 	mov.w	r0, #13824	; 0x3600
 8001ef0:	f7ff fb9c 	bl	800162c <FSMC_WR_REG>
 8001ef4:	2000      	movs	r0, #0
 8001ef6:	f7ff fbab 	bl	8001650 <FSMC_WR_DAT>


	FSMC_WR_REG(SLPOUT);   						// Sleep Out
 8001efa:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 8001efe:	f7ff fb95 	bl	800162c <FSMC_WR_REG>

	HAL_Delay(120);
 8001f02:	2078      	movs	r0, #120	; 0x78
 8001f04:	f001 f9a2 	bl	800324c <HAL_Delay>

	FSMC_WR_REG(DISPON);   						// Display On
 8001f08:	f44f 5024 	mov.w	r0, #10496	; 0x2900
 8001f0c:	f7ff fb8e 	bl	800162c <FSMC_WR_REG>

	HAL_Delay(200);
 8001f10:	20c8      	movs	r0, #200	; 0xc8
 8001f12:	f001 f99b 	bl	800324c <HAL_Delay>

	LCD_SetDirection(VERTICAL_UP);		// Vertical-up display orientation as default
 8001f16:	2000      	movs	r0, #0
 8001f18:	f7ff fc14 	bl	8001744 <LCD_SetDirection>
}
 8001f1c:	bf00      	nop
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <MX_GPIO_Init>:

/** Configure pins
     PC9   ------> RCC_MCO_2
*/
void MX_GPIO_Init(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b08c      	sub	sp, #48	; 0x30
 8001f24:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f26:	f107 031c 	add.w	r3, r7, #28
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	601a      	str	r2, [r3, #0]
 8001f2e:	605a      	str	r2, [r3, #4]
 8001f30:	609a      	str	r2, [r3, #8]
 8001f32:	60da      	str	r2, [r3, #12]
 8001f34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f36:	2300      	movs	r3, #0
 8001f38:	61bb      	str	r3, [r7, #24]
 8001f3a:	4b6a      	ldr	r3, [pc, #424]	; (80020e4 <MX_GPIO_Init+0x1c4>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3e:	4a69      	ldr	r2, [pc, #420]	; (80020e4 <MX_GPIO_Init+0x1c4>)
 8001f40:	f043 0320 	orr.w	r3, r3, #32
 8001f44:	6313      	str	r3, [r2, #48]	; 0x30
 8001f46:	4b67      	ldr	r3, [pc, #412]	; (80020e4 <MX_GPIO_Init+0x1c4>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4a:	f003 0320 	and.w	r3, r3, #32
 8001f4e:	61bb      	str	r3, [r7, #24]
 8001f50:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f52:	2300      	movs	r3, #0
 8001f54:	617b      	str	r3, [r7, #20]
 8001f56:	4b63      	ldr	r3, [pc, #396]	; (80020e4 <MX_GPIO_Init+0x1c4>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5a:	4a62      	ldr	r2, [pc, #392]	; (80020e4 <MX_GPIO_Init+0x1c4>)
 8001f5c:	f043 0302 	orr.w	r3, r3, #2
 8001f60:	6313      	str	r3, [r2, #48]	; 0x30
 8001f62:	4b60      	ldr	r3, [pc, #384]	; (80020e4 <MX_GPIO_Init+0x1c4>)
 8001f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	617b      	str	r3, [r7, #20]
 8001f6c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f6e:	2300      	movs	r3, #0
 8001f70:	613b      	str	r3, [r7, #16]
 8001f72:	4b5c      	ldr	r3, [pc, #368]	; (80020e4 <MX_GPIO_Init+0x1c4>)
 8001f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f76:	4a5b      	ldr	r2, [pc, #364]	; (80020e4 <MX_GPIO_Init+0x1c4>)
 8001f78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f7e:	4b59      	ldr	r3, [pc, #356]	; (80020e4 <MX_GPIO_Init+0x1c4>)
 8001f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f86:	613b      	str	r3, [r7, #16]
 8001f88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	60fb      	str	r3, [r7, #12]
 8001f8e:	4b55      	ldr	r3, [pc, #340]	; (80020e4 <MX_GPIO_Init+0x1c4>)
 8001f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f92:	4a54      	ldr	r2, [pc, #336]	; (80020e4 <MX_GPIO_Init+0x1c4>)
 8001f94:	f043 0310 	orr.w	r3, r3, #16
 8001f98:	6313      	str	r3, [r2, #48]	; 0x30
 8001f9a:	4b52      	ldr	r3, [pc, #328]	; (80020e4 <MX_GPIO_Init+0x1c4>)
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9e:	f003 0310 	and.w	r3, r3, #16
 8001fa2:	60fb      	str	r3, [r7, #12]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	60bb      	str	r3, [r7, #8]
 8001faa:	4b4e      	ldr	r3, [pc, #312]	; (80020e4 <MX_GPIO_Init+0x1c4>)
 8001fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fae:	4a4d      	ldr	r2, [pc, #308]	; (80020e4 <MX_GPIO_Init+0x1c4>)
 8001fb0:	f043 0308 	orr.w	r3, r3, #8
 8001fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fb6:	4b4b      	ldr	r3, [pc, #300]	; (80020e4 <MX_GPIO_Init+0x1c4>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fba:	f003 0308 	and.w	r3, r3, #8
 8001fbe:	60bb      	str	r3, [r7, #8]
 8001fc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	607b      	str	r3, [r7, #4]
 8001fc6:	4b47      	ldr	r3, [pc, #284]	; (80020e4 <MX_GPIO_Init+0x1c4>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fca:	4a46      	ldr	r2, [pc, #280]	; (80020e4 <MX_GPIO_Init+0x1c4>)
 8001fcc:	f043 0304 	orr.w	r3, r3, #4
 8001fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fd2:	4b44      	ldr	r3, [pc, #272]	; (80020e4 <MX_GPIO_Init+0x1c4>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd6:	f003 0304 	and.w	r3, r3, #4
 8001fda:	607b      	str	r3, [r7, #4]
 8001fdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fde:	2300      	movs	r3, #0
 8001fe0:	603b      	str	r3, [r7, #0]
 8001fe2:	4b40      	ldr	r3, [pc, #256]	; (80020e4 <MX_GPIO_Init+0x1c4>)
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe6:	4a3f      	ldr	r2, [pc, #252]	; (80020e4 <MX_GPIO_Init+0x1c4>)
 8001fe8:	f043 0301 	orr.w	r3, r3, #1
 8001fec:	6313      	str	r3, [r2, #48]	; 0x30
 8001fee:	4b3d      	ldr	r3, [pc, #244]	; (80020e4 <MX_GPIO_Init+0x1c4>)
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	603b      	str	r3, [r7, #0]
 8001ff8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OV7670_RST_GPIO_Port, OV7670_RST_Pin, GPIO_PIN_RESET);
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	2104      	movs	r1, #4
 8001ffe:	483a      	ldr	r0, [pc, #232]	; (80020e8 <MX_GPIO_Init+0x1c8>)
 8002000:	f001 fe8a 	bl	8003d18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8002004:	2200      	movs	r2, #0
 8002006:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800200a:	4838      	ldr	r0, [pc, #224]	; (80020ec <MX_GPIO_Init+0x1cc>)
 800200c:	f001 fe84 	bl	8003d18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RST_GPIO_Port, FSMC_RST_Pin, GPIO_PIN_RESET);
 8002010:	2200      	movs	r2, #0
 8002012:	2140      	movs	r1, #64	; 0x40
 8002014:	4836      	ldr	r0, [pc, #216]	; (80020f0 <MX_GPIO_Init+0x1d0>)
 8002016:	f001 fe7f 	bl	8003d18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OV7670_RST_Pin;
 800201a:	2304      	movs	r3, #4
 800201c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800201e:	2301      	movs	r3, #1
 8002020:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002022:	2300      	movs	r3, #0
 8002024:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002026:	2300      	movs	r3, #0
 8002028:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OV7670_RST_GPIO_Port, &GPIO_InitStruct);
 800202a:	f107 031c 	add.w	r3, r7, #28
 800202e:	4619      	mov	r1, r3
 8002030:	482d      	ldr	r0, [pc, #180]	; (80020e8 <MX_GPIO_Init+0x1c8>)
 8002032:	f001 fcdd 	bl	80039f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = OV7670_D0_Pin|OV7670_D1_Pin|OV7670_D2_Pin|OV7670_D3_Pin
 8002036:	23ff      	movs	r3, #255	; 0xff
 8002038:	61fb      	str	r3, [r7, #28]
                          |OV7670_D4_Pin|OV7670_D5_Pin|OV7670_D6_Pin|OV7670_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800203a:	2300      	movs	r3, #0
 800203c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203e:	2300      	movs	r3, #0
 8002040:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002042:	f107 031c 	add.w	r3, r7, #28
 8002046:	4619      	mov	r1, r3
 8002048:	4828      	ldr	r0, [pc, #160]	; (80020ec <MX_GPIO_Init+0x1cc>)
 800204a:	f001 fcd1 	bl	80039f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OV7670_HREF_Pin;
 800204e:	2301      	movs	r3, #1
 8002050:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002052:	4b28      	ldr	r3, [pc, #160]	; (80020f4 <MX_GPIO_Init+0x1d4>)
 8002054:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002056:	2300      	movs	r3, #0
 8002058:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OV7670_HREF_GPIO_Port, &GPIO_InitStruct);
 800205a:	f107 031c 	add.w	r3, r7, #28
 800205e:	4619      	mov	r1, r3
 8002060:	4825      	ldr	r0, [pc, #148]	; (80020f8 <MX_GPIO_Init+0x1d8>)
 8002062:	f001 fcc5 	bl	80039f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OV7670_VSYNC_Pin;
 8002066:	2302      	movs	r3, #2
 8002068:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800206a:	4b24      	ldr	r3, [pc, #144]	; (80020fc <MX_GPIO_Init+0x1dc>)
 800206c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206e:	2300      	movs	r3, #0
 8002070:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OV7670_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8002072:	f107 031c 	add.w	r3, r7, #28
 8002076:	4619      	mov	r1, r3
 8002078:	481f      	ldr	r0, [pc, #124]	; (80020f8 <MX_GPIO_Init+0x1d8>)
 800207a:	f001 fcb9 	bl	80039f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800207e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002082:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002084:	2301      	movs	r3, #1
 8002086:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002088:	2300      	movs	r3, #0
 800208a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800208c:	2303      	movs	r3, #3
 800208e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002090:	f107 031c 	add.w	r3, r7, #28
 8002094:	4619      	mov	r1, r3
 8002096:	4815      	ldr	r0, [pc, #84]	; (80020ec <MX_GPIO_Init+0x1cc>)
 8002098:	f001 fcaa 	bl	80039f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RST_Pin;
 800209c:	2340      	movs	r3, #64	; 0x40
 800209e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020a0:	2301      	movs	r3, #1
 80020a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a4:	2300      	movs	r3, #0
 80020a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a8:	2300      	movs	r3, #0
 80020aa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_RST_GPIO_Port, &GPIO_InitStruct);
 80020ac:	f107 031c 	add.w	r3, r7, #28
 80020b0:	4619      	mov	r1, r3
 80020b2:	480f      	ldr	r0, [pc, #60]	; (80020f0 <MX_GPIO_Init+0x1d0>)
 80020b4:	f001 fc9c 	bl	80039f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80020b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020be:	2302      	movs	r3, #2
 80020c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c2:	2300      	movs	r3, #0
 80020c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020c6:	2303      	movs	r3, #3
 80020c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80020ca:	2300      	movs	r3, #0
 80020cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020ce:	f107 031c 	add.w	r3, r7, #28
 80020d2:	4619      	mov	r1, r3
 80020d4:	4806      	ldr	r0, [pc, #24]	; (80020f0 <MX_GPIO_Init+0x1d0>)
 80020d6:	f001 fc8b 	bl	80039f0 <HAL_GPIO_Init>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);

  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);*/

}
 80020da:	bf00      	nop
 80020dc:	3730      	adds	r7, #48	; 0x30
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	40023800 	.word	0x40023800
 80020e8:	40021400 	.word	0x40021400
 80020ec:	40020400 	.word	0x40020400
 80020f0:	40020800 	.word	0x40020800
 80020f4:	10210000 	.word	0x10210000
 80020f8:	40021800 	.word	0x40021800
 80020fc:	10310000 	.word	0x10310000

08002100 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002104:	4b12      	ldr	r3, [pc, #72]	; (8002150 <MX_I2C2_Init+0x50>)
 8002106:	4a13      	ldr	r2, [pc, #76]	; (8002154 <MX_I2C2_Init+0x54>)
 8002108:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800210a:	4b11      	ldr	r3, [pc, #68]	; (8002150 <MX_I2C2_Init+0x50>)
 800210c:	4a12      	ldr	r2, [pc, #72]	; (8002158 <MX_I2C2_Init+0x58>)
 800210e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002110:	4b0f      	ldr	r3, [pc, #60]	; (8002150 <MX_I2C2_Init+0x50>)
 8002112:	2200      	movs	r2, #0
 8002114:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 66;
 8002116:	4b0e      	ldr	r3, [pc, #56]	; (8002150 <MX_I2C2_Init+0x50>)
 8002118:	2242      	movs	r2, #66	; 0x42
 800211a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800211c:	4b0c      	ldr	r3, [pc, #48]	; (8002150 <MX_I2C2_Init+0x50>)
 800211e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002122:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002124:	4b0a      	ldr	r3, [pc, #40]	; (8002150 <MX_I2C2_Init+0x50>)
 8002126:	2200      	movs	r2, #0
 8002128:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800212a:	4b09      	ldr	r3, [pc, #36]	; (8002150 <MX_I2C2_Init+0x50>)
 800212c:	2200      	movs	r2, #0
 800212e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002130:	4b07      	ldr	r3, [pc, #28]	; (8002150 <MX_I2C2_Init+0x50>)
 8002132:	2200      	movs	r2, #0
 8002134:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8002136:	4b06      	ldr	r3, [pc, #24]	; (8002150 <MX_I2C2_Init+0x50>)
 8002138:	2280      	movs	r2, #128	; 0x80
 800213a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800213c:	4804      	ldr	r0, [pc, #16]	; (8002150 <MX_I2C2_Init+0x50>)
 800213e:	f001 fe1d 	bl	8003d7c <HAL_I2C_Init>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d001      	beq.n	800214c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002148:	f000 f95a 	bl	8002400 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800214c:	bf00      	nop
 800214e:	bd80      	pop	{r7, pc}
 8002150:	2004a5b4 	.word	0x2004a5b4
 8002154:	40005800 	.word	0x40005800
 8002158:	00061a80 	.word	0x00061a80

0800215c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b08a      	sub	sp, #40	; 0x28
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002164:	f107 0314 	add.w	r3, r7, #20
 8002168:	2200      	movs	r2, #0
 800216a:	601a      	str	r2, [r3, #0]
 800216c:	605a      	str	r2, [r3, #4]
 800216e:	609a      	str	r2, [r3, #8]
 8002170:	60da      	str	r2, [r3, #12]
 8002172:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a1d      	ldr	r2, [pc, #116]	; (80021f0 <HAL_I2C_MspInit+0x94>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d133      	bne.n	80021e6 <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800217e:	2300      	movs	r3, #0
 8002180:	613b      	str	r3, [r7, #16]
 8002182:	4b1c      	ldr	r3, [pc, #112]	; (80021f4 <HAL_I2C_MspInit+0x98>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002186:	4a1b      	ldr	r2, [pc, #108]	; (80021f4 <HAL_I2C_MspInit+0x98>)
 8002188:	f043 0320 	orr.w	r3, r3, #32
 800218c:	6313      	str	r3, [r2, #48]	; 0x30
 800218e:	4b19      	ldr	r3, [pc, #100]	; (80021f4 <HAL_I2C_MspInit+0x98>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002192:	f003 0320 	and.w	r3, r3, #32
 8002196:	613b      	str	r3, [r7, #16]
 8002198:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800219a:	2303      	movs	r3, #3
 800219c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800219e:	2312      	movs	r3, #18
 80021a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021a2:	2301      	movs	r3, #1
 80021a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021a6:	2303      	movs	r3, #3
 80021a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80021aa:	2304      	movs	r3, #4
 80021ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80021ae:	f107 0314 	add.w	r3, r7, #20
 80021b2:	4619      	mov	r1, r3
 80021b4:	4810      	ldr	r0, [pc, #64]	; (80021f8 <HAL_I2C_MspInit+0x9c>)
 80021b6:	f001 fc1b 	bl	80039f0 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80021ba:	2300      	movs	r3, #0
 80021bc:	60fb      	str	r3, [r7, #12]
 80021be:	4b0d      	ldr	r3, [pc, #52]	; (80021f4 <HAL_I2C_MspInit+0x98>)
 80021c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c2:	4a0c      	ldr	r2, [pc, #48]	; (80021f4 <HAL_I2C_MspInit+0x98>)
 80021c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80021c8:	6413      	str	r3, [r2, #64]	; 0x40
 80021ca:	4b0a      	ldr	r3, [pc, #40]	; (80021f4 <HAL_I2C_MspInit+0x98>)
 80021cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021d2:	60fb      	str	r3, [r7, #12]
 80021d4:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80021d6:	2200      	movs	r2, #0
 80021d8:	2100      	movs	r1, #0
 80021da:	2021      	movs	r0, #33	; 0x21
 80021dc:	f001 f959 	bl	8003492 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80021e0:	2021      	movs	r0, #33	; 0x21
 80021e2:	f001 f972 	bl	80034ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80021e6:	bf00      	nop
 80021e8:	3728      	adds	r7, #40	; 0x28
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	40005800 	.word	0x40005800
 80021f4:	40023800 	.word	0x40023800
 80021f8:	40021400 	.word	0x40021400

080021fc <i2c_read_reg>:
extern I2C_HandleTypeDef hi2c2;


//=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~
uint8_t i2c_read_reg(uint8_t address, uint8_t reg)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af02      	add	r7, sp, #8
 8002202:	4603      	mov	r3, r0
 8002204:	460a      	mov	r2, r1
 8002206:	71fb      	strb	r3, [r7, #7]
 8002208:	4613      	mov	r3, r2
 800220a:	71bb      	strb	r3, [r7, #6]
	tx_data[0] = reg;
 800220c:	4a0d      	ldr	r2, [pc, #52]	; (8002244 <i2c_read_reg+0x48>)
 800220e:	79bb      	ldrb	r3, [r7, #6]
 8002210:	7013      	strb	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&hi2c2, 0x42U, tx_data, 2, 10);
 8002212:	230a      	movs	r3, #10
 8002214:	9300      	str	r3, [sp, #0]
 8002216:	2302      	movs	r3, #2
 8002218:	4a0a      	ldr	r2, [pc, #40]	; (8002244 <i2c_read_reg+0x48>)
 800221a:	2142      	movs	r1, #66	; 0x42
 800221c:	480a      	ldr	r0, [pc, #40]	; (8002248 <i2c_read_reg+0x4c>)
 800221e:	f001 fef1 	bl	8004004 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, 0x42U, rx_data, 1, 10);
 8002222:	230a      	movs	r3, #10
 8002224:	9300      	str	r3, [sp, #0]
 8002226:	2301      	movs	r3, #1
 8002228:	4a08      	ldr	r2, [pc, #32]	; (800224c <i2c_read_reg+0x50>)
 800222a:	2142      	movs	r1, #66	; 0x42
 800222c:	4806      	ldr	r0, [pc, #24]	; (8002248 <i2c_read_reg+0x4c>)
 800222e:	f001 ffe7 	bl	8004200 <HAL_I2C_Master_Receive>
	HAL_Delay(1);
 8002232:	2001      	movs	r0, #1
 8002234:	f001 f80a 	bl	800324c <HAL_Delay>
	return rx_data[0];
 8002238:	4b04      	ldr	r3, [pc, #16]	; (800224c <i2c_read_reg+0x50>)
 800223a:	781b      	ldrb	r3, [r3, #0]
}
 800223c:	4618      	mov	r0, r3
 800223e:	3708      	adds	r7, #8
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	20027f28 	.word	0x20027f28
 8002248:	2004a5b4 	.word	0x2004a5b4
 800224c:	20027f30 	.word	0x20027f30

08002250 <i2c_write_reg>:



//=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~
void i2c_write_reg(uint8_t address, uint8_t reg, uint8_t data)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af02      	add	r7, sp, #8
 8002256:	4603      	mov	r3, r0
 8002258:	71fb      	strb	r3, [r7, #7]
 800225a:	460b      	mov	r3, r1
 800225c:	71bb      	strb	r3, [r7, #6]
 800225e:	4613      	mov	r3, r2
 8002260:	717b      	strb	r3, [r7, #5]
	tx_data[0] = reg;
 8002262:	4a0a      	ldr	r2, [pc, #40]	; (800228c <i2c_write_reg+0x3c>)
 8002264:	79bb      	ldrb	r3, [r7, #6]
 8002266:	7013      	strb	r3, [r2, #0]
	tx_data[1] = data;
 8002268:	4a08      	ldr	r2, [pc, #32]	; (800228c <i2c_write_reg+0x3c>)
 800226a:	797b      	ldrb	r3, [r7, #5]
 800226c:	7053      	strb	r3, [r2, #1]
	HAL_I2C_Master_Transmit(&hi2c2, 0x42U, tx_data, 3, 10);
 800226e:	230a      	movs	r3, #10
 8002270:	9300      	str	r3, [sp, #0]
 8002272:	2303      	movs	r3, #3
 8002274:	4a05      	ldr	r2, [pc, #20]	; (800228c <i2c_write_reg+0x3c>)
 8002276:	2142      	movs	r1, #66	; 0x42
 8002278:	4805      	ldr	r0, [pc, #20]	; (8002290 <i2c_write_reg+0x40>)
 800227a:	f001 fec3 	bl	8004004 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 800227e:	2001      	movs	r0, #1
 8002280:	f000 ffe4 	bl	800324c <HAL_Delay>
}
 8002284:	bf00      	nop
 8002286:	3708      	adds	r7, #8
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	20027f28 	.word	0x20027f28
 8002290:	2004a5b4 	.word	0x2004a5b4

08002294 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002298:	f000 ff66 	bl	8003168 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800229c:	f000 f812 	bl	80022c4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022a0:	f7ff fe3e 	bl	8001f20 <MX_GPIO_Init>
  MX_DMA_Init();
 80022a4:	f7ff f8b2 	bl	800140c <MX_DMA_Init>
  MX_TIM1_Init();
 80022a8:	f000 fbaa 	bl	8002a00 <MX_TIM1_Init>
  MX_FSMC_Init();
 80022ac:	f7ff f8c8 	bl	8001440 <MX_FSMC_Init>
  MX_I2C2_Init();
 80022b0:	f7ff ff26 	bl	8002100 <MX_I2C2_Init>
  MX_USART6_UART_Init();
 80022b4:	f000 feb2 	bl	800301c <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  app_main_init();
 80022b8:	f7fe feb4 	bl	8001024 <app_main_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  app_main_loop();
 80022bc:	f7fe ff28 	bl	8001110 <app_main_loop>
 80022c0:	e7fc      	b.n	80022bc <main+0x28>
	...

080022c4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b0aa      	sub	sp, #168	; 0xa8
 80022c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022ca:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80022ce:	2234      	movs	r2, #52	; 0x34
 80022d0:	2100      	movs	r1, #0
 80022d2:	4618      	mov	r0, r3
 80022d4:	f023 fcae 	bl	8025c34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022d8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]
 80022e0:	605a      	str	r2, [r3, #4]
 80022e2:	609a      	str	r2, [r3, #8]
 80022e4:	60da      	str	r2, [r3, #12]
 80022e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022e8:	f107 0308 	add.w	r3, r7, #8
 80022ec:	2258      	movs	r2, #88	; 0x58
 80022ee:	2100      	movs	r1, #0
 80022f0:	4618      	mov	r0, r3
 80022f2:	f023 fc9f 	bl	8025c34 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80022f6:	2300      	movs	r3, #0
 80022f8:	607b      	str	r3, [r7, #4]
 80022fa:	4b3f      	ldr	r3, [pc, #252]	; (80023f8 <_Z18SystemClock_Configv+0x134>)
 80022fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fe:	4a3e      	ldr	r2, [pc, #248]	; (80023f8 <_Z18SystemClock_Configv+0x134>)
 8002300:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002304:	6413      	str	r3, [r2, #64]	; 0x40
 8002306:	4b3c      	ldr	r3, [pc, #240]	; (80023f8 <_Z18SystemClock_Configv+0x134>)
 8002308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800230e:	607b      	str	r3, [r7, #4]
 8002310:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002312:	2300      	movs	r3, #0
 8002314:	603b      	str	r3, [r7, #0]
 8002316:	4b39      	ldr	r3, [pc, #228]	; (80023fc <_Z18SystemClock_Configv+0x138>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a38      	ldr	r2, [pc, #224]	; (80023fc <_Z18SystemClock_Configv+0x138>)
 800231c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002320:	6013      	str	r3, [r2, #0]
 8002322:	4b36      	ldr	r3, [pc, #216]	; (80023fc <_Z18SystemClock_Configv+0x138>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800232a:	603b      	str	r3, [r7, #0]
 800232c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800232e:	2302      	movs	r3, #2
 8002330:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002332:	2301      	movs	r3, #1
 8002334:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002338:	2310      	movs	r3, #16
 800233a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800233e:	2302      	movs	r3, #2
 8002340:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002344:	2300      	movs	r3, #0
 8002346:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLM = 8;
 800234a:	2308      	movs	r3, #8
 800234c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLN = 100;
 8002350:	2364      	movs	r3, #100	; 0x64
 8002352:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002356:	2302      	movs	r3, #2
 8002358:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800235c:	2302      	movs	r3, #2
 800235e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002362:	2302      	movs	r3, #2
 8002364:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002368:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800236c:	4618      	mov	r0, r3
 800236e:	f004 fcfb 	bl	8006d68 <HAL_RCC_OscConfig>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	bf14      	ite	ne
 8002378:	2301      	movne	r3, #1
 800237a:	2300      	moveq	r3, #0
 800237c:	b2db      	uxtb	r3, r3
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <_Z18SystemClock_Configv+0xc2>
  {
    Error_Handler();
 8002382:	f000 f83d 	bl	8002400 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002386:	230f      	movs	r3, #15
 8002388:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800238a:	2302      	movs	r3, #2
 800238c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800238e:	2300      	movs	r3, #0
 8002390:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002392:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002396:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002398:	2300      	movs	r3, #0
 800239a:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800239c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80023a0:	2103      	movs	r1, #3
 80023a2:	4618      	mov	r0, r3
 80023a4:	f004 f81c 	bl	80063e0 <HAL_RCC_ClockConfig>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	bf14      	ite	ne
 80023ae:	2301      	movne	r3, #1
 80023b0:	2300      	moveq	r3, #0
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d001      	beq.n	80023bc <_Z18SystemClock_Configv+0xf8>
  {
    Error_Handler();
 80023b8:	f000 f822 	bl	8002400 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_TIM;
 80023bc:	2304      	movs	r3, #4
 80023be:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 80023c0:	2301      	movs	r3, #1
 80023c2:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023c6:	f107 0308 	add.w	r3, r7, #8
 80023ca:	4618      	mov	r0, r3
 80023cc:	f004 fa40 	bl	8006850 <HAL_RCCEx_PeriphCLKConfig>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	bf14      	ite	ne
 80023d6:	2301      	movne	r3, #1
 80023d8:	2300      	moveq	r3, #0
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <_Z18SystemClock_Configv+0x120>
  {
    Error_Handler();
 80023e0:	f000 f80e 	bl	8002400 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_SYSCLK, RCC_MCODIV_5);
 80023e4:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 80023e8:	2100      	movs	r1, #0
 80023ea:	2001      	movs	r0, #1
 80023ec:	f004 f8de 	bl	80065ac <HAL_RCC_MCOConfig>
}
 80023f0:	bf00      	nop
 80023f2:	37a8      	adds	r7, #168	; 0xa8
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	40023800 	.word	0x40023800
 80023fc:	40007000 	.word	0x40007000

08002400 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002404:	b672      	cpsid	i
}
 8002406:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002408:	e7fe      	b.n	8002408 <Error_Handler+0x8>

0800240a <saturation>:



//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void saturation(int8_t s)  //-2 to 2
{
 800240a:	b580      	push	{r7, lr}
 800240c:	b082      	sub	sp, #8
 800240e:	af00      	add	r7, sp, #0
 8002410:	4603      	mov	r3, r0
 8002412:	71fb      	strb	r3, [r7, #7]
	//color matrix values
	writeRegister(OV7670_MTX1,	0x80 + 0x20 * s);
 8002414:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002418:	3304      	adds	r3, #4
 800241a:	b2db      	uxtb	r3, r3
 800241c:	015b      	lsls	r3, r3, #5
 800241e:	b2db      	uxtb	r3, r3
 8002420:	4619      	mov	r1, r3
 8002422:	204f      	movs	r0, #79	; 0x4f
 8002424:	f000 f8d8 	bl	80025d8 <writeRegister>
	writeRegister(OV7670_MTX2, 	0x80 + 0x20 * s);
 8002428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242c:	3304      	adds	r3, #4
 800242e:	b2db      	uxtb	r3, r3
 8002430:	015b      	lsls	r3, r3, #5
 8002432:	b2db      	uxtb	r3, r3
 8002434:	4619      	mov	r1, r3
 8002436:	2050      	movs	r0, #80	; 0x50
 8002438:	f000 f8ce 	bl	80025d8 <writeRegister>
	writeRegister(OV7670_MTX3, 	0x00);
 800243c:	2100      	movs	r1, #0
 800243e:	2051      	movs	r0, #81	; 0x51
 8002440:	f000 f8ca 	bl	80025d8 <writeRegister>
	writeRegister(OV7670_MTX4, 	0x22 + (0x11 * s) / 2);
 8002444:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8002448:	4613      	mov	r3, r2
 800244a:	011b      	lsls	r3, r3, #4
 800244c:	4413      	add	r3, r2
 800244e:	0fda      	lsrs	r2, r3, #31
 8002450:	4413      	add	r3, r2
 8002452:	105b      	asrs	r3, r3, #1
 8002454:	b2db      	uxtb	r3, r3
 8002456:	3322      	adds	r3, #34	; 0x22
 8002458:	b2db      	uxtb	r3, r3
 800245a:	4619      	mov	r1, r3
 800245c:	2052      	movs	r0, #82	; 0x52
 800245e:	f000 f8bb 	bl	80025d8 <writeRegister>
	writeRegister(OV7670_MTX5, 	0x5e + (0x2f * s) / 2);
 8002462:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8002466:	4613      	mov	r3, r2
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	4413      	add	r3, r2
 800246c:	011b      	lsls	r3, r3, #4
 800246e:	1a9b      	subs	r3, r3, r2
 8002470:	0fda      	lsrs	r2, r3, #31
 8002472:	4413      	add	r3, r2
 8002474:	105b      	asrs	r3, r3, #1
 8002476:	b2db      	uxtb	r3, r3
 8002478:	335e      	adds	r3, #94	; 0x5e
 800247a:	b2db      	uxtb	r3, r3
 800247c:	4619      	mov	r1, r3
 800247e:	2053      	movs	r0, #83	; 0x53
 8002480:	f000 f8aa 	bl	80025d8 <writeRegister>
	writeRegister(OV7670_MTX6, 	0x80 + 0x20 * s);
 8002484:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002488:	3304      	adds	r3, #4
 800248a:	b2db      	uxtb	r3, r3
 800248c:	015b      	lsls	r3, r3, #5
 800248e:	b2db      	uxtb	r3, r3
 8002490:	4619      	mov	r1, r3
 8002492:	2054      	movs	r0, #84	; 0x54
 8002494:	f000 f8a0 	bl	80025d8 <writeRegister>
	writeRegister(OV7670_MTXS, 	0x9e);  //matrix signs
 8002498:	219e      	movs	r1, #158	; 0x9e
 800249a:	2058      	movs	r0, #88	; 0x58
 800249c:	f000 f89c 	bl	80025d8 <writeRegister>
}
 80024a0:	bf00      	nop
 80024a2:	3708      	adds	r7, #8
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <frameControl>:


//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void frameControl(int16_t hStart,  int16_t vStart)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	4603      	mov	r3, r0
 80024b0:	460a      	mov	r2, r1
 80024b2:	80fb      	strh	r3, [r7, #6]
 80024b4:	4613      	mov	r3, r2
 80024b6:	80bb      	strh	r3, [r7, #4]
	int hStop = (hStart + 640) % 784;
 80024b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024bc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80024c0:	4a2e      	ldr	r2, [pc, #184]	; (800257c <frameControl+0xd4>)
 80024c2:	fb82 1203 	smull	r1, r2, r2, r3
 80024c6:	1211      	asrs	r1, r2, #8
 80024c8:	17da      	asrs	r2, r3, #31
 80024ca:	1a8a      	subs	r2, r1, r2
 80024cc:	f44f 7144 	mov.w	r1, #784	; 0x310
 80024d0:	fb01 f202 	mul.w	r2, r1, r2
 80024d4:	1a9b      	subs	r3, r3, r2
 80024d6:	60fb      	str	r3, [r7, #12]
	writeRegister(OV7670_HSTART,	hStart >> 3);
 80024d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024dc:	10db      	asrs	r3, r3, #3
 80024de:	b21b      	sxth	r3, r3
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	4619      	mov	r1, r3
 80024e4:	2017      	movs	r0, #23
 80024e6:	f000 f877 	bl	80025d8 <writeRegister>
	writeRegister(OV7670_HSTOP,		hStop >> 3);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	10db      	asrs	r3, r3, #3
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	4619      	mov	r1, r3
 80024f2:	2018      	movs	r0, #24
 80024f4:	f000 f870 	bl	80025d8 <writeRegister>
	writeRegister(OV7670_HREF, 		((hStop & 0b111) << 3) | (hStart & 0b111));
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	00db      	lsls	r3, r3, #3
 80024fc:	b25b      	sxtb	r3, r3
 80024fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002502:	b25a      	sxtb	r2, r3
 8002504:	88fb      	ldrh	r3, [r7, #6]
 8002506:	b25b      	sxtb	r3, r3
 8002508:	f003 0307 	and.w	r3, r3, #7
 800250c:	b25b      	sxtb	r3, r3
 800250e:	4313      	orrs	r3, r2
 8002510:	b25b      	sxtb	r3, r3
 8002512:	b2db      	uxtb	r3, r3
 8002514:	4619      	mov	r1, r3
 8002516:	2032      	movs	r0, #50	; 0x32
 8002518:	f000 f85e 	bl	80025d8 <writeRegister>

	int vStop = (vStart + 480);
 800251c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002520:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8002524:	60bb      	str	r3, [r7, #8]
	writeRegister(OV7670_VSTRT, 	vStart >> 2);
 8002526:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800252a:	109b      	asrs	r3, r3, #2
 800252c:	b21b      	sxth	r3, r3
 800252e:	b2db      	uxtb	r3, r3
 8002530:	4619      	mov	r1, r3
 8002532:	2019      	movs	r0, #25
 8002534:	f000 f850 	bl	80025d8 <writeRegister>
	writeRegister(OV7670_VSTOP, 	vStop >> 2);
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	109b      	asrs	r3, r3, #2
 800253c:	b2db      	uxtb	r3, r3
 800253e:	4619      	mov	r1, r3
 8002540:	201a      	movs	r0, #26
 8002542:	f000 f849 	bl	80025d8 <writeRegister>
	writeRegister(OV7670_VREF, 		((vStop & 0b11) << 2) | (vStart & 0b11));
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	b25b      	sxtb	r3, r3
 800254c:	f003 030c 	and.w	r3, r3, #12
 8002550:	b25a      	sxtb	r2, r3
 8002552:	88bb      	ldrh	r3, [r7, #4]
 8002554:	b25b      	sxtb	r3, r3
 8002556:	f003 0303 	and.w	r3, r3, #3
 800255a:	b25b      	sxtb	r3, r3
 800255c:	4313      	orrs	r3, r2
 800255e:	b25b      	sxtb	r3, r3
 8002560:	b2db      	uxtb	r3, r3
 8002562:	4619      	mov	r1, r3
 8002564:	2003      	movs	r0, #3
 8002566:	f000 f837 	bl	80025d8 <writeRegister>
	writeRegister(OV7670_COM10, 	0x20U);
 800256a:	2120      	movs	r1, #32
 800256c:	2015      	movs	r0, #21
 800256e:	f000 f833 	bl	80025d8 <writeRegister>
}
 8002572:	bf00      	nop
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	5397829d 	.word	0x5397829d

08002580 <subsamplingControl>:


//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void subsamplingControl(int8_t com14, int8_t downSample, int8_t pclk_div)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	4603      	mov	r3, r0
 8002588:	71fb      	strb	r3, [r7, #7]
 800258a:	460b      	mov	r3, r1
 800258c:	71bb      	strb	r3, [r7, #6]
 800258e:	4613      	mov	r3, r2
 8002590:	717b      	strb	r3, [r7, #5]
	writeRegister(OV7670_COM3, 			0x04);  //DCW enable
 8002592:	2104      	movs	r1, #4
 8002594:	200c      	movs	r0, #12
 8002596:	f000 f81f 	bl	80025d8 <writeRegister>

	writeRegister(OV7670_COM14, 		com14);       //pixel clock divided by 4, manual scaling enable, DCW and PCLK controlled by register
 800259a:	79fb      	ldrb	r3, [r7, #7]
 800259c:	4619      	mov	r1, r3
 800259e:	203e      	movs	r0, #62	; 0x3e
 80025a0:	f000 f81a 	bl	80025d8 <writeRegister>
	writeRegister(OV7670_SCL_XSC, 		0x3a);
 80025a4:	213a      	movs	r1, #58	; 0x3a
 80025a6:	2070      	movs	r0, #112	; 0x70
 80025a8:	f000 f816 	bl	80025d8 <writeRegister>
	writeRegister(OV7670_SCL_YSC, 		0x35);
 80025ac:	2135      	movs	r1, #53	; 0x35
 80025ae:	2071      	movs	r0, #113	; 0x71
 80025b0:	f000 f812 	bl	80025d8 <writeRegister>

	writeRegister(OV7670_SCL_DCWCTR, 	downSample);
 80025b4:	79bb      	ldrb	r3, [r7, #6]
 80025b6:	4619      	mov	r1, r3
 80025b8:	2072      	movs	r0, #114	; 0x72
 80025ba:	f000 f80d 	bl	80025d8 <writeRegister>
	writeRegister(OV7670_SCL_PCLK_DIV, 	pclk_div); //pixel clock divided by 4
 80025be:	797b      	ldrb	r3, [r7, #5]
 80025c0:	4619      	mov	r1, r3
 80025c2:	2073      	movs	r0, #115	; 0x73
 80025c4:	f000 f808 	bl	80025d8 <writeRegister>
	writeRegister(OV7670_SCL_PCLK_DLY, 	0x02);
 80025c8:	2102      	movs	r1, #2
 80025ca:	20a2      	movs	r0, #162	; 0xa2
 80025cc:	f000 f804 	bl	80025d8 <writeRegister>
}
 80025d0:	bf00      	nop
 80025d2:	3708      	adds	r7, #8
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <writeRegister>:
}


//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void writeRegister(unsigned char reg, unsigned char val)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	4603      	mov	r3, r0
 80025e0:	460a      	mov	r2, r1
 80025e2:	71fb      	strb	r3, [r7, #7]
 80025e4:	4613      	mov	r3, r2
 80025e6:	71bb      	strb	r3, [r7, #6]
	//uint8_t buff[25] = {0};

	//sprintf(buff, "0x%02x,0x%02x,", reg, i2c_read_reg(0x43, reg));
	i2c_write_reg(0x42U, reg, val);
 80025e8:	79ba      	ldrb	r2, [r7, #6]
 80025ea:	79fb      	ldrb	r3, [r7, #7]
 80025ec:	4619      	mov	r1, r3
 80025ee:	2042      	movs	r0, #66	; 0x42
 80025f0:	f7ff fe2e 	bl	8002250 <i2c_write_reg>
	//sprintf(buff + strlen(buff), "0x%02x\r\n", i2c_read_reg(0x43, reg));
	//uart_write(buff);
}
 80025f4:	bf00      	nop
 80025f6:	3708      	adds	r7, #8
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <readRegister>:


//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
uint8_t readRegister(unsigned char reg)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	4603      	mov	r3, r0
 8002604:	71fb      	strb	r3, [r7, #7]
	return i2c_read_reg(0x42U, reg);
 8002606:	79fb      	ldrb	r3, [r7, #7]
 8002608:	4619      	mov	r1, r3
 800260a:	2042      	movs	r0, #66	; 0x42
 800260c:	f7ff fdf6 	bl	80021fc <i2c_read_reg>
 8002610:	4603      	mov	r3, r0
}
 8002612:	4618      	mov	r0, r3
 8002614:	3708      	adds	r7, #8
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <setMode>:


//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void setMode(ov7670_res_fmt_t resolution)
{   // 0,1 or 2 for QQQ, QQ, or Q VGA.  All are RGB565
 800261a:	b580      	push	{r7, lr}
 800261c:	b086      	sub	sp, #24
 800261e:	af00      	add	r7, sp, #0
 8002620:	4603      	mov	r3, r0
 8002622:	71fb      	strb	r3, [r7, #7]
	int xres;
	int yres;


	if (resolution < 0 || resolution > 2) {
 8002624:	79fb      	ldrb	r3, [r7, #7]
 8002626:	2b02      	cmp	r3, #2
 8002628:	d901      	bls.n	800262e <setMode+0x14>
		resolution = 2;
 800262a:	2302      	movs	r3, #2
 800262c:	71fb      	strb	r3, [r7, #7]
	}

	writeRegister(OV7670_COM7,	0x80U);				// all registers default
 800262e:	2180      	movs	r1, #128	; 0x80
 8002630:	2012      	movs	r0, #18
 8002632:	f7ff ffd1 	bl	80025d8 <writeRegister>
	writeRegister(OV7670_CLKRC,	0x80U);				// double clock?? My spec sheet says Reserved
 8002636:	2180      	movs	r1, #128	; 0x80
 8002638:	2011      	movs	r0, #17
 800263a:	f7ff ffcd 	bl	80025d8 <writeRegister>
	writeRegister(OV7670_COM11,	0x08U | 0x02U);		// enable auto 50/60Hz detect + exposure timing can be less...
 800263e:	210a      	movs	r1, #10
 8002640:	203b      	movs	r0, #59	; 0x3b
 8002642:	f7ff ffc9 	bl	80025d8 <writeRegister>
	writeRegister(OV7670_COM7,	0x04U);				// RGB
 8002646:	2104      	movs	r1, #4
 8002648:	2012      	movs	r0, #18
 800264a:	f7ff ffc5 	bl	80025d8 <writeRegister>
	writeRegister(OV7670_COM15,	0xC0U | 0x10U);		// RGB565
 800264e:	21d0      	movs	r1, #208	; 0xd0
 8002650:	2040      	movs	r0, #64	; 0x40
 8002652:	f7ff ffc1 	bl	80025d8 <writeRegister>

	switch (resolution) {
 8002656:	79fb      	ldrb	r3, [r7, #7]
 8002658:	2b02      	cmp	r3, #2
 800265a:	d024      	beq.n	80026a6 <setMode+0x8c>
 800265c:	2b02      	cmp	r3, #2
 800265e:	dc32      	bgt.n	80026c6 <setMode+0xac>
 8002660:	2b00      	cmp	r3, #0
 8002662:	d002      	beq.n	800266a <setMode+0x50>
 8002664:	2b01      	cmp	r3, #1
 8002666:	d00f      	beq.n	8002688 <setMode+0x6e>
 8002668:	e02d      	b.n	80026c6 <setMode+0xac>
	case 0:
		xres = 80;
 800266a:	2350      	movs	r3, #80	; 0x50
 800266c:	617b      	str	r3, [r7, #20]
		yres = 60;
 800266e:	233c      	movs	r3, #60	; 0x3c
 8002670:	613b      	str	r3, [r7, #16]
		subsamplingControl(0x1B, 0x33, 0xF3);
 8002672:	f06f 020c 	mvn.w	r2, #12
 8002676:	2133      	movs	r1, #51	; 0x33
 8002678:	201b      	movs	r0, #27
 800267a:	f7ff ff81 	bl	8002580 <subsamplingControl>
		frameControl(196, 14);
 800267e:	210e      	movs	r1, #14
 8002680:	20c4      	movs	r0, #196	; 0xc4
 8002682:	f7ff ff11 	bl	80024a8 <frameControl>
		break;
 8002686:	e01e      	b.n	80026c6 <setMode+0xac>
	case 1:
		xres = 160;
 8002688:	23a0      	movs	r3, #160	; 0xa0
 800268a:	617b      	str	r3, [r7, #20]
		yres = 120;
 800268c:	2378      	movs	r3, #120	; 0x78
 800268e:	613b      	str	r3, [r7, #16]
		subsamplingControl(0x1A, 0x22, 0xF2);
 8002690:	f06f 020d 	mvn.w	r2, #13
 8002694:	2122      	movs	r1, #34	; 0x22
 8002696:	201a      	movs	r0, #26
 8002698:	f7ff ff72 	bl	8002580 <subsamplingControl>
		frameControl(174, 14);
 800269c:	210e      	movs	r1, #14
 800269e:	20ae      	movs	r0, #174	; 0xae
 80026a0:	f7ff ff02 	bl	80024a8 <frameControl>
		break;
 80026a4:	e00f      	b.n	80026c6 <setMode+0xac>
	case 2:
		xres = 320;
 80026a6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80026aa:	617b      	str	r3, [r7, #20]
		yres = 240;
 80026ac:	23f0      	movs	r3, #240	; 0xf0
 80026ae:	613b      	str	r3, [r7, #16]
		subsamplingControl(0x19, 0x11, 0xF1);
 80026b0:	f06f 020e 	mvn.w	r2, #14
 80026b4:	2111      	movs	r1, #17
 80026b6:	2019      	movs	r0, #25
 80026b8:	f7ff ff62 	bl	8002580 <subsamplingControl>
		frameControl(154, 14);
 80026bc:	210e      	movs	r1, #14
 80026be:	209a      	movs	r0, #154	; 0x9a
 80026c0:	f7ff fef2 	bl	80024a8 <frameControl>
		break;
 80026c4:	bf00      	nop
	}

	//writeRegister(OV7670_COM10, 0x02); //VSYNC negative
	//writeRegister(OV7670_MVFP, 0x2b);  //mirror flip

	writeRegister(0xB0U, 			0x84U); // no clue what this is but it's most important for colors
 80026c6:	2184      	movs	r1, #132	; 0x84
 80026c8:	20b0      	movs	r0, #176	; 0xb0
 80026ca:	f7ff ff85 	bl	80025d8 <writeRegister>
	saturation(0);
 80026ce:	2000      	movs	r0, #0
 80026d0:	f7ff fe9b 	bl	800240a <saturation>
	writeRegister(OV7670_COM8, 		0xE7U); // AGC AWB AEC all on
 80026d4:	21e7      	movs	r1, #231	; 0xe7
 80026d6:	2013      	movs	r0, #19
 80026d8:	f7ff ff7e 	bl	80025d8 <writeRegister>
	writeRegister(OV7670_AWBCTR0, 	0x9FU); // Simple AWB
 80026dc:	219f      	movs	r1, #159	; 0x9f
 80026de:	206f      	movs	r0, #111	; 0x6f
 80026e0:	f7ff ff7a 	bl	80025d8 <writeRegister>

	// What is this comment about? I tried but don't see any difference.
	// Line 1029 of https://github.com/yandex/smart/blob/master/drivers/media/i2c/ov7670.c
	writeRegister(OV7670_CLKRC, 	0x80U);
 80026e4:	2180      	movs	r1, #128	; 0x80
 80026e6:	2011      	movs	r0, #17
 80026e8:	f7ff ff76 	bl	80025d8 <writeRegister>

	HAL_Delay(50);
 80026ec:	2032      	movs	r0, #50	; 0x32
 80026ee:	f000 fdad 	bl	800324c <HAL_Delay>

	/**/
	uint16_t exposure = 200;
 80026f2:	23c8      	movs	r3, #200	; 0xc8
 80026f4:	81fb      	strh	r3, [r7, #14]
	uint8_t com1 = exposure & 0x03U;			// AEC[1:0]
 80026f6:	89fb      	ldrh	r3, [r7, #14]
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	f003 0303 	and.w	r3, r3, #3
 80026fe:	737b      	strb	r3, [r7, #13]
	uint8_t aech = (exposure >> 2) & 0xFFU;		// AEC[9:2]
 8002700:	89fb      	ldrh	r3, [r7, #14]
 8002702:	089b      	lsrs	r3, r3, #2
 8002704:	b29b      	uxth	r3, r3
 8002706:	733b      	strb	r3, [r7, #12]
	uint8_t aechh = (exposure >> 10) & 0xFFU;	// AEC[15:10]
 8002708:	89fb      	ldrh	r3, [r7, #14]
 800270a:	0a9b      	lsrs	r3, r3, #10
 800270c:	b29b      	uxth	r3, r3
 800270e:	72fb      	strb	r3, [r7, #11]

	writeRegister(OV7670_COM1, 		(readRegister(OV7670_COM1) & ~0x03U) | com1);
 8002710:	2004      	movs	r0, #4
 8002712:	f7ff ff73 	bl	80025fc <readRegister>
 8002716:	4603      	mov	r3, r0
 8002718:	f023 0303 	bic.w	r3, r3, #3
 800271c:	b2da      	uxtb	r2, r3
 800271e:	7b7b      	ldrb	r3, [r7, #13]
 8002720:	4313      	orrs	r3, r2
 8002722:	b2db      	uxtb	r3, r3
 8002724:	4619      	mov	r1, r3
 8002726:	2004      	movs	r0, #4
 8002728:	f7ff ff56 	bl	80025d8 <writeRegister>
	writeRegister(OV7670_AECH, 		aech);
 800272c:	7b3b      	ldrb	r3, [r7, #12]
 800272e:	4619      	mov	r1, r3
 8002730:	2010      	movs	r0, #16
 8002732:	f7ff ff51 	bl	80025d8 <writeRegister>
	writeRegister(OV7670_AECHH, 	aechh);
 8002736:	7afb      	ldrb	r3, [r7, #11]
 8002738:	4619      	mov	r1, r3
 800273a:	2007      	movs	r0, #7
 800273c:	f7ff ff4c 	bl	80025d8 <writeRegister>
}
 8002740:	bf00      	nop
 8002742:	3718      	adds	r7, #24
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800274e:	2300      	movs	r3, #0
 8002750:	607b      	str	r3, [r7, #4]
 8002752:	4b10      	ldr	r3, [pc, #64]	; (8002794 <HAL_MspInit+0x4c>)
 8002754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002756:	4a0f      	ldr	r2, [pc, #60]	; (8002794 <HAL_MspInit+0x4c>)
 8002758:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800275c:	6453      	str	r3, [r2, #68]	; 0x44
 800275e:	4b0d      	ldr	r3, [pc, #52]	; (8002794 <HAL_MspInit+0x4c>)
 8002760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002762:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002766:	607b      	str	r3, [r7, #4]
 8002768:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800276a:	2300      	movs	r3, #0
 800276c:	603b      	str	r3, [r7, #0]
 800276e:	4b09      	ldr	r3, [pc, #36]	; (8002794 <HAL_MspInit+0x4c>)
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	4a08      	ldr	r2, [pc, #32]	; (8002794 <HAL_MspInit+0x4c>)
 8002774:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002778:	6413      	str	r3, [r2, #64]	; 0x40
 800277a:	4b06      	ldr	r3, [pc, #24]	; (8002794 <HAL_MspInit+0x4c>)
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002782:	603b      	str	r3, [r7, #0]
 8002784:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002786:	bf00      	nop
 8002788:	370c      	adds	r7, #12
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	40023800 	.word	0x40023800

08002798 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800279c:	e7fe      	b.n	800279c <NMI_Handler+0x4>

0800279e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800279e:	b480      	push	{r7}
 80027a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027a2:	e7fe      	b.n	80027a2 <HardFault_Handler+0x4>

080027a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027a8:	e7fe      	b.n	80027a8 <MemManage_Handler+0x4>

080027aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027aa:	b480      	push	{r7}
 80027ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027ae:	e7fe      	b.n	80027ae <BusFault_Handler+0x4>

080027b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027b4:	e7fe      	b.n	80027b4 <UsageFault_Handler+0x4>

080027b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027b6:	b480      	push	{r7}
 80027b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027ba:	bf00      	nop
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027c8:	bf00      	nop
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr

080027d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027d2:	b480      	push	{r7}
 80027d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027d6:	bf00      	nop
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027e4:	f000 fd12 	bl	800320c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027e8:	bf00      	nop
 80027ea:	bd80      	pop	{r7, pc}

080027ec <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80027f0:	2001      	movs	r0, #1
 80027f2:	f001 faab 	bl	8003d4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80027f6:	bf00      	nop
 80027f8:	bd80      	pop	{r7, pc}

080027fa <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80027fa:	b580      	push	{r7, lr}
 80027fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80027fe:	2002      	movs	r0, #2
 8002800:	f001 faa4 	bl	8003d4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002804:	bf00      	nop
 8002806:	bd80      	pop	{r7, pc}

08002808 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800280c:	4802      	ldr	r0, [pc, #8]	; (8002818 <I2C2_EV_IRQHandler+0x10>)
 800280e:	f001 ff1d 	bl	800464c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8002812:	bf00      	nop
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	2004a5b4 	.word	0x2004a5b4

0800281c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	if((USART6->SR & USART_SR_RXNE) && (USART6->CR1 & USART_CR1_RXNEIE))
 8002820:	4b09      	ldr	r3, [pc, #36]	; (8002848 <USART6_IRQHandler+0x2c>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0320 	and.w	r3, r3, #32
 8002828:	2b00      	cmp	r3, #0
 800282a:	d007      	beq.n	800283c <USART6_IRQHandler+0x20>
 800282c:	4b06      	ldr	r3, [pc, #24]	; (8002848 <USART6_IRQHandler+0x2c>)
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	f003 0320 	and.w	r3, r3, #32
 8002834:	2b00      	cmp	r3, #0
 8002836:	d001      	beq.n	800283c <USART6_IRQHandler+0x20>
		uart_rx_callback();
 8002838:	f000 fb10 	bl	8002e5c <uart_rx_callback>
  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800283c:	4803      	ldr	r0, [pc, #12]	; (800284c <USART6_IRQHandler+0x30>)
 800283e:	f005 f911 	bl	8007a64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002842:	bf00      	nop
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	40011400 	.word	0x40011400
 800284c:	2004aae4 	.word	0x2004aae4

08002850 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
	return 1;
 8002854:	2301      	movs	r3, #1
}
 8002856:	4618      	mov	r0, r3
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <_kill>:

int _kill(int pid, int sig)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800286a:	f023 f917 	bl	8025a9c <__errno>
 800286e:	4603      	mov	r3, r0
 8002870:	2216      	movs	r2, #22
 8002872:	601a      	str	r2, [r3, #0]
	return -1;
 8002874:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002878:	4618      	mov	r0, r3
 800287a:	3708      	adds	r7, #8
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}

08002880 <_exit>:

void _exit (int status)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002888:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f7ff ffe7 	bl	8002860 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002892:	e7fe      	b.n	8002892 <_exit+0x12>

08002894 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b086      	sub	sp, #24
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028a0:	2300      	movs	r3, #0
 80028a2:	617b      	str	r3, [r7, #20]
 80028a4:	e00a      	b.n	80028bc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80028a6:	f3af 8000 	nop.w
 80028aa:	4601      	mov	r1, r0
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	1c5a      	adds	r2, r3, #1
 80028b0:	60ba      	str	r2, [r7, #8]
 80028b2:	b2ca      	uxtb	r2, r1
 80028b4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	3301      	adds	r3, #1
 80028ba:	617b      	str	r3, [r7, #20]
 80028bc:	697a      	ldr	r2, [r7, #20]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	dbf0      	blt.n	80028a6 <_read+0x12>
	}

return len;
 80028c4:	687b      	ldr	r3, [r7, #4]
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3718      	adds	r7, #24
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}

080028ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80028ce:	b580      	push	{r7, lr}
 80028d0:	b086      	sub	sp, #24
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	60f8      	str	r0, [r7, #12]
 80028d6:	60b9      	str	r1, [r7, #8]
 80028d8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028da:	2300      	movs	r3, #0
 80028dc:	617b      	str	r3, [r7, #20]
 80028de:	e009      	b.n	80028f4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	1c5a      	adds	r2, r3, #1
 80028e4:	60ba      	str	r2, [r7, #8]
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	4618      	mov	r0, r3
 80028ea:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	3301      	adds	r3, #1
 80028f2:	617b      	str	r3, [r7, #20]
 80028f4:	697a      	ldr	r2, [r7, #20]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	dbf1      	blt.n	80028e0 <_write+0x12>
	}
	return len;
 80028fc:	687b      	ldr	r3, [r7, #4]
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3718      	adds	r7, #24
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}

08002906 <_close>:

int _close(int file)
{
 8002906:	b480      	push	{r7}
 8002908:	b083      	sub	sp, #12
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
	return -1;
 800290e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002912:	4618      	mov	r0, r3
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr

0800291e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800291e:	b480      	push	{r7}
 8002920:	b083      	sub	sp, #12
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
 8002926:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800292e:	605a      	str	r2, [r3, #4]
	return 0;
 8002930:	2300      	movs	r3, #0
}
 8002932:	4618      	mov	r0, r3
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr

0800293e <_isatty>:

int _isatty(int file)
{
 800293e:	b480      	push	{r7}
 8002940:	b083      	sub	sp, #12
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
	return 1;
 8002946:	2301      	movs	r3, #1
}
 8002948:	4618      	mov	r0, r3
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002954:	b480      	push	{r7}
 8002956:	b085      	sub	sp, #20
 8002958:	af00      	add	r7, sp, #0
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	60b9      	str	r1, [r7, #8]
 800295e:	607a      	str	r2, [r7, #4]
	return 0;
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	3714      	adds	r7, #20
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
	...

08002970 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b086      	sub	sp, #24
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002978:	4a14      	ldr	r2, [pc, #80]	; (80029cc <_sbrk+0x5c>)
 800297a:	4b15      	ldr	r3, [pc, #84]	; (80029d0 <_sbrk+0x60>)
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002984:	4b13      	ldr	r3, [pc, #76]	; (80029d4 <_sbrk+0x64>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d102      	bne.n	8002992 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800298c:	4b11      	ldr	r3, [pc, #68]	; (80029d4 <_sbrk+0x64>)
 800298e:	4a12      	ldr	r2, [pc, #72]	; (80029d8 <_sbrk+0x68>)
 8002990:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002992:	4b10      	ldr	r3, [pc, #64]	; (80029d4 <_sbrk+0x64>)
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4413      	add	r3, r2
 800299a:	693a      	ldr	r2, [r7, #16]
 800299c:	429a      	cmp	r2, r3
 800299e:	d207      	bcs.n	80029b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029a0:	f023 f87c 	bl	8025a9c <__errno>
 80029a4:	4603      	mov	r3, r0
 80029a6:	220c      	movs	r2, #12
 80029a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029ae:	e009      	b.n	80029c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029b0:	4b08      	ldr	r3, [pc, #32]	; (80029d4 <_sbrk+0x64>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029b6:	4b07      	ldr	r3, [pc, #28]	; (80029d4 <_sbrk+0x64>)
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4413      	add	r3, r2
 80029be:	4a05      	ldr	r2, [pc, #20]	; (80029d4 <_sbrk+0x64>)
 80029c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029c2:	68fb      	ldr	r3, [r7, #12]
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3718      	adds	r7, #24
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	20050000 	.word	0x20050000
 80029d0:	00000400 	.word	0x00000400
 80029d4:	20027f38 	.word	0x20027f38
 80029d8:	2004ab40 	.word	0x2004ab40

080029dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029e0:	4b06      	ldr	r3, [pc, #24]	; (80029fc <SystemInit+0x20>)
 80029e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029e6:	4a05      	ldr	r2, [pc, #20]	; (80029fc <SystemInit+0x20>)
 80029e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029f0:	bf00      	nop
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr
 80029fa:	bf00      	nop
 80029fc:	e000ed00 	.word	0xe000ed00

08002a00 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
DMA_HandleTypeDef hdma_tim1_trig;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b088      	sub	sp, #32
 8002a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002a06:	f107 030c 	add.w	r3, r7, #12
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	601a      	str	r2, [r3, #0]
 8002a0e:	605a      	str	r2, [r3, #4]
 8002a10:	609a      	str	r2, [r3, #8]
 8002a12:	60da      	str	r2, [r3, #12]
 8002a14:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a16:	1d3b      	adds	r3, r7, #4
 8002a18:	2200      	movs	r2, #0
 8002a1a:	601a      	str	r2, [r3, #0]
 8002a1c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002a1e:	4b21      	ldr	r3, [pc, #132]	; (8002aa4 <MX_TIM1_Init+0xa4>)
 8002a20:	4a21      	ldr	r2, [pc, #132]	; (8002aa8 <MX_TIM1_Init+0xa8>)
 8002a22:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002a24:	4b1f      	ldr	r3, [pc, #124]	; (8002aa4 <MX_TIM1_Init+0xa4>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a2a:	4b1e      	ldr	r3, [pc, #120]	; (8002aa4 <MX_TIM1_Init+0xa4>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002a30:	4b1c      	ldr	r3, [pc, #112]	; (8002aa4 <MX_TIM1_Init+0xa4>)
 8002a32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a36:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a38:	4b1a      	ldr	r3, [pc, #104]	; (8002aa4 <MX_TIM1_Init+0xa4>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002a3e:	4b19      	ldr	r3, [pc, #100]	; (8002aa4 <MX_TIM1_Init+0xa4>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a44:	4b17      	ldr	r3, [pc, #92]	; (8002aa4 <MX_TIM1_Init+0xa4>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002a4a:	4816      	ldr	r0, [pc, #88]	; (8002aa4 <MX_TIM1_Init+0xa4>)
 8002a4c:	f004 fc54 	bl	80072f8 <HAL_TIM_Base_Init>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d001      	beq.n	8002a5a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8002a56:	f7ff fcd3 	bl	8002400 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8002a5a:	2307      	movs	r3, #7
 8002a5c:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8002a5e:	2360      	movs	r3, #96	; 0x60
 8002a60:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8002a62:	2300      	movs	r3, #0
 8002a64:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 0;
 8002a66:	2300      	movs	r3, #0
 8002a68:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8002a6a:	f107 030c 	add.w	r3, r7, #12
 8002a6e:	4619      	mov	r1, r3
 8002a70:	480c      	ldr	r0, [pc, #48]	; (8002aa4 <MX_TIM1_Init+0xa4>)
 8002a72:	f004 fcf9 	bl	8007468 <HAL_TIM_SlaveConfigSynchro>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d001      	beq.n	8002a80 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 8002a7c:	f7ff fcc0 	bl	8002400 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a80:	2300      	movs	r3, #0
 8002a82:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a84:	2300      	movs	r3, #0
 8002a86:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002a88:	1d3b      	adds	r3, r7, #4
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	4805      	ldr	r0, [pc, #20]	; (8002aa4 <MX_TIM1_Init+0xa4>)
 8002a8e:	f004 fedb 	bl	8007848 <HAL_TIMEx_MasterConfigSynchronization>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d001      	beq.n	8002a9c <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8002a98:	f7ff fcb2 	bl	8002400 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002a9c:	bf00      	nop
 8002a9e:	3720      	adds	r7, #32
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	2004a668 	.word	0x2004a668
 8002aa8:	40010000 	.word	0x40010000

08002aac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b08a      	sub	sp, #40	; 0x28
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ab4:	f107 0314 	add.w	r3, r7, #20
 8002ab8:	2200      	movs	r2, #0
 8002aba:	601a      	str	r2, [r3, #0]
 8002abc:	605a      	str	r2, [r3, #4]
 8002abe:	609a      	str	r2, [r3, #8]
 8002ac0:	60da      	str	r2, [r3, #12]
 8002ac2:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a31      	ldr	r2, [pc, #196]	; (8002b90 <HAL_TIM_Base_MspInit+0xe4>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d15b      	bne.n	8002b86 <HAL_TIM_Base_MspInit+0xda>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002ace:	2300      	movs	r3, #0
 8002ad0:	613b      	str	r3, [r7, #16]
 8002ad2:	4b30      	ldr	r3, [pc, #192]	; (8002b94 <HAL_TIM_Base_MspInit+0xe8>)
 8002ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad6:	4a2f      	ldr	r2, [pc, #188]	; (8002b94 <HAL_TIM_Base_MspInit+0xe8>)
 8002ad8:	f043 0301 	orr.w	r3, r3, #1
 8002adc:	6453      	str	r3, [r2, #68]	; 0x44
 8002ade:	4b2d      	ldr	r3, [pc, #180]	; (8002b94 <HAL_TIM_Base_MspInit+0xe8>)
 8002ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae2:	f003 0301 	and.w	r3, r3, #1
 8002ae6:	613b      	str	r3, [r7, #16]
 8002ae8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aea:	2300      	movs	r3, #0
 8002aec:	60fb      	str	r3, [r7, #12]
 8002aee:	4b29      	ldr	r3, [pc, #164]	; (8002b94 <HAL_TIM_Base_MspInit+0xe8>)
 8002af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af2:	4a28      	ldr	r2, [pc, #160]	; (8002b94 <HAL_TIM_Base_MspInit+0xe8>)
 8002af4:	f043 0301 	orr.w	r3, r3, #1
 8002af8:	6313      	str	r3, [r2, #48]	; 0x30
 8002afa:	4b26      	ldr	r3, [pc, #152]	; (8002b94 <HAL_TIM_Base_MspInit+0xe8>)
 8002afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	60fb      	str	r3, [r7, #12]
 8002b04:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002b06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b0c:	2302      	movs	r3, #2
 8002b0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b10:	2300      	movs	r3, #0
 8002b12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b14:	2300      	movs	r3, #0
 8002b16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b1c:	f107 0314 	add.w	r3, r7, #20
 8002b20:	4619      	mov	r1, r3
 8002b22:	481d      	ldr	r0, [pc, #116]	; (8002b98 <HAL_TIM_Base_MspInit+0xec>)
 8002b24:	f000 ff64 	bl	80039f0 <HAL_GPIO_Init>

    /* TIM1 DMA Init */
    /* TIM1_TRIG Init */
    hdma_tim1_trig.Instance = DMA2_Stream0;
 8002b28:	4b1c      	ldr	r3, [pc, #112]	; (8002b9c <HAL_TIM_Base_MspInit+0xf0>)
 8002b2a:	4a1d      	ldr	r2, [pc, #116]	; (8002ba0 <HAL_TIM_Base_MspInit+0xf4>)
 8002b2c:	601a      	str	r2, [r3, #0]
    hdma_tim1_trig.Init.Channel = DMA_CHANNEL_6;
 8002b2e:	4b1b      	ldr	r3, [pc, #108]	; (8002b9c <HAL_TIM_Base_MspInit+0xf0>)
 8002b30:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8002b34:	605a      	str	r2, [r3, #4]
    hdma_tim1_trig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b36:	4b19      	ldr	r3, [pc, #100]	; (8002b9c <HAL_TIM_Base_MspInit+0xf0>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	609a      	str	r2, [r3, #8]
    hdma_tim1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b3c:	4b17      	ldr	r3, [pc, #92]	; (8002b9c <HAL_TIM_Base_MspInit+0xf0>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	60da      	str	r2, [r3, #12]
    hdma_tim1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8002b42:	4b16      	ldr	r3, [pc, #88]	; (8002b9c <HAL_TIM_Base_MspInit+0xf0>)
 8002b44:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b48:	611a      	str	r2, [r3, #16]
    hdma_tim1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b4a:	4b14      	ldr	r3, [pc, #80]	; (8002b9c <HAL_TIM_Base_MspInit+0xf0>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	615a      	str	r2, [r3, #20]
    hdma_tim1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b50:	4b12      	ldr	r3, [pc, #72]	; (8002b9c <HAL_TIM_Base_MspInit+0xf0>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	619a      	str	r2, [r3, #24]
    hdma_tim1_trig.Init.Mode = DMA_NORMAL;
 8002b56:	4b11      	ldr	r3, [pc, #68]	; (8002b9c <HAL_TIM_Base_MspInit+0xf0>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	61da      	str	r2, [r3, #28]
    hdma_tim1_trig.Init.Priority = DMA_PRIORITY_HIGH;
 8002b5c:	4b0f      	ldr	r3, [pc, #60]	; (8002b9c <HAL_TIM_Base_MspInit+0xf0>)
 8002b5e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b62:	621a      	str	r2, [r3, #32]
    hdma_tim1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b64:	4b0d      	ldr	r3, [pc, #52]	; (8002b9c <HAL_TIM_Base_MspInit+0xf0>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_trig) != HAL_OK)
 8002b6a:	480c      	ldr	r0, [pc, #48]	; (8002b9c <HAL_TIM_Base_MspInit+0xf0>)
 8002b6c:	f000 fcd6 	bl	800351c <HAL_DMA_Init>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <HAL_TIM_Base_MspInit+0xce>
    {
      Error_Handler();
 8002b76:	f7ff fc43 	bl	8002400 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim1_trig);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a07      	ldr	r2, [pc, #28]	; (8002b9c <HAL_TIM_Base_MspInit+0xf0>)
 8002b7e:	639a      	str	r2, [r3, #56]	; 0x38
 8002b80:	4a06      	ldr	r2, [pc, #24]	; (8002b9c <HAL_TIM_Base_MspInit+0xf0>)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002b86:	bf00      	nop
 8002b88:	3728      	adds	r7, #40	; 0x28
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	40010000 	.word	0x40010000
 8002b94:	40023800 	.word	0x40023800
 8002b98:	40020000 	.word	0x40020000
 8002b9c:	2004a608 	.word	0x2004a608
 8002ba0:	40026410 	.word	0x40026410

08002ba4 <uart_init>:



//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void uart_init()
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0
	__HAL_UART_ENABLE_IT(&huart6, UART_IT_RXNE);
 8002ba8:	4b06      	ldr	r3, [pc, #24]	; (8002bc4 <uart_init+0x20>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	68da      	ldr	r2, [r3, #12]
 8002bae:	4b05      	ldr	r3, [pc, #20]	; (8002bc4 <uart_init+0x20>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f042 0220 	orr.w	r2, r2, #32
 8002bb6:	60da      	str	r2, [r3, #12]
}
 8002bb8:	bf00      	nop
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	2004aae4 	.word	0x2004aae4

08002bc8 <uart_tx_process>:



//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void uart_tx_process()
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
	static uint8_t last_nose = 0;
	uint8_t string_size;

	switch(g_uart_tx_state)
 8002bce:	4b34      	ldr	r3, [pc, #208]	; (8002ca0 <uart_tx_process+0xd8>)
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d030      	beq.n	8002c38 <uart_tx_process+0x70>
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	dc5e      	bgt.n	8002c98 <uart_tx_process+0xd0>
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d002      	beq.n	8002be4 <uart_tx_process+0x1c>
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d00a      	beq.n	8002bf8 <uart_tx_process+0x30>
		else if((last_nose != g_uart_tx_nose) && (g_uart_tx_tail == g_uart_tx_nose))
			g_uart_tx_state = UART_TX_IDLE;

		break;
	}
}
 8002be2:	e059      	b.n	8002c98 <uart_tx_process+0xd0>
		if(g_uart_tx_nose != g_uart_tx_tail)
 8002be4:	4b2f      	ldr	r3, [pc, #188]	; (8002ca4 <uart_tx_process+0xdc>)
 8002be6:	881a      	ldrh	r2, [r3, #0]
 8002be8:	4b2f      	ldr	r3, [pc, #188]	; (8002ca8 <uart_tx_process+0xe0>)
 8002bea:	881b      	ldrh	r3, [r3, #0]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d050      	beq.n	8002c92 <uart_tx_process+0xca>
			g_uart_tx_state = UART_TX_TRANSMIT;
 8002bf0:	4b2b      	ldr	r3, [pc, #172]	; (8002ca0 <uart_tx_process+0xd8>)
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	701a      	strb	r2, [r3, #0]
		break;
 8002bf6:	e04c      	b.n	8002c92 <uart_tx_process+0xca>
		string_size = strlen(g_uart_tx_buffer + (g_uart_tx_nose)) + 1;
 8002bf8:	4b2a      	ldr	r3, [pc, #168]	; (8002ca4 <uart_tx_process+0xdc>)
 8002bfa:	881b      	ldrh	r3, [r3, #0]
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	4b2b      	ldr	r3, [pc, #172]	; (8002cac <uart_tx_process+0xe4>)
 8002c00:	4413      	add	r3, r2
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7fd fb66 	bl	80002d4 <strlen>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	71fb      	strb	r3, [r7, #7]
		HAL_UART_Transmit_IT(
 8002c10:	4b24      	ldr	r3, [pc, #144]	; (8002ca4 <uart_tx_process+0xdc>)
 8002c12:	881b      	ldrh	r3, [r3, #0]
 8002c14:	461a      	mov	r2, r3
 8002c16:	4b25      	ldr	r3, [pc, #148]	; (8002cac <uart_tx_process+0xe4>)
 8002c18:	4413      	add	r3, r2
 8002c1a:	79fa      	ldrb	r2, [r7, #7]
 8002c1c:	b292      	uxth	r2, r2
 8002c1e:	4619      	mov	r1, r3
 8002c20:	4823      	ldr	r0, [pc, #140]	; (8002cb0 <uart_tx_process+0xe8>)
 8002c22:	f004 feda 	bl	80079da <HAL_UART_Transmit_IT>
		last_nose = g_uart_tx_nose;
 8002c26:	4b1f      	ldr	r3, [pc, #124]	; (8002ca4 <uart_tx_process+0xdc>)
 8002c28:	881b      	ldrh	r3, [r3, #0]
 8002c2a:	b2da      	uxtb	r2, r3
 8002c2c:	4b21      	ldr	r3, [pc, #132]	; (8002cb4 <uart_tx_process+0xec>)
 8002c2e:	701a      	strb	r2, [r3, #0]
		g_uart_tx_state = UART_TX_TRANSMITING;
 8002c30:	4b1b      	ldr	r3, [pc, #108]	; (8002ca0 <uart_tx_process+0xd8>)
 8002c32:	2202      	movs	r2, #2
 8002c34:	701a      	strb	r2, [r3, #0]
		break;
 8002c36:	e02f      	b.n	8002c98 <uart_tx_process+0xd0>
		if((last_nose == g_uart_tx_nose))
 8002c38:	4b1e      	ldr	r3, [pc, #120]	; (8002cb4 <uart_tx_process+0xec>)
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	b29a      	uxth	r2, r3
 8002c3e:	4b19      	ldr	r3, [pc, #100]	; (8002ca4 <uart_tx_process+0xdc>)
 8002c40:	881b      	ldrh	r3, [r3, #0]
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d103      	bne.n	8002c4e <uart_tx_process+0x86>
			g_uart_tx_state = UART_TX_TRANSMITING;
 8002c46:	4b16      	ldr	r3, [pc, #88]	; (8002ca0 <uart_tx_process+0xd8>)
 8002c48:	2202      	movs	r2, #2
 8002c4a:	701a      	strb	r2, [r3, #0]
		break;
 8002c4c:	e023      	b.n	8002c96 <uart_tx_process+0xce>
		else if((last_nose != g_uart_tx_nose) && (g_uart_tx_tail != g_uart_tx_nose))
 8002c4e:	4b19      	ldr	r3, [pc, #100]	; (8002cb4 <uart_tx_process+0xec>)
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	b29a      	uxth	r2, r3
 8002c54:	4b13      	ldr	r3, [pc, #76]	; (8002ca4 <uart_tx_process+0xdc>)
 8002c56:	881b      	ldrh	r3, [r3, #0]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d009      	beq.n	8002c70 <uart_tx_process+0xa8>
 8002c5c:	4b12      	ldr	r3, [pc, #72]	; (8002ca8 <uart_tx_process+0xe0>)
 8002c5e:	881a      	ldrh	r2, [r3, #0]
 8002c60:	4b10      	ldr	r3, [pc, #64]	; (8002ca4 <uart_tx_process+0xdc>)
 8002c62:	881b      	ldrh	r3, [r3, #0]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d003      	beq.n	8002c70 <uart_tx_process+0xa8>
			g_uart_tx_state = UART_TX_TRANSMIT;
 8002c68:	4b0d      	ldr	r3, [pc, #52]	; (8002ca0 <uart_tx_process+0xd8>)
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	701a      	strb	r2, [r3, #0]
		break;
 8002c6e:	e012      	b.n	8002c96 <uart_tx_process+0xce>
		else if((last_nose != g_uart_tx_nose) && (g_uart_tx_tail == g_uart_tx_nose))
 8002c70:	4b10      	ldr	r3, [pc, #64]	; (8002cb4 <uart_tx_process+0xec>)
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	b29a      	uxth	r2, r3
 8002c76:	4b0b      	ldr	r3, [pc, #44]	; (8002ca4 <uart_tx_process+0xdc>)
 8002c78:	881b      	ldrh	r3, [r3, #0]
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d00b      	beq.n	8002c96 <uart_tx_process+0xce>
 8002c7e:	4b0a      	ldr	r3, [pc, #40]	; (8002ca8 <uart_tx_process+0xe0>)
 8002c80:	881a      	ldrh	r2, [r3, #0]
 8002c82:	4b08      	ldr	r3, [pc, #32]	; (8002ca4 <uart_tx_process+0xdc>)
 8002c84:	881b      	ldrh	r3, [r3, #0]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d105      	bne.n	8002c96 <uart_tx_process+0xce>
			g_uart_tx_state = UART_TX_IDLE;
 8002c8a:	4b05      	ldr	r3, [pc, #20]	; (8002ca0 <uart_tx_process+0xd8>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	701a      	strb	r2, [r3, #0]
		break;
 8002c90:	e001      	b.n	8002c96 <uart_tx_process+0xce>
		break;
 8002c92:	bf00      	nop
 8002c94:	e000      	b.n	8002c98 <uart_tx_process+0xd0>
		break;
 8002c96:	bf00      	nop
}
 8002c98:	bf00      	nop
 8002c9a:	3708      	adds	r7, #8
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	20027f3c 	.word	0x20027f3c
 8002ca4:	20028340 	.word	0x20028340
 8002ca8:	20028342 	.word	0x20028342
 8002cac:	20027f40 	.word	0x20027f40
 8002cb0:	2004aae4 	.word	0x2004aae4
 8002cb4:	2002834a 	.word	0x2002834a

08002cb8 <HAL_UART_TxCpltCallback>:



//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
	g_uart_tx_nose += strlen(g_uart_tx_buffer + g_uart_tx_nose) + 1;
 8002cc0:	4b0f      	ldr	r3, [pc, #60]	; (8002d00 <HAL_UART_TxCpltCallback+0x48>)
 8002cc2:	881b      	ldrh	r3, [r3, #0]
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	4b0f      	ldr	r3, [pc, #60]	; (8002d04 <HAL_UART_TxCpltCallback+0x4c>)
 8002cc8:	4413      	add	r3, r2
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7fd fb02 	bl	80002d4 <strlen>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	b29a      	uxth	r2, r3
 8002cd4:	4b0a      	ldr	r3, [pc, #40]	; (8002d00 <HAL_UART_TxCpltCallback+0x48>)
 8002cd6:	881b      	ldrh	r3, [r3, #0]
 8002cd8:	4413      	add	r3, r2
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	3301      	adds	r3, #1
 8002cde:	b29a      	uxth	r2, r3
 8002ce0:	4b07      	ldr	r3, [pc, #28]	; (8002d00 <HAL_UART_TxCpltCallback+0x48>)
 8002ce2:	801a      	strh	r2, [r3, #0]

	if(g_uart_tx_nose >= UART_TX_BUFFER_MAX)
 8002ce4:	4b06      	ldr	r3, [pc, #24]	; (8002d00 <HAL_UART_TxCpltCallback+0x48>)
 8002ce6:	881b      	ldrh	r3, [r3, #0]
 8002ce8:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d902      	bls.n	8002cf6 <HAL_UART_TxCpltCallback+0x3e>
		g_uart_tx_nose = 0;
 8002cf0:	4b03      	ldr	r3, [pc, #12]	; (8002d00 <HAL_UART_TxCpltCallback+0x48>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	801a      	strh	r2, [r3, #0]

}
 8002cf6:	bf00      	nop
 8002cf8:	3708      	adds	r7, #8
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	20028340 	.word	0x20028340
 8002d04:	20027f40 	.word	0x20027f40

08002d08 <uart_rx_process>:



//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void uart_rx_process()
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
	uint8_t string_size = strlen(g_uart_rx_buffer + g_uart_rx_nose + 1) + 1;
 8002d0e:	4b4c      	ldr	r3, [pc, #304]	; (8002e40 <uart_rx_process+0x138>)
 8002d10:	881b      	ldrh	r3, [r3, #0]
 8002d12:	3301      	adds	r3, #1
 8002d14:	4a4b      	ldr	r2, [pc, #300]	; (8002e44 <uart_rx_process+0x13c>)
 8002d16:	4413      	add	r3, r2
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7fd fadb 	bl	80002d4 <strlen>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	3301      	adds	r3, #1
 8002d24:	71fb      	strb	r3, [r7, #7]

	switch(g_uart_rx_state)
 8002d26:	4b48      	ldr	r3, [pc, #288]	; (8002e48 <uart_rx_process+0x140>)
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d002      	beq.n	8002d34 <uart_rx_process+0x2c>
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d008      	beq.n	8002d44 <uart_rx_process+0x3c>
			g_uart_rx_state = UART_RX_IDLE;
		break;


	}
}
 8002d32:	e080      	b.n	8002e36 <uart_rx_process+0x12e>
		if(g_uart_rx_cnt)
 8002d34:	4b45      	ldr	r3, [pc, #276]	; (8002e4c <uart_rx_process+0x144>)
 8002d36:	881b      	ldrh	r3, [r3, #0]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d079      	beq.n	8002e30 <uart_rx_process+0x128>
			g_uart_rx_state = UART_RX_RECEIVE;
 8002d3c:	4b42      	ldr	r3, [pc, #264]	; (8002e48 <uart_rx_process+0x140>)
 8002d3e:	2201      	movs	r2, #1
 8002d40:	701a      	strb	r2, [r3, #0]
		break;
 8002d42:	e075      	b.n	8002e30 <uart_rx_process+0x128>
		if(g_uart_rx_nose < g_uart_rx_tail &&
 8002d44:	4b3e      	ldr	r3, [pc, #248]	; (8002e40 <uart_rx_process+0x138>)
 8002d46:	881a      	ldrh	r2, [r3, #0]
 8002d48:	4b41      	ldr	r3, [pc, #260]	; (8002e50 <uart_rx_process+0x148>)
 8002d4a:	881b      	ldrh	r3, [r3, #0]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d21c      	bcs.n	8002d8a <uart_rx_process+0x82>
				(g_uart_rx_buffer[g_uart_rx_nose + string_size - 2] == '\r') &&
 8002d50:	4b3b      	ldr	r3, [pc, #236]	; (8002e40 <uart_rx_process+0x138>)
 8002d52:	881b      	ldrh	r3, [r3, #0]
 8002d54:	461a      	mov	r2, r3
 8002d56:	79fb      	ldrb	r3, [r7, #7]
 8002d58:	4413      	add	r3, r2
 8002d5a:	3b02      	subs	r3, #2
 8002d5c:	4a39      	ldr	r2, [pc, #228]	; (8002e44 <uart_rx_process+0x13c>)
 8002d5e:	5cd3      	ldrb	r3, [r2, r3]
		if(g_uart_rx_nose < g_uart_rx_tail &&
 8002d60:	2b0d      	cmp	r3, #13
 8002d62:	d112      	bne.n	8002d8a <uart_rx_process+0x82>
				(g_uart_rx_buffer[g_uart_rx_nose + string_size - 1] == '\n'))
 8002d64:	4b36      	ldr	r3, [pc, #216]	; (8002e40 <uart_rx_process+0x138>)
 8002d66:	881b      	ldrh	r3, [r3, #0]
 8002d68:	461a      	mov	r2, r3
 8002d6a:	79fb      	ldrb	r3, [r7, #7]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	4a34      	ldr	r2, [pc, #208]	; (8002e44 <uart_rx_process+0x13c>)
 8002d72:	5cd3      	ldrb	r3, [r2, r3]
				(g_uart_rx_buffer[g_uart_rx_nose + string_size - 2] == '\r') &&
 8002d74:	2b0a      	cmp	r3, #10
 8002d76:	d108      	bne.n	8002d8a <uart_rx_process+0x82>
			serial_protocol(g_uart_rx_buffer + g_uart_rx_nose + 1);
 8002d78:	4b31      	ldr	r3, [pc, #196]	; (8002e40 <uart_rx_process+0x138>)
 8002d7a:	881b      	ldrh	r3, [r3, #0]
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	4a31      	ldr	r2, [pc, #196]	; (8002e44 <uart_rx_process+0x13c>)
 8002d80:	4413      	add	r3, r2
 8002d82:	4618      	mov	r0, r3
 8002d84:	f000 f936 	bl	8002ff4 <serial_protocol>
 8002d88:	e02e      	b.n	8002de8 <uart_rx_process+0xe0>
		else if((g_uart_rx_nose > g_uart_rx_tail) &&
 8002d8a:	4b2d      	ldr	r3, [pc, #180]	; (8002e40 <uart_rx_process+0x138>)
 8002d8c:	881a      	ldrh	r2, [r3, #0]
 8002d8e:	4b30      	ldr	r3, [pc, #192]	; (8002e50 <uart_rx_process+0x148>)
 8002d90:	881b      	ldrh	r3, [r3, #0]
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d928      	bls.n	8002de8 <uart_rx_process+0xe0>
							(g_uart_rx_buffer[strlen(g_uart_rx_buffer) - 1] == '\n'))
 8002d96:	482b      	ldr	r0, [pc, #172]	; (8002e44 <uart_rx_process+0x13c>)
 8002d98:	f7fd fa9c 	bl	80002d4 <strlen>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	3b01      	subs	r3, #1
 8002da0:	4a28      	ldr	r2, [pc, #160]	; (8002e44 <uart_rx_process+0x13c>)
 8002da2:	5cd3      	ldrb	r3, [r2, r3]
		else if((g_uart_rx_nose > g_uart_rx_tail) &&
 8002da4:	2b0a      	cmp	r3, #10
 8002da6:	d11f      	bne.n	8002de8 <uart_rx_process+0xe0>
			strncpy(g_uart_rx_tmp_buf, g_uart_rx_buffer + g_uart_rx_nose + 1, string_size);
 8002da8:	4b25      	ldr	r3, [pc, #148]	; (8002e40 <uart_rx_process+0x138>)
 8002daa:	881b      	ldrh	r3, [r3, #0]
 8002dac:	3301      	adds	r3, #1
 8002dae:	4a25      	ldr	r2, [pc, #148]	; (8002e44 <uart_rx_process+0x13c>)
 8002db0:	4413      	add	r3, r2
 8002db2:	79fa      	ldrb	r2, [r7, #7]
 8002db4:	4619      	mov	r1, r3
 8002db6:	4827      	ldr	r0, [pc, #156]	; (8002e54 <uart_rx_process+0x14c>)
 8002db8:	f023 fb42 	bl	8026440 <strncpy>
			string_size = strlen(g_uart_rx_buffer + 1) + 1;
 8002dbc:	4b26      	ldr	r3, [pc, #152]	; (8002e58 <uart_rx_process+0x150>)
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7fd fa88 	bl	80002d4 <strlen>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	3301      	adds	r3, #1
 8002dca:	71fb      	strb	r3, [r7, #7]
			strncpy(g_uart_rx_tmp_buf + strlen(g_uart_rx_tmp_buf), g_uart_rx_buffer , string_size);
 8002dcc:	4821      	ldr	r0, [pc, #132]	; (8002e54 <uart_rx_process+0x14c>)
 8002dce:	f7fd fa81 	bl	80002d4 <strlen>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	4a1f      	ldr	r2, [pc, #124]	; (8002e54 <uart_rx_process+0x14c>)
 8002dd6:	4413      	add	r3, r2
 8002dd8:	79fa      	ldrb	r2, [r7, #7]
 8002dda:	491a      	ldr	r1, [pc, #104]	; (8002e44 <uart_rx_process+0x13c>)
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f023 fb2f 	bl	8026440 <strncpy>
			serial_protocol(g_uart_rx_tmp_buf);
 8002de2:	481c      	ldr	r0, [pc, #112]	; (8002e54 <uart_rx_process+0x14c>)
 8002de4:	f000 f906 	bl	8002ff4 <serial_protocol>
		g_uart_rx_cnt--;
 8002de8:	4b18      	ldr	r3, [pc, #96]	; (8002e4c <uart_rx_process+0x144>)
 8002dea:	881b      	ldrh	r3, [r3, #0]
 8002dec:	3b01      	subs	r3, #1
 8002dee:	b29a      	uxth	r2, r3
 8002df0:	4b16      	ldr	r3, [pc, #88]	; (8002e4c <uart_rx_process+0x144>)
 8002df2:	801a      	strh	r2, [r3, #0]
		if(g_uart_rx_nose + string_size < UART_RX_BUFFER_MAX)
 8002df4:	4b12      	ldr	r3, [pc, #72]	; (8002e40 <uart_rx_process+0x138>)
 8002df6:	881b      	ldrh	r3, [r3, #0]
 8002df8:	461a      	mov	r2, r3
 8002dfa:	79fb      	ldrb	r3, [r7, #7]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8002e02:	4293      	cmp	r3, r2
 8002e04:	dc08      	bgt.n	8002e18 <uart_rx_process+0x110>
			g_uart_rx_nose += string_size;
 8002e06:	79fb      	ldrb	r3, [r7, #7]
 8002e08:	b29a      	uxth	r2, r3
 8002e0a:	4b0d      	ldr	r3, [pc, #52]	; (8002e40 <uart_rx_process+0x138>)
 8002e0c:	881b      	ldrh	r3, [r3, #0]
 8002e0e:	4413      	add	r3, r2
 8002e10:	b29a      	uxth	r2, r3
 8002e12:	4b0b      	ldr	r3, [pc, #44]	; (8002e40 <uart_rx_process+0x138>)
 8002e14:	801a      	strh	r2, [r3, #0]
 8002e16:	e003      	b.n	8002e20 <uart_rx_process+0x118>
			g_uart_rx_nose = string_size;
 8002e18:	79fb      	ldrb	r3, [r7, #7]
 8002e1a:	b29a      	uxth	r2, r3
 8002e1c:	4b08      	ldr	r3, [pc, #32]	; (8002e40 <uart_rx_process+0x138>)
 8002e1e:	801a      	strh	r2, [r3, #0]
		if(!g_uart_rx_cnt)
 8002e20:	4b0a      	ldr	r3, [pc, #40]	; (8002e4c <uart_rx_process+0x144>)
 8002e22:	881b      	ldrh	r3, [r3, #0]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d105      	bne.n	8002e34 <uart_rx_process+0x12c>
			g_uart_rx_state = UART_RX_IDLE;
 8002e28:	4b07      	ldr	r3, [pc, #28]	; (8002e48 <uart_rx_process+0x140>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	701a      	strb	r2, [r3, #0]
		break;
 8002e2e:	e001      	b.n	8002e34 <uart_rx_process+0x12c>
		break;
 8002e30:	bf00      	nop
 8002e32:	e000      	b.n	8002e36 <uart_rx_process+0x12e>
		break;
 8002e34:	bf00      	nop
}
 8002e36:	bf00      	nop
 8002e38:	3708      	adds	r7, #8
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	20028344 	.word	0x20028344
 8002e44:	2004a6e4 	.word	0x2004a6e4
 8002e48:	20027f3d 	.word	0x20027f3d
 8002e4c:	20028348 	.word	0x20028348
 8002e50:	20028346 	.word	0x20028346
 8002e54:	2004a6b0 	.word	0x2004a6b0
 8002e58:	2004a6e5 	.word	0x2004a6e5

08002e5c <uart_rx_callback>:



//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void uart_rx_callback()
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	af00      	add	r7, sp, #0
	g_uart_rx_tail++;
 8002e60:	4b5f      	ldr	r3, [pc, #380]	; (8002fe0 <uart_rx_callback+0x184>)
 8002e62:	881b      	ldrh	r3, [r3, #0]
 8002e64:	3301      	adds	r3, #1
 8002e66:	b29a      	uxth	r2, r3
 8002e68:	4b5d      	ldr	r3, [pc, #372]	; (8002fe0 <uart_rx_callback+0x184>)
 8002e6a:	801a      	strh	r2, [r3, #0]
	// 1 & 2 - |....N!!!!!!T...|
	// 1 & 3 - |!!!T..N!!!!!!!!|
	//______________________________________________________________________________________________________________
	//				1				|					2				  | 					3					|
	//--------------------------------------------------------------------------------------------------------------
	if((g_uart_rx_tail < (UART_RX_BUFFER_MAX - 1)) && ((g_uart_rx_nose < g_uart_rx_tail) || (g_uart_rx_nose - g_uart_rx_tail > 2/*1*/)))
 8002e6c:	4b5c      	ldr	r3, [pc, #368]	; (8002fe0 <uart_rx_callback+0x184>)
 8002e6e:	881b      	ldrh	r3, [r3, #0]
 8002e70:	f240 32fd 	movw	r2, #1021	; 0x3fd
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d849      	bhi.n	8002f0c <uart_rx_callback+0xb0>
 8002e78:	4b5a      	ldr	r3, [pc, #360]	; (8002fe4 <uart_rx_callback+0x188>)
 8002e7a:	881a      	ldrh	r2, [r3, #0]
 8002e7c:	4b58      	ldr	r3, [pc, #352]	; (8002fe0 <uart_rx_callback+0x184>)
 8002e7e:	881b      	ldrh	r3, [r3, #0]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d307      	bcc.n	8002e94 <uart_rx_callback+0x38>
 8002e84:	4b57      	ldr	r3, [pc, #348]	; (8002fe4 <uart_rx_callback+0x188>)
 8002e86:	881b      	ldrh	r3, [r3, #0]
 8002e88:	461a      	mov	r2, r3
 8002e8a:	4b55      	ldr	r3, [pc, #340]	; (8002fe0 <uart_rx_callback+0x184>)
 8002e8c:	881b      	ldrh	r3, [r3, #0]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	dd3b      	ble.n	8002f0c <uart_rx_callback+0xb0>
	{
		g_uart_rx_buffer[g_uart_rx_tail] = (0x000000FFU & USART6->DR);//253
 8002e94:	4b54      	ldr	r3, [pc, #336]	; (8002fe8 <uart_rx_callback+0x18c>)
 8002e96:	6859      	ldr	r1, [r3, #4]
 8002e98:	4b51      	ldr	r3, [pc, #324]	; (8002fe0 <uart_rx_callback+0x184>)
 8002e9a:	881b      	ldrh	r3, [r3, #0]
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	b2c9      	uxtb	r1, r1
 8002ea0:	4b52      	ldr	r3, [pc, #328]	; (8002fec <uart_rx_callback+0x190>)
 8002ea2:	5499      	strb	r1, [r3, r2]
		if((g_uart_rx_buffer[g_uart_rx_tail] == '\r') /*&& ((g_uart_rx_nose < g_uart_rx_tail) || (g_uart_rx_nose - g_uart_rx_tail > 2))*/)
 8002ea4:	4b4e      	ldr	r3, [pc, #312]	; (8002fe0 <uart_rx_callback+0x184>)
 8002ea6:	881b      	ldrh	r3, [r3, #0]
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	4b50      	ldr	r3, [pc, #320]	; (8002fec <uart_rx_callback+0x190>)
 8002eac:	5c9b      	ldrb	r3, [r3, r2]
 8002eae:	2b0d      	cmp	r3, #13
 8002eb0:	f040 808d 	bne.w	8002fce <uart_rx_callback+0x172>
		{
			g_uart_rx_buffer[++g_uart_rx_tail] = '\n';//254
 8002eb4:	4b4a      	ldr	r3, [pc, #296]	; (8002fe0 <uart_rx_callback+0x184>)
 8002eb6:	881b      	ldrh	r3, [r3, #0]
 8002eb8:	3301      	adds	r3, #1
 8002eba:	b29a      	uxth	r2, r3
 8002ebc:	4b48      	ldr	r3, [pc, #288]	; (8002fe0 <uart_rx_callback+0x184>)
 8002ebe:	801a      	strh	r2, [r3, #0]
 8002ec0:	4b47      	ldr	r3, [pc, #284]	; (8002fe0 <uart_rx_callback+0x184>)
 8002ec2:	881b      	ldrh	r3, [r3, #0]
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	4b49      	ldr	r3, [pc, #292]	; (8002fec <uart_rx_callback+0x190>)
 8002ec8:	210a      	movs	r1, #10
 8002eca:	5499      	strb	r1, [r3, r2]
			g_uart_rx_cnt++;
 8002ecc:	4b48      	ldr	r3, [pc, #288]	; (8002ff0 <uart_rx_callback+0x194>)
 8002ece:	881b      	ldrh	r3, [r3, #0]
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	b29a      	uxth	r2, r3
 8002ed4:	4b46      	ldr	r3, [pc, #280]	; (8002ff0 <uart_rx_callback+0x194>)
 8002ed6:	801a      	strh	r2, [r3, #0]
			g_uart_rx_buffer[++g_uart_rx_tail] = '\0';//255
 8002ed8:	4b41      	ldr	r3, [pc, #260]	; (8002fe0 <uart_rx_callback+0x184>)
 8002eda:	881b      	ldrh	r3, [r3, #0]
 8002edc:	3301      	adds	r3, #1
 8002ede:	b29a      	uxth	r2, r3
 8002ee0:	4b3f      	ldr	r3, [pc, #252]	; (8002fe0 <uart_rx_callback+0x184>)
 8002ee2:	801a      	strh	r2, [r3, #0]
 8002ee4:	4b3e      	ldr	r3, [pc, #248]	; (8002fe0 <uart_rx_callback+0x184>)
 8002ee6:	881b      	ldrh	r3, [r3, #0]
 8002ee8:	461a      	mov	r2, r3
 8002eea:	4b40      	ldr	r3, [pc, #256]	; (8002fec <uart_rx_callback+0x190>)
 8002eec:	2100      	movs	r1, #0
 8002eee:	5499      	strb	r1, [r3, r2]
			if((g_uart_rx_tail == UART_RX_BUFFER_MAX) && (g_uart_rx_nose > 0))
 8002ef0:	4b3b      	ldr	r3, [pc, #236]	; (8002fe0 <uart_rx_callback+0x184>)
 8002ef2:	881b      	ldrh	r3, [r3, #0]
 8002ef4:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d168      	bne.n	8002fce <uart_rx_callback+0x172>
 8002efc:	4b39      	ldr	r3, [pc, #228]	; (8002fe4 <uart_rx_callback+0x188>)
 8002efe:	881b      	ldrh	r3, [r3, #0]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d064      	beq.n	8002fce <uart_rx_callback+0x172>
			{
				g_uart_rx_tail = 0;
 8002f04:	4b36      	ldr	r3, [pc, #216]	; (8002fe0 <uart_rx_callback+0x184>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	801a      	strh	r2, [r3, #0]
		if((g_uart_rx_buffer[g_uart_rx_tail] == '\r') /*&& ((g_uart_rx_nose < g_uart_rx_tail) || (g_uart_rx_nose - g_uart_rx_tail > 2))*/)
 8002f0a:	e060      	b.n	8002fce <uart_rx_callback+0x172>
			}
		}
	}
	else if((g_uart_rx_tail == (UART_RX_BUFFER_MAX - 1)) && (g_uart_rx_nose > 1)/*(g_uart_rx_nose < g_uart_rx_tail)*/)
 8002f0c:	4b34      	ldr	r3, [pc, #208]	; (8002fe0 <uart_rx_callback+0x184>)
 8002f0e:	881b      	ldrh	r3, [r3, #0]
 8002f10:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d13e      	bne.n	8002f96 <uart_rx_callback+0x13a>
 8002f18:	4b32      	ldr	r3, [pc, #200]	; (8002fe4 <uart_rx_callback+0x188>)
 8002f1a:	881b      	ldrh	r3, [r3, #0]
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d93a      	bls.n	8002f96 <uart_rx_callback+0x13a>
	{
		g_uart_rx_buffer[g_uart_rx_tail] = (0x000000FFU & USART6->DR);//254
 8002f20:	4b31      	ldr	r3, [pc, #196]	; (8002fe8 <uart_rx_callback+0x18c>)
 8002f22:	6859      	ldr	r1, [r3, #4]
 8002f24:	4b2e      	ldr	r3, [pc, #184]	; (8002fe0 <uart_rx_callback+0x184>)
 8002f26:	881b      	ldrh	r3, [r3, #0]
 8002f28:	461a      	mov	r2, r3
 8002f2a:	b2c9      	uxtb	r1, r1
 8002f2c:	4b2f      	ldr	r3, [pc, #188]	; (8002fec <uart_rx_callback+0x190>)
 8002f2e:	5499      	strb	r1, [r3, r2]
		g_uart_rx_buffer[++g_uart_rx_tail] = '\0';//255
 8002f30:	4b2b      	ldr	r3, [pc, #172]	; (8002fe0 <uart_rx_callback+0x184>)
 8002f32:	881b      	ldrh	r3, [r3, #0]
 8002f34:	3301      	adds	r3, #1
 8002f36:	b29a      	uxth	r2, r3
 8002f38:	4b29      	ldr	r3, [pc, #164]	; (8002fe0 <uart_rx_callback+0x184>)
 8002f3a:	801a      	strh	r2, [r3, #0]
 8002f3c:	4b28      	ldr	r3, [pc, #160]	; (8002fe0 <uart_rx_callback+0x184>)
 8002f3e:	881b      	ldrh	r3, [r3, #0]
 8002f40:	461a      	mov	r2, r3
 8002f42:	4b2a      	ldr	r3, [pc, #168]	; (8002fec <uart_rx_callback+0x190>)
 8002f44:	2100      	movs	r1, #0
 8002f46:	5499      	strb	r1, [r3, r2]
		if(g_uart_rx_buffer[g_uart_rx_tail - 1] == '\r')
 8002f48:	4b25      	ldr	r3, [pc, #148]	; (8002fe0 <uart_rx_callback+0x184>)
 8002f4a:	881b      	ldrh	r3, [r3, #0]
 8002f4c:	3b01      	subs	r3, #1
 8002f4e:	4a27      	ldr	r2, [pc, #156]	; (8002fec <uart_rx_callback+0x190>)
 8002f50:	5cd3      	ldrb	r3, [r2, r3]
 8002f52:	2b0d      	cmp	r3, #13
 8002f54:	d13d      	bne.n	8002fd2 <uart_rx_callback+0x176>
		{
			g_uart_rx_cnt++;
 8002f56:	4b26      	ldr	r3, [pc, #152]	; (8002ff0 <uart_rx_callback+0x194>)
 8002f58:	881b      	ldrh	r3, [r3, #0]
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	b29a      	uxth	r2, r3
 8002f5e:	4b24      	ldr	r3, [pc, #144]	; (8002ff0 <uart_rx_callback+0x194>)
 8002f60:	801a      	strh	r2, [r3, #0]
			if(g_uart_rx_nose > 1)
 8002f62:	4b20      	ldr	r3, [pc, #128]	; (8002fe4 <uart_rx_callback+0x188>)
 8002f64:	881b      	ldrh	r3, [r3, #0]
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d933      	bls.n	8002fd2 <uart_rx_callback+0x176>
			{
				g_uart_rx_tail = 0;
 8002f6a:	4b1d      	ldr	r3, [pc, #116]	; (8002fe0 <uart_rx_callback+0x184>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	801a      	strh	r2, [r3, #0]
				g_uart_rx_buffer[g_uart_rx_tail] = '\n';//0
 8002f70:	4b1b      	ldr	r3, [pc, #108]	; (8002fe0 <uart_rx_callback+0x184>)
 8002f72:	881b      	ldrh	r3, [r3, #0]
 8002f74:	461a      	mov	r2, r3
 8002f76:	4b1d      	ldr	r3, [pc, #116]	; (8002fec <uart_rx_callback+0x190>)
 8002f78:	210a      	movs	r1, #10
 8002f7a:	5499      	strb	r1, [r3, r2]
				g_uart_rx_buffer[++g_uart_rx_tail] = '\0';//1
 8002f7c:	4b18      	ldr	r3, [pc, #96]	; (8002fe0 <uart_rx_callback+0x184>)
 8002f7e:	881b      	ldrh	r3, [r3, #0]
 8002f80:	3301      	adds	r3, #1
 8002f82:	b29a      	uxth	r2, r3
 8002f84:	4b16      	ldr	r3, [pc, #88]	; (8002fe0 <uart_rx_callback+0x184>)
 8002f86:	801a      	strh	r2, [r3, #0]
 8002f88:	4b15      	ldr	r3, [pc, #84]	; (8002fe0 <uart_rx_callback+0x184>)
 8002f8a:	881b      	ldrh	r3, [r3, #0]
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	4b17      	ldr	r3, [pc, #92]	; (8002fec <uart_rx_callback+0x190>)
 8002f90:	2100      	movs	r1, #0
 8002f92:	5499      	strb	r1, [r3, r2]
		if(g_uart_rx_buffer[g_uart_rx_tail - 1] == '\r')
 8002f94:	e01d      	b.n	8002fd2 <uart_rx_callback+0x176>
			{
				//error - full
			}
		}
	}
	else if((g_uart_rx_tail == UART_RX_BUFFER_MAX) && (g_uart_rx_nose > 1))
 8002f96:	4b12      	ldr	r3, [pc, #72]	; (8002fe0 <uart_rx_callback+0x184>)
 8002f98:	881b      	ldrh	r3, [r3, #0]
 8002f9a:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d118      	bne.n	8002fd4 <uart_rx_callback+0x178>
 8002fa2:	4b10      	ldr	r3, [pc, #64]	; (8002fe4 <uart_rx_callback+0x188>)
 8002fa4:	881b      	ldrh	r3, [r3, #0]
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d914      	bls.n	8002fd4 <uart_rx_callback+0x178>
	{
		g_uart_rx_buffer[g_uart_rx_tail] = '\0';
 8002faa:	4b0d      	ldr	r3, [pc, #52]	; (8002fe0 <uart_rx_callback+0x184>)
 8002fac:	881b      	ldrh	r3, [r3, #0]
 8002fae:	461a      	mov	r2, r3
 8002fb0:	4b0e      	ldr	r3, [pc, #56]	; (8002fec <uart_rx_callback+0x190>)
 8002fb2:	2100      	movs	r1, #0
 8002fb4:	5499      	strb	r1, [r3, r2]
		g_uart_rx_tail = 1;
 8002fb6:	4b0a      	ldr	r3, [pc, #40]	; (8002fe0 <uart_rx_callback+0x184>)
 8002fb8:	2201      	movs	r2, #1
 8002fba:	801a      	strh	r2, [r3, #0]
		g_uart_rx_buffer[g_uart_rx_tail] = (0x000000FFU & USART6->DR);
 8002fbc:	4b0a      	ldr	r3, [pc, #40]	; (8002fe8 <uart_rx_callback+0x18c>)
 8002fbe:	6859      	ldr	r1, [r3, #4]
 8002fc0:	4b07      	ldr	r3, [pc, #28]	; (8002fe0 <uart_rx_callback+0x184>)
 8002fc2:	881b      	ldrh	r3, [r3, #0]
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	b2c9      	uxtb	r1, r1
 8002fc8:	4b08      	ldr	r3, [pc, #32]	; (8002fec <uart_rx_callback+0x190>)
 8002fca:	5499      	strb	r1, [r3, r2]

	}

}
 8002fcc:	e002      	b.n	8002fd4 <uart_rx_callback+0x178>
		if((g_uart_rx_buffer[g_uart_rx_tail] == '\r') /*&& ((g_uart_rx_nose < g_uart_rx_tail) || (g_uart_rx_nose - g_uart_rx_tail > 2))*/)
 8002fce:	bf00      	nop
 8002fd0:	e000      	b.n	8002fd4 <uart_rx_callback+0x178>
		if(g_uart_rx_buffer[g_uart_rx_tail - 1] == '\r')
 8002fd2:	bf00      	nop
}
 8002fd4:	bf00      	nop
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	20028346 	.word	0x20028346
 8002fe4:	20028344 	.word	0x20028344
 8002fe8:	40011400 	.word	0x40011400
 8002fec:	2004a6e4 	.word	0x2004a6e4
 8002ff0:	20028348 	.word	0x20028348

08002ff4 <serial_protocol>:


void serial_protocol(uint8_t* buff)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af02      	add	r7, sp, #8
 8002ffa:	6078      	str	r0, [r7, #4]
	LCD_PrintStr(20, 100, 0, 0x841FU, buff, 5);
 8002ffc:	2305      	movs	r3, #5
 8002ffe:	9301      	str	r3, [sp, #4]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	9300      	str	r3, [sp, #0]
 8003004:	f248 431f 	movw	r3, #33823	; 0x841f
 8003008:	2200      	movs	r2, #0
 800300a:	2164      	movs	r1, #100	; 0x64
 800300c:	2014      	movs	r0, #20
 800300e:	f7fe fd35 	bl	8001a7c <LCD_PrintStr>
}
 8003012:	bf00      	nop
 8003014:	3708      	adds	r7, #8
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
	...

0800301c <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003020:	4b11      	ldr	r3, [pc, #68]	; (8003068 <MX_USART6_UART_Init+0x4c>)
 8003022:	4a12      	ldr	r2, [pc, #72]	; (800306c <MX_USART6_UART_Init+0x50>)
 8003024:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8003026:	4b10      	ldr	r3, [pc, #64]	; (8003068 <MX_USART6_UART_Init+0x4c>)
 8003028:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800302c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800302e:	4b0e      	ldr	r3, [pc, #56]	; (8003068 <MX_USART6_UART_Init+0x4c>)
 8003030:	2200      	movs	r2, #0
 8003032:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003034:	4b0c      	ldr	r3, [pc, #48]	; (8003068 <MX_USART6_UART_Init+0x4c>)
 8003036:	2200      	movs	r2, #0
 8003038:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800303a:	4b0b      	ldr	r3, [pc, #44]	; (8003068 <MX_USART6_UART_Init+0x4c>)
 800303c:	2200      	movs	r2, #0
 800303e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003040:	4b09      	ldr	r3, [pc, #36]	; (8003068 <MX_USART6_UART_Init+0x4c>)
 8003042:	220c      	movs	r2, #12
 8003044:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003046:	4b08      	ldr	r3, [pc, #32]	; (8003068 <MX_USART6_UART_Init+0x4c>)
 8003048:	2200      	movs	r2, #0
 800304a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800304c:	4b06      	ldr	r3, [pc, #24]	; (8003068 <MX_USART6_UART_Init+0x4c>)
 800304e:	2200      	movs	r2, #0
 8003050:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003052:	4805      	ldr	r0, [pc, #20]	; (8003068 <MX_USART6_UART_Init+0x4c>)
 8003054:	f004 fc74 	bl	8007940 <HAL_UART_Init>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d001      	beq.n	8003062 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800305e:	f7ff f9cf 	bl	8002400 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003062:	bf00      	nop
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	2004aae4 	.word	0x2004aae4
 800306c:	40011400 	.word	0x40011400

08003070 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b08a      	sub	sp, #40	; 0x28
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003078:	f107 0314 	add.w	r3, r7, #20
 800307c:	2200      	movs	r2, #0
 800307e:	601a      	str	r2, [r3, #0]
 8003080:	605a      	str	r2, [r3, #4]
 8003082:	609a      	str	r2, [r3, #8]
 8003084:	60da      	str	r2, [r3, #12]
 8003086:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a1e      	ldr	r2, [pc, #120]	; (8003108 <HAL_UART_MspInit+0x98>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d136      	bne.n	8003100 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8003092:	2300      	movs	r3, #0
 8003094:	613b      	str	r3, [r7, #16]
 8003096:	4b1d      	ldr	r3, [pc, #116]	; (800310c <HAL_UART_MspInit+0x9c>)
 8003098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800309a:	4a1c      	ldr	r2, [pc, #112]	; (800310c <HAL_UART_MspInit+0x9c>)
 800309c:	f043 0320 	orr.w	r3, r3, #32
 80030a0:	6453      	str	r3, [r2, #68]	; 0x44
 80030a2:	4b1a      	ldr	r3, [pc, #104]	; (800310c <HAL_UART_MspInit+0x9c>)
 80030a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a6:	f003 0320 	and.w	r3, r3, #32
 80030aa:	613b      	str	r3, [r7, #16]
 80030ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80030ae:	2300      	movs	r3, #0
 80030b0:	60fb      	str	r3, [r7, #12]
 80030b2:	4b16      	ldr	r3, [pc, #88]	; (800310c <HAL_UART_MspInit+0x9c>)
 80030b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b6:	4a15      	ldr	r2, [pc, #84]	; (800310c <HAL_UART_MspInit+0x9c>)
 80030b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030bc:	6313      	str	r3, [r2, #48]	; 0x30
 80030be:	4b13      	ldr	r3, [pc, #76]	; (800310c <HAL_UART_MspInit+0x9c>)
 80030c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030c6:	60fb      	str	r3, [r7, #12]
 80030c8:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PG9     ------> USART6_RX
    PG14     ------> USART6_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 80030ca:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 80030ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030d0:	2302      	movs	r3, #2
 80030d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d4:	2300      	movs	r3, #0
 80030d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030d8:	2303      	movs	r3, #3
 80030da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80030dc:	2308      	movs	r3, #8
 80030de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80030e0:	f107 0314 	add.w	r3, r7, #20
 80030e4:	4619      	mov	r1, r3
 80030e6:	480a      	ldr	r0, [pc, #40]	; (8003110 <HAL_UART_MspInit+0xa0>)
 80030e8:	f000 fc82 	bl	80039f0 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80030ec:	2200      	movs	r2, #0
 80030ee:	2100      	movs	r1, #0
 80030f0:	2047      	movs	r0, #71	; 0x47
 80030f2:	f000 f9ce 	bl	8003492 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80030f6:	2047      	movs	r0, #71	; 0x47
 80030f8:	f000 f9e7 	bl	80034ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */
    uart_init();
 80030fc:	f7ff fd52 	bl	8002ba4 <uart_init>
  /* USER CODE END USART6_MspInit 1 */
  }
}
 8003100:	bf00      	nop
 8003102:	3728      	adds	r7, #40	; 0x28
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	40011400 	.word	0x40011400
 800310c:	40023800 	.word	0x40023800
 8003110:	40021800 	.word	0x40021800

08003114 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8003114:	f8df d034 	ldr.w	sp, [pc, #52]	; 800314c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003118:	480d      	ldr	r0, [pc, #52]	; (8003150 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800311a:	490e      	ldr	r1, [pc, #56]	; (8003154 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800311c:	4a0e      	ldr	r2, [pc, #56]	; (8003158 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800311e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003120:	e002      	b.n	8003128 <LoopCopyDataInit>

08003122 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003122:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003124:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003126:	3304      	adds	r3, #4

08003128 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003128:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800312a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800312c:	d3f9      	bcc.n	8003122 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800312e:	4a0b      	ldr	r2, [pc, #44]	; (800315c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003130:	4c0b      	ldr	r4, [pc, #44]	; (8003160 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003132:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003134:	e001      	b.n	800313a <LoopFillZerobss>

08003136 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003136:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003138:	3204      	adds	r2, #4

0800313a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800313a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800313c:	d3fb      	bcc.n	8003136 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800313e:	f7ff fc4d 	bl	80029dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003142:	f022 fd31 	bl	8025ba8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003146:	f7ff f8a5 	bl	8002294 <main>
  bx  lr    
 800314a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800314c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003150:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003154:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8003158:	080761fc 	.word	0x080761fc
  ldr r2, =_sbss
 800315c:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8003160:	2004ab3c 	.word	0x2004ab3c

08003164 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003164:	e7fe      	b.n	8003164 <ADC_IRQHandler>
	...

08003168 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800316c:	4b0e      	ldr	r3, [pc, #56]	; (80031a8 <HAL_Init+0x40>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a0d      	ldr	r2, [pc, #52]	; (80031a8 <HAL_Init+0x40>)
 8003172:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003176:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003178:	4b0b      	ldr	r3, [pc, #44]	; (80031a8 <HAL_Init+0x40>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a0a      	ldr	r2, [pc, #40]	; (80031a8 <HAL_Init+0x40>)
 800317e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003182:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003184:	4b08      	ldr	r3, [pc, #32]	; (80031a8 <HAL_Init+0x40>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a07      	ldr	r2, [pc, #28]	; (80031a8 <HAL_Init+0x40>)
 800318a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800318e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003190:	2003      	movs	r0, #3
 8003192:	f000 f973 	bl	800347c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003196:	2000      	movs	r0, #0
 8003198:	f000 f808 	bl	80031ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800319c:	f7ff fad4 	bl	8002748 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	40023c00 	.word	0x40023c00

080031ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80031b4:	4b12      	ldr	r3, [pc, #72]	; (8003200 <HAL_InitTick+0x54>)
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	4b12      	ldr	r3, [pc, #72]	; (8003204 <HAL_InitTick+0x58>)
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	4619      	mov	r1, r3
 80031be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80031c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ca:	4618      	mov	r0, r3
 80031cc:	f000 f999 	bl	8003502 <HAL_SYSTICK_Config>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d001      	beq.n	80031da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e00e      	b.n	80031f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2b0f      	cmp	r3, #15
 80031de:	d80a      	bhi.n	80031f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80031e0:	2200      	movs	r2, #0
 80031e2:	6879      	ldr	r1, [r7, #4]
 80031e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80031e8:	f000 f953 	bl	8003492 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80031ec:	4a06      	ldr	r2, [pc, #24]	; (8003208 <HAL_InitTick+0x5c>)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80031f2:	2300      	movs	r3, #0
 80031f4:	e000      	b.n	80031f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3708      	adds	r7, #8
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	20000004 	.word	0x20000004
 8003204:	2000000c 	.word	0x2000000c
 8003208:	20000008 	.word	0x20000008

0800320c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800320c:	b480      	push	{r7}
 800320e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003210:	4b06      	ldr	r3, [pc, #24]	; (800322c <HAL_IncTick+0x20>)
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	461a      	mov	r2, r3
 8003216:	4b06      	ldr	r3, [pc, #24]	; (8003230 <HAL_IncTick+0x24>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4413      	add	r3, r2
 800321c:	4a04      	ldr	r2, [pc, #16]	; (8003230 <HAL_IncTick+0x24>)
 800321e:	6013      	str	r3, [r2, #0]
}
 8003220:	bf00      	nop
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	2000000c 	.word	0x2000000c
 8003230:	2004ab28 	.word	0x2004ab28

08003234 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003234:	b480      	push	{r7}
 8003236:	af00      	add	r7, sp, #0
  return uwTick;
 8003238:	4b03      	ldr	r3, [pc, #12]	; (8003248 <HAL_GetTick+0x14>)
 800323a:	681b      	ldr	r3, [r3, #0]
}
 800323c:	4618      	mov	r0, r3
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop
 8003248:	2004ab28 	.word	0x2004ab28

0800324c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003254:	f7ff ffee 	bl	8003234 <HAL_GetTick>
 8003258:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003264:	d005      	beq.n	8003272 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003266:	4b0a      	ldr	r3, [pc, #40]	; (8003290 <HAL_Delay+0x44>)
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	461a      	mov	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	4413      	add	r3, r2
 8003270:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003272:	bf00      	nop
 8003274:	f7ff ffde 	bl	8003234 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	68fa      	ldr	r2, [r7, #12]
 8003280:	429a      	cmp	r2, r3
 8003282:	d8f7      	bhi.n	8003274 <HAL_Delay+0x28>
  {
  }
}
 8003284:	bf00      	nop
 8003286:	bf00      	nop
 8003288:	3710      	adds	r7, #16
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	2000000c 	.word	0x2000000c

08003294 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003294:	b480      	push	{r7}
 8003296:	b085      	sub	sp, #20
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f003 0307 	and.w	r3, r3, #7
 80032a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032a4:	4b0c      	ldr	r3, [pc, #48]	; (80032d8 <__NVIC_SetPriorityGrouping+0x44>)
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032aa:	68ba      	ldr	r2, [r7, #8]
 80032ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80032b0:	4013      	ands	r3, r2
 80032b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80032c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032c6:	4a04      	ldr	r2, [pc, #16]	; (80032d8 <__NVIC_SetPriorityGrouping+0x44>)
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	60d3      	str	r3, [r2, #12]
}
 80032cc:	bf00      	nop
 80032ce:	3714      	adds	r7, #20
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr
 80032d8:	e000ed00 	.word	0xe000ed00

080032dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032dc:	b480      	push	{r7}
 80032de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032e0:	4b04      	ldr	r3, [pc, #16]	; (80032f4 <__NVIC_GetPriorityGrouping+0x18>)
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	0a1b      	lsrs	r3, r3, #8
 80032e6:	f003 0307 	and.w	r3, r3, #7
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr
 80032f4:	e000ed00 	.word	0xe000ed00

080032f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	4603      	mov	r3, r0
 8003300:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003306:	2b00      	cmp	r3, #0
 8003308:	db0b      	blt.n	8003322 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800330a:	79fb      	ldrb	r3, [r7, #7]
 800330c:	f003 021f 	and.w	r2, r3, #31
 8003310:	4907      	ldr	r1, [pc, #28]	; (8003330 <__NVIC_EnableIRQ+0x38>)
 8003312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003316:	095b      	lsrs	r3, r3, #5
 8003318:	2001      	movs	r0, #1
 800331a:	fa00 f202 	lsl.w	r2, r0, r2
 800331e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003322:	bf00      	nop
 8003324:	370c      	adds	r7, #12
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	e000e100 	.word	0xe000e100

08003334 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	4603      	mov	r3, r0
 800333c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800333e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003342:	2b00      	cmp	r3, #0
 8003344:	db12      	blt.n	800336c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003346:	79fb      	ldrb	r3, [r7, #7]
 8003348:	f003 021f 	and.w	r2, r3, #31
 800334c:	490a      	ldr	r1, [pc, #40]	; (8003378 <__NVIC_DisableIRQ+0x44>)
 800334e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003352:	095b      	lsrs	r3, r3, #5
 8003354:	2001      	movs	r0, #1
 8003356:	fa00 f202 	lsl.w	r2, r0, r2
 800335a:	3320      	adds	r3, #32
 800335c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003360:	f3bf 8f4f 	dsb	sy
}
 8003364:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003366:	f3bf 8f6f 	isb	sy
}
 800336a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800336c:	bf00      	nop
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr
 8003378:	e000e100 	.word	0xe000e100

0800337c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	4603      	mov	r3, r0
 8003384:	6039      	str	r1, [r7, #0]
 8003386:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003388:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800338c:	2b00      	cmp	r3, #0
 800338e:	db0a      	blt.n	80033a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	b2da      	uxtb	r2, r3
 8003394:	490c      	ldr	r1, [pc, #48]	; (80033c8 <__NVIC_SetPriority+0x4c>)
 8003396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800339a:	0112      	lsls	r2, r2, #4
 800339c:	b2d2      	uxtb	r2, r2
 800339e:	440b      	add	r3, r1
 80033a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033a4:	e00a      	b.n	80033bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	b2da      	uxtb	r2, r3
 80033aa:	4908      	ldr	r1, [pc, #32]	; (80033cc <__NVIC_SetPriority+0x50>)
 80033ac:	79fb      	ldrb	r3, [r7, #7]
 80033ae:	f003 030f 	and.w	r3, r3, #15
 80033b2:	3b04      	subs	r3, #4
 80033b4:	0112      	lsls	r2, r2, #4
 80033b6:	b2d2      	uxtb	r2, r2
 80033b8:	440b      	add	r3, r1
 80033ba:	761a      	strb	r2, [r3, #24]
}
 80033bc:	bf00      	nop
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr
 80033c8:	e000e100 	.word	0xe000e100
 80033cc:	e000ed00 	.word	0xe000ed00

080033d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b089      	sub	sp, #36	; 0x24
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	60b9      	str	r1, [r7, #8]
 80033da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f003 0307 	and.w	r3, r3, #7
 80033e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	f1c3 0307 	rsb	r3, r3, #7
 80033ea:	2b04      	cmp	r3, #4
 80033ec:	bf28      	it	cs
 80033ee:	2304      	movcs	r3, #4
 80033f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	3304      	adds	r3, #4
 80033f6:	2b06      	cmp	r3, #6
 80033f8:	d902      	bls.n	8003400 <NVIC_EncodePriority+0x30>
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	3b03      	subs	r3, #3
 80033fe:	e000      	b.n	8003402 <NVIC_EncodePriority+0x32>
 8003400:	2300      	movs	r3, #0
 8003402:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003404:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003408:	69bb      	ldr	r3, [r7, #24]
 800340a:	fa02 f303 	lsl.w	r3, r2, r3
 800340e:	43da      	mvns	r2, r3
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	401a      	ands	r2, r3
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003418:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	fa01 f303 	lsl.w	r3, r1, r3
 8003422:	43d9      	mvns	r1, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003428:	4313      	orrs	r3, r2
         );
}
 800342a:	4618      	mov	r0, r3
 800342c:	3724      	adds	r7, #36	; 0x24
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr
	...

08003438 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	3b01      	subs	r3, #1
 8003444:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003448:	d301      	bcc.n	800344e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800344a:	2301      	movs	r3, #1
 800344c:	e00f      	b.n	800346e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800344e:	4a0a      	ldr	r2, [pc, #40]	; (8003478 <SysTick_Config+0x40>)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	3b01      	subs	r3, #1
 8003454:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003456:	210f      	movs	r1, #15
 8003458:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800345c:	f7ff ff8e 	bl	800337c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003460:	4b05      	ldr	r3, [pc, #20]	; (8003478 <SysTick_Config+0x40>)
 8003462:	2200      	movs	r2, #0
 8003464:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003466:	4b04      	ldr	r3, [pc, #16]	; (8003478 <SysTick_Config+0x40>)
 8003468:	2207      	movs	r2, #7
 800346a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	3708      	adds	r7, #8
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	e000e010 	.word	0xe000e010

0800347c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f7ff ff05 	bl	8003294 <__NVIC_SetPriorityGrouping>
}
 800348a:	bf00      	nop
 800348c:	3708      	adds	r7, #8
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}

08003492 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003492:	b580      	push	{r7, lr}
 8003494:	b086      	sub	sp, #24
 8003496:	af00      	add	r7, sp, #0
 8003498:	4603      	mov	r3, r0
 800349a:	60b9      	str	r1, [r7, #8]
 800349c:	607a      	str	r2, [r7, #4]
 800349e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034a0:	2300      	movs	r3, #0
 80034a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034a4:	f7ff ff1a 	bl	80032dc <__NVIC_GetPriorityGrouping>
 80034a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	68b9      	ldr	r1, [r7, #8]
 80034ae:	6978      	ldr	r0, [r7, #20]
 80034b0:	f7ff ff8e 	bl	80033d0 <NVIC_EncodePriority>
 80034b4:	4602      	mov	r2, r0
 80034b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034ba:	4611      	mov	r1, r2
 80034bc:	4618      	mov	r0, r3
 80034be:	f7ff ff5d 	bl	800337c <__NVIC_SetPriority>
}
 80034c2:	bf00      	nop
 80034c4:	3718      	adds	r7, #24
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034ca:	b580      	push	{r7, lr}
 80034cc:	b082      	sub	sp, #8
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	4603      	mov	r3, r0
 80034d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034d8:	4618      	mov	r0, r3
 80034da:	f7ff ff0d 	bl	80032f8 <__NVIC_EnableIRQ>
}
 80034de:	bf00      	nop
 80034e0:	3708      	adds	r7, #8
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}

080034e6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80034e6:	b580      	push	{r7, lr}
 80034e8:	b082      	sub	sp, #8
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	4603      	mov	r3, r0
 80034ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80034f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f4:	4618      	mov	r0, r3
 80034f6:	f7ff ff1d 	bl	8003334 <__NVIC_DisableIRQ>
}
 80034fa:	bf00      	nop
 80034fc:	3708      	adds	r7, #8
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b082      	sub	sp, #8
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f7ff ff94 	bl	8003438 <SysTick_Config>
 8003510:	4603      	mov	r3, r0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3708      	adds	r7, #8
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
	...

0800351c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b086      	sub	sp, #24
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003524:	2300      	movs	r3, #0
 8003526:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003528:	f7ff fe84 	bl	8003234 <HAL_GetTick>
 800352c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d101      	bne.n	8003538 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e099      	b.n	800366c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2202      	movs	r2, #2
 8003544:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f022 0201 	bic.w	r2, r2, #1
 8003556:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003558:	e00f      	b.n	800357a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800355a:	f7ff fe6b 	bl	8003234 <HAL_GetTick>
 800355e:	4602      	mov	r2, r0
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	2b05      	cmp	r3, #5
 8003566:	d908      	bls.n	800357a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2220      	movs	r2, #32
 800356c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2203      	movs	r2, #3
 8003572:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e078      	b.n	800366c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0301 	and.w	r3, r3, #1
 8003584:	2b00      	cmp	r3, #0
 8003586:	d1e8      	bne.n	800355a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003590:	697a      	ldr	r2, [r7, #20]
 8003592:	4b38      	ldr	r3, [pc, #224]	; (8003674 <HAL_DMA_Init+0x158>)
 8003594:	4013      	ands	r3, r2
 8003596:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685a      	ldr	r2, [r3, #4]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	691b      	ldr	r3, [r3, #16]
 80035ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	699b      	ldr	r3, [r3, #24]
 80035b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a1b      	ldr	r3, [r3, #32]
 80035c4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035c6:	697a      	ldr	r2, [r7, #20]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d0:	2b04      	cmp	r3, #4
 80035d2:	d107      	bne.n	80035e4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035dc:	4313      	orrs	r3, r2
 80035de:	697a      	ldr	r2, [r7, #20]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	697a      	ldr	r2, [r7, #20]
 80035ea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	695b      	ldr	r3, [r3, #20]
 80035f2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	f023 0307 	bic.w	r3, r3, #7
 80035fa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003600:	697a      	ldr	r2, [r7, #20]
 8003602:	4313      	orrs	r3, r2
 8003604:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360a:	2b04      	cmp	r3, #4
 800360c:	d117      	bne.n	800363e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003612:	697a      	ldr	r2, [r7, #20]
 8003614:	4313      	orrs	r3, r2
 8003616:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800361c:	2b00      	cmp	r3, #0
 800361e:	d00e      	beq.n	800363e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f000 f969 	bl	80038f8 <DMA_CheckFifoParam>
 8003626:	4603      	mov	r3, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d008      	beq.n	800363e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2240      	movs	r2, #64	; 0x40
 8003630:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2201      	movs	r2, #1
 8003636:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800363a:	2301      	movs	r3, #1
 800363c:	e016      	b.n	800366c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	697a      	ldr	r2, [r7, #20]
 8003644:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f000 f920 	bl	800388c <DMA_CalcBaseAndBitshift>
 800364c:	4603      	mov	r3, r0
 800364e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003654:	223f      	movs	r2, #63	; 0x3f
 8003656:	409a      	lsls	r2, r3
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2201      	movs	r2, #1
 8003666:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800366a:	2300      	movs	r3, #0
}
 800366c:	4618      	mov	r0, r3
 800366e:	3718      	adds	r7, #24
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}
 8003674:	e010803f 	.word	0xe010803f

08003678 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b086      	sub	sp, #24
 800367c:	af00      	add	r7, sp, #0
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	60b9      	str	r1, [r7, #8]
 8003682:	607a      	str	r2, [r7, #4]
 8003684:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003686:	2300      	movs	r3, #0
 8003688:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003690:	2b01      	cmp	r3, #1
 8003692:	d101      	bne.n	8003698 <HAL_DMA_Start+0x20>
 8003694:	2302      	movs	r3, #2
 8003696:	e026      	b.n	80036e6 <HAL_DMA_Start+0x6e>
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d115      	bne.n	80036d8 <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2202      	movs	r2, #2
 80036b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2200      	movs	r2, #0
 80036b8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	68b9      	ldr	r1, [r7, #8]
 80036c0:	68f8      	ldr	r0, [r7, #12]
 80036c2:	f000 f8b4 	bl	800382e <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f042 0201 	orr.w	r2, r2, #1
 80036d4:	601a      	str	r2, [r3, #0]
 80036d6:	e005      	b.n	80036e4 <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80036e0:	2302      	movs	r3, #2
 80036e2:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 80036e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3718      	adds	r7, #24
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}

080036ee <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80036ee:	b580      	push	{r7, lr}
 80036f0:	b084      	sub	sp, #16
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036fa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80036fc:	f7ff fd9a 	bl	8003234 <HAL_GetTick>
 8003700:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003708:	b2db      	uxtb	r3, r3
 800370a:	2b02      	cmp	r3, #2
 800370c:	d008      	beq.n	8003720 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2280      	movs	r2, #128	; 0x80
 8003712:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e052      	b.n	80037c6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f022 0216 	bic.w	r2, r2, #22
 800372e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	695a      	ldr	r2, [r3, #20]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800373e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003744:	2b00      	cmp	r3, #0
 8003746:	d103      	bne.n	8003750 <HAL_DMA_Abort+0x62>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800374c:	2b00      	cmp	r3, #0
 800374e:	d007      	beq.n	8003760 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f022 0208 	bic.w	r2, r2, #8
 800375e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f022 0201 	bic.w	r2, r2, #1
 800376e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003770:	e013      	b.n	800379a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003772:	f7ff fd5f 	bl	8003234 <HAL_GetTick>
 8003776:	4602      	mov	r2, r0
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	2b05      	cmp	r3, #5
 800377e:	d90c      	bls.n	800379a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2220      	movs	r2, #32
 8003784:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2203      	movs	r2, #3
 8003792:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e015      	b.n	80037c6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0301 	and.w	r3, r3, #1
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d1e4      	bne.n	8003772 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ac:	223f      	movs	r2, #63	; 0x3f
 80037ae:	409a      	lsls	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3710      	adds	r7, #16
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}

080037ce <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80037ce:	b480      	push	{r7}
 80037d0:	b083      	sub	sp, #12
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d004      	beq.n	80037ec <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2280      	movs	r2, #128	; 0x80
 80037e6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e00c      	b.n	8003806 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2205      	movs	r2, #5
 80037f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f022 0201 	bic.w	r2, r2, #1
 8003802:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	370c      	adds	r7, #12
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr

08003812 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003812:	b480      	push	{r7}
 8003814:	b083      	sub	sp, #12
 8003816:	af00      	add	r7, sp, #0
 8003818:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003820:	b2db      	uxtb	r3, r3
}
 8003822:	4618      	mov	r0, r3
 8003824:	370c      	adds	r7, #12
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr

0800382e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800382e:	b480      	push	{r7}
 8003830:	b085      	sub	sp, #20
 8003832:	af00      	add	r7, sp, #0
 8003834:	60f8      	str	r0, [r7, #12]
 8003836:	60b9      	str	r1, [r7, #8]
 8003838:	607a      	str	r2, [r7, #4]
 800383a:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800384a:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	683a      	ldr	r2, [r7, #0]
 8003852:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	2b40      	cmp	r3, #64	; 0x40
 800385a:	d108      	bne.n	800386e <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68ba      	ldr	r2, [r7, #8]
 800386a:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800386c:	e007      	b.n	800387e <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	68ba      	ldr	r2, [r7, #8]
 8003874:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	60da      	str	r2, [r3, #12]
}
 800387e:	bf00      	nop
 8003880:	3714      	adds	r7, #20
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
	...

0800388c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800388c:	b480      	push	{r7}
 800388e:	b085      	sub	sp, #20
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	b2db      	uxtb	r3, r3
 800389a:	3b10      	subs	r3, #16
 800389c:	4a14      	ldr	r2, [pc, #80]	; (80038f0 <DMA_CalcBaseAndBitshift+0x64>)
 800389e:	fba2 2303 	umull	r2, r3, r2, r3
 80038a2:	091b      	lsrs	r3, r3, #4
 80038a4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80038a6:	4a13      	ldr	r2, [pc, #76]	; (80038f4 <DMA_CalcBaseAndBitshift+0x68>)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	4413      	add	r3, r2
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	461a      	mov	r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2b03      	cmp	r3, #3
 80038b8:	d909      	bls.n	80038ce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80038c2:	f023 0303 	bic.w	r3, r3, #3
 80038c6:	1d1a      	adds	r2, r3, #4
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	659a      	str	r2, [r3, #88]	; 0x58
 80038cc:	e007      	b.n	80038de <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80038d6:	f023 0303 	bic.w	r3, r3, #3
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3714      	adds	r7, #20
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop
 80038f0:	aaaaaaab 	.word	0xaaaaaaab
 80038f4:	0802c6bc 	.word	0x0802c6bc

080038f8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b085      	sub	sp, #20
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003900:	2300      	movs	r3, #0
 8003902:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003908:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d11f      	bne.n	8003952 <DMA_CheckFifoParam+0x5a>
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	2b03      	cmp	r3, #3
 8003916:	d856      	bhi.n	80039c6 <DMA_CheckFifoParam+0xce>
 8003918:	a201      	add	r2, pc, #4	; (adr r2, 8003920 <DMA_CheckFifoParam+0x28>)
 800391a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800391e:	bf00      	nop
 8003920:	08003931 	.word	0x08003931
 8003924:	08003943 	.word	0x08003943
 8003928:	08003931 	.word	0x08003931
 800392c:	080039c7 	.word	0x080039c7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003934:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d046      	beq.n	80039ca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003940:	e043      	b.n	80039ca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003946:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800394a:	d140      	bne.n	80039ce <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003950:	e03d      	b.n	80039ce <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	699b      	ldr	r3, [r3, #24]
 8003956:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800395a:	d121      	bne.n	80039a0 <DMA_CheckFifoParam+0xa8>
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	2b03      	cmp	r3, #3
 8003960:	d837      	bhi.n	80039d2 <DMA_CheckFifoParam+0xda>
 8003962:	a201      	add	r2, pc, #4	; (adr r2, 8003968 <DMA_CheckFifoParam+0x70>)
 8003964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003968:	08003979 	.word	0x08003979
 800396c:	0800397f 	.word	0x0800397f
 8003970:	08003979 	.word	0x08003979
 8003974:	08003991 	.word	0x08003991
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	73fb      	strb	r3, [r7, #15]
      break;
 800397c:	e030      	b.n	80039e0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003982:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d025      	beq.n	80039d6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800398e:	e022      	b.n	80039d6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003994:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003998:	d11f      	bne.n	80039da <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800399e:	e01c      	b.n	80039da <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d903      	bls.n	80039ae <DMA_CheckFifoParam+0xb6>
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	2b03      	cmp	r3, #3
 80039aa:	d003      	beq.n	80039b4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80039ac:	e018      	b.n	80039e0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	73fb      	strb	r3, [r7, #15]
      break;
 80039b2:	e015      	b.n	80039e0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d00e      	beq.n	80039de <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	73fb      	strb	r3, [r7, #15]
      break;
 80039c4:	e00b      	b.n	80039de <DMA_CheckFifoParam+0xe6>
      break;
 80039c6:	bf00      	nop
 80039c8:	e00a      	b.n	80039e0 <DMA_CheckFifoParam+0xe8>
      break;
 80039ca:	bf00      	nop
 80039cc:	e008      	b.n	80039e0 <DMA_CheckFifoParam+0xe8>
      break;
 80039ce:	bf00      	nop
 80039d0:	e006      	b.n	80039e0 <DMA_CheckFifoParam+0xe8>
      break;
 80039d2:	bf00      	nop
 80039d4:	e004      	b.n	80039e0 <DMA_CheckFifoParam+0xe8>
      break;
 80039d6:	bf00      	nop
 80039d8:	e002      	b.n	80039e0 <DMA_CheckFifoParam+0xe8>
      break;   
 80039da:	bf00      	nop
 80039dc:	e000      	b.n	80039e0 <DMA_CheckFifoParam+0xe8>
      break;
 80039de:	bf00      	nop
    }
  } 
  
  return status; 
 80039e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3714      	adds	r7, #20
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop

080039f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b089      	sub	sp, #36	; 0x24
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80039fa:	2300      	movs	r3, #0
 80039fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80039fe:	2300      	movs	r3, #0
 8003a00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a02:	2300      	movs	r3, #0
 8003a04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a06:	2300      	movs	r3, #0
 8003a08:	61fb      	str	r3, [r7, #28]
 8003a0a:	e165      	b.n	8003cd8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	fa02 f303 	lsl.w	r3, r2, r3
 8003a14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	697a      	ldr	r2, [r7, #20]
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a20:	693a      	ldr	r2, [r7, #16]
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	429a      	cmp	r2, r3
 8003a26:	f040 8154 	bne.w	8003cd2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	f003 0303 	and.w	r3, r3, #3
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d005      	beq.n	8003a42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d130      	bne.n	8003aa4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	005b      	lsls	r3, r3, #1
 8003a4c:	2203      	movs	r2, #3
 8003a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a52:	43db      	mvns	r3, r3
 8003a54:	69ba      	ldr	r2, [r7, #24]
 8003a56:	4013      	ands	r3, r2
 8003a58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	68da      	ldr	r2, [r3, #12]
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	005b      	lsls	r3, r3, #1
 8003a62:	fa02 f303 	lsl.w	r3, r2, r3
 8003a66:	69ba      	ldr	r2, [r7, #24]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	69ba      	ldr	r2, [r7, #24]
 8003a70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a78:	2201      	movs	r2, #1
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a80:	43db      	mvns	r3, r3
 8003a82:	69ba      	ldr	r2, [r7, #24]
 8003a84:	4013      	ands	r3, r2
 8003a86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	091b      	lsrs	r3, r3, #4
 8003a8e:	f003 0201 	and.w	r2, r3, #1
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	fa02 f303 	lsl.w	r3, r2, r3
 8003a98:	69ba      	ldr	r2, [r7, #24]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	69ba      	ldr	r2, [r7, #24]
 8003aa2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f003 0303 	and.w	r3, r3, #3
 8003aac:	2b03      	cmp	r3, #3
 8003aae:	d017      	beq.n	8003ae0 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	005b      	lsls	r3, r3, #1
 8003aba:	2203      	movs	r2, #3
 8003abc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac0:	43db      	mvns	r3, r3
 8003ac2:	69ba      	ldr	r2, [r7, #24]
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	689a      	ldr	r2, [r3, #8]
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	005b      	lsls	r3, r3, #1
 8003ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad4:	69ba      	ldr	r2, [r7, #24]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	69ba      	ldr	r2, [r7, #24]
 8003ade:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f003 0303 	and.w	r3, r3, #3
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d123      	bne.n	8003b34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	08da      	lsrs	r2, r3, #3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	3208      	adds	r2, #8
 8003af4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003af8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	f003 0307 	and.w	r3, r3, #7
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	220f      	movs	r2, #15
 8003b04:	fa02 f303 	lsl.w	r3, r2, r3
 8003b08:	43db      	mvns	r3, r3
 8003b0a:	69ba      	ldr	r2, [r7, #24]
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	691a      	ldr	r2, [r3, #16]
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	f003 0307 	and.w	r3, r3, #7
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b20:	69ba      	ldr	r2, [r7, #24]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	08da      	lsrs	r2, r3, #3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	3208      	adds	r2, #8
 8003b2e:	69b9      	ldr	r1, [r7, #24]
 8003b30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	005b      	lsls	r3, r3, #1
 8003b3e:	2203      	movs	r2, #3
 8003b40:	fa02 f303 	lsl.w	r3, r2, r3
 8003b44:	43db      	mvns	r3, r3
 8003b46:	69ba      	ldr	r2, [r7, #24]
 8003b48:	4013      	ands	r3, r2
 8003b4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	f003 0203 	and.w	r2, r3, #3
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	005b      	lsls	r3, r3, #1
 8003b58:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5c:	69ba      	ldr	r2, [r7, #24]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	69ba      	ldr	r2, [r7, #24]
 8003b66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	f000 80ae 	beq.w	8003cd2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b76:	2300      	movs	r3, #0
 8003b78:	60fb      	str	r3, [r7, #12]
 8003b7a:	4b5d      	ldr	r3, [pc, #372]	; (8003cf0 <HAL_GPIO_Init+0x300>)
 8003b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b7e:	4a5c      	ldr	r2, [pc, #368]	; (8003cf0 <HAL_GPIO_Init+0x300>)
 8003b80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b84:	6453      	str	r3, [r2, #68]	; 0x44
 8003b86:	4b5a      	ldr	r3, [pc, #360]	; (8003cf0 <HAL_GPIO_Init+0x300>)
 8003b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b8e:	60fb      	str	r3, [r7, #12]
 8003b90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b92:	4a58      	ldr	r2, [pc, #352]	; (8003cf4 <HAL_GPIO_Init+0x304>)
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	089b      	lsrs	r3, r3, #2
 8003b98:	3302      	adds	r3, #2
 8003b9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	f003 0303 	and.w	r3, r3, #3
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	220f      	movs	r2, #15
 8003baa:	fa02 f303 	lsl.w	r3, r2, r3
 8003bae:	43db      	mvns	r3, r3
 8003bb0:	69ba      	ldr	r2, [r7, #24]
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a4f      	ldr	r2, [pc, #316]	; (8003cf8 <HAL_GPIO_Init+0x308>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d025      	beq.n	8003c0a <HAL_GPIO_Init+0x21a>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a4e      	ldr	r2, [pc, #312]	; (8003cfc <HAL_GPIO_Init+0x30c>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d01f      	beq.n	8003c06 <HAL_GPIO_Init+0x216>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a4d      	ldr	r2, [pc, #308]	; (8003d00 <HAL_GPIO_Init+0x310>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d019      	beq.n	8003c02 <HAL_GPIO_Init+0x212>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a4c      	ldr	r2, [pc, #304]	; (8003d04 <HAL_GPIO_Init+0x314>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d013      	beq.n	8003bfe <HAL_GPIO_Init+0x20e>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a4b      	ldr	r2, [pc, #300]	; (8003d08 <HAL_GPIO_Init+0x318>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d00d      	beq.n	8003bfa <HAL_GPIO_Init+0x20a>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a4a      	ldr	r2, [pc, #296]	; (8003d0c <HAL_GPIO_Init+0x31c>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d007      	beq.n	8003bf6 <HAL_GPIO_Init+0x206>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a49      	ldr	r2, [pc, #292]	; (8003d10 <HAL_GPIO_Init+0x320>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d101      	bne.n	8003bf2 <HAL_GPIO_Init+0x202>
 8003bee:	2306      	movs	r3, #6
 8003bf0:	e00c      	b.n	8003c0c <HAL_GPIO_Init+0x21c>
 8003bf2:	2307      	movs	r3, #7
 8003bf4:	e00a      	b.n	8003c0c <HAL_GPIO_Init+0x21c>
 8003bf6:	2305      	movs	r3, #5
 8003bf8:	e008      	b.n	8003c0c <HAL_GPIO_Init+0x21c>
 8003bfa:	2304      	movs	r3, #4
 8003bfc:	e006      	b.n	8003c0c <HAL_GPIO_Init+0x21c>
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e004      	b.n	8003c0c <HAL_GPIO_Init+0x21c>
 8003c02:	2302      	movs	r3, #2
 8003c04:	e002      	b.n	8003c0c <HAL_GPIO_Init+0x21c>
 8003c06:	2301      	movs	r3, #1
 8003c08:	e000      	b.n	8003c0c <HAL_GPIO_Init+0x21c>
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	69fa      	ldr	r2, [r7, #28]
 8003c0e:	f002 0203 	and.w	r2, r2, #3
 8003c12:	0092      	lsls	r2, r2, #2
 8003c14:	4093      	lsls	r3, r2
 8003c16:	69ba      	ldr	r2, [r7, #24]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c1c:	4935      	ldr	r1, [pc, #212]	; (8003cf4 <HAL_GPIO_Init+0x304>)
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	089b      	lsrs	r3, r3, #2
 8003c22:	3302      	adds	r3, #2
 8003c24:	69ba      	ldr	r2, [r7, #24]
 8003c26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c2a:	4b3a      	ldr	r3, [pc, #232]	; (8003d14 <HAL_GPIO_Init+0x324>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	43db      	mvns	r3, r3
 8003c34:	69ba      	ldr	r2, [r7, #24]
 8003c36:	4013      	ands	r3, r2
 8003c38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d003      	beq.n	8003c4e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003c46:	69ba      	ldr	r2, [r7, #24]
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c4e:	4a31      	ldr	r2, [pc, #196]	; (8003d14 <HAL_GPIO_Init+0x324>)
 8003c50:	69bb      	ldr	r3, [r7, #24]
 8003c52:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003c54:	4b2f      	ldr	r3, [pc, #188]	; (8003d14 <HAL_GPIO_Init+0x324>)
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	43db      	mvns	r3, r3
 8003c5e:	69ba      	ldr	r2, [r7, #24]
 8003c60:	4013      	ands	r3, r2
 8003c62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d003      	beq.n	8003c78 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003c70:	69ba      	ldr	r2, [r7, #24]
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	4313      	orrs	r3, r2
 8003c76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c78:	4a26      	ldr	r2, [pc, #152]	; (8003d14 <HAL_GPIO_Init+0x324>)
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c7e:	4b25      	ldr	r3, [pc, #148]	; (8003d14 <HAL_GPIO_Init+0x324>)
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	43db      	mvns	r3, r3
 8003c88:	69ba      	ldr	r2, [r7, #24]
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d003      	beq.n	8003ca2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003c9a:	69ba      	ldr	r2, [r7, #24]
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ca2:	4a1c      	ldr	r2, [pc, #112]	; (8003d14 <HAL_GPIO_Init+0x324>)
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ca8:	4b1a      	ldr	r3, [pc, #104]	; (8003d14 <HAL_GPIO_Init+0x324>)
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	43db      	mvns	r3, r3
 8003cb2:	69ba      	ldr	r2, [r7, #24]
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d003      	beq.n	8003ccc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003cc4:	69ba      	ldr	r2, [r7, #24]
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ccc:	4a11      	ldr	r2, [pc, #68]	; (8003d14 <HAL_GPIO_Init+0x324>)
 8003cce:	69bb      	ldr	r3, [r7, #24]
 8003cd0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	3301      	adds	r3, #1
 8003cd6:	61fb      	str	r3, [r7, #28]
 8003cd8:	69fb      	ldr	r3, [r7, #28]
 8003cda:	2b0f      	cmp	r3, #15
 8003cdc:	f67f ae96 	bls.w	8003a0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ce0:	bf00      	nop
 8003ce2:	bf00      	nop
 8003ce4:	3724      	adds	r7, #36	; 0x24
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	40023800 	.word	0x40023800
 8003cf4:	40013800 	.word	0x40013800
 8003cf8:	40020000 	.word	0x40020000
 8003cfc:	40020400 	.word	0x40020400
 8003d00:	40020800 	.word	0x40020800
 8003d04:	40020c00 	.word	0x40020c00
 8003d08:	40021000 	.word	0x40021000
 8003d0c:	40021400 	.word	0x40021400
 8003d10:	40021800 	.word	0x40021800
 8003d14:	40013c00 	.word	0x40013c00

08003d18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	460b      	mov	r3, r1
 8003d22:	807b      	strh	r3, [r7, #2]
 8003d24:	4613      	mov	r3, r2
 8003d26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d28:	787b      	ldrb	r3, [r7, #1]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d003      	beq.n	8003d36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d2e:	887a      	ldrh	r2, [r7, #2]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d34:	e003      	b.n	8003d3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d36:	887b      	ldrh	r3, [r7, #2]
 8003d38:	041a      	lsls	r2, r3, #16
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	619a      	str	r2, [r3, #24]
}
 8003d3e:	bf00      	nop
 8003d40:	370c      	adds	r7, #12
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr
	...

08003d4c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	4603      	mov	r3, r0
 8003d54:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003d56:	4b08      	ldr	r3, [pc, #32]	; (8003d78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d58:	695a      	ldr	r2, [r3, #20]
 8003d5a:	88fb      	ldrh	r3, [r7, #6]
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d006      	beq.n	8003d70 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003d62:	4a05      	ldr	r2, [pc, #20]	; (8003d78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d64:	88fb      	ldrh	r3, [r7, #6]
 8003d66:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003d68:	88fb      	ldrh	r3, [r7, #6]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7fd faca 	bl	8001304 <HAL_GPIO_EXTI_Callback>
  }
}
 8003d70:	bf00      	nop
 8003d72:	3708      	adds	r7, #8
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	40013c00 	.word	0x40013c00

08003d7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d101      	bne.n	8003d8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e12b      	b.n	8003fe6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d106      	bne.n	8003da8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f7fe f9da 	bl	800215c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2224      	movs	r2, #36	; 0x24
 8003dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f022 0201 	bic.w	r2, r2, #1
 8003dbe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003dce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003dde:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003de0:	f002 fd0e 	bl	8006800 <HAL_RCC_GetPCLK1Freq>
 8003de4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	4a81      	ldr	r2, [pc, #516]	; (8003ff0 <HAL_I2C_Init+0x274>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d807      	bhi.n	8003e00 <HAL_I2C_Init+0x84>
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	4a80      	ldr	r2, [pc, #512]	; (8003ff4 <HAL_I2C_Init+0x278>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	bf94      	ite	ls
 8003df8:	2301      	movls	r3, #1
 8003dfa:	2300      	movhi	r3, #0
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	e006      	b.n	8003e0e <HAL_I2C_Init+0x92>
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	4a7d      	ldr	r2, [pc, #500]	; (8003ff8 <HAL_I2C_Init+0x27c>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	bf94      	ite	ls
 8003e08:	2301      	movls	r3, #1
 8003e0a:	2300      	movhi	r3, #0
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d001      	beq.n	8003e16 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e0e7      	b.n	8003fe6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	4a78      	ldr	r2, [pc, #480]	; (8003ffc <HAL_I2C_Init+0x280>)
 8003e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e1e:	0c9b      	lsrs	r3, r3, #18
 8003e20:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	68ba      	ldr	r2, [r7, #8]
 8003e32:	430a      	orrs	r2, r1
 8003e34:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	6a1b      	ldr	r3, [r3, #32]
 8003e3c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	4a6a      	ldr	r2, [pc, #424]	; (8003ff0 <HAL_I2C_Init+0x274>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d802      	bhi.n	8003e50 <HAL_I2C_Init+0xd4>
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	3301      	adds	r3, #1
 8003e4e:	e009      	b.n	8003e64 <HAL_I2C_Init+0xe8>
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003e56:	fb02 f303 	mul.w	r3, r2, r3
 8003e5a:	4a69      	ldr	r2, [pc, #420]	; (8004000 <HAL_I2C_Init+0x284>)
 8003e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e60:	099b      	lsrs	r3, r3, #6
 8003e62:	3301      	adds	r3, #1
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	6812      	ldr	r2, [r2, #0]
 8003e68:	430b      	orrs	r3, r1
 8003e6a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	69db      	ldr	r3, [r3, #28]
 8003e72:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003e76:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	495c      	ldr	r1, [pc, #368]	; (8003ff0 <HAL_I2C_Init+0x274>)
 8003e80:	428b      	cmp	r3, r1
 8003e82:	d819      	bhi.n	8003eb8 <HAL_I2C_Init+0x13c>
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	1e59      	subs	r1, r3, #1
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	005b      	lsls	r3, r3, #1
 8003e8e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e92:	1c59      	adds	r1, r3, #1
 8003e94:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003e98:	400b      	ands	r3, r1
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d00a      	beq.n	8003eb4 <HAL_I2C_Init+0x138>
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	1e59      	subs	r1, r3, #1
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	005b      	lsls	r3, r3, #1
 8003ea8:	fbb1 f3f3 	udiv	r3, r1, r3
 8003eac:	3301      	adds	r3, #1
 8003eae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003eb2:	e051      	b.n	8003f58 <HAL_I2C_Init+0x1dc>
 8003eb4:	2304      	movs	r3, #4
 8003eb6:	e04f      	b.n	8003f58 <HAL_I2C_Init+0x1dc>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d111      	bne.n	8003ee4 <HAL_I2C_Init+0x168>
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	1e58      	subs	r0, r3, #1
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6859      	ldr	r1, [r3, #4]
 8003ec8:	460b      	mov	r3, r1
 8003eca:	005b      	lsls	r3, r3, #1
 8003ecc:	440b      	add	r3, r1
 8003ece:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	bf0c      	ite	eq
 8003edc:	2301      	moveq	r3, #1
 8003ede:	2300      	movne	r3, #0
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	e012      	b.n	8003f0a <HAL_I2C_Init+0x18e>
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	1e58      	subs	r0, r3, #1
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6859      	ldr	r1, [r3, #4]
 8003eec:	460b      	mov	r3, r1
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	440b      	add	r3, r1
 8003ef2:	0099      	lsls	r1, r3, #2
 8003ef4:	440b      	add	r3, r1
 8003ef6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003efa:	3301      	adds	r3, #1
 8003efc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	bf0c      	ite	eq
 8003f04:	2301      	moveq	r3, #1
 8003f06:	2300      	movne	r3, #0
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d001      	beq.n	8003f12 <HAL_I2C_Init+0x196>
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e022      	b.n	8003f58 <HAL_I2C_Init+0x1dc>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d10e      	bne.n	8003f38 <HAL_I2C_Init+0x1bc>
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	1e58      	subs	r0, r3, #1
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6859      	ldr	r1, [r3, #4]
 8003f22:	460b      	mov	r3, r1
 8003f24:	005b      	lsls	r3, r3, #1
 8003f26:	440b      	add	r3, r1
 8003f28:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f2c:	3301      	adds	r3, #1
 8003f2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f36:	e00f      	b.n	8003f58 <HAL_I2C_Init+0x1dc>
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	1e58      	subs	r0, r3, #1
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6859      	ldr	r1, [r3, #4]
 8003f40:	460b      	mov	r3, r1
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	440b      	add	r3, r1
 8003f46:	0099      	lsls	r1, r3, #2
 8003f48:	440b      	add	r3, r1
 8003f4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f4e:	3301      	adds	r3, #1
 8003f50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f58:	6879      	ldr	r1, [r7, #4]
 8003f5a:	6809      	ldr	r1, [r1, #0]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	69da      	ldr	r2, [r3, #28]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a1b      	ldr	r3, [r3, #32]
 8003f72:	431a      	orrs	r2, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	430a      	orrs	r2, r1
 8003f7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003f86:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	6911      	ldr	r1, [r2, #16]
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	68d2      	ldr	r2, [r2, #12]
 8003f92:	4311      	orrs	r1, r2
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	6812      	ldr	r2, [r2, #0]
 8003f98:	430b      	orrs	r3, r1
 8003f9a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	695a      	ldr	r2, [r3, #20]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	699b      	ldr	r3, [r3, #24]
 8003fae:	431a      	orrs	r2, r3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	430a      	orrs	r2, r1
 8003fb6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f042 0201 	orr.w	r2, r2, #1
 8003fc6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2220      	movs	r2, #32
 8003fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003fe4:	2300      	movs	r3, #0
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3710      	adds	r7, #16
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	000186a0 	.word	0x000186a0
 8003ff4:	001e847f 	.word	0x001e847f
 8003ff8:	003d08ff 	.word	0x003d08ff
 8003ffc:	431bde83 	.word	0x431bde83
 8004000:	10624dd3 	.word	0x10624dd3

08004004 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b088      	sub	sp, #32
 8004008:	af02      	add	r7, sp, #8
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	607a      	str	r2, [r7, #4]
 800400e:	461a      	mov	r2, r3
 8004010:	460b      	mov	r3, r1
 8004012:	817b      	strh	r3, [r7, #10]
 8004014:	4613      	mov	r3, r2
 8004016:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004018:	f7ff f90c 	bl	8003234 <HAL_GetTick>
 800401c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004024:	b2db      	uxtb	r3, r3
 8004026:	2b20      	cmp	r3, #32
 8004028:	f040 80e0 	bne.w	80041ec <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	9300      	str	r3, [sp, #0]
 8004030:	2319      	movs	r3, #25
 8004032:	2201      	movs	r2, #1
 8004034:	4970      	ldr	r1, [pc, #448]	; (80041f8 <HAL_I2C_Master_Transmit+0x1f4>)
 8004036:	68f8      	ldr	r0, [r7, #12]
 8004038:	f001 ffa8 	bl	8005f8c <I2C_WaitOnFlagUntilTimeout>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d001      	beq.n	8004046 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004042:	2302      	movs	r3, #2
 8004044:	e0d3      	b.n	80041ee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800404c:	2b01      	cmp	r3, #1
 800404e:	d101      	bne.n	8004054 <HAL_I2C_Master_Transmit+0x50>
 8004050:	2302      	movs	r3, #2
 8004052:	e0cc      	b.n	80041ee <HAL_I2C_Master_Transmit+0x1ea>
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 0301 	and.w	r3, r3, #1
 8004066:	2b01      	cmp	r3, #1
 8004068:	d007      	beq.n	800407a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f042 0201 	orr.w	r2, r2, #1
 8004078:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004088:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2221      	movs	r2, #33	; 0x21
 800408e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2210      	movs	r2, #16
 8004096:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2200      	movs	r2, #0
 800409e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	893a      	ldrh	r2, [r7, #8]
 80040aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040b0:	b29a      	uxth	r2, r3
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	4a50      	ldr	r2, [pc, #320]	; (80041fc <HAL_I2C_Master_Transmit+0x1f8>)
 80040ba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80040bc:	8979      	ldrh	r1, [r7, #10]
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	6a3a      	ldr	r2, [r7, #32]
 80040c2:	68f8      	ldr	r0, [r7, #12]
 80040c4:	f001 fd6a 	bl	8005b9c <I2C_MasterRequestWrite>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d001      	beq.n	80040d2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e08d      	b.n	80041ee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040d2:	2300      	movs	r3, #0
 80040d4:	613b      	str	r3, [r7, #16]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	695b      	ldr	r3, [r3, #20]
 80040dc:	613b      	str	r3, [r7, #16]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	699b      	ldr	r3, [r3, #24]
 80040e4:	613b      	str	r3, [r7, #16]
 80040e6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80040e8:	e066      	b.n	80041b8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040ea:	697a      	ldr	r2, [r7, #20]
 80040ec:	6a39      	ldr	r1, [r7, #32]
 80040ee:	68f8      	ldr	r0, [r7, #12]
 80040f0:	f002 f822 	bl	8006138 <I2C_WaitOnTXEFlagUntilTimeout>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00d      	beq.n	8004116 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fe:	2b04      	cmp	r3, #4
 8004100:	d107      	bne.n	8004112 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004110:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e06b      	b.n	80041ee <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411a:	781a      	ldrb	r2, [r3, #0]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004126:	1c5a      	adds	r2, r3, #1
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004130:	b29b      	uxth	r3, r3
 8004132:	3b01      	subs	r3, #1
 8004134:	b29a      	uxth	r2, r3
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800413e:	3b01      	subs	r3, #1
 8004140:	b29a      	uxth	r2, r3
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	695b      	ldr	r3, [r3, #20]
 800414c:	f003 0304 	and.w	r3, r3, #4
 8004150:	2b04      	cmp	r3, #4
 8004152:	d11b      	bne.n	800418c <HAL_I2C_Master_Transmit+0x188>
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004158:	2b00      	cmp	r3, #0
 800415a:	d017      	beq.n	800418c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004160:	781a      	ldrb	r2, [r3, #0]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416c:	1c5a      	adds	r2, r3, #1
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004176:	b29b      	uxth	r3, r3
 8004178:	3b01      	subs	r3, #1
 800417a:	b29a      	uxth	r2, r3
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004184:	3b01      	subs	r3, #1
 8004186:	b29a      	uxth	r2, r3
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800418c:	697a      	ldr	r2, [r7, #20]
 800418e:	6a39      	ldr	r1, [r7, #32]
 8004190:	68f8      	ldr	r0, [r7, #12]
 8004192:	f002 f812 	bl	80061ba <I2C_WaitOnBTFFlagUntilTimeout>
 8004196:	4603      	mov	r3, r0
 8004198:	2b00      	cmp	r3, #0
 800419a:	d00d      	beq.n	80041b8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a0:	2b04      	cmp	r3, #4
 80041a2:	d107      	bne.n	80041b4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041b2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e01a      	b.n	80041ee <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d194      	bne.n	80040ea <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2220      	movs	r2, #32
 80041d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2200      	movs	r2, #0
 80041dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2200      	movs	r2, #0
 80041e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80041e8:	2300      	movs	r3, #0
 80041ea:	e000      	b.n	80041ee <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80041ec:	2302      	movs	r3, #2
  }
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3718      	adds	r7, #24
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	00100002 	.word	0x00100002
 80041fc:	ffff0000 	.word	0xffff0000

08004200 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b08c      	sub	sp, #48	; 0x30
 8004204:	af02      	add	r7, sp, #8
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	607a      	str	r2, [r7, #4]
 800420a:	461a      	mov	r2, r3
 800420c:	460b      	mov	r3, r1
 800420e:	817b      	strh	r3, [r7, #10]
 8004210:	4613      	mov	r3, r2
 8004212:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004214:	f7ff f80e 	bl	8003234 <HAL_GetTick>
 8004218:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004220:	b2db      	uxtb	r3, r3
 8004222:	2b20      	cmp	r3, #32
 8004224:	f040 820b 	bne.w	800463e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422a:	9300      	str	r3, [sp, #0]
 800422c:	2319      	movs	r3, #25
 800422e:	2201      	movs	r2, #1
 8004230:	497c      	ldr	r1, [pc, #496]	; (8004424 <HAL_I2C_Master_Receive+0x224>)
 8004232:	68f8      	ldr	r0, [r7, #12]
 8004234:	f001 feaa 	bl	8005f8c <I2C_WaitOnFlagUntilTimeout>
 8004238:	4603      	mov	r3, r0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d001      	beq.n	8004242 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800423e:	2302      	movs	r3, #2
 8004240:	e1fe      	b.n	8004640 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004248:	2b01      	cmp	r3, #1
 800424a:	d101      	bne.n	8004250 <HAL_I2C_Master_Receive+0x50>
 800424c:	2302      	movs	r3, #2
 800424e:	e1f7      	b.n	8004640 <HAL_I2C_Master_Receive+0x440>
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0301 	and.w	r3, r3, #1
 8004262:	2b01      	cmp	r3, #1
 8004264:	d007      	beq.n	8004276 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f042 0201 	orr.w	r2, r2, #1
 8004274:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004284:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2222      	movs	r2, #34	; 0x22
 800428a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2210      	movs	r2, #16
 8004292:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2200      	movs	r2, #0
 800429a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	893a      	ldrh	r2, [r7, #8]
 80042a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ac:	b29a      	uxth	r2, r3
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	4a5c      	ldr	r2, [pc, #368]	; (8004428 <HAL_I2C_Master_Receive+0x228>)
 80042b6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80042b8:	8979      	ldrh	r1, [r7, #10]
 80042ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042be:	68f8      	ldr	r0, [r7, #12]
 80042c0:	f001 fcee 	bl	8005ca0 <I2C_MasterRequestRead>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d001      	beq.n	80042ce <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e1b8      	b.n	8004640 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d113      	bne.n	80042fe <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042d6:	2300      	movs	r3, #0
 80042d8:	623b      	str	r3, [r7, #32]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	695b      	ldr	r3, [r3, #20]
 80042e0:	623b      	str	r3, [r7, #32]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	699b      	ldr	r3, [r3, #24]
 80042e8:	623b      	str	r3, [r7, #32]
 80042ea:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042fa:	601a      	str	r2, [r3, #0]
 80042fc:	e18c      	b.n	8004618 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004302:	2b01      	cmp	r3, #1
 8004304:	d11b      	bne.n	800433e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004314:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004316:	2300      	movs	r3, #0
 8004318:	61fb      	str	r3, [r7, #28]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	695b      	ldr	r3, [r3, #20]
 8004320:	61fb      	str	r3, [r7, #28]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	699b      	ldr	r3, [r3, #24]
 8004328:	61fb      	str	r3, [r7, #28]
 800432a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800433a:	601a      	str	r2, [r3, #0]
 800433c:	e16c      	b.n	8004618 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004342:	2b02      	cmp	r3, #2
 8004344:	d11b      	bne.n	800437e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004354:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004364:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004366:	2300      	movs	r3, #0
 8004368:	61bb      	str	r3, [r7, #24]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	695b      	ldr	r3, [r3, #20]
 8004370:	61bb      	str	r3, [r7, #24]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	699b      	ldr	r3, [r3, #24]
 8004378:	61bb      	str	r3, [r7, #24]
 800437a:	69bb      	ldr	r3, [r7, #24]
 800437c:	e14c      	b.n	8004618 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800438c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800438e:	2300      	movs	r3, #0
 8004390:	617b      	str	r3, [r7, #20]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	695b      	ldr	r3, [r3, #20]
 8004398:	617b      	str	r3, [r7, #20]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	699b      	ldr	r3, [r3, #24]
 80043a0:	617b      	str	r3, [r7, #20]
 80043a2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80043a4:	e138      	b.n	8004618 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043aa:	2b03      	cmp	r3, #3
 80043ac:	f200 80f1 	bhi.w	8004592 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d123      	bne.n	8004400 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80043bc:	68f8      	ldr	r0, [r7, #12]
 80043be:	f001 ff6f 	bl	80062a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d001      	beq.n	80043cc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e139      	b.n	8004640 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	691a      	ldr	r2, [r3, #16]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d6:	b2d2      	uxtb	r2, r2
 80043d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043de:	1c5a      	adds	r2, r3, #1
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043e8:	3b01      	subs	r3, #1
 80043ea:	b29a      	uxth	r2, r3
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	3b01      	subs	r3, #1
 80043f8:	b29a      	uxth	r2, r3
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80043fe:	e10b      	b.n	8004618 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004404:	2b02      	cmp	r3, #2
 8004406:	d14e      	bne.n	80044a6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440a:	9300      	str	r3, [sp, #0]
 800440c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800440e:	2200      	movs	r2, #0
 8004410:	4906      	ldr	r1, [pc, #24]	; (800442c <HAL_I2C_Master_Receive+0x22c>)
 8004412:	68f8      	ldr	r0, [r7, #12]
 8004414:	f001 fdba 	bl	8005f8c <I2C_WaitOnFlagUntilTimeout>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d008      	beq.n	8004430 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e10e      	b.n	8004640 <HAL_I2C_Master_Receive+0x440>
 8004422:	bf00      	nop
 8004424:	00100002 	.word	0x00100002
 8004428:	ffff0000 	.word	0xffff0000
 800442c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800443e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	691a      	ldr	r2, [r3, #16]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444a:	b2d2      	uxtb	r2, r2
 800444c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004452:	1c5a      	adds	r2, r3, #1
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800445c:	3b01      	subs	r3, #1
 800445e:	b29a      	uxth	r2, r3
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004468:	b29b      	uxth	r3, r3
 800446a:	3b01      	subs	r3, #1
 800446c:	b29a      	uxth	r2, r3
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	691a      	ldr	r2, [r3, #16]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447c:	b2d2      	uxtb	r2, r2
 800447e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004484:	1c5a      	adds	r2, r3, #1
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800448e:	3b01      	subs	r3, #1
 8004490:	b29a      	uxth	r2, r3
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800449a:	b29b      	uxth	r3, r3
 800449c:	3b01      	subs	r3, #1
 800449e:	b29a      	uxth	r2, r3
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80044a4:	e0b8      	b.n	8004618 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80044a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a8:	9300      	str	r3, [sp, #0]
 80044aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ac:	2200      	movs	r2, #0
 80044ae:	4966      	ldr	r1, [pc, #408]	; (8004648 <HAL_I2C_Master_Receive+0x448>)
 80044b0:	68f8      	ldr	r0, [r7, #12]
 80044b2:	f001 fd6b 	bl	8005f8c <I2C_WaitOnFlagUntilTimeout>
 80044b6:	4603      	mov	r3, r0
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d001      	beq.n	80044c0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e0bf      	b.n	8004640 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	691a      	ldr	r2, [r3, #16]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044da:	b2d2      	uxtb	r2, r2
 80044dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e2:	1c5a      	adds	r2, r3, #1
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044ec:	3b01      	subs	r3, #1
 80044ee:	b29a      	uxth	r2, r3
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	3b01      	subs	r3, #1
 80044fc:	b29a      	uxth	r2, r3
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004504:	9300      	str	r3, [sp, #0]
 8004506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004508:	2200      	movs	r2, #0
 800450a:	494f      	ldr	r1, [pc, #316]	; (8004648 <HAL_I2C_Master_Receive+0x448>)
 800450c:	68f8      	ldr	r0, [r7, #12]
 800450e:	f001 fd3d 	bl	8005f8c <I2C_WaitOnFlagUntilTimeout>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d001      	beq.n	800451c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e091      	b.n	8004640 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800452a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	691a      	ldr	r2, [r3, #16]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004536:	b2d2      	uxtb	r2, r2
 8004538:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453e:	1c5a      	adds	r2, r3, #1
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004548:	3b01      	subs	r3, #1
 800454a:	b29a      	uxth	r2, r3
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004554:	b29b      	uxth	r3, r3
 8004556:	3b01      	subs	r3, #1
 8004558:	b29a      	uxth	r2, r3
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	691a      	ldr	r2, [r3, #16]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004568:	b2d2      	uxtb	r2, r2
 800456a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004570:	1c5a      	adds	r2, r3, #1
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800457a:	3b01      	subs	r3, #1
 800457c:	b29a      	uxth	r2, r3
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004586:	b29b      	uxth	r3, r3
 8004588:	3b01      	subs	r3, #1
 800458a:	b29a      	uxth	r2, r3
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004590:	e042      	b.n	8004618 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004592:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004594:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004596:	68f8      	ldr	r0, [r7, #12]
 8004598:	f001 fe82 	bl	80062a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800459c:	4603      	mov	r3, r0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d001      	beq.n	80045a6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e04c      	b.n	8004640 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	691a      	ldr	r2, [r3, #16]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b0:	b2d2      	uxtb	r2, r2
 80045b2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b8:	1c5a      	adds	r2, r3, #1
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045c2:	3b01      	subs	r3, #1
 80045c4:	b29a      	uxth	r2, r3
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	3b01      	subs	r3, #1
 80045d2:	b29a      	uxth	r2, r3
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	695b      	ldr	r3, [r3, #20]
 80045de:	f003 0304 	and.w	r3, r3, #4
 80045e2:	2b04      	cmp	r3, #4
 80045e4:	d118      	bne.n	8004618 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	691a      	ldr	r2, [r3, #16]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f0:	b2d2      	uxtb	r2, r2
 80045f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f8:	1c5a      	adds	r2, r3, #1
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004602:	3b01      	subs	r3, #1
 8004604:	b29a      	uxth	r2, r3
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800460e:	b29b      	uxth	r3, r3
 8004610:	3b01      	subs	r3, #1
 8004612:	b29a      	uxth	r2, r3
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800461c:	2b00      	cmp	r3, #0
 800461e:	f47f aec2 	bne.w	80043a6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2220      	movs	r2, #32
 8004626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2200      	movs	r2, #0
 800462e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2200      	movs	r2, #0
 8004636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800463a:	2300      	movs	r3, #0
 800463c:	e000      	b.n	8004640 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800463e:	2302      	movs	r3, #2
  }
}
 8004640:	4618      	mov	r0, r3
 8004642:	3728      	adds	r7, #40	; 0x28
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}
 8004648:	00010004 	.word	0x00010004

0800464c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b088      	sub	sp, #32
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004654:	2300      	movs	r3, #0
 8004656:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004664:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800466c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004674:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004676:	7bfb      	ldrb	r3, [r7, #15]
 8004678:	2b10      	cmp	r3, #16
 800467a:	d003      	beq.n	8004684 <HAL_I2C_EV_IRQHandler+0x38>
 800467c:	7bfb      	ldrb	r3, [r7, #15]
 800467e:	2b40      	cmp	r3, #64	; 0x40
 8004680:	f040 80bd 	bne.w	80047fe <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	699b      	ldr	r3, [r3, #24]
 800468a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	695b      	ldr	r3, [r3, #20]
 8004692:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	f003 0301 	and.w	r3, r3, #1
 800469a:	2b00      	cmp	r3, #0
 800469c:	d10d      	bne.n	80046ba <HAL_I2C_EV_IRQHandler+0x6e>
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80046a4:	d003      	beq.n	80046ae <HAL_I2C_EV_IRQHandler+0x62>
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80046ac:	d101      	bne.n	80046b2 <HAL_I2C_EV_IRQHandler+0x66>
 80046ae:	2301      	movs	r3, #1
 80046b0:	e000      	b.n	80046b4 <HAL_I2C_EV_IRQHandler+0x68>
 80046b2:	2300      	movs	r3, #0
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	f000 812e 	beq.w	8004916 <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	f003 0301 	and.w	r3, r3, #1
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d00c      	beq.n	80046de <HAL_I2C_EV_IRQHandler+0x92>
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	0a5b      	lsrs	r3, r3, #9
 80046c8:	f003 0301 	and.w	r3, r3, #1
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d006      	beq.n	80046de <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f001 fe6a 	bl	80063aa <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f000 fcbb 	bl	8005052 <I2C_Master_SB>
 80046dc:	e08e      	b.n	80047fc <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	08db      	lsrs	r3, r3, #3
 80046e2:	f003 0301 	and.w	r3, r3, #1
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d009      	beq.n	80046fe <HAL_I2C_EV_IRQHandler+0xb2>
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	0a5b      	lsrs	r3, r3, #9
 80046ee:	f003 0301 	and.w	r3, r3, #1
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d003      	beq.n	80046fe <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f000 fd31 	bl	800515e <I2C_Master_ADD10>
 80046fc:	e07e      	b.n	80047fc <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	085b      	lsrs	r3, r3, #1
 8004702:	f003 0301 	and.w	r3, r3, #1
 8004706:	2b00      	cmp	r3, #0
 8004708:	d009      	beq.n	800471e <HAL_I2C_EV_IRQHandler+0xd2>
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	0a5b      	lsrs	r3, r3, #9
 800470e:	f003 0301 	and.w	r3, r3, #1
 8004712:	2b00      	cmp	r3, #0
 8004714:	d003      	beq.n	800471e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f000 fd4b 	bl	80051b2 <I2C_Master_ADDR>
 800471c:	e06e      	b.n	80047fc <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	089b      	lsrs	r3, r3, #2
 8004722:	f003 0301 	and.w	r3, r3, #1
 8004726:	2b00      	cmp	r3, #0
 8004728:	d037      	beq.n	800479a <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004734:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004738:	f000 80ef 	beq.w	800491a <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	09db      	lsrs	r3, r3, #7
 8004740:	f003 0301 	and.w	r3, r3, #1
 8004744:	2b00      	cmp	r3, #0
 8004746:	d00f      	beq.n	8004768 <HAL_I2C_EV_IRQHandler+0x11c>
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	0a9b      	lsrs	r3, r3, #10
 800474c:	f003 0301 	and.w	r3, r3, #1
 8004750:	2b00      	cmp	r3, #0
 8004752:	d009      	beq.n	8004768 <HAL_I2C_EV_IRQHandler+0x11c>
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	089b      	lsrs	r3, r3, #2
 8004758:	f003 0301 	and.w	r3, r3, #1
 800475c:	2b00      	cmp	r3, #0
 800475e:	d103      	bne.n	8004768 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f000 f948 	bl	80049f6 <I2C_MasterTransmit_TXE>
 8004766:	e049      	b.n	80047fc <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004768:	69fb      	ldr	r3, [r7, #28]
 800476a:	089b      	lsrs	r3, r3, #2
 800476c:	f003 0301 	and.w	r3, r3, #1
 8004770:	2b00      	cmp	r3, #0
 8004772:	f000 80d2 	beq.w	800491a <HAL_I2C_EV_IRQHandler+0x2ce>
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	0a5b      	lsrs	r3, r3, #9
 800477a:	f003 0301 	and.w	r3, r3, #1
 800477e:	2b00      	cmp	r3, #0
 8004780:	f000 80cb 	beq.w	800491a <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8004784:	7bfb      	ldrb	r3, [r7, #15]
 8004786:	2b10      	cmp	r3, #16
 8004788:	d103      	bne.n	8004792 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f000 f9cf 	bl	8004b2e <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004790:	e0c3      	b.n	800491a <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f000 fa33 	bl	8004bfe <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004798:	e0bf      	b.n	800491a <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047a8:	f000 80b7 	beq.w	800491a <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	099b      	lsrs	r3, r3, #6
 80047b0:	f003 0301 	and.w	r3, r3, #1
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d00f      	beq.n	80047d8 <HAL_I2C_EV_IRQHandler+0x18c>
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	0a9b      	lsrs	r3, r3, #10
 80047bc:	f003 0301 	and.w	r3, r3, #1
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d009      	beq.n	80047d8 <HAL_I2C_EV_IRQHandler+0x18c>
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	089b      	lsrs	r3, r3, #2
 80047c8:	f003 0301 	and.w	r3, r3, #1
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d103      	bne.n	80047d8 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f000 faa3 	bl	8004d1c <I2C_MasterReceive_RXNE>
 80047d6:	e011      	b.n	80047fc <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047d8:	69fb      	ldr	r3, [r7, #28]
 80047da:	089b      	lsrs	r3, r3, #2
 80047dc:	f003 0301 	and.w	r3, r3, #1
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	f000 809a 	beq.w	800491a <HAL_I2C_EV_IRQHandler+0x2ce>
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	0a5b      	lsrs	r3, r3, #9
 80047ea:	f003 0301 	and.w	r3, r3, #1
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	f000 8093 	beq.w	800491a <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f000 fb42 	bl	8004e7e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047fa:	e08e      	b.n	800491a <HAL_I2C_EV_IRQHandler+0x2ce>
 80047fc:	e08d      	b.n	800491a <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004802:	2b00      	cmp	r3, #0
 8004804:	d004      	beq.n	8004810 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	695b      	ldr	r3, [r3, #20]
 800480c:	61fb      	str	r3, [r7, #28]
 800480e:	e007      	b.n	8004820 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	699b      	ldr	r3, [r3, #24]
 8004816:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	695b      	ldr	r3, [r3, #20]
 800481e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004820:	69fb      	ldr	r3, [r7, #28]
 8004822:	085b      	lsrs	r3, r3, #1
 8004824:	f003 0301 	and.w	r3, r3, #1
 8004828:	2b00      	cmp	r3, #0
 800482a:	d012      	beq.n	8004852 <HAL_I2C_EV_IRQHandler+0x206>
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	0a5b      	lsrs	r3, r3, #9
 8004830:	f003 0301 	and.w	r3, r3, #1
 8004834:	2b00      	cmp	r3, #0
 8004836:	d00c      	beq.n	8004852 <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483c:	2b00      	cmp	r3, #0
 800483e:	d003      	beq.n	8004848 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	699b      	ldr	r3, [r3, #24]
 8004846:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004848:	69b9      	ldr	r1, [r7, #24]
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f000 ff00 	bl	8005650 <I2C_Slave_ADDR>
 8004850:	e066      	b.n	8004920 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	091b      	lsrs	r3, r3, #4
 8004856:	f003 0301 	and.w	r3, r3, #1
 800485a:	2b00      	cmp	r3, #0
 800485c:	d009      	beq.n	8004872 <HAL_I2C_EV_IRQHandler+0x226>
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	0a5b      	lsrs	r3, r3, #9
 8004862:	f003 0301 	and.w	r3, r3, #1
 8004866:	2b00      	cmp	r3, #0
 8004868:	d003      	beq.n	8004872 <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f000 ff34 	bl	80056d8 <I2C_Slave_STOPF>
 8004870:	e056      	b.n	8004920 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004872:	7bbb      	ldrb	r3, [r7, #14]
 8004874:	2b21      	cmp	r3, #33	; 0x21
 8004876:	d002      	beq.n	800487e <HAL_I2C_EV_IRQHandler+0x232>
 8004878:	7bbb      	ldrb	r3, [r7, #14]
 800487a:	2b29      	cmp	r3, #41	; 0x29
 800487c:	d125      	bne.n	80048ca <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800487e:	69fb      	ldr	r3, [r7, #28]
 8004880:	09db      	lsrs	r3, r3, #7
 8004882:	f003 0301 	and.w	r3, r3, #1
 8004886:	2b00      	cmp	r3, #0
 8004888:	d00f      	beq.n	80048aa <HAL_I2C_EV_IRQHandler+0x25e>
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	0a9b      	lsrs	r3, r3, #10
 800488e:	f003 0301 	and.w	r3, r3, #1
 8004892:	2b00      	cmp	r3, #0
 8004894:	d009      	beq.n	80048aa <HAL_I2C_EV_IRQHandler+0x25e>
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	089b      	lsrs	r3, r3, #2
 800489a:	f003 0301 	and.w	r3, r3, #1
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d103      	bne.n	80048aa <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f000 fe16 	bl	80054d4 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80048a8:	e039      	b.n	800491e <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048aa:	69fb      	ldr	r3, [r7, #28]
 80048ac:	089b      	lsrs	r3, r3, #2
 80048ae:	f003 0301 	and.w	r3, r3, #1
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d033      	beq.n	800491e <HAL_I2C_EV_IRQHandler+0x2d2>
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	0a5b      	lsrs	r3, r3, #9
 80048ba:	f003 0301 	and.w	r3, r3, #1
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d02d      	beq.n	800491e <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 fe43 	bl	800554e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80048c8:	e029      	b.n	800491e <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	099b      	lsrs	r3, r3, #6
 80048ce:	f003 0301 	and.w	r3, r3, #1
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d00f      	beq.n	80048f6 <HAL_I2C_EV_IRQHandler+0x2aa>
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	0a9b      	lsrs	r3, r3, #10
 80048da:	f003 0301 	and.w	r3, r3, #1
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d009      	beq.n	80048f6 <HAL_I2C_EV_IRQHandler+0x2aa>
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	089b      	lsrs	r3, r3, #2
 80048e6:	f003 0301 	and.w	r3, r3, #1
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d103      	bne.n	80048f6 <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 fe4e 	bl	8005590 <I2C_SlaveReceive_RXNE>
 80048f4:	e014      	b.n	8004920 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	089b      	lsrs	r3, r3, #2
 80048fa:	f003 0301 	and.w	r3, r3, #1
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d00e      	beq.n	8004920 <HAL_I2C_EV_IRQHandler+0x2d4>
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	0a5b      	lsrs	r3, r3, #9
 8004906:	f003 0301 	and.w	r3, r3, #1
 800490a:	2b00      	cmp	r3, #0
 800490c:	d008      	beq.n	8004920 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 fe7c 	bl	800560c <I2C_SlaveReceive_BTF>
 8004914:	e004      	b.n	8004920 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 8004916:	bf00      	nop
 8004918:	e002      	b.n	8004920 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800491a:	bf00      	nop
 800491c:	e000      	b.n	8004920 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800491e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004920:	3720      	adds	r7, #32
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}

08004926 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004926:	b480      	push	{r7}
 8004928:	b083      	sub	sp, #12
 800492a:	af00      	add	r7, sp, #0
 800492c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800492e:	bf00      	nop
 8004930:	370c      	adds	r7, #12
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr

0800493a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800493a:	b480      	push	{r7}
 800493c:	b083      	sub	sp, #12
 800493e:	af00      	add	r7, sp, #0
 8004940:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004942:	bf00      	nop
 8004944:	370c      	adds	r7, #12
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr

0800494e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800494e:	b480      	push	{r7}
 8004950:	b083      	sub	sp, #12
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004956:	bf00      	nop
 8004958:	370c      	adds	r7, #12
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr

08004962 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004962:	b480      	push	{r7}
 8004964:	b083      	sub	sp, #12
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800496a:	bf00      	nop
 800496c:	370c      	adds	r7, #12
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr

08004976 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004976:	b480      	push	{r7}
 8004978:	b083      	sub	sp, #12
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
 800497e:	460b      	mov	r3, r1
 8004980:	70fb      	strb	r3, [r7, #3]
 8004982:	4613      	mov	r3, r2
 8004984:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004986:	bf00      	nop
 8004988:	370c      	adds	r7, #12
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr

08004992 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004992:	b480      	push	{r7}
 8004994:	b083      	sub	sp, #12
 8004996:	af00      	add	r7, sp, #0
 8004998:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800499a:	bf00      	nop
 800499c:	370c      	adds	r7, #12
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr

080049a6 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049a6:	b480      	push	{r7}
 80049a8:	b083      	sub	sp, #12
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80049ae:	bf00      	nop
 80049b0:	370c      	adds	r7, #12
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr

080049ba <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049ba:	b480      	push	{r7}
 80049bc:	b083      	sub	sp, #12
 80049be:	af00      	add	r7, sp, #0
 80049c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80049c2:	bf00      	nop
 80049c4:	370c      	adds	r7, #12
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr

080049ce <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80049ce:	b480      	push	{r7}
 80049d0:	b083      	sub	sp, #12
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80049d6:	bf00      	nop
 80049d8:	370c      	adds	r7, #12
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr

080049e2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049e2:	b480      	push	{r7}
 80049e4:	b083      	sub	sp, #12
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80049ea:	bf00      	nop
 80049ec:	370c      	adds	r7, #12
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr

080049f6 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80049f6:	b580      	push	{r7, lr}
 80049f8:	b084      	sub	sp, #16
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a04:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a0c:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a12:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d150      	bne.n	8004abe <I2C_MasterTransmit_TXE+0xc8>
 8004a1c:	7bfb      	ldrb	r3, [r7, #15]
 8004a1e:	2b21      	cmp	r3, #33	; 0x21
 8004a20:	d14d      	bne.n	8004abe <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	2b08      	cmp	r3, #8
 8004a26:	d01d      	beq.n	8004a64 <I2C_MasterTransmit_TXE+0x6e>
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	2b20      	cmp	r3, #32
 8004a2c:	d01a      	beq.n	8004a64 <I2C_MasterTransmit_TXE+0x6e>
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a34:	d016      	beq.n	8004a64 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	685a      	ldr	r2, [r3, #4]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004a44:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2211      	movs	r2, #17
 8004a4a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2220      	movs	r2, #32
 8004a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f7ff ff62 	bl	8004926 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004a62:	e060      	b.n	8004b26 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	685a      	ldr	r2, [r3, #4]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004a72:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a82:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2220      	movs	r2, #32
 8004a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	2b40      	cmp	r3, #64	; 0x40
 8004a9c:	d107      	bne.n	8004aae <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f7ff ff7d 	bl	80049a6 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004aac:	e03b      	b.n	8004b26 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f7ff ff35 	bl	8004926 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004abc:	e033      	b.n	8004b26 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004abe:	7bfb      	ldrb	r3, [r7, #15]
 8004ac0:	2b21      	cmp	r3, #33	; 0x21
 8004ac2:	d005      	beq.n	8004ad0 <I2C_MasterTransmit_TXE+0xda>
 8004ac4:	7bbb      	ldrb	r3, [r7, #14]
 8004ac6:	2b40      	cmp	r3, #64	; 0x40
 8004ac8:	d12d      	bne.n	8004b26 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004aca:	7bfb      	ldrb	r3, [r7, #15]
 8004acc:	2b22      	cmp	r3, #34	; 0x22
 8004ace:	d12a      	bne.n	8004b26 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d108      	bne.n	8004aec <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	685a      	ldr	r2, [r3, #4]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ae8:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004aea:	e01c      	b.n	8004b26 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	2b40      	cmp	r3, #64	; 0x40
 8004af6:	d103      	bne.n	8004b00 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f000 f880 	bl	8004bfe <I2C_MemoryTransmit_TXE_BTF>
}
 8004afe:	e012      	b.n	8004b26 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b04:	781a      	ldrb	r2, [r3, #0]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b10:	1c5a      	adds	r2, r3, #1
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	3b01      	subs	r3, #1
 8004b1e:	b29a      	uxth	r2, r3
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004b24:	e7ff      	b.n	8004b26 <I2C_MasterTransmit_TXE+0x130>
 8004b26:	bf00      	nop
 8004b28:	3710      	adds	r7, #16
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}

08004b2e <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004b2e:	b580      	push	{r7, lr}
 8004b30:	b084      	sub	sp, #16
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b3a:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	2b21      	cmp	r3, #33	; 0x21
 8004b46:	d156      	bne.n	8004bf6 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d012      	beq.n	8004b78 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b56:	781a      	ldrb	r2, [r3, #0]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b62:	1c5a      	adds	r2, r3, #1
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	3b01      	subs	r3, #1
 8004b70:	b29a      	uxth	r2, r3
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004b76:	e03e      	b.n	8004bf6 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2b08      	cmp	r3, #8
 8004b7c:	d01d      	beq.n	8004bba <I2C_MasterTransmit_BTF+0x8c>
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2b20      	cmp	r3, #32
 8004b82:	d01a      	beq.n	8004bba <I2C_MasterTransmit_BTF+0x8c>
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004b8a:	d016      	beq.n	8004bba <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	685a      	ldr	r2, [r3, #4]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004b9a:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2211      	movs	r2, #17
 8004ba0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2220      	movs	r2, #32
 8004bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f7ff feb7 	bl	8004926 <HAL_I2C_MasterTxCpltCallback>
}
 8004bb8:	e01d      	b.n	8004bf6 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	685a      	ldr	r2, [r3, #4]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004bc8:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bd8:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2220      	movs	r2, #32
 8004be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f7ff fe98 	bl	8004926 <HAL_I2C_MasterTxCpltCallback>
}
 8004bf6:	bf00      	nop
 8004bf8:	3710      	adds	r7, #16
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}

08004bfe <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004bfe:	b580      	push	{r7, lr}
 8004c00:	b084      	sub	sp, #16
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c0c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d11d      	bne.n	8004c52 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d10b      	bne.n	8004c36 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c22:	b2da      	uxtb	r2, r3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c2e:	1c9a      	adds	r2, r3, #2
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004c34:	e06e      	b.n	8004d14 <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	121b      	asrs	r3, r3, #8
 8004c3e:	b2da      	uxtb	r2, r3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c4a:	1c5a      	adds	r2, r3, #1
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004c50:	e060      	b.n	8004d14 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d10b      	bne.n	8004c72 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c5e:	b2da      	uxtb	r2, r3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c6a:	1c5a      	adds	r2, r3, #1
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004c70:	e050      	b.n	8004d14 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c76:	2b02      	cmp	r3, #2
 8004c78:	d14c      	bne.n	8004d14 <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004c7a:	7bfb      	ldrb	r3, [r7, #15]
 8004c7c:	2b22      	cmp	r3, #34	; 0x22
 8004c7e:	d108      	bne.n	8004c92 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c8e:	601a      	str	r2, [r3, #0]
}
 8004c90:	e040      	b.n	8004d14 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d015      	beq.n	8004cc8 <I2C_MemoryTransmit_TXE_BTF+0xca>
 8004c9c:	7bfb      	ldrb	r3, [r7, #15]
 8004c9e:	2b21      	cmp	r3, #33	; 0x21
 8004ca0:	d112      	bne.n	8004cc8 <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca6:	781a      	ldrb	r2, [r3, #0]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb2:	1c5a      	adds	r2, r3, #1
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	3b01      	subs	r3, #1
 8004cc0:	b29a      	uxth	r2, r3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004cc6:	e025      	b.n	8004d14 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d120      	bne.n	8004d14 <I2C_MemoryTransmit_TXE_BTF+0x116>
 8004cd2:	7bfb      	ldrb	r3, [r7, #15]
 8004cd4:	2b21      	cmp	r3, #33	; 0x21
 8004cd6:	d11d      	bne.n	8004d14 <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	685a      	ldr	r2, [r3, #4]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004ce6:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cf6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2220      	movs	r2, #32
 8004d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f7ff fe49 	bl	80049a6 <HAL_I2C_MemTxCpltCallback>
}
 8004d14:	bf00      	nop
 8004d16:	3710      	adds	r7, #16
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}

08004d1c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b084      	sub	sp, #16
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	2b22      	cmp	r3, #34	; 0x22
 8004d2e:	f040 80a2 	bne.w	8004e76 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2b03      	cmp	r3, #3
 8004d3e:	d921      	bls.n	8004d84 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	691a      	ldr	r2, [r3, #16]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4a:	b2d2      	uxtb	r2, r2
 8004d4c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d52:	1c5a      	adds	r2, r3, #1
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	3b01      	subs	r3, #1
 8004d60:	b29a      	uxth	r2, r3
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	2b03      	cmp	r3, #3
 8004d6e:	f040 8082 	bne.w	8004e76 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	685a      	ldr	r2, [r3, #4]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d80:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8004d82:	e078      	b.n	8004e76 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d88:	2b02      	cmp	r3, #2
 8004d8a:	d074      	beq.n	8004e76 <I2C_MasterReceive_RXNE+0x15a>
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d002      	beq.n	8004d98 <I2C_MasterReceive_RXNE+0x7c>
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d16e      	bne.n	8004e76 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f001 fa4f 	bl	800623c <I2C_WaitOnSTOPRequestThroughIT>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d142      	bne.n	8004e2a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004db2:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	685a      	ldr	r2, [r3, #4]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004dc2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	691a      	ldr	r2, [r3, #16]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dce:	b2d2      	uxtb	r2, r2
 8004dd0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd6:	1c5a      	adds	r2, r3, #1
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	3b01      	subs	r3, #1
 8004de4:	b29a      	uxth	r2, r3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2220      	movs	r2, #32
 8004dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	2b40      	cmp	r3, #64	; 0x40
 8004dfc:	d10a      	bne.n	8004e14 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2200      	movs	r2, #0
 8004e02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f7ff fdd4 	bl	80049ba <HAL_I2C_MemRxCpltCallback>
}
 8004e12:	e030      	b.n	8004e76 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2212      	movs	r2, #18
 8004e20:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f7ff fd89 	bl	800493a <HAL_I2C_MasterRxCpltCallback>
}
 8004e28:	e025      	b.n	8004e76 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	685a      	ldr	r2, [r3, #4]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004e38:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	691a      	ldr	r2, [r3, #16]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e44:	b2d2      	uxtb	r2, r2
 8004e46:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4c:	1c5a      	adds	r2, r3, #1
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	3b01      	subs	r3, #1
 8004e5a:	b29a      	uxth	r2, r3
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2220      	movs	r2, #32
 8004e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f7ff fdac 	bl	80049ce <HAL_I2C_ErrorCallback>
}
 8004e76:	bf00      	nop
 8004e78:	3710      	adds	r7, #16
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}

08004e7e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004e7e:	b580      	push	{r7, lr}
 8004e80:	b084      	sub	sp, #16
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e8a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	2b04      	cmp	r3, #4
 8004e94:	d11b      	bne.n	8004ece <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	685a      	ldr	r2, [r3, #4]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ea4:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	691a      	ldr	r2, [r3, #16]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb0:	b2d2      	uxtb	r2, r2
 8004eb2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb8:	1c5a      	adds	r2, r3, #1
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	3b01      	subs	r3, #1
 8004ec6:	b29a      	uxth	r2, r3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004ecc:	e0bd      	b.n	800504a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	2b03      	cmp	r3, #3
 8004ed6:	d129      	bne.n	8004f2c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	685a      	ldr	r2, [r3, #4]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ee6:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2b04      	cmp	r3, #4
 8004eec:	d00a      	beq.n	8004f04 <I2C_MasterReceive_BTF+0x86>
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2b02      	cmp	r3, #2
 8004ef2:	d007      	beq.n	8004f04 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f02:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	691a      	ldr	r2, [r3, #16]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0e:	b2d2      	uxtb	r2, r2
 8004f10:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f16:	1c5a      	adds	r2, r3, #1
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	3b01      	subs	r3, #1
 8004f24:	b29a      	uxth	r2, r3
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004f2a:	e08e      	b.n	800504a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	2b02      	cmp	r3, #2
 8004f34:	d176      	bne.n	8005024 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d002      	beq.n	8004f42 <I2C_MasterReceive_BTF+0xc4>
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2b10      	cmp	r3, #16
 8004f40:	d108      	bne.n	8004f54 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f50:	601a      	str	r2, [r3, #0]
 8004f52:	e019      	b.n	8004f88 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2b04      	cmp	r3, #4
 8004f58:	d002      	beq.n	8004f60 <I2C_MasterReceive_BTF+0xe2>
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2b02      	cmp	r3, #2
 8004f5e:	d108      	bne.n	8004f72 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f6e:	601a      	str	r2, [r3, #0]
 8004f70:	e00a      	b.n	8004f88 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2b10      	cmp	r3, #16
 8004f76:	d007      	beq.n	8004f88 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f86:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	691a      	ldr	r2, [r3, #16]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f92:	b2d2      	uxtb	r2, r2
 8004f94:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9a:	1c5a      	adds	r2, r3, #1
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	3b01      	subs	r3, #1
 8004fa8:	b29a      	uxth	r2, r3
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	691a      	ldr	r2, [r3, #16]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb8:	b2d2      	uxtb	r2, r2
 8004fba:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc0:	1c5a      	adds	r2, r3, #1
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	3b01      	subs	r3, #1
 8004fce:	b29a      	uxth	r2, r3
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	685a      	ldr	r2, [r3, #4]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004fe2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2220      	movs	r2, #32
 8004fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	2b40      	cmp	r3, #64	; 0x40
 8004ff6:	d10a      	bne.n	800500e <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f7ff fcd7 	bl	80049ba <HAL_I2C_MemRxCpltCallback>
}
 800500c:	e01d      	b.n	800504a <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2212      	movs	r2, #18
 800501a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f7ff fc8c 	bl	800493a <HAL_I2C_MasterRxCpltCallback>
}
 8005022:	e012      	b.n	800504a <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	691a      	ldr	r2, [r3, #16]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502e:	b2d2      	uxtb	r2, r2
 8005030:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005036:	1c5a      	adds	r2, r3, #1
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005040:	b29b      	uxth	r3, r3
 8005042:	3b01      	subs	r3, #1
 8005044:	b29a      	uxth	r2, r3
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800504a:	bf00      	nop
 800504c:	3710      	adds	r7, #16
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}

08005052 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005052:	b480      	push	{r7}
 8005054:	b083      	sub	sp, #12
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005060:	b2db      	uxtb	r3, r3
 8005062:	2b40      	cmp	r3, #64	; 0x40
 8005064:	d117      	bne.n	8005096 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800506a:	2b00      	cmp	r3, #0
 800506c:	d109      	bne.n	8005082 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005072:	b2db      	uxtb	r3, r3
 8005074:	461a      	mov	r2, r3
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800507e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005080:	e067      	b.n	8005152 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005086:	b2db      	uxtb	r3, r3
 8005088:	f043 0301 	orr.w	r3, r3, #1
 800508c:	b2da      	uxtb	r2, r3
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	611a      	str	r2, [r3, #16]
}
 8005094:	e05d      	b.n	8005152 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	691b      	ldr	r3, [r3, #16]
 800509a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800509e:	d133      	bne.n	8005108 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	2b21      	cmp	r3, #33	; 0x21
 80050aa:	d109      	bne.n	80050c0 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	461a      	mov	r2, r3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80050bc:	611a      	str	r2, [r3, #16]
 80050be:	e008      	b.n	80050d2 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	f043 0301 	orr.w	r3, r3, #1
 80050ca:	b2da      	uxtb	r2, r3
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d004      	beq.n	80050e4 <I2C_Master_SB+0x92>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d108      	bne.n	80050f6 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d032      	beq.n	8005152 <I2C_Master_SB+0x100>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d02d      	beq.n	8005152 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	685a      	ldr	r2, [r3, #4]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005104:	605a      	str	r2, [r3, #4]
}
 8005106:	e024      	b.n	8005152 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800510c:	2b00      	cmp	r3, #0
 800510e:	d10e      	bne.n	800512e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005114:	b29b      	uxth	r3, r3
 8005116:	11db      	asrs	r3, r3, #7
 8005118:	b2db      	uxtb	r3, r3
 800511a:	f003 0306 	and.w	r3, r3, #6
 800511e:	b2db      	uxtb	r3, r3
 8005120:	f063 030f 	orn	r3, r3, #15
 8005124:	b2da      	uxtb	r2, r3
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	611a      	str	r2, [r3, #16]
}
 800512c:	e011      	b.n	8005152 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005132:	2b01      	cmp	r3, #1
 8005134:	d10d      	bne.n	8005152 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800513a:	b29b      	uxth	r3, r3
 800513c:	11db      	asrs	r3, r3, #7
 800513e:	b2db      	uxtb	r3, r3
 8005140:	f003 0306 	and.w	r3, r3, #6
 8005144:	b2db      	uxtb	r3, r3
 8005146:	f063 030e 	orn	r3, r3, #14
 800514a:	b2da      	uxtb	r2, r3
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	611a      	str	r2, [r3, #16]
}
 8005152:	bf00      	nop
 8005154:	370c      	adds	r7, #12
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr

0800515e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800515e:	b480      	push	{r7}
 8005160:	b083      	sub	sp, #12
 8005162:	af00      	add	r7, sp, #0
 8005164:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800516a:	b2da      	uxtb	r2, r3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005176:	2b00      	cmp	r3, #0
 8005178:	d004      	beq.n	8005184 <I2C_Master_ADD10+0x26>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800517e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005180:	2b00      	cmp	r3, #0
 8005182:	d108      	bne.n	8005196 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005188:	2b00      	cmp	r3, #0
 800518a:	d00c      	beq.n	80051a6 <I2C_Master_ADD10+0x48>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005192:	2b00      	cmp	r3, #0
 8005194:	d007      	beq.n	80051a6 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	685a      	ldr	r2, [r3, #4]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051a4:	605a      	str	r2, [r3, #4]
  }
}
 80051a6:	bf00      	nop
 80051a8:	370c      	adds	r7, #12
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr

080051b2 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80051b2:	b480      	push	{r7}
 80051b4:	b091      	sub	sp, #68	; 0x44
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c8:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ce:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	2b22      	cmp	r3, #34	; 0x22
 80051da:	f040 8169 	bne.w	80054b0 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d10f      	bne.n	8005206 <I2C_Master_ADDR+0x54>
 80051e6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80051ea:	2b40      	cmp	r3, #64	; 0x40
 80051ec:	d10b      	bne.n	8005206 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051ee:	2300      	movs	r3, #0
 80051f0:	633b      	str	r3, [r7, #48]	; 0x30
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	695b      	ldr	r3, [r3, #20]
 80051f8:	633b      	str	r3, [r7, #48]	; 0x30
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	699b      	ldr	r3, [r3, #24]
 8005200:	633b      	str	r3, [r7, #48]	; 0x30
 8005202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005204:	e160      	b.n	80054c8 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800520a:	2b00      	cmp	r3, #0
 800520c:	d11d      	bne.n	800524a <I2C_Master_ADDR+0x98>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	691b      	ldr	r3, [r3, #16]
 8005212:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005216:	d118      	bne.n	800524a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005218:	2300      	movs	r3, #0
 800521a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	695b      	ldr	r3, [r3, #20]
 8005222:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	699b      	ldr	r3, [r3, #24]
 800522a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800522c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800523c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005242:	1c5a      	adds	r2, r3, #1
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	651a      	str	r2, [r3, #80]	; 0x50
 8005248:	e13e      	b.n	80054c8 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800524e:	b29b      	uxth	r3, r3
 8005250:	2b00      	cmp	r3, #0
 8005252:	d113      	bne.n	800527c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005254:	2300      	movs	r3, #0
 8005256:	62bb      	str	r3, [r7, #40]	; 0x28
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	695b      	ldr	r3, [r3, #20]
 800525e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	699b      	ldr	r3, [r3, #24]
 8005266:	62bb      	str	r3, [r7, #40]	; 0x28
 8005268:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005278:	601a      	str	r2, [r3, #0]
 800527a:	e115      	b.n	80054a8 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005280:	b29b      	uxth	r3, r3
 8005282:	2b01      	cmp	r3, #1
 8005284:	f040 808a 	bne.w	800539c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800528a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800528e:	d137      	bne.n	8005300 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800529e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052ae:	d113      	bne.n	80052d8 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052be:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052c0:	2300      	movs	r3, #0
 80052c2:	627b      	str	r3, [r7, #36]	; 0x24
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	695b      	ldr	r3, [r3, #20]
 80052ca:	627b      	str	r3, [r7, #36]	; 0x24
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	699b      	ldr	r3, [r3, #24]
 80052d2:	627b      	str	r3, [r7, #36]	; 0x24
 80052d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d6:	e0e7      	b.n	80054a8 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052d8:	2300      	movs	r3, #0
 80052da:	623b      	str	r3, [r7, #32]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	695b      	ldr	r3, [r3, #20]
 80052e2:	623b      	str	r3, [r7, #32]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	699b      	ldr	r3, [r3, #24]
 80052ea:	623b      	str	r3, [r7, #32]
 80052ec:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052fc:	601a      	str	r2, [r3, #0]
 80052fe:	e0d3      	b.n	80054a8 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005302:	2b08      	cmp	r3, #8
 8005304:	d02e      	beq.n	8005364 <I2C_Master_ADDR+0x1b2>
 8005306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005308:	2b20      	cmp	r3, #32
 800530a:	d02b      	beq.n	8005364 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800530c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800530e:	2b12      	cmp	r3, #18
 8005310:	d102      	bne.n	8005318 <I2C_Master_ADDR+0x166>
 8005312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005314:	2b01      	cmp	r3, #1
 8005316:	d125      	bne.n	8005364 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800531a:	2b04      	cmp	r3, #4
 800531c:	d00e      	beq.n	800533c <I2C_Master_ADDR+0x18a>
 800531e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005320:	2b02      	cmp	r3, #2
 8005322:	d00b      	beq.n	800533c <I2C_Master_ADDR+0x18a>
 8005324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005326:	2b10      	cmp	r3, #16
 8005328:	d008      	beq.n	800533c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005338:	601a      	str	r2, [r3, #0]
 800533a:	e007      	b.n	800534c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800534a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800534c:	2300      	movs	r3, #0
 800534e:	61fb      	str	r3, [r7, #28]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	695b      	ldr	r3, [r3, #20]
 8005356:	61fb      	str	r3, [r7, #28]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	699b      	ldr	r3, [r3, #24]
 800535e:	61fb      	str	r3, [r7, #28]
 8005360:	69fb      	ldr	r3, [r7, #28]
 8005362:	e0a1      	b.n	80054a8 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005372:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005374:	2300      	movs	r3, #0
 8005376:	61bb      	str	r3, [r7, #24]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	695b      	ldr	r3, [r3, #20]
 800537e:	61bb      	str	r3, [r7, #24]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	699b      	ldr	r3, [r3, #24]
 8005386:	61bb      	str	r3, [r7, #24]
 8005388:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005398:	601a      	str	r2, [r3, #0]
 800539a:	e085      	b.n	80054a8 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053a0:	b29b      	uxth	r3, r3
 80053a2:	2b02      	cmp	r3, #2
 80053a4:	d14d      	bne.n	8005442 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80053a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053a8:	2b04      	cmp	r3, #4
 80053aa:	d016      	beq.n	80053da <I2C_Master_ADDR+0x228>
 80053ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ae:	2b02      	cmp	r3, #2
 80053b0:	d013      	beq.n	80053da <I2C_Master_ADDR+0x228>
 80053b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053b4:	2b10      	cmp	r3, #16
 80053b6:	d010      	beq.n	80053da <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053c6:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053d6:	601a      	str	r2, [r3, #0]
 80053d8:	e007      	b.n	80053ea <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80053e8:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053f8:	d117      	bne.n	800542a <I2C_Master_ADDR+0x278>
 80053fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005400:	d00b      	beq.n	800541a <I2C_Master_ADDR+0x268>
 8005402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005404:	2b01      	cmp	r3, #1
 8005406:	d008      	beq.n	800541a <I2C_Master_ADDR+0x268>
 8005408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800540a:	2b08      	cmp	r3, #8
 800540c:	d005      	beq.n	800541a <I2C_Master_ADDR+0x268>
 800540e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005410:	2b10      	cmp	r3, #16
 8005412:	d002      	beq.n	800541a <I2C_Master_ADDR+0x268>
 8005414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005416:	2b20      	cmp	r3, #32
 8005418:	d107      	bne.n	800542a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	685a      	ldr	r2, [r3, #4]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005428:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800542a:	2300      	movs	r3, #0
 800542c:	617b      	str	r3, [r7, #20]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	695b      	ldr	r3, [r3, #20]
 8005434:	617b      	str	r3, [r7, #20]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	699b      	ldr	r3, [r3, #24]
 800543c:	617b      	str	r3, [r7, #20]
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	e032      	b.n	80054a8 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005450:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800545c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005460:	d117      	bne.n	8005492 <I2C_Master_ADDR+0x2e0>
 8005462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005464:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005468:	d00b      	beq.n	8005482 <I2C_Master_ADDR+0x2d0>
 800546a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800546c:	2b01      	cmp	r3, #1
 800546e:	d008      	beq.n	8005482 <I2C_Master_ADDR+0x2d0>
 8005470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005472:	2b08      	cmp	r3, #8
 8005474:	d005      	beq.n	8005482 <I2C_Master_ADDR+0x2d0>
 8005476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005478:	2b10      	cmp	r3, #16
 800547a:	d002      	beq.n	8005482 <I2C_Master_ADDR+0x2d0>
 800547c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800547e:	2b20      	cmp	r3, #32
 8005480:	d107      	bne.n	8005492 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	685a      	ldr	r2, [r3, #4]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005490:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005492:	2300      	movs	r3, #0
 8005494:	613b      	str	r3, [r7, #16]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	695b      	ldr	r3, [r3, #20]
 800549c:	613b      	str	r3, [r7, #16]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	699b      	ldr	r3, [r3, #24]
 80054a4:	613b      	str	r3, [r7, #16]
 80054a6:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2200      	movs	r2, #0
 80054ac:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80054ae:	e00b      	b.n	80054c8 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054b0:	2300      	movs	r3, #0
 80054b2:	60fb      	str	r3, [r7, #12]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	695b      	ldr	r3, [r3, #20]
 80054ba:	60fb      	str	r3, [r7, #12]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	699b      	ldr	r3, [r3, #24]
 80054c2:	60fb      	str	r3, [r7, #12]
 80054c4:	68fb      	ldr	r3, [r7, #12]
}
 80054c6:	e7ff      	b.n	80054c8 <I2C_Master_ADDR+0x316>
 80054c8:	bf00      	nop
 80054ca:	3744      	adds	r7, #68	; 0x44
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr

080054d4 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b084      	sub	sp, #16
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054e2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d02b      	beq.n	8005546 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f2:	781a      	ldrb	r2, [r3, #0]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fe:	1c5a      	adds	r2, r3, #1
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005508:	b29b      	uxth	r3, r3
 800550a:	3b01      	subs	r3, #1
 800550c:	b29a      	uxth	r2, r3
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005516:	b29b      	uxth	r3, r3
 8005518:	2b00      	cmp	r3, #0
 800551a:	d114      	bne.n	8005546 <I2C_SlaveTransmit_TXE+0x72>
 800551c:	7bfb      	ldrb	r3, [r7, #15]
 800551e:	2b29      	cmp	r3, #41	; 0x29
 8005520:	d111      	bne.n	8005546 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	685a      	ldr	r2, [r3, #4]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005530:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2221      	movs	r2, #33	; 0x21
 8005536:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2228      	movs	r2, #40	; 0x28
 800553c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f7ff fa04 	bl	800494e <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005546:	bf00      	nop
 8005548:	3710      	adds	r7, #16
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}

0800554e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800554e:	b480      	push	{r7}
 8005550:	b083      	sub	sp, #12
 8005552:	af00      	add	r7, sp, #0
 8005554:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800555a:	b29b      	uxth	r3, r3
 800555c:	2b00      	cmp	r3, #0
 800555e:	d011      	beq.n	8005584 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005564:	781a      	ldrb	r2, [r3, #0]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005570:	1c5a      	adds	r2, r3, #1
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800557a:	b29b      	uxth	r3, r3
 800557c:	3b01      	subs	r3, #1
 800557e:	b29a      	uxth	r2, r3
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005584:	bf00      	nop
 8005586:	370c      	adds	r7, #12
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr

08005590 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b084      	sub	sp, #16
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800559e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d02c      	beq.n	8005604 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	691a      	ldr	r2, [r3, #16]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b4:	b2d2      	uxtb	r2, r2
 80055b6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055bc:	1c5a      	adds	r2, r3, #1
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	3b01      	subs	r3, #1
 80055ca:	b29a      	uxth	r2, r3
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d114      	bne.n	8005604 <I2C_SlaveReceive_RXNE+0x74>
 80055da:	7bfb      	ldrb	r3, [r7, #15]
 80055dc:	2b2a      	cmp	r3, #42	; 0x2a
 80055de:	d111      	bne.n	8005604 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	685a      	ldr	r2, [r3, #4]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055ee:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2222      	movs	r2, #34	; 0x22
 80055f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2228      	movs	r2, #40	; 0x28
 80055fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f7ff f9af 	bl	8004962 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005604:	bf00      	nop
 8005606:	3710      	adds	r7, #16
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}

0800560c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005618:	b29b      	uxth	r3, r3
 800561a:	2b00      	cmp	r3, #0
 800561c:	d012      	beq.n	8005644 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	691a      	ldr	r2, [r3, #16]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005628:	b2d2      	uxtb	r2, r2
 800562a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005630:	1c5a      	adds	r2, r3, #1
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800563a:	b29b      	uxth	r3, r3
 800563c:	3b01      	subs	r3, #1
 800563e:	b29a      	uxth	r2, r3
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005644:	bf00      	nop
 8005646:	370c      	adds	r7, #12
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr

08005650 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b084      	sub	sp, #16
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800565a:	2300      	movs	r3, #0
 800565c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005664:	b2db      	uxtb	r3, r3
 8005666:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800566a:	2b28      	cmp	r3, #40	; 0x28
 800566c:	d127      	bne.n	80056be <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	685a      	ldr	r2, [r3, #4]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800567c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	089b      	lsrs	r3, r3, #2
 8005682:	f003 0301 	and.w	r3, r3, #1
 8005686:	2b00      	cmp	r3, #0
 8005688:	d101      	bne.n	800568e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800568a:	2301      	movs	r3, #1
 800568c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	09db      	lsrs	r3, r3, #7
 8005692:	f003 0301 	and.w	r3, r3, #1
 8005696:	2b00      	cmp	r3, #0
 8005698:	d103      	bne.n	80056a2 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	68db      	ldr	r3, [r3, #12]
 800569e:	81bb      	strh	r3, [r7, #12]
 80056a0:	e002      	b.n	80056a8 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	699b      	ldr	r3, [r3, #24]
 80056a6:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80056b0:	89ba      	ldrh	r2, [r7, #12]
 80056b2:	7bfb      	ldrb	r3, [r7, #15]
 80056b4:	4619      	mov	r1, r3
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f7ff f95d 	bl	8004976 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80056bc:	e008      	b.n	80056d0 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f06f 0202 	mvn.w	r2, #2
 80056c6:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2200      	movs	r2, #0
 80056cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80056d0:	bf00      	nop
 80056d2:	3710      	adds	r7, #16
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}

080056d8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b084      	sub	sp, #16
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056e6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	685a      	ldr	r2, [r3, #4]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80056f6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80056f8:	2300      	movs	r3, #0
 80056fa:	60bb      	str	r3, [r7, #8]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	695b      	ldr	r3, [r3, #20]
 8005702:	60bb      	str	r3, [r7, #8]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f042 0201 	orr.w	r2, r2, #1
 8005712:	601a      	str	r2, [r3, #0]
 8005714:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005724:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005730:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005734:	d172      	bne.n	800581c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005736:	7bfb      	ldrb	r3, [r7, #15]
 8005738:	2b22      	cmp	r3, #34	; 0x22
 800573a:	d002      	beq.n	8005742 <I2C_Slave_STOPF+0x6a>
 800573c:	7bfb      	ldrb	r3, [r7, #15]
 800573e:	2b2a      	cmp	r3, #42	; 0x2a
 8005740:	d135      	bne.n	80057ae <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	b29a      	uxth	r2, r3
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005754:	b29b      	uxth	r3, r3
 8005756:	2b00      	cmp	r3, #0
 8005758:	d005      	beq.n	8005766 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800575e:	f043 0204 	orr.w	r2, r3, #4
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	685a      	ldr	r2, [r3, #4]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005774:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800577a:	4618      	mov	r0, r3
 800577c:	f7fe f849 	bl	8003812 <HAL_DMA_GetState>
 8005780:	4603      	mov	r3, r0
 8005782:	2b01      	cmp	r3, #1
 8005784:	d049      	beq.n	800581a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800578a:	4a69      	ldr	r2, [pc, #420]	; (8005930 <I2C_Slave_STOPF+0x258>)
 800578c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005792:	4618      	mov	r0, r3
 8005794:	f7fe f81b 	bl	80037ce <HAL_DMA_Abort_IT>
 8005798:	4603      	mov	r3, r0
 800579a:	2b00      	cmp	r3, #0
 800579c:	d03d      	beq.n	800581a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80057a8:	4610      	mov	r0, r2
 80057aa:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80057ac:	e035      	b.n	800581a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	b29a      	uxth	r2, r3
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d005      	beq.n	80057d2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ca:	f043 0204 	orr.w	r2, r3, #4
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	685a      	ldr	r2, [r3, #4]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057e0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057e6:	4618      	mov	r0, r3
 80057e8:	f7fe f813 	bl	8003812 <HAL_DMA_GetState>
 80057ec:	4603      	mov	r3, r0
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d014      	beq.n	800581c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057f6:	4a4e      	ldr	r2, [pc, #312]	; (8005930 <I2C_Slave_STOPF+0x258>)
 80057f8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057fe:	4618      	mov	r0, r3
 8005800:	f7fd ffe5 	bl	80037ce <HAL_DMA_Abort_IT>
 8005804:	4603      	mov	r3, r0
 8005806:	2b00      	cmp	r3, #0
 8005808:	d008      	beq.n	800581c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800580e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005814:	4610      	mov	r0, r2
 8005816:	4798      	blx	r3
 8005818:	e000      	b.n	800581c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800581a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005820:	b29b      	uxth	r3, r3
 8005822:	2b00      	cmp	r3, #0
 8005824:	d03e      	beq.n	80058a4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	695b      	ldr	r3, [r3, #20]
 800582c:	f003 0304 	and.w	r3, r3, #4
 8005830:	2b04      	cmp	r3, #4
 8005832:	d112      	bne.n	800585a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	691a      	ldr	r2, [r3, #16]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583e:	b2d2      	uxtb	r2, r2
 8005840:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005846:	1c5a      	adds	r2, r3, #1
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005850:	b29b      	uxth	r3, r3
 8005852:	3b01      	subs	r3, #1
 8005854:	b29a      	uxth	r2, r3
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	695b      	ldr	r3, [r3, #20]
 8005860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005864:	2b40      	cmp	r3, #64	; 0x40
 8005866:	d112      	bne.n	800588e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	691a      	ldr	r2, [r3, #16]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005872:	b2d2      	uxtb	r2, r2
 8005874:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587a:	1c5a      	adds	r2, r3, #1
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005884:	b29b      	uxth	r3, r3
 8005886:	3b01      	subs	r3, #1
 8005888:	b29a      	uxth	r2, r3
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005892:	b29b      	uxth	r3, r3
 8005894:	2b00      	cmp	r3, #0
 8005896:	d005      	beq.n	80058a4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800589c:	f043 0204 	orr.w	r2, r3, #4
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d003      	beq.n	80058b4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f000 f843 	bl	8005938 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80058b2:	e039      	b.n	8005928 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80058b4:	7bfb      	ldrb	r3, [r7, #15]
 80058b6:	2b2a      	cmp	r3, #42	; 0x2a
 80058b8:	d109      	bne.n	80058ce <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2228      	movs	r2, #40	; 0x28
 80058c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f7ff f84a 	bl	8004962 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	2b28      	cmp	r3, #40	; 0x28
 80058d8:	d111      	bne.n	80058fe <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a15      	ldr	r2, [pc, #84]	; (8005934 <I2C_Slave_STOPF+0x25c>)
 80058de:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2200      	movs	r2, #0
 80058e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2220      	movs	r2, #32
 80058ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f7ff f84b 	bl	8004992 <HAL_I2C_ListenCpltCallback>
}
 80058fc:	e014      	b.n	8005928 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005902:	2b22      	cmp	r3, #34	; 0x22
 8005904:	d002      	beq.n	800590c <I2C_Slave_STOPF+0x234>
 8005906:	7bfb      	ldrb	r3, [r7, #15]
 8005908:	2b22      	cmp	r3, #34	; 0x22
 800590a:	d10d      	bne.n	8005928 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2200      	movs	r2, #0
 8005910:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2220      	movs	r2, #32
 8005916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f7ff f81d 	bl	8004962 <HAL_I2C_SlaveRxCpltCallback>
}
 8005928:	bf00      	nop
 800592a:	3710      	adds	r7, #16
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}
 8005930:	08005e3d 	.word	0x08005e3d
 8005934:	ffff0000 	.word	0xffff0000

08005938 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b084      	sub	sp, #16
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005946:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800594e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005950:	7bbb      	ldrb	r3, [r7, #14]
 8005952:	2b10      	cmp	r3, #16
 8005954:	d002      	beq.n	800595c <I2C_ITError+0x24>
 8005956:	7bbb      	ldrb	r3, [r7, #14]
 8005958:	2b40      	cmp	r3, #64	; 0x40
 800595a:	d10a      	bne.n	8005972 <I2C_ITError+0x3a>
 800595c:	7bfb      	ldrb	r3, [r7, #15]
 800595e:	2b22      	cmp	r3, #34	; 0x22
 8005960:	d107      	bne.n	8005972 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005970:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005972:	7bfb      	ldrb	r3, [r7, #15]
 8005974:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005978:	2b28      	cmp	r3, #40	; 0x28
 800597a:	d107      	bne.n	800598c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2228      	movs	r2, #40	; 0x28
 8005986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800598a:	e015      	b.n	80059b8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005996:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800599a:	d00a      	beq.n	80059b2 <I2C_ITError+0x7a>
 800599c:	7bfb      	ldrb	r3, [r7, #15]
 800599e:	2b60      	cmp	r3, #96	; 0x60
 80059a0:	d007      	beq.n	80059b2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2220      	movs	r2, #32
 80059a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2200      	movs	r2, #0
 80059ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2200      	movs	r2, #0
 80059b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059c6:	d162      	bne.n	8005a8e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	685a      	ldr	r2, [r3, #4]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059d6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d020      	beq.n	8005a28 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059ea:	4a6a      	ldr	r2, [pc, #424]	; (8005b94 <I2C_ITError+0x25c>)
 80059ec:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059f2:	4618      	mov	r0, r3
 80059f4:	f7fd feeb 	bl	80037ce <HAL_DMA_Abort_IT>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	f000 8089 	beq.w	8005b12 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f022 0201 	bic.w	r2, r2, #1
 8005a0e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2220      	movs	r2, #32
 8005a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005a22:	4610      	mov	r0, r2
 8005a24:	4798      	blx	r3
 8005a26:	e074      	b.n	8005b12 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a2c:	4a59      	ldr	r2, [pc, #356]	; (8005b94 <I2C_ITError+0x25c>)
 8005a2e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a34:	4618      	mov	r0, r3
 8005a36:	f7fd feca 	bl	80037ce <HAL_DMA_Abort_IT>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d068      	beq.n	8005b12 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	695b      	ldr	r3, [r3, #20]
 8005a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a4a:	2b40      	cmp	r3, #64	; 0x40
 8005a4c:	d10b      	bne.n	8005a66 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	691a      	ldr	r2, [r3, #16]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a58:	b2d2      	uxtb	r2, r2
 8005a5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a60:	1c5a      	adds	r2, r3, #1
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f022 0201 	bic.w	r2, r2, #1
 8005a74:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2220      	movs	r2, #32
 8005a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a84:	687a      	ldr	r2, [r7, #4]
 8005a86:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005a88:	4610      	mov	r0, r2
 8005a8a:	4798      	blx	r3
 8005a8c:	e041      	b.n	8005b12 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a94:	b2db      	uxtb	r3, r3
 8005a96:	2b60      	cmp	r3, #96	; 0x60
 8005a98:	d125      	bne.n	8005ae6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2220      	movs	r2, #32
 8005a9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	695b      	ldr	r3, [r3, #20]
 8005aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ab2:	2b40      	cmp	r3, #64	; 0x40
 8005ab4:	d10b      	bne.n	8005ace <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	691a      	ldr	r2, [r3, #16]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac0:	b2d2      	uxtb	r2, r2
 8005ac2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac8:	1c5a      	adds	r2, r3, #1
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f022 0201 	bic.w	r2, r2, #1
 8005adc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f7fe ff7f 	bl	80049e2 <HAL_I2C_AbortCpltCallback>
 8005ae4:	e015      	b.n	8005b12 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	695b      	ldr	r3, [r3, #20]
 8005aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005af0:	2b40      	cmp	r3, #64	; 0x40
 8005af2:	d10b      	bne.n	8005b0c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	691a      	ldr	r2, [r3, #16]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afe:	b2d2      	uxtb	r2, r2
 8005b00:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b06:	1c5a      	adds	r2, r3, #1
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f7fe ff5e 	bl	80049ce <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b16:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	f003 0301 	and.w	r3, r3, #1
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d10e      	bne.n	8005b40 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d109      	bne.n	8005b40 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d104      	bne.n	8005b40 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d007      	beq.n	8005b50 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	685a      	ldr	r2, [r3, #4]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005b4e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b56:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b5c:	f003 0304 	and.w	r3, r3, #4
 8005b60:	2b04      	cmp	r3, #4
 8005b62:	d113      	bne.n	8005b8c <I2C_ITError+0x254>
 8005b64:	7bfb      	ldrb	r3, [r7, #15]
 8005b66:	2b28      	cmp	r3, #40	; 0x28
 8005b68:	d110      	bne.n	8005b8c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4a0a      	ldr	r2, [pc, #40]	; (8005b98 <I2C_ITError+0x260>)
 8005b6e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2220      	movs	r2, #32
 8005b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2200      	movs	r2, #0
 8005b82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f7fe ff03 	bl	8004992 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005b8c:	bf00      	nop
 8005b8e:	3710      	adds	r7, #16
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}
 8005b94:	08005e3d 	.word	0x08005e3d
 8005b98:	ffff0000 	.word	0xffff0000

08005b9c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b088      	sub	sp, #32
 8005ba0:	af02      	add	r7, sp, #8
 8005ba2:	60f8      	str	r0, [r7, #12]
 8005ba4:	607a      	str	r2, [r7, #4]
 8005ba6:	603b      	str	r3, [r7, #0]
 8005ba8:	460b      	mov	r3, r1
 8005baa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	2b08      	cmp	r3, #8
 8005bb6:	d006      	beq.n	8005bc6 <I2C_MasterRequestWrite+0x2a>
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d003      	beq.n	8005bc6 <I2C_MasterRequestWrite+0x2a>
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005bc4:	d108      	bne.n	8005bd8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005bd4:	601a      	str	r2, [r3, #0]
 8005bd6:	e00b      	b.n	8005bf0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bdc:	2b12      	cmp	r3, #18
 8005bde:	d107      	bne.n	8005bf0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	681a      	ldr	r2, [r3, #0]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005bee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	9300      	str	r3, [sp, #0]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005bfc:	68f8      	ldr	r0, [r7, #12]
 8005bfe:	f000 f9c5 	bl	8005f8c <I2C_WaitOnFlagUntilTimeout>
 8005c02:	4603      	mov	r3, r0
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d00d      	beq.n	8005c24 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c16:	d103      	bne.n	8005c20 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c1e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005c20:	2303      	movs	r3, #3
 8005c22:	e035      	b.n	8005c90 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	691b      	ldr	r3, [r3, #16]
 8005c28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c2c:	d108      	bne.n	8005c40 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005c2e:	897b      	ldrh	r3, [r7, #10]
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	461a      	mov	r2, r3
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005c3c:	611a      	str	r2, [r3, #16]
 8005c3e:	e01b      	b.n	8005c78 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005c40:	897b      	ldrh	r3, [r7, #10]
 8005c42:	11db      	asrs	r3, r3, #7
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	f003 0306 	and.w	r3, r3, #6
 8005c4a:	b2db      	uxtb	r3, r3
 8005c4c:	f063 030f 	orn	r3, r3, #15
 8005c50:	b2da      	uxtb	r2, r3
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	687a      	ldr	r2, [r7, #4]
 8005c5c:	490e      	ldr	r1, [pc, #56]	; (8005c98 <I2C_MasterRequestWrite+0xfc>)
 8005c5e:	68f8      	ldr	r0, [r7, #12]
 8005c60:	f000 f9eb 	bl	800603a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c64:	4603      	mov	r3, r0
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d001      	beq.n	8005c6e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e010      	b.n	8005c90 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005c6e:	897b      	ldrh	r3, [r7, #10]
 8005c70:	b2da      	uxtb	r2, r3
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	4907      	ldr	r1, [pc, #28]	; (8005c9c <I2C_MasterRequestWrite+0x100>)
 8005c7e:	68f8      	ldr	r0, [r7, #12]
 8005c80:	f000 f9db 	bl	800603a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c84:	4603      	mov	r3, r0
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d001      	beq.n	8005c8e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e000      	b.n	8005c90 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005c8e:	2300      	movs	r3, #0
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3718      	adds	r7, #24
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}
 8005c98:	00010008 	.word	0x00010008
 8005c9c:	00010002 	.word	0x00010002

08005ca0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b088      	sub	sp, #32
 8005ca4:	af02      	add	r7, sp, #8
 8005ca6:	60f8      	str	r0, [r7, #12]
 8005ca8:	607a      	str	r2, [r7, #4]
 8005caa:	603b      	str	r3, [r7, #0]
 8005cac:	460b      	mov	r3, r1
 8005cae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	681a      	ldr	r2, [r3, #0]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005cc4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	2b08      	cmp	r3, #8
 8005cca:	d006      	beq.n	8005cda <I2C_MasterRequestRead+0x3a>
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	d003      	beq.n	8005cda <I2C_MasterRequestRead+0x3a>
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005cd8:	d108      	bne.n	8005cec <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ce8:	601a      	str	r2, [r3, #0]
 8005cea:	e00b      	b.n	8005d04 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cf0:	2b11      	cmp	r3, #17
 8005cf2:	d107      	bne.n	8005d04 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d02:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	9300      	str	r3, [sp, #0]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005d10:	68f8      	ldr	r0, [r7, #12]
 8005d12:	f000 f93b 	bl	8005f8c <I2C_WaitOnFlagUntilTimeout>
 8005d16:	4603      	mov	r3, r0
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d00d      	beq.n	8005d38 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d2a:	d103      	bne.n	8005d34 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d32:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005d34:	2303      	movs	r3, #3
 8005d36:	e079      	b.n	8005e2c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	691b      	ldr	r3, [r3, #16]
 8005d3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d40:	d108      	bne.n	8005d54 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005d42:	897b      	ldrh	r3, [r7, #10]
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	f043 0301 	orr.w	r3, r3, #1
 8005d4a:	b2da      	uxtb	r2, r3
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	611a      	str	r2, [r3, #16]
 8005d52:	e05f      	b.n	8005e14 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005d54:	897b      	ldrh	r3, [r7, #10]
 8005d56:	11db      	asrs	r3, r3, #7
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	f003 0306 	and.w	r3, r3, #6
 8005d5e:	b2db      	uxtb	r3, r3
 8005d60:	f063 030f 	orn	r3, r3, #15
 8005d64:	b2da      	uxtb	r2, r3
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	4930      	ldr	r1, [pc, #192]	; (8005e34 <I2C_MasterRequestRead+0x194>)
 8005d72:	68f8      	ldr	r0, [r7, #12]
 8005d74:	f000 f961 	bl	800603a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d001      	beq.n	8005d82 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e054      	b.n	8005e2c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005d82:	897b      	ldrh	r3, [r7, #10]
 8005d84:	b2da      	uxtb	r2, r3
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	4929      	ldr	r1, [pc, #164]	; (8005e38 <I2C_MasterRequestRead+0x198>)
 8005d92:	68f8      	ldr	r0, [r7, #12]
 8005d94:	f000 f951 	bl	800603a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d001      	beq.n	8005da2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e044      	b.n	8005e2c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005da2:	2300      	movs	r3, #0
 8005da4:	613b      	str	r3, [r7, #16]
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	695b      	ldr	r3, [r3, #20]
 8005dac:	613b      	str	r3, [r7, #16]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	699b      	ldr	r3, [r3, #24]
 8005db4:	613b      	str	r3, [r7, #16]
 8005db6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005dc6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	9300      	str	r3, [sp, #0]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005dd4:	68f8      	ldr	r0, [r7, #12]
 8005dd6:	f000 f8d9 	bl	8005f8c <I2C_WaitOnFlagUntilTimeout>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d00d      	beq.n	8005dfc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dee:	d103      	bne.n	8005df8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005df6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005df8:	2303      	movs	r3, #3
 8005dfa:	e017      	b.n	8005e2c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005dfc:	897b      	ldrh	r3, [r7, #10]
 8005dfe:	11db      	asrs	r3, r3, #7
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	f003 0306 	and.w	r3, r3, #6
 8005e06:	b2db      	uxtb	r3, r3
 8005e08:	f063 030e 	orn	r3, r3, #14
 8005e0c:	b2da      	uxtb	r2, r3
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	687a      	ldr	r2, [r7, #4]
 8005e18:	4907      	ldr	r1, [pc, #28]	; (8005e38 <I2C_MasterRequestRead+0x198>)
 8005e1a:	68f8      	ldr	r0, [r7, #12]
 8005e1c:	f000 f90d 	bl	800603a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e20:	4603      	mov	r3, r0
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d001      	beq.n	8005e2a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	e000      	b.n	8005e2c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005e2a:	2300      	movs	r3, #0
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3718      	adds	r7, #24
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}
 8005e34:	00010008 	.word	0x00010008
 8005e38:	00010002 	.word	0x00010002

08005e3c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b086      	sub	sp, #24
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e44:	2300      	movs	r3, #0
 8005e46:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e4c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e54:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005e56:	4b4b      	ldr	r3, [pc, #300]	; (8005f84 <I2C_DMAAbort+0x148>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	08db      	lsrs	r3, r3, #3
 8005e5c:	4a4a      	ldr	r2, [pc, #296]	; (8005f88 <I2C_DMAAbort+0x14c>)
 8005e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e62:	0a1a      	lsrs	r2, r3, #8
 8005e64:	4613      	mov	r3, r2
 8005e66:	009b      	lsls	r3, r3, #2
 8005e68:	4413      	add	r3, r2
 8005e6a:	00da      	lsls	r2, r3, #3
 8005e6c:	1ad3      	subs	r3, r2, r3
 8005e6e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d106      	bne.n	8005e84 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e7a:	f043 0220 	orr.w	r2, r3, #32
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005e82:	e00a      	b.n	8005e9a <I2C_DMAAbort+0x5e>
    }
    count--;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	3b01      	subs	r3, #1
 8005e88:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e98:	d0ea      	beq.n	8005e70 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d003      	beq.n	8005eaa <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d003      	beq.n	8005eba <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ec8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d003      	beq.n	8005ee0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005edc:	2200      	movs	r2, #0
 8005ede:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d003      	beq.n	8005ef0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eec:	2200      	movs	r2, #0
 8005eee:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f022 0201 	bic.w	r2, r2, #1
 8005efe:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f06:	b2db      	uxtb	r3, r3
 8005f08:	2b60      	cmp	r3, #96	; 0x60
 8005f0a:	d10e      	bne.n	8005f2a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	2220      	movs	r2, #32
 8005f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	2200      	movs	r2, #0
 8005f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005f22:	6978      	ldr	r0, [r7, #20]
 8005f24:	f7fe fd5d 	bl	80049e2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005f28:	e027      	b.n	8005f7a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005f2a:	7cfb      	ldrb	r3, [r7, #19]
 8005f2c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005f30:	2b28      	cmp	r3, #40	; 0x28
 8005f32:	d117      	bne.n	8005f64 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f042 0201 	orr.w	r2, r2, #1
 8005f42:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	681a      	ldr	r2, [r3, #0]
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005f52:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	2200      	movs	r2, #0
 8005f58:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	2228      	movs	r2, #40	; 0x28
 8005f5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005f62:	e007      	b.n	8005f74 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	2220      	movs	r2, #32
 8005f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005f74:	6978      	ldr	r0, [r7, #20]
 8005f76:	f7fe fd2a 	bl	80049ce <HAL_I2C_ErrorCallback>
}
 8005f7a:	bf00      	nop
 8005f7c:	3718      	adds	r7, #24
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
 8005f82:	bf00      	nop
 8005f84:	20000004 	.word	0x20000004
 8005f88:	14f8b589 	.word	0x14f8b589

08005f8c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b084      	sub	sp, #16
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	60b9      	str	r1, [r7, #8]
 8005f96:	603b      	str	r3, [r7, #0]
 8005f98:	4613      	mov	r3, r2
 8005f9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f9c:	e025      	b.n	8005fea <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005fa4:	d021      	beq.n	8005fea <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fa6:	f7fd f945 	bl	8003234 <HAL_GetTick>
 8005faa:	4602      	mov	r2, r0
 8005fac:	69bb      	ldr	r3, [r7, #24]
 8005fae:	1ad3      	subs	r3, r2, r3
 8005fb0:	683a      	ldr	r2, [r7, #0]
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	d302      	bcc.n	8005fbc <I2C_WaitOnFlagUntilTimeout+0x30>
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d116      	bne.n	8005fea <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2220      	movs	r2, #32
 8005fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd6:	f043 0220 	orr.w	r2, r3, #32
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	e023      	b.n	8006032 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	0c1b      	lsrs	r3, r3, #16
 8005fee:	b2db      	uxtb	r3, r3
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d10d      	bne.n	8006010 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	695b      	ldr	r3, [r3, #20]
 8005ffa:	43da      	mvns	r2, r3
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	4013      	ands	r3, r2
 8006000:	b29b      	uxth	r3, r3
 8006002:	2b00      	cmp	r3, #0
 8006004:	bf0c      	ite	eq
 8006006:	2301      	moveq	r3, #1
 8006008:	2300      	movne	r3, #0
 800600a:	b2db      	uxtb	r3, r3
 800600c:	461a      	mov	r2, r3
 800600e:	e00c      	b.n	800602a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	699b      	ldr	r3, [r3, #24]
 8006016:	43da      	mvns	r2, r3
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	4013      	ands	r3, r2
 800601c:	b29b      	uxth	r3, r3
 800601e:	2b00      	cmp	r3, #0
 8006020:	bf0c      	ite	eq
 8006022:	2301      	moveq	r3, #1
 8006024:	2300      	movne	r3, #0
 8006026:	b2db      	uxtb	r3, r3
 8006028:	461a      	mov	r2, r3
 800602a:	79fb      	ldrb	r3, [r7, #7]
 800602c:	429a      	cmp	r2, r3
 800602e:	d0b6      	beq.n	8005f9e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006030:	2300      	movs	r3, #0
}
 8006032:	4618      	mov	r0, r3
 8006034:	3710      	adds	r7, #16
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}

0800603a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800603a:	b580      	push	{r7, lr}
 800603c:	b084      	sub	sp, #16
 800603e:	af00      	add	r7, sp, #0
 8006040:	60f8      	str	r0, [r7, #12]
 8006042:	60b9      	str	r1, [r7, #8]
 8006044:	607a      	str	r2, [r7, #4]
 8006046:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006048:	e051      	b.n	80060ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	695b      	ldr	r3, [r3, #20]
 8006050:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006054:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006058:	d123      	bne.n	80060a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006068:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006072:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2200      	movs	r2, #0
 8006078:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2220      	movs	r2, #32
 800607e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2200      	movs	r2, #0
 8006086:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800608e:	f043 0204 	orr.w	r2, r3, #4
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2200      	movs	r2, #0
 800609a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	e046      	b.n	8006130 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060a8:	d021      	beq.n	80060ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060aa:	f7fd f8c3 	bl	8003234 <HAL_GetTick>
 80060ae:	4602      	mov	r2, r0
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	1ad3      	subs	r3, r2, r3
 80060b4:	687a      	ldr	r2, [r7, #4]
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d302      	bcc.n	80060c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d116      	bne.n	80060ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2200      	movs	r2, #0
 80060c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2220      	movs	r2, #32
 80060ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2200      	movs	r2, #0
 80060d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060da:	f043 0220 	orr.w	r2, r3, #32
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2200      	movs	r2, #0
 80060e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	e020      	b.n	8006130 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	0c1b      	lsrs	r3, r3, #16
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d10c      	bne.n	8006112 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	695b      	ldr	r3, [r3, #20]
 80060fe:	43da      	mvns	r2, r3
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	4013      	ands	r3, r2
 8006104:	b29b      	uxth	r3, r3
 8006106:	2b00      	cmp	r3, #0
 8006108:	bf14      	ite	ne
 800610a:	2301      	movne	r3, #1
 800610c:	2300      	moveq	r3, #0
 800610e:	b2db      	uxtb	r3, r3
 8006110:	e00b      	b.n	800612a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	699b      	ldr	r3, [r3, #24]
 8006118:	43da      	mvns	r2, r3
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	4013      	ands	r3, r2
 800611e:	b29b      	uxth	r3, r3
 8006120:	2b00      	cmp	r3, #0
 8006122:	bf14      	ite	ne
 8006124:	2301      	movne	r3, #1
 8006126:	2300      	moveq	r3, #0
 8006128:	b2db      	uxtb	r3, r3
 800612a:	2b00      	cmp	r3, #0
 800612c:	d18d      	bne.n	800604a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800612e:	2300      	movs	r3, #0
}
 8006130:	4618      	mov	r0, r3
 8006132:	3710      	adds	r7, #16
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}

08006138 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b084      	sub	sp, #16
 800613c:	af00      	add	r7, sp, #0
 800613e:	60f8      	str	r0, [r7, #12]
 8006140:	60b9      	str	r1, [r7, #8]
 8006142:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006144:	e02d      	b.n	80061a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006146:	68f8      	ldr	r0, [r7, #12]
 8006148:	f000 f900 	bl	800634c <I2C_IsAcknowledgeFailed>
 800614c:	4603      	mov	r3, r0
 800614e:	2b00      	cmp	r3, #0
 8006150:	d001      	beq.n	8006156 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	e02d      	b.n	80061b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800615c:	d021      	beq.n	80061a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800615e:	f7fd f869 	bl	8003234 <HAL_GetTick>
 8006162:	4602      	mov	r2, r0
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	1ad3      	subs	r3, r2, r3
 8006168:	68ba      	ldr	r2, [r7, #8]
 800616a:	429a      	cmp	r2, r3
 800616c:	d302      	bcc.n	8006174 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d116      	bne.n	80061a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2200      	movs	r2, #0
 8006178:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2220      	movs	r2, #32
 800617e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2200      	movs	r2, #0
 8006186:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800618e:	f043 0220 	orr.w	r2, r3, #32
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2200      	movs	r2, #0
 800619a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	e007      	b.n	80061b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	695b      	ldr	r3, [r3, #20]
 80061a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061ac:	2b80      	cmp	r3, #128	; 0x80
 80061ae:	d1ca      	bne.n	8006146 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80061b0:	2300      	movs	r3, #0
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3710      	adds	r7, #16
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}

080061ba <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80061ba:	b580      	push	{r7, lr}
 80061bc:	b084      	sub	sp, #16
 80061be:	af00      	add	r7, sp, #0
 80061c0:	60f8      	str	r0, [r7, #12]
 80061c2:	60b9      	str	r1, [r7, #8]
 80061c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80061c6:	e02d      	b.n	8006224 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80061c8:	68f8      	ldr	r0, [r7, #12]
 80061ca:	f000 f8bf 	bl	800634c <I2C_IsAcknowledgeFailed>
 80061ce:	4603      	mov	r3, r0
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d001      	beq.n	80061d8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80061d4:	2301      	movs	r3, #1
 80061d6:	e02d      	b.n	8006234 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061de:	d021      	beq.n	8006224 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061e0:	f7fd f828 	bl	8003234 <HAL_GetTick>
 80061e4:	4602      	mov	r2, r0
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	1ad3      	subs	r3, r2, r3
 80061ea:	68ba      	ldr	r2, [r7, #8]
 80061ec:	429a      	cmp	r2, r3
 80061ee:	d302      	bcc.n	80061f6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d116      	bne.n	8006224 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2200      	movs	r2, #0
 80061fa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2220      	movs	r2, #32
 8006200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2200      	movs	r2, #0
 8006208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006210:	f043 0220 	orr.w	r2, r3, #32
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2200      	movs	r2, #0
 800621c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006220:	2301      	movs	r3, #1
 8006222:	e007      	b.n	8006234 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	695b      	ldr	r3, [r3, #20]
 800622a:	f003 0304 	and.w	r3, r3, #4
 800622e:	2b04      	cmp	r3, #4
 8006230:	d1ca      	bne.n	80061c8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006232:	2300      	movs	r3, #0
}
 8006234:	4618      	mov	r0, r3
 8006236:	3710      	adds	r7, #16
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}

0800623c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800623c:	b480      	push	{r7}
 800623e:	b085      	sub	sp, #20
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006244:	2300      	movs	r3, #0
 8006246:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006248:	4b13      	ldr	r3, [pc, #76]	; (8006298 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	08db      	lsrs	r3, r3, #3
 800624e:	4a13      	ldr	r2, [pc, #76]	; (800629c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006250:	fba2 2303 	umull	r2, r3, r2, r3
 8006254:	0a1a      	lsrs	r2, r3, #8
 8006256:	4613      	mov	r3, r2
 8006258:	009b      	lsls	r3, r3, #2
 800625a:	4413      	add	r3, r2
 800625c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	3b01      	subs	r3, #1
 8006262:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d107      	bne.n	800627a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800626e:	f043 0220 	orr.w	r2, r3, #32
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	e008      	b.n	800628c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006284:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006288:	d0e9      	beq.n	800625e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800628a:	2300      	movs	r3, #0
}
 800628c:	4618      	mov	r0, r3
 800628e:	3714      	adds	r7, #20
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr
 8006298:	20000004 	.word	0x20000004
 800629c:	14f8b589 	.word	0x14f8b589

080062a0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b084      	sub	sp, #16
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	60f8      	str	r0, [r7, #12]
 80062a8:	60b9      	str	r1, [r7, #8]
 80062aa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80062ac:	e042      	b.n	8006334 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	695b      	ldr	r3, [r3, #20]
 80062b4:	f003 0310 	and.w	r3, r3, #16
 80062b8:	2b10      	cmp	r3, #16
 80062ba:	d119      	bne.n	80062f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f06f 0210 	mvn.w	r2, #16
 80062c4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2200      	movs	r2, #0
 80062ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2220      	movs	r2, #32
 80062d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2200      	movs	r2, #0
 80062d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2200      	movs	r2, #0
 80062e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	e029      	b.n	8006344 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062f0:	f7fc ffa0 	bl	8003234 <HAL_GetTick>
 80062f4:	4602      	mov	r2, r0
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	1ad3      	subs	r3, r2, r3
 80062fa:	68ba      	ldr	r2, [r7, #8]
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d302      	bcc.n	8006306 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d116      	bne.n	8006334 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2200      	movs	r2, #0
 800630a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2220      	movs	r2, #32
 8006310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2200      	movs	r2, #0
 8006318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006320:	f043 0220 	orr.w	r2, r3, #32
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2200      	movs	r2, #0
 800632c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006330:	2301      	movs	r3, #1
 8006332:	e007      	b.n	8006344 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	695b      	ldr	r3, [r3, #20]
 800633a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800633e:	2b40      	cmp	r3, #64	; 0x40
 8006340:	d1b5      	bne.n	80062ae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006342:	2300      	movs	r3, #0
}
 8006344:	4618      	mov	r0, r3
 8006346:	3710      	adds	r7, #16
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}

0800634c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800634c:	b480      	push	{r7}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	695b      	ldr	r3, [r3, #20]
 800635a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800635e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006362:	d11b      	bne.n	800639c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800636c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2200      	movs	r2, #0
 8006372:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2220      	movs	r2, #32
 8006378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2200      	movs	r2, #0
 8006380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006388:	f043 0204 	orr.w	r2, r3, #4
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2200      	movs	r2, #0
 8006394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006398:	2301      	movs	r3, #1
 800639a:	e000      	b.n	800639e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800639c:	2300      	movs	r3, #0
}
 800639e:	4618      	mov	r0, r3
 80063a0:	370c      	adds	r7, #12
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr

080063aa <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80063aa:	b480      	push	{r7}
 80063ac:	b083      	sub	sp, #12
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b6:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80063ba:	d103      	bne.n	80063c4 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2201      	movs	r2, #1
 80063c0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80063c2:	e007      	b.n	80063d4 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063c8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80063cc:	d102      	bne.n	80063d4 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2208      	movs	r2, #8
 80063d2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80063d4:	bf00      	nop
 80063d6:	370c      	adds	r7, #12
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr

080063e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b084      	sub	sp, #16
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d101      	bne.n	80063f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80063f0:	2301      	movs	r3, #1
 80063f2:	e0cc      	b.n	800658e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80063f4:	4b68      	ldr	r3, [pc, #416]	; (8006598 <HAL_RCC_ClockConfig+0x1b8>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f003 0307 	and.w	r3, r3, #7
 80063fc:	683a      	ldr	r2, [r7, #0]
 80063fe:	429a      	cmp	r2, r3
 8006400:	d90c      	bls.n	800641c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006402:	4b65      	ldr	r3, [pc, #404]	; (8006598 <HAL_RCC_ClockConfig+0x1b8>)
 8006404:	683a      	ldr	r2, [r7, #0]
 8006406:	b2d2      	uxtb	r2, r2
 8006408:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800640a:	4b63      	ldr	r3, [pc, #396]	; (8006598 <HAL_RCC_ClockConfig+0x1b8>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f003 0307 	and.w	r3, r3, #7
 8006412:	683a      	ldr	r2, [r7, #0]
 8006414:	429a      	cmp	r2, r3
 8006416:	d001      	beq.n	800641c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006418:	2301      	movs	r3, #1
 800641a:	e0b8      	b.n	800658e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f003 0302 	and.w	r3, r3, #2
 8006424:	2b00      	cmp	r3, #0
 8006426:	d020      	beq.n	800646a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f003 0304 	and.w	r3, r3, #4
 8006430:	2b00      	cmp	r3, #0
 8006432:	d005      	beq.n	8006440 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006434:	4b59      	ldr	r3, [pc, #356]	; (800659c <HAL_RCC_ClockConfig+0x1bc>)
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	4a58      	ldr	r2, [pc, #352]	; (800659c <HAL_RCC_ClockConfig+0x1bc>)
 800643a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800643e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f003 0308 	and.w	r3, r3, #8
 8006448:	2b00      	cmp	r3, #0
 800644a:	d005      	beq.n	8006458 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800644c:	4b53      	ldr	r3, [pc, #332]	; (800659c <HAL_RCC_ClockConfig+0x1bc>)
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	4a52      	ldr	r2, [pc, #328]	; (800659c <HAL_RCC_ClockConfig+0x1bc>)
 8006452:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006456:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006458:	4b50      	ldr	r3, [pc, #320]	; (800659c <HAL_RCC_ClockConfig+0x1bc>)
 800645a:	689b      	ldr	r3, [r3, #8]
 800645c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	689b      	ldr	r3, [r3, #8]
 8006464:	494d      	ldr	r1, [pc, #308]	; (800659c <HAL_RCC_ClockConfig+0x1bc>)
 8006466:	4313      	orrs	r3, r2
 8006468:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f003 0301 	and.w	r3, r3, #1
 8006472:	2b00      	cmp	r3, #0
 8006474:	d044      	beq.n	8006500 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	2b01      	cmp	r3, #1
 800647c:	d107      	bne.n	800648e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800647e:	4b47      	ldr	r3, [pc, #284]	; (800659c <HAL_RCC_ClockConfig+0x1bc>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006486:	2b00      	cmp	r3, #0
 8006488:	d119      	bne.n	80064be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	e07f      	b.n	800658e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	2b02      	cmp	r3, #2
 8006494:	d003      	beq.n	800649e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800649a:	2b03      	cmp	r3, #3
 800649c:	d107      	bne.n	80064ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800649e:	4b3f      	ldr	r3, [pc, #252]	; (800659c <HAL_RCC_ClockConfig+0x1bc>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d109      	bne.n	80064be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064aa:	2301      	movs	r3, #1
 80064ac:	e06f      	b.n	800658e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064ae:	4b3b      	ldr	r3, [pc, #236]	; (800659c <HAL_RCC_ClockConfig+0x1bc>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f003 0302 	and.w	r3, r3, #2
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d101      	bne.n	80064be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	e067      	b.n	800658e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80064be:	4b37      	ldr	r3, [pc, #220]	; (800659c <HAL_RCC_ClockConfig+0x1bc>)
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	f023 0203 	bic.w	r2, r3, #3
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	4934      	ldr	r1, [pc, #208]	; (800659c <HAL_RCC_ClockConfig+0x1bc>)
 80064cc:	4313      	orrs	r3, r2
 80064ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80064d0:	f7fc feb0 	bl	8003234 <HAL_GetTick>
 80064d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064d6:	e00a      	b.n	80064ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064d8:	f7fc feac 	bl	8003234 <HAL_GetTick>
 80064dc:	4602      	mov	r2, r0
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	1ad3      	subs	r3, r2, r3
 80064e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d901      	bls.n	80064ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80064ea:	2303      	movs	r3, #3
 80064ec:	e04f      	b.n	800658e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064ee:	4b2b      	ldr	r3, [pc, #172]	; (800659c <HAL_RCC_ClockConfig+0x1bc>)
 80064f0:	689b      	ldr	r3, [r3, #8]
 80064f2:	f003 020c 	and.w	r2, r3, #12
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	009b      	lsls	r3, r3, #2
 80064fc:	429a      	cmp	r2, r3
 80064fe:	d1eb      	bne.n	80064d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006500:	4b25      	ldr	r3, [pc, #148]	; (8006598 <HAL_RCC_ClockConfig+0x1b8>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f003 0307 	and.w	r3, r3, #7
 8006508:	683a      	ldr	r2, [r7, #0]
 800650a:	429a      	cmp	r2, r3
 800650c:	d20c      	bcs.n	8006528 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800650e:	4b22      	ldr	r3, [pc, #136]	; (8006598 <HAL_RCC_ClockConfig+0x1b8>)
 8006510:	683a      	ldr	r2, [r7, #0]
 8006512:	b2d2      	uxtb	r2, r2
 8006514:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006516:	4b20      	ldr	r3, [pc, #128]	; (8006598 <HAL_RCC_ClockConfig+0x1b8>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f003 0307 	and.w	r3, r3, #7
 800651e:	683a      	ldr	r2, [r7, #0]
 8006520:	429a      	cmp	r2, r3
 8006522:	d001      	beq.n	8006528 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006524:	2301      	movs	r3, #1
 8006526:	e032      	b.n	800658e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f003 0304 	and.w	r3, r3, #4
 8006530:	2b00      	cmp	r3, #0
 8006532:	d008      	beq.n	8006546 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006534:	4b19      	ldr	r3, [pc, #100]	; (800659c <HAL_RCC_ClockConfig+0x1bc>)
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	68db      	ldr	r3, [r3, #12]
 8006540:	4916      	ldr	r1, [pc, #88]	; (800659c <HAL_RCC_ClockConfig+0x1bc>)
 8006542:	4313      	orrs	r3, r2
 8006544:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f003 0308 	and.w	r3, r3, #8
 800654e:	2b00      	cmp	r3, #0
 8006550:	d009      	beq.n	8006566 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006552:	4b12      	ldr	r3, [pc, #72]	; (800659c <HAL_RCC_ClockConfig+0x1bc>)
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	691b      	ldr	r3, [r3, #16]
 800655e:	00db      	lsls	r3, r3, #3
 8006560:	490e      	ldr	r1, [pc, #56]	; (800659c <HAL_RCC_ClockConfig+0x1bc>)
 8006562:	4313      	orrs	r3, r2
 8006564:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006566:	f000 f889 	bl	800667c <HAL_RCC_GetSysClockFreq>
 800656a:	4602      	mov	r2, r0
 800656c:	4b0b      	ldr	r3, [pc, #44]	; (800659c <HAL_RCC_ClockConfig+0x1bc>)
 800656e:	689b      	ldr	r3, [r3, #8]
 8006570:	091b      	lsrs	r3, r3, #4
 8006572:	f003 030f 	and.w	r3, r3, #15
 8006576:	490a      	ldr	r1, [pc, #40]	; (80065a0 <HAL_RCC_ClockConfig+0x1c0>)
 8006578:	5ccb      	ldrb	r3, [r1, r3]
 800657a:	fa22 f303 	lsr.w	r3, r2, r3
 800657e:	4a09      	ldr	r2, [pc, #36]	; (80065a4 <HAL_RCC_ClockConfig+0x1c4>)
 8006580:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006582:	4b09      	ldr	r3, [pc, #36]	; (80065a8 <HAL_RCC_ClockConfig+0x1c8>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4618      	mov	r0, r3
 8006588:	f7fc fe10 	bl	80031ac <HAL_InitTick>

  return HAL_OK;
 800658c:	2300      	movs	r3, #0
}
 800658e:	4618      	mov	r0, r3
 8006590:	3710      	adds	r7, #16
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}
 8006596:	bf00      	nop
 8006598:	40023c00 	.word	0x40023c00
 800659c:	40023800 	.word	0x40023800
 80065a0:	0802c6a4 	.word	0x0802c6a4
 80065a4:	20000004 	.word	0x20000004
 80065a8:	20000008 	.word	0x20000008

080065ac <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b08c      	sub	sp, #48	; 0x30
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	60f8      	str	r0, [r7, #12]
 80065b4:	60b9      	str	r1, [r7, #8]
 80065b6:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d129      	bne.n	8006612 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 80065be:	2300      	movs	r3, #0
 80065c0:	61bb      	str	r3, [r7, #24]
 80065c2:	4b2b      	ldr	r3, [pc, #172]	; (8006670 <HAL_RCC_MCOConfig+0xc4>)
 80065c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065c6:	4a2a      	ldr	r2, [pc, #168]	; (8006670 <HAL_RCC_MCOConfig+0xc4>)
 80065c8:	f043 0301 	orr.w	r3, r3, #1
 80065cc:	6313      	str	r3, [r2, #48]	; 0x30
 80065ce:	4b28      	ldr	r3, [pc, #160]	; (8006670 <HAL_RCC_MCOConfig+0xc4>)
 80065d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065d2:	f003 0301 	and.w	r3, r3, #1
 80065d6:	61bb      	str	r3, [r7, #24]
 80065d8:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80065da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80065de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065e0:	2302      	movs	r3, #2
 80065e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80065e4:	2303      	movs	r3, #3
 80065e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065e8:	2300      	movs	r3, #0
 80065ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80065ec:	2300      	movs	r3, #0
 80065ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80065f0:	f107 031c 	add.w	r3, r7, #28
 80065f4:	4619      	mov	r1, r3
 80065f6:	481f      	ldr	r0, [pc, #124]	; (8006674 <HAL_RCC_MCOConfig+0xc8>)
 80065f8:	f7fd f9fa 	bl	80039f0 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80065fc:	4b1c      	ldr	r3, [pc, #112]	; (8006670 <HAL_RCC_MCOConfig+0xc4>)
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8006604:	68b9      	ldr	r1, [r7, #8]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	430b      	orrs	r3, r1
 800660a:	4919      	ldr	r1, [pc, #100]	; (8006670 <HAL_RCC_MCOConfig+0xc4>)
 800660c:	4313      	orrs	r3, r2
 800660e:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8006610:	e029      	b.n	8006666 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8006612:	2300      	movs	r3, #0
 8006614:	617b      	str	r3, [r7, #20]
 8006616:	4b16      	ldr	r3, [pc, #88]	; (8006670 <HAL_RCC_MCOConfig+0xc4>)
 8006618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800661a:	4a15      	ldr	r2, [pc, #84]	; (8006670 <HAL_RCC_MCOConfig+0xc4>)
 800661c:	f043 0304 	orr.w	r3, r3, #4
 8006620:	6313      	str	r3, [r2, #48]	; 0x30
 8006622:	4b13      	ldr	r3, [pc, #76]	; (8006670 <HAL_RCC_MCOConfig+0xc4>)
 8006624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006626:	f003 0304 	and.w	r3, r3, #4
 800662a:	617b      	str	r3, [r7, #20]
 800662c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800662e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006632:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006634:	2302      	movs	r3, #2
 8006636:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006638:	2303      	movs	r3, #3
 800663a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800663c:	2300      	movs	r3, #0
 800663e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8006640:	2300      	movs	r3, #0
 8006642:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8006644:	f107 031c 	add.w	r3, r7, #28
 8006648:	4619      	mov	r1, r3
 800664a:	480b      	ldr	r0, [pc, #44]	; (8006678 <HAL_RCC_MCOConfig+0xcc>)
 800664c:	f7fd f9d0 	bl	80039f0 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8006650:	4b07      	ldr	r3, [pc, #28]	; (8006670 <HAL_RCC_MCOConfig+0xc4>)
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	00d9      	lsls	r1, r3, #3
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	430b      	orrs	r3, r1
 8006660:	4903      	ldr	r1, [pc, #12]	; (8006670 <HAL_RCC_MCOConfig+0xc4>)
 8006662:	4313      	orrs	r3, r2
 8006664:	608b      	str	r3, [r1, #8]
}
 8006666:	bf00      	nop
 8006668:	3730      	adds	r7, #48	; 0x30
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}
 800666e:	bf00      	nop
 8006670:	40023800 	.word	0x40023800
 8006674:	40020000 	.word	0x40020000
 8006678:	40020800 	.word	0x40020800

0800667c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800667c:	b5b0      	push	{r4, r5, r7, lr}
 800667e:	b084      	sub	sp, #16
 8006680:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006682:	2100      	movs	r1, #0
 8006684:	6079      	str	r1, [r7, #4]
 8006686:	2100      	movs	r1, #0
 8006688:	60f9      	str	r1, [r7, #12]
 800668a:	2100      	movs	r1, #0
 800668c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800668e:	2100      	movs	r1, #0
 8006690:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006692:	4952      	ldr	r1, [pc, #328]	; (80067dc <HAL_RCC_GetSysClockFreq+0x160>)
 8006694:	6889      	ldr	r1, [r1, #8]
 8006696:	f001 010c 	and.w	r1, r1, #12
 800669a:	2908      	cmp	r1, #8
 800669c:	d00d      	beq.n	80066ba <HAL_RCC_GetSysClockFreq+0x3e>
 800669e:	2908      	cmp	r1, #8
 80066a0:	f200 8094 	bhi.w	80067cc <HAL_RCC_GetSysClockFreq+0x150>
 80066a4:	2900      	cmp	r1, #0
 80066a6:	d002      	beq.n	80066ae <HAL_RCC_GetSysClockFreq+0x32>
 80066a8:	2904      	cmp	r1, #4
 80066aa:	d003      	beq.n	80066b4 <HAL_RCC_GetSysClockFreq+0x38>
 80066ac:	e08e      	b.n	80067cc <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80066ae:	4b4c      	ldr	r3, [pc, #304]	; (80067e0 <HAL_RCC_GetSysClockFreq+0x164>)
 80066b0:	60bb      	str	r3, [r7, #8]
       break;
 80066b2:	e08e      	b.n	80067d2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80066b4:	4b4b      	ldr	r3, [pc, #300]	; (80067e4 <HAL_RCC_GetSysClockFreq+0x168>)
 80066b6:	60bb      	str	r3, [r7, #8]
      break;
 80066b8:	e08b      	b.n	80067d2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80066ba:	4948      	ldr	r1, [pc, #288]	; (80067dc <HAL_RCC_GetSysClockFreq+0x160>)
 80066bc:	6849      	ldr	r1, [r1, #4]
 80066be:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80066c2:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80066c4:	4945      	ldr	r1, [pc, #276]	; (80067dc <HAL_RCC_GetSysClockFreq+0x160>)
 80066c6:	6849      	ldr	r1, [r1, #4]
 80066c8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80066cc:	2900      	cmp	r1, #0
 80066ce:	d024      	beq.n	800671a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80066d0:	4942      	ldr	r1, [pc, #264]	; (80067dc <HAL_RCC_GetSysClockFreq+0x160>)
 80066d2:	6849      	ldr	r1, [r1, #4]
 80066d4:	0989      	lsrs	r1, r1, #6
 80066d6:	4608      	mov	r0, r1
 80066d8:	f04f 0100 	mov.w	r1, #0
 80066dc:	f240 14ff 	movw	r4, #511	; 0x1ff
 80066e0:	f04f 0500 	mov.w	r5, #0
 80066e4:	ea00 0204 	and.w	r2, r0, r4
 80066e8:	ea01 0305 	and.w	r3, r1, r5
 80066ec:	493d      	ldr	r1, [pc, #244]	; (80067e4 <HAL_RCC_GetSysClockFreq+0x168>)
 80066ee:	fb01 f003 	mul.w	r0, r1, r3
 80066f2:	2100      	movs	r1, #0
 80066f4:	fb01 f102 	mul.w	r1, r1, r2
 80066f8:	1844      	adds	r4, r0, r1
 80066fa:	493a      	ldr	r1, [pc, #232]	; (80067e4 <HAL_RCC_GetSysClockFreq+0x168>)
 80066fc:	fba2 0101 	umull	r0, r1, r2, r1
 8006700:	1863      	adds	r3, r4, r1
 8006702:	4619      	mov	r1, r3
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	461a      	mov	r2, r3
 8006708:	f04f 0300 	mov.w	r3, #0
 800670c:	f7fa fab8 	bl	8000c80 <__aeabi_uldivmod>
 8006710:	4602      	mov	r2, r0
 8006712:	460b      	mov	r3, r1
 8006714:	4613      	mov	r3, r2
 8006716:	60fb      	str	r3, [r7, #12]
 8006718:	e04a      	b.n	80067b0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800671a:	4b30      	ldr	r3, [pc, #192]	; (80067dc <HAL_RCC_GetSysClockFreq+0x160>)
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	099b      	lsrs	r3, r3, #6
 8006720:	461a      	mov	r2, r3
 8006722:	f04f 0300 	mov.w	r3, #0
 8006726:	f240 10ff 	movw	r0, #511	; 0x1ff
 800672a:	f04f 0100 	mov.w	r1, #0
 800672e:	ea02 0400 	and.w	r4, r2, r0
 8006732:	ea03 0501 	and.w	r5, r3, r1
 8006736:	4620      	mov	r0, r4
 8006738:	4629      	mov	r1, r5
 800673a:	f04f 0200 	mov.w	r2, #0
 800673e:	f04f 0300 	mov.w	r3, #0
 8006742:	014b      	lsls	r3, r1, #5
 8006744:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006748:	0142      	lsls	r2, r0, #5
 800674a:	4610      	mov	r0, r2
 800674c:	4619      	mov	r1, r3
 800674e:	1b00      	subs	r0, r0, r4
 8006750:	eb61 0105 	sbc.w	r1, r1, r5
 8006754:	f04f 0200 	mov.w	r2, #0
 8006758:	f04f 0300 	mov.w	r3, #0
 800675c:	018b      	lsls	r3, r1, #6
 800675e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006762:	0182      	lsls	r2, r0, #6
 8006764:	1a12      	subs	r2, r2, r0
 8006766:	eb63 0301 	sbc.w	r3, r3, r1
 800676a:	f04f 0000 	mov.w	r0, #0
 800676e:	f04f 0100 	mov.w	r1, #0
 8006772:	00d9      	lsls	r1, r3, #3
 8006774:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006778:	00d0      	lsls	r0, r2, #3
 800677a:	4602      	mov	r2, r0
 800677c:	460b      	mov	r3, r1
 800677e:	1912      	adds	r2, r2, r4
 8006780:	eb45 0303 	adc.w	r3, r5, r3
 8006784:	f04f 0000 	mov.w	r0, #0
 8006788:	f04f 0100 	mov.w	r1, #0
 800678c:	0299      	lsls	r1, r3, #10
 800678e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006792:	0290      	lsls	r0, r2, #10
 8006794:	4602      	mov	r2, r0
 8006796:	460b      	mov	r3, r1
 8006798:	4610      	mov	r0, r2
 800679a:	4619      	mov	r1, r3
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	461a      	mov	r2, r3
 80067a0:	f04f 0300 	mov.w	r3, #0
 80067a4:	f7fa fa6c 	bl	8000c80 <__aeabi_uldivmod>
 80067a8:	4602      	mov	r2, r0
 80067aa:	460b      	mov	r3, r1
 80067ac:	4613      	mov	r3, r2
 80067ae:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80067b0:	4b0a      	ldr	r3, [pc, #40]	; (80067dc <HAL_RCC_GetSysClockFreq+0x160>)
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	0c1b      	lsrs	r3, r3, #16
 80067b6:	f003 0303 	and.w	r3, r3, #3
 80067ba:	3301      	adds	r3, #1
 80067bc:	005b      	lsls	r3, r3, #1
 80067be:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80067c0:	68fa      	ldr	r2, [r7, #12]
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80067c8:	60bb      	str	r3, [r7, #8]
      break;
 80067ca:	e002      	b.n	80067d2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80067cc:	4b04      	ldr	r3, [pc, #16]	; (80067e0 <HAL_RCC_GetSysClockFreq+0x164>)
 80067ce:	60bb      	str	r3, [r7, #8]
      break;
 80067d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80067d2:	68bb      	ldr	r3, [r7, #8]
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3710      	adds	r7, #16
 80067d8:	46bd      	mov	sp, r7
 80067da:	bdb0      	pop	{r4, r5, r7, pc}
 80067dc:	40023800 	.word	0x40023800
 80067e0:	00f42400 	.word	0x00f42400
 80067e4:	017d7840 	.word	0x017d7840

080067e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80067e8:	b480      	push	{r7}
 80067ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80067ec:	4b03      	ldr	r3, [pc, #12]	; (80067fc <HAL_RCC_GetHCLKFreq+0x14>)
 80067ee:	681b      	ldr	r3, [r3, #0]
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	46bd      	mov	sp, r7
 80067f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f8:	4770      	bx	lr
 80067fa:	bf00      	nop
 80067fc:	20000004 	.word	0x20000004

08006800 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006804:	f7ff fff0 	bl	80067e8 <HAL_RCC_GetHCLKFreq>
 8006808:	4602      	mov	r2, r0
 800680a:	4b05      	ldr	r3, [pc, #20]	; (8006820 <HAL_RCC_GetPCLK1Freq+0x20>)
 800680c:	689b      	ldr	r3, [r3, #8]
 800680e:	0a9b      	lsrs	r3, r3, #10
 8006810:	f003 0307 	and.w	r3, r3, #7
 8006814:	4903      	ldr	r1, [pc, #12]	; (8006824 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006816:	5ccb      	ldrb	r3, [r1, r3]
 8006818:	fa22 f303 	lsr.w	r3, r2, r3
}
 800681c:	4618      	mov	r0, r3
 800681e:	bd80      	pop	{r7, pc}
 8006820:	40023800 	.word	0x40023800
 8006824:	0802c6b4 	.word	0x0802c6b4

08006828 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800682c:	f7ff ffdc 	bl	80067e8 <HAL_RCC_GetHCLKFreq>
 8006830:	4602      	mov	r2, r0
 8006832:	4b05      	ldr	r3, [pc, #20]	; (8006848 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006834:	689b      	ldr	r3, [r3, #8]
 8006836:	0b5b      	lsrs	r3, r3, #13
 8006838:	f003 0307 	and.w	r3, r3, #7
 800683c:	4903      	ldr	r1, [pc, #12]	; (800684c <HAL_RCC_GetPCLK2Freq+0x24>)
 800683e:	5ccb      	ldrb	r3, [r1, r3]
 8006840:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006844:	4618      	mov	r0, r3
 8006846:	bd80      	pop	{r7, pc}
 8006848:	40023800 	.word	0x40023800
 800684c:	0802c6b4 	.word	0x0802c6b4

08006850 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b088      	sub	sp, #32
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006858:	2300      	movs	r3, #0
 800685a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 800685c:	2300      	movs	r3, #0
 800685e:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 8006860:	2300      	movs	r3, #0
 8006862:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8006864:	2300      	movs	r3, #0
 8006866:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f003 0301 	and.w	r3, r3, #1
 8006870:	2b00      	cmp	r3, #0
 8006872:	d010      	beq.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8006874:	4b7a      	ldr	r3, [pc, #488]	; (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006876:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800687a:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	69db      	ldr	r3, [r3, #28]
 8006882:	4977      	ldr	r1, [pc, #476]	; (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006884:	4313      	orrs	r3, r2
 8006886:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	69db      	ldr	r3, [r3, #28]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d101      	bne.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 8006892:	2301      	movs	r3, #1
 8006894:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f003 0302 	and.w	r3, r3, #2
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d010      	beq.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80068a2:	4b6f      	ldr	r3, [pc, #444]	; (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80068a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068a8:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6a1b      	ldr	r3, [r3, #32]
 80068b0:	496b      	ldr	r1, [pc, #428]	; (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80068b2:	4313      	orrs	r3, r2
 80068b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6a1b      	ldr	r3, [r3, #32]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d101      	bne.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 80068c0:	2301      	movs	r3, #1
 80068c2:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d022      	beq.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 80068d0:	4b63      	ldr	r3, [pc, #396]	; (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80068d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068de:	4960      	ldr	r1, [pc, #384]	; (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80068e0:	4313      	orrs	r3, r2
 80068e2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d101      	bne.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 80068ee:	2301      	movs	r3, #1
 80068f0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80068fa:	d10c      	bne.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 80068fc:	4b58      	ldr	r3, [pc, #352]	; (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80068fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006902:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	695b      	ldr	r3, [r3, #20]
 800690a:	3b01      	subs	r3, #1
 800690c:	021b      	lsls	r3, r3, #8
 800690e:	4954      	ldr	r1, [pc, #336]	; (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006910:	4313      	orrs	r3, r2
 8006912:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800691e:	2b00      	cmp	r3, #0
 8006920:	d022      	beq.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 8006922:	4b4f      	ldr	r3, [pc, #316]	; (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006924:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006928:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006930:	494b      	ldr	r1, [pc, #300]	; (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006932:	4313      	orrs	r3, r2
 8006934:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800693c:	2b00      	cmp	r3, #0
 800693e:	d101      	bne.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8006940:	2301      	movs	r3, #1
 8006942:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006948:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800694c:	d10c      	bne.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 800694e:	4b44      	ldr	r3, [pc, #272]	; (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006950:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006954:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	695b      	ldr	r3, [r3, #20]
 800695c:	3b01      	subs	r3, #1
 800695e:	021b      	lsls	r3, r3, #8
 8006960:	493f      	ldr	r1, [pc, #252]	; (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006962:	4313      	orrs	r3, r2
 8006964:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f003 0308 	and.w	r3, r3, #8
 8006970:	2b00      	cmp	r3, #0
 8006972:	f000 808a 	beq.w	8006a8a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006976:	2300      	movs	r3, #0
 8006978:	60fb      	str	r3, [r7, #12]
 800697a:	4b39      	ldr	r3, [pc, #228]	; (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800697c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800697e:	4a38      	ldr	r2, [pc, #224]	; (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006984:	6413      	str	r3, [r2, #64]	; 0x40
 8006986:	4b36      	ldr	r3, [pc, #216]	; (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800698a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800698e:	60fb      	str	r3, [r7, #12]
 8006990:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006992:	4b34      	ldr	r3, [pc, #208]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a33      	ldr	r2, [pc, #204]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8006998:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800699c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800699e:	f7fc fc49 	bl	8003234 <HAL_GetTick>
 80069a2:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80069a4:	e008      	b.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80069a6:	f7fc fc45 	bl	8003234 <HAL_GetTick>
 80069aa:	4602      	mov	r2, r0
 80069ac:	69bb      	ldr	r3, [r7, #24]
 80069ae:	1ad3      	subs	r3, r2, r3
 80069b0:	2b02      	cmp	r3, #2
 80069b2:	d901      	bls.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 80069b4:	2303      	movs	r3, #3
 80069b6:	e1d1      	b.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80069b8:	4b2a      	ldr	r3, [pc, #168]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d0f0      	beq.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80069c4:	4b26      	ldr	r3, [pc, #152]	; (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80069c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069cc:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d02f      	beq.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069dc:	697a      	ldr	r2, [r7, #20]
 80069de:	429a      	cmp	r2, r3
 80069e0:	d028      	beq.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80069e2:	4b1f      	ldr	r3, [pc, #124]	; (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80069e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069ea:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80069ec:	4b1e      	ldr	r3, [pc, #120]	; (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 80069ee:	2201      	movs	r2, #1
 80069f0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80069f2:	4b1d      	ldr	r3, [pc, #116]	; (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 80069f4:	2200      	movs	r2, #0
 80069f6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80069f8:	4a19      	ldr	r2, [pc, #100]	; (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80069fe:	4b18      	ldr	r3, [pc, #96]	; (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a02:	f003 0301 	and.w	r3, r3, #1
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	d114      	bne.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006a0a:	f7fc fc13 	bl	8003234 <HAL_GetTick>
 8006a0e:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a10:	e00a      	b.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a12:	f7fc fc0f 	bl	8003234 <HAL_GetTick>
 8006a16:	4602      	mov	r2, r0
 8006a18:	69bb      	ldr	r3, [r7, #24]
 8006a1a:	1ad3      	subs	r3, r2, r3
 8006a1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d901      	bls.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 8006a24:	2303      	movs	r3, #3
 8006a26:	e199      	b.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a28:	4b0d      	ldr	r3, [pc, #52]	; (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006a2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a2c:	f003 0302 	and.w	r3, r3, #2
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d0ee      	beq.n	8006a12 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a40:	d114      	bne.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8006a42:	4b07      	ldr	r3, [pc, #28]	; (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006a44:	689b      	ldr	r3, [r3, #8]
 8006a46:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a4e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006a52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a56:	4902      	ldr	r1, [pc, #8]	; (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	608b      	str	r3, [r1, #8]
 8006a5c:	e00c      	b.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8006a5e:	bf00      	nop
 8006a60:	40023800 	.word	0x40023800
 8006a64:	40007000 	.word	0x40007000
 8006a68:	42470e40 	.word	0x42470e40
 8006a6c:	4b89      	ldr	r3, [pc, #548]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	4a88      	ldr	r2, [pc, #544]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006a72:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006a76:	6093      	str	r3, [r2, #8]
 8006a78:	4b86      	ldr	r3, [pc, #536]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006a7a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a84:	4983      	ldr	r1, [pc, #524]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006a86:	4313      	orrs	r3, r2
 8006a88:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f003 0304 	and.w	r3, r3, #4
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d004      	beq.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8006a9c:	4b7e      	ldr	r3, [pc, #504]	; (8006c98 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8006a9e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f003 0310 	and.w	r3, r3, #16
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d00a      	beq.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8006aac:	4b79      	ldr	r3, [pc, #484]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006aae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ab2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aba:	4976      	ldr	r1, [pc, #472]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006abc:	4313      	orrs	r3, r2
 8006abe:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f003 0320 	and.w	r3, r3, #32
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d011      	beq.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006ace:	4b71      	ldr	r3, [pc, #452]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006ad0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ad4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006adc:	496d      	ldr	r1, [pc, #436]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ae8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006aec:	d101      	bne.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 8006aee:	2301      	movs	r3, #1
 8006af0:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d00a      	beq.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8006afe:	4b65      	ldr	r3, [pc, #404]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006b00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b04:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b0c:	4961      	ldr	r1, [pc, #388]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8006b14:	69fb      	ldr	r3, [r7, #28]
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	d004      	beq.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	2b80      	cmp	r3, #128	; 0x80
 8006b20:	f040 80c6 	bne.w	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006b24:	4b5d      	ldr	r3, [pc, #372]	; (8006c9c <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8006b26:	2200      	movs	r2, #0
 8006b28:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006b2a:	f7fc fb83 	bl	8003234 <HAL_GetTick>
 8006b2e:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006b30:	e008      	b.n	8006b44 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006b32:	f7fc fb7f 	bl	8003234 <HAL_GetTick>
 8006b36:	4602      	mov	r2, r0
 8006b38:	69bb      	ldr	r3, [r7, #24]
 8006b3a:	1ad3      	subs	r3, r2, r3
 8006b3c:	2b02      	cmp	r3, #2
 8006b3e:	d901      	bls.n	8006b44 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006b40:	2303      	movs	r3, #3
 8006b42:	e10b      	b.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006b44:	4b53      	ldr	r3, [pc, #332]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d1f0      	bne.n	8006b32 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8006b50:	4a53      	ldr	r2, [pc, #332]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b56:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f003 0301 	and.w	r3, r3, #1
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d003      	beq.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	69db      	ldr	r3, [r3, #28]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d023      	beq.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d003      	beq.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6a1b      	ldr	r3, [r3, #32]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d019      	beq.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d004      	beq.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b94:	d00e      	beq.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d019      	beq.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d115      	bne.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x386>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006bb2:	d110      	bne.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	685a      	ldr	r2, [r3, #4]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	689b      	ldr	r3, [r3, #8]
 8006bbc:	019b      	lsls	r3, r3, #6
 8006bbe:	431a      	orrs	r2, r3
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	68db      	ldr	r3, [r3, #12]
 8006bc4:	061b      	lsls	r3, r3, #24
 8006bc6:	431a      	orrs	r2, r3
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	691b      	ldr	r3, [r3, #16]
 8006bcc:	071b      	lsls	r3, r3, #28
 8006bce:	4931      	ldr	r1, [pc, #196]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d003      	beq.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d009      	beq.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d026      	beq.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d122      	bne.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006bfe:	4b25      	ldr	r3, [pc, #148]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006c00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c04:	0e1b      	lsrs	r3, r3, #24
 8006c06:	f003 030f 	and.w	r3, r3, #15
 8006c0a:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	685a      	ldr	r2, [r3, #4]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	019b      	lsls	r3, r3, #6
 8006c16:	431a      	orrs	r2, r3
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	061b      	lsls	r3, r3, #24
 8006c1c:	431a      	orrs	r2, r3
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	691b      	ldr	r3, [r3, #16]
 8006c22:	071b      	lsls	r3, r3, #28
 8006c24:	491b      	ldr	r1, [pc, #108]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006c26:	4313      	orrs	r3, r2
 8006c28:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 8006c2c:	4b19      	ldr	r3, [pc, #100]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006c2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c32:	f023 021f 	bic.w	r2, r3, #31
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	699b      	ldr	r3, [r3, #24]
 8006c3a:	3b01      	subs	r3, #1
 8006c3c:	4915      	ldr	r1, [pc, #84]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d010      	beq.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	685a      	ldr	r2, [r3, #4]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	689b      	ldr	r3, [r3, #8]
 8006c58:	019b      	lsls	r3, r3, #6
 8006c5a:	431a      	orrs	r2, r3
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	68db      	ldr	r3, [r3, #12]
 8006c60:	061b      	lsls	r3, r3, #24
 8006c62:	431a      	orrs	r2, r3
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	691b      	ldr	r3, [r3, #16]
 8006c68:	071b      	lsls	r3, r3, #28
 8006c6a:	490a      	ldr	r1, [pc, #40]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006c72:	4b0a      	ldr	r3, [pc, #40]	; (8006c9c <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8006c74:	2201      	movs	r2, #1
 8006c76:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006c78:	f7fc fadc 	bl	8003234 <HAL_GetTick>
 8006c7c:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006c7e:	e011      	b.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006c80:	f7fc fad8 	bl	8003234 <HAL_GetTick>
 8006c84:	4602      	mov	r2, r0
 8006c86:	69bb      	ldr	r3, [r7, #24]
 8006c88:	1ad3      	subs	r3, r2, r3
 8006c8a:	2b02      	cmp	r3, #2
 8006c8c:	d90a      	bls.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006c8e:	2303      	movs	r3, #3
 8006c90:	e064      	b.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8006c92:	bf00      	nop
 8006c94:	40023800 	.word	0x40023800
 8006c98:	424711e0 	.word	0x424711e0
 8006c9c:	42470068 	.word	0x42470068
 8006ca0:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006ca4:	4b2f      	ldr	r3, [pc, #188]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d0e7      	beq.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d00a      	beq.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006cbc:	4b29      	ldr	r3, [pc, #164]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006cbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006cc2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cca:	4926      	ldr	r1, [pc, #152]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d00a      	beq.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006cde:	4b21      	ldr	r3, [pc, #132]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006ce0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ce4:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cec:	491d      	ldr	r1, [pc, #116]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d00a      	beq.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8006d00:	4b18      	ldr	r3, [pc, #96]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006d02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d06:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d0e:	4915      	ldr	r1, [pc, #84]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006d10:	4313      	orrs	r3, r2
 8006d12:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d00a      	beq.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 8006d22:	4b10      	ldr	r3, [pc, #64]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006d24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d28:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d30:	490c      	ldr	r1, [pc, #48]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006d32:	4313      	orrs	r3, r2
 8006d34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d00a      	beq.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006d44:	4b07      	ldr	r3, [pc, #28]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006d46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d4a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d52:	4904      	ldr	r1, [pc, #16]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006d54:	4313      	orrs	r3, r2
 8006d56:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8006d5a:	2300      	movs	r3, #0
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3720      	adds	r7, #32
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}
 8006d64:	40023800 	.word	0x40023800

08006d68 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b086      	sub	sp, #24
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d101      	bne.n	8006d7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006d76:	2301      	movs	r3, #1
 8006d78:	e270      	b.n	800725c <HAL_RCC_OscConfig+0x4f4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f003 0301 	and.w	r3, r3, #1
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d075      	beq.n	8006e72 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006d86:	4ba3      	ldr	r3, [pc, #652]	; (8007014 <HAL_RCC_OscConfig+0x2ac>)
 8006d88:	689b      	ldr	r3, [r3, #8]
 8006d8a:	f003 030c 	and.w	r3, r3, #12
 8006d8e:	2b04      	cmp	r3, #4
 8006d90:	d00c      	beq.n	8006dac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006d92:	4ba0      	ldr	r3, [pc, #640]	; (8007014 <HAL_RCC_OscConfig+0x2ac>)
 8006d94:	689b      	ldr	r3, [r3, #8]
 8006d96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006d9a:	2b08      	cmp	r3, #8
 8006d9c:	d112      	bne.n	8006dc4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006d9e:	4b9d      	ldr	r3, [pc, #628]	; (8007014 <HAL_RCC_OscConfig+0x2ac>)
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006da6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006daa:	d10b      	bne.n	8006dc4 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006dac:	4b99      	ldr	r3, [pc, #612]	; (8007014 <HAL_RCC_OscConfig+0x2ac>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d05b      	beq.n	8006e70 <HAL_RCC_OscConfig+0x108>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d157      	bne.n	8006e70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	e24b      	b.n	800725c <HAL_RCC_OscConfig+0x4f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dcc:	d106      	bne.n	8006ddc <HAL_RCC_OscConfig+0x74>
 8006dce:	4b91      	ldr	r3, [pc, #580]	; (8007014 <HAL_RCC_OscConfig+0x2ac>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a90      	ldr	r2, [pc, #576]	; (8007014 <HAL_RCC_OscConfig+0x2ac>)
 8006dd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006dd8:	6013      	str	r3, [r2, #0]
 8006dda:	e01d      	b.n	8006e18 <HAL_RCC_OscConfig+0xb0>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006de4:	d10c      	bne.n	8006e00 <HAL_RCC_OscConfig+0x98>
 8006de6:	4b8b      	ldr	r3, [pc, #556]	; (8007014 <HAL_RCC_OscConfig+0x2ac>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a8a      	ldr	r2, [pc, #552]	; (8007014 <HAL_RCC_OscConfig+0x2ac>)
 8006dec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006df0:	6013      	str	r3, [r2, #0]
 8006df2:	4b88      	ldr	r3, [pc, #544]	; (8007014 <HAL_RCC_OscConfig+0x2ac>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a87      	ldr	r2, [pc, #540]	; (8007014 <HAL_RCC_OscConfig+0x2ac>)
 8006df8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006dfc:	6013      	str	r3, [r2, #0]
 8006dfe:	e00b      	b.n	8006e18 <HAL_RCC_OscConfig+0xb0>
 8006e00:	4b84      	ldr	r3, [pc, #528]	; (8007014 <HAL_RCC_OscConfig+0x2ac>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a83      	ldr	r2, [pc, #524]	; (8007014 <HAL_RCC_OscConfig+0x2ac>)
 8006e06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e0a:	6013      	str	r3, [r2, #0]
 8006e0c:	4b81      	ldr	r3, [pc, #516]	; (8007014 <HAL_RCC_OscConfig+0x2ac>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a80      	ldr	r2, [pc, #512]	; (8007014 <HAL_RCC_OscConfig+0x2ac>)
 8006e12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d013      	beq.n	8006e48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e20:	f7fc fa08 	bl	8003234 <HAL_GetTick>
 8006e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e26:	e008      	b.n	8006e3a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006e28:	f7fc fa04 	bl	8003234 <HAL_GetTick>
 8006e2c:	4602      	mov	r2, r0
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	1ad3      	subs	r3, r2, r3
 8006e32:	2b64      	cmp	r3, #100	; 0x64
 8006e34:	d901      	bls.n	8006e3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006e36:	2303      	movs	r3, #3
 8006e38:	e210      	b.n	800725c <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e3a:	4b76      	ldr	r3, [pc, #472]	; (8007014 <HAL_RCC_OscConfig+0x2ac>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d0f0      	beq.n	8006e28 <HAL_RCC_OscConfig+0xc0>
 8006e46:	e014      	b.n	8006e72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e48:	f7fc f9f4 	bl	8003234 <HAL_GetTick>
 8006e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e4e:	e008      	b.n	8006e62 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006e50:	f7fc f9f0 	bl	8003234 <HAL_GetTick>
 8006e54:	4602      	mov	r2, r0
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	1ad3      	subs	r3, r2, r3
 8006e5a:	2b64      	cmp	r3, #100	; 0x64
 8006e5c:	d901      	bls.n	8006e62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006e5e:	2303      	movs	r3, #3
 8006e60:	e1fc      	b.n	800725c <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e62:	4b6c      	ldr	r3, [pc, #432]	; (8007014 <HAL_RCC_OscConfig+0x2ac>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d1f0      	bne.n	8006e50 <HAL_RCC_OscConfig+0xe8>
 8006e6e:	e000      	b.n	8006e72 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f003 0302 	and.w	r3, r3, #2
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d063      	beq.n	8006f46 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006e7e:	4b65      	ldr	r3, [pc, #404]	; (8007014 <HAL_RCC_OscConfig+0x2ac>)
 8006e80:	689b      	ldr	r3, [r3, #8]
 8006e82:	f003 030c 	and.w	r3, r3, #12
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d00b      	beq.n	8006ea2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006e8a:	4b62      	ldr	r3, [pc, #392]	; (8007014 <HAL_RCC_OscConfig+0x2ac>)
 8006e8c:	689b      	ldr	r3, [r3, #8]
 8006e8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006e92:	2b08      	cmp	r3, #8
 8006e94:	d11c      	bne.n	8006ed0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006e96:	4b5f      	ldr	r3, [pc, #380]	; (8007014 <HAL_RCC_OscConfig+0x2ac>)
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d116      	bne.n	8006ed0 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ea2:	4b5c      	ldr	r3, [pc, #368]	; (8007014 <HAL_RCC_OscConfig+0x2ac>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f003 0302 	and.w	r3, r3, #2
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d005      	beq.n	8006eba <HAL_RCC_OscConfig+0x152>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	68db      	ldr	r3, [r3, #12]
 8006eb2:	2b01      	cmp	r3, #1
 8006eb4:	d001      	beq.n	8006eba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	e1d0      	b.n	800725c <HAL_RCC_OscConfig+0x4f4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006eba:	4b56      	ldr	r3, [pc, #344]	; (8007014 <HAL_RCC_OscConfig+0x2ac>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	691b      	ldr	r3, [r3, #16]
 8006ec6:	00db      	lsls	r3, r3, #3
 8006ec8:	4952      	ldr	r1, [pc, #328]	; (8007014 <HAL_RCC_OscConfig+0x2ac>)
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ece:	e03a      	b.n	8006f46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	68db      	ldr	r3, [r3, #12]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d020      	beq.n	8006f1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006ed8:	4b4f      	ldr	r3, [pc, #316]	; (8007018 <HAL_RCC_OscConfig+0x2b0>)
 8006eda:	2201      	movs	r2, #1
 8006edc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ede:	f7fc f9a9 	bl	8003234 <HAL_GetTick>
 8006ee2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ee4:	e008      	b.n	8006ef8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006ee6:	f7fc f9a5 	bl	8003234 <HAL_GetTick>
 8006eea:	4602      	mov	r2, r0
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	1ad3      	subs	r3, r2, r3
 8006ef0:	2b02      	cmp	r3, #2
 8006ef2:	d901      	bls.n	8006ef8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006ef4:	2303      	movs	r3, #3
 8006ef6:	e1b1      	b.n	800725c <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ef8:	4b46      	ldr	r3, [pc, #280]	; (8007014 <HAL_RCC_OscConfig+0x2ac>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f003 0302 	and.w	r3, r3, #2
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d0f0      	beq.n	8006ee6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f04:	4b43      	ldr	r3, [pc, #268]	; (8007014 <HAL_RCC_OscConfig+0x2ac>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	691b      	ldr	r3, [r3, #16]
 8006f10:	00db      	lsls	r3, r3, #3
 8006f12:	4940      	ldr	r1, [pc, #256]	; (8007014 <HAL_RCC_OscConfig+0x2ac>)
 8006f14:	4313      	orrs	r3, r2
 8006f16:	600b      	str	r3, [r1, #0]
 8006f18:	e015      	b.n	8006f46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006f1a:	4b3f      	ldr	r3, [pc, #252]	; (8007018 <HAL_RCC_OscConfig+0x2b0>)
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f20:	f7fc f988 	bl	8003234 <HAL_GetTick>
 8006f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f26:	e008      	b.n	8006f3a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006f28:	f7fc f984 	bl	8003234 <HAL_GetTick>
 8006f2c:	4602      	mov	r2, r0
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	1ad3      	subs	r3, r2, r3
 8006f32:	2b02      	cmp	r3, #2
 8006f34:	d901      	bls.n	8006f3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006f36:	2303      	movs	r3, #3
 8006f38:	e190      	b.n	800725c <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f3a:	4b36      	ldr	r3, [pc, #216]	; (8007014 <HAL_RCC_OscConfig+0x2ac>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f003 0302 	and.w	r3, r3, #2
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d1f0      	bne.n	8006f28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f003 0308 	and.w	r3, r3, #8
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d030      	beq.n	8006fb4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	695b      	ldr	r3, [r3, #20]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d016      	beq.n	8006f88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006f5a:	4b30      	ldr	r3, [pc, #192]	; (800701c <HAL_RCC_OscConfig+0x2b4>)
 8006f5c:	2201      	movs	r2, #1
 8006f5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f60:	f7fc f968 	bl	8003234 <HAL_GetTick>
 8006f64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f66:	e008      	b.n	8006f7a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f68:	f7fc f964 	bl	8003234 <HAL_GetTick>
 8006f6c:	4602      	mov	r2, r0
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	1ad3      	subs	r3, r2, r3
 8006f72:	2b02      	cmp	r3, #2
 8006f74:	d901      	bls.n	8006f7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006f76:	2303      	movs	r3, #3
 8006f78:	e170      	b.n	800725c <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f7a:	4b26      	ldr	r3, [pc, #152]	; (8007014 <HAL_RCC_OscConfig+0x2ac>)
 8006f7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f7e:	f003 0302 	and.w	r3, r3, #2
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d0f0      	beq.n	8006f68 <HAL_RCC_OscConfig+0x200>
 8006f86:	e015      	b.n	8006fb4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f88:	4b24      	ldr	r3, [pc, #144]	; (800701c <HAL_RCC_OscConfig+0x2b4>)
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f8e:	f7fc f951 	bl	8003234 <HAL_GetTick>
 8006f92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f94:	e008      	b.n	8006fa8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f96:	f7fc f94d 	bl	8003234 <HAL_GetTick>
 8006f9a:	4602      	mov	r2, r0
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	1ad3      	subs	r3, r2, r3
 8006fa0:	2b02      	cmp	r3, #2
 8006fa2:	d901      	bls.n	8006fa8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006fa4:	2303      	movs	r3, #3
 8006fa6:	e159      	b.n	800725c <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006fa8:	4b1a      	ldr	r3, [pc, #104]	; (8007014 <HAL_RCC_OscConfig+0x2ac>)
 8006faa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fac:	f003 0302 	and.w	r3, r3, #2
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d1f0      	bne.n	8006f96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f003 0304 	and.w	r3, r3, #4
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	f000 80a0 	beq.w	8007102 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006fc6:	4b13      	ldr	r3, [pc, #76]	; (8007014 <HAL_RCC_OscConfig+0x2ac>)
 8006fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d10f      	bne.n	8006ff2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	60bb      	str	r3, [r7, #8]
 8006fd6:	4b0f      	ldr	r3, [pc, #60]	; (8007014 <HAL_RCC_OscConfig+0x2ac>)
 8006fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fda:	4a0e      	ldr	r2, [pc, #56]	; (8007014 <HAL_RCC_OscConfig+0x2ac>)
 8006fdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fe0:	6413      	str	r3, [r2, #64]	; 0x40
 8006fe2:	4b0c      	ldr	r3, [pc, #48]	; (8007014 <HAL_RCC_OscConfig+0x2ac>)
 8006fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fea:	60bb      	str	r3, [r7, #8]
 8006fec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006fee:	2301      	movs	r3, #1
 8006ff0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ff2:	4b0b      	ldr	r3, [pc, #44]	; (8007020 <HAL_RCC_OscConfig+0x2b8>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d121      	bne.n	8007042 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006ffe:	4b08      	ldr	r3, [pc, #32]	; (8007020 <HAL_RCC_OscConfig+0x2b8>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a07      	ldr	r2, [pc, #28]	; (8007020 <HAL_RCC_OscConfig+0x2b8>)
 8007004:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007008:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800700a:	f7fc f913 	bl	8003234 <HAL_GetTick>
 800700e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007010:	e011      	b.n	8007036 <HAL_RCC_OscConfig+0x2ce>
 8007012:	bf00      	nop
 8007014:	40023800 	.word	0x40023800
 8007018:	42470000 	.word	0x42470000
 800701c:	42470e80 	.word	0x42470e80
 8007020:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007024:	f7fc f906 	bl	8003234 <HAL_GetTick>
 8007028:	4602      	mov	r2, r0
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	1ad3      	subs	r3, r2, r3
 800702e:	2b02      	cmp	r3, #2
 8007030:	d901      	bls.n	8007036 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007032:	2303      	movs	r3, #3
 8007034:	e112      	b.n	800725c <HAL_RCC_OscConfig+0x4f4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007036:	4b8b      	ldr	r3, [pc, #556]	; (8007264 <HAL_RCC_OscConfig+0x4fc>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800703e:	2b00      	cmp	r3, #0
 8007040:	d0f0      	beq.n	8007024 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	689b      	ldr	r3, [r3, #8]
 8007046:	2b01      	cmp	r3, #1
 8007048:	d106      	bne.n	8007058 <HAL_RCC_OscConfig+0x2f0>
 800704a:	4b87      	ldr	r3, [pc, #540]	; (8007268 <HAL_RCC_OscConfig+0x500>)
 800704c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800704e:	4a86      	ldr	r2, [pc, #536]	; (8007268 <HAL_RCC_OscConfig+0x500>)
 8007050:	f043 0301 	orr.w	r3, r3, #1
 8007054:	6713      	str	r3, [r2, #112]	; 0x70
 8007056:	e01c      	b.n	8007092 <HAL_RCC_OscConfig+0x32a>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	2b05      	cmp	r3, #5
 800705e:	d10c      	bne.n	800707a <HAL_RCC_OscConfig+0x312>
 8007060:	4b81      	ldr	r3, [pc, #516]	; (8007268 <HAL_RCC_OscConfig+0x500>)
 8007062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007064:	4a80      	ldr	r2, [pc, #512]	; (8007268 <HAL_RCC_OscConfig+0x500>)
 8007066:	f043 0304 	orr.w	r3, r3, #4
 800706a:	6713      	str	r3, [r2, #112]	; 0x70
 800706c:	4b7e      	ldr	r3, [pc, #504]	; (8007268 <HAL_RCC_OscConfig+0x500>)
 800706e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007070:	4a7d      	ldr	r2, [pc, #500]	; (8007268 <HAL_RCC_OscConfig+0x500>)
 8007072:	f043 0301 	orr.w	r3, r3, #1
 8007076:	6713      	str	r3, [r2, #112]	; 0x70
 8007078:	e00b      	b.n	8007092 <HAL_RCC_OscConfig+0x32a>
 800707a:	4b7b      	ldr	r3, [pc, #492]	; (8007268 <HAL_RCC_OscConfig+0x500>)
 800707c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800707e:	4a7a      	ldr	r2, [pc, #488]	; (8007268 <HAL_RCC_OscConfig+0x500>)
 8007080:	f023 0301 	bic.w	r3, r3, #1
 8007084:	6713      	str	r3, [r2, #112]	; 0x70
 8007086:	4b78      	ldr	r3, [pc, #480]	; (8007268 <HAL_RCC_OscConfig+0x500>)
 8007088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800708a:	4a77      	ldr	r2, [pc, #476]	; (8007268 <HAL_RCC_OscConfig+0x500>)
 800708c:	f023 0304 	bic.w	r3, r3, #4
 8007090:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d015      	beq.n	80070c6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800709a:	f7fc f8cb 	bl	8003234 <HAL_GetTick>
 800709e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070a0:	e00a      	b.n	80070b8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80070a2:	f7fc f8c7 	bl	8003234 <HAL_GetTick>
 80070a6:	4602      	mov	r2, r0
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	1ad3      	subs	r3, r2, r3
 80070ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d901      	bls.n	80070b8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80070b4:	2303      	movs	r3, #3
 80070b6:	e0d1      	b.n	800725c <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070b8:	4b6b      	ldr	r3, [pc, #428]	; (8007268 <HAL_RCC_OscConfig+0x500>)
 80070ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070bc:	f003 0302 	and.w	r3, r3, #2
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d0ee      	beq.n	80070a2 <HAL_RCC_OscConfig+0x33a>
 80070c4:	e014      	b.n	80070f0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070c6:	f7fc f8b5 	bl	8003234 <HAL_GetTick>
 80070ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80070cc:	e00a      	b.n	80070e4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80070ce:	f7fc f8b1 	bl	8003234 <HAL_GetTick>
 80070d2:	4602      	mov	r2, r0
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	1ad3      	subs	r3, r2, r3
 80070d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80070dc:	4293      	cmp	r3, r2
 80070de:	d901      	bls.n	80070e4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80070e0:	2303      	movs	r3, #3
 80070e2:	e0bb      	b.n	800725c <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80070e4:	4b60      	ldr	r3, [pc, #384]	; (8007268 <HAL_RCC_OscConfig+0x500>)
 80070e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070e8:	f003 0302 	and.w	r3, r3, #2
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d1ee      	bne.n	80070ce <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80070f0:	7dfb      	ldrb	r3, [r7, #23]
 80070f2:	2b01      	cmp	r3, #1
 80070f4:	d105      	bne.n	8007102 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80070f6:	4b5c      	ldr	r3, [pc, #368]	; (8007268 <HAL_RCC_OscConfig+0x500>)
 80070f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070fa:	4a5b      	ldr	r2, [pc, #364]	; (8007268 <HAL_RCC_OscConfig+0x500>)
 80070fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007100:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	699b      	ldr	r3, [r3, #24]
 8007106:	2b00      	cmp	r3, #0
 8007108:	f000 80a7 	beq.w	800725a <HAL_RCC_OscConfig+0x4f2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800710c:	4b56      	ldr	r3, [pc, #344]	; (8007268 <HAL_RCC_OscConfig+0x500>)
 800710e:	689b      	ldr	r3, [r3, #8]
 8007110:	f003 030c 	and.w	r3, r3, #12
 8007114:	2b08      	cmp	r3, #8
 8007116:	d060      	beq.n	80071da <HAL_RCC_OscConfig+0x472>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	699b      	ldr	r3, [r3, #24]
 800711c:	2b02      	cmp	r3, #2
 800711e:	d145      	bne.n	80071ac <HAL_RCC_OscConfig+0x444>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007120:	4b52      	ldr	r3, [pc, #328]	; (800726c <HAL_RCC_OscConfig+0x504>)
 8007122:	2200      	movs	r2, #0
 8007124:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007126:	f7fc f885 	bl	8003234 <HAL_GetTick>
 800712a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800712c:	e008      	b.n	8007140 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800712e:	f7fc f881 	bl	8003234 <HAL_GetTick>
 8007132:	4602      	mov	r2, r0
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	1ad3      	subs	r3, r2, r3
 8007138:	2b02      	cmp	r3, #2
 800713a:	d901      	bls.n	8007140 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800713c:	2303      	movs	r3, #3
 800713e:	e08d      	b.n	800725c <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007140:	4b49      	ldr	r3, [pc, #292]	; (8007268 <HAL_RCC_OscConfig+0x500>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007148:	2b00      	cmp	r3, #0
 800714a:	d1f0      	bne.n	800712e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	69da      	ldr	r2, [r3, #28]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6a1b      	ldr	r3, [r3, #32]
 8007154:	431a      	orrs	r2, r3
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800715a:	019b      	lsls	r3, r3, #6
 800715c:	431a      	orrs	r2, r3
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007162:	085b      	lsrs	r3, r3, #1
 8007164:	3b01      	subs	r3, #1
 8007166:	041b      	lsls	r3, r3, #16
 8007168:	431a      	orrs	r2, r3
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800716e:	061b      	lsls	r3, r3, #24
 8007170:	431a      	orrs	r2, r3
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007176:	071b      	lsls	r3, r3, #28
 8007178:	493b      	ldr	r1, [pc, #236]	; (8007268 <HAL_RCC_OscConfig+0x500>)
 800717a:	4313      	orrs	r3, r2
 800717c:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800717e:	4b3b      	ldr	r3, [pc, #236]	; (800726c <HAL_RCC_OscConfig+0x504>)
 8007180:	2201      	movs	r2, #1
 8007182:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007184:	f7fc f856 	bl	8003234 <HAL_GetTick>
 8007188:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800718a:	e008      	b.n	800719e <HAL_RCC_OscConfig+0x436>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800718c:	f7fc f852 	bl	8003234 <HAL_GetTick>
 8007190:	4602      	mov	r2, r0
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	1ad3      	subs	r3, r2, r3
 8007196:	2b02      	cmp	r3, #2
 8007198:	d901      	bls.n	800719e <HAL_RCC_OscConfig+0x436>
          {
            return HAL_TIMEOUT;
 800719a:	2303      	movs	r3, #3
 800719c:	e05e      	b.n	800725c <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800719e:	4b32      	ldr	r3, [pc, #200]	; (8007268 <HAL_RCC_OscConfig+0x500>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d0f0      	beq.n	800718c <HAL_RCC_OscConfig+0x424>
 80071aa:	e056      	b.n	800725a <HAL_RCC_OscConfig+0x4f2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071ac:	4b2f      	ldr	r3, [pc, #188]	; (800726c <HAL_RCC_OscConfig+0x504>)
 80071ae:	2200      	movs	r2, #0
 80071b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071b2:	f7fc f83f 	bl	8003234 <HAL_GetTick>
 80071b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071b8:	e008      	b.n	80071cc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80071ba:	f7fc f83b 	bl	8003234 <HAL_GetTick>
 80071be:	4602      	mov	r2, r0
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	1ad3      	subs	r3, r2, r3
 80071c4:	2b02      	cmp	r3, #2
 80071c6:	d901      	bls.n	80071cc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80071c8:	2303      	movs	r3, #3
 80071ca:	e047      	b.n	800725c <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071cc:	4b26      	ldr	r3, [pc, #152]	; (8007268 <HAL_RCC_OscConfig+0x500>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d1f0      	bne.n	80071ba <HAL_RCC_OscConfig+0x452>
 80071d8:	e03f      	b.n	800725a <HAL_RCC_OscConfig+0x4f2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	699b      	ldr	r3, [r3, #24]
 80071de:	2b01      	cmp	r3, #1
 80071e0:	d101      	bne.n	80071e6 <HAL_RCC_OscConfig+0x47e>
      {
        return HAL_ERROR;
 80071e2:	2301      	movs	r3, #1
 80071e4:	e03a      	b.n	800725c <HAL_RCC_OscConfig+0x4f4>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80071e6:	4b20      	ldr	r3, [pc, #128]	; (8007268 <HAL_RCC_OscConfig+0x500>)
 80071e8:	685b      	ldr	r3, [r3, #4]
 80071ea:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	699b      	ldr	r3, [r3, #24]
 80071f0:	2b01      	cmp	r3, #1
 80071f2:	d030      	beq.n	8007256 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80071fe:	429a      	cmp	r2, r3
 8007200:	d129      	bne.n	8007256 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800720c:	429a      	cmp	r2, r3
 800720e:	d122      	bne.n	8007256 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007210:	68fa      	ldr	r2, [r7, #12]
 8007212:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007216:	4013      	ands	r3, r2
 8007218:	687a      	ldr	r2, [r7, #4]
 800721a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800721c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800721e:	4293      	cmp	r3, r2
 8007220:	d119      	bne.n	8007256 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800722c:	085b      	lsrs	r3, r3, #1
 800722e:	3b01      	subs	r3, #1
 8007230:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007232:	429a      	cmp	r2, r3
 8007234:	d10f      	bne.n	8007256 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007240:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007242:	429a      	cmp	r2, r3
 8007244:	d107      	bne.n	8007256 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007250:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007252:	429a      	cmp	r2, r3
 8007254:	d001      	beq.n	800725a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8007256:	2301      	movs	r3, #1
 8007258:	e000      	b.n	800725c <HAL_RCC_OscConfig+0x4f4>
        }
      }
    }
  }
  return HAL_OK;
 800725a:	2300      	movs	r3, #0
}
 800725c:	4618      	mov	r0, r3
 800725e:	3718      	adds	r7, #24
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}
 8007264:	40007000 	.word	0x40007000
 8007268:	40023800 	.word	0x40023800
 800726c:	42470060 	.word	0x42470060

08007270 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8007270:	b580      	push	{r7, lr}
 8007272:	b084      	sub	sp, #16
 8007274:	af00      	add	r7, sp, #0
 8007276:	60f8      	str	r0, [r7, #12]
 8007278:	60b9      	str	r1, [r7, #8]
 800727a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d101      	bne.n	8007286 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8007282:	2301      	movs	r3, #1
 8007284:	e034      	b.n	80072f0 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800728c:	b2db      	uxtb	r3, r3
 800728e:	2b00      	cmp	r3, #0
 8007290:	d106      	bne.n	80072a0 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	2200      	movs	r2, #0
 8007296:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800729a:	68f8      	ldr	r0, [r7, #12]
 800729c:	f7fa f9bc 	bl	8001618 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681a      	ldr	r2, [r3, #0]
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	3308      	adds	r3, #8
 80072a8:	4619      	mov	r1, r3
 80072aa:	4610      	mov	r0, r2
 80072ac:	f001 f8be 	bl	800842c <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	6818      	ldr	r0, [r3, #0]
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	689b      	ldr	r3, [r3, #8]
 80072b8:	461a      	mov	r2, r3
 80072ba:	68b9      	ldr	r1, [r7, #8]
 80072bc:	f001 f926 	bl	800850c <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	6858      	ldr	r0, [r3, #4]
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	689a      	ldr	r2, [r3, #8]
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072cc:	6879      	ldr	r1, [r7, #4]
 80072ce:	f001 f971 	bl	80085b4 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	68fa      	ldr	r2, [r7, #12]
 80072d8:	6892      	ldr	r2, [r2, #8]
 80072da:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	68fa      	ldr	r2, [r7, #12]
 80072e4:	6892      	ldr	r2, [r2, #8]
 80072e6:	f041 0101 	orr.w	r1, r1, #1
 80072ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 80072ee:	2300      	movs	r3, #0
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3710      	adds	r7, #16
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}

080072f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b082      	sub	sp, #8
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d101      	bne.n	800730a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007306:	2301      	movs	r3, #1
 8007308:	e041      	b.n	800738e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007310:	b2db      	uxtb	r3, r3
 8007312:	2b00      	cmp	r3, #0
 8007314:	d106      	bne.n	8007324 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2200      	movs	r2, #0
 800731a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f7fb fbc4 	bl	8002aac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2202      	movs	r2, #2
 8007328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681a      	ldr	r2, [r3, #0]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	3304      	adds	r3, #4
 8007334:	4619      	mov	r1, r3
 8007336:	4610      	mov	r0, r2
 8007338:	f000 f8d8 	bl	80074ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2201      	movs	r2, #1
 8007340:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2201      	movs	r2, #1
 8007348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2201      	movs	r2, #1
 8007350:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2201      	movs	r2, #1
 8007358:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2201      	movs	r2, #1
 8007360:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2201      	movs	r2, #1
 8007368:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2201      	movs	r2, #1
 8007370:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2201      	movs	r2, #1
 8007378:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2201      	movs	r2, #1
 8007380:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2201      	movs	r2, #1
 8007388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800738c:	2300      	movs	r3, #0
}
 800738e:	4618      	mov	r0, r3
 8007390:	3708      	adds	r7, #8
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}
	...

08007398 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007398:	b480      	push	{r7}
 800739a:	b085      	sub	sp, #20
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073a6:	b2db      	uxtb	r3, r3
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d001      	beq.n	80073b0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80073ac:	2301      	movs	r3, #1
 80073ae:	e046      	b.n	800743e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2202      	movs	r2, #2
 80073b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a23      	ldr	r2, [pc, #140]	; (800744c <HAL_TIM_Base_Start+0xb4>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d022      	beq.n	8007408 <HAL_TIM_Base_Start+0x70>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073ca:	d01d      	beq.n	8007408 <HAL_TIM_Base_Start+0x70>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a1f      	ldr	r2, [pc, #124]	; (8007450 <HAL_TIM_Base_Start+0xb8>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d018      	beq.n	8007408 <HAL_TIM_Base_Start+0x70>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a1e      	ldr	r2, [pc, #120]	; (8007454 <HAL_TIM_Base_Start+0xbc>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d013      	beq.n	8007408 <HAL_TIM_Base_Start+0x70>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a1c      	ldr	r2, [pc, #112]	; (8007458 <HAL_TIM_Base_Start+0xc0>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d00e      	beq.n	8007408 <HAL_TIM_Base_Start+0x70>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a1b      	ldr	r2, [pc, #108]	; (800745c <HAL_TIM_Base_Start+0xc4>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d009      	beq.n	8007408 <HAL_TIM_Base_Start+0x70>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a19      	ldr	r2, [pc, #100]	; (8007460 <HAL_TIM_Base_Start+0xc8>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d004      	beq.n	8007408 <HAL_TIM_Base_Start+0x70>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a18      	ldr	r2, [pc, #96]	; (8007464 <HAL_TIM_Base_Start+0xcc>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d111      	bne.n	800742c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	689b      	ldr	r3, [r3, #8]
 800740e:	f003 0307 	and.w	r3, r3, #7
 8007412:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2b06      	cmp	r3, #6
 8007418:	d010      	beq.n	800743c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	681a      	ldr	r2, [r3, #0]
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f042 0201 	orr.w	r2, r2, #1
 8007428:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800742a:	e007      	b.n	800743c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	681a      	ldr	r2, [r3, #0]
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f042 0201 	orr.w	r2, r2, #1
 800743a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800743c:	2300      	movs	r3, #0
}
 800743e:	4618      	mov	r0, r3
 8007440:	3714      	adds	r7, #20
 8007442:	46bd      	mov	sp, r7
 8007444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007448:	4770      	bx	lr
 800744a:	bf00      	nop
 800744c:	40010000 	.word	0x40010000
 8007450:	40000400 	.word	0x40000400
 8007454:	40000800 	.word	0x40000800
 8007458:	40000c00 	.word	0x40000c00
 800745c:	40010400 	.word	0x40010400
 8007460:	40014000 	.word	0x40014000
 8007464:	40001800 	.word	0x40001800

08007468 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b082      	sub	sp, #8
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
 8007470:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007478:	2b01      	cmp	r3, #1
 800747a:	d101      	bne.n	8007480 <HAL_TIM_SlaveConfigSynchro+0x18>
 800747c:	2302      	movs	r3, #2
 800747e:	e031      	b.n	80074e4 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2201      	movs	r2, #1
 8007484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2202      	movs	r2, #2
 800748c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8007490:	6839      	ldr	r1, [r7, #0]
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f000 f8ca 	bl	800762c <TIM_SlaveTimer_SetConfig>
 8007498:	4603      	mov	r3, r0
 800749a:	2b00      	cmp	r3, #0
 800749c:	d009      	beq.n	80074b2 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2201      	movs	r2, #1
 80074a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2200      	movs	r2, #0
 80074aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80074ae:	2301      	movs	r3, #1
 80074b0:	e018      	b.n	80074e4 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	68da      	ldr	r2, [r3, #12]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074c0:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	68da      	ldr	r2, [r3, #12]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80074d0:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2201      	movs	r2, #1
 80074d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2200      	movs	r2, #0
 80074de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80074e2:	2300      	movs	r3, #0
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	3708      	adds	r7, #8
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}

080074ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80074ec:	b480      	push	{r7}
 80074ee:	b085      	sub	sp, #20
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
 80074f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	4a40      	ldr	r2, [pc, #256]	; (8007600 <TIM_Base_SetConfig+0x114>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d013      	beq.n	800752c <TIM_Base_SetConfig+0x40>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800750a:	d00f      	beq.n	800752c <TIM_Base_SetConfig+0x40>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	4a3d      	ldr	r2, [pc, #244]	; (8007604 <TIM_Base_SetConfig+0x118>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d00b      	beq.n	800752c <TIM_Base_SetConfig+0x40>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	4a3c      	ldr	r2, [pc, #240]	; (8007608 <TIM_Base_SetConfig+0x11c>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d007      	beq.n	800752c <TIM_Base_SetConfig+0x40>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	4a3b      	ldr	r2, [pc, #236]	; (800760c <TIM_Base_SetConfig+0x120>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d003      	beq.n	800752c <TIM_Base_SetConfig+0x40>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	4a3a      	ldr	r2, [pc, #232]	; (8007610 <TIM_Base_SetConfig+0x124>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d108      	bne.n	800753e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007532:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	68fa      	ldr	r2, [r7, #12]
 800753a:	4313      	orrs	r3, r2
 800753c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	4a2f      	ldr	r2, [pc, #188]	; (8007600 <TIM_Base_SetConfig+0x114>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d02b      	beq.n	800759e <TIM_Base_SetConfig+0xb2>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800754c:	d027      	beq.n	800759e <TIM_Base_SetConfig+0xb2>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	4a2c      	ldr	r2, [pc, #176]	; (8007604 <TIM_Base_SetConfig+0x118>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d023      	beq.n	800759e <TIM_Base_SetConfig+0xb2>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	4a2b      	ldr	r2, [pc, #172]	; (8007608 <TIM_Base_SetConfig+0x11c>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d01f      	beq.n	800759e <TIM_Base_SetConfig+0xb2>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	4a2a      	ldr	r2, [pc, #168]	; (800760c <TIM_Base_SetConfig+0x120>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d01b      	beq.n	800759e <TIM_Base_SetConfig+0xb2>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	4a29      	ldr	r2, [pc, #164]	; (8007610 <TIM_Base_SetConfig+0x124>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d017      	beq.n	800759e <TIM_Base_SetConfig+0xb2>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	4a28      	ldr	r2, [pc, #160]	; (8007614 <TIM_Base_SetConfig+0x128>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d013      	beq.n	800759e <TIM_Base_SetConfig+0xb2>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	4a27      	ldr	r2, [pc, #156]	; (8007618 <TIM_Base_SetConfig+0x12c>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d00f      	beq.n	800759e <TIM_Base_SetConfig+0xb2>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	4a26      	ldr	r2, [pc, #152]	; (800761c <TIM_Base_SetConfig+0x130>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d00b      	beq.n	800759e <TIM_Base_SetConfig+0xb2>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	4a25      	ldr	r2, [pc, #148]	; (8007620 <TIM_Base_SetConfig+0x134>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d007      	beq.n	800759e <TIM_Base_SetConfig+0xb2>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	4a24      	ldr	r2, [pc, #144]	; (8007624 <TIM_Base_SetConfig+0x138>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d003      	beq.n	800759e <TIM_Base_SetConfig+0xb2>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	4a23      	ldr	r2, [pc, #140]	; (8007628 <TIM_Base_SetConfig+0x13c>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d108      	bne.n	80075b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	68db      	ldr	r3, [r3, #12]
 80075aa:	68fa      	ldr	r2, [r7, #12]
 80075ac:	4313      	orrs	r3, r2
 80075ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	695b      	ldr	r3, [r3, #20]
 80075ba:	4313      	orrs	r3, r2
 80075bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	68fa      	ldr	r2, [r7, #12]
 80075c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	689a      	ldr	r2, [r3, #8]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	681a      	ldr	r2, [r3, #0]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	4a0a      	ldr	r2, [pc, #40]	; (8007600 <TIM_Base_SetConfig+0x114>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d003      	beq.n	80075e4 <TIM_Base_SetConfig+0xf8>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	4a0c      	ldr	r2, [pc, #48]	; (8007610 <TIM_Base_SetConfig+0x124>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d103      	bne.n	80075ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	691a      	ldr	r2, [r3, #16]
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2201      	movs	r2, #1
 80075f0:	615a      	str	r2, [r3, #20]
}
 80075f2:	bf00      	nop
 80075f4:	3714      	adds	r7, #20
 80075f6:	46bd      	mov	sp, r7
 80075f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fc:	4770      	bx	lr
 80075fe:	bf00      	nop
 8007600:	40010000 	.word	0x40010000
 8007604:	40000400 	.word	0x40000400
 8007608:	40000800 	.word	0x40000800
 800760c:	40000c00 	.word	0x40000c00
 8007610:	40010400 	.word	0x40010400
 8007614:	40014000 	.word	0x40014000
 8007618:	40014400 	.word	0x40014400
 800761c:	40014800 	.word	0x40014800
 8007620:	40001800 	.word	0x40001800
 8007624:	40001c00 	.word	0x40001c00
 8007628:	40002000 	.word	0x40002000

0800762c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b086      	sub	sp, #24
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
 8007634:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	689b      	ldr	r3, [r3, #8]
 800763c:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007644:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	697a      	ldr	r2, [r7, #20]
 800764c:	4313      	orrs	r3, r2
 800764e:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	f023 0307 	bic.w	r3, r3, #7
 8007656:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	697a      	ldr	r2, [r7, #20]
 800765e:	4313      	orrs	r3, r2
 8007660:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	697a      	ldr	r2, [r7, #20]
 8007668:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	685b      	ldr	r3, [r3, #4]
 800766e:	2b70      	cmp	r3, #112	; 0x70
 8007670:	d01a      	beq.n	80076a8 <TIM_SlaveTimer_SetConfig+0x7c>
 8007672:	2b70      	cmp	r3, #112	; 0x70
 8007674:	d860      	bhi.n	8007738 <TIM_SlaveTimer_SetConfig+0x10c>
 8007676:	2b60      	cmp	r3, #96	; 0x60
 8007678:	d054      	beq.n	8007724 <TIM_SlaveTimer_SetConfig+0xf8>
 800767a:	2b60      	cmp	r3, #96	; 0x60
 800767c:	d85c      	bhi.n	8007738 <TIM_SlaveTimer_SetConfig+0x10c>
 800767e:	2b50      	cmp	r3, #80	; 0x50
 8007680:	d046      	beq.n	8007710 <TIM_SlaveTimer_SetConfig+0xe4>
 8007682:	2b50      	cmp	r3, #80	; 0x50
 8007684:	d858      	bhi.n	8007738 <TIM_SlaveTimer_SetConfig+0x10c>
 8007686:	2b40      	cmp	r3, #64	; 0x40
 8007688:	d019      	beq.n	80076be <TIM_SlaveTimer_SetConfig+0x92>
 800768a:	2b40      	cmp	r3, #64	; 0x40
 800768c:	d854      	bhi.n	8007738 <TIM_SlaveTimer_SetConfig+0x10c>
 800768e:	2b30      	cmp	r3, #48	; 0x30
 8007690:	d054      	beq.n	800773c <TIM_SlaveTimer_SetConfig+0x110>
 8007692:	2b30      	cmp	r3, #48	; 0x30
 8007694:	d850      	bhi.n	8007738 <TIM_SlaveTimer_SetConfig+0x10c>
 8007696:	2b20      	cmp	r3, #32
 8007698:	d050      	beq.n	800773c <TIM_SlaveTimer_SetConfig+0x110>
 800769a:	2b20      	cmp	r3, #32
 800769c:	d84c      	bhi.n	8007738 <TIM_SlaveTimer_SetConfig+0x10c>
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d04c      	beq.n	800773c <TIM_SlaveTimer_SetConfig+0x110>
 80076a2:	2b10      	cmp	r3, #16
 80076a4:	d04a      	beq.n	800773c <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 80076a6:	e047      	b.n	8007738 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6818      	ldr	r0, [r3, #0]
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	68d9      	ldr	r1, [r3, #12]
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	689a      	ldr	r2, [r3, #8]
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	691b      	ldr	r3, [r3, #16]
 80076b8:	f000 f8a5 	bl	8007806 <TIM_ETR_SetConfig>
      break;
 80076bc:	e03f      	b.n	800773e <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	2b05      	cmp	r3, #5
 80076c4:	d101      	bne.n	80076ca <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 80076c6:	2301      	movs	r3, #1
 80076c8:	e03a      	b.n	8007740 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	6a1b      	ldr	r3, [r3, #32]
 80076d0:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	6a1a      	ldr	r2, [r3, #32]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f022 0201 	bic.w	r2, r2, #1
 80076e0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	699b      	ldr	r3, [r3, #24]
 80076e8:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80076f0:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	691b      	ldr	r3, [r3, #16]
 80076f6:	011b      	lsls	r3, r3, #4
 80076f8:	68fa      	ldr	r2, [r7, #12]
 80076fa:	4313      	orrs	r3, r2
 80076fc:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	68fa      	ldr	r2, [r7, #12]
 8007704:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	693a      	ldr	r2, [r7, #16]
 800770c:	621a      	str	r2, [r3, #32]
      break;
 800770e:	e016      	b.n	800773e <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6818      	ldr	r0, [r3, #0]
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	6899      	ldr	r1, [r3, #8]
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	691b      	ldr	r3, [r3, #16]
 800771c:	461a      	mov	r2, r3
 800771e:	f000 f813 	bl	8007748 <TIM_TI1_ConfigInputStage>
      break;
 8007722:	e00c      	b.n	800773e <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6818      	ldr	r0, [r3, #0]
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	6899      	ldr	r1, [r3, #8]
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	691b      	ldr	r3, [r3, #16]
 8007730:	461a      	mov	r2, r3
 8007732:	f000 f838 	bl	80077a6 <TIM_TI2_ConfigInputStage>
      break;
 8007736:	e002      	b.n	800773e <TIM_SlaveTimer_SetConfig+0x112>
      break;
 8007738:	bf00      	nop
 800773a:	e000      	b.n	800773e <TIM_SlaveTimer_SetConfig+0x112>
        break;
 800773c:	bf00      	nop
  }
  return HAL_OK;
 800773e:	2300      	movs	r3, #0
}
 8007740:	4618      	mov	r0, r3
 8007742:	3718      	adds	r7, #24
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}

08007748 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007748:	b480      	push	{r7}
 800774a:	b087      	sub	sp, #28
 800774c:	af00      	add	r7, sp, #0
 800774e:	60f8      	str	r0, [r7, #12]
 8007750:	60b9      	str	r1, [r7, #8]
 8007752:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	6a1b      	ldr	r3, [r3, #32]
 8007758:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	6a1b      	ldr	r3, [r3, #32]
 800775e:	f023 0201 	bic.w	r2, r3, #1
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	699b      	ldr	r3, [r3, #24]
 800776a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007772:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	011b      	lsls	r3, r3, #4
 8007778:	693a      	ldr	r2, [r7, #16]
 800777a:	4313      	orrs	r3, r2
 800777c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	f023 030a 	bic.w	r3, r3, #10
 8007784:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007786:	697a      	ldr	r2, [r7, #20]
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	4313      	orrs	r3, r2
 800778c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	693a      	ldr	r2, [r7, #16]
 8007792:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	697a      	ldr	r2, [r7, #20]
 8007798:	621a      	str	r2, [r3, #32]
}
 800779a:	bf00      	nop
 800779c:	371c      	adds	r7, #28
 800779e:	46bd      	mov	sp, r7
 80077a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a4:	4770      	bx	lr

080077a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80077a6:	b480      	push	{r7}
 80077a8:	b087      	sub	sp, #28
 80077aa:	af00      	add	r7, sp, #0
 80077ac:	60f8      	str	r0, [r7, #12]
 80077ae:	60b9      	str	r1, [r7, #8]
 80077b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	6a1b      	ldr	r3, [r3, #32]
 80077b6:	f023 0210 	bic.w	r2, r3, #16
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	699b      	ldr	r3, [r3, #24]
 80077c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	6a1b      	ldr	r3, [r3, #32]
 80077c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80077d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	031b      	lsls	r3, r3, #12
 80077d6:	697a      	ldr	r2, [r7, #20]
 80077d8:	4313      	orrs	r3, r2
 80077da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80077e2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	011b      	lsls	r3, r3, #4
 80077e8:	693a      	ldr	r2, [r7, #16]
 80077ea:	4313      	orrs	r3, r2
 80077ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	697a      	ldr	r2, [r7, #20]
 80077f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	693a      	ldr	r2, [r7, #16]
 80077f8:	621a      	str	r2, [r3, #32]
}
 80077fa:	bf00      	nop
 80077fc:	371c      	adds	r7, #28
 80077fe:	46bd      	mov	sp, r7
 8007800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007804:	4770      	bx	lr

08007806 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007806:	b480      	push	{r7}
 8007808:	b087      	sub	sp, #28
 800780a:	af00      	add	r7, sp, #0
 800780c:	60f8      	str	r0, [r7, #12]
 800780e:	60b9      	str	r1, [r7, #8]
 8007810:	607a      	str	r2, [r7, #4]
 8007812:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	689b      	ldr	r3, [r3, #8]
 8007818:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007820:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	021a      	lsls	r2, r3, #8
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	431a      	orrs	r2, r3
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	4313      	orrs	r3, r2
 800782e:	697a      	ldr	r2, [r7, #20]
 8007830:	4313      	orrs	r3, r2
 8007832:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	697a      	ldr	r2, [r7, #20]
 8007838:	609a      	str	r2, [r3, #8]
}
 800783a:	bf00      	nop
 800783c:	371c      	adds	r7, #28
 800783e:	46bd      	mov	sp, r7
 8007840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007844:	4770      	bx	lr
	...

08007848 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007848:	b480      	push	{r7}
 800784a:	b085      	sub	sp, #20
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
 8007850:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007858:	2b01      	cmp	r3, #1
 800785a:	d101      	bne.n	8007860 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800785c:	2302      	movs	r3, #2
 800785e:	e05a      	b.n	8007916 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2201      	movs	r2, #1
 8007864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2202      	movs	r2, #2
 800786c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	689b      	ldr	r3, [r3, #8]
 800787e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007886:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	68fa      	ldr	r2, [r7, #12]
 800788e:	4313      	orrs	r3, r2
 8007890:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	68fa      	ldr	r2, [r7, #12]
 8007898:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4a21      	ldr	r2, [pc, #132]	; (8007924 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d022      	beq.n	80078ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078ac:	d01d      	beq.n	80078ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4a1d      	ldr	r2, [pc, #116]	; (8007928 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d018      	beq.n	80078ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a1b      	ldr	r2, [pc, #108]	; (800792c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d013      	beq.n	80078ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	4a1a      	ldr	r2, [pc, #104]	; (8007930 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d00e      	beq.n	80078ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a18      	ldr	r2, [pc, #96]	; (8007934 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d009      	beq.n	80078ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4a17      	ldr	r2, [pc, #92]	; (8007938 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d004      	beq.n	80078ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4a15      	ldr	r2, [pc, #84]	; (800793c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d10c      	bne.n	8007904 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80078f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	685b      	ldr	r3, [r3, #4]
 80078f6:	68ba      	ldr	r2, [r7, #8]
 80078f8:	4313      	orrs	r3, r2
 80078fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	68ba      	ldr	r2, [r7, #8]
 8007902:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2201      	movs	r2, #1
 8007908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2200      	movs	r2, #0
 8007910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007914:	2300      	movs	r3, #0
}
 8007916:	4618      	mov	r0, r3
 8007918:	3714      	adds	r7, #20
 800791a:	46bd      	mov	sp, r7
 800791c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007920:	4770      	bx	lr
 8007922:	bf00      	nop
 8007924:	40010000 	.word	0x40010000
 8007928:	40000400 	.word	0x40000400
 800792c:	40000800 	.word	0x40000800
 8007930:	40000c00 	.word	0x40000c00
 8007934:	40010400 	.word	0x40010400
 8007938:	40014000 	.word	0x40014000
 800793c:	40001800 	.word	0x40001800

08007940 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b082      	sub	sp, #8
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d101      	bne.n	8007952 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800794e:	2301      	movs	r3, #1
 8007950:	e03f      	b.n	80079d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007958:	b2db      	uxtb	r3, r3
 800795a:	2b00      	cmp	r3, #0
 800795c:	d106      	bne.n	800796c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2200      	movs	r2, #0
 8007962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f7fb fb82 	bl	8003070 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2224      	movs	r2, #36	; 0x24
 8007970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	68da      	ldr	r2, [r3, #12]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007982:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f000 fb79 	bl	800807c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	691a      	ldr	r2, [r3, #16]
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007998:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	695a      	ldr	r2, [r3, #20]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80079a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	68da      	ldr	r2, [r3, #12]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80079b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2200      	movs	r2, #0
 80079be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2220      	movs	r2, #32
 80079c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2220      	movs	r2, #32
 80079cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80079d0:	2300      	movs	r3, #0
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3708      	adds	r7, #8
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}

080079da <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80079da:	b480      	push	{r7}
 80079dc:	b085      	sub	sp, #20
 80079de:	af00      	add	r7, sp, #0
 80079e0:	60f8      	str	r0, [r7, #12]
 80079e2:	60b9      	str	r1, [r7, #8]
 80079e4:	4613      	mov	r3, r2
 80079e6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079ee:	b2db      	uxtb	r3, r3
 80079f0:	2b20      	cmp	r3, #32
 80079f2:	d130      	bne.n	8007a56 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d002      	beq.n	8007a00 <HAL_UART_Transmit_IT+0x26>
 80079fa:	88fb      	ldrh	r3, [r7, #6]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d101      	bne.n	8007a04 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8007a00:	2301      	movs	r3, #1
 8007a02:	e029      	b.n	8007a58 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a0a:	2b01      	cmp	r3, #1
 8007a0c:	d101      	bne.n	8007a12 <HAL_UART_Transmit_IT+0x38>
 8007a0e:	2302      	movs	r3, #2
 8007a10:	e022      	b.n	8007a58 <HAL_UART_Transmit_IT+0x7e>
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	2201      	movs	r2, #1
 8007a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	68ba      	ldr	r2, [r7, #8]
 8007a1e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	88fa      	ldrh	r2, [r7, #6]
 8007a24:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	88fa      	ldrh	r2, [r7, #6]
 8007a2a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	2221      	movs	r2, #33	; 0x21
 8007a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	68da      	ldr	r2, [r3, #12]
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007a50:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8007a52:	2300      	movs	r3, #0
 8007a54:	e000      	b.n	8007a58 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8007a56:	2302      	movs	r3, #2
  }
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3714      	adds	r7, #20
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a62:	4770      	bx	lr

08007a64 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b08a      	sub	sp, #40	; 0x28
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	68db      	ldr	r3, [r3, #12]
 8007a7a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	695b      	ldr	r3, [r3, #20]
 8007a82:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8007a84:	2300      	movs	r3, #0
 8007a86:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a8e:	f003 030f 	and.w	r3, r3, #15
 8007a92:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8007a94:	69bb      	ldr	r3, [r7, #24]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d10d      	bne.n	8007ab6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a9c:	f003 0320 	and.w	r3, r3, #32
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d008      	beq.n	8007ab6 <HAL_UART_IRQHandler+0x52>
 8007aa4:	6a3b      	ldr	r3, [r7, #32]
 8007aa6:	f003 0320 	and.w	r3, r3, #32
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d003      	beq.n	8007ab6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f000 fa4d 	bl	8007f4e <UART_Receive_IT>
      return;
 8007ab4:	e17c      	b.n	8007db0 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007ab6:	69bb      	ldr	r3, [r7, #24]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	f000 80b1 	beq.w	8007c20 <HAL_UART_IRQHandler+0x1bc>
 8007abe:	69fb      	ldr	r3, [r7, #28]
 8007ac0:	f003 0301 	and.w	r3, r3, #1
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d105      	bne.n	8007ad4 <HAL_UART_IRQHandler+0x70>
 8007ac8:	6a3b      	ldr	r3, [r7, #32]
 8007aca:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	f000 80a6 	beq.w	8007c20 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad6:	f003 0301 	and.w	r3, r3, #1
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d00a      	beq.n	8007af4 <HAL_UART_IRQHandler+0x90>
 8007ade:	6a3b      	ldr	r3, [r7, #32]
 8007ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d005      	beq.n	8007af4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aec:	f043 0201 	orr.w	r2, r3, #1
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af6:	f003 0304 	and.w	r3, r3, #4
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d00a      	beq.n	8007b14 <HAL_UART_IRQHandler+0xb0>
 8007afe:	69fb      	ldr	r3, [r7, #28]
 8007b00:	f003 0301 	and.w	r3, r3, #1
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d005      	beq.n	8007b14 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b0c:	f043 0202 	orr.w	r2, r3, #2
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b16:	f003 0302 	and.w	r3, r3, #2
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d00a      	beq.n	8007b34 <HAL_UART_IRQHandler+0xd0>
 8007b1e:	69fb      	ldr	r3, [r7, #28]
 8007b20:	f003 0301 	and.w	r3, r3, #1
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d005      	beq.n	8007b34 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b2c:	f043 0204 	orr.w	r2, r3, #4
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b36:	f003 0308 	and.w	r3, r3, #8
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d00f      	beq.n	8007b5e <HAL_UART_IRQHandler+0xfa>
 8007b3e:	6a3b      	ldr	r3, [r7, #32]
 8007b40:	f003 0320 	and.w	r3, r3, #32
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d104      	bne.n	8007b52 <HAL_UART_IRQHandler+0xee>
 8007b48:	69fb      	ldr	r3, [r7, #28]
 8007b4a:	f003 0301 	and.w	r3, r3, #1
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d005      	beq.n	8007b5e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b56:	f043 0208 	orr.w	r2, r3, #8
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	f000 811f 	beq.w	8007da6 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b6a:	f003 0320 	and.w	r3, r3, #32
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d007      	beq.n	8007b82 <HAL_UART_IRQHandler+0x11e>
 8007b72:	6a3b      	ldr	r3, [r7, #32]
 8007b74:	f003 0320 	and.w	r3, r3, #32
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d002      	beq.n	8007b82 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f000 f9e6 	bl	8007f4e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	695b      	ldr	r3, [r3, #20]
 8007b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b8c:	2b40      	cmp	r3, #64	; 0x40
 8007b8e:	bf0c      	ite	eq
 8007b90:	2301      	moveq	r3, #1
 8007b92:	2300      	movne	r3, #0
 8007b94:	b2db      	uxtb	r3, r3
 8007b96:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b9c:	f003 0308 	and.w	r3, r3, #8
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d102      	bne.n	8007baa <HAL_UART_IRQHandler+0x146>
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d031      	beq.n	8007c0e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f000 f926 	bl	8007dfc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	695b      	ldr	r3, [r3, #20]
 8007bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bba:	2b40      	cmp	r3, #64	; 0x40
 8007bbc:	d123      	bne.n	8007c06 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	695a      	ldr	r2, [r3, #20]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007bcc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d013      	beq.n	8007bfe <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bda:	4a77      	ldr	r2, [pc, #476]	; (8007db8 <HAL_UART_IRQHandler+0x354>)
 8007bdc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007be2:	4618      	mov	r0, r3
 8007be4:	f7fb fdf3 	bl	80037ce <HAL_DMA_Abort_IT>
 8007be8:	4603      	mov	r3, r0
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d016      	beq.n	8007c1c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bf4:	687a      	ldr	r2, [r7, #4]
 8007bf6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007bf8:	4610      	mov	r0, r2
 8007bfa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bfc:	e00e      	b.n	8007c1c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f000 f8e6 	bl	8007dd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c04:	e00a      	b.n	8007c1c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f000 f8e2 	bl	8007dd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c0c:	e006      	b.n	8007c1c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f000 f8de 	bl	8007dd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2200      	movs	r2, #0
 8007c18:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007c1a:	e0c4      	b.n	8007da6 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c1c:	bf00      	nop
    return;
 8007c1e:	e0c2      	b.n	8007da6 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c24:	2b01      	cmp	r3, #1
 8007c26:	f040 80a2 	bne.w	8007d6e <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8007c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c2c:	f003 0310 	and.w	r3, r3, #16
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	f000 809c 	beq.w	8007d6e <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8007c36:	6a3b      	ldr	r3, [r7, #32]
 8007c38:	f003 0310 	and.w	r3, r3, #16
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	f000 8096 	beq.w	8007d6e <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007c42:	2300      	movs	r3, #0
 8007c44:	60fb      	str	r3, [r7, #12]
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	60fb      	str	r3, [r7, #12]
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	685b      	ldr	r3, [r3, #4]
 8007c54:	60fb      	str	r3, [r7, #12]
 8007c56:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	695b      	ldr	r3, [r3, #20]
 8007c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c62:	2b40      	cmp	r3, #64	; 0x40
 8007c64:	d14f      	bne.n	8007d06 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	685b      	ldr	r3, [r3, #4]
 8007c6e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8007c70:	8a3b      	ldrh	r3, [r7, #16]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	f000 8099 	beq.w	8007daa <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007c7c:	8a3a      	ldrh	r2, [r7, #16]
 8007c7e:	429a      	cmp	r2, r3
 8007c80:	f080 8093 	bcs.w	8007daa <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	8a3a      	ldrh	r2, [r7, #16]
 8007c88:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c8e:	69db      	ldr	r3, [r3, #28]
 8007c90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c94:	d02b      	beq.n	8007cee <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	68da      	ldr	r2, [r3, #12]
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007ca4:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	695a      	ldr	r2, [r3, #20]
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f022 0201 	bic.w	r2, r2, #1
 8007cb4:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	695a      	ldr	r2, [r3, #20]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007cc4:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2220      	movs	r2, #32
 8007cca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	68da      	ldr	r2, [r3, #12]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f022 0210 	bic.w	r2, r2, #16
 8007ce2:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ce8:	4618      	mov	r0, r3
 8007cea:	f7fb fd00 	bl	80036ee <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007cf6:	b29b      	uxth	r3, r3
 8007cf8:	1ad3      	subs	r3, r2, r3
 8007cfa:	b29b      	uxth	r3, r3
 8007cfc:	4619      	mov	r1, r3
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f000 f870 	bl	8007de4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007d04:	e051      	b.n	8007daa <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007d0e:	b29b      	uxth	r3, r3
 8007d10:	1ad3      	subs	r3, r2, r3
 8007d12:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007d18:	b29b      	uxth	r3, r3
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d047      	beq.n	8007dae <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8007d1e:	8a7b      	ldrh	r3, [r7, #18]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d044      	beq.n	8007dae <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	68da      	ldr	r2, [r3, #12]
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007d32:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	695a      	ldr	r2, [r3, #20]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f022 0201 	bic.w	r2, r2, #1
 8007d42:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2220      	movs	r2, #32
 8007d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	68da      	ldr	r2, [r3, #12]
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f022 0210 	bic.w	r2, r2, #16
 8007d60:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007d62:	8a7b      	ldrh	r3, [r7, #18]
 8007d64:	4619      	mov	r1, r3
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f000 f83c 	bl	8007de4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007d6c:	e01f      	b.n	8007dae <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d008      	beq.n	8007d8a <HAL_UART_IRQHandler+0x326>
 8007d78:	6a3b      	ldr	r3, [r7, #32]
 8007d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d003      	beq.n	8007d8a <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f000 f87b 	bl	8007e7e <UART_Transmit_IT>
    return;
 8007d88:	e012      	b.n	8007db0 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d00d      	beq.n	8007db0 <HAL_UART_IRQHandler+0x34c>
 8007d94:	6a3b      	ldr	r3, [r7, #32]
 8007d96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d008      	beq.n	8007db0 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f000 f8bd 	bl	8007f1e <UART_EndTransmit_IT>
    return;
 8007da4:	e004      	b.n	8007db0 <HAL_UART_IRQHandler+0x34c>
    return;
 8007da6:	bf00      	nop
 8007da8:	e002      	b.n	8007db0 <HAL_UART_IRQHandler+0x34c>
      return;
 8007daa:	bf00      	nop
 8007dac:	e000      	b.n	8007db0 <HAL_UART_IRQHandler+0x34c>
      return;
 8007dae:	bf00      	nop
  }
}
 8007db0:	3728      	adds	r7, #40	; 0x28
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}
 8007db6:	bf00      	nop
 8007db8:	08007e57 	.word	0x08007e57

08007dbc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b083      	sub	sp, #12
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007dc4:	bf00      	nop
 8007dc6:	370c      	adds	r7, #12
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dce:	4770      	bx	lr

08007dd0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b083      	sub	sp, #12
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007dd8:	bf00      	nop
 8007dda:	370c      	adds	r7, #12
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de2:	4770      	bx	lr

08007de4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007de4:	b480      	push	{r7}
 8007de6:	b083      	sub	sp, #12
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
 8007dec:	460b      	mov	r3, r1
 8007dee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007df0:	bf00      	nop
 8007df2:	370c      	adds	r7, #12
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr

08007dfc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b083      	sub	sp, #12
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	68da      	ldr	r2, [r3, #12]
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007e12:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	695a      	ldr	r2, [r3, #20]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f022 0201 	bic.w	r2, r2, #1
 8007e22:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e28:	2b01      	cmp	r3, #1
 8007e2a:	d107      	bne.n	8007e3c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	68da      	ldr	r2, [r3, #12]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f022 0210 	bic.w	r2, r2, #16
 8007e3a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2220      	movs	r2, #32
 8007e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2200      	movs	r2, #0
 8007e48:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007e4a:	bf00      	nop
 8007e4c:	370c      	adds	r7, #12
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e54:	4770      	bx	lr

08007e56 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e56:	b580      	push	{r7, lr}
 8007e58:	b084      	sub	sp, #16
 8007e5a:	af00      	add	r7, sp, #0
 8007e5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e62:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	2200      	movs	r2, #0
 8007e68:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e70:	68f8      	ldr	r0, [r7, #12]
 8007e72:	f7ff ffad 	bl	8007dd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e76:	bf00      	nop
 8007e78:	3710      	adds	r7, #16
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}

08007e7e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007e7e:	b480      	push	{r7}
 8007e80:	b085      	sub	sp, #20
 8007e82:	af00      	add	r7, sp, #0
 8007e84:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e8c:	b2db      	uxtb	r3, r3
 8007e8e:	2b21      	cmp	r3, #33	; 0x21
 8007e90:	d13e      	bne.n	8007f10 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	689b      	ldr	r3, [r3, #8]
 8007e96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e9a:	d114      	bne.n	8007ec6 <UART_Transmit_IT+0x48>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	691b      	ldr	r3, [r3, #16]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d110      	bne.n	8007ec6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6a1b      	ldr	r3, [r3, #32]
 8007ea8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	881b      	ldrh	r3, [r3, #0]
 8007eae:	461a      	mov	r2, r3
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007eb8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6a1b      	ldr	r3, [r3, #32]
 8007ebe:	1c9a      	adds	r2, r3, #2
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	621a      	str	r2, [r3, #32]
 8007ec4:	e008      	b.n	8007ed8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6a1b      	ldr	r3, [r3, #32]
 8007eca:	1c59      	adds	r1, r3, #1
 8007ecc:	687a      	ldr	r2, [r7, #4]
 8007ece:	6211      	str	r1, [r2, #32]
 8007ed0:	781a      	ldrb	r2, [r3, #0]
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007edc:	b29b      	uxth	r3, r3
 8007ede:	3b01      	subs	r3, #1
 8007ee0:	b29b      	uxth	r3, r3
 8007ee2:	687a      	ldr	r2, [r7, #4]
 8007ee4:	4619      	mov	r1, r3
 8007ee6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d10f      	bne.n	8007f0c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	68da      	ldr	r2, [r3, #12]
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007efa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	68da      	ldr	r2, [r3, #12]
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f0a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	e000      	b.n	8007f12 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007f10:	2302      	movs	r3, #2
  }
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3714      	adds	r7, #20
 8007f16:	46bd      	mov	sp, r7
 8007f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1c:	4770      	bx	lr

08007f1e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007f1e:	b580      	push	{r7, lr}
 8007f20:	b082      	sub	sp, #8
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	68da      	ldr	r2, [r3, #12]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f34:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2220      	movs	r2, #32
 8007f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	f7fa feba 	bl	8002cb8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007f44:	2300      	movs	r3, #0
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3708      	adds	r7, #8
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}

08007f4e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007f4e:	b580      	push	{r7, lr}
 8007f50:	b084      	sub	sp, #16
 8007f52:	af00      	add	r7, sp, #0
 8007f54:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f5c:	b2db      	uxtb	r3, r3
 8007f5e:	2b22      	cmp	r3, #34	; 0x22
 8007f60:	f040 8087 	bne.w	8008072 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	689b      	ldr	r3, [r3, #8]
 8007f68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f6c:	d117      	bne.n	8007f9e <UART_Receive_IT+0x50>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	691b      	ldr	r3, [r3, #16]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d113      	bne.n	8007f9e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007f76:	2300      	movs	r3, #0
 8007f78:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f7e:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	685b      	ldr	r3, [r3, #4]
 8007f86:	b29b      	uxth	r3, r3
 8007f88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f8c:	b29a      	uxth	r2, r3
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f96:	1c9a      	adds	r2, r3, #2
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	629a      	str	r2, [r3, #40]	; 0x28
 8007f9c:	e026      	b.n	8007fec <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fa2:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	689b      	ldr	r3, [r3, #8]
 8007fac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fb0:	d007      	beq.n	8007fc2 <UART_Receive_IT+0x74>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	689b      	ldr	r3, [r3, #8]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d10a      	bne.n	8007fd0 <UART_Receive_IT+0x82>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	691b      	ldr	r3, [r3, #16]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d106      	bne.n	8007fd0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	b2da      	uxtb	r2, r3
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	701a      	strb	r2, [r3, #0]
 8007fce:	e008      	b.n	8007fe2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	685b      	ldr	r3, [r3, #4]
 8007fd6:	b2db      	uxtb	r3, r3
 8007fd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fdc:	b2da      	uxtb	r2, r3
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fe6:	1c5a      	adds	r2, r3, #1
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ff0:	b29b      	uxth	r3, r3
 8007ff2:	3b01      	subs	r3, #1
 8007ff4:	b29b      	uxth	r3, r3
 8007ff6:	687a      	ldr	r2, [r7, #4]
 8007ff8:	4619      	mov	r1, r3
 8007ffa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d136      	bne.n	800806e <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	68da      	ldr	r2, [r3, #12]
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f022 0220 	bic.w	r2, r2, #32
 800800e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	68da      	ldr	r2, [r3, #12]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800801e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	695a      	ldr	r2, [r3, #20]
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f022 0201 	bic.w	r2, r2, #1
 800802e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2220      	movs	r2, #32
 8008034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800803c:	2b01      	cmp	r3, #1
 800803e:	d10e      	bne.n	800805e <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	68da      	ldr	r2, [r3, #12]
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f022 0210 	bic.w	r2, r2, #16
 800804e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008054:	4619      	mov	r1, r3
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f7ff fec4 	bl	8007de4 <HAL_UARTEx_RxEventCallback>
 800805c:	e002      	b.n	8008064 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f7ff feac 	bl	8007dbc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2200      	movs	r2, #0
 8008068:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 800806a:	2300      	movs	r3, #0
 800806c:	e002      	b.n	8008074 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 800806e:	2300      	movs	r3, #0
 8008070:	e000      	b.n	8008074 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8008072:	2302      	movs	r3, #2
  }
}
 8008074:	4618      	mov	r0, r3
 8008076:	3710      	adds	r7, #16
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}

0800807c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800807c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008080:	b09f      	sub	sp, #124	; 0x7c
 8008082:	af00      	add	r7, sp, #0
 8008084:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008086:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	691b      	ldr	r3, [r3, #16]
 800808c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008090:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008092:	68d9      	ldr	r1, [r3, #12]
 8008094:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008096:	681a      	ldr	r2, [r3, #0]
 8008098:	ea40 0301 	orr.w	r3, r0, r1
 800809c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800809e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080a0:	689a      	ldr	r2, [r3, #8]
 80080a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080a4:	691b      	ldr	r3, [r3, #16]
 80080a6:	431a      	orrs	r2, r3
 80080a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080aa:	695b      	ldr	r3, [r3, #20]
 80080ac:	431a      	orrs	r2, r3
 80080ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080b0:	69db      	ldr	r3, [r3, #28]
 80080b2:	4313      	orrs	r3, r2
 80080b4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80080b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	68db      	ldr	r3, [r3, #12]
 80080bc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80080c0:	f021 010c 	bic.w	r1, r1, #12
 80080c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080c6:	681a      	ldr	r2, [r3, #0]
 80080c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80080ca:	430b      	orrs	r3, r1
 80080cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80080ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	695b      	ldr	r3, [r3, #20]
 80080d4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80080d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080da:	6999      	ldr	r1, [r3, #24]
 80080dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080de:	681a      	ldr	r2, [r3, #0]
 80080e0:	ea40 0301 	orr.w	r3, r0, r1
 80080e4:	6153      	str	r3, [r2, #20]


#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 80080e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080e8:	681a      	ldr	r2, [r3, #0]
 80080ea:	4b6a      	ldr	r3, [pc, #424]	; (8008294 <UART_SetConfig+0x218>)
 80080ec:	429a      	cmp	r2, r3
 80080ee:	d00e      	beq.n	800810e <UART_SetConfig+0x92>
 80080f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080f2:	681a      	ldr	r2, [r3, #0]
 80080f4:	4b68      	ldr	r3, [pc, #416]	; (8008298 <UART_SetConfig+0x21c>)
 80080f6:	429a      	cmp	r2, r3
 80080f8:	d009      	beq.n	800810e <UART_SetConfig+0x92>
 80080fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080fc:	681a      	ldr	r2, [r3, #0]
 80080fe:	4b67      	ldr	r3, [pc, #412]	; (800829c <UART_SetConfig+0x220>)
 8008100:	429a      	cmp	r2, r3
 8008102:	d004      	beq.n	800810e <UART_SetConfig+0x92>
 8008104:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008106:	681a      	ldr	r2, [r3, #0]
 8008108:	4b65      	ldr	r3, [pc, #404]	; (80082a0 <UART_SetConfig+0x224>)
 800810a:	429a      	cmp	r2, r3
 800810c:	d103      	bne.n	8008116 <UART_SetConfig+0x9a>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800810e:	f7fe fb8b 	bl	8006828 <HAL_RCC_GetPCLK2Freq>
 8008112:	6778      	str	r0, [r7, #116]	; 0x74
 8008114:	e002      	b.n	800811c <UART_SetConfig+0xa0>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008116:	f7fe fb73 	bl	8006800 <HAL_RCC_GetPCLK1Freq>
 800811a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800811c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800811e:	69db      	ldr	r3, [r3, #28]
 8008120:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008124:	f040 80c0 	bne.w	80082a8 <UART_SetConfig+0x22c>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008128:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800812a:	461c      	mov	r4, r3
 800812c:	f04f 0500 	mov.w	r5, #0
 8008130:	4622      	mov	r2, r4
 8008132:	462b      	mov	r3, r5
 8008134:	1891      	adds	r1, r2, r2
 8008136:	6439      	str	r1, [r7, #64]	; 0x40
 8008138:	415b      	adcs	r3, r3
 800813a:	647b      	str	r3, [r7, #68]	; 0x44
 800813c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008140:	1912      	adds	r2, r2, r4
 8008142:	eb45 0303 	adc.w	r3, r5, r3
 8008146:	f04f 0000 	mov.w	r0, #0
 800814a:	f04f 0100 	mov.w	r1, #0
 800814e:	00d9      	lsls	r1, r3, #3
 8008150:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008154:	00d0      	lsls	r0, r2, #3
 8008156:	4602      	mov	r2, r0
 8008158:	460b      	mov	r3, r1
 800815a:	1911      	adds	r1, r2, r4
 800815c:	6639      	str	r1, [r7, #96]	; 0x60
 800815e:	416b      	adcs	r3, r5
 8008160:	667b      	str	r3, [r7, #100]	; 0x64
 8008162:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008164:	685b      	ldr	r3, [r3, #4]
 8008166:	461a      	mov	r2, r3
 8008168:	f04f 0300 	mov.w	r3, #0
 800816c:	1891      	adds	r1, r2, r2
 800816e:	63b9      	str	r1, [r7, #56]	; 0x38
 8008170:	415b      	adcs	r3, r3
 8008172:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008174:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008178:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800817c:	f7f8 fd80 	bl	8000c80 <__aeabi_uldivmod>
 8008180:	4602      	mov	r2, r0
 8008182:	460b      	mov	r3, r1
 8008184:	4b47      	ldr	r3, [pc, #284]	; (80082a4 <UART_SetConfig+0x228>)
 8008186:	fba3 2302 	umull	r2, r3, r3, r2
 800818a:	095b      	lsrs	r3, r3, #5
 800818c:	011e      	lsls	r6, r3, #4
 800818e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008190:	461c      	mov	r4, r3
 8008192:	f04f 0500 	mov.w	r5, #0
 8008196:	4622      	mov	r2, r4
 8008198:	462b      	mov	r3, r5
 800819a:	1891      	adds	r1, r2, r2
 800819c:	6339      	str	r1, [r7, #48]	; 0x30
 800819e:	415b      	adcs	r3, r3
 80081a0:	637b      	str	r3, [r7, #52]	; 0x34
 80081a2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80081a6:	1912      	adds	r2, r2, r4
 80081a8:	eb45 0303 	adc.w	r3, r5, r3
 80081ac:	f04f 0000 	mov.w	r0, #0
 80081b0:	f04f 0100 	mov.w	r1, #0
 80081b4:	00d9      	lsls	r1, r3, #3
 80081b6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80081ba:	00d0      	lsls	r0, r2, #3
 80081bc:	4602      	mov	r2, r0
 80081be:	460b      	mov	r3, r1
 80081c0:	1911      	adds	r1, r2, r4
 80081c2:	65b9      	str	r1, [r7, #88]	; 0x58
 80081c4:	416b      	adcs	r3, r5
 80081c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80081c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081ca:	685b      	ldr	r3, [r3, #4]
 80081cc:	461a      	mov	r2, r3
 80081ce:	f04f 0300 	mov.w	r3, #0
 80081d2:	1891      	adds	r1, r2, r2
 80081d4:	62b9      	str	r1, [r7, #40]	; 0x28
 80081d6:	415b      	adcs	r3, r3
 80081d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80081da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80081de:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80081e2:	f7f8 fd4d 	bl	8000c80 <__aeabi_uldivmod>
 80081e6:	4602      	mov	r2, r0
 80081e8:	460b      	mov	r3, r1
 80081ea:	4b2e      	ldr	r3, [pc, #184]	; (80082a4 <UART_SetConfig+0x228>)
 80081ec:	fba3 1302 	umull	r1, r3, r3, r2
 80081f0:	095b      	lsrs	r3, r3, #5
 80081f2:	2164      	movs	r1, #100	; 0x64
 80081f4:	fb01 f303 	mul.w	r3, r1, r3
 80081f8:	1ad3      	subs	r3, r2, r3
 80081fa:	00db      	lsls	r3, r3, #3
 80081fc:	3332      	adds	r3, #50	; 0x32
 80081fe:	4a29      	ldr	r2, [pc, #164]	; (80082a4 <UART_SetConfig+0x228>)
 8008200:	fba2 2303 	umull	r2, r3, r2, r3
 8008204:	095b      	lsrs	r3, r3, #5
 8008206:	005b      	lsls	r3, r3, #1
 8008208:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800820c:	441e      	add	r6, r3
 800820e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008210:	4618      	mov	r0, r3
 8008212:	f04f 0100 	mov.w	r1, #0
 8008216:	4602      	mov	r2, r0
 8008218:	460b      	mov	r3, r1
 800821a:	1894      	adds	r4, r2, r2
 800821c:	623c      	str	r4, [r7, #32]
 800821e:	415b      	adcs	r3, r3
 8008220:	627b      	str	r3, [r7, #36]	; 0x24
 8008222:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008226:	1812      	adds	r2, r2, r0
 8008228:	eb41 0303 	adc.w	r3, r1, r3
 800822c:	f04f 0400 	mov.w	r4, #0
 8008230:	f04f 0500 	mov.w	r5, #0
 8008234:	00dd      	lsls	r5, r3, #3
 8008236:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800823a:	00d4      	lsls	r4, r2, #3
 800823c:	4622      	mov	r2, r4
 800823e:	462b      	mov	r3, r5
 8008240:	1814      	adds	r4, r2, r0
 8008242:	653c      	str	r4, [r7, #80]	; 0x50
 8008244:	414b      	adcs	r3, r1
 8008246:	657b      	str	r3, [r7, #84]	; 0x54
 8008248:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800824a:	685b      	ldr	r3, [r3, #4]
 800824c:	461a      	mov	r2, r3
 800824e:	f04f 0300 	mov.w	r3, #0
 8008252:	1891      	adds	r1, r2, r2
 8008254:	61b9      	str	r1, [r7, #24]
 8008256:	415b      	adcs	r3, r3
 8008258:	61fb      	str	r3, [r7, #28]
 800825a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800825e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008262:	f7f8 fd0d 	bl	8000c80 <__aeabi_uldivmod>
 8008266:	4602      	mov	r2, r0
 8008268:	460b      	mov	r3, r1
 800826a:	4b0e      	ldr	r3, [pc, #56]	; (80082a4 <UART_SetConfig+0x228>)
 800826c:	fba3 1302 	umull	r1, r3, r3, r2
 8008270:	095b      	lsrs	r3, r3, #5
 8008272:	2164      	movs	r1, #100	; 0x64
 8008274:	fb01 f303 	mul.w	r3, r1, r3
 8008278:	1ad3      	subs	r3, r2, r3
 800827a:	00db      	lsls	r3, r3, #3
 800827c:	3332      	adds	r3, #50	; 0x32
 800827e:	4a09      	ldr	r2, [pc, #36]	; (80082a4 <UART_SetConfig+0x228>)
 8008280:	fba2 2303 	umull	r2, r3, r2, r3
 8008284:	095b      	lsrs	r3, r3, #5
 8008286:	f003 0207 	and.w	r2, r3, #7
 800828a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4432      	add	r2, r6
 8008290:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008292:	e0c3      	b.n	800841c <UART_SetConfig+0x3a0>
 8008294:	40011000 	.word	0x40011000
 8008298:	40011400 	.word	0x40011400
 800829c:	40011800 	.word	0x40011800
 80082a0:	40011c00 	.word	0x40011c00
 80082a4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80082a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80082aa:	461c      	mov	r4, r3
 80082ac:	f04f 0500 	mov.w	r5, #0
 80082b0:	4622      	mov	r2, r4
 80082b2:	462b      	mov	r3, r5
 80082b4:	1891      	adds	r1, r2, r2
 80082b6:	6139      	str	r1, [r7, #16]
 80082b8:	415b      	adcs	r3, r3
 80082ba:	617b      	str	r3, [r7, #20]
 80082bc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80082c0:	1912      	adds	r2, r2, r4
 80082c2:	eb45 0303 	adc.w	r3, r5, r3
 80082c6:	f04f 0000 	mov.w	r0, #0
 80082ca:	f04f 0100 	mov.w	r1, #0
 80082ce:	00d9      	lsls	r1, r3, #3
 80082d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80082d4:	00d0      	lsls	r0, r2, #3
 80082d6:	4602      	mov	r2, r0
 80082d8:	460b      	mov	r3, r1
 80082da:	eb12 0804 	adds.w	r8, r2, r4
 80082de:	eb43 0905 	adc.w	r9, r3, r5
 80082e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082e4:	685b      	ldr	r3, [r3, #4]
 80082e6:	4618      	mov	r0, r3
 80082e8:	f04f 0100 	mov.w	r1, #0
 80082ec:	f04f 0200 	mov.w	r2, #0
 80082f0:	f04f 0300 	mov.w	r3, #0
 80082f4:	008b      	lsls	r3, r1, #2
 80082f6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80082fa:	0082      	lsls	r2, r0, #2
 80082fc:	4640      	mov	r0, r8
 80082fe:	4649      	mov	r1, r9
 8008300:	f7f8 fcbe 	bl	8000c80 <__aeabi_uldivmod>
 8008304:	4602      	mov	r2, r0
 8008306:	460b      	mov	r3, r1
 8008308:	4b47      	ldr	r3, [pc, #284]	; (8008428 <UART_SetConfig+0x3ac>)
 800830a:	fba3 2302 	umull	r2, r3, r3, r2
 800830e:	095b      	lsrs	r3, r3, #5
 8008310:	011e      	lsls	r6, r3, #4
 8008312:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008314:	4618      	mov	r0, r3
 8008316:	f04f 0100 	mov.w	r1, #0
 800831a:	4602      	mov	r2, r0
 800831c:	460b      	mov	r3, r1
 800831e:	1894      	adds	r4, r2, r2
 8008320:	60bc      	str	r4, [r7, #8]
 8008322:	415b      	adcs	r3, r3
 8008324:	60fb      	str	r3, [r7, #12]
 8008326:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800832a:	1812      	adds	r2, r2, r0
 800832c:	eb41 0303 	adc.w	r3, r1, r3
 8008330:	f04f 0400 	mov.w	r4, #0
 8008334:	f04f 0500 	mov.w	r5, #0
 8008338:	00dd      	lsls	r5, r3, #3
 800833a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800833e:	00d4      	lsls	r4, r2, #3
 8008340:	4622      	mov	r2, r4
 8008342:	462b      	mov	r3, r5
 8008344:	1814      	adds	r4, r2, r0
 8008346:	64bc      	str	r4, [r7, #72]	; 0x48
 8008348:	414b      	adcs	r3, r1
 800834a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800834c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800834e:	685b      	ldr	r3, [r3, #4]
 8008350:	4618      	mov	r0, r3
 8008352:	f04f 0100 	mov.w	r1, #0
 8008356:	f04f 0200 	mov.w	r2, #0
 800835a:	f04f 0300 	mov.w	r3, #0
 800835e:	008b      	lsls	r3, r1, #2
 8008360:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008364:	0082      	lsls	r2, r0, #2
 8008366:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800836a:	f7f8 fc89 	bl	8000c80 <__aeabi_uldivmod>
 800836e:	4602      	mov	r2, r0
 8008370:	460b      	mov	r3, r1
 8008372:	4b2d      	ldr	r3, [pc, #180]	; (8008428 <UART_SetConfig+0x3ac>)
 8008374:	fba3 1302 	umull	r1, r3, r3, r2
 8008378:	095b      	lsrs	r3, r3, #5
 800837a:	2164      	movs	r1, #100	; 0x64
 800837c:	fb01 f303 	mul.w	r3, r1, r3
 8008380:	1ad3      	subs	r3, r2, r3
 8008382:	011b      	lsls	r3, r3, #4
 8008384:	3332      	adds	r3, #50	; 0x32
 8008386:	4a28      	ldr	r2, [pc, #160]	; (8008428 <UART_SetConfig+0x3ac>)
 8008388:	fba2 2303 	umull	r2, r3, r2, r3
 800838c:	095b      	lsrs	r3, r3, #5
 800838e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008392:	441e      	add	r6, r3
 8008394:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008396:	4618      	mov	r0, r3
 8008398:	f04f 0100 	mov.w	r1, #0
 800839c:	4602      	mov	r2, r0
 800839e:	460b      	mov	r3, r1
 80083a0:	1894      	adds	r4, r2, r2
 80083a2:	603c      	str	r4, [r7, #0]
 80083a4:	415b      	adcs	r3, r3
 80083a6:	607b      	str	r3, [r7, #4]
 80083a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083ac:	1812      	adds	r2, r2, r0
 80083ae:	eb41 0303 	adc.w	r3, r1, r3
 80083b2:	f04f 0400 	mov.w	r4, #0
 80083b6:	f04f 0500 	mov.w	r5, #0
 80083ba:	00dd      	lsls	r5, r3, #3
 80083bc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80083c0:	00d4      	lsls	r4, r2, #3
 80083c2:	4622      	mov	r2, r4
 80083c4:	462b      	mov	r3, r5
 80083c6:	eb12 0a00 	adds.w	sl, r2, r0
 80083ca:	eb43 0b01 	adc.w	fp, r3, r1
 80083ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083d0:	685b      	ldr	r3, [r3, #4]
 80083d2:	4618      	mov	r0, r3
 80083d4:	f04f 0100 	mov.w	r1, #0
 80083d8:	f04f 0200 	mov.w	r2, #0
 80083dc:	f04f 0300 	mov.w	r3, #0
 80083e0:	008b      	lsls	r3, r1, #2
 80083e2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80083e6:	0082      	lsls	r2, r0, #2
 80083e8:	4650      	mov	r0, sl
 80083ea:	4659      	mov	r1, fp
 80083ec:	f7f8 fc48 	bl	8000c80 <__aeabi_uldivmod>
 80083f0:	4602      	mov	r2, r0
 80083f2:	460b      	mov	r3, r1
 80083f4:	4b0c      	ldr	r3, [pc, #48]	; (8008428 <UART_SetConfig+0x3ac>)
 80083f6:	fba3 1302 	umull	r1, r3, r3, r2
 80083fa:	095b      	lsrs	r3, r3, #5
 80083fc:	2164      	movs	r1, #100	; 0x64
 80083fe:	fb01 f303 	mul.w	r3, r1, r3
 8008402:	1ad3      	subs	r3, r2, r3
 8008404:	011b      	lsls	r3, r3, #4
 8008406:	3332      	adds	r3, #50	; 0x32
 8008408:	4a07      	ldr	r2, [pc, #28]	; (8008428 <UART_SetConfig+0x3ac>)
 800840a:	fba2 2303 	umull	r2, r3, r2, r3
 800840e:	095b      	lsrs	r3, r3, #5
 8008410:	f003 020f 	and.w	r2, r3, #15
 8008414:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4432      	add	r2, r6
 800841a:	609a      	str	r2, [r3, #8]
}
 800841c:	bf00      	nop
 800841e:	377c      	adds	r7, #124	; 0x7c
 8008420:	46bd      	mov	sp, r7
 8008422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008426:	bf00      	nop
 8008428:	51eb851f 	.word	0x51eb851f

0800842c <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 800842c:	b480      	push	{r7}
 800842e:	b085      	sub	sp, #20
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
 8008434:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8008436:	2300      	movs	r3, #0
 8008438:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	681a      	ldr	r2, [r3, #0]
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008444:	60fb      	str	r3, [r7, #12]
                     Init->WriteBurst
                     );
#else /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT,CPSIZE,  CBURSTRW, CCLKEN and WFDIS bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP      | \
 8008446:	68fa      	ldr	r2, [r7, #12]
 8008448:	4b2f      	ldr	r3, [pc, #188]	; (8008508 <FSMC_NORSRAM_Init+0xdc>)
 800844a:	4013      	ands	r3, r2
 800844c:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WAITCFG  | FSMC_BCR1_WREN      | \
                       FSMC_BCR1_WAITEN    | FSMC_BCR1_EXTMOD   | FSMC_BCR1_ASYNCWAIT | \
                       FSMC_BCR1_CPSIZE    | FSMC_BCR1_CBURSTRW | FSMC_BCR1_CCLKEN    | \
                       FSMC_BCR1_WFDIS));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8008456:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 800845c:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8008462:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8008468:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	69db      	ldr	r3, [r3, #28]
                     Init->WaitSignalPolarity   |\
 800846e:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8008474:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 800847a:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8008480:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8008486:	431a      	orrs	r2, r3
                     Init->WriteBurst           |\
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->AsynchronousWait     |\
 800848c:	431a      	orrs	r2, r3
                     Init->ContinuousClock      |\
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                     Init->WriteBurst           |\
 8008492:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->ContinuousClock      |\
 8008498:	431a      	orrs	r2, r3
                     Init->WriteFifo);
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                     Init->PageSize             |\
 800849e:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80084a0:	68fa      	ldr	r2, [r7, #12]
 80084a2:	4313      	orrs	r3, r2
 80084a4:	60fb      	str	r3, [r7, #12]
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	689b      	ldr	r3, [r3, #8]
 80084aa:	2b08      	cmp	r3, #8
 80084ac:	d103      	bne.n	80084b6 <FSMC_NORSRAM_Init+0x8a>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084b4:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	681a      	ldr	r2, [r3, #0]
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	68f9      	ldr	r1, [r7, #12]
 80084be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if((Init->ContinuousClock == FSMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FSMC_NORSRAM_BANK1))
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80084ca:	d10a      	bne.n	80084e2 <FSMC_NORSRAM_Init+0xb6>
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d006      	beq.n	80084e2 <FSMC_NORSRAM_Init+0xb6>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->ContinuousClock);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681a      	ldr	r2, [r3, #0]
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084dc:	431a      	orrs	r2, r3
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	601a      	str	r2, [r3, #0]
  }

  if(Init->NSBank != FSMC_NORSRAM_BANK1)
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d006      	beq.n	80084f8 <FSMC_NORSRAM_Init+0xcc>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681a      	ldr	r2, [r3, #0]
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084f2:	431a      	orrs	r2, r3
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80084f8:	2300      	movs	r3, #0
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	3714      	adds	r7, #20
 80084fe:	46bd      	mov	sp, r7
 8008500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008504:	4770      	bx	lr
 8008506:	bf00      	nop
 8008508:	ffc00480 	.word	0xffc00480

0800850c <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800850c:	b480      	push	{r7}
 800850e:	b087      	sub	sp, #28
 8008510:	af00      	add	r7, sp, #0
 8008512:	60f8      	str	r0, [r7, #12]
 8008514:	60b9      	str	r1, [r7, #8]
 8008516:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8008518:	2300      	movs	r3, #0
 800851a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	1c5a      	adds	r2, r3, #1
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008526:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8008528:	697b      	ldr	r3, [r7, #20]
 800852a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800852e:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	685b      	ldr	r3, [r3, #4]
 8008538:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800853a:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	689b      	ldr	r3, [r3, #8]
 8008540:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8008542:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	68db      	ldr	r3, [r3, #12]
 8008548:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800854a:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	691b      	ldr	r3, [r3, #16]
 8008550:	3b01      	subs	r3, #1
 8008552:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008554:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	695b      	ldr	r3, [r3, #20]
 800855a:	3b02      	subs	r3, #2
 800855c:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800855e:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008564:	4313      	orrs	r3, r2
 8008566:	697a      	ldr	r2, [r7, #20]
 8008568:	4313      	orrs	r3, r2
 800856a:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	1c5a      	adds	r2, r3, #1
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	6979      	ldr	r1, [r7, #20]
 8008574:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if(HAL_IS_BIT_SET(Device->BTCR[FSMC_NORSRAM_BANK1], FSMC_BCR1_CCLKEN))
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008580:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008584:	d10e      	bne.n	80085a4 <FSMC_NORSRAM_Timing_Init+0x98>
  {
    tmpr = (uint32_t)(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] & ~(0x0FU << 20U)); 
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	685b      	ldr	r3, [r3, #4]
 800858a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800858e:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	691b      	ldr	r3, [r3, #16]
 8008594:	3b01      	subs	r3, #1
 8008596:	051b      	lsls	r3, r3, #20
 8008598:	697a      	ldr	r2, [r7, #20]
 800859a:	4313      	orrs	r3, r2
 800859c:	617b      	str	r3, [r7, #20]
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	697a      	ldr	r2, [r7, #20]
 80085a2:	605a      	str	r2, [r3, #4]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80085a4:	2300      	movs	r3, #0
}
 80085a6:	4618      	mov	r0, r3
 80085a8:	371c      	adds	r7, #28
 80085aa:	46bd      	mov	sp, r7
 80085ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b0:	4770      	bx	lr
	...

080085b4 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 80085b4:	b480      	push	{r7}
 80085b6:	b087      	sub	sp, #28
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	60f8      	str	r0, [r7, #12]
 80085bc:	60b9      	str	r1, [r7, #8]
 80085be:	607a      	str	r2, [r7, #4]
 80085c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 80085c2:	2300      	movs	r3, #0
 80085c4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80085cc:	d122      	bne.n	8008614 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	687a      	ldr	r2, [r7, #4]
 80085d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085d6:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 80085d8:	697a      	ldr	r2, [r7, #20]
 80085da:	4b15      	ldr	r3, [pc, #84]	; (8008630 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 80085dc:	4013      	ands	r3, r2
 80085de:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	685b      	ldr	r3, [r3, #4]
 80085e8:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80085ea:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	689b      	ldr	r3, [r3, #8]
 80085f0:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 80085f2:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	68db      	ldr	r3, [r3, #12]
 80085f8:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 80085fa:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008600:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008602:	697a      	ldr	r2, [r7, #20]
 8008604:	4313      	orrs	r3, r2
 8008606:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	687a      	ldr	r2, [r7, #4]
 800860c:	6979      	ldr	r1, [r7, #20]
 800860e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008612:	e005      	b.n	8008620 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	687a      	ldr	r2, [r7, #4]
 8008618:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800861c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8008620:	2300      	movs	r3, #0
}
 8008622:	4618      	mov	r0, r3
 8008624:	371c      	adds	r7, #28
 8008626:	46bd      	mov	sp, r7
 8008628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862c:	4770      	bx	lr
 800862e:	bf00      	nop
 8008630:	cff00000 	.word	0xcff00000

08008634 <TfLiteIntArrayGetSizeInBytes>:
#ifndef TF_LITE_STATIC_MEMORY
#include <stdlib.h>
#include <string.h>
#endif  // TF_LITE_STATIC_MEMORY

int TfLiteIntArrayGetSizeInBytes(int size) {
 8008634:	b480      	push	{r7}
 8008636:	b083      	sub	sp, #12
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
  static TfLiteIntArray dummy;
  return sizeof(dummy) + sizeof(dummy.data[0]) * size;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	3301      	adds	r3, #1
 8008640:	009b      	lsls	r3, r3, #2
}
 8008642:	4618      	mov	r0, r3
 8008644:	370c      	adds	r7, #12
 8008646:	46bd      	mov	sp, r7
 8008648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864c:	4770      	bx	lr
	...

08008650 <TfLiteTypeGetName>:
  }
  tensor->bytes = num_bytes;
}
#endif  // TF_LITE_STATIC_MEMORY

const char* TfLiteTypeGetName(TfLiteType type) {
 8008650:	b480      	push	{r7}
 8008652:	b083      	sub	sp, #12
 8008654:	af00      	add	r7, sp, #0
 8008656:	4603      	mov	r3, r0
 8008658:	71fb      	strb	r3, [r7, #7]
  switch (type) {
 800865a:	79fb      	ldrb	r3, [r7, #7]
 800865c:	2b10      	cmp	r3, #16
 800865e:	d847      	bhi.n	80086f0 <TfLiteTypeGetName+0xa0>
 8008660:	a201      	add	r2, pc, #4	; (adr r2, 8008668 <TfLiteTypeGetName+0x18>)
 8008662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008666:	bf00      	nop
 8008668:	080086ad 	.word	0x080086ad
 800866c:	080086b1 	.word	0x080086b1
 8008670:	080086b9 	.word	0x080086b9
 8008674:	080086c1 	.word	0x080086c1
 8008678:	080086c9 	.word	0x080086c9
 800867c:	080086dd 	.word	0x080086dd
 8008680:	080086d1 	.word	0x080086d1
 8008684:	080086b5 	.word	0x080086b5
 8008688:	080086d5 	.word	0x080086d5
 800868c:	080086c5 	.word	0x080086c5
 8008690:	080086e1 	.word	0x080086e1
 8008694:	080086e5 	.word	0x080086e5
 8008698:	080086d9 	.word	0x080086d9
 800869c:	080086cd 	.word	0x080086cd
 80086a0:	080086e9 	.word	0x080086e9
 80086a4:	080086ed 	.word	0x080086ed
 80086a8:	080086bd 	.word	0x080086bd
    case kTfLiteNoType:
      return "NOTYPE";
 80086ac:	4b14      	ldr	r3, [pc, #80]	; (8008700 <TfLiteTypeGetName+0xb0>)
 80086ae:	e020      	b.n	80086f2 <TfLiteTypeGetName+0xa2>
    case kTfLiteFloat32:
      return "FLOAT32";
 80086b0:	4b14      	ldr	r3, [pc, #80]	; (8008704 <TfLiteTypeGetName+0xb4>)
 80086b2:	e01e      	b.n	80086f2 <TfLiteTypeGetName+0xa2>
    case kTfLiteInt16:
      return "INT16";
 80086b4:	4b14      	ldr	r3, [pc, #80]	; (8008708 <TfLiteTypeGetName+0xb8>)
 80086b6:	e01c      	b.n	80086f2 <TfLiteTypeGetName+0xa2>
    case kTfLiteInt32:
      return "INT32";
 80086b8:	4b14      	ldr	r3, [pc, #80]	; (800870c <TfLiteTypeGetName+0xbc>)
 80086ba:	e01a      	b.n	80086f2 <TfLiteTypeGetName+0xa2>
    case kTfLiteUInt32:
      return "UINT32";
 80086bc:	4b14      	ldr	r3, [pc, #80]	; (8008710 <TfLiteTypeGetName+0xc0>)
 80086be:	e018      	b.n	80086f2 <TfLiteTypeGetName+0xa2>
    case kTfLiteUInt8:
      return "UINT8";
 80086c0:	4b14      	ldr	r3, [pc, #80]	; (8008714 <TfLiteTypeGetName+0xc4>)
 80086c2:	e016      	b.n	80086f2 <TfLiteTypeGetName+0xa2>
    case kTfLiteInt8:
      return "INT8";
 80086c4:	4b14      	ldr	r3, [pc, #80]	; (8008718 <TfLiteTypeGetName+0xc8>)
 80086c6:	e014      	b.n	80086f2 <TfLiteTypeGetName+0xa2>
    case kTfLiteInt64:
      return "INT64";
 80086c8:	4b14      	ldr	r3, [pc, #80]	; (800871c <TfLiteTypeGetName+0xcc>)
 80086ca:	e012      	b.n	80086f2 <TfLiteTypeGetName+0xa2>
    case kTfLiteUInt64:
      return "UINT64";
 80086cc:	4b14      	ldr	r3, [pc, #80]	; (8008720 <TfLiteTypeGetName+0xd0>)
 80086ce:	e010      	b.n	80086f2 <TfLiteTypeGetName+0xa2>
    case kTfLiteBool:
      return "BOOL";
 80086d0:	4b14      	ldr	r3, [pc, #80]	; (8008724 <TfLiteTypeGetName+0xd4>)
 80086d2:	e00e      	b.n	80086f2 <TfLiteTypeGetName+0xa2>
    case kTfLiteComplex64:
      return "COMPLEX64";
 80086d4:	4b14      	ldr	r3, [pc, #80]	; (8008728 <TfLiteTypeGetName+0xd8>)
 80086d6:	e00c      	b.n	80086f2 <TfLiteTypeGetName+0xa2>
    case kTfLiteComplex128:
      return "COMPLEX128";
 80086d8:	4b14      	ldr	r3, [pc, #80]	; (800872c <TfLiteTypeGetName+0xdc>)
 80086da:	e00a      	b.n	80086f2 <TfLiteTypeGetName+0xa2>
    case kTfLiteString:
      return "STRING";
 80086dc:	4b14      	ldr	r3, [pc, #80]	; (8008730 <TfLiteTypeGetName+0xe0>)
 80086de:	e008      	b.n	80086f2 <TfLiteTypeGetName+0xa2>
    case kTfLiteFloat16:
      return "FLOAT16";
 80086e0:	4b14      	ldr	r3, [pc, #80]	; (8008734 <TfLiteTypeGetName+0xe4>)
 80086e2:	e006      	b.n	80086f2 <TfLiteTypeGetName+0xa2>
    case kTfLiteFloat64:
      return "FLOAT64";
 80086e4:	4b14      	ldr	r3, [pc, #80]	; (8008738 <TfLiteTypeGetName+0xe8>)
 80086e6:	e004      	b.n	80086f2 <TfLiteTypeGetName+0xa2>
    case kTfLiteResource:
      return "RESOURCE";
 80086e8:	4b14      	ldr	r3, [pc, #80]	; (800873c <TfLiteTypeGetName+0xec>)
 80086ea:	e002      	b.n	80086f2 <TfLiteTypeGetName+0xa2>
    case kTfLiteVariant:
      return "VARIANT";
 80086ec:	4b14      	ldr	r3, [pc, #80]	; (8008740 <TfLiteTypeGetName+0xf0>)
 80086ee:	e000      	b.n	80086f2 <TfLiteTypeGetName+0xa2>
  }
  return "Unknown type";
 80086f0:	4b14      	ldr	r3, [pc, #80]	; (8008744 <TfLiteTypeGetName+0xf4>)
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	370c      	adds	r7, #12
 80086f6:	46bd      	mov	sp, r7
 80086f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fc:	4770      	bx	lr
 80086fe:	bf00      	nop
 8008700:	08026c70 	.word	0x08026c70
 8008704:	08026c78 	.word	0x08026c78
 8008708:	08026c80 	.word	0x08026c80
 800870c:	08026c88 	.word	0x08026c88
 8008710:	08026c90 	.word	0x08026c90
 8008714:	08026c98 	.word	0x08026c98
 8008718:	08026ca0 	.word	0x08026ca0
 800871c:	08026ca8 	.word	0x08026ca8
 8008720:	08026cb0 	.word	0x08026cb0
 8008724:	08026cb8 	.word	0x08026cb8
 8008728:	08026cc0 	.word	0x08026cc0
 800872c:	08026ccc 	.word	0x08026ccc
 8008730:	08026cd8 	.word	0x08026cd8
 8008734:	08026ce0 	.word	0x08026ce0
 8008738:	08026ce8 	.word	0x08026ce8
 800873c:	08026cf0 	.word	0x08026cf0
 8008740:	08026cfc 	.word	0x08026cfc
 8008744:	08026d04 	.word	0x08026d04

08008748 <_ZN6tflite13ErrorReporter6ReportEPKcz>:
#include "tensorflow/lite/core/api/error_reporter.h"
#include <cstdarg>

namespace tflite {

int ErrorReporter::Report(const char* format, ...) {
 8008748:	b40e      	push	{r1, r2, r3}
 800874a:	b580      	push	{r7, lr}
 800874c:	b085      	sub	sp, #20
 800874e:	af00      	add	r7, sp, #0
 8008750:	6078      	str	r0, [r7, #4]
  va_list args;
  va_start(args, format);
 8008752:	f107 0320 	add.w	r3, r7, #32
 8008756:	60bb      	str	r3, [r7, #8]
  int code = Report(format, args);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	3308      	adds	r3, #8
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	68ba      	ldr	r2, [r7, #8]
 8008762:	69f9      	ldr	r1, [r7, #28]
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	4798      	blx	r3
 8008768:	60f8      	str	r0, [r7, #12]
  va_end(args);
  return code;
 800876a:	68fb      	ldr	r3, [r7, #12]
}
 800876c:	4618      	mov	r0, r3
 800876e:	3714      	adds	r7, #20
 8008770:	46bd      	mov	sp, r7
 8008772:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008776:	b003      	add	sp, #12
 8008778:	4770      	bx	lr

0800877a <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>:

// TODO(aselle): Make the name of ReportError on context the same, so
// we can use the ensure functions w/o a context and w/ a reporter.
int ErrorReporter::ReportError(void*, const char* format, ...) {
 800877a:	b40c      	push	{r2, r3}
 800877c:	b580      	push	{r7, lr}
 800877e:	b084      	sub	sp, #16
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
 8008784:	6039      	str	r1, [r7, #0]
  va_list args;
  va_start(args, format);
 8008786:	f107 031c 	add.w	r3, r7, #28
 800878a:	60bb      	str	r3, [r7, #8]
  int code = Report(format, args);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	3308      	adds	r3, #8
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	68ba      	ldr	r2, [r7, #8]
 8008796:	69b9      	ldr	r1, [r7, #24]
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	4798      	blx	r3
 800879c:	60f8      	str	r0, [r7, #12]
  va_end(args);
  return code;
 800879e:	68fb      	ldr	r3, [r7, #12]
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	3710      	adds	r7, #16
 80087a4:	46bd      	mov	sp, r7
 80087a6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80087aa:	b002      	add	sp, #8
 80087ac:	4770      	bx	lr

080087ae <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80087ae:	b480      	push	{r7}
 80087b0:	b083      	sub	sp, #12
 80087b2:	af00      	add	r7, sp, #0
 80087b4:	6078      	str	r0, [r7, #4]
 80087b6:	6039      	str	r1, [r7, #0]
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	4618      	mov	r0, r3
 80087bc:	370c      	adds	r7, #12
 80087be:	46bd      	mov	sp, r7
 80087c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c4:	4770      	bx	lr

080087c6 <_ZNK11flatbuffers5Table9GetVTableEv>:

// "tables" use an offset table (possibly shared) that allows fields to be
// omitted and added at will, but uses an extra indirection to read.
class Table {
 public:
  const uint8_t *GetVTable() const {
 80087c6:	b590      	push	{r4, r7, lr}
 80087c8:	b083      	sub	sp, #12
 80087ca:	af00      	add	r7, sp, #0
 80087cc:	6078      	str	r0, [r7, #4]
    return data_ - ReadScalar<soffset_t>(data_);
 80087ce:	687c      	ldr	r4, [r7, #4]
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	4618      	mov	r0, r3
 80087d4:	f000 fe3f 	bl	8009456 <_ZN11flatbuffers10ReadScalarIlEET_PKv>
 80087d8:	4603      	mov	r3, r0
 80087da:	425b      	negs	r3, r3
 80087dc:	4423      	add	r3, r4
  }
 80087de:	4618      	mov	r0, r3
 80087e0:	370c      	adds	r7, #12
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd90      	pop	{r4, r7, pc}

080087e6 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>:

  // This gets the field offset for any of the functions below it, or 0
  // if the field was not present.
  voffset_t GetOptionalFieldOffset(voffset_t field) const {
 80087e6:	b580      	push	{r7, lr}
 80087e8:	b084      	sub	sp, #16
 80087ea:	af00      	add	r7, sp, #0
 80087ec:	6078      	str	r0, [r7, #4]
 80087ee:	460b      	mov	r3, r1
 80087f0:	807b      	strh	r3, [r7, #2]
    // The vtable offset is always at the start.
    auto vtable = GetVTable();
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f7ff ffe7 	bl	80087c6 <_ZNK11flatbuffers5Table9GetVTableEv>
 80087f8:	60f8      	str	r0, [r7, #12]
    // The first element is the size of the vtable (fields + type id + itself).
    auto vtsize = ReadScalar<voffset_t>(vtable);
 80087fa:	68f8      	ldr	r0, [r7, #12]
 80087fc:	f000 fe0f 	bl	800941e <_ZN11flatbuffers10ReadScalarItEET_PKv>
 8008800:	4603      	mov	r3, r0
 8008802:	817b      	strh	r3, [r7, #10]
    // If the field we're accessing is outside the vtable, we're reading older
    // data, so it's the same as if the offset was 0 (not present).
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8008804:	887a      	ldrh	r2, [r7, #2]
 8008806:	897b      	ldrh	r3, [r7, #10]
 8008808:	429a      	cmp	r2, r3
 800880a:	d207      	bcs.n	800881c <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt+0x36>
 800880c:	887b      	ldrh	r3, [r7, #2]
 800880e:	68fa      	ldr	r2, [r7, #12]
 8008810:	4413      	add	r3, r2
 8008812:	4618      	mov	r0, r3
 8008814:	f000 fe03 	bl	800941e <_ZN11flatbuffers10ReadScalarItEET_PKv>
 8008818:	4603      	mov	r3, r0
 800881a:	e000      	b.n	800881e <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt+0x38>
 800881c:	2300      	movs	r3, #0
  }
 800881e:	4618      	mov	r0, r3
 8008820:	3710      	adds	r7, #16
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}

08008826 <_ZNK6tflite13Conv2DOptions7paddingEv>:
    VT_STRIDE_H = 8,
    VT_FUSED_ACTIVATION_FUNCTION = 10,
    VT_DILATION_W_FACTOR = 12,
    VT_DILATION_H_FACTOR = 14
  };
  tflite::Padding padding() const {
 8008826:	b580      	push	{r7, lr}
 8008828:	b082      	sub	sp, #8
 800882a:	af00      	add	r7, sp, #0
 800882c:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::Padding>(GetField<int8_t>(VT_PADDING, 0));
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2200      	movs	r2, #0
 8008832:	2104      	movs	r1, #4
 8008834:	4618      	mov	r0, r3
 8008836:	f000 fe87 	bl	8009548 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 800883a:	4603      	mov	r3, r0
 800883c:	b2db      	uxtb	r3, r3
  }
 800883e:	4618      	mov	r0, r3
 8008840:	3708      	adds	r7, #8
 8008842:	46bd      	mov	sp, r7
 8008844:	bd80      	pop	{r7, pc}

08008846 <_ZNK6tflite13Conv2DOptions8stride_wEv>:
  int32_t stride_w() const {
 8008846:	b580      	push	{r7, lr}
 8008848:	b082      	sub	sp, #8
 800884a:	af00      	add	r7, sp, #0
 800884c:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_STRIDE_W, 0);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2200      	movs	r2, #0
 8008852:	2106      	movs	r1, #6
 8008854:	4618      	mov	r0, r3
 8008856:	f000 fe49 	bl	80094ec <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 800885a:	4603      	mov	r3, r0
  }
 800885c:	4618      	mov	r0, r3
 800885e:	3708      	adds	r7, #8
 8008860:	46bd      	mov	sp, r7
 8008862:	bd80      	pop	{r7, pc}

08008864 <_ZNK6tflite13Conv2DOptions8stride_hEv>:
  int32_t stride_h() const {
 8008864:	b580      	push	{r7, lr}
 8008866:	b082      	sub	sp, #8
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_STRIDE_H, 0);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2200      	movs	r2, #0
 8008870:	2108      	movs	r1, #8
 8008872:	4618      	mov	r0, r3
 8008874:	f000 fe3a 	bl	80094ec <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8008878:	4603      	mov	r3, r0
  }
 800887a:	4618      	mov	r0, r3
 800887c:	3708      	adds	r7, #8
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}

08008882 <_ZNK6tflite13Conv2DOptions25fused_activation_functionEv>:
  tflite::ActivationFunctionType fused_activation_function() const {
 8008882:	b580      	push	{r7, lr}
 8008884:	b082      	sub	sp, #8
 8008886:	af00      	add	r7, sp, #0
 8008888:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2200      	movs	r2, #0
 800888e:	210a      	movs	r1, #10
 8008890:	4618      	mov	r0, r3
 8008892:	f000 fe59 	bl	8009548 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8008896:	4603      	mov	r3, r0
 8008898:	b2db      	uxtb	r3, r3
  }
 800889a:	4618      	mov	r0, r3
 800889c:	3708      	adds	r7, #8
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}

080088a2 <_ZNK6tflite13Conv2DOptions17dilation_w_factorEv>:
  int32_t dilation_w_factor() const {
 80088a2:	b580      	push	{r7, lr}
 80088a4:	b082      	sub	sp, #8
 80088a6:	af00      	add	r7, sp, #0
 80088a8:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_DILATION_W_FACTOR, 1);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2201      	movs	r2, #1
 80088ae:	210c      	movs	r1, #12
 80088b0:	4618      	mov	r0, r3
 80088b2:	f000 fe1b 	bl	80094ec <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 80088b6:	4603      	mov	r3, r0
  }
 80088b8:	4618      	mov	r0, r3
 80088ba:	3708      	adds	r7, #8
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}

080088c0 <_ZNK6tflite13Conv2DOptions17dilation_h_factorEv>:
  int32_t dilation_h_factor() const {
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b082      	sub	sp, #8
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_DILATION_H_FACTOR, 1);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2201      	movs	r2, #1
 80088cc:	210e      	movs	r1, #14
 80088ce:	4618      	mov	r0, r3
 80088d0:	f000 fe0c 	bl	80094ec <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 80088d4:	4603      	mov	r3, r0
  }
 80088d6:	4618      	mov	r0, r3
 80088d8:	3708      	adds	r7, #8
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}

080088de <_ZNK6tflite13Pool2DOptions7paddingEv>:
    VT_STRIDE_H = 8,
    VT_FILTER_WIDTH = 10,
    VT_FILTER_HEIGHT = 12,
    VT_FUSED_ACTIVATION_FUNCTION = 14
  };
  tflite::Padding padding() const {
 80088de:	b580      	push	{r7, lr}
 80088e0:	b082      	sub	sp, #8
 80088e2:	af00      	add	r7, sp, #0
 80088e4:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::Padding>(GetField<int8_t>(VT_PADDING, 0));
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2200      	movs	r2, #0
 80088ea:	2104      	movs	r1, #4
 80088ec:	4618      	mov	r0, r3
 80088ee:	f000 fe2b 	bl	8009548 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 80088f2:	4603      	mov	r3, r0
 80088f4:	b2db      	uxtb	r3, r3
  }
 80088f6:	4618      	mov	r0, r3
 80088f8:	3708      	adds	r7, #8
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}

080088fe <_ZNK6tflite13Pool2DOptions8stride_wEv>:
  int32_t stride_w() const {
 80088fe:	b580      	push	{r7, lr}
 8008900:	b082      	sub	sp, #8
 8008902:	af00      	add	r7, sp, #0
 8008904:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_STRIDE_W, 0);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2200      	movs	r2, #0
 800890a:	2106      	movs	r1, #6
 800890c:	4618      	mov	r0, r3
 800890e:	f000 fded 	bl	80094ec <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8008912:	4603      	mov	r3, r0
  }
 8008914:	4618      	mov	r0, r3
 8008916:	3708      	adds	r7, #8
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}

0800891c <_ZNK6tflite13Pool2DOptions8stride_hEv>:
  int32_t stride_h() const {
 800891c:	b580      	push	{r7, lr}
 800891e:	b082      	sub	sp, #8
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_STRIDE_H, 0);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2200      	movs	r2, #0
 8008928:	2108      	movs	r1, #8
 800892a:	4618      	mov	r0, r3
 800892c:	f000 fdde 	bl	80094ec <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8008930:	4603      	mov	r3, r0
  }
 8008932:	4618      	mov	r0, r3
 8008934:	3708      	adds	r7, #8
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}

0800893a <_ZNK6tflite13Pool2DOptions12filter_widthEv>:
  int32_t filter_width() const {
 800893a:	b580      	push	{r7, lr}
 800893c:	b082      	sub	sp, #8
 800893e:	af00      	add	r7, sp, #0
 8008940:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_FILTER_WIDTH, 0);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2200      	movs	r2, #0
 8008946:	210a      	movs	r1, #10
 8008948:	4618      	mov	r0, r3
 800894a:	f000 fdcf 	bl	80094ec <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 800894e:	4603      	mov	r3, r0
  }
 8008950:	4618      	mov	r0, r3
 8008952:	3708      	adds	r7, #8
 8008954:	46bd      	mov	sp, r7
 8008956:	bd80      	pop	{r7, pc}

08008958 <_ZNK6tflite13Pool2DOptions13filter_heightEv>:
  int32_t filter_height() const {
 8008958:	b580      	push	{r7, lr}
 800895a:	b082      	sub	sp, #8
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_FILTER_HEIGHT, 0);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2200      	movs	r2, #0
 8008964:	210c      	movs	r1, #12
 8008966:	4618      	mov	r0, r3
 8008968:	f000 fdc0 	bl	80094ec <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 800896c:	4603      	mov	r3, r0
  }
 800896e:	4618      	mov	r0, r3
 8008970:	3708      	adds	r7, #8
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}

08008976 <_ZNK6tflite13Pool2DOptions25fused_activation_functionEv>:
  tflite::ActivationFunctionType fused_activation_function() const {
 8008976:	b580      	push	{r7, lr}
 8008978:	b082      	sub	sp, #8
 800897a:	af00      	add	r7, sp, #0
 800897c:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2200      	movs	r2, #0
 8008982:	210e      	movs	r1, #14
 8008984:	4618      	mov	r0, r3
 8008986:	f000 fddf 	bl	8009548 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 800898a:	4603      	mov	r3, r0
 800898c:	b2db      	uxtb	r3, r3
  }
 800898e:	4618      	mov	r0, r3
 8008990:	3708      	adds	r7, #8
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}

08008996 <_ZNK6tflite22DepthwiseConv2DOptions7paddingEv>:
    VT_DEPTH_MULTIPLIER = 10,
    VT_FUSED_ACTIVATION_FUNCTION = 12,
    VT_DILATION_W_FACTOR = 14,
    VT_DILATION_H_FACTOR = 16
  };
  tflite::Padding padding() const {
 8008996:	b580      	push	{r7, lr}
 8008998:	b082      	sub	sp, #8
 800899a:	af00      	add	r7, sp, #0
 800899c:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::Padding>(GetField<int8_t>(VT_PADDING, 0));
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2200      	movs	r2, #0
 80089a2:	2104      	movs	r1, #4
 80089a4:	4618      	mov	r0, r3
 80089a6:	f000 fdcf 	bl	8009548 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 80089aa:	4603      	mov	r3, r0
 80089ac:	b2db      	uxtb	r3, r3
  }
 80089ae:	4618      	mov	r0, r3
 80089b0:	3708      	adds	r7, #8
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}

080089b6 <_ZNK6tflite22DepthwiseConv2DOptions8stride_wEv>:
  int32_t stride_w() const {
 80089b6:	b580      	push	{r7, lr}
 80089b8:	b082      	sub	sp, #8
 80089ba:	af00      	add	r7, sp, #0
 80089bc:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_STRIDE_W, 0);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2200      	movs	r2, #0
 80089c2:	2106      	movs	r1, #6
 80089c4:	4618      	mov	r0, r3
 80089c6:	f000 fd91 	bl	80094ec <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 80089ca:	4603      	mov	r3, r0
  }
 80089cc:	4618      	mov	r0, r3
 80089ce:	3708      	adds	r7, #8
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}

080089d4 <_ZNK6tflite22DepthwiseConv2DOptions8stride_hEv>:
  int32_t stride_h() const {
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b082      	sub	sp, #8
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_STRIDE_H, 0);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2200      	movs	r2, #0
 80089e0:	2108      	movs	r1, #8
 80089e2:	4618      	mov	r0, r3
 80089e4:	f000 fd82 	bl	80094ec <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 80089e8:	4603      	mov	r3, r0
  }
 80089ea:	4618      	mov	r0, r3
 80089ec:	3708      	adds	r7, #8
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd80      	pop	{r7, pc}

080089f2 <_ZNK6tflite22DepthwiseConv2DOptions16depth_multiplierEv>:
  int32_t depth_multiplier() const {
 80089f2:	b580      	push	{r7, lr}
 80089f4:	b082      	sub	sp, #8
 80089f6:	af00      	add	r7, sp, #0
 80089f8:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_DEPTH_MULTIPLIER, 0);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2200      	movs	r2, #0
 80089fe:	210a      	movs	r1, #10
 8008a00:	4618      	mov	r0, r3
 8008a02:	f000 fd73 	bl	80094ec <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8008a06:	4603      	mov	r3, r0
  }
 8008a08:	4618      	mov	r0, r3
 8008a0a:	3708      	adds	r7, #8
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bd80      	pop	{r7, pc}

08008a10 <_ZNK6tflite22DepthwiseConv2DOptions25fused_activation_functionEv>:
  tflite::ActivationFunctionType fused_activation_function() const {
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b082      	sub	sp, #8
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	210c      	movs	r1, #12
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f000 fd92 	bl	8009548 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8008a24:	4603      	mov	r3, r0
 8008a26:	b2db      	uxtb	r3, r3
  }
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3708      	adds	r7, #8
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}

08008a30 <_ZNK6tflite22DepthwiseConv2DOptions17dilation_w_factorEv>:
  int32_t dilation_w_factor() const {
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b082      	sub	sp, #8
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_DILATION_W_FACTOR, 1);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2201      	movs	r2, #1
 8008a3c:	210e      	movs	r1, #14
 8008a3e:	4618      	mov	r0, r3
 8008a40:	f000 fd54 	bl	80094ec <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8008a44:	4603      	mov	r3, r0
  }
 8008a46:	4618      	mov	r0, r3
 8008a48:	3708      	adds	r7, #8
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}

08008a4e <_ZNK6tflite22DepthwiseConv2DOptions17dilation_h_factorEv>:
  int32_t dilation_h_factor() const {
 8008a4e:	b580      	push	{r7, lr}
 8008a50:	b082      	sub	sp, #8
 8008a52:	af00      	add	r7, sp, #0
 8008a54:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_DILATION_H_FACTOR, 1);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2201      	movs	r2, #1
 8008a5a:	2110      	movs	r1, #16
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	f000 fd45 	bl	80094ec <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8008a62:	4603      	mov	r3, r0
  }
 8008a64:	4618      	mov	r0, r3
 8008a66:	3708      	adds	r7, #8
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}

08008a6c <_ZNK6tflite14SoftmaxOptions4betaEv>:
struct SoftmaxOptions FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef SoftmaxOptionsT NativeTableType;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_BETA = 4
  };
  float beta() const {
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b082      	sub	sp, #8
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
    return GetField<float>(VT_BETA, 0.0f);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8008a90 <_ZNK6tflite14SoftmaxOptions4betaEv+0x24>
 8008a7a:	2104      	movs	r1, #4
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	f000 fd83 	bl	8009588 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>
 8008a82:	eef0 7a40 	vmov.f32	s15, s0
  }
 8008a86:	eeb0 0a67 	vmov.f32	s0, s15
 8008a8a:	3708      	adds	r7, #8
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}
 8008a90:	00000000 	.word	0x00000000

08008a94 <_ZNK6tflite14ReshapeOptions9new_shapeEv>:
struct ReshapeOptions FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ReshapeOptionsT NativeTableType;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NEW_SHAPE = 4
  };
  const flatbuffers::Vector<int32_t> *new_shape() const {
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b082      	sub	sp, #8
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_NEW_SHAPE);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2104      	movs	r1, #4
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	f000 fd41 	bl	8009528 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 8008aa6:	4603      	mov	r3, r0
  }
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	3708      	adds	r7, #8
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}

08008ab0 <_ZNK6tflite8Operator20builtin_options_typeEv>:
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_INPUTS);
  }
  const flatbuffers::Vector<int32_t> *outputs() const {
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_OUTPUTS);
  }
  tflite::BuiltinOptions builtin_options_type() const {
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b082      	sub	sp, #8
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::BuiltinOptions>(GetField<uint8_t>(VT_BUILTIN_OPTIONS_TYPE, 0));
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2200      	movs	r2, #0
 8008abc:	210a      	movs	r1, #10
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f000 fce5 	bl	800948e <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 8008ac4:	4603      	mov	r3, r0
  }
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	3708      	adds	r7, #8
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}

08008ace <_ZNK6tflite8Operator15builtin_optionsEv>:
  const void *builtin_options() const {
 8008ace:	b580      	push	{r7, lr}
 8008ad0:	b082      	sub	sp, #8
 8008ad2:	af00      	add	r7, sp, #0
 8008ad4:	6078      	str	r0, [r7, #4]
    return GetPointer<const void *>(VT_BUILTIN_OPTIONS);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	210c      	movs	r1, #12
 8008ada:	4618      	mov	r0, r3
 8008adc:	f000 fcf6 	bl	80094cc <_ZNK11flatbuffers5Table10GetPointerIPKvEET_t>
 8008ae0:	4603      	mov	r3, r0
  }
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	3708      	adds	r7, #8
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}

08008aea <_ZNK6tflite8Operator32builtin_options_as_Conv2DOptionsEv>:
  template<typename T> const T *builtin_options_as() const;
  const tflite::Conv2DOptions *builtin_options_as_Conv2DOptions() const {
 8008aea:	b580      	push	{r7, lr}
 8008aec:	b082      	sub	sp, #8
 8008aee:	af00      	add	r7, sp, #0
 8008af0:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_Conv2DOptions ? static_cast<const tflite::Conv2DOptions *>(builtin_options()) : nullptr;
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f7ff ffdc 	bl	8008ab0 <_ZNK6tflite8Operator20builtin_options_typeEv>
 8008af8:	4603      	mov	r3, r0
 8008afa:	2b01      	cmp	r3, #1
 8008afc:	d104      	bne.n	8008b08 <_ZNK6tflite8Operator32builtin_options_as_Conv2DOptionsEv+0x1e>
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f7ff ffe5 	bl	8008ace <_ZNK6tflite8Operator15builtin_optionsEv>
 8008b04:	4603      	mov	r3, r0
 8008b06:	e000      	b.n	8008b0a <_ZNK6tflite8Operator32builtin_options_as_Conv2DOptionsEv+0x20>
 8008b08:	2300      	movs	r3, #0
  }
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	3708      	adds	r7, #8
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}

08008b12 <_ZNK6tflite8Operator41builtin_options_as_DepthwiseConv2DOptionsEv>:
  const tflite::DepthwiseConv2DOptions *builtin_options_as_DepthwiseConv2DOptions() const {
 8008b12:	b580      	push	{r7, lr}
 8008b14:	b082      	sub	sp, #8
 8008b16:	af00      	add	r7, sp, #0
 8008b18:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_DepthwiseConv2DOptions ? static_cast<const tflite::DepthwiseConv2DOptions *>(builtin_options()) : nullptr;
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f7ff ffc8 	bl	8008ab0 <_ZNK6tflite8Operator20builtin_options_typeEv>
 8008b20:	4603      	mov	r3, r0
 8008b22:	2b02      	cmp	r3, #2
 8008b24:	d104      	bne.n	8008b30 <_ZNK6tflite8Operator41builtin_options_as_DepthwiseConv2DOptionsEv+0x1e>
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f7ff ffd1 	bl	8008ace <_ZNK6tflite8Operator15builtin_optionsEv>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	e000      	b.n	8008b32 <_ZNK6tflite8Operator41builtin_options_as_DepthwiseConv2DOptionsEv+0x20>
 8008b30:	2300      	movs	r3, #0
  }
 8008b32:	4618      	mov	r0, r3
 8008b34:	3708      	adds	r7, #8
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}

08008b3a <_ZNK6tflite8Operator32builtin_options_as_Pool2DOptionsEv>:
    return builtin_options_type() == tflite::BuiltinOptions_ConcatEmbeddingsOptions ? static_cast<const tflite::ConcatEmbeddingsOptions *>(builtin_options()) : nullptr;
  }
  const tflite::LSHProjectionOptions *builtin_options_as_LSHProjectionOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_LSHProjectionOptions ? static_cast<const tflite::LSHProjectionOptions *>(builtin_options()) : nullptr;
  }
  const tflite::Pool2DOptions *builtin_options_as_Pool2DOptions() const {
 8008b3a:	b580      	push	{r7, lr}
 8008b3c:	b082      	sub	sp, #8
 8008b3e:	af00      	add	r7, sp, #0
 8008b40:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_Pool2DOptions ? static_cast<const tflite::Pool2DOptions *>(builtin_options()) : nullptr;
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f7ff ffb4 	bl	8008ab0 <_ZNK6tflite8Operator20builtin_options_typeEv>
 8008b48:	4603      	mov	r3, r0
 8008b4a:	2b05      	cmp	r3, #5
 8008b4c:	d104      	bne.n	8008b58 <_ZNK6tflite8Operator32builtin_options_as_Pool2DOptionsEv+0x1e>
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f7ff ffbd 	bl	8008ace <_ZNK6tflite8Operator15builtin_optionsEv>
 8008b54:	4603      	mov	r3, r0
 8008b56:	e000      	b.n	8008b5a <_ZNK6tflite8Operator32builtin_options_as_Pool2DOptionsEv+0x20>
 8008b58:	2300      	movs	r3, #0
  }
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	3708      	adds	r7, #8
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}

08008b62 <_ZNK6tflite8Operator33builtin_options_as_SoftmaxOptionsEv>:
    return builtin_options_type() == tflite::BuiltinOptions_RNNOptions ? static_cast<const tflite::RNNOptions *>(builtin_options()) : nullptr;
  }
  const tflite::FullyConnectedOptions *builtin_options_as_FullyConnectedOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_FullyConnectedOptions ? static_cast<const tflite::FullyConnectedOptions *>(builtin_options()) : nullptr;
  }
  const tflite::SoftmaxOptions *builtin_options_as_SoftmaxOptions() const {
 8008b62:	b580      	push	{r7, lr}
 8008b64:	b082      	sub	sp, #8
 8008b66:	af00      	add	r7, sp, #0
 8008b68:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_SoftmaxOptions ? static_cast<const tflite::SoftmaxOptions *>(builtin_options()) : nullptr;
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f7ff ffa0 	bl	8008ab0 <_ZNK6tflite8Operator20builtin_options_typeEv>
 8008b70:	4603      	mov	r3, r0
 8008b72:	2b09      	cmp	r3, #9
 8008b74:	d104      	bne.n	8008b80 <_ZNK6tflite8Operator33builtin_options_as_SoftmaxOptionsEv+0x1e>
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f7ff ffa9 	bl	8008ace <_ZNK6tflite8Operator15builtin_optionsEv>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	e000      	b.n	8008b82 <_ZNK6tflite8Operator33builtin_options_as_SoftmaxOptionsEv+0x20>
 8008b80:	2300      	movs	r3, #0
  }
 8008b82:	4618      	mov	r0, r3
 8008b84:	3708      	adds	r7, #8
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}

08008b8a <_ZNK6tflite8Operator33builtin_options_as_ReshapeOptionsEv>:
    return builtin_options_type() == tflite::BuiltinOptions_ResizeBilinearOptions ? static_cast<const tflite::ResizeBilinearOptions *>(builtin_options()) : nullptr;
  }
  const tflite::CallOptions *builtin_options_as_CallOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_CallOptions ? static_cast<const tflite::CallOptions *>(builtin_options()) : nullptr;
  }
  const tflite::ReshapeOptions *builtin_options_as_ReshapeOptions() const {
 8008b8a:	b580      	push	{r7, lr}
 8008b8c:	b082      	sub	sp, #8
 8008b8e:	af00      	add	r7, sp, #0
 8008b90:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_ReshapeOptions ? static_cast<const tflite::ReshapeOptions *>(builtin_options()) : nullptr;
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f7ff ff8c 	bl	8008ab0 <_ZNK6tflite8Operator20builtin_options_typeEv>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	2b11      	cmp	r3, #17
 8008b9c:	d104      	bne.n	8008ba8 <_ZNK6tflite8Operator33builtin_options_as_ReshapeOptionsEv+0x1e>
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f7ff ff95 	bl	8008ace <_ZNK6tflite8Operator15builtin_optionsEv>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	e000      	b.n	8008baa <_ZNK6tflite8Operator33builtin_options_as_ReshapeOptionsEv+0x20>
 8008ba8:	2300      	movs	r3, #0
  }
 8008baa:	4618      	mov	r0, r3
 8008bac:	3708      	adds	r7, #8
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}

08008bb2 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>:
// parsed op data (e.g., when model parameters are invalid).
class SafeBuiltinDataAllocator {
 public:
  class BuiltinDataDeleter {
   public:
    explicit BuiltinDataDeleter(BuiltinDataAllocator* allocator)
 8008bb2:	b480      	push	{r7}
 8008bb4:	b083      	sub	sp, #12
 8008bb6:	af00      	add	r7, sp, #0
 8008bb8:	6078      	str	r0, [r7, #4]
 8008bba:	6039      	str	r1, [r7, #0]
        : allocator_(allocator) {}
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	683a      	ldr	r2, [r7, #0]
 8008bc0:	601a      	str	r2, [r3, #0]
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	370c      	adds	r7, #12
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bce:	4770      	bx	lr

08008bd0 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>:

    void operator()(void* data) { allocator_->Deallocate(data); }
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b082      	sub	sp, #8
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
 8008bd8:	6039      	str	r1, [r7, #0]
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681a      	ldr	r2, [r3, #0]
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	3304      	adds	r3, #4
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	6839      	ldr	r1, [r7, #0]
 8008bea:	4610      	mov	r0, r2
 8008bec:	4798      	blx	r3
 8008bee:	bf00      	nop
 8008bf0:	3708      	adds	r7, #8
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}

08008bf6 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>:
  };

  template <typename T>
  using BuiltinDataPtr = std::unique_ptr<T, BuiltinDataDeleter>;

  explicit SafeBuiltinDataAllocator(BuiltinDataAllocator* allocator)
 8008bf6:	b480      	push	{r7}
 8008bf8:	b083      	sub	sp, #12
 8008bfa:	af00      	add	r7, sp, #0
 8008bfc:	6078      	str	r0, [r7, #4]
 8008bfe:	6039      	str	r1, [r7, #0]
      : allocator_(allocator) {}
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	683a      	ldr	r2, [r7, #0]
 8008c04:	601a      	str	r2, [r3, #0]
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	4618      	mov	r0, r3
 8008c0a:	370c      	adds	r7, #12
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c12:	4770      	bx	lr

08008c14 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:

// All the Parse functions take some pointers as params and this function has
// the common DCHECKs to catch if any of those are nullptr.
void CheckParsePointerParams(const Operator* op, ErrorReporter* error_reporter,
                             BuiltinDataAllocator* allocator,
                             void** builtin_data) {
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b084      	sub	sp, #16
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	60f8      	str	r0, [r7, #12]
 8008c1c:	60b9      	str	r1, [r7, #8]
 8008c1e:	607a      	str	r2, [r7, #4]
 8008c20:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(op != nullptr);
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d101      	bne.n	8008c2c <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x18>
 8008c28:	f01c ff0d 	bl	8025a46 <abort>
  TFLITE_DCHECK(error_reporter != nullptr);
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d101      	bne.n	8008c36 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x22>
 8008c32:	f01c ff08 	bl	8025a46 <abort>
  TFLITE_DCHECK(allocator != nullptr);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d101      	bne.n	8008c40 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2c>
 8008c3c:	f01c ff03 	bl	8025a46 <abort>
  TFLITE_DCHECK(builtin_data != nullptr);
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d101      	bne.n	8008c4a <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x36>
 8008c46:	f01c fefe 	bl	8025a46 <abort>
}
 8008c4a:	bf00      	nop
 8008c4c:	3710      	adds	r7, #16
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}
	...

08008c54 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc>:
// Copies the contents from the flatbuffer int vector `flatbuffer` into the
// int array `buffer`. `flat_vector` and `buffer` represent the same
// configuration operation for a given operation.
TfLiteStatus FlatBufferIntVectorToArray(
    int max_size_of_buffer, const flatbuffers::Vector<int32_t>* flat_vector,
    int* buffer, ErrorReporter* error_reporter, const char* op_name) {
 8008c54:	b590      	push	{r4, r7, lr}
 8008c56:	b087      	sub	sp, #28
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	60f8      	str	r0, [r7, #12]
 8008c5c:	60b9      	str	r1, [r7, #8]
 8008c5e:	607a      	str	r2, [r7, #4]
 8008c60:	603b      	str	r3, [r7, #0]
  if (!flat_vector) {
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d106      	bne.n	8008c76 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x22>
    TF_LITE_REPORT_ERROR(error_reporter,
 8008c68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c6a:	4917      	ldr	r1, [pc, #92]	; (8008cc8 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x74>)
 8008c6c:	6838      	ldr	r0, [r7, #0]
 8008c6e:	f7ff fd6b 	bl	8008748 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Input array not provided for operation '%s'.\n",
                         op_name);
    return kTfLiteError;
 8008c72:	2301      	movs	r3, #1
 8008c74:	e024      	b.n	8008cc0 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x6c>
  } else {
    size_t num_dimensions = flat_vector->size();
 8008c76:	68b8      	ldr	r0, [r7, #8]
 8008c78:	f000 fca8 	bl	80095cc <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8008c7c:	6138      	str	r0, [r7, #16]
    if (num_dimensions > max_size_of_buffer / sizeof(int)) {
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	089b      	lsrs	r3, r3, #2
 8008c82:	693a      	ldr	r2, [r7, #16]
 8008c84:	429a      	cmp	r2, r3
 8008c86:	d906      	bls.n	8008c96 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x42>
      TF_LITE_REPORT_ERROR(
 8008c88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c8a:	4910      	ldr	r1, [pc, #64]	; (8008ccc <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x78>)
 8008c8c:	6838      	ldr	r0, [r7, #0]
 8008c8e:	f7ff fd5b 	bl	8008748 <_ZN6tflite13ErrorReporter6ReportEPKcz>
          error_reporter,
          "Found too many dimensions in the input array of operation '%s'.\n",
          op_name);
      return kTfLiteError;
 8008c92:	2301      	movs	r3, #1
 8008c94:	e014      	b.n	8008cc0 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x6c>
    } else {
      for (size_t i = 0; i < num_dimensions; ++i) {
 8008c96:	2300      	movs	r3, #0
 8008c98:	617b      	str	r3, [r7, #20]
 8008c9a:	697a      	ldr	r2, [r7, #20]
 8008c9c:	693b      	ldr	r3, [r7, #16]
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	d20d      	bcs.n	8008cbe <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x6a>
        buffer[i] = flat_vector->Get(i);
 8008ca2:	697b      	ldr	r3, [r7, #20]
 8008ca4:	009b      	lsls	r3, r3, #2
 8008ca6:	687a      	ldr	r2, [r7, #4]
 8008ca8:	18d4      	adds	r4, r2, r3
 8008caa:	6979      	ldr	r1, [r7, #20]
 8008cac:	68b8      	ldr	r0, [r7, #8]
 8008cae:	f000 fc9b 	bl	80095e8 <_ZNK11flatbuffers6VectorIlE3GetEm>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	6023      	str	r3, [r4, #0]
      for (size_t i = 0; i < num_dimensions; ++i) {
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	3301      	adds	r3, #1
 8008cba:	617b      	str	r3, [r7, #20]
 8008cbc:	e7ed      	b.n	8008c9a <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x46>
      }
    }
  }
  return kTfLiteOk;
 8008cbe:	2300      	movs	r3, #0
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	371c      	adds	r7, #28
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd90      	pop	{r4, r7, pc}
 8008cc8:	08026d28 	.word	0x08026d28
 8008ccc:	08026d58 	.word	0x08026d58

08008cd0 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>:

// Converts the flatbuffer activation to what is used at runtime.
TfLiteFusedActivation ConvertActivation(ActivationFunctionType activation) {
 8008cd0:	b480      	push	{r7}
 8008cd2:	b083      	sub	sp, #12
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	71fb      	strb	r3, [r7, #7]
  switch (activation) {
 8008cda:	79fb      	ldrb	r3, [r7, #7]
 8008cdc:	2b05      	cmp	r3, #5
 8008cde:	d81b      	bhi.n	8008d18 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x48>
 8008ce0:	a201      	add	r2, pc, #4	; (adr r2, 8008ce8 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x18>)
 8008ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ce6:	bf00      	nop
 8008ce8:	08008d01 	.word	0x08008d01
 8008cec:	08008d05 	.word	0x08008d05
 8008cf0:	08008d09 	.word	0x08008d09
 8008cf4:	08008d0d 	.word	0x08008d0d
 8008cf8:	08008d11 	.word	0x08008d11
 8008cfc:	08008d15 	.word	0x08008d15
    case ActivationFunctionType_NONE:
      return kTfLiteActNone;
 8008d00:	2300      	movs	r3, #0
 8008d02:	e00a      	b.n	8008d1a <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_RELU:
      return kTfLiteActRelu;
 8008d04:	2301      	movs	r3, #1
 8008d06:	e008      	b.n	8008d1a <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_RELU_N1_TO_1:
      return kTfLiteActReluN1To1;
 8008d08:	2302      	movs	r3, #2
 8008d0a:	e006      	b.n	8008d1a <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_RELU6:
      return kTfLiteActRelu6;
 8008d0c:	2303      	movs	r3, #3
 8008d0e:	e004      	b.n	8008d1a <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_TANH:
      return kTfLiteActTanh;
 8008d10:	2304      	movs	r3, #4
 8008d12:	e002      	b.n	8008d1a <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_SIGN_BIT:
      return kTfLiteActSignBit;
 8008d14:	2305      	movs	r3, #5
 8008d16:	e000      	b.n	8008d1a <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
  }
  return kTfLiteActNone;
 8008d18:	2300      	movs	r3, #0
}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	370c      	adds	r7, #12
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d24:	4770      	bx	lr
 8008d26:	bf00      	nop

08008d28 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>:

// Converts the flatbuffer padding enum to what is used at runtime.
TfLitePadding ConvertPadding(Padding padding) {
 8008d28:	b480      	push	{r7}
 8008d2a:	b083      	sub	sp, #12
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	4603      	mov	r3, r0
 8008d30:	71fb      	strb	r3, [r7, #7]
  switch (padding) {
 8008d32:	79fb      	ldrb	r3, [r7, #7]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d002      	beq.n	8008d3e <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0x16>
 8008d38:	2b01      	cmp	r3, #1
 8008d3a:	d002      	beq.n	8008d42 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0x1a>
 8008d3c:	e003      	b.n	8008d46 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0x1e>
    case Padding_SAME:
      return kTfLitePaddingSame;
 8008d3e:	2301      	movs	r3, #1
 8008d40:	e002      	b.n	8008d48 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0x20>
    case Padding_VALID:
      return kTfLitePaddingValid;
 8008d42:	2302      	movs	r3, #2
 8008d44:	e000      	b.n	8008d48 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0x20>
  }
  return kTfLitePaddingUnknown;
 8008d46:	2300      	movs	r3, #0
}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	370c      	adds	r7, #12
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d52:	4770      	bx	lr

08008d54 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>:
}  // NOLINT[readability/fn_size]
#endif  // !defined(TF_LITE_STATIC_MEMORY)
}  // namespace

TfLiteStatus ConvertTensorType(TensorType tensor_type, TfLiteType* type,
                               ErrorReporter* error_reporter) {
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b084      	sub	sp, #16
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	60b9      	str	r1, [r7, #8]
 8008d5e:	607a      	str	r2, [r7, #4]
 8008d60:	73fb      	strb	r3, [r7, #15]
  switch (tensor_type) {
 8008d62:	7bfb      	ldrb	r3, [r7, #15]
 8008d64:	2b0f      	cmp	r3, #15
 8008d66:	d873      	bhi.n	8008e50 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xfc>
 8008d68:	a201      	add	r2, pc, #4	; (adr r2, 8008d70 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1c>)
 8008d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d6e:	bf00      	nop
 8008d70:	08008dbb 	.word	0x08008dbb
 8008d74:	08008db1 	.word	0x08008db1
 8008d78:	08008dd9 	.word	0x08008dd9
 8008d7c:	08008ded 	.word	0x08008ded
 8008d80:	08008e01 	.word	0x08008e01
 8008d84:	08008e15 	.word	0x08008e15
 8008d88:	08008e1f 	.word	0x08008e1f
 8008d8c:	08008dcf 	.word	0x08008dcf
 8008d90:	08008e29 	.word	0x08008e29
 8008d94:	08008df7 	.word	0x08008df7
 8008d98:	08008dc5 	.word	0x08008dc5
 8008d9c:	08008e33 	.word	0x08008e33
 8008da0:	08008e0b 	.word	0x08008e0b
 8008da4:	08008e3d 	.word	0x08008e3d
 8008da8:	08008e47 	.word	0x08008e47
 8008dac:	08008de3 	.word	0x08008de3
    case TensorType_FLOAT16:
      *type = kTfLiteFloat16;
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	220a      	movs	r2, #10
 8008db4:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8008db6:	2300      	movs	r3, #0
 8008db8:	e054      	b.n	8008e64 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_FLOAT32:
      *type = kTfLiteFloat32;
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	2201      	movs	r2, #1
 8008dbe:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	e04f      	b.n	8008e64 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_FLOAT64:
      *type = kTfLiteFloat64;
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	220b      	movs	r2, #11
 8008dc8:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8008dca:	2300      	movs	r3, #0
 8008dcc:	e04a      	b.n	8008e64 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_INT16:
      *type = kTfLiteInt16;
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	2207      	movs	r2, #7
 8008dd2:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	e045      	b.n	8008e64 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_INT32:
      *type = kTfLiteInt32;
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	2202      	movs	r2, #2
 8008ddc:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8008dde:	2300      	movs	r3, #0
 8008de0:	e040      	b.n	8008e64 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_UINT32:
      *type = kTfLiteUInt32;
 8008de2:	68bb      	ldr	r3, [r7, #8]
 8008de4:	2210      	movs	r2, #16
 8008de6:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8008de8:	2300      	movs	r3, #0
 8008dea:	e03b      	b.n	8008e64 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_UINT8:
      *type = kTfLiteUInt8;
 8008dec:	68bb      	ldr	r3, [r7, #8]
 8008dee:	2203      	movs	r2, #3
 8008df0:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8008df2:	2300      	movs	r3, #0
 8008df4:	e036      	b.n	8008e64 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_INT8:
      *type = kTfLiteInt8;
 8008df6:	68bb      	ldr	r3, [r7, #8]
 8008df8:	2209      	movs	r2, #9
 8008dfa:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	e031      	b.n	8008e64 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_INT64:
      *type = kTfLiteInt64;
 8008e00:	68bb      	ldr	r3, [r7, #8]
 8008e02:	2204      	movs	r2, #4
 8008e04:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8008e06:	2300      	movs	r3, #0
 8008e08:	e02c      	b.n	8008e64 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_UINT64:
      *type = kTfLiteUInt64;
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	220d      	movs	r2, #13
 8008e0e:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8008e10:	2300      	movs	r3, #0
 8008e12:	e027      	b.n	8008e64 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_STRING:
      *type = kTfLiteString;
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	2205      	movs	r2, #5
 8008e18:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	e022      	b.n	8008e64 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_BOOL:
      *type = kTfLiteBool;
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	2206      	movs	r2, #6
 8008e22:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8008e24:	2300      	movs	r3, #0
 8008e26:	e01d      	b.n	8008e64 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_COMPLEX64:
      *type = kTfLiteComplex64;
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	2208      	movs	r2, #8
 8008e2c:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	e018      	b.n	8008e64 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_COMPLEX128:
      *type = kTfLiteComplex128;
 8008e32:	68bb      	ldr	r3, [r7, #8]
 8008e34:	220c      	movs	r2, #12
 8008e36:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8008e38:	2300      	movs	r3, #0
 8008e3a:	e013      	b.n	8008e64 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_RESOURCE:
      *type = kTfLiteResource;
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	220e      	movs	r2, #14
 8008e40:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8008e42:	2300      	movs	r3, #0
 8008e44:	e00e      	b.n	8008e64 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_VARIANT:
      *type = kTfLiteVariant;
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	220f      	movs	r2, #15
 8008e4a:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	e009      	b.n	8008e64 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    default:
      *type = kTfLiteNoType;
 8008e50:	68bb      	ldr	r3, [r7, #8]
 8008e52:	2200      	movs	r2, #0
 8008e54:	701a      	strb	r2, [r3, #0]
      TF_LITE_REPORT_ERROR(error_reporter,
 8008e56:	7bfb      	ldrb	r3, [r7, #15]
 8008e58:	461a      	mov	r2, r3
 8008e5a:	4904      	ldr	r1, [pc, #16]	; (8008e6c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x118>)
 8008e5c:	6878      	ldr	r0, [r7, #4]
 8008e5e:	f7ff fc73 	bl	8008748 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Unsupported data type %d in tensor\n", tensor_type);
      return kTfLiteError;
 8008e62:	2301      	movs	r3, #1
  }
}
 8008e64:	4618      	mov	r0, r3
 8008e66:	3710      	adds	r7, #16
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bd80      	pop	{r7, pc}
 8008e6c:	08026e7c 	.word	0x08026e7c

08008e70 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
  *builtin_data = params.release();
  return kTfLiteOk;
}

TfLiteStatus ParseConv2D(const Operator* op, ErrorReporter* error_reporter,
                         BuiltinDataAllocator* allocator, void** builtin_data) {
 8008e70:	b5b0      	push	{r4, r5, r7, lr}
 8008e72:	b08a      	sub	sp, #40	; 0x28
 8008e74:	af02      	add	r7, sp, #8
 8008e76:	60f8      	str	r0, [r7, #12]
 8008e78:	60b9      	str	r1, [r7, #8]
 8008e7a:	607a      	str	r2, [r7, #4]
 8008e7c:	603b      	str	r3, [r7, #0]
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	687a      	ldr	r2, [r7, #4]
 8008e82:	68b9      	ldr	r1, [r7, #8]
 8008e84:	68f8      	ldr	r0, [r7, #12]
 8008e86:	f7ff fec5 	bl	8008c14 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>

  SafeBuiltinDataAllocator safe_allocator(allocator);
 8008e8a:	f107 0318 	add.w	r3, r7, #24
 8008e8e:	6879      	ldr	r1, [r7, #4]
 8008e90:	4618      	mov	r0, r3
 8008e92:	f7ff feb0 	bl	8008bf6 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>
  std::unique_ptr<TfLiteConvParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteConvParams>();
 8008e96:	f107 0310 	add.w	r3, r7, #16
 8008e9a:	f107 0218 	add.w	r2, r7, #24
 8008e9e:	4611      	mov	r1, r2
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	f000 fbc7 	bl	8009634 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI16TfLiteConvParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 8008ea6:	f107 0310 	add.w	r3, r7, #16
 8008eaa:	2100      	movs	r1, #0
 8008eac:	4618      	mov	r0, r3
 8008eae:	f000 fc01 	bl	80096b4 <_ZStneI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	f083 0301 	eor.w	r3, r3, #1
 8008eb8:	b2db      	uxtb	r3, r3
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d00c      	beq.n	8008ed8 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>
 8008ebe:	4b39      	ldr	r3, [pc, #228]	; (8008fa4 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x134>)
 8008ec0:	9301      	str	r3, [sp, #4]
 8008ec2:	f240 433a 	movw	r3, #1082	; 0x43a
 8008ec6:	9300      	str	r3, [sp, #0]
 8008ec8:	4b37      	ldr	r3, [pc, #220]	; (8008fa8 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x138>)
 8008eca:	4a38      	ldr	r2, [pc, #224]	; (8008fac <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x13c>)
 8008ecc:	68b9      	ldr	r1, [r7, #8]
 8008ece:	68b8      	ldr	r0, [r7, #8]
 8008ed0:	f7ff fc53 	bl	800877a <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 8008ed4:	2401      	movs	r4, #1
 8008ed6:	e05b      	b.n	8008f90 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x120>

  const Conv2DOptions* schema_params = op->builtin_options_as_Conv2DOptions();
 8008ed8:	68f8      	ldr	r0, [r7, #12]
 8008eda:	f7ff fe06 	bl	8008aea <_ZNK6tflite8Operator32builtin_options_as_Conv2DOptionsEv>
 8008ede:	61f8      	str	r0, [r7, #28]

  if (schema_params != nullptr) {
 8008ee0:	69fb      	ldr	r3, [r7, #28]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d04b      	beq.n	8008f7e <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x10e>
    params->padding = ConvertPadding(schema_params->padding());
 8008ee6:	69f8      	ldr	r0, [r7, #28]
 8008ee8:	f7ff fc9d 	bl	8008826 <_ZNK6tflite13Conv2DOptions7paddingEv>
 8008eec:	4603      	mov	r3, r0
 8008eee:	461d      	mov	r5, r3
 8008ef0:	f107 0310 	add.w	r3, r7, #16
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f000 fbea 	bl	80096ce <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8008efa:	4604      	mov	r4, r0
 8008efc:	4628      	mov	r0, r5
 8008efe:	f7ff ff13 	bl	8008d28 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>
 8008f02:	4603      	mov	r3, r0
 8008f04:	7023      	strb	r3, [r4, #0]
    params->stride_width = schema_params->stride_w();
 8008f06:	f107 0310 	add.w	r3, r7, #16
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f000 fbdf 	bl	80096ce <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8008f10:	4604      	mov	r4, r0
 8008f12:	69f8      	ldr	r0, [r7, #28]
 8008f14:	f7ff fc97 	bl	8008846 <_ZNK6tflite13Conv2DOptions8stride_wEv>
 8008f18:	4603      	mov	r3, r0
 8008f1a:	6063      	str	r3, [r4, #4]
    params->stride_height = schema_params->stride_h();
 8008f1c:	f107 0310 	add.w	r3, r7, #16
 8008f20:	4618      	mov	r0, r3
 8008f22:	f000 fbd4 	bl	80096ce <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8008f26:	4604      	mov	r4, r0
 8008f28:	69f8      	ldr	r0, [r7, #28]
 8008f2a:	f7ff fc9b 	bl	8008864 <_ZNK6tflite13Conv2DOptions8stride_hEv>
 8008f2e:	4603      	mov	r3, r0
 8008f30:	60a3      	str	r3, [r4, #8]
    params->activation =
        ConvertActivation(schema_params->fused_activation_function());
 8008f32:	69f8      	ldr	r0, [r7, #28]
 8008f34:	f7ff fca5 	bl	8008882 <_ZNK6tflite13Conv2DOptions25fused_activation_functionEv>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	461d      	mov	r5, r3
    params->activation =
 8008f3c:	f107 0310 	add.w	r3, r7, #16
 8008f40:	4618      	mov	r0, r3
 8008f42:	f000 fbc4 	bl	80096ce <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8008f46:	4604      	mov	r4, r0
        ConvertActivation(schema_params->fused_activation_function());
 8008f48:	4628      	mov	r0, r5
 8008f4a:	f7ff fec1 	bl	8008cd0 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>
 8008f4e:	4603      	mov	r3, r0
    params->activation =
 8008f50:	7323      	strb	r3, [r4, #12]

    params->dilation_width_factor = schema_params->dilation_w_factor();
 8008f52:	f107 0310 	add.w	r3, r7, #16
 8008f56:	4618      	mov	r0, r3
 8008f58:	f000 fbb9 	bl	80096ce <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8008f5c:	4604      	mov	r4, r0
 8008f5e:	69f8      	ldr	r0, [r7, #28]
 8008f60:	f7ff fc9f 	bl	80088a2 <_ZNK6tflite13Conv2DOptions17dilation_w_factorEv>
 8008f64:	4603      	mov	r3, r0
 8008f66:	6123      	str	r3, [r4, #16]
    params->dilation_height_factor = schema_params->dilation_h_factor();
 8008f68:	f107 0310 	add.w	r3, r7, #16
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	f000 fbae 	bl	80096ce <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8008f72:	4604      	mov	r4, r0
 8008f74:	69f8      	ldr	r0, [r7, #28]
 8008f76:	f7ff fca3 	bl	80088c0 <_ZNK6tflite13Conv2DOptions17dilation_h_factorEv>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	6163      	str	r3, [r4, #20]
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 8008f7e:	f107 0310 	add.w	r3, r7, #16
 8008f82:	4618      	mov	r0, r3
 8008f84:	f000 fbaf 	bl	80096e6 <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 8008f88:	4602      	mov	r2, r0
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8008f8e:	2400      	movs	r4, #0
      params = safe_allocator.Allocate<TfLiteConvParams>();
 8008f90:	f107 0310 	add.w	r3, r7, #16
 8008f94:	4618      	mov	r0, r3
 8008f96:	f000 fb6b 	bl	8009670 <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 8008f9a:	4623      	mov	r3, r4
}
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	3720      	adds	r7, #32
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bdb0      	pop	{r4, r5, r7, pc}
 8008fa4:	08026dfc 	.word	0x08026dfc
 8008fa8:	08026d9c 	.word	0x08026d9c
 8008fac:	08026de4 	.word	0x08026de4

08008fb0 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
}

TfLiteStatus ParseDepthwiseConv2D(const Operator* op,
                                  ErrorReporter* error_reporter,
                                  BuiltinDataAllocator* allocator,
                                  void** builtin_data) {
 8008fb0:	b5b0      	push	{r4, r5, r7, lr}
 8008fb2:	b08a      	sub	sp, #40	; 0x28
 8008fb4:	af02      	add	r7, sp, #8
 8008fb6:	60f8      	str	r0, [r7, #12]
 8008fb8:	60b9      	str	r1, [r7, #8]
 8008fba:	607a      	str	r2, [r7, #4]
 8008fbc:	603b      	str	r3, [r7, #0]
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	687a      	ldr	r2, [r7, #4]
 8008fc2:	68b9      	ldr	r1, [r7, #8]
 8008fc4:	68f8      	ldr	r0, [r7, #12]
 8008fc6:	f7ff fe25 	bl	8008c14 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>

  SafeBuiltinDataAllocator safe_allocator(allocator);
 8008fca:	f107 0318 	add.w	r3, r7, #24
 8008fce:	6879      	ldr	r1, [r7, #4]
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	f7ff fe10 	bl	8008bf6 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>

  std::unique_ptr<TfLiteDepthwiseConvParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteDepthwiseConvParams>();
 8008fd6:	f107 0310 	add.w	r3, r7, #16
 8008fda:	f107 0218 	add.w	r2, r7, #24
 8008fde:	4611      	mov	r1, r2
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	f000 fb94 	bl	800970e <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI25TfLiteDepthwiseConvParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 8008fe6:	f107 0310 	add.w	r3, r7, #16
 8008fea:	2100      	movs	r1, #0
 8008fec:	4618      	mov	r0, r3
 8008fee:	f000 fbce 	bl	800978e <_ZStneI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	f083 0301 	eor.w	r3, r3, #1
 8008ff8:	b2db      	uxtb	r3, r3
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d00c      	beq.n	8009018 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>
 8008ffe:	4b3f      	ldr	r3, [pc, #252]	; (80090fc <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x14c>)
 8009000:	9301      	str	r3, [sp, #4]
 8009002:	f240 438f 	movw	r3, #1167	; 0x48f
 8009006:	9300      	str	r3, [sp, #0]
 8009008:	4b3d      	ldr	r3, [pc, #244]	; (8009100 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x150>)
 800900a:	4a3e      	ldr	r2, [pc, #248]	; (8009104 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x154>)
 800900c:	68b9      	ldr	r1, [r7, #8]
 800900e:	68b8      	ldr	r0, [r7, #8]
 8009010:	f7ff fbb3 	bl	800877a <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 8009014:	2401      	movs	r4, #1
 8009016:	e066      	b.n	80090e6 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x136>

  const DepthwiseConv2DOptions* schema_params =
      op->builtin_options_as_DepthwiseConv2DOptions();
 8009018:	68f8      	ldr	r0, [r7, #12]
 800901a:	f7ff fd7a 	bl	8008b12 <_ZNK6tflite8Operator41builtin_options_as_DepthwiseConv2DOptionsEv>
 800901e:	61f8      	str	r0, [r7, #28]

  if (schema_params != nullptr) {
 8009020:	69fb      	ldr	r3, [r7, #28]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d056      	beq.n	80090d4 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x124>
    params->padding = ConvertPadding(schema_params->padding());
 8009026:	69f8      	ldr	r0, [r7, #28]
 8009028:	f7ff fcb5 	bl	8008996 <_ZNK6tflite22DepthwiseConv2DOptions7paddingEv>
 800902c:	4603      	mov	r3, r0
 800902e:	461d      	mov	r5, r3
 8009030:	f107 0310 	add.w	r3, r7, #16
 8009034:	4618      	mov	r0, r3
 8009036:	f000 fbb7 	bl	80097a8 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800903a:	4604      	mov	r4, r0
 800903c:	4628      	mov	r0, r5
 800903e:	f7ff fe73 	bl	8008d28 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>
 8009042:	4603      	mov	r3, r0
 8009044:	7023      	strb	r3, [r4, #0]
    params->stride_width = schema_params->stride_w();
 8009046:	f107 0310 	add.w	r3, r7, #16
 800904a:	4618      	mov	r0, r3
 800904c:	f000 fbac 	bl	80097a8 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8009050:	4604      	mov	r4, r0
 8009052:	69f8      	ldr	r0, [r7, #28]
 8009054:	f7ff fcaf 	bl	80089b6 <_ZNK6tflite22DepthwiseConv2DOptions8stride_wEv>
 8009058:	4603      	mov	r3, r0
 800905a:	6063      	str	r3, [r4, #4]
    params->stride_height = schema_params->stride_h();
 800905c:	f107 0310 	add.w	r3, r7, #16
 8009060:	4618      	mov	r0, r3
 8009062:	f000 fba1 	bl	80097a8 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8009066:	4604      	mov	r4, r0
 8009068:	69f8      	ldr	r0, [r7, #28]
 800906a:	f7ff fcb3 	bl	80089d4 <_ZNK6tflite22DepthwiseConv2DOptions8stride_hEv>
 800906e:	4603      	mov	r3, r0
 8009070:	60a3      	str	r3, [r4, #8]
    params->depth_multiplier = schema_params->depth_multiplier();
 8009072:	f107 0310 	add.w	r3, r7, #16
 8009076:	4618      	mov	r0, r3
 8009078:	f000 fb96 	bl	80097a8 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800907c:	4604      	mov	r4, r0
 800907e:	69f8      	ldr	r0, [r7, #28]
 8009080:	f7ff fcb7 	bl	80089f2 <_ZNK6tflite22DepthwiseConv2DOptions16depth_multiplierEv>
 8009084:	4603      	mov	r3, r0
 8009086:	60e3      	str	r3, [r4, #12]
    params->activation =
        ConvertActivation(schema_params->fused_activation_function());
 8009088:	69f8      	ldr	r0, [r7, #28]
 800908a:	f7ff fcc1 	bl	8008a10 <_ZNK6tflite22DepthwiseConv2DOptions25fused_activation_functionEv>
 800908e:	4603      	mov	r3, r0
 8009090:	461d      	mov	r5, r3
    params->activation =
 8009092:	f107 0310 	add.w	r3, r7, #16
 8009096:	4618      	mov	r0, r3
 8009098:	f000 fb86 	bl	80097a8 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800909c:	4604      	mov	r4, r0
        ConvertActivation(schema_params->fused_activation_function());
 800909e:	4628      	mov	r0, r5
 80090a0:	f7ff fe16 	bl	8008cd0 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>
 80090a4:	4603      	mov	r3, r0
    params->activation =
 80090a6:	7423      	strb	r3, [r4, #16]

    params->dilation_width_factor = schema_params->dilation_w_factor();
 80090a8:	f107 0310 	add.w	r3, r7, #16
 80090ac:	4618      	mov	r0, r3
 80090ae:	f000 fb7b 	bl	80097a8 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80090b2:	4604      	mov	r4, r0
 80090b4:	69f8      	ldr	r0, [r7, #28]
 80090b6:	f7ff fcbb 	bl	8008a30 <_ZNK6tflite22DepthwiseConv2DOptions17dilation_w_factorEv>
 80090ba:	4603      	mov	r3, r0
 80090bc:	6163      	str	r3, [r4, #20]
    params->dilation_height_factor = schema_params->dilation_h_factor();
 80090be:	f107 0310 	add.w	r3, r7, #16
 80090c2:	4618      	mov	r0, r3
 80090c4:	f000 fb70 	bl	80097a8 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80090c8:	4604      	mov	r4, r0
 80090ca:	69f8      	ldr	r0, [r7, #28]
 80090cc:	f7ff fcbf 	bl	8008a4e <_ZNK6tflite22DepthwiseConv2DOptions17dilation_h_factorEv>
 80090d0:	4603      	mov	r3, r0
 80090d2:	61a3      	str	r3, [r4, #24]
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 80090d4:	f107 0310 	add.w	r3, r7, #16
 80090d8:	4618      	mov	r0, r3
 80090da:	f000 fb71 	bl	80097c0 <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 80090de:	4602      	mov	r2, r0
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 80090e4:	2400      	movs	r4, #0
      params = safe_allocator.Allocate<TfLiteDepthwiseConvParams>();
 80090e6:	f107 0310 	add.w	r3, r7, #16
 80090ea:	4618      	mov	r0, r3
 80090ec:	f000 fb2d 	bl	800974a <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 80090f0:	4623      	mov	r3, r4
}
 80090f2:	4618      	mov	r0, r3
 80090f4:	3720      	adds	r7, #32
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bdb0      	pop	{r4, r5, r7, pc}
 80090fa:	bf00      	nop
 80090fc:	08026dfc 	.word	0x08026dfc
 8009100:	08026d9c 	.word	0x08026d9c
 8009104:	08026de4 	.word	0x08026de4

08009108 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                        void**) {
  return kTfLiteOk;
}

TfLiteStatus ParsePool(const Operator* op, ErrorReporter* error_reporter,
                       BuiltinDataAllocator* allocator, void** builtin_data) {
 8009108:	b5b0      	push	{r4, r5, r7, lr}
 800910a:	b08a      	sub	sp, #40	; 0x28
 800910c:	af02      	add	r7, sp, #8
 800910e:	60f8      	str	r0, [r7, #12]
 8009110:	60b9      	str	r1, [r7, #8]
 8009112:	607a      	str	r2, [r7, #4]
 8009114:	603b      	str	r3, [r7, #0]
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	687a      	ldr	r2, [r7, #4]
 800911a:	68b9      	ldr	r1, [r7, #8]
 800911c:	68f8      	ldr	r0, [r7, #12]
 800911e:	f7ff fd79 	bl	8008c14 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>

  SafeBuiltinDataAllocator safe_allocator(allocator);
 8009122:	f107 0318 	add.w	r3, r7, #24
 8009126:	6879      	ldr	r1, [r7, #4]
 8009128:	4618      	mov	r0, r3
 800912a:	f7ff fd64 	bl	8008bf6 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>
  std::unique_ptr<TfLitePoolParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLitePoolParams>();
 800912e:	f107 0310 	add.w	r3, r7, #16
 8009132:	f107 0218 	add.w	r2, r7, #24
 8009136:	4611      	mov	r1, r2
 8009138:	4618      	mov	r0, r3
 800913a:	f000 fb55 	bl	80097e8 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI16TfLitePoolParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 800913e:	f107 0310 	add.w	r3, r7, #16
 8009142:	2100      	movs	r1, #0
 8009144:	4618      	mov	r0, r3
 8009146:	f000 fb8f 	bl	8009868 <_ZStneI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 800914a:	4603      	mov	r3, r0
 800914c:	f083 0301 	eor.w	r3, r3, #1
 8009150:	b2db      	uxtb	r3, r3
 8009152:	2b00      	cmp	r3, #0
 8009154:	d00c      	beq.n	8009170 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>
 8009156:	4b39      	ldr	r3, [pc, #228]	; (800923c <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x134>)
 8009158:	9301      	str	r3, [sp, #4]
 800915a:	f240 634e 	movw	r3, #1614	; 0x64e
 800915e:	9300      	str	r3, [sp, #0]
 8009160:	4b37      	ldr	r3, [pc, #220]	; (8009240 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x138>)
 8009162:	4a38      	ldr	r2, [pc, #224]	; (8009244 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x13c>)
 8009164:	68b9      	ldr	r1, [r7, #8]
 8009166:	68b8      	ldr	r0, [r7, #8]
 8009168:	f7ff fb07 	bl	800877a <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 800916c:	2401      	movs	r4, #1
 800916e:	e05b      	b.n	8009228 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x120>

  const Pool2DOptions* schema_params = op->builtin_options_as_Pool2DOptions();
 8009170:	68f8      	ldr	r0, [r7, #12]
 8009172:	f7ff fce2 	bl	8008b3a <_ZNK6tflite8Operator32builtin_options_as_Pool2DOptionsEv>
 8009176:	61f8      	str	r0, [r7, #28]

  if (schema_params != nullptr) {
 8009178:	69fb      	ldr	r3, [r7, #28]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d04b      	beq.n	8009216 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x10e>
    params->padding = ConvertPadding(schema_params->padding());
 800917e:	69f8      	ldr	r0, [r7, #28]
 8009180:	f7ff fbad 	bl	80088de <_ZNK6tflite13Pool2DOptions7paddingEv>
 8009184:	4603      	mov	r3, r0
 8009186:	461d      	mov	r5, r3
 8009188:	f107 0310 	add.w	r3, r7, #16
 800918c:	4618      	mov	r0, r3
 800918e:	f000 fb78 	bl	8009882 <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8009192:	4604      	mov	r4, r0
 8009194:	4628      	mov	r0, r5
 8009196:	f7ff fdc7 	bl	8008d28 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>
 800919a:	4603      	mov	r3, r0
 800919c:	7023      	strb	r3, [r4, #0]
    params->stride_width = schema_params->stride_w();
 800919e:	f107 0310 	add.w	r3, r7, #16
 80091a2:	4618      	mov	r0, r3
 80091a4:	f000 fb6d 	bl	8009882 <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80091a8:	4604      	mov	r4, r0
 80091aa:	69f8      	ldr	r0, [r7, #28]
 80091ac:	f7ff fba7 	bl	80088fe <_ZNK6tflite13Pool2DOptions8stride_wEv>
 80091b0:	4603      	mov	r3, r0
 80091b2:	6063      	str	r3, [r4, #4]
    params->stride_height = schema_params->stride_h();
 80091b4:	f107 0310 	add.w	r3, r7, #16
 80091b8:	4618      	mov	r0, r3
 80091ba:	f000 fb62 	bl	8009882 <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80091be:	4604      	mov	r4, r0
 80091c0:	69f8      	ldr	r0, [r7, #28]
 80091c2:	f7ff fbab 	bl	800891c <_ZNK6tflite13Pool2DOptions8stride_hEv>
 80091c6:	4603      	mov	r3, r0
 80091c8:	60a3      	str	r3, [r4, #8]
    params->filter_width = schema_params->filter_width();
 80091ca:	f107 0310 	add.w	r3, r7, #16
 80091ce:	4618      	mov	r0, r3
 80091d0:	f000 fb57 	bl	8009882 <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80091d4:	4604      	mov	r4, r0
 80091d6:	69f8      	ldr	r0, [r7, #28]
 80091d8:	f7ff fbaf 	bl	800893a <_ZNK6tflite13Pool2DOptions12filter_widthEv>
 80091dc:	4603      	mov	r3, r0
 80091de:	60e3      	str	r3, [r4, #12]
    params->filter_height = schema_params->filter_height();
 80091e0:	f107 0310 	add.w	r3, r7, #16
 80091e4:	4618      	mov	r0, r3
 80091e6:	f000 fb4c 	bl	8009882 <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80091ea:	4604      	mov	r4, r0
 80091ec:	69f8      	ldr	r0, [r7, #28]
 80091ee:	f7ff fbb3 	bl	8008958 <_ZNK6tflite13Pool2DOptions13filter_heightEv>
 80091f2:	4603      	mov	r3, r0
 80091f4:	6123      	str	r3, [r4, #16]
    params->activation =
        ConvertActivation(schema_params->fused_activation_function());
 80091f6:	69f8      	ldr	r0, [r7, #28]
 80091f8:	f7ff fbbd 	bl	8008976 <_ZNK6tflite13Pool2DOptions25fused_activation_functionEv>
 80091fc:	4603      	mov	r3, r0
 80091fe:	461d      	mov	r5, r3
    params->activation =
 8009200:	f107 0310 	add.w	r3, r7, #16
 8009204:	4618      	mov	r0, r3
 8009206:	f000 fb3c 	bl	8009882 <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800920a:	4604      	mov	r4, r0
        ConvertActivation(schema_params->fused_activation_function());
 800920c:	4628      	mov	r0, r5
 800920e:	f7ff fd5f 	bl	8008cd0 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>
 8009212:	4603      	mov	r3, r0
    params->activation =
 8009214:	7523      	strb	r3, [r4, #20]
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 8009216:	f107 0310 	add.w	r3, r7, #16
 800921a:	4618      	mov	r0, r3
 800921c:	f000 fb3d 	bl	800989a <_ZNSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 8009220:	4602      	mov	r2, r0
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8009226:	2400      	movs	r4, #0
      params = safe_allocator.Allocate<TfLitePoolParams>();
 8009228:	f107 0310 	add.w	r3, r7, #16
 800922c:	4618      	mov	r0, r3
 800922e:	f000 faf9 	bl	8009824 <_ZNSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 8009232:	4623      	mov	r3, r4
}
 8009234:	4618      	mov	r0, r3
 8009236:	3720      	adds	r7, #32
 8009238:	46bd      	mov	sp, r7
 800923a:	bdb0      	pop	{r4, r5, r7, pc}
 800923c:	08026dfc 	.word	0x08026dfc
 8009240:	08026d9c 	.word	0x08026d9c
 8009244:	08026de4 	.word	0x08026de4

08009248 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
  return kTfLiteOk;
}

TfLiteStatus ParseReshape(const Operator* op, ErrorReporter* error_reporter,
                          BuiltinDataAllocator* allocator,
                          void** builtin_data) {
 8009248:	b590      	push	{r4, r7, lr}
 800924a:	b08d      	sub	sp, #52	; 0x34
 800924c:	af02      	add	r7, sp, #8
 800924e:	60f8      	str	r0, [r7, #12]
 8009250:	60b9      	str	r1, [r7, #8]
 8009252:	607a      	str	r2, [r7, #4]
 8009254:	603b      	str	r3, [r7, #0]
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	687a      	ldr	r2, [r7, #4]
 800925a:	68b9      	ldr	r1, [r7, #8]
 800925c:	68f8      	ldr	r0, [r7, #12]
 800925e:	f7ff fcd9 	bl	8008c14 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>

  SafeBuiltinDataAllocator safe_allocator(allocator);
 8009262:	f107 0318 	add.w	r3, r7, #24
 8009266:	6879      	ldr	r1, [r7, #4]
 8009268:	4618      	mov	r0, r3
 800926a:	f7ff fcc4 	bl	8008bf6 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>

  std::unique_ptr<TfLiteReshapeParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteReshapeParams>();
 800926e:	f107 0310 	add.w	r3, r7, #16
 8009272:	f107 0218 	add.w	r2, r7, #24
 8009276:	4611      	mov	r1, r2
 8009278:	4618      	mov	r0, r3
 800927a:	f000 fb22 	bl	80098c2 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI19TfLiteReshapeParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 800927e:	f107 0310 	add.w	r3, r7, #16
 8009282:	2100      	movs	r1, #0
 8009284:	4618      	mov	r0, r3
 8009286:	f000 fb5c 	bl	8009942 <_ZStneI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 800928a:	4603      	mov	r3, r0
 800928c:	f083 0301 	eor.w	r3, r3, #1
 8009290:	b2db      	uxtb	r3, r3
 8009292:	2b00      	cmp	r3, #0
 8009294:	d00c      	beq.n	80092b0 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>
 8009296:	4b27      	ldr	r3, [pc, #156]	; (8009334 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xec>)
 8009298:	9301      	str	r3, [sp, #4]
 800929a:	f44f 63d6 	mov.w	r3, #1712	; 0x6b0
 800929e:	9300      	str	r3, [sp, #0]
 80092a0:	4b25      	ldr	r3, [pc, #148]	; (8009338 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf0>)
 80092a2:	4a26      	ldr	r2, [pc, #152]	; (800933c <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf4>)
 80092a4:	68b9      	ldr	r1, [r7, #8]
 80092a6:	68b8      	ldr	r0, [r7, #8]
 80092a8:	f7ff fa67 	bl	800877a <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 80092ac:	2401      	movs	r4, #1
 80092ae:	e037      	b.n	8009320 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd8>

  const ReshapeOptions* schema_params = op->builtin_options_as_ReshapeOptions();
 80092b0:	68f8      	ldr	r0, [r7, #12]
 80092b2:	f7ff fc6a 	bl	8008b8a <_ZNK6tflite8Operator33builtin_options_as_ReshapeOptionsEv>
 80092b6:	6278      	str	r0, [r7, #36]	; 0x24

  if (schema_params != nullptr) {
 80092b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d027      	beq.n	800930e <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc6>
    const flatbuffers::Vector<int32_t>* new_shape = schema_params->new_shape();
 80092be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80092c0:	f7ff fbe8 	bl	8008a94 <_ZNK6tflite14ReshapeOptions9new_shapeEv>
 80092c4:	6238      	str	r0, [r7, #32]
    if (new_shape != nullptr) {
 80092c6:	6a3b      	ldr	r3, [r7, #32]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d020      	beq.n	800930e <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc6>
      TF_LITE_ENSURE_STATUS(
 80092cc:	f107 0310 	add.w	r3, r7, #16
 80092d0:	4618      	mov	r0, r3
 80092d2:	f000 fb43 	bl	800995c <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80092d6:	4603      	mov	r3, r0
 80092d8:	461a      	mov	r2, r3
 80092da:	4b19      	ldr	r3, [pc, #100]	; (8009340 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf8>)
 80092dc:	9300      	str	r3, [sp, #0]
 80092de:	68bb      	ldr	r3, [r7, #8]
 80092e0:	6a39      	ldr	r1, [r7, #32]
 80092e2:	2020      	movs	r0, #32
 80092e4:	f7ff fcb6 	bl	8008c54 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc>
 80092e8:	4603      	mov	r3, r0
 80092ea:	77fb      	strb	r3, [r7, #31]
 80092ec:	7ffb      	ldrb	r3, [r7, #31]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d001      	beq.n	80092f6 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xae>
 80092f2:	7ffc      	ldrb	r4, [r7, #31]
 80092f4:	e014      	b.n	8009320 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd8>
          FlatBufferIntVectorToArray(sizeof(params->shape), new_shape,
                                     params->shape, error_reporter, "reshape"));
      params->num_dimensions = new_shape->size();
 80092f6:	6a38      	ldr	r0, [r7, #32]
 80092f8:	f000 f968 	bl	80095cc <_ZNK11flatbuffers6VectorIlE4sizeEv>
 80092fc:	4604      	mov	r4, r0
 80092fe:	f107 0310 	add.w	r3, r7, #16
 8009302:	4618      	mov	r0, r3
 8009304:	f000 fb2a 	bl	800995c <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8009308:	4603      	mov	r3, r0
 800930a:	4622      	mov	r2, r4
 800930c:	621a      	str	r2, [r3, #32]
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 800930e:	f107 0310 	add.w	r3, r7, #16
 8009312:	4618      	mov	r0, r3
 8009314:	f000 fb2e 	bl	8009974 <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 8009318:	4602      	mov	r2, r0
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800931e:	2400      	movs	r4, #0
      params = safe_allocator.Allocate<TfLiteReshapeParams>();
 8009320:	f107 0310 	add.w	r3, r7, #16
 8009324:	4618      	mov	r0, r3
 8009326:	f000 faea 	bl	80098fe <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 800932a:	4623      	mov	r3, r4
}
 800932c:	4618      	mov	r0, r3
 800932e:	372c      	adds	r7, #44	; 0x2c
 8009330:	46bd      	mov	sp, r7
 8009332:	bd90      	pop	{r4, r7, pc}
 8009334:	08026dfc 	.word	0x08026dfc
 8009338:	08026d9c 	.word	0x08026d9c
 800933c:	08026de4 	.word	0x08026de4
 8009340:	08026ecc 	.word	0x08026ecc

08009344 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
  return kTfLiteOk;
}

TfLiteStatus ParseSoftmax(const Operator* op, ErrorReporter* error_reporter,
                          BuiltinDataAllocator* allocator,
                          void** builtin_data) {
 8009344:	b590      	push	{r4, r7, lr}
 8009346:	b08b      	sub	sp, #44	; 0x2c
 8009348:	af02      	add	r7, sp, #8
 800934a:	60f8      	str	r0, [r7, #12]
 800934c:	60b9      	str	r1, [r7, #8]
 800934e:	607a      	str	r2, [r7, #4]
 8009350:	603b      	str	r3, [r7, #0]
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	687a      	ldr	r2, [r7, #4]
 8009356:	68b9      	ldr	r1, [r7, #8]
 8009358:	68f8      	ldr	r0, [r7, #12]
 800935a:	f7ff fc5b 	bl	8008c14 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>

  SafeBuiltinDataAllocator safe_allocator(allocator);
 800935e:	f107 0318 	add.w	r3, r7, #24
 8009362:	6879      	ldr	r1, [r7, #4]
 8009364:	4618      	mov	r0, r3
 8009366:	f7ff fc46 	bl	8008bf6 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>
  std::unique_ptr<TfLiteSoftmaxParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteSoftmaxParams>();
 800936a:	f107 0310 	add.w	r3, r7, #16
 800936e:	f107 0218 	add.w	r2, r7, #24
 8009372:	4611      	mov	r1, r2
 8009374:	4618      	mov	r0, r3
 8009376:	f000 fb11 	bl	800999c <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI19TfLiteSoftmaxParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 800937a:	f107 0310 	add.w	r3, r7, #16
 800937e:	2100      	movs	r1, #0
 8009380:	4618      	mov	r0, r3
 8009382:	f000 fb4b 	bl	8009a1c <_ZStneI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 8009386:	4603      	mov	r3, r0
 8009388:	f083 0301 	eor.w	r3, r3, #1
 800938c:	b2db      	uxtb	r3, r3
 800938e:	2b00      	cmp	r3, #0
 8009390:	d00c      	beq.n	80093ac <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>
 8009392:	4b1a      	ldr	r3, [pc, #104]	; (80093fc <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb8>)
 8009394:	9301      	str	r3, [sp, #4]
 8009396:	f240 7339 	movw	r3, #1849	; 0x739
 800939a:	9300      	str	r3, [sp, #0]
 800939c:	4b18      	ldr	r3, [pc, #96]	; (8009400 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xbc>)
 800939e:	4a19      	ldr	r2, [pc, #100]	; (8009404 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc0>)
 80093a0:	68b9      	ldr	r1, [r7, #8]
 80093a2:	68b8      	ldr	r0, [r7, #8]
 80093a4:	f7ff f9e9 	bl	800877a <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 80093a8:	2401      	movs	r4, #1
 80093aa:	e01c      	b.n	80093e6 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa2>

  const SoftmaxOptions* schema_params = op->builtin_options_as_SoftmaxOptions();
 80093ac:	68f8      	ldr	r0, [r7, #12]
 80093ae:	f7ff fbd8 	bl	8008b62 <_ZNK6tflite8Operator33builtin_options_as_SoftmaxOptionsEv>
 80093b2:	61f8      	str	r0, [r7, #28]

  if (schema_params != nullptr) {
 80093b4:	69fb      	ldr	r3, [r7, #28]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d00c      	beq.n	80093d4 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x90>
    params->beta = schema_params->beta();
 80093ba:	f107 0310 	add.w	r3, r7, #16
 80093be:	4618      	mov	r0, r3
 80093c0:	f000 fb39 	bl	8009a36 <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80093c4:	4604      	mov	r4, r0
 80093c6:	69f8      	ldr	r0, [r7, #28]
 80093c8:	f7ff fb50 	bl	8008a6c <_ZNK6tflite14SoftmaxOptions4betaEv>
 80093cc:	eef0 7a40 	vmov.f32	s15, s0
 80093d0:	edc4 7a00 	vstr	s15, [r4]
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 80093d4:	f107 0310 	add.w	r3, r7, #16
 80093d8:	4618      	mov	r0, r3
 80093da:	f000 fb38 	bl	8009a4e <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 80093de:	4602      	mov	r2, r0
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 80093e4:	2400      	movs	r4, #0
      params = safe_allocator.Allocate<TfLiteSoftmaxParams>();
 80093e6:	f107 0310 	add.w	r3, r7, #16
 80093ea:	4618      	mov	r0, r3
 80093ec:	f000 faf4 	bl	80099d8 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 80093f0:	4623      	mov	r3, r4
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	3724      	adds	r7, #36	; 0x24
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd90      	pop	{r4, r7, pc}
 80093fa:	bf00      	nop
 80093fc:	08026dfc 	.word	0x08026dfc
 8009400:	08026d9c 	.word	0x08026d9c
 8009404:	08026de4 	.word	0x08026de4

08009408 <_ZN11flatbuffers12EndianScalarImEET_S1_>:
#if defined(_MSC_VER)
  #pragma warning(pop)
#endif


template<typename T> T EndianScalar(T t) {
 8009408:	b480      	push	{r7}
 800940a:	b083      	sub	sp, #12
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
  #if FLATBUFFERS_LITTLEENDIAN
    return t;
 8009410:	687b      	ldr	r3, [r7, #4]
  #else
    return EndianSwap(t);
  #endif
}
 8009412:	4618      	mov	r0, r3
 8009414:	370c      	adds	r7, #12
 8009416:	46bd      	mov	sp, r7
 8009418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941c:	4770      	bx	lr

0800941e <_ZN11flatbuffers10ReadScalarItEET_PKv>:

template<typename T>
// UBSAN: C++ aliasing type rules, see std::bit_cast<> for details.
__supress_ubsan__("alignment")
T ReadScalar(const void *p) {
 800941e:	b580      	push	{r7, lr}
 8009420:	b082      	sub	sp, #8
 8009422:	af00      	add	r7, sp, #0
 8009424:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	881b      	ldrh	r3, [r3, #0]
 800942a:	4618      	mov	r0, r3
 800942c:	f000 fb2e 	bl	8009a8c <_ZN11flatbuffers12EndianScalarItEET_S1_>
 8009430:	4603      	mov	r3, r0
}
 8009432:	4618      	mov	r0, r3
 8009434:	3708      	adds	r7, #8
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}

0800943a <_ZN11flatbuffers10ReadScalarImEET_PKv>:
T ReadScalar(const void *p) {
 800943a:	b580      	push	{r7, lr}
 800943c:	b082      	sub	sp, #8
 800943e:	af00      	add	r7, sp, #0
 8009440:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	4618      	mov	r0, r3
 8009448:	f7ff ffde 	bl	8009408 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800944c:	4603      	mov	r3, r0
}
 800944e:	4618      	mov	r0, r3
 8009450:	3708      	adds	r7, #8
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}

08009456 <_ZN11flatbuffers10ReadScalarIlEET_PKv>:
T ReadScalar(const void *p) {
 8009456:	b580      	push	{r7, lr}
 8009458:	b082      	sub	sp, #8
 800945a:	af00      	add	r7, sp, #0
 800945c:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	4618      	mov	r0, r3
 8009464:	f000 fb07 	bl	8009a76 <_ZN11flatbuffers12EndianScalarIlEET_S1_>
 8009468:	4603      	mov	r3, r0
}
 800946a:	4618      	mov	r0, r3
 800946c:	3708      	adds	r7, #8
 800946e:	46bd      	mov	sp, r7
 8009470:	bd80      	pop	{r7, pc}

08009472 <_ZN11flatbuffers10ReadScalarIhEET_PKv>:
T ReadScalar(const void *p) {
 8009472:	b580      	push	{r7, lr}
 8009474:	b082      	sub	sp, #8
 8009476:	af00      	add	r7, sp, #0
 8009478:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	781b      	ldrb	r3, [r3, #0]
 800947e:	4618      	mov	r0, r3
 8009480:	f000 fb10 	bl	8009aa4 <_ZN11flatbuffers12EndianScalarIhEET_S1_>
 8009484:	4603      	mov	r3, r0
}
 8009486:	4618      	mov	r0, r3
 8009488:	3708      	adds	r7, #8
 800948a:	46bd      	mov	sp, r7
 800948c:	bd80      	pop	{r7, pc}

0800948e <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>:

  template<typename T> T GetField(voffset_t field, T defaultval) const {
 800948e:	b580      	push	{r7, lr}
 8009490:	b084      	sub	sp, #16
 8009492:	af00      	add	r7, sp, #0
 8009494:	6078      	str	r0, [r7, #4]
 8009496:	460b      	mov	r3, r1
 8009498:	807b      	strh	r3, [r7, #2]
 800949a:	4613      	mov	r3, r2
 800949c:	707b      	strb	r3, [r7, #1]
    auto field_offset = GetOptionalFieldOffset(field);
 800949e:	887b      	ldrh	r3, [r7, #2]
 80094a0:	4619      	mov	r1, r3
 80094a2:	6878      	ldr	r0, [r7, #4]
 80094a4:	f7ff f99f 	bl	80087e6 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 80094a8:	4603      	mov	r3, r0
 80094aa:	81fb      	strh	r3, [r7, #14]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 80094ac:	89fb      	ldrh	r3, [r7, #14]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d007      	beq.n	80094c2 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_+0x34>
 80094b2:	687a      	ldr	r2, [r7, #4]
 80094b4:	89fb      	ldrh	r3, [r7, #14]
 80094b6:	4413      	add	r3, r2
 80094b8:	4618      	mov	r0, r3
 80094ba:	f7ff ffda 	bl	8009472 <_ZN11flatbuffers10ReadScalarIhEET_PKv>
 80094be:	4603      	mov	r3, r0
 80094c0:	e000      	b.n	80094c4 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_+0x36>
 80094c2:	787b      	ldrb	r3, [r7, #1]
  }
 80094c4:	4618      	mov	r0, r3
 80094c6:	3710      	adds	r7, #16
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}

080094cc <_ZNK11flatbuffers5Table10GetPointerIPKvEET_t>:
    auto field_offset = GetOptionalFieldOffset(field);
    auto p = data_ + field_offset;
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
                        : nullptr;
  }
  template<typename P> P GetPointer(voffset_t field) const {
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b082      	sub	sp, #8
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
 80094d4:	460b      	mov	r3, r1
 80094d6:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 80094d8:	887b      	ldrh	r3, [r7, #2]
 80094da:	4619      	mov	r1, r3
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f000 faed 	bl	8009abc <_ZN11flatbuffers5Table10GetPointerIPKvEET_t>
 80094e2:	4603      	mov	r3, r0
  }
 80094e4:	4618      	mov	r0, r3
 80094e6:	3708      	adds	r7, #8
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bd80      	pop	{r7, pc}

080094ec <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b086      	sub	sp, #24
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	60f8      	str	r0, [r7, #12]
 80094f4:	460b      	mov	r3, r1
 80094f6:	607a      	str	r2, [r7, #4]
 80094f8:	817b      	strh	r3, [r7, #10]
    auto field_offset = GetOptionalFieldOffset(field);
 80094fa:	897b      	ldrh	r3, [r7, #10]
 80094fc:	4619      	mov	r1, r3
 80094fe:	68f8      	ldr	r0, [r7, #12]
 8009500:	f7ff f971 	bl	80087e6 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8009504:	4603      	mov	r3, r0
 8009506:	82fb      	strh	r3, [r7, #22]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8009508:	8afb      	ldrh	r3, [r7, #22]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d007      	beq.n	800951e <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_+0x32>
 800950e:	68fa      	ldr	r2, [r7, #12]
 8009510:	8afb      	ldrh	r3, [r7, #22]
 8009512:	4413      	add	r3, r2
 8009514:	4618      	mov	r0, r3
 8009516:	f7ff ff9e 	bl	8009456 <_ZN11flatbuffers10ReadScalarIlEET_PKv>
 800951a:	4603      	mov	r3, r0
 800951c:	e000      	b.n	8009520 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_+0x34>
 800951e:	687b      	ldr	r3, [r7, #4]
  }
 8009520:	4618      	mov	r0, r3
 8009522:	3718      	adds	r7, #24
 8009524:	46bd      	mov	sp, r7
 8009526:	bd80      	pop	{r7, pc}

08009528 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8009528:	b580      	push	{r7, lr}
 800952a:	b082      	sub	sp, #8
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
 8009530:	460b      	mov	r3, r1
 8009532:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8009534:	887b      	ldrh	r3, [r7, #2]
 8009536:	4619      	mov	r1, r3
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f000 fadf 	bl	8009afc <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 800953e:	4603      	mov	r3, r0
  }
 8009540:	4618      	mov	r0, r3
 8009542:	3708      	adds	r7, #8
 8009544:	46bd      	mov	sp, r7
 8009546:	bd80      	pop	{r7, pc}

08009548 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 8009548:	b580      	push	{r7, lr}
 800954a:	b084      	sub	sp, #16
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
 8009550:	460b      	mov	r3, r1
 8009552:	807b      	strh	r3, [r7, #2]
 8009554:	4613      	mov	r3, r2
 8009556:	707b      	strb	r3, [r7, #1]
    auto field_offset = GetOptionalFieldOffset(field);
 8009558:	887b      	ldrh	r3, [r7, #2]
 800955a:	4619      	mov	r1, r3
 800955c:	6878      	ldr	r0, [r7, #4]
 800955e:	f7ff f942 	bl	80087e6 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8009562:	4603      	mov	r3, r0
 8009564:	81fb      	strh	r3, [r7, #14]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8009566:	89fb      	ldrh	r3, [r7, #14]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d007      	beq.n	800957c <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_+0x34>
 800956c:	687a      	ldr	r2, [r7, #4]
 800956e:	89fb      	ldrh	r3, [r7, #14]
 8009570:	4413      	add	r3, r2
 8009572:	4618      	mov	r0, r3
 8009574:	f000 fae2 	bl	8009b3c <_ZN11flatbuffers10ReadScalarIaEET_PKv>
 8009578:	4603      	mov	r3, r0
 800957a:	e001      	b.n	8009580 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_+0x38>
 800957c:	f997 3001 	ldrsb.w	r3, [r7, #1]
  }
 8009580:	4618      	mov	r0, r3
 8009582:	3710      	adds	r7, #16
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}

08009588 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 8009588:	b580      	push	{r7, lr}
 800958a:	b086      	sub	sp, #24
 800958c:	af00      	add	r7, sp, #0
 800958e:	60f8      	str	r0, [r7, #12]
 8009590:	460b      	mov	r3, r1
 8009592:	ed87 0a01 	vstr	s0, [r7, #4]
 8009596:	817b      	strh	r3, [r7, #10]
    auto field_offset = GetOptionalFieldOffset(field);
 8009598:	897b      	ldrh	r3, [r7, #10]
 800959a:	4619      	mov	r1, r3
 800959c:	68f8      	ldr	r0, [r7, #12]
 800959e:	f7ff f922 	bl	80087e6 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 80095a2:	4603      	mov	r3, r0
 80095a4:	82fb      	strh	r3, [r7, #22]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 80095a6:	8afb      	ldrh	r3, [r7, #22]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d008      	beq.n	80095be <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_+0x36>
 80095ac:	68fa      	ldr	r2, [r7, #12]
 80095ae:	8afb      	ldrh	r3, [r7, #22]
 80095b0:	4413      	add	r3, r2
 80095b2:	4618      	mov	r0, r3
 80095b4:	f000 fad1 	bl	8009b5a <_ZN11flatbuffers10ReadScalarIfEET_PKv>
 80095b8:	eef0 7a40 	vmov.f32	s15, s0
 80095bc:	e001      	b.n	80095c2 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_+0x3a>
 80095be:	edd7 7a01 	vldr	s15, [r7, #4]
  }
 80095c2:	eeb0 0a67 	vmov.f32	s0, s15
 80095c6:	3718      	adds	r7, #24
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bd80      	pop	{r7, pc}

080095cc <_ZNK11flatbuffers6VectorIlE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b082      	sub	sp, #8
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	4618      	mov	r0, r3
 80095da:	f7ff ff15 	bl	8009408 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 80095de:	4603      	mov	r3, r0
 80095e0:	4618      	mov	r0, r3
 80095e2:	3708      	adds	r7, #8
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}

080095e8 <_ZNK11flatbuffers6VectorIlE3GetEm>:
  return_type Get(uoffset_t i) const {
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b082      	sub	sp, #8
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
 80095f0:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f7ff ffea 	bl	80095cc <_ZNK11flatbuffers6VectorIlE4sizeEv>
 80095f8:	4602      	mov	r2, r0
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	4293      	cmp	r3, r2
 80095fe:	d306      	bcc.n	800960e <_ZNK11flatbuffers6VectorIlE3GetEm+0x26>
 8009600:	4b09      	ldr	r3, [pc, #36]	; (8009628 <_ZNK11flatbuffers6VectorIlE3GetEm+0x40>)
 8009602:	4a0a      	ldr	r2, [pc, #40]	; (800962c <_ZNK11flatbuffers6VectorIlE3GetEm+0x44>)
 8009604:	f44f 7183 	mov.w	r1, #262	; 0x106
 8009608:	4809      	ldr	r0, [pc, #36]	; (8009630 <_ZNK11flatbuffers6VectorIlE3GetEm+0x48>)
 800960a:	f01c fa23 	bl	8025a54 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	f000 fac7 	bl	8009ba2 <_ZNK11flatbuffers6VectorIlE4DataEv>
 8009614:	4603      	mov	r3, r0
 8009616:	6839      	ldr	r1, [r7, #0]
 8009618:	4618      	mov	r0, r3
 800961a:	f000 fab0 	bl	8009b7e <_ZN11flatbuffers14IndirectHelperIlE4ReadEPKhm>
 800961e:	4603      	mov	r3, r0
  }
 8009620:	4618      	mov	r0, r3
 8009622:	3708      	adds	r7, #8
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}
 8009628:	08026edc 	.word	0x08026edc
 800962c:	08026ee8 	.word	0x08026ee8
 8009630:	08026fb8 	.word	0x08026fb8

08009634 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI16TfLiteConvParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 8009634:	b590      	push	{r4, r7, lr}
 8009636:	b085      	sub	sp, #20
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
 800963c:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 8009642:	4618      	mov	r0, r3
 8009644:	f000 fac4 	bl	8009bd0 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI16TfLiteConvParamsEEPT_v>
 8009648:	4604      	mov	r4, r0
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	681a      	ldr	r2, [r3, #0]
 800964e:	f107 030c 	add.w	r3, r7, #12
 8009652:	4611      	mov	r1, r2
 8009654:	4618      	mov	r0, r3
 8009656:	f7ff faac 	bl	8008bb2 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 800965a:	f107 030c 	add.w	r3, r7, #12
 800965e:	461a      	mov	r2, r3
 8009660:	4621      	mov	r1, r4
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	f000 fad3 	bl	8009c0e <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>
  }
 8009668:	6878      	ldr	r0, [r7, #4]
 800966a:	3714      	adds	r7, #20
 800966c:	46bd      	mov	sp, r7
 800966e:	bd90      	pop	{r4, r7, pc}

08009670 <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
	unique_ptr(auto_ptr<_Up>&& __u) noexcept;
#pragma GCC diagnostic pop
#endif

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
 8009670:	b590      	push	{r4, r7, lr}
 8009672:	b085      	sub	sp, #20
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	4618      	mov	r0, r3
 800967c:	f000 fadc 	bl	8009c38 <_ZNSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8009680:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d00c      	beq.n	80096a4 <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f000 fae1 	bl	8009c52 <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 8009690:	4604      	mov	r4, r0
 8009692:	68f8      	ldr	r0, [r7, #12]
 8009694:	f000 faea 	bl	8009c6c <_ZSt4moveIRP16TfLiteConvParamsEONSt16remove_referenceIT_E4typeEOS4_>
 8009698:	4603      	mov	r3, r0
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	4619      	mov	r1, r3
 800969e:	4620      	mov	r0, r4
 80096a0:	f7ff fa96 	bl	8008bd0 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	2200      	movs	r2, #0
 80096a8:	601a      	str	r2, [r3, #0]
      }
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	4618      	mov	r0, r3
 80096ae:	3714      	adds	r7, #20
 80096b0:	46bd      	mov	sp, r7
 80096b2:	bd90      	pop	{r4, r7, pc}

080096b4 <_ZStneI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
	       const unique_ptr<_Up, _Ep>& __y)
    { return __x.get() != __y.get(); }

  template<typename _Tp, typename _Dp>
    _GLIBCXX_NODISCARD inline bool
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b082      	sub	sp, #8
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
 80096bc:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	f000 faf5 	bl	8009cae <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 80096c4:	4603      	mov	r3, r0
 80096c6:	4618      	mov	r0, r3
 80096c8:	3708      	adds	r7, #8
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}

080096ce <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 80096ce:	b580      	push	{r7, lr}
 80096d0:	b082      	sub	sp, #8
 80096d2:	af00      	add	r7, sp, #0
 80096d4:	6078      	str	r0, [r7, #4]
	return get();
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f000 fafa 	bl	8009cd0 <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 80096dc:	4603      	mov	r3, r0
      }
 80096de:	4618      	mov	r0, r3
 80096e0:	3708      	adds	r7, #8
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}

080096e6 <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 80096e6:	b580      	push	{r7, lr}
 80096e8:	b084      	sub	sp, #16
 80096ea:	af00      	add	r7, sp, #0
 80096ec:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	f000 faee 	bl	8009cd0 <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 80096f4:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	4618      	mov	r0, r3
 80096fa:	f000 fa9d 	bl	8009c38 <_ZNSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 80096fe:	4603      	mov	r3, r0
 8009700:	2200      	movs	r2, #0
 8009702:	601a      	str	r2, [r3, #0]
	return __p;
 8009704:	68fb      	ldr	r3, [r7, #12]
      }
 8009706:	4618      	mov	r0, r3
 8009708:	3710      	adds	r7, #16
 800970a:	46bd      	mov	sp, r7
 800970c:	bd80      	pop	{r7, pc}

0800970e <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI25TfLiteDepthwiseConvParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 800970e:	b590      	push	{r4, r7, lr}
 8009710:	b085      	sub	sp, #20
 8009712:	af00      	add	r7, sp, #0
 8009714:	6078      	str	r0, [r7, #4]
 8009716:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 800971c:	4618      	mov	r0, r3
 800971e:	f000 fae4 	bl	8009cea <_ZN6tflite20BuiltinDataAllocator11AllocatePODI25TfLiteDepthwiseConvParamsEEPT_v>
 8009722:	4604      	mov	r4, r0
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	681a      	ldr	r2, [r3, #0]
 8009728:	f107 030c 	add.w	r3, r7, #12
 800972c:	4611      	mov	r1, r2
 800972e:	4618      	mov	r0, r3
 8009730:	f7ff fa3f 	bl	8008bb2 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 8009734:	f107 030c 	add.w	r3, r7, #12
 8009738:	461a      	mov	r2, r3
 800973a:	4621      	mov	r1, r4
 800973c:	6878      	ldr	r0, [r7, #4]
 800973e:	f000 faf4 	bl	8009d2a <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>
  }
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	3714      	adds	r7, #20
 8009746:	46bd      	mov	sp, r7
 8009748:	bd90      	pop	{r4, r7, pc}

0800974a <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 800974a:	b590      	push	{r4, r7, lr}
 800974c:	b085      	sub	sp, #20
 800974e:	af00      	add	r7, sp, #0
 8009750:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	4618      	mov	r0, r3
 8009756:	f000 fafd 	bl	8009d54 <_ZNSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800975a:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d00c      	beq.n	800977e <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	f000 fb02 	bl	8009d6e <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 800976a:	4604      	mov	r4, r0
 800976c:	68f8      	ldr	r0, [r7, #12]
 800976e:	f000 fb0b 	bl	8009d88 <_ZSt4moveIRP25TfLiteDepthwiseConvParamsEONSt16remove_referenceIT_E4typeEOS4_>
 8009772:	4603      	mov	r3, r0
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	4619      	mov	r1, r3
 8009778:	4620      	mov	r0, r4
 800977a:	f7ff fa29 	bl	8008bd0 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	2200      	movs	r2, #0
 8009782:	601a      	str	r2, [r3, #0]
      }
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	4618      	mov	r0, r3
 8009788:	3714      	adds	r7, #20
 800978a:	46bd      	mov	sp, r7
 800978c:	bd90      	pop	{r4, r7, pc}

0800978e <_ZStneI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 800978e:	b580      	push	{r7, lr}
 8009790:	b082      	sub	sp, #8
 8009792:	af00      	add	r7, sp, #0
 8009794:	6078      	str	r0, [r7, #4]
 8009796:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 8009798:	6878      	ldr	r0, [r7, #4]
 800979a:	f000 fb16 	bl	8009dca <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 800979e:	4603      	mov	r3, r0
 80097a0:	4618      	mov	r0, r3
 80097a2:	3708      	adds	r7, #8
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bd80      	pop	{r7, pc}

080097a8 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b082      	sub	sp, #8
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
	return get();
 80097b0:	6878      	ldr	r0, [r7, #4]
 80097b2:	f000 fb1b 	bl	8009dec <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 80097b6:	4603      	mov	r3, r0
      }
 80097b8:	4618      	mov	r0, r3
 80097ba:	3708      	adds	r7, #8
 80097bc:	46bd      	mov	sp, r7
 80097be:	bd80      	pop	{r7, pc}

080097c0 <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b084      	sub	sp, #16
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 80097c8:	6878      	ldr	r0, [r7, #4]
 80097ca:	f000 fb0f 	bl	8009dec <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 80097ce:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	4618      	mov	r0, r3
 80097d4:	f000 fabe 	bl	8009d54 <_ZNSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 80097d8:	4603      	mov	r3, r0
 80097da:	2200      	movs	r2, #0
 80097dc:	601a      	str	r2, [r3, #0]
	return __p;
 80097de:	68fb      	ldr	r3, [r7, #12]
      }
 80097e0:	4618      	mov	r0, r3
 80097e2:	3710      	adds	r7, #16
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bd80      	pop	{r7, pc}

080097e8 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI16TfLitePoolParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 80097e8:	b590      	push	{r4, r7, lr}
 80097ea:	b085      	sub	sp, #20
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
 80097f0:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 80097f6:	4618      	mov	r0, r3
 80097f8:	f000 fb05 	bl	8009e06 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI16TfLitePoolParamsEEPT_v>
 80097fc:	4604      	mov	r4, r0
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	681a      	ldr	r2, [r3, #0]
 8009802:	f107 030c 	add.w	r3, r7, #12
 8009806:	4611      	mov	r1, r2
 8009808:	4618      	mov	r0, r3
 800980a:	f7ff f9d2 	bl	8008bb2 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 800980e:	f107 030c 	add.w	r3, r7, #12
 8009812:	461a      	mov	r2, r3
 8009814:	4621      	mov	r1, r4
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	f000 fb12 	bl	8009e40 <_ZNSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>
  }
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	3714      	adds	r7, #20
 8009820:	46bd      	mov	sp, r7
 8009822:	bd90      	pop	{r4, r7, pc}

08009824 <_ZNSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 8009824:	b590      	push	{r4, r7, lr}
 8009826:	b085      	sub	sp, #20
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	4618      	mov	r0, r3
 8009830:	f000 fb1b 	bl	8009e6a <_ZNSt15__uniq_ptr_implI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8009834:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d00c      	beq.n	8009858 <_ZNSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f000 fb20 	bl	8009e84 <_ZNSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 8009844:	4604      	mov	r4, r0
 8009846:	68f8      	ldr	r0, [r7, #12]
 8009848:	f000 fb29 	bl	8009e9e <_ZSt4moveIRP16TfLitePoolParamsEONSt16remove_referenceIT_E4typeEOS4_>
 800984c:	4603      	mov	r3, r0
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	4619      	mov	r1, r3
 8009852:	4620      	mov	r0, r4
 8009854:	f7ff f9bc 	bl	8008bd0 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	2200      	movs	r2, #0
 800985c:	601a      	str	r2, [r3, #0]
      }
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	4618      	mov	r0, r3
 8009862:	3714      	adds	r7, #20
 8009864:	46bd      	mov	sp, r7
 8009866:	bd90      	pop	{r4, r7, pc}

08009868 <_ZStneI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 8009868:	b580      	push	{r7, lr}
 800986a:	b082      	sub	sp, #8
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
 8009870:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f000 fb34 	bl	8009ee0 <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 8009878:	4603      	mov	r3, r0
 800987a:	4618      	mov	r0, r3
 800987c:	3708      	adds	r7, #8
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}

08009882 <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 8009882:	b580      	push	{r7, lr}
 8009884:	b082      	sub	sp, #8
 8009886:	af00      	add	r7, sp, #0
 8009888:	6078      	str	r0, [r7, #4]
	return get();
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f000 fb39 	bl	8009f02 <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8009890:	4603      	mov	r3, r0
      }
 8009892:	4618      	mov	r0, r3
 8009894:	3708      	adds	r7, #8
 8009896:	46bd      	mov	sp, r7
 8009898:	bd80      	pop	{r7, pc}

0800989a <_ZNSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 800989a:	b580      	push	{r7, lr}
 800989c:	b084      	sub	sp, #16
 800989e:	af00      	add	r7, sp, #0
 80098a0:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 80098a2:	6878      	ldr	r0, [r7, #4]
 80098a4:	f000 fb2d 	bl	8009f02 <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 80098a8:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	4618      	mov	r0, r3
 80098ae:	f000 fadc 	bl	8009e6a <_ZNSt15__uniq_ptr_implI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 80098b2:	4603      	mov	r3, r0
 80098b4:	2200      	movs	r2, #0
 80098b6:	601a      	str	r2, [r3, #0]
	return __p;
 80098b8:	68fb      	ldr	r3, [r7, #12]
      }
 80098ba:	4618      	mov	r0, r3
 80098bc:	3710      	adds	r7, #16
 80098be:	46bd      	mov	sp, r7
 80098c0:	bd80      	pop	{r7, pc}

080098c2 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI19TfLiteReshapeParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 80098c2:	b590      	push	{r4, r7, lr}
 80098c4:	b085      	sub	sp, #20
 80098c6:	af00      	add	r7, sp, #0
 80098c8:	6078      	str	r0, [r7, #4]
 80098ca:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 80098d0:	4618      	mov	r0, r3
 80098d2:	f000 fb23 	bl	8009f1c <_ZN6tflite20BuiltinDataAllocator11AllocatePODI19TfLiteReshapeParamsEEPT_v>
 80098d6:	4604      	mov	r4, r0
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	681a      	ldr	r2, [r3, #0]
 80098dc:	f107 030c 	add.w	r3, r7, #12
 80098e0:	4611      	mov	r1, r2
 80098e2:	4618      	mov	r0, r3
 80098e4:	f7ff f965 	bl	8008bb2 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 80098e8:	f107 030c 	add.w	r3, r7, #12
 80098ec:	461a      	mov	r2, r3
 80098ee:	4621      	mov	r1, r4
 80098f0:	6878      	ldr	r0, [r7, #4]
 80098f2:	f000 fb30 	bl	8009f56 <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>
  }
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	3714      	adds	r7, #20
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bd90      	pop	{r4, r7, pc}

080098fe <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 80098fe:	b590      	push	{r4, r7, lr}
 8009900:	b085      	sub	sp, #20
 8009902:	af00      	add	r7, sp, #0
 8009904:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	4618      	mov	r0, r3
 800990a:	f000 fb39 	bl	8009f80 <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800990e:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d00c      	beq.n	8009932 <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8009918:	6878      	ldr	r0, [r7, #4]
 800991a:	f000 fb3e 	bl	8009f9a <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 800991e:	4604      	mov	r4, r0
 8009920:	68f8      	ldr	r0, [r7, #12]
 8009922:	f000 fb47 	bl	8009fb4 <_ZSt4moveIRP19TfLiteReshapeParamsEONSt16remove_referenceIT_E4typeEOS4_>
 8009926:	4603      	mov	r3, r0
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	4619      	mov	r1, r3
 800992c:	4620      	mov	r0, r4
 800992e:	f7ff f94f 	bl	8008bd0 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	2200      	movs	r2, #0
 8009936:	601a      	str	r2, [r3, #0]
      }
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	4618      	mov	r0, r3
 800993c:	3714      	adds	r7, #20
 800993e:	46bd      	mov	sp, r7
 8009940:	bd90      	pop	{r4, r7, pc}

08009942 <_ZStneI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 8009942:	b580      	push	{r7, lr}
 8009944:	b082      	sub	sp, #8
 8009946:	af00      	add	r7, sp, #0
 8009948:	6078      	str	r0, [r7, #4]
 800994a:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f000 fb52 	bl	8009ff6 <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 8009952:	4603      	mov	r3, r0
 8009954:	4618      	mov	r0, r3
 8009956:	3708      	adds	r7, #8
 8009958:	46bd      	mov	sp, r7
 800995a:	bd80      	pop	{r7, pc}

0800995c <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 800995c:	b580      	push	{r7, lr}
 800995e:	b082      	sub	sp, #8
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
	return get();
 8009964:	6878      	ldr	r0, [r7, #4]
 8009966:	f000 fb57 	bl	800a018 <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800996a:	4603      	mov	r3, r0
      }
 800996c:	4618      	mov	r0, r3
 800996e:	3708      	adds	r7, #8
 8009970:	46bd      	mov	sp, r7
 8009972:	bd80      	pop	{r7, pc}

08009974 <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 8009974:	b580      	push	{r7, lr}
 8009976:	b084      	sub	sp, #16
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	f000 fb4b 	bl	800a018 <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8009982:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	4618      	mov	r0, r3
 8009988:	f000 fafa 	bl	8009f80 <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800998c:	4603      	mov	r3, r0
 800998e:	2200      	movs	r2, #0
 8009990:	601a      	str	r2, [r3, #0]
	return __p;
 8009992:	68fb      	ldr	r3, [r7, #12]
      }
 8009994:	4618      	mov	r0, r3
 8009996:	3710      	adds	r7, #16
 8009998:	46bd      	mov	sp, r7
 800999a:	bd80      	pop	{r7, pc}

0800999c <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI19TfLiteSoftmaxParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 800999c:	b590      	push	{r4, r7, lr}
 800999e:	b085      	sub	sp, #20
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
 80099a4:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 80099aa:	4618      	mov	r0, r3
 80099ac:	f000 fb41 	bl	800a032 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI19TfLiteSoftmaxParamsEEPT_v>
 80099b0:	4604      	mov	r4, r0
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	681a      	ldr	r2, [r3, #0]
 80099b6:	f107 030c 	add.w	r3, r7, #12
 80099ba:	4611      	mov	r1, r2
 80099bc:	4618      	mov	r0, r3
 80099be:	f7ff f8f8 	bl	8008bb2 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 80099c2:	f107 030c 	add.w	r3, r7, #12
 80099c6:	461a      	mov	r2, r3
 80099c8:	4621      	mov	r1, r4
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	f000 fb4a 	bl	800a064 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>
  }
 80099d0:	6878      	ldr	r0, [r7, #4]
 80099d2:	3714      	adds	r7, #20
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bd90      	pop	{r4, r7, pc}

080099d8 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 80099d8:	b590      	push	{r4, r7, lr}
 80099da:	b085      	sub	sp, #20
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	4618      	mov	r0, r3
 80099e4:	f000 fb53 	bl	800a08e <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 80099e8:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d00c      	beq.n	8009a0c <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	f000 fb58 	bl	800a0a8 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 80099f8:	4604      	mov	r4, r0
 80099fa:	68f8      	ldr	r0, [r7, #12]
 80099fc:	f000 fb61 	bl	800a0c2 <_ZSt4moveIRP19TfLiteSoftmaxParamsEONSt16remove_referenceIT_E4typeEOS4_>
 8009a00:	4603      	mov	r3, r0
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	4619      	mov	r1, r3
 8009a06:	4620      	mov	r0, r4
 8009a08:	f7ff f8e2 	bl	8008bd0 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	2200      	movs	r2, #0
 8009a10:	601a      	str	r2, [r3, #0]
      }
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	4618      	mov	r0, r3
 8009a16:	3714      	adds	r7, #20
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bd90      	pop	{r4, r7, pc}

08009a1c <_ZStneI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b082      	sub	sp, #8
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
 8009a24:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 8009a26:	6878      	ldr	r0, [r7, #4]
 8009a28:	f000 fb6c 	bl	800a104 <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	4618      	mov	r0, r3
 8009a30:	3708      	adds	r7, #8
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bd80      	pop	{r7, pc}

08009a36 <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 8009a36:	b580      	push	{r7, lr}
 8009a38:	b082      	sub	sp, #8
 8009a3a:	af00      	add	r7, sp, #0
 8009a3c:	6078      	str	r0, [r7, #4]
	return get();
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f000 fb71 	bl	800a126 <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8009a44:	4603      	mov	r3, r0
      }
 8009a46:	4618      	mov	r0, r3
 8009a48:	3708      	adds	r7, #8
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bd80      	pop	{r7, pc}

08009a4e <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 8009a4e:	b580      	push	{r7, lr}
 8009a50:	b084      	sub	sp, #16
 8009a52:	af00      	add	r7, sp, #0
 8009a54:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 8009a56:	6878      	ldr	r0, [r7, #4]
 8009a58:	f000 fb65 	bl	800a126 <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8009a5c:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	4618      	mov	r0, r3
 8009a62:	f000 fb14 	bl	800a08e <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8009a66:	4603      	mov	r3, r0
 8009a68:	2200      	movs	r2, #0
 8009a6a:	601a      	str	r2, [r3, #0]
	return __p;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
      }
 8009a6e:	4618      	mov	r0, r3
 8009a70:	3710      	adds	r7, #16
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}

08009a76 <_ZN11flatbuffers12EndianScalarIlEET_S1_>:
template<typename T> T EndianScalar(T t) {
 8009a76:	b480      	push	{r7}
 8009a78:	b083      	sub	sp, #12
 8009a7a:	af00      	add	r7, sp, #0
 8009a7c:	6078      	str	r0, [r7, #4]
    return t;
 8009a7e:	687b      	ldr	r3, [r7, #4]
}
 8009a80:	4618      	mov	r0, r3
 8009a82:	370c      	adds	r7, #12
 8009a84:	46bd      	mov	sp, r7
 8009a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8a:	4770      	bx	lr

08009a8c <_ZN11flatbuffers12EndianScalarItEET_S1_>:
template<typename T> T EndianScalar(T t) {
 8009a8c:	b480      	push	{r7}
 8009a8e:	b083      	sub	sp, #12
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	4603      	mov	r3, r0
 8009a94:	80fb      	strh	r3, [r7, #6]
    return t;
 8009a96:	88fb      	ldrh	r3, [r7, #6]
}
 8009a98:	4618      	mov	r0, r3
 8009a9a:	370c      	adds	r7, #12
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa2:	4770      	bx	lr

08009aa4 <_ZN11flatbuffers12EndianScalarIhEET_S1_>:
template<typename T> T EndianScalar(T t) {
 8009aa4:	b480      	push	{r7}
 8009aa6:	b083      	sub	sp, #12
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	4603      	mov	r3, r0
 8009aac:	71fb      	strb	r3, [r7, #7]
    return t;
 8009aae:	79fb      	ldrb	r3, [r7, #7]
}
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	370c      	adds	r7, #12
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aba:	4770      	bx	lr

08009abc <_ZN11flatbuffers5Table10GetPointerIPKvEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b084      	sub	sp, #16
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
 8009ac4:	460b      	mov	r3, r1
 8009ac6:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8009ac8:	887b      	ldrh	r3, [r7, #2]
 8009aca:	4619      	mov	r1, r3
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f7fe fe8a 	bl	80087e6 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8009ad6:	687a      	ldr	r2, [r7, #4]
 8009ad8:	89fb      	ldrh	r3, [r7, #14]
 8009ada:	4413      	add	r3, r2
 8009adc:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8009ade:	89fb      	ldrh	r3, [r7, #14]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d006      	beq.n	8009af2 <_ZN11flatbuffers5Table10GetPointerIPKvEET_t+0x36>
 8009ae4:	68b8      	ldr	r0, [r7, #8]
 8009ae6:	f7ff fca8 	bl	800943a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8009aea:	4602      	mov	r2, r0
 8009aec:	68bb      	ldr	r3, [r7, #8]
 8009aee:	4413      	add	r3, r2
                        : nullptr;
 8009af0:	e000      	b.n	8009af4 <_ZN11flatbuffers5Table10GetPointerIPKvEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8009af2:	2300      	movs	r3, #0
  }
 8009af4:	4618      	mov	r0, r3
 8009af6:	3710      	adds	r7, #16
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd80      	pop	{r7, pc}

08009afc <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b084      	sub	sp, #16
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
 8009b04:	460b      	mov	r3, r1
 8009b06:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8009b08:	887b      	ldrh	r3, [r7, #2]
 8009b0a:	4619      	mov	r1, r3
 8009b0c:	6878      	ldr	r0, [r7, #4]
 8009b0e:	f7fe fe6a 	bl	80087e6 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8009b12:	4603      	mov	r3, r0
 8009b14:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8009b16:	687a      	ldr	r2, [r7, #4]
 8009b18:	89fb      	ldrh	r3, [r7, #14]
 8009b1a:	4413      	add	r3, r2
 8009b1c:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8009b1e:	89fb      	ldrh	r3, [r7, #14]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d006      	beq.n	8009b32 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t+0x36>
 8009b24:	68b8      	ldr	r0, [r7, #8]
 8009b26:	f7ff fc88 	bl	800943a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8009b2a:	4602      	mov	r2, r0
 8009b2c:	68bb      	ldr	r3, [r7, #8]
 8009b2e:	4413      	add	r3, r2
                        : nullptr;
 8009b30:	e000      	b.n	8009b34 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8009b32:	2300      	movs	r3, #0
  }
 8009b34:	4618      	mov	r0, r3
 8009b36:	3710      	adds	r7, #16
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bd80      	pop	{r7, pc}

08009b3c <_ZN11flatbuffers10ReadScalarIaEET_PKv>:
T ReadScalar(const void *p) {
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b082      	sub	sp, #8
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f993 3000 	ldrsb.w	r3, [r3]
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	f000 faf8 	bl	800a140 <_ZN11flatbuffers12EndianScalarIaEET_S1_>
 8009b50:	4603      	mov	r3, r0
}
 8009b52:	4618      	mov	r0, r3
 8009b54:	3708      	adds	r7, #8
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd80      	pop	{r7, pc}

08009b5a <_ZN11flatbuffers10ReadScalarIfEET_PKv>:
T ReadScalar(const void *p) {
 8009b5a:	b580      	push	{r7, lr}
 8009b5c:	b082      	sub	sp, #8
 8009b5e:	af00      	add	r7, sp, #0
 8009b60:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	edd3 7a00 	vldr	s15, [r3]
 8009b68:	eeb0 0a67 	vmov.f32	s0, s15
 8009b6c:	f000 faf5 	bl	800a15a <_ZN11flatbuffers12EndianScalarIfEET_S1_>
 8009b70:	eef0 7a40 	vmov.f32	s15, s0
}
 8009b74:	eeb0 0a67 	vmov.f32	s0, s15
 8009b78:	3708      	adds	r7, #8
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	bd80      	pop	{r7, pc}

08009b7e <_ZN11flatbuffers14IndirectHelperIlE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8009b7e:	b580      	push	{r7, lr}
 8009b80:	b082      	sub	sp, #8
 8009b82:	af00      	add	r7, sp, #0
 8009b84:	6078      	str	r0, [r7, #4]
 8009b86:	6039      	str	r1, [r7, #0]
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	009b      	lsls	r3, r3, #2
 8009b8c:	687a      	ldr	r2, [r7, #4]
 8009b8e:	4413      	add	r3, r2
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	4618      	mov	r0, r3
 8009b94:	f7ff ff6f 	bl	8009a76 <_ZN11flatbuffers12EndianScalarIlEET_S1_>
 8009b98:	4603      	mov	r3, r0
  }
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	3708      	adds	r7, #8
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bd80      	pop	{r7, pc}

08009ba2 <_ZNK11flatbuffers6VectorIlE4DataEv>:
  const uint8_t *Data() const {
 8009ba2:	b480      	push	{r7}
 8009ba4:	b083      	sub	sp, #12
 8009ba6:	af00      	add	r7, sp, #0
 8009ba8:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	3304      	adds	r3, #4
  }
 8009bae:	4618      	mov	r0, r3
 8009bb0:	370c      	adds	r7, #12
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb8:	4770      	bx	lr

08009bba <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009bba:	b480      	push	{r7}
 8009bbc:	b083      	sub	sp, #12
 8009bbe:	af00      	add	r7, sp, #0
 8009bc0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	370c      	adds	r7, #12
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bce:	4770      	bx	lr

08009bd0 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI16TfLiteConvParamsEEPT_v>:
  // Allocate a structure, but make sure it is a POD structure that doesn't
  // require constructors to run. The reason we do this, is that Interpreter's C
  // extension part will take ownership so destructors  will not be run during
  // deallocation.
  template <typename T>
  T* AllocatePOD() {
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b084      	sub	sp, #16
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
    // TODO(b/154346074): Change this to is_trivially_destructible when all
    // platform targets support that properly.
    static_assert(std::is_pod<T>::value, "Builtin data structure must be POD.");
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	2204      	movs	r2, #4
 8009be0:	2118      	movs	r1, #24
 8009be2:	6878      	ldr	r0, [r7, #4]
 8009be4:	4798      	blx	r3
 8009be6:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T();
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	4619      	mov	r1, r3
 8009bec:	2018      	movs	r0, #24
 8009bee:	f7fe fdde 	bl	80087ae <_ZnwjPv>
 8009bf2:	4601      	mov	r1, r0
 8009bf4:	460a      	mov	r2, r1
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	6013      	str	r3, [r2, #0]
 8009bfa:	6053      	str	r3, [r2, #4]
 8009bfc:	6093      	str	r3, [r2, #8]
 8009bfe:	60d3      	str	r3, [r2, #12]
 8009c00:	6113      	str	r3, [r2, #16]
 8009c02:	6153      	str	r3, [r2, #20]
 8009c04:	460b      	mov	r3, r1
  }
 8009c06:	4618      	mov	r0, r3
 8009c08:	3710      	adds	r7, #16
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bd80      	pop	{r7, pc}

08009c0e <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>:
	unique_ptr(pointer __p,
 8009c0e:	b590      	push	{r4, r7, lr}
 8009c10:	b085      	sub	sp, #20
 8009c12:	af00      	add	r7, sp, #0
 8009c14:	60f8      	str	r0, [r7, #12]
 8009c16:	60b9      	str	r1, [r7, #8]
 8009c18:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::move(__d))
 8009c1a:	68fc      	ldr	r4, [r7, #12]
 8009c1c:	6878      	ldr	r0, [r7, #4]
 8009c1e:	f000 faab 	bl	800a178 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 8009c22:	4603      	mov	r3, r0
 8009c24:	461a      	mov	r2, r3
 8009c26:	68b9      	ldr	r1, [r7, #8]
 8009c28:	4620      	mov	r0, r4
 8009c2a:	f000 f82a 	bl	8009c82 <_ZNSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
	{ }
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	4618      	mov	r0, r3
 8009c32:	3714      	adds	r7, #20
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bd90      	pop	{r4, r7, pc}

08009c38 <_ZNSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b082      	sub	sp, #8
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	4618      	mov	r0, r3
 8009c44:	f000 faa3 	bl	800a18e <_ZSt3getILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	3708      	adds	r7, #8
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	bd80      	pop	{r7, pc}

08009c52 <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 8009c52:	b580      	push	{r7, lr}
 8009c54:	b082      	sub	sp, #8
 8009c56:	af00      	add	r7, sp, #0
 8009c58:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	f000 faa3 	bl	800a1a8 <_ZNSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 8009c62:	4603      	mov	r3, r0
 8009c64:	4618      	mov	r0, r3
 8009c66:	3708      	adds	r7, #8
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bd80      	pop	{r7, pc}

08009c6c <_ZSt4moveIRP16TfLiteConvParamsEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8009c6c:	b480      	push	{r7}
 8009c6e:	b083      	sub	sp, #12
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	4618      	mov	r0, r3
 8009c78:	370c      	adds	r7, #12
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c80:	4770      	bx	lr

08009c82 <_ZNSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 8009c82:	b590      	push	{r4, r7, lr}
 8009c84:	b085      	sub	sp, #20
 8009c86:	af00      	add	r7, sp, #0
 8009c88:	60f8      	str	r0, [r7, #12]
 8009c8a:	60b9      	str	r1, [r7, #8]
 8009c8c:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 8009c8e:	68fc      	ldr	r4, [r7, #12]
 8009c90:	6878      	ldr	r0, [r7, #4]
 8009c92:	f7ff ff92 	bl	8009bba <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8009c96:	4602      	mov	r2, r0
 8009c98:	f107 0308 	add.w	r3, r7, #8
 8009c9c:	4619      	mov	r1, r3
 8009c9e:	4620      	mov	r0, r4
 8009ca0:	f000 fa8f 	bl	800a1c2 <_ZNSt5tupleIJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	3714      	adds	r7, #20
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd90      	pop	{r4, r7, pc}

08009cae <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 8009cae:	b580      	push	{r7, lr}
 8009cb0:	b082      	sub	sp, #8
 8009cb2:	af00      	add	r7, sp, #0
 8009cb4:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f000 f80a 	bl	8009cd0 <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	bf14      	ite	ne
 8009cc2:	2301      	movne	r3, #1
 8009cc4:	2300      	moveq	r3, #0
 8009cc6:	b2db      	uxtb	r3, r3
 8009cc8:	4618      	mov	r0, r3
 8009cca:	3708      	adds	r7, #8
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	bd80      	pop	{r7, pc}

08009cd0 <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b082      	sub	sp, #8
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	4618      	mov	r0, r3
 8009cdc:	f000 fa8a 	bl	800a1f4 <_ZNKSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	3708      	adds	r7, #8
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	bd80      	pop	{r7, pc}

08009cea <_ZN6tflite20BuiltinDataAllocator11AllocatePODI25TfLiteDepthwiseConvParamsEEPT_v>:
  T* AllocatePOD() {
 8009cea:	b580      	push	{r7, lr}
 8009cec:	b084      	sub	sp, #16
 8009cee:	af00      	add	r7, sp, #0
 8009cf0:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	2204      	movs	r2, #4
 8009cfa:	211c      	movs	r1, #28
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	4798      	blx	r3
 8009d00:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T();
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	4619      	mov	r1, r3
 8009d06:	201c      	movs	r0, #28
 8009d08:	f7fe fd51 	bl	80087ae <_ZnwjPv>
 8009d0c:	4601      	mov	r1, r0
 8009d0e:	460a      	mov	r2, r1
 8009d10:	2300      	movs	r3, #0
 8009d12:	6013      	str	r3, [r2, #0]
 8009d14:	6053      	str	r3, [r2, #4]
 8009d16:	6093      	str	r3, [r2, #8]
 8009d18:	60d3      	str	r3, [r2, #12]
 8009d1a:	6113      	str	r3, [r2, #16]
 8009d1c:	6153      	str	r3, [r2, #20]
 8009d1e:	6193      	str	r3, [r2, #24]
 8009d20:	460b      	mov	r3, r1
  }
 8009d22:	4618      	mov	r0, r3
 8009d24:	3710      	adds	r7, #16
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bd80      	pop	{r7, pc}

08009d2a <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>:
	unique_ptr(pointer __p,
 8009d2a:	b590      	push	{r4, r7, lr}
 8009d2c:	b085      	sub	sp, #20
 8009d2e:	af00      	add	r7, sp, #0
 8009d30:	60f8      	str	r0, [r7, #12]
 8009d32:	60b9      	str	r1, [r7, #8]
 8009d34:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::move(__d))
 8009d36:	68fc      	ldr	r4, [r7, #12]
 8009d38:	6878      	ldr	r0, [r7, #4]
 8009d3a:	f000 fa1d 	bl	800a178 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	461a      	mov	r2, r3
 8009d42:	68b9      	ldr	r1, [r7, #8]
 8009d44:	4620      	mov	r0, r4
 8009d46:	f000 f82a 	bl	8009d9e <_ZNSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
	{ }
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	3714      	adds	r7, #20
 8009d50:	46bd      	mov	sp, r7
 8009d52:	bd90      	pop	{r4, r7, pc}

08009d54 <_ZNSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b082      	sub	sp, #8
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	4618      	mov	r0, r3
 8009d60:	f000 fa56 	bl	800a210 <_ZSt3getILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8009d64:	4603      	mov	r3, r0
 8009d66:	4618      	mov	r0, r3
 8009d68:	3708      	adds	r7, #8
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}

08009d6e <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 8009d6e:	b580      	push	{r7, lr}
 8009d70:	b082      	sub	sp, #8
 8009d72:	af00      	add	r7, sp, #0
 8009d74:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	4618      	mov	r0, r3
 8009d7a:	f000 fa56 	bl	800a22a <_ZNSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	4618      	mov	r0, r3
 8009d82:	3708      	adds	r7, #8
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd80      	pop	{r7, pc}

08009d88 <_ZSt4moveIRP25TfLiteDepthwiseConvParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8009d88:	b480      	push	{r7}
 8009d8a:	b083      	sub	sp, #12
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	4618      	mov	r0, r3
 8009d94:	370c      	adds	r7, #12
 8009d96:	46bd      	mov	sp, r7
 8009d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9c:	4770      	bx	lr

08009d9e <_ZNSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 8009d9e:	b590      	push	{r4, r7, lr}
 8009da0:	b085      	sub	sp, #20
 8009da2:	af00      	add	r7, sp, #0
 8009da4:	60f8      	str	r0, [r7, #12]
 8009da6:	60b9      	str	r1, [r7, #8]
 8009da8:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 8009daa:	68fc      	ldr	r4, [r7, #12]
 8009dac:	6878      	ldr	r0, [r7, #4]
 8009dae:	f7ff ff04 	bl	8009bba <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8009db2:	4602      	mov	r2, r0
 8009db4:	f107 0308 	add.w	r3, r7, #8
 8009db8:	4619      	mov	r1, r3
 8009dba:	4620      	mov	r0, r4
 8009dbc:	f000 fa42 	bl	800a244 <_ZNSt5tupleIJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	3714      	adds	r7, #20
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd90      	pop	{r4, r7, pc}

08009dca <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 8009dca:	b580      	push	{r7, lr}
 8009dcc:	b082      	sub	sp, #8
 8009dce:	af00      	add	r7, sp, #0
 8009dd0:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 8009dd2:	6878      	ldr	r0, [r7, #4]
 8009dd4:	f000 f80a 	bl	8009dec <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8009dd8:	4603      	mov	r3, r0
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	bf14      	ite	ne
 8009dde:	2301      	movne	r3, #1
 8009de0:	2300      	moveq	r3, #0
 8009de2:	b2db      	uxtb	r3, r3
 8009de4:	4618      	mov	r0, r3
 8009de6:	3708      	adds	r7, #8
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}

08009dec <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b082      	sub	sp, #8
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	4618      	mov	r0, r3
 8009df8:	f000 fa3d 	bl	800a276 <_ZNKSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8009dfc:	4603      	mov	r3, r0
 8009dfe:	4618      	mov	r0, r3
 8009e00:	3708      	adds	r7, #8
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bd80      	pop	{r7, pc}

08009e06 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI16TfLitePoolParamsEEPT_v>:
  T* AllocatePOD() {
 8009e06:	b590      	push	{r4, r7, lr}
 8009e08:	b085      	sub	sp, #20
 8009e0a:	af00      	add	r7, sp, #0
 8009e0c:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	2204      	movs	r2, #4
 8009e16:	2128      	movs	r1, #40	; 0x28
 8009e18:	6878      	ldr	r0, [r7, #4]
 8009e1a:	4798      	blx	r3
 8009e1c:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T();
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	4619      	mov	r1, r3
 8009e22:	2028      	movs	r0, #40	; 0x28
 8009e24:	f7fe fcc3 	bl	80087ae <_ZnwjPv>
 8009e28:	4604      	mov	r4, r0
 8009e2a:	4620      	mov	r0, r4
 8009e2c:	2328      	movs	r3, #40	; 0x28
 8009e2e:	461a      	mov	r2, r3
 8009e30:	2100      	movs	r1, #0
 8009e32:	f01b feff 	bl	8025c34 <memset>
 8009e36:	4623      	mov	r3, r4
  }
 8009e38:	4618      	mov	r0, r3
 8009e3a:	3714      	adds	r7, #20
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bd90      	pop	{r4, r7, pc}

08009e40 <_ZNSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>:
	unique_ptr(pointer __p,
 8009e40:	b590      	push	{r4, r7, lr}
 8009e42:	b085      	sub	sp, #20
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	60f8      	str	r0, [r7, #12]
 8009e48:	60b9      	str	r1, [r7, #8]
 8009e4a:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::move(__d))
 8009e4c:	68fc      	ldr	r4, [r7, #12]
 8009e4e:	6878      	ldr	r0, [r7, #4]
 8009e50:	f000 f992 	bl	800a178 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 8009e54:	4603      	mov	r3, r0
 8009e56:	461a      	mov	r2, r3
 8009e58:	68b9      	ldr	r1, [r7, #8]
 8009e5a:	4620      	mov	r0, r4
 8009e5c:	f000 f82a 	bl	8009eb4 <_ZNSt15__uniq_ptr_implI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
	{ }
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	4618      	mov	r0, r3
 8009e64:	3714      	adds	r7, #20
 8009e66:	46bd      	mov	sp, r7
 8009e68:	bd90      	pop	{r4, r7, pc}

08009e6a <_ZNSt15__uniq_ptr_implI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8009e6a:	b580      	push	{r7, lr}
 8009e6c:	b082      	sub	sp, #8
 8009e6e:	af00      	add	r7, sp, #0
 8009e70:	6078      	str	r0, [r7, #4]
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	4618      	mov	r0, r3
 8009e76:	f000 fa0c 	bl	800a292 <_ZSt3getILj0EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	3708      	adds	r7, #8
 8009e80:	46bd      	mov	sp, r7
 8009e82:	bd80      	pop	{r7, pc}

08009e84 <_ZNSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b082      	sub	sp, #8
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	4618      	mov	r0, r3
 8009e90:	f000 fa0c 	bl	800a2ac <_ZNSt15__uniq_ptr_implI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 8009e94:	4603      	mov	r3, r0
 8009e96:	4618      	mov	r0, r3
 8009e98:	3708      	adds	r7, #8
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bd80      	pop	{r7, pc}

08009e9e <_ZSt4moveIRP16TfLitePoolParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8009e9e:	b480      	push	{r7}
 8009ea0:	b083      	sub	sp, #12
 8009ea2:	af00      	add	r7, sp, #0
 8009ea4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	370c      	adds	r7, #12
 8009eac:	46bd      	mov	sp, r7
 8009eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb2:	4770      	bx	lr

08009eb4 <_ZNSt15__uniq_ptr_implI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 8009eb4:	b590      	push	{r4, r7, lr}
 8009eb6:	b085      	sub	sp, #20
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	60f8      	str	r0, [r7, #12]
 8009ebc:	60b9      	str	r1, [r7, #8]
 8009ebe:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 8009ec0:	68fc      	ldr	r4, [r7, #12]
 8009ec2:	6878      	ldr	r0, [r7, #4]
 8009ec4:	f7ff fe79 	bl	8009bba <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8009ec8:	4602      	mov	r2, r0
 8009eca:	f107 0308 	add.w	r3, r7, #8
 8009ece:	4619      	mov	r1, r3
 8009ed0:	4620      	mov	r0, r4
 8009ed2:	f000 f9f8 	bl	800a2c6 <_ZNSt5tupleIJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	4618      	mov	r0, r3
 8009eda:	3714      	adds	r7, #20
 8009edc:	46bd      	mov	sp, r7
 8009ede:	bd90      	pop	{r4, r7, pc}

08009ee0 <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b082      	sub	sp, #8
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f000 f80a 	bl	8009f02 <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8009eee:	4603      	mov	r3, r0
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	bf14      	ite	ne
 8009ef4:	2301      	movne	r3, #1
 8009ef6:	2300      	moveq	r3, #0
 8009ef8:	b2db      	uxtb	r3, r3
 8009efa:	4618      	mov	r0, r3
 8009efc:	3708      	adds	r7, #8
 8009efe:	46bd      	mov	sp, r7
 8009f00:	bd80      	pop	{r7, pc}

08009f02 <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 8009f02:	b580      	push	{r7, lr}
 8009f04:	b082      	sub	sp, #8
 8009f06:	af00      	add	r7, sp, #0
 8009f08:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	f000 f9f3 	bl	800a2f8 <_ZNKSt15__uniq_ptr_implI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8009f12:	4603      	mov	r3, r0
 8009f14:	4618      	mov	r0, r3
 8009f16:	3708      	adds	r7, #8
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	bd80      	pop	{r7, pc}

08009f1c <_ZN6tflite20BuiltinDataAllocator11AllocatePODI19TfLiteReshapeParamsEEPT_v>:
  T* AllocatePOD() {
 8009f1c:	b590      	push	{r4, r7, lr}
 8009f1e:	b085      	sub	sp, #20
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	2204      	movs	r2, #4
 8009f2c:	2124      	movs	r1, #36	; 0x24
 8009f2e:	6878      	ldr	r0, [r7, #4]
 8009f30:	4798      	blx	r3
 8009f32:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T();
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	4619      	mov	r1, r3
 8009f38:	2024      	movs	r0, #36	; 0x24
 8009f3a:	f7fe fc38 	bl	80087ae <_ZnwjPv>
 8009f3e:	4604      	mov	r4, r0
 8009f40:	4620      	mov	r0, r4
 8009f42:	2324      	movs	r3, #36	; 0x24
 8009f44:	461a      	mov	r2, r3
 8009f46:	2100      	movs	r1, #0
 8009f48:	f01b fe74 	bl	8025c34 <memset>
 8009f4c:	4623      	mov	r3, r4
  }
 8009f4e:	4618      	mov	r0, r3
 8009f50:	3714      	adds	r7, #20
 8009f52:	46bd      	mov	sp, r7
 8009f54:	bd90      	pop	{r4, r7, pc}

08009f56 <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>:
	unique_ptr(pointer __p,
 8009f56:	b590      	push	{r4, r7, lr}
 8009f58:	b085      	sub	sp, #20
 8009f5a:	af00      	add	r7, sp, #0
 8009f5c:	60f8      	str	r0, [r7, #12]
 8009f5e:	60b9      	str	r1, [r7, #8]
 8009f60:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::move(__d))
 8009f62:	68fc      	ldr	r4, [r7, #12]
 8009f64:	6878      	ldr	r0, [r7, #4]
 8009f66:	f000 f907 	bl	800a178 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	461a      	mov	r2, r3
 8009f6e:	68b9      	ldr	r1, [r7, #8]
 8009f70:	4620      	mov	r0, r4
 8009f72:	f000 f82a 	bl	8009fca <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
	{ }
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	4618      	mov	r0, r3
 8009f7a:	3714      	adds	r7, #20
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	bd90      	pop	{r4, r7, pc}

08009f80 <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b082      	sub	sp, #8
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f000 f9c2 	bl	800a314 <_ZSt3getILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8009f90:	4603      	mov	r3, r0
 8009f92:	4618      	mov	r0, r3
 8009f94:	3708      	adds	r7, #8
 8009f96:	46bd      	mov	sp, r7
 8009f98:	bd80      	pop	{r7, pc}

08009f9a <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 8009f9a:	b580      	push	{r7, lr}
 8009f9c:	b082      	sub	sp, #8
 8009f9e:	af00      	add	r7, sp, #0
 8009fa0:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	f000 f9c2 	bl	800a32e <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 8009faa:	4603      	mov	r3, r0
 8009fac:	4618      	mov	r0, r3
 8009fae:	3708      	adds	r7, #8
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bd80      	pop	{r7, pc}

08009fb4 <_ZSt4moveIRP19TfLiteReshapeParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8009fb4:	b480      	push	{r7}
 8009fb6:	b083      	sub	sp, #12
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	370c      	adds	r7, #12
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc8:	4770      	bx	lr

08009fca <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 8009fca:	b590      	push	{r4, r7, lr}
 8009fcc:	b085      	sub	sp, #20
 8009fce:	af00      	add	r7, sp, #0
 8009fd0:	60f8      	str	r0, [r7, #12]
 8009fd2:	60b9      	str	r1, [r7, #8]
 8009fd4:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 8009fd6:	68fc      	ldr	r4, [r7, #12]
 8009fd8:	6878      	ldr	r0, [r7, #4]
 8009fda:	f7ff fdee 	bl	8009bba <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8009fde:	4602      	mov	r2, r0
 8009fe0:	f107 0308 	add.w	r3, r7, #8
 8009fe4:	4619      	mov	r1, r3
 8009fe6:	4620      	mov	r0, r4
 8009fe8:	f000 f9ae 	bl	800a348 <_ZNSt5tupleIJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	4618      	mov	r0, r3
 8009ff0:	3714      	adds	r7, #20
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	bd90      	pop	{r4, r7, pc}

08009ff6 <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 8009ff6:	b580      	push	{r7, lr}
 8009ff8:	b082      	sub	sp, #8
 8009ffa:	af00      	add	r7, sp, #0
 8009ffc:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 8009ffe:	6878      	ldr	r0, [r7, #4]
 800a000:	f000 f80a 	bl	800a018 <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800a004:	4603      	mov	r3, r0
 800a006:	2b00      	cmp	r3, #0
 800a008:	bf14      	ite	ne
 800a00a:	2301      	movne	r3, #1
 800a00c:	2300      	moveq	r3, #0
 800a00e:	b2db      	uxtb	r3, r3
 800a010:	4618      	mov	r0, r3
 800a012:	3708      	adds	r7, #8
 800a014:	46bd      	mov	sp, r7
 800a016:	bd80      	pop	{r7, pc}

0800a018 <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 800a018:	b580      	push	{r7, lr}
 800a01a:	b082      	sub	sp, #8
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	4618      	mov	r0, r3
 800a024:	f000 f9a9 	bl	800a37a <_ZNKSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800a028:	4603      	mov	r3, r0
 800a02a:	4618      	mov	r0, r3
 800a02c:	3708      	adds	r7, #8
 800a02e:	46bd      	mov	sp, r7
 800a030:	bd80      	pop	{r7, pc}

0800a032 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI19TfLiteSoftmaxParamsEEPT_v>:
  T* AllocatePOD() {
 800a032:	b580      	push	{r7, lr}
 800a034:	b084      	sub	sp, #16
 800a036:	af00      	add	r7, sp, #0
 800a038:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	2204      	movs	r2, #4
 800a042:	2104      	movs	r1, #4
 800a044:	6878      	ldr	r0, [r7, #4]
 800a046:	4798      	blx	r3
 800a048:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T();
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	4619      	mov	r1, r3
 800a04e:	2004      	movs	r0, #4
 800a050:	f7fe fbad 	bl	80087ae <_ZnwjPv>
 800a054:	4603      	mov	r3, r0
 800a056:	f04f 0200 	mov.w	r2, #0
 800a05a:	601a      	str	r2, [r3, #0]
  }
 800a05c:	4618      	mov	r0, r3
 800a05e:	3710      	adds	r7, #16
 800a060:	46bd      	mov	sp, r7
 800a062:	bd80      	pop	{r7, pc}

0800a064 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>:
	unique_ptr(pointer __p,
 800a064:	b590      	push	{r4, r7, lr}
 800a066:	b085      	sub	sp, #20
 800a068:	af00      	add	r7, sp, #0
 800a06a:	60f8      	str	r0, [r7, #12]
 800a06c:	60b9      	str	r1, [r7, #8]
 800a06e:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::move(__d))
 800a070:	68fc      	ldr	r4, [r7, #12]
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	f000 f880 	bl	800a178 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 800a078:	4603      	mov	r3, r0
 800a07a:	461a      	mov	r2, r3
 800a07c:	68b9      	ldr	r1, [r7, #8]
 800a07e:	4620      	mov	r0, r4
 800a080:	f000 f82a 	bl	800a0d8 <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
	{ }
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	4618      	mov	r0, r3
 800a088:	3714      	adds	r7, #20
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bd90      	pop	{r4, r7, pc}

0800a08e <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800a08e:	b580      	push	{r7, lr}
 800a090:	b082      	sub	sp, #8
 800a092:	af00      	add	r7, sp, #0
 800a094:	6078      	str	r0, [r7, #4]
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	4618      	mov	r0, r3
 800a09a:	f000 f97c 	bl	800a396 <_ZSt3getILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800a09e:	4603      	mov	r3, r0
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	3708      	adds	r7, #8
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	bd80      	pop	{r7, pc}

0800a0a8 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b082      	sub	sp, #8
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	f000 f97c 	bl	800a3b0 <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	3708      	adds	r7, #8
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd80      	pop	{r7, pc}

0800a0c2 <_ZSt4moveIRP19TfLiteSoftmaxParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800a0c2:	b480      	push	{r7}
 800a0c4:	b083      	sub	sp, #12
 800a0c6:	af00      	add	r7, sp, #0
 800a0c8:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	370c      	adds	r7, #12
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d6:	4770      	bx	lr

0800a0d8 <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 800a0d8:	b590      	push	{r4, r7, lr}
 800a0da:	b085      	sub	sp, #20
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	60f8      	str	r0, [r7, #12]
 800a0e0:	60b9      	str	r1, [r7, #8]
 800a0e2:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800a0e4:	68fc      	ldr	r4, [r7, #12]
 800a0e6:	6878      	ldr	r0, [r7, #4]
 800a0e8:	f7ff fd67 	bl	8009bba <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800a0ec:	4602      	mov	r2, r0
 800a0ee:	f107 0308 	add.w	r3, r7, #8
 800a0f2:	4619      	mov	r1, r3
 800a0f4:	4620      	mov	r0, r4
 800a0f6:	f000 f968 	bl	800a3ca <_ZNSt5tupleIJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	3714      	adds	r7, #20
 800a100:	46bd      	mov	sp, r7
 800a102:	bd90      	pop	{r4, r7, pc}

0800a104 <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 800a104:	b580      	push	{r7, lr}
 800a106:	b082      	sub	sp, #8
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 800a10c:	6878      	ldr	r0, [r7, #4]
 800a10e:	f000 f80a 	bl	800a126 <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800a112:	4603      	mov	r3, r0
 800a114:	2b00      	cmp	r3, #0
 800a116:	bf14      	ite	ne
 800a118:	2301      	movne	r3, #1
 800a11a:	2300      	moveq	r3, #0
 800a11c:	b2db      	uxtb	r3, r3
 800a11e:	4618      	mov	r0, r3
 800a120:	3708      	adds	r7, #8
 800a122:	46bd      	mov	sp, r7
 800a124:	bd80      	pop	{r7, pc}

0800a126 <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 800a126:	b580      	push	{r7, lr}
 800a128:	b082      	sub	sp, #8
 800a12a:	af00      	add	r7, sp, #0
 800a12c:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	4618      	mov	r0, r3
 800a132:	f000 f963 	bl	800a3fc <_ZNKSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800a136:	4603      	mov	r3, r0
 800a138:	4618      	mov	r0, r3
 800a13a:	3708      	adds	r7, #8
 800a13c:	46bd      	mov	sp, r7
 800a13e:	bd80      	pop	{r7, pc}

0800a140 <_ZN11flatbuffers12EndianScalarIaEET_S1_>:
template<typename T> T EndianScalar(T t) {
 800a140:	b480      	push	{r7}
 800a142:	b083      	sub	sp, #12
 800a144:	af00      	add	r7, sp, #0
 800a146:	4603      	mov	r3, r0
 800a148:	71fb      	strb	r3, [r7, #7]
    return t;
 800a14a:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800a14e:	4618      	mov	r0, r3
 800a150:	370c      	adds	r7, #12
 800a152:	46bd      	mov	sp, r7
 800a154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a158:	4770      	bx	lr

0800a15a <_ZN11flatbuffers12EndianScalarIfEET_S1_>:
template<typename T> T EndianScalar(T t) {
 800a15a:	b480      	push	{r7}
 800a15c:	b083      	sub	sp, #12
 800a15e:	af00      	add	r7, sp, #0
 800a160:	ed87 0a01 	vstr	s0, [r7, #4]
    return t;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	ee07 3a90 	vmov	s15, r3
}
 800a16a:	eeb0 0a67 	vmov.f32	s0, s15
 800a16e:	370c      	adds	r7, #12
 800a170:	46bd      	mov	sp, r7
 800a172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a176:	4770      	bx	lr

0800a178 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 800a178:	b480      	push	{r7}
 800a17a:	b083      	sub	sp, #12
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	4618      	mov	r0, r3
 800a184:	370c      	adds	r7, #12
 800a186:	46bd      	mov	sp, r7
 800a188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18c:	4770      	bx	lr

0800a18e <_ZSt3getILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }

  /// Return a reference to the ith element of a tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 800a18e:	b580      	push	{r7, lr}
 800a190:	b082      	sub	sp, #8
 800a192:	af00      	add	r7, sp, #0
 800a194:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	4618      	mov	r0, r3
 800a19a:	f000 f93d 	bl	800a418 <_ZSt12__get_helperILj0EP16TfLiteConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 800a19e:	4603      	mov	r3, r0
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	3708      	adds	r7, #8
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	bd80      	pop	{r7, pc}

0800a1a8 <_ZNSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b082      	sub	sp, #8
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	f000 f93c 	bl	800a430 <_ZSt3getILj1EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800a1b8:	4603      	mov	r3, r0
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	3708      	adds	r7, #8
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bd80      	pop	{r7, pc}

0800a1c2 <_ZNSt5tupleIJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 800a1c2:	b5b0      	push	{r4, r5, r7, lr}
 800a1c4:	b084      	sub	sp, #16
 800a1c6:	af00      	add	r7, sp, #0
 800a1c8:	60f8      	str	r0, [r7, #12]
 800a1ca:	60b9      	str	r1, [r7, #8]
 800a1cc:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 800a1ce:	68fc      	ldr	r4, [r7, #12]
 800a1d0:	68b8      	ldr	r0, [r7, #8]
 800a1d2:	f000 f93a 	bl	800a44a <_ZSt7forwardIRP16TfLiteConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800a1d6:	4605      	mov	r5, r0
 800a1d8:	6878      	ldr	r0, [r7, #4]
 800a1da:	f7ff fcee 	bl	8009bba <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800a1de:	4603      	mov	r3, r0
 800a1e0:	461a      	mov	r2, r3
 800a1e2:	4629      	mov	r1, r5
 800a1e4:	4620      	mov	r0, r4
 800a1e6:	f000 f93b 	bl	800a460 <_ZNSt11_Tuple_implILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	3710      	adds	r7, #16
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	bdb0      	pop	{r4, r5, r7, pc}

0800a1f4 <_ZNKSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b082      	sub	sp, #8
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	4618      	mov	r0, r3
 800a200:	f000 f94c 	bl	800a49c <_ZSt3getILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 800a204:	4603      	mov	r3, r0
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	4618      	mov	r0, r3
 800a20a:	3708      	adds	r7, #8
 800a20c:	46bd      	mov	sp, r7
 800a20e:	bd80      	pop	{r7, pc}

0800a210 <_ZSt3getILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 800a210:	b580      	push	{r7, lr}
 800a212:	b082      	sub	sp, #8
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	4618      	mov	r0, r3
 800a21c:	f000 f94b 	bl	800a4b6 <_ZSt12__get_helperILj0EP25TfLiteDepthwiseConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 800a220:	4603      	mov	r3, r0
 800a222:	4618      	mov	r0, r3
 800a224:	3708      	adds	r7, #8
 800a226:	46bd      	mov	sp, r7
 800a228:	bd80      	pop	{r7, pc}

0800a22a <_ZNSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 800a22a:	b580      	push	{r7, lr}
 800a22c:	b082      	sub	sp, #8
 800a22e:	af00      	add	r7, sp, #0
 800a230:	6078      	str	r0, [r7, #4]
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	4618      	mov	r0, r3
 800a236:	f000 f94a 	bl	800a4ce <_ZSt3getILj1EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800a23a:	4603      	mov	r3, r0
 800a23c:	4618      	mov	r0, r3
 800a23e:	3708      	adds	r7, #8
 800a240:	46bd      	mov	sp, r7
 800a242:	bd80      	pop	{r7, pc}

0800a244 <_ZNSt5tupleIJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 800a244:	b5b0      	push	{r4, r5, r7, lr}
 800a246:	b084      	sub	sp, #16
 800a248:	af00      	add	r7, sp, #0
 800a24a:	60f8      	str	r0, [r7, #12]
 800a24c:	60b9      	str	r1, [r7, #8]
 800a24e:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 800a250:	68fc      	ldr	r4, [r7, #12]
 800a252:	68b8      	ldr	r0, [r7, #8]
 800a254:	f000 f948 	bl	800a4e8 <_ZSt7forwardIRP25TfLiteDepthwiseConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800a258:	4605      	mov	r5, r0
 800a25a:	6878      	ldr	r0, [r7, #4]
 800a25c:	f7ff fcad 	bl	8009bba <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800a260:	4603      	mov	r3, r0
 800a262:	461a      	mov	r2, r3
 800a264:	4629      	mov	r1, r5
 800a266:	4620      	mov	r0, r4
 800a268:	f000 f949 	bl	800a4fe <_ZNSt11_Tuple_implILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	4618      	mov	r0, r3
 800a270:	3710      	adds	r7, #16
 800a272:	46bd      	mov	sp, r7
 800a274:	bdb0      	pop	{r4, r5, r7, pc}

0800a276 <_ZNKSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 800a276:	b580      	push	{r7, lr}
 800a278:	b082      	sub	sp, #8
 800a27a:	af00      	add	r7, sp, #0
 800a27c:	6078      	str	r0, [r7, #4]
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	4618      	mov	r0, r3
 800a282:	f000 f95a 	bl	800a53a <_ZSt3getILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 800a286:	4603      	mov	r3, r0
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	4618      	mov	r0, r3
 800a28c:	3708      	adds	r7, #8
 800a28e:	46bd      	mov	sp, r7
 800a290:	bd80      	pop	{r7, pc}

0800a292 <_ZSt3getILj0EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 800a292:	b580      	push	{r7, lr}
 800a294:	b082      	sub	sp, #8
 800a296:	af00      	add	r7, sp, #0
 800a298:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	4618      	mov	r0, r3
 800a29e:	f000 f959 	bl	800a554 <_ZSt12__get_helperILj0EP16TfLitePoolParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	3708      	adds	r7, #8
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	bd80      	pop	{r7, pc}

0800a2ac <_ZNSt15__uniq_ptr_implI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b082      	sub	sp, #8
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	f000 f958 	bl	800a56c <_ZSt3getILj1EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	4618      	mov	r0, r3
 800a2c0:	3708      	adds	r7, #8
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	bd80      	pop	{r7, pc}

0800a2c6 <_ZNSt5tupleIJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 800a2c6:	b5b0      	push	{r4, r5, r7, lr}
 800a2c8:	b084      	sub	sp, #16
 800a2ca:	af00      	add	r7, sp, #0
 800a2cc:	60f8      	str	r0, [r7, #12]
 800a2ce:	60b9      	str	r1, [r7, #8]
 800a2d0:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 800a2d2:	68fc      	ldr	r4, [r7, #12]
 800a2d4:	68b8      	ldr	r0, [r7, #8]
 800a2d6:	f000 f956 	bl	800a586 <_ZSt7forwardIRP16TfLitePoolParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800a2da:	4605      	mov	r5, r0
 800a2dc:	6878      	ldr	r0, [r7, #4]
 800a2de:	f7ff fc6c 	bl	8009bba <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800a2e2:	4603      	mov	r3, r0
 800a2e4:	461a      	mov	r2, r3
 800a2e6:	4629      	mov	r1, r5
 800a2e8:	4620      	mov	r0, r4
 800a2ea:	f000 f957 	bl	800a59c <_ZNSt11_Tuple_implILj0EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	3710      	adds	r7, #16
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	bdb0      	pop	{r4, r5, r7, pc}

0800a2f8 <_ZNKSt15__uniq_ptr_implI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b082      	sub	sp, #8
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	4618      	mov	r0, r3
 800a304:	f000 f968 	bl	800a5d8 <_ZSt3getILj0EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 800a308:	4603      	mov	r3, r0
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	4618      	mov	r0, r3
 800a30e:	3708      	adds	r7, #8
 800a310:	46bd      	mov	sp, r7
 800a312:	bd80      	pop	{r7, pc}

0800a314 <_ZSt3getILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 800a314:	b580      	push	{r7, lr}
 800a316:	b082      	sub	sp, #8
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	4618      	mov	r0, r3
 800a320:	f000 f967 	bl	800a5f2 <_ZSt12__get_helperILj0EP19TfLiteReshapeParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 800a324:	4603      	mov	r3, r0
 800a326:	4618      	mov	r0, r3
 800a328:	3708      	adds	r7, #8
 800a32a:	46bd      	mov	sp, r7
 800a32c:	bd80      	pop	{r7, pc}

0800a32e <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 800a32e:	b580      	push	{r7, lr}
 800a330:	b082      	sub	sp, #8
 800a332:	af00      	add	r7, sp, #0
 800a334:	6078      	str	r0, [r7, #4]
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	4618      	mov	r0, r3
 800a33a:	f000 f966 	bl	800a60a <_ZSt3getILj1EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800a33e:	4603      	mov	r3, r0
 800a340:	4618      	mov	r0, r3
 800a342:	3708      	adds	r7, #8
 800a344:	46bd      	mov	sp, r7
 800a346:	bd80      	pop	{r7, pc}

0800a348 <_ZNSt5tupleIJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 800a348:	b5b0      	push	{r4, r5, r7, lr}
 800a34a:	b084      	sub	sp, #16
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	60f8      	str	r0, [r7, #12]
 800a350:	60b9      	str	r1, [r7, #8]
 800a352:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 800a354:	68fc      	ldr	r4, [r7, #12]
 800a356:	68b8      	ldr	r0, [r7, #8]
 800a358:	f000 f964 	bl	800a624 <_ZSt7forwardIRP19TfLiteReshapeParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800a35c:	4605      	mov	r5, r0
 800a35e:	6878      	ldr	r0, [r7, #4]
 800a360:	f7ff fc2b 	bl	8009bba <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800a364:	4603      	mov	r3, r0
 800a366:	461a      	mov	r2, r3
 800a368:	4629      	mov	r1, r5
 800a36a:	4620      	mov	r0, r4
 800a36c:	f000 f965 	bl	800a63a <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	4618      	mov	r0, r3
 800a374:	3710      	adds	r7, #16
 800a376:	46bd      	mov	sp, r7
 800a378:	bdb0      	pop	{r4, r5, r7, pc}

0800a37a <_ZNKSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 800a37a:	b580      	push	{r7, lr}
 800a37c:	b082      	sub	sp, #8
 800a37e:	af00      	add	r7, sp, #0
 800a380:	6078      	str	r0, [r7, #4]
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	4618      	mov	r0, r3
 800a386:	f000 f976 	bl	800a676 <_ZSt3getILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 800a38a:	4603      	mov	r3, r0
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	4618      	mov	r0, r3
 800a390:	3708      	adds	r7, #8
 800a392:	46bd      	mov	sp, r7
 800a394:	bd80      	pop	{r7, pc}

0800a396 <_ZSt3getILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 800a396:	b580      	push	{r7, lr}
 800a398:	b082      	sub	sp, #8
 800a39a:	af00      	add	r7, sp, #0
 800a39c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	f000 f975 	bl	800a690 <_ZSt12__get_helperILj0EP19TfLiteSoftmaxParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	3708      	adds	r7, #8
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	bd80      	pop	{r7, pc}

0800a3b0 <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b082      	sub	sp, #8
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	f000 f974 	bl	800a6a8 <_ZSt3getILj1EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800a3c0:	4603      	mov	r3, r0
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	3708      	adds	r7, #8
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	bd80      	pop	{r7, pc}

0800a3ca <_ZNSt5tupleIJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 800a3ca:	b5b0      	push	{r4, r5, r7, lr}
 800a3cc:	b084      	sub	sp, #16
 800a3ce:	af00      	add	r7, sp, #0
 800a3d0:	60f8      	str	r0, [r7, #12]
 800a3d2:	60b9      	str	r1, [r7, #8]
 800a3d4:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 800a3d6:	68fc      	ldr	r4, [r7, #12]
 800a3d8:	68b8      	ldr	r0, [r7, #8]
 800a3da:	f000 f972 	bl	800a6c2 <_ZSt7forwardIRP19TfLiteSoftmaxParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800a3de:	4605      	mov	r5, r0
 800a3e0:	6878      	ldr	r0, [r7, #4]
 800a3e2:	f7ff fbea 	bl	8009bba <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800a3e6:	4603      	mov	r3, r0
 800a3e8:	461a      	mov	r2, r3
 800a3ea:	4629      	mov	r1, r5
 800a3ec:	4620      	mov	r0, r4
 800a3ee:	f000 f973 	bl	800a6d8 <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	3710      	adds	r7, #16
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	bdb0      	pop	{r4, r5, r7, pc}

0800a3fc <_ZNKSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b082      	sub	sp, #8
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	4618      	mov	r0, r3
 800a408:	f000 f984 	bl	800a714 <_ZSt3getILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 800a40c:	4603      	mov	r3, r0
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	4618      	mov	r0, r3
 800a412:	3708      	adds	r7, #8
 800a414:	46bd      	mov	sp, r7
 800a416:	bd80      	pop	{r7, pc}

0800a418 <_ZSt12__get_helperILj0EP16TfLiteConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800a418:	b580      	push	{r7, lr}
 800a41a:	b082      	sub	sp, #8
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800a420:	6878      	ldr	r0, [r7, #4]
 800a422:	f000 f9a3 	bl	800a76c <_ZNSt11_Tuple_implILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 800a426:	4603      	mov	r3, r0
 800a428:	4618      	mov	r0, r3
 800a42a:	3708      	adds	r7, #8
 800a42c:	46bd      	mov	sp, r7
 800a42e:	bd80      	pop	{r7, pc}

0800a430 <_ZSt3getILj1EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 800a430:	b580      	push	{r7, lr}
 800a432:	b082      	sub	sp, #8
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	4618      	mov	r0, r3
 800a43c:	f000 f977 	bl	800a72e <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800a440:	4603      	mov	r3, r0
 800a442:	4618      	mov	r0, r3
 800a444:	3708      	adds	r7, #8
 800a446:	46bd      	mov	sp, r7
 800a448:	bd80      	pop	{r7, pc}

0800a44a <_ZSt7forwardIRP16TfLiteConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800a44a:	b480      	push	{r7}
 800a44c:	b083      	sub	sp, #12
 800a44e:	af00      	add	r7, sp, #0
 800a450:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	4618      	mov	r0, r3
 800a456:	370c      	adds	r7, #12
 800a458:	46bd      	mov	sp, r7
 800a45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45e:	4770      	bx	lr

0800a460 <_ZNSt11_Tuple_implILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 800a460:	b590      	push	{r4, r7, lr}
 800a462:	b085      	sub	sp, #20
 800a464:	af00      	add	r7, sp, #0
 800a466:	60f8      	str	r0, [r7, #12]
 800a468:	60b9      	str	r1, [r7, #8]
 800a46a:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 800a46c:	68fc      	ldr	r4, [r7, #12]
 800a46e:	6878      	ldr	r0, [r7, #4]
 800a470:	f7ff fba3 	bl	8009bba <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800a474:	4603      	mov	r3, r0
 800a476:	4619      	mov	r1, r3
 800a478:	4620      	mov	r0, r4
 800a47a:	f000 f964 	bl	800a746 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	1d1c      	adds	r4, r3, #4
 800a482:	68b8      	ldr	r0, [r7, #8]
 800a484:	f7ff ffe1 	bl	800a44a <_ZSt7forwardIRP16TfLiteConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800a488:	4603      	mov	r3, r0
 800a48a:	4619      	mov	r1, r3
 800a48c:	4620      	mov	r0, r4
 800a48e:	f000 f97b 	bl	800a788 <_ZNSt10_Head_baseILj0EP16TfLiteConvParamsLb0EEC1IRS1_EEOT_>
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	4618      	mov	r0, r3
 800a496:	3714      	adds	r7, #20
 800a498:	46bd      	mov	sp, r7
 800a49a:	bd90      	pop	{r4, r7, pc}

0800a49c <_ZSt3getILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:

  /// Return a const reference to the ith element of a const tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b082      	sub	sp, #8
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	f000 f97f 	bl	800a7aa <_ZSt12__get_helperILj0EP16TfLiteConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	3708      	adds	r7, #8
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	bd80      	pop	{r7, pc}

0800a4b6 <_ZSt12__get_helperILj0EP25TfLiteDepthwiseConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800a4b6:	b580      	push	{r7, lr}
 800a4b8:	b082      	sub	sp, #8
 800a4ba:	af00      	add	r7, sp, #0
 800a4bc:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	f000 f97f 	bl	800a7c2 <_ZNSt11_Tuple_implILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	3708      	adds	r7, #8
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	bd80      	pop	{r7, pc}

0800a4ce <_ZSt3getILj1EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 800a4ce:	b580      	push	{r7, lr}
 800a4d0:	b082      	sub	sp, #8
 800a4d2:	af00      	add	r7, sp, #0
 800a4d4:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	4618      	mov	r0, r3
 800a4da:	f000 f928 	bl	800a72e <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800a4de:	4603      	mov	r3, r0
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	3708      	adds	r7, #8
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	bd80      	pop	{r7, pc}

0800a4e8 <_ZSt7forwardIRP25TfLiteDepthwiseConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800a4e8:	b480      	push	{r7}
 800a4ea:	b083      	sub	sp, #12
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	370c      	adds	r7, #12
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fc:	4770      	bx	lr

0800a4fe <_ZNSt11_Tuple_implILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 800a4fe:	b590      	push	{r4, r7, lr}
 800a500:	b085      	sub	sp, #20
 800a502:	af00      	add	r7, sp, #0
 800a504:	60f8      	str	r0, [r7, #12]
 800a506:	60b9      	str	r1, [r7, #8]
 800a508:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 800a50a:	68fc      	ldr	r4, [r7, #12]
 800a50c:	6878      	ldr	r0, [r7, #4]
 800a50e:	f7ff fb54 	bl	8009bba <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800a512:	4603      	mov	r3, r0
 800a514:	4619      	mov	r1, r3
 800a516:	4620      	mov	r0, r4
 800a518:	f000 f915 	bl	800a746 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	1d1c      	adds	r4, r3, #4
 800a520:	68b8      	ldr	r0, [r7, #8]
 800a522:	f7ff ffe1 	bl	800a4e8 <_ZSt7forwardIRP25TfLiteDepthwiseConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800a526:	4603      	mov	r3, r0
 800a528:	4619      	mov	r1, r3
 800a52a:	4620      	mov	r0, r4
 800a52c:	f000 f957 	bl	800a7de <_ZNSt10_Head_baseILj0EP25TfLiteDepthwiseConvParamsLb0EEC1IRS1_EEOT_>
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	4618      	mov	r0, r3
 800a534:	3714      	adds	r7, #20
 800a536:	46bd      	mov	sp, r7
 800a538:	bd90      	pop	{r4, r7, pc}

0800a53a <_ZSt3getILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 800a53a:	b580      	push	{r7, lr}
 800a53c:	b082      	sub	sp, #8
 800a53e:	af00      	add	r7, sp, #0
 800a540:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	4618      	mov	r0, r3
 800a546:	f000 f95b 	bl	800a800 <_ZSt12__get_helperILj0EP25TfLiteDepthwiseConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 800a54a:	4603      	mov	r3, r0
 800a54c:	4618      	mov	r0, r3
 800a54e:	3708      	adds	r7, #8
 800a550:	46bd      	mov	sp, r7
 800a552:	bd80      	pop	{r7, pc}

0800a554 <_ZSt12__get_helperILj0EP16TfLitePoolParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800a554:	b580      	push	{r7, lr}
 800a556:	b082      	sub	sp, #8
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	f000 f95b 	bl	800a818 <_ZNSt11_Tuple_implILj0EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 800a562:	4603      	mov	r3, r0
 800a564:	4618      	mov	r0, r3
 800a566:	3708      	adds	r7, #8
 800a568:	46bd      	mov	sp, r7
 800a56a:	bd80      	pop	{r7, pc}

0800a56c <_ZSt3getILj1EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b082      	sub	sp, #8
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	4618      	mov	r0, r3
 800a578:	f000 f8d9 	bl	800a72e <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800a57c:	4603      	mov	r3, r0
 800a57e:	4618      	mov	r0, r3
 800a580:	3708      	adds	r7, #8
 800a582:	46bd      	mov	sp, r7
 800a584:	bd80      	pop	{r7, pc}

0800a586 <_ZSt7forwardIRP16TfLitePoolParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800a586:	b480      	push	{r7}
 800a588:	b083      	sub	sp, #12
 800a58a:	af00      	add	r7, sp, #0
 800a58c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	4618      	mov	r0, r3
 800a592:	370c      	adds	r7, #12
 800a594:	46bd      	mov	sp, r7
 800a596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59a:	4770      	bx	lr

0800a59c <_ZNSt11_Tuple_implILj0EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 800a59c:	b590      	push	{r4, r7, lr}
 800a59e:	b085      	sub	sp, #20
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	60f8      	str	r0, [r7, #12]
 800a5a4:	60b9      	str	r1, [r7, #8]
 800a5a6:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 800a5a8:	68fc      	ldr	r4, [r7, #12]
 800a5aa:	6878      	ldr	r0, [r7, #4]
 800a5ac:	f7ff fb05 	bl	8009bba <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	4619      	mov	r1, r3
 800a5b4:	4620      	mov	r0, r4
 800a5b6:	f000 f8c6 	bl	800a746 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	1d1c      	adds	r4, r3, #4
 800a5be:	68b8      	ldr	r0, [r7, #8]
 800a5c0:	f7ff ffe1 	bl	800a586 <_ZSt7forwardIRP16TfLitePoolParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800a5c4:	4603      	mov	r3, r0
 800a5c6:	4619      	mov	r1, r3
 800a5c8:	4620      	mov	r0, r4
 800a5ca:	f000 f933 	bl	800a834 <_ZNSt10_Head_baseILj0EP16TfLitePoolParamsLb0EEC1IRS1_EEOT_>
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	3714      	adds	r7, #20
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	bd90      	pop	{r4, r7, pc}

0800a5d8 <_ZSt3getILj0EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b082      	sub	sp, #8
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	f000 f937 	bl	800a856 <_ZSt12__get_helperILj0EP16TfLitePoolParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	3708      	adds	r7, #8
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	bd80      	pop	{r7, pc}

0800a5f2 <_ZSt12__get_helperILj0EP19TfLiteReshapeParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800a5f2:	b580      	push	{r7, lr}
 800a5f4:	b082      	sub	sp, #8
 800a5f6:	af00      	add	r7, sp, #0
 800a5f8:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800a5fa:	6878      	ldr	r0, [r7, #4]
 800a5fc:	f000 f937 	bl	800a86e <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 800a600:	4603      	mov	r3, r0
 800a602:	4618      	mov	r0, r3
 800a604:	3708      	adds	r7, #8
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}

0800a60a <_ZSt3getILj1EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 800a60a:	b580      	push	{r7, lr}
 800a60c:	b082      	sub	sp, #8
 800a60e:	af00      	add	r7, sp, #0
 800a610:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	4618      	mov	r0, r3
 800a616:	f000 f88a 	bl	800a72e <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800a61a:	4603      	mov	r3, r0
 800a61c:	4618      	mov	r0, r3
 800a61e:	3708      	adds	r7, #8
 800a620:	46bd      	mov	sp, r7
 800a622:	bd80      	pop	{r7, pc}

0800a624 <_ZSt7forwardIRP19TfLiteReshapeParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800a624:	b480      	push	{r7}
 800a626:	b083      	sub	sp, #12
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	4618      	mov	r0, r3
 800a630:	370c      	adds	r7, #12
 800a632:	46bd      	mov	sp, r7
 800a634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a638:	4770      	bx	lr

0800a63a <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 800a63a:	b590      	push	{r4, r7, lr}
 800a63c:	b085      	sub	sp, #20
 800a63e:	af00      	add	r7, sp, #0
 800a640:	60f8      	str	r0, [r7, #12]
 800a642:	60b9      	str	r1, [r7, #8]
 800a644:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 800a646:	68fc      	ldr	r4, [r7, #12]
 800a648:	6878      	ldr	r0, [r7, #4]
 800a64a:	f7ff fab6 	bl	8009bba <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800a64e:	4603      	mov	r3, r0
 800a650:	4619      	mov	r1, r3
 800a652:	4620      	mov	r0, r4
 800a654:	f000 f877 	bl	800a746 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	1d1c      	adds	r4, r3, #4
 800a65c:	68b8      	ldr	r0, [r7, #8]
 800a65e:	f7ff ffe1 	bl	800a624 <_ZSt7forwardIRP19TfLiteReshapeParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800a662:	4603      	mov	r3, r0
 800a664:	4619      	mov	r1, r3
 800a666:	4620      	mov	r0, r4
 800a668:	f000 f90f 	bl	800a88a <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EEC1IRS1_EEOT_>
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	4618      	mov	r0, r3
 800a670:	3714      	adds	r7, #20
 800a672:	46bd      	mov	sp, r7
 800a674:	bd90      	pop	{r4, r7, pc}

0800a676 <_ZSt3getILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 800a676:	b580      	push	{r7, lr}
 800a678:	b082      	sub	sp, #8
 800a67a:	af00      	add	r7, sp, #0
 800a67c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	4618      	mov	r0, r3
 800a682:	f000 f913 	bl	800a8ac <_ZSt12__get_helperILj0EP19TfLiteReshapeParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 800a686:	4603      	mov	r3, r0
 800a688:	4618      	mov	r0, r3
 800a68a:	3708      	adds	r7, #8
 800a68c:	46bd      	mov	sp, r7
 800a68e:	bd80      	pop	{r7, pc}

0800a690 <_ZSt12__get_helperILj0EP19TfLiteSoftmaxParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800a690:	b580      	push	{r7, lr}
 800a692:	b082      	sub	sp, #8
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800a698:	6878      	ldr	r0, [r7, #4]
 800a69a:	f000 f913 	bl	800a8c4 <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 800a69e:	4603      	mov	r3, r0
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	3708      	adds	r7, #8
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	bd80      	pop	{r7, pc}

0800a6a8 <_ZSt3getILj1EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b082      	sub	sp, #8
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	f000 f83b 	bl	800a72e <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800a6b8:	4603      	mov	r3, r0
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	3708      	adds	r7, #8
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	bd80      	pop	{r7, pc}

0800a6c2 <_ZSt7forwardIRP19TfLiteSoftmaxParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800a6c2:	b480      	push	{r7}
 800a6c4:	b083      	sub	sp, #12
 800a6c6:	af00      	add	r7, sp, #0
 800a6c8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	370c      	adds	r7, #12
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d6:	4770      	bx	lr

0800a6d8 <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 800a6d8:	b590      	push	{r4, r7, lr}
 800a6da:	b085      	sub	sp, #20
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	60f8      	str	r0, [r7, #12]
 800a6e0:	60b9      	str	r1, [r7, #8]
 800a6e2:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 800a6e4:	68fc      	ldr	r4, [r7, #12]
 800a6e6:	6878      	ldr	r0, [r7, #4]
 800a6e8:	f7ff fa67 	bl	8009bba <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800a6ec:	4603      	mov	r3, r0
 800a6ee:	4619      	mov	r1, r3
 800a6f0:	4620      	mov	r0, r4
 800a6f2:	f000 f828 	bl	800a746 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	1d1c      	adds	r4, r3, #4
 800a6fa:	68b8      	ldr	r0, [r7, #8]
 800a6fc:	f7ff ffe1 	bl	800a6c2 <_ZSt7forwardIRP19TfLiteSoftmaxParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800a700:	4603      	mov	r3, r0
 800a702:	4619      	mov	r1, r3
 800a704:	4620      	mov	r0, r4
 800a706:	f000 f8eb 	bl	800a8e0 <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EEC1IRS1_EEOT_>
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	4618      	mov	r0, r3
 800a70e:	3714      	adds	r7, #20
 800a710:	46bd      	mov	sp, r7
 800a712:	bd90      	pop	{r4, r7, pc}

0800a714 <_ZSt3getILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 800a714:	b580      	push	{r7, lr}
 800a716:	b082      	sub	sp, #8
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	4618      	mov	r0, r3
 800a720:	f000 f8ef 	bl	800a902 <_ZSt12__get_helperILj0EP19TfLiteSoftmaxParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 800a724:	4603      	mov	r3, r0
 800a726:	4618      	mov	r0, r3
 800a728:	3708      	adds	r7, #8
 800a72a:	46bd      	mov	sp, r7
 800a72c:	bd80      	pop	{r7, pc}

0800a72e <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800a72e:	b580      	push	{r7, lr}
 800a730:	b082      	sub	sp, #8
 800a732:	af00      	add	r7, sp, #0
 800a734:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800a736:	6878      	ldr	r0, [r7, #4]
 800a738:	f000 f8ef 	bl	800a91a <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS4_>
 800a73c:	4603      	mov	r3, r0
 800a73e:	4618      	mov	r0, r3
 800a740:	3708      	adds	r7, #8
 800a742:	46bd      	mov	sp, r7
 800a744:	bd80      	pop	{r7, pc}

0800a746 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>:
        constexpr _Tuple_impl(_UHead&& __head)
 800a746:	b590      	push	{r4, r7, lr}
 800a748:	b083      	sub	sp, #12
 800a74a:	af00      	add	r7, sp, #0
 800a74c:	6078      	str	r0, [r7, #4]
 800a74e:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head)) { }
 800a750:	687c      	ldr	r4, [r7, #4]
 800a752:	6838      	ldr	r0, [r7, #0]
 800a754:	f7ff fa31 	bl	8009bba <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800a758:	4603      	mov	r3, r0
 800a75a:	4619      	mov	r1, r3
 800a75c:	4620      	mov	r0, r4
 800a75e:	f000 f8e9 	bl	800a934 <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EEC2IS3_EEOT_>
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	4618      	mov	r0, r3
 800a766:	370c      	adds	r7, #12
 800a768:	46bd      	mov	sp, r7
 800a76a:	bd90      	pop	{r4, r7, pc}

0800a76c <_ZNSt11_Tuple_implILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b082      	sub	sp, #8
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	3304      	adds	r3, #4
 800a778:	4618      	mov	r0, r3
 800a77a:	f000 f8ec 	bl	800a956 <_ZNSt10_Head_baseILj0EP16TfLiteConvParamsLb0EE7_M_headERS2_>
 800a77e:	4603      	mov	r3, r0
 800a780:	4618      	mov	r0, r3
 800a782:	3708      	adds	r7, #8
 800a784:	46bd      	mov	sp, r7
 800a786:	bd80      	pop	{r7, pc}

0800a788 <_ZNSt10_Head_baseILj0EP16TfLiteConvParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 800a788:	b580      	push	{r7, lr}
 800a78a:	b082      	sub	sp, #8
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
 800a790:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800a792:	6838      	ldr	r0, [r7, #0]
 800a794:	f7ff fe59 	bl	800a44a <_ZSt7forwardIRP16TfLiteConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800a798:	4603      	mov	r3, r0
 800a79a:	681a      	ldr	r2, [r3, #0]
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	601a      	str	r2, [r3, #0]
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	3708      	adds	r7, #8
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	bd80      	pop	{r7, pc}

0800a7aa <_ZSt12__get_helperILj0EP16TfLiteConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800a7aa:	b580      	push	{r7, lr}
 800a7ac:	b082      	sub	sp, #8
 800a7ae:	af00      	add	r7, sp, #0
 800a7b0:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800a7b2:	6878      	ldr	r0, [r7, #4]
 800a7b4:	f000 f8da 	bl	800a96c <_ZNSt11_Tuple_implILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 800a7b8:	4603      	mov	r3, r0
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	3708      	adds	r7, #8
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	bd80      	pop	{r7, pc}

0800a7c2 <_ZNSt11_Tuple_implILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800a7c2:	b580      	push	{r7, lr}
 800a7c4:	b082      	sub	sp, #8
 800a7c6:	af00      	add	r7, sp, #0
 800a7c8:	6078      	str	r0, [r7, #4]
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	3304      	adds	r3, #4
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	f000 f8da 	bl	800a988 <_ZNSt10_Head_baseILj0EP25TfLiteDepthwiseConvParamsLb0EE7_M_headERS2_>
 800a7d4:	4603      	mov	r3, r0
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	3708      	adds	r7, #8
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	bd80      	pop	{r7, pc}

0800a7de <_ZNSt10_Head_baseILj0EP25TfLiteDepthwiseConvParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 800a7de:	b580      	push	{r7, lr}
 800a7e0:	b082      	sub	sp, #8
 800a7e2:	af00      	add	r7, sp, #0
 800a7e4:	6078      	str	r0, [r7, #4]
 800a7e6:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800a7e8:	6838      	ldr	r0, [r7, #0]
 800a7ea:	f7ff fe7d 	bl	800a4e8 <_ZSt7forwardIRP25TfLiteDepthwiseConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800a7ee:	4603      	mov	r3, r0
 800a7f0:	681a      	ldr	r2, [r3, #0]
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	601a      	str	r2, [r3, #0]
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	3708      	adds	r7, #8
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	bd80      	pop	{r7, pc}

0800a800 <_ZSt12__get_helperILj0EP25TfLiteDepthwiseConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800a800:	b580      	push	{r7, lr}
 800a802:	b082      	sub	sp, #8
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800a808:	6878      	ldr	r0, [r7, #4]
 800a80a:	f000 f8c8 	bl	800a99e <_ZNSt11_Tuple_implILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 800a80e:	4603      	mov	r3, r0
 800a810:	4618      	mov	r0, r3
 800a812:	3708      	adds	r7, #8
 800a814:	46bd      	mov	sp, r7
 800a816:	bd80      	pop	{r7, pc}

0800a818 <_ZNSt11_Tuple_implILj0EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800a818:	b580      	push	{r7, lr}
 800a81a:	b082      	sub	sp, #8
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	3304      	adds	r3, #4
 800a824:	4618      	mov	r0, r3
 800a826:	f000 f8c8 	bl	800a9ba <_ZNSt10_Head_baseILj0EP16TfLitePoolParamsLb0EE7_M_headERS2_>
 800a82a:	4603      	mov	r3, r0
 800a82c:	4618      	mov	r0, r3
 800a82e:	3708      	adds	r7, #8
 800a830:	46bd      	mov	sp, r7
 800a832:	bd80      	pop	{r7, pc}

0800a834 <_ZNSt10_Head_baseILj0EP16TfLitePoolParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 800a834:	b580      	push	{r7, lr}
 800a836:	b082      	sub	sp, #8
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
 800a83c:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800a83e:	6838      	ldr	r0, [r7, #0]
 800a840:	f7ff fea1 	bl	800a586 <_ZSt7forwardIRP16TfLitePoolParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800a844:	4603      	mov	r3, r0
 800a846:	681a      	ldr	r2, [r3, #0]
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	601a      	str	r2, [r3, #0]
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	4618      	mov	r0, r3
 800a850:	3708      	adds	r7, #8
 800a852:	46bd      	mov	sp, r7
 800a854:	bd80      	pop	{r7, pc}

0800a856 <_ZSt12__get_helperILj0EP16TfLitePoolParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800a856:	b580      	push	{r7, lr}
 800a858:	b082      	sub	sp, #8
 800a85a:	af00      	add	r7, sp, #0
 800a85c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800a85e:	6878      	ldr	r0, [r7, #4]
 800a860:	f000 f8b6 	bl	800a9d0 <_ZNSt11_Tuple_implILj0EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 800a864:	4603      	mov	r3, r0
 800a866:	4618      	mov	r0, r3
 800a868:	3708      	adds	r7, #8
 800a86a:	46bd      	mov	sp, r7
 800a86c:	bd80      	pop	{r7, pc}

0800a86e <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800a86e:	b580      	push	{r7, lr}
 800a870:	b082      	sub	sp, #8
 800a872:	af00      	add	r7, sp, #0
 800a874:	6078      	str	r0, [r7, #4]
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	3304      	adds	r3, #4
 800a87a:	4618      	mov	r0, r3
 800a87c:	f000 f8b6 	bl	800a9ec <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EE7_M_headERS2_>
 800a880:	4603      	mov	r3, r0
 800a882:	4618      	mov	r0, r3
 800a884:	3708      	adds	r7, #8
 800a886:	46bd      	mov	sp, r7
 800a888:	bd80      	pop	{r7, pc}

0800a88a <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 800a88a:	b580      	push	{r7, lr}
 800a88c:	b082      	sub	sp, #8
 800a88e:	af00      	add	r7, sp, #0
 800a890:	6078      	str	r0, [r7, #4]
 800a892:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800a894:	6838      	ldr	r0, [r7, #0]
 800a896:	f7ff fec5 	bl	800a624 <_ZSt7forwardIRP19TfLiteReshapeParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800a89a:	4603      	mov	r3, r0
 800a89c:	681a      	ldr	r2, [r3, #0]
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	601a      	str	r2, [r3, #0]
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	3708      	adds	r7, #8
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	bd80      	pop	{r7, pc}

0800a8ac <_ZSt12__get_helperILj0EP19TfLiteReshapeParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b082      	sub	sp, #8
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800a8b4:	6878      	ldr	r0, [r7, #4]
 800a8b6:	f000 f8a4 	bl	800aa02 <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 800a8ba:	4603      	mov	r3, r0
 800a8bc:	4618      	mov	r0, r3
 800a8be:	3708      	adds	r7, #8
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	bd80      	pop	{r7, pc}

0800a8c4 <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b082      	sub	sp, #8
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	3304      	adds	r3, #4
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	f000 f8a4 	bl	800aa1e <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EE7_M_headERS2_>
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	4618      	mov	r0, r3
 800a8da:	3708      	adds	r7, #8
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	bd80      	pop	{r7, pc}

0800a8e0 <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b082      	sub	sp, #8
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
 800a8e8:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800a8ea:	6838      	ldr	r0, [r7, #0]
 800a8ec:	f7ff fee9 	bl	800a6c2 <_ZSt7forwardIRP19TfLiteSoftmaxParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800a8f0:	4603      	mov	r3, r0
 800a8f2:	681a      	ldr	r2, [r3, #0]
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	601a      	str	r2, [r3, #0]
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	3708      	adds	r7, #8
 800a8fe:	46bd      	mov	sp, r7
 800a900:	bd80      	pop	{r7, pc}

0800a902 <_ZSt12__get_helperILj0EP19TfLiteSoftmaxParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800a902:	b580      	push	{r7, lr}
 800a904:	b082      	sub	sp, #8
 800a906:	af00      	add	r7, sp, #0
 800a908:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800a90a:	6878      	ldr	r0, [r7, #4]
 800a90c:	f000 f892 	bl	800aa34 <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 800a910:	4603      	mov	r3, r0
 800a912:	4618      	mov	r0, r3
 800a914:	3708      	adds	r7, #8
 800a916:	46bd      	mov	sp, r7
 800a918:	bd80      	pop	{r7, pc}

0800a91a <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800a91a:	b580      	push	{r7, lr}
 800a91c:	b082      	sub	sp, #8
 800a91e:	af00      	add	r7, sp, #0
 800a920:	6078      	str	r0, [r7, #4]
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	4618      	mov	r0, r3
 800a926:	f000 f893 	bl	800aa50 <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EE7_M_headERS4_>
 800a92a:	4603      	mov	r3, r0
 800a92c:	4618      	mov	r0, r3
 800a92e:	3708      	adds	r7, #8
 800a930:	46bd      	mov	sp, r7
 800a932:	bd80      	pop	{r7, pc}

0800a934 <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EEC2IS3_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 800a934:	b580      	push	{r7, lr}
 800a936:	b082      	sub	sp, #8
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
 800a93c:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800a93e:	6838      	ldr	r0, [r7, #0]
 800a940:	f7ff f93b 	bl	8009bba <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800a944:	4602      	mov	r2, r0
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	6812      	ldr	r2, [r2, #0]
 800a94a:	601a      	str	r2, [r3, #0]
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	4618      	mov	r0, r3
 800a950:	3708      	adds	r7, #8
 800a952:	46bd      	mov	sp, r7
 800a954:	bd80      	pop	{r7, pc}

0800a956 <_ZNSt10_Head_baseILj0EP16TfLiteConvParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800a956:	b480      	push	{r7}
 800a958:	b083      	sub	sp, #12
 800a95a:	af00      	add	r7, sp, #0
 800a95c:	6078      	str	r0, [r7, #4]
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	4618      	mov	r0, r3
 800a962:	370c      	adds	r7, #12
 800a964:	46bd      	mov	sp, r7
 800a966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96a:	4770      	bx	lr

0800a96c <_ZNSt11_Tuple_implILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b082      	sub	sp, #8
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	3304      	adds	r3, #4
 800a978:	4618      	mov	r0, r3
 800a97a:	f000 f874 	bl	800aa66 <_ZNSt10_Head_baseILj0EP16TfLiteConvParamsLb0EE7_M_headERKS2_>
 800a97e:	4603      	mov	r3, r0
 800a980:	4618      	mov	r0, r3
 800a982:	3708      	adds	r7, #8
 800a984:	46bd      	mov	sp, r7
 800a986:	bd80      	pop	{r7, pc}

0800a988 <_ZNSt10_Head_baseILj0EP25TfLiteDepthwiseConvParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800a988:	b480      	push	{r7}
 800a98a:	b083      	sub	sp, #12
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	4618      	mov	r0, r3
 800a994:	370c      	adds	r7, #12
 800a996:	46bd      	mov	sp, r7
 800a998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99c:	4770      	bx	lr

0800a99e <_ZNSt11_Tuple_implILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800a99e:	b580      	push	{r7, lr}
 800a9a0:	b082      	sub	sp, #8
 800a9a2:	af00      	add	r7, sp, #0
 800a9a4:	6078      	str	r0, [r7, #4]
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	3304      	adds	r3, #4
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	f000 f866 	bl	800aa7c <_ZNSt10_Head_baseILj0EP25TfLiteDepthwiseConvParamsLb0EE7_M_headERKS2_>
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	3708      	adds	r7, #8
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	bd80      	pop	{r7, pc}

0800a9ba <_ZNSt10_Head_baseILj0EP16TfLitePoolParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800a9ba:	b480      	push	{r7}
 800a9bc:	b083      	sub	sp, #12
 800a9be:	af00      	add	r7, sp, #0
 800a9c0:	6078      	str	r0, [r7, #4]
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	370c      	adds	r7, #12
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ce:	4770      	bx	lr

0800a9d0 <_ZNSt11_Tuple_implILj0EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b082      	sub	sp, #8
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	3304      	adds	r3, #4
 800a9dc:	4618      	mov	r0, r3
 800a9de:	f000 f858 	bl	800aa92 <_ZNSt10_Head_baseILj0EP16TfLitePoolParamsLb0EE7_M_headERKS2_>
 800a9e2:	4603      	mov	r3, r0
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	3708      	adds	r7, #8
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	bd80      	pop	{r7, pc}

0800a9ec <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800a9ec:	b480      	push	{r7}
 800a9ee:	b083      	sub	sp, #12
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	370c      	adds	r7, #12
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa00:	4770      	bx	lr

0800aa02 <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800aa02:	b580      	push	{r7, lr}
 800aa04:	b082      	sub	sp, #8
 800aa06:	af00      	add	r7, sp, #0
 800aa08:	6078      	str	r0, [r7, #4]
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	3304      	adds	r3, #4
 800aa0e:	4618      	mov	r0, r3
 800aa10:	f000 f84a 	bl	800aaa8 <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EE7_M_headERKS2_>
 800aa14:	4603      	mov	r3, r0
 800aa16:	4618      	mov	r0, r3
 800aa18:	3708      	adds	r7, #8
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bd80      	pop	{r7, pc}

0800aa1e <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800aa1e:	b480      	push	{r7}
 800aa20:	b083      	sub	sp, #12
 800aa22:	af00      	add	r7, sp, #0
 800aa24:	6078      	str	r0, [r7, #4]
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	4618      	mov	r0, r3
 800aa2a:	370c      	adds	r7, #12
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa32:	4770      	bx	lr

0800aa34 <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b082      	sub	sp, #8
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	3304      	adds	r3, #4
 800aa40:	4618      	mov	r0, r3
 800aa42:	f000 f83c 	bl	800aabe <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EE7_M_headERKS2_>
 800aa46:	4603      	mov	r3, r0
 800aa48:	4618      	mov	r0, r3
 800aa4a:	3708      	adds	r7, #8
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	bd80      	pop	{r7, pc}

0800aa50 <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800aa50:	b480      	push	{r7}
 800aa52:	b083      	sub	sp, #12
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	370c      	adds	r7, #12
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa64:	4770      	bx	lr

0800aa66 <_ZNSt10_Head_baseILj0EP16TfLiteConvParamsLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800aa66:	b480      	push	{r7}
 800aa68:	b083      	sub	sp, #12
 800aa6a:	af00      	add	r7, sp, #0
 800aa6c:	6078      	str	r0, [r7, #4]
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	4618      	mov	r0, r3
 800aa72:	370c      	adds	r7, #12
 800aa74:	46bd      	mov	sp, r7
 800aa76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7a:	4770      	bx	lr

0800aa7c <_ZNSt10_Head_baseILj0EP25TfLiteDepthwiseConvParamsLb0EE7_M_headERKS2_>:
 800aa7c:	b480      	push	{r7}
 800aa7e:	b083      	sub	sp, #12
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	4618      	mov	r0, r3
 800aa88:	370c      	adds	r7, #12
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa90:	4770      	bx	lr

0800aa92 <_ZNSt10_Head_baseILj0EP16TfLitePoolParamsLb0EE7_M_headERKS2_>:
 800aa92:	b480      	push	{r7}
 800aa94:	b083      	sub	sp, #12
 800aa96:	af00      	add	r7, sp, #0
 800aa98:	6078      	str	r0, [r7, #4]
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	370c      	adds	r7, #12
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa6:	4770      	bx	lr

0800aaa8 <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EE7_M_headERKS2_>:
 800aaa8:	b480      	push	{r7}
 800aaaa:	b083      	sub	sp, #12
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	4618      	mov	r0, r3
 800aab4:	370c      	adds	r7, #12
 800aab6:	46bd      	mov	sp, r7
 800aab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aabc:	4770      	bx	lr

0800aabe <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EE7_M_headERKS2_>:
 800aabe:	b480      	push	{r7}
 800aac0:	b083      	sub	sp, #12
 800aac2:	af00      	add	r7, sp, #0
 800aac4:	6078      	str	r0, [r7, #4]
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	4618      	mov	r0, r3
 800aaca:	370c      	adds	r7, #12
 800aacc:	46bd      	mov	sp, r7
 800aace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad2:	4770      	bx	lr

0800aad4 <_ZNK11flatbuffers6String5c_strEv>:
  const char *c_str() const { return reinterpret_cast<const char *>(Data()); }
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b082      	sub	sp, #8
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	4618      	mov	r0, r3
 800aae0:	f000 f8ca 	bl	800ac78 <_ZNK11flatbuffers6VectorIcE4DataEv>
 800aae4:	4603      	mov	r3, r0
 800aae6:	4618      	mov	r0, r3
 800aae8:	3708      	adds	r7, #8
 800aaea:	46bd      	mov	sp, r7
 800aaec:	bd80      	pop	{r7, pc}
	...

0800aaf0 <_ZN6tflite24EnumNamesBuiltinOperatorEv>:
inline const char * const *EnumNamesBuiltinOperator() {
 800aaf0:	b480      	push	{r7}
 800aaf2:	af00      	add	r7, sp, #0
  return names;
 800aaf4:	4b02      	ldr	r3, [pc, #8]	; (800ab00 <_ZN6tflite24EnumNamesBuiltinOperatorEv+0x10>)
}
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafe:	4770      	bx	lr
 800ab00:	0802c6c4 	.word	0x0802c6c4

0800ab04 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>:
inline const char *EnumNameBuiltinOperator(BuiltinOperator e) {
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b084      	sub	sp, #16
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	4603      	mov	r3, r0
 800ab0c:	71fb      	strb	r3, [r7, #7]
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_REDUCE_ALL)) return "";
 800ab0e:	2300      	movs	r3, #0
 800ab10:	72bb      	strb	r3, [r7, #10]
 800ab12:	238c      	movs	r3, #140	; 0x8c
 800ab14:	72fb      	strb	r3, [r7, #11]
 800ab16:	f107 020b 	add.w	r2, r7, #11
 800ab1a:	f107 010a 	add.w	r1, r7, #10
 800ab1e:	1dfb      	adds	r3, r7, #7
 800ab20:	4618      	mov	r0, r3
 800ab22:	f000 f8b5 	bl	800ac90 <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_>
 800ab26:	4603      	mov	r3, r0
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d001      	beq.n	800ab30 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE+0x2c>
 800ab2c:	4b07      	ldr	r3, [pc, #28]	; (800ab4c <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE+0x48>)
 800ab2e:	e008      	b.n	800ab42 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE+0x3e>
  const size_t index = static_cast<size_t>(e);
 800ab30:	79fb      	ldrb	r3, [r7, #7]
 800ab32:	60fb      	str	r3, [r7, #12]
  return EnumNamesBuiltinOperator()[index];
 800ab34:	f7ff ffdc 	bl	800aaf0 <_ZN6tflite24EnumNamesBuiltinOperatorEv>
 800ab38:	4602      	mov	r2, r0
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	009b      	lsls	r3, r3, #2
 800ab3e:	4413      	add	r3, r2
 800ab40:	681b      	ldr	r3, [r3, #0]
}
 800ab42:	4618      	mov	r0, r3
 800ab44:	3710      	adds	r7, #16
 800ab46:	46bd      	mov	sp, r7
 800ab48:	bd80      	pop	{r7, pc}
 800ab4a:	bf00      	nop
 800ab4c:	080276d0 	.word	0x080276d0

0800ab50 <_ZNK6tflite12OperatorCode11custom_codeEv>:
  const flatbuffers::String *custom_code() const {
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b082      	sub	sp, #8
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::String *>(VT_CUSTOM_CODE);
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	2106      	movs	r1, #6
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	f000 f8b2 	bl	800acc6 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>
 800ab62:	4603      	mov	r3, r0
  }
 800ab64:	4618      	mov	r0, r3
 800ab66:	3708      	adds	r7, #8
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	bd80      	pop	{r7, pc}

0800ab6c <_ZNK6tflite12OperatorCode7versionEv>:
  int32_t version() const {
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b082      	sub	sp, #8
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_VERSION, 1);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2201      	movs	r2, #1
 800ab78:	2108      	movs	r1, #8
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	f7fe fcb6 	bl	80094ec <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 800ab80:	4603      	mov	r3, r0
  }
 800ab82:	4618      	mov	r0, r3
 800ab84:	3708      	adds	r7, #8
 800ab86:	46bd      	mov	sp, r7
 800ab88:	bd80      	pop	{r7, pc}
	...

0800ab8c <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration>:

namespace tflite {

TfLiteStatus GetRegistrationFromOpCode(
    const OperatorCode* opcode, const OpResolver& op_resolver,
    ErrorReporter* error_reporter, const TfLiteRegistration** registration) {
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b088      	sub	sp, #32
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	60f8      	str	r0, [r7, #12]
 800ab94:	60b9      	str	r1, [r7, #8]
 800ab96:	607a      	str	r2, [r7, #4]
 800ab98:	603b      	str	r3, [r7, #0]
  TfLiteStatus status = kTfLiteOk;
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	77fb      	strb	r3, [r7, #31]
  *registration = nullptr;
 800ab9e:	683b      	ldr	r3, [r7, #0]
 800aba0:	2200      	movs	r2, #0
 800aba2:	601a      	str	r2, [r3, #0]
  auto builtin_code = GetBuiltinCode(opcode);
 800aba4:	68f8      	ldr	r0, [r7, #12]
 800aba6:	f01a fc90 	bl	80254ca <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>
 800abaa:	4603      	mov	r3, r0
 800abac:	77bb      	strb	r3, [r7, #30]
  int version = opcode->version();
 800abae:	68f8      	ldr	r0, [r7, #12]
 800abb0:	f7ff ffdc 	bl	800ab6c <_ZNK6tflite12OperatorCode7versionEv>
 800abb4:	61b8      	str	r0, [r7, #24]

  if (builtin_code > BuiltinOperator_MAX ||
 800abb6:	7fbb      	ldrb	r3, [r7, #30]
 800abb8:	2b8c      	cmp	r3, #140	; 0x8c
 800abba:	d908      	bls.n	800abce <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x42>
      builtin_code < BuiltinOperator_MIN) {
    TF_LITE_REPORT_ERROR(
 800abbc:	7fbb      	ldrb	r3, [r7, #30]
 800abbe:	461a      	mov	r2, r3
 800abc0:	492a      	ldr	r1, [pc, #168]	; (800ac6c <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xe0>)
 800abc2:	6878      	ldr	r0, [r7, #4]
 800abc4:	f7fd fdc0 	bl	8008748 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter,
        "Op builtin_code out of range: %d. Are you using old TFLite binary "
        "with newer model?",
        builtin_code);
    status = kTfLiteError;
 800abc8:	2301      	movs	r3, #1
 800abca:	77fb      	strb	r3, [r7, #31]
 800abcc:	e048      	b.n	800ac60 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
  } else if (builtin_code != BuiltinOperator_CUSTOM) {
 800abce:	7fbb      	ldrb	r3, [r7, #30]
 800abd0:	2b20      	cmp	r3, #32
 800abd2:	d01a      	beq.n	800ac0a <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x7e>
    *registration = op_resolver.FindOp(builtin_code, version);
 800abd4:	68bb      	ldr	r3, [r7, #8]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	7fb9      	ldrb	r1, [r7, #30]
 800abdc:	69ba      	ldr	r2, [r7, #24]
 800abde:	68b8      	ldr	r0, [r7, #8]
 800abe0:	4798      	blx	r3
 800abe2:	4602      	mov	r2, r0
 800abe4:	683b      	ldr	r3, [r7, #0]
 800abe6:	601a      	str	r2, [r3, #0]
    if (*registration == nullptr) {
 800abe8:	683b      	ldr	r3, [r7, #0]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d137      	bne.n	800ac60 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
      TF_LITE_REPORT_ERROR(
 800abf0:	7fbb      	ldrb	r3, [r7, #30]
 800abf2:	4618      	mov	r0, r3
 800abf4:	f7ff ff86 	bl	800ab04 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 800abf8:	4602      	mov	r2, r0
 800abfa:	69bb      	ldr	r3, [r7, #24]
 800abfc:	491c      	ldr	r1, [pc, #112]	; (800ac70 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xe4>)
 800abfe:	6878      	ldr	r0, [r7, #4]
 800ac00:	f7fd fda2 	bl	8008748 <_ZN6tflite13ErrorReporter6ReportEPKcz>
          error_reporter,
          "Didn't find op for builtin opcode '%s' version '%d'. "
          "An older version of this builtin might be supported. "
          "Are you using an old TFLite binary with a newer model?\n",
          EnumNameBuiltinOperator(builtin_code), version);
      status = kTfLiteError;
 800ac04:	2301      	movs	r3, #1
 800ac06:	77fb      	strb	r3, [r7, #31]
 800ac08:	e02a      	b.n	800ac60 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
    }
  } else if (!opcode->custom_code()) {
 800ac0a:	68f8      	ldr	r0, [r7, #12]
 800ac0c:	f7ff ffa0 	bl	800ab50 <_ZNK6tflite12OperatorCode11custom_codeEv>
 800ac10:	4603      	mov	r3, r0
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	bf0c      	ite	eq
 800ac16:	2301      	moveq	r3, #1
 800ac18:	2300      	movne	r3, #0
 800ac1a:	b2db      	uxtb	r3, r3
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d006      	beq.n	800ac2e <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xa2>
    TF_LITE_REPORT_ERROR(
 800ac20:	4914      	ldr	r1, [pc, #80]	; (800ac74 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xe8>)
 800ac22:	6878      	ldr	r0, [r7, #4]
 800ac24:	f7fd fd90 	bl	8008748 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter,
        "Operator with CUSTOM builtin_code has no custom_code.\n");
    status = kTfLiteError;
 800ac28:	2301      	movs	r3, #1
 800ac2a:	77fb      	strb	r3, [r7, #31]
 800ac2c:	e018      	b.n	800ac60 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
  } else {
    const char* name = opcode->custom_code()->c_str();
 800ac2e:	68f8      	ldr	r0, [r7, #12]
 800ac30:	f7ff ff8e 	bl	800ab50 <_ZNK6tflite12OperatorCode11custom_codeEv>
 800ac34:	4603      	mov	r3, r0
 800ac36:	4618      	mov	r0, r3
 800ac38:	f7ff ff4c 	bl	800aad4 <_ZNK11flatbuffers6String5c_strEv>
 800ac3c:	6178      	str	r0, [r7, #20]
    *registration = op_resolver.FindOp(name, version);
 800ac3e:	68bb      	ldr	r3, [r7, #8]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	3304      	adds	r3, #4
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	69ba      	ldr	r2, [r7, #24]
 800ac48:	6979      	ldr	r1, [r7, #20]
 800ac4a:	68b8      	ldr	r0, [r7, #8]
 800ac4c:	4798      	blx	r3
 800ac4e:	4602      	mov	r2, r0
 800ac50:	683b      	ldr	r3, [r7, #0]
 800ac52:	601a      	str	r2, [r3, #0]
    if (*registration == nullptr) {
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d101      	bne.n	800ac60 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
      // Do not report error for unresolved custom op, we do the final check
      // while preparing ops.
      status = kTfLiteError;
 800ac5c:	2301      	movs	r3, #1
 800ac5e:	77fb      	strb	r3, [r7, #31]
    }
  }
  return status;
 800ac60:	7ffb      	ldrb	r3, [r7, #31]
}
 800ac62:	4618      	mov	r0, r3
 800ac64:	3720      	adds	r7, #32
 800ac66:	46bd      	mov	sp, r7
 800ac68:	bd80      	pop	{r7, pc}
 800ac6a:	bf00      	nop
 800ac6c:	080276d4 	.word	0x080276d4
 800ac70:	08027728 	.word	0x08027728
 800ac74:	080277cc 	.word	0x080277cc

0800ac78 <_ZNK11flatbuffers6VectorIcE4DataEv>:
  const uint8_t *Data() const {
 800ac78:	b480      	push	{r7}
 800ac7a:	b083      	sub	sp, #12
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	3304      	adds	r3, #4
  }
 800ac84:	4618      	mov	r0, r3
 800ac86:	370c      	adds	r7, #12
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8e:	4770      	bx	lr

0800ac90 <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_>:
inline bool IsOutRange(const T &v, const T &low, const T &high) {
 800ac90:	b480      	push	{r7}
 800ac92:	b085      	sub	sp, #20
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	60f8      	str	r0, [r7, #12]
 800ac98:	60b9      	str	r1, [r7, #8]
 800ac9a:	607a      	str	r2, [r7, #4]
  return (v < low) || (high < v);
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	781a      	ldrb	r2, [r3, #0]
 800aca0:	68bb      	ldr	r3, [r7, #8]
 800aca2:	781b      	ldrb	r3, [r3, #0]
 800aca4:	429a      	cmp	r2, r3
 800aca6:	d305      	bcc.n	800acb4 <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_+0x24>
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	781a      	ldrb	r2, [r3, #0]
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	781b      	ldrb	r3, [r3, #0]
 800acb0:	429a      	cmp	r2, r3
 800acb2:	d201      	bcs.n	800acb8 <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_+0x28>
 800acb4:	2301      	movs	r3, #1
 800acb6:	e000      	b.n	800acba <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_+0x2a>
 800acb8:	2300      	movs	r3, #0
}
 800acba:	4618      	mov	r0, r3
 800acbc:	3714      	adds	r7, #20
 800acbe:	46bd      	mov	sp, r7
 800acc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc4:	4770      	bx	lr

0800acc6 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800acc6:	b580      	push	{r7, lr}
 800acc8:	b082      	sub	sp, #8
 800acca:	af00      	add	r7, sp, #0
 800accc:	6078      	str	r0, [r7, #4]
 800acce:	460b      	mov	r3, r1
 800acd0:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800acd2:	887b      	ldrh	r3, [r7, #2]
 800acd4:	4619      	mov	r1, r3
 800acd6:	6878      	ldr	r0, [r7, #4]
 800acd8:	f000 f805 	bl	800ace6 <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>
 800acdc:	4603      	mov	r3, r0
  }
 800acde:	4618      	mov	r0, r3
 800ace0:	3708      	adds	r7, #8
 800ace2:	46bd      	mov	sp, r7
 800ace4:	bd80      	pop	{r7, pc}

0800ace6 <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800ace6:	b580      	push	{r7, lr}
 800ace8:	b084      	sub	sp, #16
 800acea:	af00      	add	r7, sp, #0
 800acec:	6078      	str	r0, [r7, #4]
 800acee:	460b      	mov	r3, r1
 800acf0:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800acf2:	887b      	ldrh	r3, [r7, #2]
 800acf4:	4619      	mov	r1, r3
 800acf6:	6878      	ldr	r0, [r7, #4]
 800acf8:	f7fd fd75 	bl	80087e6 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800acfc:	4603      	mov	r3, r0
 800acfe:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800ad00:	687a      	ldr	r2, [r7, #4]
 800ad02:	89fb      	ldrh	r3, [r7, #14]
 800ad04:	4413      	add	r3, r2
 800ad06:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800ad08:	89fb      	ldrh	r3, [r7, #14]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d006      	beq.n	800ad1c <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t+0x36>
 800ad0e:	68b8      	ldr	r0, [r7, #8]
 800ad10:	f7fe fb93 	bl	800943a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800ad14:	4602      	mov	r2, r0
 800ad16:	68bb      	ldr	r3, [r7, #8]
 800ad18:	4413      	add	r3, r2
                        : nullptr;
 800ad1a:	e000      	b.n	800ad1e <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800ad1c:	2300      	movs	r3, #0
  }
 800ad1e:	4618      	mov	r0, r3
 800ad20:	3710      	adds	r7, #16
 800ad22:	46bd      	mov	sp, r7
 800ad24:	bd80      	pop	{r7, pc}

0800ad26 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 800ad26:	b580      	push	{r7, lr}
 800ad28:	b082      	sub	sp, #8
 800ad2a:	af00      	add	r7, sp, #0
 800ad2c:	ed87 0a01 	vstr	s0, [r7, #4]
 800ad30:	ed97 0a01 	vldr	s0, [r7, #4]
 800ad34:	f01a fd42 	bl	80257bc <roundf>
 800ad38:	eef0 7a40 	vmov.f32	s15, s0
 800ad3c:	eeb0 0a67 	vmov.f32	s0, s15
 800ad40:	3708      	adds	r7, #8
 800ad42:	46bd      	mov	sp, r7
 800ad44:	bd80      	pop	{r7, pc}

0800ad46 <_ZNSt14numeric_limitsIlE3maxEv>:

      static _GLIBCXX_CONSTEXPR long
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }

      static _GLIBCXX_CONSTEXPR long
      max() _GLIBCXX_USE_NOEXCEPT { return __LONG_MAX__; }
 800ad46:	b480      	push	{r7}
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800ad4e:	4618      	mov	r0, r3
 800ad50:	46bd      	mov	sp, r7
 800ad52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad56:	4770      	bx	lr

0800ad58 <_ZN6tflite18QuantizeMultiplierEdPlPi>:
constexpr uint32_t kFractionRoundingMask = 0x003fffff;
constexpr uint32_t kFractionRoundingThreshold = 0x00200000;
}  // namespace

void QuantizeMultiplier(double double_multiplier, int32_t* quantized_multiplier,
                        int* shift) {
 800ad58:	b5b0      	push	{r4, r5, r7, lr}
 800ad5a:	b088      	sub	sp, #32
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	ed87 0b02 	vstr	d0, [r7, #8]
 800ad62:	6078      	str	r0, [r7, #4]
 800ad64:	6039      	str	r1, [r7, #0]
  if (double_multiplier == 0.) {
 800ad66:	f04f 0200 	mov.w	r2, #0
 800ad6a:	f04f 0300 	mov.w	r3, #0
 800ad6e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ad72:	f7f5 fedb 	bl	8000b2c <__aeabi_dcmpeq>
 800ad76:	4603      	mov	r3, r0
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d006      	beq.n	800ad8a <_ZN6tflite18QuantizeMultiplierEdPlPi+0x32>
    *quantized_multiplier = 0;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	2200      	movs	r2, #0
 800ad80:	601a      	str	r2, [r3, #0]
    *shift = 0;
 800ad82:	683b      	ldr	r3, [r7, #0]
 800ad84:	2200      	movs	r2, #0
 800ad86:	601a      	str	r2, [r3, #0]
    return;
 800ad88:	e06b      	b.n	800ae62 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x10a>
  // example on microcontrollers) then use an alternative implementation
  // that only requires integer and bitwise operations. To enable this, you
  // need to set the define during the build process for your platform.
  int64_t q_fixed = IntegerFrExp(double_multiplier, shift);
#else   // TFLITE_EMULATE_FLOAT
  const double q = std::frexp(double_multiplier, shift);
 800ad8a:	6838      	ldr	r0, [r7, #0]
 800ad8c:	ed97 0b02 	vldr	d0, [r7, #8]
 800ad90:	f01a fc96 	bl	80256c0 <frexp>
 800ad94:	ed87 0b04 	vstr	d0, [r7, #16]
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
 800ad98:	f04f 0200 	mov.w	r2, #0
 800ad9c:	4b32      	ldr	r3, [pc, #200]	; (800ae68 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x110>)
 800ad9e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800ada2:	f7f5 fc5b 	bl	800065c <__aeabi_dmul>
 800ada6:	4602      	mov	r2, r0
 800ada8:	460b      	mov	r3, r1
 800adaa:	ec43 2b17 	vmov	d7, r2, r3
 800adae:	eeb0 0a47 	vmov.f32	s0, s14
 800adb2:	eef0 0a67 	vmov.f32	s1, s15
 800adb6:	f000 f978 	bl	800b0aa <_ZN6tflite11TfLiteRoundIdEET_S1_>
 800adba:	ec53 2b10 	vmov	r2, r3, d0
 800adbe:	4610      	mov	r0, r2
 800adc0:	4619      	mov	r1, r3
 800adc2:	f7f5 ff75 	bl	8000cb0 <__aeabi_d2lz>
 800adc6:	4602      	mov	r2, r0
 800adc8:	460b      	mov	r3, r1
 800adca:	e9c7 2306 	strd	r2, r3, [r7, #24]
#endif  // TFLITE_EMULATE_FLOAT
  TFLITE_CHECK(q_fixed <= (1ll << 31));
 800adce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800add2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800add6:	f04f 0100 	mov.w	r1, #0
 800adda:	4290      	cmp	r0, r2
 800addc:	eb71 0303 	sbcs.w	r3, r1, r3
 800ade0:	da01      	bge.n	800ade6 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x8e>
 800ade2:	f01a fe30 	bl	8025a46 <abort>
  if (q_fixed == (1ll << 31)) {
 800ade6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800adea:	2b00      	cmp	r3, #0
 800adec:	bf08      	it	eq
 800adee:	f1b2 4f00 	cmpeq.w	r2, #2147483648	; 0x80000000
 800adf2:	d117      	bne.n	800ae24 <_ZN6tflite18QuantizeMultiplierEdPlPi+0xcc>
    q_fixed /= 2;
 800adf4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800adf8:	0fd9      	lsrs	r1, r3, #31
 800adfa:	4608      	mov	r0, r1
 800adfc:	f04f 0100 	mov.w	r1, #0
 800ae00:	1884      	adds	r4, r0, r2
 800ae02:	eb41 0503 	adc.w	r5, r1, r3
 800ae06:	f04f 0200 	mov.w	r2, #0
 800ae0a:	f04f 0300 	mov.w	r3, #0
 800ae0e:	0862      	lsrs	r2, r4, #1
 800ae10:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 800ae14:	106b      	asrs	r3, r5, #1
 800ae16:	e9c7 2306 	strd	r2, r3, [r7, #24]
    ++*shift;
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	1c5a      	adds	r2, r3, #1
 800ae20:	683b      	ldr	r3, [r7, #0]
 800ae22:	601a      	str	r2, [r3, #0]
  }
  TFLITE_CHECK_LE(q_fixed, std::numeric_limits<int32_t>::max());
 800ae24:	f7ff ff8f 	bl	800ad46 <_ZNSt14numeric_limitsIlE3maxEv>
 800ae28:	4603      	mov	r3, r0
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800ae30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ae34:	4290      	cmp	r0, r2
 800ae36:	eb71 0303 	sbcs.w	r3, r1, r3
 800ae3a:	da01      	bge.n	800ae40 <_ZN6tflite18QuantizeMultiplierEdPlPi+0xe8>
 800ae3c:	f01a fe03 	bl	8025a46 <abort>
  // that we're effectively flushing tiny double_multiplier's to zero.
  // We could conceivably handle values in the range (roughly) [32, 63]
  // as 'denormals' i.e. (shift==0, q_fixed < 2^30). In that point of view
  // the present handling is just doing 'flush denormals to zero'. We could
  // reconsider and actually generate nonzero denormals if a need arises.
  if (*shift < -31) {
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	f113 0f1f 	cmn.w	r3, #31
 800ae48:	da08      	bge.n	800ae5c <_ZN6tflite18QuantizeMultiplierEdPlPi+0x104>
    *shift = 0;
 800ae4a:	683b      	ldr	r3, [r7, #0]
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	601a      	str	r2, [r3, #0]
    q_fixed = 0;
 800ae50:	f04f 0200 	mov.w	r2, #0
 800ae54:	f04f 0300 	mov.w	r3, #0
 800ae58:	e9c7 2306 	strd	r2, r3, [r7, #24]
  }
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
 800ae5c:	69ba      	ldr	r2, [r7, #24]
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	601a      	str	r2, [r3, #0]
}
 800ae62:	3720      	adds	r7, #32
 800ae64:	46bd      	mov	sp, r7
 800ae66:	bdb0      	pop	{r4, r5, r7, pc}
 800ae68:	41e00000 	.word	0x41e00000

0800ae6c <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>:

void QuantizeMultiplierGreaterThanOne(double double_multiplier,
                                      int32_t* quantized_multiplier,
                                      int* left_shift) {
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b084      	sub	sp, #16
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	ed87 0b02 	vstr	d0, [r7, #8]
 800ae76:	6078      	str	r0, [r7, #4]
 800ae78:	6039      	str	r1, [r7, #0]
  TFLITE_CHECK_GT(double_multiplier, 1.);
 800ae7a:	f04f 0200 	mov.w	r2, #0
 800ae7e:	4b0d      	ldr	r3, [pc, #52]	; (800aeb4 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x48>)
 800ae80:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ae84:	f7f5 fe7a 	bl	8000b7c <__aeabi_dcmpgt>
 800ae88:	4603      	mov	r3, r0
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d101      	bne.n	800ae92 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x26>
 800ae8e:	f01a fdda 	bl	8025a46 <abort>
  QuantizeMultiplier(double_multiplier, quantized_multiplier, left_shift);
 800ae92:	6839      	ldr	r1, [r7, #0]
 800ae94:	6878      	ldr	r0, [r7, #4]
 800ae96:	ed97 0b02 	vldr	d0, [r7, #8]
 800ae9a:	f7ff ff5d 	bl	800ad58 <_ZN6tflite18QuantizeMultiplierEdPlPi>
  TFLITE_CHECK_GE(*left_shift, 0);
 800ae9e:	683b      	ldr	r3, [r7, #0]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	da01      	bge.n	800aeaa <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x3e>
 800aea6:	f01a fdce 	bl	8025a46 <abort>
}
 800aeaa:	bf00      	nop
 800aeac:	3710      	adds	r7, #16
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	bd80      	pop	{r7, pc}
 800aeb2:	bf00      	nop
 800aeb4:	3ff00000 	.word	0x3ff00000

0800aeb8 <_ZSt3minIdERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b082      	sub	sp, #8
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
 800aec0:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aece:	f7f5 fe37 	bl	8000b40 <__aeabi_dcmplt>
 800aed2:	4603      	mov	r3, r0
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d001      	beq.n	800aedc <_ZSt3minIdERKT_S2_S2_+0x24>
	return __b;
 800aed8:	683b      	ldr	r3, [r7, #0]
 800aeda:	e000      	b.n	800aede <_ZSt3minIdERKT_S2_S2_+0x26>
      return __a;
 800aedc:	687b      	ldr	r3, [r7, #4]
    }
 800aede:	4618      	mov	r0, r3
 800aee0:	3708      	adds	r7, #8
 800aee2:	46bd      	mov	sp, r7
 800aee4:	bd80      	pop	{r7, pc}
	...

0800aee8 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>:
  }
}

void PreprocessSoftmaxScaling(double beta, double input_scale,
                              int input_integer_bits,
                              int32_t* quantized_multiplier, int* left_shift) {
 800aee8:	b5b0      	push	{r4, r5, r7, lr}
 800aeea:	b08e      	sub	sp, #56	; 0x38
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	ed87 0b06 	vstr	d0, [r7, #24]
 800aef2:	ed87 1b04 	vstr	d1, [r7, #16]
 800aef6:	60f8      	str	r0, [r7, #12]
 800aef8:	60b9      	str	r1, [r7, #8]
 800aefa:	607a      	str	r2, [r7, #4]
  if (IntegerDoubleCompare(input_beta_real_multiplier, (1ll << 31) - 1.0) > 0) {
    input_beta_real_multiplier = (1ll << 31) - 1.0;
  }
#else   // TFLITE_EMULATE_FLOAT
  const double input_beta_real_multiplier = std::min<double>(
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
 800aefc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800af00:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800af04:	f7f5 fbaa 	bl	800065c <__aeabi_dmul>
 800af08:	4602      	mov	r2, r0
 800af0a:	460b      	mov	r3, r1
 800af0c:	4614      	mov	r4, r2
 800af0e:	461d      	mov	r5, r3
 800af10:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	fa22 f303 	lsr.w	r3, r2, r3
 800af1a:	4618      	mov	r0, r3
 800af1c:	f7f5 fb34 	bl	8000588 <__aeabi_i2d>
 800af20:	4602      	mov	r2, r0
 800af22:	460b      	mov	r3, r1
 800af24:	4620      	mov	r0, r4
 800af26:	4629      	mov	r1, r5
 800af28:	f7f5 fb98 	bl	800065c <__aeabi_dmul>
 800af2c:	4602      	mov	r2, r0
 800af2e:	460b      	mov	r3, r1
 800af30:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800af34:	a30e      	add	r3, pc, #56	; (adr r3, 800af70 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x88>)
 800af36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af3a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800af3e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800af42:	f107 0320 	add.w	r3, r7, #32
 800af46:	4611      	mov	r1, r2
 800af48:	4618      	mov	r0, r3
 800af4a:	f7ff ffb5 	bl	800aeb8 <_ZSt3minIdERKT_S2_S2_>
 800af4e:	4603      	mov	r3, r0
 800af50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af54:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
#endif  // TFLITE_EMULATE_FLOAT

  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
 800af58:	6879      	ldr	r1, [r7, #4]
 800af5a:	68b8      	ldr	r0, [r7, #8]
 800af5c:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 800af60:	f7ff ff84 	bl	800ae6c <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>
                                   quantized_multiplier, left_shift);
}
 800af64:	bf00      	nop
 800af66:	3738      	adds	r7, #56	; 0x38
 800af68:	46bd      	mov	sp, r7
 800af6a:	bdb0      	pop	{r4, r5, r7, pc}
 800af6c:	f3af 8000 	nop.w
 800af70:	ffc00000 	.word	0xffc00000
 800af74:	41dfffff 	.word	0x41dfffff

0800af78 <_ZN6tflite20CalculateInputRadiusEiii>:
                                              reverse_scaling_divisor,
                                              reverse_scaling_left_shift);
}

int CalculateInputRadius(int input_integer_bits, int input_left_shift,
                         int total_signed_bits) {
 800af78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af7c:	b087      	sub	sp, #28
 800af7e:	af00      	add	r7, sp, #0
 800af80:	60f8      	str	r0, [r7, #12]
 800af82:	60b9      	str	r1, [r7, #8]
 800af84:	607a      	str	r2, [r7, #4]
  result <<= (total_signed_bits - input_integer_bits);
  result >>= input_left_shift;
  return result;
#else   // TFLITE_EMULATE_FLOAT
  const double max_input_rescaled =
      1.0 * ((1 << input_integer_bits) - 1) *
 800af86:	2201      	movs	r2, #1
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	fa02 f303 	lsl.w	r3, r2, r3
 800af8e:	3b01      	subs	r3, #1
 800af90:	4618      	mov	r0, r3
 800af92:	f7f5 faf9 	bl	8000588 <__aeabi_i2d>
 800af96:	4682      	mov	sl, r0
 800af98:	468b      	mov	fp, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
 800af9a:	687a      	ldr	r2, [r7, #4]
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	1ad1      	subs	r1, r2, r3
 800afa0:	f04f 0201 	mov.w	r2, #1
 800afa4:	f04f 0300 	mov.w	r3, #0
 800afa8:	f1a1 0620 	sub.w	r6, r1, #32
 800afac:	f1c1 0020 	rsb	r0, r1, #32
 800afb0:	fa03 f901 	lsl.w	r9, r3, r1
 800afb4:	fa02 f606 	lsl.w	r6, r2, r6
 800afb8:	ea49 0906 	orr.w	r9, r9, r6
 800afbc:	fa22 f000 	lsr.w	r0, r2, r0
 800afc0:	ea49 0900 	orr.w	r9, r9, r0
 800afc4:	fa02 f801 	lsl.w	r8, r2, r1
      1.0 * ((1 << input_integer_bits) - 1) *
 800afc8:	4640      	mov	r0, r8
 800afca:	4649      	mov	r1, r9
 800afcc:	f7f5 fb18 	bl	8000600 <__aeabi_l2d>
 800afd0:	4602      	mov	r2, r0
 800afd2:	460b      	mov	r3, r1
 800afd4:	4650      	mov	r0, sl
 800afd6:	4659      	mov	r1, fp
 800afd8:	f7f5 fb40 	bl	800065c <__aeabi_dmul>
 800afdc:	4602      	mov	r2, r0
 800afde:	460b      	mov	r3, r1
 800afe0:	4690      	mov	r8, r2
 800afe2:	4699      	mov	r9, r3
      (1ll << input_left_shift);
 800afe4:	f04f 0201 	mov.w	r2, #1
 800afe8:	f04f 0300 	mov.w	r3, #0
 800afec:	68b9      	ldr	r1, [r7, #8]
 800afee:	f1a1 0620 	sub.w	r6, r1, #32
 800aff2:	f1c1 0020 	rsb	r0, r1, #32
 800aff6:	fa03 f501 	lsl.w	r5, r3, r1
 800affa:	fa02 f606 	lsl.w	r6, r2, r6
 800affe:	4335      	orrs	r5, r6
 800b000:	fa22 f000 	lsr.w	r0, r2, r0
 800b004:	4305      	orrs	r5, r0
 800b006:	fa02 f401 	lsl.w	r4, r2, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
 800b00a:	4620      	mov	r0, r4
 800b00c:	4629      	mov	r1, r5
 800b00e:	f7f5 faf7 	bl	8000600 <__aeabi_l2d>
 800b012:	4602      	mov	r2, r0
 800b014:	460b      	mov	r3, r1
  const double max_input_rescaled =
 800b016:	4640      	mov	r0, r8
 800b018:	4649      	mov	r1, r9
 800b01a:	f7f5 fc49 	bl	80008b0 <__aeabi_ddiv>
 800b01e:	4602      	mov	r2, r0
 800b020:	460b      	mov	r3, r1
 800b022:	e9c7 2304 	strd	r2, r3, [r7, #16]
  // Tighten bound using floor.  Suppose that we could use the exact value.
  // After scaling the difference, the result would be at the maximum.  Thus we
  // must ensure that our value has lower magnitude.
  return static_cast<int>(std::floor(max_input_rescaled));
 800b026:	ed97 0b04 	vldr	d0, [r7, #16]
 800b02a:	f01a fac9 	bl	80255c0 <floor>
 800b02e:	ec53 2b10 	vmov	r2, r3, d0
 800b032:	4610      	mov	r0, r2
 800b034:	4619      	mov	r1, r3
 800b036:	f7f5 fdab 	bl	8000b90 <__aeabi_d2iz>
 800b03a:	4603      	mov	r3, r0
#endif  // TFLITE_EMULATE_FLOAT
}
 800b03c:	4618      	mov	r0, r3
 800b03e:	371c      	adds	r7, #28
 800b040:	46bd      	mov	sp, r7
 800b042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b046 <_ZSt3minIfERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800b046:	b480      	push	{r7}
 800b048:	b083      	sub	sp, #12
 800b04a:	af00      	add	r7, sp, #0
 800b04c:	6078      	str	r0, [r7, #4]
 800b04e:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800b050:	683b      	ldr	r3, [r7, #0]
 800b052:	ed93 7a00 	vldr	s14, [r3]
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	edd3 7a00 	vldr	s15, [r3]
 800b05c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b064:	d501      	bpl.n	800b06a <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 800b066:	683b      	ldr	r3, [r7, #0]
 800b068:	e000      	b.n	800b06c <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 800b06a:	687b      	ldr	r3, [r7, #4]
    }
 800b06c:	4618      	mov	r0, r3
 800b06e:	370c      	adds	r7, #12
 800b070:	46bd      	mov	sp, r7
 800b072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b076:	4770      	bx	lr

0800b078 <_ZSt3maxIfERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 800b078:	b480      	push	{r7}
 800b07a:	b083      	sub	sp, #12
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
 800b080:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	ed93 7a00 	vldr	s14, [r3]
 800b088:	683b      	ldr	r3, [r7, #0]
 800b08a:	edd3 7a00 	vldr	s15, [r3]
 800b08e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b096:	d501      	bpl.n	800b09c <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 800b098:	683b      	ldr	r3, [r7, #0]
 800b09a:	e000      	b.n	800b09e <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 800b09c:	687b      	ldr	r3, [r7, #4]
    }
 800b09e:	4618      	mov	r0, r3
 800b0a0:	370c      	adds	r7, #12
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a8:	4770      	bx	lr

0800b0aa <_ZN6tflite11TfLiteRoundIdEET_S1_>:
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round);
 800b0aa:	b580      	push	{r7, lr}
 800b0ac:	b082      	sub	sp, #8
 800b0ae:	af00      	add	r7, sp, #0
 800b0b0:	ed87 0b00 	vstr	d0, [r7]
 800b0b4:	ed97 0b00 	vldr	d0, [r7]
 800b0b8:	f01a fb3a 	bl	8025730 <round>
 800b0bc:	eeb0 7a40 	vmov.f32	s14, s0
 800b0c0:	eef0 7a60 	vmov.f32	s15, s1
 800b0c4:	eeb0 0a47 	vmov.f32	s0, s14
 800b0c8:	eef0 0a67 	vmov.f32	s1, s15
 800b0cc:	3708      	adds	r7, #8
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	bd80      	pop	{r7, pc}

0800b0d2 <_ZN6tflite11TfLiteRoundIfEET_S1_>:
 800b0d2:	b580      	push	{r7, lr}
 800b0d4:	b082      	sub	sp, #8
 800b0d6:	af00      	add	r7, sp, #0
 800b0d8:	ed87 0a01 	vstr	s0, [r7, #4]
 800b0dc:	ed97 0a01 	vldr	s0, [r7, #4]
 800b0e0:	f7ff fe21 	bl	800ad26 <_ZSt5roundf>
 800b0e4:	eef0 7a40 	vmov.f32	s15, s0
 800b0e8:	eeb0 0a67 	vmov.f32	s0, s15
 800b0ec:	3708      	adds	r7, #8
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	bd80      	pop	{r7, pc}

0800b0f2 <_ZNSt14numeric_limitsIaE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SCHAR_MAX__ - 1; }
 800b0f2:	b480      	push	{r7}
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b102:	4770      	bx	lr

0800b104 <_ZNSt14numeric_limitsIaE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__; }
 800b104:	b480      	push	{r7}
 800b106:	af00      	add	r7, sp, #0
 800b108:	237f      	movs	r3, #127	; 0x7f
 800b10a:	4618      	mov	r0, r3
 800b10c:	46bd      	mov	sp, r7
 800b10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b112:	4770      	bx	lr

0800b114 <_ZNSt14numeric_limitsIhE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return 0; }
 800b114:	b480      	push	{r7}
 800b116:	af00      	add	r7, sp, #0
 800b118:	2300      	movs	r3, #0
 800b11a:	4618      	mov	r0, r3
 800b11c:	46bd      	mov	sp, r7
 800b11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b122:	4770      	bx	lr

0800b124 <_ZNSt14numeric_limitsIhE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__ * 2U + 1; }
 800b124:	b480      	push	{r7}
 800b126:	af00      	add	r7, sp, #0
 800b128:	23ff      	movs	r3, #255	; 0xff
 800b12a:	4618      	mov	r0, r3
 800b12c:	46bd      	mov	sp, r7
 800b12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b132:	4770      	bx	lr

0800b134 <_ZNSt14numeric_limitsIsE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SHRT_MAX__ - 1; }
 800b134:	b480      	push	{r7}
 800b136:	af00      	add	r7, sp, #0
 800b138:	4b02      	ldr	r3, [pc, #8]	; (800b144 <_ZNSt14numeric_limitsIsE3minEv+0x10>)
 800b13a:	4618      	mov	r0, r3
 800b13c:	46bd      	mov	sp, r7
 800b13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b142:	4770      	bx	lr
 800b144:	ffff8000 	.word	0xffff8000

0800b148 <_ZNSt14numeric_limitsIsE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SHRT_MAX__; }
 800b148:	b480      	push	{r7}
 800b14a:	af00      	add	r7, sp, #0
 800b14c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800b150:	4618      	mov	r0, r3
 800b152:	46bd      	mov	sp, r7
 800b154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b158:	4770      	bx	lr

0800b15a <_ZNSt14numeric_limitsIlE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }
 800b15a:	b480      	push	{r7}
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b162:	4618      	mov	r0, r3
 800b164:	46bd      	mov	sp, r7
 800b166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16a:	4770      	bx	lr

0800b16c <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>:
TfLiteStatus GetIntermediatesSafe(const TfLiteContext* context,
                                  const TfLiteNode* node, int index,
                                  TfLiteTensor** tensor);
#endif  // TF_LITE_STATIC_MEMORY

inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
 800b16c:	b480      	push	{r7}
 800b16e:	b083      	sub	sp, #12
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	689b      	ldr	r3, [r3, #8]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	4618      	mov	r0, r3
 800b17c:	370c      	adds	r7, #12
 800b17e:	46bd      	mov	sp, r7
 800b180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b184:	4770      	bx	lr

0800b186 <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>:
inline int SizeOfDimension(const TfLiteTensor* t, int dim) {
 800b186:	b480      	push	{r7}
 800b188:	b083      	sub	sp, #12
 800b18a:	af00      	add	r7, sp, #0
 800b18c:	6078      	str	r0, [r7, #4]
 800b18e:	6039      	str	r1, [r7, #0]
  return t->dims->data[dim];
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	689a      	ldr	r2, [r3, #8]
 800b194:	683b      	ldr	r3, [r7, #0]
 800b196:	009b      	lsls	r3, r3, #2
 800b198:	4413      	add	r3, r2
 800b19a:	685b      	ldr	r3, [r3, #4]
}
 800b19c:	4618      	mov	r0, r3
 800b19e:	370c      	adds	r7, #12
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a6:	4770      	bx	lr

0800b1a8 <_ZN6tflite11NumElementsEPK14TfLiteIntArray>:
inline int NumIntermediates(const TfLiteNode* node) {
  return node->intermediates->size;
}
#endif  // TF_LITE_STATIC_MEMORY

inline int64_t NumElements(const TfLiteIntArray* dims) {
 800b1a8:	b480      	push	{r7}
 800b1aa:	b087      	sub	sp, #28
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
  int64_t count = 1;
 800b1b0:	f04f 0201 	mov.w	r2, #1
 800b1b4:	f04f 0300 	mov.w	r3, #0
 800b1b8:	e9c7 2304 	strd	r2, r3, [r7, #16]
  for (int i = 0; i < dims->size; ++i) {
 800b1bc:	2300      	movs	r3, #0
 800b1be:	60fb      	str	r3, [r7, #12]
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	68fa      	ldr	r2, [r7, #12]
 800b1c6:	429a      	cmp	r2, r3
 800b1c8:	da1b      	bge.n	800b202 <_ZN6tflite11NumElementsEPK14TfLiteIntArray+0x5a>
    count *= dims->data[i];
 800b1ca:	687a      	ldr	r2, [r7, #4]
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	009b      	lsls	r3, r3, #2
 800b1d0:	4413      	add	r3, r2
 800b1d2:	685b      	ldr	r3, [r3, #4]
 800b1d4:	461a      	mov	r2, r3
 800b1d6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800b1da:	6979      	ldr	r1, [r7, #20]
 800b1dc:	fb02 f001 	mul.w	r0, r2, r1
 800b1e0:	6939      	ldr	r1, [r7, #16]
 800b1e2:	fb03 f101 	mul.w	r1, r3, r1
 800b1e6:	4401      	add	r1, r0
 800b1e8:	6938      	ldr	r0, [r7, #16]
 800b1ea:	fba0 2302 	umull	r2, r3, r0, r2
 800b1ee:	4419      	add	r1, r3
 800b1f0:	460b      	mov	r3, r1
 800b1f2:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800b1f6:	e9c7 2304 	strd	r2, r3, [r7, #16]
  for (int i = 0; i < dims->size; ++i) {
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	3301      	adds	r3, #1
 800b1fe:	60fb      	str	r3, [r7, #12]
 800b200:	e7de      	b.n	800b1c0 <_ZN6tflite11NumElementsEPK14TfLiteIntArray+0x18>
  }
  return count;
 800b202:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 800b206:	4610      	mov	r0, r2
 800b208:	4619      	mov	r1, r3
 800b20a:	371c      	adds	r7, #28
 800b20c:	46bd      	mov	sp, r7
 800b20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b212:	4770      	bx	lr

0800b214 <_ZN6tflite11NumElementsEPK12TfLiteTensor>:

inline int64_t NumElements(const TfLiteTensor* t) {
 800b214:	b580      	push	{r7, lr}
 800b216:	b082      	sub	sp, #8
 800b218:	af00      	add	r7, sp, #0
 800b21a:	6078      	str	r0, [r7, #4]
  return NumElements(t->dims);
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	689b      	ldr	r3, [r3, #8]
 800b220:	4618      	mov	r0, r3
 800b222:	f7ff ffc1 	bl	800b1a8 <_ZN6tflite11NumElementsEPK14TfLiteIntArray>
 800b226:	4602      	mov	r2, r0
 800b228:	460b      	mov	r3, r1
}
 800b22a:	4610      	mov	r0, r2
 800b22c:	4619      	mov	r1, r3
 800b22e:	3708      	adds	r7, #8
 800b230:	46bd      	mov	sp, r7
 800b232:	bd80      	pop	{r7, pc}

0800b234 <_ZSt3absd>:
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
 800b234:	b480      	push	{r7}
 800b236:	b083      	sub	sp, #12
 800b238:	af00      	add	r7, sp, #0
 800b23a:	ed87 0b00 	vstr	d0, [r7]
 800b23e:	683a      	ldr	r2, [r7, #0]
 800b240:	6879      	ldr	r1, [r7, #4]
 800b242:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b246:	ec43 2b17 	vmov	d7, r2, r3
 800b24a:	eeb0 0a47 	vmov.f32	s0, s14
 800b24e:	eef0 0a67 	vmov.f32	s1, s15
 800b252:	370c      	adds	r7, #12
 800b254:	46bd      	mov	sp, r7
 800b256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25a:	4770      	bx	lr

0800b25c <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>:

namespace {

// Assumes tensor_index is a valid index (in bounds)
inline TfLiteTensor* GetTensorAtIndex(const TfLiteContext* context,
                                      int tensor_index) {
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b082      	sub	sp, #8
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
 800b264:	6039      	str	r1, [r7, #0]
  if (context->tensors != nullptr) {
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	689b      	ldr	r3, [r3, #8]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d005      	beq.n	800b27a <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti+0x1e>
    return &context->tensors[tensor_index];
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	689a      	ldr	r2, [r3, #8]
 800b272:	683b      	ldr	r3, [r7, #0]
 800b274:	019b      	lsls	r3, r3, #6
 800b276:	4413      	add	r3, r2
 800b278:	e006      	b.n	800b288 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti+0x2c>
  } else {
    return context->GetTensor(context, tensor_index);
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b27e:	6839      	ldr	r1, [r7, #0]
 800b280:	6878      	ldr	r0, [r7, #4]
 800b282:	4798      	blx	r3
 800b284:	4603      	mov	r3, r0
 800b286:	bf00      	nop
  }
}
 800b288:	4618      	mov	r0, r3
 800b28a:	3708      	adds	r7, #8
 800b28c:	46bd      	mov	sp, r7
 800b28e:	bd80      	pop	{r7, pc}

0800b290 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>:
}

// Same as above but returns -1 for invalid inputs instead of status + logging
// error.
inline int ValidateTensorIndexing(const TfLiteContext* context, int index,
                                  int max_size, const int* tensor_indices) {
 800b290:	b480      	push	{r7}
 800b292:	b087      	sub	sp, #28
 800b294:	af00      	add	r7, sp, #0
 800b296:	60f8      	str	r0, [r7, #12]
 800b298:	60b9      	str	r1, [r7, #8]
 800b29a:	607a      	str	r2, [r7, #4]
 800b29c:	603b      	str	r3, [r7, #0]
  if (index >= 0 && index < max_size) {
 800b29e:	68bb      	ldr	r3, [r7, #8]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	db0f      	blt.n	800b2c4 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
 800b2a4:	68ba      	ldr	r2, [r7, #8]
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	429a      	cmp	r2, r3
 800b2aa:	da0b      	bge.n	800b2c4 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
    const int tensor_index = tensor_indices[index];
 800b2ac:	68bb      	ldr	r3, [r7, #8]
 800b2ae:	009b      	lsls	r3, r3, #2
 800b2b0:	683a      	ldr	r2, [r7, #0]
 800b2b2:	4413      	add	r3, r2
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	617b      	str	r3, [r7, #20]
    if (tensor_index != kTfLiteOptionalTensor) {
 800b2b8:	697b      	ldr	r3, [r7, #20]
 800b2ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b2be:	d001      	beq.n	800b2c4 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
      return tensor_index;
 800b2c0:	697b      	ldr	r3, [r7, #20]
 800b2c2:	e001      	b.n	800b2c8 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x38>
    }
  }
  return -1;
 800b2c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	371c      	adds	r7, #28
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d2:	4770      	bx	lr

0800b2d4 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei>:

inline TfLiteTensor* GetMutableInput(const TfLiteContext* context,
                                     const TfLiteNode* node, int index) {
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b086      	sub	sp, #24
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	60f8      	str	r0, [r7, #12]
 800b2dc:	60b9      	str	r1, [r7, #8]
 800b2de:	607a      	str	r2, [r7, #4]
  const int tensor_index = ValidateTensorIndexing(
      context, index, node->inputs->size, node->inputs->data);
 800b2e0:	68bb      	ldr	r3, [r7, #8]
 800b2e2:	681b      	ldr	r3, [r3, #0]
  const int tensor_index = ValidateTensorIndexing(
 800b2e4:	681a      	ldr	r2, [r3, #0]
      context, index, node->inputs->size, node->inputs->data);
 800b2e6:	68bb      	ldr	r3, [r7, #8]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	3304      	adds	r3, #4
  const int tensor_index = ValidateTensorIndexing(
 800b2ec:	6879      	ldr	r1, [r7, #4]
 800b2ee:	68f8      	ldr	r0, [r7, #12]
 800b2f0:	f7ff ffce 	bl	800b290 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>
 800b2f4:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 800b2f6:	697b      	ldr	r3, [r7, #20]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	da01      	bge.n	800b300 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei+0x2c>
    return nullptr;
 800b2fc:	2300      	movs	r3, #0
 800b2fe:	e005      	b.n	800b30c <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei+0x38>
  }
  return GetTensorAtIndex(context, tensor_index);
 800b300:	6979      	ldr	r1, [r7, #20]
 800b302:	68f8      	ldr	r0, [r7, #12]
 800b304:	f7ff ffaa 	bl	800b25c <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>
 800b308:	4603      	mov	r3, r0
 800b30a:	bf00      	nop
}
 800b30c:	4618      	mov	r0, r3
 800b30e:	3718      	adds	r7, #24
 800b310:	46bd      	mov	sp, r7
 800b312:	bd80      	pop	{r7, pc}

0800b314 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>:
}

}  // anonymous namespace.

const TfLiteTensor* GetInput(const TfLiteContext* context,
                             const TfLiteNode* node, int index) {
 800b314:	b580      	push	{r7, lr}
 800b316:	b084      	sub	sp, #16
 800b318:	af00      	add	r7, sp, #0
 800b31a:	60f8      	str	r0, [r7, #12]
 800b31c:	60b9      	str	r1, [r7, #8]
 800b31e:	607a      	str	r2, [r7, #4]
  return GetMutableInput(context, node, index);
 800b320:	687a      	ldr	r2, [r7, #4]
 800b322:	68b9      	ldr	r1, [r7, #8]
 800b324:	68f8      	ldr	r0, [r7, #12]
 800b326:	f7ff ffd5 	bl	800b2d4 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei>
 800b32a:	4603      	mov	r3, r0
}
 800b32c:	4618      	mov	r0, r3
 800b32e:	3710      	adds	r7, #16
 800b330:	46bd      	mov	sp, r7
 800b332:	bd80      	pop	{r7, pc}

0800b334 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>:
  TfLiteTensor* tensor = GetMutableInput(context, node, index);
  return tensor->is_variable ? tensor : nullptr;
}

TfLiteTensor* GetOutput(TfLiteContext* context, const TfLiteNode* node,
                        int index) {
 800b334:	b580      	push	{r7, lr}
 800b336:	b086      	sub	sp, #24
 800b338:	af00      	add	r7, sp, #0
 800b33a:	60f8      	str	r0, [r7, #12]
 800b33c:	60b9      	str	r1, [r7, #8]
 800b33e:	607a      	str	r2, [r7, #4]
  const int tensor_index = ValidateTensorIndexing(
      context, index, node->outputs->size, node->outputs->data);
 800b340:	68bb      	ldr	r3, [r7, #8]
 800b342:	685b      	ldr	r3, [r3, #4]
  const int tensor_index = ValidateTensorIndexing(
 800b344:	681a      	ldr	r2, [r3, #0]
      context, index, node->outputs->size, node->outputs->data);
 800b346:	68bb      	ldr	r3, [r7, #8]
 800b348:	685b      	ldr	r3, [r3, #4]
 800b34a:	3304      	adds	r3, #4
  const int tensor_index = ValidateTensorIndexing(
 800b34c:	6879      	ldr	r1, [r7, #4]
 800b34e:	68f8      	ldr	r0, [r7, #12]
 800b350:	f7ff ff9e 	bl	800b290 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>
 800b354:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 800b356:	697b      	ldr	r3, [r7, #20]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	da01      	bge.n	800b360 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x2c>
    return nullptr;
 800b35c:	2300      	movs	r3, #0
 800b35e:	e005      	b.n	800b36c <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x38>
  }
  return GetTensorAtIndex(context, tensor_index);
 800b360:	6979      	ldr	r1, [r7, #20]
 800b362:	68f8      	ldr	r0, [r7, #12]
 800b364:	f7ff ff7a 	bl	800b25c <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>
 800b368:	4603      	mov	r3, r0
 800b36a:	bf00      	nop
}
 800b36c:	4618      	mov	r0, r3
 800b36e:	3718      	adds	r7, #24
 800b370:	46bd      	mov	sp, r7
 800b372:	bd80      	pop	{r7, pc}

0800b374 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>:
  *tensor = GetTensorAtIndex(context, tensor_index);
  return kTfLiteOk;
}

const TfLiteTensor* GetOptionalInputTensor(const TfLiteContext* context,
                                           const TfLiteNode* node, int index) {
 800b374:	b580      	push	{r7, lr}
 800b376:	b084      	sub	sp, #16
 800b378:	af00      	add	r7, sp, #0
 800b37a:	60f8      	str	r0, [r7, #12]
 800b37c:	60b9      	str	r1, [r7, #8]
 800b37e:	607a      	str	r2, [r7, #4]
  return GetInput(context, node, index);
 800b380:	687a      	ldr	r2, [r7, #4]
 800b382:	68b9      	ldr	r1, [r7, #8]
 800b384:	68f8      	ldr	r0, [r7, #12]
 800b386:	f7ff ffc5 	bl	800b314 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800b38a:	4603      	mov	r3, r0
}
 800b38c:	4618      	mov	r0, r3
 800b38e:	3710      	adds	r7, #16
 800b390:	46bd      	mov	sp, r7
 800b392:	bd80      	pop	{r7, pc}

0800b394 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i>:
TfLiteStatus PopulateConvolutionQuantizationParams(
    TfLiteContext* context, const TfLiteTensor* input,
    const TfLiteTensor* filter, const TfLiteTensor* bias, TfLiteTensor* output,
    const TfLiteFusedActivation& activation, int32_t* multiplier, int* shift,
    int32_t* output_activation_min, int32_t* output_activation_max,
    int32_t* per_channel_multiplier, int* per_channel_shift, int num_channels) {
 800b394:	b5b0      	push	{r4, r5, r7, lr}
 800b396:	b09c      	sub	sp, #112	; 0x70
 800b398:	af04      	add	r7, sp, #16
 800b39a:	60f8      	str	r0, [r7, #12]
 800b39c:	60b9      	str	r1, [r7, #8]
 800b39e:	607a      	str	r2, [r7, #4]
 800b3a0:	603b      	str	r3, [r7, #0]
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
 800b3a2:	68bb      	ldr	r3, [r7, #8]
 800b3a4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b3a8:	2b01      	cmp	r3, #1
 800b3aa:	d013      	beq.n	800b3d4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x40>
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	695c      	ldr	r4, [r3, #20]
 800b3b0:	68bb      	ldr	r3, [r7, #8]
 800b3b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b3b6:	461a      	mov	r2, r3
 800b3b8:	2301      	movs	r3, #1
 800b3ba:	9303      	str	r3, [sp, #12]
 800b3bc:	9202      	str	r2, [sp, #8]
 800b3be:	4b98      	ldr	r3, [pc, #608]	; (800b620 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x28c>)
 800b3c0:	9301      	str	r3, [sp, #4]
 800b3c2:	4b98      	ldr	r3, [pc, #608]	; (800b624 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x290>)
 800b3c4:	9300      	str	r3, [sp, #0]
 800b3c6:	23d8      	movs	r3, #216	; 0xd8
 800b3c8:	4a97      	ldr	r2, [pc, #604]	; (800b628 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 800b3ca:	4998      	ldr	r1, [pc, #608]	; (800b62c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x298>)
 800b3cc:	68f8      	ldr	r0, [r7, #12]
 800b3ce:	47a0      	blx	r4
 800b3d0:	2301      	movs	r3, #1
 800b3d2:	e173      	b.n	800b6bc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
                    kTfLiteAffineQuantization);
  TF_LITE_ENSURE_EQ(context, filter->quantization.type,
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b3da:	2b01      	cmp	r3, #1
 800b3dc:	d013      	beq.n	800b406 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x72>
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	695c      	ldr	r4, [r3, #20]
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b3e8:	461a      	mov	r2, r3
 800b3ea:	2301      	movs	r3, #1
 800b3ec:	9303      	str	r3, [sp, #12]
 800b3ee:	9202      	str	r2, [sp, #8]
 800b3f0:	4b8b      	ldr	r3, [pc, #556]	; (800b620 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x28c>)
 800b3f2:	9301      	str	r3, [sp, #4]
 800b3f4:	4b8e      	ldr	r3, [pc, #568]	; (800b630 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x29c>)
 800b3f6:	9300      	str	r3, [sp, #0]
 800b3f8:	23da      	movs	r3, #218	; 0xda
 800b3fa:	4a8b      	ldr	r2, [pc, #556]	; (800b628 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 800b3fc:	498b      	ldr	r1, [pc, #556]	; (800b62c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x298>)
 800b3fe:	68f8      	ldr	r0, [r7, #12]
 800b400:	47a0      	blx	r4
 800b402:	2301      	movs	r3, #1
 800b404:	e15a      	b.n	800b6bc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
  // quantization is properly populated.
  // TF_LITE_ENSURE_EQ(context, bias->quantization.type,
  // kTfLiteAffineQuantization);

  // Check data type.
  const auto* affine_quantization =
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b40a:	65bb      	str	r3, [r7, #88]	; 0x58
      reinterpret_cast<TfLiteAffineQuantization*>(filter->quantization.params);
  TF_LITE_ENSURE(context, affine_quantization);
 800b40c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d10a      	bne.n	800b428 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x94>
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	695c      	ldr	r4, [r3, #20]
 800b416:	4b87      	ldr	r3, [pc, #540]	; (800b634 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2a0>)
 800b418:	9300      	str	r3, [sp, #0]
 800b41a:	23e5      	movs	r3, #229	; 0xe5
 800b41c:	4a82      	ldr	r2, [pc, #520]	; (800b628 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 800b41e:	4986      	ldr	r1, [pc, #536]	; (800b638 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2a4>)
 800b420:	68f8      	ldr	r0, [r7, #12]
 800b422:	47a0      	blx	r4
 800b424:	2301      	movs	r3, #1
 800b426:	e149      	b.n	800b6bc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
  TF_LITE_ENSURE(context, affine_quantization->scale);
 800b428:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d10a      	bne.n	800b446 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0xb2>
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	695c      	ldr	r4, [r3, #20]
 800b434:	4b81      	ldr	r3, [pc, #516]	; (800b63c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2a8>)
 800b436:	9300      	str	r3, [sp, #0]
 800b438:	23e6      	movs	r3, #230	; 0xe6
 800b43a:	4a7b      	ldr	r2, [pc, #492]	; (800b628 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 800b43c:	497e      	ldr	r1, [pc, #504]	; (800b638 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2a4>)
 800b43e:	68f8      	ldr	r0, [r7, #12]
 800b440:	47a0      	blx	r4
 800b442:	2301      	movs	r3, #1
 800b444:	e13a      	b.n	800b6bc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
  const bool is_per_channel = affine_quantization->scale->size > 1;
 800b446:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	2b01      	cmp	r3, #1
 800b44e:	bfcc      	ite	gt
 800b450:	2301      	movgt	r3, #1
 800b452:	2300      	movle	r3, #0
 800b454:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if (is_per_channel) {
 800b458:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d067      	beq.n	800b530 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x19c>
    //  Currently only Int8/Int16 is supported for per channel quantization.
    TF_LITE_ENSURE(context,
 800b460:	68bb      	ldr	r3, [r7, #8]
 800b462:	781b      	ldrb	r3, [r3, #0]
 800b464:	2b09      	cmp	r3, #9
 800b466:	d00e      	beq.n	800b486 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0xf2>
 800b468:	68bb      	ldr	r3, [r7, #8]
 800b46a:	781b      	ldrb	r3, [r3, #0]
 800b46c:	2b07      	cmp	r3, #7
 800b46e:	d00a      	beq.n	800b486 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0xf2>
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	695c      	ldr	r4, [r3, #20]
 800b474:	4b72      	ldr	r3, [pc, #456]	; (800b640 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2ac>)
 800b476:	9300      	str	r3, [sp, #0]
 800b478:	23ea      	movs	r3, #234	; 0xea
 800b47a:	4a6b      	ldr	r2, [pc, #428]	; (800b628 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 800b47c:	496e      	ldr	r1, [pc, #440]	; (800b638 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2a4>)
 800b47e:	68f8      	ldr	r0, [r7, #12]
 800b480:	47a0      	blx	r4
 800b482:	2301      	movs	r3, #1
 800b484:	e11a      	b.n	800b6bc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
                   input->type == kTfLiteInt8 || input->type == kTfLiteInt16);
    TF_LITE_ENSURE_EQ(context, filter->type, kTfLiteInt8);
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	781b      	ldrb	r3, [r3, #0]
 800b48a:	2b09      	cmp	r3, #9
 800b48c:	d012      	beq.n	800b4b4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x120>
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	695c      	ldr	r4, [r3, #20]
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	781b      	ldrb	r3, [r3, #0]
 800b496:	461a      	mov	r2, r3
 800b498:	2309      	movs	r3, #9
 800b49a:	9303      	str	r3, [sp, #12]
 800b49c:	9202      	str	r2, [sp, #8]
 800b49e:	4b69      	ldr	r3, [pc, #420]	; (800b644 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2b0>)
 800b4a0:	9301      	str	r3, [sp, #4]
 800b4a2:	4b69      	ldr	r3, [pc, #420]	; (800b648 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2b4>)
 800b4a4:	9300      	str	r3, [sp, #0]
 800b4a6:	23ec      	movs	r3, #236	; 0xec
 800b4a8:	4a5f      	ldr	r2, [pc, #380]	; (800b628 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 800b4aa:	4960      	ldr	r1, [pc, #384]	; (800b62c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x298>)
 800b4ac:	68f8      	ldr	r0, [r7, #12]
 800b4ae:	47a0      	blx	r4
 800b4b0:	2301      	movs	r3, #1
 800b4b2:	e103      	b.n	800b6bc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size, num_channels);
 800b4b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800b4be:	429a      	cmp	r2, r3
 800b4c0:	d013      	beq.n	800b4ea <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x156>
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	695c      	ldr	r4, [r3, #20]
 800b4c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800b4d0:	9203      	str	r2, [sp, #12]
 800b4d2:	9302      	str	r3, [sp, #8]
 800b4d4:	4b5d      	ldr	r3, [pc, #372]	; (800b64c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2b8>)
 800b4d6:	9301      	str	r3, [sp, #4]
 800b4d8:	4b5d      	ldr	r3, [pc, #372]	; (800b650 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2bc>)
 800b4da:	9300      	str	r3, [sp, #0]
 800b4dc:	23ed      	movs	r3, #237	; 0xed
 800b4de:	4a52      	ldr	r2, [pc, #328]	; (800b628 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 800b4e0:	4952      	ldr	r1, [pc, #328]	; (800b62c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x298>)
 800b4e2:	68f8      	ldr	r0, [r7, #12]
 800b4e4:	47a0      	blx	r4
 800b4e6:	2301      	movs	r3, #1
 800b4e8:	e0e8      	b.n	800b6bc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
    TF_LITE_ENSURE_EQ(
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	689a      	ldr	r2, [r3, #8]
 800b4ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b4f0:	689b      	ldr	r3, [r3, #8]
 800b4f2:	009b      	lsls	r3, r3, #2
 800b4f4:	4413      	add	r3, r2
 800b4f6:	685b      	ldr	r3, [r3, #4]
 800b4f8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800b4fc:	429a      	cmp	r2, r3
 800b4fe:	d017      	beq.n	800b530 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x19c>
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	695c      	ldr	r4, [r3, #20]
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	689a      	ldr	r2, [r3, #8]
 800b508:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b50a:	689b      	ldr	r3, [r3, #8]
 800b50c:	009b      	lsls	r3, r3, #2
 800b50e:	4413      	add	r3, r2
 800b510:	685b      	ldr	r3, [r3, #4]
 800b512:	9303      	str	r3, [sp, #12]
 800b514:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b518:	9302      	str	r3, [sp, #8]
 800b51a:	4b4e      	ldr	r3, [pc, #312]	; (800b654 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2c0>)
 800b51c:	9301      	str	r3, [sp, #4]
 800b51e:	4b4b      	ldr	r3, [pc, #300]	; (800b64c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2b8>)
 800b520:	9300      	str	r3, [sp, #0]
 800b522:	23ee      	movs	r3, #238	; 0xee
 800b524:	4a40      	ldr	r2, [pc, #256]	; (800b628 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 800b526:	4941      	ldr	r1, [pc, #260]	; (800b62c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x298>)
 800b528:	68f8      	ldr	r0, [r7, #12]
 800b52a:	47a0      	blx	r4
 800b52c:	2301      	movs	r3, #1
 800b52e:	e0c5      	b.n	800b6bc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
        context, num_channels,
        filter->dims->data[affine_quantization->quantized_dimension]);
  }

  // Populate multiplier and shift using affine quantization.
  const float input_scale = input->params.scale;
 800b530:	68bb      	ldr	r3, [r7, #8]
 800b532:	68db      	ldr	r3, [r3, #12]
 800b534:	653b      	str	r3, [r7, #80]	; 0x50
  const float output_scale = output->params.scale;
 800b536:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b538:	68db      	ldr	r3, [r3, #12]
 800b53a:	64fb      	str	r3, [r7, #76]	; 0x4c
  const float* filter_scales = affine_quantization->scale->data;
 800b53c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	3304      	adds	r3, #4
 800b542:	64bb      	str	r3, [r7, #72]	; 0x48
  for (int i = 0; i < num_channels; ++i) {
 800b544:	2300      	movs	r3, #0
 800b546:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b548:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b54a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b54e:	429a      	cmp	r2, r3
 800b550:	da47      	bge.n	800b5e2 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x24e>
    // If per-tensor quantization parameter is specified, broadcast it along the
    // quantization dimension (channels_out).
    const float scale = is_per_channel ? filter_scales[i] : filter_scales[0];
 800b552:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b556:	2b00      	cmp	r3, #0
 800b558:	d005      	beq.n	800b566 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x1d2>
 800b55a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b55c:	009b      	lsls	r3, r3, #2
 800b55e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b560:	4413      	add	r3, r2
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	e001      	b.n	800b56a <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x1d6>
 800b566:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	647b      	str	r3, [r7, #68]	; 0x44
    const double filter_scale = static_cast<double>(scale);
 800b56c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800b56e:	f7f5 f81d 	bl	80005ac <__aeabi_f2d>
 800b572:	4602      	mov	r2, r0
 800b574:	460b      	mov	r3, r1
 800b576:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    const double effective_output_scale = static_cast<double>(input_scale) *
 800b57a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800b57c:	f7f5 f816 	bl	80005ac <__aeabi_f2d>
 800b580:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b584:	f7f5 f86a 	bl	800065c <__aeabi_dmul>
 800b588:	4602      	mov	r2, r0
 800b58a:	460b      	mov	r3, r1
 800b58c:	4614      	mov	r4, r2
 800b58e:	461d      	mov	r5, r3
                                          filter_scale /
                                          static_cast<double>(output_scale);
 800b590:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800b592:	f7f5 f80b 	bl	80005ac <__aeabi_f2d>
 800b596:	4602      	mov	r2, r0
 800b598:	460b      	mov	r3, r1
    const double effective_output_scale = static_cast<double>(input_scale) *
 800b59a:	4620      	mov	r0, r4
 800b59c:	4629      	mov	r1, r5
 800b59e:	f7f5 f987 	bl	80008b0 <__aeabi_ddiv>
 800b5a2:	4602      	mov	r2, r0
 800b5a4:	460b      	mov	r3, r1
 800b5a6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    int32_t significand;
    int channel_shift;
    QuantizeMultiplier(effective_output_scale, &significand, &channel_shift);
 800b5aa:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800b5ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b5b2:	4611      	mov	r1, r2
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 800b5ba:	f7ff fbcd 	bl	800ad58 <_ZN6tflite18QuantizeMultiplierEdPlPi>
    per_channel_multiplier[i] = significand;
 800b5be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b5c0:	009b      	lsls	r3, r3, #2
 800b5c2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b5c6:	4413      	add	r3, r2
 800b5c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b5ca:	601a      	str	r2, [r3, #0]
    per_channel_shift[i] = channel_shift;
 800b5cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b5ce:	009b      	lsls	r3, r3, #2
 800b5d0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800b5d4:	4413      	add	r3, r2
 800b5d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5d8:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < num_channels; ++i) {
 800b5da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b5dc:	3301      	adds	r3, #1
 800b5de:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b5e0:	e7b2      	b.n	800b548 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x1b4>
  }

  // Populate scalar quantization parameters.
  // This check on legacy quantization parameters is kept only for backward
  // compatibility.
  if (input->type == kTfLiteUInt8) {
 800b5e2:	68bb      	ldr	r3, [r7, #8]
 800b5e4:	781b      	ldrb	r3, [r3, #0]
 800b5e6:	2b03      	cmp	r3, #3
 800b5e8:	d146      	bne.n	800b678 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2e4>
    // Check bias scale == input scale * filter scale.
    double real_multiplier = 0.0;
 800b5ea:	f04f 0200 	mov.w	r2, #0
 800b5ee:	f04f 0300 	mov.w	r3, #0
 800b5f2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 800b5f6:	f107 0318 	add.w	r3, r7, #24
 800b5fa:	9301      	str	r3, [sp, #4]
 800b5fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b5fe:	9300      	str	r3, [sp, #0]
 800b600:	683b      	ldr	r3, [r7, #0]
 800b602:	687a      	ldr	r2, [r7, #4]
 800b604:	68b9      	ldr	r1, [r7, #8]
 800b606:	68f8      	ldr	r0, [r7, #12]
 800b608:	f000 f85e 	bl	800b6c8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
 800b60c:	4603      	mov	r3, r0
 800b60e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b612:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b616:	2b00      	cmp	r3, #0
 800b618:	d01e      	beq.n	800b658 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2c4>
 800b61a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b61e:	e04d      	b.n	800b6bc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
 800b620:	080278c0 	.word	0x080278c0
 800b624:	080278dc 	.word	0x080278dc
 800b628:	08027868 	.word	0x08027868
 800b62c:	080278a4 	.word	0x080278a4
 800b630:	080278f8 	.word	0x080278f8
 800b634:	0802792c 	.word	0x0802792c
 800b638:	08027914 	.word	0x08027914
 800b63c:	08027940 	.word	0x08027940
 800b640:	0802795c 	.word	0x0802795c
 800b644:	08027998 	.word	0x08027998
 800b648:	080279a4 	.word	0x080279a4
 800b64c:	080279b4 	.word	0x080279b4
 800b650:	080279c4 	.word	0x080279c4
 800b654:	080279e8 	.word	0x080279e8
        context, input, filter, bias, output, &real_multiplier));
    int exponent;

    // Populate quantization parameters with multiplier and shift.
    QuantizeMultiplier(real_multiplier, multiplier, &exponent);
 800b658:	ed97 7b06 	vldr	d7, [r7, #24]
 800b65c:	f107 0314 	add.w	r3, r7, #20
 800b660:	4619      	mov	r1, r3
 800b662:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800b664:	eeb0 0a47 	vmov.f32	s0, s14
 800b668:	eef0 0a67 	vmov.f32	s1, s15
 800b66c:	f7ff fb74 	bl	800ad58 <_ZN6tflite18QuantizeMultiplierEdPlPi>
    *shift = -exponent;
 800b670:	697b      	ldr	r3, [r7, #20]
 800b672:	425a      	negs	r2, r3
 800b674:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b676:	601a      	str	r2, [r3, #0]
  }
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
 800b678:	68bb      	ldr	r3, [r7, #8]
 800b67a:	781b      	ldrb	r3, [r3, #0]
 800b67c:	2b09      	cmp	r3, #9
 800b67e:	d007      	beq.n	800b690 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2fc>
 800b680:	68bb      	ldr	r3, [r7, #8]
 800b682:	781b      	ldrb	r3, [r3, #0]
 800b684:	2b03      	cmp	r3, #3
 800b686:	d003      	beq.n	800b690 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2fc>
      input->type == kTfLiteInt16) {
 800b688:	68bb      	ldr	r3, [r7, #8]
 800b68a:	781b      	ldrb	r3, [r3, #0]
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
 800b68c:	2b07      	cmp	r3, #7
 800b68e:	d114      	bne.n	800b6ba <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x326>
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
 800b690:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b692:	7819      	ldrb	r1, [r3, #0]
 800b694:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b698:	9300      	str	r3, [sp, #0]
 800b69a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b69e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800b6a0:	68f8      	ldr	r0, [r7, #12]
 800b6a2:	f000 fa03 	bl	800baac <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 800b6a6:	4603      	mov	r3, r0
 800b6a8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800b6ac:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d002      	beq.n	800b6ba <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x326>
 800b6b4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800b6b8:	e000      	b.n	800b6bc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
        context, activation, output, output_activation_min,
        output_activation_max));
  }
  return kTfLiteOk;
 800b6ba:	2300      	movs	r3, #0
}
 800b6bc:	4618      	mov	r0, r3
 800b6be:	3760      	adds	r7, #96	; 0x60
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	bdb0      	pop	{r4, r5, r7, pc}
 800b6c4:	0000      	movs	r0, r0
	...

0800b6c8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              const TfLiteTensor* bias,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 800b6c8:	b5b0      	push	{r4, r5, r7, lr}
 800b6ca:	b08e      	sub	sp, #56	; 0x38
 800b6cc:	af02      	add	r7, sp, #8
 800b6ce:	60f8      	str	r0, [r7, #12]
 800b6d0:	60b9      	str	r1, [r7, #8]
 800b6d2:	607a      	str	r2, [r7, #4]
 800b6d4:	603b      	str	r3, [r7, #0]
  const double input_product_scale = static_cast<double>(input->params.scale) *
 800b6d6:	68bb      	ldr	r3, [r7, #8]
 800b6d8:	68db      	ldr	r3, [r3, #12]
 800b6da:	4618      	mov	r0, r3
 800b6dc:	f7f4 ff66 	bl	80005ac <__aeabi_f2d>
 800b6e0:	4604      	mov	r4, r0
 800b6e2:	460d      	mov	r5, r1
                                     static_cast<double>(filter->params.scale);
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	68db      	ldr	r3, [r3, #12]
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	f7f4 ff5f 	bl	80005ac <__aeabi_f2d>
 800b6ee:	4602      	mov	r2, r0
 800b6f0:	460b      	mov	r3, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
 800b6f2:	4620      	mov	r0, r4
 800b6f4:	4629      	mov	r1, r5
 800b6f6:	f7f4 ffb1 	bl	800065c <__aeabi_dmul>
 800b6fa:	4602      	mov	r2, r0
 800b6fc:	460b      	mov	r3, r1
 800b6fe:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // The following conditions must be guaranteed by the training pipeline.
  if (bias) {
 800b702:	683b      	ldr	r3, [r7, #0]
 800b704:	2b00      	cmp	r3, #0
 800b706:	d04b      	beq.n	800b7a0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd8>
    const double bias_scale = static_cast<double>(bias->params.scale);
 800b708:	683b      	ldr	r3, [r7, #0]
 800b70a:	68db      	ldr	r3, [r3, #12]
 800b70c:	4618      	mov	r0, r3
 800b70e:	f7f4 ff4d 	bl	80005ac <__aeabi_f2d>
 800b712:	4602      	mov	r2, r0
 800b714:	460b      	mov	r3, r1
 800b716:	e9c7 2308 	strd	r2, r3, [r7, #32]
    // bias * (bias_scale - input_product_scale) / output_scale should be
    // a small number for an integer.
    // Since normally bias should be within a small range.
    // We should expect (bias_scale - input_product_scale) / output_scale to
    // be a small number like 0.02.
    const double scale_diff = std::abs(input_product_scale - bias_scale);
 800b71a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b71e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800b722:	f7f4 fde3 	bl	80002ec <__aeabi_dsub>
 800b726:	4602      	mov	r2, r0
 800b728:	460b      	mov	r3, r1
 800b72a:	ec43 2b17 	vmov	d7, r2, r3
 800b72e:	eeb0 0a47 	vmov.f32	s0, s14
 800b732:	eef0 0a67 	vmov.f32	s1, s15
 800b736:	f7ff fd7d 	bl	800b234 <_ZSt3absd>
 800b73a:	ed87 0b06 	vstr	d0, [r7, #24]
    const double output_scale = static_cast<double>(output->params.scale);
 800b73e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b740:	68db      	ldr	r3, [r3, #12]
 800b742:	4618      	mov	r0, r3
 800b744:	f7f4 ff32 	bl	80005ac <__aeabi_f2d>
 800b748:	4602      	mov	r2, r0
 800b74a:	460b      	mov	r3, r1
 800b74c:	e9c7 2304 	strd	r2, r3, [r7, #16]

    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
 800b750:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b754:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800b758:	f7f5 f8aa 	bl	80008b0 <__aeabi_ddiv>
 800b75c:	4602      	mov	r2, r0
 800b75e:	460b      	mov	r3, r1
 800b760:	4610      	mov	r0, r2
 800b762:	4619      	mov	r1, r3
 800b764:	2301      	movs	r3, #1
 800b766:	461c      	mov	r4, r3
 800b768:	a318      	add	r3, pc, #96	; (adr r3, 800b7cc <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x104>)
 800b76a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b76e:	f7f5 f9f1 	bl	8000b54 <__aeabi_dcmple>
 800b772:	4603      	mov	r3, r0
 800b774:	2b00      	cmp	r3, #0
 800b776:	d101      	bne.n	800b77c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xb4>
 800b778:	2300      	movs	r3, #0
 800b77a:	461c      	mov	r4, r3
 800b77c:	b2e3      	uxtb	r3, r4
 800b77e:	f083 0301 	eor.w	r3, r3, #1
 800b782:	b2db      	uxtb	r3, r3
 800b784:	2b00      	cmp	r3, #0
 800b786:	d00b      	beq.n	800b7a0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd8>
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	695c      	ldr	r4, [r3, #20]
 800b78c:	4b0c      	ldr	r3, [pc, #48]	; (800b7c0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xf8>)
 800b78e:	9300      	str	r3, [sp, #0]
 800b790:	f44f 739e 	mov.w	r3, #316	; 0x13c
 800b794:	4a0b      	ldr	r2, [pc, #44]	; (800b7c4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xfc>)
 800b796:	490c      	ldr	r1, [pc, #48]	; (800b7c8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x100>)
 800b798:	68f8      	ldr	r0, [r7, #12]
 800b79a:	47a0      	blx	r4
 800b79c:	2301      	movs	r3, #1
 800b79e:	e009      	b.n	800b7b4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xec>
  }
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
 800b7a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b7a2:	9300      	str	r3, [sp, #0]
 800b7a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7a6:	687a      	ldr	r2, [r7, #4]
 800b7a8:	68b9      	ldr	r1, [r7, #8]
 800b7aa:	68f8      	ldr	r0, [r7, #12]
 800b7ac:	f000 f812 	bl	800b7d4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>
 800b7b0:	4603      	mov	r3, r0
                                          multiplier);
 800b7b2:	bf00      	nop
}
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	3730      	adds	r7, #48	; 0x30
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	bdb0      	pop	{r4, r5, r7, pc}
 800b7bc:	f3af 8000 	nop.w
 800b7c0:	08027a28 	.word	0x08027a28
 800b7c4:	08027868 	.word	0x08027868
 800b7c8:	08027914 	.word	0x08027914
 800b7cc:	47ae147b 	.word	0x47ae147b
 800b7d0:	3f947ae1 	.word	0x3f947ae1

0800b7d4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>:

TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 800b7d4:	b590      	push	{r4, r7, lr}
 800b7d6:	b089      	sub	sp, #36	; 0x24
 800b7d8:	af02      	add	r7, sp, #8
 800b7da:	60f8      	str	r0, [r7, #12]
 800b7dc:	60b9      	str	r1, [r7, #8]
 800b7de:	607a      	str	r2, [r7, #4]
 800b7e0:	603b      	str	r3, [r7, #0]
  const double input_product_scale =
      static_cast<double>(input->params.scale * filter->params.scale);
 800b7e2:	68bb      	ldr	r3, [r7, #8]
 800b7e4:	ed93 7a03 	vldr	s14, [r3, #12]
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	edd3 7a03 	vldr	s15, [r3, #12]
 800b7ee:	ee67 7a27 	vmul.f32	s15, s14, s15
  const double input_product_scale =
 800b7f2:	ee17 0a90 	vmov	r0, s15
 800b7f6:	f7f4 fed9 	bl	80005ac <__aeabi_f2d>
 800b7fa:	4602      	mov	r2, r0
 800b7fc:	460b      	mov	r3, r1
 800b7fe:	e9c7 2304 	strd	r2, r3, [r7, #16]
  TF_LITE_ENSURE(context, input_product_scale >= 0);
 800b802:	2301      	movs	r3, #1
 800b804:	461c      	mov	r4, r3
 800b806:	f04f 0200 	mov.w	r2, #0
 800b80a:	f04f 0300 	mov.w	r3, #0
 800b80e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800b812:	f7f5 f9a9 	bl	8000b68 <__aeabi_dcmpge>
 800b816:	4603      	mov	r3, r0
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d101      	bne.n	800b820 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x4c>
 800b81c:	2300      	movs	r3, #0
 800b81e:	461c      	mov	r4, r3
 800b820:	b2e3      	uxtb	r3, r4
 800b822:	f083 0301 	eor.w	r3, r3, #1
 800b826:	b2db      	uxtb	r3, r3
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d00b      	beq.n	800b844 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x70>
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	695c      	ldr	r4, [r3, #20]
 800b830:	4b0f      	ldr	r3, [pc, #60]	; (800b870 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x9c>)
 800b832:	9300      	str	r3, [sp, #0]
 800b834:	f240 1349 	movw	r3, #329	; 0x149
 800b838:	4a0e      	ldr	r2, [pc, #56]	; (800b874 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa0>)
 800b83a:	490f      	ldr	r1, [pc, #60]	; (800b878 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa4>)
 800b83c:	68f8      	ldr	r0, [r7, #12]
 800b83e:	47a0      	blx	r4
 800b840:	2301      	movs	r3, #1
 800b842:	e010      	b.n	800b866 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x92>
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
 800b844:	683b      	ldr	r3, [r7, #0]
 800b846:	68db      	ldr	r3, [r3, #12]
 800b848:	4618      	mov	r0, r3
 800b84a:	f7f4 feaf 	bl	80005ac <__aeabi_f2d>
 800b84e:	4602      	mov	r2, r0
 800b850:	460b      	mov	r3, r1
 800b852:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800b856:	f7f5 f82b 	bl	80008b0 <__aeabi_ddiv>
 800b85a:	4602      	mov	r2, r0
 800b85c:	460b      	mov	r3, r1
 800b85e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b860:	e9c1 2300 	strd	r2, r3, [r1]

  return kTfLiteOk;
 800b864:	2300      	movs	r3, #0
}
 800b866:	4618      	mov	r0, r3
 800b868:	371c      	adds	r7, #28
 800b86a:	46bd      	mov	sp, r7
 800b86c:	bd90      	pop	{r4, r7, pc}
 800b86e:	bf00      	nop
 800b870:	08027a4c 	.word	0x08027a4c
 800b874:	08027868 	.word	0x08027868
 800b878:	08027914 	.word	0x08027914

0800b87c <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>:

namespace {

inline TfLiteStatus Quantize(TfLiteContext* context, float scale,
                             int32_t zero_point, float f, int32_t& q) {
 800b87c:	b590      	push	{r4, r7, lr}
 800b87e:	b08b      	sub	sp, #44	; 0x2c
 800b880:	af02      	add	r7, sp, #8
 800b882:	6178      	str	r0, [r7, #20]
 800b884:	ed87 0a04 	vstr	s0, [r7, #16]
 800b888:	60f9      	str	r1, [r7, #12]
 800b88a:	edc7 0a02 	vstr	s1, [r7, #8]
 800b88e:	607a      	str	r2, [r7, #4]
  const float tmp = TfLiteRound(f / scale);
 800b890:	ed97 7a02 	vldr	s14, [r7, #8]
 800b894:	edd7 7a04 	vldr	s15, [r7, #16]
 800b898:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800b89c:	eeb0 0a66 	vmov.f32	s0, s13
 800b8a0:	f7ff fc17 	bl	800b0d2 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 800b8a4:	ed87 0a07 	vstr	s0, [r7, #28]
  const bool no_integer_overflow_from_quantization =
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
 800b8a8:	f7ff fc57 	bl	800b15a <_ZNSt14numeric_limitsIlE3minEv>
 800b8ac:	ee07 0a90 	vmov	s15, r0
 800b8b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b8b4:	ed97 7a07 	vldr	s14, [r7, #28]
 800b8b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b8bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8c0:	db0e      	blt.n	800b8e0 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x64>
       tmp <= static_cast<float>(std::numeric_limits<int32_t>::max()));
 800b8c2:	f7ff fa40 	bl	800ad46 <_ZNSt14numeric_limitsIlE3maxEv>
 800b8c6:	ee07 0a90 	vmov	s15, r0
 800b8ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
 800b8ce:	ed97 7a07 	vldr	s14, [r7, #28]
 800b8d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b8d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8da:	d801      	bhi.n	800b8e0 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x64>
 800b8dc:	2301      	movs	r3, #1
 800b8de:	e000      	b.n	800b8e2 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x66>
 800b8e0:	2300      	movs	r3, #0
       tmp <= static_cast<float>(std::numeric_limits<int32_t>::max()));
 800b8e2:	76fb      	strb	r3, [r7, #27]
  TF_LITE_ENSURE(context, no_integer_overflow_from_quantization);
 800b8e4:	7efb      	ldrb	r3, [r7, #27]
 800b8e6:	f083 0301 	eor.w	r3, r3, #1
 800b8ea:	b2db      	uxtb	r3, r3
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d00b      	beq.n	800b908 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x8c>
 800b8f0:	697b      	ldr	r3, [r7, #20]
 800b8f2:	695c      	ldr	r4, [r3, #20]
 800b8f4:	4b0c      	ldr	r3, [pc, #48]	; (800b928 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0xac>)
 800b8f6:	9300      	str	r3, [sp, #0]
 800b8f8:	f240 1357 	movw	r3, #343	; 0x157
 800b8fc:	4a0b      	ldr	r2, [pc, #44]	; (800b92c <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0xb0>)
 800b8fe:	490c      	ldr	r1, [pc, #48]	; (800b930 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0xb4>)
 800b900:	6978      	ldr	r0, [r7, #20]
 800b902:	47a0      	blx	r4
 800b904:	2301      	movs	r3, #1
 800b906:	e00a      	b.n	800b91e <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0xa2>
  q = zero_point + static_cast<int32_t>(tmp);
 800b908:	edd7 7a07 	vldr	s15, [r7, #28]
 800b90c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b910:	ee17 2a90 	vmov	r2, s15
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	441a      	add	r2, r3
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800b91c:	2300      	movs	r3, #0
}
 800b91e:	4618      	mov	r0, r3
 800b920:	3724      	adds	r7, #36	; 0x24
 800b922:	46bd      	mov	sp, r7
 800b924:	bd90      	pop	{r4, r7, pc}
 800b926:	bf00      	nop
 800b928:	08027a68 	.word	0x08027a68
 800b92c:	08027868 	.word	0x08027868
 800b930:	08027914 	.word	0x08027914

0800b934 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_>:

TfLiteStatus CalculateActivationRangeQuantizedImpl(
    TfLiteContext* context, TfLiteFusedActivation activation, int32_t qmin,
    int32_t qmax, TfLiteTensor* output, int32_t* act_min, int32_t* act_max) {
 800b934:	b580      	push	{r7, lr}
 800b936:	b08a      	sub	sp, #40	; 0x28
 800b938:	af00      	add	r7, sp, #0
 800b93a:	60f8      	str	r0, [r7, #12]
 800b93c:	607a      	str	r2, [r7, #4]
 800b93e:	603b      	str	r3, [r7, #0]
 800b940:	460b      	mov	r3, r1
 800b942:	72fb      	strb	r3, [r7, #11]
  const auto scale = output->params.scale;
 800b944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b946:	68db      	ldr	r3, [r3, #12]
 800b948:	627b      	str	r3, [r7, #36]	; 0x24
  const auto zero_point = output->params.zero_point;
 800b94a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b94c:	691b      	ldr	r3, [r3, #16]
 800b94e:	623b      	str	r3, [r7, #32]

  int32_t tmp_q;
  if (activation == kTfLiteActRelu) {
 800b950:	7afb      	ldrb	r3, [r7, #11]
 800b952:	2b01      	cmp	r3, #1
 800b954:	d120      	bne.n	800b998 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x64>
    TF_LITE_ENSURE_OK(context,
 800b956:	f107 0314 	add.w	r3, r7, #20
 800b95a:	461a      	mov	r2, r3
 800b95c:	eddf 0a52 	vldr	s1, [pc, #328]	; 800baa8 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x174>
 800b960:	6a39      	ldr	r1, [r7, #32]
 800b962:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 800b966:	68f8      	ldr	r0, [r7, #12]
 800b968:	f7ff ff88 	bl	800b87c <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 800b96c:	4603      	mov	r3, r0
 800b96e:	76fb      	strb	r3, [r7, #27]
 800b970:	7efb      	ldrb	r3, [r7, #27]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d001      	beq.n	800b97a <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x46>
 800b976:	7efb      	ldrb	r3, [r7, #27]
 800b978:	e091      	b.n	800ba9e <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, 0.0, tmp_q));
    *act_min = std::max(qmin, tmp_q);
 800b97a:	f107 0214 	add.w	r2, r7, #20
 800b97e:	1d3b      	adds	r3, r7, #4
 800b980:	4611      	mov	r1, r2
 800b982:	4618      	mov	r0, r3
 800b984:	f000 f912 	bl	800bbac <_ZSt3maxIlERKT_S2_S2_>
 800b988:	4603      	mov	r3, r0
 800b98a:	681a      	ldr	r2, [r3, #0]
 800b98c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b98e:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 800b990:	683a      	ldr	r2, [r7, #0]
 800b992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b994:	601a      	str	r2, [r3, #0]
 800b996:	e081      	b.n	800ba9c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x168>
  } else if (activation == kTfLiteActRelu6) {
 800b998:	7afb      	ldrb	r3, [r7, #11]
 800b99a:	2b03      	cmp	r3, #3
 800b99c:	d13a      	bne.n	800ba14 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0xe0>
    TF_LITE_ENSURE_OK(context,
 800b99e:	f107 0314 	add.w	r3, r7, #20
 800b9a2:	461a      	mov	r2, r3
 800b9a4:	eddf 0a40 	vldr	s1, [pc, #256]	; 800baa8 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x174>
 800b9a8:	6a39      	ldr	r1, [r7, #32]
 800b9aa:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 800b9ae:	68f8      	ldr	r0, [r7, #12]
 800b9b0:	f7ff ff64 	bl	800b87c <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 800b9b4:	4603      	mov	r3, r0
 800b9b6:	777b      	strb	r3, [r7, #29]
 800b9b8:	7f7b      	ldrb	r3, [r7, #29]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d001      	beq.n	800b9c2 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x8e>
 800b9be:	7f7b      	ldrb	r3, [r7, #29]
 800b9c0:	e06d      	b.n	800ba9e <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, 0.0, tmp_q));
    *act_min = std::max(qmin, tmp_q);
 800b9c2:	f107 0214 	add.w	r2, r7, #20
 800b9c6:	1d3b      	adds	r3, r7, #4
 800b9c8:	4611      	mov	r1, r2
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	f000 f8ee 	bl	800bbac <_ZSt3maxIlERKT_S2_S2_>
 800b9d0:	4603      	mov	r3, r0
 800b9d2:	681a      	ldr	r2, [r3, #0]
 800b9d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9d6:	601a      	str	r2, [r3, #0]
    TF_LITE_ENSURE_OK(context,
 800b9d8:	f107 0314 	add.w	r3, r7, #20
 800b9dc:	461a      	mov	r2, r3
 800b9de:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 800b9e2:	6a39      	ldr	r1, [r7, #32]
 800b9e4:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 800b9e8:	68f8      	ldr	r0, [r7, #12]
 800b9ea:	f7ff ff47 	bl	800b87c <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 800b9ee:	4603      	mov	r3, r0
 800b9f0:	773b      	strb	r3, [r7, #28]
 800b9f2:	7f3b      	ldrb	r3, [r7, #28]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d001      	beq.n	800b9fc <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0xc8>
 800b9f8:	7f3b      	ldrb	r3, [r7, #28]
 800b9fa:	e050      	b.n	800ba9e <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, 6.0, tmp_q));
    *act_max = std::min(qmax, tmp_q);
 800b9fc:	f107 0214 	add.w	r2, r7, #20
 800ba00:	463b      	mov	r3, r7
 800ba02:	4611      	mov	r1, r2
 800ba04:	4618      	mov	r0, r3
 800ba06:	f000 f8bd 	bl	800bb84 <_ZSt3minIlERKT_S2_S2_>
 800ba0a:	4603      	mov	r3, r0
 800ba0c:	681a      	ldr	r2, [r3, #0]
 800ba0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba10:	601a      	str	r2, [r3, #0]
 800ba12:	e043      	b.n	800ba9c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x168>
  } else if (activation == kTfLiteActReluN1To1) {
 800ba14:	7afb      	ldrb	r3, [r7, #11]
 800ba16:	2b02      	cmp	r3, #2
 800ba18:	d13a      	bne.n	800ba90 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x15c>
    TF_LITE_ENSURE_OK(context,
 800ba1a:	f107 0314 	add.w	r3, r7, #20
 800ba1e:	461a      	mov	r2, r3
 800ba20:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 800ba24:	6a39      	ldr	r1, [r7, #32]
 800ba26:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 800ba2a:	68f8      	ldr	r0, [r7, #12]
 800ba2c:	f7ff ff26 	bl	800b87c <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 800ba30:	4603      	mov	r3, r0
 800ba32:	77fb      	strb	r3, [r7, #31]
 800ba34:	7ffb      	ldrb	r3, [r7, #31]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d001      	beq.n	800ba3e <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x10a>
 800ba3a:	7ffb      	ldrb	r3, [r7, #31]
 800ba3c:	e02f      	b.n	800ba9e <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, -1.0, tmp_q));
    *act_min = std::max(qmin, tmp_q);
 800ba3e:	f107 0214 	add.w	r2, r7, #20
 800ba42:	1d3b      	adds	r3, r7, #4
 800ba44:	4611      	mov	r1, r2
 800ba46:	4618      	mov	r0, r3
 800ba48:	f000 f8b0 	bl	800bbac <_ZSt3maxIlERKT_S2_S2_>
 800ba4c:	4603      	mov	r3, r0
 800ba4e:	681a      	ldr	r2, [r3, #0]
 800ba50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba52:	601a      	str	r2, [r3, #0]
    TF_LITE_ENSURE_OK(context,
 800ba54:	f107 0314 	add.w	r3, r7, #20
 800ba58:	461a      	mov	r2, r3
 800ba5a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800ba5e:	6a39      	ldr	r1, [r7, #32]
 800ba60:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 800ba64:	68f8      	ldr	r0, [r7, #12]
 800ba66:	f7ff ff09 	bl	800b87c <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 800ba6a:	4603      	mov	r3, r0
 800ba6c:	77bb      	strb	r3, [r7, #30]
 800ba6e:	7fbb      	ldrb	r3, [r7, #30]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d001      	beq.n	800ba78 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x144>
 800ba74:	7fbb      	ldrb	r3, [r7, #30]
 800ba76:	e012      	b.n	800ba9e <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, 1.0, tmp_q));
    *act_max = std::min(qmax, tmp_q);
 800ba78:	f107 0214 	add.w	r2, r7, #20
 800ba7c:	463b      	mov	r3, r7
 800ba7e:	4611      	mov	r1, r2
 800ba80:	4618      	mov	r0, r3
 800ba82:	f000 f87f 	bl	800bb84 <_ZSt3minIlERKT_S2_S2_>
 800ba86:	4603      	mov	r3, r0
 800ba88:	681a      	ldr	r2, [r3, #0]
 800ba8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba8c:	601a      	str	r2, [r3, #0]
 800ba8e:	e005      	b.n	800ba9c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x168>
  } else {
    *act_min = qmin;
 800ba90:	687a      	ldr	r2, [r7, #4]
 800ba92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba94:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 800ba96:	683a      	ldr	r2, [r7, #0]
 800ba98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba9a:	601a      	str	r2, [r3, #0]
  }
  return kTfLiteOk;
 800ba9c:	2300      	movs	r3, #0
}
 800ba9e:	4618      	mov	r0, r3
 800baa0:	3728      	adds	r7, #40	; 0x28
 800baa2:	46bd      	mov	sp, r7
 800baa4:	bd80      	pop	{r7, pc}
 800baa6:	bf00      	nop
 800baa8:	00000000 	.word	0x00000000

0800baac <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
 800baac:	b590      	push	{r4, r7, lr}
 800baae:	b08b      	sub	sp, #44	; 0x2c
 800bab0:	af04      	add	r7, sp, #16
 800bab2:	60f8      	str	r0, [r7, #12]
 800bab4:	607a      	str	r2, [r7, #4]
 800bab6:	603b      	str	r3, [r7, #0]
 800bab8:	460b      	mov	r3, r1
 800baba:	72fb      	strb	r3, [r7, #11]
  int32_t qmin = 0;
 800babc:	2300      	movs	r3, #0
 800babe:	617b      	str	r3, [r7, #20]
  int32_t qmax = 0;
 800bac0:	2300      	movs	r3, #0
 800bac2:	613b      	str	r3, [r7, #16]
  if (output->type == kTfLiteUInt8) {
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	781b      	ldrb	r3, [r3, #0]
 800bac8:	2b03      	cmp	r3, #3
 800baca:	d108      	bne.n	800bade <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x32>
    qmin = std::numeric_limits<uint8_t>::min();
 800bacc:	f7ff fb22 	bl	800b114 <_ZNSt14numeric_limitsIhE3minEv>
 800bad0:	4603      	mov	r3, r0
 800bad2:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<uint8_t>::max();
 800bad4:	f7ff fb26 	bl	800b124 <_ZNSt14numeric_limitsIhE3maxEv>
 800bad8:	4603      	mov	r3, r0
 800bada:	613b      	str	r3, [r7, #16]
 800badc:	e025      	b.n	800bb2a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else if (output->type == kTfLiteInt8) {
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	781b      	ldrb	r3, [r3, #0]
 800bae2:	2b09      	cmp	r3, #9
 800bae4:	d108      	bne.n	800baf8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x4c>
    qmin = std::numeric_limits<int8_t>::min();
 800bae6:	f7ff fb04 	bl	800b0f2 <_ZNSt14numeric_limitsIaE3minEv>
 800baea:	4603      	mov	r3, r0
 800baec:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int8_t>::max();
 800baee:	f7ff fb09 	bl	800b104 <_ZNSt14numeric_limitsIaE3maxEv>
 800baf2:	4603      	mov	r3, r0
 800baf4:	613b      	str	r3, [r7, #16]
 800baf6:	e018      	b.n	800bb2a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else if (output->type == kTfLiteInt16) {
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	781b      	ldrb	r3, [r3, #0]
 800bafc:	2b07      	cmp	r3, #7
 800bafe:	d108      	bne.n	800bb12 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x66>
    qmin = std::numeric_limits<int16_t>::min();
 800bb00:	f7ff fb18 	bl	800b134 <_ZNSt14numeric_limitsIsE3minEv>
 800bb04:	4603      	mov	r3, r0
 800bb06:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int16_t>::max();
 800bb08:	f7ff fb1e 	bl	800b148 <_ZNSt14numeric_limitsIsE3maxEv>
 800bb0c:	4603      	mov	r3, r0
 800bb0e:	613b      	str	r3, [r7, #16]
 800bb10:	e00b      	b.n	800bb2a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else {
    TF_LITE_ENSURE(context, false);
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	695c      	ldr	r4, [r3, #20]
 800bb16:	4b0e      	ldr	r3, [pc, #56]	; (800bb50 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa4>)
 800bb18:	9300      	str	r3, [sp, #0]
 800bb1a:	f240 138f 	movw	r3, #399	; 0x18f
 800bb1e:	4a0d      	ldr	r2, [pc, #52]	; (800bb54 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa8>)
 800bb20:	490d      	ldr	r1, [pc, #52]	; (800bb58 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xac>)
 800bb22:	68f8      	ldr	r0, [r7, #12]
 800bb24:	47a0      	blx	r4
 800bb26:	2301      	movs	r3, #1
 800bb28:	e00d      	b.n	800bb46 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x9a>
  }

  return CalculateActivationRangeQuantizedImpl(context, activation, qmin, qmax,
 800bb2a:	7af9      	ldrb	r1, [r7, #11]
 800bb2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb2e:	9302      	str	r3, [sp, #8]
 800bb30:	683b      	ldr	r3, [r7, #0]
 800bb32:	9301      	str	r3, [sp, #4]
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	9300      	str	r3, [sp, #0]
 800bb38:	693b      	ldr	r3, [r7, #16]
 800bb3a:	697a      	ldr	r2, [r7, #20]
 800bb3c:	68f8      	ldr	r0, [r7, #12]
 800bb3e:	f7ff fef9 	bl	800b934 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_>
 800bb42:	4603      	mov	r3, r0
                                               output, act_min, act_max);
 800bb44:	bf00      	nop
}
 800bb46:	4618      	mov	r0, r3
 800bb48:	371c      	adds	r7, #28
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	bd90      	pop	{r4, r7, pc}
 800bb4e:	bf00      	nop
 800bb50:	08027a90 	.word	0x08027a90
 800bb54:	08027868 	.word	0x08027868
 800bb58:	08027914 	.word	0x08027914

0800bb5c <_ZSt3maxIiERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 800bb5c:	b480      	push	{r7}
 800bb5e:	b083      	sub	sp, #12
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
 800bb64:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681a      	ldr	r2, [r3, #0]
 800bb6a:	683b      	ldr	r3, [r7, #0]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	429a      	cmp	r2, r3
 800bb70:	da01      	bge.n	800bb76 <_ZSt3maxIiERKT_S2_S2_+0x1a>
	return __b;
 800bb72:	683b      	ldr	r3, [r7, #0]
 800bb74:	e000      	b.n	800bb78 <_ZSt3maxIiERKT_S2_S2_+0x1c>
      return __a;
 800bb76:	687b      	ldr	r3, [r7, #4]
    }
 800bb78:	4618      	mov	r0, r3
 800bb7a:	370c      	adds	r7, #12
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb82:	4770      	bx	lr

0800bb84 <_ZSt3minIlERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800bb84:	b480      	push	{r7}
 800bb86:	b083      	sub	sp, #12
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	6078      	str	r0, [r7, #4]
 800bb8c:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800bb8e:	683b      	ldr	r3, [r7, #0]
 800bb90:	681a      	ldr	r2, [r3, #0]
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	429a      	cmp	r2, r3
 800bb98:	da01      	bge.n	800bb9e <_ZSt3minIlERKT_S2_S2_+0x1a>
	return __b;
 800bb9a:	683b      	ldr	r3, [r7, #0]
 800bb9c:	e000      	b.n	800bba0 <_ZSt3minIlERKT_S2_S2_+0x1c>
      return __a;
 800bb9e:	687b      	ldr	r3, [r7, #4]
    }
 800bba0:	4618      	mov	r0, r3
 800bba2:	370c      	adds	r7, #12
 800bba4:	46bd      	mov	sp, r7
 800bba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbaa:	4770      	bx	lr

0800bbac <_ZSt3maxIlERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 800bbac:	b480      	push	{r7}
 800bbae:	b083      	sub	sp, #12
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	6078      	str	r0, [r7, #4]
 800bbb4:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681a      	ldr	r2, [r3, #0]
 800bbba:	683b      	ldr	r3, [r7, #0]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	429a      	cmp	r2, r3
 800bbc0:	da01      	bge.n	800bbc6 <_ZSt3maxIlERKT_S2_S2_+0x1a>
	return __b;
 800bbc2:	683b      	ldr	r3, [r7, #0]
 800bbc4:	e000      	b.n	800bbc8 <_ZSt3maxIlERKT_S2_S2_+0x1c>
      return __a;
 800bbc6:	687b      	ldr	r3, [r7, #4]
    }
 800bbc8:	4618      	mov	r0, r3
 800bbca:	370c      	adds	r7, #12
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd2:	4770      	bx	lr

0800bbd4 <_ZNSt12_Vector_baseISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b082      	sub	sp, #8
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	4618      	mov	r0, r3
 800bbe0:	f000 f89c 	bl	800bd1c <_ZNSt12_Vector_baseISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EE12_Vector_implC1Ev>
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	3708      	adds	r7, #8
 800bbea:	46bd      	mov	sp, r7
 800bbec:	bd80      	pop	{r7, pc}

0800bbee <_ZNSt6vectorISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 800bbee:	b580      	push	{r7, lr}
 800bbf0:	b082      	sub	sp, #8
 800bbf2:	af00      	add	r7, sp, #0
 800bbf4:	6078      	str	r0, [r7, #4]
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	f7ff ffeb 	bl	800bbd4 <_ZNSt12_Vector_baseISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EEC1Ev>
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	4618      	mov	r0, r3
 800bc02:	3708      	adds	r7, #8
 800bc04:	46bd      	mov	sp, r7
 800bc06:	bd80      	pop	{r7, pc}

0800bc08 <_ZNK6tflite10OpResolver12GetDelegatesEi>:
  // Returns optional delegates for resolving and handling ops in the flatbuffer
  // model. This may be used in addition to the standard TfLiteRegistration
  // lookup for graph resolution.
  using TfLiteDelegatePtrVector =
      std::vector<std::unique_ptr<TfLiteDelegate, void (*)(TfLiteDelegate*)>>;
  virtual TfLiteDelegatePtrVector GetDelegates(int num_threads) const {
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b084      	sub	sp, #16
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	60f8      	str	r0, [r7, #12]
 800bc10:	60b9      	str	r1, [r7, #8]
 800bc12:	607a      	str	r2, [r7, #4]
    return TfLiteDelegatePtrVector();
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	2200      	movs	r2, #0
 800bc18:	601a      	str	r2, [r3, #0]
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	2200      	movs	r2, #0
 800bc1e:	605a      	str	r2, [r3, #4]
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	2200      	movs	r2, #0
 800bc24:	609a      	str	r2, [r3, #8]
 800bc26:	68f8      	ldr	r0, [r7, #12]
 800bc28:	f7ff ffe1 	bl	800bbee <_ZNSt6vectorISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EEC1Ev>
  }
 800bc2c:	68f8      	ldr	r0, [r7, #12]
 800bc2e:	3710      	adds	r7, #16
 800bc30:	46bd      	mov	sp, r7
 800bc32:	bd80      	pop	{r7, pc}

0800bc34 <_ZN6tflite10OpResolverD1Ev>:

  virtual ~OpResolver() {}
 800bc34:	b480      	push	{r7}
 800bc36:	b083      	sub	sp, #12
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	6078      	str	r0, [r7, #4]
 800bc3c:	4a04      	ldr	r2, [pc, #16]	; (800bc50 <_ZN6tflite10OpResolverD1Ev+0x1c>)
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	601a      	str	r2, [r3, #0]
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	4618      	mov	r0, r3
 800bc46:	370c      	adds	r7, #12
 800bc48:	46bd      	mov	sp, r7
 800bc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4e:	4770      	bx	lr
 800bc50:	0802c930 	.word	0x0802c930

0800bc54 <_ZN6tflite10OpResolverD0Ev>:
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b082      	sub	sp, #8
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
 800bc5c:	6878      	ldr	r0, [r7, #4]
 800bc5e:	f7ff ffe9 	bl	800bc34 <_ZN6tflite10OpResolverD1Ev>
 800bc62:	2104      	movs	r1, #4
 800bc64:	6878      	ldr	r0, [r7, #4]
 800bc66:	f019 fc68 	bl	802553a <_ZdlPvj>
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	3708      	adds	r7, #8
 800bc70:	46bd      	mov	sp, r7
 800bc72:	bd80      	pop	{r7, pc}

0800bc74 <_ZNK6tflite10OpResolver24MayContainUserDefinedOpsEv>:
  /// user-defined ops can't be guaranteed.
  ///
  /// Note that "user-defined" ops are not the same as "custom" ops;
  /// BuiltinOpResolver may support certain "custom" ops, in addition to
  /// "builtin" ops, and may not support all of the "builtin" op enum values.
  virtual bool MayContainUserDefinedOps() const { return true; }
 800bc74:	b480      	push	{r7}
 800bc76:	b083      	sub	sp, #12
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
 800bc7c:	2301      	movs	r3, #1
 800bc7e:	4618      	mov	r0, r3
 800bc80:	370c      	adds	r7, #12
 800bc82:	46bd      	mov	sp, r7
 800bc84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc88:	4770      	bx	lr

0800bc8a <_ZNK6tflite15MicroOpResolver6FindOpENS_15BuiltinOperatorEi>:
  // name.
  virtual const TfLiteRegistration* FindOp(const char* op) const = 0;

  // This implementation exists for compatibility with the OpResolver base class
  // and disregards the version parameter.
  const TfLiteRegistration* FindOp(BuiltinOperator op,
 800bc8a:	b580      	push	{r7, lr}
 800bc8c:	b084      	sub	sp, #16
 800bc8e:	af00      	add	r7, sp, #0
 800bc90:	60f8      	str	r0, [r7, #12]
 800bc92:	460b      	mov	r3, r1
 800bc94:	607a      	str	r2, [r7, #4]
 800bc96:	72fb      	strb	r3, [r7, #11]
                                   int version) const final {
    return FindOp(op);
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	3318      	adds	r3, #24
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	7afa      	ldrb	r2, [r7, #11]
 800bca2:	4611      	mov	r1, r2
 800bca4:	68f8      	ldr	r0, [r7, #12]
 800bca6:	4798      	blx	r3
 800bca8:	4603      	mov	r3, r0
  }
 800bcaa:	4618      	mov	r0, r3
 800bcac:	3710      	adds	r7, #16
 800bcae:	46bd      	mov	sp, r7
 800bcb0:	bd80      	pop	{r7, pc}

0800bcb2 <_ZNK6tflite15MicroOpResolver6FindOpEPKci>:

  // This implementation exists for compatibility with the OpResolver base class
  // and disregards the version parameter.
  const TfLiteRegistration* FindOp(const char* op, int version) const final {
 800bcb2:	b580      	push	{r7, lr}
 800bcb4:	b084      	sub	sp, #16
 800bcb6:	af00      	add	r7, sp, #0
 800bcb8:	60f8      	str	r0, [r7, #12]
 800bcba:	60b9      	str	r1, [r7, #8]
 800bcbc:	607a      	str	r2, [r7, #4]
    return FindOp(op);
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	331c      	adds	r3, #28
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	68b9      	ldr	r1, [r7, #8]
 800bcc8:	68f8      	ldr	r0, [r7, #12]
 800bcca:	4798      	blx	r3
 800bccc:	4603      	mov	r3, r0
  }
 800bcce:	4618      	mov	r0, r3
 800bcd0:	3710      	adds	r7, #16
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	bd80      	pop	{r7, pc}
	...

0800bcd8 <_ZN6tflite15MicroOpResolverD1Ev>:

  // Returns the operator specific parsing function for the OpData for a
  // BuiltinOperator (if registered), else nullptr.
  virtual BuiltinParseFunction GetOpDataParser(BuiltinOperator op) const = 0;

  ~MicroOpResolver() override {}
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b082      	sub	sp, #8
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
 800bce0:	4a05      	ldr	r2, [pc, #20]	; (800bcf8 <_ZN6tflite15MicroOpResolverD1Ev+0x20>)
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	601a      	str	r2, [r3, #0]
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	4618      	mov	r0, r3
 800bcea:	f7ff ffa3 	bl	800bc34 <_ZN6tflite10OpResolverD1Ev>
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	3708      	adds	r7, #8
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	bd80      	pop	{r7, pc}
 800bcf8:	0802c904 	.word	0x0802c904

0800bcfc <_ZN6tflite15MicroOpResolverD0Ev>:
 800bcfc:	b580      	push	{r7, lr}
 800bcfe:	b082      	sub	sp, #8
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	6078      	str	r0, [r7, #4]
 800bd04:	6878      	ldr	r0, [r7, #4]
 800bd06:	f7ff ffe7 	bl	800bcd8 <_ZN6tflite15MicroOpResolverD1Ev>
 800bd0a:	2104      	movs	r1, #4
 800bd0c:	6878      	ldr	r0, [r7, #4]
 800bd0e:	f019 fc14 	bl	802553a <_ZdlPvj>
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	4618      	mov	r0, r3
 800bd16:	3708      	adds	r7, #8
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	bd80      	pop	{r7, pc}

0800bd1c <_ZNSt12_Vector_baseISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b082      	sub	sp, #8
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800bd24:	6878      	ldr	r0, [r7, #4]
 800bd26:	f000 f82b 	bl	800bd80 <_ZNSaISt10unique_ptrI14TfLiteDelegatePFvPS0_EEEC1Ev>
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	f000 f833 	bl	800bd98 <_ZNSt12_Vector_baseISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EE17_Vector_impl_dataC1Ev>
	{ }
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	4618      	mov	r0, r3
 800bd36:	3708      	adds	r7, #8
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	bd80      	pop	{r7, pc}

0800bd3c <_ZN6tflite10OpResolverC1Ev>:
class OpResolver {
 800bd3c:	b480      	push	{r7}
 800bd3e:	b083      	sub	sp, #12
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
 800bd44:	4a04      	ldr	r2, [pc, #16]	; (800bd58 <_ZN6tflite10OpResolverC1Ev+0x1c>)
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	601a      	str	r2, [r3, #0]
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	370c      	adds	r7, #12
 800bd50:	46bd      	mov	sp, r7
 800bd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd56:	4770      	bx	lr
 800bd58:	0802c930 	.word	0x0802c930

0800bd5c <_ZN6tflite15MicroOpResolverC1Ev>:
class MicroOpResolver : public OpResolver {
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b082      	sub	sp, #8
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	4618      	mov	r0, r3
 800bd68:	f7ff ffe8 	bl	800bd3c <_ZN6tflite10OpResolverC1Ev>
 800bd6c:	4a03      	ldr	r2, [pc, #12]	; (800bd7c <_ZN6tflite15MicroOpResolverC1Ev+0x20>)
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	601a      	str	r2, [r3, #0]
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	4618      	mov	r0, r3
 800bd76:	3708      	adds	r7, #8
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	bd80      	pop	{r7, pc}
 800bd7c:	0802c904 	.word	0x0802c904

0800bd80 <_ZNSaISt10unique_ptrI14TfLiteDelegatePFvPS0_EEEC1Ev>:
#endif

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b082      	sub	sp, #8
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
 800bd88:	6878      	ldr	r0, [r7, #4]
 800bd8a:	f000 f819 	bl	800bdc0 <_ZN9__gnu_cxx13new_allocatorISt10unique_ptrI14TfLiteDelegatePFvPS2_EEEC1Ev>
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	4618      	mov	r0, r3
 800bd92:	3708      	adds	r7, #8
 800bd94:	46bd      	mov	sp, r7
 800bd96:	bd80      	pop	{r7, pc}

0800bd98 <_ZNSt12_Vector_baseISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800bd98:	b480      	push	{r7}
 800bd9a:	b083      	sub	sp, #12
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	2200      	movs	r2, #0
 800bda4:	601a      	str	r2, [r3, #0]
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	2200      	movs	r2, #0
 800bdaa:	605a      	str	r2, [r3, #4]
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	2200      	movs	r2, #0
 800bdb0:	609a      	str	r2, [r3, #8]
	{ }
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	370c      	adds	r7, #12
 800bdb8:	46bd      	mov	sp, r7
 800bdba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdbe:	4770      	bx	lr

0800bdc0 <_ZN9__gnu_cxx13new_allocatorISt10unique_ptrI14TfLiteDelegatePFvPS2_EEEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800bdc0:	b480      	push	{r7}
 800bdc2:	b083      	sub	sp, #12
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	4618      	mov	r0, r3
 800bdcc:	370c      	adds	r7, #12
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd4:	4770      	bx	lr
	...

0800bdd8 <DebugLog>:

#ifndef TF_LITE_STRIP_ERROR_STRINGS
#include <cstdio>
#endif

extern "C" void DebugLog(const char* s) {
 800bdd8:	b580      	push	{r7, lr}
 800bdda:	b082      	sub	sp, #8
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
#ifndef TF_LITE_STRIP_ERROR_STRINGS
  // Reusing TF_LITE_STRIP_ERROR_STRINGS to disable DebugLog completely to get
  // maximum reduction in binary size. This is because we have DebugLog calls
  // via TF_LITE_CHECK that are not stubbed out by TF_LITE_REPORT_ERROR.
  fprintf(stderr, "%s", s);
 800bde0:	4b05      	ldr	r3, [pc, #20]	; (800bdf8 <DebugLog+0x20>)
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	68db      	ldr	r3, [r3, #12]
 800bde6:	4619      	mov	r1, r3
 800bde8:	6878      	ldr	r0, [r7, #4]
 800bdea:	f019 fed5 	bl	8025b98 <fputs>
#endif
}
 800bdee:	bf00      	nop
 800bdf0:	3708      	adds	r7, #8
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	bd80      	pop	{r7, pc}
 800bdf6:	bf00      	nop
 800bdf8:	2000001c 	.word	0x2000001c

0800bdfc <_ZNK6tflite6Tensor5shapeEv>:
  const flatbuffers::Vector<int32_t> *shape() const {
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	b082      	sub	sp, #8
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_SHAPE);
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	2104      	movs	r1, #4
 800be08:	4618      	mov	r0, r3
 800be0a:	f7fd fb8d 	bl	8009528 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 800be0e:	4603      	mov	r3, r0
  }
 800be10:	4618      	mov	r0, r3
 800be12:	3708      	adds	r7, #8
 800be14:	46bd      	mov	sp, r7
 800be16:	bd80      	pop	{r7, pc}

0800be18 <_ZNK6tflite6Tensor4typeEv>:
  tflite::TensorType type() const {
 800be18:	b580      	push	{r7, lr}
 800be1a:	b082      	sub	sp, #8
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::TensorType>(GetField<int8_t>(VT_TYPE, 0));
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	2200      	movs	r2, #0
 800be24:	2106      	movs	r1, #6
 800be26:	4618      	mov	r0, r3
 800be28:	f7fd fb8e 	bl	8009548 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 800be2c:	4603      	mov	r3, r0
 800be2e:	b2db      	uxtb	r3, r3
  }
 800be30:	4618      	mov	r0, r3
 800be32:	3708      	adds	r7, #8
 800be34:	46bd      	mov	sp, r7
 800be36:	bd80      	pop	{r7, pc}

0800be38 <_ZN6tflite12RuntimeShapeC1Ev>:
  // larger shapes are separately allocated.
  static constexpr int kMaxSmallSize = 5;

  RuntimeShape& operator=(RuntimeShape const&) = delete;

  RuntimeShape() : size_(0) {}
 800be38:	b480      	push	{r7}
 800be3a:	b083      	sub	sp, #12
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	6078      	str	r0, [r7, #4]
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	2200      	movs	r2, #0
 800be44:	601a      	str	r2, [r3, #0]
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	4618      	mov	r0, r3
 800be4a:	370c      	adds	r7, #12
 800be4c:	46bd      	mov	sp, r7
 800be4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be52:	4770      	bx	lr

0800be54 <_ZN6tflite12RuntimeShapeC1EiPKl>:
    for (int i = 0; i < shape_size; ++i) {
      SetDim(i, value);
    }
  }

  RuntimeShape(int dimensions_count, const int32_t* dims_data) : size_(0) {
 800be54:	b580      	push	{r7, lr}
 800be56:	b084      	sub	sp, #16
 800be58:	af00      	add	r7, sp, #0
 800be5a:	60f8      	str	r0, [r7, #12]
 800be5c:	60b9      	str	r1, [r7, #8]
 800be5e:	607a      	str	r2, [r7, #4]
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	2200      	movs	r2, #0
 800be64:	601a      	str	r2, [r3, #0]
    ReplaceWith(dimensions_count, dims_data);
 800be66:	687a      	ldr	r2, [r7, #4]
 800be68:	68b9      	ldr	r1, [r7, #8]
 800be6a:	68f8      	ldr	r0, [r7, #12]
 800be6c:	f000 f866 	bl	800bf3c <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>
  }
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	4618      	mov	r0, r3
 800be74:	3710      	adds	r7, #16
 800be76:	46bd      	mov	sp, r7
 800be78:	bd80      	pop	{r7, pc}

0800be7a <_ZN6tflite12RuntimeShapeD1Ev>:
    return this->size_ == comp.size_ &&
           std::memcmp(DimsData(), comp.DimsData(), size_ * sizeof(int32_t)) ==
               0;
  }

  ~RuntimeShape() {
 800be7a:	b580      	push	{r7, lr}
 800be7c:	b082      	sub	sp, #8
 800be7e:	af00      	add	r7, sp, #0
 800be80:	6078      	str	r0, [r7, #4]
    if (size_ > kMaxSmallSize) {
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	2b05      	cmp	r3, #5
 800be88:	dd08      	ble.n	800be9c <_ZN6tflite12RuntimeShapeD1Ev+0x22>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	685b      	ldr	r3, [r3, #4]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d004      	beq.n	800be9c <_ZN6tflite12RuntimeShapeD1Ev+0x22>
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	685b      	ldr	r3, [r3, #4]
 800be96:	4618      	mov	r0, r3
 800be98:	f019 fb51 	bl	802553e <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	4618      	mov	r0, r3
 800bea0:	3708      	adds	r7, #8
 800bea2:	46bd      	mov	sp, r7
 800bea4:	bd80      	pop	{r7, pc}

0800bea6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>:

  inline int32_t DimensionsCount() const { return size_; }
 800bea6:	b480      	push	{r7}
 800bea8:	b083      	sub	sp, #12
 800beaa:	af00      	add	r7, sp, #0
 800beac:	6078      	str	r0, [r7, #4]
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	4618      	mov	r0, r3
 800beb4:	370c      	adds	r7, #12
 800beb6:	46bd      	mov	sp, r7
 800beb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bebc:	4770      	bx	lr

0800bebe <_ZN6tflite12RuntimeShape8DimsDataEv>:
    } else {
      dims_[i] = val;
    }
  }

  inline int32_t* DimsData() {
 800bebe:	b480      	push	{r7}
 800bec0:	b083      	sub	sp, #12
 800bec2:	af00      	add	r7, sp, #0
 800bec4:	6078      	str	r0, [r7, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	2b05      	cmp	r3, #5
 800becc:	dd02      	ble.n	800bed4 <_ZN6tflite12RuntimeShape8DimsDataEv+0x16>
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	685b      	ldr	r3, [r3, #4]
 800bed2:	e001      	b.n	800bed8 <_ZN6tflite12RuntimeShape8DimsDataEv+0x1a>
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	3304      	adds	r3, #4
  }
 800bed8:	4618      	mov	r0, r3
 800beda:	370c      	adds	r7, #12
 800bedc:	46bd      	mov	sp, r7
 800bede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee2:	4770      	bx	lr

0800bee4 <_ZN6tflite12RuntimeShape6ResizeEi>:
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
  }
  // The caller must ensure that the shape is no bigger than 5-D.
  inline const int32_t* DimsDataUpTo5D() const { return dims_; }

  inline void Resize(int dimensions_count) {
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b082      	sub	sp, #8
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]
 800beec:	6039      	str	r1, [r7, #0]
    if (size_ > kMaxSmallSize) {
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	2b05      	cmp	r3, #5
 800bef4:	dd08      	ble.n	800bf08 <_ZN6tflite12RuntimeShape6ResizeEi+0x24>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	685b      	ldr	r3, [r3, #4]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d004      	beq.n	800bf08 <_ZN6tflite12RuntimeShape6ResizeEi+0x24>
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	685b      	ldr	r3, [r3, #4]
 800bf02:	4618      	mov	r0, r3
 800bf04:	f019 fb1b 	bl	802553e <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
    size_ = dimensions_count;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	683a      	ldr	r2, [r7, #0]
 800bf0c:	601a      	str	r2, [r3, #0]
    if (dimensions_count > kMaxSmallSize) {
 800bf0e:	683b      	ldr	r3, [r7, #0]
 800bf10:	2b05      	cmp	r3, #5
 800bf12:	dd0f      	ble.n	800bf34 <_ZN6tflite12RuntimeShape6ResizeEi+0x50>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      dims_pointer_ = new int32_t[dimensions_count];
 800bf14:	683b      	ldr	r3, [r7, #0]
 800bf16:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 800bf1a:	4293      	cmp	r3, r2
 800bf1c:	d201      	bcs.n	800bf22 <_ZN6tflite12RuntimeShape6ResizeEi+0x3e>
 800bf1e:	009b      	lsls	r3, r3, #2
 800bf20:	e001      	b.n	800bf26 <_ZN6tflite12RuntimeShape6ResizeEi+0x42>
 800bf22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bf26:	4618      	mov	r0, r3
 800bf28:	f019 fb2b 	bl	8025582 <_Znaj>
 800bf2c:	4603      	mov	r3, r0
 800bf2e:	461a      	mov	r2, r3
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	605a      	str	r2, [r3, #4]
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
 800bf34:	bf00      	nop
 800bf36:	3708      	adds	r7, #8
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	bd80      	pop	{r7, pc}

0800bf3c <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>:

  inline void ReplaceWith(int dimensions_count, const int32_t* dims_data) {
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b086      	sub	sp, #24
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	60f8      	str	r0, [r7, #12]
 800bf44:	60b9      	str	r1, [r7, #8]
 800bf46:	607a      	str	r2, [r7, #4]
    Resize(dimensions_count);
 800bf48:	68b9      	ldr	r1, [r7, #8]
 800bf4a:	68f8      	ldr	r0, [r7, #12]
 800bf4c:	f7ff ffca 	bl	800bee4 <_ZN6tflite12RuntimeShape6ResizeEi>
    int32_t* dst_dims = DimsData();
 800bf50:	68f8      	ldr	r0, [r7, #12]
 800bf52:	f7ff ffb4 	bl	800bebe <_ZN6tflite12RuntimeShape8DimsDataEv>
 800bf56:	6178      	str	r0, [r7, #20]
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
 800bf58:	68bb      	ldr	r3, [r7, #8]
 800bf5a:	009b      	lsls	r3, r3, #2
 800bf5c:	461a      	mov	r2, r3
 800bf5e:	6879      	ldr	r1, [r7, #4]
 800bf60:	6978      	ldr	r0, [r7, #20]
 800bf62:	f019 fe59 	bl	8025c18 <memcpy>
  }
 800bf66:	bf00      	nop
 800bf68:	3718      	adds	r7, #24
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	bd80      	pop	{r7, pc}

0800bf6e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
                           : nullptr;
}

inline RuntimeShape GetTensorShape(const TfLiteTensor* tensor) {
 800bf6e:	b580      	push	{r7, lr}
 800bf70:	b086      	sub	sp, #24
 800bf72:	af00      	add	r7, sp, #0
 800bf74:	6078      	str	r0, [r7, #4]
 800bf76:	6039      	str	r1, [r7, #0]
  if (tensor == nullptr) {
 800bf78:	683b      	ldr	r3, [r7, #0]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d103      	bne.n	800bf86 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x18>
    return RuntimeShape();
 800bf7e:	6878      	ldr	r0, [r7, #4]
 800bf80:	f7ff ff5a 	bl	800be38 <_ZN6tflite12RuntimeShapeC1Ev>
 800bf84:	e00d      	b.n	800bfa2 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x34>
  }

  TfLiteIntArray* dims = tensor->dims;
 800bf86:	683b      	ldr	r3, [r7, #0]
 800bf88:	689b      	ldr	r3, [r3, #8]
 800bf8a:	617b      	str	r3, [r7, #20]
  const int dims_size = dims->size;
 800bf8c:	697b      	ldr	r3, [r7, #20]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	613b      	str	r3, [r7, #16]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
 800bf92:	697b      	ldr	r3, [r7, #20]
 800bf94:	3304      	adds	r3, #4
 800bf96:	60fb      	str	r3, [r7, #12]
  return RuntimeShape(dims_size, dims_data);
 800bf98:	68fa      	ldr	r2, [r7, #12]
 800bf9a:	6939      	ldr	r1, [r7, #16]
 800bf9c:	6878      	ldr	r0, [r7, #4]
 800bf9e:	f7ff ff59 	bl	800be54 <_ZN6tflite12RuntimeShapeC1EiPKl>
}
 800bfa2:	6878      	ldr	r0, [r7, #4]
 800bfa4:	3718      	adds	r7, #24
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	bd80      	pop	{r7, pc}

0800bfaa <_ZN6tflite14AlignPointerUpEPhj>:
#include "tensorflow/lite/kernels/internal/tensor_ctypes.h"
#include "tensorflow/lite/schema/schema_generated.h"

namespace tflite {

uint8_t* AlignPointerUp(uint8_t* data, size_t alignment) {
 800bfaa:	b480      	push	{r7}
 800bfac:	b085      	sub	sp, #20
 800bfae:	af00      	add	r7, sp, #0
 800bfb0:	6078      	str	r0, [r7, #4]
 800bfb2:	6039      	str	r1, [r7, #0]
  std::uintptr_t data_as_uintptr_t = reinterpret_cast<std::uintptr_t>(data);
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	60fb      	str	r3, [r7, #12]
  uint8_t* aligned_result = reinterpret_cast<uint8_t*>(
      ((data_as_uintptr_t + (alignment - 1)) / alignment) * alignment);
 800bfb8:	683a      	ldr	r2, [r7, #0]
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	4413      	add	r3, r2
 800bfbe:	1e5a      	subs	r2, r3, #1
 800bfc0:	683b      	ldr	r3, [r7, #0]
 800bfc2:	fbb2 f3f3 	udiv	r3, r2, r3
 800bfc6:	683a      	ldr	r2, [r7, #0]
 800bfc8:	fb02 f303 	mul.w	r3, r2, r3
  uint8_t* aligned_result = reinterpret_cast<uint8_t*>(
 800bfcc:	60bb      	str	r3, [r7, #8]
  return aligned_result;
 800bfce:	68bb      	ldr	r3, [r7, #8]
}
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	3714      	adds	r7, #20
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfda:	4770      	bx	lr

0800bfdc <_ZN6tflite16AlignPointerDownEPhj>:

uint8_t* AlignPointerDown(uint8_t* data, size_t alignment) {
 800bfdc:	b480      	push	{r7}
 800bfde:	b085      	sub	sp, #20
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
 800bfe4:	6039      	str	r1, [r7, #0]
  std::uintptr_t data_as_uintptr_t = reinterpret_cast<std::uintptr_t>(data);
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	60fb      	str	r3, [r7, #12]
  uint8_t* aligned_result =
      reinterpret_cast<uint8_t*>((data_as_uintptr_t / alignment) * alignment);
 800bfea:	68fa      	ldr	r2, [r7, #12]
 800bfec:	683b      	ldr	r3, [r7, #0]
 800bfee:	fbb2 f3f3 	udiv	r3, r2, r3
 800bff2:	683a      	ldr	r2, [r7, #0]
 800bff4:	fb02 f303 	mul.w	r3, r2, r3
  uint8_t* aligned_result =
 800bff8:	60bb      	str	r3, [r7, #8]
  return aligned_result;
 800bffa:	68bb      	ldr	r3, [r7, #8]
}
 800bffc:	4618      	mov	r0, r3
 800bffe:	3714      	adds	r7, #20
 800c000:	46bd      	mov	sp, r7
 800c002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c006:	4770      	bx	lr

0800c008 <_ZN6tflite11AlignSizeUpEjj>:

size_t AlignSizeUp(size_t size, size_t alignment) {
 800c008:	b480      	push	{r7}
 800c00a:	b085      	sub	sp, #20
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	6078      	str	r0, [r7, #4]
 800c010:	6039      	str	r1, [r7, #0]
  size_t aligned_size = (((size + (alignment - 1)) / alignment) * alignment);
 800c012:	683a      	ldr	r2, [r7, #0]
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	4413      	add	r3, r2
 800c018:	1e5a      	subs	r2, r3, #1
 800c01a:	683b      	ldr	r3, [r7, #0]
 800c01c:	fbb2 f2f3 	udiv	r2, r2, r3
 800c020:	683b      	ldr	r3, [r7, #0]
 800c022:	fb02 f303 	mul.w	r3, r2, r3
 800c026:	60fb      	str	r3, [r7, #12]
  return aligned_size;
 800c028:	68fb      	ldr	r3, [r7, #12]
}
 800c02a:	4618      	mov	r0, r3
 800c02c:	3714      	adds	r7, #20
 800c02e:	46bd      	mov	sp, r7
 800c030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c034:	4770      	bx	lr
	...

0800c038 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>:

TfLiteStatus TfLiteTypeSizeOf(TfLiteType type, size_t* size) {
 800c038:	b480      	push	{r7}
 800c03a:	b083      	sub	sp, #12
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	4603      	mov	r3, r0
 800c040:	6039      	str	r1, [r7, #0]
 800c042:	71fb      	strb	r3, [r7, #7]
  switch (type) {
 800c044:	79fb      	ldrb	r3, [r7, #7]
 800c046:	3b01      	subs	r3, #1
 800c048:	2b0f      	cmp	r3, #15
 800c04a:	d857      	bhi.n	800c0fc <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc4>
 800c04c:	a201      	add	r2, pc, #4	; (adr r2, 800c054 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x1c>)
 800c04e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c052:	bf00      	nop
 800c054:	0800c09d 	.word	0x0800c09d
 800c058:	0800c0b5 	.word	0x0800c0b5
 800c05c:	0800c0c5 	.word	0x0800c0c5
 800c060:	0800c0d5 	.word	0x0800c0d5
 800c064:	0800c0fd 	.word	0x0800c0fd
 800c068:	0800c0e5 	.word	0x0800c0e5
 800c06c:	0800c0ad 	.word	0x0800c0ad
 800c070:	0800c0ed 	.word	0x0800c0ed
 800c074:	0800c0cd 	.word	0x0800c0cd
 800c078:	0800c095 	.word	0x0800c095
 800c07c:	0800c0a5 	.word	0x0800c0a5
 800c080:	0800c0f5 	.word	0x0800c0f5
 800c084:	0800c0dd 	.word	0x0800c0dd
 800c088:	0800c0fd 	.word	0x0800c0fd
 800c08c:	0800c0fd 	.word	0x0800c0fd
 800c090:	0800c0bd 	.word	0x0800c0bd
    case kTfLiteFloat16:
      *size = sizeof(int16_t);
 800c094:	683b      	ldr	r3, [r7, #0]
 800c096:	2202      	movs	r2, #2
 800c098:	601a      	str	r2, [r3, #0]
      break;
 800c09a:	e031      	b.n	800c100 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteFloat32:
      *size = sizeof(float);
 800c09c:	683b      	ldr	r3, [r7, #0]
 800c09e:	2204      	movs	r2, #4
 800c0a0:	601a      	str	r2, [r3, #0]
      break;
 800c0a2:	e02d      	b.n	800c100 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteFloat64:
      *size = sizeof(double);
 800c0a4:	683b      	ldr	r3, [r7, #0]
 800c0a6:	2208      	movs	r2, #8
 800c0a8:	601a      	str	r2, [r3, #0]
      break;
 800c0aa:	e029      	b.n	800c100 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteInt16:
      *size = sizeof(int16_t);
 800c0ac:	683b      	ldr	r3, [r7, #0]
 800c0ae:	2202      	movs	r2, #2
 800c0b0:	601a      	str	r2, [r3, #0]
      break;
 800c0b2:	e025      	b.n	800c100 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteInt32:
      *size = sizeof(int32_t);
 800c0b4:	683b      	ldr	r3, [r7, #0]
 800c0b6:	2204      	movs	r2, #4
 800c0b8:	601a      	str	r2, [r3, #0]
      break;
 800c0ba:	e021      	b.n	800c100 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteUInt32:
      *size = sizeof(uint32_t);
 800c0bc:	683b      	ldr	r3, [r7, #0]
 800c0be:	2204      	movs	r2, #4
 800c0c0:	601a      	str	r2, [r3, #0]
      break;
 800c0c2:	e01d      	b.n	800c100 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteUInt8:
      *size = sizeof(uint8_t);
 800c0c4:	683b      	ldr	r3, [r7, #0]
 800c0c6:	2201      	movs	r2, #1
 800c0c8:	601a      	str	r2, [r3, #0]
      break;
 800c0ca:	e019      	b.n	800c100 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteInt8:
      *size = sizeof(int8_t);
 800c0cc:	683b      	ldr	r3, [r7, #0]
 800c0ce:	2201      	movs	r2, #1
 800c0d0:	601a      	str	r2, [r3, #0]
      break;
 800c0d2:	e015      	b.n	800c100 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteInt64:
      *size = sizeof(int64_t);
 800c0d4:	683b      	ldr	r3, [r7, #0]
 800c0d6:	2208      	movs	r2, #8
 800c0d8:	601a      	str	r2, [r3, #0]
      break;
 800c0da:	e011      	b.n	800c100 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteUInt64:
      *size = sizeof(uint64_t);
 800c0dc:	683b      	ldr	r3, [r7, #0]
 800c0de:	2208      	movs	r2, #8
 800c0e0:	601a      	str	r2, [r3, #0]
      break;
 800c0e2:	e00d      	b.n	800c100 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteBool:
      *size = sizeof(bool);
 800c0e4:	683b      	ldr	r3, [r7, #0]
 800c0e6:	2201      	movs	r2, #1
 800c0e8:	601a      	str	r2, [r3, #0]
      break;
 800c0ea:	e009      	b.n	800c100 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteComplex64:
      *size = sizeof(float) * 2;
 800c0ec:	683b      	ldr	r3, [r7, #0]
 800c0ee:	2208      	movs	r2, #8
 800c0f0:	601a      	str	r2, [r3, #0]
      break;
 800c0f2:	e005      	b.n	800c100 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteComplex128:
      *size = sizeof(double) * 2;
 800c0f4:	683b      	ldr	r3, [r7, #0]
 800c0f6:	2210      	movs	r2, #16
 800c0f8:	601a      	str	r2, [r3, #0]
      break;
 800c0fa:	e001      	b.n	800c100 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    default:
      return kTfLiteError;
 800c0fc:	2301      	movs	r3, #1
 800c0fe:	e000      	b.n	800c102 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xca>
  }
  return kTfLiteOk;
 800c100:	2300      	movs	r3, #0
}
 800c102:	4618      	mov	r0, r3
 800c104:	370c      	adds	r7, #12
 800c106:	46bd      	mov	sp, r7
 800c108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10c:	4770      	bx	lr
 800c10e:	bf00      	nop

0800c110 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE>:

TfLiteStatus BytesRequiredForTensor(const tflite::Tensor& flatbuffer_tensor,
                                    size_t* bytes, size_t* type_size,
                                    ErrorReporter* error_reporter) {
 800c110:	b580      	push	{r7, lr}
 800c112:	b088      	sub	sp, #32
 800c114:	af00      	add	r7, sp, #0
 800c116:	60f8      	str	r0, [r7, #12]
 800c118:	60b9      	str	r1, [r7, #8]
 800c11a:	607a      	str	r2, [r7, #4]
 800c11c:	603b      	str	r3, [r7, #0]
  int element_count = 1;
 800c11e:	2301      	movs	r3, #1
 800c120:	61fb      	str	r3, [r7, #28]
  // If flatbuffer_tensor.shape == nullptr, then flatbuffer_tensor is a scalar
  // so has 1 element.
  if (flatbuffer_tensor.shape() != nullptr) {
 800c122:	68f8      	ldr	r0, [r7, #12]
 800c124:	f7ff fe6a 	bl	800bdfc <_ZNK6tflite6Tensor5shapeEv>
 800c128:	4603      	mov	r3, r0
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	bf14      	ite	ne
 800c12e:	2301      	movne	r3, #1
 800c130:	2300      	moveq	r3, #0
 800c132:	b2db      	uxtb	r3, r3
 800c134:	2b00      	cmp	r3, #0
 800c136:	d022      	beq.n	800c17e <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x6e>
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
 800c138:	2300      	movs	r3, #0
 800c13a:	61bb      	str	r3, [r7, #24]
 800c13c:	68f8      	ldr	r0, [r7, #12]
 800c13e:	f7ff fe5d 	bl	800bdfc <_ZNK6tflite6Tensor5shapeEv>
 800c142:	4603      	mov	r3, r0
 800c144:	4618      	mov	r0, r3
 800c146:	f000 f884 	bl	800c252 <_ZNK11flatbuffers6VectorIlE6LengthEv>
 800c14a:	4602      	mov	r2, r0
 800c14c:	69bb      	ldr	r3, [r7, #24]
 800c14e:	4293      	cmp	r3, r2
 800c150:	bf34      	ite	cc
 800c152:	2301      	movcc	r3, #1
 800c154:	2300      	movcs	r3, #0
 800c156:	b2db      	uxtb	r3, r3
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d010      	beq.n	800c17e <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x6e>
      element_count *= flatbuffer_tensor.shape()->Get(n);
 800c15c:	68f8      	ldr	r0, [r7, #12]
 800c15e:	f7ff fe4d 	bl	800bdfc <_ZNK6tflite6Tensor5shapeEv>
 800c162:	4603      	mov	r3, r0
 800c164:	69b9      	ldr	r1, [r7, #24]
 800c166:	4618      	mov	r0, r3
 800c168:	f7fd fa3e 	bl	80095e8 <_ZNK11flatbuffers6VectorIlE3GetEm>
 800c16c:	4602      	mov	r2, r0
 800c16e:	69fb      	ldr	r3, [r7, #28]
 800c170:	fb02 f303 	mul.w	r3, r2, r3
 800c174:	61fb      	str	r3, [r7, #28]
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
 800c176:	69bb      	ldr	r3, [r7, #24]
 800c178:	3301      	adds	r3, #1
 800c17a:	61bb      	str	r3, [r7, #24]
 800c17c:	e7de      	b.n	800c13c <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x2c>
    }
  }

  TfLiteType tf_lite_type;
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
 800c17e:	68f8      	ldr	r0, [r7, #12]
 800c180:	f7ff fe4a 	bl	800be18 <_ZNK6tflite6Tensor4typeEv>
 800c184:	4603      	mov	r3, r0
 800c186:	4618      	mov	r0, r3
 800c188:	f107 0315 	add.w	r3, r7, #21
 800c18c:	683a      	ldr	r2, [r7, #0]
 800c18e:	4619      	mov	r1, r3
 800c190:	f7fc fde0 	bl	8008d54 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
 800c194:	4603      	mov	r3, r0
 800c196:	75fb      	strb	r3, [r7, #23]
 800c198:	7dfb      	ldrb	r3, [r7, #23]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d001      	beq.n	800c1a2 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x92>
 800c19e:	7dfb      	ldrb	r3, [r7, #23]
 800c1a0:	e013      	b.n	800c1ca <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xba>
                                          &tf_lite_type, error_reporter));
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(tf_lite_type, type_size));
 800c1a2:	7d7b      	ldrb	r3, [r7, #21]
 800c1a4:	6879      	ldr	r1, [r7, #4]
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	f7ff ff46 	bl	800c038 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
 800c1ac:	4603      	mov	r3, r0
 800c1ae:	75bb      	strb	r3, [r7, #22]
 800c1b0:	7dbb      	ldrb	r3, [r7, #22]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d001      	beq.n	800c1ba <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xaa>
 800c1b6:	7dbb      	ldrb	r3, [r7, #22]
 800c1b8:	e007      	b.n	800c1ca <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xba>
  *bytes = element_count * (*type_size);
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	69fa      	ldr	r2, [r7, #28]
 800c1c0:	fb02 f203 	mul.w	r2, r2, r3
 800c1c4:	68bb      	ldr	r3, [r7, #8]
 800c1c6:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800c1c8:	2300      	movs	r3, #0
}
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	3720      	adds	r7, #32
 800c1ce:	46bd      	mov	sp, r7
 800c1d0:	bd80      	pop	{r7, pc}

0800c1d2 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>:

TfLiteStatus TfLiteEvalTensorByteLength(const TfLiteEvalTensor* eval_tensor,
                                        size_t* out_bytes) {
 800c1d2:	b580      	push	{r7, lr}
 800c1d4:	b086      	sub	sp, #24
 800c1d6:	af00      	add	r7, sp, #0
 800c1d8:	6078      	str	r0, [r7, #4]
 800c1da:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(out_bytes != nullptr);
 800c1dc:	683b      	ldr	r3, [r7, #0]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d101      	bne.n	800c1e6 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x14>
 800c1e2:	f019 fc30 	bl	8025a46 <abort>

  int element_count = 1;
 800c1e6:	2301      	movs	r3, #1
 800c1e8:	617b      	str	r3, [r7, #20]
  // If eval_tensor->dims == nullptr, then tensor is a scalar so has 1 element.
  if (eval_tensor->dims != nullptr) {
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	685b      	ldr	r3, [r3, #4]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d015      	beq.n	800c21e <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x4c>
    for (int n = 0; n < eval_tensor->dims->size; ++n) {
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	613b      	str	r3, [r7, #16]
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	685b      	ldr	r3, [r3, #4]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	693a      	ldr	r2, [r7, #16]
 800c1fe:	429a      	cmp	r2, r3
 800c200:	da0d      	bge.n	800c21e <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x4c>
      element_count *= eval_tensor->dims->data[n];
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	685a      	ldr	r2, [r3, #4]
 800c206:	693b      	ldr	r3, [r7, #16]
 800c208:	009b      	lsls	r3, r3, #2
 800c20a:	4413      	add	r3, r2
 800c20c:	685a      	ldr	r2, [r3, #4]
 800c20e:	697b      	ldr	r3, [r7, #20]
 800c210:	fb02 f303 	mul.w	r3, r2, r3
 800c214:	617b      	str	r3, [r7, #20]
    for (int n = 0; n < eval_tensor->dims->size; ++n) {
 800c216:	693b      	ldr	r3, [r7, #16]
 800c218:	3301      	adds	r3, #1
 800c21a:	613b      	str	r3, [r7, #16]
 800c21c:	e7eb      	b.n	800c1f6 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x24>
    }
  }
  size_t type_size;
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(eval_tensor->type, &type_size));
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	7a1b      	ldrb	r3, [r3, #8]
 800c222:	f107 0208 	add.w	r2, r7, #8
 800c226:	4611      	mov	r1, r2
 800c228:	4618      	mov	r0, r3
 800c22a:	f7ff ff05 	bl	800c038 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
 800c22e:	4603      	mov	r3, r0
 800c230:	73fb      	strb	r3, [r7, #15]
 800c232:	7bfb      	ldrb	r3, [r7, #15]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d001      	beq.n	800c23c <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x6a>
 800c238:	7bfb      	ldrb	r3, [r7, #15]
 800c23a:	e006      	b.n	800c24a <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x78>
  *out_bytes = element_count * type_size;
 800c23c:	697b      	ldr	r3, [r7, #20]
 800c23e:	68ba      	ldr	r2, [r7, #8]
 800c240:	fb02 f203 	mul.w	r2, r2, r3
 800c244:	683b      	ldr	r3, [r7, #0]
 800c246:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800c248:	2300      	movs	r3, #0
}
 800c24a:	4618      	mov	r0, r3
 800c24c:	3718      	adds	r7, #24
 800c24e:	46bd      	mov	sp, r7
 800c250:	bd80      	pop	{r7, pc}

0800c252 <_ZNK11flatbuffers6VectorIlE6LengthEv>:
  uoffset_t Length() const { return size(); }
 800c252:	b580      	push	{r7, lr}
 800c254:	b082      	sub	sp, #8
 800c256:	af00      	add	r7, sp, #0
 800c258:	6078      	str	r0, [r7, #4]
 800c25a:	6878      	ldr	r0, [r7, #4]
 800c25c:	f7fd f9b6 	bl	80095cc <_ZNK11flatbuffers6VectorIlE4sizeEv>
 800c260:	4603      	mov	r3, r0
 800c262:	4618      	mov	r0, r3
 800c264:	3708      	adds	r7, #8
 800c266:	46bd      	mov	sp, r7
 800c268:	bd80      	pop	{r7, pc}

0800c26a <_ZNK6tflite22QuantizationParameters5scaleEv>:
  const flatbuffers::Vector<float> *scale() const {
 800c26a:	b580      	push	{r7, lr}
 800c26c:	b082      	sub	sp, #8
 800c26e:	af00      	add	r7, sp, #0
 800c270:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<float> *>(VT_SCALE);
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	2108      	movs	r1, #8
 800c276:	4618      	mov	r0, r3
 800c278:	f001 fc8d 	bl	800db96 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t>
 800c27c:	4603      	mov	r3, r0
  }
 800c27e:	4618      	mov	r0, r3
 800c280:	3708      	adds	r7, #8
 800c282:	46bd      	mov	sp, r7
 800c284:	bd80      	pop	{r7, pc}

0800c286 <_ZNK6tflite22QuantizationParameters10zero_pointEv>:
  const flatbuffers::Vector<int64_t> *zero_point() const {
 800c286:	b580      	push	{r7, lr}
 800c288:	b082      	sub	sp, #8
 800c28a:	af00      	add	r7, sp, #0
 800c28c:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int64_t> *>(VT_ZERO_POINT);
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	210a      	movs	r1, #10
 800c292:	4618      	mov	r0, r3
 800c294:	f001 fc8f 	bl	800dbb6 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t>
 800c298:	4603      	mov	r3, r0
  }
 800c29a:	4618      	mov	r0, r3
 800c29c:	3708      	adds	r7, #8
 800c29e:	46bd      	mov	sp, r7
 800c2a0:	bd80      	pop	{r7, pc}

0800c2a2 <_ZNK6tflite22QuantizationParameters19quantized_dimensionEv>:
  int32_t quantized_dimension() const {
 800c2a2:	b580      	push	{r7, lr}
 800c2a4:	b082      	sub	sp, #8
 800c2a6:	af00      	add	r7, sp, #0
 800c2a8:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_QUANTIZED_DIMENSION, 0);
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	2200      	movs	r2, #0
 800c2ae:	2110      	movs	r1, #16
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	f7fd f91b 	bl	80094ec <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 800c2b6:	4603      	mov	r3, r0
  }
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	3708      	adds	r7, #8
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	bd80      	pop	{r7, pc}

0800c2c0 <_ZNK6tflite6Tensor6bufferEv>:
  uint32_t buffer() const {
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	b082      	sub	sp, #8
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_BUFFER, 0);
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	2108      	movs	r1, #8
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	f001 fc81 	bl	800dbd6 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 800c2d4:	4603      	mov	r3, r0
  }
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	3708      	adds	r7, #8
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	bd80      	pop	{r7, pc}

0800c2de <_ZNK6tflite6Tensor12quantizationEv>:
  const tflite::QuantizationParameters *quantization() const {
 800c2de:	b580      	push	{r7, lr}
 800c2e0:	b082      	sub	sp, #8
 800c2e2:	af00      	add	r7, sp, #0
 800c2e4:	6078      	str	r0, [r7, #4]
    return GetPointer<const tflite::QuantizationParameters *>(VT_QUANTIZATION);
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	210c      	movs	r1, #12
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	f001 fc91 	bl	800dc12 <_ZNK11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t>
 800c2f0:	4603      	mov	r3, r0
  }
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	3708      	adds	r7, #8
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	bd80      	pop	{r7, pc}

0800c2fa <_ZNK6tflite6Tensor11is_variableEv>:
  bool is_variable() const {
 800c2fa:	b580      	push	{r7, lr}
 800c2fc:	b082      	sub	sp, #8
 800c2fe:	af00      	add	r7, sp, #0
 800c300:	6078      	str	r0, [r7, #4]
    return GetField<uint8_t>(VT_IS_VARIABLE, 0) != 0;
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	2200      	movs	r2, #0
 800c306:	210e      	movs	r1, #14
 800c308:	4618      	mov	r0, r3
 800c30a:	f7fd f8c0 	bl	800948e <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 800c30e:	4603      	mov	r3, r0
 800c310:	2b00      	cmp	r3, #0
 800c312:	bf14      	ite	ne
 800c314:	2301      	movne	r3, #1
 800c316:	2300      	moveq	r3, #0
 800c318:	b2db      	uxtb	r3, r3
  }
 800c31a:	4618      	mov	r0, r3
 800c31c:	3708      	adds	r7, #8
 800c31e:	46bd      	mov	sp, r7
 800c320:	bd80      	pop	{r7, pc}

0800c322 <_ZNK6tflite8Operator6inputsEv>:
  const flatbuffers::Vector<int32_t> *inputs() const {
 800c322:	b580      	push	{r7, lr}
 800c324:	b082      	sub	sp, #8
 800c326:	af00      	add	r7, sp, #0
 800c328:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_INPUTS);
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	2106      	movs	r1, #6
 800c32e:	4618      	mov	r0, r3
 800c330:	f7fd f8fa 	bl	8009528 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 800c334:	4603      	mov	r3, r0
  }
 800c336:	4618      	mov	r0, r3
 800c338:	3708      	adds	r7, #8
 800c33a:	46bd      	mov	sp, r7
 800c33c:	bd80      	pop	{r7, pc}

0800c33e <_ZNK6tflite8Operator7outputsEv>:
  const flatbuffers::Vector<int32_t> *outputs() const {
 800c33e:	b580      	push	{r7, lr}
 800c340:	b082      	sub	sp, #8
 800c342:	af00      	add	r7, sp, #0
 800c344:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_OUTPUTS);
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	2108      	movs	r1, #8
 800c34a:	4618      	mov	r0, r3
 800c34c:	f7fd f8ec 	bl	8009528 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 800c350:	4603      	mov	r3, r0
  }
 800c352:	4618      	mov	r0, r3
 800c354:	3708      	adds	r7, #8
 800c356:	46bd      	mov	sp, r7
 800c358:	bd80      	pop	{r7, pc}

0800c35a <_ZNK6tflite8SubGraph7tensorsEv>:
    VT_INPUTS = 6,
    VT_OUTPUTS = 8,
    VT_OPERATORS = 10,
    VT_NAME = 12
  };
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Tensor>> *tensors() const {
 800c35a:	b580      	push	{r7, lr}
 800c35c:	b082      	sub	sp, #8
 800c35e:	af00      	add	r7, sp, #0
 800c360:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Tensor>> *>(VT_TENSORS);
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	2104      	movs	r1, #4
 800c366:	4618      	mov	r0, r3
 800c368:	f001 fc63 	bl	800dc32 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>
 800c36c:	4603      	mov	r3, r0
  }
 800c36e:	4618      	mov	r0, r3
 800c370:	3708      	adds	r7, #8
 800c372:	46bd      	mov	sp, r7
 800c374:	bd80      	pop	{r7, pc}

0800c376 <_ZNK6tflite8SubGraph6inputsEv>:
  const flatbuffers::Vector<int32_t> *inputs() const {
 800c376:	b580      	push	{r7, lr}
 800c378:	b082      	sub	sp, #8
 800c37a:	af00      	add	r7, sp, #0
 800c37c:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_INPUTS);
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	2106      	movs	r1, #6
 800c382:	4618      	mov	r0, r3
 800c384:	f7fd f8d0 	bl	8009528 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 800c388:	4603      	mov	r3, r0
  }
 800c38a:	4618      	mov	r0, r3
 800c38c:	3708      	adds	r7, #8
 800c38e:	46bd      	mov	sp, r7
 800c390:	bd80      	pop	{r7, pc}

0800c392 <_ZNK6tflite8SubGraph7outputsEv>:
  const flatbuffers::Vector<int32_t> *outputs() const {
 800c392:	b580      	push	{r7, lr}
 800c394:	b082      	sub	sp, #8
 800c396:	af00      	add	r7, sp, #0
 800c398:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_OUTPUTS);
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	2108      	movs	r1, #8
 800c39e:	4618      	mov	r0, r3
 800c3a0:	f7fd f8c2 	bl	8009528 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 800c3a4:	4603      	mov	r3, r0
  }
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	3708      	adds	r7, #8
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	bd80      	pop	{r7, pc}

0800c3ae <_ZNK6tflite8SubGraph9operatorsEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Operator>> *operators() const {
 800c3ae:	b580      	push	{r7, lr}
 800c3b0:	b082      	sub	sp, #8
 800c3b2:	af00      	add	r7, sp, #0
 800c3b4:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Operator>> *>(VT_OPERATORS);
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	210a      	movs	r1, #10
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	f001 fc49 	bl	800dc52 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>
 800c3c0:	4603      	mov	r3, r0
  }
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	3708      	adds	r7, #8
 800c3c6:	46bd      	mov	sp, r7
 800c3c8:	bd80      	pop	{r7, pc}

0800c3ca <_ZNK6tflite6Buffer4dataEv>:
struct Buffer FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef BufferT NativeTableType;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DATA = 4
  };
  const flatbuffers::Vector<uint8_t> *data() const {
 800c3ca:	b580      	push	{r7, lr}
 800c3cc:	b082      	sub	sp, #8
 800c3ce:	af00      	add	r7, sp, #0
 800c3d0:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_DATA);
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	2104      	movs	r1, #4
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	f001 fbcd 	bl	800db76 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>
 800c3dc:	4603      	mov	r3, r0
  }
 800c3de:	4618      	mov	r0, r3
 800c3e0:	3708      	adds	r7, #8
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	bd80      	pop	{r7, pc}

0800c3e6 <_ZNK6tflite8Metadata4nameEv>:
  typedef MetadataT NativeTableType;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_BUFFER = 6
  };
  const flatbuffers::String *name() const {
 800c3e6:	b580      	push	{r7, lr}
 800c3e8:	b082      	sub	sp, #8
 800c3ea:	af00      	add	r7, sp, #0
 800c3ec:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::String *>(VT_NAME);
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	2104      	movs	r1, #4
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	f7fe fc67 	bl	800acc6 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>
 800c3f8:	4603      	mov	r3, r0
  }
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	3708      	adds	r7, #8
 800c3fe:	46bd      	mov	sp, r7
 800c400:	bd80      	pop	{r7, pc}

0800c402 <_ZNK6tflite8Metadata6bufferEv>:
  uint32_t buffer() const {
 800c402:	b580      	push	{r7, lr}
 800c404:	b082      	sub	sp, #8
 800c406:	af00      	add	r7, sp, #0
 800c408:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_BUFFER, 0);
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	2200      	movs	r2, #0
 800c40e:	2106      	movs	r1, #6
 800c410:	4618      	mov	r0, r3
 800c412:	f001 fbe0 	bl	800dbd6 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 800c416:	4603      	mov	r3, r0
  }
 800c418:	4618      	mov	r0, r3
 800c41a:	3708      	adds	r7, #8
 800c41c:	46bd      	mov	sp, r7
 800c41e:	bd80      	pop	{r7, pc}

0800c420 <_ZNK6tflite5Model9subgraphsEv>:
    return GetField<uint32_t>(VT_VERSION, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<tflite::OperatorCode>> *operator_codes() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::OperatorCode>> *>(VT_OPERATOR_CODES);
  }
  const flatbuffers::Vector<flatbuffers::Offset<tflite::SubGraph>> *subgraphs() const {
 800c420:	b580      	push	{r7, lr}
 800c422:	b082      	sub	sp, #8
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::SubGraph>> *>(VT_SUBGRAPHS);
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	2108      	movs	r1, #8
 800c42c:	4618      	mov	r0, r3
 800c42e:	f001 fc20 	bl	800dc72 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>
 800c432:	4603      	mov	r3, r0
  }
 800c434:	4618      	mov	r0, r3
 800c436:	3708      	adds	r7, #8
 800c438:	46bd      	mov	sp, r7
 800c43a:	bd80      	pop	{r7, pc}

0800c43c <_ZNK6tflite5Model7buffersEv>:
  const flatbuffers::String *description() const {
    return GetPointer<const flatbuffers::String *>(VT_DESCRIPTION);
  }
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Buffer>> *buffers() const {
 800c43c:	b580      	push	{r7, lr}
 800c43e:	b082      	sub	sp, #8
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Buffer>> *>(VT_BUFFERS);
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	210c      	movs	r1, #12
 800c448:	4618      	mov	r0, r3
 800c44a:	f001 fc22 	bl	800dc92 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>
 800c44e:	4603      	mov	r3, r0
  }
 800c450:	4618      	mov	r0, r3
 800c452:	3708      	adds	r7, #8
 800c454:	46bd      	mov	sp, r7
 800c456:	bd80      	pop	{r7, pc}

0800c458 <_ZNK6tflite5Model8metadataEv>:
  const flatbuffers::Vector<int32_t> *metadata_buffer() const {
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_METADATA_BUFFER);
  }
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Metadata>> *metadata() const {
 800c458:	b580      	push	{r7, lr}
 800c45a:	b082      	sub	sp, #8
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Metadata>> *>(VT_METADATA);
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	2110      	movs	r1, #16
 800c464:	4618      	mov	r0, r3
 800c466:	f001 fc24 	bl	800dcb2 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t>
 800c46a:	4603      	mov	r3, r0
  }
 800c46c:	4618      	mov	r0, r3
 800c46e:	3708      	adds	r7, #8
 800c470:	46bd      	mov	sp, r7
 800c472:	bd80      	pop	{r7, pc}

0800c474 <_ZN6tflite20BuiltinDataAllocatorD1Ev>:

  virtual ~BuiltinDataAllocator() {}
 800c474:	b480      	push	{r7}
 800c476:	b083      	sub	sp, #12
 800c478:	af00      	add	r7, sp, #0
 800c47a:	6078      	str	r0, [r7, #4]
 800c47c:	4a04      	ldr	r2, [pc, #16]	; (800c490 <_ZN6tflite20BuiltinDataAllocatorD1Ev+0x1c>)
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	601a      	str	r2, [r3, #0]
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	4618      	mov	r0, r3
 800c486:	370c      	adds	r7, #12
 800c488:	46bd      	mov	sp, r7
 800c48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48e:	4770      	bx	lr
 800c490:	0802c9c0 	.word	0x0802c9c0

0800c494 <_ZN6tflite20BuiltinDataAllocatorD0Ev>:
 800c494:	b580      	push	{r7, lr}
 800c496:	b082      	sub	sp, #8
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6078      	str	r0, [r7, #4]
 800c49c:	6878      	ldr	r0, [r7, #4]
 800c49e:	f7ff ffe9 	bl	800c474 <_ZN6tflite20BuiltinDataAllocatorD1Ev>
 800c4a2:	2104      	movs	r1, #4
 800c4a4:	6878      	ldr	r0, [r7, #4]
 800c4a6:	f019 f848 	bl	802553a <_ZdlPvj>
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	3708      	adds	r7, #8
 800c4b0:	46bd      	mov	sp, r7
 800c4b2:	bd80      	pop	{r7, pc}

0800c4b4 <_ZN6tflite20BuiltinDataAllocatorC1Ev>:
class BuiltinDataAllocator {
 800c4b4:	b480      	push	{r7}
 800c4b6:	b083      	sub	sp, #12
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	6078      	str	r0, [r7, #4]
 800c4bc:	4a04      	ldr	r2, [pc, #16]	; (800c4d0 <_ZN6tflite20BuiltinDataAllocatorC1Ev+0x1c>)
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	601a      	str	r2, [r3, #0]
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	370c      	adds	r7, #12
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ce:	4770      	bx	lr
 800c4d0:	0802c9c0 	.word	0x0802c9c0

0800c4d4 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorC1EPNS_21SimpleMemoryAllocatorE>:
constexpr char kOfflineMemAllocMetadata[] = "OfflineMemoryAllocation";
const TfLiteIntArray kZeroLengthIntArray = {};

class MicroBuiltinDataAllocator : public BuiltinDataAllocator {
 public:
  explicit MicroBuiltinDataAllocator(SimpleMemoryAllocator* memory_allocator)
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b082      	sub	sp, #8
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	6078      	str	r0, [r7, #4]
 800c4dc:	6039      	str	r1, [r7, #0]
      : memory_allocator_(memory_allocator) {}
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	f7ff ffe7 	bl	800c4b4 <_ZN6tflite20BuiltinDataAllocatorC1Ev>
 800c4e6:	4a05      	ldr	r2, [pc, #20]	; (800c4fc <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorC1EPNS_21SimpleMemoryAllocatorE+0x28>)
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	601a      	str	r2, [r3, #0]
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	683a      	ldr	r2, [r7, #0]
 800c4f0:	605a      	str	r2, [r3, #4]
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	3708      	adds	r7, #8
 800c4f8:	46bd      	mov	sp, r7
 800c4fa:	bd80      	pop	{r7, pc}
 800c4fc:	0802c96c 	.word	0x0802c96c

0800c500 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator8AllocateEjj>:

  void* Allocate(size_t size, size_t alignment_hint) override {
 800c500:	b580      	push	{r7, lr}
 800c502:	b084      	sub	sp, #16
 800c504:	af00      	add	r7, sp, #0
 800c506:	60f8      	str	r0, [r7, #12]
 800c508:	60b9      	str	r1, [r7, #8]
 800c50a:	607a      	str	r2, [r7, #4]
    return memory_allocator_->AllocateFromTail(size, alignment_hint);
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	6858      	ldr	r0, [r3, #4]
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	685b      	ldr	r3, [r3, #4]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	330c      	adds	r3, #12
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	687a      	ldr	r2, [r7, #4]
 800c51c:	68b9      	ldr	r1, [r7, #8]
 800c51e:	4798      	blx	r3
 800c520:	4603      	mov	r3, r0
  }
 800c522:	4618      	mov	r0, r3
 800c524:	3710      	adds	r7, #16
 800c526:	46bd      	mov	sp, r7
 800c528:	bd80      	pop	{r7, pc}

0800c52a <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator10DeallocateEPv>:
  void Deallocate(void* data) override {
 800c52a:	b480      	push	{r7}
 800c52c:	b083      	sub	sp, #12
 800c52e:	af00      	add	r7, sp, #0
 800c530:	6078      	str	r0, [r7, #4]
 800c532:	6039      	str	r1, [r7, #0]
    // Do not deallocate, builtin data needs to be available for the life time
    // of the model.
  }
 800c534:	bf00      	nop
 800c536:	370c      	adds	r7, #12
 800c538:	46bd      	mov	sp, r7
 800c53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c53e:	4770      	bx	lr

0800c540 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilderC1EPNS0_14AllocationInfoEjjPNS_13ErrorReporterE>:
// A helper class to construct AllocationInfo array. This array contains the
// lifetime of tensors / scratch_buffer and will be used to calculate the memory
// plan. Methods need to be called in order from `Init`, `Add*`, to `Finish`.
class AllocationInfoBuilder {
 public:
  AllocationInfoBuilder(AllocationInfo* info, size_t tensor_count,
 800c540:	b480      	push	{r7}
 800c542:	b085      	sub	sp, #20
 800c544:	af00      	add	r7, sp, #0
 800c546:	60f8      	str	r0, [r7, #12]
 800c548:	60b9      	str	r1, [r7, #8]
 800c54a:	607a      	str	r2, [r7, #4]
 800c54c:	603b      	str	r3, [r7, #0]
                        size_t scratch_buffer_count, ErrorReporter* reporter)
      : info_(info),
        tensor_count_(tensor_count),
        buffer_count_(scratch_buffer_count),
        reporter_(reporter) {}
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	68ba      	ldr	r2, [r7, #8]
 800c552:	601a      	str	r2, [r3, #0]
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	687a      	ldr	r2, [r7, #4]
 800c558:	605a      	str	r2, [r3, #4]
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	683a      	ldr	r2, [r7, #0]
 800c55e:	609a      	str	r2, [r3, #8]
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	69ba      	ldr	r2, [r7, #24]
 800c564:	60da      	str	r2, [r3, #12]
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	4618      	mov	r0, r3
 800c56a:	3714      	adds	r7, #20
 800c56c:	46bd      	mov	sp, r7
 800c56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c572:	4770      	bx	lr

0800c574 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor>:
  ErrorReporter* reporter_ = nullptr;
};

TfLiteStatus AllocationInfoBuilder::AddTensors(const SubGraph* subgraph,
                                               const int32_t* offline_offsets,
                                               TfLiteEvalTensor* eval_tensors) {
 800c574:	b580      	push	{r7, lr}
 800c576:	b096      	sub	sp, #88	; 0x58
 800c578:	af00      	add	r7, sp, #0
 800c57a:	60f8      	str	r0, [r7, #12]
 800c57c:	60b9      	str	r1, [r7, #8]
 800c57e:	607a      	str	r2, [r7, #4]
 800c580:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(eval_tensors != nullptr);
 800c582:	683b      	ldr	r3, [r7, #0]
 800c584:	2b00      	cmp	r3, #0
 800c586:	d101      	bne.n	800c58c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x18>
 800c588:	f019 fa5d 	bl	8025a46 <abort>

  // Set up allocation info for all tensors.
  for (size_t i = 0; i < tensor_count_; ++i) {
 800c58c:	2300      	movs	r3, #0
 800c58e:	657b      	str	r3, [r7, #84]	; 0x54
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	685b      	ldr	r3, [r3, #4]
 800c594:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c596:	429a      	cmp	r2, r3
 800c598:	d267      	bcs.n	800c66a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xf6>
    AllocationInfo* current = &info_[i];
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	6819      	ldr	r1, [r3, #0]
 800c59e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c5a0:	4613      	mov	r3, r2
 800c5a2:	005b      	lsls	r3, r3, #1
 800c5a4:	4413      	add	r3, r2
 800c5a6:	00db      	lsls	r3, r3, #3
 800c5a8:	440b      	add	r3, r1
 800c5aa:	63fb      	str	r3, [r7, #60]	; 0x3c
    current->output_ptr = &(eval_tensors[i].data.data);
 800c5ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c5ae:	4613      	mov	r3, r2
 800c5b0:	005b      	lsls	r3, r3, #1
 800c5b2:	4413      	add	r3, r2
 800c5b4:	009b      	lsls	r3, r3, #2
 800c5b6:	461a      	mov	r2, r3
 800c5b8:	683b      	ldr	r3, [r7, #0]
 800c5ba:	4413      	add	r3, r2
 800c5bc:	461a      	mov	r2, r3
 800c5be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5c0:	605a      	str	r2, [r3, #4]

    TF_LITE_ENSURE_STATUS(
 800c5c2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c5c4:	4613      	mov	r3, r2
 800c5c6:	005b      	lsls	r3, r3, #1
 800c5c8:	4413      	add	r3, r2
 800c5ca:	009b      	lsls	r3, r3, #2
 800c5cc:	461a      	mov	r2, r3
 800c5ce:	683b      	ldr	r3, [r7, #0]
 800c5d0:	4413      	add	r3, r2
 800c5d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c5d4:	4611      	mov	r1, r2
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	f7ff fdfb 	bl	800c1d2 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
 800c5dc:	4603      	mov	r3, r0
 800c5de:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c5e2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d002      	beq.n	800c5f0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x7c>
 800c5ea:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800c5ee:	e121      	b.n	800c834 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x2c0>
        TfLiteEvalTensorByteLength(&eval_tensors[i], &current->bytes));

    current->first_created = -1;
 800c5f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c5f6:	609a      	str	r2, [r3, #8]
    current->last_used = -1;
 800c5f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c5fe:	60da      	str	r2, [r3, #12]
    current->needs_allocating = (eval_tensors[i].data.data == nullptr) &&
 800c600:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c602:	4613      	mov	r3, r2
 800c604:	005b      	lsls	r3, r3, #1
 800c606:	4413      	add	r3, r2
 800c608:	009b      	lsls	r3, r3, #2
 800c60a:	461a      	mov	r2, r3
 800c60c:	683b      	ldr	r3, [r7, #0]
 800c60e:	4413      	add	r3, r2
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	2b00      	cmp	r3, #0
 800c614:	d113      	bne.n	800c63e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xca>
                                (!subgraph->tensors()->Get(i)->is_variable());
 800c616:	68b8      	ldr	r0, [r7, #8]
 800c618:	f7ff fe9f 	bl	800c35a <_ZNK6tflite8SubGraph7tensorsEv>
 800c61c:	4603      	mov	r3, r0
 800c61e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c620:	4618      	mov	r0, r3
 800c622:	f001 fbdf 	bl	800dde4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 800c626:	4603      	mov	r3, r0
 800c628:	4618      	mov	r0, r3
 800c62a:	f7ff fe66 	bl	800c2fa <_ZNK6tflite6Tensor11is_variableEv>
 800c62e:	4603      	mov	r3, r0
 800c630:	f083 0301 	eor.w	r3, r3, #1
 800c634:	b2db      	uxtb	r3, r3
    current->needs_allocating = (eval_tensors[i].data.data == nullptr) &&
 800c636:	2b00      	cmp	r3, #0
 800c638:	d001      	beq.n	800c63e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xca>
 800c63a:	2201      	movs	r2, #1
 800c63c:	e000      	b.n	800c640 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xcc>
 800c63e:	2200      	movs	r2, #0
 800c640:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c642:	751a      	strb	r2, [r3, #20]
    if (offline_offsets) {
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d007      	beq.n	800c65a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xe6>
      current->offline_offset = offline_offsets[i];
 800c64a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c64c:	009b      	lsls	r3, r3, #2
 800c64e:	687a      	ldr	r2, [r7, #4]
 800c650:	4413      	add	r3, r2
 800c652:	681a      	ldr	r2, [r3, #0]
 800c654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c656:	611a      	str	r2, [r3, #16]
 800c658:	e003      	b.n	800c662 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xee>
    } else {
      current->offline_offset = kOnlinePlannedBuffer;
 800c65a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c65c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c660:	611a      	str	r2, [r3, #16]
  for (size_t i = 0; i < tensor_count_; ++i) {
 800c662:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c664:	3301      	adds	r3, #1
 800c666:	657b      	str	r3, [r7, #84]	; 0x54
 800c668:	e792      	b.n	800c590 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x1c>
    }
  }

  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
 800c66a:	2300      	movs	r3, #0
 800c66c:	653b      	str	r3, [r7, #80]	; 0x50
 800c66e:	68b8      	ldr	r0, [r7, #8]
 800c670:	f7ff fe81 	bl	800c376 <_ZNK6tflite8SubGraph6inputsEv>
 800c674:	4603      	mov	r3, r0
 800c676:	4618      	mov	r0, r3
 800c678:	f7fc ffa8 	bl	80095cc <_ZNK11flatbuffers6VectorIlE4sizeEv>
 800c67c:	4602      	mov	r2, r0
 800c67e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c680:	4293      	cmp	r3, r2
 800c682:	bf34      	ite	cc
 800c684:	2301      	movcc	r3, #1
 800c686:	2300      	movcs	r3, #0
 800c688:	b2db      	uxtb	r3, r3
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d018      	beq.n	800c6c0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x14c>
    const int tensor_index = subgraph->inputs()->Get(i);
 800c68e:	68b8      	ldr	r0, [r7, #8]
 800c690:	f7ff fe71 	bl	800c376 <_ZNK6tflite8SubGraph6inputsEv>
 800c694:	4603      	mov	r3, r0
 800c696:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c698:	4618      	mov	r0, r3
 800c69a:	f7fc ffa5 	bl	80095e8 <_ZNK11flatbuffers6VectorIlE3GetEm>
 800c69e:	61b8      	str	r0, [r7, #24]
    AllocationInfo* current = &info_[tensor_index];
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	6819      	ldr	r1, [r3, #0]
 800c6a4:	69ba      	ldr	r2, [r7, #24]
 800c6a6:	4613      	mov	r3, r2
 800c6a8:	005b      	lsls	r3, r3, #1
 800c6aa:	4413      	add	r3, r2
 800c6ac:	00db      	lsls	r3, r3, #3
 800c6ae:	440b      	add	r3, r1
 800c6b0:	617b      	str	r3, [r7, #20]
    current->first_created = 0;
 800c6b2:	697b      	ldr	r3, [r7, #20]
 800c6b4:	2200      	movs	r2, #0
 800c6b6:	609a      	str	r2, [r3, #8]
  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
 800c6b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c6ba:	3301      	adds	r3, #1
 800c6bc:	653b      	str	r3, [r7, #80]	; 0x50
 800c6be:	e7d6      	b.n	800c66e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xfa>
  }

  // Mark all outputs as persistent to the end of the invocation.
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c6c4:	68b8      	ldr	r0, [r7, #8]
 800c6c6:	f7ff fe64 	bl	800c392 <_ZNK6tflite8SubGraph7outputsEv>
 800c6ca:	4603      	mov	r3, r0
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	f7fc ff7d 	bl	80095cc <_ZNK11flatbuffers6VectorIlE4sizeEv>
 800c6d2:	4602      	mov	r2, r0
 800c6d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c6d6:	4293      	cmp	r3, r2
 800c6d8:	bf34      	ite	cc
 800c6da:	2301      	movcc	r3, #1
 800c6dc:	2300      	movcs	r3, #0
 800c6de:	b2db      	uxtb	r3, r3
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d021      	beq.n	800c728 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x1b4>
    const int tensor_index = subgraph->outputs()->Get(i);
 800c6e4:	68b8      	ldr	r0, [r7, #8]
 800c6e6:	f7ff fe54 	bl	800c392 <_ZNK6tflite8SubGraph7outputsEv>
 800c6ea:	4603      	mov	r3, r0
 800c6ec:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	f7fc ff7a 	bl	80095e8 <_ZNK11flatbuffers6VectorIlE3GetEm>
 800c6f4:	6238      	str	r0, [r7, #32]
    AllocationInfo* current = &info_[tensor_index];
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	6819      	ldr	r1, [r3, #0]
 800c6fa:	6a3a      	ldr	r2, [r7, #32]
 800c6fc:	4613      	mov	r3, r2
 800c6fe:	005b      	lsls	r3, r3, #1
 800c700:	4413      	add	r3, r2
 800c702:	00db      	lsls	r3, r3, #3
 800c704:	440b      	add	r3, r1
 800c706:	61fb      	str	r3, [r7, #28]
    current->last_used = subgraph->operators()->size() - 1;
 800c708:	68b8      	ldr	r0, [r7, #8]
 800c70a:	f7ff fe50 	bl	800c3ae <_ZNK6tflite8SubGraph9operatorsEv>
 800c70e:	4603      	mov	r3, r0
 800c710:	4618      	mov	r0, r3
 800c712:	f001 fb8d 	bl	800de30 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 800c716:	4603      	mov	r3, r0
 800c718:	3b01      	subs	r3, #1
 800c71a:	461a      	mov	r2, r3
 800c71c:	69fb      	ldr	r3, [r7, #28]
 800c71e:	60da      	str	r2, [r3, #12]
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
 800c720:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c722:	3301      	adds	r3, #1
 800c724:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c726:	e7cd      	b.n	800c6c4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x150>
  }

  // Figure out when the first and last use of each tensor is.
  for (int i = (subgraph->operators()->size() - 1); i >= 0; --i) {
 800c728:	68b8      	ldr	r0, [r7, #8]
 800c72a:	f7ff fe40 	bl	800c3ae <_ZNK6tflite8SubGraph9operatorsEv>
 800c72e:	4603      	mov	r3, r0
 800c730:	4618      	mov	r0, r3
 800c732:	f001 fb7d 	bl	800de30 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 800c736:	4603      	mov	r3, r0
 800c738:	3b01      	subs	r3, #1
 800c73a:	64bb      	str	r3, [r7, #72]	; 0x48
 800c73c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c73e:	2b00      	cmp	r3, #0
 800c740:	db77      	blt.n	800c832 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x2be>
    const auto* op = subgraph->operators()->Get(i);
 800c742:	68b8      	ldr	r0, [r7, #8]
 800c744:	f7ff fe33 	bl	800c3ae <_ZNK6tflite8SubGraph9operatorsEv>
 800c748:	4602      	mov	r2, r0
 800c74a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c74c:	4619      	mov	r1, r3
 800c74e:	4610      	mov	r0, r2
 800c750:	f001 fb7c 	bl	800de4c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm>
 800c754:	6378      	str	r0, [r7, #52]	; 0x34
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
 800c756:	2300      	movs	r3, #0
 800c758:	647b      	str	r3, [r7, #68]	; 0x44
 800c75a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c75c:	f7ff fde1 	bl	800c322 <_ZNK6tflite8Operator6inputsEv>
 800c760:	4603      	mov	r3, r0
 800c762:	4618      	mov	r0, r3
 800c764:	f7fc ff32 	bl	80095cc <_ZNK11flatbuffers6VectorIlE4sizeEv>
 800c768:	4602      	mov	r2, r0
 800c76a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c76c:	4293      	cmp	r3, r2
 800c76e:	bf34      	ite	cc
 800c770:	2301      	movcc	r3, #1
 800c772:	2300      	movcs	r3, #0
 800c774:	b2db      	uxtb	r3, r3
 800c776:	2b00      	cmp	r3, #0
 800c778:	d022      	beq.n	800c7c0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x24c>
      const int tensor_index = op->inputs()->Get(n);
 800c77a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c77c:	f7ff fdd1 	bl	800c322 <_ZNK6tflite8Operator6inputsEv>
 800c780:	4603      	mov	r3, r0
 800c782:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c784:	4618      	mov	r0, r3
 800c786:	f7fc ff2f 	bl	80095e8 <_ZNK11flatbuffers6VectorIlE3GetEm>
 800c78a:	62b8      	str	r0, [r7, #40]	; 0x28
      AllocationInfo* current = &info_[tensor_index];
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	6819      	ldr	r1, [r3, #0]
 800c790:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c792:	4613      	mov	r3, r2
 800c794:	005b      	lsls	r3, r3, #1
 800c796:	4413      	add	r3, r2
 800c798:	00db      	lsls	r3, r3, #3
 800c79a:	440b      	add	r3, r1
 800c79c:	627b      	str	r3, [r7, #36]	; 0x24
      if (((current->last_used == -1) || (current->last_used < i))) {
 800c79e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7a0:	68db      	ldr	r3, [r3, #12]
 800c7a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c7a6:	d004      	beq.n	800c7b2 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x23e>
 800c7a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7aa:	68db      	ldr	r3, [r3, #12]
 800c7ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c7ae:	429a      	cmp	r2, r3
 800c7b0:	dd02      	ble.n	800c7b8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x244>
        current->last_used = i;
 800c7b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c7b6:	60da      	str	r2, [r3, #12]
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
 800c7b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c7ba:	3301      	adds	r3, #1
 800c7bc:	647b      	str	r3, [r7, #68]	; 0x44
 800c7be:	e7cc      	b.n	800c75a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x1e6>
      }
    }
    for (size_t n = 0; n < op->outputs()->size(); ++n) {
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	643b      	str	r3, [r7, #64]	; 0x40
 800c7c4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c7c6:	f7ff fdba 	bl	800c33e <_ZNK6tflite8Operator7outputsEv>
 800c7ca:	4603      	mov	r3, r0
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	f7fc fefd 	bl	80095cc <_ZNK11flatbuffers6VectorIlE4sizeEv>
 800c7d2:	4602      	mov	r2, r0
 800c7d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c7d6:	4293      	cmp	r3, r2
 800c7d8:	bf34      	ite	cc
 800c7da:	2301      	movcc	r3, #1
 800c7dc:	2300      	movcs	r3, #0
 800c7de:	b2db      	uxtb	r3, r3
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d022      	beq.n	800c82a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x2b6>
      const int tensor_index = op->outputs()->Get(n);
 800c7e4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c7e6:	f7ff fdaa 	bl	800c33e <_ZNK6tflite8Operator7outputsEv>
 800c7ea:	4603      	mov	r3, r0
 800c7ec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	f7fc fefa 	bl	80095e8 <_ZNK11flatbuffers6VectorIlE3GetEm>
 800c7f4:	6338      	str	r0, [r7, #48]	; 0x30
      AllocationInfo* current = &info_[tensor_index];
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	6819      	ldr	r1, [r3, #0]
 800c7fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c7fc:	4613      	mov	r3, r2
 800c7fe:	005b      	lsls	r3, r3, #1
 800c800:	4413      	add	r3, r2
 800c802:	00db      	lsls	r3, r3, #3
 800c804:	440b      	add	r3, r1
 800c806:	62fb      	str	r3, [r7, #44]	; 0x2c
      if ((current->first_created == -1) || (current->first_created > i)) {
 800c808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c80a:	689b      	ldr	r3, [r3, #8]
 800c80c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c810:	d004      	beq.n	800c81c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x2a8>
 800c812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c814:	689b      	ldr	r3, [r3, #8]
 800c816:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c818:	429a      	cmp	r2, r3
 800c81a:	da02      	bge.n	800c822 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x2ae>
        current->first_created = i;
 800c81c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c81e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c820:	609a      	str	r2, [r3, #8]
    for (size_t n = 0; n < op->outputs()->size(); ++n) {
 800c822:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c824:	3301      	adds	r3, #1
 800c826:	643b      	str	r3, [r7, #64]	; 0x40
 800c828:	e7cc      	b.n	800c7c4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x250>
  for (int i = (subgraph->operators()->size() - 1); i >= 0; --i) {
 800c82a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c82c:	3b01      	subs	r3, #1
 800c82e:	64bb      	str	r3, [r7, #72]	; 0x48
 800c830:	e784      	b.n	800c73c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x1c8>
      }
    }
  }
  return kTfLiteOk;
 800c832:	2300      	movs	r3, #0
}
 800c834:	4618      	mov	r0, r3
 800c836:	3758      	adds	r7, #88	; 0x58
 800c838:	46bd      	mov	sp, r7
 800c83a:	bd80      	pop	{r7, pc}

0800c83c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl>:

// Get offline tensors allocation plan. See
// micro/docs/memory_management.md for more info.
TfLiteStatus AllocationInfoBuilder::GetOfflinePlannedOffsets(
    const Model* model, const int32_t** offline_planner_offsets) {
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b08c      	sub	sp, #48	; 0x30
 800c840:	af00      	add	r7, sp, #0
 800c842:	60f8      	str	r0, [r7, #12]
 800c844:	60b9      	str	r1, [r7, #8]
 800c846:	607a      	str	r2, [r7, #4]
  if (model->metadata()) {
 800c848:	68b8      	ldr	r0, [r7, #8]
 800c84a:	f7ff fe05 	bl	800c458 <_ZNK6tflite5Model8metadataEv>
 800c84e:	4603      	mov	r3, r0
 800c850:	2b00      	cmp	r3, #0
 800c852:	bf14      	ite	ne
 800c854:	2301      	movne	r3, #1
 800c856:	2300      	moveq	r3, #0
 800c858:	b2db      	uxtb	r3, r3
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d060      	beq.n	800c920 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xe4>
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
 800c85e:	2300      	movs	r3, #0
 800c860:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c862:	68b8      	ldr	r0, [r7, #8]
 800c864:	f7ff fdf8 	bl	800c458 <_ZNK6tflite5Model8metadataEv>
 800c868:	4603      	mov	r3, r0
 800c86a:	4618      	mov	r0, r3
 800c86c:	f001 fb7c 	bl	800df68 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4sizeEv>
 800c870:	4602      	mov	r2, r0
 800c872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c874:	4293      	cmp	r3, r2
 800c876:	bf34      	ite	cc
 800c878:	2301      	movcc	r3, #1
 800c87a:	2300      	movcs	r3, #0
 800c87c:	b2db      	uxtb	r3, r3
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d04e      	beq.n	800c920 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xe4>
      auto metadata = model->metadata()->Get(i);
 800c882:	68b8      	ldr	r0, [r7, #8]
 800c884:	f7ff fde8 	bl	800c458 <_ZNK6tflite5Model8metadataEv>
 800c888:	4603      	mov	r3, r0
 800c88a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c88c:	4618      	mov	r0, r3
 800c88e:	f001 fb79 	bl	800df84 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm>
 800c892:	62b8      	str	r0, [r7, #40]	; 0x28
      if (strncmp(metadata->name()->c_str(), kOfflineMemAllocMetadata,
 800c894:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c896:	f7ff fda6 	bl	800c3e6 <_ZNK6tflite8Metadata4nameEv>
 800c89a:	4603      	mov	r3, r0
 800c89c:	4618      	mov	r0, r3
 800c89e:	f7fe f919 	bl	800aad4 <_ZNK11flatbuffers6String5c_strEv>
 800c8a2:	4603      	mov	r3, r0
 800c8a4:	2217      	movs	r2, #23
 800c8a6:	4921      	ldr	r1, [pc, #132]	; (800c92c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xf0>)
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	f019 fdb7 	bl	802641c <strncmp>
 800c8ae:	4603      	mov	r3, r0
                  strlen(kOfflineMemAllocMetadata)) == 0) {
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	bf0c      	ite	eq
 800c8b4:	2301      	moveq	r3, #1
 800c8b6:	2300      	movne	r3, #0
 800c8b8:	b2db      	uxtb	r3, r3
      if (strncmp(metadata->name()->c_str(), kOfflineMemAllocMetadata,
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d02c      	beq.n	800c918 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xdc>
        const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers =
            model->buffers();
 800c8be:	68b8      	ldr	r0, [r7, #8]
 800c8c0:	f7ff fdbc 	bl	800c43c <_ZNK6tflite5Model7buffersEv>
 800c8c4:	6278      	str	r0, [r7, #36]	; 0x24
        auto* buffer = (*buffers)[metadata->buffer()];
 800c8c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c8c8:	f7ff fd9b 	bl	800c402 <_ZNK6tflite8Metadata6bufferEv>
 800c8cc:	4603      	mov	r3, r0
 800c8ce:	4619      	mov	r1, r3
 800c8d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c8d2:	f001 fb8b 	bl	800dfec <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEEixEm>
 800c8d6:	6238      	str	r0, [r7, #32]
        auto* array = buffer->data();
 800c8d8:	6a38      	ldr	r0, [r7, #32]
 800c8da:	f7ff fd76 	bl	800c3ca <_ZNK6tflite6Buffer4dataEv>
 800c8de:	61f8      	str	r0, [r7, #28]
        const uint32_t* metadata_buffer =
            reinterpret_cast<const uint32_t*>(array->data());
 800c8e0:	69f8      	ldr	r0, [r7, #28]
 800c8e2:	f001 fb91 	bl	800e008 <_ZNK11flatbuffers6VectorIhE4dataEv>
 800c8e6:	61b8      	str	r0, [r7, #24]
        const size_t nbr_tensors = static_cast<size_t>(metadata_buffer[2]);
 800c8e8:	69bb      	ldr	r3, [r7, #24]
 800c8ea:	3308      	adds	r3, #8
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	617b      	str	r3, [r7, #20]
        *offline_planner_offsets =
            reinterpret_cast<const int32_t*>(&metadata_buffer[3]);
 800c8f0:	69bb      	ldr	r3, [r7, #24]
 800c8f2:	f103 020c 	add.w	r2, r3, #12
        *offline_planner_offsets =
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	601a      	str	r2, [r3, #0]

        if (tensor_count_ != nbr_tensors) {
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	685b      	ldr	r3, [r3, #4]
 800c8fe:	697a      	ldr	r2, [r7, #20]
 800c900:	429a      	cmp	r2, r3
 800c902:	d009      	beq.n	800c918 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xdc>
          TF_LITE_REPORT_ERROR(reporter_,
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	68d8      	ldr	r0, [r3, #12]
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	685b      	ldr	r3, [r3, #4]
 800c90c:	697a      	ldr	r2, [r7, #20]
 800c90e:	4908      	ldr	r1, [pc, #32]	; (800c930 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xf4>)
 800c910:	f7fb ff1a 	bl	8008748 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                               "Nbr of offline buffer offsets (%d) in metadata "
                               "not equal nbr tensors (%d)\n",
                               nbr_tensors, tensor_count_);
          return kTfLiteError;
 800c914:	2301      	movs	r3, #1
 800c916:	e004      	b.n	800c922 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xe6>
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
 800c918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c91a:	3301      	adds	r3, #1
 800c91c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c91e:	e7a0      	b.n	800c862 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0x26>
        }
      }
    }
  }
  return kTfLiteOk;
 800c920:	2300      	movs	r3, #0
}
 800c922:	4618      	mov	r0, r3
 800c924:	3730      	adds	r7, #48	; 0x30
 800c926:	46bd      	mov	sp, r7
 800c928:	bd80      	pop	{r7, pc}
 800c92a:	bf00      	nop
 800c92c:	0802c948 	.word	0x0802c948
 800c930:	08027c3c 	.word	0x08027c3c

0800c934 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE>:

TfLiteStatus AllocationInfoBuilder::AddScratchBuffers(
    internal::ScratchBufferRequest* scratch_buffer_requests,
    ScratchBufferHandle* scratch_buffer_handles) {
 800c934:	b480      	push	{r7}
 800c936:	b089      	sub	sp, #36	; 0x24
 800c938:	af00      	add	r7, sp, #0
 800c93a:	60f8      	str	r0, [r7, #12]
 800c93c:	60b9      	str	r1, [r7, #8]
 800c93e:	607a      	str	r2, [r7, #4]
  // Set up allocation info for buffers.
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	685b      	ldr	r3, [r3, #4]
 800c944:	61fb      	str	r3, [r7, #28]
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	685a      	ldr	r2, [r3, #4]
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	689b      	ldr	r3, [r3, #8]
 800c94e:	4413      	add	r3, r2
 800c950:	69fa      	ldr	r2, [r7, #28]
 800c952:	429a      	cmp	r2, r3
 800c954:	d232      	bcs.n	800c9bc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE+0x88>
    internal::ScratchBufferRequest* current_request =
        &(scratch_buffer_requests[i - tensor_count_]);
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	685b      	ldr	r3, [r3, #4]
 800c95a:	69fa      	ldr	r2, [r7, #28]
 800c95c:	1ad3      	subs	r3, r2, r3
 800c95e:	00db      	lsls	r3, r3, #3
    internal::ScratchBufferRequest* current_request =
 800c960:	68ba      	ldr	r2, [r7, #8]
 800c962:	4413      	add	r3, r2
 800c964:	61bb      	str	r3, [r7, #24]
    ScratchBufferHandle* current_handle =
        &(scratch_buffer_handles[i - tensor_count_]);
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	685b      	ldr	r3, [r3, #4]
 800c96a:	69fa      	ldr	r2, [r7, #28]
 800c96c:	1ad3      	subs	r3, r2, r3
 800c96e:	009b      	lsls	r3, r3, #2
    ScratchBufferHandle* current_handle =
 800c970:	687a      	ldr	r2, [r7, #4]
 800c972:	4413      	add	r3, r2
 800c974:	617b      	str	r3, [r7, #20]

    AllocationInfo* current = &info_[i];
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	6819      	ldr	r1, [r3, #0]
 800c97a:	69fa      	ldr	r2, [r7, #28]
 800c97c:	4613      	mov	r3, r2
 800c97e:	005b      	lsls	r3, r3, #1
 800c980:	4413      	add	r3, r2
 800c982:	00db      	lsls	r3, r3, #3
 800c984:	440b      	add	r3, r1
 800c986:	613b      	str	r3, [r7, #16]
    current->output_ptr = reinterpret_cast<void**>(&current_handle->data);
 800c988:	697a      	ldr	r2, [r7, #20]
 800c98a:	693b      	ldr	r3, [r7, #16]
 800c98c:	605a      	str	r2, [r3, #4]
    current->bytes = current_request->bytes;
 800c98e:	69bb      	ldr	r3, [r7, #24]
 800c990:	681a      	ldr	r2, [r3, #0]
 800c992:	693b      	ldr	r3, [r7, #16]
 800c994:	601a      	str	r2, [r3, #0]
    current->first_created = current_request->node_idx;
 800c996:	69bb      	ldr	r3, [r7, #24]
 800c998:	685a      	ldr	r2, [r3, #4]
 800c99a:	693b      	ldr	r3, [r7, #16]
 800c99c:	609a      	str	r2, [r3, #8]
    current->last_used = current_request->node_idx;
 800c99e:	69bb      	ldr	r3, [r7, #24]
 800c9a0:	685a      	ldr	r2, [r3, #4]
 800c9a2:	693b      	ldr	r3, [r7, #16]
 800c9a4:	60da      	str	r2, [r3, #12]
    current->offline_offset = kOnlinePlannedBuffer;
 800c9a6:	693b      	ldr	r3, [r7, #16]
 800c9a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c9ac:	611a      	str	r2, [r3, #16]
    current->needs_allocating = true;
 800c9ae:	693b      	ldr	r3, [r7, #16]
 800c9b0:	2201      	movs	r2, #1
 800c9b2:	751a      	strb	r2, [r3, #20]
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
 800c9b4:	69fb      	ldr	r3, [r7, #28]
 800c9b6:	3301      	adds	r3, #1
 800c9b8:	61fb      	str	r3, [r7, #28]
 800c9ba:	e7c4      	b.n	800c946 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE+0x12>
  }
  return kTfLiteOk;
 800c9bc:	2300      	movs	r3, #0
}
 800c9be:	4618      	mov	r0, r3
 800c9c0:	3724      	adds	r7, #36	; 0x24
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c8:	4770      	bx	lr

0800c9ca <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj>:

TfLiteStatus CreatePlan(ErrorReporter* error_reporter,
                        GreedyMemoryPlanner* planner,
                        const AllocationInfo* allocation_info,
                        size_t allocation_info_size) {
 800c9ca:	b590      	push	{r4, r7, lr}
 800c9cc:	b08b      	sub	sp, #44	; 0x2c
 800c9ce:	af02      	add	r7, sp, #8
 800c9d0:	60f8      	str	r0, [r7, #12]
 800c9d2:	60b9      	str	r1, [r7, #8]
 800c9d4:	607a      	str	r2, [r7, #4]
 800c9d6:	603b      	str	r3, [r7, #0]
  // Add the tensors to our allocation plan.
  for (size_t i = 0; i < allocation_info_size; ++i) {
 800c9d8:	2300      	movs	r3, #0
 800c9da:	61fb      	str	r3, [r7, #28]
 800c9dc:	69fa      	ldr	r2, [r7, #28]
 800c9de:	683b      	ldr	r3, [r7, #0]
 800c9e0:	429a      	cmp	r2, r3
 800c9e2:	d247      	bcs.n	800ca74 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xaa>
    const AllocationInfo* current = &allocation_info[i];
 800c9e4:	69fa      	ldr	r2, [r7, #28]
 800c9e6:	4613      	mov	r3, r2
 800c9e8:	005b      	lsls	r3, r3, #1
 800c9ea:	4413      	add	r3, r2
 800c9ec:	00db      	lsls	r3, r3, #3
 800c9ee:	461a      	mov	r2, r3
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	4413      	add	r3, r2
 800c9f4:	61bb      	str	r3, [r7, #24]
    if (current->needs_allocating) {
 800c9f6:	69bb      	ldr	r3, [r7, #24]
 800c9f8:	7d1b      	ldrb	r3, [r3, #20]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d036      	beq.n	800ca6c <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xa2>
      size_t aligned_bytes_required =
          AlignSizeUp(current->bytes, kBufferAlignment);
 800c9fe:	69bb      	ldr	r3, [r7, #24]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	2110      	movs	r1, #16
 800ca04:	4618      	mov	r0, r3
 800ca06:	f7ff faff 	bl	800c008 <_ZN6tflite11AlignSizeUpEjj>
 800ca0a:	6178      	str	r0, [r7, #20]
      if (current->offline_offset == kOnlinePlannedBuffer) {
 800ca0c:	69bb      	ldr	r3, [r7, #24]
 800ca0e:	691b      	ldr	r3, [r3, #16]
 800ca10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ca14:	d114      	bne.n	800ca40 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x76>
        TF_LITE_ENSURE_STATUS(
 800ca16:	68bb      	ldr	r3, [r7, #8]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	3308      	adds	r3, #8
 800ca1c:	681c      	ldr	r4, [r3, #0]
 800ca1e:	697a      	ldr	r2, [r7, #20]
 800ca20:	69bb      	ldr	r3, [r7, #24]
 800ca22:	6899      	ldr	r1, [r3, #8]
 800ca24:	69bb      	ldr	r3, [r7, #24]
 800ca26:	68db      	ldr	r3, [r3, #12]
 800ca28:	9300      	str	r3, [sp, #0]
 800ca2a:	460b      	mov	r3, r1
 800ca2c:	68f9      	ldr	r1, [r7, #12]
 800ca2e:	68b8      	ldr	r0, [r7, #8]
 800ca30:	47a0      	blx	r4
 800ca32:	4603      	mov	r3, r0
 800ca34:	74bb      	strb	r3, [r7, #18]
 800ca36:	7cbb      	ldrb	r3, [r7, #18]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d017      	beq.n	800ca6c <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xa2>
 800ca3c:	7cbb      	ldrb	r3, [r7, #18]
 800ca3e:	e01a      	b.n	800ca76 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xac>
            planner->AddBuffer(error_reporter, aligned_bytes_required,
                               current->first_created, current->last_used));
      } else {
        TF_LITE_ENSURE_STATUS(planner->AddBuffer(
 800ca40:	6979      	ldr	r1, [r7, #20]
 800ca42:	69bb      	ldr	r3, [r7, #24]
 800ca44:	6898      	ldr	r0, [r3, #8]
 800ca46:	69bb      	ldr	r3, [r7, #24]
 800ca48:	68db      	ldr	r3, [r3, #12]
 800ca4a:	69ba      	ldr	r2, [r7, #24]
 800ca4c:	6912      	ldr	r2, [r2, #16]
 800ca4e:	9201      	str	r2, [sp, #4]
 800ca50:	9300      	str	r3, [sp, #0]
 800ca52:	4603      	mov	r3, r0
 800ca54:	460a      	mov	r2, r1
 800ca56:	68f9      	ldr	r1, [r7, #12]
 800ca58:	68b8      	ldr	r0, [r7, #8]
 800ca5a:	f00c f91b 	bl	8018c94 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii>
 800ca5e:	4603      	mov	r3, r0
 800ca60:	74fb      	strb	r3, [r7, #19]
 800ca62:	7cfb      	ldrb	r3, [r7, #19]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d001      	beq.n	800ca6c <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xa2>
 800ca68:	7cfb      	ldrb	r3, [r7, #19]
 800ca6a:	e004      	b.n	800ca76 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xac>
  for (size_t i = 0; i < allocation_info_size; ++i) {
 800ca6c:	69fb      	ldr	r3, [r7, #28]
 800ca6e:	3301      	adds	r3, #1
 800ca70:	61fb      	str	r3, [r7, #28]
 800ca72:	e7b3      	b.n	800c9dc <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x12>
            error_reporter, aligned_bytes_required, current->first_created,
            current->last_used, current->offline_offset));
      }
    }
  }
  return kTfLiteOk;
 800ca74:	2300      	movs	r3, #0
}
 800ca76:	4618      	mov	r0, r3
 800ca78:	3724      	adds	r7, #36	; 0x24
 800ca7a:	46bd      	mov	sp, r7
 800ca7c:	bd90      	pop	{r4, r7, pc}

0800ca7e <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj>:

TfLiteStatus CommitPlan(ErrorReporter* error_reporter, MemoryPlanner* planner,
                        uint8_t* starting_point,
                        const AllocationInfo* allocation_info,
                        size_t allocation_info_size) {
 800ca7e:	b590      	push	{r4, r7, lr}
 800ca80:	b08b      	sub	sp, #44	; 0x2c
 800ca82:	af00      	add	r7, sp, #0
 800ca84:	60f8      	str	r0, [r7, #12]
 800ca86:	60b9      	str	r1, [r7, #8]
 800ca88:	607a      	str	r2, [r7, #4]
 800ca8a:	603b      	str	r3, [r7, #0]
  // Figure out the actual memory addresses for each buffer, based on the plan.
  int planner_index = 0;
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	627b      	str	r3, [r7, #36]	; 0x24
  for (size_t i = 0; i < allocation_info_size; ++i) {
 800ca90:	2300      	movs	r3, #0
 800ca92:	623b      	str	r3, [r7, #32]
 800ca94:	6a3a      	ldr	r2, [r7, #32]
 800ca96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca98:	429a      	cmp	r2, r3
 800ca9a:	d22e      	bcs.n	800cafa <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x7c>
    const AllocationInfo* current = &allocation_info[i];
 800ca9c:	6a3a      	ldr	r2, [r7, #32]
 800ca9e:	4613      	mov	r3, r2
 800caa0:	005b      	lsls	r3, r3, #1
 800caa2:	4413      	add	r3, r2
 800caa4:	00db      	lsls	r3, r3, #3
 800caa6:	461a      	mov	r2, r3
 800caa8:	683b      	ldr	r3, [r7, #0]
 800caaa:	4413      	add	r3, r2
 800caac:	61fb      	str	r3, [r7, #28]
    if (current->needs_allocating) {
 800caae:	69fb      	ldr	r3, [r7, #28]
 800cab0:	7d1b      	ldrb	r3, [r3, #20]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d01d      	beq.n	800caf2 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x74>
      int offset = -1;
 800cab6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800caba:	617b      	str	r3, [r7, #20]
      TF_LITE_ENSURE_STATUS(
 800cabc:	68bb      	ldr	r3, [r7, #8]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	3314      	adds	r3, #20
 800cac2:	681c      	ldr	r4, [r3, #0]
 800cac4:	f107 0314 	add.w	r3, r7, #20
 800cac8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800caca:	68f9      	ldr	r1, [r7, #12]
 800cacc:	68b8      	ldr	r0, [r7, #8]
 800cace:	47a0      	blx	r4
 800cad0:	4603      	mov	r3, r0
 800cad2:	76fb      	strb	r3, [r7, #27]
 800cad4:	7efb      	ldrb	r3, [r7, #27]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d001      	beq.n	800cade <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x60>
 800cada:	7efb      	ldrb	r3, [r7, #27]
 800cadc:	e00e      	b.n	800cafc <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x7e>
          planner->GetOffsetForBuffer(error_reporter, planner_index, &offset));
      *current->output_ptr = reinterpret_cast<void*>(starting_point + offset);
 800cade:	697b      	ldr	r3, [r7, #20]
 800cae0:	4619      	mov	r1, r3
 800cae2:	69fb      	ldr	r3, [r7, #28]
 800cae4:	685b      	ldr	r3, [r3, #4]
 800cae6:	687a      	ldr	r2, [r7, #4]
 800cae8:	440a      	add	r2, r1
 800caea:	601a      	str	r2, [r3, #0]
      ++planner_index;
 800caec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caee:	3301      	adds	r3, #1
 800caf0:	627b      	str	r3, [r7, #36]	; 0x24
  for (size_t i = 0; i < allocation_info_size; ++i) {
 800caf2:	6a3b      	ldr	r3, [r7, #32]
 800caf4:	3301      	adds	r3, #1
 800caf6:	623b      	str	r3, [r7, #32]
 800caf8:	e7cc      	b.n	800ca94 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x16>
    }
  }
  return kTfLiteOk;
 800cafa:	2300      	movs	r3, #0
}
 800cafc:	4618      	mov	r0, r3
 800cafe:	372c      	adds	r7, #44	; 0x2c
 800cb00:	46bd      	mov	sp, r7
 800cb02:	bd90      	pop	{r4, r7, pc}

0800cb04 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>:

// Returns a pointer to any buffer associated with the flatbuffer tensor. Can
// return nullptr if no buffer is found.
void* GetFlatbufferTensorBuffer(
    const tflite::Tensor& flatbuffer_tensor,
    const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers) {
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b086      	sub	sp, #24
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]
 800cb0c:	6039      	str	r1, [r7, #0]
  // the same as a constant op in TensorFlow) associated with this tensor first,
  // and if there is update the runtime structure to point to its location in
  // memory.
  // First see if there's any buffer information in the serialized tensor.
  // TODO(b/170379532): Add better unit tests to validate flatbuffer values.
  void* out_buffer = nullptr;
 800cb0e:	2300      	movs	r3, #0
 800cb10:	617b      	str	r3, [r7, #20]
  if (auto* buffer = (*buffers)[flatbuffer_tensor.buffer()]) {
 800cb12:	6878      	ldr	r0, [r7, #4]
 800cb14:	f7ff fbd4 	bl	800c2c0 <_ZNK6tflite6Tensor6bufferEv>
 800cb18:	4603      	mov	r3, r0
 800cb1a:	4619      	mov	r1, r3
 800cb1c:	6838      	ldr	r0, [r7, #0]
 800cb1e:	f001 fa65 	bl	800dfec <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEEixEm>
 800cb22:	6138      	str	r0, [r7, #16]
 800cb24:	693b      	ldr	r3, [r7, #16]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d015      	beq.n	800cb56 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x52>
    // If we've found a buffer, does it have any data?
    if (auto* array = buffer->data()) {
 800cb2a:	6938      	ldr	r0, [r7, #16]
 800cb2c:	f7ff fc4d 	bl	800c3ca <_ZNK6tflite6Buffer4dataEv>
 800cb30:	60f8      	str	r0, [r7, #12]
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d00e      	beq.n	800cb56 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x52>
      // If it has any data, is the data size larger than zero?
      if (array->size()) {
 800cb38:	68f8      	ldr	r0, [r7, #12]
 800cb3a:	f001 f8ca 	bl	800dcd2 <_ZNK11flatbuffers6VectorIhE4sizeEv>
 800cb3e:	4603      	mov	r3, r0
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	bf14      	ite	ne
 800cb44:	2301      	movne	r3, #1
 800cb46:	2300      	moveq	r3, #0
 800cb48:	b2db      	uxtb	r3, r3
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d003      	beq.n	800cb56 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x52>
        // We've found a buffer with valid data, so update the runtime tensor
        // data structure to point to it.
        out_buffer = const_cast<void*>(static_cast<const void*>(array->data()));
 800cb4e:	68f8      	ldr	r0, [r7, #12]
 800cb50:	f001 fa5a 	bl	800e008 <_ZNK11flatbuffers6VectorIhE4dataEv>
 800cb54:	6178      	str	r0, [r7, #20]
    // buffer in the serialized tensor, but it doesn't have any data in it. Is
    // that a validly-generated file, and if so what does it mean, or is it an
    // error condition? It would be good to tighten up the specification to make
    // it less ambiguous.
  }
  return out_buffer;
 800cb56:	697b      	ldr	r3, [r7, #20]
}
 800cb58:	4618      	mov	r0, r3
 800cb5a:	3718      	adds	r7, #24
 800cb5c:	46bd      	mov	sp, r7
 800cb5e:	bd80      	pop	{r7, pc}

0800cb60 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor>:

TfLiteStatus InitializeTfLiteTensorFromFlatbuffer(
    SimpleMemoryAllocator* allocator, bool allocate_temp,
    const tflite::Tensor& flatbuffer_tensor,
    const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers,
    ErrorReporter* error_reporter, TfLiteTensor* result) {
 800cb60:	b590      	push	{r4, r7, lr}
 800cb62:	b08d      	sub	sp, #52	; 0x34
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	60f8      	str	r0, [r7, #12]
 800cb68:	607a      	str	r2, [r7, #4]
 800cb6a:	603b      	str	r3, [r7, #0]
 800cb6c:	460b      	mov	r3, r1
 800cb6e:	72fb      	strb	r3, [r7, #11]
  TFLITE_DCHECK(result != nullptr);
 800cb70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d101      	bne.n	800cb7a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1a>
 800cb76:	f018 ff66 	bl	8025a46 <abort>

  *result = {};
 800cb7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	2340      	movs	r3, #64	; 0x40
 800cb80:	461a      	mov	r2, r3
 800cb82:	2100      	movs	r1, #0
 800cb84:	f019 f856 	bl	8025c34 <memset>
  // Make sure the serialized type is one we know how to deal with, and convert
  // it from a flatbuffer enum into a constant used by the kernel C API.
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
 800cb88:	6878      	ldr	r0, [r7, #4]
 800cb8a:	f7ff f945 	bl	800be18 <_ZNK6tflite6Tensor4typeEv>
 800cb8e:	4603      	mov	r3, r0
 800cb90:	4618      	mov	r0, r3
 800cb92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb94:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cb96:	4619      	mov	r1, r3
 800cb98:	f7fc f8dc 	bl	8008d54 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
 800cb9c:	4603      	mov	r3, r0
 800cb9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cba2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d002      	beq.n	800cbb0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x50>
 800cbaa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cbae:	e127      	b.n	800ce00 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a0>
                                          &result->type, error_reporter));
  // Make sure we remember if the serialized tensor is designated as a variable.
  result->is_variable = flatbuffer_tensor.is_variable();
 800cbb0:	6878      	ldr	r0, [r7, #4]
 800cbb2:	f7ff fba2 	bl	800c2fa <_ZNK6tflite6Tensor11is_variableEv>
 800cbb6:	4603      	mov	r3, r0
 800cbb8:	461a      	mov	r2, r3
 800cbba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cbbc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  result->data.data = GetFlatbufferTensorBuffer(flatbuffer_tensor, buffers);
 800cbc0:	6839      	ldr	r1, [r7, #0]
 800cbc2:	6878      	ldr	r0, [r7, #4]
 800cbc4:	f7ff ff9e 	bl	800cb04 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>
 800cbc8:	4602      	mov	r2, r0
 800cbca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cbcc:	605a      	str	r2, [r3, #4]

  // TODO(petewarden): Some of these paths aren't getting enough testing
  // coverage, so we should figure out some tests that exercise them.
  if (result->data.data == nullptr) {
 800cbce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cbd0:	685b      	ldr	r3, [r3, #4]
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d103      	bne.n	800cbde <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x7e>
    // The tensor contents haven't been set from a serialized buffer, so
    // make a note that they will be allocated from memory. The actual
    // allocation won't happen until later.
    result->allocation_type = kTfLiteArenaRw;
 800cbd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cbd8:	2202      	movs	r2, #2
 800cbda:	751a      	strb	r2, [r3, #20]
 800cbdc:	e002      	b.n	800cbe4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x84>
  } else {
    // We set the data from a serialized buffer, so record tha.
    result->allocation_type = kTfLiteMmapRo;
 800cbde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cbe0:	2201      	movs	r2, #1
 800cbe2:	751a      	strb	r2, [r3, #20]
  }

  // Figure out what the size in bytes of the buffer is and store it.
  size_t type_size;
  TF_LITE_ENSURE_STATUS(BytesRequiredForTensor(
 800cbe4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cbe6:	f103 0118 	add.w	r1, r3, #24
 800cbea:	f107 0210 	add.w	r2, r7, #16
 800cbee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cbf0:	6878      	ldr	r0, [r7, #4]
 800cbf2:	f7ff fa8d 	bl	800c110 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE>
 800cbf6:	4603      	mov	r3, r0
 800cbf8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800cbfc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d002      	beq.n	800cc0a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xaa>
 800cc04:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800cc08:	e0fa      	b.n	800ce00 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a0>
      flatbuffer_tensor, &result->bytes, &type_size, error_reporter));

  if (flatbuffer_tensor.shape() == nullptr) {
 800cc0a:	6878      	ldr	r0, [r7, #4]
 800cc0c:	f7ff f8f6 	bl	800bdfc <_ZNK6tflite6Tensor5shapeEv>
 800cc10:	4603      	mov	r3, r0
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	bf0c      	ite	eq
 800cc16:	2301      	moveq	r3, #1
 800cc18:	2300      	movne	r3, #0
 800cc1a:	b2db      	uxtb	r3, r3
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d003      	beq.n	800cc28 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xc8>
    // flatbuffer_tensor.shape() can return a nullptr in the case of a scalar
    // tensor.
    result->dims = const_cast<TfLiteIntArray*>(&kZeroLengthIntArray);
 800cc20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc22:	4a79      	ldr	r2, [pc, #484]	; (800ce08 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a8>)
 800cc24:	609a      	str	r2, [r3, #8]
 800cc26:	e013      	b.n	800cc50 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf0>
  } else {
    // TFLM doesn't allow reshaping the tensor which requires dynamic memory
    // allocation so it is safe to drop the const qualifier. In the future, if
    // we really want to update the tensor shape, we can always pass in a new
    // TfLiteIntArray - especially we have to do so if the dimension is
    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
 800cc28:	6878      	ldr	r0, [r7, #4]
 800cc2a:	f7ff f8e7 	bl	800bdfc <_ZNK6tflite6Tensor5shapeEv>
 800cc2e:	4602      	mov	r2, r0
 800cc30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc32:	3308      	adds	r3, #8
 800cc34:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cc36:	68f8      	ldr	r0, [r7, #12]
 800cc38:	f001 f9f2 	bl	800e020 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
 800cc3c:	4603      	mov	r3, r0
 800cc3e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 800cc42:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d002      	beq.n	800cc50 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf0>
 800cc4a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800cc4e:	e0d7      	b.n	800ce00 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a0>
        allocator, error_reporter, flatbuffer_tensor.shape(), &(result->dims)));
  }

  // Copy the quantization information from the serialized data.
  const auto* src_quantization = flatbuffer_tensor.quantization();
 800cc50:	6878      	ldr	r0, [r7, #4]
 800cc52:	f7ff fb44 	bl	800c2de <_ZNK6tflite6Tensor12quantizationEv>
 800cc56:	6278      	str	r0, [r7, #36]	; 0x24
  if (src_quantization && src_quantization->scale() &&
      (src_quantization->scale()->size() > 0) &&
      src_quantization->zero_point() &&
 800cc58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d021      	beq.n	800cca2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x142>
  if (src_quantization && src_quantization->scale() &&
 800cc5e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cc60:	f7ff fb03 	bl	800c26a <_ZNK6tflite22QuantizationParameters5scaleEv>
 800cc64:	4603      	mov	r3, r0
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d01b      	beq.n	800cca2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x142>
      (src_quantization->scale()->size() > 0) &&
 800cc6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cc6c:	f7ff fafd 	bl	800c26a <_ZNK6tflite22QuantizationParameters5scaleEv>
 800cc70:	4603      	mov	r3, r0
 800cc72:	4618      	mov	r0, r3
 800cc74:	f001 f83b 	bl	800dcee <_ZNK11flatbuffers6VectorIfE4sizeEv>
 800cc78:	4603      	mov	r3, r0
  if (src_quantization && src_quantization->scale() &&
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d011      	beq.n	800cca2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x142>
      src_quantization->zero_point() &&
 800cc7e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cc80:	f7ff fb01 	bl	800c286 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 800cc84:	4603      	mov	r3, r0
      (src_quantization->scale()->size() > 0) &&
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d00b      	beq.n	800cca2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x142>
      (src_quantization->zero_point()->size() > 0)) {
 800cc8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cc8c:	f7ff fafb 	bl	800c286 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 800cc90:	4603      	mov	r3, r0
 800cc92:	4618      	mov	r0, r3
 800cc94:	f001 f862 	bl	800dd5c <_ZNK11flatbuffers6VectorIxE4sizeEv>
 800cc98:	4603      	mov	r3, r0
      src_quantization->zero_point() &&
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d001      	beq.n	800cca2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x142>
 800cc9e:	2301      	movs	r3, #1
 800cca0:	e000      	b.n	800cca4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x144>
 800cca2:	2300      	movs	r3, #0
  if (src_quantization && src_quantization->scale() &&
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	f000 80aa 	beq.w	800cdfe <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x29e>
    // Always populate the TfLiteTensor.params field, even if there are
    // per-channel quantization parameters.
    result->params.scale = src_quantization->scale()->Get(0);
 800ccaa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ccac:	f7ff fadd 	bl	800c26a <_ZNK6tflite22QuantizationParameters5scaleEv>
 800ccb0:	4603      	mov	r3, r0
 800ccb2:	2100      	movs	r1, #0
 800ccb4:	4618      	mov	r0, r3
 800ccb6:	f001 f829 	bl	800dd0c <_ZNK11flatbuffers6VectorIfE3GetEm>
 800ccba:	eef0 7a40 	vmov.f32	s15, s0
 800ccbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ccc0:	edc3 7a03 	vstr	s15, [r3, #12]
    // Note that the zero_point field in the FlatBuffers schema is a 64-bit
    // integer, but the zero_point field in the TfLiteQuantizationParams struct
    // is a 32-bit integer.
    result->params.zero_point =
        static_cast<int32_t>(src_quantization->zero_point()->Get(0));
 800ccc4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ccc6:	f7ff fade 	bl	800c286 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 800ccca:	4603      	mov	r3, r0
 800cccc:	2100      	movs	r1, #0
 800ccce:	4618      	mov	r0, r3
 800ccd0:	f001 f852 	bl	800dd78 <_ZNK11flatbuffers6VectorIxE3GetEm>
 800ccd4:	4602      	mov	r2, r0
 800ccd6:	460b      	mov	r3, r1
    result->params.zero_point =
 800ccd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ccda:	611a      	str	r2, [r3, #16]

    // Populate per-channel quantization params.
    int channels = src_quantization->scale()->size();
 800ccdc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ccde:	f7ff fac4 	bl	800c26a <_ZNK6tflite22QuantizationParameters5scaleEv>
 800cce2:	4603      	mov	r3, r0
 800cce4:	4618      	mov	r0, r3
 800cce6:	f001 f802 	bl	800dcee <_ZNK11flatbuffers6VectorIfE4sizeEv>
 800ccea:	4603      	mov	r3, r0
 800ccec:	623b      	str	r3, [r7, #32]
    TfLiteAffineQuantization* quantization =
        allocate_temp
            ? reinterpret_cast<TfLiteAffineQuantization*>(
 800ccee:	7afb      	ldrb	r3, [r7, #11]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d009      	beq.n	800cd08 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1a8>
                  allocator->AllocateTemp(sizeof(TfLiteAffineQuantization),
                                          alignof(TfLiteAffineQuantization)))
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	3310      	adds	r3, #16
 800ccfa:	681b      	ldr	r3, [r3, #0]
                  allocator->AllocateTemp(sizeof(TfLiteAffineQuantization),
 800ccfc:	2204      	movs	r2, #4
 800ccfe:	210c      	movs	r1, #12
 800cd00:	68f8      	ldr	r0, [r7, #12]
 800cd02:	4798      	blx	r3
 800cd04:	4603      	mov	r3, r0
 800cd06:	e008      	b.n	800cd1a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1ba>
            : reinterpret_cast<TfLiteAffineQuantization*>(
                  allocator->AllocateFromTail(
                      sizeof(TfLiteAffineQuantization),
                      alignof(TfLiteAffineQuantization)));
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	330c      	adds	r3, #12
 800cd0e:	681b      	ldr	r3, [r3, #0]
                  allocator->AllocateFromTail(
 800cd10:	2204      	movs	r2, #4
 800cd12:	210c      	movs	r1, #12
 800cd14:	68f8      	ldr	r0, [r7, #12]
 800cd16:	4798      	blx	r3
 800cd18:	4603      	mov	r3, r0
                      alignof(TfLiteAffineQuantization)));
 800cd1a:	61fb      	str	r3, [r7, #28]
    if (quantization == nullptr) {
 800cd1c:	69fb      	ldr	r3, [r7, #28]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d105      	bne.n	800cd2e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1ce>
      TF_LITE_REPORT_ERROR(error_reporter,
 800cd22:	493a      	ldr	r1, [pc, #232]	; (800ce0c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2ac>)
 800cd24:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800cd26:	f7fb fd0f 	bl	8008748 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Unable to allocate TfLiteAffineQuantization.\n");
      return kTfLiteError;
 800cd2a:	2301      	movs	r3, #1
 800cd2c:	e068      	b.n	800ce00 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a0>
    // TODO(b/153688719): Reduce tail allocation by using a global zero-point
    // buffer. This value can not be reused from the flatbuffer since the
    // zero_point is stored as a int64_t.
    quantization->zero_point =
        allocate_temp
            ? reinterpret_cast<TfLiteIntArray*>(allocator->AllocateTemp(
 800cd2e:	7afb      	ldrb	r3, [r7, #11]
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d00d      	beq.n	800cd50 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1f0>
                  TfLiteIntArrayGetSizeInBytes(channels),
                  alignof(TfLiteIntArray)))
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	3310      	adds	r3, #16
 800cd3a:	681c      	ldr	r4, [r3, #0]
                  TfLiteIntArrayGetSizeInBytes(channels),
 800cd3c:	6a38      	ldr	r0, [r7, #32]
 800cd3e:	f7fb fc79 	bl	8008634 <TfLiteIntArrayGetSizeInBytes>
 800cd42:	4603      	mov	r3, r0
            ? reinterpret_cast<TfLiteIntArray*>(allocator->AllocateTemp(
 800cd44:	2204      	movs	r2, #4
 800cd46:	4619      	mov	r1, r3
 800cd48:	68f8      	ldr	r0, [r7, #12]
 800cd4a:	47a0      	blx	r4
 800cd4c:	4603      	mov	r3, r0
 800cd4e:	e00c      	b.n	800cd6a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x20a>
            : reinterpret_cast<TfLiteIntArray*>(allocator->AllocateFromTail(
                  TfLiteIntArrayGetSizeInBytes(channels),
                  alignof(TfLiteIntArray)));
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	330c      	adds	r3, #12
 800cd56:	681c      	ldr	r4, [r3, #0]
                  TfLiteIntArrayGetSizeInBytes(channels),
 800cd58:	6a38      	ldr	r0, [r7, #32]
 800cd5a:	f7fb fc6b 	bl	8008634 <TfLiteIntArrayGetSizeInBytes>
 800cd5e:	4603      	mov	r3, r0
            : reinterpret_cast<TfLiteIntArray*>(allocator->AllocateFromTail(
 800cd60:	2204      	movs	r2, #4
 800cd62:	4619      	mov	r1, r3
 800cd64:	68f8      	ldr	r0, [r7, #12]
 800cd66:	47a0      	blx	r4
 800cd68:	4603      	mov	r3, r0
    quantization->zero_point =
 800cd6a:	69fa      	ldr	r2, [r7, #28]
 800cd6c:	6053      	str	r3, [r2, #4]
    if (quantization->zero_point == nullptr) {
 800cd6e:	69fb      	ldr	r3, [r7, #28]
 800cd70:	685b      	ldr	r3, [r3, #4]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d105      	bne.n	800cd82 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x222>
      TF_LITE_REPORT_ERROR(error_reporter,
 800cd76:	4926      	ldr	r1, [pc, #152]	; (800ce10 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2b0>)
 800cd78:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800cd7a:	f7fb fce5 	bl	8008748 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Unable to allocate quantization->zero_point.\n");
      return kTfLiteError;
 800cd7e:	2301      	movs	r3, #1
 800cd80:	e03e      	b.n	800ce00 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a0>
    }

    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
 800cd82:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cd84:	f7ff fa71 	bl	800c26a <_ZNK6tflite22QuantizationParameters5scaleEv>
 800cd88:	4602      	mov	r2, r0
 800cd8a:	69fb      	ldr	r3, [r7, #28]
 800cd8c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cd8e:	68f8      	ldr	r0, [r7, #12]
 800cd90:	f001 f95f 	bl	800e052 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
 800cd94:	4603      	mov	r3, r0
 800cd96:	76fb      	strb	r3, [r7, #27]
 800cd98:	7efb      	ldrb	r3, [r7, #27]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d001      	beq.n	800cda2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x242>
 800cd9e:	7efb      	ldrb	r3, [r7, #27]
 800cda0:	e02e      	b.n	800ce00 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a0>
        allocator, error_reporter, src_quantization->scale(),
        &quantization->scale));

    quantization->zero_point->size = channels;
 800cda2:	69fb      	ldr	r3, [r7, #28]
 800cda4:	685b      	ldr	r3, [r3, #4]
 800cda6:	6a3a      	ldr	r2, [r7, #32]
 800cda8:	601a      	str	r2, [r3, #0]
    int* zero_point_data = quantization->zero_point->data;
 800cdaa:	69fb      	ldr	r3, [r7, #28]
 800cdac:	685b      	ldr	r3, [r3, #4]
 800cdae:	3304      	adds	r3, #4
 800cdb0:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < channels; i++) {
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cdb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cdb8:	6a3b      	ldr	r3, [r7, #32]
 800cdba:	429a      	cmp	r2, r3
 800cdbc:	da12      	bge.n	800cde4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x284>
      zero_point_data[i] = src_quantization->zero_point()->Get(i);
 800cdbe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cdc0:	f7ff fa61 	bl	800c286 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 800cdc4:	4602      	mov	r2, r0
 800cdc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdc8:	4619      	mov	r1, r3
 800cdca:	4610      	mov	r0, r2
 800cdcc:	f000 ffd4 	bl	800dd78 <_ZNK11flatbuffers6VectorIxE3GetEm>
 800cdd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdd2:	009b      	lsls	r3, r3, #2
 800cdd4:	697a      	ldr	r2, [r7, #20]
 800cdd6:	4413      	add	r3, r2
 800cdd8:	4602      	mov	r2, r0
 800cdda:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < channels; i++) {
 800cddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdde:	3301      	adds	r3, #1
 800cde0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cde2:	e7e8      	b.n	800cdb6 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x256>
    }
    // TODO(rocky): Need to add a micro_allocator test case that fails when
    // this is not copied:
    quantization->quantized_dimension = src_quantization->quantized_dimension();
 800cde4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cde6:	f7ff fa5c 	bl	800c2a2 <_ZNK6tflite22QuantizationParameters19quantized_dimensionEv>
 800cdea:	4602      	mov	r2, r0
 800cdec:	69fb      	ldr	r3, [r7, #28]
 800cdee:	609a      	str	r2, [r3, #8]

    result->quantization = {kTfLiteAffineQuantization, quantization};
 800cdf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cdf2:	2201      	movs	r2, #1
 800cdf4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800cdf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cdfa:	69fa      	ldr	r2, [r7, #28]
 800cdfc:	635a      	str	r2, [r3, #52]	; 0x34
  }
  return kTfLiteOk;
 800cdfe:	2300      	movs	r3, #0
}
 800ce00:	4618      	mov	r0, r3
 800ce02:	3734      	adds	r7, #52	; 0x34
 800ce04:	46bd      	mov	sp, r7
 800ce06:	bd90      	pop	{r4, r7, pc}
 800ce08:	0802c960 	.word	0x0802c960
 800ce0c:	08027c88 	.word	0x08027c88
 800ce10:	08027cb8 	.word	0x08027cb8

0800ce14 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor>:

TfLiteStatus InitializeTfLiteEvalTensorFromFlatbuffer(
    SimpleMemoryAllocator* allocator, const tflite::Tensor& flatbuffer_tensor,
    const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers,
    ErrorReporter* error_reporter, TfLiteEvalTensor* result) {
 800ce14:	b580      	push	{r7, lr}
 800ce16:	b086      	sub	sp, #24
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	60f8      	str	r0, [r7, #12]
 800ce1c:	60b9      	str	r1, [r7, #8]
 800ce1e:	607a      	str	r2, [r7, #4]
 800ce20:	603b      	str	r3, [r7, #0]
  *result = {};
 800ce22:	6a3b      	ldr	r3, [r7, #32]
 800ce24:	461a      	mov	r2, r3
 800ce26:	2300      	movs	r3, #0
 800ce28:	6013      	str	r3, [r2, #0]
 800ce2a:	6053      	str	r3, [r2, #4]
 800ce2c:	6093      	str	r3, [r2, #8]
  // Make sure the serialized type is one we know how to deal with, and convert
  // it from a flatbuffer enum into a constant used by the kernel C API.
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
 800ce2e:	68b8      	ldr	r0, [r7, #8]
 800ce30:	f7fe fff2 	bl	800be18 <_ZNK6tflite6Tensor4typeEv>
 800ce34:	4603      	mov	r3, r0
 800ce36:	4618      	mov	r0, r3
 800ce38:	6a3b      	ldr	r3, [r7, #32]
 800ce3a:	3308      	adds	r3, #8
 800ce3c:	683a      	ldr	r2, [r7, #0]
 800ce3e:	4619      	mov	r1, r3
 800ce40:	f7fb ff88 	bl	8008d54 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
 800ce44:	4603      	mov	r3, r0
 800ce46:	75fb      	strb	r3, [r7, #23]
 800ce48:	7dfb      	ldrb	r3, [r7, #23]
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d001      	beq.n	800ce52 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x3e>
 800ce4e:	7dfb      	ldrb	r3, [r7, #23]
 800ce50:	e027      	b.n	800cea2 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x8e>
                                          &result->type, error_reporter));

  result->data.data = GetFlatbufferTensorBuffer(flatbuffer_tensor, buffers);
 800ce52:	6879      	ldr	r1, [r7, #4]
 800ce54:	68b8      	ldr	r0, [r7, #8]
 800ce56:	f7ff fe55 	bl	800cb04 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>
 800ce5a:	4602      	mov	r2, r0
 800ce5c:	6a3b      	ldr	r3, [r7, #32]
 800ce5e:	601a      	str	r2, [r3, #0]

  if (flatbuffer_tensor.shape() == nullptr) {
 800ce60:	68b8      	ldr	r0, [r7, #8]
 800ce62:	f7fe ffcb 	bl	800bdfc <_ZNK6tflite6Tensor5shapeEv>
 800ce66:	4603      	mov	r3, r0
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	bf0c      	ite	eq
 800ce6c:	2301      	moveq	r3, #1
 800ce6e:	2300      	movne	r3, #0
 800ce70:	b2db      	uxtb	r3, r3
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d003      	beq.n	800ce7e <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x6a>
    // flatbuffer_tensor.shape() can return a nullptr in the case of a scalar
    // tensor.
    result->dims = const_cast<TfLiteIntArray*>(&kZeroLengthIntArray);
 800ce76:	6a3b      	ldr	r3, [r7, #32]
 800ce78:	4a0c      	ldr	r2, [pc, #48]	; (800ceac <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x98>)
 800ce7a:	605a      	str	r2, [r3, #4]
 800ce7c:	e010      	b.n	800cea0 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x8c>
  } else {
    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
 800ce7e:	68b8      	ldr	r0, [r7, #8]
 800ce80:	f7fe ffbc 	bl	800bdfc <_ZNK6tflite6Tensor5shapeEv>
 800ce84:	4602      	mov	r2, r0
 800ce86:	6a3b      	ldr	r3, [r7, #32]
 800ce88:	3304      	adds	r3, #4
 800ce8a:	6839      	ldr	r1, [r7, #0]
 800ce8c:	68f8      	ldr	r0, [r7, #12]
 800ce8e:	f001 f8c7 	bl	800e020 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
 800ce92:	4603      	mov	r3, r0
 800ce94:	75bb      	strb	r3, [r7, #22]
 800ce96:	7dbb      	ldrb	r3, [r7, #22]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d001      	beq.n	800cea0 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x8c>
 800ce9c:	7dbb      	ldrb	r3, [r7, #22]
 800ce9e:	e000      	b.n	800cea2 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x8e>
        allocator, error_reporter, flatbuffer_tensor.shape(), &(result->dims)));
  }
  return kTfLiteOk;
 800cea0:	2300      	movs	r3, #0
}
 800cea2:	4618      	mov	r0, r3
 800cea4:	3718      	adds	r7, #24
 800cea6:	46bd      	mov	sp, r7
 800cea8:	bd80      	pop	{r7, pc}
 800ceaa:	bf00      	nop
 800ceac:	0802c960 	.word	0x0802c960

0800ceb0 <_ZN6tflite14MicroAllocatorC1EPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>:

}  // namespace internal

MicroAllocator::MicroAllocator(SimpleMemoryAllocator* memory_allocator,
 800ceb0:	b480      	push	{r7}
 800ceb2:	b085      	sub	sp, #20
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	60f8      	str	r0, [r7, #12]
 800ceb8:	60b9      	str	r1, [r7, #8]
 800ceba:	607a      	str	r2, [r7, #4]
                               ErrorReporter* error_reporter)
    : memory_allocator_(memory_allocator),
      error_reporter_(error_reporter),
      model_is_allocating_(false) {}
 800cebc:	4a0c      	ldr	r2, [pc, #48]	; (800cef0 <_ZN6tflite14MicroAllocatorC1EPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x40>)
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	601a      	str	r2, [r3, #0]
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	68ba      	ldr	r2, [r7, #8]
 800cec6:	605a      	str	r2, [r3, #4]
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	687a      	ldr	r2, [r7, #4]
 800cecc:	60da      	str	r2, [r3, #12]
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	2200      	movs	r2, #0
 800ced2:	741a      	strb	r2, [r3, #16]
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	2200      	movs	r2, #0
 800ced8:	615a      	str	r2, [r3, #20]
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	2200      	movs	r2, #0
 800cede:	619a      	str	r2, [r3, #24]
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	4618      	mov	r0, r3
 800cee4:	3714      	adds	r7, #20
 800cee6:	46bd      	mov	sp, r7
 800cee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceec:	4770      	bx	lr
 800ceee:	bf00      	nop
 800cef0:	0802c984 	.word	0x0802c984

0800cef4 <_ZN6tflite14MicroAllocatorD1Ev>:

MicroAllocator::~MicroAllocator() {}
 800cef4:	b480      	push	{r7}
 800cef6:	b083      	sub	sp, #12
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	6078      	str	r0, [r7, #4]
 800cefc:	4a04      	ldr	r2, [pc, #16]	; (800cf10 <_ZN6tflite14MicroAllocatorD1Ev+0x1c>)
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	601a      	str	r2, [r3, #0]
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	4618      	mov	r0, r3
 800cf06:	370c      	adds	r7, #12
 800cf08:	46bd      	mov	sp, r7
 800cf0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf0e:	4770      	bx	lr
 800cf10:	0802c984 	.word	0x0802c984

0800cf14 <_ZN6tflite14MicroAllocatorD0Ev>:
 800cf14:	b580      	push	{r7, lr}
 800cf16:	b082      	sub	sp, #8
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	6078      	str	r0, [r7, #4]
 800cf1c:	6878      	ldr	r0, [r7, #4]
 800cf1e:	f7ff ffe9 	bl	800cef4 <_ZN6tflite14MicroAllocatorD1Ev>
 800cf22:	211c      	movs	r1, #28
 800cf24:	6878      	ldr	r0, [r7, #4]
 800cf26:	f018 fb08 	bl	802553a <_ZdlPvj>
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	3708      	adds	r7, #8
 800cf30:	46bd      	mov	sp, r7
 800cf32:	bd80      	pop	{r7, pc}

0800cf34 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE>:

MicroAllocator* MicroAllocator::Create(uint8_t* tensor_arena, size_t arena_size,
                                       ErrorReporter* error_reporter) {
 800cf34:	b580      	push	{r7, lr}
 800cf36:	b086      	sub	sp, #24
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	60f8      	str	r0, [r7, #12]
 800cf3c:	60b9      	str	r1, [r7, #8]
 800cf3e:	607a      	str	r2, [r7, #4]
  uint8_t* aligned_arena = AlignPointerUp(tensor_arena, kBufferAlignment);
 800cf40:	2110      	movs	r1, #16
 800cf42:	68f8      	ldr	r0, [r7, #12]
 800cf44:	f7ff f831 	bl	800bfaa <_ZN6tflite14AlignPointerUpEPhj>
 800cf48:	6178      	str	r0, [r7, #20]
  size_t aligned_arena_size = tensor_arena + arena_size - aligned_arena;
 800cf4a:	68fa      	ldr	r2, [r7, #12]
 800cf4c:	68bb      	ldr	r3, [r7, #8]
 800cf4e:	441a      	add	r2, r3
 800cf50:	697b      	ldr	r3, [r7, #20]
 800cf52:	1ad3      	subs	r3, r2, r3
 800cf54:	613b      	str	r3, [r7, #16]
  return Create(SimpleMemoryAllocator::Create(error_reporter, aligned_arena,
 800cf56:	693a      	ldr	r2, [r7, #16]
 800cf58:	6979      	ldr	r1, [r7, #20]
 800cf5a:	6878      	ldr	r0, [r7, #4]
 800cf5c:	f003 f952 	bl	8010204 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj>
 800cf60:	4603      	mov	r3, r0
 800cf62:	6879      	ldr	r1, [r7, #4]
 800cf64:	4618      	mov	r0, r3
 800cf66:	f000 f805 	bl	800cf74 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>
 800cf6a:	4603      	mov	r3, r0
                                              aligned_arena_size),
                error_reporter);
}
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	3718      	adds	r7, #24
 800cf70:	46bd      	mov	sp, r7
 800cf72:	bd80      	pop	{r7, pc}

0800cf74 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>:

MicroAllocator* MicroAllocator::Create(SimpleMemoryAllocator* memory_allocator,
                                       ErrorReporter* error_reporter) {
 800cf74:	b590      	push	{r4, r7, lr}
 800cf76:	b085      	sub	sp, #20
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	6078      	str	r0, [r7, #4]
 800cf7c:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(memory_allocator != nullptr);
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d101      	bne.n	800cf88 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x14>
 800cf84:	f018 fd5f 	bl	8025a46 <abort>
  TFLITE_DCHECK(error_reporter != nullptr);
 800cf88:	683b      	ldr	r3, [r7, #0]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d101      	bne.n	800cf92 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x1e>
 800cf8e:	f018 fd5a 	bl	8025a46 <abort>

  uint8_t* allocator_buffer = memory_allocator->AllocateFromTail(
      sizeof(MicroAllocator), alignof(MicroAllocator));
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	330c      	adds	r3, #12
 800cf98:	681b      	ldr	r3, [r3, #0]
  uint8_t* allocator_buffer = memory_allocator->AllocateFromTail(
 800cf9a:	2204      	movs	r2, #4
 800cf9c:	211c      	movs	r1, #28
 800cf9e:	6878      	ldr	r0, [r7, #4]
 800cfa0:	4798      	blx	r3
 800cfa2:	60f8      	str	r0, [r7, #12]
  MicroAllocator* allocator =
      new (allocator_buffer) MicroAllocator(memory_allocator, error_reporter);
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	4619      	mov	r1, r3
 800cfa8:	201c      	movs	r0, #28
 800cfaa:	f7fb fc00 	bl	80087ae <_ZnwjPv>
 800cfae:	4604      	mov	r4, r0
 800cfb0:	683a      	ldr	r2, [r7, #0]
 800cfb2:	6879      	ldr	r1, [r7, #4]
 800cfb4:	4620      	mov	r0, r4
 800cfb6:	f7ff ff7b 	bl	800ceb0 <_ZN6tflite14MicroAllocatorC1EPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>
 800cfba:	60bc      	str	r4, [r7, #8]
  return allocator;
 800cfbc:	68bb      	ldr	r3, [r7, #8]
}
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	3714      	adds	r7, #20
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	bd90      	pop	{r4, r7, pc}
	...

0800cfc8 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE>:

SubgraphAllocations* MicroAllocator::StartModelAllocation(const Model* model) {
 800cfc8:	b5b0      	push	{r4, r5, r7, lr}
 800cfca:	b084      	sub	sp, #16
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	6078      	str	r0, [r7, #4]
 800cfd0:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(model != nullptr);
 800cfd2:	683b      	ldr	r3, [r7, #0]
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d101      	bne.n	800cfdc <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x14>
 800cfd8:	f018 fd35 	bl	8025a46 <abort>

  if (model_is_allocating_) {
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	7c1b      	ldrb	r3, [r3, #16]
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d007      	beq.n	800cff4 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	68db      	ldr	r3, [r3, #12]
 800cfe8:	4936      	ldr	r1, [pc, #216]	; (800d0c4 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xfc>)
 800cfea:	4618      	mov	r0, r3
 800cfec:	f7fb fbac 	bl	8008748 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "MicroAllocator: Model allocation started before "
                         "finishing previously allocated model");
    return nullptr;
 800cff0:	2300      	movs	r3, #0
 800cff2:	e063      	b.n	800d0bc <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xf4>
  }

  model_is_allocating_ = true;
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	2201      	movs	r2, #1
 800cff8:	741a      	strb	r2, [r3, #16]

  uint8_t* data_allocator_buffer = memory_allocator_->AllocateFromTail(
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	6858      	ldr	r0, [r3, #4]
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	685b      	ldr	r3, [r3, #4]
      sizeof(MicroBuiltinDataAllocator), alignof(MicroBuiltinDataAllocator));
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	330c      	adds	r3, #12
 800d006:	681b      	ldr	r3, [r3, #0]
  uint8_t* data_allocator_buffer = memory_allocator_->AllocateFromTail(
 800d008:	2204      	movs	r2, #4
 800d00a:	2108      	movs	r1, #8
 800d00c:	4798      	blx	r3
 800d00e:	60f8      	str	r0, [r7, #12]
  builtin_data_allocator_ =
 800d010:	68fb      	ldr	r3, [r7, #12]
      new (data_allocator_buffer) MicroBuiltinDataAllocator(memory_allocator_);
 800d012:	4619      	mov	r1, r3
 800d014:	2008      	movs	r0, #8
 800d016:	f7fb fbca 	bl	80087ae <_ZnwjPv>
 800d01a:	4604      	mov	r4, r0
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	685b      	ldr	r3, [r3, #4]
 800d020:	4619      	mov	r1, r3
 800d022:	4620      	mov	r0, r4
 800d024:	f7ff fa56 	bl	800c4d4 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorC1EPNS_21SimpleMemoryAllocatorE>
  builtin_data_allocator_ =
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	609c      	str	r4, [r3, #8]

  if (InitScratchBufferData() != kTfLiteOk) {
 800d02c:	6878      	ldr	r0, [r7, #4]
 800d02e:	f000 fd53 	bl	800dad8 <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv>
 800d032:	4603      	mov	r3, r0
 800d034:	2b00      	cmp	r3, #0
 800d036:	bf14      	ite	ne
 800d038:	2301      	movne	r3, #1
 800d03a:	2300      	moveq	r3, #0
 800d03c:	b2db      	uxtb	r3, r3
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d001      	beq.n	800d046 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x7e>
    return nullptr;
 800d042:	2300      	movs	r3, #0
 800d044:	e03a      	b.n	800d0bc <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xf4>
  }

  // Allocate struct to store eval tensors, nodes and registrations.
  SubgraphAllocations* output = reinterpret_cast<SubgraphAllocations*>(
      memory_allocator_->AllocateFromTail(
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	685d      	ldr	r5, [r3, #4]
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	685b      	ldr	r3, [r3, #4]
          sizeof(SubgraphAllocations) * model->subgraphs()->size(),
          alignof(SubgraphAllocations)));
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	330c      	adds	r3, #12
 800d052:	681c      	ldr	r4, [r3, #0]
          sizeof(SubgraphAllocations) * model->subgraphs()->size(),
 800d054:	6838      	ldr	r0, [r7, #0]
 800d056:	f7ff f9e3 	bl	800c420 <_ZNK6tflite5Model9subgraphsEv>
 800d05a:	4603      	mov	r3, r0
 800d05c:	4618      	mov	r0, r3
 800d05e:	f000 ff1b 	bl	800de98 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 800d062:	4603      	mov	r3, r0
 800d064:	00db      	lsls	r3, r3, #3
      memory_allocator_->AllocateFromTail(
 800d066:	2204      	movs	r2, #4
 800d068:	4619      	mov	r1, r3
 800d06a:	4628      	mov	r0, r5
 800d06c:	47a0      	blx	r4
 800d06e:	60b8      	str	r0, [r7, #8]
  if (output == nullptr) {
 800d070:	68bb      	ldr	r3, [r7, #8]
 800d072:	2b00      	cmp	r3, #0
 800d074:	d104      	bne.n	800d080 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xb8>
    MicroPrintf("Failed to allocate memory for model metadata.");
 800d076:	4814      	ldr	r0, [pc, #80]	; (800d0c8 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x100>)
 800d078:	f001 faa6 	bl	800e5c8 <_Z11MicroPrintfPKcz>
    return nullptr;
 800d07c:	2300      	movs	r3, #0
 800d07e:	e01d      	b.n	800d0bc <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xf4>
  }

  if (AllocateTfLiteEvalTensors(model, output) != kTfLiteOk ||
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	331c      	adds	r3, #28
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	68ba      	ldr	r2, [r7, #8]
 800d08a:	6839      	ldr	r1, [r7, #0]
 800d08c:	6878      	ldr	r0, [r7, #4]
 800d08e:	4798      	blx	r3
 800d090:	4603      	mov	r3, r0
 800d092:	2b00      	cmp	r3, #0
 800d094:	d10a      	bne.n	800d0ac <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xe4>
      AllocateNodeAndRegistrations(model, output) != kTfLiteOk) {
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	3318      	adds	r3, #24
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	68ba      	ldr	r2, [r7, #8]
 800d0a0:	6839      	ldr	r1, [r7, #0]
 800d0a2:	6878      	ldr	r0, [r7, #4]
 800d0a4:	4798      	blx	r3
 800d0a6:	4603      	mov	r3, r0
  if (AllocateTfLiteEvalTensors(model, output) != kTfLiteOk ||
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d001      	beq.n	800d0b0 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xe8>
 800d0ac:	2301      	movs	r3, #1
 800d0ae:	e000      	b.n	800d0b2 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xea>
 800d0b0:	2300      	movs	r3, #0
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d001      	beq.n	800d0ba <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xf2>
    return nullptr;
 800d0b6:	2300      	movs	r3, #0
 800d0b8:	e000      	b.n	800d0bc <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xf4>
  }
  return output;
 800d0ba:	68bb      	ldr	r3, [r7, #8]
}
 800d0bc:	4618      	mov	r0, r3
 800d0be:	3710      	adds	r7, #16
 800d0c0:	46bd      	mov	sp, r7
 800d0c2:	bdb0      	pop	{r4, r5, r7, pc}
 800d0c4:	08027ce8 	.word	0x08027ce8
 800d0c8:	08027d40 	.word	0x08027d40

0800d0cc <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE>:

TfLiteStatus MicroAllocator::FinishModelAllocation(
    const Model* model, SubgraphAllocations* subgraph_allocations,
    ScratchBufferHandle** scratch_buffer_handles) {
 800d0cc:	b590      	push	{r4, r7, lr}
 800d0ce:	b08b      	sub	sp, #44	; 0x2c
 800d0d0:	af02      	add	r7, sp, #8
 800d0d2:	60f8      	str	r0, [r7, #12]
 800d0d4:	60b9      	str	r1, [r7, #8]
 800d0d6:	607a      	str	r2, [r7, #4]
 800d0d8:	603b      	str	r3, [r7, #0]
  if (!model_is_allocating_) {
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	7c1b      	ldrb	r3, [r3, #16]
 800d0de:	f083 0301 	eor.w	r3, r3, #1
 800d0e2:	b2db      	uxtb	r3, r3
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d007      	beq.n	800d0f8 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	68db      	ldr	r3, [r3, #12]
 800d0ec:	4936      	ldr	r1, [pc, #216]	; (800d1c8 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xfc>)
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	f7fb fb2a 	bl	8008748 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "MicroAllocator: Model allocation finished before "
                         "starting allocating model");
    return kTfLiteError;
 800d0f4:	2301      	movs	r3, #1
 800d0f6:	e062      	b.n	800d1be <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xf2>
  }

  // TODO(b/187993197): Track scratch buffers for each subgraph.
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 800d0f8:	2300      	movs	r3, #0
 800d0fa:	61fb      	str	r3, [r7, #28]
 800d0fc:	68b8      	ldr	r0, [r7, #8]
 800d0fe:	f7ff f98f 	bl	800c420 <_ZNK6tflite5Model9subgraphsEv>
 800d102:	4603      	mov	r3, r0
 800d104:	4618      	mov	r0, r3
 800d106:	f000 fec7 	bl	800de98 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 800d10a:	4602      	mov	r2, r0
 800d10c:	69fb      	ldr	r3, [r7, #28]
 800d10e:	4293      	cmp	r3, r2
 800d110:	bf34      	ite	cc
 800d112:	2301      	movcc	r3, #1
 800d114:	2300      	movcs	r3, #0
 800d116:	b2db      	uxtb	r3, r3
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d04c      	beq.n	800d1b6 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xea>
       subgraph_idx++) {
    const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
 800d11c:	68b8      	ldr	r0, [r7, #8]
 800d11e:	f7ff f97f 	bl	800c420 <_ZNK6tflite5Model9subgraphsEv>
 800d122:	4603      	mov	r3, r0
 800d124:	69f9      	ldr	r1, [r7, #28]
 800d126:	4618      	mov	r0, r3
 800d128:	f000 fec4 	bl	800deb4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800d12c:	61b8      	str	r0, [r7, #24]
    TFLITE_DCHECK(subgraph != nullptr);
 800d12e:	69bb      	ldr	r3, [r7, #24]
 800d130:	2b00      	cmp	r3, #0
 800d132:	d101      	bne.n	800d138 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x6c>
 800d134:	f018 fc87 	bl	8025a46 <abort>

    TF_LITE_ENSURE_STATUS(AllocateScratchBufferHandles(
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	3330      	adds	r3, #48	; 0x30
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	68fa      	ldr	r2, [r7, #12]
 800d142:	6952      	ldr	r2, [r2, #20]
 800d144:	6839      	ldr	r1, [r7, #0]
 800d146:	68f8      	ldr	r0, [r7, #12]
 800d148:	4798      	blx	r3
 800d14a:	4603      	mov	r3, r0
 800d14c:	75fb      	strb	r3, [r7, #23]
 800d14e:	7dfb      	ldrb	r3, [r7, #23]
 800d150:	2b00      	cmp	r3, #0
 800d152:	d001      	beq.n	800d158 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x8c>
 800d154:	7dfb      	ldrb	r3, [r7, #23]
 800d156:	e032      	b.n	800d1be <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xf2>
        scratch_buffer_handles, scratch_buffer_request_count_));
    TF_LITE_ENSURE_STATUS(CommitStaticMemoryPlan(
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	332c      	adds	r3, #44	; 0x2c
 800d15e:	681c      	ldr	r4, [r3, #0]
 800d160:	69fb      	ldr	r3, [r7, #28]
 800d162:	00db      	lsls	r3, r3, #3
 800d164:	687a      	ldr	r2, [r7, #4]
 800d166:	4413      	add	r3, r2
 800d168:	685a      	ldr	r2, [r3, #4]
 800d16a:	683b      	ldr	r3, [r7, #0]
 800d16c:	6819      	ldr	r1, [r3, #0]
 800d16e:	69fb      	ldr	r3, [r7, #28]
 800d170:	9300      	str	r3, [sp, #0]
 800d172:	460b      	mov	r3, r1
 800d174:	68b9      	ldr	r1, [r7, #8]
 800d176:	68f8      	ldr	r0, [r7, #12]
 800d178:	47a0      	blx	r4
 800d17a:	4603      	mov	r3, r0
 800d17c:	75bb      	strb	r3, [r7, #22]
 800d17e:	7dbb      	ldrb	r3, [r7, #22]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d001      	beq.n	800d188 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xbc>
 800d184:	7dbb      	ldrb	r3, [r7, #22]
 800d186:	e01a      	b.n	800d1be <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xf2>
        model, subgraph_allocations[subgraph_idx].tensors,
        *scratch_buffer_handles, subgraph_idx));
    TF_LITE_ENSURE_STATUS(AllocateVariables(
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	3320      	adds	r3, #32
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	69fa      	ldr	r2, [r7, #28]
 800d192:	00d2      	lsls	r2, r2, #3
 800d194:	6879      	ldr	r1, [r7, #4]
 800d196:	440a      	add	r2, r1
 800d198:	6852      	ldr	r2, [r2, #4]
 800d19a:	69b9      	ldr	r1, [r7, #24]
 800d19c:	68f8      	ldr	r0, [r7, #12]
 800d19e:	4798      	blx	r3
 800d1a0:	4603      	mov	r3, r0
 800d1a2:	757b      	strb	r3, [r7, #21]
 800d1a4:	7d7b      	ldrb	r3, [r7, #21]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d001      	beq.n	800d1ae <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xe2>
 800d1aa:	7d7b      	ldrb	r3, [r7, #21]
 800d1ac:	e007      	b.n	800d1be <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xf2>
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 800d1ae:	69fb      	ldr	r3, [r7, #28]
 800d1b0:	3301      	adds	r3, #1
 800d1b2:	61fb      	str	r3, [r7, #28]
 800d1b4:	e7a2      	b.n	800d0fc <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x30>
        subgraph, subgraph_allocations[subgraph_idx].tensors));
  }
  model_is_allocating_ = false;
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	2200      	movs	r2, #0
 800d1ba:	741a      	strb	r2, [r3, #16]
  return kTfLiteOk;
 800d1bc:	2300      	movs	r3, #0
}
 800d1be:	4618      	mov	r0, r3
 800d1c0:	3724      	adds	r7, #36	; 0x24
 800d1c2:	46bd      	mov	sp, r7
 800d1c4:	bd90      	pop	{r4, r7, pc}
 800d1c6:	bf00      	nop
 800d1c8:	08027d70 	.word	0x08027d70

0800d1cc <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEj>:

void* MicroAllocator::AllocatePersistentBuffer(size_t bytes) {
 800d1cc:	b580      	push	{r7, lr}
 800d1ce:	b082      	sub	sp, #8
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	6078      	str	r0, [r7, #4]
 800d1d4:	6039      	str	r1, [r7, #0]
  return memory_allocator_->AllocateFromTail(bytes, kBufferAlignment);
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	6858      	ldr	r0, [r3, #4]
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	685b      	ldr	r3, [r3, #4]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	330c      	adds	r3, #12
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	2210      	movs	r2, #16
 800d1e6:	6839      	ldr	r1, [r7, #0]
 800d1e8:	4798      	blx	r3
 800d1ea:	4603      	mov	r3, r0
}
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	3708      	adds	r7, #8
 800d1f0:	46bd      	mov	sp, r7
 800d1f2:	bd80      	pop	{r7, pc}

0800d1f4 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi>:

TfLiteStatus MicroAllocator::RequestScratchBufferInArena(size_t bytes,
                                                         int subgraph_idx,
                                                         int* buffer_idx) {
 800d1f4:	b580      	push	{r7, lr}
 800d1f6:	b088      	sub	sp, #32
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	60f8      	str	r0, [r7, #12]
 800d1fc:	60b9      	str	r1, [r7, #8]
 800d1fe:	607a      	str	r2, [r7, #4]
 800d200:	603b      	str	r3, [r7, #0]
  // All scratch buffer requests are stored in the head section of the arena
  // when a model is in the prepare phase. First align a scratch buffer request
  // pointer to the start of the head:
  internal::ScratchBufferRequest* requests = GetScratchBufferRequests();
 800d202:	68f8      	ldr	r0, [r7, #12]
 800d204:	f000 fc85 	bl	800db12 <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
 800d208:	6178      	str	r0, [r7, #20]

  // Count the number of requested scratch buffers for the current node:
  size_t current_node_request_count = 0;
 800d20a:	2300      	movs	r3, #0
 800d20c:	61fb      	str	r3, [r7, #28]
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 800d20e:	2300      	movs	r3, #0
 800d210:	61bb      	str	r3, [r7, #24]
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	695b      	ldr	r3, [r3, #20]
 800d216:	69ba      	ldr	r2, [r7, #24]
 800d218:	429a      	cmp	r2, r3
 800d21a:	d20e      	bcs.n	800d23a <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x46>
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
 800d21c:	69bb      	ldr	r3, [r7, #24]
 800d21e:	00db      	lsls	r3, r3, #3
 800d220:	697a      	ldr	r2, [r7, #20]
 800d222:	4413      	add	r3, r2
 800d224:	685b      	ldr	r3, [r3, #4]
 800d226:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d22a:	d102      	bne.n	800d232 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x3e>
      ++current_node_request_count;
 800d22c:	69fb      	ldr	r3, [r7, #28]
 800d22e:	3301      	adds	r3, #1
 800d230:	61fb      	str	r3, [r7, #28]
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 800d232:	69bb      	ldr	r3, [r7, #24]
 800d234:	3301      	adds	r3, #1
 800d236:	61bb      	str	r3, [r7, #24]
 800d238:	e7eb      	b.n	800d212 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x1e>
    }
  }

  // First, ensure that the per-kernel request has not exceeded the limit:
  if (current_node_request_count >= kMaxScratchBuffersPerOp) {
 800d23a:	69fb      	ldr	r3, [r7, #28]
 800d23c:	2b0b      	cmp	r3, #11
 800d23e:	d908      	bls.n	800d252 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x5e>
    TF_LITE_REPORT_ERROR(
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	68db      	ldr	r3, [r3, #12]
 800d244:	220c      	movs	r2, #12
 800d246:	4913      	ldr	r1, [pc, #76]	; (800d294 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0xa0>)
 800d248:	4618      	mov	r0, r3
 800d24a:	f7fb fa7d 	bl	8008748 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Scratch buffer request exeeds limit per operator (%d)",
        kMaxScratchBuffersPerOp);
    return kTfLiteError;
 800d24e:	2301      	movs	r3, #1
 800d250:	e01c      	b.n	800d28c <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x98>
  }

  // Initialize and assign values for the request at the current index:
  internal::ScratchBufferRequest* current_request =
      &requests[scratch_buffer_request_count_];
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	695b      	ldr	r3, [r3, #20]
 800d256:	00db      	lsls	r3, r3, #3
  internal::ScratchBufferRequest* current_request =
 800d258:	697a      	ldr	r2, [r7, #20]
 800d25a:	4413      	add	r3, r2
 800d25c:	613b      	str	r3, [r7, #16]
  *current_request = {};
 800d25e:	693b      	ldr	r3, [r7, #16]
 800d260:	461a      	mov	r2, r3
 800d262:	2300      	movs	r3, #0
 800d264:	6013      	str	r3, [r2, #0]
 800d266:	6053      	str	r3, [r2, #4]
  // Assign -1 as a sentinel value that will be updated when the node finishes
  // allocating:
  current_request->bytes = bytes;
 800d268:	693b      	ldr	r3, [r7, #16]
 800d26a:	68ba      	ldr	r2, [r7, #8]
 800d26c:	601a      	str	r2, [r3, #0]
  current_request->node_idx = kUnassignedScratchBufferRequestIndex;
 800d26e:	693b      	ldr	r3, [r7, #16]
 800d270:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d274:	605a      	str	r2, [r3, #4]

  // Assign the current request index to the out-param:
  *buffer_idx = scratch_buffer_request_count_;
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	695b      	ldr	r3, [r3, #20]
 800d27a:	461a      	mov	r2, r3
 800d27c:	683b      	ldr	r3, [r7, #0]
 800d27e:	601a      	str	r2, [r3, #0]

  // Bump the request count to prepare for the next request:
  ++scratch_buffer_request_count_;
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	695b      	ldr	r3, [r3, #20]
 800d284:	1c5a      	adds	r2, r3, #1
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	615a      	str	r2, [r3, #20]
  return kTfLiteOk;
 800d28a:	2300      	movs	r3, #0
}
 800d28c:	4618      	mov	r0, r3
 800d28e:	3720      	adds	r7, #32
 800d290:	46bd      	mov	sp, r7
 800d292:	bd80      	pop	{r7, pc}
 800d294:	08027dbc 	.word	0x08027dbc

0800d298 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi>:

TfLiteStatus MicroAllocator::FinishPrepareNodeAllocations(int node_id) {
 800d298:	b580      	push	{r7, lr}
 800d29a:	b086      	sub	sp, #24
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	6078      	str	r0, [r7, #4]
 800d2a0:	6039      	str	r1, [r7, #0]
  // When a node has finished preparing, all temp allocations performed by the
  // kernel should be cleaned up:
  ResetTempAllocations();
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	3308      	adds	r3, #8
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	6878      	ldr	r0, [r7, #4]
 800d2ac:	4798      	blx	r3

  // Find and update any new scratch buffer requests for the current node:
  internal::ScratchBufferRequest* requests = GetScratchBufferRequests();
 800d2ae:	6878      	ldr	r0, [r7, #4]
 800d2b0:	f000 fc2f 	bl	800db12 <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
 800d2b4:	6138      	str	r0, [r7, #16]

  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 800d2b6:	2300      	movs	r3, #0
 800d2b8:	617b      	str	r3, [r7, #20]
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	695b      	ldr	r3, [r3, #20]
 800d2be:	697a      	ldr	r2, [r7, #20]
 800d2c0:	429a      	cmp	r2, r3
 800d2c2:	d211      	bcs.n	800d2e8 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x50>
    // A request with a node_idx of -1 is a sentinel value used to indicate this
    // was a new request for the current node. The allocator finally knows the
    // node index at this point. Assign the value and update the list of new
    // requests so the head section can be adjusted to allow for the next kernel
    // to allocate at most kMaxScratchBuffersPerOp requests:
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
 800d2c4:	697b      	ldr	r3, [r7, #20]
 800d2c6:	00db      	lsls	r3, r3, #3
 800d2c8:	693a      	ldr	r2, [r7, #16]
 800d2ca:	4413      	add	r3, r2
 800d2cc:	685b      	ldr	r3, [r3, #4]
 800d2ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d2d2:	d105      	bne.n	800d2e0 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x48>
      requests[i].node_idx = node_id;
 800d2d4:	697b      	ldr	r3, [r7, #20]
 800d2d6:	00db      	lsls	r3, r3, #3
 800d2d8:	693a      	ldr	r2, [r7, #16]
 800d2da:	4413      	add	r3, r2
 800d2dc:	683a      	ldr	r2, [r7, #0]
 800d2de:	605a      	str	r2, [r3, #4]
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 800d2e0:	697b      	ldr	r3, [r7, #20]
 800d2e2:	3301      	adds	r3, #1
 800d2e4:	617b      	str	r3, [r7, #20]
 800d2e6:	e7e8      	b.n	800d2ba <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x22>
    }
  }

  // Ensure that the head is re-adjusted to allow for another at-most
  // kMaxScratchBuffersPerOp scratch buffer requests in the next operator:
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	6858      	ldr	r0, [r3, #4]
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	685b      	ldr	r3, [r3, #4]
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	3308      	adds	r3, #8
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	687a      	ldr	r2, [r7, #4]
 800d2f8:	6952      	ldr	r2, [r2, #20]
 800d2fa:	320c      	adds	r2, #12
 800d2fc:	00d1      	lsls	r1, r2, #3
 800d2fe:	2204      	movs	r2, #4
 800d300:	4798      	blx	r3
 800d302:	4603      	mov	r3, r0
 800d304:	73fb      	strb	r3, [r7, #15]
 800d306:	7bfb      	ldrb	r3, [r7, #15]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d001      	beq.n	800d310 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x78>
 800d30c:	7bfb      	ldrb	r3, [r7, #15]
 800d30e:	e000      	b.n	800d312 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x7a>
      sizeof(internal::ScratchBufferRequest) *
          (scratch_buffer_request_count_ + kMaxScratchBuffersPerOp),
      alignof(internal::ScratchBufferRequest)));

  return kTfLiteOk;
 800d310:	2300      	movs	r3, #0
}
 800d312:	4618      	mov	r0, r3
 800d314:	3718      	adds	r7, #24
 800d316:	46bd      	mov	sp, r7
 800d318:	bd80      	pop	{r7, pc}
	...

0800d31c <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE>:
size_t MicroAllocator::used_bytes() const {
  return memory_allocator_->GetUsedBytes();
}

TfLiteStatus MicroAllocator::AllocateNodeAndRegistrations(
    const Model* model, SubgraphAllocations* subgraph_allocations) {
 800d31c:	b5b0      	push	{r4, r5, r7, lr}
 800d31e:	b088      	sub	sp, #32
 800d320:	af00      	add	r7, sp, #0
 800d322:	60f8      	str	r0, [r7, #12]
 800d324:	60b9      	str	r1, [r7, #8]
 800d326:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(subgraph_allocations != nullptr);
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d101      	bne.n	800d332 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x16>
 800d32e:	f018 fb8a 	bl	8025a46 <abort>

  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 800d332:	2300      	movs	r3, #0
 800d334:	61fb      	str	r3, [r7, #28]
 800d336:	68b8      	ldr	r0, [r7, #8]
 800d338:	f7ff f872 	bl	800c420 <_ZNK6tflite5Model9subgraphsEv>
 800d33c:	4603      	mov	r3, r0
 800d33e:	4618      	mov	r0, r3
 800d340:	f000 fdaa 	bl	800de98 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 800d344:	4602      	mov	r2, r0
 800d346:	69fb      	ldr	r3, [r7, #28]
 800d348:	4293      	cmp	r3, r2
 800d34a:	bf34      	ite	cc
 800d34c:	2301      	movcc	r3, #1
 800d34e:	2300      	movcs	r3, #0
 800d350:	b2db      	uxtb	r3, r3
 800d352:	2b00      	cmp	r3, #0
 800d354:	d039      	beq.n	800d3ca <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xae>
       subgraph_idx++) {
    const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
 800d356:	68b8      	ldr	r0, [r7, #8]
 800d358:	f7ff f862 	bl	800c420 <_ZNK6tflite5Model9subgraphsEv>
 800d35c:	4603      	mov	r3, r0
 800d35e:	69f9      	ldr	r1, [r7, #28]
 800d360:	4618      	mov	r0, r3
 800d362:	f000 fda7 	bl	800deb4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800d366:	61b8      	str	r0, [r7, #24]
    TFLITE_DCHECK(subgraph != nullptr);
 800d368:	69bb      	ldr	r3, [r7, #24]
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d101      	bne.n	800d372 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x56>
 800d36e:	f018 fb6a 	bl	8025a46 <abort>

    // Initialize NodeAndRegistrations for the subgraph.
    NodeAndRegistration* output = reinterpret_cast<NodeAndRegistration*>(
        memory_allocator_->AllocateFromTail(
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	685d      	ldr	r5, [r3, #4]
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	685b      	ldr	r3, [r3, #4]
            sizeof(NodeAndRegistration) * subgraph->operators()->size(),
            alignof(NodeAndRegistration)));
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	330c      	adds	r3, #12
 800d37e:	681c      	ldr	r4, [r3, #0]
            sizeof(NodeAndRegistration) * subgraph->operators()->size(),
 800d380:	69b8      	ldr	r0, [r7, #24]
 800d382:	f7ff f814 	bl	800c3ae <_ZNK6tflite8SubGraph9operatorsEv>
 800d386:	4603      	mov	r3, r0
 800d388:	4618      	mov	r0, r3
 800d38a:	f000 fd51 	bl	800de30 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 800d38e:	4603      	mov	r3, r0
 800d390:	222c      	movs	r2, #44	; 0x2c
 800d392:	fb02 f303 	mul.w	r3, r2, r3
        memory_allocator_->AllocateFromTail(
 800d396:	2204      	movs	r2, #4
 800d398:	4619      	mov	r1, r3
 800d39a:	4628      	mov	r0, r5
 800d39c:	47a0      	blx	r4
 800d39e:	6178      	str	r0, [r7, #20]
    if (output == nullptr) {
 800d3a0:	697b      	ldr	r3, [r7, #20]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d107      	bne.n	800d3b6 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x9a>
      TF_LITE_REPORT_ERROR(
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	68db      	ldr	r3, [r3, #12]
 800d3aa:	490a      	ldr	r1, [pc, #40]	; (800d3d4 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xb8>)
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	f7fb f9cb 	bl	8008748 <_ZN6tflite13ErrorReporter6ReportEPKcz>
          error_reporter_,
          "Failed to allocate memory for node_and_registrations.");
      return kTfLiteError;
 800d3b2:	2301      	movs	r3, #1
 800d3b4:	e00a      	b.n	800d3cc <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xb0>
    }
    subgraph_allocations[subgraph_idx].node_and_registrations = output;
 800d3b6:	69fb      	ldr	r3, [r7, #28]
 800d3b8:	00db      	lsls	r3, r3, #3
 800d3ba:	687a      	ldr	r2, [r7, #4]
 800d3bc:	4413      	add	r3, r2
 800d3be:	697a      	ldr	r2, [r7, #20]
 800d3c0:	601a      	str	r2, [r3, #0]
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 800d3c2:	69fb      	ldr	r3, [r7, #28]
 800d3c4:	3301      	adds	r3, #1
 800d3c6:	61fb      	str	r3, [r7, #28]
 800d3c8:	e7b5      	b.n	800d336 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1a>
  }
  return kTfLiteOk;
 800d3ca:	2300      	movs	r3, #0
}
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	3720      	adds	r7, #32
 800d3d0:	46bd      	mov	sp, r7
 800d3d2:	bdb0      	pop	{r4, r5, r7, pc}
 800d3d4:	08027df4 	.word	0x08027df4

0800d3d8 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii>:
TfLiteTensor* MicroAllocator::AllocatePersistentTfLiteTensor(
    const Model* model, const SubgraphAllocations* subgraph_allocations,
    int tensor_index, int subgraph_index) {
 800d3d8:	b590      	push	{r4, r7, lr}
 800d3da:	b089      	sub	sp, #36	; 0x24
 800d3dc:	af02      	add	r7, sp, #8
 800d3de:	60f8      	str	r0, [r7, #12]
 800d3e0:	60b9      	str	r1, [r7, #8]
 800d3e2:	607a      	str	r2, [r7, #4]
 800d3e4:	603b      	str	r3, [r7, #0]
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_index);
 800d3e6:	68b8      	ldr	r0, [r7, #8]
 800d3e8:	f7ff f81a 	bl	800c420 <_ZNK6tflite5Model9subgraphsEv>
 800d3ec:	4602      	mov	r2, r0
 800d3ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3f0:	4619      	mov	r1, r3
 800d3f2:	4610      	mov	r0, r2
 800d3f4:	f000 fd5e 	bl	800deb4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800d3f8:	6178      	str	r0, [r7, #20]
  TFLITE_DCHECK(subgraph != nullptr);
 800d3fa:	697b      	ldr	r3, [r7, #20]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d101      	bne.n	800d404 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x2c>
 800d400:	f018 fb21 	bl	8025a46 <abort>

  // This value is allocated from persistent arena space. It is guaranteed to be
  // around for the lifetime of the application.
  TfLiteTensor* tensor = AllocatePersistentTfLiteTensorInternal();
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	3324      	adds	r3, #36	; 0x24
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	68f8      	ldr	r0, [r7, #12]
 800d40e:	4798      	blx	r3
 800d410:	6138      	str	r0, [r7, #16]
  // Populate any fields from the flatbuffer, since this TfLiteTensor struct is
  // allocated in the persistent section of the arena, ensure that additional
  // allocations also take place in that section of the arena.
  if (PopulateTfLiteTensorFromFlatbuffer(
          model, tensor, tensor_index, subgraph_index,
          /*allocate_temp=*/false) != kTfLiteOk) {
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	3328      	adds	r3, #40	; 0x28
 800d418:	681c      	ldr	r4, [r3, #0]
  if (PopulateTfLiteTensorFromFlatbuffer(
 800d41a:	2300      	movs	r3, #0
 800d41c:	9301      	str	r3, [sp, #4]
 800d41e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d420:	9300      	str	r3, [sp, #0]
 800d422:	683b      	ldr	r3, [r7, #0]
 800d424:	693a      	ldr	r2, [r7, #16]
 800d426:	68b9      	ldr	r1, [r7, #8]
 800d428:	68f8      	ldr	r0, [r7, #12]
 800d42a:	47a0      	blx	r4
 800d42c:	4603      	mov	r3, r0
          /*allocate_temp=*/false) != kTfLiteOk) {
 800d42e:	2b00      	cmp	r3, #0
 800d430:	bf14      	ite	ne
 800d432:	2301      	movne	r3, #1
 800d434:	2300      	moveq	r3, #0
 800d436:	b2db      	uxtb	r3, r3
  if (PopulateTfLiteTensorFromFlatbuffer(
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d007      	beq.n	800d44c <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x74>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	68db      	ldr	r3, [r3, #12]
 800d440:	490d      	ldr	r1, [pc, #52]	; (800d478 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xa0>)
 800d442:	4618      	mov	r0, r3
 800d444:	f7fb f980 	bl	8008748 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed to populate a persistent TfLiteTensor struct "
                         "from flatbuffer data!");
    return nullptr;
 800d448:	2300      	movs	r3, #0
 800d44a:	e011      	b.n	800d470 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x98>
  }

  if (subgraph_allocations != nullptr) {
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d00d      	beq.n	800d46e <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x96>
    // Tensor buffers that are allocated at runtime (e.g. non-weight buffers)
    // and not located in the flatbuffer are stored on the pre-allocated list of
    // TfLiteEvalTensors structs. These structs are the source of truth, simply
    // point the corresponding buffer to the new TfLiteTensor data value.
    tensor->data.data =
        subgraph_allocations[subgraph_index].tensors[tensor_index].data.data;
 800d452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d454:	00db      	lsls	r3, r3, #3
 800d456:	687a      	ldr	r2, [r7, #4]
 800d458:	4413      	add	r3, r2
 800d45a:	6859      	ldr	r1, [r3, #4]
 800d45c:	683a      	ldr	r2, [r7, #0]
 800d45e:	4613      	mov	r3, r2
 800d460:	005b      	lsls	r3, r3, #1
 800d462:	4413      	add	r3, r2
 800d464:	009b      	lsls	r3, r3, #2
 800d466:	440b      	add	r3, r1
 800d468:	681a      	ldr	r2, [r3, #0]
    tensor->data.data =
 800d46a:	693b      	ldr	r3, [r7, #16]
 800d46c:	605a      	str	r2, [r3, #4]
  }
  return tensor;
 800d46e:	693b      	ldr	r3, [r7, #16]
}
 800d470:	4618      	mov	r0, r3
 800d472:	371c      	adds	r7, #28
 800d474:	46bd      	mov	sp, r7
 800d476:	bd90      	pop	{r4, r7, pc}
 800d478:	08027e2c 	.word	0x08027e2c

0800d47c <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii>:

TfLiteTensor* MicroAllocator::AllocateTempTfLiteTensor(
    const Model* model, const SubgraphAllocations* subgraph_allocations,
    int tensor_index, int subgraph_index) {
 800d47c:	b590      	push	{r4, r7, lr}
 800d47e:	b089      	sub	sp, #36	; 0x24
 800d480:	af02      	add	r7, sp, #8
 800d482:	60f8      	str	r0, [r7, #12]
 800d484:	60b9      	str	r1, [r7, #8]
 800d486:	607a      	str	r2, [r7, #4]
 800d488:	603b      	str	r3, [r7, #0]
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_index);
 800d48a:	68b8      	ldr	r0, [r7, #8]
 800d48c:	f7fe ffc8 	bl	800c420 <_ZNK6tflite5Model9subgraphsEv>
 800d490:	4602      	mov	r2, r0
 800d492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d494:	4619      	mov	r1, r3
 800d496:	4610      	mov	r0, r2
 800d498:	f000 fd0c 	bl	800deb4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800d49c:	6178      	str	r0, [r7, #20]
  TFLITE_DCHECK(subgraph != nullptr);
 800d49e:	697b      	ldr	r3, [r7, #20]
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d101      	bne.n	800d4a8 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x2c>
 800d4a4:	f018 facf 	bl	8025a46 <abort>

  // This value is allocated from temporary arena space. It is guaranteed to be
  // around for at least the scope of the calling function. Since this struct
  // allocation takes place in temp space, no need to own or cleanup.
  TfLiteTensor* tensor =
      reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateTemp(
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	6858      	ldr	r0, [r3, #4]
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	685b      	ldr	r3, [r3, #4]
          sizeof(TfLiteTensor), alignof(TfLiteTensor)));
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	3310      	adds	r3, #16
 800d4b4:	681b      	ldr	r3, [r3, #0]
      reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateTemp(
 800d4b6:	2204      	movs	r2, #4
 800d4b8:	2140      	movs	r1, #64	; 0x40
 800d4ba:	4798      	blx	r3
 800d4bc:	6138      	str	r0, [r7, #16]
  // Populate any fields from the flatbuffer, since this TfLiteTensor struct is
  // allocated in the temp section of the arena, ensure that additional
  // allocations also take place in that section of the arena.
  if (PopulateTfLiteTensorFromFlatbuffer(model, tensor, tensor_index,
                                         subgraph_index,
                                         /*allocate_temp=*/true) != kTfLiteOk) {
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	3328      	adds	r3, #40	; 0x28
 800d4c4:	681c      	ldr	r4, [r3, #0]
  if (PopulateTfLiteTensorFromFlatbuffer(model, tensor, tensor_index,
 800d4c6:	2301      	movs	r3, #1
 800d4c8:	9301      	str	r3, [sp, #4]
 800d4ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4cc:	9300      	str	r3, [sp, #0]
 800d4ce:	683b      	ldr	r3, [r7, #0]
 800d4d0:	693a      	ldr	r2, [r7, #16]
 800d4d2:	68b9      	ldr	r1, [r7, #8]
 800d4d4:	68f8      	ldr	r0, [r7, #12]
 800d4d6:	47a0      	blx	r4
 800d4d8:	4603      	mov	r3, r0
                                         /*allocate_temp=*/true) != kTfLiteOk) {
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	bf14      	ite	ne
 800d4de:	2301      	movne	r3, #1
 800d4e0:	2300      	moveq	r3, #0
 800d4e2:	b2db      	uxtb	r3, r3
  if (PopulateTfLiteTensorFromFlatbuffer(model, tensor, tensor_index,
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d007      	beq.n	800d4f8 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x7c>
    TF_LITE_REPORT_ERROR(
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	68db      	ldr	r3, [r3, #12]
 800d4ec:	490d      	ldr	r1, [pc, #52]	; (800d524 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xa8>)
 800d4ee:	4618      	mov	r0, r3
 800d4f0:	f7fb f92a 	bl	8008748 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to populate a temp TfLiteTensor struct from flatbuffer data!");
    return nullptr;
 800d4f4:	2300      	movs	r3, #0
 800d4f6:	e011      	b.n	800d51c <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xa0>
  }

  if (subgraph_allocations != nullptr) {
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d00d      	beq.n	800d51a <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x9e>
    // Tensor buffers that are allocated at runtime (e.g. non-weight buffers)
    // and not located in the flatbuffer are stored on the pre-allocated list of
    // TfLiteEvalTensors structs. These structs are the source of truth, simply
    // point the corresponding buffer to the new TfLiteTensor data value.
    tensor->data.data =
        subgraph_allocations[subgraph_index].tensors[tensor_index].data.data;
 800d4fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d500:	00db      	lsls	r3, r3, #3
 800d502:	687a      	ldr	r2, [r7, #4]
 800d504:	4413      	add	r3, r2
 800d506:	6859      	ldr	r1, [r3, #4]
 800d508:	683a      	ldr	r2, [r7, #0]
 800d50a:	4613      	mov	r3, r2
 800d50c:	005b      	lsls	r3, r3, #1
 800d50e:	4413      	add	r3, r2
 800d510:	009b      	lsls	r3, r3, #2
 800d512:	440b      	add	r3, r1
 800d514:	681a      	ldr	r2, [r3, #0]
    tensor->data.data =
 800d516:	693b      	ldr	r3, [r7, #16]
 800d518:	605a      	str	r2, [r3, #4]
  }
  return tensor;
 800d51a:	693b      	ldr	r3, [r7, #16]
}
 800d51c:	4618      	mov	r0, r3
 800d51e:	371c      	adds	r7, #28
 800d520:	46bd      	mov	sp, r7
 800d522:	bd90      	pop	{r4, r7, pc}
 800d524:	08027e78 	.word	0x08027e78

0800d528 <_ZN6tflite14MicroAllocator20ResetTempAllocationsEv>:

void MicroAllocator::ResetTempAllocations() {
 800d528:	b580      	push	{r7, lr}
 800d52a:	b082      	sub	sp, #8
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	6078      	str	r0, [r7, #4]
  memory_allocator_->ResetTempAllocations();
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	685a      	ldr	r2, [r3, #4]
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	685b      	ldr	r3, [r3, #4]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	3314      	adds	r3, #20
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	4610      	mov	r0, r2
 800d540:	4798      	blx	r3
}
 800d542:	bf00      	nop
 800d544:	3708      	adds	r7, #8
 800d546:	46bd      	mov	sp, r7
 800d548:	bd80      	pop	{r7, pc}
	...

0800d54c <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE>:

TfLiteStatus MicroAllocator::AllocateTfLiteEvalTensors(
    const Model* model, SubgraphAllocations* subgraph_allocations) {
 800d54c:	b5b0      	push	{r4, r5, r7, lr}
 800d54e:	b08c      	sub	sp, #48	; 0x30
 800d550:	af02      	add	r7, sp, #8
 800d552:	60f8      	str	r0, [r7, #12]
 800d554:	60b9      	str	r1, [r7, #8]
 800d556:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(subgraph_allocations != nullptr);
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d101      	bne.n	800d562 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x16>
 800d55e:	f018 fa72 	bl	8025a46 <abort>

  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 800d562:	2300      	movs	r3, #0
 800d564:	627b      	str	r3, [r7, #36]	; 0x24
 800d566:	68b8      	ldr	r0, [r7, #8]
 800d568:	f7fe ff5a 	bl	800c420 <_ZNK6tflite5Model9subgraphsEv>
 800d56c:	4603      	mov	r3, r0
 800d56e:	4618      	mov	r0, r3
 800d570:	f000 fc92 	bl	800de98 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 800d574:	4602      	mov	r2, r0
 800d576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d578:	4293      	cmp	r3, r2
 800d57a:	bf34      	ite	cc
 800d57c:	2301      	movcc	r3, #1
 800d57e:	2300      	movcs	r3, #0
 800d580:	b2db      	uxtb	r3, r3
 800d582:	2b00      	cmp	r3, #0
 800d584:	d076      	beq.n	800d674 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x128>
       subgraph_idx++) {
    const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
 800d586:	68b8      	ldr	r0, [r7, #8]
 800d588:	f7fe ff4a 	bl	800c420 <_ZNK6tflite5Model9subgraphsEv>
 800d58c:	4603      	mov	r3, r0
 800d58e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d590:	4618      	mov	r0, r3
 800d592:	f000 fc8f 	bl	800deb4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800d596:	61f8      	str	r0, [r7, #28]
    TFLITE_DCHECK(subgraph != nullptr);
 800d598:	69fb      	ldr	r3, [r7, #28]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d101      	bne.n	800d5a2 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x56>
 800d59e:	f018 fa52 	bl	8025a46 <abort>

    size_t alloc_count = subgraph->tensors()->size();
 800d5a2:	69f8      	ldr	r0, [r7, #28]
 800d5a4:	f7fe fed9 	bl	800c35a <_ZNK6tflite8SubGraph7tensorsEv>
 800d5a8:	4603      	mov	r3, r0
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	f000 fc0c 	bl	800ddc8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 800d5b0:	61b8      	str	r0, [r7, #24]
    TfLiteEvalTensor* tensors =
        reinterpret_cast<TfLiteEvalTensor*>(memory_allocator_->AllocateFromTail(
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	6858      	ldr	r0, [r3, #4]
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	685b      	ldr	r3, [r3, #4]
            sizeof(TfLiteEvalTensor) * alloc_count, alignof(TfLiteEvalTensor)));
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	330c      	adds	r3, #12
 800d5be:	681c      	ldr	r4, [r3, #0]
        reinterpret_cast<TfLiteEvalTensor*>(memory_allocator_->AllocateFromTail(
 800d5c0:	69ba      	ldr	r2, [r7, #24]
 800d5c2:	4613      	mov	r3, r2
 800d5c4:	005b      	lsls	r3, r3, #1
 800d5c6:	4413      	add	r3, r2
 800d5c8:	009b      	lsls	r3, r3, #2
 800d5ca:	2204      	movs	r2, #4
 800d5cc:	4619      	mov	r1, r3
 800d5ce:	47a0      	blx	r4
 800d5d0:	6178      	str	r0, [r7, #20]
    if (tensors == nullptr) {
 800d5d2:	697b      	ldr	r3, [r7, #20]
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d10c      	bne.n	800d5f2 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xa6>
      TF_LITE_REPORT_ERROR(
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	68d8      	ldr	r0, [r3, #12]
 800d5dc:	69ba      	ldr	r2, [r7, #24]
 800d5de:	4613      	mov	r3, r2
 800d5e0:	005b      	lsls	r3, r3, #1
 800d5e2:	4413      	add	r3, r2
 800d5e4:	009b      	lsls	r3, r3, #2
 800d5e6:	461a      	mov	r2, r3
 800d5e8:	4925      	ldr	r1, [pc, #148]	; (800d680 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x134>)
 800d5ea:	f7fb f8ad 	bl	8008748 <_ZN6tflite13ErrorReporter6ReportEPKcz>
          error_reporter_,
          "Failed to allocate memory for context->eval_tensors, "
          "%d bytes required",
          sizeof(TfLiteEvalTensor) * alloc_count);
      return kTfLiteError;
 800d5ee:	2301      	movs	r3, #1
 800d5f0:	e041      	b.n	800d676 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x12a>
    }

    for (size_t i = 0; i < alloc_count; ++i) {
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	623b      	str	r3, [r7, #32]
 800d5f6:	6a3a      	ldr	r2, [r7, #32]
 800d5f8:	69bb      	ldr	r3, [r7, #24]
 800d5fa:	429a      	cmp	r2, r3
 800d5fc:	d230      	bcs.n	800d660 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x114>
      TfLiteStatus status = internal::InitializeTfLiteEvalTensorFromFlatbuffer(
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	685c      	ldr	r4, [r3, #4]
          memory_allocator_, *subgraph->tensors()->Get(i), model->buffers(),
 800d602:	69f8      	ldr	r0, [r7, #28]
 800d604:	f7fe fea9 	bl	800c35a <_ZNK6tflite8SubGraph7tensorsEv>
 800d608:	4603      	mov	r3, r0
 800d60a:	6a39      	ldr	r1, [r7, #32]
 800d60c:	4618      	mov	r0, r3
 800d60e:	f000 fbe9 	bl	800dde4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 800d612:	4605      	mov	r5, r0
      TfLiteStatus status = internal::InitializeTfLiteEvalTensorFromFlatbuffer(
 800d614:	68b8      	ldr	r0, [r7, #8]
 800d616:	f7fe ff11 	bl	800c43c <_ZNK6tflite5Model7buffersEv>
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	68d9      	ldr	r1, [r3, #12]
          error_reporter_, &tensors[i]);
 800d61e:	6a3a      	ldr	r2, [r7, #32]
 800d620:	4613      	mov	r3, r2
 800d622:	005b      	lsls	r3, r3, #1
 800d624:	4413      	add	r3, r2
 800d626:	009b      	lsls	r3, r3, #2
 800d628:	461a      	mov	r2, r3
      TfLiteStatus status = internal::InitializeTfLiteEvalTensorFromFlatbuffer(
 800d62a:	697b      	ldr	r3, [r7, #20]
 800d62c:	4413      	add	r3, r2
 800d62e:	9300      	str	r3, [sp, #0]
 800d630:	460b      	mov	r3, r1
 800d632:	4602      	mov	r2, r0
 800d634:	4629      	mov	r1, r5
 800d636:	4620      	mov	r0, r4
 800d638:	f7ff fbec 	bl	800ce14 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor>
 800d63c:	4603      	mov	r3, r0
 800d63e:	74fb      	strb	r3, [r7, #19]
      if (status != kTfLiteOk) {
 800d640:	7cfb      	ldrb	r3, [r7, #19]
 800d642:	2b00      	cmp	r3, #0
 800d644:	d008      	beq.n	800d658 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x10c>
        TF_LITE_REPORT_ERROR(error_reporter_, "Failed to initialize tensor %d",
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	68db      	ldr	r3, [r3, #12]
 800d64a:	6a3a      	ldr	r2, [r7, #32]
 800d64c:	490d      	ldr	r1, [pc, #52]	; (800d684 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x138>)
 800d64e:	4618      	mov	r0, r3
 800d650:	f7fb f87a 	bl	8008748 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             i);
        return kTfLiteError;
 800d654:	2301      	movs	r3, #1
 800d656:	e00e      	b.n	800d676 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x12a>
    for (size_t i = 0; i < alloc_count; ++i) {
 800d658:	6a3b      	ldr	r3, [r7, #32]
 800d65a:	3301      	adds	r3, #1
 800d65c:	623b      	str	r3, [r7, #32]
 800d65e:	e7ca      	b.n	800d5f6 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xaa>
      }
    }
    subgraph_allocations[subgraph_idx].tensors = tensors;
 800d660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d662:	00db      	lsls	r3, r3, #3
 800d664:	687a      	ldr	r2, [r7, #4]
 800d666:	4413      	add	r3, r2
 800d668:	697a      	ldr	r2, [r7, #20]
 800d66a:	605a      	str	r2, [r3, #4]
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 800d66c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d66e:	3301      	adds	r3, #1
 800d670:	627b      	str	r3, [r7, #36]	; 0x24
 800d672:	e778      	b.n	800d566 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1a>
  }
  return kTfLiteOk;
 800d674:	2300      	movs	r3, #0
}
 800d676:	4618      	mov	r0, r3
 800d678:	3728      	adds	r7, #40	; 0x28
 800d67a:	46bd      	mov	sp, r7
 800d67c:	bdb0      	pop	{r4, r5, r7, pc}
 800d67e:	bf00      	nop
 800d680:	08027ebc 	.word	0x08027ebc
 800d684:	08027f04 	.word	0x08027f04

0800d688 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor>:
TfLiteStatus MicroAllocator::AllocateVariables(const SubGraph* subgraph,
                                               TfLiteEvalTensor* eval_tensors) {
 800d688:	b5b0      	push	{r4, r5, r7, lr}
 800d68a:	b088      	sub	sp, #32
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	60f8      	str	r0, [r7, #12]
 800d690:	60b9      	str	r1, [r7, #8]
 800d692:	607a      	str	r2, [r7, #4]
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 800d694:	2300      	movs	r3, #0
 800d696:	61fb      	str	r3, [r7, #28]
 800d698:	68b8      	ldr	r0, [r7, #8]
 800d69a:	f7fe fe5e 	bl	800c35a <_ZNK6tflite8SubGraph7tensorsEv>
 800d69e:	4603      	mov	r3, r0
 800d6a0:	4618      	mov	r0, r3
 800d6a2:	f000 fb91 	bl	800ddc8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 800d6a6:	4602      	mov	r2, r0
 800d6a8:	69fb      	ldr	r3, [r7, #28]
 800d6aa:	4293      	cmp	r3, r2
 800d6ac:	bf34      	ite	cc
 800d6ae:	2301      	movcc	r3, #1
 800d6b0:	2300      	movcs	r3, #0
 800d6b2:	b2db      	uxtb	r3, r3
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d04f      	beq.n	800d758 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xd0>
    auto* tensor = subgraph->tensors()->Get(i);
 800d6b8:	68b8      	ldr	r0, [r7, #8]
 800d6ba:	f7fe fe4e 	bl	800c35a <_ZNK6tflite8SubGraph7tensorsEv>
 800d6be:	4603      	mov	r3, r0
 800d6c0:	69f9      	ldr	r1, [r7, #28]
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	f000 fb8e 	bl	800dde4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 800d6c8:	61b8      	str	r0, [r7, #24]
    if (tensor->is_variable()) {
 800d6ca:	69b8      	ldr	r0, [r7, #24]
 800d6cc:	f7fe fe15 	bl	800c2fa <_ZNK6tflite6Tensor11is_variableEv>
 800d6d0:	4603      	mov	r3, r0
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d03c      	beq.n	800d750 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xc8>
      size_t buffer_size;
      TF_LITE_ENSURE_STATUS(
 800d6d6:	69fa      	ldr	r2, [r7, #28]
 800d6d8:	4613      	mov	r3, r2
 800d6da:	005b      	lsls	r3, r3, #1
 800d6dc:	4413      	add	r3, r2
 800d6de:	009b      	lsls	r3, r3, #2
 800d6e0:	461a      	mov	r2, r3
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	4413      	add	r3, r2
 800d6e6:	f107 0210 	add.w	r2, r7, #16
 800d6ea:	4611      	mov	r1, r2
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	f7fe fd70 	bl	800c1d2 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
 800d6f2:	4603      	mov	r3, r0
 800d6f4:	75fb      	strb	r3, [r7, #23]
 800d6f6:	7dfb      	ldrb	r3, [r7, #23]
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d001      	beq.n	800d700 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x78>
 800d6fc:	7dfb      	ldrb	r3, [r7, #23]
 800d6fe:	e02c      	b.n	800d75a <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xd2>
          TfLiteEvalTensorByteLength(&eval_tensors[i], &buffer_size));

      eval_tensors[i].data.data =
          memory_allocator_->AllocateFromTail(buffer_size, kBufferAlignment);
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	6858      	ldr	r0, [r3, #4]
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	685b      	ldr	r3, [r3, #4]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	330c      	adds	r3, #12
 800d70c:	681d      	ldr	r5, [r3, #0]
 800d70e:	6939      	ldr	r1, [r7, #16]
      eval_tensors[i].data.data =
 800d710:	69fa      	ldr	r2, [r7, #28]
 800d712:	4613      	mov	r3, r2
 800d714:	005b      	lsls	r3, r3, #1
 800d716:	4413      	add	r3, r2
 800d718:	009b      	lsls	r3, r3, #2
 800d71a:	461a      	mov	r2, r3
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	189c      	adds	r4, r3, r2
          memory_allocator_->AllocateFromTail(buffer_size, kBufferAlignment);
 800d720:	2210      	movs	r2, #16
 800d722:	47a8      	blx	r5
 800d724:	4603      	mov	r3, r0
      eval_tensors[i].data.data =
 800d726:	6023      	str	r3, [r4, #0]

      if (eval_tensors[i].data.data == nullptr) {
 800d728:	69fa      	ldr	r2, [r7, #28]
 800d72a:	4613      	mov	r3, r2
 800d72c:	005b      	lsls	r3, r3, #1
 800d72e:	4413      	add	r3, r2
 800d730:	009b      	lsls	r3, r3, #2
 800d732:	461a      	mov	r2, r3
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	4413      	add	r3, r2
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d108      	bne.n	800d750 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xc8>
        TF_LITE_REPORT_ERROR(error_reporter_,
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	68db      	ldr	r3, [r3, #12]
 800d742:	693a      	ldr	r2, [r7, #16]
 800d744:	4907      	ldr	r1, [pc, #28]	; (800d764 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xdc>)
 800d746:	4618      	mov	r0, r3
 800d748:	f7fa fffe 	bl	8008748 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Failed to allocate variable tensor of size %d",
                             buffer_size);
        return kTfLiteError;
 800d74c:	2301      	movs	r3, #1
 800d74e:	e004      	b.n	800d75a <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xd2>
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 800d750:	69fb      	ldr	r3, [r7, #28]
 800d752:	3301      	adds	r3, #1
 800d754:	61fb      	str	r3, [r7, #28]
 800d756:	e79f      	b.n	800d698 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x10>
      }
    }
  }
  return kTfLiteOk;
 800d758:	2300      	movs	r3, #0
}
 800d75a:	4618      	mov	r0, r3
 800d75c:	3720      	adds	r7, #32
 800d75e:	46bd      	mov	sp, r7
 800d760:	bdb0      	pop	{r4, r5, r7, pc}
 800d762:	bf00      	nop
 800d764:	08027f24 	.word	0x08027f24

0800d768 <_ZN6tflite14MicroAllocator38AllocatePersistentTfLiteTensorInternalEv>:

TfLiteTensor* MicroAllocator::AllocatePersistentTfLiteTensorInternal() {
 800d768:	b580      	push	{r7, lr}
 800d76a:	b082      	sub	sp, #8
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	6078      	str	r0, [r7, #4]
  return reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateFromTail(
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	6858      	ldr	r0, [r3, #4]
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	685b      	ldr	r3, [r3, #4]
      sizeof(TfLiteTensor), alignof(TfLiteTensor)));
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	330c      	adds	r3, #12
 800d77c:	681b      	ldr	r3, [r3, #0]
  return reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateFromTail(
 800d77e:	2204      	movs	r2, #4
 800d780:	2140      	movs	r1, #64	; 0x40
 800d782:	4798      	blx	r3
 800d784:	4603      	mov	r3, r0
}
 800d786:	4618      	mov	r0, r3
 800d788:	3708      	adds	r7, #8
 800d78a:	46bd      	mov	sp, r7
 800d78c:	bd80      	pop	{r7, pc}

0800d78e <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib>:

TfLiteStatus MicroAllocator::PopulateTfLiteTensorFromFlatbuffer(
    const Model* model, TfLiteTensor* tensor, int tensor_index,
    int subgraph_idx, bool allocate_temp) {
 800d78e:	b5b0      	push	{r4, r5, r7, lr}
 800d790:	b086      	sub	sp, #24
 800d792:	af02      	add	r7, sp, #8
 800d794:	60f8      	str	r0, [r7, #12]
 800d796:	60b9      	str	r1, [r7, #8]
 800d798:	607a      	str	r2, [r7, #4]
 800d79a:	603b      	str	r3, [r7, #0]
  // TODO(b/162311891): This method serves as a stub to ensure quantized
  // allocations in the tail can be recorded. Once the interpreter has APIs for
  // accessing buffers on TfLiteEvalTensor this method can be dropped.
  return internal::InitializeTfLiteTensorFromFlatbuffer(
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	685c      	ldr	r4, [r3, #4]
      memory_allocator_, allocate_temp,
      *model->subgraphs()->Get(subgraph_idx)->tensors()->Get(tensor_index),
 800d7a0:	68b8      	ldr	r0, [r7, #8]
 800d7a2:	f7fe fe3d 	bl	800c420 <_ZNK6tflite5Model9subgraphsEv>
 800d7a6:	4602      	mov	r2, r0
 800d7a8:	6a3b      	ldr	r3, [r7, #32]
 800d7aa:	4619      	mov	r1, r3
 800d7ac:	4610      	mov	r0, r2
 800d7ae:	f000 fb81 	bl	800deb4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800d7b2:	4603      	mov	r3, r0
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	f7fe fdd0 	bl	800c35a <_ZNK6tflite8SubGraph7tensorsEv>
 800d7ba:	4602      	mov	r2, r0
 800d7bc:	683b      	ldr	r3, [r7, #0]
 800d7be:	4619      	mov	r1, r3
 800d7c0:	4610      	mov	r0, r2
 800d7c2:	f000 fb0f 	bl	800dde4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 800d7c6:	4605      	mov	r5, r0
  return internal::InitializeTfLiteTensorFromFlatbuffer(
 800d7c8:	68b8      	ldr	r0, [r7, #8]
 800d7ca:	f7fe fe37 	bl	800c43c <_ZNK6tflite5Model7buffersEv>
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	68db      	ldr	r3, [r3, #12]
 800d7d2:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 800d7d6:	687a      	ldr	r2, [r7, #4]
 800d7d8:	9201      	str	r2, [sp, #4]
 800d7da:	9300      	str	r3, [sp, #0]
 800d7dc:	4603      	mov	r3, r0
 800d7de:	462a      	mov	r2, r5
 800d7e0:	4620      	mov	r0, r4
 800d7e2:	f7ff f9bd 	bl	800cb60 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor>
 800d7e6:	4603      	mov	r3, r0
      model->buffers(), error_reporter_, tensor);
}
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	3710      	adds	r7, #16
 800d7ec:	46bd      	mov	sp, r7
 800d7ee:	bdb0      	pop	{r4, r5, r7, pc}

0800d7f0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi>:
  return error_reporter_;
}

TfLiteStatus MicroAllocator::CommitStaticMemoryPlan(
    const Model* model, TfLiteEvalTensor* eval_tensors,
    ScratchBufferHandle* scratch_buffer_handles, int subgraph_idx) {
 800d7f0:	b590      	push	{r4, r7, lr}
 800d7f2:	b0a5      	sub	sp, #148	; 0x94
 800d7f4:	af02      	add	r7, sp, #8
 800d7f6:	60f8      	str	r0, [r7, #12]
 800d7f8:	60b9      	str	r1, [r7, #8]
 800d7fa:	607a      	str	r2, [r7, #4]
 800d7fc:	603b      	str	r3, [r7, #0]
  size_t head_usage = 0;
 800d7fe:	2300      	movs	r3, #0
 800d800:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  //
  // Note that AllocationInfo is only needed for creating the plan. It will be
  // allocated from the temp section and cleaned up at the bottom of this
  // function.

  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
 800d804:	68b8      	ldr	r0, [r7, #8]
 800d806:	f7fe fe0b 	bl	800c420 <_ZNK6tflite5Model9subgraphsEv>
 800d80a:	4602      	mov	r2, r0
 800d80c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d810:	4619      	mov	r1, r3
 800d812:	4610      	mov	r0, r2
 800d814:	f000 fb4e 	bl	800deb4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800d818:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  size_t allocation_info_count =
      subgraph->tensors()->size() + scratch_buffer_request_count_;
 800d81c:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800d820:	f7fe fd9b 	bl	800c35a <_ZNK6tflite8SubGraph7tensorsEv>
 800d824:	4603      	mov	r3, r0
 800d826:	4618      	mov	r0, r3
 800d828:	f000 face 	bl	800ddc8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 800d82c:	4602      	mov	r2, r0
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	695b      	ldr	r3, [r3, #20]
 800d832:	4413      	add	r3, r2
 800d834:	67fb      	str	r3, [r7, #124]	; 0x7c
  size_t bytes = sizeof(AllocationInfo) * allocation_info_count;
 800d836:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800d838:	4613      	mov	r3, r2
 800d83a:	005b      	lsls	r3, r3, #1
 800d83c:	4413      	add	r3, r2
 800d83e:	00db      	lsls	r3, r3, #3
 800d840:	67bb      	str	r3, [r7, #120]	; 0x78

  // Allocate an array of AllocationInfo structs from the temp section. This
  // struct will be used by AllocationInfoBuilder to find buffer usage.
  AllocationInfo* allocation_info = reinterpret_cast<AllocationInfo*>(
      memory_allocator_->AllocateTemp(bytes, alignof(AllocationInfo)));
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	6858      	ldr	r0, [r3, #4]
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	685b      	ldr	r3, [r3, #4]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	3310      	adds	r3, #16
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	2204      	movs	r2, #4
 800d852:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800d854:	4798      	blx	r3
 800d856:	6778      	str	r0, [r7, #116]	; 0x74
  if (allocation_info == nullptr) {
 800d858:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d108      	bne.n	800d870 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x80>
    TF_LITE_REPORT_ERROR(
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	68db      	ldr	r3, [r3, #12]
 800d862:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d864:	4985      	ldr	r1, [pc, #532]	; (800da7c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x28c>)
 800d866:	4618      	mov	r0, r3
 800d868:	f7fa ff6e 	bl	8008748 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to allocate memory for allocation_info, %d bytes required",
        bytes);
    return kTfLiteError;
 800d86c:	2401      	movs	r4, #1
 800d86e:	e0ff      	b.n	800da70 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x280>
  }

  // Use the AllocationInfoBuilder class to help determine where buffers are
  // used in the subgraph.
  AllocationInfoBuilder builder(allocation_info, subgraph->tensors()->size(),
 800d870:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800d874:	f7fe fd71 	bl	800c35a <_ZNK6tflite8SubGraph7tensorsEv>
 800d878:	4603      	mov	r3, r0
 800d87a:	4618      	mov	r0, r3
 800d87c:	f000 faa4 	bl	800ddc8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 800d880:	4601      	mov	r1, r0
                                scratch_buffer_request_count_, error_reporter_);
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	695a      	ldr	r2, [r3, #20]
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	68db      	ldr	r3, [r3, #12]
 800d88a:	f107 0044 	add.w	r0, r7, #68	; 0x44
 800d88e:	9300      	str	r3, [sp, #0]
 800d890:	4613      	mov	r3, r2
 800d892:	460a      	mov	r2, r1
 800d894:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800d896:	f7fe fe53 	bl	800c540 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilderC1EPNS0_14AllocationInfoEjjPNS_13ErrorReporterE>

  const int32_t* offline_planner_offsets = nullptr;
 800d89a:	2300      	movs	r3, #0
 800d89c:	643b      	str	r3, [r7, #64]	; 0x40
  TF_LITE_ENSURE_STATUS(
 800d89e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800d8a2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800d8a6:	68b9      	ldr	r1, [r7, #8]
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	f7fe ffc7 	bl	800c83c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl>
 800d8ae:	4603      	mov	r3, r0
 800d8b0:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 800d8b4:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d002      	beq.n	800d8c2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xd2>
 800d8bc:	f897 4073 	ldrb.w	r4, [r7, #115]	; 0x73
 800d8c0:	e0d6      	b.n	800da70 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x280>
      builder.GetOfflinePlannedOffsets(model, &offline_planner_offsets));
  TF_LITE_ENSURE_STATUS(
 800d8c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d8c4:	f107 0044 	add.w	r0, r7, #68	; 0x44
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800d8ce:	f7fe fe51 	bl	800c574 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor>
 800d8d2:	4603      	mov	r3, r0
 800d8d4:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
 800d8d8:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d002      	beq.n	800d8e6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xf6>
 800d8e0:	f897 4072 	ldrb.w	r4, [r7, #114]	; 0x72
 800d8e4:	e0c4      	b.n	800da70 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x280>
      builder.AddTensors(subgraph, offline_planner_offsets, eval_tensors));

  internal::ScratchBufferRequest* scratch_buffer_requests =
      GetScratchBufferRequests();
 800d8e6:	68f8      	ldr	r0, [r7, #12]
 800d8e8:	f000 f913 	bl	800db12 <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
 800d8ec:	66f8      	str	r0, [r7, #108]	; 0x6c

  TF_LITE_ENSURE_STATUS(builder.AddScratchBuffers(scratch_buffer_requests,
 800d8ee:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800d8f2:	683a      	ldr	r2, [r7, #0]
 800d8f4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800d8f6:	4618      	mov	r0, r3
 800d8f8:	f7ff f81c 	bl	800c934 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE>
 800d8fc:	4603      	mov	r3, r0
 800d8fe:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 800d902:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800d906:	2b00      	cmp	r3, #0
 800d908:	d002      	beq.n	800d910 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x120>
 800d90a:	f897 406b 	ldrb.w	r4, [r7, #107]	; 0x6b
 800d90e:	e0af      	b.n	800da70 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x280>
                                                  scratch_buffer_handles));

  // Remaining arena size that memory planner can use for calculating offsets.
  size_t remaining_arena_size =
      memory_allocator_->GetAvailableMemory(kBufferAlignment);
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	685b      	ldr	r3, [r3, #4]
 800d914:	2110      	movs	r1, #16
 800d916:	4618      	mov	r0, r3
 800d918:	f002 fd8a 	bl	8010430 <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEj>
 800d91c:	6678      	str	r0, [r7, #100]	; 0x64
  uint8_t* planner_arena =
      memory_allocator_->AllocateTemp(remaining_arena_size, kBufferAlignment);
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	6858      	ldr	r0, [r3, #4]
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	685b      	ldr	r3, [r3, #4]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	3310      	adds	r3, #16
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	2210      	movs	r2, #16
 800d92e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800d930:	4798      	blx	r3
 800d932:	6638      	str	r0, [r7, #96]	; 0x60
  TF_LITE_ENSURE(error_reporter_, planner_arena != nullptr);
 800d934:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d936:	2b00      	cmp	r3, #0
 800d938:	d10e      	bne.n	800d958 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x168>
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	68d8      	ldr	r0, [r3, #12]
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	68d9      	ldr	r1, [r3, #12]
 800d942:	4b4f      	ldr	r3, [pc, #316]	; (800da80 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x290>)
 800d944:	9301      	str	r3, [sp, #4]
 800d946:	f240 33c6 	movw	r3, #966	; 0x3c6
 800d94a:	9300      	str	r3, [sp, #0]
 800d94c:	4b4d      	ldr	r3, [pc, #308]	; (800da84 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x294>)
 800d94e:	4a4e      	ldr	r2, [pc, #312]	; (800da88 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x298>)
 800d950:	f7fa ff13 	bl	800877a <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 800d954:	2401      	movs	r4, #1
 800d956:	e08b      	b.n	800da70 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x280>
  GreedyMemoryPlanner planner(planner_arena, remaining_arena_size);
 800d958:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d95a:	f107 0314 	add.w	r3, r7, #20
 800d95e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d960:	4618      	mov	r0, r3
 800d962:	f00b f8e9 	bl	8018b38 <_ZN6tflite19GreedyMemoryPlannerC1EPhi>
  TF_LITE_ENSURE_STATUS(CreatePlan(error_reporter_, &planner, allocation_info,
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	68d8      	ldr	r0, [r3, #12]
 800d96a:	f107 0114 	add.w	r1, r7, #20
 800d96e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d970:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800d972:	f7ff f82a 	bl	800c9ca <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj>
 800d976:	4603      	mov	r3, r0
 800d978:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d97c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d980:	2b00      	cmp	r3, #0
 800d982:	d002      	beq.n	800d98a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x19a>
 800d984:	f897 405f 	ldrb.w	r4, [r7, #95]	; 0x5f
 800d988:	e06d      	b.n	800da66 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x276>
                                   allocation_info_count));

  // Reset all temp allocations used above:
  memory_allocator_->ResetTempAllocations();
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	685a      	ldr	r2, [r3, #4]
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	685b      	ldr	r3, [r3, #4]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	3314      	adds	r3, #20
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	4610      	mov	r0, r2
 800d99a:	4798      	blx	r3

  size_t actual_available_arena_size =
      memory_allocator_->GetAvailableMemory(kBufferAlignment);
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	685b      	ldr	r3, [r3, #4]
 800d9a0:	2110      	movs	r1, #16
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	f002 fd44 	bl	8010430 <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEj>
 800d9a8:	65b8      	str	r0, [r7, #88]	; 0x58

  // Make sure we have enough arena size.
  if (planner.GetMaximumMemorySize() > actual_available_arena_size) {
 800d9aa:	f107 0314 	add.w	r3, r7, #20
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	f00b fb7b 	bl	80190aa <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
 800d9b4:	4602      	mov	r2, r0
 800d9b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d9b8:	4293      	cmp	r3, r2
 800d9ba:	bf34      	ite	cc
 800d9bc:	2301      	movcc	r3, #1
 800d9be:	2300      	movcs	r3, #0
 800d9c0:	b2db      	uxtb	r3, r3
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d00e      	beq.n	800d9e4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x1f4>
    TF_LITE_REPORT_ERROR(
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	68dc      	ldr	r4, [r3, #12]
 800d9ca:	f107 0314 	add.w	r3, r7, #20
 800d9ce:	4618      	mov	r0, r3
 800d9d0:	f00b fb6b 	bl	80190aa <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
 800d9d4:	4602      	mov	r2, r0
 800d9d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d9d8:	492c      	ldr	r1, [pc, #176]	; (800da8c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x29c>)
 800d9da:	4620      	mov	r0, r4
 800d9dc:	f7fa feb4 	bl	8008748 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Arena size is too small for all buffers. Needed %u but only "
        "%u was available.",
        planner.GetMaximumMemorySize(), actual_available_arena_size);
    return kTfLiteError;
 800d9e0:	2401      	movs	r4, #1
 800d9e2:	e040      	b.n	800da66 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x276>
  }
  // Commit the plan.
  TF_LITE_ENSURE_STATUS(CommitPlan(error_reporter_, &planner,
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	68dc      	ldr	r4, [r3, #12]
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	685b      	ldr	r3, [r3, #4]
 800d9ec:	4618      	mov	r0, r3
 800d9ee:	f002 fd13 	bl	8010418 <_ZNK6tflite21SimpleMemoryAllocator13GetHeadBufferEv>
 800d9f2:	4602      	mov	r2, r0
 800d9f4:	f107 0114 	add.w	r1, r7, #20
 800d9f8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d9fa:	9300      	str	r3, [sp, #0]
 800d9fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d9fe:	4620      	mov	r0, r4
 800da00:	f7ff f83d 	bl	800ca7e <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj>
 800da04:	4603      	mov	r3, r0
 800da06:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800da0a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d002      	beq.n	800da18 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x228>
 800da12:	f897 4057 	ldrb.w	r4, [r7, #87]	; 0x57
 800da16:	e026      	b.n	800da66 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x276>
                                   memory_allocator_->GetHeadBuffer(),
                                   allocation_info, allocation_info_count));
#ifdef TF_LITE_SHOW_MEMORY_USE
  planner.PrintMemoryPlan();
#endif
  head_usage = planner.GetMaximumMemorySize();
 800da18:	f107 0314 	add.w	r3, r7, #20
 800da1c:	4618      	mov	r0, r3
 800da1e:	f00b fb44 	bl	80190aa <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
 800da22:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
  // The head is used to store memory plans for one model at a time during the
  // model preparation stage, and is re-purposed to store scratch buffer handles
  // during model invocation. The head must be as large as the greater of the
  // largest model memory plan's size and the total space required for all
  // scratch buffer handles.
  if (max_head_buffer_usage_ < head_usage) {
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	699b      	ldr	r3, [r3, #24]
 800da2a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800da2e:	429a      	cmp	r2, r3
 800da30:	d903      	bls.n	800da3a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x24a>
    max_head_buffer_usage_ = head_usage;
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800da38:	619a      	str	r2, [r3, #24]
  }

  // The head is used for storing scratch buffer allocations before finalizing a
  // memory plan in this function. Ensure that the head is set to the largest
  // memory plan sent through the allocator:
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	6858      	ldr	r0, [r3, #4]
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	685b      	ldr	r3, [r3, #4]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	3308      	adds	r3, #8
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	68fa      	ldr	r2, [r7, #12]
 800da4a:	6991      	ldr	r1, [r2, #24]
 800da4c:	2210      	movs	r2, #16
 800da4e:	4798      	blx	r3
 800da50:	4603      	mov	r3, r0
 800da52:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 800da56:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d002      	beq.n	800da64 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x274>
 800da5e:	f897 4056 	ldrb.w	r4, [r7, #86]	; 0x56
 800da62:	e000      	b.n	800da66 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x276>
      max_head_buffer_usage_, kBufferAlignment));
  return kTfLiteOk;
 800da64:	2400      	movs	r4, #0
  GreedyMemoryPlanner planner(planner_arena, remaining_arena_size);
 800da66:	f107 0314 	add.w	r3, r7, #20
 800da6a:	4618      	mov	r0, r3
 800da6c:	f00b f8b6 	bl	8018bdc <_ZN6tflite19GreedyMemoryPlannerD1Ev>
 800da70:	4623      	mov	r3, r4
}
 800da72:	4618      	mov	r0, r3
 800da74:	378c      	adds	r7, #140	; 0x8c
 800da76:	46bd      	mov	sp, r7
 800da78:	bd90      	pop	{r4, r7, pc}
 800da7a:	bf00      	nop
 800da7c:	08027f54 	.word	0x08027f54
 800da80:	08027fec 	.word	0x08027fec
 800da84:	08027f98 	.word	0x08027f98
 800da88:	08027fd4 	.word	0x08027fd4
 800da8c:	08028008 	.word	0x08028008

0800da90 <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj>:

TfLiteStatus MicroAllocator::AllocateScratchBufferHandles(
    ScratchBufferHandle** scratch_buffer_handles, size_t handle_count) {
 800da90:	b580      	push	{r7, lr}
 800da92:	b084      	sub	sp, #16
 800da94:	af00      	add	r7, sp, #0
 800da96:	60f8      	str	r0, [r7, #12]
 800da98:	60b9      	str	r1, [r7, #8]
 800da9a:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(scratch_buffer_handles != nullptr);
 800da9c:	68bb      	ldr	r3, [r7, #8]
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d101      	bne.n	800daa6 <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj+0x16>
 800daa2:	f017 ffd0 	bl	8025a46 <abort>

  if (scratch_buffer_request_count_ == 0) {
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	695b      	ldr	r3, [r3, #20]
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d101      	bne.n	800dab2 <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj+0x22>
    // No scratch buffer requests were requested during model allocation.
    return kTfLiteOk;
 800daae:	2300      	movs	r3, #0
 800dab0:	e00e      	b.n	800dad0 <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj+0x40>
  }

  // Allocate a consecutive block of memory store the scratch buffer handles.
  // This alignment ensures quick lookup during inference time for the model:
  *scratch_buffer_handles = reinterpret_cast<ScratchBufferHandle*>(
      memory_allocator_->AllocateFromTail(
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	6858      	ldr	r0, [r3, #4]
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	685b      	ldr	r3, [r3, #4]
          sizeof(ScratchBufferHandle) * handle_count,
          alignof(ScratchBufferHandle)));
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	330c      	adds	r3, #12
 800dabe:	681b      	ldr	r3, [r3, #0]
      memory_allocator_->AllocateFromTail(
 800dac0:	687a      	ldr	r2, [r7, #4]
 800dac2:	0091      	lsls	r1, r2, #2
 800dac4:	2204      	movs	r2, #4
 800dac6:	4798      	blx	r3
 800dac8:	4602      	mov	r2, r0
  *scratch_buffer_handles = reinterpret_cast<ScratchBufferHandle*>(
 800daca:	68bb      	ldr	r3, [r7, #8]
 800dacc:	601a      	str	r2, [r3, #0]

  return kTfLiteOk;
 800dace:	2300      	movs	r3, #0
}
 800dad0:	4618      	mov	r0, r3
 800dad2:	3710      	adds	r7, #16
 800dad4:	46bd      	mov	sp, r7
 800dad6:	bd80      	pop	{r7, pc}

0800dad8 <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv>:

TfLiteStatus MicroAllocator::InitScratchBufferData() {
 800dad8:	b580      	push	{r7, lr}
 800dada:	b084      	sub	sp, #16
 800dadc:	af00      	add	r7, sp, #0
 800dade:	6078      	str	r0, [r7, #4]
  // A model is preparing to allocate resources, ensure that scratch buffer
  // request counter is cleared:
  scratch_buffer_request_count_ = 0;
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	2200      	movs	r2, #0
 800dae4:	615a      	str	r2, [r3, #20]

  // All requests will be stored in the head section. Each kernel is allowed at
  // most kMaxScratchBuffersPerOp requests. Adjust the head to reserve at most
  // that many requests to begin:
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	6858      	ldr	r0, [r3, #4]
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	685b      	ldr	r3, [r3, #4]
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	3308      	adds	r3, #8
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	2204      	movs	r2, #4
 800daf6:	2160      	movs	r1, #96	; 0x60
 800daf8:	4798      	blx	r3
 800dafa:	4603      	mov	r3, r0
 800dafc:	73fb      	strb	r3, [r7, #15]
 800dafe:	7bfb      	ldrb	r3, [r7, #15]
 800db00:	2b00      	cmp	r3, #0
 800db02:	d001      	beq.n	800db08 <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv+0x30>
 800db04:	7bfb      	ldrb	r3, [r7, #15]
 800db06:	e000      	b.n	800db0a <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv+0x32>
      sizeof(internal::ScratchBufferRequest) * kMaxScratchBuffersPerOp,
      alignof(internal::ScratchBufferRequest)));

  return kTfLiteOk;
 800db08:	2300      	movs	r3, #0
}
 800db0a:	4618      	mov	r0, r3
 800db0c:	3710      	adds	r7, #16
 800db0e:	46bd      	mov	sp, r7
 800db10:	bd80      	pop	{r7, pc}

0800db12 <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>:

internal::ScratchBufferRequest* MicroAllocator::GetScratchBufferRequests() {
 800db12:	b580      	push	{r7, lr}
 800db14:	b082      	sub	sp, #8
 800db16:	af00      	add	r7, sp, #0
 800db18:	6078      	str	r0, [r7, #4]
  return reinterpret_cast<internal::ScratchBufferRequest*>(
      AlignPointerUp(memory_allocator_->GetHeadBuffer(),
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	685b      	ldr	r3, [r3, #4]
 800db1e:	4618      	mov	r0, r3
 800db20:	f002 fc7a 	bl	8010418 <_ZNK6tflite21SimpleMemoryAllocator13GetHeadBufferEv>
 800db24:	4603      	mov	r3, r0
 800db26:	2104      	movs	r1, #4
 800db28:	4618      	mov	r0, r3
 800db2a:	f7fe fa3e 	bl	800bfaa <_ZN6tflite14AlignPointerUpEPhj>
 800db2e:	4603      	mov	r3, r0
                     alignof(internal::ScratchBufferRequest)));
}
 800db30:	4618      	mov	r0, r3
 800db32:	3708      	adds	r7, #8
 800db34:	46bd      	mov	sp, r7
 800db36:	bd80      	pop	{r7, pc}

0800db38 <_ZN6tflite14MicroAllocator33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIlEEPP14TfLiteIntArray>:

TfLiteStatus MicroAllocator::FlatBufferVectorToTfLiteTypeArray(
    const flatbuffers::Vector<int32_t>* flatbuffer_array,
    TfLiteIntArray** result) {
 800db38:	b580      	push	{r7, lr}
 800db3a:	b084      	sub	sp, #16
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	60f8      	str	r0, [r7, #12]
 800db40:	60b9      	str	r1, [r7, #8]
 800db42:	607a      	str	r2, [r7, #4]
  return internal::FlatBufferVectorToTfLiteTypeArray(
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	6858      	ldr	r0, [r3, #4]
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	68d9      	ldr	r1, [r3, #12]
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	68ba      	ldr	r2, [r7, #8]
 800db50:	f000 fa66 	bl	800e020 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
 800db54:	4603      	mov	r3, r0
      memory_allocator_, error_reporter_, flatbuffer_array, result);
}
 800db56:	4618      	mov	r0, r3
 800db58:	3710      	adds	r7, #16
 800db5a:	46bd      	mov	sp, r7
 800db5c:	bd80      	pop	{r7, pc}

0800db5e <_ZN6tflite14MicroAllocator23GetBuiltinDataAllocatorEv>:

BuiltinDataAllocator* MicroAllocator::GetBuiltinDataAllocator() {
 800db5e:	b480      	push	{r7}
 800db60:	b083      	sub	sp, #12
 800db62:	af00      	add	r7, sp, #0
 800db64:	6078      	str	r0, [r7, #4]
  return builtin_data_allocator_;
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	689b      	ldr	r3, [r3, #8]
}
 800db6a:	4618      	mov	r0, r3
 800db6c:	370c      	adds	r7, #12
 800db6e:	46bd      	mov	sp, r7
 800db70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db74:	4770      	bx	lr

0800db76 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800db76:	b580      	push	{r7, lr}
 800db78:	b082      	sub	sp, #8
 800db7a:	af00      	add	r7, sp, #0
 800db7c:	6078      	str	r0, [r7, #4]
 800db7e:	460b      	mov	r3, r1
 800db80:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800db82:	887b      	ldrh	r3, [r7, #2]
 800db84:	4619      	mov	r1, r3
 800db86:	6878      	ldr	r0, [r7, #4]
 800db88:	f000 fa7c 	bl	800e084 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>
 800db8c:	4603      	mov	r3, r0
  }
 800db8e:	4618      	mov	r0, r3
 800db90:	3708      	adds	r7, #8
 800db92:	46bd      	mov	sp, r7
 800db94:	bd80      	pop	{r7, pc}

0800db96 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800db96:	b580      	push	{r7, lr}
 800db98:	b082      	sub	sp, #8
 800db9a:	af00      	add	r7, sp, #0
 800db9c:	6078      	str	r0, [r7, #4]
 800db9e:	460b      	mov	r3, r1
 800dba0:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800dba2:	887b      	ldrh	r3, [r7, #2]
 800dba4:	4619      	mov	r1, r3
 800dba6:	6878      	ldr	r0, [r7, #4]
 800dba8:	f000 fa8c 	bl	800e0c4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t>
 800dbac:	4603      	mov	r3, r0
  }
 800dbae:	4618      	mov	r0, r3
 800dbb0:	3708      	adds	r7, #8
 800dbb2:	46bd      	mov	sp, r7
 800dbb4:	bd80      	pop	{r7, pc}

0800dbb6 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800dbb6:	b580      	push	{r7, lr}
 800dbb8:	b082      	sub	sp, #8
 800dbba:	af00      	add	r7, sp, #0
 800dbbc:	6078      	str	r0, [r7, #4]
 800dbbe:	460b      	mov	r3, r1
 800dbc0:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800dbc2:	887b      	ldrh	r3, [r7, #2]
 800dbc4:	4619      	mov	r1, r3
 800dbc6:	6878      	ldr	r0, [r7, #4]
 800dbc8:	f000 fa9c 	bl	800e104 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t>
 800dbcc:	4603      	mov	r3, r0
  }
 800dbce:	4618      	mov	r0, r3
 800dbd0:	3708      	adds	r7, #8
 800dbd2:	46bd      	mov	sp, r7
 800dbd4:	bd80      	pop	{r7, pc}

0800dbd6 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 800dbd6:	b580      	push	{r7, lr}
 800dbd8:	b086      	sub	sp, #24
 800dbda:	af00      	add	r7, sp, #0
 800dbdc:	60f8      	str	r0, [r7, #12]
 800dbde:	460b      	mov	r3, r1
 800dbe0:	607a      	str	r2, [r7, #4]
 800dbe2:	817b      	strh	r3, [r7, #10]
    auto field_offset = GetOptionalFieldOffset(field);
 800dbe4:	897b      	ldrh	r3, [r7, #10]
 800dbe6:	4619      	mov	r1, r3
 800dbe8:	68f8      	ldr	r0, [r7, #12]
 800dbea:	f7fa fdfc 	bl	80087e6 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800dbee:	4603      	mov	r3, r0
 800dbf0:	82fb      	strh	r3, [r7, #22]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 800dbf2:	8afb      	ldrh	r3, [r7, #22]
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d007      	beq.n	800dc08 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_+0x32>
 800dbf8:	68fa      	ldr	r2, [r7, #12]
 800dbfa:	8afb      	ldrh	r3, [r7, #22]
 800dbfc:	4413      	add	r3, r2
 800dbfe:	4618      	mov	r0, r3
 800dc00:	f7fb fc1b 	bl	800943a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800dc04:	4603      	mov	r3, r0
 800dc06:	e000      	b.n	800dc0a <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_+0x34>
 800dc08:	687b      	ldr	r3, [r7, #4]
  }
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	3718      	adds	r7, #24
 800dc0e:	46bd      	mov	sp, r7
 800dc10:	bd80      	pop	{r7, pc}

0800dc12 <_ZNK11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800dc12:	b580      	push	{r7, lr}
 800dc14:	b082      	sub	sp, #8
 800dc16:	af00      	add	r7, sp, #0
 800dc18:	6078      	str	r0, [r7, #4]
 800dc1a:	460b      	mov	r3, r1
 800dc1c:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800dc1e:	887b      	ldrh	r3, [r7, #2]
 800dc20:	4619      	mov	r1, r3
 800dc22:	6878      	ldr	r0, [r7, #4]
 800dc24:	f000 fa8e 	bl	800e144 <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t>
 800dc28:	4603      	mov	r3, r0
  }
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	3708      	adds	r7, #8
 800dc2e:	46bd      	mov	sp, r7
 800dc30:	bd80      	pop	{r7, pc}

0800dc32 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800dc32:	b580      	push	{r7, lr}
 800dc34:	b082      	sub	sp, #8
 800dc36:	af00      	add	r7, sp, #0
 800dc38:	6078      	str	r0, [r7, #4]
 800dc3a:	460b      	mov	r3, r1
 800dc3c:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800dc3e:	887b      	ldrh	r3, [r7, #2]
 800dc40:	4619      	mov	r1, r3
 800dc42:	6878      	ldr	r0, [r7, #4]
 800dc44:	f000 fa9e 	bl	800e184 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>
 800dc48:	4603      	mov	r3, r0
  }
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	3708      	adds	r7, #8
 800dc4e:	46bd      	mov	sp, r7
 800dc50:	bd80      	pop	{r7, pc}

0800dc52 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800dc52:	b580      	push	{r7, lr}
 800dc54:	b082      	sub	sp, #8
 800dc56:	af00      	add	r7, sp, #0
 800dc58:	6078      	str	r0, [r7, #4]
 800dc5a:	460b      	mov	r3, r1
 800dc5c:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800dc5e:	887b      	ldrh	r3, [r7, #2]
 800dc60:	4619      	mov	r1, r3
 800dc62:	6878      	ldr	r0, [r7, #4]
 800dc64:	f000 faae 	bl	800e1c4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>
 800dc68:	4603      	mov	r3, r0
  }
 800dc6a:	4618      	mov	r0, r3
 800dc6c:	3708      	adds	r7, #8
 800dc6e:	46bd      	mov	sp, r7
 800dc70:	bd80      	pop	{r7, pc}

0800dc72 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800dc72:	b580      	push	{r7, lr}
 800dc74:	b082      	sub	sp, #8
 800dc76:	af00      	add	r7, sp, #0
 800dc78:	6078      	str	r0, [r7, #4]
 800dc7a:	460b      	mov	r3, r1
 800dc7c:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800dc7e:	887b      	ldrh	r3, [r7, #2]
 800dc80:	4619      	mov	r1, r3
 800dc82:	6878      	ldr	r0, [r7, #4]
 800dc84:	f000 fabe 	bl	800e204 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>
 800dc88:	4603      	mov	r3, r0
  }
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	3708      	adds	r7, #8
 800dc8e:	46bd      	mov	sp, r7
 800dc90:	bd80      	pop	{r7, pc}

0800dc92 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800dc92:	b580      	push	{r7, lr}
 800dc94:	b082      	sub	sp, #8
 800dc96:	af00      	add	r7, sp, #0
 800dc98:	6078      	str	r0, [r7, #4]
 800dc9a:	460b      	mov	r3, r1
 800dc9c:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800dc9e:	887b      	ldrh	r3, [r7, #2]
 800dca0:	4619      	mov	r1, r3
 800dca2:	6878      	ldr	r0, [r7, #4]
 800dca4:	f000 face 	bl	800e244 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>
 800dca8:	4603      	mov	r3, r0
  }
 800dcaa:	4618      	mov	r0, r3
 800dcac:	3708      	adds	r7, #8
 800dcae:	46bd      	mov	sp, r7
 800dcb0:	bd80      	pop	{r7, pc}

0800dcb2 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800dcb2:	b580      	push	{r7, lr}
 800dcb4:	b082      	sub	sp, #8
 800dcb6:	af00      	add	r7, sp, #0
 800dcb8:	6078      	str	r0, [r7, #4]
 800dcba:	460b      	mov	r3, r1
 800dcbc:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800dcbe:	887b      	ldrh	r3, [r7, #2]
 800dcc0:	4619      	mov	r1, r3
 800dcc2:	6878      	ldr	r0, [r7, #4]
 800dcc4:	f000 fade 	bl	800e284 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t>
 800dcc8:	4603      	mov	r3, r0
  }
 800dcca:	4618      	mov	r0, r3
 800dccc:	3708      	adds	r7, #8
 800dcce:	46bd      	mov	sp, r7
 800dcd0:	bd80      	pop	{r7, pc}

0800dcd2 <_ZNK11flatbuffers6VectorIhE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 800dcd2:	b580      	push	{r7, lr}
 800dcd4:	b082      	sub	sp, #8
 800dcd6:	af00      	add	r7, sp, #0
 800dcd8:	6078      	str	r0, [r7, #4]
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	4618      	mov	r0, r3
 800dce0:	f7fb fb92 	bl	8009408 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800dce4:	4603      	mov	r3, r0
 800dce6:	4618      	mov	r0, r3
 800dce8:	3708      	adds	r7, #8
 800dcea:	46bd      	mov	sp, r7
 800dcec:	bd80      	pop	{r7, pc}

0800dcee <_ZNK11flatbuffers6VectorIfE4sizeEv>:
 800dcee:	b580      	push	{r7, lr}
 800dcf0:	b082      	sub	sp, #8
 800dcf2:	af00      	add	r7, sp, #0
 800dcf4:	6078      	str	r0, [r7, #4]
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	4618      	mov	r0, r3
 800dcfc:	f7fb fb84 	bl	8009408 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800dd00:	4603      	mov	r3, r0
 800dd02:	4618      	mov	r0, r3
 800dd04:	3708      	adds	r7, #8
 800dd06:	46bd      	mov	sp, r7
 800dd08:	bd80      	pop	{r7, pc}
	...

0800dd0c <_ZNK11flatbuffers6VectorIfE3GetEm>:
  return_type Get(uoffset_t i) const {
 800dd0c:	b580      	push	{r7, lr}
 800dd0e:	b082      	sub	sp, #8
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	6078      	str	r0, [r7, #4]
 800dd14:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 800dd16:	6878      	ldr	r0, [r7, #4]
 800dd18:	f7ff ffe9 	bl	800dcee <_ZNK11flatbuffers6VectorIfE4sizeEv>
 800dd1c:	4602      	mov	r2, r0
 800dd1e:	683b      	ldr	r3, [r7, #0]
 800dd20:	4293      	cmp	r3, r2
 800dd22:	d306      	bcc.n	800dd32 <_ZNK11flatbuffers6VectorIfE3GetEm+0x26>
 800dd24:	4b0a      	ldr	r3, [pc, #40]	; (800dd50 <_ZNK11flatbuffers6VectorIfE3GetEm+0x44>)
 800dd26:	4a0b      	ldr	r2, [pc, #44]	; (800dd54 <_ZNK11flatbuffers6VectorIfE3GetEm+0x48>)
 800dd28:	f44f 7183 	mov.w	r1, #262	; 0x106
 800dd2c:	480a      	ldr	r0, [pc, #40]	; (800dd58 <_ZNK11flatbuffers6VectorIfE3GetEm+0x4c>)
 800dd2e:	f017 fe91 	bl	8025a54 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 800dd32:	6878      	ldr	r0, [r7, #4]
 800dd34:	f000 fae8 	bl	800e308 <_ZNK11flatbuffers6VectorIfE4DataEv>
 800dd38:	4603      	mov	r3, r0
 800dd3a:	6839      	ldr	r1, [r7, #0]
 800dd3c:	4618      	mov	r0, r3
 800dd3e:	f000 facd 	bl	800e2dc <_ZN11flatbuffers14IndirectHelperIfE4ReadEPKhm>
 800dd42:	eef0 7a40 	vmov.f32	s15, s0
  }
 800dd46:	eeb0 0a67 	vmov.f32	s0, s15
 800dd4a:	3708      	adds	r7, #8
 800dd4c:	46bd      	mov	sp, r7
 800dd4e:	bd80      	pop	{r7, pc}
 800dd50:	08028058 	.word	0x08028058
 800dd54:	08028064 	.word	0x08028064
 800dd58:	0802812c 	.word	0x0802812c

0800dd5c <_ZNK11flatbuffers6VectorIxE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 800dd5c:	b580      	push	{r7, lr}
 800dd5e:	b082      	sub	sp, #8
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	6078      	str	r0, [r7, #4]
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	4618      	mov	r0, r3
 800dd6a:	f7fb fb4d 	bl	8009408 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800dd6e:	4603      	mov	r3, r0
 800dd70:	4618      	mov	r0, r3
 800dd72:	3708      	adds	r7, #8
 800dd74:	46bd      	mov	sp, r7
 800dd76:	bd80      	pop	{r7, pc}

0800dd78 <_ZNK11flatbuffers6VectorIxE3GetEm>:
  return_type Get(uoffset_t i) const {
 800dd78:	b580      	push	{r7, lr}
 800dd7a:	b082      	sub	sp, #8
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	6078      	str	r0, [r7, #4]
 800dd80:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 800dd82:	6878      	ldr	r0, [r7, #4]
 800dd84:	f7ff ffea 	bl	800dd5c <_ZNK11flatbuffers6VectorIxE4sizeEv>
 800dd88:	4602      	mov	r2, r0
 800dd8a:	683b      	ldr	r3, [r7, #0]
 800dd8c:	4293      	cmp	r3, r2
 800dd8e:	d306      	bcc.n	800dd9e <_ZNK11flatbuffers6VectorIxE3GetEm+0x26>
 800dd90:	4b0a      	ldr	r3, [pc, #40]	; (800ddbc <_ZNK11flatbuffers6VectorIxE3GetEm+0x44>)
 800dd92:	4a0b      	ldr	r2, [pc, #44]	; (800ddc0 <_ZNK11flatbuffers6VectorIxE3GetEm+0x48>)
 800dd94:	f44f 7183 	mov.w	r1, #262	; 0x106
 800dd98:	480a      	ldr	r0, [pc, #40]	; (800ddc4 <_ZNK11flatbuffers6VectorIxE3GetEm+0x4c>)
 800dd9a:	f017 fe5b 	bl	8025a54 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 800dd9e:	6878      	ldr	r0, [r7, #4]
 800dda0:	f000 fad4 	bl	800e34c <_ZNK11flatbuffers6VectorIxE4DataEv>
 800dda4:	4603      	mov	r3, r0
 800dda6:	6839      	ldr	r1, [r7, #0]
 800dda8:	4618      	mov	r0, r3
 800ddaa:	f000 fab9 	bl	800e320 <_ZN11flatbuffers14IndirectHelperIxE4ReadEPKhm>
 800ddae:	4602      	mov	r2, r0
 800ddb0:	460b      	mov	r3, r1
  }
 800ddb2:	4610      	mov	r0, r2
 800ddb4:	4619      	mov	r1, r3
 800ddb6:	3708      	adds	r7, #8
 800ddb8:	46bd      	mov	sp, r7
 800ddba:	bd80      	pop	{r7, pc}
 800ddbc:	08028058 	.word	0x08028058
 800ddc0:	080281b0 	.word	0x080281b0
 800ddc4:	0802812c 	.word	0x0802812c

0800ddc8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 800ddc8:	b580      	push	{r7, lr}
 800ddca:	b082      	sub	sp, #8
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	6078      	str	r0, [r7, #4]
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	f7fb fb17 	bl	8009408 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800ddda:	4603      	mov	r3, r0
 800dddc:	4618      	mov	r0, r3
 800ddde:	3708      	adds	r7, #8
 800dde0:	46bd      	mov	sp, r7
 800dde2:	bd80      	pop	{r7, pc}

0800dde4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 800dde4:	b580      	push	{r7, lr}
 800dde6:	b082      	sub	sp, #8
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	6078      	str	r0, [r7, #4]
 800ddec:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 800ddee:	6878      	ldr	r0, [r7, #4]
 800ddf0:	f7ff ffea 	bl	800ddc8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 800ddf4:	4602      	mov	r2, r0
 800ddf6:	683b      	ldr	r3, [r7, #0]
 800ddf8:	4293      	cmp	r3, r2
 800ddfa:	d306      	bcc.n	800de0a <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x26>
 800ddfc:	4b09      	ldr	r3, [pc, #36]	; (800de24 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x40>)
 800ddfe:	4a0a      	ldr	r2, [pc, #40]	; (800de28 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x44>)
 800de00:	f44f 7183 	mov.w	r1, #262	; 0x106
 800de04:	4809      	ldr	r0, [pc, #36]	; (800de2c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x48>)
 800de06:	f017 fe25 	bl	8025a54 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 800de0a:	6878      	ldr	r0, [r7, #4]
 800de0c:	f000 fabe 	bl	800e38c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4DataEv>
 800de10:	4603      	mov	r3, r0
 800de12:	6839      	ldr	r1, [r7, #0]
 800de14:	4618      	mov	r0, r3
 800de16:	f000 faa5 	bl	800e364 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6TensorEEEE4ReadEPKhm>
 800de1a:	4603      	mov	r3, r0
  }
 800de1c:	4618      	mov	r0, r3
 800de1e:	3708      	adds	r7, #8
 800de20:	46bd      	mov	sp, r7
 800de22:	bd80      	pop	{r7, pc}
 800de24:	08028058 	.word	0x08028058
 800de28:	08028358 	.word	0x08028358
 800de2c:	0802812c 	.word	0x0802812c

0800de30 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 800de30:	b580      	push	{r7, lr}
 800de32:	b082      	sub	sp, #8
 800de34:	af00      	add	r7, sp, #0
 800de36:	6078      	str	r0, [r7, #4]
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	4618      	mov	r0, r3
 800de3e:	f7fb fae3 	bl	8009408 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800de42:	4603      	mov	r3, r0
 800de44:	4618      	mov	r0, r3
 800de46:	3708      	adds	r7, #8
 800de48:	46bd      	mov	sp, r7
 800de4a:	bd80      	pop	{r7, pc}

0800de4c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 800de4c:	b580      	push	{r7, lr}
 800de4e:	b082      	sub	sp, #8
 800de50:	af00      	add	r7, sp, #0
 800de52:	6078      	str	r0, [r7, #4]
 800de54:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 800de56:	6878      	ldr	r0, [r7, #4]
 800de58:	f7ff ffea 	bl	800de30 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 800de5c:	4602      	mov	r2, r0
 800de5e:	683b      	ldr	r3, [r7, #0]
 800de60:	4293      	cmp	r3, r2
 800de62:	d306      	bcc.n	800de72 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x26>
 800de64:	4b09      	ldr	r3, [pc, #36]	; (800de8c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x40>)
 800de66:	4a0a      	ldr	r2, [pc, #40]	; (800de90 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x44>)
 800de68:	f44f 7183 	mov.w	r1, #262	; 0x106
 800de6c:	4809      	ldr	r0, [pc, #36]	; (800de94 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x48>)
 800de6e:	f017 fdf1 	bl	8025a54 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 800de72:	6878      	ldr	r0, [r7, #4]
 800de74:	f000 faaa 	bl	800e3cc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4DataEv>
 800de78:	4603      	mov	r3, r0
 800de7a:	6839      	ldr	r1, [r7, #0]
 800de7c:	4618      	mov	r0, r3
 800de7e:	f000 fa91 	bl	800e3a4 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8OperatorEEEE4ReadEPKhm>
 800de82:	4603      	mov	r3, r0
  }
 800de84:	4618      	mov	r0, r3
 800de86:	3708      	adds	r7, #8
 800de88:	46bd      	mov	sp, r7
 800de8a:	bd80      	pop	{r7, pc}
 800de8c:	08028058 	.word	0x08028058
 800de90:	08028450 	.word	0x08028450
 800de94:	0802812c 	.word	0x0802812c

0800de98 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 800de98:	b580      	push	{r7, lr}
 800de9a:	b082      	sub	sp, #8
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	6078      	str	r0, [r7, #4]
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	4618      	mov	r0, r3
 800dea6:	f7fb faaf 	bl	8009408 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800deaa:	4603      	mov	r3, r0
 800deac:	4618      	mov	r0, r3
 800deae:	3708      	adds	r7, #8
 800deb0:	46bd      	mov	sp, r7
 800deb2:	bd80      	pop	{r7, pc}

0800deb4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 800deb4:	b580      	push	{r7, lr}
 800deb6:	b082      	sub	sp, #8
 800deb8:	af00      	add	r7, sp, #0
 800deba:	6078      	str	r0, [r7, #4]
 800debc:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 800debe:	6878      	ldr	r0, [r7, #4]
 800dec0:	f7ff ffea 	bl	800de98 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 800dec4:	4602      	mov	r2, r0
 800dec6:	683b      	ldr	r3, [r7, #0]
 800dec8:	4293      	cmp	r3, r2
 800deca:	d306      	bcc.n	800deda <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x26>
 800decc:	4b09      	ldr	r3, [pc, #36]	; (800def4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x40>)
 800dece:	4a0a      	ldr	r2, [pc, #40]	; (800def8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x44>)
 800ded0:	f44f 7183 	mov.w	r1, #262	; 0x106
 800ded4:	4809      	ldr	r0, [pc, #36]	; (800defc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x48>)
 800ded6:	f017 fdbd 	bl	8025a54 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 800deda:	6878      	ldr	r0, [r7, #4]
 800dedc:	f000 fa96 	bl	800e40c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4DataEv>
 800dee0:	4603      	mov	r3, r0
 800dee2:	6839      	ldr	r1, [r7, #0]
 800dee4:	4618      	mov	r0, r3
 800dee6:	f000 fa7d 	bl	800e3e4 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8SubGraphEEEE4ReadEPKhm>
 800deea:	4603      	mov	r3, r0
  }
 800deec:	4618      	mov	r0, r3
 800deee:	3708      	adds	r7, #8
 800def0:	46bd      	mov	sp, r7
 800def2:	bd80      	pop	{r7, pc}
 800def4:	08028058 	.word	0x08028058
 800def8:	0802854c 	.word	0x0802854c
 800defc:	0802812c 	.word	0x0802812c

0800df00 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 800df00:	b580      	push	{r7, lr}
 800df02:	b082      	sub	sp, #8
 800df04:	af00      	add	r7, sp, #0
 800df06:	6078      	str	r0, [r7, #4]
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	4618      	mov	r0, r3
 800df0e:	f7fb fa7b 	bl	8009408 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800df12:	4603      	mov	r3, r0
 800df14:	4618      	mov	r0, r3
 800df16:	3708      	adds	r7, #8
 800df18:	46bd      	mov	sp, r7
 800df1a:	bd80      	pop	{r7, pc}

0800df1c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 800df1c:	b580      	push	{r7, lr}
 800df1e:	b082      	sub	sp, #8
 800df20:	af00      	add	r7, sp, #0
 800df22:	6078      	str	r0, [r7, #4]
 800df24:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 800df26:	6878      	ldr	r0, [r7, #4]
 800df28:	f7ff ffea 	bl	800df00 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE4sizeEv>
 800df2c:	4602      	mov	r2, r0
 800df2e:	683b      	ldr	r3, [r7, #0]
 800df30:	4293      	cmp	r3, r2
 800df32:	d306      	bcc.n	800df42 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm+0x26>
 800df34:	4b09      	ldr	r3, [pc, #36]	; (800df5c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm+0x40>)
 800df36:	4a0a      	ldr	r2, [pc, #40]	; (800df60 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm+0x44>)
 800df38:	f44f 7183 	mov.w	r1, #262	; 0x106
 800df3c:	4809      	ldr	r0, [pc, #36]	; (800df64 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm+0x48>)
 800df3e:	f017 fd89 	bl	8025a54 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 800df42:	6878      	ldr	r0, [r7, #4]
 800df44:	f000 fa82 	bl	800e44c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE4DataEv>
 800df48:	4603      	mov	r3, r0
 800df4a:	6839      	ldr	r1, [r7, #0]
 800df4c:	4618      	mov	r0, r3
 800df4e:	f000 fa69 	bl	800e424 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6BufferEEEE4ReadEPKhm>
 800df52:	4603      	mov	r3, r0
  }
 800df54:	4618      	mov	r0, r3
 800df56:	3708      	adds	r7, #8
 800df58:	46bd      	mov	sp, r7
 800df5a:	bd80      	pop	{r7, pc}
 800df5c:	08028058 	.word	0x08028058
 800df60:	08028648 	.word	0x08028648
 800df64:	0802812c 	.word	0x0802812c

0800df68 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 800df68:	b580      	push	{r7, lr}
 800df6a:	b082      	sub	sp, #8
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	6078      	str	r0, [r7, #4]
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	4618      	mov	r0, r3
 800df76:	f7fb fa47 	bl	8009408 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800df7a:	4603      	mov	r3, r0
 800df7c:	4618      	mov	r0, r3
 800df7e:	3708      	adds	r7, #8
 800df80:	46bd      	mov	sp, r7
 800df82:	bd80      	pop	{r7, pc}

0800df84 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 800df84:	b580      	push	{r7, lr}
 800df86:	b082      	sub	sp, #8
 800df88:	af00      	add	r7, sp, #0
 800df8a:	6078      	str	r0, [r7, #4]
 800df8c:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 800df8e:	6878      	ldr	r0, [r7, #4]
 800df90:	f7ff ffea 	bl	800df68 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4sizeEv>
 800df94:	4602      	mov	r2, r0
 800df96:	683b      	ldr	r3, [r7, #0]
 800df98:	4293      	cmp	r3, r2
 800df9a:	d306      	bcc.n	800dfaa <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm+0x26>
 800df9c:	4b09      	ldr	r3, [pc, #36]	; (800dfc4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm+0x40>)
 800df9e:	4a0a      	ldr	r2, [pc, #40]	; (800dfc8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm+0x44>)
 800dfa0:	f44f 7183 	mov.w	r1, #262	; 0x106
 800dfa4:	4809      	ldr	r0, [pc, #36]	; (800dfcc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm+0x48>)
 800dfa6:	f017 fd55 	bl	8025a54 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 800dfaa:	6878      	ldr	r0, [r7, #4]
 800dfac:	f000 fa6e 	bl	800e48c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4DataEv>
 800dfb0:	4603      	mov	r3, r0
 800dfb2:	6839      	ldr	r1, [r7, #0]
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	f000 fa55 	bl	800e464 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8MetadataEEEE4ReadEPKhm>
 800dfba:	4603      	mov	r3, r0
  }
 800dfbc:	4618      	mov	r0, r3
 800dfbe:	3708      	adds	r7, #8
 800dfc0:	46bd      	mov	sp, r7
 800dfc2:	bd80      	pop	{r7, pc}
 800dfc4:	08028058 	.word	0x08028058
 800dfc8:	08028740 	.word	0x08028740
 800dfcc:	0802812c 	.word	0x0802812c

0800dfd0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEEixEm>:
  return_type operator[](uoffset_t i) const { return Get(i); }
 800dfd0:	b580      	push	{r7, lr}
 800dfd2:	b082      	sub	sp, #8
 800dfd4:	af00      	add	r7, sp, #0
 800dfd6:	6078      	str	r0, [r7, #4]
 800dfd8:	6039      	str	r1, [r7, #0]
 800dfda:	6839      	ldr	r1, [r7, #0]
 800dfdc:	6878      	ldr	r0, [r7, #4]
 800dfde:	f7ff ff69 	bl	800deb4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800dfe2:	4603      	mov	r3, r0
 800dfe4:	4618      	mov	r0, r3
 800dfe6:	3708      	adds	r7, #8
 800dfe8:	46bd      	mov	sp, r7
 800dfea:	bd80      	pop	{r7, pc}

0800dfec <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEEixEm>:
 800dfec:	b580      	push	{r7, lr}
 800dfee:	b082      	sub	sp, #8
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	6078      	str	r0, [r7, #4]
 800dff4:	6039      	str	r1, [r7, #0]
 800dff6:	6839      	ldr	r1, [r7, #0]
 800dff8:	6878      	ldr	r0, [r7, #4]
 800dffa:	f7ff ff8f 	bl	800df1c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm>
 800dffe:	4603      	mov	r3, r0
 800e000:	4618      	mov	r0, r3
 800e002:	3708      	adds	r7, #8
 800e004:	46bd      	mov	sp, r7
 800e006:	bd80      	pop	{r7, pc}

0800e008 <_ZNK11flatbuffers6VectorIhE4dataEv>:
  const T *data() const { return reinterpret_cast<const T *>(Data()); }
 800e008:	b580      	push	{r7, lr}
 800e00a:	b082      	sub	sp, #8
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	6078      	str	r0, [r7, #4]
 800e010:	6878      	ldr	r0, [r7, #4]
 800e012:	f000 f957 	bl	800e2c4 <_ZNK11flatbuffers6VectorIhE4DataEv>
 800e016:	4603      	mov	r3, r0
 800e018:	4618      	mov	r0, r3
 800e01a:	3708      	adds	r7, #8
 800e01c:	46bd      	mov	sp, r7
 800e01e:	bd80      	pop	{r7, pc}

0800e020 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>:
TfLiteStatus FlatBufferVectorToTfLiteTypeArray(
 800e020:	b580      	push	{r7, lr}
 800e022:	b084      	sub	sp, #16
 800e024:	af00      	add	r7, sp, #0
 800e026:	60f8      	str	r0, [r7, #12]
 800e028:	60b9      	str	r1, [r7, #8]
 800e02a:	607a      	str	r2, [r7, #4]
 800e02c:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(error_reporter != nullptr);
 800e02e:	68bb      	ldr	r3, [r7, #8]
 800e030:	2b00      	cmp	r3, #0
 800e032:	d101      	bne.n	800e038 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x18>
 800e034:	f017 fd07 	bl	8025a46 <abort>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d101      	bne.n	800e042 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x22>
 800e03e:	f017 fd02 	bl	8025a46 <abort>
    *result = const_cast<kTfLiteArrayType*>(
 800e042:	683b      	ldr	r3, [r7, #0]
 800e044:	687a      	ldr	r2, [r7, #4]
 800e046:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800e048:	2300      	movs	r3, #0
}
 800e04a:	4618      	mov	r0, r3
 800e04c:	3710      	adds	r7, #16
 800e04e:	46bd      	mov	sp, r7
 800e050:	bd80      	pop	{r7, pc}

0800e052 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>:
TfLiteStatus FlatBufferVectorToTfLiteTypeArray(
 800e052:	b580      	push	{r7, lr}
 800e054:	b084      	sub	sp, #16
 800e056:	af00      	add	r7, sp, #0
 800e058:	60f8      	str	r0, [r7, #12]
 800e05a:	60b9      	str	r1, [r7, #8]
 800e05c:	607a      	str	r2, [r7, #4]
 800e05e:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(error_reporter != nullptr);
 800e060:	68bb      	ldr	r3, [r7, #8]
 800e062:	2b00      	cmp	r3, #0
 800e064:	d101      	bne.n	800e06a <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x18>
 800e066:	f017 fcee 	bl	8025a46 <abort>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d101      	bne.n	800e074 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x22>
 800e070:	f017 fce9 	bl	8025a46 <abort>
    *result = const_cast<kTfLiteArrayType*>(
 800e074:	683b      	ldr	r3, [r7, #0]
 800e076:	687a      	ldr	r2, [r7, #4]
 800e078:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800e07a:	2300      	movs	r3, #0
}
 800e07c:	4618      	mov	r0, r3
 800e07e:	3710      	adds	r7, #16
 800e080:	46bd      	mov	sp, r7
 800e082:	bd80      	pop	{r7, pc}

0800e084 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800e084:	b580      	push	{r7, lr}
 800e086:	b084      	sub	sp, #16
 800e088:	af00      	add	r7, sp, #0
 800e08a:	6078      	str	r0, [r7, #4]
 800e08c:	460b      	mov	r3, r1
 800e08e:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800e090:	887b      	ldrh	r3, [r7, #2]
 800e092:	4619      	mov	r1, r3
 800e094:	6878      	ldr	r0, [r7, #4]
 800e096:	f7fa fba6 	bl	80087e6 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800e09a:	4603      	mov	r3, r0
 800e09c:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800e09e:	687a      	ldr	r2, [r7, #4]
 800e0a0:	89fb      	ldrh	r3, [r7, #14]
 800e0a2:	4413      	add	r3, r2
 800e0a4:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800e0a6:	89fb      	ldrh	r3, [r7, #14]
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d006      	beq.n	800e0ba <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t+0x36>
 800e0ac:	68b8      	ldr	r0, [r7, #8]
 800e0ae:	f7fb f9c4 	bl	800943a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800e0b2:	4602      	mov	r2, r0
 800e0b4:	68bb      	ldr	r3, [r7, #8]
 800e0b6:	4413      	add	r3, r2
                        : nullptr;
 800e0b8:	e000      	b.n	800e0bc <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800e0ba:	2300      	movs	r3, #0
  }
 800e0bc:	4618      	mov	r0, r3
 800e0be:	3710      	adds	r7, #16
 800e0c0:	46bd      	mov	sp, r7
 800e0c2:	bd80      	pop	{r7, pc}

0800e0c4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800e0c4:	b580      	push	{r7, lr}
 800e0c6:	b084      	sub	sp, #16
 800e0c8:	af00      	add	r7, sp, #0
 800e0ca:	6078      	str	r0, [r7, #4]
 800e0cc:	460b      	mov	r3, r1
 800e0ce:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800e0d0:	887b      	ldrh	r3, [r7, #2]
 800e0d2:	4619      	mov	r1, r3
 800e0d4:	6878      	ldr	r0, [r7, #4]
 800e0d6:	f7fa fb86 	bl	80087e6 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800e0da:	4603      	mov	r3, r0
 800e0dc:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800e0de:	687a      	ldr	r2, [r7, #4]
 800e0e0:	89fb      	ldrh	r3, [r7, #14]
 800e0e2:	4413      	add	r3, r2
 800e0e4:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800e0e6:	89fb      	ldrh	r3, [r7, #14]
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d006      	beq.n	800e0fa <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t+0x36>
 800e0ec:	68b8      	ldr	r0, [r7, #8]
 800e0ee:	f7fb f9a4 	bl	800943a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800e0f2:	4602      	mov	r2, r0
 800e0f4:	68bb      	ldr	r3, [r7, #8]
 800e0f6:	4413      	add	r3, r2
                        : nullptr;
 800e0f8:	e000      	b.n	800e0fc <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800e0fa:	2300      	movs	r3, #0
  }
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	3710      	adds	r7, #16
 800e100:	46bd      	mov	sp, r7
 800e102:	bd80      	pop	{r7, pc}

0800e104 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800e104:	b580      	push	{r7, lr}
 800e106:	b084      	sub	sp, #16
 800e108:	af00      	add	r7, sp, #0
 800e10a:	6078      	str	r0, [r7, #4]
 800e10c:	460b      	mov	r3, r1
 800e10e:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800e110:	887b      	ldrh	r3, [r7, #2]
 800e112:	4619      	mov	r1, r3
 800e114:	6878      	ldr	r0, [r7, #4]
 800e116:	f7fa fb66 	bl	80087e6 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800e11a:	4603      	mov	r3, r0
 800e11c:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800e11e:	687a      	ldr	r2, [r7, #4]
 800e120:	89fb      	ldrh	r3, [r7, #14]
 800e122:	4413      	add	r3, r2
 800e124:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800e126:	89fb      	ldrh	r3, [r7, #14]
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d006      	beq.n	800e13a <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t+0x36>
 800e12c:	68b8      	ldr	r0, [r7, #8]
 800e12e:	f7fb f984 	bl	800943a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800e132:	4602      	mov	r2, r0
 800e134:	68bb      	ldr	r3, [r7, #8]
 800e136:	4413      	add	r3, r2
                        : nullptr;
 800e138:	e000      	b.n	800e13c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800e13a:	2300      	movs	r3, #0
  }
 800e13c:	4618      	mov	r0, r3
 800e13e:	3710      	adds	r7, #16
 800e140:	46bd      	mov	sp, r7
 800e142:	bd80      	pop	{r7, pc}

0800e144 <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800e144:	b580      	push	{r7, lr}
 800e146:	b084      	sub	sp, #16
 800e148:	af00      	add	r7, sp, #0
 800e14a:	6078      	str	r0, [r7, #4]
 800e14c:	460b      	mov	r3, r1
 800e14e:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800e150:	887b      	ldrh	r3, [r7, #2]
 800e152:	4619      	mov	r1, r3
 800e154:	6878      	ldr	r0, [r7, #4]
 800e156:	f7fa fb46 	bl	80087e6 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800e15a:	4603      	mov	r3, r0
 800e15c:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800e15e:	687a      	ldr	r2, [r7, #4]
 800e160:	89fb      	ldrh	r3, [r7, #14]
 800e162:	4413      	add	r3, r2
 800e164:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800e166:	89fb      	ldrh	r3, [r7, #14]
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d006      	beq.n	800e17a <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t+0x36>
 800e16c:	68b8      	ldr	r0, [r7, #8]
 800e16e:	f7fb f964 	bl	800943a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800e172:	4602      	mov	r2, r0
 800e174:	68bb      	ldr	r3, [r7, #8]
 800e176:	4413      	add	r3, r2
                        : nullptr;
 800e178:	e000      	b.n	800e17c <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800e17a:	2300      	movs	r3, #0
  }
 800e17c:	4618      	mov	r0, r3
 800e17e:	3710      	adds	r7, #16
 800e180:	46bd      	mov	sp, r7
 800e182:	bd80      	pop	{r7, pc}

0800e184 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800e184:	b580      	push	{r7, lr}
 800e186:	b084      	sub	sp, #16
 800e188:	af00      	add	r7, sp, #0
 800e18a:	6078      	str	r0, [r7, #4]
 800e18c:	460b      	mov	r3, r1
 800e18e:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800e190:	887b      	ldrh	r3, [r7, #2]
 800e192:	4619      	mov	r1, r3
 800e194:	6878      	ldr	r0, [r7, #4]
 800e196:	f7fa fb26 	bl	80087e6 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800e19a:	4603      	mov	r3, r0
 800e19c:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800e19e:	687a      	ldr	r2, [r7, #4]
 800e1a0:	89fb      	ldrh	r3, [r7, #14]
 800e1a2:	4413      	add	r3, r2
 800e1a4:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800e1a6:	89fb      	ldrh	r3, [r7, #14]
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d006      	beq.n	800e1ba <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t+0x36>
 800e1ac:	68b8      	ldr	r0, [r7, #8]
 800e1ae:	f7fb f944 	bl	800943a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800e1b2:	4602      	mov	r2, r0
 800e1b4:	68bb      	ldr	r3, [r7, #8]
 800e1b6:	4413      	add	r3, r2
                        : nullptr;
 800e1b8:	e000      	b.n	800e1bc <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800e1ba:	2300      	movs	r3, #0
  }
 800e1bc:	4618      	mov	r0, r3
 800e1be:	3710      	adds	r7, #16
 800e1c0:	46bd      	mov	sp, r7
 800e1c2:	bd80      	pop	{r7, pc}

0800e1c4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800e1c4:	b580      	push	{r7, lr}
 800e1c6:	b084      	sub	sp, #16
 800e1c8:	af00      	add	r7, sp, #0
 800e1ca:	6078      	str	r0, [r7, #4]
 800e1cc:	460b      	mov	r3, r1
 800e1ce:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800e1d0:	887b      	ldrh	r3, [r7, #2]
 800e1d2:	4619      	mov	r1, r3
 800e1d4:	6878      	ldr	r0, [r7, #4]
 800e1d6:	f7fa fb06 	bl	80087e6 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800e1da:	4603      	mov	r3, r0
 800e1dc:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800e1de:	687a      	ldr	r2, [r7, #4]
 800e1e0:	89fb      	ldrh	r3, [r7, #14]
 800e1e2:	4413      	add	r3, r2
 800e1e4:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800e1e6:	89fb      	ldrh	r3, [r7, #14]
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d006      	beq.n	800e1fa <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t+0x36>
 800e1ec:	68b8      	ldr	r0, [r7, #8]
 800e1ee:	f7fb f924 	bl	800943a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800e1f2:	4602      	mov	r2, r0
 800e1f4:	68bb      	ldr	r3, [r7, #8]
 800e1f6:	4413      	add	r3, r2
                        : nullptr;
 800e1f8:	e000      	b.n	800e1fc <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800e1fa:	2300      	movs	r3, #0
  }
 800e1fc:	4618      	mov	r0, r3
 800e1fe:	3710      	adds	r7, #16
 800e200:	46bd      	mov	sp, r7
 800e202:	bd80      	pop	{r7, pc}

0800e204 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800e204:	b580      	push	{r7, lr}
 800e206:	b084      	sub	sp, #16
 800e208:	af00      	add	r7, sp, #0
 800e20a:	6078      	str	r0, [r7, #4]
 800e20c:	460b      	mov	r3, r1
 800e20e:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800e210:	887b      	ldrh	r3, [r7, #2]
 800e212:	4619      	mov	r1, r3
 800e214:	6878      	ldr	r0, [r7, #4]
 800e216:	f7fa fae6 	bl	80087e6 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800e21a:	4603      	mov	r3, r0
 800e21c:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800e21e:	687a      	ldr	r2, [r7, #4]
 800e220:	89fb      	ldrh	r3, [r7, #14]
 800e222:	4413      	add	r3, r2
 800e224:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800e226:	89fb      	ldrh	r3, [r7, #14]
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d006      	beq.n	800e23a <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t+0x36>
 800e22c:	68b8      	ldr	r0, [r7, #8]
 800e22e:	f7fb f904 	bl	800943a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800e232:	4602      	mov	r2, r0
 800e234:	68bb      	ldr	r3, [r7, #8]
 800e236:	4413      	add	r3, r2
                        : nullptr;
 800e238:	e000      	b.n	800e23c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800e23a:	2300      	movs	r3, #0
  }
 800e23c:	4618      	mov	r0, r3
 800e23e:	3710      	adds	r7, #16
 800e240:	46bd      	mov	sp, r7
 800e242:	bd80      	pop	{r7, pc}

0800e244 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800e244:	b580      	push	{r7, lr}
 800e246:	b084      	sub	sp, #16
 800e248:	af00      	add	r7, sp, #0
 800e24a:	6078      	str	r0, [r7, #4]
 800e24c:	460b      	mov	r3, r1
 800e24e:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800e250:	887b      	ldrh	r3, [r7, #2]
 800e252:	4619      	mov	r1, r3
 800e254:	6878      	ldr	r0, [r7, #4]
 800e256:	f7fa fac6 	bl	80087e6 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800e25a:	4603      	mov	r3, r0
 800e25c:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800e25e:	687a      	ldr	r2, [r7, #4]
 800e260:	89fb      	ldrh	r3, [r7, #14]
 800e262:	4413      	add	r3, r2
 800e264:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800e266:	89fb      	ldrh	r3, [r7, #14]
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d006      	beq.n	800e27a <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t+0x36>
 800e26c:	68b8      	ldr	r0, [r7, #8]
 800e26e:	f7fb f8e4 	bl	800943a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800e272:	4602      	mov	r2, r0
 800e274:	68bb      	ldr	r3, [r7, #8]
 800e276:	4413      	add	r3, r2
                        : nullptr;
 800e278:	e000      	b.n	800e27c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800e27a:	2300      	movs	r3, #0
  }
 800e27c:	4618      	mov	r0, r3
 800e27e:	3710      	adds	r7, #16
 800e280:	46bd      	mov	sp, r7
 800e282:	bd80      	pop	{r7, pc}

0800e284 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800e284:	b580      	push	{r7, lr}
 800e286:	b084      	sub	sp, #16
 800e288:	af00      	add	r7, sp, #0
 800e28a:	6078      	str	r0, [r7, #4]
 800e28c:	460b      	mov	r3, r1
 800e28e:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800e290:	887b      	ldrh	r3, [r7, #2]
 800e292:	4619      	mov	r1, r3
 800e294:	6878      	ldr	r0, [r7, #4]
 800e296:	f7fa faa6 	bl	80087e6 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800e29a:	4603      	mov	r3, r0
 800e29c:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800e29e:	687a      	ldr	r2, [r7, #4]
 800e2a0:	89fb      	ldrh	r3, [r7, #14]
 800e2a2:	4413      	add	r3, r2
 800e2a4:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800e2a6:	89fb      	ldrh	r3, [r7, #14]
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d006      	beq.n	800e2ba <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t+0x36>
 800e2ac:	68b8      	ldr	r0, [r7, #8]
 800e2ae:	f7fb f8c4 	bl	800943a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800e2b2:	4602      	mov	r2, r0
 800e2b4:	68bb      	ldr	r3, [r7, #8]
 800e2b6:	4413      	add	r3, r2
                        : nullptr;
 800e2b8:	e000      	b.n	800e2bc <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800e2ba:	2300      	movs	r3, #0
  }
 800e2bc:	4618      	mov	r0, r3
 800e2be:	3710      	adds	r7, #16
 800e2c0:	46bd      	mov	sp, r7
 800e2c2:	bd80      	pop	{r7, pc}

0800e2c4 <_ZNK11flatbuffers6VectorIhE4DataEv>:
  const uint8_t *Data() const {
 800e2c4:	b480      	push	{r7}
 800e2c6:	b083      	sub	sp, #12
 800e2c8:	af00      	add	r7, sp, #0
 800e2ca:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	3304      	adds	r3, #4
  }
 800e2d0:	4618      	mov	r0, r3
 800e2d2:	370c      	adds	r7, #12
 800e2d4:	46bd      	mov	sp, r7
 800e2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2da:	4770      	bx	lr

0800e2dc <_ZN11flatbuffers14IndirectHelperIfE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 800e2dc:	b580      	push	{r7, lr}
 800e2de:	b082      	sub	sp, #8
 800e2e0:	af00      	add	r7, sp, #0
 800e2e2:	6078      	str	r0, [r7, #4]
 800e2e4:	6039      	str	r1, [r7, #0]
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 800e2e6:	683b      	ldr	r3, [r7, #0]
 800e2e8:	009b      	lsls	r3, r3, #2
 800e2ea:	687a      	ldr	r2, [r7, #4]
 800e2ec:	4413      	add	r3, r2
 800e2ee:	edd3 7a00 	vldr	s15, [r3]
 800e2f2:	eeb0 0a67 	vmov.f32	s0, s15
 800e2f6:	f7fb ff30 	bl	800a15a <_ZN11flatbuffers12EndianScalarIfEET_S1_>
 800e2fa:	eef0 7a40 	vmov.f32	s15, s0
  }
 800e2fe:	eeb0 0a67 	vmov.f32	s0, s15
 800e302:	3708      	adds	r7, #8
 800e304:	46bd      	mov	sp, r7
 800e306:	bd80      	pop	{r7, pc}

0800e308 <_ZNK11flatbuffers6VectorIfE4DataEv>:
  const uint8_t *Data() const {
 800e308:	b480      	push	{r7}
 800e30a:	b083      	sub	sp, #12
 800e30c:	af00      	add	r7, sp, #0
 800e30e:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	3304      	adds	r3, #4
  }
 800e314:	4618      	mov	r0, r3
 800e316:	370c      	adds	r7, #12
 800e318:	46bd      	mov	sp, r7
 800e31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e31e:	4770      	bx	lr

0800e320 <_ZN11flatbuffers14IndirectHelperIxE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 800e320:	b580      	push	{r7, lr}
 800e322:	b082      	sub	sp, #8
 800e324:	af00      	add	r7, sp, #0
 800e326:	6078      	str	r0, [r7, #4]
 800e328:	6039      	str	r1, [r7, #0]
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 800e32a:	683b      	ldr	r3, [r7, #0]
 800e32c:	00db      	lsls	r3, r3, #3
 800e32e:	687a      	ldr	r2, [r7, #4]
 800e330:	4413      	add	r3, r2
 800e332:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e336:	4610      	mov	r0, r2
 800e338:	4619      	mov	r1, r3
 800e33a:	f000 f8b3 	bl	800e4a4 <_ZN11flatbuffers12EndianScalarIxEET_S1_>
 800e33e:	4602      	mov	r2, r0
 800e340:	460b      	mov	r3, r1
  }
 800e342:	4610      	mov	r0, r2
 800e344:	4619      	mov	r1, r3
 800e346:	3708      	adds	r7, #8
 800e348:	46bd      	mov	sp, r7
 800e34a:	bd80      	pop	{r7, pc}

0800e34c <_ZNK11flatbuffers6VectorIxE4DataEv>:
  const uint8_t *Data() const {
 800e34c:	b480      	push	{r7}
 800e34e:	b083      	sub	sp, #12
 800e350:	af00      	add	r7, sp, #0
 800e352:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	3304      	adds	r3, #4
  }
 800e358:	4618      	mov	r0, r3
 800e35a:	370c      	adds	r7, #12
 800e35c:	46bd      	mov	sp, r7
 800e35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e362:	4770      	bx	lr

0800e364 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6TensorEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 800e364:	b580      	push	{r7, lr}
 800e366:	b082      	sub	sp, #8
 800e368:	af00      	add	r7, sp, #0
 800e36a:	6078      	str	r0, [r7, #4]
 800e36c:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 800e36e:	683b      	ldr	r3, [r7, #0]
 800e370:	009b      	lsls	r3, r3, #2
 800e372:	687a      	ldr	r2, [r7, #4]
 800e374:	4413      	add	r3, r2
 800e376:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 800e378:	6878      	ldr	r0, [r7, #4]
 800e37a:	f7fb f85e 	bl	800943a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800e37e:	4602      	mov	r2, r0
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	4413      	add	r3, r2
  }
 800e384:	4618      	mov	r0, r3
 800e386:	3708      	adds	r7, #8
 800e388:	46bd      	mov	sp, r7
 800e38a:	bd80      	pop	{r7, pc}

0800e38c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4DataEv>:
  const uint8_t *Data() const {
 800e38c:	b480      	push	{r7}
 800e38e:	b083      	sub	sp, #12
 800e390:	af00      	add	r7, sp, #0
 800e392:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	3304      	adds	r3, #4
  }
 800e398:	4618      	mov	r0, r3
 800e39a:	370c      	adds	r7, #12
 800e39c:	46bd      	mov	sp, r7
 800e39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a2:	4770      	bx	lr

0800e3a4 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8OperatorEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 800e3a4:	b580      	push	{r7, lr}
 800e3a6:	b082      	sub	sp, #8
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	6078      	str	r0, [r7, #4]
 800e3ac:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 800e3ae:	683b      	ldr	r3, [r7, #0]
 800e3b0:	009b      	lsls	r3, r3, #2
 800e3b2:	687a      	ldr	r2, [r7, #4]
 800e3b4:	4413      	add	r3, r2
 800e3b6:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 800e3b8:	6878      	ldr	r0, [r7, #4]
 800e3ba:	f7fb f83e 	bl	800943a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800e3be:	4602      	mov	r2, r0
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	4413      	add	r3, r2
  }
 800e3c4:	4618      	mov	r0, r3
 800e3c6:	3708      	adds	r7, #8
 800e3c8:	46bd      	mov	sp, r7
 800e3ca:	bd80      	pop	{r7, pc}

0800e3cc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4DataEv>:
  const uint8_t *Data() const {
 800e3cc:	b480      	push	{r7}
 800e3ce:	b083      	sub	sp, #12
 800e3d0:	af00      	add	r7, sp, #0
 800e3d2:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	3304      	adds	r3, #4
  }
 800e3d8:	4618      	mov	r0, r3
 800e3da:	370c      	adds	r7, #12
 800e3dc:	46bd      	mov	sp, r7
 800e3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e2:	4770      	bx	lr

0800e3e4 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8SubGraphEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 800e3e4:	b580      	push	{r7, lr}
 800e3e6:	b082      	sub	sp, #8
 800e3e8:	af00      	add	r7, sp, #0
 800e3ea:	6078      	str	r0, [r7, #4]
 800e3ec:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 800e3ee:	683b      	ldr	r3, [r7, #0]
 800e3f0:	009b      	lsls	r3, r3, #2
 800e3f2:	687a      	ldr	r2, [r7, #4]
 800e3f4:	4413      	add	r3, r2
 800e3f6:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 800e3f8:	6878      	ldr	r0, [r7, #4]
 800e3fa:	f7fb f81e 	bl	800943a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800e3fe:	4602      	mov	r2, r0
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	4413      	add	r3, r2
  }
 800e404:	4618      	mov	r0, r3
 800e406:	3708      	adds	r7, #8
 800e408:	46bd      	mov	sp, r7
 800e40a:	bd80      	pop	{r7, pc}

0800e40c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4DataEv>:
  const uint8_t *Data() const {
 800e40c:	b480      	push	{r7}
 800e40e:	b083      	sub	sp, #12
 800e410:	af00      	add	r7, sp, #0
 800e412:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	3304      	adds	r3, #4
  }
 800e418:	4618      	mov	r0, r3
 800e41a:	370c      	adds	r7, #12
 800e41c:	46bd      	mov	sp, r7
 800e41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e422:	4770      	bx	lr

0800e424 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6BufferEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 800e424:	b580      	push	{r7, lr}
 800e426:	b082      	sub	sp, #8
 800e428:	af00      	add	r7, sp, #0
 800e42a:	6078      	str	r0, [r7, #4]
 800e42c:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 800e42e:	683b      	ldr	r3, [r7, #0]
 800e430:	009b      	lsls	r3, r3, #2
 800e432:	687a      	ldr	r2, [r7, #4]
 800e434:	4413      	add	r3, r2
 800e436:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 800e438:	6878      	ldr	r0, [r7, #4]
 800e43a:	f7fa fffe 	bl	800943a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800e43e:	4602      	mov	r2, r0
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	4413      	add	r3, r2
  }
 800e444:	4618      	mov	r0, r3
 800e446:	3708      	adds	r7, #8
 800e448:	46bd      	mov	sp, r7
 800e44a:	bd80      	pop	{r7, pc}

0800e44c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE4DataEv>:
  const uint8_t *Data() const {
 800e44c:	b480      	push	{r7}
 800e44e:	b083      	sub	sp, #12
 800e450:	af00      	add	r7, sp, #0
 800e452:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	3304      	adds	r3, #4
  }
 800e458:	4618      	mov	r0, r3
 800e45a:	370c      	adds	r7, #12
 800e45c:	46bd      	mov	sp, r7
 800e45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e462:	4770      	bx	lr

0800e464 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8MetadataEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 800e464:	b580      	push	{r7, lr}
 800e466:	b082      	sub	sp, #8
 800e468:	af00      	add	r7, sp, #0
 800e46a:	6078      	str	r0, [r7, #4]
 800e46c:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 800e46e:	683b      	ldr	r3, [r7, #0]
 800e470:	009b      	lsls	r3, r3, #2
 800e472:	687a      	ldr	r2, [r7, #4]
 800e474:	4413      	add	r3, r2
 800e476:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 800e478:	6878      	ldr	r0, [r7, #4]
 800e47a:	f7fa ffde 	bl	800943a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800e47e:	4602      	mov	r2, r0
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	4413      	add	r3, r2
  }
 800e484:	4618      	mov	r0, r3
 800e486:	3708      	adds	r7, #8
 800e488:	46bd      	mov	sp, r7
 800e48a:	bd80      	pop	{r7, pc}

0800e48c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4DataEv>:
  const uint8_t *Data() const {
 800e48c:	b480      	push	{r7}
 800e48e:	b083      	sub	sp, #12
 800e490:	af00      	add	r7, sp, #0
 800e492:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	3304      	adds	r3, #4
  }
 800e498:	4618      	mov	r0, r3
 800e49a:	370c      	adds	r7, #12
 800e49c:	46bd      	mov	sp, r7
 800e49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4a2:	4770      	bx	lr

0800e4a4 <_ZN11flatbuffers12EndianScalarIxEET_S1_>:
template<typename T> T EndianScalar(T t) {
 800e4a4:	b480      	push	{r7}
 800e4a6:	b083      	sub	sp, #12
 800e4a8:	af00      	add	r7, sp, #0
 800e4aa:	e9c7 0100 	strd	r0, r1, [r7]
    return t;
 800e4ae:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800e4b2:	4610      	mov	r0, r2
 800e4b4:	4619      	mov	r1, r3
 800e4b6:	370c      	adds	r7, #12
 800e4b8:	46bd      	mov	sp, r7
 800e4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4be:	4770      	bx	lr

0800e4c0 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev>:
class MicroBuiltinDataAllocator : public BuiltinDataAllocator {
 800e4c0:	b580      	push	{r7, lr}
 800e4c2:	b082      	sub	sp, #8
 800e4c4:	af00      	add	r7, sp, #0
 800e4c6:	6078      	str	r0, [r7, #4]
 800e4c8:	4a05      	ldr	r2, [pc, #20]	; (800e4e0 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev+0x20>)
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	601a      	str	r2, [r3, #0]
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	4618      	mov	r0, r3
 800e4d2:	f7fd ffcf 	bl	800c474 <_ZN6tflite20BuiltinDataAllocatorD1Ev>
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	4618      	mov	r0, r3
 800e4da:	3708      	adds	r7, #8
 800e4dc:	46bd      	mov	sp, r7
 800e4de:	bd80      	pop	{r7, pc}
 800e4e0:	0802c96c 	.word	0x0802c96c

0800e4e4 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD0Ev>:
 800e4e4:	b580      	push	{r7, lr}
 800e4e6:	b082      	sub	sp, #8
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	6078      	str	r0, [r7, #4]
 800e4ec:	6878      	ldr	r0, [r7, #4]
 800e4ee:	f7ff ffe7 	bl	800e4c0 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev>
 800e4f2:	2108      	movs	r1, #8
 800e4f4:	6878      	ldr	r0, [r7, #4]
 800e4f6:	f017 f820 	bl	802553a <_ZdlPvj>
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	4618      	mov	r0, r3
 800e4fe:	3708      	adds	r7, #8
 800e500:	46bd      	mov	sp, r7
 800e502:	bd80      	pop	{r7, pc}

0800e504 <_ZN6tflite13ErrorReporterD1Ev>:
/// Subclass ErrorReporter to provide another reporting destination.
/// For example, if you have a GUI program, you might redirect to a buffer
/// that drives a GUI error log box.
class ErrorReporter {
 public:
  virtual ~ErrorReporter() {}
 800e504:	b480      	push	{r7}
 800e506:	b083      	sub	sp, #12
 800e508:	af00      	add	r7, sp, #0
 800e50a:	6078      	str	r0, [r7, #4]
 800e50c:	4a04      	ldr	r2, [pc, #16]	; (800e520 <_ZN6tflite13ErrorReporterD1Ev+0x1c>)
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	601a      	str	r2, [r3, #0]
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	4618      	mov	r0, r3
 800e516:	370c      	adds	r7, #12
 800e518:	46bd      	mov	sp, r7
 800e51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e51e:	4770      	bx	lr
 800e520:	0802c9ec 	.word	0x0802c9ec

0800e524 <_ZN6tflite13ErrorReporterD0Ev>:
 800e524:	b580      	push	{r7, lr}
 800e526:	b082      	sub	sp, #8
 800e528:	af00      	add	r7, sp, #0
 800e52a:	6078      	str	r0, [r7, #4]
 800e52c:	6878      	ldr	r0, [r7, #4]
 800e52e:	f7ff ffe9 	bl	800e504 <_ZN6tflite13ErrorReporterD1Ev>
 800e532:	2104      	movs	r1, #4
 800e534:	6878      	ldr	r0, [r7, #4]
 800e536:	f017 f800 	bl	802553a <_ZdlPvj>
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	4618      	mov	r0, r3
 800e53e:	3708      	adds	r7, #8
 800e540:	46bd      	mov	sp, r7
 800e542:	bd80      	pop	{r7, pc}

0800e544 <_ZN6tflite18MicroErrorReporterD1Ev>:
// Get a pointer to a singleton global error reporter.
ErrorReporter* GetMicroErrorReporter();

class MicroErrorReporter : public ErrorReporter {
 public:
  ~MicroErrorReporter() override {}
 800e544:	b580      	push	{r7, lr}
 800e546:	b082      	sub	sp, #8
 800e548:	af00      	add	r7, sp, #0
 800e54a:	6078      	str	r0, [r7, #4]
 800e54c:	4a05      	ldr	r2, [pc, #20]	; (800e564 <_ZN6tflite18MicroErrorReporterD1Ev+0x20>)
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	601a      	str	r2, [r3, #0]
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	4618      	mov	r0, r3
 800e556:	f7ff ffd5 	bl	800e504 <_ZN6tflite13ErrorReporterD1Ev>
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	4618      	mov	r0, r3
 800e55e:	3708      	adds	r7, #8
 800e560:	46bd      	mov	sp, r7
 800e562:	bd80      	pop	{r7, pc}
 800e564:	0802c9d8 	.word	0x0802c9d8

0800e568 <_ZN6tflite18MicroErrorReporterD0Ev>:
 800e568:	b580      	push	{r7, lr}
 800e56a:	b082      	sub	sp, #8
 800e56c:	af00      	add	r7, sp, #0
 800e56e:	6078      	str	r0, [r7, #4]
 800e570:	6878      	ldr	r0, [r7, #4]
 800e572:	f7ff ffe7 	bl	800e544 <_ZN6tflite18MicroErrorReporterD1Ev>
 800e576:	2104      	movs	r1, #4
 800e578:	6878      	ldr	r0, [r7, #4]
 800e57a:	f016 ffde 	bl	802553a <_ZdlPvj>
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	4618      	mov	r0, r3
 800e582:	3708      	adds	r7, #8
 800e584:	46bd      	mov	sp, r7
 800e586:	bd80      	pop	{r7, pc}

0800e588 <_ZN12_GLOBAL__N_13LogEPKcSt9__va_list>:

namespace {
uint8_t micro_error_reporter_buffer[sizeof(tflite::MicroErrorReporter)];
tflite::MicroErrorReporter* error_reporter_ = nullptr;

void Log(const char* format, va_list args) {
 800e588:	b580      	push	{r7, lr}
 800e58a:	b0c2      	sub	sp, #264	; 0x108
 800e58c:	af00      	add	r7, sp, #0
 800e58e:	1d3b      	adds	r3, r7, #4
 800e590:	6018      	str	r0, [r3, #0]
 800e592:	463b      	mov	r3, r7
 800e594:	6019      	str	r1, [r3, #0]
  // Only pulling in the implementation of this function for builds where we
  // expect to make use of it to be extra cautious about not increasing the code
  // size.
  static constexpr int kMaxLogLen = 256;
  char log_buffer[kMaxLogLen];
  MicroVsnprintf(log_buffer, kMaxLogLen, format, args);
 800e596:	463b      	mov	r3, r7
 800e598:	1d3a      	adds	r2, r7, #4
 800e59a:	f107 0008 	add.w	r0, r7, #8
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	6812      	ldr	r2, [r2, #0]
 800e5a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e5a6:	f001 fc35 	bl	800fe14 <MicroVsnprintf>
  DebugLog(log_buffer);
 800e5aa:	f107 0308 	add.w	r3, r7, #8
 800e5ae:	4618      	mov	r0, r3
 800e5b0:	f7fd fc12 	bl	800bdd8 <DebugLog>
  DebugLog("\r\n");
 800e5b4:	4803      	ldr	r0, [pc, #12]	; (800e5c4 <_ZN12_GLOBAL__N_13LogEPKcSt9__va_list+0x3c>)
 800e5b6:	f7fd fc0f 	bl	800bdd8 <DebugLog>
#endif
}
 800e5ba:	bf00      	nop
 800e5bc:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800e5c0:	46bd      	mov	sp, r7
 800e5c2:	bd80      	pop	{r7, pc}
 800e5c4:	0802883c 	.word	0x0802883c

0800e5c8 <_Z11MicroPrintfPKcz>:

}  // namespace

#if !defined(TF_LITE_STRIP_ERROR_STRINGS)
void MicroPrintf(const char* format, ...) {
 800e5c8:	b40f      	push	{r0, r1, r2, r3}
 800e5ca:	b580      	push	{r7, lr}
 800e5cc:	b082      	sub	sp, #8
 800e5ce:	af00      	add	r7, sp, #0
  va_list args;
  va_start(args, format);
 800e5d0:	f107 0314 	add.w	r3, r7, #20
 800e5d4:	607b      	str	r3, [r7, #4]
  Log(format, args);
 800e5d6:	6879      	ldr	r1, [r7, #4]
 800e5d8:	6938      	ldr	r0, [r7, #16]
 800e5da:	f7ff ffd5 	bl	800e588 <_ZN12_GLOBAL__N_13LogEPKcSt9__va_list>
  va_end(args);
}
 800e5de:	bf00      	nop
 800e5e0:	3708      	adds	r7, #8
 800e5e2:	46bd      	mov	sp, r7
 800e5e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e5e8:	b004      	add	sp, #16
 800e5ea:	4770      	bx	lr

0800e5ec <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list>:
    error_reporter_ = new (micro_error_reporter_buffer) MicroErrorReporter();
  }
  return error_reporter_;
}

int MicroErrorReporter::Report(const char* format, va_list args) {
 800e5ec:	b580      	push	{r7, lr}
 800e5ee:	b084      	sub	sp, #16
 800e5f0:	af00      	add	r7, sp, #0
 800e5f2:	60f8      	str	r0, [r7, #12]
 800e5f4:	60b9      	str	r1, [r7, #8]
 800e5f6:	607a      	str	r2, [r7, #4]
  Log(format, args);
 800e5f8:	6879      	ldr	r1, [r7, #4]
 800e5fa:	68b8      	ldr	r0, [r7, #8]
 800e5fc:	f7ff ffc4 	bl	800e588 <_ZN12_GLOBAL__N_13LogEPKcSt9__va_list>
  return 0;
 800e600:	2300      	movs	r3, #0
}
 800e602:	4618      	mov	r0, r3
 800e604:	3710      	adds	r7, #16
 800e606:	46bd      	mov	sp, r7
 800e608:	bd80      	pop	{r7, pc}

0800e60a <_ZN6tflite19ScopedMicroProfilerC1EPKcPNS_13MicroProfilerE>:
//   ScopedMicroProfiler scoped_profiler("custom_tag", profiler);
//   work_to_profile();
// }
class ScopedMicroProfiler {
 public:
  explicit ScopedMicroProfiler(const char* tag, MicroProfiler* profiler)
 800e60a:	b580      	push	{r7, lr}
 800e60c:	b084      	sub	sp, #16
 800e60e:	af00      	add	r7, sp, #0
 800e610:	60f8      	str	r0, [r7, #12]
 800e612:	60b9      	str	r1, [r7, #8]
 800e614:	607a      	str	r2, [r7, #4]
      : profiler_(profiler) {
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	2200      	movs	r2, #0
 800e61a:	601a      	str	r2, [r3, #0]
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	687a      	ldr	r2, [r7, #4]
 800e620:	605a      	str	r2, [r3, #4]
    if (profiler_ != nullptr) {
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	685b      	ldr	r3, [r3, #4]
 800e626:	2b00      	cmp	r3, #0
 800e628:	d00c      	beq.n	800e644 <_ZN6tflite19ScopedMicroProfilerC1EPKcPNS_13MicroProfilerE+0x3a>
      event_handle_ = profiler_->BeginEvent(tag);
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	685a      	ldr	r2, [r3, #4]
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	685b      	ldr	r3, [r3, #4]
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	3308      	adds	r3, #8
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	68b9      	ldr	r1, [r7, #8]
 800e63a:	4610      	mov	r0, r2
 800e63c:	4798      	blx	r3
 800e63e:	4602      	mov	r2, r0
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	601a      	str	r2, [r3, #0]
    }
  }
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	4618      	mov	r0, r3
 800e648:	3710      	adds	r7, #16
 800e64a:	46bd      	mov	sp, r7
 800e64c:	bd80      	pop	{r7, pc}

0800e64e <_ZN6tflite19ScopedMicroProfilerD1Ev>:

  ~ScopedMicroProfiler() {
 800e64e:	b580      	push	{r7, lr}
 800e650:	b082      	sub	sp, #8
 800e652:	af00      	add	r7, sp, #0
 800e654:	6078      	str	r0, [r7, #4]
    if (profiler_ != nullptr) {
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	685b      	ldr	r3, [r3, #4]
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d00a      	beq.n	800e674 <_ZN6tflite19ScopedMicroProfilerD1Ev+0x26>
      profiler_->EndEvent(event_handle_);
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	6858      	ldr	r0, [r3, #4]
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	685b      	ldr	r3, [r3, #4]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	330c      	adds	r3, #12
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	687a      	ldr	r2, [r7, #4]
 800e66e:	6812      	ldr	r2, [r2, #0]
 800e670:	4611      	mov	r1, r2
 800e672:	4798      	blx	r3
    }
  }
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	4618      	mov	r0, r3
 800e678:	3708      	adds	r7, #8
 800e67a:	46bd      	mov	sp, r7
 800e67c:	bd80      	pop	{r7, pc}

0800e67e <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>:

namespace tflite {
namespace {

#ifndef TF_LITE_STRIP_ERROR_STRINGS
const char* OpNameFromRegistration(const TfLiteRegistration* registration) {
 800e67e:	b580      	push	{r7, lr}
 800e680:	b082      	sub	sp, #8
 800e682:	af00      	add	r7, sp, #0
 800e684:	6078      	str	r0, [r7, #4]
  if (registration->builtin_code == BuiltinOperator_CUSTOM) {
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	695b      	ldr	r3, [r3, #20]
 800e68a:	2b20      	cmp	r3, #32
 800e68c:	d102      	bne.n	800e694 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x16>
    return registration->custom_name;
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	699b      	ldr	r3, [r3, #24]
 800e692:	e007      	b.n	800e6a4 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x26>
  } else {
    return EnumNameBuiltinOperator(BuiltinOperator(registration->builtin_code));
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	695b      	ldr	r3, [r3, #20]
 800e698:	b2db      	uxtb	r3, r3
 800e69a:	4618      	mov	r0, r3
 800e69c:	f7fc fa32 	bl	800ab04 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 800e6a0:	4603      	mov	r3, r0
 800e6a2:	bf00      	nop
  }
}
 800e6a4:	4618      	mov	r0, r3
 800e6a6:	3708      	adds	r7, #8
 800e6a8:	46bd      	mov	sp, r7
 800e6aa:	bd80      	pop	{r7, pc}

0800e6ac <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE>:
#endif  // !defined(TF_LITE_STRIP_ERROR_STRINGS)

}  // namespace

MicroGraph::MicroGraph(TfLiteContext* context, const Model* model,
 800e6ac:	b580      	push	{r7, lr}
 800e6ae:	b084      	sub	sp, #16
 800e6b0:	af00      	add	r7, sp, #0
 800e6b2:	60f8      	str	r0, [r7, #12]
 800e6b4:	60b9      	str	r1, [r7, #8]
 800e6b6:	607a      	str	r2, [r7, #4]
 800e6b8:	603b      	str	r3, [r7, #0]
                       MicroAllocator* allocator)
    : context_(context),
      model_(model),
      allocator_(allocator),
      current_subgraph_index_(0) {
 800e6ba:	4a10      	ldr	r2, [pc, #64]	; (800e6fc <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE+0x50>)
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	601a      	str	r2, [r3, #0]
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	68ba      	ldr	r2, [r7, #8]
 800e6c4:	605a      	str	r2, [r3, #4]
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	687a      	ldr	r2, [r7, #4]
 800e6ca:	609a      	str	r2, [r3, #8]
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	683a      	ldr	r2, [r7, #0]
 800e6d0:	60da      	str	r2, [r3, #12]
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	2200      	movs	r2, #0
 800e6d6:	611a      	str	r2, [r3, #16]
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	2200      	movs	r2, #0
 800e6dc:	615a      	str	r2, [r3, #20]
  if (model != nullptr) {
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d005      	beq.n	800e6f0 <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE+0x44>
    subgraphs_ = model->subgraphs();
 800e6e4:	6878      	ldr	r0, [r7, #4]
 800e6e6:	f7fd fe9b 	bl	800c420 <_ZNK6tflite5Model9subgraphsEv>
 800e6ea:	4602      	mov	r2, r0
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	619a      	str	r2, [r3, #24]
  }
}
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	4618      	mov	r0, r3
 800e6f4:	3710      	adds	r7, #16
 800e6f6:	46bd      	mov	sp, r7
 800e6f8:	bd80      	pop	{r7, pc}
 800e6fa:	bf00      	nop
 800e6fc:	0802ca00 	.word	0x0802ca00

0800e700 <_ZN6tflite10MicroGraphD1Ev>:

MicroGraph::~MicroGraph() {}
 800e700:	b480      	push	{r7}
 800e702:	b083      	sub	sp, #12
 800e704:	af00      	add	r7, sp, #0
 800e706:	6078      	str	r0, [r7, #4]
 800e708:	4a04      	ldr	r2, [pc, #16]	; (800e71c <_ZN6tflite10MicroGraphD1Ev+0x1c>)
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	601a      	str	r2, [r3, #0]
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	4618      	mov	r0, r3
 800e712:	370c      	adds	r7, #12
 800e714:	46bd      	mov	sp, r7
 800e716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e71a:	4770      	bx	lr
 800e71c:	0802ca00 	.word	0x0802ca00

0800e720 <_ZN6tflite10MicroGraphD0Ev>:
 800e720:	b580      	push	{r7, lr}
 800e722:	b082      	sub	sp, #8
 800e724:	af00      	add	r7, sp, #0
 800e726:	6078      	str	r0, [r7, #4]
 800e728:	6878      	ldr	r0, [r7, #4]
 800e72a:	f7ff ffe9 	bl	800e700 <_ZN6tflite10MicroGraphD1Ev>
 800e72e:	211c      	movs	r1, #28
 800e730:	6878      	ldr	r0, [r7, #4]
 800e732:	f016 ff02 	bl	802553a <_ZdlPvj>
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	4618      	mov	r0, r3
 800e73a:	3708      	adds	r7, #8
 800e73c:	46bd      	mov	sp, r7
 800e73e:	bd80      	pop	{r7, pc}

0800e740 <_ZN6tflite10MicroGraph13InitSubgraphsEv>:

TfLiteStatus MicroGraph::InitSubgraphs() {
 800e740:	b580      	push	{r7, lr}
 800e742:	b08a      	sub	sp, #40	; 0x28
 800e744:	af00      	add	r7, sp, #0
 800e746:	6078      	str	r0, [r7, #4]
  int previous_subgraph_idx = current_subgraph_index_;
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	695b      	ldr	r3, [r3, #20]
 800e74c:	617b      	str	r3, [r7, #20]

  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 800e74e:	2300      	movs	r3, #0
 800e750:	627b      	str	r3, [r7, #36]	; 0x24
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	699b      	ldr	r3, [r3, #24]
 800e756:	4618      	mov	r0, r3
 800e758:	f7ff fb9e 	bl	800de98 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 800e75c:	4602      	mov	r2, r0
 800e75e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e760:	4293      	cmp	r3, r2
 800e762:	bf34      	ite	cc
 800e764:	2301      	movcc	r3, #1
 800e766:	2300      	movcs	r3, #0
 800e768:	b2db      	uxtb	r3, r3
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d05a      	beq.n	800e824 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0xe4>
       subgraph_idx++) {
    current_subgraph_index_ = subgraph_idx;
 800e76e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	615a      	str	r2, [r3, #20]

    const SubGraph* subgraph = (*subgraphs_)[subgraph_idx];
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	699b      	ldr	r3, [r3, #24]
 800e778:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e77a:	4618      	mov	r0, r3
 800e77c:	f7ff fc28 	bl	800dfd0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEEixEm>
 800e780:	6138      	str	r0, [r7, #16]
    for (size_t i = 0; i < subgraph->operators()->size(); ++i) {
 800e782:	2300      	movs	r3, #0
 800e784:	623b      	str	r3, [r7, #32]
 800e786:	6938      	ldr	r0, [r7, #16]
 800e788:	f7fd fe11 	bl	800c3ae <_ZNK6tflite8SubGraph9operatorsEv>
 800e78c:	4603      	mov	r3, r0
 800e78e:	4618      	mov	r0, r3
 800e790:	f7ff fb4e 	bl	800de30 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 800e794:	4602      	mov	r2, r0
 800e796:	6a3b      	ldr	r3, [r7, #32]
 800e798:	4293      	cmp	r3, r2
 800e79a:	bf34      	ite	cc
 800e79c:	2301      	movcc	r3, #1
 800e79e:	2300      	movcs	r3, #0
 800e7a0:	b2db      	uxtb	r3, r3
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d03a      	beq.n	800e81c <_ZN6tflite10MicroGraph13InitSubgraphsEv+0xdc>
      TfLiteNode* node =
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	691a      	ldr	r2, [r3, #16]
 800e7aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7ac:	00db      	lsls	r3, r3, #3
 800e7ae:	4413      	add	r3, r2
 800e7b0:	681a      	ldr	r2, [r3, #0]
 800e7b2:	6a3b      	ldr	r3, [r7, #32]
 800e7b4:	212c      	movs	r1, #44	; 0x2c
 800e7b6:	fb01 f303 	mul.w	r3, r1, r3
 800e7ba:	4413      	add	r3, r2
      TfLiteNode* node =
 800e7bc:	60fb      	str	r3, [r7, #12]
      const TfLiteRegistration* registration =
          subgraph_allocations_[subgraph_idx]
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	691a      	ldr	r2, [r3, #16]
 800e7c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7c4:	00db      	lsls	r3, r3, #3
 800e7c6:	4413      	add	r3, r2
              .node_and_registrations[i]
 800e7c8:	681a      	ldr	r2, [r3, #0]
 800e7ca:	6a3b      	ldr	r3, [r7, #32]
 800e7cc:	212c      	movs	r1, #44	; 0x2c
 800e7ce:	fb01 f303 	mul.w	r3, r1, r3
 800e7d2:	4413      	add	r3, r2
      const TfLiteRegistration* registration =
 800e7d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7d6:	60bb      	str	r3, [r7, #8]
              .registration;
      size_t init_data_size;
      const char* init_data;
      if (registration->builtin_code == BuiltinOperator_CUSTOM) {
 800e7d8:	68bb      	ldr	r3, [r7, #8]
 800e7da:	695b      	ldr	r3, [r3, #20]
 800e7dc:	2b20      	cmp	r3, #32
 800e7de:	d106      	bne.n	800e7ee <_ZN6tflite10MicroGraph13InitSubgraphsEv+0xae>
        init_data = reinterpret_cast<const char*>(node->custom_initial_data);
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	699b      	ldr	r3, [r3, #24]
 800e7e4:	61bb      	str	r3, [r7, #24]
        init_data_size = node->custom_initial_data_size;
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	69db      	ldr	r3, [r3, #28]
 800e7ea:	61fb      	str	r3, [r7, #28]
 800e7ec:	e004      	b.n	800e7f8 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0xb8>
      } else {
        init_data = reinterpret_cast<const char*>(node->builtin_data);
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	695b      	ldr	r3, [r3, #20]
 800e7f2:	61bb      	str	r3, [r7, #24]
        init_data_size = 0;
 800e7f4:	2300      	movs	r3, #0
 800e7f6:	61fb      	str	r3, [r7, #28]
      }
      if (registration->init) {
 800e7f8:	68bb      	ldr	r3, [r7, #8]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d009      	beq.n	800e814 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0xd4>
        node->user_data =
            registration->init(context_, init_data, init_data_size);
 800e800:	68bb      	ldr	r3, [r7, #8]
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	687a      	ldr	r2, [r7, #4]
 800e806:	6850      	ldr	r0, [r2, #4]
 800e808:	69fa      	ldr	r2, [r7, #28]
 800e80a:	69b9      	ldr	r1, [r7, #24]
 800e80c:	4798      	blx	r3
 800e80e:	4602      	mov	r2, r0
        node->user_data =
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	611a      	str	r2, [r3, #16]
    for (size_t i = 0; i < subgraph->operators()->size(); ++i) {
 800e814:	6a3b      	ldr	r3, [r7, #32]
 800e816:	3301      	adds	r3, #1
 800e818:	623b      	str	r3, [r7, #32]
 800e81a:	e7b4      	b.n	800e786 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x46>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 800e81c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e81e:	3301      	adds	r3, #1
 800e820:	627b      	str	r3, [r7, #36]	; 0x24
 800e822:	e796      	b.n	800e752 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x12>
      }
    }
  }
  current_subgraph_index_ = previous_subgraph_idx;
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	697a      	ldr	r2, [r7, #20]
 800e828:	615a      	str	r2, [r3, #20]

  return kTfLiteOk;
 800e82a:	2300      	movs	r3, #0
}
 800e82c:	4618      	mov	r0, r3
 800e82e:	3728      	adds	r7, #40	; 0x28
 800e830:	46bd      	mov	sp, r7
 800e832:	bd80      	pop	{r7, pc}

0800e834 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv>:

TfLiteStatus MicroGraph::PrepareSubgraphs() {
 800e834:	b580      	push	{r7, lr}
 800e836:	b08a      	sub	sp, #40	; 0x28
 800e838:	af00      	add	r7, sp, #0
 800e83a:	6078      	str	r0, [r7, #4]
  int previous_subgraph_idx = current_subgraph_index_;
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	695b      	ldr	r3, [r3, #20]
 800e840:	61fb      	str	r3, [r7, #28]

  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 800e842:	2300      	movs	r3, #0
 800e844:	627b      	str	r3, [r7, #36]	; 0x24
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	699b      	ldr	r3, [r3, #24]
 800e84a:	4618      	mov	r0, r3
 800e84c:	f7ff fb24 	bl	800de98 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 800e850:	4602      	mov	r2, r0
 800e852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e854:	4293      	cmp	r3, r2
 800e856:	bf34      	ite	cc
 800e858:	2301      	movcc	r3, #1
 800e85a:	2300      	movcs	r3, #0
 800e85c:	b2db      	uxtb	r3, r3
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d05e      	beq.n	800e920 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0xec>
       subgraph_idx++) {
    current_subgraph_index_ = subgraph_idx;
 800e862:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	615a      	str	r2, [r3, #20]

    const SubGraph* subgraph = (*subgraphs_)[subgraph_idx];
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	699b      	ldr	r3, [r3, #24]
 800e86c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e86e:	4618      	mov	r0, r3
 800e870:	f7ff fbae 	bl	800dfd0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEEixEm>
 800e874:	61b8      	str	r0, [r7, #24]
    for (size_t i = 0; i < subgraph->operators()->size(); ++i) {
 800e876:	2300      	movs	r3, #0
 800e878:	623b      	str	r3, [r7, #32]
 800e87a:	69b8      	ldr	r0, [r7, #24]
 800e87c:	f7fd fd97 	bl	800c3ae <_ZNK6tflite8SubGraph9operatorsEv>
 800e880:	4603      	mov	r3, r0
 800e882:	4618      	mov	r0, r3
 800e884:	f7ff fad4 	bl	800de30 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 800e888:	4602      	mov	r2, r0
 800e88a:	6a3b      	ldr	r3, [r7, #32]
 800e88c:	4293      	cmp	r3, r2
 800e88e:	bf34      	ite	cc
 800e890:	2301      	movcc	r3, #1
 800e892:	2300      	movcs	r3, #0
 800e894:	b2db      	uxtb	r3, r3
 800e896:	2b00      	cmp	r3, #0
 800e898:	d03e      	beq.n	800e918 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0xe4>
      TfLiteNode* node =
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	691a      	ldr	r2, [r3, #16]
 800e89e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8a0:	00db      	lsls	r3, r3, #3
 800e8a2:	4413      	add	r3, r2
 800e8a4:	681a      	ldr	r2, [r3, #0]
 800e8a6:	6a3b      	ldr	r3, [r7, #32]
 800e8a8:	212c      	movs	r1, #44	; 0x2c
 800e8aa:	fb01 f303 	mul.w	r3, r1, r3
 800e8ae:	4413      	add	r3, r2
      TfLiteNode* node =
 800e8b0:	617b      	str	r3, [r7, #20]
      const TfLiteRegistration* registration =
          subgraph_allocations_[subgraph_idx]
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	691a      	ldr	r2, [r3, #16]
 800e8b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8b8:	00db      	lsls	r3, r3, #3
 800e8ba:	4413      	add	r3, r2
              .node_and_registrations[i]
 800e8bc:	681a      	ldr	r2, [r3, #0]
 800e8be:	6a3b      	ldr	r3, [r7, #32]
 800e8c0:	212c      	movs	r1, #44	; 0x2c
 800e8c2:	fb01 f303 	mul.w	r3, r1, r3
 800e8c6:	4413      	add	r3, r2
      const TfLiteRegistration* registration =
 800e8c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e8ca:	613b      	str	r3, [r7, #16]
              .registration;
      if (registration->prepare != nullptr) {
 800e8cc:	693b      	ldr	r3, [r7, #16]
 800e8ce:	689b      	ldr	r3, [r3, #8]
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d016      	beq.n	800e902 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0xce>
        TfLiteStatus prepare_status = registration->prepare(context_, node);
 800e8d4:	693b      	ldr	r3, [r7, #16]
 800e8d6:	689b      	ldr	r3, [r3, #8]
 800e8d8:	687a      	ldr	r2, [r7, #4]
 800e8da:	6852      	ldr	r2, [r2, #4]
 800e8dc:	6979      	ldr	r1, [r7, #20]
 800e8de:	4610      	mov	r0, r2
 800e8e0:	4798      	blx	r3
 800e8e2:	4603      	mov	r3, r0
 800e8e4:	73fb      	strb	r3, [r7, #15]
        if (prepare_status != kTfLiteOk) {
 800e8e6:	7bfb      	ldrb	r3, [r7, #15]
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d00a      	beq.n	800e902 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0xce>
          MicroPrintf("Node %s (number %df) failed to prepare with status %d",
 800e8ec:	6938      	ldr	r0, [r7, #16]
 800e8ee:	f7ff fec6 	bl	800e67e <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
 800e8f2:	4601      	mov	r1, r0
 800e8f4:	7bfb      	ldrb	r3, [r7, #15]
 800e8f6:	6a3a      	ldr	r2, [r7, #32]
 800e8f8:	480d      	ldr	r0, [pc, #52]	; (800e930 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0xfc>)
 800e8fa:	f7ff fe65 	bl	800e5c8 <_Z11MicroPrintfPKcz>
                      OpNameFromRegistration(registration), i, prepare_status);
          return kTfLiteError;
 800e8fe:	2301      	movs	r3, #1
 800e900:	e012      	b.n	800e928 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0xf4>
        }
      }
      allocator_->FinishPrepareNodeAllocations(/*node_id=*/i);
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	68db      	ldr	r3, [r3, #12]
 800e906:	6a3a      	ldr	r2, [r7, #32]
 800e908:	4611      	mov	r1, r2
 800e90a:	4618      	mov	r0, r3
 800e90c:	f7fe fcc4 	bl	800d298 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi>
    for (size_t i = 0; i < subgraph->operators()->size(); ++i) {
 800e910:	6a3b      	ldr	r3, [r7, #32]
 800e912:	3301      	adds	r3, #1
 800e914:	623b      	str	r3, [r7, #32]
 800e916:	e7b0      	b.n	800e87a <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0x46>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 800e918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e91a:	3301      	adds	r3, #1
 800e91c:	627b      	str	r3, [r7, #36]	; 0x24
 800e91e:	e792      	b.n	800e846 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0x12>
    }
  }
  current_subgraph_index_ = previous_subgraph_idx;
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	69fa      	ldr	r2, [r7, #28]
 800e924:	615a      	str	r2, [r3, #20]

  return kTfLiteOk;
 800e926:	2300      	movs	r3, #0
}
 800e928:	4618      	mov	r0, r3
 800e92a:	3728      	adds	r7, #40	; 0x28
 800e92c:	46bd      	mov	sp, r7
 800e92e:	bd80      	pop	{r7, pc}
 800e930:	08028ed8 	.word	0x08028ed8

0800e934 <_ZN6tflite10MicroGraph13FreeSubgraphsEv>:

TfLiteStatus MicroGraph::FreeSubgraphs() {
 800e934:	b580      	push	{r7, lr}
 800e936:	b088      	sub	sp, #32
 800e938:	af00      	add	r7, sp, #0
 800e93a:	6078      	str	r0, [r7, #4]
  int previous_subgraph_idx = current_subgraph_index_;
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	695b      	ldr	r3, [r3, #20]
 800e940:	617b      	str	r3, [r7, #20]

  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 800e942:	2300      	movs	r3, #0
 800e944:	61fb      	str	r3, [r7, #28]
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	699b      	ldr	r3, [r3, #24]
 800e94a:	4618      	mov	r0, r3
 800e94c:	f7ff faa4 	bl	800de98 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 800e950:	4602      	mov	r2, r0
 800e952:	69fb      	ldr	r3, [r7, #28]
 800e954:	4293      	cmp	r3, r2
 800e956:	bf34      	ite	cc
 800e958:	2301      	movcc	r3, #1
 800e95a:	2300      	movcs	r3, #0
 800e95c:	b2db      	uxtb	r3, r3
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d04b      	beq.n	800e9fa <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0xc6>
       subgraph_idx++) {
    current_subgraph_index_ = subgraph_idx;
 800e962:	69fa      	ldr	r2, [r7, #28]
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	615a      	str	r2, [r3, #20]
    const SubGraph* subgraph = (*subgraphs_)[subgraph_idx];
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	699b      	ldr	r3, [r3, #24]
 800e96c:	69f9      	ldr	r1, [r7, #28]
 800e96e:	4618      	mov	r0, r3
 800e970:	f7ff fb2e 	bl	800dfd0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEEixEm>
 800e974:	6138      	str	r0, [r7, #16]
    for (size_t i = 0; i < subgraph->operators()->size(); ++i) {
 800e976:	2300      	movs	r3, #0
 800e978:	61bb      	str	r3, [r7, #24]
 800e97a:	6938      	ldr	r0, [r7, #16]
 800e97c:	f7fd fd17 	bl	800c3ae <_ZNK6tflite8SubGraph9operatorsEv>
 800e980:	4603      	mov	r3, r0
 800e982:	4618      	mov	r0, r3
 800e984:	f7ff fa54 	bl	800de30 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 800e988:	4602      	mov	r2, r0
 800e98a:	69bb      	ldr	r3, [r7, #24]
 800e98c:	4293      	cmp	r3, r2
 800e98e:	bf34      	ite	cc
 800e990:	2301      	movcc	r3, #1
 800e992:	2300      	movcs	r3, #0
 800e994:	b2db      	uxtb	r3, r3
 800e996:	2b00      	cmp	r3, #0
 800e998:	d02b      	beq.n	800e9f2 <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0xbe>
      TfLiteNode* node =
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	691a      	ldr	r2, [r3, #16]
 800e99e:	69fb      	ldr	r3, [r7, #28]
 800e9a0:	00db      	lsls	r3, r3, #3
 800e9a2:	4413      	add	r3, r2
 800e9a4:	681a      	ldr	r2, [r3, #0]
 800e9a6:	69bb      	ldr	r3, [r7, #24]
 800e9a8:	212c      	movs	r1, #44	; 0x2c
 800e9aa:	fb01 f303 	mul.w	r3, r1, r3
 800e9ae:	4413      	add	r3, r2
      TfLiteNode* node =
 800e9b0:	60fb      	str	r3, [r7, #12]
      const TfLiteRegistration* registration =
          subgraph_allocations_[subgraph_idx]
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	691a      	ldr	r2, [r3, #16]
 800e9b6:	69fb      	ldr	r3, [r7, #28]
 800e9b8:	00db      	lsls	r3, r3, #3
 800e9ba:	4413      	add	r3, r2
              .node_and_registrations[i]
 800e9bc:	681a      	ldr	r2, [r3, #0]
 800e9be:	69bb      	ldr	r3, [r7, #24]
 800e9c0:	212c      	movs	r1, #44	; 0x2c
 800e9c2:	fb01 f303 	mul.w	r3, r1, r3
 800e9c6:	4413      	add	r3, r2
      const TfLiteRegistration* registration =
 800e9c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9ca:	60bb      	str	r3, [r7, #8]
              .registration;
      // registration is allocated outside the interpreter, so double check to
      // make sure it's not nullptr;
      if (registration != nullptr && registration->free != nullptr) {
 800e9cc:	68bb      	ldr	r3, [r7, #8]
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d00b      	beq.n	800e9ea <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0xb6>
 800e9d2:	68bb      	ldr	r3, [r7, #8]
 800e9d4:	685b      	ldr	r3, [r3, #4]
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d007      	beq.n	800e9ea <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0xb6>
        registration->free(context_, node->user_data);
 800e9da:	68bb      	ldr	r3, [r7, #8]
 800e9dc:	685b      	ldr	r3, [r3, #4]
 800e9de:	687a      	ldr	r2, [r7, #4]
 800e9e0:	6850      	ldr	r0, [r2, #4]
 800e9e2:	68fa      	ldr	r2, [r7, #12]
 800e9e4:	6912      	ldr	r2, [r2, #16]
 800e9e6:	4611      	mov	r1, r2
 800e9e8:	4798      	blx	r3
    for (size_t i = 0; i < subgraph->operators()->size(); ++i) {
 800e9ea:	69bb      	ldr	r3, [r7, #24]
 800e9ec:	3301      	adds	r3, #1
 800e9ee:	61bb      	str	r3, [r7, #24]
 800e9f0:	e7c3      	b.n	800e97a <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0x46>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 800e9f2:	69fb      	ldr	r3, [r7, #28]
 800e9f4:	3301      	adds	r3, #1
 800e9f6:	61fb      	str	r3, [r7, #28]
 800e9f8:	e7a5      	b.n	800e946 <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0x12>
      }
    }
  }
  current_subgraph_index_ = previous_subgraph_idx;
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	697a      	ldr	r2, [r7, #20]
 800e9fe:	615a      	str	r2, [r3, #20]

  return kTfLiteOk;
 800ea00:	2300      	movs	r3, #0
}
 800ea02:	4618      	mov	r0, r3
 800ea04:	3720      	adds	r7, #32
 800ea06:	46bd      	mov	sp, r7
 800ea08:	bd80      	pop	{r7, pc}
	...

0800ea0c <_ZN6tflite10MicroGraph14InvokeSubgraphEi>:

TfLiteStatus MicroGraph::InvokeSubgraph(int subgraph_idx) {
 800ea0c:	b5b0      	push	{r4, r5, r7, lr}
 800ea0e:	b08a      	sub	sp, #40	; 0x28
 800ea10:	af00      	add	r7, sp, #0
 800ea12:	6078      	str	r0, [r7, #4]
 800ea14:	6039      	str	r1, [r7, #0]
 800ea16:	2400      	movs	r4, #0
  int previous_subgraph_idx = current_subgraph_index_;
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	695b      	ldr	r3, [r3, #20]
 800ea1c:	623b      	str	r3, [r7, #32]
  current_subgraph_index_ = subgraph_idx;
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	683a      	ldr	r2, [r7, #0]
 800ea22:	615a      	str	r2, [r3, #20]

  if (static_cast<size_t>(subgraph_idx) >= subgraphs_->size()) {
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	699b      	ldr	r3, [r3, #24]
 800ea28:	4618      	mov	r0, r3
 800ea2a:	f7ff fa35 	bl	800de98 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 800ea2e:	4602      	mov	r2, r0
 800ea30:	683b      	ldr	r3, [r7, #0]
 800ea32:	429a      	cmp	r2, r3
 800ea34:	bf94      	ite	ls
 800ea36:	2301      	movls	r3, #1
 800ea38:	2300      	movhi	r3, #0
 800ea3a:	b2db      	uxtb	r3, r3
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d00c      	beq.n	800ea5a <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x4e>
    MicroPrintf("Accessing subgraph %d but only %d subgraphs found",
                subgraph_idx, subgraphs_->size());
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	699b      	ldr	r3, [r3, #24]
    MicroPrintf("Accessing subgraph %d but only %d subgraphs found",
 800ea44:	4618      	mov	r0, r3
 800ea46:	f7ff fa27 	bl	800de98 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 800ea4a:	4603      	mov	r3, r0
 800ea4c:	461a      	mov	r2, r3
 800ea4e:	6839      	ldr	r1, [r7, #0]
 800ea50:	4842      	ldr	r0, [pc, #264]	; (800eb5c <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x150>)
 800ea52:	f7ff fdb9 	bl	800e5c8 <_Z11MicroPrintfPKcz>
    return kTfLiteError;
 800ea56:	2401      	movs	r4, #1
 800ea58:	e07b      	b.n	800eb52 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x146>
  }
  const SubGraph* subgraph = (*subgraphs_)[subgraph_idx];
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	699b      	ldr	r3, [r3, #24]
 800ea5e:	683a      	ldr	r2, [r7, #0]
 800ea60:	4611      	mov	r1, r2
 800ea62:	4618      	mov	r0, r3
 800ea64:	f7ff fab4 	bl	800dfd0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEEixEm>
 800ea68:	61f8      	str	r0, [r7, #28]

  for (size_t i = 0; i < subgraph->operators()->size(); ++i) {
 800ea6a:	2300      	movs	r3, #0
 800ea6c:	627b      	str	r3, [r7, #36]	; 0x24
 800ea6e:	69f8      	ldr	r0, [r7, #28]
 800ea70:	f7fd fc9d 	bl	800c3ae <_ZNK6tflite8SubGraph9operatorsEv>
 800ea74:	4603      	mov	r3, r0
 800ea76:	4618      	mov	r0, r3
 800ea78:	f7ff f9da 	bl	800de30 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 800ea7c:	4602      	mov	r2, r0
 800ea7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea80:	4293      	cmp	r3, r2
 800ea82:	bf34      	ite	cc
 800ea84:	2301      	movcc	r3, #1
 800ea86:	2300      	movcs	r3, #0
 800ea88:	b2db      	uxtb	r3, r3
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d05d      	beq.n	800eb4a <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x13e>
    TfLiteNode* node =
        &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	691a      	ldr	r2, [r3, #16]
 800ea92:	683b      	ldr	r3, [r7, #0]
 800ea94:	00db      	lsls	r3, r3, #3
 800ea96:	4413      	add	r3, r2
 800ea98:	681a      	ldr	r2, [r3, #0]
 800ea9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea9c:	212c      	movs	r1, #44	; 0x2c
 800ea9e:	fb01 f303 	mul.w	r3, r1, r3
 800eaa2:	4413      	add	r3, r2
    TfLiteNode* node =
 800eaa4:	61bb      	str	r3, [r7, #24]
    const TfLiteRegistration* registration = subgraph_allocations_[subgraph_idx]
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	691a      	ldr	r2, [r3, #16]
 800eaaa:	683b      	ldr	r3, [r7, #0]
 800eaac:	00db      	lsls	r3, r3, #3
 800eaae:	4413      	add	r3, r2
                                                 .node_and_registrations[i]
 800eab0:	681a      	ldr	r2, [r3, #0]
 800eab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eab4:	212c      	movs	r1, #44	; 0x2c
 800eab6:	fb01 f303 	mul.w	r3, r1, r3
 800eaba:	4413      	add	r3, r2
    const TfLiteRegistration* registration = subgraph_allocations_[subgraph_idx]
 800eabc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eabe:	617b      	str	r3, [r7, #20]
// -DTF_LITE_STRIP_ERROR_STRINGS) because the function OpNameFromRegistration is
// only defined for builds with the error strings.
#if !defined(TF_LITE_STRIP_ERROR_STRINGS)
    ScopedMicroProfiler scoped_profiler(
        OpNameFromRegistration(registration),
        reinterpret_cast<MicroProfiler*>(context_->profiler));
 800eac0:	6978      	ldr	r0, [r7, #20]
 800eac2:	f7ff fddc 	bl	800e67e <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
 800eac6:	4601      	mov	r1, r0
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	685b      	ldr	r3, [r3, #4]
 800eacc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eace:	f107 0308 	add.w	r3, r7, #8
 800ead2:	4618      	mov	r0, r3
 800ead4:	f7ff fd99 	bl	800e60a <_ZN6tflite19ScopedMicroProfilerC1EPKcPNS_13MicroProfilerE>
#endif

    TFLITE_DCHECK(registration->invoke);
 800ead8:	697b      	ldr	r3, [r7, #20]
 800eada:	68db      	ldr	r3, [r3, #12]
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d101      	bne.n	800eae4 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0xd8>
 800eae0:	f016 ffb1 	bl	8025a46 <abort>
    TfLiteStatus invoke_status = registration->invoke(context_, node);
 800eae4:	697b      	ldr	r3, [r7, #20]
 800eae6:	68db      	ldr	r3, [r3, #12]
 800eae8:	687a      	ldr	r2, [r7, #4]
 800eaea:	6852      	ldr	r2, [r2, #4]
 800eaec:	69b9      	ldr	r1, [r7, #24]
 800eaee:	4610      	mov	r0, r2
 800eaf0:	4798      	blx	r3
 800eaf2:	4603      	mov	r3, r0
 800eaf4:	74fb      	strb	r3, [r7, #19]

    // All TfLiteTensor structs used in the kernel are allocated from temp
    // memory in the allocator. This creates a chain of allocations in the
    // temp section. The call below resets the chain of allocations to
    // prepare for the next call.
    allocator_->ResetTempAllocations();
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	68da      	ldr	r2, [r3, #12]
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	68db      	ldr	r3, [r3, #12]
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	3308      	adds	r3, #8
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	4610      	mov	r0, r2
 800eb06:	4798      	blx	r3

    if (invoke_status == kTfLiteError) {
 800eb08:	7cfb      	ldrb	r3, [r7, #19]
 800eb0a:	2b01      	cmp	r3, #1
 800eb0c:	d10b      	bne.n	800eb26 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x11a>
      MicroPrintf("Node %s (number %d) failed to invoke with status %d",
 800eb0e:	6978      	ldr	r0, [r7, #20]
 800eb10:	f7ff fdb5 	bl	800e67e <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
 800eb14:	4601      	mov	r1, r0
 800eb16:	7cfb      	ldrb	r3, [r7, #19]
 800eb18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eb1a:	4811      	ldr	r0, [pc, #68]	; (800eb60 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x154>)
 800eb1c:	f7ff fd54 	bl	800e5c8 <_Z11MicroPrintfPKcz>
                  OpNameFromRegistration(registration), i, invoke_status);
      return kTfLiteError;
 800eb20:	2401      	movs	r4, #1
 800eb22:	2500      	movs	r5, #0
 800eb24:	e006      	b.n	800eb34 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x128>
    } else if (invoke_status != kTfLiteOk) {
 800eb26:	7cfb      	ldrb	r3, [r7, #19]
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d002      	beq.n	800eb32 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x126>
      return invoke_status;
 800eb2c:	7cfc      	ldrb	r4, [r7, #19]
 800eb2e:	2500      	movs	r5, #0
 800eb30:	e000      	b.n	800eb34 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x128>
        reinterpret_cast<MicroProfiler*>(context_->profiler));
 800eb32:	2501      	movs	r5, #1
 800eb34:	f107 0308 	add.w	r3, r7, #8
 800eb38:	4618      	mov	r0, r3
 800eb3a:	f7ff fd88 	bl	800e64e <_ZN6tflite19ScopedMicroProfilerD1Ev>
 800eb3e:	2d01      	cmp	r5, #1
 800eb40:	d107      	bne.n	800eb52 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x146>
  for (size_t i = 0; i < subgraph->operators()->size(); ++i) {
 800eb42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb44:	3301      	adds	r3, #1
 800eb46:	627b      	str	r3, [r7, #36]	; 0x24
 800eb48:	e791      	b.n	800ea6e <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x62>
    }
  }
  current_subgraph_index_ = previous_subgraph_idx;
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	6a3a      	ldr	r2, [r7, #32]
 800eb4e:	615a      	str	r2, [r3, #20]
  return kTfLiteOk;
 800eb50:	2400      	movs	r4, #0
 800eb52:	4623      	mov	r3, r4
}
 800eb54:	4618      	mov	r0, r3
 800eb56:	3728      	adds	r7, #40	; 0x28
 800eb58:	46bd      	mov	sp, r7
 800eb5a:	bdb0      	pop	{r4, r5, r7, pc}
 800eb5c:	08028f10 	.word	0x08028f10
 800eb60:	08028f44 	.word	0x08028f44

0800eb64 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv>:

TfLiteStatus MicroGraph::ResetVariableTensors() {
 800eb64:	b580      	push	{r7, lr}
 800eb66:	b08a      	sub	sp, #40	; 0x28
 800eb68:	af00      	add	r7, sp, #0
 800eb6a:	6078      	str	r0, [r7, #4]
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 800eb6c:	2300      	movs	r3, #0
 800eb6e:	627b      	str	r3, [r7, #36]	; 0x24
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	699b      	ldr	r3, [r3, #24]
 800eb74:	4618      	mov	r0, r3
 800eb76:	f7ff f98f 	bl	800de98 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 800eb7a:	4602      	mov	r2, r0
 800eb7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb7e:	4293      	cmp	r3, r2
 800eb80:	bf34      	ite	cc
 800eb82:	2301      	movcc	r3, #1
 800eb84:	2300      	movcs	r3, #0
 800eb86:	b2db      	uxtb	r3, r3
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d077      	beq.n	800ec7c <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x118>
       subgraph_idx++) {
    const SubGraph* subgraph = (*subgraphs_)[subgraph_idx];
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	699b      	ldr	r3, [r3, #24]
 800eb90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800eb92:	4618      	mov	r0, r3
 800eb94:	f7ff fa1c 	bl	800dfd0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEEixEm>
 800eb98:	61b8      	str	r0, [r7, #24]
    for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 800eb9a:	2300      	movs	r3, #0
 800eb9c:	623b      	str	r3, [r7, #32]
 800eb9e:	69b8      	ldr	r0, [r7, #24]
 800eba0:	f7fd fbdb 	bl	800c35a <_ZNK6tflite8SubGraph7tensorsEv>
 800eba4:	4603      	mov	r3, r0
 800eba6:	4618      	mov	r0, r3
 800eba8:	f7ff f90e 	bl	800ddc8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 800ebac:	4602      	mov	r2, r0
 800ebae:	6a3b      	ldr	r3, [r7, #32]
 800ebb0:	4293      	cmp	r3, r2
 800ebb2:	bf34      	ite	cc
 800ebb4:	2301      	movcc	r3, #1
 800ebb6:	2300      	movcs	r3, #0
 800ebb8:	b2db      	uxtb	r3, r3
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d05a      	beq.n	800ec74 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x110>
      auto* tensor = subgraph->tensors()->Get(i);
 800ebbe:	69b8      	ldr	r0, [r7, #24]
 800ebc0:	f7fd fbcb 	bl	800c35a <_ZNK6tflite8SubGraph7tensorsEv>
 800ebc4:	4603      	mov	r3, r0
 800ebc6:	6a39      	ldr	r1, [r7, #32]
 800ebc8:	4618      	mov	r0, r3
 800ebca:	f7ff f90b 	bl	800dde4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 800ebce:	6178      	str	r0, [r7, #20]
      if (tensor->is_variable()) {
 800ebd0:	6978      	ldr	r0, [r7, #20]
 800ebd2:	f7fd fb92 	bl	800c2fa <_ZNK6tflite6Tensor11is_variableEv>
 800ebd6:	4603      	mov	r3, r0
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d047      	beq.n	800ec6c <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x108>
        size_t buffer_size;
        TF_LITE_ENSURE_STATUS(TfLiteEvalTensorByteLength(
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	691a      	ldr	r2, [r3, #16]
 800ebe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebe2:	00db      	lsls	r3, r3, #3
 800ebe4:	4413      	add	r3, r2
 800ebe6:	6859      	ldr	r1, [r3, #4]
 800ebe8:	6a3a      	ldr	r2, [r7, #32]
 800ebea:	4613      	mov	r3, r2
 800ebec:	005b      	lsls	r3, r3, #1
 800ebee:	4413      	add	r3, r2
 800ebf0:	009b      	lsls	r3, r3, #2
 800ebf2:	440b      	add	r3, r1
 800ebf4:	f107 020c 	add.w	r2, r7, #12
 800ebf8:	4611      	mov	r1, r2
 800ebfa:	4618      	mov	r0, r3
 800ebfc:	f7fd fae9 	bl	800c1d2 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
 800ec00:	4603      	mov	r3, r0
 800ec02:	74fb      	strb	r3, [r7, #19]
 800ec04:	7cfb      	ldrb	r3, [r7, #19]
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d001      	beq.n	800ec0e <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xaa>
 800ec0a:	7cfb      	ldrb	r3, [r7, #19]
 800ec0c:	e037      	b.n	800ec7e <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x11a>
            &subgraph_allocations_[subgraph_idx].tensors[i], &buffer_size));

        int value = 0;
 800ec0e:	2300      	movs	r3, #0
 800ec10:	61fb      	str	r3, [r7, #28]
        if (tensor->type() == tflite::TensorType_INT8) {
 800ec12:	6978      	ldr	r0, [r7, #20]
 800ec14:	f7fd f900 	bl	800be18 <_ZNK6tflite6Tensor4typeEv>
 800ec18:	4603      	mov	r3, r0
 800ec1a:	2b09      	cmp	r3, #9
 800ec1c:	bf0c      	ite	eq
 800ec1e:	2301      	moveq	r3, #1
 800ec20:	2300      	movne	r3, #0
 800ec22:	b2db      	uxtb	r3, r3
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d00f      	beq.n	800ec48 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xe4>
          value = tensor->quantization()->zero_point()->Get(0);
 800ec28:	6978      	ldr	r0, [r7, #20]
 800ec2a:	f7fd fb58 	bl	800c2de <_ZNK6tflite6Tensor12quantizationEv>
 800ec2e:	4603      	mov	r3, r0
 800ec30:	4618      	mov	r0, r3
 800ec32:	f7fd fb28 	bl	800c286 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 800ec36:	4603      	mov	r3, r0
 800ec38:	2100      	movs	r1, #0
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	f7ff f89c 	bl	800dd78 <_ZNK11flatbuffers6VectorIxE3GetEm>
 800ec40:	4602      	mov	r2, r0
 800ec42:	460b      	mov	r3, r1
 800ec44:	4613      	mov	r3, r2
 800ec46:	61fb      	str	r3, [r7, #28]
        }
        memset(subgraph_allocations_[subgraph_idx].tensors[i].data.raw, value,
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	691a      	ldr	r2, [r3, #16]
 800ec4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec4e:	00db      	lsls	r3, r3, #3
 800ec50:	4413      	add	r3, r2
 800ec52:	6859      	ldr	r1, [r3, #4]
 800ec54:	6a3a      	ldr	r2, [r7, #32]
 800ec56:	4613      	mov	r3, r2
 800ec58:	005b      	lsls	r3, r3, #1
 800ec5a:	4413      	add	r3, r2
 800ec5c:	009b      	lsls	r3, r3, #2
 800ec5e:	440b      	add	r3, r1
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	68fa      	ldr	r2, [r7, #12]
 800ec64:	69f9      	ldr	r1, [r7, #28]
 800ec66:	4618      	mov	r0, r3
 800ec68:	f016 ffe4 	bl	8025c34 <memset>
    for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 800ec6c:	6a3b      	ldr	r3, [r7, #32]
 800ec6e:	3301      	adds	r3, #1
 800ec70:	623b      	str	r3, [r7, #32]
 800ec72:	e794      	b.n	800eb9e <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x3a>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 800ec74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec76:	3301      	adds	r3, #1
 800ec78:	627b      	str	r3, [r7, #36]	; 0x24
 800ec7a:	e779      	b.n	800eb70 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xc>
               buffer_size);
      }
    }
  }

  return kTfLiteOk;
 800ec7c:	2300      	movs	r3, #0
}
 800ec7e:	4618      	mov	r0, r3
 800ec80:	3728      	adds	r7, #40	; 0x28
 800ec82:	46bd      	mov	sp, r7
 800ec84:	bd80      	pop	{r7, pc}

0800ec86 <_ZN6tflite10MicroGraph12NumSubgraphsEv>:

int MicroGraph::NumSubgraphs() { return model_->subgraphs()->size(); }
 800ec86:	b580      	push	{r7, lr}
 800ec88:	b082      	sub	sp, #8
 800ec8a:	af00      	add	r7, sp, #0
 800ec8c:	6078      	str	r0, [r7, #4]
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	689b      	ldr	r3, [r3, #8]
 800ec92:	4618      	mov	r0, r3
 800ec94:	f7fd fbc4 	bl	800c420 <_ZNK6tflite5Model9subgraphsEv>
 800ec98:	4603      	mov	r3, r0
 800ec9a:	4618      	mov	r0, r3
 800ec9c:	f7ff f8fc 	bl	800de98 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 800eca0:	4603      	mov	r3, r0
 800eca2:	4618      	mov	r0, r3
 800eca4:	3708      	adds	r7, #8
 800eca6:	46bd      	mov	sp, r7
 800eca8:	bd80      	pop	{r7, pc}

0800ecaa <_ZN6tflite10MicroGraph22SetSubgraphAllocationsEPNS_19SubgraphAllocationsE>:

void MicroGraph::SetSubgraphAllocations(
    SubgraphAllocations* subgraph_allocations) {
 800ecaa:	b480      	push	{r7}
 800ecac:	b083      	sub	sp, #12
 800ecae:	af00      	add	r7, sp, #0
 800ecb0:	6078      	str	r0, [r7, #4]
 800ecb2:	6039      	str	r1, [r7, #0]
  subgraph_allocations_ = subgraph_allocations;
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	683a      	ldr	r2, [r7, #0]
 800ecb8:	611a      	str	r2, [r3, #16]
}
 800ecba:	bf00      	nop
 800ecbc:	370c      	adds	r7, #12
 800ecbe:	46bd      	mov	sp, r7
 800ecc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc4:	4770      	bx	lr

0800ecc6 <_ZN6tflite10MicroGraph17NumSubgraphInputsEi>:

size_t MicroGraph::NumSubgraphInputs(int subgraph_idx) {
 800ecc6:	b580      	push	{r7, lr}
 800ecc8:	b082      	sub	sp, #8
 800ecca:	af00      	add	r7, sp, #0
 800eccc:	6078      	str	r0, [r7, #4]
 800ecce:	6039      	str	r1, [r7, #0]
  return model_->subgraphs()->Get(subgraph_idx)->inputs()->size();
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	689b      	ldr	r3, [r3, #8]
 800ecd4:	4618      	mov	r0, r3
 800ecd6:	f7fd fba3 	bl	800c420 <_ZNK6tflite5Model9subgraphsEv>
 800ecda:	4602      	mov	r2, r0
 800ecdc:	683b      	ldr	r3, [r7, #0]
 800ecde:	4619      	mov	r1, r3
 800ece0:	4610      	mov	r0, r2
 800ece2:	f7ff f8e7 	bl	800deb4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800ece6:	4603      	mov	r3, r0
 800ece8:	4618      	mov	r0, r3
 800ecea:	f7fd fb44 	bl	800c376 <_ZNK6tflite8SubGraph6inputsEv>
 800ecee:	4603      	mov	r3, r0
 800ecf0:	4618      	mov	r0, r3
 800ecf2:	f7fa fc6b 	bl	80095cc <_ZNK11flatbuffers6VectorIlE4sizeEv>
 800ecf6:	4603      	mov	r3, r0
}
 800ecf8:	4618      	mov	r0, r3
 800ecfa:	3708      	adds	r7, #8
 800ecfc:	46bd      	mov	sp, r7
 800ecfe:	bd80      	pop	{r7, pc}

0800ed00 <_ZN6tflite10MicroGraph16GetSubgraphInputEii>:

TfLiteEvalTensor* MicroGraph::GetSubgraphInput(int subgraph_idx,
                                               int input_idx) {
 800ed00:	b580      	push	{r7, lr}
 800ed02:	b086      	sub	sp, #24
 800ed04:	af00      	add	r7, sp, #0
 800ed06:	60f8      	str	r0, [r7, #12]
 800ed08:	60b9      	str	r1, [r7, #8]
 800ed0a:	607a      	str	r2, [r7, #4]
  int tensor_idx =
      model_->subgraphs()->Get(subgraph_idx)->inputs()->Get(input_idx);
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	689b      	ldr	r3, [r3, #8]
 800ed10:	4618      	mov	r0, r3
 800ed12:	f7fd fb85 	bl	800c420 <_ZNK6tflite5Model9subgraphsEv>
 800ed16:	4602      	mov	r2, r0
 800ed18:	68bb      	ldr	r3, [r7, #8]
 800ed1a:	4619      	mov	r1, r3
 800ed1c:	4610      	mov	r0, r2
 800ed1e:	f7ff f8c9 	bl	800deb4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800ed22:	4603      	mov	r3, r0
 800ed24:	4618      	mov	r0, r3
 800ed26:	f7fd fb26 	bl	800c376 <_ZNK6tflite8SubGraph6inputsEv>
 800ed2a:	4602      	mov	r2, r0
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	4619      	mov	r1, r3
 800ed30:	4610      	mov	r0, r2
 800ed32:	f7fa fc59 	bl	80095e8 <_ZNK11flatbuffers6VectorIlE3GetEm>
 800ed36:	6178      	str	r0, [r7, #20]
  return &subgraph_allocations_[subgraph_idx].tensors[tensor_idx];
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	691a      	ldr	r2, [r3, #16]
 800ed3c:	68bb      	ldr	r3, [r7, #8]
 800ed3e:	00db      	lsls	r3, r3, #3
 800ed40:	4413      	add	r3, r2
 800ed42:	6859      	ldr	r1, [r3, #4]
 800ed44:	697a      	ldr	r2, [r7, #20]
 800ed46:	4613      	mov	r3, r2
 800ed48:	005b      	lsls	r3, r3, #1
 800ed4a:	4413      	add	r3, r2
 800ed4c:	009b      	lsls	r3, r3, #2
 800ed4e:	440b      	add	r3, r1
}
 800ed50:	4618      	mov	r0, r3
 800ed52:	3718      	adds	r7, #24
 800ed54:	46bd      	mov	sp, r7
 800ed56:	bd80      	pop	{r7, pc}

0800ed58 <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi>:

size_t MicroGraph::NumSubgraphOutputs(int subgraph_idx) {
 800ed58:	b580      	push	{r7, lr}
 800ed5a:	b082      	sub	sp, #8
 800ed5c:	af00      	add	r7, sp, #0
 800ed5e:	6078      	str	r0, [r7, #4]
 800ed60:	6039      	str	r1, [r7, #0]
  return model_->subgraphs()->Get(subgraph_idx)->outputs()->size();
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	689b      	ldr	r3, [r3, #8]
 800ed66:	4618      	mov	r0, r3
 800ed68:	f7fd fb5a 	bl	800c420 <_ZNK6tflite5Model9subgraphsEv>
 800ed6c:	4602      	mov	r2, r0
 800ed6e:	683b      	ldr	r3, [r7, #0]
 800ed70:	4619      	mov	r1, r3
 800ed72:	4610      	mov	r0, r2
 800ed74:	f7ff f89e 	bl	800deb4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800ed78:	4603      	mov	r3, r0
 800ed7a:	4618      	mov	r0, r3
 800ed7c:	f7fd fb09 	bl	800c392 <_ZNK6tflite8SubGraph7outputsEv>
 800ed80:	4603      	mov	r3, r0
 800ed82:	4618      	mov	r0, r3
 800ed84:	f7fa fc22 	bl	80095cc <_ZNK11flatbuffers6VectorIlE4sizeEv>
 800ed88:	4603      	mov	r3, r0
}
 800ed8a:	4618      	mov	r0, r3
 800ed8c:	3708      	adds	r7, #8
 800ed8e:	46bd      	mov	sp, r7
 800ed90:	bd80      	pop	{r7, pc}

0800ed92 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii>:

TfLiteEvalTensor* MicroGraph::GetSubgraphOutput(int subgraph_idx,
                                                int output_idx) {
 800ed92:	b580      	push	{r7, lr}
 800ed94:	b086      	sub	sp, #24
 800ed96:	af00      	add	r7, sp, #0
 800ed98:	60f8      	str	r0, [r7, #12]
 800ed9a:	60b9      	str	r1, [r7, #8]
 800ed9c:	607a      	str	r2, [r7, #4]
  int tensor_idx =
      model_->subgraphs()->Get(subgraph_idx)->outputs()->Get(output_idx);
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	689b      	ldr	r3, [r3, #8]
 800eda2:	4618      	mov	r0, r3
 800eda4:	f7fd fb3c 	bl	800c420 <_ZNK6tflite5Model9subgraphsEv>
 800eda8:	4602      	mov	r2, r0
 800edaa:	68bb      	ldr	r3, [r7, #8]
 800edac:	4619      	mov	r1, r3
 800edae:	4610      	mov	r0, r2
 800edb0:	f7ff f880 	bl	800deb4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800edb4:	4603      	mov	r3, r0
 800edb6:	4618      	mov	r0, r3
 800edb8:	f7fd faeb 	bl	800c392 <_ZNK6tflite8SubGraph7outputsEv>
 800edbc:	4602      	mov	r2, r0
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	4619      	mov	r1, r3
 800edc2:	4610      	mov	r0, r2
 800edc4:	f7fa fc10 	bl	80095e8 <_ZNK11flatbuffers6VectorIlE3GetEm>
 800edc8:	6178      	str	r0, [r7, #20]
  return &subgraph_allocations_[subgraph_idx].tensors[tensor_idx];
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	691a      	ldr	r2, [r3, #16]
 800edce:	68bb      	ldr	r3, [r7, #8]
 800edd0:	00db      	lsls	r3, r3, #3
 800edd2:	4413      	add	r3, r2
 800edd4:	6859      	ldr	r1, [r3, #4]
 800edd6:	697a      	ldr	r2, [r7, #20]
 800edd8:	4613      	mov	r3, r2
 800edda:	005b      	lsls	r3, r3, #1
 800eddc:	4413      	add	r3, r2
 800edde:	009b      	lsls	r3, r3, #2
 800ede0:	440b      	add	r3, r1
}
 800ede2:	4618      	mov	r0, r3
 800ede4:	3718      	adds	r7, #24
 800ede6:	46bd      	mov	sp, r7
 800ede8:	bd80      	pop	{r7, pc}

0800edea <_ZNK6tflite8Operator12opcode_indexEv>:
  uint32_t opcode_index() const {
 800edea:	b580      	push	{r7, lr}
 800edec:	b082      	sub	sp, #8
 800edee:	af00      	add	r7, sp, #0
 800edf0:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_OPCODE_INDEX, 0);
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	2200      	movs	r2, #0
 800edf6:	2104      	movs	r1, #4
 800edf8:	4618      	mov	r0, r3
 800edfa:	f7fe feec 	bl	800dbd6 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 800edfe:	4603      	mov	r3, r0
  }
 800ee00:	4618      	mov	r0, r3
 800ee02:	3708      	adds	r7, #8
 800ee04:	46bd      	mov	sp, r7
 800ee06:	bd80      	pop	{r7, pc}

0800ee08 <_ZNK6tflite8Operator14custom_optionsEv>:
  const flatbuffers::Vector<uint8_t> *custom_options() const {
 800ee08:	b580      	push	{r7, lr}
 800ee0a:	b082      	sub	sp, #8
 800ee0c:	af00      	add	r7, sp, #0
 800ee0e:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_CUSTOM_OPTIONS);
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	210e      	movs	r1, #14
 800ee14:	4618      	mov	r0, r3
 800ee16:	f7fe feae 	bl	800db76 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>
 800ee1a:	4603      	mov	r3, r0
  }
 800ee1c:	4618      	mov	r0, r3
 800ee1e:	3708      	adds	r7, #8
 800ee20:	46bd      	mov	sp, r7
 800ee22:	bd80      	pop	{r7, pc}

0800ee24 <_ZNK6tflite5Model14operator_codesEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::OperatorCode>> *operator_codes() const {
 800ee24:	b580      	push	{r7, lr}
 800ee26:	b082      	sub	sp, #8
 800ee28:	af00      	add	r7, sp, #0
 800ee2a:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::OperatorCode>> *>(VT_OPERATOR_CODES);
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	2106      	movs	r1, #6
 800ee30:	4618      	mov	r0, r3
 800ee32:	f000 fd58 	bl	800f8e6 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t>
 800ee36:	4603      	mov	r3, r0
  }
 800ee38:	4618      	mov	r0, r3
 800ee3a:	3708      	adds	r7, #8
 800ee3c:	46bd      	mov	sp, r7
 800ee3e:	bd80      	pop	{r7, pc}

0800ee40 <_ZN6tflite10MicroGraph23GetCurrentSubgraphIndexEv>:
  // allowing MicroGraph to init / prepare / invoke subgraphs in the model.
  void SetSubgraphAllocations(SubgraphAllocations* subgraph_allocations);

  // Get the current subgraph index. Within an on operator, this is guaranteed
  // to be the subgraph of that operator.
  int GetCurrentSubgraphIndex() { return current_subgraph_index_; }
 800ee40:	b480      	push	{r7}
 800ee42:	b083      	sub	sp, #12
 800ee44:	af00      	add	r7, sp, #0
 800ee46:	6078      	str	r0, [r7, #4]
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	695b      	ldr	r3, [r3, #20]
 800ee4c:	4618      	mov	r0, r3
 800ee4e:	370c      	adds	r7, #12
 800ee50:	46bd      	mov	sp, r7
 800ee52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee56:	4770      	bx	lr

0800ee58 <_ZN6tflite10MicroGraph14GetAllocationsEv>:

  // Gets the list of alloctions for each subgraph. This is the source of truth
  // for all per-subgraph allocation data.
  SubgraphAllocations* GetAllocations() { return subgraph_allocations_; }
 800ee58:	b480      	push	{r7}
 800ee5a:	b083      	sub	sp, #12
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	6078      	str	r0, [r7, #4]
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	691b      	ldr	r3, [r3, #16]
 800ee64:	4618      	mov	r0, r3
 800ee66:	370c      	adds	r7, #12
 800ee68:	46bd      	mov	sp, r7
 800ee6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee6e:	4770      	bx	lr

0800ee70 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv>:
  // values other than kTfLiteOk and kTfLiteError.
  // TODO(b/149795762): Add this to the TfLiteStatus enum.
  TfLiteStatus Invoke();

  TfLiteTensor* input(size_t index);
  size_t inputs_size() const {
 800ee70:	b580      	push	{r7, lr}
 800ee72:	b082      	sub	sp, #8
 800ee74:	af00      	add	r7, sp, #0
 800ee76:	6078      	str	r0, [r7, #4]
    return model_->subgraphs()->Get(0)->inputs()->size();
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	f7fd facf 	bl	800c420 <_ZNK6tflite5Model9subgraphsEv>
 800ee82:	4603      	mov	r3, r0
 800ee84:	2100      	movs	r1, #0
 800ee86:	4618      	mov	r0, r3
 800ee88:	f7ff f814 	bl	800deb4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800ee8c:	4603      	mov	r3, r0
 800ee8e:	4618      	mov	r0, r3
 800ee90:	f7fd fa71 	bl	800c376 <_ZNK6tflite8SubGraph6inputsEv>
 800ee94:	4603      	mov	r3, r0
 800ee96:	4618      	mov	r0, r3
 800ee98:	f7fa fb98 	bl	80095cc <_ZNK11flatbuffers6VectorIlE4sizeEv>
 800ee9c:	4603      	mov	r3, r0
  }
 800ee9e:	4618      	mov	r0, r3
 800eea0:	3708      	adds	r7, #8
 800eea2:	46bd      	mov	sp, r7
 800eea4:	bd80      	pop	{r7, pc}

0800eea6 <_ZNK6tflite16MicroInterpreter6inputsEv>:
  const flatbuffers::Vector<int32_t>& inputs() const {
 800eea6:	b580      	push	{r7, lr}
 800eea8:	b082      	sub	sp, #8
 800eeaa:	af00      	add	r7, sp, #0
 800eeac:	6078      	str	r0, [r7, #4]
    return *model_->subgraphs()->Get(0)->inputs();
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	4618      	mov	r0, r3
 800eeb4:	f7fd fab4 	bl	800c420 <_ZNK6tflite5Model9subgraphsEv>
 800eeb8:	4603      	mov	r3, r0
 800eeba:	2100      	movs	r1, #0
 800eebc:	4618      	mov	r0, r3
 800eebe:	f7fe fff9 	bl	800deb4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800eec2:	4603      	mov	r3, r0
 800eec4:	4618      	mov	r0, r3
 800eec6:	f7fd fa56 	bl	800c376 <_ZNK6tflite8SubGraph6inputsEv>
 800eeca:	4603      	mov	r3, r0
  }
 800eecc:	4618      	mov	r0, r3
 800eece:	3708      	adds	r7, #8
 800eed0:	46bd      	mov	sp, r7
 800eed2:	bd80      	pop	{r7, pc}

0800eed4 <_ZNK6tflite16MicroInterpreter12outputs_sizeEv>:
    }
    return nullptr;
  }

  TfLiteTensor* output(size_t index);
  size_t outputs_size() const {
 800eed4:	b580      	push	{r7, lr}
 800eed6:	b082      	sub	sp, #8
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	6078      	str	r0, [r7, #4]
    return model_->subgraphs()->Get(0)->outputs()->size();
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	4618      	mov	r0, r3
 800eee2:	f7fd fa9d 	bl	800c420 <_ZNK6tflite5Model9subgraphsEv>
 800eee6:	4603      	mov	r3, r0
 800eee8:	2100      	movs	r1, #0
 800eeea:	4618      	mov	r0, r3
 800eeec:	f7fe ffe2 	bl	800deb4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800eef0:	4603      	mov	r3, r0
 800eef2:	4618      	mov	r0, r3
 800eef4:	f7fd fa4d 	bl	800c392 <_ZNK6tflite8SubGraph7outputsEv>
 800eef8:	4603      	mov	r3, r0
 800eefa:	4618      	mov	r0, r3
 800eefc:	f7fa fb66 	bl	80095cc <_ZNK11flatbuffers6VectorIlE4sizeEv>
 800ef00:	4603      	mov	r3, r0
  }
 800ef02:	4618      	mov	r0, r3
 800ef04:	3708      	adds	r7, #8
 800ef06:	46bd      	mov	sp, r7
 800ef08:	bd80      	pop	{r7, pc}

0800ef0a <_ZNK6tflite16MicroInterpreter7outputsEv>:
  const flatbuffers::Vector<int32_t>& outputs() const {
 800ef0a:	b580      	push	{r7, lr}
 800ef0c:	b082      	sub	sp, #8
 800ef0e:	af00      	add	r7, sp, #0
 800ef10:	6078      	str	r0, [r7, #4]
    return *model_->subgraphs()->Get(0)->outputs();
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	4618      	mov	r0, r3
 800ef18:	f7fd fa82 	bl	800c420 <_ZNK6tflite5Model9subgraphsEv>
 800ef1c:	4603      	mov	r3, r0
 800ef1e:	2100      	movs	r1, #0
 800ef20:	4618      	mov	r0, r3
 800ef22:	f7fe ffc7 	bl	800deb4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800ef26:	4603      	mov	r3, r0
 800ef28:	4618      	mov	r0, r3
 800ef2a:	f7fd fa32 	bl	800c392 <_ZNK6tflite8SubGraph7outputsEv>
 800ef2e:	4603      	mov	r3, r0
  }
 800ef30:	4618      	mov	r0, r3
 800ef32:	3708      	adds	r7, #8
 800ef34:	46bd      	mov	sp, r7
 800ef36:	bd80      	pop	{r7, pc}

0800ef38 <_ZN6tflite16MicroInterpreter18get_subgraph_indexEv>:
  // TODO(b/158263161): Consider switching to Create() function to enable better
  // error reporting during initialization.
  void Init(MicroProfiler* profiler);

  // Gets the current subgraph index used from within context methods.
  int get_subgraph_index() { return graph_.GetCurrentSubgraphIndex(); }
 800ef38:	b580      	push	{r7, lr}
 800ef3a:	b082      	sub	sp, #8
 800ef3c:	af00      	add	r7, sp, #0
 800ef3e:	6078      	str	r0, [r7, #4]
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	3368      	adds	r3, #104	; 0x68
 800ef44:	4618      	mov	r0, r3
 800ef46:	f7ff ff7b 	bl	800ee40 <_ZN6tflite10MicroGraph23GetCurrentSubgraphIndexEv>
 800ef4a:	4603      	mov	r3, r0
 800ef4c:	4618      	mov	r0, r3
 800ef4e:	3708      	adds	r7, #8
 800ef50:	46bd      	mov	sp, r7
 800ef52:	bd80      	pop	{r7, pc}

0800ef54 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_13MicroProfilerE>:
#include "tensorflow/lite/schema/schema_generated.h"
#include "tensorflow/lite/schema/schema_utils.h"

namespace tflite {

MicroInterpreter::MicroInterpreter(const Model* model,
 800ef54:	b580      	push	{r7, lr}
 800ef56:	b084      	sub	sp, #16
 800ef58:	af00      	add	r7, sp, #0
 800ef5a:	60f8      	str	r0, [r7, #12]
 800ef5c:	60b9      	str	r1, [r7, #8]
 800ef5e:	607a      	str	r2, [r7, #4]
 800ef60:	603b      	str	r3, [r7, #0]

      graph_(&context_, model, &allocator_),
      tensors_allocated_(false),
      initialization_status_(kTfLiteError),
      input_tensors_(nullptr),
      output_tensors_(nullptr) {
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	68ba      	ldr	r2, [r7, #8]
 800ef66:	601a      	str	r2, [r3, #0]
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	687a      	ldr	r2, [r7, #4]
 800ef6c:	605a      	str	r2, [r3, #4]
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	69fa      	ldr	r2, [r7, #28]
 800ef72:	609a      	str	r2, [r3, #8]
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	330c      	adds	r3, #12
 800ef78:	2258      	movs	r2, #88	; 0x58
 800ef7a:	2100      	movs	r1, #0
 800ef7c:	4618      	mov	r0, r3
 800ef7e:	f016 fe59 	bl	8025c34 <memset>
      allocator_(*MicroAllocator::Create(tensor_arena, tensor_arena_size,
 800ef82:	69fa      	ldr	r2, [r7, #28]
 800ef84:	69b9      	ldr	r1, [r7, #24]
 800ef86:	6838      	ldr	r0, [r7, #0]
 800ef88:	f7fd ffd4 	bl	800cf34 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE>
 800ef8c:	4602      	mov	r2, r0
      output_tensors_(nullptr) {
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	665a      	str	r2, [r3, #100]	; 0x64
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	f103 0068 	add.w	r0, r3, #104	; 0x68
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	f103 010c 	add.w	r1, r3, #12
      graph_(&context_, model, &allocator_),
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
      output_tensors_(nullptr) {
 800efa2:	68ba      	ldr	r2, [r7, #8]
 800efa4:	f7ff fb82 	bl	800e6ac <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE>
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	2200      	movs	r2, #0
 800efac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	2201      	movs	r2, #1
 800efb4:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	2200      	movs	r2, #0
 800efbc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	2200      	movs	r2, #0
 800efc4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	2200      	movs	r2, #0
 800efcc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  Init(profiler);
 800efd0:	6a39      	ldr	r1, [r7, #32]
 800efd2:	68f8      	ldr	r0, [r7, #12]
 800efd4:	f000 f826 	bl	800f024 <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE>
}
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	4618      	mov	r0, r3
 800efdc:	3710      	adds	r7, #16
 800efde:	46bd      	mov	sp, r7
 800efe0:	bd80      	pop	{r7, pc}

0800efe2 <_ZN6tflite16MicroInterpreterD1Ev>:
      input_tensors_(nullptr),
      output_tensors_(nullptr) {
  Init(profiler);
}

MicroInterpreter::~MicroInterpreter() {
 800efe2:	b580      	push	{r7, lr}
 800efe4:	b082      	sub	sp, #8
 800efe6:	af00      	add	r7, sp, #0
 800efe8:	6078      	str	r0, [r7, #4]
  if (graph_.GetAllocations() != nullptr) {
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	3368      	adds	r3, #104	; 0x68
 800efee:	4618      	mov	r0, r3
 800eff0:	f7ff ff32 	bl	800ee58 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 800eff4:	4603      	mov	r3, r0
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	bf14      	ite	ne
 800effa:	2301      	movne	r3, #1
 800effc:	2300      	moveq	r3, #0
 800effe:	b2db      	uxtb	r3, r3
 800f000:	2b00      	cmp	r3, #0
 800f002:	d004      	beq.n	800f00e <_ZN6tflite16MicroInterpreterD1Ev+0x2c>
    graph_.FreeSubgraphs();
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	3368      	adds	r3, #104	; 0x68
 800f008:	4618      	mov	r0, r3
 800f00a:	f7ff fc93 	bl	800e934 <_ZN6tflite10MicroGraph13FreeSubgraphsEv>
MicroInterpreter::~MicroInterpreter() {
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	3368      	adds	r3, #104	; 0x68
 800f012:	4618      	mov	r0, r3
 800f014:	f7ff fb74 	bl	800e700 <_ZN6tflite10MicroGraphD1Ev>
  }
}
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	4618      	mov	r0, r3
 800f01c:	3708      	adds	r7, #8
 800f01e:	46bd      	mov	sp, r7
 800f020:	bd80      	pop	{r7, pc}
	...

0800f024 <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE>:

void MicroInterpreter::Init(MicroProfiler* profiler) {
 800f024:	b480      	push	{r7}
 800f026:	b083      	sub	sp, #12
 800f028:	af00      	add	r7, sp, #0
 800f02a:	6078      	str	r0, [r7, #4]
 800f02c:	6039      	str	r1, [r7, #0]
  context_.impl_ = static_cast<void*>(this);
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	687a      	ldr	r2, [r7, #4]
 800f032:	619a      	str	r2, [r3, #24]
  context_.ReportError = ReportOpError;
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	4a0d      	ldr	r2, [pc, #52]	; (800f06c <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE+0x48>)
 800f038:	621a      	str	r2, [r3, #32]
  context_.GetTensor = GetTensor;
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	4a0c      	ldr	r2, [pc, #48]	; (800f070 <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE+0x4c>)
 800f03e:	65da      	str	r2, [r3, #92]	; 0x5c
  context_.ReportError = ReportOpError;
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	4a0a      	ldr	r2, [pc, #40]	; (800f06c <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE+0x48>)
 800f044:	621a      	str	r2, [r3, #32]
  context_.GetTensor = GetTensor;
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	4a09      	ldr	r2, [pc, #36]	; (800f070 <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE+0x4c>)
 800f04a:	65da      	str	r2, [r3, #92]	; 0x5c
  context_.GetEvalTensor = GetEvalTensor;
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	4a09      	ldr	r2, [pc, #36]	; (800f074 <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE+0x50>)
 800f050:	661a      	str	r2, [r3, #96]	; 0x60
  context_.profiler = profiler;
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	683a      	ldr	r2, [r7, #0]
 800f056:	641a      	str	r2, [r3, #64]	; 0x40

  initialization_status_ = kTfLiteOk;
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	2200      	movs	r2, #0
 800f05c:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
}
 800f060:	bf00      	nop
 800f062:	370c      	adds	r7, #12
 800f064:	46bd      	mov	sp, r7
 800f066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f06a:	4770      	bx	lr
 800f06c:	0800f7f9 	.word	0x0800f7f9
 800f070:	0800f831 	.word	0x0800f831
 800f074:	0800f881 	.word	0x0800f881

0800f078 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv>:

TfLiteStatus MicroInterpreter::PrepareNodeAndRegistrationDataFromFlatbuffer() {
 800f078:	b5b0      	push	{r4, r5, r7, lr}
 800f07a:	b096      	sub	sp, #88	; 0x58
 800f07c:	af00      	add	r7, sp, #0
 800f07e:	6078      	str	r0, [r7, #4]
  for (int subgraph_idx = 0; subgraph_idx < graph_.NumSubgraphs();
 800f080:	2300      	movs	r3, #0
 800f082:	657b      	str	r3, [r7, #84]	; 0x54
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	3368      	adds	r3, #104	; 0x68
 800f088:	4618      	mov	r0, r3
 800f08a:	f7ff fdfc 	bl	800ec86 <_ZN6tflite10MicroGraph12NumSubgraphsEv>
 800f08e:	4602      	mov	r2, r0
 800f090:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f092:	4293      	cmp	r3, r2
 800f094:	bfb4      	ite	lt
 800f096:	2301      	movlt	r3, #1
 800f098:	2300      	movge	r3, #0
 800f09a:	b2db      	uxtb	r3, r3
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	f000 815d 	beq.w	800f35c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2e4>
       subgraph_idx++) {
    const SubGraph* subgraph = model_->subgraphs()->Get(subgraph_idx);
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	4618      	mov	r0, r3
 800f0a8:	f7fd f9ba 	bl	800c420 <_ZNK6tflite5Model9subgraphsEv>
 800f0ac:	4602      	mov	r2, r0
 800f0ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f0b0:	4619      	mov	r1, r3
 800f0b2:	4610      	mov	r0, r2
 800f0b4:	f7fe fefe 	bl	800deb4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800f0b8:	6478      	str	r0, [r7, #68]	; 0x44
    TFLITE_DCHECK(subgraph != nullptr);
 800f0ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d101      	bne.n	800f0c4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x4c>
 800f0c0:	f016 fcc1 	bl	8025a46 <abort>

    auto* opcodes = model_->operator_codes();
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	4618      	mov	r0, r3
 800f0ca:	f7ff feab 	bl	800ee24 <_ZNK6tflite5Model14operator_codesEv>
 800f0ce:	6438      	str	r0, [r7, #64]	; 0x40
    BuiltinDataAllocator* builtin_data_allocator =
        allocator_.GetBuiltinDataAllocator();
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f0d4:	4618      	mov	r0, r3
 800f0d6:	f7fe fd42 	bl	800db5e <_ZN6tflite14MicroAllocator23GetBuiltinDataAllocatorEv>
 800f0da:	63f8      	str	r0, [r7, #60]	; 0x3c
    for (size_t i = 0; i < subgraph->operators()->size(); ++i) {
 800f0dc:	2300      	movs	r3, #0
 800f0de:	653b      	str	r3, [r7, #80]	; 0x50
 800f0e0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f0e2:	f7fd f964 	bl	800c3ae <_ZNK6tflite8SubGraph9operatorsEv>
 800f0e6:	4603      	mov	r3, r0
 800f0e8:	4618      	mov	r0, r3
 800f0ea:	f7fe fea1 	bl	800de30 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 800f0ee:	4602      	mov	r2, r0
 800f0f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f0f2:	4293      	cmp	r3, r2
 800f0f4:	bf34      	ite	cc
 800f0f6:	2301      	movcc	r3, #1
 800f0f8:	2300      	movcs	r3, #0
 800f0fa:	b2db      	uxtb	r3, r3
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	f000 8129 	beq.w	800f354 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2dc>
      const auto* op = subgraph->operators()->Get(i);
 800f102:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f104:	f7fd f953 	bl	800c3ae <_ZNK6tflite8SubGraph9operatorsEv>
 800f108:	4603      	mov	r3, r0
 800f10a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f10c:	4618      	mov	r0, r3
 800f10e:	f7fe fe9d 	bl	800de4c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm>
 800f112:	63b8      	str	r0, [r7, #56]	; 0x38
      const size_t index = op->opcode_index();
 800f114:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f116:	f7ff fe68 	bl	800edea <_ZNK6tflite8Operator12opcode_indexEv>
 800f11a:	6378      	str	r0, [r7, #52]	; 0x34
      if (index >= opcodes->size()) {
 800f11c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800f11e:	f000 fbf2 	bl	800f906 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4sizeEv>
 800f122:	4602      	mov	r2, r0
 800f124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f126:	4293      	cmp	r3, r2
 800f128:	bf2c      	ite	cs
 800f12a:	2301      	movcs	r3, #1
 800f12c:	2300      	movcc	r3, #0
 800f12e:	b2db      	uxtb	r3, r3
 800f130:	2b00      	cmp	r3, #0
 800f132:	d005      	beq.n	800f140 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xc8>
        MicroPrintf("Missing registration for opcode_index %d\n", index);
 800f134:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f136:	488c      	ldr	r0, [pc, #560]	; (800f368 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2f0>)
 800f138:	f7ff fa46 	bl	800e5c8 <_Z11MicroPrintfPKcz>
        return kTfLiteError;
 800f13c:	2301      	movs	r3, #1
 800f13e:	e10e      	b.n	800f35e <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2e6>
      }
      const auto* opcode = opcodes->Get(index);
 800f140:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f142:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800f144:	f000 fbee 	bl	800f924 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm>
 800f148:	6338      	str	r0, [r7, #48]	; 0x30
      TfLiteStatus status =
          GetRegistrationFromOpCode(opcode, op_resolver_, error_reporter_,
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	685b      	ldr	r3, [r3, #4]
 800f14e:	461d      	mov	r5, r3
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	689c      	ldr	r4, [r3, #8]
                                    &(graph_.GetAllocations()[subgraph_idx]
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	3368      	adds	r3, #104	; 0x68
 800f158:	4618      	mov	r0, r3
 800f15a:	f7ff fe7d 	bl	800ee58 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 800f15e:	4602      	mov	r2, r0
 800f160:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f162:	00db      	lsls	r3, r3, #3
 800f164:	4413      	add	r3, r2
                                          .node_and_registrations[i]
 800f166:	681a      	ldr	r2, [r3, #0]
 800f168:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f16a:	212c      	movs	r1, #44	; 0x2c
 800f16c:	fb01 f303 	mul.w	r3, r1, r3
 800f170:	4413      	add	r3, r2
          GetRegistrationFromOpCode(opcode, op_resolver_, error_reporter_,
 800f172:	3328      	adds	r3, #40	; 0x28
 800f174:	4622      	mov	r2, r4
 800f176:	4629      	mov	r1, r5
 800f178:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f17a:	f7fb fd07 	bl	800ab8c <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration>
 800f17e:	4603      	mov	r3, r0
 800f180:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                          .registration));
      if (status != kTfLiteOk) {
 800f184:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d00e      	beq.n	800f1aa <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x132>
        MicroPrintf("Failed to get registration from op code %s\n ",
 800f18c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f18e:	f016 f99c 	bl	80254ca <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>
 800f192:	4603      	mov	r3, r0
 800f194:	4618      	mov	r0, r3
 800f196:	f7fb fcb5 	bl	800ab04 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 800f19a:	4603      	mov	r3, r0
 800f19c:	4619      	mov	r1, r3
 800f19e:	4873      	ldr	r0, [pc, #460]	; (800f36c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2f4>)
 800f1a0:	f7ff fa12 	bl	800e5c8 <_Z11MicroPrintfPKcz>
                    EnumNameBuiltinOperator(GetBuiltinCode(opcode)));
        return status;
 800f1a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f1a8:	e0d9      	b.n	800f35e <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2e6>
      }
      const auto* registration = graph_.GetAllocations()[subgraph_idx]
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	3368      	adds	r3, #104	; 0x68
 800f1ae:	4618      	mov	r0, r3
 800f1b0:	f7ff fe52 	bl	800ee58 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 800f1b4:	4602      	mov	r2, r0
 800f1b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f1b8:	00db      	lsls	r3, r3, #3
 800f1ba:	4413      	add	r3, r2
                                     .node_and_registrations[i]
 800f1bc:	681a      	ldr	r2, [r3, #0]
 800f1be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f1c0:	212c      	movs	r1, #44	; 0x2c
 800f1c2:	fb01 f303 	mul.w	r3, r1, r3
 800f1c6:	4413      	add	r3, r2
                                     .registration;
 800f1c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f1ca:	62bb      	str	r3, [r7, #40]	; 0x28
      if (registration == nullptr) {
 800f1cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d105      	bne.n	800f1de <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x166>
        MicroPrintf("Skipping op for opcode_index %d\n", index);
 800f1d2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f1d4:	4866      	ldr	r0, [pc, #408]	; (800f370 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2f8>)
 800f1d6:	f7ff f9f7 	bl	800e5c8 <_Z11MicroPrintfPKcz>
        return kTfLiteError;
 800f1da:	2301      	movs	r3, #1
 800f1dc:	e0bf      	b.n	800f35e <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2e6>
      }
      BuiltinOperator op_type =
          static_cast<BuiltinOperator>(registration->builtin_code);
 800f1de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1e0:	695b      	ldr	r3, [r3, #20]
      BuiltinOperator op_type =
 800f1e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

      const char* custom_data = nullptr;
 800f1e6:	2300      	movs	r3, #0
 800f1e8:	64fb      	str	r3, [r7, #76]	; 0x4c
      size_t custom_data_size = 0;
 800f1ea:	2300      	movs	r3, #0
 800f1ec:	64bb      	str	r3, [r7, #72]	; 0x48
      unsigned char* builtin_data = nullptr;
 800f1ee:	2300      	movs	r3, #0
 800f1f0:	617b      	str	r3, [r7, #20]

      if (op_type == BuiltinOperator_CUSTOM) {
 800f1f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f1f6:	2b20      	cmp	r3, #32
 800f1f8:	d11b      	bne.n	800f232 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1ba>
        // Custom Ops may or may not have a non-null custom_options field.
        if (op->custom_options() != nullptr) {
 800f1fa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f1fc:	f7ff fe04 	bl	800ee08 <_ZNK6tflite8Operator14custom_optionsEv>
 800f200:	4603      	mov	r3, r0
 800f202:	2b00      	cmp	r3, #0
 800f204:	bf14      	ite	ne
 800f206:	2301      	movne	r3, #1
 800f208:	2300      	moveq	r3, #0
 800f20a:	b2db      	uxtb	r3, r3
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d051      	beq.n	800f2b4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x23c>
          custom_data =
              reinterpret_cast<const char*>(op->custom_options()->data());
 800f210:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f212:	f7ff fdf9 	bl	800ee08 <_ZNK6tflite8Operator14custom_optionsEv>
 800f216:	4603      	mov	r3, r0
 800f218:	4618      	mov	r0, r3
 800f21a:	f7fe fef5 	bl	800e008 <_ZNK11flatbuffers6VectorIhE4dataEv>
 800f21e:	64f8      	str	r0, [r7, #76]	; 0x4c
          custom_data_size = op->custom_options()->size();
 800f220:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f222:	f7ff fdf1 	bl	800ee08 <_ZNK6tflite8Operator14custom_optionsEv>
 800f226:	4603      	mov	r3, r0
 800f228:	4618      	mov	r0, r3
 800f22a:	f7fe fd52 	bl	800dcd2 <_ZNK11flatbuffers6VectorIhE4sizeEv>
 800f22e:	64b8      	str	r0, [r7, #72]	; 0x48
 800f230:	e040      	b.n	800f2b4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x23c>
        }
      } else {
        if (op->custom_options() != nullptr) {
 800f232:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f234:	f7ff fde8 	bl	800ee08 <_ZNK6tflite8Operator14custom_optionsEv>
 800f238:	4603      	mov	r3, r0
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	bf14      	ite	ne
 800f23e:	2301      	movne	r3, #1
 800f240:	2300      	moveq	r3, #0
 800f242:	b2db      	uxtb	r3, r3
 800f244:	2b00      	cmp	r3, #0
 800f246:	d00b      	beq.n	800f260 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1e8>
          MicroPrintf(
 800f248:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f24c:	4618      	mov	r0, r3
 800f24e:	f7fb fc59 	bl	800ab04 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 800f252:	4603      	mov	r3, r0
 800f254:	4619      	mov	r1, r3
 800f256:	4847      	ldr	r0, [pc, #284]	; (800f374 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2fc>)
 800f258:	f7ff f9b6 	bl	800e5c8 <_Z11MicroPrintfPKcz>
              "Unsupported behavior: found builtin operator %s with custom "
              "options.\n",
              EnumNameBuiltinOperator(op_type));
          return kTfLiteError;
 800f25c:	2301      	movs	r3, #1
 800f25e:	e07e      	b.n	800f35e <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2e6>
        }

        MicroOpResolver::BuiltinParseFunction parser =
            op_resolver_.GetOpDataParser(op_type);
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	685a      	ldr	r2, [r3, #4]
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	685b      	ldr	r3, [r3, #4]
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	3320      	adds	r3, #32
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 800f272:	4610      	mov	r0, r2
 800f274:	4798      	blx	r3
 800f276:	6238      	str	r0, [r7, #32]
        if (parser == nullptr) {
 800f278:	6a3b      	ldr	r3, [r7, #32]
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d10b      	bne.n	800f296 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x21e>
          MicroPrintf("Did not find a parser for %s",
 800f27e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f282:	4618      	mov	r0, r3
 800f284:	f7fb fc3e 	bl	800ab04 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 800f288:	4603      	mov	r3, r0
 800f28a:	4619      	mov	r1, r3
 800f28c:	483a      	ldr	r0, [pc, #232]	; (800f378 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x300>)
 800f28e:	f7ff f99b 	bl	800e5c8 <_Z11MicroPrintfPKcz>
                      EnumNameBuiltinOperator(op_type));

          return kTfLiteError;
 800f292:	2301      	movs	r3, #1
 800f294:	e063      	b.n	800f35e <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2e6>
        }
        TF_LITE_ENSURE_STATUS(parser(op, error_reporter_,
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	6899      	ldr	r1, [r3, #8]
 800f29a:	f107 0314 	add.w	r3, r7, #20
 800f29e:	6a3c      	ldr	r4, [r7, #32]
 800f2a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f2a2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f2a4:	47a0      	blx	r4
 800f2a6:	4603      	mov	r3, r0
 800f2a8:	77fb      	strb	r3, [r7, #31]
 800f2aa:	7ffb      	ldrb	r3, [r7, #31]
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d001      	beq.n	800f2b4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x23c>
 800f2b0:	7ffb      	ldrb	r3, [r7, #31]
 800f2b2:	e054      	b.n	800f35e <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2e6>
                                     builtin_data_allocator,
                                     (void**)(&builtin_data)));
      }

      TfLiteIntArray* inputs_array;
      TF_LITE_ENSURE_STATUS(allocator_.FlatBufferVectorToTfLiteTypeArray(
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 800f2b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f2ba:	f7fd f832 	bl	800c322 <_ZNK6tflite8Operator6inputsEv>
 800f2be:	4601      	mov	r1, r0
 800f2c0:	f107 0310 	add.w	r3, r7, #16
 800f2c4:	461a      	mov	r2, r3
 800f2c6:	4620      	mov	r0, r4
 800f2c8:	f7fe fc36 	bl	800db38 <_ZN6tflite14MicroAllocator33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIlEEPP14TfLiteIntArray>
 800f2cc:	4603      	mov	r3, r0
 800f2ce:	77bb      	strb	r3, [r7, #30]
 800f2d0:	7fbb      	ldrb	r3, [r7, #30]
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d001      	beq.n	800f2da <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x262>
 800f2d6:	7fbb      	ldrb	r3, [r7, #30]
 800f2d8:	e041      	b.n	800f35e <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2e6>
          op->inputs(), &inputs_array));

      TfLiteIntArray* outputs_array;
      TF_LITE_ENSURE_STATUS(allocator_.FlatBufferVectorToTfLiteTypeArray(
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 800f2de:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f2e0:	f7fd f82d 	bl	800c33e <_ZNK6tflite8Operator7outputsEv>
 800f2e4:	4601      	mov	r1, r0
 800f2e6:	f107 030c 	add.w	r3, r7, #12
 800f2ea:	461a      	mov	r2, r3
 800f2ec:	4620      	mov	r0, r4
 800f2ee:	f7fe fc23 	bl	800db38 <_ZN6tflite14MicroAllocator33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIlEEPP14TfLiteIntArray>
 800f2f2:	4603      	mov	r3, r0
 800f2f4:	777b      	strb	r3, [r7, #29]
 800f2f6:	7f7b      	ldrb	r3, [r7, #29]
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d001      	beq.n	800f300 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x288>
 800f2fc:	7f7b      	ldrb	r3, [r7, #29]
 800f2fe:	e02e      	b.n	800f35e <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2e6>
          op->outputs(), &outputs_array));

      TfLiteNode* node = &(
          graph_.GetAllocations()[subgraph_idx].node_and_registrations[i].node);
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	3368      	adds	r3, #104	; 0x68
 800f304:	4618      	mov	r0, r3
 800f306:	f7ff fda7 	bl	800ee58 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 800f30a:	4602      	mov	r2, r0
 800f30c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f30e:	00db      	lsls	r3, r3, #3
 800f310:	4413      	add	r3, r2
 800f312:	681a      	ldr	r2, [r3, #0]
 800f314:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f316:	212c      	movs	r1, #44	; 0x2c
 800f318:	fb01 f303 	mul.w	r3, r1, r3
 800f31c:	4413      	add	r3, r2
 800f31e:	61bb      	str	r3, [r7, #24]
      *node = {};
 800f320:	69bb      	ldr	r3, [r7, #24]
 800f322:	4618      	mov	r0, r3
 800f324:	2328      	movs	r3, #40	; 0x28
 800f326:	461a      	mov	r2, r3
 800f328:	2100      	movs	r1, #0
 800f32a:	f016 fc83 	bl	8025c34 <memset>
      node->inputs = inputs_array;
 800f32e:	693a      	ldr	r2, [r7, #16]
 800f330:	69bb      	ldr	r3, [r7, #24]
 800f332:	601a      	str	r2, [r3, #0]
      node->outputs = outputs_array;
 800f334:	68fa      	ldr	r2, [r7, #12]
 800f336:	69bb      	ldr	r3, [r7, #24]
 800f338:	605a      	str	r2, [r3, #4]
      node->builtin_data = reinterpret_cast<void*>(builtin_data);
 800f33a:	697a      	ldr	r2, [r7, #20]
 800f33c:	69bb      	ldr	r3, [r7, #24]
 800f33e:	615a      	str	r2, [r3, #20]
      node->custom_initial_data = custom_data;
 800f340:	69bb      	ldr	r3, [r7, #24]
 800f342:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f344:	619a      	str	r2, [r3, #24]
      node->custom_initial_data_size = custom_data_size;
 800f346:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f348:	69bb      	ldr	r3, [r7, #24]
 800f34a:	61da      	str	r2, [r3, #28]
    for (size_t i = 0; i < subgraph->operators()->size(); ++i) {
 800f34c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f34e:	3301      	adds	r3, #1
 800f350:	653b      	str	r3, [r7, #80]	; 0x50
 800f352:	e6c5      	b.n	800f0e0 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x68>
  for (int subgraph_idx = 0; subgraph_idx < graph_.NumSubgraphs();
 800f354:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f356:	3301      	adds	r3, #1
 800f358:	657b      	str	r3, [r7, #84]	; 0x54
 800f35a:	e693      	b.n	800f084 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xc>
    }
  }
  return kTfLiteOk;
 800f35c:	2300      	movs	r3, #0
}
 800f35e:	4618      	mov	r0, r3
 800f360:	3758      	adds	r7, #88	; 0x58
 800f362:	46bd      	mov	sp, r7
 800f364:	bdb0      	pop	{r4, r5, r7, pc}
 800f366:	bf00      	nop
 800f368:	08029a3c 	.word	0x08029a3c
 800f36c:	08029a68 	.word	0x08029a68
 800f370:	08029a98 	.word	0x08029a98
 800f374:	08029abc 	.word	0x08029abc
 800f378:	08029b04 	.word	0x08029b04

0800f37c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>:

TfLiteStatus MicroInterpreter::AllocateTensors() {
 800f37c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f380:	b088      	sub	sp, #32
 800f382:	af02      	add	r7, sp, #8
 800f384:	6078      	str	r0, [r7, #4]
  SubgraphAllocations* allocations = allocator_.StartModelAllocation(model_);
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	4619      	mov	r1, r3
 800f390:	4610      	mov	r0, r2
 800f392:	f7fd fe19 	bl	800cfc8 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE>
 800f396:	60f8      	str	r0, [r7, #12]

  if (allocations == nullptr) {
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d10b      	bne.n	800f3b6 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x3a>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	689b      	ldr	r3, [r3, #8]
 800f3a2:	49a4      	ldr	r1, [pc, #656]	; (800f634 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2b8>)
 800f3a4:	4618      	mov	r0, r3
 800f3a6:	f7f9 f9cf 	bl	8008748 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed starting model allocation.\n");
    initialization_status_ = kTfLiteError;
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	2201      	movs	r2, #1
 800f3ae:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
    return kTfLiteError;
 800f3b2:	2301      	movs	r3, #1
 800f3b4:	e139      	b.n	800f62a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ae>
  }

  graph_.SetSubgraphAllocations(allocations);
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	3368      	adds	r3, #104	; 0x68
 800f3ba:	68f9      	ldr	r1, [r7, #12]
 800f3bc:	4618      	mov	r0, r3
 800f3be:	f7ff fc74 	bl	800ecaa <_ZN6tflite10MicroGraph22SetSubgraphAllocationsEPNS_19SubgraphAllocationsE>

  TF_LITE_ENSURE_STATUS(PrepareNodeAndRegistrationDataFromFlatbuffer());
 800f3c2:	6878      	ldr	r0, [r7, #4]
 800f3c4:	f7ff fe58 	bl	800f078 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv>
 800f3c8:	4603      	mov	r3, r0
 800f3ca:	72fb      	strb	r3, [r7, #11]
 800f3cc:	7afb      	ldrb	r3, [r7, #11]
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d001      	beq.n	800f3d6 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x5a>
 800f3d2:	7afb      	ldrb	r3, [r7, #11]
 800f3d4:	e129      	b.n	800f62a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ae>

  // Only allow AllocatePersistentBuffer in Init stage.
  context_.AllocatePersistentBuffer = AllocatePersistentBuffer;
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	4a97      	ldr	r2, [pc, #604]	; (800f638 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2bc>)
 800f3da:	645a      	str	r2, [r3, #68]	; 0x44
  context_.RequestScratchBufferInArena = nullptr;
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	2200      	movs	r2, #0
 800f3e0:	64da      	str	r2, [r3, #76]	; 0x4c
  context_.GetScratchBuffer = nullptr;
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	2200      	movs	r2, #0
 800f3e6:	651a      	str	r2, [r3, #80]	; 0x50
  context_.GetExecutionPlan = GetGraph;
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	4a94      	ldr	r2, [pc, #592]	; (800f63c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2c0>)
 800f3ec:	611a      	str	r2, [r3, #16]
  graph_.InitSubgraphs();
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	3368      	adds	r3, #104	; 0x68
 800f3f2:	4618      	mov	r0, r3
 800f3f4:	f7ff f9a4 	bl	800e740 <_ZN6tflite10MicroGraph13InitSubgraphsEv>

  // Both AllocatePersistentBuffer and RequestScratchBufferInArena is
  // available in Prepare stage.
  context_.RequestScratchBufferInArena = RequestScratchBufferInArena;
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	4a91      	ldr	r2, [pc, #580]	; (800f640 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2c4>)
 800f3fc:	64da      	str	r2, [r3, #76]	; 0x4c
  graph_.PrepareSubgraphs();
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	3368      	adds	r3, #104	; 0x68
 800f402:	4618      	mov	r0, r3
 800f404:	f7ff fa16 	bl	800e834 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv>

  // Prepare is done, we're ready for Invoke. Memory allocation is no longer
  // allowed. Kernels can only fetch scratch buffers via GetScratchBuffer.
  context_.AllocatePersistentBuffer = nullptr;
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	2200      	movs	r2, #0
 800f40c:	645a      	str	r2, [r3, #68]	; 0x44
  context_.RequestScratchBufferInArena = nullptr;
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	2200      	movs	r2, #0
 800f412:	64da      	str	r2, [r3, #76]	; 0x4c
  context_.GetScratchBuffer = GetScratchBuffer;
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	4a8b      	ldr	r2, [pc, #556]	; (800f644 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2c8>)
 800f418:	651a      	str	r2, [r3, #80]	; 0x50

  TF_LITE_ENSURE_OK(&context_, allocator_.FinishModelAllocation(
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	681d      	ldr	r5, [r3, #0]
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	3368      	adds	r3, #104	; 0x68
 800f426:	4618      	mov	r0, r3
 800f428:	f7ff fd16 	bl	800ee58 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 800f42c:	4602      	mov	r2, r0
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	3388      	adds	r3, #136	; 0x88
 800f432:	4629      	mov	r1, r5
 800f434:	4620      	mov	r0, r4
 800f436:	f7fd fe49 	bl	800d0cc <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE>
 800f43a:	4603      	mov	r3, r0
 800f43c:	72bb      	strb	r3, [r7, #10]
 800f43e:	7abb      	ldrb	r3, [r7, #10]
 800f440:	2b00      	cmp	r3, #0
 800f442:	d001      	beq.n	800f448 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xcc>
 800f444:	7abb      	ldrb	r3, [r7, #10]
 800f446:	e0f0      	b.n	800f62a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ae>
                                   &scratch_buffer_handles_));

  // TODO(b/162311891): Drop these allocations when the interpreter supports
  // handling buffers from TfLiteEvalTensor.
  input_tensors_ =
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
          sizeof(TfLiteTensor*) * inputs_size()));
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	330c      	adds	r3, #12
 800f454:	681c      	ldr	r4, [r3, #0]
 800f456:	6878      	ldr	r0, [r7, #4]
 800f458:	f7ff fd0a 	bl	800ee70 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv>
 800f45c:	4603      	mov	r3, r0
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
 800f45e:	009b      	lsls	r3, r3, #2
 800f460:	4619      	mov	r1, r3
 800f462:	4628      	mov	r0, r5
 800f464:	47a0      	blx	r4
 800f466:	4602      	mov	r2, r0
  input_tensors_ =
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  if (input_tensors_ == nullptr) {
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f474:	2b00      	cmp	r3, #0
 800f476:	d10d      	bne.n	800f494 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x118>
    TF_LITE_REPORT_ERROR(
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	689c      	ldr	r4, [r3, #8]
 800f47c:	6878      	ldr	r0, [r7, #4]
 800f47e:	f7ff fcf7 	bl	800ee70 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv>
 800f482:	4603      	mov	r3, r0
 800f484:	009b      	lsls	r3, r3, #2
 800f486:	461a      	mov	r2, r3
 800f488:	496f      	ldr	r1, [pc, #444]	; (800f648 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2cc>)
 800f48a:	4620      	mov	r0, r4
 800f48c:	f7f9 f95c 	bl	8008748 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to allocate memory for context->input_tensors_, "
        "%d bytes required",
        sizeof(TfLiteTensor*) * inputs_size());
    return kTfLiteError;
 800f490:	2301      	movs	r3, #1
 800f492:	e0ca      	b.n	800f62a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ae>
  }

  for (size_t i = 0; i < inputs_size(); ++i) {
 800f494:	2300      	movs	r3, #0
 800f496:	617b      	str	r3, [r7, #20]
 800f498:	6878      	ldr	r0, [r7, #4]
 800f49a:	f7ff fce9 	bl	800ee70 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv>
 800f49e:	4602      	mov	r2, r0
 800f4a0:	697b      	ldr	r3, [r7, #20]
 800f4a2:	4293      	cmp	r3, r2
 800f4a4:	bf34      	ite	cc
 800f4a6:	2301      	movcc	r3, #1
 800f4a8:	2300      	movcs	r3, #0
 800f4aa:	b2db      	uxtb	r3, r3
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d03c      	beq.n	800f52a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1ae>
    input_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	6e5e      	ldr	r6, [r3, #100]	; 0x64
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
        model_, graph_.GetAllocations(), inputs().Get(i), 0);
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	681d      	ldr	r5, [r3, #0]
    input_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	603b      	str	r3, [r7, #0]
        model_, graph_.GetAllocations(), inputs().Get(i), 0);
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	3368      	adds	r3, #104	; 0x68
 800f4c6:	4618      	mov	r0, r3
 800f4c8:	f7ff fcc6 	bl	800ee58 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 800f4cc:	4680      	mov	r8, r0
 800f4ce:	6878      	ldr	r0, [r7, #4]
 800f4d0:	f7ff fce9 	bl	800eea6 <_ZNK6tflite16MicroInterpreter6inputsEv>
 800f4d4:	4603      	mov	r3, r0
 800f4d6:	6979      	ldr	r1, [r7, #20]
 800f4d8:	4618      	mov	r0, r3
 800f4da:	f7fa f885 	bl	80095e8 <_ZNK11flatbuffers6VectorIlE3GetEm>
 800f4de:	4601      	mov	r1, r0
    input_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800f4e6:	697b      	ldr	r3, [r7, #20]
 800f4e8:	009b      	lsls	r3, r3, #2
 800f4ea:	18d4      	adds	r4, r2, r3
 800f4ec:	2300      	movs	r3, #0
 800f4ee:	9300      	str	r3, [sp, #0]
 800f4f0:	460b      	mov	r3, r1
 800f4f2:	4642      	mov	r2, r8
 800f4f4:	6839      	ldr	r1, [r7, #0]
 800f4f6:	4630      	mov	r0, r6
 800f4f8:	47a8      	blx	r5
 800f4fa:	4603      	mov	r3, r0
 800f4fc:	6023      	str	r3, [r4, #0]
    if (input_tensors_[i] == nullptr) {
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800f504:	697b      	ldr	r3, [r7, #20]
 800f506:	009b      	lsls	r3, r3, #2
 800f508:	4413      	add	r3, r2
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d108      	bne.n	800f522 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1a6>
      TF_LITE_REPORT_ERROR(error_reporter_,
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	689b      	ldr	r3, [r3, #8]
 800f514:	697a      	ldr	r2, [r7, #20]
 800f516:	494d      	ldr	r1, [pc, #308]	; (800f64c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2d0>)
 800f518:	4618      	mov	r0, r3
 800f51a:	f7f9 f915 	bl	8008748 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Failed to initialize input tensor %d", i);
      return kTfLiteError;
 800f51e:	2301      	movs	r3, #1
 800f520:	e083      	b.n	800f62a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ae>
  for (size_t i = 0; i < inputs_size(); ++i) {
 800f522:	697b      	ldr	r3, [r7, #20]
 800f524:	3301      	adds	r3, #1
 800f526:	617b      	str	r3, [r7, #20]
 800f528:	e7b6      	b.n	800f498 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x11c>
  }

  // TODO(b/162311891): Drop these allocations when the interpreter supports
  // handling buffers from TfLiteEvalTensor.
  output_tensors_ =
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	6e5b      	ldr	r3, [r3, #100]	; 0x64
          sizeof(TfLiteTensor*) * outputs_size()));
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	330c      	adds	r3, #12
 800f536:	681c      	ldr	r4, [r3, #0]
 800f538:	6878      	ldr	r0, [r7, #4]
 800f53a:	f7ff fccb 	bl	800eed4 <_ZNK6tflite16MicroInterpreter12outputs_sizeEv>
 800f53e:	4603      	mov	r3, r0
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
 800f540:	009b      	lsls	r3, r3, #2
 800f542:	4619      	mov	r1, r3
 800f544:	4628      	mov	r0, r5
 800f546:	47a0      	blx	r4
 800f548:	4602      	mov	r2, r0
  output_tensors_ =
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  if (output_tensors_ == nullptr) {
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f556:	2b00      	cmp	r3, #0
 800f558:	d10d      	bne.n	800f576 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1fa>
    TF_LITE_REPORT_ERROR(
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	689c      	ldr	r4, [r3, #8]
 800f55e:	6878      	ldr	r0, [r7, #4]
 800f560:	f7ff fcb8 	bl	800eed4 <_ZNK6tflite16MicroInterpreter12outputs_sizeEv>
 800f564:	4603      	mov	r3, r0
 800f566:	009b      	lsls	r3, r3, #2
 800f568:	461a      	mov	r2, r3
 800f56a:	4939      	ldr	r1, [pc, #228]	; (800f650 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2d4>)
 800f56c:	4620      	mov	r0, r4
 800f56e:	f7f9 f8eb 	bl	8008748 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to allocate memory for context->output_tensors_, "
        "%d bytes required",
        sizeof(TfLiteTensor*) * outputs_size());
    return kTfLiteError;
 800f572:	2301      	movs	r3, #1
 800f574:	e059      	b.n	800f62a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ae>
  }

  for (size_t i = 0; i < outputs_size(); ++i) {
 800f576:	2300      	movs	r3, #0
 800f578:	613b      	str	r3, [r7, #16]
 800f57a:	6878      	ldr	r0, [r7, #4]
 800f57c:	f7ff fcaa 	bl	800eed4 <_ZNK6tflite16MicroInterpreter12outputs_sizeEv>
 800f580:	4602      	mov	r2, r0
 800f582:	693b      	ldr	r3, [r7, #16]
 800f584:	4293      	cmp	r3, r2
 800f586:	bf34      	ite	cc
 800f588:	2301      	movcc	r3, #1
 800f58a:	2300      	movcs	r3, #0
 800f58c:	b2db      	uxtb	r3, r3
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d03c      	beq.n	800f60c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x290>
    output_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	6e5e      	ldr	r6, [r3, #100]	; 0x64
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	6e5b      	ldr	r3, [r3, #100]	; 0x64
        model_, graph_.GetAllocations(), outputs().Get(i), 0);
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	681d      	ldr	r5, [r3, #0]
    output_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	603b      	str	r3, [r7, #0]
        model_, graph_.GetAllocations(), outputs().Get(i), 0);
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	3368      	adds	r3, #104	; 0x68
 800f5a8:	4618      	mov	r0, r3
 800f5aa:	f7ff fc55 	bl	800ee58 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 800f5ae:	4680      	mov	r8, r0
 800f5b0:	6878      	ldr	r0, [r7, #4]
 800f5b2:	f7ff fcaa 	bl	800ef0a <_ZNK6tflite16MicroInterpreter7outputsEv>
 800f5b6:	4603      	mov	r3, r0
 800f5b8:	6939      	ldr	r1, [r7, #16]
 800f5ba:	4618      	mov	r0, r3
 800f5bc:	f7fa f814 	bl	80095e8 <_ZNK11flatbuffers6VectorIlE3GetEm>
 800f5c0:	4601      	mov	r1, r0
    output_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800f5c8:	693b      	ldr	r3, [r7, #16]
 800f5ca:	009b      	lsls	r3, r3, #2
 800f5cc:	18d4      	adds	r4, r2, r3
 800f5ce:	2300      	movs	r3, #0
 800f5d0:	9300      	str	r3, [sp, #0]
 800f5d2:	460b      	mov	r3, r1
 800f5d4:	4642      	mov	r2, r8
 800f5d6:	6839      	ldr	r1, [r7, #0]
 800f5d8:	4630      	mov	r0, r6
 800f5da:	47a8      	blx	r5
 800f5dc:	4603      	mov	r3, r0
 800f5de:	6023      	str	r3, [r4, #0]
    if (output_tensors_[i] == nullptr) {
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800f5e6:	693b      	ldr	r3, [r7, #16]
 800f5e8:	009b      	lsls	r3, r3, #2
 800f5ea:	4413      	add	r3, r2
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d108      	bne.n	800f604 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x288>
      TF_LITE_REPORT_ERROR(error_reporter_,
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	689b      	ldr	r3, [r3, #8]
 800f5f6:	693a      	ldr	r2, [r7, #16]
 800f5f8:	4916      	ldr	r1, [pc, #88]	; (800f654 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2d8>)
 800f5fa:	4618      	mov	r0, r3
 800f5fc:	f7f9 f8a4 	bl	8008748 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Failed to initialize output tensor %d", i);
      return kTfLiteError;
 800f600:	2301      	movs	r3, #1
 800f602:	e012      	b.n	800f62a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ae>
  for (size_t i = 0; i < outputs_size(); ++i) {
 800f604:	693b      	ldr	r3, [r7, #16]
 800f606:	3301      	adds	r3, #1
 800f608:	613b      	str	r3, [r7, #16]
 800f60a:	e7b6      	b.n	800f57a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1fe>
    }
  }

  TF_LITE_ENSURE_STATUS(ResetVariableTensors());
 800f60c:	6878      	ldr	r0, [r7, #4]
 800f60e:	f000 f89d 	bl	800f74c <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv>
 800f612:	4603      	mov	r3, r0
 800f614:	727b      	strb	r3, [r7, #9]
 800f616:	7a7b      	ldrb	r3, [r7, #9]
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d001      	beq.n	800f620 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2a4>
 800f61c:	7a7b      	ldrb	r3, [r7, #9]
 800f61e:	e004      	b.n	800f62a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ae>

  tensors_allocated_ = true;
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	2201      	movs	r2, #1
 800f624:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
  return kTfLiteOk;
 800f628:	2300      	movs	r3, #0
}
 800f62a:	4618      	mov	r0, r3
 800f62c:	3718      	adds	r7, #24
 800f62e:	46bd      	mov	sp, r7
 800f630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f634:	08029b24 	.word	0x08029b24
 800f638:	0800f769 	.word	0x0800f769
 800f63c:	0800f8bf 	.word	0x0800f8bf
 800f640:	0800f795 	.word	0x0800f795
 800f644:	0800f7cb 	.word	0x0800f7cb
 800f648:	08029b48 	.word	0x08029b48
 800f64c:	08029b94 	.word	0x08029b94
 800f650:	08029bbc 	.word	0x08029bbc
 800f654:	08029c08 	.word	0x08029c08

0800f658 <_ZN6tflite16MicroInterpreter6InvokeEv>:

TfLiteStatus MicroInterpreter::Invoke() {
 800f658:	b580      	push	{r7, lr}
 800f65a:	b084      	sub	sp, #16
 800f65c:	af00      	add	r7, sp, #0
 800f65e:	6078      	str	r0, [r7, #4]
  if (initialization_status_ != kTfLiteOk) {
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 800f666:	2b00      	cmp	r3, #0
 800f668:	d007      	beq.n	800f67a <_ZN6tflite16MicroInterpreter6InvokeEv+0x22>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	689b      	ldr	r3, [r3, #8]
 800f66e:	4912      	ldr	r1, [pc, #72]	; (800f6b8 <_ZN6tflite16MicroInterpreter6InvokeEv+0x60>)
 800f670:	4618      	mov	r0, r3
 800f672:	f7f9 f869 	bl	8008748 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Invoke() called after initialization failed\n");
    return kTfLiteError;
 800f676:	2301      	movs	r3, #1
 800f678:	e019      	b.n	800f6ae <_ZN6tflite16MicroInterpreter6InvokeEv+0x56>
  }

  // Ensure tensors are allocated before the interpreter is invoked to avoid
  // difficult to debug segfaults.
  if (!tensors_allocated_) {
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f680:	f083 0301 	eor.w	r3, r3, #1
 800f684:	b2db      	uxtb	r3, r3
 800f686:	2b00      	cmp	r3, #0
 800f688:	d009      	beq.n	800f69e <_ZN6tflite16MicroInterpreter6InvokeEv+0x46>
    TF_LITE_ENSURE_OK(&context_, AllocateTensors());
 800f68a:	6878      	ldr	r0, [r7, #4]
 800f68c:	f7ff fe76 	bl	800f37c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>
 800f690:	4603      	mov	r3, r0
 800f692:	73fb      	strb	r3, [r7, #15]
 800f694:	7bfb      	ldrb	r3, [r7, #15]
 800f696:	2b00      	cmp	r3, #0
 800f698:	d001      	beq.n	800f69e <_ZN6tflite16MicroInterpreter6InvokeEv+0x46>
 800f69a:	7bfb      	ldrb	r3, [r7, #15]
 800f69c:	e007      	b.n	800f6ae <_ZN6tflite16MicroInterpreter6InvokeEv+0x56>
  }
  return graph_.InvokeSubgraph(0);
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	3368      	adds	r3, #104	; 0x68
 800f6a2:	2100      	movs	r1, #0
 800f6a4:	4618      	mov	r0, r3
 800f6a6:	f7ff f9b1 	bl	800ea0c <_ZN6tflite10MicroGraph14InvokeSubgraphEi>
 800f6aa:	4603      	mov	r3, r0
 800f6ac:	bf00      	nop
}
 800f6ae:	4618      	mov	r0, r3
 800f6b0:	3710      	adds	r7, #16
 800f6b2:	46bd      	mov	sp, r7
 800f6b4:	bd80      	pop	{r7, pc}
 800f6b6:	bf00      	nop
 800f6b8:	08029c30 	.word	0x08029c30

0800f6bc <_ZN6tflite16MicroInterpreter5inputEj>:

TfLiteTensor* MicroInterpreter::input(size_t index) {
 800f6bc:	b580      	push	{r7, lr}
 800f6be:	b084      	sub	sp, #16
 800f6c0:	af00      	add	r7, sp, #0
 800f6c2:	6078      	str	r0, [r7, #4]
 800f6c4:	6039      	str	r1, [r7, #0]
  const size_t length = inputs_size();
 800f6c6:	6878      	ldr	r0, [r7, #4]
 800f6c8:	f7ff fbd2 	bl	800ee70 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv>
 800f6cc:	60f8      	str	r0, [r7, #12]
  if (index >= length) {
 800f6ce:	683a      	ldr	r2, [r7, #0]
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	429a      	cmp	r2, r3
 800f6d4:	d308      	bcc.n	800f6e8 <_ZN6tflite16MicroInterpreter5inputEj+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	6898      	ldr	r0, [r3, #8]
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	683a      	ldr	r2, [r7, #0]
 800f6de:	4908      	ldr	r1, [pc, #32]	; (800f700 <_ZN6tflite16MicroInterpreter5inputEj+0x44>)
 800f6e0:	f7f9 f832 	bl	8008748 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Input index %d out of range (length is %d)", index,
                         length);
    return nullptr;
 800f6e4:	2300      	movs	r3, #0
 800f6e6:	e006      	b.n	800f6f6 <_ZN6tflite16MicroInterpreter5inputEj+0x3a>
  }
  return input_tensors_[index];
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800f6ee:	683b      	ldr	r3, [r7, #0]
 800f6f0:	009b      	lsls	r3, r3, #2
 800f6f2:	4413      	add	r3, r2
 800f6f4:	681b      	ldr	r3, [r3, #0]
}
 800f6f6:	4618      	mov	r0, r3
 800f6f8:	3710      	adds	r7, #16
 800f6fa:	46bd      	mov	sp, r7
 800f6fc:	bd80      	pop	{r7, pc}
 800f6fe:	bf00      	nop
 800f700:	08029c60 	.word	0x08029c60

0800f704 <_ZN6tflite16MicroInterpreter6outputEj>:

TfLiteTensor* MicroInterpreter::output(size_t index) {
 800f704:	b580      	push	{r7, lr}
 800f706:	b084      	sub	sp, #16
 800f708:	af00      	add	r7, sp, #0
 800f70a:	6078      	str	r0, [r7, #4]
 800f70c:	6039      	str	r1, [r7, #0]
  const size_t length = outputs_size();
 800f70e:	6878      	ldr	r0, [r7, #4]
 800f710:	f7ff fbe0 	bl	800eed4 <_ZNK6tflite16MicroInterpreter12outputs_sizeEv>
 800f714:	60f8      	str	r0, [r7, #12]
  if (index >= length) {
 800f716:	683a      	ldr	r2, [r7, #0]
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	429a      	cmp	r2, r3
 800f71c:	d308      	bcc.n	800f730 <_ZN6tflite16MicroInterpreter6outputEj+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	6898      	ldr	r0, [r3, #8]
 800f722:	68fb      	ldr	r3, [r7, #12]
 800f724:	683a      	ldr	r2, [r7, #0]
 800f726:	4908      	ldr	r1, [pc, #32]	; (800f748 <_ZN6tflite16MicroInterpreter6outputEj+0x44>)
 800f728:	f7f9 f80e 	bl	8008748 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Output index %d out of range (length is %d)", index,
                         length);
    return nullptr;
 800f72c:	2300      	movs	r3, #0
 800f72e:	e006      	b.n	800f73e <_ZN6tflite16MicroInterpreter6outputEj+0x3a>
  }
  return output_tensors_[index];
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800f736:	683b      	ldr	r3, [r7, #0]
 800f738:	009b      	lsls	r3, r3, #2
 800f73a:	4413      	add	r3, r2
 800f73c:	681b      	ldr	r3, [r3, #0]
}
 800f73e:	4618      	mov	r0, r3
 800f740:	3710      	adds	r7, #16
 800f742:	46bd      	mov	sp, r7
 800f744:	bd80      	pop	{r7, pc}
 800f746:	bf00      	nop
 800f748:	08029c8c 	.word	0x08029c8c

0800f74c <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv>:

TfLiteStatus MicroInterpreter::ResetVariableTensors() {
 800f74c:	b580      	push	{r7, lr}
 800f74e:	b082      	sub	sp, #8
 800f750:	af00      	add	r7, sp, #0
 800f752:	6078      	str	r0, [r7, #4]
  return graph_.ResetVariableTensors();
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	3368      	adds	r3, #104	; 0x68
 800f758:	4618      	mov	r0, r3
 800f75a:	f7ff fa03 	bl	800eb64 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv>
 800f75e:	4603      	mov	r3, r0
}
 800f760:	4618      	mov	r0, r3
 800f762:	3708      	adds	r7, #8
 800f764:	46bd      	mov	sp, r7
 800f766:	bd80      	pop	{r7, pc}

0800f768 <_ZN6tflite16MicroInterpreter24AllocatePersistentBufferEP13TfLiteContextj>:

void* MicroInterpreter::AllocatePersistentBuffer(TfLiteContext* ctx,
                                                 size_t bytes) {
 800f768:	b580      	push	{r7, lr}
 800f76a:	b082      	sub	sp, #8
 800f76c:	af00      	add	r7, sp, #0
 800f76e:	6078      	str	r0, [r7, #4]
 800f770:	6039      	str	r1, [r7, #0]
  return reinterpret_cast<MicroInterpreter*>(ctx->impl_)
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	68db      	ldr	r3, [r3, #12]
      ->allocator_.AllocatePersistentBuffer(bytes);
 800f776:	6e5a      	ldr	r2, [r3, #100]	; 0x64
  return reinterpret_cast<MicroInterpreter*>(ctx->impl_)
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	68db      	ldr	r3, [r3, #12]
      ->allocator_.AllocatePersistentBuffer(bytes);
 800f77c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	330c      	adds	r3, #12
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	6839      	ldr	r1, [r7, #0]
 800f786:	4610      	mov	r0, r2
 800f788:	4798      	blx	r3
 800f78a:	4603      	mov	r3, r0
}
 800f78c:	4618      	mov	r0, r3
 800f78e:	3708      	adds	r7, #8
 800f790:	46bd      	mov	sp, r7
 800f792:	bd80      	pop	{r7, pc}

0800f794 <_ZN6tflite16MicroInterpreter27RequestScratchBufferInArenaEP13TfLiteContextjPi>:

TfLiteStatus MicroInterpreter::RequestScratchBufferInArena(TfLiteContext* ctx,
                                                           size_t bytes,
                                                           int* buffer_idx) {
 800f794:	b590      	push	{r4, r7, lr}
 800f796:	b087      	sub	sp, #28
 800f798:	af00      	add	r7, sp, #0
 800f79a:	60f8      	str	r0, [r7, #12]
 800f79c:	60b9      	str	r1, [r7, #8]
 800f79e:	607a      	str	r2, [r7, #4]
  MicroInterpreter* interpreter =
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	68db      	ldr	r3, [r3, #12]
 800f7a4:	617b      	str	r3, [r7, #20]
      reinterpret_cast<MicroInterpreter*>(ctx->impl_);
  return interpreter->allocator_.RequestScratchBufferInArena(
 800f7a6:	697b      	ldr	r3, [r7, #20]
 800f7a8:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 800f7aa:	697b      	ldr	r3, [r7, #20]
 800f7ac:	3368      	adds	r3, #104	; 0x68
 800f7ae:	4618      	mov	r0, r3
 800f7b0:	f7ff fb46 	bl	800ee40 <_ZN6tflite10MicroGraph23GetCurrentSubgraphIndexEv>
 800f7b4:	4602      	mov	r2, r0
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	68b9      	ldr	r1, [r7, #8]
 800f7ba:	4620      	mov	r0, r4
 800f7bc:	f7fd fd1a 	bl	800d1f4 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi>
 800f7c0:	4603      	mov	r3, r0
      bytes, interpreter->graph_.GetCurrentSubgraphIndex(), buffer_idx);
}
 800f7c2:	4618      	mov	r0, r3
 800f7c4:	371c      	adds	r7, #28
 800f7c6:	46bd      	mov	sp, r7
 800f7c8:	bd90      	pop	{r4, r7, pc}

0800f7ca <_ZN6tflite16MicroInterpreter16GetScratchBufferEP13TfLiteContexti>:

void* MicroInterpreter::GetScratchBuffer(TfLiteContext* ctx, int buffer_idx) {
 800f7ca:	b480      	push	{r7}
 800f7cc:	b085      	sub	sp, #20
 800f7ce:	af00      	add	r7, sp, #0
 800f7d0:	6078      	str	r0, [r7, #4]
 800f7d2:	6039      	str	r1, [r7, #0]
  MicroInterpreter* interpreter =
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	68db      	ldr	r3, [r3, #12]
 800f7d8:	60fb      	str	r3, [r7, #12]
      reinterpret_cast<MicroInterpreter*>(ctx->impl_);
  ScratchBufferHandle* handle =
      interpreter->scratch_buffer_handles_ + buffer_idx;
 800f7da:	68fb      	ldr	r3, [r7, #12]
 800f7dc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800f7e0:	683b      	ldr	r3, [r7, #0]
 800f7e2:	009b      	lsls	r3, r3, #2
  ScratchBufferHandle* handle =
 800f7e4:	4413      	add	r3, r2
 800f7e6:	60bb      	str	r3, [r7, #8]
  return handle->data;
 800f7e8:	68bb      	ldr	r3, [r7, #8]
 800f7ea:	681b      	ldr	r3, [r3, #0]
}
 800f7ec:	4618      	mov	r0, r3
 800f7ee:	3714      	adds	r7, #20
 800f7f0:	46bd      	mov	sp, r7
 800f7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7f6:	4770      	bx	lr

0800f7f8 <_ZN6tflite16MicroInterpreter13ReportOpErrorEP13TfLiteContextPKcz>:

void MicroInterpreter::ReportOpError(struct TfLiteContext* context,
                                     const char* format, ...) {
 800f7f8:	b40e      	push	{r1, r2, r3}
 800f7fa:	b580      	push	{r7, lr}
 800f7fc:	b085      	sub	sp, #20
 800f7fe:	af00      	add	r7, sp, #0
 800f800:	6078      	str	r0, [r7, #4]
#ifndef TF_LITE_STRIP_ERROR_STRINGS
  MicroInterpreter* interpreter =
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	68db      	ldr	r3, [r3, #12]
 800f806:	60fb      	str	r3, [r7, #12]
      static_cast<MicroInterpreter*>(context->impl_);
  va_list args;
  va_start(args, format);
 800f808:	f107 0320 	add.w	r3, r7, #32
 800f80c:	60bb      	str	r3, [r7, #8]
  TF_LITE_REPORT_ERROR(interpreter->error_reporter_, format, args);
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	6898      	ldr	r0, [r3, #8]
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	689b      	ldr	r3, [r3, #8]
 800f816:	681b      	ldr	r3, [r3, #0]
 800f818:	3308      	adds	r3, #8
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	68ba      	ldr	r2, [r7, #8]
 800f81e:	69f9      	ldr	r1, [r7, #28]
 800f820:	4798      	blx	r3
  va_end(args);
#endif
}
 800f822:	bf00      	nop
 800f824:	3714      	adds	r7, #20
 800f826:	46bd      	mov	sp, r7
 800f828:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f82c:	b003      	add	sp, #12
 800f82e:	4770      	bx	lr

0800f830 <_ZN6tflite16MicroInterpreter9GetTensorEPK13TfLiteContexti>:

TfLiteTensor* MicroInterpreter::GetTensor(const struct TfLiteContext* context,
                                          int tensor_idx) {
 800f830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f834:	b086      	sub	sp, #24
 800f836:	af02      	add	r7, sp, #8
 800f838:	6078      	str	r0, [r7, #4]
 800f83a:	6039      	str	r1, [r7, #0]
  MicroInterpreter* interpreter =
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	68db      	ldr	r3, [r3, #12]
 800f840:	60fb      	str	r3, [r7, #12]
      static_cast<MicroInterpreter*>(context->impl_);
  return interpreter->allocator_.AllocateTempTfLiteTensor(
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	6e5b      	ldr	r3, [r3, #100]	; 0x64
      interpreter->model_, interpreter->graph_.GetAllocations(), tensor_idx,
      interpreter->get_subgraph_index());
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	3304      	adds	r3, #4
 800f84e:	681c      	ldr	r4, [r3, #0]
  return interpreter->allocator_.AllocateTempTfLiteTensor(
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	681e      	ldr	r6, [r3, #0]
      interpreter->model_, interpreter->graph_.GetAllocations(), tensor_idx,
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	3368      	adds	r3, #104	; 0x68
 800f858:	4618      	mov	r0, r3
 800f85a:	f7ff fafd 	bl	800ee58 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 800f85e:	4680      	mov	r8, r0
  return interpreter->allocator_.AllocateTempTfLiteTensor(
 800f860:	68f8      	ldr	r0, [r7, #12]
 800f862:	f7ff fb69 	bl	800ef38 <_ZN6tflite16MicroInterpreter18get_subgraph_indexEv>
 800f866:	4603      	mov	r3, r0
 800f868:	9300      	str	r3, [sp, #0]
 800f86a:	683b      	ldr	r3, [r7, #0]
 800f86c:	4642      	mov	r2, r8
 800f86e:	4631      	mov	r1, r6
 800f870:	4628      	mov	r0, r5
 800f872:	47a0      	blx	r4
 800f874:	4603      	mov	r3, r0
}
 800f876:	4618      	mov	r0, r3
 800f878:	3710      	adds	r7, #16
 800f87a:	46bd      	mov	sp, r7
 800f87c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f880 <_ZN6tflite16MicroInterpreter13GetEvalTensorEPK13TfLiteContexti>:

TfLiteEvalTensor* MicroInterpreter::GetEvalTensor(
    const struct TfLiteContext* context, int tensor_idx) {
 800f880:	b590      	push	{r4, r7, lr}
 800f882:	b085      	sub	sp, #20
 800f884:	af00      	add	r7, sp, #0
 800f886:	6078      	str	r0, [r7, #4]
 800f888:	6039      	str	r1, [r7, #0]
  MicroInterpreter* interpreter =
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	68db      	ldr	r3, [r3, #12]
 800f88e:	60fb      	str	r3, [r7, #12]
      reinterpret_cast<MicroInterpreter*>(context->impl_);
  return &interpreter->graph_
              .GetAllocations()[interpreter->get_subgraph_index()]
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	3368      	adds	r3, #104	; 0x68
 800f894:	4618      	mov	r0, r3
 800f896:	f7ff fadf 	bl	800ee58 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 800f89a:	4604      	mov	r4, r0
 800f89c:	68f8      	ldr	r0, [r7, #12]
 800f89e:	f7ff fb4b 	bl	800ef38 <_ZN6tflite16MicroInterpreter18get_subgraph_indexEv>
 800f8a2:	4603      	mov	r3, r0
 800f8a4:	00db      	lsls	r3, r3, #3
 800f8a6:	4423      	add	r3, r4
              .tensors[tensor_idx];
 800f8a8:	6859      	ldr	r1, [r3, #4]
 800f8aa:	683a      	ldr	r2, [r7, #0]
 800f8ac:	4613      	mov	r3, r2
 800f8ae:	005b      	lsls	r3, r3, #1
 800f8b0:	4413      	add	r3, r2
 800f8b2:	009b      	lsls	r3, r3, #2
 800f8b4:	440b      	add	r3, r1
}
 800f8b6:	4618      	mov	r0, r3
 800f8b8:	3714      	adds	r7, #20
 800f8ba:	46bd      	mov	sp, r7
 800f8bc:	bd90      	pop	{r4, r7, pc}

0800f8be <_ZN6tflite16MicroInterpreter8GetGraphEP13TfLiteContextPP14TfLiteIntArray>:

TfLiteStatus MicroInterpreter::GetGraph(struct TfLiteContext* context,
                                        TfLiteIntArray** args) {
 800f8be:	b480      	push	{r7}
 800f8c0:	b085      	sub	sp, #20
 800f8c2:	af00      	add	r7, sp, #0
 800f8c4:	6078      	str	r0, [r7, #4]
 800f8c6:	6039      	str	r1, [r7, #0]
  MicroInterpreter* interpreter =
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	68db      	ldr	r3, [r3, #12]
 800f8cc:	60fb      	str	r3, [r7, #12]
      reinterpret_cast<MicroInterpreter*>(context->impl_);
  *args = reinterpret_cast<TfLiteIntArray*>(&interpreter->graph_);
 800f8ce:	68fb      	ldr	r3, [r7, #12]
 800f8d0:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800f8d4:	683b      	ldr	r3, [r7, #0]
 800f8d6:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800f8d8:	2300      	movs	r3, #0
}
 800f8da:	4618      	mov	r0, r3
 800f8dc:	3714      	adds	r7, #20
 800f8de:	46bd      	mov	sp, r7
 800f8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8e4:	4770      	bx	lr

0800f8e6 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800f8e6:	b580      	push	{r7, lr}
 800f8e8:	b082      	sub	sp, #8
 800f8ea:	af00      	add	r7, sp, #0
 800f8ec:	6078      	str	r0, [r7, #4]
 800f8ee:	460b      	mov	r3, r1
 800f8f0:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800f8f2:	887b      	ldrh	r3, [r7, #2]
 800f8f4:	4619      	mov	r1, r3
 800f8f6:	6878      	ldr	r0, [r7, #4]
 800f8f8:	f000 f83a 	bl	800f970 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t>
 800f8fc:	4603      	mov	r3, r0
  }
 800f8fe:	4618      	mov	r0, r3
 800f900:	3708      	adds	r7, #8
 800f902:	46bd      	mov	sp, r7
 800f904:	bd80      	pop	{r7, pc}

0800f906 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 800f906:	b580      	push	{r7, lr}
 800f908:	b082      	sub	sp, #8
 800f90a:	af00      	add	r7, sp, #0
 800f90c:	6078      	str	r0, [r7, #4]
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	4618      	mov	r0, r3
 800f914:	f7f9 fd78 	bl	8009408 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800f918:	4603      	mov	r3, r0
 800f91a:	4618      	mov	r0, r3
 800f91c:	3708      	adds	r7, #8
 800f91e:	46bd      	mov	sp, r7
 800f920:	bd80      	pop	{r7, pc}
	...

0800f924 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 800f924:	b580      	push	{r7, lr}
 800f926:	b082      	sub	sp, #8
 800f928:	af00      	add	r7, sp, #0
 800f92a:	6078      	str	r0, [r7, #4]
 800f92c:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 800f92e:	6878      	ldr	r0, [r7, #4]
 800f930:	f7ff ffe9 	bl	800f906 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4sizeEv>
 800f934:	4602      	mov	r2, r0
 800f936:	683b      	ldr	r3, [r7, #0]
 800f938:	4293      	cmp	r3, r2
 800f93a:	d306      	bcc.n	800f94a <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm+0x26>
 800f93c:	4b09      	ldr	r3, [pc, #36]	; (800f964 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm+0x40>)
 800f93e:	4a0a      	ldr	r2, [pc, #40]	; (800f968 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm+0x44>)
 800f940:	f44f 7183 	mov.w	r1, #262	; 0x106
 800f944:	4809      	ldr	r0, [pc, #36]	; (800f96c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm+0x48>)
 800f946:	f016 f885 	bl	8025a54 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 800f94a:	6878      	ldr	r0, [r7, #4]
 800f94c:	f000 f844 	bl	800f9d8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4DataEv>
 800f950:	4603      	mov	r3, r0
 800f952:	6839      	ldr	r1, [r7, #0]
 800f954:	4618      	mov	r0, r3
 800f956:	f000 f82b 	bl	800f9b0 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite12OperatorCodeEEEE4ReadEPKhm>
 800f95a:	4603      	mov	r3, r0
  }
 800f95c:	4618      	mov	r0, r3
 800f95e:	3708      	adds	r7, #8
 800f960:	46bd      	mov	sp, r7
 800f962:	bd80      	pop	{r7, pc}
 800f964:	08029cb8 	.word	0x08029cb8
 800f968:	08029f14 	.word	0x08029f14
 800f96c:	08029d94 	.word	0x08029d94

0800f970 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800f970:	b580      	push	{r7, lr}
 800f972:	b084      	sub	sp, #16
 800f974:	af00      	add	r7, sp, #0
 800f976:	6078      	str	r0, [r7, #4]
 800f978:	460b      	mov	r3, r1
 800f97a:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800f97c:	887b      	ldrh	r3, [r7, #2]
 800f97e:	4619      	mov	r1, r3
 800f980:	6878      	ldr	r0, [r7, #4]
 800f982:	f7f8 ff30 	bl	80087e6 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800f986:	4603      	mov	r3, r0
 800f988:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800f98a:	687a      	ldr	r2, [r7, #4]
 800f98c:	89fb      	ldrh	r3, [r7, #14]
 800f98e:	4413      	add	r3, r2
 800f990:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800f992:	89fb      	ldrh	r3, [r7, #14]
 800f994:	2b00      	cmp	r3, #0
 800f996:	d006      	beq.n	800f9a6 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t+0x36>
 800f998:	68b8      	ldr	r0, [r7, #8]
 800f99a:	f7f9 fd4e 	bl	800943a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800f99e:	4602      	mov	r2, r0
 800f9a0:	68bb      	ldr	r3, [r7, #8]
 800f9a2:	4413      	add	r3, r2
                        : nullptr;
 800f9a4:	e000      	b.n	800f9a8 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800f9a6:	2300      	movs	r3, #0
  }
 800f9a8:	4618      	mov	r0, r3
 800f9aa:	3710      	adds	r7, #16
 800f9ac:	46bd      	mov	sp, r7
 800f9ae:	bd80      	pop	{r7, pc}

0800f9b0 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite12OperatorCodeEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 800f9b0:	b580      	push	{r7, lr}
 800f9b2:	b082      	sub	sp, #8
 800f9b4:	af00      	add	r7, sp, #0
 800f9b6:	6078      	str	r0, [r7, #4]
 800f9b8:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 800f9ba:	683b      	ldr	r3, [r7, #0]
 800f9bc:	009b      	lsls	r3, r3, #2
 800f9be:	687a      	ldr	r2, [r7, #4]
 800f9c0:	4413      	add	r3, r2
 800f9c2:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 800f9c4:	6878      	ldr	r0, [r7, #4]
 800f9c6:	f7f9 fd38 	bl	800943a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800f9ca:	4602      	mov	r2, r0
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	4413      	add	r3, r2
  }
 800f9d0:	4618      	mov	r0, r3
 800f9d2:	3708      	adds	r7, #8
 800f9d4:	46bd      	mov	sp, r7
 800f9d6:	bd80      	pop	{r7, pc}

0800f9d8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4DataEv>:
  const uint8_t *Data() const {
 800f9d8:	b480      	push	{r7}
 800f9da:	b083      	sub	sp, #12
 800f9dc:	af00      	add	r7, sp, #0
 800f9de:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	3304      	adds	r3, #4
  }
 800f9e4:	4618      	mov	r0, r3
 800f9e6:	370c      	adds	r7, #12
 800f9e8:	46bd      	mov	sp, r7
 800f9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ee:	4770      	bx	lr

0800f9f0 <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_>:

// All input buffers to the number conversion functions must be this long.
const int kFastToBufferSize = 48;

// Reverses a zero-terminated string in-place.
char* ReverseStringInPlace(char* start, char* end) {
 800f9f0:	b480      	push	{r7}
 800f9f2:	b087      	sub	sp, #28
 800f9f4:	af00      	add	r7, sp, #0
 800f9f6:	6078      	str	r0, [r7, #4]
 800f9f8:	6039      	str	r1, [r7, #0]
  char* p1 = start;
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	617b      	str	r3, [r7, #20]
  char* p2 = end - 1;
 800f9fe:	683b      	ldr	r3, [r7, #0]
 800fa00:	3b01      	subs	r3, #1
 800fa02:	613b      	str	r3, [r7, #16]
  while (p1 < p2) {
 800fa04:	697a      	ldr	r2, [r7, #20]
 800fa06:	693b      	ldr	r3, [r7, #16]
 800fa08:	429a      	cmp	r2, r3
 800fa0a:	d20e      	bcs.n	800fa2a <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_+0x3a>
    char tmp = *p1;
 800fa0c:	697b      	ldr	r3, [r7, #20]
 800fa0e:	781b      	ldrb	r3, [r3, #0]
 800fa10:	73fb      	strb	r3, [r7, #15]
    *p1++ = *p2;
 800fa12:	697b      	ldr	r3, [r7, #20]
 800fa14:	1c5a      	adds	r2, r3, #1
 800fa16:	617a      	str	r2, [r7, #20]
 800fa18:	693a      	ldr	r2, [r7, #16]
 800fa1a:	7812      	ldrb	r2, [r2, #0]
 800fa1c:	701a      	strb	r2, [r3, #0]
    *p2-- = tmp;
 800fa1e:	693b      	ldr	r3, [r7, #16]
 800fa20:	1e5a      	subs	r2, r3, #1
 800fa22:	613a      	str	r2, [r7, #16]
 800fa24:	7bfa      	ldrb	r2, [r7, #15]
 800fa26:	701a      	strb	r2, [r3, #0]
  while (p1 < p2) {
 800fa28:	e7ec      	b.n	800fa04 <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_+0x14>
  }
  return start;
 800fa2a:	687b      	ldr	r3, [r7, #4]
}
 800fa2c:	4618      	mov	r0, r3
 800fa2e:	371c      	adds	r7, #28
 800fa30:	46bd      	mov	sp, r7
 800fa32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa36:	4770      	bx	lr

0800fa38 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>:

// Appends a string to a string, in-place. You need to pass in the maximum
// string length as the second argument.
char* StrCatStr(char* main, int main_max_length, const char* to_append) {
 800fa38:	b480      	push	{r7}
 800fa3a:	b087      	sub	sp, #28
 800fa3c:	af00      	add	r7, sp, #0
 800fa3e:	60f8      	str	r0, [r7, #12]
 800fa40:	60b9      	str	r1, [r7, #8]
 800fa42:	607a      	str	r2, [r7, #4]
  char* current = main;
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	617b      	str	r3, [r7, #20]
  while (*current != 0) {
 800fa48:	697b      	ldr	r3, [r7, #20]
 800fa4a:	781b      	ldrb	r3, [r3, #0]
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d003      	beq.n	800fa58 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x20>
    ++current;
 800fa50:	697b      	ldr	r3, [r7, #20]
 800fa52:	3301      	adds	r3, #1
 800fa54:	617b      	str	r3, [r7, #20]
  while (*current != 0) {
 800fa56:	e7f7      	b.n	800fa48 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x10>
  }
  char* current_end = main + (main_max_length - 1);
 800fa58:	68bb      	ldr	r3, [r7, #8]
 800fa5a:	3b01      	subs	r3, #1
 800fa5c:	68fa      	ldr	r2, [r7, #12]
 800fa5e:	4413      	add	r3, r2
 800fa60:	613b      	str	r3, [r7, #16]
  while ((*to_append != 0) && (current < current_end)) {
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	781b      	ldrb	r3, [r3, #0]
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d00e      	beq.n	800fa88 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x50>
 800fa6a:	697a      	ldr	r2, [r7, #20]
 800fa6c:	693b      	ldr	r3, [r7, #16]
 800fa6e:	429a      	cmp	r2, r3
 800fa70:	d20a      	bcs.n	800fa88 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x50>
    *current = *to_append;
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	781a      	ldrb	r2, [r3, #0]
 800fa76:	697b      	ldr	r3, [r7, #20]
 800fa78:	701a      	strb	r2, [r3, #0]
    ++current;
 800fa7a:	697b      	ldr	r3, [r7, #20]
 800fa7c:	3301      	adds	r3, #1
 800fa7e:	617b      	str	r3, [r7, #20]
    ++to_append;
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	3301      	adds	r3, #1
 800fa84:	607b      	str	r3, [r7, #4]
  while ((*to_append != 0) && (current < current_end)) {
 800fa86:	e7ec      	b.n	800fa62 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x2a>
  }
  *current = 0;
 800fa88:	697b      	ldr	r3, [r7, #20]
 800fa8a:	2200      	movs	r2, #0
 800fa8c:	701a      	strb	r2, [r3, #0]
  return current;
 800fa8e:	697b      	ldr	r3, [r7, #20]
}
 800fa90:	4618      	mov	r0, r3
 800fa92:	371c      	adds	r7, #28
 800fa94:	46bd      	mov	sp, r7
 800fa96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa9a:	4770      	bx	lr

0800fa9c <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>:

// Populates the provided buffer with an ASCII representation of the number.
char* FastUInt32ToBufferLeft(uint32_t i, char* buffer, int base) {
 800fa9c:	b580      	push	{r7, lr}
 800fa9e:	b088      	sub	sp, #32
 800faa0:	af00      	add	r7, sp, #0
 800faa2:	60f8      	str	r0, [r7, #12]
 800faa4:	60b9      	str	r1, [r7, #8]
 800faa6:	607a      	str	r2, [r7, #4]
  char* start = buffer;
 800faa8:	68bb      	ldr	r3, [r7, #8]
 800faaa:	61bb      	str	r3, [r7, #24]
  do {
    int32_t digit = i % base;
 800faac:	687a      	ldr	r2, [r7, #4]
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	fbb3 f1f2 	udiv	r1, r3, r2
 800fab4:	fb02 f201 	mul.w	r2, r2, r1
 800fab8:	1a9b      	subs	r3, r3, r2
 800faba:	617b      	str	r3, [r7, #20]
    char character;
    if (digit < 10) {
 800fabc:	697b      	ldr	r3, [r7, #20]
 800fabe:	2b09      	cmp	r3, #9
 800fac0:	dc04      	bgt.n	800facc <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x30>
      character = '0' + digit;
 800fac2:	697b      	ldr	r3, [r7, #20]
 800fac4:	b2db      	uxtb	r3, r3
 800fac6:	3330      	adds	r3, #48	; 0x30
 800fac8:	77fb      	strb	r3, [r7, #31]
 800faca:	e003      	b.n	800fad4 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x38>
    } else {
      character = 'a' + (digit - 10);
 800facc:	697b      	ldr	r3, [r7, #20]
 800face:	b2db      	uxtb	r3, r3
 800fad0:	3357      	adds	r3, #87	; 0x57
 800fad2:	77fb      	strb	r3, [r7, #31]
    }
    *buffer++ = character;
 800fad4:	68bb      	ldr	r3, [r7, #8]
 800fad6:	1c5a      	adds	r2, r3, #1
 800fad8:	60ba      	str	r2, [r7, #8]
 800fada:	7ffa      	ldrb	r2, [r7, #31]
 800fadc:	701a      	strb	r2, [r3, #0]
    i /= base;
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	68fa      	ldr	r2, [r7, #12]
 800fae2:	fbb2 f3f3 	udiv	r3, r2, r3
 800fae6:	60fb      	str	r3, [r7, #12]
  } while (i > 0);
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	2b00      	cmp	r3, #0
 800faec:	d000      	beq.n	800faf0 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x54>
  do {
 800faee:	e7dd      	b.n	800faac <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x10>
  *buffer = 0;
 800faf0:	68bb      	ldr	r3, [r7, #8]
 800faf2:	2200      	movs	r2, #0
 800faf4:	701a      	strb	r2, [r3, #0]
  ReverseStringInPlace(start, buffer);
 800faf6:	68b9      	ldr	r1, [r7, #8]
 800faf8:	69b8      	ldr	r0, [r7, #24]
 800fafa:	f7ff ff79 	bl	800f9f0 <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_>
  return buffer;
 800fafe:	68bb      	ldr	r3, [r7, #8]
}
 800fb00:	4618      	mov	r0, r3
 800fb02:	3720      	adds	r7, #32
 800fb04:	46bd      	mov	sp, r7
 800fb06:	bd80      	pop	{r7, pc}

0800fb08 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc>:

// Populates the provided buffer with an ASCII representation of the number.
char* FastInt32ToBufferLeft(int32_t i, char* buffer) {
 800fb08:	b580      	push	{r7, lr}
 800fb0a:	b084      	sub	sp, #16
 800fb0c:	af00      	add	r7, sp, #0
 800fb0e:	6078      	str	r0, [r7, #4]
 800fb10:	6039      	str	r1, [r7, #0]
  uint32_t u = i;
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	60fb      	str	r3, [r7, #12]
  if (i < 0) {
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	da07      	bge.n	800fb2c <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc+0x24>
    *buffer++ = '-';
 800fb1c:	683b      	ldr	r3, [r7, #0]
 800fb1e:	1c5a      	adds	r2, r3, #1
 800fb20:	603a      	str	r2, [r7, #0]
 800fb22:	222d      	movs	r2, #45	; 0x2d
 800fb24:	701a      	strb	r2, [r3, #0]
    u = -u;
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	425b      	negs	r3, r3
 800fb2a:	60fb      	str	r3, [r7, #12]
  }
  return FastUInt32ToBufferLeft(u, buffer, 10);
 800fb2c:	220a      	movs	r2, #10
 800fb2e:	6839      	ldr	r1, [r7, #0]
 800fb30:	68f8      	ldr	r0, [r7, #12]
 800fb32:	f7ff ffb3 	bl	800fa9c <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
 800fb36:	4603      	mov	r3, r0
}
 800fb38:	4618      	mov	r0, r3
 800fb3a:	3710      	adds	r7, #16
 800fb3c:	46bd      	mov	sp, r7
 800fb3e:	bd80      	pop	{r7, pc}

0800fb40 <_ZN12_GLOBAL__N_111StrCatInt32EPcil>:

// Converts a number to a string and appends it to another.
char* StrCatInt32(char* main, int main_max_length, int32_t number) {
 800fb40:	b580      	push	{r7, lr}
 800fb42:	b090      	sub	sp, #64	; 0x40
 800fb44:	af00      	add	r7, sp, #0
 800fb46:	60f8      	str	r0, [r7, #12]
 800fb48:	60b9      	str	r1, [r7, #8]
 800fb4a:	607a      	str	r2, [r7, #4]
  char number_string[kFastToBufferSize];
  FastInt32ToBufferLeft(number, number_string);
 800fb4c:	f107 0310 	add.w	r3, r7, #16
 800fb50:	4619      	mov	r1, r3
 800fb52:	6878      	ldr	r0, [r7, #4]
 800fb54:	f7ff ffd8 	bl	800fb08 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc>
  return StrCatStr(main, main_max_length, number_string);
 800fb58:	f107 0310 	add.w	r3, r7, #16
 800fb5c:	461a      	mov	r2, r3
 800fb5e:	68b9      	ldr	r1, [r7, #8]
 800fb60:	68f8      	ldr	r0, [r7, #12]
 800fb62:	f7ff ff69 	bl	800fa38 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 800fb66:	4603      	mov	r3, r0
}
 800fb68:	4618      	mov	r0, r3
 800fb6a:	3740      	adds	r7, #64	; 0x40
 800fb6c:	46bd      	mov	sp, r7
 800fb6e:	bd80      	pop	{r7, pc}

0800fb70 <_ZN12_GLOBAL__N_112StrCatUInt32EPcimi>:

// Converts a number to a string and appends it to another.
char* StrCatUInt32(char* main, int main_max_length, uint32_t number, int base) {
 800fb70:	b580      	push	{r7, lr}
 800fb72:	b090      	sub	sp, #64	; 0x40
 800fb74:	af00      	add	r7, sp, #0
 800fb76:	60f8      	str	r0, [r7, #12]
 800fb78:	60b9      	str	r1, [r7, #8]
 800fb7a:	607a      	str	r2, [r7, #4]
 800fb7c:	603b      	str	r3, [r7, #0]
  char number_string[kFastToBufferSize];
  FastUInt32ToBufferLeft(number, number_string, base);
 800fb7e:	f107 0310 	add.w	r3, r7, #16
 800fb82:	683a      	ldr	r2, [r7, #0]
 800fb84:	4619      	mov	r1, r3
 800fb86:	6878      	ldr	r0, [r7, #4]
 800fb88:	f7ff ff88 	bl	800fa9c <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
  return StrCatStr(main, main_max_length, number_string);
 800fb8c:	f107 0310 	add.w	r3, r7, #16
 800fb90:	461a      	mov	r2, r3
 800fb92:	68b9      	ldr	r1, [r7, #8]
 800fb94:	68f8      	ldr	r0, [r7, #12]
 800fb96:	f7ff ff4f 	bl	800fa38 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 800fb9a:	4603      	mov	r3, r0
}
 800fb9c:	4618      	mov	r0, r3
 800fb9e:	3740      	adds	r7, #64	; 0x40
 800fba0:	46bd      	mov	sp, r7
 800fba2:	bd80      	pop	{r7, pc}

0800fba4 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc>:

// Populates the provided buffer with ASCII representation of the float number.
// Avoids the use of any floating point instructions (since these aren't
// supported on many microcontrollers) and as a consequence prints values with
// power-of-two exponents.
char* FastFloatToBufferLeft(float f, char* buffer) {
 800fba4:	b590      	push	{r4, r7, lr}
 800fba6:	b09b      	sub	sp, #108	; 0x6c
 800fba8:	af00      	add	r7, sp, #0
 800fbaa:	ed87 0a01 	vstr	s0, [r7, #4]
 800fbae:	6038      	str	r0, [r7, #0]
  char* current = buffer;
 800fbb0:	683b      	ldr	r3, [r7, #0]
 800fbb2:	667b      	str	r3, [r7, #100]	; 0x64
  char* current_end = buffer + (kFastToBufferSize - 1);
 800fbb4:	683b      	ldr	r3, [r7, #0]
 800fbb6:	332f      	adds	r3, #47	; 0x2f
 800fbb8:	653b      	str	r3, [r7, #80]	; 0x50
  // Access the bit fields of the floating point value to avoid requiring any
  // float instructions. These constants are derived from IEEE 754.
  const uint32_t sign_mask = 0x80000000;
 800fbba:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fbbe:	64fb      	str	r3, [r7, #76]	; 0x4c
  const uint32_t exponent_mask = 0x7f800000;
 800fbc0:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 800fbc4:	64bb      	str	r3, [r7, #72]	; 0x48
  const int32_t exponent_shift = 23;
 800fbc6:	2317      	movs	r3, #23
 800fbc8:	647b      	str	r3, [r7, #68]	; 0x44
  const int32_t exponent_bias = 127;
 800fbca:	237f      	movs	r3, #127	; 0x7f
 800fbcc:	643b      	str	r3, [r7, #64]	; 0x40
  const uint32_t fraction_mask = 0x007fffff;
 800fbce:	4b6a      	ldr	r3, [pc, #424]	; (800fd78 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1d4>)
 800fbd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fbd2:	687b      	ldr	r3, [r7, #4]
  uint32_t u;
  memcpy(&u, &f, sizeof(int32_t));
 800fbd4:	61fb      	str	r3, [r7, #28]
  const int32_t exponent =
      ((u & exponent_mask) >> exponent_shift) - exponent_bias;
 800fbd6:	69fb      	ldr	r3, [r7, #28]
 800fbd8:	0ddb      	lsrs	r3, r3, #23
 800fbda:	b2db      	uxtb	r3, r3
 800fbdc:	3b7f      	subs	r3, #127	; 0x7f
  const int32_t exponent =
 800fbde:	63bb      	str	r3, [r7, #56]	; 0x38
  const uint32_t fraction = (u & fraction_mask);
 800fbe0:	69fb      	ldr	r3, [r7, #28]
 800fbe2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800fbe6:	637b      	str	r3, [r7, #52]	; 0x34
  // Expect ~0x2B1B9D3 for fraction.
  if (u & sign_mask) {
 800fbe8:	69fb      	ldr	r3, [r7, #28]
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	da05      	bge.n	800fbfa <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x56>
    *current = '-';
 800fbee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fbf0:	222d      	movs	r2, #45	; 0x2d
 800fbf2:	701a      	strb	r2, [r3, #0]
    current += 1;
 800fbf4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fbf6:	3301      	adds	r3, #1
 800fbf8:	667b      	str	r3, [r7, #100]	; 0x64
  }
  *current = 0;
 800fbfa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fbfc:	2200      	movs	r2, #0
 800fbfe:	701a      	strb	r2, [r3, #0]
  // These are special cases for infinities and not-a-numbers.
  if (exponent == 128) {
 800fc00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc02:	2b80      	cmp	r3, #128	; 0x80
 800fc04:	d118      	bne.n	800fc38 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x94>
    if (fraction == 0) {
 800fc06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d10a      	bne.n	800fc22 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x7e>
      current = StrCatStr(current, (current_end - current), "Inf");
 800fc0c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fc0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fc10:	1ad3      	subs	r3, r2, r3
 800fc12:	4a5a      	ldr	r2, [pc, #360]	; (800fd7c <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1d8>)
 800fc14:	4619      	mov	r1, r3
 800fc16:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800fc18:	f7ff ff0e 	bl	800fa38 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 800fc1c:	6678      	str	r0, [r7, #100]	; 0x64
      return current;
 800fc1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fc20:	e0a5      	b.n	800fd6e <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1ca>
    } else {
      current = StrCatStr(current, (current_end - current), "NaN");
 800fc22:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fc24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fc26:	1ad3      	subs	r3, r2, r3
 800fc28:	4a55      	ldr	r2, [pc, #340]	; (800fd80 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1dc>)
 800fc2a:	4619      	mov	r1, r3
 800fc2c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800fc2e:	f7ff ff03 	bl	800fa38 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 800fc32:	6678      	str	r0, [r7, #100]	; 0x64
      return current;
 800fc34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fc36:	e09a      	b.n	800fd6e <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1ca>
  // correct decimal digits we need to scale our value before passing it to the
  // conversion function. This scale should be 10000000/8388608 = 1.1920928955.
  // We can approximate this using multiply-adds and right-shifts using the
  // values in this array. The 1. portion of the number string is printed out
  // in a fixed way before the fraction, below.
  const int32_t scale_shifts_size = 13;
 800fc38:	230d      	movs	r3, #13
 800fc3a:	633b      	str	r3, [r7, #48]	; 0x30
  const int8_t scale_shifts[13] = {3,  4,  8,  11, 13, 14, 17,
 800fc3c:	4b51      	ldr	r3, [pc, #324]	; (800fd84 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1e0>)
 800fc3e:	f107 040c 	add.w	r4, r7, #12
 800fc42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fc44:	c407      	stmia	r4!, {r0, r1, r2}
 800fc46:	7023      	strb	r3, [r4, #0]
                                   18, 19, 20, 21, 22, 23};
  uint32_t scaled_fraction = fraction;
 800fc48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc4a:	663b      	str	r3, [r7, #96]	; 0x60
  for (int i = 0; i < scale_shifts_size; ++i) {
 800fc4c:	2300      	movs	r3, #0
 800fc4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fc50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fc52:	2b0c      	cmp	r3, #12
 800fc54:	dc0f      	bgt.n	800fc76 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xd2>
    scaled_fraction += (fraction >> scale_shifts[i]);
 800fc56:	f107 020c 	add.w	r2, r7, #12
 800fc5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fc5c:	4413      	add	r3, r2
 800fc5e:	f993 3000 	ldrsb.w	r3, [r3]
 800fc62:	461a      	mov	r2, r3
 800fc64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc66:	40d3      	lsrs	r3, r2
 800fc68:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fc6a:	4413      	add	r3, r2
 800fc6c:	663b      	str	r3, [r7, #96]	; 0x60
  for (int i = 0; i < scale_shifts_size; ++i) {
 800fc6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fc70:	3301      	adds	r3, #1
 800fc72:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fc74:	e7ec      	b.n	800fc50 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xac>
  }
  *current = '1';
 800fc76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fc78:	2231      	movs	r2, #49	; 0x31
 800fc7a:	701a      	strb	r2, [r3, #0]
  current += 1;
 800fc7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fc7e:	3301      	adds	r3, #1
 800fc80:	667b      	str	r3, [r7, #100]	; 0x64
  *current = '.';
 800fc82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fc84:	222e      	movs	r2, #46	; 0x2e
 800fc86:	701a      	strb	r2, [r3, #0]
  current += 1;
 800fc88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fc8a:	3301      	adds	r3, #1
 800fc8c:	667b      	str	r3, [r7, #100]	; 0x64
  *current = 0;
 800fc8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fc90:	2200      	movs	r2, #0
 800fc92:	701a      	strb	r2, [r3, #0]

  // Prepend leading zeros to fill in all 7 bytes of the fraction. Truncate
  // zeros off the end of the fraction. Every fractional value takes 7 bytes.
  // For example, 2500 would be written into the buffer as 0002500 since it
  // represents .00025.
  constexpr int kMaxFractionalDigits = 7;
 800fc94:	2307      	movs	r3, #7
 800fc96:	62fb      	str	r3, [r7, #44]	; 0x2c

  // Abort early if there is not enough space in the buffer.
  if (current_end - current <= kMaxFractionalDigits) {
 800fc98:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fc9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fc9c:	1ad3      	subs	r3, r2, r3
 800fc9e:	2b07      	cmp	r3, #7
 800fca0:	dc01      	bgt.n	800fca6 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x102>
    return current;
 800fca2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fca4:	e063      	b.n	800fd6e <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1ca>
  }

  // Pre-fill buffer with zeros to ensure zero-truncation works properly.
  for (int i = 1; i < kMaxFractionalDigits; i++) {
 800fca6:	2301      	movs	r3, #1
 800fca8:	65bb      	str	r3, [r7, #88]	; 0x58
 800fcaa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fcac:	2b06      	cmp	r3, #6
 800fcae:	dc08      	bgt.n	800fcc2 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x11e>
    *(current + i) = '0';
 800fcb0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fcb2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800fcb4:	4413      	add	r3, r2
 800fcb6:	2230      	movs	r2, #48	; 0x30
 800fcb8:	701a      	strb	r2, [r3, #0]
  for (int i = 1; i < kMaxFractionalDigits; i++) {
 800fcba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fcbc:	3301      	adds	r3, #1
 800fcbe:	65bb      	str	r3, [r7, #88]	; 0x58
 800fcc0:	e7f3      	b.n	800fcaa <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x106>
  }

  // Track how large the fraction is to add leading zeros.
  char* previous = current;
 800fcc2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fcc4:	62bb      	str	r3, [r7, #40]	; 0x28
  current = StrCatUInt32(current, (current_end - current), scaled_fraction, 10);
 800fcc6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fcc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fcca:	1ad1      	subs	r1, r2, r3
 800fccc:	230a      	movs	r3, #10
 800fcce:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fcd0:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800fcd2:	f7ff ff4d 	bl	800fb70 <_ZN12_GLOBAL__N_112StrCatUInt32EPcimi>
 800fcd6:	6678      	str	r0, [r7, #100]	; 0x64
  int fraction_digits = current - previous;
 800fcd8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800fcda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcdc:	1ad3      	subs	r3, r2, r3
 800fcde:	627b      	str	r3, [r7, #36]	; 0x24
  int leading_zeros = kMaxFractionalDigits - fraction_digits;
 800fce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fce2:	f1c3 0307 	rsb	r3, r3, #7
 800fce6:	623b      	str	r3, [r7, #32]

  // Overwrite the null terminator from StrCatUInt32 to ensure zero-trunctaion
  // works properly.
  *current = '0';
 800fce8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fcea:	2230      	movs	r2, #48	; 0x30
 800fcec:	701a      	strb	r2, [r3, #0]

  // Shift fraction values and prepend zeros if necessary.
  if (leading_zeros != 0) {
 800fcee:	6a3b      	ldr	r3, [r7, #32]
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d018      	beq.n	800fd26 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x182>
    for (int i = 0; i < fraction_digits; i++) {
 800fcf4:	2300      	movs	r3, #0
 800fcf6:	657b      	str	r3, [r7, #84]	; 0x54
 800fcf8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fcfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcfc:	429a      	cmp	r2, r3
 800fcfe:	da0f      	bge.n	800fd20 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x17c>
      current--;
 800fd00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fd02:	3b01      	subs	r3, #1
 800fd04:	667b      	str	r3, [r7, #100]	; 0x64
      *(current + leading_zeros) = *current;
 800fd06:	6a3b      	ldr	r3, [r7, #32]
 800fd08:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800fd0a:	4413      	add	r3, r2
 800fd0c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800fd0e:	7812      	ldrb	r2, [r2, #0]
 800fd10:	701a      	strb	r2, [r3, #0]
      *current = '0';
 800fd12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fd14:	2230      	movs	r2, #48	; 0x30
 800fd16:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < fraction_digits; i++) {
 800fd18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fd1a:	3301      	adds	r3, #1
 800fd1c:	657b      	str	r3, [r7, #84]	; 0x54
 800fd1e:	e7eb      	b.n	800fcf8 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x154>
    }
    current += kMaxFractionalDigits;
 800fd20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fd22:	3307      	adds	r3, #7
 800fd24:	667b      	str	r3, [r7, #100]	; 0x64
  }

  // Truncate trailing zeros for cleaner logs. Ensure we leave at least one
  // fractional character for the case when scaled_fraction is 0.
  while (*(current - 1) == '0' && (current - 1) > previous) {
 800fd26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fd28:	3b01      	subs	r3, #1
 800fd2a:	781b      	ldrb	r3, [r3, #0]
 800fd2c:	2b30      	cmp	r3, #48	; 0x30
 800fd2e:	d108      	bne.n	800fd42 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x19e>
 800fd30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fd32:	3b01      	subs	r3, #1
 800fd34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fd36:	429a      	cmp	r2, r3
 800fd38:	d203      	bcs.n	800fd42 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x19e>
    current--;
 800fd3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fd3c:	3b01      	subs	r3, #1
 800fd3e:	667b      	str	r3, [r7, #100]	; 0x64
  while (*(current - 1) == '0' && (current - 1) > previous) {
 800fd40:	e7f1      	b.n	800fd26 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x182>
  }
  *current = 0;
 800fd42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fd44:	2200      	movs	r2, #0
 800fd46:	701a      	strb	r2, [r3, #0]
  current = StrCatStr(current, (current_end - current), "*2^");
 800fd48:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fd4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fd4c:	1ad3      	subs	r3, r2, r3
 800fd4e:	4a0e      	ldr	r2, [pc, #56]	; (800fd88 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1e4>)
 800fd50:	4619      	mov	r1, r3
 800fd52:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800fd54:	f7ff fe70 	bl	800fa38 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 800fd58:	6678      	str	r0, [r7, #100]	; 0x64
  current = StrCatInt32(current, (current_end - current), exponent);
 800fd5a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fd5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fd5e:	1ad3      	subs	r3, r2, r3
 800fd60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fd62:	4619      	mov	r1, r3
 800fd64:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800fd66:	f7ff feeb 	bl	800fb40 <_ZN12_GLOBAL__N_111StrCatInt32EPcil>
 800fd6a:	6678      	str	r0, [r7, #100]	; 0x64
  return current;
 800fd6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
}
 800fd6e:	4618      	mov	r0, r3
 800fd70:	376c      	adds	r7, #108	; 0x6c
 800fd72:	46bd      	mov	sp, r7
 800fd74:	bd90      	pop	{r4, r7, pc}
 800fd76:	bf00      	nop
 800fd78:	007fffff 	.word	0x007fffff
 800fd7c:	0802a114 	.word	0x0802a114
 800fd80:	0802a118 	.word	0x0802a118
 800fd84:	0802a120 	.word	0x0802a120
 800fd88:	0802a11c 	.word	0x0802a11c

0800fd8c <_ZN12_GLOBAL__N_111FormatInt32EPcl>:

int FormatInt32(char* output, int32_t i) {
 800fd8c:	b580      	push	{r7, lr}
 800fd8e:	b082      	sub	sp, #8
 800fd90:	af00      	add	r7, sp, #0
 800fd92:	6078      	str	r0, [r7, #4]
 800fd94:	6039      	str	r1, [r7, #0]
  return static_cast<int>(FastInt32ToBufferLeft(i, output) - output);
 800fd96:	6879      	ldr	r1, [r7, #4]
 800fd98:	6838      	ldr	r0, [r7, #0]
 800fd9a:	f7ff feb5 	bl	800fb08 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc>
 800fd9e:	4602      	mov	r2, r0
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	1ad3      	subs	r3, r2, r3
}
 800fda4:	4618      	mov	r0, r3
 800fda6:	3708      	adds	r7, #8
 800fda8:	46bd      	mov	sp, r7
 800fdaa:	bd80      	pop	{r7, pc}

0800fdac <_ZN12_GLOBAL__N_112FormatUInt32EPcm>:

int FormatUInt32(char* output, uint32_t i) {
 800fdac:	b580      	push	{r7, lr}
 800fdae:	b082      	sub	sp, #8
 800fdb0:	af00      	add	r7, sp, #0
 800fdb2:	6078      	str	r0, [r7, #4]
 800fdb4:	6039      	str	r1, [r7, #0]
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 10) - output);
 800fdb6:	220a      	movs	r2, #10
 800fdb8:	6879      	ldr	r1, [r7, #4]
 800fdba:	6838      	ldr	r0, [r7, #0]
 800fdbc:	f7ff fe6e 	bl	800fa9c <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
 800fdc0:	4602      	mov	r2, r0
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	1ad3      	subs	r3, r2, r3
}
 800fdc6:	4618      	mov	r0, r3
 800fdc8:	3708      	adds	r7, #8
 800fdca:	46bd      	mov	sp, r7
 800fdcc:	bd80      	pop	{r7, pc}

0800fdce <_ZN12_GLOBAL__N_19FormatHexEPcm>:

int FormatHex(char* output, uint32_t i) {
 800fdce:	b580      	push	{r7, lr}
 800fdd0:	b082      	sub	sp, #8
 800fdd2:	af00      	add	r7, sp, #0
 800fdd4:	6078      	str	r0, [r7, #4]
 800fdd6:	6039      	str	r1, [r7, #0]
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 16) - output);
 800fdd8:	2210      	movs	r2, #16
 800fdda:	6879      	ldr	r1, [r7, #4]
 800fddc:	6838      	ldr	r0, [r7, #0]
 800fdde:	f7ff fe5d 	bl	800fa9c <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
 800fde2:	4602      	mov	r2, r0
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	1ad3      	subs	r3, r2, r3
}
 800fde8:	4618      	mov	r0, r3
 800fdea:	3708      	adds	r7, #8
 800fdec:	46bd      	mov	sp, r7
 800fdee:	bd80      	pop	{r7, pc}

0800fdf0 <_ZN12_GLOBAL__N_111FormatFloatEPcf>:

int FormatFloat(char* output, float i) {
 800fdf0:	b580      	push	{r7, lr}
 800fdf2:	b082      	sub	sp, #8
 800fdf4:	af00      	add	r7, sp, #0
 800fdf6:	6078      	str	r0, [r7, #4]
 800fdf8:	ed87 0a00 	vstr	s0, [r7]
  return static_cast<int>(FastFloatToBufferLeft(i, output) - output);
 800fdfc:	6878      	ldr	r0, [r7, #4]
 800fdfe:	ed97 0a00 	vldr	s0, [r7]
 800fe02:	f7ff fecf 	bl	800fba4 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc>
 800fe06:	4602      	mov	r2, r0
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	1ad3      	subs	r3, r2, r3
}
 800fe0c:	4618      	mov	r0, r3
 800fe0e:	3708      	adds	r7, #8
 800fe10:	46bd      	mov	sp, r7
 800fe12:	bd80      	pop	{r7, pc}

0800fe14 <MicroVsnprintf>:

}  // namespace

extern "C" int MicroVsnprintf(char* output, int len, const char* format,
                              va_list args) {
 800fe14:	b590      	push	{r4, r7, lr}
 800fe16:	b08b      	sub	sp, #44	; 0x2c
 800fe18:	af00      	add	r7, sp, #0
 800fe1a:	60f8      	str	r0, [r7, #12]
 800fe1c:	60b9      	str	r1, [r7, #8]
 800fe1e:	607a      	str	r2, [r7, #4]
 800fe20:	603b      	str	r3, [r7, #0]
  int output_index = 0;
 800fe22:	2300      	movs	r3, #0
 800fe24:	627b      	str	r3, [r7, #36]	; 0x24
  const char* current = format;
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	623b      	str	r3, [r7, #32]
  // One extra character must be left for the null terminator.
  const int usable_length = len - 1;
 800fe2a:	68bb      	ldr	r3, [r7, #8]
 800fe2c:	3b01      	subs	r3, #1
 800fe2e:	61bb      	str	r3, [r7, #24]
  while (*current != '\0' && output_index < usable_length) {
 800fe30:	6a3b      	ldr	r3, [r7, #32]
 800fe32:	781b      	ldrb	r3, [r3, #0]
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	f000 8151 	beq.w	80100dc <MicroVsnprintf+0x2c8>
 800fe3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fe3c:	69bb      	ldr	r3, [r7, #24]
 800fe3e:	429a      	cmp	r2, r3
 800fe40:	f280 814c 	bge.w	80100dc <MicroVsnprintf+0x2c8>
    if (*current == '%') {
 800fe44:	6a3b      	ldr	r3, [r7, #32]
 800fe46:	781b      	ldrb	r3, [r3, #0]
 800fe48:	2b25      	cmp	r3, #37	; 0x25
 800fe4a:	f040 813b 	bne.w	80100c4 <MicroVsnprintf+0x2b0>
      current++;
 800fe4e:	6a3b      	ldr	r3, [r7, #32]
 800fe50:	3301      	adds	r3, #1
 800fe52:	623b      	str	r3, [r7, #32]
      switch (*current) {
 800fe54:	6a3b      	ldr	r3, [r7, #32]
 800fe56:	781b      	ldrb	r3, [r3, #0]
 800fe58:	2b25      	cmp	r3, #37	; 0x25
 800fe5a:	f000 80e2 	beq.w	8010022 <MicroVsnprintf+0x20e>
 800fe5e:	2b25      	cmp	r3, #37	; 0x25
 800fe60:	dbe6      	blt.n	800fe30 <MicroVsnprintf+0x1c>
 800fe62:	2b78      	cmp	r3, #120	; 0x78
 800fe64:	dce4      	bgt.n	800fe30 <MicroVsnprintf+0x1c>
 800fe66:	2b63      	cmp	r3, #99	; 0x63
 800fe68:	dbe2      	blt.n	800fe30 <MicroVsnprintf+0x1c>
 800fe6a:	3b63      	subs	r3, #99	; 0x63
 800fe6c:	2b15      	cmp	r3, #21
 800fe6e:	d8df      	bhi.n	800fe30 <MicroVsnprintf+0x1c>
 800fe70:	a201      	add	r2, pc, #4	; (adr r2, 800fe78 <MicroVsnprintf+0x64>)
 800fe72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe76:	bf00      	nop
 800fe78:	0801003b 	.word	0x0801003b
 800fe7c:	0800fed1 	.word	0x0800fed1
 800fe80:	0800fe31 	.word	0x0800fe31
 800fe84:	0800ffb7 	.word	0x0800ffb7
 800fe88:	0800fe31 	.word	0x0800fe31
 800fe8c:	0800fe31 	.word	0x0800fe31
 800fe90:	0800fe31 	.word	0x0800fe31
 800fe94:	0800fe31 	.word	0x0800fe31
 800fe98:	0800fe31 	.word	0x0800fe31
 800fe9c:	0800fe31 	.word	0x0800fe31
 800fea0:	0800fe31 	.word	0x0800fe31
 800fea4:	0800fe31 	.word	0x0800fe31
 800fea8:	0800fe31 	.word	0x0800fe31
 800feac:	0800fe31 	.word	0x0800fe31
 800feb0:	0800fe31 	.word	0x0800fe31
 800feb4:	0800fe31 	.word	0x0800fe31
 800feb8:	08010079 	.word	0x08010079
 800febc:	0800fe31 	.word	0x0800fe31
 800fec0:	0800ff13 	.word	0x0800ff13
 800fec4:	0800fe31 	.word	0x0800fe31
 800fec8:	0800fe31 	.word	0x0800fe31
 800fecc:	0800ff55 	.word	0x0800ff55
        case 'd':
          // Cut off log message if format could exceed log buffer length.
          if (usable_length - output_index < kMaxIntCharsNeeded) {
 800fed0:	69ba      	ldr	r2, [r7, #24]
 800fed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fed4:	1ad3      	subs	r3, r2, r3
 800fed6:	2b0a      	cmp	r3, #10
 800fed8:	dc09      	bgt.n	800feee <MicroVsnprintf+0xda>
            output[output_index++] = '\0';
 800feda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fedc:	1c5a      	adds	r2, r3, #1
 800fede:	627a      	str	r2, [r7, #36]	; 0x24
 800fee0:	461a      	mov	r2, r3
 800fee2:	68fb      	ldr	r3, [r7, #12]
 800fee4:	4413      	add	r3, r2
 800fee6:	2200      	movs	r2, #0
 800fee8:	701a      	strb	r2, [r3, #0]
            return output_index;
 800feea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800feec:	e0ff      	b.n	80100ee <MicroVsnprintf+0x2da>
          }
          output_index +=
              FormatInt32(&output[output_index], va_arg(args, int32_t));
 800feee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fef0:	68fa      	ldr	r2, [r7, #12]
 800fef2:	18d0      	adds	r0, r2, r3
 800fef4:	683b      	ldr	r3, [r7, #0]
 800fef6:	1d1a      	adds	r2, r3, #4
 800fef8:	603a      	str	r2, [r7, #0]
 800fefa:	681b      	ldr	r3, [r3, #0]
 800fefc:	4619      	mov	r1, r3
 800fefe:	f7ff ff45 	bl	800fd8c <_ZN12_GLOBAL__N_111FormatInt32EPcl>
 800ff02:	4602      	mov	r2, r0
          output_index +=
 800ff04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff06:	4413      	add	r3, r2
 800ff08:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 800ff0a:	6a3b      	ldr	r3, [r7, #32]
 800ff0c:	3301      	adds	r3, #1
 800ff0e:	623b      	str	r3, [r7, #32]
          break;
 800ff10:	e0e3      	b.n	80100da <MicroVsnprintf+0x2c6>
        case 'u':
          if (usable_length - output_index < kMaxIntCharsNeeded) {
 800ff12:	69ba      	ldr	r2, [r7, #24]
 800ff14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff16:	1ad3      	subs	r3, r2, r3
 800ff18:	2b0a      	cmp	r3, #10
 800ff1a:	dc09      	bgt.n	800ff30 <MicroVsnprintf+0x11c>
            output[output_index++] = '\0';
 800ff1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff1e:	1c5a      	adds	r2, r3, #1
 800ff20:	627a      	str	r2, [r7, #36]	; 0x24
 800ff22:	461a      	mov	r2, r3
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	4413      	add	r3, r2
 800ff28:	2200      	movs	r2, #0
 800ff2a:	701a      	strb	r2, [r3, #0]
            return output_index;
 800ff2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff2e:	e0de      	b.n	80100ee <MicroVsnprintf+0x2da>
          }
          output_index +=
              FormatUInt32(&output[output_index], va_arg(args, uint32_t));
 800ff30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff32:	68fa      	ldr	r2, [r7, #12]
 800ff34:	18d0      	adds	r0, r2, r3
 800ff36:	683b      	ldr	r3, [r7, #0]
 800ff38:	1d1a      	adds	r2, r3, #4
 800ff3a:	603a      	str	r2, [r7, #0]
 800ff3c:	681b      	ldr	r3, [r3, #0]
 800ff3e:	4619      	mov	r1, r3
 800ff40:	f7ff ff34 	bl	800fdac <_ZN12_GLOBAL__N_112FormatUInt32EPcm>
 800ff44:	4602      	mov	r2, r0
          output_index +=
 800ff46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff48:	4413      	add	r3, r2
 800ff4a:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 800ff4c:	6a3b      	ldr	r3, [r7, #32]
 800ff4e:	3301      	adds	r3, #1
 800ff50:	623b      	str	r3, [r7, #32]
          break;
 800ff52:	e0c2      	b.n	80100da <MicroVsnprintf+0x2c6>
        case 'x':
          if (usable_length - output_index < kMaxHexCharsNeeded) {
 800ff54:	69ba      	ldr	r2, [r7, #24]
 800ff56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff58:	1ad3      	subs	r3, r2, r3
 800ff5a:	2b09      	cmp	r3, #9
 800ff5c:	dc09      	bgt.n	800ff72 <MicroVsnprintf+0x15e>
            output[output_index++] = '\0';
 800ff5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff60:	1c5a      	adds	r2, r3, #1
 800ff62:	627a      	str	r2, [r7, #36]	; 0x24
 800ff64:	461a      	mov	r2, r3
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	4413      	add	r3, r2
 800ff6a:	2200      	movs	r2, #0
 800ff6c:	701a      	strb	r2, [r3, #0]
            return output_index;
 800ff6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff70:	e0bd      	b.n	80100ee <MicroVsnprintf+0x2da>
          }
          output[output_index++] = '0';
 800ff72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff74:	1c5a      	adds	r2, r3, #1
 800ff76:	627a      	str	r2, [r7, #36]	; 0x24
 800ff78:	461a      	mov	r2, r3
 800ff7a:	68fb      	ldr	r3, [r7, #12]
 800ff7c:	4413      	add	r3, r2
 800ff7e:	2230      	movs	r2, #48	; 0x30
 800ff80:	701a      	strb	r2, [r3, #0]
          output[output_index++] = 'x';
 800ff82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff84:	1c5a      	adds	r2, r3, #1
 800ff86:	627a      	str	r2, [r7, #36]	; 0x24
 800ff88:	461a      	mov	r2, r3
 800ff8a:	68fb      	ldr	r3, [r7, #12]
 800ff8c:	4413      	add	r3, r2
 800ff8e:	2278      	movs	r2, #120	; 0x78
 800ff90:	701a      	strb	r2, [r3, #0]
          output_index +=
              FormatHex(&output[output_index], va_arg(args, uint32_t));
 800ff92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff94:	68fa      	ldr	r2, [r7, #12]
 800ff96:	18d0      	adds	r0, r2, r3
 800ff98:	683b      	ldr	r3, [r7, #0]
 800ff9a:	1d1a      	adds	r2, r3, #4
 800ff9c:	603a      	str	r2, [r7, #0]
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	4619      	mov	r1, r3
 800ffa2:	f7ff ff14 	bl	800fdce <_ZN12_GLOBAL__N_19FormatHexEPcm>
 800ffa6:	4602      	mov	r2, r0
          output_index +=
 800ffa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffaa:	4413      	add	r3, r2
 800ffac:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 800ffae:	6a3b      	ldr	r3, [r7, #32]
 800ffb0:	3301      	adds	r3, #1
 800ffb2:	623b      	str	r3, [r7, #32]
          break;
 800ffb4:	e091      	b.n	80100da <MicroVsnprintf+0x2c6>
        case 'f':
          if (usable_length - output_index < kMaxFloatCharsNeeded) {
 800ffb6:	69ba      	ldr	r2, [r7, #24]
 800ffb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffba:	1ad3      	subs	r3, r2, r3
 800ffbc:	ee07 3a90 	vmov	s15, r3
 800ffc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ffc4:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 800ffc8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ffcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffd0:	d509      	bpl.n	800ffe6 <MicroVsnprintf+0x1d2>
            output[output_index++] = '\0';
 800ffd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffd4:	1c5a      	adds	r2, r3, #1
 800ffd6:	627a      	str	r2, [r7, #36]	; 0x24
 800ffd8:	461a      	mov	r2, r3
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	4413      	add	r3, r2
 800ffde:	2200      	movs	r2, #0
 800ffe0:	701a      	strb	r2, [r3, #0]
            return output_index;
 800ffe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffe4:	e083      	b.n	80100ee <MicroVsnprintf+0x2da>
          }
          output_index +=
              FormatFloat(&output[output_index], va_arg(args, double));
 800ffe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffe8:	68fa      	ldr	r2, [r7, #12]
 800ffea:	18d4      	adds	r4, r2, r3
 800ffec:	683b      	ldr	r3, [r7, #0]
 800ffee:	3307      	adds	r3, #7
 800fff0:	f023 0307 	bic.w	r3, r3, #7
 800fff4:	f103 0208 	add.w	r2, r3, #8
 800fff8:	603a      	str	r2, [r7, #0]
 800fffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fffe:	4610      	mov	r0, r2
 8010000:	4619      	mov	r1, r3
 8010002:	f7f0 fded 	bl	8000be0 <__aeabi_d2f>
 8010006:	4603      	mov	r3, r0
 8010008:	ee00 3a10 	vmov	s0, r3
 801000c:	4620      	mov	r0, r4
 801000e:	f7ff feef 	bl	800fdf0 <_ZN12_GLOBAL__N_111FormatFloatEPcf>
 8010012:	4602      	mov	r2, r0
          output_index +=
 8010014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010016:	4413      	add	r3, r2
 8010018:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 801001a:	6a3b      	ldr	r3, [r7, #32]
 801001c:	3301      	adds	r3, #1
 801001e:	623b      	str	r3, [r7, #32]
          break;
 8010020:	e05b      	b.n	80100da <MicroVsnprintf+0x2c6>
        case '%':
          output[output_index++] = *current++;
 8010022:	6a3b      	ldr	r3, [r7, #32]
 8010024:	1c5a      	adds	r2, r3, #1
 8010026:	623a      	str	r2, [r7, #32]
 8010028:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801002a:	1c51      	adds	r1, r2, #1
 801002c:	6279      	str	r1, [r7, #36]	; 0x24
 801002e:	4611      	mov	r1, r2
 8010030:	68fa      	ldr	r2, [r7, #12]
 8010032:	440a      	add	r2, r1
 8010034:	781b      	ldrb	r3, [r3, #0]
 8010036:	7013      	strb	r3, [r2, #0]
          break;
 8010038:	e04f      	b.n	80100da <MicroVsnprintf+0x2c6>
        case 'c':
          if (usable_length - output_index < 1) {
 801003a:	69ba      	ldr	r2, [r7, #24]
 801003c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801003e:	1ad3      	subs	r3, r2, r3
 8010040:	2b00      	cmp	r3, #0
 8010042:	dc09      	bgt.n	8010058 <MicroVsnprintf+0x244>
            output[output_index++] = '\0';
 8010044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010046:	1c5a      	adds	r2, r3, #1
 8010048:	627a      	str	r2, [r7, #36]	; 0x24
 801004a:	461a      	mov	r2, r3
 801004c:	68fb      	ldr	r3, [r7, #12]
 801004e:	4413      	add	r3, r2
 8010050:	2200      	movs	r2, #0
 8010052:	701a      	strb	r2, [r3, #0]
            return output_index;
 8010054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010056:	e04a      	b.n	80100ee <MicroVsnprintf+0x2da>
          }
          output[output_index++] = va_arg(args, int32_t);
 8010058:	683b      	ldr	r3, [r7, #0]
 801005a:	1d1a      	adds	r2, r3, #4
 801005c:	603a      	str	r2, [r7, #0]
 801005e:	6819      	ldr	r1, [r3, #0]
 8010060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010062:	1c5a      	adds	r2, r3, #1
 8010064:	627a      	str	r2, [r7, #36]	; 0x24
 8010066:	461a      	mov	r2, r3
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	4413      	add	r3, r2
 801006c:	b2ca      	uxtb	r2, r1
 801006e:	701a      	strb	r2, [r3, #0]
          current++;
 8010070:	6a3b      	ldr	r3, [r7, #32]
 8010072:	3301      	adds	r3, #1
 8010074:	623b      	str	r3, [r7, #32]
          break;
 8010076:	e030      	b.n	80100da <MicroVsnprintf+0x2c6>
        case 's':
          char* string = va_arg(args, char*);
 8010078:	683b      	ldr	r3, [r7, #0]
 801007a:	1d1a      	adds	r2, r3, #4
 801007c:	603a      	str	r2, [r7, #0]
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	617b      	str	r3, [r7, #20]
          int string_idx = 0;
 8010082:	2300      	movs	r3, #0
 8010084:	61fb      	str	r3, [r7, #28]
          while (string_idx + output_index < usable_length &&
 8010086:	69fa      	ldr	r2, [r7, #28]
 8010088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801008a:	4413      	add	r3, r2
 801008c:	69ba      	ldr	r2, [r7, #24]
 801008e:	429a      	cmp	r2, r3
 8010090:	dd14      	ble.n	80100bc <MicroVsnprintf+0x2a8>
                 string[string_idx] != '\0') {
 8010092:	69fb      	ldr	r3, [r7, #28]
 8010094:	697a      	ldr	r2, [r7, #20]
 8010096:	4413      	add	r3, r2
 8010098:	781b      	ldrb	r3, [r3, #0]
          while (string_idx + output_index < usable_length &&
 801009a:	2b00      	cmp	r3, #0
 801009c:	d00e      	beq.n	80100bc <MicroVsnprintf+0x2a8>
            output[output_index++] = string[string_idx++];
 801009e:	69fb      	ldr	r3, [r7, #28]
 80100a0:	1c5a      	adds	r2, r3, #1
 80100a2:	61fa      	str	r2, [r7, #28]
 80100a4:	461a      	mov	r2, r3
 80100a6:	697b      	ldr	r3, [r7, #20]
 80100a8:	441a      	add	r2, r3
 80100aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100ac:	1c59      	adds	r1, r3, #1
 80100ae:	6279      	str	r1, [r7, #36]	; 0x24
 80100b0:	4619      	mov	r1, r3
 80100b2:	68fb      	ldr	r3, [r7, #12]
 80100b4:	440b      	add	r3, r1
 80100b6:	7812      	ldrb	r2, [r2, #0]
 80100b8:	701a      	strb	r2, [r3, #0]
          while (string_idx + output_index < usable_length &&
 80100ba:	e7e4      	b.n	8010086 <MicroVsnprintf+0x272>
          }
          current++;
 80100bc:	6a3b      	ldr	r3, [r7, #32]
 80100be:	3301      	adds	r3, #1
 80100c0:	623b      	str	r3, [r7, #32]
 80100c2:	e6b5      	b.n	800fe30 <MicroVsnprintf+0x1c>
      }
    } else {
      output[output_index++] = *current++;
 80100c4:	6a3b      	ldr	r3, [r7, #32]
 80100c6:	1c5a      	adds	r2, r3, #1
 80100c8:	623a      	str	r2, [r7, #32]
 80100ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80100cc:	1c51      	adds	r1, r2, #1
 80100ce:	6279      	str	r1, [r7, #36]	; 0x24
 80100d0:	4611      	mov	r1, r2
 80100d2:	68fa      	ldr	r2, [r7, #12]
 80100d4:	440a      	add	r2, r1
 80100d6:	781b      	ldrb	r3, [r3, #0]
 80100d8:	7013      	strb	r3, [r2, #0]
  while (*current != '\0' && output_index < usable_length) {
 80100da:	e6a9      	b.n	800fe30 <MicroVsnprintf+0x1c>
    }
  }
  output[output_index++] = '\0';
 80100dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100de:	1c5a      	adds	r2, r3, #1
 80100e0:	627a      	str	r2, [r7, #36]	; 0x24
 80100e2:	461a      	mov	r2, r3
 80100e4:	68fb      	ldr	r3, [r7, #12]
 80100e6:	4413      	add	r3, r2
 80100e8:	2200      	movs	r2, #0
 80100ea:	701a      	strb	r2, [r3, #0]
  return output_index;
 80100ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80100ee:	4618      	mov	r0, r3
 80100f0:	372c      	adds	r7, #44	; 0x2c
 80100f2:	46bd      	mov	sp, r7
 80100f4:	bd90      	pop	{r4, r7, pc}
 80100f6:	bf00      	nop

080100f8 <_ZN6tflite12ElementCountERK14TfLiteIntArray>:
#include "tensorflow/lite/c/common.h"
#include "tensorflow/lite/kernels/op_macros.h"

namespace tflite {

int ElementCount(const TfLiteIntArray& dims) {
 80100f8:	b480      	push	{r7}
 80100fa:	b085      	sub	sp, #20
 80100fc:	af00      	add	r7, sp, #0
 80100fe:	6078      	str	r0, [r7, #4]
  int result = 1;
 8010100:	2301      	movs	r3, #1
 8010102:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < dims.size; ++i) {
 8010104:	2300      	movs	r3, #0
 8010106:	60bb      	str	r3, [r7, #8]
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	68ba      	ldr	r2, [r7, #8]
 801010e:	429a      	cmp	r2, r3
 8010110:	da0c      	bge.n	801012c <_ZN6tflite12ElementCountERK14TfLiteIntArray+0x34>
    result *= dims.data[i];
 8010112:	687a      	ldr	r2, [r7, #4]
 8010114:	68bb      	ldr	r3, [r7, #8]
 8010116:	009b      	lsls	r3, r3, #2
 8010118:	4413      	add	r3, r2
 801011a:	685a      	ldr	r2, [r3, #4]
 801011c:	68fb      	ldr	r3, [r7, #12]
 801011e:	fb02 f303 	mul.w	r3, r2, r3
 8010122:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < dims.size; ++i) {
 8010124:	68bb      	ldr	r3, [r7, #8]
 8010126:	3301      	adds	r3, #1
 8010128:	60bb      	str	r3, [r7, #8]
 801012a:	e7ed      	b.n	8010108 <_ZN6tflite12ElementCountERK14TfLiteIntArray+0x10>
  }
  return result;
 801012c:	68fb      	ldr	r3, [r7, #12]
}
 801012e:	4618      	mov	r0, r3
 8010130:	3714      	adds	r7, #20
 8010132:	46bd      	mov	sp, r7
 8010134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010138:	4770      	bx	lr
	...

0801013c <_ZN6tflite21SimpleMemoryAllocatorC1ERKS0_>:
namespace tflite {

// TODO(petewarden): This allocator never frees up or reuses  any memory, even
// though we have enough information about lifetimes of the tensors to do so.
// This makes it pretty wasteful, so we should use a more intelligent method.
class SimpleMemoryAllocator {
 801013c:	b480      	push	{r7}
 801013e:	b083      	sub	sp, #12
 8010140:	af00      	add	r7, sp, #0
 8010142:	6078      	str	r0, [r7, #4]
 8010144:	6039      	str	r1, [r7, #0]
 8010146:	4a11      	ldr	r2, [pc, #68]	; (801018c <_ZN6tflite21SimpleMemoryAllocatorC1ERKS0_+0x50>)
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	601a      	str	r2, [r3, #0]
 801014c:	683b      	ldr	r3, [r7, #0]
 801014e:	685a      	ldr	r2, [r3, #4]
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	605a      	str	r2, [r3, #4]
 8010154:	683b      	ldr	r3, [r7, #0]
 8010156:	689a      	ldr	r2, [r3, #8]
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	609a      	str	r2, [r3, #8]
 801015c:	683b      	ldr	r3, [r7, #0]
 801015e:	68da      	ldr	r2, [r3, #12]
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	60da      	str	r2, [r3, #12]
 8010164:	683b      	ldr	r3, [r7, #0]
 8010166:	691a      	ldr	r2, [r3, #16]
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	611a      	str	r2, [r3, #16]
 801016c:	683b      	ldr	r3, [r7, #0]
 801016e:	695a      	ldr	r2, [r3, #20]
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	615a      	str	r2, [r3, #20]
 8010174:	683b      	ldr	r3, [r7, #0]
 8010176:	699a      	ldr	r2, [r3, #24]
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	619a      	str	r2, [r3, #24]
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	4618      	mov	r0, r3
 8010180:	370c      	adds	r7, #12
 8010182:	46bd      	mov	sp, r7
 8010184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010188:	4770      	bx	lr
 801018a:	bf00      	nop
 801018c:	0802ca38 	.word	0x0802ca38

08010190 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_>:
#include "tensorflow/lite/kernels/internal/compatibility.h"
#include "tensorflow/lite/micro/memory_helpers.h"

namespace tflite {

SimpleMemoryAllocator::SimpleMemoryAllocator(ErrorReporter* error_reporter,
 8010190:	b480      	push	{r7}
 8010192:	b085      	sub	sp, #20
 8010194:	af00      	add	r7, sp, #0
 8010196:	60f8      	str	r0, [r7, #12]
 8010198:	60b9      	str	r1, [r7, #8]
 801019a:	607a      	str	r2, [r7, #4]
 801019c:	603b      	str	r3, [r7, #0]
    : error_reporter_(error_reporter),
      buffer_head_(buffer_head),
      buffer_tail_(buffer_tail),
      head_(buffer_head),
      tail_(buffer_tail),
      temp_(buffer_head_) {}
 801019e:	4a0e      	ldr	r2, [pc, #56]	; (80101d8 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_+0x48>)
 80101a0:	68fb      	ldr	r3, [r7, #12]
 80101a2:	601a      	str	r2, [r3, #0]
 80101a4:	68fb      	ldr	r3, [r7, #12]
 80101a6:	68ba      	ldr	r2, [r7, #8]
 80101a8:	605a      	str	r2, [r3, #4]
 80101aa:	68fb      	ldr	r3, [r7, #12]
 80101ac:	687a      	ldr	r2, [r7, #4]
 80101ae:	609a      	str	r2, [r3, #8]
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	683a      	ldr	r2, [r7, #0]
 80101b4:	60da      	str	r2, [r3, #12]
 80101b6:	68fb      	ldr	r3, [r7, #12]
 80101b8:	687a      	ldr	r2, [r7, #4]
 80101ba:	611a      	str	r2, [r3, #16]
 80101bc:	68fb      	ldr	r3, [r7, #12]
 80101be:	683a      	ldr	r2, [r7, #0]
 80101c0:	615a      	str	r2, [r3, #20]
 80101c2:	68fb      	ldr	r3, [r7, #12]
 80101c4:	689a      	ldr	r2, [r3, #8]
 80101c6:	68fb      	ldr	r3, [r7, #12]
 80101c8:	619a      	str	r2, [r3, #24]
 80101ca:	68fb      	ldr	r3, [r7, #12]
 80101cc:	4618      	mov	r0, r3
 80101ce:	3714      	adds	r7, #20
 80101d0:	46bd      	mov	sp, r7
 80101d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101d6:	4770      	bx	lr
 80101d8:	0802ca38 	.word	0x0802ca38

080101dc <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhj>:

SimpleMemoryAllocator::SimpleMemoryAllocator(ErrorReporter* error_reporter,
 80101dc:	b580      	push	{r7, lr}
 80101de:	b084      	sub	sp, #16
 80101e0:	af00      	add	r7, sp, #0
 80101e2:	60f8      	str	r0, [r7, #12]
 80101e4:	60b9      	str	r1, [r7, #8]
 80101e6:	607a      	str	r2, [r7, #4]
 80101e8:	603b      	str	r3, [r7, #0]
                                             uint8_t* buffer,
                                             size_t buffer_size)
    : SimpleMemoryAllocator(error_reporter, buffer, buffer + buffer_size) {}
 80101ea:	687a      	ldr	r2, [r7, #4]
 80101ec:	683b      	ldr	r3, [r7, #0]
 80101ee:	4413      	add	r3, r2
 80101f0:	687a      	ldr	r2, [r7, #4]
 80101f2:	68b9      	ldr	r1, [r7, #8]
 80101f4:	68f8      	ldr	r0, [r7, #12]
 80101f6:	f7ff ffcb 	bl	8010190 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_>
 80101fa:	68fb      	ldr	r3, [r7, #12]
 80101fc:	4618      	mov	r0, r3
 80101fe:	3710      	adds	r7, #16
 8010200:	46bd      	mov	sp, r7
 8010202:	bd80      	pop	{r7, pc}

08010204 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj>:

/* static */
SimpleMemoryAllocator* SimpleMemoryAllocator::Create(
    ErrorReporter* error_reporter, uint8_t* buffer_head, size_t buffer_size) {
 8010204:	b590      	push	{r4, r7, lr}
 8010206:	b08d      	sub	sp, #52	; 0x34
 8010208:	af00      	add	r7, sp, #0
 801020a:	60f8      	str	r0, [r7, #12]
 801020c:	60b9      	str	r1, [r7, #8]
 801020e:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(error_reporter != nullptr);
 8010210:	68fb      	ldr	r3, [r7, #12]
 8010212:	2b00      	cmp	r3, #0
 8010214:	d101      	bne.n	801021a <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x16>
 8010216:	f015 fc16 	bl	8025a46 <abort>
  TFLITE_DCHECK(buffer_head != nullptr);
 801021a:	68bb      	ldr	r3, [r7, #8]
 801021c:	2b00      	cmp	r3, #0
 801021e:	d101      	bne.n	8010224 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x20>
 8010220:	f015 fc11 	bl	8025a46 <abort>
  SimpleMemoryAllocator tmp =
      SimpleMemoryAllocator(error_reporter, buffer_head, buffer_size);
 8010224:	f107 0010 	add.w	r0, r7, #16
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	68ba      	ldr	r2, [r7, #8]
 801022c:	68f9      	ldr	r1, [r7, #12]
 801022e:	f7ff ffd5 	bl	80101dc <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhj>

  // Allocate enough bytes from the buffer to create a SimpleMemoryAllocator.
  // The new instance will use the current adjusted tail buffer from the tmp
  // allocator instance.
  uint8_t* allocator_buffer = tmp.AllocateFromTail(
 8010232:	f107 0310 	add.w	r3, r7, #16
 8010236:	2204      	movs	r2, #4
 8010238:	211c      	movs	r1, #28
 801023a:	4618      	mov	r0, r3
 801023c:	f000 f87c 	bl	8010338 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>
 8010240:	62f8      	str	r0, [r7, #44]	; 0x2c
      sizeof(SimpleMemoryAllocator), alignof(SimpleMemoryAllocator));
  // Use the default copy constructor to populate internal states.
  return new (allocator_buffer) SimpleMemoryAllocator(tmp);
 8010242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010244:	4619      	mov	r1, r3
 8010246:	201c      	movs	r0, #28
 8010248:	f7f8 fab1 	bl	80087ae <_ZnwjPv>
 801024c:	4604      	mov	r4, r0
 801024e:	f107 0310 	add.w	r3, r7, #16
 8010252:	4619      	mov	r1, r3
 8010254:	4620      	mov	r0, r4
 8010256:	f7ff ff71 	bl	801013c <_ZN6tflite21SimpleMemoryAllocatorC1ERKS0_>
      SimpleMemoryAllocator(error_reporter, buffer_head, buffer_size);
 801025a:	f107 0310 	add.w	r3, r7, #16
 801025e:	4618      	mov	r0, r3
 8010260:	f000 f806 	bl	8010270 <_ZN6tflite21SimpleMemoryAllocatorD1Ev>
  return new (allocator_buffer) SimpleMemoryAllocator(tmp);
 8010264:	4623      	mov	r3, r4
}
 8010266:	4618      	mov	r0, r3
 8010268:	3734      	adds	r7, #52	; 0x34
 801026a:	46bd      	mov	sp, r7
 801026c:	bd90      	pop	{r4, r7, pc}
	...

08010270 <_ZN6tflite21SimpleMemoryAllocatorD1Ev>:

SimpleMemoryAllocator::~SimpleMemoryAllocator() {}
 8010270:	b480      	push	{r7}
 8010272:	b083      	sub	sp, #12
 8010274:	af00      	add	r7, sp, #0
 8010276:	6078      	str	r0, [r7, #4]
 8010278:	4a04      	ldr	r2, [pc, #16]	; (801028c <_ZN6tflite21SimpleMemoryAllocatorD1Ev+0x1c>)
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	601a      	str	r2, [r3, #0]
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	4618      	mov	r0, r3
 8010282:	370c      	adds	r7, #12
 8010284:	46bd      	mov	sp, r7
 8010286:	f85d 7b04 	ldr.w	r7, [sp], #4
 801028a:	4770      	bx	lr
 801028c:	0802ca38 	.word	0x0802ca38

08010290 <_ZN6tflite21SimpleMemoryAllocatorD0Ev>:
 8010290:	b580      	push	{r7, lr}
 8010292:	b082      	sub	sp, #8
 8010294:	af00      	add	r7, sp, #0
 8010296:	6078      	str	r0, [r7, #4]
 8010298:	6878      	ldr	r0, [r7, #4]
 801029a:	f7ff ffe9 	bl	8010270 <_ZN6tflite21SimpleMemoryAllocatorD1Ev>
 801029e:	211c      	movs	r1, #28
 80102a0:	6878      	ldr	r0, [r7, #4]
 80102a2:	f015 f94a 	bl	802553a <_ZdlPvj>
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	4618      	mov	r0, r3
 80102aa:	3708      	adds	r7, #8
 80102ac:	46bd      	mov	sp, r7
 80102ae:	bd80      	pop	{r7, pc}

080102b0 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj>:

TfLiteStatus SimpleMemoryAllocator::SetHeadBufferSize(size_t size,
                                                      size_t alignment) {
 80102b0:	b580      	push	{r7, lr}
 80102b2:	b088      	sub	sp, #32
 80102b4:	af02      	add	r7, sp, #8
 80102b6:	60f8      	str	r0, [r7, #12]
 80102b8:	60b9      	str	r1, [r7, #8]
 80102ba:	607a      	str	r2, [r7, #4]
  if (head_ != temp_) {
 80102bc:	68fb      	ldr	r3, [r7, #12]
 80102be:	691a      	ldr	r2, [r3, #16]
 80102c0:	68fb      	ldr	r3, [r7, #12]
 80102c2:	699b      	ldr	r3, [r3, #24]
 80102c4:	429a      	cmp	r2, r3
 80102c6:	d007      	beq.n	80102d8 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x28>
    TF_LITE_REPORT_ERROR(
 80102c8:	68fb      	ldr	r3, [r7, #12]
 80102ca:	685b      	ldr	r3, [r3, #4]
 80102cc:	4918      	ldr	r1, [pc, #96]	; (8010330 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x80>)
 80102ce:	4618      	mov	r0, r3
 80102d0:	f7f8 fa3a 	bl	8008748 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Internal error: SetHeadBufferSize() needs to be called "
        "after ResetTempAllocations().");
    return kTfLiteError;
 80102d4:	2301      	movs	r3, #1
 80102d6:	e026      	b.n	8010326 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x76>
  }

  uint8_t* const aligned_result = AlignPointerUp(buffer_head_, alignment);
 80102d8:	68fb      	ldr	r3, [r7, #12]
 80102da:	689b      	ldr	r3, [r3, #8]
 80102dc:	6879      	ldr	r1, [r7, #4]
 80102de:	4618      	mov	r0, r3
 80102e0:	f7fb fe63 	bl	800bfaa <_ZN6tflite14AlignPointerUpEPhj>
 80102e4:	6178      	str	r0, [r7, #20]
  const size_t available_memory = tail_ - aligned_result;
 80102e6:	68fb      	ldr	r3, [r7, #12]
 80102e8:	695a      	ldr	r2, [r3, #20]
 80102ea:	697b      	ldr	r3, [r7, #20]
 80102ec:	1ad3      	subs	r3, r2, r3
 80102ee:	613b      	str	r3, [r7, #16]
  if (available_memory < size) {
 80102f0:	693a      	ldr	r2, [r7, #16]
 80102f2:	68bb      	ldr	r3, [r7, #8]
 80102f4:	429a      	cmp	r2, r3
 80102f6:	d20c      	bcs.n	8010312 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x62>
    TF_LITE_REPORT_ERROR(
 80102f8:	68fb      	ldr	r3, [r7, #12]
 80102fa:	6858      	ldr	r0, [r3, #4]
 80102fc:	68ba      	ldr	r2, [r7, #8]
 80102fe:	693b      	ldr	r3, [r7, #16]
 8010300:	1ad3      	subs	r3, r2, r3
 8010302:	9300      	str	r3, [sp, #0]
 8010304:	693b      	ldr	r3, [r7, #16]
 8010306:	68ba      	ldr	r2, [r7, #8]
 8010308:	490a      	ldr	r1, [pc, #40]	; (8010334 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x84>)
 801030a:	f7f8 fa1d 	bl	8008748 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to set head size. Requested: %u, available %u, missing: %u",
        size, available_memory, size - available_memory);
    return kTfLiteError;
 801030e:	2301      	movs	r3, #1
 8010310:	e009      	b.n	8010326 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x76>
  }
  head_ = aligned_result + size;
 8010312:	697a      	ldr	r2, [r7, #20]
 8010314:	68bb      	ldr	r3, [r7, #8]
 8010316:	441a      	add	r2, r3
 8010318:	68fb      	ldr	r3, [r7, #12]
 801031a:	611a      	str	r2, [r3, #16]
  temp_ = head_;
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	691a      	ldr	r2, [r3, #16]
 8010320:	68fb      	ldr	r3, [r7, #12]
 8010322:	619a      	str	r2, [r3, #24]

  return kTfLiteOk;
 8010324:	2300      	movs	r3, #0
}
 8010326:	4618      	mov	r0, r3
 8010328:	3718      	adds	r7, #24
 801032a:	46bd      	mov	sp, r7
 801032c:	bd80      	pop	{r7, pc}
 801032e:	bf00      	nop
 8010330:	0802a144 	.word	0x0802a144
 8010334:	0802a19c 	.word	0x0802a19c

08010338 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>:

uint8_t* SimpleMemoryAllocator::AllocateFromTail(size_t size,
                                                 size_t alignment) {
 8010338:	b580      	push	{r7, lr}
 801033a:	b088      	sub	sp, #32
 801033c:	af02      	add	r7, sp, #8
 801033e:	60f8      	str	r0, [r7, #12]
 8010340:	60b9      	str	r1, [r7, #8]
 8010342:	607a      	str	r2, [r7, #4]
  uint8_t* const aligned_result = AlignPointerDown(tail_ - size, alignment);
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	695a      	ldr	r2, [r3, #20]
 8010348:	68bb      	ldr	r3, [r7, #8]
 801034a:	425b      	negs	r3, r3
 801034c:	4413      	add	r3, r2
 801034e:	6879      	ldr	r1, [r7, #4]
 8010350:	4618      	mov	r0, r3
 8010352:	f7fb fe43 	bl	800bfdc <_ZN6tflite16AlignPointerDownEPhj>
 8010356:	6178      	str	r0, [r7, #20]
  if (aligned_result < head_) {
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	691b      	ldr	r3, [r3, #16]
 801035c:	697a      	ldr	r2, [r7, #20]
 801035e:	429a      	cmp	r2, r3
 8010360:	d212      	bcs.n	8010388 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x50>
#ifndef TF_LITE_STRIP_ERROR_STRINGS
    const size_t missing_memory = head_ - aligned_result;
 8010362:	68fb      	ldr	r3, [r7, #12]
 8010364:	691a      	ldr	r2, [r3, #16]
 8010366:	697b      	ldr	r3, [r7, #20]
 8010368:	1ad3      	subs	r3, r2, r3
 801036a:	613b      	str	r3, [r7, #16]
    TF_LITE_REPORT_ERROR(error_reporter_,
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	6858      	ldr	r0, [r3, #4]
 8010370:	68ba      	ldr	r2, [r7, #8]
 8010372:	693b      	ldr	r3, [r7, #16]
 8010374:	1ad2      	subs	r2, r2, r3
 8010376:	693b      	ldr	r3, [r7, #16]
 8010378:	9300      	str	r3, [sp, #0]
 801037a:	4613      	mov	r3, r2
 801037c:	68ba      	ldr	r2, [r7, #8]
 801037e:	4906      	ldr	r1, [pc, #24]	; (8010398 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x60>)
 8010380:	f7f8 f9e2 	bl	8008748 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed to allocate tail memory. Requested: %u, "
                         "available %u, missing: %u",
                         size, size - missing_memory, missing_memory);
#endif
    return nullptr;
 8010384:	2300      	movs	r3, #0
 8010386:	e003      	b.n	8010390 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x58>
  }
  tail_ = aligned_result;
 8010388:	68fb      	ldr	r3, [r7, #12]
 801038a:	697a      	ldr	r2, [r7, #20]
 801038c:	615a      	str	r2, [r3, #20]
  return aligned_result;
 801038e:	697b      	ldr	r3, [r7, #20]
}
 8010390:	4618      	mov	r0, r3
 8010392:	3718      	adds	r7, #24
 8010394:	46bd      	mov	sp, r7
 8010396:	bd80      	pop	{r7, pc}
 8010398:	0802a1e0 	.word	0x0802a1e0

0801039c <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj>:

uint8_t* SimpleMemoryAllocator::AllocateTemp(size_t size, size_t alignment) {
 801039c:	b580      	push	{r7, lr}
 801039e:	b088      	sub	sp, #32
 80103a0:	af02      	add	r7, sp, #8
 80103a2:	60f8      	str	r0, [r7, #12]
 80103a4:	60b9      	str	r1, [r7, #8]
 80103a6:	607a      	str	r2, [r7, #4]
  uint8_t* const aligned_result = AlignPointerUp(temp_, alignment);
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	699b      	ldr	r3, [r3, #24]
 80103ac:	6879      	ldr	r1, [r7, #4]
 80103ae:	4618      	mov	r0, r3
 80103b0:	f7fb fdfb 	bl	800bfaa <_ZN6tflite14AlignPointerUpEPhj>
 80103b4:	6178      	str	r0, [r7, #20]
  const size_t available_memory = tail_ - aligned_result;
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	695a      	ldr	r2, [r3, #20]
 80103ba:	697b      	ldr	r3, [r7, #20]
 80103bc:	1ad3      	subs	r3, r2, r3
 80103be:	613b      	str	r3, [r7, #16]
  if (available_memory < size) {
 80103c0:	693a      	ldr	r2, [r7, #16]
 80103c2:	68bb      	ldr	r3, [r7, #8]
 80103c4:	429a      	cmp	r2, r3
 80103c6:	d20c      	bcs.n	80103e2 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj+0x46>
    TF_LITE_REPORT_ERROR(error_reporter_,
 80103c8:	68fb      	ldr	r3, [r7, #12]
 80103ca:	6858      	ldr	r0, [r3, #4]
 80103cc:	68ba      	ldr	r2, [r7, #8]
 80103ce:	693b      	ldr	r3, [r7, #16]
 80103d0:	1ad3      	subs	r3, r2, r3
 80103d2:	9300      	str	r3, [sp, #0]
 80103d4:	693b      	ldr	r3, [r7, #16]
 80103d6:	68ba      	ldr	r2, [r7, #8]
 80103d8:	4907      	ldr	r1, [pc, #28]	; (80103f8 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj+0x5c>)
 80103da:	f7f8 f9b5 	bl	8008748 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed to allocate temp memory. Requested: %u, "
                         "available %u, missing: %u",
                         size, available_memory, size - available_memory);
    return nullptr;
 80103de:	2300      	movs	r3, #0
 80103e0:	e005      	b.n	80103ee <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj+0x52>
  }
  temp_ = aligned_result + size;
 80103e2:	697a      	ldr	r2, [r7, #20]
 80103e4:	68bb      	ldr	r3, [r7, #8]
 80103e6:	441a      	add	r2, r3
 80103e8:	68fb      	ldr	r3, [r7, #12]
 80103ea:	619a      	str	r2, [r3, #24]
  return aligned_result;
 80103ec:	697b      	ldr	r3, [r7, #20]
}
 80103ee:	4618      	mov	r0, r3
 80103f0:	3718      	adds	r7, #24
 80103f2:	46bd      	mov	sp, r7
 80103f4:	bd80      	pop	{r7, pc}
 80103f6:	bf00      	nop
 80103f8:	0802a22c 	.word	0x0802a22c

080103fc <_ZN6tflite21SimpleMemoryAllocator20ResetTempAllocationsEv>:

void SimpleMemoryAllocator::ResetTempAllocations() { temp_ = head_; }
 80103fc:	b480      	push	{r7}
 80103fe:	b083      	sub	sp, #12
 8010400:	af00      	add	r7, sp, #0
 8010402:	6078      	str	r0, [r7, #4]
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	691a      	ldr	r2, [r3, #16]
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	619a      	str	r2, [r3, #24]
 801040c:	bf00      	nop
 801040e:	370c      	adds	r7, #12
 8010410:	46bd      	mov	sp, r7
 8010412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010416:	4770      	bx	lr

08010418 <_ZNK6tflite21SimpleMemoryAllocator13GetHeadBufferEv>:

uint8_t* SimpleMemoryAllocator::GetHeadBuffer() const { return buffer_head_; }
 8010418:	b480      	push	{r7}
 801041a:	b083      	sub	sp, #12
 801041c:	af00      	add	r7, sp, #0
 801041e:	6078      	str	r0, [r7, #4]
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	689b      	ldr	r3, [r3, #8]
 8010424:	4618      	mov	r0, r3
 8010426:	370c      	adds	r7, #12
 8010428:	46bd      	mov	sp, r7
 801042a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801042e:	4770      	bx	lr

08010430 <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEj>:

size_t SimpleMemoryAllocator::GetTailUsedBytes() const {
  return buffer_tail_ - tail_;
}

size_t SimpleMemoryAllocator::GetAvailableMemory(size_t alignment) const {
 8010430:	b580      	push	{r7, lr}
 8010432:	b084      	sub	sp, #16
 8010434:	af00      	add	r7, sp, #0
 8010436:	6078      	str	r0, [r7, #4]
 8010438:	6039      	str	r1, [r7, #0]
  uint8_t* const aligned_temp = AlignPointerUp(temp_, alignment);
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	699b      	ldr	r3, [r3, #24]
 801043e:	6839      	ldr	r1, [r7, #0]
 8010440:	4618      	mov	r0, r3
 8010442:	f7fb fdb2 	bl	800bfaa <_ZN6tflite14AlignPointerUpEPhj>
 8010446:	60f8      	str	r0, [r7, #12]
  uint8_t* const aligned_tail = AlignPointerDown(tail_, alignment);
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	695b      	ldr	r3, [r3, #20]
 801044c:	6839      	ldr	r1, [r7, #0]
 801044e:	4618      	mov	r0, r3
 8010450:	f7fb fdc4 	bl	800bfdc <_ZN6tflite16AlignPointerDownEPhj>
 8010454:	60b8      	str	r0, [r7, #8]
  return aligned_tail - aligned_temp;
 8010456:	68ba      	ldr	r2, [r7, #8]
 8010458:	68fb      	ldr	r3, [r7, #12]
 801045a:	1ad3      	subs	r3, r2, r3
}
 801045c:	4618      	mov	r0, r3
 801045e:	3710      	adds	r7, #16
 8010460:	46bd      	mov	sp, r7
 8010462:	bd80      	pop	{r7, pc}

08010464 <_ZN6tflite16InitializeTargetEv>:
namespace tflite {

// To add an equivalent function for your own platform, create your own
// implementation file, and place it in a subfolder named after the target. See
// tensorflow/lite/micro/debug_log.cc for a similar example.
void InitializeTarget() {}
 8010464:	b480      	push	{r7}
 8010466:	af00      	add	r7, sp, #0
 8010468:	bf00      	nop
 801046a:	46bd      	mov	sp, r7
 801046c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010470:	4770      	bx	lr
	...

08010474 <_ZN11flatbuffers11EndianCheckEv>:
inline void EndianCheck() {
 8010474:	b580      	push	{r7, lr}
 8010476:	b082      	sub	sp, #8
 8010478:	af00      	add	r7, sp, #0
  int endiantest = 1;
 801047a:	2301      	movs	r3, #1
 801047c:	607b      	str	r3, [r7, #4]
  FLATBUFFERS_ASSERT(*reinterpret_cast<char *>(&endiantest) ==
 801047e:	1d3b      	adds	r3, r7, #4
 8010480:	781b      	ldrb	r3, [r3, #0]
 8010482:	2b01      	cmp	r3, #1
 8010484:	d005      	beq.n	8010492 <_ZN11flatbuffers11EndianCheckEv+0x1e>
 8010486:	4b05      	ldr	r3, [pc, #20]	; (801049c <_ZN11flatbuffers11EndianCheckEv+0x28>)
 8010488:	4a05      	ldr	r2, [pc, #20]	; (80104a0 <_ZN11flatbuffers11EndianCheckEv+0x2c>)
 801048a:	214e      	movs	r1, #78	; 0x4e
 801048c:	4805      	ldr	r0, [pc, #20]	; (80104a4 <_ZN11flatbuffers11EndianCheckEv+0x30>)
 801048e:	f015 fae1 	bl	8025a54 <__assert_func>
}
 8010492:	bf00      	nop
 8010494:	3708      	adds	r7, #8
 8010496:	46bd      	mov	sp, r7
 8010498:	bd80      	pop	{r7, pc}
 801049a:	bf00      	nop
 801049c:	0802a278 	.word	0x0802a278
 80104a0:	0802a2bc 	.word	0x0802a2bc
 80104a4:	0802a2dc 	.word	0x0802a2dc

080104a8 <_ZN11flatbuffers7GetRootIN6tflite5ModelEEEPKT_PKv>:
template<typename T> const T *GetRoot(const void *buf) {
 80104a8:	b580      	push	{r7, lr}
 80104aa:	b082      	sub	sp, #8
 80104ac:	af00      	add	r7, sp, #0
 80104ae:	6078      	str	r0, [r7, #4]
  return GetMutableRoot<T>(const_cast<void *>(buf));
 80104b0:	6878      	ldr	r0, [r7, #4]
 80104b2:	f000 f805 	bl	80104c0 <_ZN11flatbuffers14GetMutableRootIN6tflite5ModelEEEPT_Pv>
 80104b6:	4603      	mov	r3, r0
}
 80104b8:	4618      	mov	r0, r3
 80104ba:	3708      	adds	r7, #8
 80104bc:	46bd      	mov	sp, r7
 80104be:	bd80      	pop	{r7, pc}

080104c0 <_ZN11flatbuffers14GetMutableRootIN6tflite5ModelEEEPT_Pv>:
template<typename T> T *GetMutableRoot(void *buf) {
 80104c0:	b580      	push	{r7, lr}
 80104c2:	b082      	sub	sp, #8
 80104c4:	af00      	add	r7, sp, #0
 80104c6:	6078      	str	r0, [r7, #4]
  EndianCheck();
 80104c8:	f7ff ffd4 	bl	8010474 <_ZN11flatbuffers11EndianCheckEv>
      EndianScalar(*reinterpret_cast<uoffset_t *>(buf)));
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	4618      	mov	r0, r3
 80104d2:	f7f8 ff99 	bl	8009408 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 80104d6:	4602      	mov	r2, r0
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	4413      	add	r3, r2
}
 80104dc:	4618      	mov	r0, r3
 80104de:	3708      	adds	r7, #8
 80104e0:	46bd      	mov	sp, r7
 80104e2:	bd80      	pop	{r7, pc}

080104e4 <_Z18RespondToDetectionPN6tflite13ErrorReporterEaa>:

// This dummy implementation writes person and no person scores to the error
// console. Real applications will want to take some custom action instead, and
// should implement their own versions of this function.
void RespondToDetection(tflite::ErrorReporter* error_reporter,
                        int8_t person_score, int8_t no_person_score) {
 80104e4:	b580      	push	{r7, lr}
 80104e6:	b082      	sub	sp, #8
 80104e8:	af00      	add	r7, sp, #0
 80104ea:	6078      	str	r0, [r7, #4]
 80104ec:	460b      	mov	r3, r1
 80104ee:	70fb      	strb	r3, [r7, #3]
 80104f0:	4613      	mov	r3, r2
 80104f2:	70bb      	strb	r3, [r7, #2]
  TF_LITE_REPORT_ERROR(error_reporter, "person score:%d no person score %d",
 80104f4:	f997 2003 	ldrsb.w	r2, [r7, #3]
 80104f8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80104fc:	4903      	ldr	r1, [pc, #12]	; (801050c <_Z18RespondToDetectionPN6tflite13ErrorReporterEaa+0x28>)
 80104fe:	6878      	ldr	r0, [r7, #4]
 8010500:	f7f8 f922 	bl	8008748 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                       person_score, no_person_score);
}
 8010504:	bf00      	nop
 8010506:	3708      	adds	r7, #8
 8010508:	46bd      	mov	sp, r7
 801050a:	bd80      	pop	{r7, pc}
 801050c:	0802ac88 	.word	0x0802ac88

08010510 <_Z8GetImagePN6tflite13ErrorReporterEiiiPa>:
#include "tensorflow/lite/micro/examples/person_detection/model_settings.h"

extern char g_cam_gray_frame[];

TfLiteStatus GetImage(tflite::ErrorReporter* error_reporter, int image_width,
                      int image_height, int channels, int8_t* image_data) {
 8010510:	b480      	push	{r7}
 8010512:	b087      	sub	sp, #28
 8010514:	af00      	add	r7, sp, #0
 8010516:	60f8      	str	r0, [r7, #12]
 8010518:	60b9      	str	r1, [r7, #8]
 801051a:	607a      	str	r2, [r7, #4]
 801051c:	603b      	str	r3, [r7, #0]
  for (int i = 0; i < image_width * image_height * channels; ++i) {
 801051e:	2300      	movs	r3, #0
 8010520:	617b      	str	r3, [r7, #20]
 8010522:	68bb      	ldr	r3, [r7, #8]
 8010524:	687a      	ldr	r2, [r7, #4]
 8010526:	fb02 f303 	mul.w	r3, r2, r3
 801052a:	683a      	ldr	r2, [r7, #0]
 801052c:	fb02 f303 	mul.w	r3, r2, r3
 8010530:	697a      	ldr	r2, [r7, #20]
 8010532:	429a      	cmp	r2, r3
 8010534:	da0c      	bge.n	8010550 <_Z8GetImagePN6tflite13ErrorReporterEiiiPa+0x40>
    image_data[i] = g_cam_gray_frame[i];
 8010536:	4a0a      	ldr	r2, [pc, #40]	; (8010560 <_Z8GetImagePN6tflite13ErrorReporterEiiiPa+0x50>)
 8010538:	697b      	ldr	r3, [r7, #20]
 801053a:	4413      	add	r3, r2
 801053c:	7819      	ldrb	r1, [r3, #0]
 801053e:	697b      	ldr	r3, [r7, #20]
 8010540:	6a3a      	ldr	r2, [r7, #32]
 8010542:	4413      	add	r3, r2
 8010544:	b24a      	sxtb	r2, r1
 8010546:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < image_width * image_height * channels; ++i) {
 8010548:	697b      	ldr	r3, [r7, #20]
 801054a:	3301      	adds	r3, #1
 801054c:	617b      	str	r3, [r7, #20]
 801054e:	e7e8      	b.n	8010522 <_Z8GetImagePN6tflite13ErrorReporterEiiiPa+0x12>
  }
  return kTfLiteOk;
 8010550:	2300      	movs	r3, #0
}
 8010552:	4618      	mov	r0, r3
 8010554:	371c      	adds	r7, #28
 8010556:	46bd      	mov	sp, r7
 8010558:	f85d 7b04 	ldr.w	r7, [sp], #4
 801055c:	4770      	bx	lr
 801055e:	bf00      	nop
 8010560:	20025b20 	.word	0x20025b20

08010564 <_ZNK6tflite5Model7versionEv>:
  uint32_t version() const {
 8010564:	b580      	push	{r7, lr}
 8010566:	b082      	sub	sp, #8
 8010568:	af00      	add	r7, sp, #0
 801056a:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_VERSION, 0);
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	2200      	movs	r2, #0
 8010570:	2104      	movs	r1, #4
 8010572:	4618      	mov	r0, r3
 8010574:	f7fd fb2f 	bl	800dbd6 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 8010578:	4603      	mov	r3, r0
  }
 801057a:	4618      	mov	r0, r3
 801057c:	3708      	adds	r7, #8
 801057e:	46bd      	mov	sp, r7
 8010580:	bd80      	pop	{r7, pc}

08010582 <_ZN6tflite8GetModelEPKv>:
  }
  value = nullptr;
  type = BuiltinOptions_NONE;
}

inline const tflite::Model *GetModel(const void *buf) {
 8010582:	b580      	push	{r7, lr}
 8010584:	b082      	sub	sp, #8
 8010586:	af00      	add	r7, sp, #0
 8010588:	6078      	str	r0, [r7, #4]
  return flatbuffers::GetRoot<tflite::Model>(buf);
 801058a:	6878      	ldr	r0, [r7, #4]
 801058c:	f7ff ff8c 	bl	80104a8 <_ZN11flatbuffers7GetRootIN6tflite5ModelEEEPKT_PKv>
 8010590:	4603      	mov	r3, r0
}
 8010592:	4618      	mov	r0, r3
 8010594:	3708      	adds	r7, #8
 8010596:	46bd      	mov	sp, r7
 8010598:	bd80      	pop	{r7, pc}
	...

0801059c <__tcf_0>:
  tflite::InitializeTarget();

  // Set up logging. Google style is to avoid globals or statics because of
  // lifetime uncertainty, but since this has a trivial destructor it's okay.
  // NOLINTNEXTLINE(runtime-global-variables)
  static tflite::MicroErrorReporter micro_error_reporter;
 801059c:	b580      	push	{r7, lr}
 801059e:	af00      	add	r7, sp, #0
 80105a0:	4801      	ldr	r0, [pc, #4]	; (80105a8 <__tcf_0+0xc>)
 80105a2:	f7fd ffcf 	bl	800e544 <_ZN6tflite18MicroErrorReporterD1Ev>
 80105a6:	bd80      	pop	{r7, pc}
 80105a8:	20000010 	.word	0x20000010

080105ac <__tcf_1>:
  // incur some penalty in code space for op implementations that are not
  // needed by this graph.
  //
  // tflite::AllOpsResolver resolver;
  // NOLINTNEXTLINE(runtime-global-variables)
  static tflite::MicroMutableOpResolver<5> micro_op_resolver;
 80105ac:	b580      	push	{r7, lr}
 80105ae:	af00      	add	r7, sp, #0
 80105b0:	4801      	ldr	r0, [pc, #4]	; (80105b8 <__tcf_1+0xc>)
 80105b2:	f000 fa9f 	bl	8010af4 <_ZN6tflite22MicroMutableOpResolverILj5EED1Ev>
 80105b6:	bd80      	pop	{r7, pc}
 80105b8:	2004a360 	.word	0x2004a360

080105bc <__tcf_2>:
  micro_op_resolver.AddSoftmax();

  // Build an interpreter to run the model with.
  // NOLINTNEXTLINE(runtime-global-variables)
  static tflite::MicroInterpreter static_interpreter(
      model, micro_op_resolver, tensor_arena, kTensorArenaSize, error_reporter);
 80105bc:	b580      	push	{r7, lr}
 80105be:	af00      	add	r7, sp, #0
 80105c0:	4801      	ldr	r0, [pc, #4]	; (80105c8 <__tcf_2+0xc>)
 80105c2:	f7fe fd0e 	bl	800efe2 <_ZN6tflite16MicroInterpreterD1Ev>
 80105c6:	bd80      	pop	{r7, pc}
 80105c8:	2004a430 	.word	0x2004a430

080105cc <setup>:
void setup() {
 80105cc:	b590      	push	{r4, r7, lr}
 80105ce:	b08f      	sub	sp, #60	; 0x3c
 80105d0:	af04      	add	r7, sp, #16
  tflite::InitializeTarget();
 80105d2:	f7ff ff47 	bl	8010464 <_ZN6tflite16InitializeTargetEv>
  static tflite::MicroErrorReporter micro_error_reporter;
 80105d6:	4b65      	ldr	r3, [pc, #404]	; (801076c <setup+0x1a0>)
 80105d8:	781b      	ldrb	r3, [r3, #0]
 80105da:	f3bf 8f5b 	dmb	ish
 80105de:	b2db      	uxtb	r3, r3
 80105e0:	f003 0301 	and.w	r3, r3, #1
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	bf0c      	ite	eq
 80105e8:	2301      	moveq	r3, #1
 80105ea:	2300      	movne	r3, #0
 80105ec:	b2db      	uxtb	r3, r3
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d010      	beq.n	8010614 <setup+0x48>
 80105f2:	485e      	ldr	r0, [pc, #376]	; (801076c <setup+0x1a0>)
 80105f4:	f014 ffa5 	bl	8025542 <__cxa_guard_acquire>
 80105f8:	4603      	mov	r3, r0
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	bf14      	ite	ne
 80105fe:	2301      	movne	r3, #1
 8010600:	2300      	moveq	r3, #0
 8010602:	b2db      	uxtb	r3, r3
 8010604:	2b00      	cmp	r3, #0
 8010606:	d005      	beq.n	8010614 <setup+0x48>
 8010608:	4858      	ldr	r0, [pc, #352]	; (801076c <setup+0x1a0>)
 801060a:	f014 ffa6 	bl	802555a <__cxa_guard_release>
 801060e:	4858      	ldr	r0, [pc, #352]	; (8010770 <setup+0x1a4>)
 8010610:	f015 fa3e 	bl	8025a90 <atexit>
  error_reporter = &micro_error_reporter;
 8010614:	4b57      	ldr	r3, [pc, #348]	; (8010774 <setup+0x1a8>)
 8010616:	4a58      	ldr	r2, [pc, #352]	; (8010778 <setup+0x1ac>)
 8010618:	601a      	str	r2, [r3, #0]
  model = tflite::GetModel(g_person_detect_model_data);
 801061a:	4858      	ldr	r0, [pc, #352]	; (801077c <setup+0x1b0>)
 801061c:	f7ff ffb1 	bl	8010582 <_ZN6tflite8GetModelEPKv>
 8010620:	4603      	mov	r3, r0
 8010622:	4a57      	ldr	r2, [pc, #348]	; (8010780 <setup+0x1b4>)
 8010624:	6013      	str	r3, [r2, #0]
  if (model->version() != TFLITE_SCHEMA_VERSION) {
 8010626:	4b56      	ldr	r3, [pc, #344]	; (8010780 <setup+0x1b4>)
 8010628:	681b      	ldr	r3, [r3, #0]
 801062a:	4618      	mov	r0, r3
 801062c:	f7ff ff9a 	bl	8010564 <_ZNK6tflite5Model7versionEv>
 8010630:	4603      	mov	r3, r0
 8010632:	2b03      	cmp	r3, #3
 8010634:	bf14      	ite	ne
 8010636:	2301      	movne	r3, #1
 8010638:	2300      	moveq	r3, #0
 801063a:	b2db      	uxtb	r3, r3
 801063c:	2b00      	cmp	r3, #0
 801063e:	d00d      	beq.n	801065c <setup+0x90>
    TF_LITE_REPORT_ERROR(error_reporter,
 8010640:	4b4c      	ldr	r3, [pc, #304]	; (8010774 <setup+0x1a8>)
 8010642:	681c      	ldr	r4, [r3, #0]
 8010644:	4b4e      	ldr	r3, [pc, #312]	; (8010780 <setup+0x1b4>)
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	4618      	mov	r0, r3
 801064a:	f7ff ff8b 	bl	8010564 <_ZNK6tflite5Model7versionEv>
 801064e:	4602      	mov	r2, r0
 8010650:	2303      	movs	r3, #3
 8010652:	494c      	ldr	r1, [pc, #304]	; (8010784 <setup+0x1b8>)
 8010654:	4620      	mov	r0, r4
 8010656:	f7f8 f877 	bl	8008748 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return;
 801065a:	e084      	b.n	8010766 <setup+0x19a>
  static tflite::MicroMutableOpResolver<5> micro_op_resolver;
 801065c:	4b4a      	ldr	r3, [pc, #296]	; (8010788 <setup+0x1bc>)
 801065e:	781b      	ldrb	r3, [r3, #0]
 8010660:	f3bf 8f5b 	dmb	ish
 8010664:	b2db      	uxtb	r3, r3
 8010666:	f003 0301 	and.w	r3, r3, #1
 801066a:	2b00      	cmp	r3, #0
 801066c:	bf0c      	ite	eq
 801066e:	2301      	moveq	r3, #1
 8010670:	2300      	movne	r3, #0
 8010672:	b2db      	uxtb	r3, r3
 8010674:	2b00      	cmp	r3, #0
 8010676:	d014      	beq.n	80106a2 <setup+0xd6>
 8010678:	4843      	ldr	r0, [pc, #268]	; (8010788 <setup+0x1bc>)
 801067a:	f014 ff62 	bl	8025542 <__cxa_guard_acquire>
 801067e:	4603      	mov	r3, r0
 8010680:	2b00      	cmp	r3, #0
 8010682:	bf14      	ite	ne
 8010684:	2301      	movne	r3, #1
 8010686:	2300      	moveq	r3, #0
 8010688:	b2db      	uxtb	r3, r3
 801068a:	2b00      	cmp	r3, #0
 801068c:	d009      	beq.n	80106a2 <setup+0xd6>
 801068e:	2100      	movs	r1, #0
 8010690:	483e      	ldr	r0, [pc, #248]	; (801078c <setup+0x1c0>)
 8010692:	f000 f8e3 	bl	801085c <_ZN6tflite22MicroMutableOpResolverILj5EEC1EPNS_13ErrorReporterE>
 8010696:	483c      	ldr	r0, [pc, #240]	; (8010788 <setup+0x1bc>)
 8010698:	f014 ff5f 	bl	802555a <__cxa_guard_release>
 801069c:	483c      	ldr	r0, [pc, #240]	; (8010790 <setup+0x1c4>)
 801069e:	f015 f9f7 	bl	8025a90 <atexit>
  micro_op_resolver.AddAveragePool2D();
 80106a2:	483a      	ldr	r0, [pc, #232]	; (801078c <setup+0x1c0>)
 80106a4:	f000 f8fa 	bl	801089c <_ZN6tflite22MicroMutableOpResolverILj5EE16AddAveragePool2DEv>
  micro_op_resolver.AddConv2D();
 80106a8:	4838      	ldr	r0, [pc, #224]	; (801078c <setup+0x1c0>)
 80106aa:	f000 f90f 	bl	80108cc <_ZN6tflite22MicroMutableOpResolverILj5EE9AddConv2DEv>
  micro_op_resolver.AddDepthwiseConv2D();
 80106ae:	4837      	ldr	r0, [pc, #220]	; (801078c <setup+0x1c0>)
 80106b0:	f000 f924 	bl	80108fc <_ZN6tflite22MicroMutableOpResolverILj5EE18AddDepthwiseConv2DEv>
  micro_op_resolver.AddReshape();
 80106b4:	4835      	ldr	r0, [pc, #212]	; (801078c <setup+0x1c0>)
 80106b6:	f000 f939 	bl	801092c <_ZN6tflite22MicroMutableOpResolverILj5EE10AddReshapeEv>
  micro_op_resolver.AddSoftmax();
 80106ba:	1d3b      	adds	r3, r7, #4
 80106bc:	4618      	mov	r0, r3
 80106be:	f007 ff2d 	bl	801851c <_ZN6tflite16Register_SOFTMAXEv>
 80106c2:	1d3b      	adds	r3, r7, #4
 80106c4:	4619      	mov	r1, r3
 80106c6:	4831      	ldr	r0, [pc, #196]	; (801078c <setup+0x1c0>)
 80106c8:	f000 f948 	bl	801095c <_ZN6tflite22MicroMutableOpResolverILj5EE10AddSoftmaxERK18TfLiteRegistration>
      model, micro_op_resolver, tensor_arena, kTensorArenaSize, error_reporter);
 80106cc:	4b31      	ldr	r3, [pc, #196]	; (8010794 <setup+0x1c8>)
 80106ce:	781b      	ldrb	r3, [r3, #0]
 80106d0:	f3bf 8f5b 	dmb	ish
 80106d4:	b2db      	uxtb	r3, r3
 80106d6:	f003 0301 	and.w	r3, r3, #1
 80106da:	2b00      	cmp	r3, #0
 80106dc:	bf0c      	ite	eq
 80106de:	2301      	moveq	r3, #1
 80106e0:	2300      	movne	r3, #0
 80106e2:	b2db      	uxtb	r3, r3
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d01f      	beq.n	8010728 <setup+0x15c>
 80106e8:	482a      	ldr	r0, [pc, #168]	; (8010794 <setup+0x1c8>)
 80106ea:	f014 ff2a 	bl	8025542 <__cxa_guard_acquire>
 80106ee:	4603      	mov	r3, r0
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	bf14      	ite	ne
 80106f4:	2301      	movne	r3, #1
 80106f6:	2300      	moveq	r3, #0
 80106f8:	b2db      	uxtb	r3, r3
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d014      	beq.n	8010728 <setup+0x15c>
 80106fe:	4b20      	ldr	r3, [pc, #128]	; (8010780 <setup+0x1b4>)
 8010700:	6819      	ldr	r1, [r3, #0]
 8010702:	4b1c      	ldr	r3, [pc, #112]	; (8010774 <setup+0x1a8>)
 8010704:	681b      	ldr	r3, [r3, #0]
 8010706:	2200      	movs	r2, #0
 8010708:	9202      	str	r2, [sp, #8]
 801070a:	9301      	str	r3, [sp, #4]
 801070c:	f44f 3308 	mov.w	r3, #139264	; 0x22000
 8010710:	9300      	str	r3, [sp, #0]
 8010712:	4b21      	ldr	r3, [pc, #132]	; (8010798 <setup+0x1cc>)
 8010714:	4a1d      	ldr	r2, [pc, #116]	; (801078c <setup+0x1c0>)
 8010716:	4821      	ldr	r0, [pc, #132]	; (801079c <setup+0x1d0>)
 8010718:	f7fe fc1c 	bl	800ef54 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_13MicroProfilerE>
 801071c:	481d      	ldr	r0, [pc, #116]	; (8010794 <setup+0x1c8>)
 801071e:	f014 ff1c 	bl	802555a <__cxa_guard_release>
 8010722:	481f      	ldr	r0, [pc, #124]	; (80107a0 <setup+0x1d4>)
 8010724:	f015 f9b4 	bl	8025a90 <atexit>
  interpreter = &static_interpreter;
 8010728:	4b1e      	ldr	r3, [pc, #120]	; (80107a4 <setup+0x1d8>)
 801072a:	4a1c      	ldr	r2, [pc, #112]	; (801079c <setup+0x1d0>)
 801072c:	601a      	str	r2, [r3, #0]

  // Allocate memory from the tensor_arena for the model's tensors.
  TfLiteStatus allocate_status = interpreter->AllocateTensors();
 801072e:	4b1d      	ldr	r3, [pc, #116]	; (80107a4 <setup+0x1d8>)
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	4618      	mov	r0, r3
 8010734:	f7fe fe22 	bl	800f37c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>
 8010738:	4603      	mov	r3, r0
 801073a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (allocate_status != kTfLiteOk) {
 801073e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010742:	2b00      	cmp	r3, #0
 8010744:	d006      	beq.n	8010754 <setup+0x188>
    TF_LITE_REPORT_ERROR(error_reporter, "AllocateTensors() failed");
 8010746:	4b0b      	ldr	r3, [pc, #44]	; (8010774 <setup+0x1a8>)
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	4917      	ldr	r1, [pc, #92]	; (80107a8 <setup+0x1dc>)
 801074c:	4618      	mov	r0, r3
 801074e:	f7f7 fffb 	bl	8008748 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return;
 8010752:	e008      	b.n	8010766 <setup+0x19a>
  }

  // Get information about the memory area to use for the model's input.
  input = interpreter->input(0);
 8010754:	4b13      	ldr	r3, [pc, #76]	; (80107a4 <setup+0x1d8>)
 8010756:	681b      	ldr	r3, [r3, #0]
 8010758:	2100      	movs	r1, #0
 801075a:	4618      	mov	r0, r3
 801075c:	f7fe ffae 	bl	800f6bc <_ZN6tflite16MicroInterpreter5inputEj>
 8010760:	4603      	mov	r3, r0
 8010762:	4a12      	ldr	r2, [pc, #72]	; (80107ac <setup+0x1e0>)
 8010764:	6013      	str	r3, [r2, #0]
}
 8010766:	372c      	adds	r7, #44	; 0x2c
 8010768:	46bd      	mov	sp, r7
 801076a:	bd90      	pop	{r4, r7, pc}
 801076c:	2004a35c 	.word	0x2004a35c
 8010770:	0801059d 	.word	0x0801059d
 8010774:	2002834c 	.word	0x2002834c
 8010778:	20000010 	.word	0x20000010
 801077c:	0802cae8 	.word	0x0802cae8
 8010780:	20028350 	.word	0x20028350
 8010784:	0802ada8 	.word	0x0802ada8
 8010788:	2004a42c 	.word	0x2004a42c
 801078c:	2004a360 	.word	0x2004a360
 8010790:	080105ad 	.word	0x080105ad
 8010794:	2004a4c4 	.word	0x2004a4c4
 8010798:	2002835c 	.word	0x2002835c
 801079c:	2004a430 	.word	0x2004a430
 80107a0:	080105bd 	.word	0x080105bd
 80107a4:	20028354 	.word	0x20028354
 80107a8:	0802adf0 	.word	0x0802adf0
 80107ac:	20028358 	.word	0x20028358

080107b0 <loop>:

// The name of this function is important for Arduino compatibility.
void loop() {
 80107b0:	b580      	push	{r7, lr}
 80107b2:	b084      	sub	sp, #16
 80107b4:	af02      	add	r7, sp, #8
  // Get image from provider.
  if (kTfLiteOk != GetImage(error_reporter, kNumCols, kNumRows, kNumChannels,
 80107b6:	4b24      	ldr	r3, [pc, #144]	; (8010848 <loop+0x98>)
 80107b8:	6818      	ldr	r0, [r3, #0]
 80107ba:	4b24      	ldr	r3, [pc, #144]	; (801084c <loop+0x9c>)
 80107bc:	681b      	ldr	r3, [r3, #0]
 80107be:	685b      	ldr	r3, [r3, #4]
 80107c0:	9300      	str	r3, [sp, #0]
 80107c2:	2301      	movs	r3, #1
 80107c4:	2260      	movs	r2, #96	; 0x60
 80107c6:	2160      	movs	r1, #96	; 0x60
 80107c8:	f7ff fea2 	bl	8010510 <_Z8GetImagePN6tflite13ErrorReporterEiiiPa>
 80107cc:	4603      	mov	r3, r0
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	bf14      	ite	ne
 80107d2:	2301      	movne	r3, #1
 80107d4:	2300      	moveq	r3, #0
 80107d6:	b2db      	uxtb	r3, r3
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d005      	beq.n	80107e8 <loop+0x38>
                            input->data.int8)) {
    TF_LITE_REPORT_ERROR(error_reporter, "Image capture failed.");
 80107dc:	4b1a      	ldr	r3, [pc, #104]	; (8010848 <loop+0x98>)
 80107de:	681b      	ldr	r3, [r3, #0]
 80107e0:	491b      	ldr	r1, [pc, #108]	; (8010850 <loop+0xa0>)
 80107e2:	4618      	mov	r0, r3
 80107e4:	f7f7 ffb0 	bl	8008748 <_ZN6tflite13ErrorReporter6ReportEPKcz>
  }

  // Run the model on this input and make sure it succeeds.
  if (kTfLiteOk != interpreter->Invoke()) {
 80107e8:	4b1a      	ldr	r3, [pc, #104]	; (8010854 <loop+0xa4>)
 80107ea:	681b      	ldr	r3, [r3, #0]
 80107ec:	4618      	mov	r0, r3
 80107ee:	f7fe ff33 	bl	800f658 <_ZN6tflite16MicroInterpreter6InvokeEv>
 80107f2:	4603      	mov	r3, r0
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	bf14      	ite	ne
 80107f8:	2301      	movne	r3, #1
 80107fa:	2300      	moveq	r3, #0
 80107fc:	b2db      	uxtb	r3, r3
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d005      	beq.n	801080e <loop+0x5e>
    TF_LITE_REPORT_ERROR(error_reporter, "Invoke failed.");
 8010802:	4b11      	ldr	r3, [pc, #68]	; (8010848 <loop+0x98>)
 8010804:	681b      	ldr	r3, [r3, #0]
 8010806:	4914      	ldr	r1, [pc, #80]	; (8010858 <loop+0xa8>)
 8010808:	4618      	mov	r0, r3
 801080a:	f7f7 ff9d 	bl	8008748 <_ZN6tflite13ErrorReporter6ReportEPKcz>
  }

  TfLiteTensor* output = interpreter->output(0);
 801080e:	4b11      	ldr	r3, [pc, #68]	; (8010854 <loop+0xa4>)
 8010810:	681b      	ldr	r3, [r3, #0]
 8010812:	2100      	movs	r1, #0
 8010814:	4618      	mov	r0, r3
 8010816:	f7fe ff75 	bl	800f704 <_ZN6tflite16MicroInterpreter6outputEj>
 801081a:	6078      	str	r0, [r7, #4]

  // Process the inference results.
  int8_t person_score = output->data.uint8[kPersonIndex];
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	685b      	ldr	r3, [r3, #4]
 8010820:	3301      	adds	r3, #1
 8010822:	781b      	ldrb	r3, [r3, #0]
 8010824:	70fb      	strb	r3, [r7, #3]
  int8_t no_person_score = output->data.uint8[kNotAPersonIndex];
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	685b      	ldr	r3, [r3, #4]
 801082a:	781b      	ldrb	r3, [r3, #0]
 801082c:	70bb      	strb	r3, [r7, #2]
  RespondToDetection(error_reporter, person_score, no_person_score);
 801082e:	4b06      	ldr	r3, [pc, #24]	; (8010848 <loop+0x98>)
 8010830:	681b      	ldr	r3, [r3, #0]
 8010832:	f997 2002 	ldrsb.w	r2, [r7, #2]
 8010836:	f997 1003 	ldrsb.w	r1, [r7, #3]
 801083a:	4618      	mov	r0, r3
 801083c:	f7ff fe52 	bl	80104e4 <_Z18RespondToDetectionPN6tflite13ErrorReporterEaa>
}
 8010840:	bf00      	nop
 8010842:	3708      	adds	r7, #8
 8010844:	46bd      	mov	sp, r7
 8010846:	bd80      	pop	{r7, pc}
 8010848:	2002834c 	.word	0x2002834c
 801084c:	20028358 	.word	0x20028358
 8010850:	0802ae0c 	.word	0x0802ae0c
 8010854:	20028354 	.word	0x20028354
 8010858:	0802ae24 	.word	0x0802ae24

0801085c <_ZN6tflite22MicroMutableOpResolverILj5EEC1EPNS_13ErrorReporterE>:
template <unsigned int tOpCount>
class MicroMutableOpResolver : public MicroOpResolver {
 public:
  TF_LITE_REMOVE_VIRTUAL_DELETE

  explicit MicroMutableOpResolver(ErrorReporter* error_reporter = nullptr)
 801085c:	b580      	push	{r7, lr}
 801085e:	b082      	sub	sp, #8
 8010860:	af00      	add	r7, sp, #0
 8010862:	6078      	str	r0, [r7, #4]
 8010864:	6039      	str	r1, [r7, #0]
      : error_reporter_(error_reporter) {}
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	4618      	mov	r0, r3
 801086a:	f7fb fa77 	bl	800bd5c <_ZN6tflite15MicroOpResolverC1Ev>
 801086e:	4a0a      	ldr	r2, [pc, #40]	; (8010898 <_ZN6tflite22MicroMutableOpResolverILj5EEC1EPNS_13ErrorReporterE+0x3c>)
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	601a      	str	r2, [r3, #0]
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	2200      	movs	r2, #0
 8010878:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	2200      	movs	r2, #0
 8010880:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	683a      	ldr	r2, [r7, #0]
 8010888:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	4618      	mov	r0, r3
 8010890:	3708      	adds	r7, #8
 8010892:	46bd      	mov	sp, r7
 8010894:	bd80      	pop	{r7, pc}
 8010896:	bf00      	nop
 8010898:	0802ca58 	.word	0x0802ca58

0801089c <_ZN6tflite22MicroMutableOpResolverILj5EE16AddAveragePool2DEv>:
  TfLiteStatus AddArgMin() {
    return AddBuiltin(BuiltinOperator_ARG_MIN,
                      tflite::ops::micro::Register_ARG_MIN(), ParseArgMin);
  }

  TfLiteStatus AddAveragePool2D() {
 801089c:	b580      	push	{r7, lr}
 801089e:	b08a      	sub	sp, #40	; 0x28
 80108a0:	af00      	add	r7, sp, #0
 80108a2:	6078      	str	r0, [r7, #4]
    return AddBuiltin(BuiltinOperator_AVERAGE_POOL_2D,
                      tflite::ops::micro::Register_AVERAGE_POOL_2D(),
 80108a4:	f107 0308 	add.w	r3, r7, #8
 80108a8:	4618      	mov	r0, r3
 80108aa:	f007 f9d9 	bl	8017c60 <_ZN6tflite3ops5micro24Register_AVERAGE_POOL_2DEv>
                      ParsePool);
 80108ae:	f107 0208 	add.w	r2, r7, #8
 80108b2:	4b05      	ldr	r3, [pc, #20]	; (80108c8 <_ZN6tflite22MicroMutableOpResolverILj5EE16AddAveragePool2DEv+0x2c>)
 80108b4:	2101      	movs	r1, #1
 80108b6:	6878      	ldr	r0, [r7, #4]
 80108b8:	f000 f862 	bl	8010980 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
 80108bc:	4603      	mov	r3, r0
  }
 80108be:	4618      	mov	r0, r3
 80108c0:	3728      	adds	r7, #40	; 0x28
 80108c2:	46bd      	mov	sp, r7
 80108c4:	bd80      	pop	{r7, pc}
 80108c6:	bf00      	nop
 80108c8:	08009109 	.word	0x08009109

080108cc <_ZN6tflite22MicroMutableOpResolverILj5EE9AddConv2DEv>:
    return AddBuiltin(BuiltinOperator_CONCATENATION,
                      tflite::ops::micro::Register_CONCATENATION(),
                      ParseConcatenation);
  }

  TfLiteStatus AddConv2D() {
 80108cc:	b580      	push	{r7, lr}
 80108ce:	b08a      	sub	sp, #40	; 0x28
 80108d0:	af00      	add	r7, sp, #0
 80108d2:	6078      	str	r0, [r7, #4]
    return AddBuiltin(BuiltinOperator_CONV_2D, Register_CONV_2D(), ParseConv2D);
 80108d4:	f107 0308 	add.w	r3, r7, #8
 80108d8:	4618      	mov	r0, r3
 80108da:	f004 ff11 	bl	8015700 <_ZN6tflite16Register_CONV_2DEv>
 80108de:	f107 0208 	add.w	r2, r7, #8
 80108e2:	4b05      	ldr	r3, [pc, #20]	; (80108f8 <_ZN6tflite22MicroMutableOpResolverILj5EE9AddConv2DEv+0x2c>)
 80108e4:	2103      	movs	r1, #3
 80108e6:	6878      	ldr	r0, [r7, #4]
 80108e8:	f000 f84a 	bl	8010980 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
 80108ec:	4603      	mov	r3, r0
  }
 80108ee:	4618      	mov	r0, r3
 80108f0:	3728      	adds	r7, #40	; 0x28
 80108f2:	46bd      	mov	sp, r7
 80108f4:	bd80      	pop	{r7, pc}
 80108f6:	bf00      	nop
 80108f8:	08008e71 	.word	0x08008e71

080108fc <_ZN6tflite22MicroMutableOpResolverILj5EE18AddDepthwiseConv2DEv>:
  TfLiteStatus AddDepthToSpace() {
    return AddBuiltin(BuiltinOperator_DEPTH_TO_SPACE,
                      tflite::Register_DEPTH_TO_SPACE(), ParseDepthToSpace);
  }

  TfLiteStatus AddDepthwiseConv2D() {
 80108fc:	b580      	push	{r7, lr}
 80108fe:	b08a      	sub	sp, #40	; 0x28
 8010900:	af00      	add	r7, sp, #0
 8010902:	6078      	str	r0, [r7, #4]
    return AddBuiltin(BuiltinOperator_DEPTHWISE_CONV_2D,
                      Register_DEPTHWISE_CONV_2D(), ParseDepthwiseConv2D);
 8010904:	f107 0308 	add.w	r3, r7, #8
 8010908:	4618      	mov	r0, r3
 801090a:	f005 ffb7 	bl	801687c <_ZN6tflite26Register_DEPTHWISE_CONV_2DEv>
 801090e:	f107 0208 	add.w	r2, r7, #8
 8010912:	4b05      	ldr	r3, [pc, #20]	; (8010928 <_ZN6tflite22MicroMutableOpResolverILj5EE18AddDepthwiseConv2DEv+0x2c>)
 8010914:	2104      	movs	r1, #4
 8010916:	6878      	ldr	r0, [r7, #4]
 8010918:	f000 f832 	bl	8010980 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
 801091c:	4603      	mov	r3, r0
  }
 801091e:	4618      	mov	r0, r3
 8010920:	3728      	adds	r7, #40	; 0x28
 8010922:	46bd      	mov	sp, r7
 8010924:	bd80      	pop	{r7, pc}
 8010926:	bf00      	nop
 8010928:	08008fb1 	.word	0x08008fb1

0801092c <_ZN6tflite22MicroMutableOpResolverILj5EE10AddReshapeEv>:
  TfLiteStatus AddRelu6() {
    return AddBuiltin(BuiltinOperator_RELU6,
                      tflite::ops::micro::Register_RELU6(), ParseRelu6);
  }

  TfLiteStatus AddReshape() {
 801092c:	b580      	push	{r7, lr}
 801092e:	b08a      	sub	sp, #40	; 0x28
 8010930:	af00      	add	r7, sp, #0
 8010932:	6078      	str	r0, [r7, #4]
    return AddBuiltin(BuiltinOperator_RESHAPE,
                      tflite::ops::micro::Register_RESHAPE(), ParseReshape);
 8010934:	f107 0308 	add.w	r3, r7, #8
 8010938:	4618      	mov	r0, r3
 801093a:	f003 f96d 	bl	8013c18 <_ZN6tflite3ops5micro16Register_RESHAPEEv>
 801093e:	f107 0208 	add.w	r2, r7, #8
 8010942:	4b05      	ldr	r3, [pc, #20]	; (8010958 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddReshapeEv+0x2c>)
 8010944:	2116      	movs	r1, #22
 8010946:	6878      	ldr	r0, [r7, #4]
 8010948:	f000 f81a 	bl	8010980 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
 801094c:	4603      	mov	r3, r0
  }
 801094e:	4618      	mov	r0, r3
 8010950:	3728      	adds	r7, #40	; 0x28
 8010952:	46bd      	mov	sp, r7
 8010954:	bd80      	pop	{r7, pc}
 8010956:	bf00      	nop
 8010958:	08009249 	.word	0x08009249

0801095c <_ZN6tflite22MicroMutableOpResolverILj5EE10AddSoftmaxERK18TfLiteRegistration>:
  TfLiteStatus AddSin() {
    return AddBuiltin(BuiltinOperator_SIN, tflite::ops::micro::Register_SIN(),
                      ParseSin);
  }

  TfLiteStatus AddSoftmax(
 801095c:	b580      	push	{r7, lr}
 801095e:	b082      	sub	sp, #8
 8010960:	af00      	add	r7, sp, #0
 8010962:	6078      	str	r0, [r7, #4]
 8010964:	6039      	str	r1, [r7, #0]
      const TfLiteRegistration& registration = Register_SOFTMAX()) {
    return AddBuiltin(BuiltinOperator_SOFTMAX, registration, ParseSoftmax);
 8010966:	4b05      	ldr	r3, [pc, #20]	; (801097c <_ZN6tflite22MicroMutableOpResolverILj5EE10AddSoftmaxERK18TfLiteRegistration+0x20>)
 8010968:	683a      	ldr	r2, [r7, #0]
 801096a:	2119      	movs	r1, #25
 801096c:	6878      	ldr	r0, [r7, #4]
 801096e:	f000 f807 	bl	8010980 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
 8010972:	4603      	mov	r3, r0
  }
 8010974:	4618      	mov	r0, r3
 8010976:	3708      	adds	r7, #8
 8010978:	46bd      	mov	sp, r7
 801097a:	bd80      	pop	{r7, pc}
 801097c:	08009345 	.word	0x08009345

08010980 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>:
  }

  unsigned int GetRegistrationLength() { return registrations_len_; }

 private:
  TfLiteStatus AddBuiltin(tflite::BuiltinOperator op,
 8010980:	b5b0      	push	{r4, r5, r7, lr}
 8010982:	b084      	sub	sp, #16
 8010984:	af00      	add	r7, sp, #0
 8010986:	60f8      	str	r0, [r7, #12]
 8010988:	607a      	str	r2, [r7, #4]
 801098a:	603b      	str	r3, [r7, #0]
 801098c:	460b      	mov	r3, r1
 801098e:	72fb      	strb	r3, [r7, #11]
                          const TfLiteRegistration& registration,
                          MicroOpResolver::BuiltinParseFunction parser) {
    if (op == BuiltinOperator_CUSTOM) {
 8010990:	7afb      	ldrb	r3, [r7, #11]
 8010992:	2b20      	cmp	r3, #32
 8010994:	d10d      	bne.n	80109b2 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x32>
      if (error_reporter_ != nullptr) {
 8010996:	68fb      	ldr	r3, [r7, #12]
 8010998:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 801099c:	2b00      	cmp	r3, #0
 801099e:	d006      	beq.n	80109ae <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x2e>
        TF_LITE_REPORT_ERROR(error_reporter_,
 80109a0:	68fb      	ldr	r3, [r7, #12]
 80109a2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80109a6:	493a      	ldr	r1, [pc, #232]	; (8010a90 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x110>)
 80109a8:	4618      	mov	r0, r3
 80109aa:	f7f7 fecd 	bl	8008748 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Invalid parameter BuiltinOperator_CUSTOM to the "
                             "AddBuiltin function.");
      }
      return kTfLiteError;
 80109ae:	2301      	movs	r3, #1
 80109b0:	e069      	b.n	8010a86 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x106>
    }

    if (FindOp(op) != nullptr) {
 80109b2:	68fb      	ldr	r3, [r7, #12]
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	3318      	adds	r3, #24
 80109b8:	681b      	ldr	r3, [r3, #0]
 80109ba:	7afa      	ldrb	r2, [r7, #11]
 80109bc:	4611      	mov	r1, r2
 80109be:	68f8      	ldr	r0, [r7, #12]
 80109c0:	4798      	blx	r3
 80109c2:	4603      	mov	r3, r0
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	bf14      	ite	ne
 80109c8:	2301      	movne	r3, #1
 80109ca:	2300      	moveq	r3, #0
 80109cc:	b2db      	uxtb	r3, r3
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d00e      	beq.n	80109f0 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x70>
      if (error_reporter_ != nullptr) {
 80109d2:	68fb      	ldr	r3, [r7, #12]
 80109d4:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80109d8:	2b00      	cmp	r3, #0
 80109da:	d007      	beq.n	80109ec <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x6c>
        TF_LITE_REPORT_ERROR(error_reporter_,
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80109e2:	7afa      	ldrb	r2, [r7, #11]
 80109e4:	492b      	ldr	r1, [pc, #172]	; (8010a94 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x114>)
 80109e6:	4618      	mov	r0, r3
 80109e8:	f7f7 feae 	bl	8008748 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Calling AddBuiltin with the same op more than "
                             "once is not supported (Op: #%d).",
                             op);
      }
      return kTfLiteError;
 80109ec:	2301      	movs	r3, #1
 80109ee:	e04a      	b.n	8010a86 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x106>
    }

    if (registrations_len_ >= tOpCount) {
 80109f0:	68fb      	ldr	r3, [r7, #12]
 80109f2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80109f6:	2b04      	cmp	r3, #4
 80109f8:	d90e      	bls.n	8010a18 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x98>
      if (error_reporter_) {
 80109fa:	68fb      	ldr	r3, [r7, #12]
 80109fc:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d007      	beq.n	8010a14 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x94>
        TF_LITE_REPORT_ERROR(error_reporter_,
 8010a04:	68fb      	ldr	r3, [r7, #12]
 8010a06:	f8d3 00c8 	ldr.w	r0, [r3, #200]	; 0xc8
 8010a0a:	7afa      	ldrb	r2, [r7, #11]
 8010a0c:	2305      	movs	r3, #5
 8010a0e:	4922      	ldr	r1, [pc, #136]	; (8010a98 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x118>)
 8010a10:	f7f7 fe9a 	bl	8008748 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Couldn't register builtin op #%d, resolver size "
                             "is too small (%d).",
                             op, tOpCount);
      }
      return kTfLiteError;
 8010a14:	2301      	movs	r3, #1
 8010a16:	e036      	b.n	8010a86 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x106>
    }

    registrations_[registrations_len_] = registration;
 8010a18:	68fb      	ldr	r3, [r7, #12]
 8010a1a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8010a1e:	68fa      	ldr	r2, [r7, #12]
 8010a20:	015b      	lsls	r3, r3, #5
 8010a22:	4413      	add	r3, r2
 8010a24:	687a      	ldr	r2, [r7, #4]
 8010a26:	1d1c      	adds	r4, r3, #4
 8010a28:	4615      	mov	r5, r2
 8010a2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010a2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010a2e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8010a32:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    // Strictly speaking, the builtin_code is not necessary for TFLM but filling
    // it in regardless.
    registrations_[registrations_len_].builtin_code = op;
 8010a36:	68fb      	ldr	r3, [r7, #12]
 8010a38:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8010a3c:	7afa      	ldrb	r2, [r7, #11]
 8010a3e:	68f9      	ldr	r1, [r7, #12]
 8010a40:	015b      	lsls	r3, r3, #5
 8010a42:	440b      	add	r3, r1
 8010a44:	3318      	adds	r3, #24
 8010a46:	601a      	str	r2, [r3, #0]
    registrations_len_++;
 8010a48:	68fb      	ldr	r3, [r7, #12]
 8010a4a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8010a4e:	1c5a      	adds	r2, r3, #1
 8010a50:	68fb      	ldr	r3, [r7, #12]
 8010a52:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    builtin_codes_[num_buitin_ops_] = op;
 8010a56:	68fb      	ldr	r3, [r7, #12]
 8010a58:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8010a5c:	68fa      	ldr	r2, [r7, #12]
 8010a5e:	4413      	add	r3, r2
 8010a60:	7afa      	ldrb	r2, [r7, #11]
 8010a62:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
    builtin_parsers_[num_buitin_ops_] = parser;
 8010a66:	68fb      	ldr	r3, [r7, #12]
 8010a68:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8010a6c:	68fb      	ldr	r3, [r7, #12]
 8010a6e:	322c      	adds	r2, #44	; 0x2c
 8010a70:	6839      	ldr	r1, [r7, #0]
 8010a72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    num_buitin_ops_++;
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8010a7c:	1c5a      	adds	r2, r3, #1
 8010a7e:	68fb      	ldr	r3, [r7, #12]
 8010a80:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

    return kTfLiteOk;
 8010a84:	2300      	movs	r3, #0
  }
 8010a86:	4618      	mov	r0, r3
 8010a88:	3710      	adds	r7, #16
 8010a8a:	46bd      	mov	sp, r7
 8010a8c:	bdb0      	pop	{r4, r5, r7, pc}
 8010a8e:	bf00      	nop
 8010a90:	0802ae34 	.word	0x0802ae34
 8010a94:	0802ae7c 	.word	0x0802ae7c
 8010a98:	0802aecc 	.word	0x0802aecc

08010a9c <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpENS_15BuiltinOperatorE>:
  const TfLiteRegistration* FindOp(tflite::BuiltinOperator op) const override {
 8010a9c:	b480      	push	{r7}
 8010a9e:	b085      	sub	sp, #20
 8010aa0:	af00      	add	r7, sp, #0
 8010aa2:	6078      	str	r0, [r7, #4]
 8010aa4:	460b      	mov	r3, r1
 8010aa6:	70fb      	strb	r3, [r7, #3]
    if (op == BuiltinOperator_CUSTOM) return nullptr;
 8010aa8:	78fb      	ldrb	r3, [r7, #3]
 8010aaa:	2b20      	cmp	r3, #32
 8010aac:	d101      	bne.n	8010ab2 <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpENS_15BuiltinOperatorE+0x16>
 8010aae:	2300      	movs	r3, #0
 8010ab0:	e019      	b.n	8010ae6 <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpENS_15BuiltinOperatorE+0x4a>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8010ab2:	2300      	movs	r3, #0
 8010ab4:	60fb      	str	r3, [r7, #12]
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8010abc:	68fa      	ldr	r2, [r7, #12]
 8010abe:	429a      	cmp	r2, r3
 8010ac0:	d210      	bcs.n	8010ae4 <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpENS_15BuiltinOperatorE+0x48>
      const TfLiteRegistration& registration = registrations_[i];
 8010ac2:	68fb      	ldr	r3, [r7, #12]
 8010ac4:	015b      	lsls	r3, r3, #5
 8010ac6:	687a      	ldr	r2, [r7, #4]
 8010ac8:	4413      	add	r3, r2
 8010aca:	3304      	adds	r3, #4
 8010acc:	60bb      	str	r3, [r7, #8]
      if (registration.builtin_code == op) {
 8010ace:	68bb      	ldr	r3, [r7, #8]
 8010ad0:	695a      	ldr	r2, [r3, #20]
 8010ad2:	78fb      	ldrb	r3, [r7, #3]
 8010ad4:	429a      	cmp	r2, r3
 8010ad6:	d101      	bne.n	8010adc <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpENS_15BuiltinOperatorE+0x40>
        return &registration;
 8010ad8:	68bb      	ldr	r3, [r7, #8]
 8010ada:	e004      	b.n	8010ae6 <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpENS_15BuiltinOperatorE+0x4a>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8010adc:	68fb      	ldr	r3, [r7, #12]
 8010ade:	3301      	adds	r3, #1
 8010ae0:	60fb      	str	r3, [r7, #12]
 8010ae2:	e7e8      	b.n	8010ab6 <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpENS_15BuiltinOperatorE+0x1a>
    return nullptr;
 8010ae4:	2300      	movs	r3, #0
  }
 8010ae6:	4618      	mov	r0, r3
 8010ae8:	3714      	adds	r7, #20
 8010aea:	46bd      	mov	sp, r7
 8010aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010af0:	4770      	bx	lr
	...

08010af4 <_ZN6tflite22MicroMutableOpResolverILj5EED1Ev>:
class MicroMutableOpResolver : public MicroOpResolver {
 8010af4:	b580      	push	{r7, lr}
 8010af6:	b082      	sub	sp, #8
 8010af8:	af00      	add	r7, sp, #0
 8010afa:	6078      	str	r0, [r7, #4]
 8010afc:	4a05      	ldr	r2, [pc, #20]	; (8010b14 <_ZN6tflite22MicroMutableOpResolverILj5EED1Ev+0x20>)
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	601a      	str	r2, [r3, #0]
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	4618      	mov	r0, r3
 8010b06:	f7fb f8e7 	bl	800bcd8 <_ZN6tflite15MicroOpResolverD1Ev>
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	4618      	mov	r0, r3
 8010b0e:	3708      	adds	r7, #8
 8010b10:	46bd      	mov	sp, r7
 8010b12:	bd80      	pop	{r7, pc}
 8010b14:	0802ca58 	.word	0x0802ca58

08010b18 <_ZN6tflite22MicroMutableOpResolverILj5EED0Ev>:
 8010b18:	b580      	push	{r7, lr}
 8010b1a:	b082      	sub	sp, #8
 8010b1c:	af00      	add	r7, sp, #0
 8010b1e:	6078      	str	r0, [r7, #4]
 8010b20:	6878      	ldr	r0, [r7, #4]
 8010b22:	f7ff ffe7 	bl	8010af4 <_ZN6tflite22MicroMutableOpResolverILj5EED1Ev>
 8010b26:	21cc      	movs	r1, #204	; 0xcc
 8010b28:	6878      	ldr	r0, [r7, #4]
 8010b2a:	f014 fd06 	bl	802553a <_ZdlPvj>
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	4618      	mov	r0, r3
 8010b32:	3708      	adds	r7, #8
 8010b34:	46bd      	mov	sp, r7
 8010b36:	bd80      	pop	{r7, pc}

08010b38 <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpEPKc>:
  const TfLiteRegistration* FindOp(const char* op) const override {
 8010b38:	b580      	push	{r7, lr}
 8010b3a:	b084      	sub	sp, #16
 8010b3c:	af00      	add	r7, sp, #0
 8010b3e:	6078      	str	r0, [r7, #4]
 8010b40:	6039      	str	r1, [r7, #0]
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8010b42:	2300      	movs	r3, #0
 8010b44:	60fb      	str	r3, [r7, #12]
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8010b4c:	68fa      	ldr	r2, [r7, #12]
 8010b4e:	429a      	cmp	r2, r3
 8010b50:	d218      	bcs.n	8010b84 <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpEPKc+0x4c>
      const TfLiteRegistration& registration = registrations_[i];
 8010b52:	68fb      	ldr	r3, [r7, #12]
 8010b54:	015b      	lsls	r3, r3, #5
 8010b56:	687a      	ldr	r2, [r7, #4]
 8010b58:	4413      	add	r3, r2
 8010b5a:	3304      	adds	r3, #4
 8010b5c:	60bb      	str	r3, [r7, #8]
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 8010b5e:	68bb      	ldr	r3, [r7, #8]
 8010b60:	695b      	ldr	r3, [r3, #20]
 8010b62:	2b20      	cmp	r3, #32
 8010b64:	d10a      	bne.n	8010b7c <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpEPKc+0x44>
          (strcmp(registration.custom_name, op) == 0)) {
 8010b66:	68bb      	ldr	r3, [r7, #8]
 8010b68:	699b      	ldr	r3, [r3, #24]
 8010b6a:	6839      	ldr	r1, [r7, #0]
 8010b6c:	4618      	mov	r0, r3
 8010b6e:	f7ef fba7 	bl	80002c0 <strcmp>
 8010b72:	4603      	mov	r3, r0
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d101      	bne.n	8010b7c <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpEPKc+0x44>
        return &registration;
 8010b78:	68bb      	ldr	r3, [r7, #8]
 8010b7a:	e004      	b.n	8010b86 <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpEPKc+0x4e>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8010b7c:	68fb      	ldr	r3, [r7, #12]
 8010b7e:	3301      	adds	r3, #1
 8010b80:	60fb      	str	r3, [r7, #12]
 8010b82:	e7e0      	b.n	8010b46 <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpEPKc+0xe>
    return nullptr;
 8010b84:	2300      	movs	r3, #0
  }
 8010b86:	4618      	mov	r0, r3
 8010b88:	3710      	adds	r7, #16
 8010b8a:	46bd      	mov	sp, r7
 8010b8c:	bd80      	pop	{r7, pc}

08010b8e <_ZNK6tflite22MicroMutableOpResolverILj5EE15GetOpDataParserENS_15BuiltinOperatorE>:
  MicroOpResolver::BuiltinParseFunction GetOpDataParser(
 8010b8e:	b580      	push	{r7, lr}
 8010b90:	b084      	sub	sp, #16
 8010b92:	af00      	add	r7, sp, #0
 8010b94:	6078      	str	r0, [r7, #4]
 8010b96:	460b      	mov	r3, r1
 8010b98:	70fb      	strb	r3, [r7, #3]
    TFLITE_DCHECK(num_buitin_ops_ <= tOpCount);
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8010ba0:	2b05      	cmp	r3, #5
 8010ba2:	d901      	bls.n	8010ba8 <_ZNK6tflite22MicroMutableOpResolverILj5EE15GetOpDataParserENS_15BuiltinOperatorE+0x1a>
 8010ba4:	f014 ff4f 	bl	8025a46 <abort>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
 8010ba8:	2300      	movs	r3, #0
 8010baa:	60fb      	str	r3, [r7, #12]
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8010bb2:	68fa      	ldr	r2, [r7, #12]
 8010bb4:	429a      	cmp	r2, r3
 8010bb6:	d211      	bcs.n	8010bdc <_ZNK6tflite22MicroMutableOpResolverILj5EE15GetOpDataParserENS_15BuiltinOperatorE+0x4e>
      if (builtin_codes_[i] == op) return builtin_parsers_[i];
 8010bb8:	687a      	ldr	r2, [r7, #4]
 8010bba:	68fb      	ldr	r3, [r7, #12]
 8010bbc:	4413      	add	r3, r2
 8010bbe:	33a8      	adds	r3, #168	; 0xa8
 8010bc0:	781b      	ldrb	r3, [r3, #0]
 8010bc2:	78fa      	ldrb	r2, [r7, #3]
 8010bc4:	429a      	cmp	r2, r3
 8010bc6:	d105      	bne.n	8010bd4 <_ZNK6tflite22MicroMutableOpResolverILj5EE15GetOpDataParserENS_15BuiltinOperatorE+0x46>
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	68fa      	ldr	r2, [r7, #12]
 8010bcc:	322c      	adds	r2, #44	; 0x2c
 8010bce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010bd2:	e004      	b.n	8010bde <_ZNK6tflite22MicroMutableOpResolverILj5EE15GetOpDataParserENS_15BuiltinOperatorE+0x50>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
 8010bd4:	68fb      	ldr	r3, [r7, #12]
 8010bd6:	3301      	adds	r3, #1
 8010bd8:	60fb      	str	r3, [r7, #12]
 8010bda:	e7e7      	b.n	8010bac <_ZNK6tflite22MicroMutableOpResolverILj5EE15GetOpDataParserENS_15BuiltinOperatorE+0x1e>
    return nullptr;
 8010bdc:	2300      	movs	r3, #0
  }
 8010bde:	4618      	mov	r0, r3
 8010be0:	3710      	adds	r7, #16
 8010be2:	46bd      	mov	sp, r7
 8010be4:	bd80      	pop	{r7, pc}

08010be6 <_ZNSt14numeric_limitsIfE8infinityEv>:
	= bool(__FLT_HAS_DENORM__) ? denorm_present : denorm_absent;
      static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss
       = __glibcxx_float_has_denorm_loss;

      static _GLIBCXX_CONSTEXPR float
      infinity() _GLIBCXX_USE_NOEXCEPT { return __builtin_huge_valf(); }
 8010be6:	b480      	push	{r7}
 8010be8:	af00      	add	r7, sp, #0
 8010bea:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 8010bee:	ee07 3a90 	vmov	s15, r3
 8010bf2:	eeb0 0a67 	vmov.f32	s0, s15
 8010bf6:	46bd      	mov	sp, r7
 8010bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bfc:	4770      	bx	lr
	...

08010c00 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>:

// This function implements the same computation as the ARMv7 NEON VQRDMULH
// instruction.
template <>
inline std::int32_t SaturatingRoundingDoublingHighMul(std::int32_t a,
                                                      std::int32_t b) {
 8010c00:	b5b0      	push	{r4, r5, r7, lr}
 8010c02:	b08c      	sub	sp, #48	; 0x30
 8010c04:	af00      	add	r7, sp, #0
 8010c06:	6078      	str	r0, [r7, #4]
 8010c08:	6039      	str	r1, [r7, #0]
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 8010c0a:	687a      	ldr	r2, [r7, #4]
 8010c0c:	683b      	ldr	r3, [r7, #0]
 8010c0e:	429a      	cmp	r2, r3
 8010c10:	d107      	bne.n	8010c22 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x22>
 8010c12:	f7fa faa2 	bl	800b15a <_ZNSt14numeric_limitsIlE3minEv>
 8010c16:	4602      	mov	r2, r0
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	4293      	cmp	r3, r2
 8010c1c:	d101      	bne.n	8010c22 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x22>
 8010c1e:	2301      	movs	r3, #1
 8010c20:	e000      	b.n	8010c24 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x24>
 8010c22:	2300      	movs	r3, #0
 8010c24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  std::int64_t a_64(a);
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	461a      	mov	r2, r3
 8010c2c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8010c30:	e9c7 2308 	strd	r2, r3, [r7, #32]
  std::int64_t b_64(b);
 8010c34:	683b      	ldr	r3, [r7, #0]
 8010c36:	461a      	mov	r2, r3
 8010c38:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8010c3c:	e9c7 2306 	strd	r2, r3, [r7, #24]
  std::int64_t ab_64 = a_64 * b_64;
 8010c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c42:	69ba      	ldr	r2, [r7, #24]
 8010c44:	fb02 f203 	mul.w	r2, r2, r3
 8010c48:	69fb      	ldr	r3, [r7, #28]
 8010c4a:	6a39      	ldr	r1, [r7, #32]
 8010c4c:	fb01 f303 	mul.w	r3, r1, r3
 8010c50:	18d1      	adds	r1, r2, r3
 8010c52:	6a3a      	ldr	r2, [r7, #32]
 8010c54:	69bb      	ldr	r3, [r7, #24]
 8010c56:	fba2 2303 	umull	r2, r3, r2, r3
 8010c5a:	4419      	add	r1, r3
 8010c5c:	460b      	mov	r3, r1
 8010c5e:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8010c62:	e9c7 2304 	strd	r2, r3, [r7, #16]
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 8010c66:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8010c6a:	2a00      	cmp	r2, #0
 8010c6c:	f173 0300 	sbcs.w	r3, r3, #0
 8010c70:	db02      	blt.n	8010c78 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x78>
 8010c72:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010c76:	e000      	b.n	8010c7a <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x7a>
 8010c78:	4b18      	ldr	r3, [pc, #96]	; (8010cdc <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xdc>)
 8010c7a:	60fb      	str	r3, [r7, #12]
  std::int32_t ab_x2_high32 =
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 8010c7c:	68fb      	ldr	r3, [r7, #12]
 8010c7e:	4618      	mov	r0, r3
 8010c80:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8010c84:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8010c88:	1884      	adds	r4, r0, r2
 8010c8a:	eb41 0503 	adc.w	r5, r1, r3
 8010c8e:	4622      	mov	r2, r4
 8010c90:	462b      	mov	r3, r5
 8010c92:	2a00      	cmp	r2, #0
 8010c94:	f173 0100 	sbcs.w	r1, r3, #0
 8010c98:	da06      	bge.n	8010ca8 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xa8>
 8010c9a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8010c9e:	f04f 0100 	mov.w	r1, #0
 8010ca2:	1812      	adds	r2, r2, r0
 8010ca4:	eb41 0303 	adc.w	r3, r1, r3
 8010ca8:	f04f 0000 	mov.w	r0, #0
 8010cac:	f04f 0100 	mov.w	r1, #0
 8010cb0:	0fd0      	lsrs	r0, r2, #31
 8010cb2:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8010cb6:	17d9      	asrs	r1, r3, #31
 8010cb8:	4602      	mov	r2, r0
 8010cba:	460b      	mov	r3, r1
  std::int32_t ab_x2_high32 =
 8010cbc:	4613      	mov	r3, r2
 8010cbe:	60bb      	str	r3, [r7, #8]
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 8010cc0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d003      	beq.n	8010cd0 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xd0>
 8010cc8:	f7fa f83d 	bl	800ad46 <_ZNSt14numeric_limitsIlE3maxEv>
 8010ccc:	4603      	mov	r3, r0
 8010cce:	e000      	b.n	8010cd2 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xd2>
 8010cd0:	68bb      	ldr	r3, [r7, #8]
}
 8010cd2:	4618      	mov	r0, r3
 8010cd4:	3730      	adds	r7, #48	; 0x30
 8010cd6:	46bd      	mov	sp, r7
 8010cd8:	bdb0      	pop	{r4, r5, r7, pc}
 8010cda:	bf00      	nop
 8010cdc:	c0000001 	.word	0xc0000001

08010ce0 <_ZNK6tflite12RuntimeShape4DimsEi>:
  inline int32_t Dims(int i) const {
 8010ce0:	b580      	push	{r7, lr}
 8010ce2:	b082      	sub	sp, #8
 8010ce4:	af00      	add	r7, sp, #0
 8010ce6:	6078      	str	r0, [r7, #4]
 8010ce8:	6039      	str	r1, [r7, #0]
    TFLITE_DCHECK_GE(i, 0);
 8010cea:	683b      	ldr	r3, [r7, #0]
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	da01      	bge.n	8010cf4 <_ZNK6tflite12RuntimeShape4DimsEi+0x14>
 8010cf0:	f014 fea9 	bl	8025a46 <abort>
    TFLITE_DCHECK_LT(i, size_);
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	681b      	ldr	r3, [r3, #0]
 8010cf8:	683a      	ldr	r2, [r7, #0]
 8010cfa:	429a      	cmp	r2, r3
 8010cfc:	db01      	blt.n	8010d02 <_ZNK6tflite12RuntimeShape4DimsEi+0x22>
 8010cfe:	f014 fea2 	bl	8025a46 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	681b      	ldr	r3, [r3, #0]
 8010d06:	2b05      	cmp	r3, #5
 8010d08:	dd06      	ble.n	8010d18 <_ZNK6tflite12RuntimeShape4DimsEi+0x38>
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	685a      	ldr	r2, [r3, #4]
 8010d0e:	683b      	ldr	r3, [r7, #0]
 8010d10:	009b      	lsls	r3, r3, #2
 8010d12:	4413      	add	r3, r2
 8010d14:	681b      	ldr	r3, [r3, #0]
 8010d16:	e004      	b.n	8010d22 <_ZNK6tflite12RuntimeShape4DimsEi+0x42>
 8010d18:	687a      	ldr	r2, [r7, #4]
 8010d1a:	683b      	ldr	r3, [r7, #0]
 8010d1c:	009b      	lsls	r3, r3, #2
 8010d1e:	4413      	add	r3, r2
 8010d20:	685b      	ldr	r3, [r3, #4]
  }
 8010d22:	4618      	mov	r0, r3
 8010d24:	3708      	adds	r7, #8
 8010d26:	46bd      	mov	sp, r7
 8010d28:	bd80      	pop	{r7, pc}

08010d2a <_ZNK6tflite12RuntimeShape8DimsDataEv>:
  inline const int32_t* DimsData() const {
 8010d2a:	b480      	push	{r7}
 8010d2c:	b083      	sub	sp, #12
 8010d2e:	af00      	add	r7, sp, #0
 8010d30:	6078      	str	r0, [r7, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	681b      	ldr	r3, [r3, #0]
 8010d36:	2b05      	cmp	r3, #5
 8010d38:	dd02      	ble.n	8010d40 <_ZNK6tflite12RuntimeShape8DimsDataEv+0x16>
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	685b      	ldr	r3, [r3, #4]
 8010d3e:	e001      	b.n	8010d44 <_ZNK6tflite12RuntimeShape8DimsDataEv+0x1a>
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	3304      	adds	r3, #4
  }
 8010d44:	4618      	mov	r0, r3
 8010d46:	370c      	adds	r7, #12
 8010d48:	46bd      	mov	sp, r7
 8010d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d4e:	4770      	bx	lr

08010d50 <_ZNK6tflite12RuntimeShape8FlatSizeEv>:
    BuildFrom<const std::initializer_list<int>>(init_list);
  }

  // Returns the total count of elements, that is the size when flattened into a
  // vector.
  inline int FlatSize() const {
 8010d50:	b580      	push	{r7, lr}
 8010d52:	b086      	sub	sp, #24
 8010d54:	af00      	add	r7, sp, #0
 8010d56:	6078      	str	r0, [r7, #4]
    int buffer_size = 1;
 8010d58:	2301      	movs	r3, #1
 8010d5a:	617b      	str	r3, [r7, #20]
    const int* dims_data = reinterpret_cast<const int*>(DimsData());
 8010d5c:	6878      	ldr	r0, [r7, #4]
 8010d5e:	f7ff ffe4 	bl	8010d2a <_ZNK6tflite12RuntimeShape8DimsDataEv>
 8010d62:	60f8      	str	r0, [r7, #12]
    for (int i = 0; i < size_; i++) {
 8010d64:	2300      	movs	r3, #0
 8010d66:	613b      	str	r3, [r7, #16]
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	693a      	ldr	r2, [r7, #16]
 8010d6e:	429a      	cmp	r2, r3
 8010d70:	da0c      	bge.n	8010d8c <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x3c>
      buffer_size *= dims_data[i];
 8010d72:	693b      	ldr	r3, [r7, #16]
 8010d74:	009b      	lsls	r3, r3, #2
 8010d76:	68fa      	ldr	r2, [r7, #12]
 8010d78:	4413      	add	r3, r2
 8010d7a:	681a      	ldr	r2, [r3, #0]
 8010d7c:	697b      	ldr	r3, [r7, #20]
 8010d7e:	fb02 f303 	mul.w	r3, r2, r3
 8010d82:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < size_; i++) {
 8010d84:	693b      	ldr	r3, [r7, #16]
 8010d86:	3301      	adds	r3, #1
 8010d88:	613b      	str	r3, [r7, #16]
 8010d8a:	e7ed      	b.n	8010d68 <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x18>
    }
    return buffer_size;
 8010d8c:	697b      	ldr	r3, [r7, #20]
  }
 8010d8e:	4618      	mov	r0, r3
 8010d90:	3718      	adds	r7, #24
 8010d92:	46bd      	mov	sp, r7
 8010d94:	bd80      	pop	{r7, pc}

08010d96 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>:
}

// Flat size calculation, checking that dimensions match with one or more other
// arrays.
inline int MatchingFlatSize(const RuntimeShape& shape,
                            const RuntimeShape& check_shape_0) {
 8010d96:	b590      	push	{r4, r7, lr}
 8010d98:	b085      	sub	sp, #20
 8010d9a:	af00      	add	r7, sp, #0
 8010d9c:	6078      	str	r0, [r7, #4]
 8010d9e:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
 8010da0:	6878      	ldr	r0, [r7, #4]
 8010da2:	f7fb f880 	bl	800bea6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8010da6:	4604      	mov	r4, r0
 8010da8:	6838      	ldr	r0, [r7, #0]
 8010daa:	f7fb f87c 	bl	800bea6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8010dae:	4603      	mov	r3, r0
 8010db0:	429c      	cmp	r4, r3
 8010db2:	d001      	beq.n	8010db8 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x22>
 8010db4:	f014 fe47 	bl	8025a46 <abort>
  const int dims_count = shape.DimensionsCount();
 8010db8:	6878      	ldr	r0, [r7, #4]
 8010dba:	f7fb f874 	bl	800bea6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8010dbe:	60b8      	str	r0, [r7, #8]
  for (int i = 0; i < dims_count; ++i) {
 8010dc0:	2300      	movs	r3, #0
 8010dc2:	60fb      	str	r3, [r7, #12]
 8010dc4:	68fa      	ldr	r2, [r7, #12]
 8010dc6:	68bb      	ldr	r3, [r7, #8]
 8010dc8:	429a      	cmp	r2, r3
 8010dca:	da11      	bge.n	8010df0 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x5a>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 8010dcc:	68f9      	ldr	r1, [r7, #12]
 8010dce:	6878      	ldr	r0, [r7, #4]
 8010dd0:	f7ff ff86 	bl	8010ce0 <_ZNK6tflite12RuntimeShape4DimsEi>
 8010dd4:	4604      	mov	r4, r0
 8010dd6:	68f9      	ldr	r1, [r7, #12]
 8010dd8:	6838      	ldr	r0, [r7, #0]
 8010dda:	f7ff ff81 	bl	8010ce0 <_ZNK6tflite12RuntimeShape4DimsEi>
 8010dde:	4603      	mov	r3, r0
 8010de0:	429c      	cmp	r4, r3
 8010de2:	d001      	beq.n	8010de8 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x52>
 8010de4:	f014 fe2f 	bl	8025a46 <abort>
  for (int i = 0; i < dims_count; ++i) {
 8010de8:	68fb      	ldr	r3, [r7, #12]
 8010dea:	3301      	adds	r3, #1
 8010dec:	60fb      	str	r3, [r7, #12]
 8010dee:	e7e9      	b.n	8010dc4 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x2e>
  }
  return shape.FlatSize();
 8010df0:	6878      	ldr	r0, [r7, #4]
 8010df2:	f7ff ffad 	bl	8010d50 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 8010df6:	4603      	mov	r3, r0
}
 8010df8:	4618      	mov	r0, r3
 8010dfa:	3714      	adds	r7, #20
 8010dfc:	46bd      	mov	sp, r7
 8010dfe:	bd90      	pop	{r4, r7, pc}

08010e00 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>:
                                           quantized_multiplier);
}

inline int32_t MultiplyByQuantizedMultiplier(int32_t x,
                                             int32_t quantized_multiplier,
                                             int shift) {
 8010e00:	b580      	push	{r7, lr}
 8010e02:	b086      	sub	sp, #24
 8010e04:	af00      	add	r7, sp, #0
 8010e06:	60f8      	str	r0, [r7, #12]
 8010e08:	60b9      	str	r1, [r7, #8]
 8010e0a:	607a      	str	r2, [r7, #4]
  using gemmlowp::RoundingDivideByPOT;
  using gemmlowp::SaturatingRoundingDoublingHighMul;
  int left_shift = shift > 0 ? shift : 0;
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010e12:	617b      	str	r3, [r7, #20]
  int right_shift = shift > 0 ? 0 : -shift;
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	dc02      	bgt.n	8010e20 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x20>
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	425b      	negs	r3, r3
 8010e1e:	e000      	b.n	8010e22 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x22>
 8010e20:	2300      	movs	r3, #0
 8010e22:	613b      	str	r3, [r7, #16]
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
 8010e24:	68fa      	ldr	r2, [r7, #12]
 8010e26:	697b      	ldr	r3, [r7, #20]
 8010e28:	fa02 f303 	lsl.w	r3, r2, r3
 8010e2c:	68b9      	ldr	r1, [r7, #8]
 8010e2e:	4618      	mov	r0, r3
 8010e30:	f7ff fee6 	bl	8010c00 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 8010e34:	4603      	mov	r3, r0
 8010e36:	6939      	ldr	r1, [r7, #16]
 8010e38:	4618      	mov	r0, r3
 8010e3a:	f000 fb4b 	bl	80114d4 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8010e3e:	4603      	mov	r3, r0
                                 x * (1 << left_shift), quantized_multiplier),
                             right_shift);
}
 8010e40:	4618      	mov	r0, r3
 8010e42:	3718      	adds	r7, #24
 8010e44:	46bd      	mov	sp, r7
 8010e46:	bd80      	pop	{r7, pc}

08010e48 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns a mutable tensor for a given input index. is_variable must be checked
// during prepare when the full TfLiteTensor is available.
inline TfLiteEvalTensor* GetMutableEvalInput(const TfLiteContext* context,
                                             const TfLiteNode* node,
                                             int index) {
 8010e48:	b580      	push	{r7, lr}
 8010e4a:	b084      	sub	sp, #16
 8010e4c:	af00      	add	r7, sp, #0
 8010e4e:	60f8      	str	r0, [r7, #12]
 8010e50:	60b9      	str	r1, [r7, #8]
 8010e52:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context != nullptr);
 8010e54:	68fb      	ldr	r3, [r7, #12]
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d101      	bne.n	8010e5e <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x16>
 8010e5a:	f014 fdf4 	bl	8025a46 <abort>
  TFLITE_DCHECK(node != nullptr);
 8010e5e:	68bb      	ldr	r3, [r7, #8]
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d101      	bne.n	8010e68 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x20>
 8010e64:	f014 fdef 	bl	8025a46 <abort>
  return context->GetEvalTensor(context, node->inputs->data[index]);
 8010e68:	68fb      	ldr	r3, [r7, #12]
 8010e6a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010e6c:	68bb      	ldr	r3, [r7, #8]
 8010e6e:	6819      	ldr	r1, [r3, #0]
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	009b      	lsls	r3, r3, #2
 8010e74:	440b      	add	r3, r1
 8010e76:	685b      	ldr	r3, [r3, #4]
 8010e78:	4619      	mov	r1, r3
 8010e7a:	68f8      	ldr	r0, [r7, #12]
 8010e7c:	4790      	blx	r2
 8010e7e:	4603      	mov	r3, r0
}
 8010e80:	4618      	mov	r0, r3
 8010e82:	3710      	adds	r7, #16
 8010e84:	46bd      	mov	sp, r7
 8010e86:	bd80      	pop	{r7, pc}

08010e88 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given input index in a node.
inline const TfLiteEvalTensor* GetEvalInput(const TfLiteContext* context,
                                            const TfLiteNode* node, int index) {
 8010e88:	b580      	push	{r7, lr}
 8010e8a:	b084      	sub	sp, #16
 8010e8c:	af00      	add	r7, sp, #0
 8010e8e:	60f8      	str	r0, [r7, #12]
 8010e90:	60b9      	str	r1, [r7, #8]
 8010e92:	607a      	str	r2, [r7, #4]
  return GetMutableEvalInput(context, node, index);
 8010e94:	687a      	ldr	r2, [r7, #4]
 8010e96:	68b9      	ldr	r1, [r7, #8]
 8010e98:	68f8      	ldr	r0, [r7, #12]
 8010e9a:	f7ff ffd5 	bl	8010e48 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8010e9e:	4603      	mov	r3, r0
}
 8010ea0:	4618      	mov	r0, r3
 8010ea2:	3710      	adds	r7, #16
 8010ea4:	46bd      	mov	sp, r7
 8010ea6:	bd80      	pop	{r7, pc}

08010ea8 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given output index in a node.
inline TfLiteEvalTensor* GetEvalOutput(const TfLiteContext* context,
                                       const TfLiteNode* node, int index) {
 8010ea8:	b580      	push	{r7, lr}
 8010eaa:	b084      	sub	sp, #16
 8010eac:	af00      	add	r7, sp, #0
 8010eae:	60f8      	str	r0, [r7, #12]
 8010eb0:	60b9      	str	r1, [r7, #8]
 8010eb2:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context != nullptr);
 8010eb4:	68fb      	ldr	r3, [r7, #12]
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d101      	bne.n	8010ebe <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x16>
 8010eba:	f014 fdc4 	bl	8025a46 <abort>
  TFLITE_DCHECK(node != nullptr);
 8010ebe:	68bb      	ldr	r3, [r7, #8]
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d101      	bne.n	8010ec8 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x20>
 8010ec4:	f014 fdbf 	bl	8025a46 <abort>
  return context->GetEvalTensor(context, node->outputs->data[index]);
 8010ec8:	68fb      	ldr	r3, [r7, #12]
 8010eca:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010ecc:	68bb      	ldr	r3, [r7, #8]
 8010ece:	6859      	ldr	r1, [r3, #4]
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	009b      	lsls	r3, r3, #2
 8010ed4:	440b      	add	r3, r1
 8010ed6:	685b      	ldr	r3, [r3, #4]
 8010ed8:	4619      	mov	r1, r3
 8010eda:	68f8      	ldr	r0, [r7, #12]
 8010edc:	4790      	blx	r2
 8010ede:	4603      	mov	r3, r0
}
 8010ee0:	4618      	mov	r0, r3
 8010ee2:	3710      	adds	r7, #16
 8010ee4:	46bd      	mov	sp, r7
 8010ee6:	bd80      	pop	{r7, pc}

08010ee8 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf>:
  data->params.input_offset = input->params.zero_point;
  data->params.output_offset = output->params.zero_point;
}

inline void ReluFloat(const RuntimeShape& input_shape, const float* input_data,
                      const RuntimeShape& output_shape, float* output_data) {
 8010ee8:	b580      	push	{r7, lr}
 8010eea:	b08a      	sub	sp, #40	; 0x28
 8010eec:	af00      	add	r7, sp, #0
 8010eee:	60f8      	str	r0, [r7, #12]
 8010ef0:	60b9      	str	r1, [r7, #8]
 8010ef2:	607a      	str	r2, [r7, #4]
 8010ef4:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 8010ef6:	6879      	ldr	r1, [r7, #4]
 8010ef8:	68f8      	ldr	r0, [r7, #12]
 8010efa:	f7ff ff4c 	bl	8010d96 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 8010efe:	6238      	str	r0, [r7, #32]
  for (int i = 0; i < flat_size; ++i) {
 8010f00:	2300      	movs	r3, #0
 8010f02:	627b      	str	r3, [r7, #36]	; 0x24
 8010f04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010f06:	6a3b      	ldr	r3, [r7, #32]
 8010f08:	429a      	cmp	r2, r3
 8010f0a:	da1d      	bge.n	8010f48 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x60>
    const float val = input_data[i];
 8010f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f0e:	009b      	lsls	r3, r3, #2
 8010f10:	68ba      	ldr	r2, [r7, #8]
 8010f12:	4413      	add	r3, r2
 8010f14:	681b      	ldr	r3, [r3, #0]
 8010f16:	61fb      	str	r3, [r7, #28]
    const float lower = 0.0f;
 8010f18:	f04f 0300 	mov.w	r3, #0
 8010f1c:	61bb      	str	r3, [r7, #24]
    const float clamped = val < lower ? lower : val;
 8010f1e:	edd7 7a07 	vldr	s15, [r7, #28]
 8010f22:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010f26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f2a:	d501      	bpl.n	8010f30 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x48>
 8010f2c:	69bb      	ldr	r3, [r7, #24]
 8010f2e:	e000      	b.n	8010f32 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x4a>
 8010f30:	69fb      	ldr	r3, [r7, #28]
 8010f32:	617b      	str	r3, [r7, #20]
    output_data[i] = clamped;
 8010f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f36:	009b      	lsls	r3, r3, #2
 8010f38:	683a      	ldr	r2, [r7, #0]
 8010f3a:	4413      	add	r3, r2
 8010f3c:	697a      	ldr	r2, [r7, #20]
 8010f3e:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 8010f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f42:	3301      	adds	r3, #1
 8010f44:	627b      	str	r3, [r7, #36]	; 0x24
 8010f46:	e7dd      	b.n	8010f04 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x1c>
  }
}
 8010f48:	bf00      	nop
 8010f4a:	3728      	adds	r7, #40	; 0x28
 8010f4c:	46bd      	mov	sp, r7
 8010f4e:	bd80      	pop	{r7, pc}

08010f50 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf>:

inline void Relu6Float(const RuntimeShape& input_shape, const float* input_data,
                       const RuntimeShape& output_shape, float* output_data) {
 8010f50:	b580      	push	{r7, lr}
 8010f52:	b08a      	sub	sp, #40	; 0x28
 8010f54:	af00      	add	r7, sp, #0
 8010f56:	60f8      	str	r0, [r7, #12]
 8010f58:	60b9      	str	r1, [r7, #8]
 8010f5a:	607a      	str	r2, [r7, #4]
 8010f5c:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 8010f5e:	6879      	ldr	r1, [r7, #4]
 8010f60:	68f8      	ldr	r0, [r7, #12]
 8010f62:	f7ff ff18 	bl	8010d96 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 8010f66:	6238      	str	r0, [r7, #32]
  for (int i = 0; i < flat_size; ++i) {
 8010f68:	2300      	movs	r3, #0
 8010f6a:	627b      	str	r3, [r7, #36]	; 0x24
 8010f6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010f6e:	6a3b      	ldr	r3, [r7, #32]
 8010f70:	429a      	cmp	r2, r3
 8010f72:	da2a      	bge.n	8010fca <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x7a>
    const float val = input_data[i];
 8010f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f76:	009b      	lsls	r3, r3, #2
 8010f78:	68ba      	ldr	r2, [r7, #8]
 8010f7a:	4413      	add	r3, r2
 8010f7c:	681b      	ldr	r3, [r3, #0]
 8010f7e:	61fb      	str	r3, [r7, #28]
    const float upper = 6.0f;
 8010f80:	4b14      	ldr	r3, [pc, #80]	; (8010fd4 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x84>)
 8010f82:	61bb      	str	r3, [r7, #24]
    const float lower = 0.0f;
 8010f84:	f04f 0300 	mov.w	r3, #0
 8010f88:	617b      	str	r3, [r7, #20]
    const float clamped = val > upper ? upper : val < lower ? lower : val;
 8010f8a:	edd7 7a07 	vldr	s15, [r7, #28]
 8010f8e:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8010f92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010f96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f9a:	dd01      	ble.n	8010fa0 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x50>
 8010f9c:	69bb      	ldr	r3, [r7, #24]
 8010f9e:	e009      	b.n	8010fb4 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x64>
 8010fa0:	edd7 7a07 	vldr	s15, [r7, #28]
 8010fa4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010fa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fac:	d501      	bpl.n	8010fb2 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x62>
 8010fae:	697b      	ldr	r3, [r7, #20]
 8010fb0:	e000      	b.n	8010fb4 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x64>
 8010fb2:	69fb      	ldr	r3, [r7, #28]
 8010fb4:	613b      	str	r3, [r7, #16]
    output_data[i] = clamped;
 8010fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fb8:	009b      	lsls	r3, r3, #2
 8010fba:	683a      	ldr	r2, [r7, #0]
 8010fbc:	4413      	add	r3, r2
 8010fbe:	693a      	ldr	r2, [r7, #16]
 8010fc0:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 8010fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fc4:	3301      	adds	r3, #1
 8010fc6:	627b      	str	r3, [r7, #36]	; 0x24
 8010fc8:	e7d0      	b.n	8010f6c <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x1c>
  }
}
 8010fca:	bf00      	nop
 8010fcc:	3728      	adds	r7, #40	; 0x28
 8010fce:	46bd      	mov	sp, r7
 8010fd0:	bd80      	pop	{r7, pc}
 8010fd2:	bf00      	nop
 8010fd4:	40c00000 	.word	0x40c00000

08010fd8 <_ZN6tflite3ops5micro11activations8ReluInitEP13TfLiteContextPKcj>:
    const Q clamped = val > upper ? upper : val < lower ? lower : val;
    output_data[i] = clamped;
  }
}

void* ReluInit(TfLiteContext* context, const char* buffer, size_t length) {
 8010fd8:	b580      	push	{r7, lr}
 8010fda:	b084      	sub	sp, #16
 8010fdc:	af00      	add	r7, sp, #0
 8010fde:	60f8      	str	r0, [r7, #12]
 8010fe0:	60b9      	str	r1, [r7, #8]
 8010fe2:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 8010fe4:	68fb      	ldr	r3, [r7, #12]
 8010fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d101      	bne.n	8010ff0 <_ZN6tflite3ops5micro11activations8ReluInitEP13TfLiteContextPKcj+0x18>
 8010fec:	f014 fd2b 	bl	8025a46 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(ReluOpData));
 8010ff0:	68fb      	ldr	r3, [r7, #12]
 8010ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ff4:	211c      	movs	r1, #28
 8010ff6:	68f8      	ldr	r0, [r7, #12]
 8010ff8:	4798      	blx	r3
 8010ffa:	4603      	mov	r3, r0
}
 8010ffc:	4618      	mov	r0, r3
 8010ffe:	3710      	adds	r7, #16
 8011000:	46bd      	mov	sp, r7
 8011002:	bd80      	pop	{r7, pc}

08011004 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus ReluPrepare(TfLiteContext* context, TfLiteNode* node) {
 8011004:	b590      	push	{r4, r7, lr}
 8011006:	b089      	sub	sp, #36	; 0x24
 8011008:	af02      	add	r7, sp, #8
 801100a:	6078      	str	r0, [r7, #4]
 801100c:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 801100e:	683b      	ldr	r3, [r7, #0]
 8011010:	691b      	ldr	r3, [r3, #16]
 8011012:	2b00      	cmp	r3, #0
 8011014:	d101      	bne.n	801101a <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x16>
 8011016:	f014 fd16 	bl	8025a46 <abort>
  ReluOpData* data = static_cast<ReluOpData*>(node->user_data);
 801101a:	683b      	ldr	r3, [r7, #0]
 801101c:	691b      	ldr	r3, [r3, #16]
 801101e:	617b      	str	r3, [r7, #20]

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 8011020:	2200      	movs	r2, #0
 8011022:	6839      	ldr	r1, [r7, #0]
 8011024:	6878      	ldr	r0, [r7, #4]
 8011026:	f7fa f975 	bl	800b314 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 801102a:	6138      	str	r0, [r7, #16]
  TF_LITE_ENSURE(context, input != nullptr);
 801102c:	693b      	ldr	r3, [r7, #16]
 801102e:	2b00      	cmp	r3, #0
 8011030:	d10a      	bne.n	8011048 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x44>
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	695c      	ldr	r4, [r3, #20]
 8011036:	4b1a      	ldr	r3, [pc, #104]	; (80110a0 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x9c>)
 8011038:	9300      	str	r3, [sp, #0]
 801103a:	238e      	movs	r3, #142	; 0x8e
 801103c:	4a19      	ldr	r2, [pc, #100]	; (80110a4 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa0>)
 801103e:	491a      	ldr	r1, [pc, #104]	; (80110a8 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa4>)
 8011040:	6878      	ldr	r0, [r7, #4]
 8011042:	47a0      	blx	r4
 8011044:	2301      	movs	r3, #1
 8011046:	e027      	b.n	8011098 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x94>
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 8011048:	2200      	movs	r2, #0
 801104a:	6839      	ldr	r1, [r7, #0]
 801104c:	6878      	ldr	r0, [r7, #4]
 801104e:	f7fa f971 	bl	800b334 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 8011052:	60f8      	str	r0, [r7, #12]
  TF_LITE_ENSURE(context, output != nullptr);
 8011054:	68fb      	ldr	r3, [r7, #12]
 8011056:	2b00      	cmp	r3, #0
 8011058:	d10a      	bne.n	8011070 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x6c>
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	695c      	ldr	r4, [r3, #20]
 801105e:	4b13      	ldr	r3, [pc, #76]	; (80110ac <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa8>)
 8011060:	9300      	str	r3, [sp, #0]
 8011062:	2390      	movs	r3, #144	; 0x90
 8011064:	4a0f      	ldr	r2, [pc, #60]	; (80110a4 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa0>)
 8011066:	4910      	ldr	r1, [pc, #64]	; (80110a8 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa4>)
 8011068:	6878      	ldr	r0, [r7, #4]
 801106a:	47a0      	blx	r4
 801106c:	2301      	movs	r3, #1
 801106e:	e013      	b.n	8011098 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x94>

  if (input->type == kTfLiteInt8) {
 8011070:	693b      	ldr	r3, [r7, #16]
 8011072:	781b      	ldrb	r3, [r3, #0]
 8011074:	2b09      	cmp	r3, #9
 8011076:	d105      	bne.n	8011084 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x80>
    CalculateReluOpData<int8_t>(input, output, data);
 8011078:	697a      	ldr	r2, [r7, #20]
 801107a:	68f9      	ldr	r1, [r7, #12]
 801107c:	6938      	ldr	r0, [r7, #16]
 801107e:	f000 fa9d 	bl	80115bc <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>
 8011082:	e008      	b.n	8011096 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x92>
  } else if (input->type == kTfLiteUInt8) {
 8011084:	693b      	ldr	r3, [r7, #16]
 8011086:	781b      	ldrb	r3, [r3, #0]
 8011088:	2b03      	cmp	r3, #3
 801108a:	d104      	bne.n	8011096 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x92>
    CalculateReluOpData<uint8_t>(input, output, data);
 801108c:	697a      	ldr	r2, [r7, #20]
 801108e:	68f9      	ldr	r1, [r7, #12]
 8011090:	6938      	ldr	r0, [r7, #16]
 8011092:	f000 fb35 	bl	8011700 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>
  }

  return kTfLiteOk;
 8011096:	2300      	movs	r3, #0
}
 8011098:	4618      	mov	r0, r3
 801109a:	371c      	adds	r7, #28
 801109c:	46bd      	mov	sp, r7
 801109e:	bd90      	pop	{r4, r7, pc}
 80110a0:	0802af68 	.word	0x0802af68
 80110a4:	0802af10 	.word	0x0802af10
 80110a8:	0802af50 	.word	0x0802af50
 80110ac:	0802af7c 	.word	0x0802af7c

080110b0 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus ReluEval(TfLiteContext* context, TfLiteNode* node) {
 80110b0:	b590      	push	{r4, r7, lr}
 80110b2:	b0ad      	sub	sp, #180	; 0xb4
 80110b4:	af02      	add	r7, sp, #8
 80110b6:	6078      	str	r0, [r7, #4]
 80110b8:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 80110ba:	683b      	ldr	r3, [r7, #0]
 80110bc:	691b      	ldr	r3, [r3, #16]
 80110be:	2b00      	cmp	r3, #0
 80110c0:	d101      	bne.n	80110c6 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x16>
 80110c2:	f014 fcc0 	bl	8025a46 <abort>
  const ReluOpData& data = *(static_cast<const ReluOpData*>(node->user_data));
 80110c6:	683b      	ldr	r3, [r7, #0]
 80110c8:	691b      	ldr	r3, [r3, #16]
 80110ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
 80110ce:	2200      	movs	r2, #0
 80110d0:	6839      	ldr	r1, [r7, #0]
 80110d2:	6878      	ldr	r0, [r7, #4]
 80110d4:	f7ff fed8 	bl	8010e88 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 80110d8:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 80110dc:	2200      	movs	r2, #0
 80110de:	6839      	ldr	r1, [r7, #0]
 80110e0:	6878      	ldr	r0, [r7, #4]
 80110e2:	f7ff fee1 	bl	8010ea8 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 80110e6:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

  switch (input->type) {
 80110ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80110ee:	7a1b      	ldrb	r3, [r3, #8]
 80110f0:	2b09      	cmp	r3, #9
 80110f2:	d032      	beq.n	801115a <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0xaa>
 80110f4:	2b09      	cmp	r3, #9
 80110f6:	f300 808c 	bgt.w	8011212 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x162>
 80110fa:	2b01      	cmp	r3, #1
 80110fc:	d002      	beq.n	8011104 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x54>
 80110fe:	2b03      	cmp	r3, #3
 8011100:	d059      	beq.n	80111b6 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x106>
 8011102:	e086      	b.n	8011212 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x162>
    case kTfLiteFloat32: {
      ReluFloat(tflite::micro::GetTensorShape(input),
 8011104:	f107 030c 	add.w	r3, r7, #12
 8011108:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 801110c:	4618      	mov	r0, r3
 801110e:	f001 fb66 	bl	80127de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 8011112:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8011116:	f000 fb95 	bl	8011844 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 801111a:	4604      	mov	r4, r0
                tflite::micro::GetTensorData<float>(input),
                tflite::micro::GetTensorShape(output),
 801111c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011120:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8011124:	4618      	mov	r0, r3
 8011126:	f001 fb5a 	bl	80127de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      ReluFloat(tflite::micro::GetTensorShape(input),
 801112a:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 801112e:	f000 fb98 	bl	8011862 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 8011132:	4603      	mov	r3, r0
 8011134:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8011138:	f107 000c 	add.w	r0, r7, #12
 801113c:	4621      	mov	r1, r4
 801113e:	f7ff fed3 	bl	8010ee8 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf>
                tflite::micro::GetTensorShape(output),
 8011142:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011146:	4618      	mov	r0, r3
 8011148:	f7fa fe97 	bl	800be7a <_ZN6tflite12RuntimeShapeD1Ev>
      ReluFloat(tflite::micro::GetTensorShape(input),
 801114c:	f107 030c 	add.w	r3, r7, #12
 8011150:	4618      	mov	r0, r3
 8011152:	f7fa fe92 	bl	800be7a <_ZN6tflite12RuntimeShapeD1Ev>
                tflite::micro::GetTensorData<float>(output));

      return kTfLiteOk;
 8011156:	2300      	movs	r3, #0
 8011158:	e069      	b.n	801122e <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x17e>
    }
    case kTfLiteInt8: {
      ReluQuantized<int8_t>(data, tflite::micro::GetTensorShape(input),
 801115a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801115e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8011162:	4618      	mov	r0, r3
 8011164:	f001 fb3b 	bl	80127de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                            tflite::micro::GetTensorShape(output),
 8011168:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801116c:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8011170:	4618      	mov	r0, r3
 8011172:	f001 fb34 	bl	80127de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      ReluQuantized<int8_t>(data, tflite::micro::GetTensorShape(input),
 8011176:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 801117a:	f000 fb83 	bl	8011884 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 801117e:	4604      	mov	r4, r0
 8011180:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8011184:	f000 fb8d 	bl	80118a2 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 8011188:	4603      	mov	r3, r0
 801118a:	f107 0254 	add.w	r2, r7, #84	; 0x54
 801118e:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8011192:	9300      	str	r3, [sp, #0]
 8011194:	4623      	mov	r3, r4
 8011196:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 801119a:	f000 fb93 	bl	80118c4 <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>
                            tflite::micro::GetTensorShape(output),
 801119e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80111a2:	4618      	mov	r0, r3
 80111a4:	f7fa fe69 	bl	800be7a <_ZN6tflite12RuntimeShapeD1Ev>
      ReluQuantized<int8_t>(data, tflite::micro::GetTensorShape(input),
 80111a8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80111ac:	4618      	mov	r0, r3
 80111ae:	f7fa fe64 	bl	800be7a <_ZN6tflite12RuntimeShapeD1Ev>
                            tflite::micro::GetTensorData<int8_t>(input),
                            tflite::micro::GetTensorData<int8_t>(output));
      return kTfLiteOk;
 80111b2:	2300      	movs	r3, #0
 80111b4:	e03b      	b.n	801122e <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x17e>
    }
    case kTfLiteUInt8: {
      ReluQuantized<uint8_t>(data, tflite::micro::GetTensorShape(input),
 80111b6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80111ba:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80111be:	4618      	mov	r0, r3
 80111c0:	f001 fb0d 	bl	80127de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                             tflite::micro::GetTensorShape(output),
 80111c4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80111c8:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 80111cc:	4618      	mov	r0, r3
 80111ce:	f001 fb06 	bl	80127de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      ReluQuantized<uint8_t>(data, tflite::micro::GetTensorShape(input),
 80111d2:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80111d6:	f000 fbc1 	bl	801195c <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 80111da:	4604      	mov	r4, r0
 80111dc:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80111e0:	f000 fbcb 	bl	801197a <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 80111e4:	4603      	mov	r3, r0
 80111e6:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80111ea:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80111ee:	9300      	str	r3, [sp, #0]
 80111f0:	4623      	mov	r3, r4
 80111f2:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 80111f6:	f000 fbd1 	bl	801199c <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>
                             tflite::micro::GetTensorShape(output),
 80111fa:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80111fe:	4618      	mov	r0, r3
 8011200:	f7fa fe3b 	bl	800be7a <_ZN6tflite12RuntimeShapeD1Ev>
      ReluQuantized<uint8_t>(data, tflite::micro::GetTensorShape(input),
 8011204:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8011208:	4618      	mov	r0, r3
 801120a:	f7fa fe36 	bl	800be7a <_ZN6tflite12RuntimeShapeD1Ev>
                             tflite::micro::GetTensorData<uint8_t>(input),
                             tflite::micro::GetTensorData<uint8_t>(output));
      return kTfLiteOk;
 801120e:	2300      	movs	r3, #0
 8011210:	e00d      	b.n	801122e <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x17e>
    }
    default: {
      TF_LITE_KERNEL_LOG(context, "Only float32 is supported currently, got %s",
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	695c      	ldr	r4, [r3, #20]
 8011216:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801121a:	7a1b      	ldrb	r3, [r3, #8]
 801121c:	4618      	mov	r0, r3
 801121e:	f7f7 fa17 	bl	8008650 <TfLiteTypeGetName>
 8011222:	4603      	mov	r3, r0
 8011224:	461a      	mov	r2, r3
 8011226:	4904      	ldr	r1, [pc, #16]	; (8011238 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x188>)
 8011228:	6878      	ldr	r0, [r7, #4]
 801122a:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
 801122c:	2301      	movs	r3, #1
    }
  }
}
 801122e:	4618      	mov	r0, r3
 8011230:	37ac      	adds	r7, #172	; 0xac
 8011232:	46bd      	mov	sp, r7
 8011234:	bd90      	pop	{r4, r7, pc}
 8011236:	bf00      	nop
 8011238:	0802af90 	.word	0x0802af90

0801123c <_ZN6tflite3ops5micro11activations9Relu6InitEP13TfLiteContextPKcj>:

void* Relu6Init(TfLiteContext* context, const char* buffer, size_t length) {
 801123c:	b580      	push	{r7, lr}
 801123e:	b084      	sub	sp, #16
 8011240:	af00      	add	r7, sp, #0
 8011242:	60f8      	str	r0, [r7, #12]
 8011244:	60b9      	str	r1, [r7, #8]
 8011246:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 8011248:	68fb      	ldr	r3, [r7, #12]
 801124a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801124c:	2b00      	cmp	r3, #0
 801124e:	d101      	bne.n	8011254 <_ZN6tflite3ops5micro11activations9Relu6InitEP13TfLiteContextPKcj+0x18>
 8011250:	f014 fbf9 	bl	8025a46 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(Relu6OpData));
 8011254:	68fb      	ldr	r3, [r7, #12]
 8011256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011258:	2104      	movs	r1, #4
 801125a:	68f8      	ldr	r0, [r7, #12]
 801125c:	4798      	blx	r3
 801125e:	4603      	mov	r3, r0
}
 8011260:	4618      	mov	r0, r3
 8011262:	3710      	adds	r7, #16
 8011264:	46bd      	mov	sp, r7
 8011266:	bd80      	pop	{r7, pc}

08011268 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Relu6Prepare(TfLiteContext* context, TfLiteNode* node) {
 8011268:	b590      	push	{r4, r7, lr}
 801126a:	b087      	sub	sp, #28
 801126c:	af02      	add	r7, sp, #8
 801126e:	6078      	str	r0, [r7, #4]
 8011270:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 8011272:	683b      	ldr	r3, [r7, #0]
 8011274:	691b      	ldr	r3, [r3, #16]
 8011276:	2b00      	cmp	r3, #0
 8011278:	d101      	bne.n	801127e <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0x16>
 801127a:	f014 fbe4 	bl	8025a46 <abort>
  Relu6OpData* data = static_cast<Relu6OpData*>(node->user_data);
 801127e:	683b      	ldr	r3, [r7, #0]
 8011280:	691b      	ldr	r3, [r3, #16]
 8011282:	60fb      	str	r3, [r7, #12]

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 8011284:	2200      	movs	r2, #0
 8011286:	6839      	ldr	r1, [r7, #0]
 8011288:	6878      	ldr	r0, [r7, #4]
 801128a:	f7fa f843 	bl	800b314 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 801128e:	60b8      	str	r0, [r7, #8]
  TF_LITE_ENSURE(context, input != nullptr);
 8011290:	68bb      	ldr	r3, [r7, #8]
 8011292:	2b00      	cmp	r3, #0
 8011294:	d10a      	bne.n	80112ac <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0x44>
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	695c      	ldr	r4, [r3, #20]
 801129a:	4b20      	ldr	r3, [pc, #128]	; (801131c <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xb4>)
 801129c:	9300      	str	r3, [sp, #0]
 801129e:	23cd      	movs	r3, #205	; 0xcd
 80112a0:	4a1f      	ldr	r2, [pc, #124]	; (8011320 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xb8>)
 80112a2:	4920      	ldr	r1, [pc, #128]	; (8011324 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xbc>)
 80112a4:	6878      	ldr	r0, [r7, #4]
 80112a6:	47a0      	blx	r4
 80112a8:	2301      	movs	r3, #1
 80112aa:	e033      	b.n	8011314 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xac>

  if (input->type == kTfLiteInt8) {
 80112ac:	68bb      	ldr	r3, [r7, #8]
 80112ae:	781b      	ldrb	r3, [r3, #0]
 80112b0:	2b09      	cmp	r3, #9
 80112b2:	d115      	bne.n	80112e0 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0x78>
    data->six_int8 = FloatToQuantizedType<int8_t>(6.0f, input->params.scale,
 80112b4:	68bb      	ldr	r3, [r7, #8]
 80112b6:	edd3 7a03 	vldr	s15, [r3, #12]
                                                  input->params.zero_point);
 80112ba:	68bb      	ldr	r3, [r7, #8]
 80112bc:	691b      	ldr	r3, [r3, #16]
    data->six_int8 = FloatToQuantizedType<int8_t>(6.0f, input->params.scale,
 80112be:	4618      	mov	r0, r3
 80112c0:	eef0 0a67 	vmov.f32	s1, s15
 80112c4:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 80112c8:	f000 fbb3 	bl	8011a32 <_ZN6tflite20FloatToQuantizedTypeIaEET_ffi>
 80112cc:	4603      	mov	r3, r0
 80112ce:	461a      	mov	r2, r3
 80112d0:	68fb      	ldr	r3, [r7, #12]
 80112d2:	701a      	strb	r2, [r3, #0]
    data->zero_int8 = input->params.zero_point;
 80112d4:	68bb      	ldr	r3, [r7, #8]
 80112d6:	691b      	ldr	r3, [r3, #16]
 80112d8:	b25a      	sxtb	r2, r3
 80112da:	68fb      	ldr	r3, [r7, #12]
 80112dc:	705a      	strb	r2, [r3, #1]
 80112de:	e018      	b.n	8011312 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xaa>
  } else if (input->type == kTfLiteUInt8) {
 80112e0:	68bb      	ldr	r3, [r7, #8]
 80112e2:	781b      	ldrb	r3, [r3, #0]
 80112e4:	2b03      	cmp	r3, #3
 80112e6:	d114      	bne.n	8011312 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xaa>
    data->six_uint8 = FloatToQuantizedType<uint8_t>(6.0f, input->params.scale,
 80112e8:	68bb      	ldr	r3, [r7, #8]
 80112ea:	edd3 7a03 	vldr	s15, [r3, #12]
                                                    input->params.zero_point);
 80112ee:	68bb      	ldr	r3, [r7, #8]
 80112f0:	691b      	ldr	r3, [r3, #16]
    data->six_uint8 = FloatToQuantizedType<uint8_t>(6.0f, input->params.scale,
 80112f2:	4618      	mov	r0, r3
 80112f4:	eef0 0a67 	vmov.f32	s1, s15
 80112f8:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 80112fc:	f000 fbe8 	bl	8011ad0 <_ZN6tflite20FloatToQuantizedTypeIhEET_ffi>
 8011300:	4603      	mov	r3, r0
 8011302:	461a      	mov	r2, r3
 8011304:	68fb      	ldr	r3, [r7, #12]
 8011306:	709a      	strb	r2, [r3, #2]
    data->zero_uint8 = input->params.zero_point;
 8011308:	68bb      	ldr	r3, [r7, #8]
 801130a:	691b      	ldr	r3, [r3, #16]
 801130c:	b2da      	uxtb	r2, r3
 801130e:	68fb      	ldr	r3, [r7, #12]
 8011310:	70da      	strb	r2, [r3, #3]
  }

  return kTfLiteOk;
 8011312:	2300      	movs	r3, #0
}
 8011314:	4618      	mov	r0, r3
 8011316:	3714      	adds	r7, #20
 8011318:	46bd      	mov	sp, r7
 801131a:	bd90      	pop	{r4, r7, pc}
 801131c:	0802af68 	.word	0x0802af68
 8011320:	0802af10 	.word	0x0802af10
 8011324:	0802af50 	.word	0x0802af50

08011328 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Relu6Eval(TfLiteContext* context, TfLiteNode* node) {
 8011328:	b5f0      	push	{r4, r5, r6, r7, lr}
 801132a:	b0ad      	sub	sp, #180	; 0xb4
 801132c:	af02      	add	r7, sp, #8
 801132e:	6078      	str	r0, [r7, #4]
 8011330:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 8011332:	683b      	ldr	r3, [r7, #0]
 8011334:	691b      	ldr	r3, [r3, #16]
 8011336:	2b00      	cmp	r3, #0
 8011338:	d101      	bne.n	801133e <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x16>
 801133a:	f014 fb84 	bl	8025a46 <abort>
  const Relu6OpData& data = *(static_cast<const Relu6OpData*>(node->user_data));
 801133e:	683b      	ldr	r3, [r7, #0]
 8011340:	691b      	ldr	r3, [r3, #16]
 8011342:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
 8011346:	2200      	movs	r2, #0
 8011348:	6839      	ldr	r1, [r7, #0]
 801134a:	6878      	ldr	r0, [r7, #4]
 801134c:	f7ff fd9c 	bl	8010e88 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8011350:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 8011354:	2200      	movs	r2, #0
 8011356:	6839      	ldr	r1, [r7, #0]
 8011358:	6878      	ldr	r0, [r7, #4]
 801135a:	f7ff fda5 	bl	8010ea8 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 801135e:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

  switch (input->type) {
 8011362:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011366:	7a1b      	ldrb	r3, [r3, #8]
 8011368:	2b09      	cmp	r3, #9
 801136a:	d032      	beq.n	80113d2 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0xaa>
 801136c:	2b09      	cmp	r3, #9
 801136e:	f300 809c 	bgt.w	80114aa <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x182>
 8011372:	2b01      	cmp	r3, #1
 8011374:	d002      	beq.n	801137c <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x54>
 8011376:	2b03      	cmp	r3, #3
 8011378:	d062      	beq.n	8011440 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x118>
 801137a:	e096      	b.n	80114aa <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x182>
    case kTfLiteFloat32: {
      Relu6Float(tflite::micro::GetTensorShape(input),
 801137c:	f107 030c 	add.w	r3, r7, #12
 8011380:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8011384:	4618      	mov	r0, r3
 8011386:	f001 fa2a 	bl	80127de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 801138a:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 801138e:	f000 fa59 	bl	8011844 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 8011392:	4604      	mov	r4, r0
                 tflite::micro::GetTensorData<float>(input),
                 tflite::micro::GetTensorShape(output),
 8011394:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011398:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 801139c:	4618      	mov	r0, r3
 801139e:	f001 fa1e 	bl	80127de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Float(tflite::micro::GetTensorShape(input),
 80113a2:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80113a6:	f000 fa5c 	bl	8011862 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 80113aa:	4603      	mov	r3, r0
 80113ac:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80113b0:	f107 000c 	add.w	r0, r7, #12
 80113b4:	4621      	mov	r1, r4
 80113b6:	f7ff fdcb 	bl	8010f50 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf>
                 tflite::micro::GetTensorShape(output),
 80113ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80113be:	4618      	mov	r0, r3
 80113c0:	f7fa fd5b 	bl	800be7a <_ZN6tflite12RuntimeShapeD1Ev>
      Relu6Float(tflite::micro::GetTensorShape(input),
 80113c4:	f107 030c 	add.w	r3, r7, #12
 80113c8:	4618      	mov	r0, r3
 80113ca:	f7fa fd56 	bl	800be7a <_ZN6tflite12RuntimeShapeD1Ev>
                 tflite::micro::GetTensorData<float>(output));

      return kTfLiteOk;
 80113ce:	2300      	movs	r3, #0
 80113d0:	e079      	b.n	80114c6 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x19e>
    }
    case kTfLiteInt8: {
      Relu6Quantized<int8_t>(data.zero_int8, data.six_int8,
 80113d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80113d6:	f993 4001 	ldrsb.w	r4, [r3, #1]
 80113da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80113de:	f993 5000 	ldrsb.w	r5, [r3]
                             tflite::micro::GetTensorShape(input),
 80113e2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80113e6:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80113ea:	4618      	mov	r0, r3
 80113ec:	f001 f9f7 	bl	80127de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<int8_t>(data.zero_int8, data.six_int8,
 80113f0:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80113f4:	f000 fa46 	bl	8011884 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 80113f8:	4606      	mov	r6, r0
                             tflite::micro::GetTensorData<int8_t>(input),
                             tflite::micro::GetTensorShape(output),
 80113fa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80113fe:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8011402:	4618      	mov	r0, r3
 8011404:	f001 f9eb 	bl	80127de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<int8_t>(data.zero_int8, data.six_int8,
 8011408:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 801140c:	f000 fa49 	bl	80118a2 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 8011410:	4603      	mov	r3, r0
 8011412:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8011416:	9301      	str	r3, [sp, #4]
 8011418:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801141c:	9300      	str	r3, [sp, #0]
 801141e:	4633      	mov	r3, r6
 8011420:	4629      	mov	r1, r5
 8011422:	4620      	mov	r0, r4
 8011424:	f000 fba3 	bl	8011b6e <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>
                             tflite::micro::GetTensorShape(output),
 8011428:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801142c:	4618      	mov	r0, r3
 801142e:	f7fa fd24 	bl	800be7a <_ZN6tflite12RuntimeShapeD1Ev>
                             tflite::micro::GetTensorShape(input),
 8011432:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8011436:	4618      	mov	r0, r3
 8011438:	f7fa fd1f 	bl	800be7a <_ZN6tflite12RuntimeShapeD1Ev>
                             tflite::micro::GetTensorData<int8_t>(output));
      return kTfLiteOk;
 801143c:	2300      	movs	r3, #0
 801143e:	e042      	b.n	80114c6 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x19e>
    }
    case kTfLiteUInt8: {
      Relu6Quantized<uint8_t>(data.zero_uint8, data.six_uint8,
 8011440:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8011444:	78dc      	ldrb	r4, [r3, #3]
 8011446:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801144a:	789d      	ldrb	r5, [r3, #2]
                              tflite::micro::GetTensorShape(input),
 801144c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8011450:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8011454:	4618      	mov	r0, r3
 8011456:	f001 f9c2 	bl	80127de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<uint8_t>(data.zero_uint8, data.six_uint8,
 801145a:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 801145e:	f000 fa7d 	bl	801195c <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 8011462:	4606      	mov	r6, r0
                              tflite::micro::GetTensorData<uint8_t>(input),
                              tflite::micro::GetTensorShape(output),
 8011464:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8011468:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 801146c:	4618      	mov	r0, r3
 801146e:	f001 f9b6 	bl	80127de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<uint8_t>(data.zero_uint8, data.six_uint8,
 8011472:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8011476:	f000 fa80 	bl	801197a <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 801147a:	4603      	mov	r3, r0
 801147c:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8011480:	9301      	str	r3, [sp, #4]
 8011482:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8011486:	9300      	str	r3, [sp, #0]
 8011488:	4633      	mov	r3, r6
 801148a:	4629      	mov	r1, r5
 801148c:	4620      	mov	r0, r4
 801148e:	f000 fbad 	bl	8011bec <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>
                              tflite::micro::GetTensorShape(output),
 8011492:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8011496:	4618      	mov	r0, r3
 8011498:	f7fa fcef 	bl	800be7a <_ZN6tflite12RuntimeShapeD1Ev>
                              tflite::micro::GetTensorShape(input),
 801149c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80114a0:	4618      	mov	r0, r3
 80114a2:	f7fa fcea 	bl	800be7a <_ZN6tflite12RuntimeShapeD1Ev>
                              tflite::micro::GetTensorData<uint8_t>(output));
      return kTfLiteOk;
 80114a6:	2300      	movs	r3, #0
 80114a8:	e00d      	b.n	80114c6 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x19e>
    }
    default: {
      TF_LITE_KERNEL_LOG(context, "Only float32 is supported currently, got %s",
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	695c      	ldr	r4, [r3, #20]
 80114ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80114b2:	7a1b      	ldrb	r3, [r3, #8]
 80114b4:	4618      	mov	r0, r3
 80114b6:	f7f7 f8cb 	bl	8008650 <TfLiteTypeGetName>
 80114ba:	4603      	mov	r3, r0
 80114bc:	461a      	mov	r2, r3
 80114be:	4904      	ldr	r1, [pc, #16]	; (80114d0 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x1a8>)
 80114c0:	6878      	ldr	r0, [r7, #4]
 80114c2:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
 80114c4:	2301      	movs	r3, #1
    }
  }
}
 80114c6:	4618      	mov	r0, r3
 80114c8:	37ac      	adds	r7, #172	; 0xac
 80114ca:	46bd      	mov	sp, r7
 80114cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80114ce:	bf00      	nop
 80114d0:	0802af90 	.word	0x0802af90

080114d4 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>:
}

// Correctly-rounded-to-nearest division by a power-of-two.
// Also known as a rounding arithmetic right shift.
template <typename IntegerType>
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
 80114d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80114d6:	b089      	sub	sp, #36	; 0x24
 80114d8:	af00      	add	r7, sp, #0
 80114da:	6078      	str	r0, [r7, #4]
 80114dc:	6039      	str	r1, [r7, #0]
  assert(exponent >= 0);
 80114de:	6839      	ldr	r1, [r7, #0]
 80114e0:	2900      	cmp	r1, #0
 80114e2:	da06      	bge.n	80114f2 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x1e>
 80114e4:	4b31      	ldr	r3, [pc, #196]	; (80115ac <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xd8>)
 80114e6:	4a32      	ldr	r2, [pc, #200]	; (80115b0 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xdc>)
 80114e8:	f44f 71b3 	mov.w	r1, #358	; 0x166
 80114ec:	4831      	ldr	r0, [pc, #196]	; (80115b4 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe0>)
 80114ee:	f014 fab1 	bl	8025a54 <__assert_func>
  assert(exponent <= 31);
 80114f2:	6839      	ldr	r1, [r7, #0]
 80114f4:	291f      	cmp	r1, #31
 80114f6:	dd06      	ble.n	8011506 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x32>
 80114f8:	4b2f      	ldr	r3, [pc, #188]	; (80115b8 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe4>)
 80114fa:	4a2d      	ldr	r2, [pc, #180]	; (80115b0 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xdc>)
 80114fc:	f240 1167 	movw	r1, #359	; 0x167
 8011500:	482c      	ldr	r0, [pc, #176]	; (80115b4 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe0>)
 8011502:	f014 faa7 	bl	8025a54 <__assert_func>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
 8011506:	f04f 0001 	mov.w	r0, #1
 801150a:	f04f 0100 	mov.w	r1, #0
 801150e:	683c      	ldr	r4, [r7, #0]
 8011510:	f1a4 0620 	sub.w	r6, r4, #32
 8011514:	f1c4 0520 	rsb	r5, r4, #32
 8011518:	fa01 f304 	lsl.w	r3, r1, r4
 801151c:	fa00 f606 	lsl.w	r6, r0, r6
 8011520:	4333      	orrs	r3, r6
 8011522:	fa20 f505 	lsr.w	r5, r0, r5
 8011526:	432b      	orrs	r3, r5
 8011528:	fa00 f204 	lsl.w	r2, r0, r4
 801152c:	4613      	mov	r3, r2
 801152e:	3b01      	subs	r3, #1
 8011530:	4618      	mov	r0, r3
 8011532:	f000 fb93 	bl	8011c5c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8011536:	61f8      	str	r0, [r7, #28]
  const IntegerType zero = Dup<IntegerType>(0);
 8011538:	2000      	movs	r0, #0
 801153a:	f000 fb8f 	bl	8011c5c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801153e:	61b8      	str	r0, [r7, #24]
  const IntegerType one = Dup<IntegerType>(1);
 8011540:	2001      	movs	r0, #1
 8011542:	f000 fb8b 	bl	8011c5c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8011546:	6178      	str	r0, [r7, #20]
  const IntegerType remainder = BitAnd(x, mask);
 8011548:	69f9      	ldr	r1, [r7, #28]
 801154a:	6878      	ldr	r0, [r7, #4]
 801154c:	f000 fb91 	bl	8011c72 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8011550:	6138      	str	r0, [r7, #16]
  const IntegerType threshold =
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
 8011552:	2101      	movs	r1, #1
 8011554:	69f8      	ldr	r0, [r7, #28]
 8011556:	f000 fb9a 	bl	8011c8e <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 801155a:	4604      	mov	r4, r0
 801155c:	69b9      	ldr	r1, [r7, #24]
 801155e:	6878      	ldr	r0, [r7, #4]
 8011560:	f000 fba4 	bl	8011cac <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 8011564:	4603      	mov	r3, r0
 8011566:	6979      	ldr	r1, [r7, #20]
 8011568:	4618      	mov	r0, r3
 801156a:	f000 fb82 	bl	8011c72 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801156e:	4603      	mov	r3, r0
 8011570:	4619      	mov	r1, r3
 8011572:	4620      	mov	r0, r4
 8011574:	f000 fbae 	bl	8011cd4 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 8011578:	60f8      	str	r0, [r7, #12]
  return Add(ShiftRight(x, exponent),
 801157a:	6839      	ldr	r1, [r7, #0]
 801157c:	6878      	ldr	r0, [r7, #4]
 801157e:	f000 fb86 	bl	8011c8e <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 8011582:	4604      	mov	r4, r0
 8011584:	68f9      	ldr	r1, [r7, #12]
 8011586:	6938      	ldr	r0, [r7, #16]
 8011588:	f000 fbb2 	bl	8011cf0 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 801158c:	4603      	mov	r3, r0
 801158e:	6979      	ldr	r1, [r7, #20]
 8011590:	4618      	mov	r0, r3
 8011592:	f000 fb6e 	bl	8011c72 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8011596:	4603      	mov	r3, r0
 8011598:	4619      	mov	r1, r3
 801159a:	4620      	mov	r0, r4
 801159c:	f000 fb9a 	bl	8011cd4 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 80115a0:	4603      	mov	r3, r0
             BitAnd(MaskIfGreaterThan(remainder, threshold), one));
}
 80115a2:	4618      	mov	r0, r3
 80115a4:	3724      	adds	r7, #36	; 0x24
 80115a6:	46bd      	mov	sp, r7
 80115a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80115aa:	bf00      	nop
 80115ac:	0802affc 	.word	0x0802affc
 80115b0:	0802b00c 	.word	0x0802b00c
 80115b4:	0802b068 	.word	0x0802b068
 80115b8:	0802b0dc 	.word	0x0802b0dc

080115bc <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>:
inline void CalculateReluOpData(const TfLiteTensor* input, TfLiteTensor* output,
 80115bc:	b590      	push	{r4, r7, lr}
 80115be:	b099      	sub	sp, #100	; 0x64
 80115c0:	af00      	add	r7, sp, #0
 80115c2:	60f8      	str	r0, [r7, #12]
 80115c4:	60b9      	str	r1, [r7, #8]
 80115c6:	607a      	str	r2, [r7, #4]
  float act_min = 0.0;
 80115c8:	f04f 0300 	mov.w	r3, #0
 80115cc:	65fb      	str	r3, [r7, #92]	; 0x5c
  float act_max = std::numeric_limits<float>::infinity();
 80115ce:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 80115d2:	65bb      	str	r3, [r7, #88]	; 0x58
      static_cast<double>(input->params.scale / output->params.scale);
 80115d4:	68fb      	ldr	r3, [r7, #12]
 80115d6:	ed93 7a03 	vldr	s14, [r3, #12]
 80115da:	68bb      	ldr	r3, [r7, #8]
 80115dc:	edd3 7a03 	vldr	s15, [r3, #12]
 80115e0:	eec7 6a27 	vdiv.f32	s13, s14, s15
  double real_multiplier =
 80115e4:	ee16 0a90 	vmov	r0, s13
 80115e8:	f7ee ffe0 	bl	80005ac <__aeabi_f2d>
 80115ec:	4602      	mov	r2, r0
 80115ee:	460b      	mov	r3, r1
 80115f0:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  const RuntimeShape input_shape = GetTensorShape(input);
 80115f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80115f8:	68f9      	ldr	r1, [r7, #12]
 80115fa:	4618      	mov	r0, r3
 80115fc:	f7fa fcb7 	bl	800bf6e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const RuntimeShape output_shape = GetTensorShape(output);
 8011600:	f107 0310 	add.w	r3, r7, #16
 8011604:	68b9      	ldr	r1, [r7, #8]
 8011606:	4618      	mov	r0, r3
 8011608:	f7fa fcb1 	bl	800bf6e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  QuantizeMultiplier(real_multiplier, &data->params.output_multiplier,
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	f103 0214 	add.w	r2, r3, #20
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	3318      	adds	r3, #24
 8011616:	4619      	mov	r1, r3
 8011618:	4610      	mov	r0, r2
 801161a:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 801161e:	f7f9 fb9b 	bl	800ad58 <_ZN6tflite18QuantizeMultiplierEdPlPi>
      static_cast<int32_t>(std::numeric_limits<T>::min()),
 8011622:	f7f9 fd66 	bl	800b0f2 <_ZNSt14numeric_limitsIaE3minEv>
 8011626:	4603      	mov	r3, r0
 8011628:	643b      	str	r3, [r7, #64]	; 0x40
      output->params.zero_point +
 801162a:	68bb      	ldr	r3, [r7, #8]
 801162c:	691c      	ldr	r4, [r3, #16]
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 801162e:	68bb      	ldr	r3, [r7, #8]
 8011630:	edd3 7a03 	vldr	s15, [r3, #12]
 8011634:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8011638:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801163c:	eeb0 0a66 	vmov.f32	s0, s13
 8011640:	f014 f8bc 	bl	80257bc <roundf>
 8011644:	eef0 7a40 	vmov.f32	s15, s0
      output->params.zero_point +
 8011648:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801164c:	ee17 3a90 	vmov	r3, s15
 8011650:	4423      	add	r3, r4
 8011652:	647b      	str	r3, [r7, #68]	; 0x44
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 8011654:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8011658:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801165c:	4611      	mov	r1, r2
 801165e:	4618      	mov	r0, r3
 8011660:	f7fa faa4 	bl	800bbac <_ZSt3maxIlERKT_S2_S2_>
 8011664:	4603      	mov	r3, r0
  data->params.quantized_activation_min = std::max(
 8011666:	681a      	ldr	r2, [r3, #0]
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	605a      	str	r2, [r3, #4]
      act_max == std::numeric_limits<float>::infinity()
 801166c:	f7ff fabb 	bl	8010be6 <_ZNSt14numeric_limitsIfE8infinityEv>
 8011670:	eeb0 7a40 	vmov.f32	s14, s0
  data->params.quantized_activation_max =
 8011674:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8011678:	eef4 7a47 	vcmp.f32	s15, s14
 801167c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011680:	d103      	bne.n	801168a <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0xce>
          ? static_cast<int32_t>(std::numeric_limits<T>::max())
 8011682:	f7f9 fd3f 	bl	800b104 <_ZNSt14numeric_limitsIaE3maxEv>
 8011686:	4603      	mov	r3, r0
 8011688:	e022      	b.n	80116d0 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0x114>
          : std::min(static_cast<int32_t>(std::numeric_limits<T>::max()),
 801168a:	f7f9 fd3b 	bl	800b104 <_ZNSt14numeric_limitsIaE3maxEv>
 801168e:	4603      	mov	r3, r0
 8011690:	64bb      	str	r3, [r7, #72]	; 0x48
                     output->params.zero_point +
 8011692:	68bb      	ldr	r3, [r7, #8]
 8011694:	691c      	ldr	r4, [r3, #16]
                             roundf(act_max / output->params.scale)));
 8011696:	68bb      	ldr	r3, [r7, #8]
 8011698:	edd3 7a03 	vldr	s15, [r3, #12]
 801169c:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80116a0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80116a4:	eeb0 0a66 	vmov.f32	s0, s13
 80116a8:	f014 f888 	bl	80257bc <roundf>
 80116ac:	eef0 7a40 	vmov.f32	s15, s0
                     output->params.zero_point +
 80116b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80116b4:	ee17 3a90 	vmov	r3, s15
 80116b8:	4423      	add	r3, r4
 80116ba:	64fb      	str	r3, [r7, #76]	; 0x4c
                             roundf(act_max / output->params.scale)));
 80116bc:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80116c0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80116c4:	4611      	mov	r1, r2
 80116c6:	4618      	mov	r0, r3
 80116c8:	f7fa fa5c 	bl	800bb84 <_ZSt3minIlERKT_S2_S2_>
 80116cc:	4603      	mov	r3, r0
  data->params.quantized_activation_max =
 80116ce:	681b      	ldr	r3, [r3, #0]
 80116d0:	687a      	ldr	r2, [r7, #4]
 80116d2:	6093      	str	r3, [r2, #8]
  data->params.input_offset = input->params.zero_point;
 80116d4:	68fb      	ldr	r3, [r7, #12]
 80116d6:	691a      	ldr	r2, [r3, #16]
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	60da      	str	r2, [r3, #12]
  data->params.output_offset = output->params.zero_point;
 80116dc:	68bb      	ldr	r3, [r7, #8]
 80116de:	691a      	ldr	r2, [r3, #16]
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	611a      	str	r2, [r3, #16]
  const RuntimeShape output_shape = GetTensorShape(output);
 80116e4:	f107 0310 	add.w	r3, r7, #16
 80116e8:	4618      	mov	r0, r3
 80116ea:	f7fa fbc6 	bl	800be7a <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape input_shape = GetTensorShape(input);
 80116ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80116f2:	4618      	mov	r0, r3
 80116f4:	f7fa fbc1 	bl	800be7a <_ZN6tflite12RuntimeShapeD1Ev>
}
 80116f8:	bf00      	nop
 80116fa:	3764      	adds	r7, #100	; 0x64
 80116fc:	46bd      	mov	sp, r7
 80116fe:	bd90      	pop	{r4, r7, pc}

08011700 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>:
inline void CalculateReluOpData(const TfLiteTensor* input, TfLiteTensor* output,
 8011700:	b590      	push	{r4, r7, lr}
 8011702:	b099      	sub	sp, #100	; 0x64
 8011704:	af00      	add	r7, sp, #0
 8011706:	60f8      	str	r0, [r7, #12]
 8011708:	60b9      	str	r1, [r7, #8]
 801170a:	607a      	str	r2, [r7, #4]
  float act_min = 0.0;
 801170c:	f04f 0300 	mov.w	r3, #0
 8011710:	65fb      	str	r3, [r7, #92]	; 0x5c
  float act_max = std::numeric_limits<float>::infinity();
 8011712:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 8011716:	65bb      	str	r3, [r7, #88]	; 0x58
      static_cast<double>(input->params.scale / output->params.scale);
 8011718:	68fb      	ldr	r3, [r7, #12]
 801171a:	ed93 7a03 	vldr	s14, [r3, #12]
 801171e:	68bb      	ldr	r3, [r7, #8]
 8011720:	edd3 7a03 	vldr	s15, [r3, #12]
 8011724:	eec7 6a27 	vdiv.f32	s13, s14, s15
  double real_multiplier =
 8011728:	ee16 0a90 	vmov	r0, s13
 801172c:	f7ee ff3e 	bl	80005ac <__aeabi_f2d>
 8011730:	4602      	mov	r2, r0
 8011732:	460b      	mov	r3, r1
 8011734:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  const RuntimeShape input_shape = GetTensorShape(input);
 8011738:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801173c:	68f9      	ldr	r1, [r7, #12]
 801173e:	4618      	mov	r0, r3
 8011740:	f7fa fc15 	bl	800bf6e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const RuntimeShape output_shape = GetTensorShape(output);
 8011744:	f107 0310 	add.w	r3, r7, #16
 8011748:	68b9      	ldr	r1, [r7, #8]
 801174a:	4618      	mov	r0, r3
 801174c:	f7fa fc0f 	bl	800bf6e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  QuantizeMultiplier(real_multiplier, &data->params.output_multiplier,
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	f103 0214 	add.w	r2, r3, #20
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	3318      	adds	r3, #24
 801175a:	4619      	mov	r1, r3
 801175c:	4610      	mov	r0, r2
 801175e:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 8011762:	f7f9 faf9 	bl	800ad58 <_ZN6tflite18QuantizeMultiplierEdPlPi>
      static_cast<int32_t>(std::numeric_limits<T>::min()),
 8011766:	f7f9 fcd5 	bl	800b114 <_ZNSt14numeric_limitsIhE3minEv>
 801176a:	4603      	mov	r3, r0
 801176c:	643b      	str	r3, [r7, #64]	; 0x40
      output->params.zero_point +
 801176e:	68bb      	ldr	r3, [r7, #8]
 8011770:	691c      	ldr	r4, [r3, #16]
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 8011772:	68bb      	ldr	r3, [r7, #8]
 8011774:	edd3 7a03 	vldr	s15, [r3, #12]
 8011778:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 801177c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8011780:	eeb0 0a66 	vmov.f32	s0, s13
 8011784:	f014 f81a 	bl	80257bc <roundf>
 8011788:	eef0 7a40 	vmov.f32	s15, s0
      output->params.zero_point +
 801178c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011790:	ee17 3a90 	vmov	r3, s15
 8011794:	4423      	add	r3, r4
 8011796:	647b      	str	r3, [r7, #68]	; 0x44
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 8011798:	f107 0244 	add.w	r2, r7, #68	; 0x44
 801179c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80117a0:	4611      	mov	r1, r2
 80117a2:	4618      	mov	r0, r3
 80117a4:	f7fa fa02 	bl	800bbac <_ZSt3maxIlERKT_S2_S2_>
 80117a8:	4603      	mov	r3, r0
  data->params.quantized_activation_min = std::max(
 80117aa:	681a      	ldr	r2, [r3, #0]
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	605a      	str	r2, [r3, #4]
      act_max == std::numeric_limits<float>::infinity()
 80117b0:	f7ff fa19 	bl	8010be6 <_ZNSt14numeric_limitsIfE8infinityEv>
 80117b4:	eeb0 7a40 	vmov.f32	s14, s0
  data->params.quantized_activation_max =
 80117b8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80117bc:	eef4 7a47 	vcmp.f32	s15, s14
 80117c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117c4:	d103      	bne.n	80117ce <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0xce>
          ? static_cast<int32_t>(std::numeric_limits<T>::max())
 80117c6:	f7f9 fcad 	bl	800b124 <_ZNSt14numeric_limitsIhE3maxEv>
 80117ca:	4603      	mov	r3, r0
 80117cc:	e022      	b.n	8011814 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0x114>
          : std::min(static_cast<int32_t>(std::numeric_limits<T>::max()),
 80117ce:	f7f9 fca9 	bl	800b124 <_ZNSt14numeric_limitsIhE3maxEv>
 80117d2:	4603      	mov	r3, r0
 80117d4:	64bb      	str	r3, [r7, #72]	; 0x48
                     output->params.zero_point +
 80117d6:	68bb      	ldr	r3, [r7, #8]
 80117d8:	691c      	ldr	r4, [r3, #16]
                             roundf(act_max / output->params.scale)));
 80117da:	68bb      	ldr	r3, [r7, #8]
 80117dc:	edd3 7a03 	vldr	s15, [r3, #12]
 80117e0:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80117e4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80117e8:	eeb0 0a66 	vmov.f32	s0, s13
 80117ec:	f013 ffe6 	bl	80257bc <roundf>
 80117f0:	eef0 7a40 	vmov.f32	s15, s0
                     output->params.zero_point +
 80117f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80117f8:	ee17 3a90 	vmov	r3, s15
 80117fc:	4423      	add	r3, r4
 80117fe:	64fb      	str	r3, [r7, #76]	; 0x4c
                             roundf(act_max / output->params.scale)));
 8011800:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8011804:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011808:	4611      	mov	r1, r2
 801180a:	4618      	mov	r0, r3
 801180c:	f7fa f9ba 	bl	800bb84 <_ZSt3minIlERKT_S2_S2_>
 8011810:	4603      	mov	r3, r0
  data->params.quantized_activation_max =
 8011812:	681b      	ldr	r3, [r3, #0]
 8011814:	687a      	ldr	r2, [r7, #4]
 8011816:	6093      	str	r3, [r2, #8]
  data->params.input_offset = input->params.zero_point;
 8011818:	68fb      	ldr	r3, [r7, #12]
 801181a:	691a      	ldr	r2, [r3, #16]
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	60da      	str	r2, [r3, #12]
  data->params.output_offset = output->params.zero_point;
 8011820:	68bb      	ldr	r3, [r7, #8]
 8011822:	691a      	ldr	r2, [r3, #16]
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	611a      	str	r2, [r3, #16]
  const RuntimeShape output_shape = GetTensorShape(output);
 8011828:	f107 0310 	add.w	r3, r7, #16
 801182c:	4618      	mov	r0, r3
 801182e:	f7fa fb24 	bl	800be7a <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape input_shape = GetTensorShape(input);
 8011832:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011836:	4618      	mov	r0, r3
 8011838:	f7fa fb1f 	bl	800be7a <_ZN6tflite12RuntimeShapeD1Ev>
}
 801183c:	bf00      	nop
 801183e:	3764      	adds	r7, #100	; 0x64
 8011840:	46bd      	mov	sp, r7
 8011842:	bd90      	pop	{r4, r7, pc}

08011844 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>:
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
}

// Returns const data for a TfLiteEvalTensor struct.
template <typename T>
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 8011844:	b580      	push	{r7, lr}
 8011846:	b082      	sub	sp, #8
 8011848:	af00      	add	r7, sp, #0
 801184a:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	2b00      	cmp	r3, #0
 8011850:	d101      	bne.n	8011856 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor+0x12>
 8011852:	f014 f8f8 	bl	8025a46 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	681b      	ldr	r3, [r3, #0]
}
 801185a:	4618      	mov	r0, r3
 801185c:	3708      	adds	r7, #8
 801185e:	46bd      	mov	sp, r7
 8011860:	bd80      	pop	{r7, pc}

08011862 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 8011862:	b480      	push	{r7}
 8011864:	b083      	sub	sp, #12
 8011866:	af00      	add	r7, sp, #0
 8011868:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	2b00      	cmp	r3, #0
 801186e:	d002      	beq.n	8011876 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor+0x14>
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	681b      	ldr	r3, [r3, #0]
 8011874:	e000      	b.n	8011878 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor+0x16>
 8011876:	2300      	movs	r3, #0
}
 8011878:	4618      	mov	r0, r3
 801187a:	370c      	adds	r7, #12
 801187c:	46bd      	mov	sp, r7
 801187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011882:	4770      	bx	lr

08011884 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 8011884:	b580      	push	{r7, lr}
 8011886:	b082      	sub	sp, #8
 8011888:	af00      	add	r7, sp, #0
 801188a:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	2b00      	cmp	r3, #0
 8011890:	d101      	bne.n	8011896 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor+0x12>
 8011892:	f014 f8d8 	bl	8025a46 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	681b      	ldr	r3, [r3, #0]
}
 801189a:	4618      	mov	r0, r3
 801189c:	3708      	adds	r7, #8
 801189e:	46bd      	mov	sp, r7
 80118a0:	bd80      	pop	{r7, pc}

080118a2 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 80118a2:	b480      	push	{r7}
 80118a4:	b083      	sub	sp, #12
 80118a6:	af00      	add	r7, sp, #0
 80118a8:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	d002      	beq.n	80118b6 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor+0x14>
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	681b      	ldr	r3, [r3, #0]
 80118b4:	e000      	b.n	80118b8 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor+0x16>
 80118b6:	2300      	movs	r3, #0
}
 80118b8:	4618      	mov	r0, r3
 80118ba:	370c      	adds	r7, #12
 80118bc:	46bd      	mov	sp, r7
 80118be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118c2:	4770      	bx	lr

080118c4 <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>:
inline void ReluQuantized(const ReluOpData& data,
 80118c4:	b590      	push	{r4, r7, lr}
 80118c6:	b089      	sub	sp, #36	; 0x24
 80118c8:	af00      	add	r7, sp, #0
 80118ca:	60f8      	str	r0, [r7, #12]
 80118cc:	60b9      	str	r1, [r7, #8]
 80118ce:	607a      	str	r2, [r7, #4]
 80118d0:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 80118d2:	6879      	ldr	r1, [r7, #4]
 80118d4:	68b8      	ldr	r0, [r7, #8]
 80118d6:	f7ff fa5e 	bl	8010d96 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 80118da:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 80118dc:	2300      	movs	r3, #0
 80118de:	61fb      	str	r3, [r7, #28]
 80118e0:	69fa      	ldr	r2, [r7, #28]
 80118e2:	69bb      	ldr	r3, [r7, #24]
 80118e4:	429a      	cmp	r2, r3
 80118e6:	da35      	bge.n	8011954 <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x90>
    const int32_t val = static_cast<int32_t>(input_data[i]);
 80118e8:	69fb      	ldr	r3, [r7, #28]
 80118ea:	683a      	ldr	r2, [r7, #0]
 80118ec:	4413      	add	r3, r2
 80118ee:	f993 3000 	ldrsb.w	r3, [r3]
 80118f2:	617b      	str	r3, [r7, #20]
        data.params.output_offset +
 80118f4:	68fb      	ldr	r3, [r7, #12]
 80118f6:	691c      	ldr	r4, [r3, #16]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 80118f8:	68fb      	ldr	r3, [r7, #12]
 80118fa:	68db      	ldr	r3, [r3, #12]
 80118fc:	697a      	ldr	r2, [r7, #20]
 80118fe:	1ad0      	subs	r0, r2, r3
                                      data.params.output_multiplier,
 8011900:	68fb      	ldr	r3, [r7, #12]
 8011902:	6959      	ldr	r1, [r3, #20]
                                      data.params.output_shift);
 8011904:	68fb      	ldr	r3, [r7, #12]
 8011906:	699b      	ldr	r3, [r3, #24]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 8011908:	461a      	mov	r2, r3
 801190a:	f7ff fa79 	bl	8010e00 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 801190e:	4603      	mov	r3, r0
        data.params.output_offset +
 8011910:	4423      	add	r3, r4
    int32_t clamped =
 8011912:	613b      	str	r3, [r7, #16]
    clamped = std::max(data.params.quantized_activation_min, clamped);
 8011914:	68fb      	ldr	r3, [r7, #12]
 8011916:	3304      	adds	r3, #4
 8011918:	f107 0210 	add.w	r2, r7, #16
 801191c:	4611      	mov	r1, r2
 801191e:	4618      	mov	r0, r3
 8011920:	f7fa f944 	bl	800bbac <_ZSt3maxIlERKT_S2_S2_>
 8011924:	4603      	mov	r3, r0
 8011926:	681b      	ldr	r3, [r3, #0]
 8011928:	613b      	str	r3, [r7, #16]
    clamped = std::min(data.params.quantized_activation_max, clamped);
 801192a:	68fb      	ldr	r3, [r7, #12]
 801192c:	3308      	adds	r3, #8
 801192e:	f107 0210 	add.w	r2, r7, #16
 8011932:	4611      	mov	r1, r2
 8011934:	4618      	mov	r0, r3
 8011936:	f7fa f925 	bl	800bb84 <_ZSt3minIlERKT_S2_S2_>
 801193a:	4603      	mov	r3, r0
 801193c:	681b      	ldr	r3, [r3, #0]
 801193e:	613b      	str	r3, [r7, #16]
    output_data[i] = static_cast<T>(clamped);
 8011940:	6939      	ldr	r1, [r7, #16]
 8011942:	69fb      	ldr	r3, [r7, #28]
 8011944:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011946:	4413      	add	r3, r2
 8011948:	b24a      	sxtb	r2, r1
 801194a:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 801194c:	69fb      	ldr	r3, [r7, #28]
 801194e:	3301      	adds	r3, #1
 8011950:	61fb      	str	r3, [r7, #28]
 8011952:	e7c5      	b.n	80118e0 <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x1c>
}
 8011954:	bf00      	nop
 8011956:	3724      	adds	r7, #36	; 0x24
 8011958:	46bd      	mov	sp, r7
 801195a:	bd90      	pop	{r4, r7, pc}

0801195c <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 801195c:	b580      	push	{r7, lr}
 801195e:	b082      	sub	sp, #8
 8011960:	af00      	add	r7, sp, #0
 8011962:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	2b00      	cmp	r3, #0
 8011968:	d101      	bne.n	801196e <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor+0x12>
 801196a:	f014 f86c 	bl	8025a46 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	681b      	ldr	r3, [r3, #0]
}
 8011972:	4618      	mov	r0, r3
 8011974:	3708      	adds	r7, #8
 8011976:	46bd      	mov	sp, r7
 8011978:	bd80      	pop	{r7, pc}

0801197a <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 801197a:	b480      	push	{r7}
 801197c:	b083      	sub	sp, #12
 801197e:	af00      	add	r7, sp, #0
 8011980:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	2b00      	cmp	r3, #0
 8011986:	d002      	beq.n	801198e <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor+0x14>
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	681b      	ldr	r3, [r3, #0]
 801198c:	e000      	b.n	8011990 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor+0x16>
 801198e:	2300      	movs	r3, #0
}
 8011990:	4618      	mov	r0, r3
 8011992:	370c      	adds	r7, #12
 8011994:	46bd      	mov	sp, r7
 8011996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801199a:	4770      	bx	lr

0801199c <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>:
inline void ReluQuantized(const ReluOpData& data,
 801199c:	b590      	push	{r4, r7, lr}
 801199e:	b089      	sub	sp, #36	; 0x24
 80119a0:	af00      	add	r7, sp, #0
 80119a2:	60f8      	str	r0, [r7, #12]
 80119a4:	60b9      	str	r1, [r7, #8]
 80119a6:	607a      	str	r2, [r7, #4]
 80119a8:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 80119aa:	6879      	ldr	r1, [r7, #4]
 80119ac:	68b8      	ldr	r0, [r7, #8]
 80119ae:	f7ff f9f2 	bl	8010d96 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 80119b2:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 80119b4:	2300      	movs	r3, #0
 80119b6:	61fb      	str	r3, [r7, #28]
 80119b8:	69fa      	ldr	r2, [r7, #28]
 80119ba:	69bb      	ldr	r3, [r7, #24]
 80119bc:	429a      	cmp	r2, r3
 80119be:	da34      	bge.n	8011a2a <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x8e>
    const int32_t val = static_cast<int32_t>(input_data[i]);
 80119c0:	69fb      	ldr	r3, [r7, #28]
 80119c2:	683a      	ldr	r2, [r7, #0]
 80119c4:	4413      	add	r3, r2
 80119c6:	781b      	ldrb	r3, [r3, #0]
 80119c8:	617b      	str	r3, [r7, #20]
        data.params.output_offset +
 80119ca:	68fb      	ldr	r3, [r7, #12]
 80119cc:	691c      	ldr	r4, [r3, #16]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 80119ce:	68fb      	ldr	r3, [r7, #12]
 80119d0:	68db      	ldr	r3, [r3, #12]
 80119d2:	697a      	ldr	r2, [r7, #20]
 80119d4:	1ad0      	subs	r0, r2, r3
                                      data.params.output_multiplier,
 80119d6:	68fb      	ldr	r3, [r7, #12]
 80119d8:	6959      	ldr	r1, [r3, #20]
                                      data.params.output_shift);
 80119da:	68fb      	ldr	r3, [r7, #12]
 80119dc:	699b      	ldr	r3, [r3, #24]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 80119de:	461a      	mov	r2, r3
 80119e0:	f7ff fa0e 	bl	8010e00 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 80119e4:	4603      	mov	r3, r0
        data.params.output_offset +
 80119e6:	4423      	add	r3, r4
    int32_t clamped =
 80119e8:	613b      	str	r3, [r7, #16]
    clamped = std::max(data.params.quantized_activation_min, clamped);
 80119ea:	68fb      	ldr	r3, [r7, #12]
 80119ec:	3304      	adds	r3, #4
 80119ee:	f107 0210 	add.w	r2, r7, #16
 80119f2:	4611      	mov	r1, r2
 80119f4:	4618      	mov	r0, r3
 80119f6:	f7fa f8d9 	bl	800bbac <_ZSt3maxIlERKT_S2_S2_>
 80119fa:	4603      	mov	r3, r0
 80119fc:	681b      	ldr	r3, [r3, #0]
 80119fe:	613b      	str	r3, [r7, #16]
    clamped = std::min(data.params.quantized_activation_max, clamped);
 8011a00:	68fb      	ldr	r3, [r7, #12]
 8011a02:	3308      	adds	r3, #8
 8011a04:	f107 0210 	add.w	r2, r7, #16
 8011a08:	4611      	mov	r1, r2
 8011a0a:	4618      	mov	r0, r3
 8011a0c:	f7fa f8ba 	bl	800bb84 <_ZSt3minIlERKT_S2_S2_>
 8011a10:	4603      	mov	r3, r0
 8011a12:	681b      	ldr	r3, [r3, #0]
 8011a14:	613b      	str	r3, [r7, #16]
    output_data[i] = static_cast<T>(clamped);
 8011a16:	6939      	ldr	r1, [r7, #16]
 8011a18:	69fb      	ldr	r3, [r7, #28]
 8011a1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011a1c:	4413      	add	r3, r2
 8011a1e:	b2ca      	uxtb	r2, r1
 8011a20:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 8011a22:	69fb      	ldr	r3, [r7, #28]
 8011a24:	3301      	adds	r3, #1
 8011a26:	61fb      	str	r3, [r7, #28]
 8011a28:	e7c6      	b.n	80119b8 <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x1c>
}
 8011a2a:	bf00      	nop
 8011a2c:	3724      	adds	r7, #36	; 0x24
 8011a2e:	46bd      	mov	sp, r7
 8011a30:	bd90      	pop	{r4, r7, pc}

08011a32 <_ZN6tflite20FloatToQuantizedTypeIaEET_ffi>:

// Converts a float value into a quantized value.  Note that large values (close
// to max int and min int) may see significant error due to a lack of floating
// point granularity for large values.
template <typename T>
T FloatToQuantizedType(const float value, const float scale, int zero_point) {
 8011a32:	b5b0      	push	{r4, r5, r7, lr}
 8011a34:	b088      	sub	sp, #32
 8011a36:	af00      	add	r7, sp, #0
 8011a38:	ed87 0a03 	vstr	s0, [r7, #12]
 8011a3c:	edc7 0a02 	vstr	s1, [r7, #8]
 8011a40:	6078      	str	r0, [r7, #4]
  int32_t result = round(value / scale) + zero_point;
 8011a42:	ed97 7a03 	vldr	s14, [r7, #12]
 8011a46:	edd7 7a02 	vldr	s15, [r7, #8]
 8011a4a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8011a4e:	ee16 0a90 	vmov	r0, s13
 8011a52:	f7ee fdab 	bl	80005ac <__aeabi_f2d>
 8011a56:	4602      	mov	r2, r0
 8011a58:	460b      	mov	r3, r1
 8011a5a:	ec43 2b10 	vmov	d0, r2, r3
 8011a5e:	f013 fe67 	bl	8025730 <round>
 8011a62:	ec55 4b10 	vmov	r4, r5, d0
 8011a66:	6878      	ldr	r0, [r7, #4]
 8011a68:	f7ee fd8e 	bl	8000588 <__aeabi_i2d>
 8011a6c:	4602      	mov	r2, r0
 8011a6e:	460b      	mov	r3, r1
 8011a70:	4620      	mov	r0, r4
 8011a72:	4629      	mov	r1, r5
 8011a74:	f7ee fc3c 	bl	80002f0 <__adddf3>
 8011a78:	4602      	mov	r2, r0
 8011a7a:	460b      	mov	r3, r1
 8011a7c:	4610      	mov	r0, r2
 8011a7e:	4619      	mov	r1, r3
 8011a80:	f7ef f886 	bl	8000b90 <__aeabi_d2iz>
 8011a84:	4603      	mov	r3, r0
 8011a86:	617b      	str	r3, [r7, #20]
  result =
      std::max(static_cast<int32_t>(std::numeric_limits<T>::min()), result);
 8011a88:	f7f9 fb33 	bl	800b0f2 <_ZNSt14numeric_limitsIaE3minEv>
 8011a8c:	4603      	mov	r3, r0
 8011a8e:	61bb      	str	r3, [r7, #24]
 8011a90:	f107 0214 	add.w	r2, r7, #20
 8011a94:	f107 0318 	add.w	r3, r7, #24
 8011a98:	4611      	mov	r1, r2
 8011a9a:	4618      	mov	r0, r3
 8011a9c:	f7fa f886 	bl	800bbac <_ZSt3maxIlERKT_S2_S2_>
 8011aa0:	4603      	mov	r3, r0
  result =
 8011aa2:	681b      	ldr	r3, [r3, #0]
 8011aa4:	617b      	str	r3, [r7, #20]
  result =
      std::min(static_cast<int32_t>(std::numeric_limits<T>::max()), result);
 8011aa6:	f7f9 fb2d 	bl	800b104 <_ZNSt14numeric_limitsIaE3maxEv>
 8011aaa:	4603      	mov	r3, r0
 8011aac:	61fb      	str	r3, [r7, #28]
 8011aae:	f107 0214 	add.w	r2, r7, #20
 8011ab2:	f107 031c 	add.w	r3, r7, #28
 8011ab6:	4611      	mov	r1, r2
 8011ab8:	4618      	mov	r0, r3
 8011aba:	f7fa f863 	bl	800bb84 <_ZSt3minIlERKT_S2_S2_>
 8011abe:	4603      	mov	r3, r0
  result =
 8011ac0:	681b      	ldr	r3, [r3, #0]
 8011ac2:	617b      	str	r3, [r7, #20]
  return result;
 8011ac4:	697b      	ldr	r3, [r7, #20]
 8011ac6:	b25b      	sxtb	r3, r3
}
 8011ac8:	4618      	mov	r0, r3
 8011aca:	3720      	adds	r7, #32
 8011acc:	46bd      	mov	sp, r7
 8011ace:	bdb0      	pop	{r4, r5, r7, pc}

08011ad0 <_ZN6tflite20FloatToQuantizedTypeIhEET_ffi>:
T FloatToQuantizedType(const float value, const float scale, int zero_point) {
 8011ad0:	b5b0      	push	{r4, r5, r7, lr}
 8011ad2:	b088      	sub	sp, #32
 8011ad4:	af00      	add	r7, sp, #0
 8011ad6:	ed87 0a03 	vstr	s0, [r7, #12]
 8011ada:	edc7 0a02 	vstr	s1, [r7, #8]
 8011ade:	6078      	str	r0, [r7, #4]
  int32_t result = round(value / scale) + zero_point;
 8011ae0:	ed97 7a03 	vldr	s14, [r7, #12]
 8011ae4:	edd7 7a02 	vldr	s15, [r7, #8]
 8011ae8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8011aec:	ee16 0a90 	vmov	r0, s13
 8011af0:	f7ee fd5c 	bl	80005ac <__aeabi_f2d>
 8011af4:	4602      	mov	r2, r0
 8011af6:	460b      	mov	r3, r1
 8011af8:	ec43 2b10 	vmov	d0, r2, r3
 8011afc:	f013 fe18 	bl	8025730 <round>
 8011b00:	ec55 4b10 	vmov	r4, r5, d0
 8011b04:	6878      	ldr	r0, [r7, #4]
 8011b06:	f7ee fd3f 	bl	8000588 <__aeabi_i2d>
 8011b0a:	4602      	mov	r2, r0
 8011b0c:	460b      	mov	r3, r1
 8011b0e:	4620      	mov	r0, r4
 8011b10:	4629      	mov	r1, r5
 8011b12:	f7ee fbed 	bl	80002f0 <__adddf3>
 8011b16:	4602      	mov	r2, r0
 8011b18:	460b      	mov	r3, r1
 8011b1a:	4610      	mov	r0, r2
 8011b1c:	4619      	mov	r1, r3
 8011b1e:	f7ef f837 	bl	8000b90 <__aeabi_d2iz>
 8011b22:	4603      	mov	r3, r0
 8011b24:	617b      	str	r3, [r7, #20]
      std::max(static_cast<int32_t>(std::numeric_limits<T>::min()), result);
 8011b26:	f7f9 faf5 	bl	800b114 <_ZNSt14numeric_limitsIhE3minEv>
 8011b2a:	4603      	mov	r3, r0
 8011b2c:	61bb      	str	r3, [r7, #24]
 8011b2e:	f107 0214 	add.w	r2, r7, #20
 8011b32:	f107 0318 	add.w	r3, r7, #24
 8011b36:	4611      	mov	r1, r2
 8011b38:	4618      	mov	r0, r3
 8011b3a:	f7fa f837 	bl	800bbac <_ZSt3maxIlERKT_S2_S2_>
 8011b3e:	4603      	mov	r3, r0
  result =
 8011b40:	681b      	ldr	r3, [r3, #0]
 8011b42:	617b      	str	r3, [r7, #20]
      std::min(static_cast<int32_t>(std::numeric_limits<T>::max()), result);
 8011b44:	f7f9 faee 	bl	800b124 <_ZNSt14numeric_limitsIhE3maxEv>
 8011b48:	4603      	mov	r3, r0
 8011b4a:	61fb      	str	r3, [r7, #28]
 8011b4c:	f107 0214 	add.w	r2, r7, #20
 8011b50:	f107 031c 	add.w	r3, r7, #28
 8011b54:	4611      	mov	r1, r2
 8011b56:	4618      	mov	r0, r3
 8011b58:	f7fa f814 	bl	800bb84 <_ZSt3minIlERKT_S2_S2_>
 8011b5c:	4603      	mov	r3, r0
  result =
 8011b5e:	681b      	ldr	r3, [r3, #0]
 8011b60:	617b      	str	r3, [r7, #20]
  return result;
 8011b62:	697b      	ldr	r3, [r7, #20]
 8011b64:	b2db      	uxtb	r3, r3
}
 8011b66:	4618      	mov	r0, r3
 8011b68:	3720      	adds	r7, #32
 8011b6a:	46bd      	mov	sp, r7
 8011b6c:	bdb0      	pop	{r4, r5, r7, pc}

08011b6e <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>:
inline void Relu6Quantized(Q lower, Q upper, const RuntimeShape& input_shape,
 8011b6e:	b580      	push	{r7, lr}
 8011b70:	b088      	sub	sp, #32
 8011b72:	af00      	add	r7, sp, #0
 8011b74:	60ba      	str	r2, [r7, #8]
 8011b76:	607b      	str	r3, [r7, #4]
 8011b78:	4603      	mov	r3, r0
 8011b7a:	73fb      	strb	r3, [r7, #15]
 8011b7c:	460b      	mov	r3, r1
 8011b7e:	73bb      	strb	r3, [r7, #14]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 8011b80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011b82:	68b8      	ldr	r0, [r7, #8]
 8011b84:	f7ff f907 	bl	8010d96 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 8011b88:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 8011b8a:	2300      	movs	r3, #0
 8011b8c:	61fb      	str	r3, [r7, #28]
 8011b8e:	69fa      	ldr	r2, [r7, #28]
 8011b90:	69bb      	ldr	r3, [r7, #24]
 8011b92:	429a      	cmp	r2, r3
 8011b94:	da26      	bge.n	8011be4 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x76>
    const Q val = input_data[i];
 8011b96:	69fb      	ldr	r3, [r7, #28]
 8011b98:	687a      	ldr	r2, [r7, #4]
 8011b9a:	4413      	add	r3, r2
 8011b9c:	781b      	ldrb	r3, [r3, #0]
 8011b9e:	75fb      	strb	r3, [r7, #23]
    const Q clamped = val > upper ? upper : val < lower ? lower : val;
 8011ba0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011ba4:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8011ba8:	429a      	cmp	r2, r3
 8011baa:	dd04      	ble.n	8011bb6 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x48>
 8011bac:	f107 030e 	add.w	r3, r7, #14
 8011bb0:	f993 3000 	ldrsb.w	r3, [r3]
 8011bb4:	e00c      	b.n	8011bd0 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x62>
 8011bb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011bba:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8011bbe:	429a      	cmp	r2, r3
 8011bc0:	da04      	bge.n	8011bcc <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x5e>
 8011bc2:	f107 030f 	add.w	r3, r7, #15
 8011bc6:	f993 3000 	ldrsb.w	r3, [r3]
 8011bca:	e001      	b.n	8011bd0 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x62>
 8011bcc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011bd0:	75bb      	strb	r3, [r7, #22]
    output_data[i] = clamped;
 8011bd2:	69fb      	ldr	r3, [r7, #28]
 8011bd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011bd6:	4413      	add	r3, r2
 8011bd8:	7dba      	ldrb	r2, [r7, #22]
 8011bda:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 8011bdc:	69fb      	ldr	r3, [r7, #28]
 8011bde:	3301      	adds	r3, #1
 8011be0:	61fb      	str	r3, [r7, #28]
 8011be2:	e7d4      	b.n	8011b8e <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x20>
}
 8011be4:	bf00      	nop
 8011be6:	3720      	adds	r7, #32
 8011be8:	46bd      	mov	sp, r7
 8011bea:	bd80      	pop	{r7, pc}

08011bec <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>:
inline void Relu6Quantized(Q lower, Q upper, const RuntimeShape& input_shape,
 8011bec:	b580      	push	{r7, lr}
 8011bee:	b088      	sub	sp, #32
 8011bf0:	af00      	add	r7, sp, #0
 8011bf2:	60ba      	str	r2, [r7, #8]
 8011bf4:	607b      	str	r3, [r7, #4]
 8011bf6:	4603      	mov	r3, r0
 8011bf8:	73fb      	strb	r3, [r7, #15]
 8011bfa:	460b      	mov	r3, r1
 8011bfc:	73bb      	strb	r3, [r7, #14]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 8011bfe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011c00:	68b8      	ldr	r0, [r7, #8]
 8011c02:	f7ff f8c8 	bl	8010d96 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 8011c06:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 8011c08:	2300      	movs	r3, #0
 8011c0a:	61fb      	str	r3, [r7, #28]
 8011c0c:	69fa      	ldr	r2, [r7, #28]
 8011c0e:	69bb      	ldr	r3, [r7, #24]
 8011c10:	429a      	cmp	r2, r3
 8011c12:	da1f      	bge.n	8011c54 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x68>
    const Q val = input_data[i];
 8011c14:	69fb      	ldr	r3, [r7, #28]
 8011c16:	687a      	ldr	r2, [r7, #4]
 8011c18:	4413      	add	r3, r2
 8011c1a:	781b      	ldrb	r3, [r3, #0]
 8011c1c:	75fb      	strb	r3, [r7, #23]
    const Q clamped = val > upper ? upper : val < lower ? lower : val;
 8011c1e:	7bbb      	ldrb	r3, [r7, #14]
 8011c20:	7dfa      	ldrb	r2, [r7, #23]
 8011c22:	429a      	cmp	r2, r3
 8011c24:	d903      	bls.n	8011c2e <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x42>
 8011c26:	f107 030e 	add.w	r3, r7, #14
 8011c2a:	781b      	ldrb	r3, [r3, #0]
 8011c2c:	e008      	b.n	8011c40 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x54>
 8011c2e:	7bfb      	ldrb	r3, [r7, #15]
 8011c30:	7dfa      	ldrb	r2, [r7, #23]
 8011c32:	429a      	cmp	r2, r3
 8011c34:	d203      	bcs.n	8011c3e <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x52>
 8011c36:	f107 030f 	add.w	r3, r7, #15
 8011c3a:	781b      	ldrb	r3, [r3, #0]
 8011c3c:	e000      	b.n	8011c40 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x54>
 8011c3e:	7dfb      	ldrb	r3, [r7, #23]
 8011c40:	75bb      	strb	r3, [r7, #22]
    output_data[i] = clamped;
 8011c42:	69fb      	ldr	r3, [r7, #28]
 8011c44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011c46:	4413      	add	r3, r2
 8011c48:	7dba      	ldrb	r2, [r7, #22]
 8011c4a:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 8011c4c:	69fb      	ldr	r3, [r7, #28]
 8011c4e:	3301      	adds	r3, #1
 8011c50:	61fb      	str	r3, [r7, #28]
 8011c52:	e7db      	b.n	8011c0c <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x20>
}
 8011c54:	bf00      	nop
 8011c56:	3720      	adds	r7, #32
 8011c58:	46bd      	mov	sp, r7
 8011c5a:	bd80      	pop	{r7, pc}

08011c5c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>:
tRawType Dup(typename FixedPointRawTypeTraits<tRawType>::ScalarRawType x) {
 8011c5c:	b480      	push	{r7}
 8011c5e:	b083      	sub	sp, #12
 8011c60:	af00      	add	r7, sp, #0
 8011c62:	6078      	str	r0, [r7, #4]
  return x;
 8011c64:	687b      	ldr	r3, [r7, #4]
}
 8011c66:	4618      	mov	r0, r3
 8011c68:	370c      	adds	r7, #12
 8011c6a:	46bd      	mov	sp, r7
 8011c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c70:	4770      	bx	lr

08011c72 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>:
tIntegerType BitAnd(tIntegerType a, tIntegerType b) {
 8011c72:	b480      	push	{r7}
 8011c74:	b083      	sub	sp, #12
 8011c76:	af00      	add	r7, sp, #0
 8011c78:	6078      	str	r0, [r7, #4]
 8011c7a:	6039      	str	r1, [r7, #0]
  return a & b;
 8011c7c:	687a      	ldr	r2, [r7, #4]
 8011c7e:	683b      	ldr	r3, [r7, #0]
 8011c80:	4013      	ands	r3, r2
}
 8011c82:	4618      	mov	r0, r3
 8011c84:	370c      	adds	r7, #12
 8011c86:	46bd      	mov	sp, r7
 8011c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c8c:	4770      	bx	lr

08011c8e <_ZN8gemmlowp10ShiftRightIlEET_S1_i>:
tIntegerType ShiftRight(tIntegerType a, int offset) {
 8011c8e:	b480      	push	{r7}
 8011c90:	b083      	sub	sp, #12
 8011c92:	af00      	add	r7, sp, #0
 8011c94:	6078      	str	r0, [r7, #4]
 8011c96:	6039      	str	r1, [r7, #0]
  return a >> offset;
 8011c98:	687a      	ldr	r2, [r7, #4]
 8011c9a:	683b      	ldr	r3, [r7, #0]
 8011c9c:	fa42 f303 	asr.w	r3, r2, r3
}
 8011ca0:	4618      	mov	r0, r3
 8011ca2:	370c      	adds	r7, #12
 8011ca4:	46bd      	mov	sp, r7
 8011ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011caa:	4770      	bx	lr

08011cac <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>:
tIntegerType MaskIfLessThan(tIntegerType a, tIntegerType b) {
 8011cac:	b580      	push	{r7, lr}
 8011cae:	b082      	sub	sp, #8
 8011cb0:	af00      	add	r7, sp, #0
 8011cb2:	6078      	str	r0, [r7, #4]
 8011cb4:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a < b);
 8011cb6:	687a      	ldr	r2, [r7, #4]
 8011cb8:	683b      	ldr	r3, [r7, #0]
 8011cba:	429a      	cmp	r2, r3
 8011cbc:	bfb4      	ite	lt
 8011cbe:	2301      	movlt	r3, #1
 8011cc0:	2300      	movge	r3, #0
 8011cc2:	b2db      	uxtb	r3, r3
 8011cc4:	4618      	mov	r0, r3
 8011cc6:	f000 f827 	bl	8011d18 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8011cca:	4603      	mov	r3, r0
}
 8011ccc:	4618      	mov	r0, r3
 8011cce:	3708      	adds	r7, #8
 8011cd0:	46bd      	mov	sp, r7
 8011cd2:	bd80      	pop	{r7, pc}

08011cd4 <_ZN8gemmlowp3AddIlEET_S1_S1_>:
tIntegerType Add(tIntegerType a, tIntegerType b) {
 8011cd4:	b480      	push	{r7}
 8011cd6:	b083      	sub	sp, #12
 8011cd8:	af00      	add	r7, sp, #0
 8011cda:	6078      	str	r0, [r7, #4]
 8011cdc:	6039      	str	r1, [r7, #0]
  return a + b;
 8011cde:	687a      	ldr	r2, [r7, #4]
 8011ce0:	683b      	ldr	r3, [r7, #0]
 8011ce2:	4413      	add	r3, r2
}
 8011ce4:	4618      	mov	r0, r3
 8011ce6:	370c      	adds	r7, #12
 8011ce8:	46bd      	mov	sp, r7
 8011cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cee:	4770      	bx	lr

08011cf0 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>:
tIntegerType MaskIfGreaterThan(tIntegerType a, tIntegerType b) {
 8011cf0:	b580      	push	{r7, lr}
 8011cf2:	b082      	sub	sp, #8
 8011cf4:	af00      	add	r7, sp, #0
 8011cf6:	6078      	str	r0, [r7, #4]
 8011cf8:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a > b);
 8011cfa:	687a      	ldr	r2, [r7, #4]
 8011cfc:	683b      	ldr	r3, [r7, #0]
 8011cfe:	429a      	cmp	r2, r3
 8011d00:	bfcc      	ite	gt
 8011d02:	2301      	movgt	r3, #1
 8011d04:	2300      	movle	r3, #0
 8011d06:	b2db      	uxtb	r3, r3
 8011d08:	4618      	mov	r0, r3
 8011d0a:	f000 f805 	bl	8011d18 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8011d0e:	4603      	mov	r3, r0
}
 8011d10:	4618      	mov	r0, r3
 8011d12:	3708      	adds	r7, #8
 8011d14:	46bd      	mov	sp, r7
 8011d16:	bd80      	pop	{r7, pc}

08011d18 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>:
tIntegerType MaskIfNonZero(tIntegerType a) {
 8011d18:	b580      	push	{r7, lr}
 8011d1a:	b082      	sub	sp, #8
 8011d1c:	af00      	add	r7, sp, #0
 8011d1e:	6078      	str	r0, [r7, #4]
  return a ? BitNot(zero) : zero;
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	2b00      	cmp	r3, #0
 8011d24:	d004      	beq.n	8011d30 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x18>
 8011d26:	2000      	movs	r0, #0
 8011d28:	f000 f807 	bl	8011d3a <_ZN8gemmlowp6BitNotIlEET_S1_>
 8011d2c:	4603      	mov	r3, r0
 8011d2e:	e000      	b.n	8011d32 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x1a>
 8011d30:	2300      	movs	r3, #0
}
 8011d32:	4618      	mov	r0, r3
 8011d34:	3708      	adds	r7, #8
 8011d36:	46bd      	mov	sp, r7
 8011d38:	bd80      	pop	{r7, pc}

08011d3a <_ZN8gemmlowp6BitNotIlEET_S1_>:
tIntegerType BitNot(tIntegerType a) {
 8011d3a:	b480      	push	{r7}
 8011d3c:	b083      	sub	sp, #12
 8011d3e:	af00      	add	r7, sp, #0
 8011d40:	6078      	str	r0, [r7, #4]
  return ~a;
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	43db      	mvns	r3, r3
}
 8011d46:	4618      	mov	r0, r3
 8011d48:	370c      	adds	r7, #12
 8011d4a:	46bd      	mov	sp, r7
 8011d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d50:	4770      	bx	lr

08011d52 <_ZN6tflite9NumInputsEPK10TfLiteNode>:
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
 8011d52:	b480      	push	{r7}
 8011d54:	b083      	sub	sp, #12
 8011d56:	af00      	add	r7, sp, #0
 8011d58:	6078      	str	r0, [r7, #4]
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	681b      	ldr	r3, [r3, #0]
 8011d5e:	681b      	ldr	r3, [r3, #0]
 8011d60:	4618      	mov	r0, r3
 8011d62:	370c      	adds	r7, #12
 8011d64:	46bd      	mov	sp, r7
 8011d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d6a:	4770      	bx	lr

08011d6c <_ZN6tflite10NumOutputsEPK10TfLiteNode>:
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
 8011d6c:	b480      	push	{r7}
 8011d6e:	b083      	sub	sp, #12
 8011d70:	af00      	add	r7, sp, #0
 8011d72:	6078      	str	r0, [r7, #4]
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	685b      	ldr	r3, [r3, #4]
 8011d78:	681b      	ldr	r3, [r3, #0]
 8011d7a:	4618      	mov	r0, r3
 8011d7c:	370c      	adds	r7, #12
 8011d7e:	46bd      	mov	sp, r7
 8011d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d84:	4770      	bx	lr

08011d86 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 8011d86:	b580      	push	{r7, lr}
 8011d88:	b082      	sub	sp, #8
 8011d8a:	af00      	add	r7, sp, #0
 8011d8c:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	d101      	bne.n	8011d98 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor+0x12>
 8011d94:	f013 fe57 	bl	8025a46 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	681b      	ldr	r3, [r3, #0]
}
 8011d9c:	4618      	mov	r0, r3
 8011d9e:	3708      	adds	r7, #8
 8011da0:	46bd      	mov	sp, r7
 8011da2:	bd80      	pop	{r7, pc}

08011da4 <_ZNK6tflite12RuntimeShape14DimsDataUpTo5DEv>:
  inline const int32_t* DimsDataUpTo5D() const { return dims_; }
 8011da4:	b480      	push	{r7}
 8011da6:	b083      	sub	sp, #12
 8011da8:	af00      	add	r7, sp, #0
 8011daa:	6078      	str	r0, [r7, #4]
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	3304      	adds	r3, #4
 8011db0:	4618      	mov	r0, r3
 8011db2:	370c      	adds	r7, #12
 8011db4:	46bd      	mov	sp, r7
 8011db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dba:	4770      	bx	lr

08011dbc <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>:
inline int Offset(const RuntimeShape& shape, int i0, int i1, int i2, int i3) {
 8011dbc:	b580      	push	{r7, lr}
 8011dbe:	b086      	sub	sp, #24
 8011dc0:	af00      	add	r7, sp, #0
 8011dc2:	60f8      	str	r0, [r7, #12]
 8011dc4:	60b9      	str	r1, [r7, #8]
 8011dc6:	607a      	str	r2, [r7, #4]
 8011dc8:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
 8011dca:	68f8      	ldr	r0, [r7, #12]
 8011dcc:	f7fa f86b 	bl	800bea6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8011dd0:	4603      	mov	r3, r0
 8011dd2:	2b04      	cmp	r3, #4
 8011dd4:	d001      	beq.n	8011dda <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x1e>
 8011dd6:	f013 fe36 	bl	8025a46 <abort>
  const int* dims_data = reinterpret_cast<const int*>(shape.DimsDataUpTo5D());
 8011dda:	68f8      	ldr	r0, [r7, #12]
 8011ddc:	f7ff ffe2 	bl	8011da4 <_ZNK6tflite12RuntimeShape14DimsDataUpTo5DEv>
 8011de0:	6178      	str	r0, [r7, #20]
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
 8011de2:	68bb      	ldr	r3, [r7, #8]
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	db04      	blt.n	8011df2 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x36>
 8011de8:	697b      	ldr	r3, [r7, #20]
 8011dea:	681b      	ldr	r3, [r3, #0]
 8011dec:	68ba      	ldr	r2, [r7, #8]
 8011dee:	429a      	cmp	r2, r3
 8011df0:	db01      	blt.n	8011df6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x3a>
 8011df2:	f013 fe28 	bl	8025a46 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	db05      	blt.n	8011e08 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x4c>
 8011dfc:	697b      	ldr	r3, [r7, #20]
 8011dfe:	3304      	adds	r3, #4
 8011e00:	681b      	ldr	r3, [r3, #0]
 8011e02:	687a      	ldr	r2, [r7, #4]
 8011e04:	429a      	cmp	r2, r3
 8011e06:	db01      	blt.n	8011e0c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x50>
 8011e08:	f013 fe1d 	bl	8025a46 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
 8011e0c:	683b      	ldr	r3, [r7, #0]
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	db05      	blt.n	8011e1e <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x62>
 8011e12:	697b      	ldr	r3, [r7, #20]
 8011e14:	3308      	adds	r3, #8
 8011e16:	681b      	ldr	r3, [r3, #0]
 8011e18:	683a      	ldr	r2, [r7, #0]
 8011e1a:	429a      	cmp	r2, r3
 8011e1c:	db01      	blt.n	8011e22 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x66>
 8011e1e:	f013 fe12 	bl	8025a46 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
 8011e22:	6a3b      	ldr	r3, [r7, #32]
 8011e24:	2b00      	cmp	r3, #0
 8011e26:	db05      	blt.n	8011e34 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x78>
 8011e28:	697b      	ldr	r3, [r7, #20]
 8011e2a:	330c      	adds	r3, #12
 8011e2c:	681b      	ldr	r3, [r3, #0]
 8011e2e:	6a3a      	ldr	r2, [r7, #32]
 8011e30:	429a      	cmp	r2, r3
 8011e32:	db01      	blt.n	8011e38 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x7c>
 8011e34:	f013 fe07 	bl	8025a46 <abort>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
 8011e38:	697b      	ldr	r3, [r7, #20]
 8011e3a:	3304      	adds	r3, #4
 8011e3c:	681b      	ldr	r3, [r3, #0]
 8011e3e:	68ba      	ldr	r2, [r7, #8]
 8011e40:	fb02 f203 	mul.w	r2, r2, r3
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	4413      	add	r3, r2
 8011e48:	697a      	ldr	r2, [r7, #20]
 8011e4a:	3208      	adds	r2, #8
 8011e4c:	6812      	ldr	r2, [r2, #0]
 8011e4e:	fb02 f203 	mul.w	r2, r2, r3
 8011e52:	683b      	ldr	r3, [r7, #0]
 8011e54:	4413      	add	r3, r2
 8011e56:	697a      	ldr	r2, [r7, #20]
 8011e58:	320c      	adds	r2, #12
 8011e5a:	6812      	ldr	r2, [r2, #0]
 8011e5c:	fb02 f203 	mul.w	r2, r2, r3
 8011e60:	6a3b      	ldr	r3, [r7, #32]
 8011e62:	4413      	add	r3, r2
}
 8011e64:	4618      	mov	r0, r3
 8011e66:	3718      	adds	r7, #24
 8011e68:	46bd      	mov	sp, r7
 8011e6a:	bd80      	pop	{r7, pc}

08011e6c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>:
                       const RuntimeShape& shape2, int index2) {
 8011e6c:	b590      	push	{r4, r7, lr}
 8011e6e:	b087      	sub	sp, #28
 8011e70:	af00      	add	r7, sp, #0
 8011e72:	60f8      	str	r0, [r7, #12]
 8011e74:	60b9      	str	r1, [r7, #8]
 8011e76:	607a      	str	r2, [r7, #4]
 8011e78:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 8011e7a:	68b9      	ldr	r1, [r7, #8]
 8011e7c:	68f8      	ldr	r0, [r7, #12]
 8011e7e:	f7fe ff2f 	bl	8010ce0 <_ZNK6tflite12RuntimeShape4DimsEi>
 8011e82:	4604      	mov	r4, r0
 8011e84:	6839      	ldr	r1, [r7, #0]
 8011e86:	6878      	ldr	r0, [r7, #4]
 8011e88:	f7fe ff2a 	bl	8010ce0 <_ZNK6tflite12RuntimeShape4DimsEi>
 8011e8c:	4603      	mov	r3, r0
 8011e8e:	429c      	cmp	r4, r3
 8011e90:	d001      	beq.n	8011e96 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i+0x2a>
 8011e92:	f013 fdd8 	bl	8025a46 <abort>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
 8011e96:	68b9      	ldr	r1, [r7, #8]
 8011e98:	68f8      	ldr	r0, [r7, #12]
 8011e9a:	f7fe ff21 	bl	8010ce0 <_ZNK6tflite12RuntimeShape4DimsEi>
 8011e9e:	4603      	mov	r3, r0
 8011ea0:	613b      	str	r3, [r7, #16]
 8011ea2:	6839      	ldr	r1, [r7, #0]
 8011ea4:	6878      	ldr	r0, [r7, #4]
 8011ea6:	f7fe ff1b 	bl	8010ce0 <_ZNK6tflite12RuntimeShape4DimsEi>
 8011eaa:	4603      	mov	r3, r0
 8011eac:	617b      	str	r3, [r7, #20]
 8011eae:	f107 0214 	add.w	r2, r7, #20
 8011eb2:	f107 0310 	add.w	r3, r7, #16
 8011eb6:	4611      	mov	r1, r2
 8011eb8:	4618      	mov	r0, r3
 8011eba:	f7f9 fe63 	bl	800bb84 <_ZSt3minIlERKT_S2_S2_>
 8011ebe:	4603      	mov	r3, r0
 8011ec0:	681b      	ldr	r3, [r3, #0]
}
 8011ec2:	4618      	mov	r0, r3
 8011ec4:	371c      	adds	r7, #28
 8011ec6:	46bd      	mov	sp, r7
 8011ec8:	bd90      	pop	{r4, r7, pc}
	...

08011ecc <_ZNSt14numeric_limitsIfE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __FLT_MAX__; }
 8011ecc:	b480      	push	{r7}
 8011ece:	af00      	add	r7, sp, #0
 8011ed0:	4b04      	ldr	r3, [pc, #16]	; (8011ee4 <_ZNSt14numeric_limitsIfE3maxEv+0x18>)
 8011ed2:	ee07 3a90 	vmov	s15, r3
 8011ed6:	eeb0 0a67 	vmov.f32	s0, s15
 8011eda:	46bd      	mov	sp, r7
 8011edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ee0:	4770      	bx	lr
 8011ee2:	bf00      	nop
 8011ee4:	7f7fffff 	.word	0x7f7fffff

08011ee8 <_ZNSt14numeric_limitsIfE6lowestEv>:
      lowest() noexcept { return -__FLT_MAX__; }
 8011ee8:	b480      	push	{r7}
 8011eea:	af00      	add	r7, sp, #0
 8011eec:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 8011ef0:	ee07 3a90 	vmov	s15, r3
 8011ef4:	eeb0 0a67 	vmov.f32	s0, s15
 8011ef8:	46bd      	mov	sp, r7
 8011efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011efe:	4770      	bx	lr

08011f00 <_ZN6tflite24ComputePaddingWithOffsetEiiiiiPi>:

// It's not guaranteed that padding is symmetric. It's important to keep
// offset for algorithms need all paddings.
inline int ComputePaddingWithOffset(int stride, int dilation_rate, int in_size,
                                    int filter_size, int out_size,
                                    int* offset) {
 8011f00:	b480      	push	{r7}
 8011f02:	b087      	sub	sp, #28
 8011f04:	af00      	add	r7, sp, #0
 8011f06:	60f8      	str	r0, [r7, #12]
 8011f08:	60b9      	str	r1, [r7, #8]
 8011f0a:	607a      	str	r2, [r7, #4]
 8011f0c:	603b      	str	r3, [r7, #0]
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 8011f0e:	683b      	ldr	r3, [r7, #0]
 8011f10:	3b01      	subs	r3, #1
 8011f12:	68ba      	ldr	r2, [r7, #8]
 8011f14:	fb02 f303 	mul.w	r3, r2, r3
 8011f18:	3301      	adds	r3, #1
 8011f1a:	617b      	str	r3, [r7, #20]
  int total_padding =
      ((out_size - 1) * stride + effective_filter_size - in_size);
 8011f1c:	6a3b      	ldr	r3, [r7, #32]
 8011f1e:	3b01      	subs	r3, #1
 8011f20:	68fa      	ldr	r2, [r7, #12]
 8011f22:	fb02 f203 	mul.w	r2, r2, r3
 8011f26:	697b      	ldr	r3, [r7, #20]
 8011f28:	441a      	add	r2, r3
  int total_padding =
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	1ad3      	subs	r3, r2, r3
 8011f2e:	613b      	str	r3, [r7, #16]
  total_padding = total_padding > 0 ? total_padding : 0;
 8011f30:	693b      	ldr	r3, [r7, #16]
 8011f32:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011f36:	613b      	str	r3, [r7, #16]
  *offset = total_padding % 2;
 8011f38:	693b      	ldr	r3, [r7, #16]
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	f003 0301 	and.w	r3, r3, #1
 8011f40:	bfb8      	it	lt
 8011f42:	425b      	neglt	r3, r3
 8011f44:	461a      	mov	r2, r3
 8011f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f48:	601a      	str	r2, [r3, #0]
  return total_padding / 2;
 8011f4a:	693b      	ldr	r3, [r7, #16]
 8011f4c:	0fda      	lsrs	r2, r3, #31
 8011f4e:	4413      	add	r3, r2
 8011f50:	105b      	asrs	r3, r3, #1
}
 8011f52:	4618      	mov	r0, r3
 8011f54:	371c      	adds	r7, #28
 8011f56:	46bd      	mov	sp, r7
 8011f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f5c:	4770      	bx	lr

08011f5e <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>:

// Matching GetWindowedOutputSize in TensorFlow.
inline int ComputeOutSize(TfLitePadding padding, int image_size,
                          int filter_size, int stride, int dilation_rate = 1) {
 8011f5e:	b480      	push	{r7}
 8011f60:	b087      	sub	sp, #28
 8011f62:	af00      	add	r7, sp, #0
 8011f64:	60b9      	str	r1, [r7, #8]
 8011f66:	607a      	str	r2, [r7, #4]
 8011f68:	603b      	str	r3, [r7, #0]
 8011f6a:	4603      	mov	r3, r0
 8011f6c:	73fb      	strb	r3, [r7, #15]
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	3b01      	subs	r3, #1
 8011f72:	6a3a      	ldr	r2, [r7, #32]
 8011f74:	fb02 f303 	mul.w	r3, r2, r3
 8011f78:	3301      	adds	r3, #1
 8011f7a:	617b      	str	r3, [r7, #20]

  // TODO(b/186448822): This uses 0 since the function has no other way to
  // report error case
  if (stride == 0) return 0;
 8011f7c:	683b      	ldr	r3, [r7, #0]
 8011f7e:	2b00      	cmp	r3, #0
 8011f80:	d101      	bne.n	8011f86 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x28>
 8011f82:	2300      	movs	r3, #0
 8011f84:	e017      	b.n	8011fb6 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x58>

  switch (padding) {
 8011f86:	7bfb      	ldrb	r3, [r7, #15]
 8011f88:	2b01      	cmp	r3, #1
 8011f8a:	d002      	beq.n	8011f92 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x34>
 8011f8c:	2b02      	cmp	r3, #2
 8011f8e:	d008      	beq.n	8011fa2 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x44>
 8011f90:	e010      	b.n	8011fb4 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x56>
    case kTfLitePaddingSame:
      return (image_size + stride - 1) / stride;
 8011f92:	68ba      	ldr	r2, [r7, #8]
 8011f94:	683b      	ldr	r3, [r7, #0]
 8011f96:	4413      	add	r3, r2
 8011f98:	1e5a      	subs	r2, r3, #1
 8011f9a:	683b      	ldr	r3, [r7, #0]
 8011f9c:	fb92 f3f3 	sdiv	r3, r2, r3
 8011fa0:	e009      	b.n	8011fb6 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x58>
    case kTfLitePaddingValid:
      return (image_size + stride - effective_filter_size) / stride;
 8011fa2:	68ba      	ldr	r2, [r7, #8]
 8011fa4:	683b      	ldr	r3, [r7, #0]
 8011fa6:	441a      	add	r2, r3
 8011fa8:	697b      	ldr	r3, [r7, #20]
 8011faa:	1ad2      	subs	r2, r2, r3
 8011fac:	683b      	ldr	r3, [r7, #0]
 8011fae:	fb92 f3f3 	sdiv	r3, r2, r3
 8011fb2:	e000      	b.n	8011fb6 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x58>
    default:
      return 0;
 8011fb4:	2300      	movs	r3, #0
  }
}
 8011fb6:	4618      	mov	r0, r3
 8011fb8:	371c      	adds	r7, #28
 8011fba:	46bd      	mov	sp, r7
 8011fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fc0:	4770      	bx	lr

08011fc2 <_ZN6tflite25ComputePaddingHeightWidthEiiiiiiii13TfLitePaddingPiS1_>:

inline TfLitePaddingValues ComputePaddingHeightWidth(
    int stride_height, int stride_width, int dilation_rate_height,
    int dilation_rate_width, int in_height, int in_width, int filter_height,
    int filter_width, TfLitePadding padding, int* out_height, int* out_width) {
 8011fc2:	b580      	push	{r7, lr}
 8011fc4:	b088      	sub	sp, #32
 8011fc6:	af02      	add	r7, sp, #8
 8011fc8:	60f8      	str	r0, [r7, #12]
 8011fca:	60b9      	str	r1, [r7, #8]
 8011fcc:	607a      	str	r2, [r7, #4]
 8011fce:	603b      	str	r3, [r7, #0]
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
 8011fd0:	f897 0034 	ldrb.w	r0, [r7, #52]	; 0x34
 8011fd4:	6a3b      	ldr	r3, [r7, #32]
 8011fd6:	9300      	str	r3, [sp, #0]
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011fdc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011fde:	f7ff ffbe 	bl	8011f5e <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
 8011fe2:	4602      	mov	r2, r0
 8011fe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011fe6:	601a      	str	r2, [r3, #0]
                              dilation_rate_width);
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
 8011fe8:	f897 0034 	ldrb.w	r0, [r7, #52]	; 0x34
 8011fec:	683b      	ldr	r3, [r7, #0]
 8011fee:	9300      	str	r3, [sp, #0]
 8011ff0:	68bb      	ldr	r3, [r7, #8]
 8011ff2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011ff4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011ff6:	f7ff ffb2 	bl	8011f5e <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
 8011ffa:	4602      	mov	r2, r0
 8011ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ffe:	601a      	str	r2, [r3, #0]
                               dilation_rate_height);

  TfLitePaddingValues padding_values;
  int offset = 0;
 8012000:	2300      	movs	r3, #0
 8012002:	617b      	str	r3, [r7, #20]
  padding_values.height =
      ComputePaddingWithOffset(stride_height, dilation_rate_height, in_height,
 8012004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012006:	681b      	ldr	r3, [r3, #0]
 8012008:	f107 0214 	add.w	r2, r7, #20
 801200c:	9201      	str	r2, [sp, #4]
 801200e:	9300      	str	r3, [sp, #0]
 8012010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012012:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012014:	6839      	ldr	r1, [r7, #0]
 8012016:	68b8      	ldr	r0, [r7, #8]
 8012018:	f7ff ff72 	bl	8011f00 <_ZN6tflite24ComputePaddingWithOffsetEiiiiiPi>
 801201c:	4602      	mov	r2, r0
  padding_values.height =
 801201e:	68fb      	ldr	r3, [r7, #12]
 8012020:	605a      	str	r2, [r3, #4]
                               filter_height, *out_height, &offset);
  padding_values.height_offset = offset;
 8012022:	697a      	ldr	r2, [r7, #20]
 8012024:	68fb      	ldr	r3, [r7, #12]
 8012026:	60da      	str	r2, [r3, #12]
  padding_values.width =
      ComputePaddingWithOffset(stride_width, dilation_rate_width, in_width,
 8012028:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801202a:	681b      	ldr	r3, [r3, #0]
 801202c:	f107 0214 	add.w	r2, r7, #20
 8012030:	9201      	str	r2, [sp, #4]
 8012032:	9300      	str	r3, [sp, #0]
 8012034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012036:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012038:	6a39      	ldr	r1, [r7, #32]
 801203a:	6878      	ldr	r0, [r7, #4]
 801203c:	f7ff ff60 	bl	8011f00 <_ZN6tflite24ComputePaddingWithOffsetEiiiiiPi>
 8012040:	4602      	mov	r2, r0
  padding_values.width =
 8012042:	68fb      	ldr	r3, [r7, #12]
 8012044:	601a      	str	r2, [r3, #0]
                               filter_width, *out_width, &offset);
  padding_values.width_offset = offset;
 8012046:	697a      	ldr	r2, [r7, #20]
 8012048:	68fb      	ldr	r3, [r7, #12]
 801204a:	609a      	str	r2, [r3, #8]
  return padding_values;
 801204c:	bf00      	nop
}
 801204e:	68f8      	ldr	r0, [r7, #12]
 8012050:	3718      	adds	r7, #24
 8012052:	46bd      	mov	sp, r7
 8012054:	bd80      	pop	{r7, pc}

08012056 <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE>:
const int kConvQuantizedDimension = 0;

// Returns a ConvParams struct with all the parameters needed for a
// float computation.
ConvParams ConvParamsFloat(const TfLiteConvParams& params,
                           const OpDataConv& data) {
 8012056:	b580      	push	{r7, lr}
 8012058:	b084      	sub	sp, #16
 801205a:	af00      	add	r7, sp, #0
 801205c:	60f8      	str	r0, [r7, #12]
 801205e:	60b9      	str	r1, [r7, #8]
 8012060:	607a      	str	r2, [r7, #4]
  ConvParams op_params;
  CalculateActivationRange(params.activation, &op_params.float_activation_min,
 8012062:	68bb      	ldr	r3, [r7, #8]
 8012064:	7b18      	ldrb	r0, [r3, #12]
 8012066:	68fb      	ldr	r3, [r7, #12]
 8012068:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801206c:	68fb      	ldr	r3, [r7, #12]
 801206e:	3330      	adds	r3, #48	; 0x30
 8012070:	4619      	mov	r1, r3
 8012072:	f000 f97f 	bl	8012374 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
                           &op_params.float_activation_max);
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
 8012076:	68bb      	ldr	r3, [r7, #8]
 8012078:	781b      	ldrb	r3, [r3, #0]
 801207a:	4618      	mov	r0, r3
 801207c:	f000 fbd1 	bl	8012822 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>
 8012080:	4603      	mov	r3, r0
 8012082:	461a      	mov	r2, r3
 8012084:	68fb      	ldr	r3, [r7, #12]
 8012086:	701a      	strb	r2, [r3, #0]
  op_params.padding_values.width = data.padding.width;
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	681b      	ldr	r3, [r3, #0]
 801208c:	b21a      	sxth	r2, r3
 801208e:	68fb      	ldr	r3, [r7, #12]
 8012090:	805a      	strh	r2, [r3, #2]
  op_params.padding_values.height = data.padding.height;
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	685b      	ldr	r3, [r3, #4]
 8012096:	b21a      	sxth	r2, r3
 8012098:	68fb      	ldr	r3, [r7, #12]
 801209a:	809a      	strh	r2, [r3, #4]
  op_params.stride_width = params.stride_width;
 801209c:	68bb      	ldr	r3, [r7, #8]
 801209e:	685b      	ldr	r3, [r3, #4]
 80120a0:	b21a      	sxth	r2, r3
 80120a2:	68fb      	ldr	r3, [r7, #12]
 80120a4:	815a      	strh	r2, [r3, #10]
  op_params.stride_height = params.stride_height;
 80120a6:	68bb      	ldr	r3, [r7, #8]
 80120a8:	689b      	ldr	r3, [r3, #8]
 80120aa:	b21a      	sxth	r2, r3
 80120ac:	68fb      	ldr	r3, [r7, #12]
 80120ae:	819a      	strh	r2, [r3, #12]
  op_params.dilation_width_factor = params.dilation_width_factor;
 80120b0:	68bb      	ldr	r3, [r7, #8]
 80120b2:	691b      	ldr	r3, [r3, #16]
 80120b4:	b21a      	sxth	r2, r3
 80120b6:	68fb      	ldr	r3, [r7, #12]
 80120b8:	81da      	strh	r2, [r3, #14]
  op_params.dilation_height_factor = params.dilation_height_factor;
 80120ba:	68bb      	ldr	r3, [r7, #8]
 80120bc:	695b      	ldr	r3, [r3, #20]
 80120be:	b21a      	sxth	r2, r3
 80120c0:	68fb      	ldr	r3, [r7, #12]
 80120c2:	821a      	strh	r2, [r3, #16]
  return op_params;
 80120c4:	bf00      	nop
}
 80120c6:	68f8      	ldr	r0, [r7, #12]
 80120c8:	3710      	adds	r7, #16
 80120ca:	46bd      	mov	sp, r7
 80120cc:	bd80      	pop	{r7, pc}

080120ce <_ZN6tflite19ConvParamsQuantizedERK16TfLiteConvParamsRKNS_10OpDataConvE>:

// Returns a ConvParams struct with all the parameters needed for a
// quantized computation.
ConvParams ConvParamsQuantized(const TfLiteConvParams& params,
                               const OpDataConv& data) {
 80120ce:	b580      	push	{r7, lr}
 80120d0:	b084      	sub	sp, #16
 80120d2:	af00      	add	r7, sp, #0
 80120d4:	60f8      	str	r0, [r7, #12]
 80120d6:	60b9      	str	r1, [r7, #8]
 80120d8:	607a      	str	r2, [r7, #4]
  ConvParams op_params;
  op_params.input_offset = -data.input_zero_point;
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	691b      	ldr	r3, [r3, #16]
 80120de:	425a      	negs	r2, r3
 80120e0:	68fb      	ldr	r3, [r7, #12]
 80120e2:	615a      	str	r2, [r3, #20]
  op_params.weights_offset = -data.filter_zero_point;
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	695b      	ldr	r3, [r3, #20]
 80120e8:	425a      	negs	r2, r3
 80120ea:	68fb      	ldr	r3, [r7, #12]
 80120ec:	619a      	str	r2, [r3, #24]
  op_params.output_offset = data.output_zero_point;
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	699a      	ldr	r2, [r3, #24]
 80120f2:	68fb      	ldr	r3, [r7, #12]
 80120f4:	61da      	str	r2, [r3, #28]
  op_params.output_multiplier = data.output_multiplier;
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	69da      	ldr	r2, [r3, #28]
 80120fa:	68fb      	ldr	r3, [r7, #12]
 80120fc:	621a      	str	r2, [r3, #32]
  op_params.output_shift = -data.output_shift;
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	6a1b      	ldr	r3, [r3, #32]
 8012102:	425a      	negs	r2, r3
 8012104:	68fb      	ldr	r3, [r7, #12]
 8012106:	625a      	str	r2, [r3, #36]	; 0x24
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
 8012108:	68bb      	ldr	r3, [r7, #8]
 801210a:	781b      	ldrb	r3, [r3, #0]
 801210c:	4618      	mov	r0, r3
 801210e:	f000 fb88 	bl	8012822 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>
 8012112:	4603      	mov	r3, r0
 8012114:	461a      	mov	r2, r3
 8012116:	68fb      	ldr	r3, [r7, #12]
 8012118:	701a      	strb	r2, [r3, #0]
  op_params.padding_values.height = data.padding.height;
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	685b      	ldr	r3, [r3, #4]
 801211e:	b21a      	sxth	r2, r3
 8012120:	68fb      	ldr	r3, [r7, #12]
 8012122:	809a      	strh	r2, [r3, #4]
  op_params.padding_values.width = data.padding.width;
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	681b      	ldr	r3, [r3, #0]
 8012128:	b21a      	sxth	r2, r3
 801212a:	68fb      	ldr	r3, [r7, #12]
 801212c:	805a      	strh	r2, [r3, #2]
  op_params.stride_height = params.stride_height;
 801212e:	68bb      	ldr	r3, [r7, #8]
 8012130:	689b      	ldr	r3, [r3, #8]
 8012132:	b21a      	sxth	r2, r3
 8012134:	68fb      	ldr	r3, [r7, #12]
 8012136:	819a      	strh	r2, [r3, #12]
  op_params.stride_width = params.stride_width;
 8012138:	68bb      	ldr	r3, [r7, #8]
 801213a:	685b      	ldr	r3, [r3, #4]
 801213c:	b21a      	sxth	r2, r3
 801213e:	68fb      	ldr	r3, [r7, #12]
 8012140:	815a      	strh	r2, [r3, #10]
  op_params.dilation_height_factor = params.dilation_height_factor;
 8012142:	68bb      	ldr	r3, [r7, #8]
 8012144:	695b      	ldr	r3, [r3, #20]
 8012146:	b21a      	sxth	r2, r3
 8012148:	68fb      	ldr	r3, [r7, #12]
 801214a:	821a      	strh	r2, [r3, #16]
  op_params.dilation_width_factor = params.dilation_width_factor;
 801214c:	68bb      	ldr	r3, [r7, #8]
 801214e:	691b      	ldr	r3, [r3, #16]
 8012150:	b21a      	sxth	r2, r3
 8012152:	68fb      	ldr	r3, [r7, #12]
 8012154:	81da      	strh	r2, [r3, #14]
  op_params.quantized_activation_min = data.output_activation_min;
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801215a:	68fb      	ldr	r3, [r7, #12]
 801215c:	629a      	str	r2, [r3, #40]	; 0x28
  op_params.quantized_activation_max = data.output_activation_max;
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012162:	68fb      	ldr	r3, [r7, #12]
 8012164:	62da      	str	r2, [r3, #44]	; 0x2c
  return op_params;
 8012166:	bf00      	nop
}
 8012168:	68f8      	ldr	r0, [r7, #12]
 801216a:	3710      	adds	r7, #16
 801216c:	46bd      	mov	sp, r7
 801216e:	bd80      	pop	{r7, pc}

08012170 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>:
TfLiteStatus CalculateOpDataConv(TfLiteContext* context, TfLiteNode* node,
                                 const TfLiteConvParams& params, int width,
                                 int height, int filter_width,
                                 int filter_height, int out_width,
                                 int out_height, const TfLiteType data_type,
                                 OpDataConv* data) {
 8012170:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012172:	b09d      	sub	sp, #116	; 0x74
 8012174:	af0a      	add	r7, sp, #40	; 0x28
 8012176:	6278      	str	r0, [r7, #36]	; 0x24
 8012178:	6239      	str	r1, [r7, #32]
 801217a:	61fa      	str	r2, [r7, #28]
 801217c:	61bb      	str	r3, [r7, #24]
  bool has_bias = node->inputs->size == 3;
 801217e:	6a3b      	ldr	r3, [r7, #32]
 8012180:	681b      	ldr	r3, [r3, #0]
 8012182:	681b      	ldr	r3, [r3, #0]
 8012184:	2b03      	cmp	r3, #3
 8012186:	bf0c      	ite	eq
 8012188:	2301      	moveq	r3, #1
 801218a:	2300      	movne	r3, #0
 801218c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  // Check number of inputs/outputs
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
 8012190:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8012194:	f083 0301 	eor.w	r3, r3, #1
 8012198:	b2db      	uxtb	r3, r3
 801219a:	2b00      	cmp	r3, #0
 801219c:	d00f      	beq.n	80121be <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
 801219e:	6a3b      	ldr	r3, [r7, #32]
 80121a0:	681b      	ldr	r3, [r3, #0]
 80121a2:	681b      	ldr	r3, [r3, #0]
 80121a4:	2b02      	cmp	r3, #2
 80121a6:	d00a      	beq.n	80121be <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
 80121a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121aa:	695c      	ldr	r4, [r3, #20]
 80121ac:	4b68      	ldr	r3, [pc, #416]	; (8012350 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e0>)
 80121ae:	9300      	str	r3, [sp, #0]
 80121b0:	2356      	movs	r3, #86	; 0x56
 80121b2:	4a68      	ldr	r2, [pc, #416]	; (8012354 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e4>)
 80121b4:	4968      	ldr	r1, [pc, #416]	; (8012358 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e8>)
 80121b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80121b8:	47a0      	blx	r4
 80121ba:	2301      	movs	r3, #1
 80121bc:	e0c4      	b.n	8012348 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1d8>
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
 80121be:	6a3b      	ldr	r3, [r7, #32]
 80121c0:	685b      	ldr	r3, [r3, #4]
 80121c2:	681b      	ldr	r3, [r3, #0]
 80121c4:	2b01      	cmp	r3, #1
 80121c6:	d012      	beq.n	80121ee <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x7e>
 80121c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121ca:	695c      	ldr	r4, [r3, #20]
 80121cc:	6a3b      	ldr	r3, [r7, #32]
 80121ce:	685b      	ldr	r3, [r3, #4]
 80121d0:	681b      	ldr	r3, [r3, #0]
 80121d2:	2201      	movs	r2, #1
 80121d4:	9203      	str	r2, [sp, #12]
 80121d6:	9302      	str	r3, [sp, #8]
 80121d8:	4b60      	ldr	r3, [pc, #384]	; (801235c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1ec>)
 80121da:	9301      	str	r3, [sp, #4]
 80121dc:	4b60      	ldr	r3, [pc, #384]	; (8012360 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f0>)
 80121de:	9300      	str	r3, [sp, #0]
 80121e0:	2357      	movs	r3, #87	; 0x57
 80121e2:	4a5c      	ldr	r2, [pc, #368]	; (8012354 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e4>)
 80121e4:	495f      	ldr	r1, [pc, #380]	; (8012364 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f4>)
 80121e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80121e8:	47a0      	blx	r4
 80121ea:	2301      	movs	r3, #1
 80121ec:	e0ac      	b.n	8012348 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1d8>

  // Matching GetWindowedOutputSize in TensorFlow.
  auto padding = params.padding;
 80121ee:	69fb      	ldr	r3, [r7, #28]
 80121f0:	781b      	ldrb	r3, [r3, #0]
 80121f2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  data->padding = ComputePaddingHeightWidth(
      params.stride_height, params.stride_width, params.dilation_height_factor,
 80121f6:	69fb      	ldr	r3, [r7, #28]
 80121f8:	6899      	ldr	r1, [r3, #8]
 80121fa:	69fb      	ldr	r3, [r7, #28]
 80121fc:	685c      	ldr	r4, [r3, #4]
 80121fe:	69fb      	ldr	r3, [r7, #28]
 8012200:	695d      	ldr	r5, [r3, #20]
      params.dilation_width_factor, height, width, filter_height, filter_width,
 8012202:	69fb      	ldr	r3, [r7, #28]
 8012204:	691b      	ldr	r3, [r3, #16]
      padding, &out_height, &out_width);
 8012206:	6fbe      	ldr	r6, [r7, #120]	; 0x78
 8012208:	f107 0008 	add.w	r0, r7, #8
 801220c:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8012210:	9207      	str	r2, [sp, #28]
 8012212:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8012216:	9206      	str	r2, [sp, #24]
 8012218:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 801221c:	9205      	str	r2, [sp, #20]
 801221e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8012220:	9204      	str	r2, [sp, #16]
 8012222:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8012224:	9203      	str	r2, [sp, #12]
 8012226:	69ba      	ldr	r2, [r7, #24]
 8012228:	9202      	str	r2, [sp, #8]
 801222a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801222c:	9201      	str	r2, [sp, #4]
 801222e:	9300      	str	r3, [sp, #0]
 8012230:	462b      	mov	r3, r5
 8012232:	4622      	mov	r2, r4
 8012234:	f7ff fec5 	bl	8011fc2 <_ZN6tflite25ComputePaddingHeightWidthEiiiiiiii13TfLitePaddingPiS1_>
 8012238:	4634      	mov	r4, r6
 801223a:	f107 0308 	add.w	r3, r7, #8
 801223e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012240:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  const TfLiteTensor* input = GetInput(context, node, kConvInputTensor);
 8012244:	2200      	movs	r2, #0
 8012246:	6a39      	ldr	r1, [r7, #32]
 8012248:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801224a:	f7f9 f863 	bl	800b314 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 801224e:	6438      	str	r0, [r7, #64]	; 0x40
  TF_LITE_ENSURE(context, input != nullptr);
 8012250:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012252:	2b00      	cmp	r3, #0
 8012254:	d10a      	bne.n	801226c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xfc>
 8012256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012258:	695c      	ldr	r4, [r3, #20]
 801225a:	4b43      	ldr	r3, [pc, #268]	; (8012368 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f8>)
 801225c:	9300      	str	r3, [sp, #0]
 801225e:	2361      	movs	r3, #97	; 0x61
 8012260:	4a3c      	ldr	r2, [pc, #240]	; (8012354 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e4>)
 8012262:	493d      	ldr	r1, [pc, #244]	; (8012358 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e8>)
 8012264:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012266:	47a0      	blx	r4
 8012268:	2301      	movs	r3, #1
 801226a:	e06d      	b.n	8012348 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1d8>
  const TfLiteTensor* filter = GetInput(context, node, kConvWeightsTensor);
 801226c:	2201      	movs	r2, #1
 801226e:	6a39      	ldr	r1, [r7, #32]
 8012270:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012272:	f7f9 f84f 	bl	800b314 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8012276:	63f8      	str	r0, [r7, #60]	; 0x3c
  TF_LITE_ENSURE(context, filter != nullptr);
 8012278:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801227a:	2b00      	cmp	r3, #0
 801227c:	d10a      	bne.n	8012294 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x124>
 801227e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012280:	695c      	ldr	r4, [r3, #20]
 8012282:	4b3a      	ldr	r3, [pc, #232]	; (801236c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1fc>)
 8012284:	9300      	str	r3, [sp, #0]
 8012286:	2363      	movs	r3, #99	; 0x63
 8012288:	4a32      	ldr	r2, [pc, #200]	; (8012354 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e4>)
 801228a:	4933      	ldr	r1, [pc, #204]	; (8012358 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e8>)
 801228c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801228e:	47a0      	blx	r4
 8012290:	2301      	movs	r3, #1
 8012292:	e059      	b.n	8012348 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1d8>
  const TfLiteTensor* bias =
      GetOptionalInputTensor(context, node, kConvBiasTensor);
 8012294:	2202      	movs	r2, #2
 8012296:	6a39      	ldr	r1, [r7, #32]
 8012298:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801229a:	f7f9 f86b 	bl	800b374 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
 801229e:	63b8      	str	r0, [r7, #56]	; 0x38
  TfLiteTensor* output = GetOutput(context, node, kConvOutputTensor);
 80122a0:	2200      	movs	r2, #0
 80122a2:	6a39      	ldr	r1, [r7, #32]
 80122a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80122a6:	f7f9 f845 	bl	800b334 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 80122aa:	6378      	str	r0, [r7, #52]	; 0x34
  TF_LITE_ENSURE(context, output != nullptr);
 80122ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80122ae:	2b00      	cmp	r3, #0
 80122b0:	d10a      	bne.n	80122c8 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x158>
 80122b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122b4:	695c      	ldr	r4, [r3, #20]
 80122b6:	4b2e      	ldr	r3, [pc, #184]	; (8012370 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x200>)
 80122b8:	9300      	str	r3, [sp, #0]
 80122ba:	2367      	movs	r3, #103	; 0x67
 80122bc:	4a25      	ldr	r2, [pc, #148]	; (8012354 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e4>)
 80122be:	4926      	ldr	r1, [pc, #152]	; (8012358 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e8>)
 80122c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80122c2:	47a0      	blx	r4
 80122c4:	2301      	movs	r3, #1
 80122c6:	e03f      	b.n	8012348 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1d8>

  // Note that quantized inference requires that all tensors have their
  // parameters set. This is usually done during quantized training.
  if (data_type != kTfLiteFloat32) {
 80122c8:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 80122cc:	2b01      	cmp	r3, #1
 80122ce:	d02e      	beq.n	801232e <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1be>
    int output_channels = filter->dims->data[kConvQuantizedDimension];
 80122d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80122d2:	689b      	ldr	r3, [r3, #8]
 80122d4:	685b      	ldr	r3, [r3, #4]
 80122d6:	633b      	str	r3, [r7, #48]	; 0x30

    TF_LITE_ENSURE_STATUS(tflite::PopulateConvolutionQuantizationParams(
 80122d8:	69fb      	ldr	r3, [r7, #28]
 80122da:	330c      	adds	r3, #12
 80122dc:	607b      	str	r3, [r7, #4]
 80122de:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80122e0:	321c      	adds	r2, #28
 80122e2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80122e4:	3120      	adds	r1, #32
 80122e6:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80122e8:	302c      	adds	r0, #44	; 0x2c
 80122ea:	6fbc      	ldr	r4, [r7, #120]	; 0x78
 80122ec:	3430      	adds	r4, #48	; 0x30
 80122ee:	6fbd      	ldr	r5, [r7, #120]	; 0x78
 80122f0:	6a6d      	ldr	r5, [r5, #36]	; 0x24
 80122f2:	6fbe      	ldr	r6, [r7, #120]	; 0x78
 80122f4:	6ab6      	ldr	r6, [r6, #40]	; 0x28
 80122f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122f8:	9308      	str	r3, [sp, #32]
 80122fa:	9607      	str	r6, [sp, #28]
 80122fc:	9506      	str	r5, [sp, #24]
 80122fe:	9405      	str	r4, [sp, #20]
 8012300:	9004      	str	r0, [sp, #16]
 8012302:	9103      	str	r1, [sp, #12]
 8012304:	9202      	str	r2, [sp, #8]
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	9301      	str	r3, [sp, #4]
 801230a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801230c:	9300      	str	r3, [sp, #0]
 801230e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012310:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012312:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012314:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012316:	f7f9 f83d 	bl	800b394 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i>
 801231a:	4603      	mov	r3, r0
 801231c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8012320:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012324:	2b00      	cmp	r3, #0
 8012326:	d002      	beq.n	801232e <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1be>
 8012328:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801232c:	e00c      	b.n	8012348 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1d8>
        data->per_channel_output_multiplier,
        reinterpret_cast<int*>(data->per_channel_output_shift),
        output_channels));
  }

  data->input_zero_point = input->params.zero_point;
 801232e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012330:	691a      	ldr	r2, [r3, #16]
 8012332:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012334:	611a      	str	r2, [r3, #16]
  data->filter_zero_point = filter->params.zero_point;
 8012336:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012338:	691a      	ldr	r2, [r3, #16]
 801233a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801233c:	615a      	str	r2, [r3, #20]
  data->output_zero_point = output->params.zero_point;
 801233e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012340:	691a      	ldr	r2, [r3, #16]
 8012342:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012344:	619a      	str	r2, [r3, #24]

  return kTfLiteOk;
 8012346:	2300      	movs	r3, #0
}
 8012348:	4618      	mov	r0, r3
 801234a:	374c      	adds	r7, #76	; 0x4c
 801234c:	46bd      	mov	sp, r7
 801234e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012350:	0802b144 	.word	0x0802b144
 8012354:	0802b0ec 	.word	0x0802b0ec
 8012358:	0802b12c 	.word	0x0802b12c
 801235c:	0802b184 	.word	0x0802b184
 8012360:	0802b188 	.word	0x0802b188
 8012364:	0802b168 	.word	0x0802b168
 8012368:	0802b19c 	.word	0x0802b19c
 801236c:	0802b1b0 	.word	0x0802b1b0
 8012370:	0802b1c4 	.word	0x0802b1c4

08012374 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>:
                                               int32_t* act_max);

// Calculates the useful range of an activation layer given its activation
// tensor.a
template <typename T>
void CalculateActivationRange(TfLiteFusedActivation activation,
 8012374:	b580      	push	{r7, lr}
 8012376:	b084      	sub	sp, #16
 8012378:	af00      	add	r7, sp, #0
 801237a:	4603      	mov	r3, r0
 801237c:	60b9      	str	r1, [r7, #8]
 801237e:	607a      	str	r2, [r7, #4]
 8012380:	73fb      	strb	r3, [r7, #15]
                              T* activation_min, T* activation_max) {
  if (activation == kTfLiteActRelu) {
 8012382:	7bfb      	ldrb	r3, [r7, #15]
 8012384:	2b01      	cmp	r3, #1
 8012386:	d10b      	bne.n	80123a0 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x2c>
    *activation_min = 0;
 8012388:	68bb      	ldr	r3, [r7, #8]
 801238a:	f04f 0200 	mov.w	r2, #0
 801238e:	601a      	str	r2, [r3, #0]
    *activation_max = std::numeric_limits<T>::max();
 8012390:	f7ff fd9c 	bl	8011ecc <_ZNSt14numeric_limitsIfE3maxEv>
 8012394:	eef0 7a40 	vmov.f32	s15, s0
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	edc3 7a00 	vstr	s15, [r3]
    *activation_max = 1;
  } else {
    *activation_min = std::numeric_limits<T>::lowest();
    *activation_max = std::numeric_limits<T>::max();
  }
}
 801239e:	e023      	b.n	80123e8 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
  } else if (activation == kTfLiteActRelu6) {
 80123a0:	7bfb      	ldrb	r3, [r7, #15]
 80123a2:	2b03      	cmp	r3, #3
 80123a4:	d107      	bne.n	80123b6 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x42>
    *activation_min = 0;
 80123a6:	68bb      	ldr	r3, [r7, #8]
 80123a8:	f04f 0200 	mov.w	r2, #0
 80123ac:	601a      	str	r2, [r3, #0]
    *activation_max = 6;
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	4a0f      	ldr	r2, [pc, #60]	; (80123f0 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x7c>)
 80123b2:	601a      	str	r2, [r3, #0]
}
 80123b4:	e018      	b.n	80123e8 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
  } else if (activation == kTfLiteActReluN1To1) {
 80123b6:	7bfb      	ldrb	r3, [r7, #15]
 80123b8:	2b02      	cmp	r3, #2
 80123ba:	d107      	bne.n	80123cc <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x58>
    *activation_min = -1;
 80123bc:	68bb      	ldr	r3, [r7, #8]
 80123be:	4a0d      	ldr	r2, [pc, #52]	; (80123f4 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x80>)
 80123c0:	601a      	str	r2, [r3, #0]
    *activation_max = 1;
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80123c8:	601a      	str	r2, [r3, #0]
}
 80123ca:	e00d      	b.n	80123e8 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
    *activation_min = std::numeric_limits<T>::lowest();
 80123cc:	f7ff fd8c 	bl	8011ee8 <_ZNSt14numeric_limitsIfE6lowestEv>
 80123d0:	eef0 7a40 	vmov.f32	s15, s0
 80123d4:	68bb      	ldr	r3, [r7, #8]
 80123d6:	edc3 7a00 	vstr	s15, [r3]
    *activation_max = std::numeric_limits<T>::max();
 80123da:	f7ff fd77 	bl	8011ecc <_ZNSt14numeric_limitsIfE3maxEv>
 80123de:	eef0 7a40 	vmov.f32	s15, s0
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	edc3 7a00 	vstr	s15, [r3]
}
 80123e8:	bf00      	nop
 80123ea:	3710      	adds	r7, #16
 80123ec:	46bd      	mov	sp, r7
 80123ee:	bd80      	pop	{r7, pc}
 80123f0:	40c00000 	.word	0x40c00000
 80123f4:	bf800000 	.word	0xbf800000

080123f8 <_ZN6tflite24DepthwiseConvParamsFloatERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE>:
const int kDepthwiseConvQuantizedDimension = 3;

// Returns a DepthwiseParams struct with all the parameters needed for a
// float computation.
DepthwiseParams DepthwiseConvParamsFloat(
    const TfLiteDepthwiseConvParams& params, const OpDataConv& data) {
 80123f8:	b580      	push	{r7, lr}
 80123fa:	b084      	sub	sp, #16
 80123fc:	af00      	add	r7, sp, #0
 80123fe:	60f8      	str	r0, [r7, #12]
 8012400:	60b9      	str	r1, [r7, #8]
 8012402:	607a      	str	r2, [r7, #4]
  DepthwiseParams op_params;
  CalculateActivationRange(params.activation, &op_params.float_activation_min,
 8012404:	68bb      	ldr	r3, [r7, #8]
 8012406:	7c18      	ldrb	r0, [r3, #16]
 8012408:	68fb      	ldr	r3, [r7, #12]
 801240a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801240e:	68fb      	ldr	r3, [r7, #12]
 8012410:	3330      	adds	r3, #48	; 0x30
 8012412:	4619      	mov	r1, r3
 8012414:	f7ff ffae 	bl	8012374 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
                           &op_params.float_activation_max);
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
 8012418:	68bb      	ldr	r3, [r7, #8]
 801241a:	781b      	ldrb	r3, [r3, #0]
 801241c:	4618      	mov	r0, r3
 801241e:	f000 fa00 	bl	8012822 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>
 8012422:	4603      	mov	r3, r0
 8012424:	461a      	mov	r2, r3
 8012426:	68fb      	ldr	r3, [r7, #12]
 8012428:	701a      	strb	r2, [r3, #0]
  op_params.padding_values.width = data.padding.width;
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	681b      	ldr	r3, [r3, #0]
 801242e:	b21a      	sxth	r2, r3
 8012430:	68fb      	ldr	r3, [r7, #12]
 8012432:	805a      	strh	r2, [r3, #2]
  op_params.padding_values.height = data.padding.height;
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	685b      	ldr	r3, [r3, #4]
 8012438:	b21a      	sxth	r2, r3
 801243a:	68fb      	ldr	r3, [r7, #12]
 801243c:	809a      	strh	r2, [r3, #4]
  op_params.stride_width = params.stride_width;
 801243e:	68bb      	ldr	r3, [r7, #8]
 8012440:	685b      	ldr	r3, [r3, #4]
 8012442:	b21a      	sxth	r2, r3
 8012444:	68fb      	ldr	r3, [r7, #12]
 8012446:	815a      	strh	r2, [r3, #10]
  op_params.stride_height = params.stride_height;
 8012448:	68bb      	ldr	r3, [r7, #8]
 801244a:	689b      	ldr	r3, [r3, #8]
 801244c:	b21a      	sxth	r2, r3
 801244e:	68fb      	ldr	r3, [r7, #12]
 8012450:	819a      	strh	r2, [r3, #12]
  op_params.dilation_width_factor = params.dilation_width_factor;
 8012452:	68bb      	ldr	r3, [r7, #8]
 8012454:	695b      	ldr	r3, [r3, #20]
 8012456:	b21a      	sxth	r2, r3
 8012458:	68fb      	ldr	r3, [r7, #12]
 801245a:	81da      	strh	r2, [r3, #14]
  op_params.dilation_height_factor = params.dilation_height_factor;
 801245c:	68bb      	ldr	r3, [r7, #8]
 801245e:	699b      	ldr	r3, [r3, #24]
 8012460:	b21a      	sxth	r2, r3
 8012462:	68fb      	ldr	r3, [r7, #12]
 8012464:	821a      	strh	r2, [r3, #16]
  op_params.depth_multiplier = params.depth_multiplier;
 8012466:	68bb      	ldr	r3, [r7, #8]
 8012468:	68db      	ldr	r3, [r3, #12]
 801246a:	b21a      	sxth	r2, r3
 801246c:	68fb      	ldr	r3, [r7, #12]
 801246e:	825a      	strh	r2, [r3, #18]
  return op_params;
 8012470:	bf00      	nop
}
 8012472:	68f8      	ldr	r0, [r7, #12]
 8012474:	3710      	adds	r7, #16
 8012476:	46bd      	mov	sp, r7
 8012478:	bd80      	pop	{r7, pc}

0801247a <_ZN6tflite28DepthwiseConvParamsQuantizedERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE>:

// Returns a DepthwiseParams struct with all the parameters needed for a
// quantized computation.
DepthwiseParams DepthwiseConvParamsQuantized(
    const TfLiteDepthwiseConvParams& params, const OpDataConv& data) {
 801247a:	b580      	push	{r7, lr}
 801247c:	b084      	sub	sp, #16
 801247e:	af00      	add	r7, sp, #0
 8012480:	60f8      	str	r0, [r7, #12]
 8012482:	60b9      	str	r1, [r7, #8]
 8012484:	607a      	str	r2, [r7, #4]
  DepthwiseParams op_params;
  op_params.input_offset = -data.input_zero_point;
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	691b      	ldr	r3, [r3, #16]
 801248a:	425a      	negs	r2, r3
 801248c:	68fb      	ldr	r3, [r7, #12]
 801248e:	615a      	str	r2, [r3, #20]
  op_params.weights_offset = -data.filter_zero_point;
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	695b      	ldr	r3, [r3, #20]
 8012494:	425a      	negs	r2, r3
 8012496:	68fb      	ldr	r3, [r7, #12]
 8012498:	619a      	str	r2, [r3, #24]
  op_params.output_offset = data.output_zero_point;
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	699a      	ldr	r2, [r3, #24]
 801249e:	68fb      	ldr	r3, [r7, #12]
 80124a0:	61da      	str	r2, [r3, #28]
  op_params.output_multiplier = data.output_multiplier;
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	69da      	ldr	r2, [r3, #28]
 80124a6:	68fb      	ldr	r3, [r7, #12]
 80124a8:	621a      	str	r2, [r3, #32]
  op_params.output_shift = -data.output_shift;
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	6a1b      	ldr	r3, [r3, #32]
 80124ae:	425a      	negs	r2, r3
 80124b0:	68fb      	ldr	r3, [r7, #12]
 80124b2:	625a      	str	r2, [r3, #36]	; 0x24
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
 80124b4:	68bb      	ldr	r3, [r7, #8]
 80124b6:	781b      	ldrb	r3, [r3, #0]
 80124b8:	4618      	mov	r0, r3
 80124ba:	f000 f9b2 	bl	8012822 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>
 80124be:	4603      	mov	r3, r0
 80124c0:	461a      	mov	r2, r3
 80124c2:	68fb      	ldr	r3, [r7, #12]
 80124c4:	701a      	strb	r2, [r3, #0]
  op_params.padding_values.height = data.padding.height;
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	685b      	ldr	r3, [r3, #4]
 80124ca:	b21a      	sxth	r2, r3
 80124cc:	68fb      	ldr	r3, [r7, #12]
 80124ce:	809a      	strh	r2, [r3, #4]
  op_params.padding_values.width = data.padding.width;
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	681b      	ldr	r3, [r3, #0]
 80124d4:	b21a      	sxth	r2, r3
 80124d6:	68fb      	ldr	r3, [r7, #12]
 80124d8:	805a      	strh	r2, [r3, #2]
  op_params.stride_height = params.stride_height;
 80124da:	68bb      	ldr	r3, [r7, #8]
 80124dc:	689b      	ldr	r3, [r3, #8]
 80124de:	b21a      	sxth	r2, r3
 80124e0:	68fb      	ldr	r3, [r7, #12]
 80124e2:	819a      	strh	r2, [r3, #12]
  op_params.stride_width = params.stride_width;
 80124e4:	68bb      	ldr	r3, [r7, #8]
 80124e6:	685b      	ldr	r3, [r3, #4]
 80124e8:	b21a      	sxth	r2, r3
 80124ea:	68fb      	ldr	r3, [r7, #12]
 80124ec:	815a      	strh	r2, [r3, #10]
  op_params.dilation_height_factor = params.dilation_height_factor;
 80124ee:	68bb      	ldr	r3, [r7, #8]
 80124f0:	699b      	ldr	r3, [r3, #24]
 80124f2:	b21a      	sxth	r2, r3
 80124f4:	68fb      	ldr	r3, [r7, #12]
 80124f6:	821a      	strh	r2, [r3, #16]
  op_params.dilation_width_factor = params.dilation_width_factor;
 80124f8:	68bb      	ldr	r3, [r7, #8]
 80124fa:	695b      	ldr	r3, [r3, #20]
 80124fc:	b21a      	sxth	r2, r3
 80124fe:	68fb      	ldr	r3, [r7, #12]
 8012500:	81da      	strh	r2, [r3, #14]
  op_params.depth_multiplier = params.depth_multiplier;
 8012502:	68bb      	ldr	r3, [r7, #8]
 8012504:	68db      	ldr	r3, [r3, #12]
 8012506:	b21a      	sxth	r2, r3
 8012508:	68fb      	ldr	r3, [r7, #12]
 801250a:	825a      	strh	r2, [r3, #18]
  op_params.quantized_activation_min = data.output_activation_min;
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012510:	68fb      	ldr	r3, [r7, #12]
 8012512:	629a      	str	r2, [r3, #40]	; 0x28
  op_params.quantized_activation_max = data.output_activation_max;
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012518:	68fb      	ldr	r3, [r7, #12]
 801251a:	62da      	str	r2, [r3, #44]	; 0x2c
  return op_params;
 801251c:	bf00      	nop
}
 801251e:	68f8      	ldr	r0, [r7, #12]
 8012520:	3710      	adds	r7, #16
 8012522:	46bd      	mov	sp, r7
 8012524:	bd80      	pop	{r7, pc}
	...

08012528 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>:

TfLiteStatus CalculateOpDataDepthwiseConv(
    TfLiteContext* context, TfLiteNode* node,
    const TfLiteDepthwiseConvParams& params, int width, int height,
    int filter_width, int filter_height, int out_width, int out_height,
    const TfLiteType data_type, OpDataConv* data) {
 8012528:	b5f0      	push	{r4, r5, r6, r7, lr}
 801252a:	b09d      	sub	sp, #116	; 0x74
 801252c:	af0a      	add	r7, sp, #40	; 0x28
 801252e:	6278      	str	r0, [r7, #36]	; 0x24
 8012530:	6239      	str	r1, [r7, #32]
 8012532:	61fa      	str	r2, [r7, #28]
 8012534:	61bb      	str	r3, [r7, #24]
  bool has_bias = node->inputs->size == 3;
 8012536:	6a3b      	ldr	r3, [r7, #32]
 8012538:	681b      	ldr	r3, [r3, #0]
 801253a:	681b      	ldr	r3, [r3, #0]
 801253c:	2b03      	cmp	r3, #3
 801253e:	bf0c      	ite	eq
 8012540:	2301      	moveq	r3, #1
 8012542:	2300      	movne	r3, #0
 8012544:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  // Check number of inputs/outputs
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
 8012548:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801254c:	f083 0301 	eor.w	r3, r3, #1
 8012550:	b2db      	uxtb	r3, r3
 8012552:	2b00      	cmp	r3, #0
 8012554:	d00f      	beq.n	8012576 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
 8012556:	6a3b      	ldr	r3, [r7, #32]
 8012558:	681b      	ldr	r3, [r3, #0]
 801255a:	681b      	ldr	r3, [r3, #0]
 801255c:	2b02      	cmp	r3, #2
 801255e:	d00a      	beq.n	8012576 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
 8012560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012562:	695c      	ldr	r4, [r3, #20]
 8012564:	4b6c      	ldr	r3, [pc, #432]	; (8012718 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f0>)
 8012566:	9300      	str	r3, [sp, #0]
 8012568:	2358      	movs	r3, #88	; 0x58
 801256a:	4a6c      	ldr	r2, [pc, #432]	; (801271c <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f4>)
 801256c:	496c      	ldr	r1, [pc, #432]	; (8012720 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f8>)
 801256e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012570:	47a0      	blx	r4
 8012572:	2301      	movs	r3, #1
 8012574:	e0cc      	b.n	8012710 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e8>
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
 8012576:	6a3b      	ldr	r3, [r7, #32]
 8012578:	685b      	ldr	r3, [r3, #4]
 801257a:	681b      	ldr	r3, [r3, #0]
 801257c:	2b01      	cmp	r3, #1
 801257e:	d012      	beq.n	80125a6 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x7e>
 8012580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012582:	695c      	ldr	r4, [r3, #20]
 8012584:	6a3b      	ldr	r3, [r7, #32]
 8012586:	685b      	ldr	r3, [r3, #4]
 8012588:	681b      	ldr	r3, [r3, #0]
 801258a:	2201      	movs	r2, #1
 801258c:	9203      	str	r2, [sp, #12]
 801258e:	9302      	str	r3, [sp, #8]
 8012590:	4b64      	ldr	r3, [pc, #400]	; (8012724 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1fc>)
 8012592:	9301      	str	r3, [sp, #4]
 8012594:	4b64      	ldr	r3, [pc, #400]	; (8012728 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x200>)
 8012596:	9300      	str	r3, [sp, #0]
 8012598:	2359      	movs	r3, #89	; 0x59
 801259a:	4a60      	ldr	r2, [pc, #384]	; (801271c <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f4>)
 801259c:	4963      	ldr	r1, [pc, #396]	; (801272c <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x204>)
 801259e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80125a0:	47a0      	blx	r4
 80125a2:	2301      	movs	r3, #1
 80125a4:	e0b4      	b.n	8012710 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e8>

  // Matching GetWindowedOutputSize in TensorFlow.
  auto padding = params.padding;
 80125a6:	69fb      	ldr	r3, [r7, #28]
 80125a8:	781b      	ldrb	r3, [r3, #0]
 80125aa:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  data->padding = ComputePaddingHeightWidth(
      params.stride_height, params.stride_width, params.dilation_height_factor,
 80125ae:	69fb      	ldr	r3, [r7, #28]
 80125b0:	6899      	ldr	r1, [r3, #8]
 80125b2:	69fb      	ldr	r3, [r7, #28]
 80125b4:	685c      	ldr	r4, [r3, #4]
 80125b6:	69fb      	ldr	r3, [r7, #28]
 80125b8:	699d      	ldr	r5, [r3, #24]
      params.dilation_width_factor, height, width, filter_height, filter_width,
 80125ba:	69fb      	ldr	r3, [r7, #28]
 80125bc:	695b      	ldr	r3, [r3, #20]
      padding, &out_height, &out_width);
 80125be:	6fbe      	ldr	r6, [r7, #120]	; 0x78
 80125c0:	f107 0008 	add.w	r0, r7, #8
 80125c4:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80125c8:	9207      	str	r2, [sp, #28]
 80125ca:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80125ce:	9206      	str	r2, [sp, #24]
 80125d0:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80125d4:	9205      	str	r2, [sp, #20]
 80125d6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80125d8:	9204      	str	r2, [sp, #16]
 80125da:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80125dc:	9203      	str	r2, [sp, #12]
 80125de:	69ba      	ldr	r2, [r7, #24]
 80125e0:	9202      	str	r2, [sp, #8]
 80125e2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80125e4:	9201      	str	r2, [sp, #4]
 80125e6:	9300      	str	r3, [sp, #0]
 80125e8:	462b      	mov	r3, r5
 80125ea:	4622      	mov	r2, r4
 80125ec:	f7ff fce9 	bl	8011fc2 <_ZN6tflite25ComputePaddingHeightWidthEiiiiiiii13TfLitePaddingPiS1_>
 80125f0:	4634      	mov	r4, r6
 80125f2:	f107 0308 	add.w	r3, r7, #8
 80125f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80125f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  const TfLiteTensor* input = GetInput(context, node, kConvInputTensor);
 80125fc:	4b4c      	ldr	r3, [pc, #304]	; (8012730 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x208>)
 80125fe:	681b      	ldr	r3, [r3, #0]
 8012600:	461a      	mov	r2, r3
 8012602:	6a39      	ldr	r1, [r7, #32]
 8012604:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012606:	f7f8 fe85 	bl	800b314 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 801260a:	6438      	str	r0, [r7, #64]	; 0x40
  TF_LITE_ENSURE(context, input != nullptr);
 801260c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801260e:	2b00      	cmp	r3, #0
 8012610:	d10a      	bne.n	8012628 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x100>
 8012612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012614:	695c      	ldr	r4, [r3, #20]
 8012616:	4b47      	ldr	r3, [pc, #284]	; (8012734 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x20c>)
 8012618:	9300      	str	r3, [sp, #0]
 801261a:	2363      	movs	r3, #99	; 0x63
 801261c:	4a3f      	ldr	r2, [pc, #252]	; (801271c <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f4>)
 801261e:	4940      	ldr	r1, [pc, #256]	; (8012720 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f8>)
 8012620:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012622:	47a0      	blx	r4
 8012624:	2301      	movs	r3, #1
 8012626:	e073      	b.n	8012710 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e8>
  const TfLiteTensor* filter = GetInput(context, node, kConvWeightsTensor);
 8012628:	4b43      	ldr	r3, [pc, #268]	; (8012738 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x210>)
 801262a:	681b      	ldr	r3, [r3, #0]
 801262c:	461a      	mov	r2, r3
 801262e:	6a39      	ldr	r1, [r7, #32]
 8012630:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012632:	f7f8 fe6f 	bl	800b314 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8012636:	63f8      	str	r0, [r7, #60]	; 0x3c
  TF_LITE_ENSURE(context, filter != nullptr);
 8012638:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801263a:	2b00      	cmp	r3, #0
 801263c:	d10a      	bne.n	8012654 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x12c>
 801263e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012640:	695c      	ldr	r4, [r3, #20]
 8012642:	4b3e      	ldr	r3, [pc, #248]	; (801273c <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x214>)
 8012644:	9300      	str	r3, [sp, #0]
 8012646:	2365      	movs	r3, #101	; 0x65
 8012648:	4a34      	ldr	r2, [pc, #208]	; (801271c <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f4>)
 801264a:	4935      	ldr	r1, [pc, #212]	; (8012720 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f8>)
 801264c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801264e:	47a0      	blx	r4
 8012650:	2301      	movs	r3, #1
 8012652:	e05d      	b.n	8012710 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e8>
  const TfLiteTensor* bias =
      GetOptionalInputTensor(context, node, kConvBiasTensor);
 8012654:	4b3a      	ldr	r3, [pc, #232]	; (8012740 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x218>)
 8012656:	681b      	ldr	r3, [r3, #0]
 8012658:	461a      	mov	r2, r3
 801265a:	6a39      	ldr	r1, [r7, #32]
 801265c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801265e:	f7f8 fe89 	bl	800b374 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
 8012662:	63b8      	str	r0, [r7, #56]	; 0x38
  TfLiteTensor* output = GetOutput(context, node, kConvOutputTensor);
 8012664:	4b37      	ldr	r3, [pc, #220]	; (8012744 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x21c>)
 8012666:	681b      	ldr	r3, [r3, #0]
 8012668:	461a      	mov	r2, r3
 801266a:	6a39      	ldr	r1, [r7, #32]
 801266c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801266e:	f7f8 fe61 	bl	800b334 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 8012672:	6378      	str	r0, [r7, #52]	; 0x34
  TF_LITE_ENSURE(context, output != nullptr);
 8012674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012676:	2b00      	cmp	r3, #0
 8012678:	d10a      	bne.n	8012690 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x168>
 801267a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801267c:	695c      	ldr	r4, [r3, #20]
 801267e:	4b32      	ldr	r3, [pc, #200]	; (8012748 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x220>)
 8012680:	9300      	str	r3, [sp, #0]
 8012682:	2369      	movs	r3, #105	; 0x69
 8012684:	4a25      	ldr	r2, [pc, #148]	; (801271c <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f4>)
 8012686:	4926      	ldr	r1, [pc, #152]	; (8012720 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f8>)
 8012688:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801268a:	47a0      	blx	r4
 801268c:	2301      	movs	r3, #1
 801268e:	e03f      	b.n	8012710 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e8>

  // Note that quantized inference requires that all tensors have their
  // parameters set. This is usually done during quantized training.
  if (data_type != kTfLiteFloat32) {
 8012690:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8012694:	2b01      	cmp	r3, #1
 8012696:	d02e      	beq.n	80126f6 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1ce>
    int output_channels = filter->dims->data[kDepthwiseConvQuantizedDimension];
 8012698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801269a:	689b      	ldr	r3, [r3, #8]
 801269c:	691b      	ldr	r3, [r3, #16]
 801269e:	633b      	str	r3, [r7, #48]	; 0x30

    TF_LITE_ENSURE_STATUS(tflite::PopulateConvolutionQuantizationParams(
 80126a0:	69fb      	ldr	r3, [r7, #28]
 80126a2:	3310      	adds	r3, #16
 80126a4:	607b      	str	r3, [r7, #4]
 80126a6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80126a8:	321c      	adds	r2, #28
 80126aa:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80126ac:	3120      	adds	r1, #32
 80126ae:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80126b0:	302c      	adds	r0, #44	; 0x2c
 80126b2:	6fbc      	ldr	r4, [r7, #120]	; 0x78
 80126b4:	3430      	adds	r4, #48	; 0x30
 80126b6:	6fbd      	ldr	r5, [r7, #120]	; 0x78
 80126b8:	6a6d      	ldr	r5, [r5, #36]	; 0x24
 80126ba:	6fbe      	ldr	r6, [r7, #120]	; 0x78
 80126bc:	6ab6      	ldr	r6, [r6, #40]	; 0x28
 80126be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126c0:	9308      	str	r3, [sp, #32]
 80126c2:	9607      	str	r6, [sp, #28]
 80126c4:	9506      	str	r5, [sp, #24]
 80126c6:	9405      	str	r4, [sp, #20]
 80126c8:	9004      	str	r0, [sp, #16]
 80126ca:	9103      	str	r1, [sp, #12]
 80126cc:	9202      	str	r2, [sp, #8]
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	9301      	str	r3, [sp, #4]
 80126d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80126d4:	9300      	str	r3, [sp, #0]
 80126d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80126da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80126dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80126de:	f7f8 fe59 	bl	800b394 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i>
 80126e2:	4603      	mov	r3, r0
 80126e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80126e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	d002      	beq.n	80126f6 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1ce>
 80126f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80126f4:	e00c      	b.n	8012710 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e8>
        data->per_channel_output_multiplier,
        reinterpret_cast<int*>(data->per_channel_output_shift),
        output_channels));
  }

  data->input_zero_point = input->params.zero_point;
 80126f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80126f8:	691a      	ldr	r2, [r3, #16]
 80126fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80126fc:	611a      	str	r2, [r3, #16]
  data->filter_zero_point = filter->params.zero_point;
 80126fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012700:	691a      	ldr	r2, [r3, #16]
 8012702:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012704:	615a      	str	r2, [r3, #20]
  data->output_zero_point = output->params.zero_point;
 8012706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012708:	691a      	ldr	r2, [r3, #16]
 801270a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801270c:	619a      	str	r2, [r3, #24]

  return kTfLiteOk;
 801270e:	2300      	movs	r3, #0
}
 8012710:	4618      	mov	r0, r3
 8012712:	374c      	adds	r7, #76	; 0x4c
 8012714:	46bd      	mov	sp, r7
 8012716:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012718:	0802b33c 	.word	0x0802b33c
 801271c:	0802b2d8 	.word	0x0802b2d8
 8012720:	0802b324 	.word	0x0802b324
 8012724:	0802b37c 	.word	0x0802b37c
 8012728:	0802b380 	.word	0x0802b380
 801272c:	0802b360 	.word	0x0802b360
 8012730:	0802ca7c 	.word	0x0802ca7c
 8012734:	0802b394 	.word	0x0802b394
 8012738:	0802ca80 	.word	0x0802ca80
 801273c:	0802b3a8 	.word	0x0802b3a8
 8012740:	0802ca84 	.word	0x0802ca84
 8012744:	0802ca88 	.word	0x0802ca88
 8012748:	0802b3bc 	.word	0x0802b3bc

0801274c <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 801274c:	b580      	push	{r7, lr}
 801274e:	b082      	sub	sp, #8
 8012750:	af00      	add	r7, sp, #0
 8012752:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	2b00      	cmp	r3, #0
 8012758:	d101      	bne.n	801275e <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor+0x12>
 801275a:	f013 f974 	bl	8025a46 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	681b      	ldr	r3, [r3, #0]
}
 8012762:	4618      	mov	r0, r3
 8012764:	3708      	adds	r7, #8
 8012766:	46bd      	mov	sp, r7
 8012768:	bd80      	pop	{r7, pc}

0801276a <_ZSt3minIiERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 801276a:	b480      	push	{r7}
 801276c:	b083      	sub	sp, #12
 801276e:	af00      	add	r7, sp, #0
 8012770:	6078      	str	r0, [r7, #4]
 8012772:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8012774:	683b      	ldr	r3, [r7, #0]
 8012776:	681a      	ldr	r2, [r3, #0]
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	681b      	ldr	r3, [r3, #0]
 801277c:	429a      	cmp	r2, r3
 801277e:	da01      	bge.n	8012784 <_ZSt3minIiERKT_S2_S2_+0x1a>
	return __b;
 8012780:	683b      	ldr	r3, [r7, #0]
 8012782:	e000      	b.n	8012786 <_ZSt3minIiERKT_S2_S2_+0x1c>
      return __a;
 8012784:	687b      	ldr	r3, [r7, #4]
    }
 8012786:	4618      	mov	r0, r3
 8012788:	370c      	adds	r7, #12
 801278a:	46bd      	mov	sp, r7
 801278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012790:	4770      	bx	lr

08012792 <_ZSt3expf>:
  { return __builtin_expf(__x); }
 8012792:	b580      	push	{r7, lr}
 8012794:	b082      	sub	sp, #8
 8012796:	af00      	add	r7, sp, #0
 8012798:	ed87 0a01 	vstr	s0, [r7, #4]
 801279c:	ed97 0a01 	vldr	s0, [r7, #4]
 80127a0:	f013 f832 	bl	8025808 <expf>
 80127a4:	eef0 7a40 	vmov.f32	s15, s0
 80127a8:	eeb0 0a67 	vmov.f32	s0, s15
 80127ac:	3708      	adds	r7, #8
 80127ae:	46bd      	mov	sp, r7
 80127b0:	bd80      	pop	{r7, pc}

080127b2 <_ZSt3maxIsERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 80127b2:	b480      	push	{r7}
 80127b4:	b083      	sub	sp, #12
 80127b6:	af00      	add	r7, sp, #0
 80127b8:	6078      	str	r0, [r7, #4]
 80127ba:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	f9b3 2000 	ldrsh.w	r2, [r3]
 80127c2:	683b      	ldr	r3, [r7, #0]
 80127c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80127c8:	429a      	cmp	r2, r3
 80127ca:	da01      	bge.n	80127d0 <_ZSt3maxIsERKT_S2_S2_+0x1e>
	return __b;
 80127cc:	683b      	ldr	r3, [r7, #0]
 80127ce:	e000      	b.n	80127d2 <_ZSt3maxIsERKT_S2_S2_+0x20>
      return __a;
 80127d0:	687b      	ldr	r3, [r7, #4]
    }
 80127d2:	4618      	mov	r0, r3
 80127d4:	370c      	adds	r7, #12
 80127d6:	46bd      	mov	sp, r7
 80127d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127dc:	4770      	bx	lr

080127de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>:
  TFLITE_DCHECK(input1 != nullptr);
  TFLITE_DCHECK(input2 != nullptr);
  return TfLiteIntArrayEqual(input1->dims, input2->dims);
}

const RuntimeShape GetTensorShape(const TfLiteEvalTensor* tensor) {
 80127de:	b580      	push	{r7, lr}
 80127e0:	b086      	sub	sp, #24
 80127e2:	af00      	add	r7, sp, #0
 80127e4:	6078      	str	r0, [r7, #4]
 80127e6:	6039      	str	r1, [r7, #0]
  if (tensor == nullptr || tensor->dims == nullptr) {
 80127e8:	683b      	ldr	r3, [r7, #0]
 80127ea:	2b00      	cmp	r3, #0
 80127ec:	d003      	beq.n	80127f6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x18>
 80127ee:	683b      	ldr	r3, [r7, #0]
 80127f0:	685b      	ldr	r3, [r3, #4]
 80127f2:	2b00      	cmp	r3, #0
 80127f4:	d103      	bne.n	80127fe <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x20>
    return RuntimeShape();
 80127f6:	6878      	ldr	r0, [r7, #4]
 80127f8:	f7f9 fb1e 	bl	800be38 <_ZN6tflite12RuntimeShapeC1Ev>
 80127fc:	e00d      	b.n	801281a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x3c>
  }
  TfLiteIntArray* dims = tensor->dims;
 80127fe:	683b      	ldr	r3, [r7, #0]
 8012800:	685b      	ldr	r3, [r3, #4]
 8012802:	617b      	str	r3, [r7, #20]
  const int dims_size = dims->size;
 8012804:	697b      	ldr	r3, [r7, #20]
 8012806:	681b      	ldr	r3, [r3, #0]
 8012808:	613b      	str	r3, [r7, #16]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
 801280a:	697b      	ldr	r3, [r7, #20]
 801280c:	3304      	adds	r3, #4
 801280e:	60fb      	str	r3, [r7, #12]
  return RuntimeShape(dims_size, dims_data);
 8012810:	68fa      	ldr	r2, [r7, #12]
 8012812:	6939      	ldr	r1, [r7, #16]
 8012814:	6878      	ldr	r0, [r7, #4]
 8012816:	f7f9 fb1d 	bl	800be54 <_ZN6tflite12RuntimeShapeC1EiPKl>
}
 801281a:	6878      	ldr	r0, [r7, #4]
 801281c:	3718      	adds	r7, #24
 801281e:	46bd      	mov	sp, r7
 8012820:	bd80      	pop	{r7, pc}

08012822 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>:

PaddingType RuntimePaddingType(TfLitePadding padding) {
 8012822:	b480      	push	{r7}
 8012824:	b083      	sub	sp, #12
 8012826:	af00      	add	r7, sp, #0
 8012828:	4603      	mov	r3, r0
 801282a:	71fb      	strb	r3, [r7, #7]
  switch (padding) {
 801282c:	79fb      	ldrb	r3, [r7, #7]
 801282e:	2b01      	cmp	r3, #1
 8012830:	d002      	beq.n	8012838 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0x16>
 8012832:	2b02      	cmp	r3, #2
 8012834:	d002      	beq.n	801283c <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0x1a>
 8012836:	e003      	b.n	8012840 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0x1e>
    case TfLitePadding::kTfLitePaddingSame:
      return PaddingType::kSame;
 8012838:	2301      	movs	r3, #1
 801283a:	e002      	b.n	8012842 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0x20>
    case TfLitePadding::kTfLitePaddingValid:
      return PaddingType::kValid;
 801283c:	2302      	movs	r3, #2
 801283e:	e000      	b.n	8012842 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0x20>
    case TfLitePadding::kTfLitePaddingUnknown:
    default:
      return PaddingType::kNone;
 8012840:	2300      	movs	r3, #0
  }
}
 8012842:	4618      	mov	r0, r3
 8012844:	370c      	adds	r7, #12
 8012846:	46bd      	mov	sp, r7
 8012848:	f85d 7b04 	ldr.w	r7, [sp], #4
 801284c:	4770      	bx	lr

0801284e <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>:
inline T ActivationFunctionWithMinMax(T x, T output_activation_min,
 801284e:	b580      	push	{r7, lr}
 8012850:	b084      	sub	sp, #16
 8012852:	af00      	add	r7, sp, #0
 8012854:	ed87 0a03 	vstr	s0, [r7, #12]
 8012858:	edc7 0a02 	vstr	s1, [r7, #8]
 801285c:	ed87 1a01 	vstr	s2, [r7, #4]
  return min(max(x, output_activation_min), output_activation_max);
 8012860:	f107 0208 	add.w	r2, r7, #8
 8012864:	f107 030c 	add.w	r3, r7, #12
 8012868:	4611      	mov	r1, r2
 801286a:	4618      	mov	r0, r3
 801286c:	f7f8 fc04 	bl	800b078 <_ZSt3maxIfERKT_S2_S2_>
 8012870:	4602      	mov	r2, r0
 8012872:	1d3b      	adds	r3, r7, #4
 8012874:	4619      	mov	r1, r3
 8012876:	4610      	mov	r0, r2
 8012878:	f7f8 fbe5 	bl	800b046 <_ZSt3minIfERKT_S2_S2_>
 801287c:	4603      	mov	r3, r0
 801287e:	681b      	ldr	r3, [r3, #0]
 8012880:	ee07 3a90 	vmov	s15, r3
}
 8012884:	eeb0 0a67 	vmov.f32	s0, s15
 8012888:	3710      	adds	r7, #16
 801288a:	46bd      	mov	sp, r7
 801288c:	bd80      	pop	{r7, pc}

0801288e <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>:
}

// Data is required to be contiguous, and so many operators can use either the
// full array flat size or the flat size with one dimension skipped (commonly
// the depth).
inline int FlatSizeSkipDim(const RuntimeShape& shape, int skip_dim) {
 801288e:	b580      	push	{r7, lr}
 8012890:	b086      	sub	sp, #24
 8012892:	af00      	add	r7, sp, #0
 8012894:	6078      	str	r0, [r7, #4]
 8012896:	6039      	str	r1, [r7, #0]
  const int dims_count = shape.DimensionsCount();
 8012898:	6878      	ldr	r0, [r7, #4]
 801289a:	f7f9 fb04 	bl	800bea6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801289e:	60f8      	str	r0, [r7, #12]
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
 80128a0:	683b      	ldr	r3, [r7, #0]
 80128a2:	2b00      	cmp	r3, #0
 80128a4:	db03      	blt.n	80128ae <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x20>
 80128a6:	683a      	ldr	r2, [r7, #0]
 80128a8:	68fb      	ldr	r3, [r7, #12]
 80128aa:	429a      	cmp	r2, r3
 80128ac:	db01      	blt.n	80128b2 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x24>
 80128ae:	f013 f8ca 	bl	8025a46 <abort>
  const auto* dims_data = shape.DimsData();
 80128b2:	6878      	ldr	r0, [r7, #4]
 80128b4:	f7fe fa39 	bl	8010d2a <_ZNK6tflite12RuntimeShape8DimsDataEv>
 80128b8:	60b8      	str	r0, [r7, #8]
  int flat_size = 1;
 80128ba:	2301      	movs	r3, #1
 80128bc:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 80128be:	2300      	movs	r3, #0
 80128c0:	613b      	str	r3, [r7, #16]
 80128c2:	693a      	ldr	r2, [r7, #16]
 80128c4:	68fb      	ldr	r3, [r7, #12]
 80128c6:	429a      	cmp	r2, r3
 80128c8:	da12      	bge.n	80128f0 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x62>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 80128ca:	693a      	ldr	r2, [r7, #16]
 80128cc:	683b      	ldr	r3, [r7, #0]
 80128ce:	429a      	cmp	r2, r3
 80128d0:	d005      	beq.n	80128de <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x50>
 80128d2:	693b      	ldr	r3, [r7, #16]
 80128d4:	009b      	lsls	r3, r3, #2
 80128d6:	68ba      	ldr	r2, [r7, #8]
 80128d8:	4413      	add	r3, r2
 80128da:	681b      	ldr	r3, [r3, #0]
 80128dc:	e000      	b.n	80128e0 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x52>
 80128de:	2301      	movs	r3, #1
 80128e0:	697a      	ldr	r2, [r7, #20]
 80128e2:	fb03 f302 	mul.w	r3, r3, r2
 80128e6:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 80128e8:	693b      	ldr	r3, [r7, #16]
 80128ea:	3301      	adds	r3, #1
 80128ec:	613b      	str	r3, [r7, #16]
 80128ee:	e7e8      	b.n	80128c2 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x34>
  }
  return flat_size;
 80128f0:	697b      	ldr	r3, [r7, #20]
}
 80128f2:	4618      	mov	r0, r3
 80128f4:	3718      	adds	r7, #24
 80128f6:	46bd      	mov	sp, r7
 80128f8:	bd80      	pop	{r7, pc}

080128fa <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>:

// A combination of MatchingFlatSize() and FlatSizeSkipDim().
inline int MatchingFlatSizeSkipDim(const RuntimeShape& shape, int skip_dim,
                                   const RuntimeShape& check_shape_0) {
 80128fa:	b590      	push	{r4, r7, lr}
 80128fc:	b087      	sub	sp, #28
 80128fe:	af00      	add	r7, sp, #0
 8012900:	60f8      	str	r0, [r7, #12]
 8012902:	60b9      	str	r1, [r7, #8]
 8012904:	607a      	str	r2, [r7, #4]
  const int dims_count = shape.DimensionsCount();
 8012906:	68f8      	ldr	r0, [r7, #12]
 8012908:	f7f9 facd 	bl	800bea6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801290c:	6138      	str	r0, [r7, #16]
  for (int i = 0; i < dims_count; ++i) {
 801290e:	2300      	movs	r3, #0
 8012910:	617b      	str	r3, [r7, #20]
 8012912:	697a      	ldr	r2, [r7, #20]
 8012914:	693b      	ldr	r3, [r7, #16]
 8012916:	429a      	cmp	r2, r3
 8012918:	da15      	bge.n	8012946 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x4c>
    if (i != skip_dim) {
 801291a:	697a      	ldr	r2, [r7, #20]
 801291c:	68bb      	ldr	r3, [r7, #8]
 801291e:	429a      	cmp	r2, r3
 8012920:	d00d      	beq.n	801293e <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x44>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 8012922:	6979      	ldr	r1, [r7, #20]
 8012924:	68f8      	ldr	r0, [r7, #12]
 8012926:	f7fe f9db 	bl	8010ce0 <_ZNK6tflite12RuntimeShape4DimsEi>
 801292a:	4604      	mov	r4, r0
 801292c:	6979      	ldr	r1, [r7, #20]
 801292e:	6878      	ldr	r0, [r7, #4]
 8012930:	f7fe f9d6 	bl	8010ce0 <_ZNK6tflite12RuntimeShape4DimsEi>
 8012934:	4603      	mov	r3, r0
 8012936:	429c      	cmp	r4, r3
 8012938:	d001      	beq.n	801293e <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x44>
 801293a:	f013 f884 	bl	8025a46 <abort>
  for (int i = 0; i < dims_count; ++i) {
 801293e:	697b      	ldr	r3, [r7, #20]
 8012940:	3301      	adds	r3, #1
 8012942:	617b      	str	r3, [r7, #20]
 8012944:	e7e5      	b.n	8012912 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x18>
    }
  }
  return FlatSizeSkipDim(shape, skip_dim);
 8012946:	68b9      	ldr	r1, [r7, #8]
 8012948:	68f8      	ldr	r0, [r7, #12]
 801294a:	f7ff ffa0 	bl	801288e <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 801294e:	4603      	mov	r3, r0
}
 8012950:	4618      	mov	r0, r3
 8012952:	371c      	adds	r7, #28
 8012954:	46bd      	mov	sp, r7
 8012956:	bd90      	pop	{r4, r7, pc}

08012958 <_ZN6tflite17CountLeadingZerosImEEiT_>:
  return result;
}
#endif

template <typename T>
int CountLeadingZeros(T integer_input) {
 8012958:	b480      	push	{r7}
 801295a:	b083      	sub	sp, #12
 801295c:	af00      	add	r7, sp, #0
 801295e:	6078      	str	r0, [r7, #4]
  static_assert(std::is_unsigned<T>::value,
                "Only unsigned integer types handled.");
#if defined(__GNUC__)
  return integer_input ? __builtin_clz(integer_input)
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	2b00      	cmp	r3, #0
 8012964:	d003      	beq.n	801296e <_ZN6tflite17CountLeadingZerosImEEiT_+0x16>
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	fab3 f383 	clz	r3, r3
                       : std::numeric_limits<T>::digits;
 801296c:	e000      	b.n	8012970 <_ZN6tflite17CountLeadingZerosImEEiT_+0x18>
  return integer_input ? __builtin_clz(integer_input)
 801296e:	2320      	movs	r3, #32
    integer_input <<= 1;
    ++leading_zeros;
  }
  return leading_zeros;
#endif
}
 8012970:	4618      	mov	r0, r3
 8012972:	370c      	adds	r7, #12
 8012974:	46bd      	mov	sp, r7
 8012976:	f85d 7b04 	ldr.w	r7, [sp], #4
 801297a:	4770      	bx	lr

0801297c <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>:
                 min_bound),
        max_bound)));
  }

  RawType raw() const { return i_; }
  RawType& raw() { return i_; }
 801297c:	b480      	push	{r7}
 801297e:	b083      	sub	sp, #12
 8012980:	af00      	add	r7, sp, #0
 8012982:	6078      	str	r0, [r7, #4]
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	4618      	mov	r0, r3
 8012988:	370c      	adds	r7, #12
 801298a:	46bd      	mov	sp, r7
 801298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012990:	4770      	bx	lr

08012992 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 8012992:	b590      	push	{r4, r7, lr}
 8012994:	b085      	sub	sp, #20
 8012996:	af00      	add	r7, sp, #0
 8012998:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 801299a:	f107 030c 	add.w	r3, r7, #12
 801299e:	4618      	mov	r0, r3
 80129a0:	f7ff ffec 	bl	801297c <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80129a4:	4604      	mov	r4, r0
 80129a6:	6878      	ldr	r0, [r7, #4]
 80129a8:	f7ff f958 	bl	8011c5c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80129ac:	4603      	mov	r3, r0
 80129ae:	6023      	str	r3, [r4, #0]
    return retval;
 80129b0:	68fb      	ldr	r3, [r7, #12]
  }
 80129b2:	4618      	mov	r0, r3
 80129b4:	3714      	adds	r7, #20
 80129b6:	46bd      	mov	sp, r7
 80129b8:	bd90      	pop	{r4, r7, pc}

080129ba <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>:
// fixed-point value, regardless of the actual Scalar type. This allows
// writing generic code that applies just as well to the 32-bit and 16-bit
// cases. In the 16-bit case, the raw integer value is internally
// rounding-shifted by 16 bits to the right.
template <typename FixedPointType>
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
 80129ba:	b580      	push	{r7, lr}
 80129bc:	b082      	sub	sp, #8
 80129be:	af00      	add	r7, sp, #0
 80129c0:	6078      	str	r0, [r7, #4]
    std::int32_t int32_value) {
  typedef typename FixedPointType::ScalarRawType ScalarRawType;
  static constexpr int ScalarTypeBits = 8 * sizeof(ScalarRawType);
  return static_cast<ScalarRawType>(
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
 80129c2:	2100      	movs	r1, #0
 80129c4:	6878      	ldr	r0, [r7, #4]
 80129c6:	f7fe fd85 	bl	80114d4 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 80129ca:	4603      	mov	r3, r0
}
 80129cc:	4618      	mov	r0, r3
 80129ce:	3708      	adds	r7, #8
 80129d0:	46bd      	mov	sp, r7
 80129d2:	bd80      	pop	{r7, pc}

080129d4 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 80129d4:	b580      	push	{r7, lr}
 80129d6:	b082      	sub	sp, #8
 80129d8:	af00      	add	r7, sp, #0
 80129da:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 80129dc:	6878      	ldr	r0, [r7, #4]
 80129de:	f000 f813 	bl	8012a08 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin1ElLin1EE4evalEl>
 80129e2:	4603      	mov	r3, r0
}
 80129e4:	4618      	mov	r0, r3
 80129e6:	3708      	adds	r7, #8
 80129e8:	46bd      	mov	sp, r7
 80129ea:	bd80      	pop	{r7, pc}

080129ec <_ZN8gemmlowp3SubIlEET_S1_S1_>:
tIntegerType Sub(tIntegerType a, tIntegerType b) {
 80129ec:	b480      	push	{r7}
 80129ee:	b083      	sub	sp, #12
 80129f0:	af00      	add	r7, sp, #0
 80129f2:	6078      	str	r0, [r7, #4]
 80129f4:	6039      	str	r1, [r7, #0]
  return a - b;
 80129f6:	687a      	ldr	r2, [r7, #4]
 80129f8:	683b      	ldr	r3, [r7, #0]
 80129fa:	1ad3      	subs	r3, r2, r3
}
 80129fc:	4618      	mov	r0, r3
 80129fe:	370c      	adds	r7, #12
 8012a00:	46bd      	mov	sp, r7
 8012a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a06:	4770      	bx	lr

08012a08 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin1ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 8012a08:	b580      	push	{r7, lr}
 8012a0a:	b082      	sub	sp, #8
 8012a0c:	af00      	add	r7, sp, #0
 8012a0e:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 8012a10:	2101      	movs	r1, #1
 8012a12:	6878      	ldr	r0, [r7, #4]
 8012a14:	f7fe fd5e 	bl	80114d4 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8012a18:	4603      	mov	r3, r0
  }
 8012a1a:	4618      	mov	r0, r3
 8012a1c:	3708      	adds	r7, #8
 8012a1e:	46bd      	mov	sp, r7
 8012a20:	bd80      	pop	{r7, pc}

08012a22 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>:
tIntegerType ShiftLeft(tIntegerType a, int offset) {
 8012a22:	b480      	push	{r7}
 8012a24:	b089      	sub	sp, #36	; 0x24
 8012a26:	af00      	add	r7, sp, #0
 8012a28:	6078      	str	r0, [r7, #4]
 8012a2a:	6039      	str	r1, [r7, #0]
  const std::int64_t wide_a = static_cast<std::int64_t>(a);
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	461a      	mov	r2, r3
 8012a30:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8012a34:	e9c7 2306 	strd	r2, r3, [r7, #24]
  const std::int64_t wide_shifted = wide_a * (1 << offset);
 8012a38:	2201      	movs	r2, #1
 8012a3a:	683b      	ldr	r3, [r7, #0]
 8012a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8012a40:	461a      	mov	r2, r3
 8012a42:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8012a46:	69f9      	ldr	r1, [r7, #28]
 8012a48:	fb02 f001 	mul.w	r0, r2, r1
 8012a4c:	69b9      	ldr	r1, [r7, #24]
 8012a4e:	fb03 f101 	mul.w	r1, r3, r1
 8012a52:	4401      	add	r1, r0
 8012a54:	69b8      	ldr	r0, [r7, #24]
 8012a56:	fba0 2302 	umull	r2, r3, r0, r2
 8012a5a:	4419      	add	r1, r3
 8012a5c:	460b      	mov	r3, r1
 8012a5e:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8012a62:	e9c7 2304 	strd	r2, r3, [r7, #16]
  const auto min = std::numeric_limits<tIntegerType>::min();
 8012a66:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012a6a:	60fb      	str	r3, [r7, #12]
  const auto max = std::numeric_limits<tIntegerType>::max();
 8012a6c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8012a70:	60bb      	str	r3, [r7, #8]
             ? min
 8012a72:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8012a76:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8012a7a:	f173 33ff 	sbcs.w	r3, r3, #4294967295	; 0xffffffff
 8012a7e:	db0e      	blt.n	8012a9e <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x7c>
             : wide_shifted > max ? max
 8012a80:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8012a84:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8012a88:	f04f 0100 	mov.w	r1, #0
 8012a8c:	4290      	cmp	r0, r2
 8012a8e:	eb71 0303 	sbcs.w	r3, r1, r3
 8012a92:	db01      	blt.n	8012a98 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x76>
 8012a94:	693b      	ldr	r3, [r7, #16]
                                  : static_cast<tIntegerType>(wide_shifted);
 8012a96:	e004      	b.n	8012aa2 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x80>
             : wide_shifted > max ? max
 8012a98:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
                                  : static_cast<tIntegerType>(wide_shifted);
 8012a9c:	e001      	b.n	8012aa2 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x80>
             ? min
 8012a9e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8012aa2:	4618      	mov	r0, r3
 8012aa4:	3724      	adds	r7, #36	; 0x24
 8012aa6:	46bd      	mov	sp, r7
 8012aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aac:	4770      	bx	lr

08012aae <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>:
tIntegerType SelectUsingMask(tIntegerType if_mask, tIntegerType then_val,
 8012aae:	b590      	push	{r4, r7, lr}
 8012ab0:	b085      	sub	sp, #20
 8012ab2:	af00      	add	r7, sp, #0
 8012ab4:	60f8      	str	r0, [r7, #12]
 8012ab6:	60b9      	str	r1, [r7, #8]
 8012ab8:	607a      	str	r2, [r7, #4]
  return BitXor(BitAnd(if_mask, then_val), BitAnd(BitNot(if_mask), else_val));
 8012aba:	68b9      	ldr	r1, [r7, #8]
 8012abc:	68f8      	ldr	r0, [r7, #12]
 8012abe:	f7ff f8d8 	bl	8011c72 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8012ac2:	4604      	mov	r4, r0
 8012ac4:	68f8      	ldr	r0, [r7, #12]
 8012ac6:	f7ff f938 	bl	8011d3a <_ZN8gemmlowp6BitNotIlEET_S1_>
 8012aca:	4603      	mov	r3, r0
 8012acc:	6879      	ldr	r1, [r7, #4]
 8012ace:	4618      	mov	r0, r3
 8012ad0:	f7ff f8cf 	bl	8011c72 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8012ad4:	4603      	mov	r3, r0
 8012ad6:	4619      	mov	r1, r3
 8012ad8:	4620      	mov	r0, r4
 8012ada:	f000 f805 	bl	8012ae8 <_ZN8gemmlowp6BitXorIlEET_S1_S1_>
 8012ade:	4603      	mov	r3, r0
}
 8012ae0:	4618      	mov	r0, r3
 8012ae2:	3714      	adds	r7, #20
 8012ae4:	46bd      	mov	sp, r7
 8012ae6:	bd90      	pop	{r4, r7, pc}

08012ae8 <_ZN8gemmlowp6BitXorIlEET_S1_S1_>:
tIntegerType BitXor(tIntegerType a, tIntegerType b) {
 8012ae8:	b480      	push	{r7}
 8012aea:	b083      	sub	sp, #12
 8012aec:	af00      	add	r7, sp, #0
 8012aee:	6078      	str	r0, [r7, #4]
 8012af0:	6039      	str	r1, [r7, #0]
  return a ^ b;
 8012af2:	687a      	ldr	r2, [r7, #4]
 8012af4:	683b      	ldr	r3, [r7, #0]
 8012af6:	4053      	eors	r3, r2
}
 8012af8:	4618      	mov	r0, r3
 8012afa:	370c      	adds	r7, #12
 8012afc:	46bd      	mov	sp, r7
 8012afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b02:	4770      	bx	lr

08012b04 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_>:
inline std::int32_t RoundingHalfSum(std::int32_t a, std::int32_t b) {
 8012b04:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8012b08:	b08b      	sub	sp, #44	; 0x2c
 8012b0a:	af00      	add	r7, sp, #0
 8012b0c:	6078      	str	r0, [r7, #4]
 8012b0e:	6039      	str	r1, [r7, #0]
  std::int64_t a64 = a;
 8012b10:	6879      	ldr	r1, [r7, #4]
 8012b12:	4608      	mov	r0, r1
 8012b14:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8012b18:	e9c7 0108 	strd	r0, r1, [r7, #32]
  std::int64_t b64 = b;
 8012b1c:	6839      	ldr	r1, [r7, #0]
 8012b1e:	4608      	mov	r0, r1
 8012b20:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8012b24:	e9c7 0106 	strd	r0, r1, [r7, #24]
  std::int64_t sum = a64 + b64;
 8012b28:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8012b2c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8012b30:	eb18 0a00 	adds.w	sl, r8, r0
 8012b34:	eb49 0b01 	adc.w	fp, r9, r1
 8012b38:	e9c7 ab04 	strd	sl, fp, [r7, #16]
  std::int64_t sign = sum >= 0 ? 1 : -1;
 8012b3c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8012b40:	2800      	cmp	r0, #0
 8012b42:	f171 0100 	sbcs.w	r1, r1, #0
 8012b46:	db04      	blt.n	8012b52 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_+0x4e>
 8012b48:	f04f 0001 	mov.w	r0, #1
 8012b4c:	f04f 0100 	mov.w	r1, #0
 8012b50:	e003      	b.n	8012b5a <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_+0x56>
 8012b52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012b56:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8012b5a:	e9c7 0102 	strd	r0, r1, [r7, #8]
  return static_cast<std::int32_t>((sum + sign) / 2);
 8012b5e:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8012b62:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8012b66:	eb18 0400 	adds.w	r4, r8, r0
 8012b6a:	eb49 0501 	adc.w	r5, r9, r1
 8012b6e:	0fe9      	lsrs	r1, r5, #31
 8012b70:	4608      	mov	r0, r1
 8012b72:	f04f 0100 	mov.w	r1, #0
 8012b76:	1902      	adds	r2, r0, r4
 8012b78:	eb41 0305 	adc.w	r3, r1, r5
 8012b7c:	f04f 0000 	mov.w	r0, #0
 8012b80:	f04f 0100 	mov.w	r1, #0
 8012b84:	0850      	lsrs	r0, r2, #1
 8012b86:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 8012b8a:	1059      	asrs	r1, r3, #1
 8012b8c:	4602      	mov	r2, r0
 8012b8e:	460b      	mov	r3, r1
 8012b90:	4613      	mov	r3, r2
}
 8012b92:	4618      	mov	r0, r3
 8012b94:	372c      	adds	r7, #44	; 0x2c
 8012b96:	46bd      	mov	sp, r7
 8012b98:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8012b9c:	4770      	bx	lr

08012b9e <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 8012b9e:	b580      	push	{r7, lr}
 8012ba0:	b084      	sub	sp, #16
 8012ba2:	af00      	add	r7, sp, #0
 8012ba4:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 8012ba6:	f107 030c 	add.w	r3, r7, #12
 8012baa:	4618      	mov	r0, r3
 8012bac:	f7ff fee6 	bl	801297c <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8012bb0:	4602      	mov	r2, r0
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	6013      	str	r3, [r2, #0]
    return retval;
 8012bb6:	68fb      	ldr	r3, [r7, #12]
  }
 8012bb8:	4618      	mov	r0, r3
 8012bba:	3710      	adds	r7, #16
 8012bbc:	46bd      	mov	sp, r7
 8012bbe:	bd80      	pop	{r7, pc}

08012bc0 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>:

// Implementation of logistic function.

// Returns 1 / (1 + x) for x in (0, 1).
template <typename tRawType>
FixedPoint<tRawType, 0> one_over_one_plus_x_for_x_in_0_1(
 8012bc0:	b580      	push	{r7, lr}
 8012bc2:	b08a      	sub	sp, #40	; 0x28
 8012bc4:	af00      	add	r7, sp, #0
 8012bc6:	6078      	str	r0, [r7, #4]
    FixedPoint<tRawType, 0> a) {
  typedef FixedPoint<tRawType, 0> F0;
  typedef FixedPoint<tRawType, 2> F2;
  F0 half_denominator = RoundingHalfSum(a, F0::One());
 8012bc8:	f000 f9f7 	bl	8012fba <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>
 8012bcc:	4603      	mov	r3, r0
 8012bce:	4619      	mov	r1, r3
 8012bd0:	6878      	ldr	r0, [r7, #4]
 8012bd2:	f000 f9fd 	bl	8012fd0 <_ZN8gemmlowp15RoundingHalfSumIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8012bd6:	4603      	mov	r3, r0
 8012bd8:	623b      	str	r3, [r7, #32]
  // Newton-Raphson division
  // https://en.wikipedia.org/wiki/Division_algorithm#Newton.E2.80.93Raphson_division
  // Refer to that page for the logic behind the 48/17 and 32/17 constants.
  const F2 constant_48_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, 1515870810, 48.0 / 17.0);
 8012bda:	f04f 305a 	mov.w	r0, #1515870810	; 0x5a5a5a5a
 8012bde:	f000 fa29 	bl	8013034 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>
 8012be2:	4603      	mov	r3, r0
 8012be4:	4618      	mov	r0, r3
 8012be6:	f000 fa11 	bl	801300c <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 8012bea:	4603      	mov	r3, r0
 8012bec:	61fb      	str	r3, [r7, #28]
  const F2 constant_neg_32_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, -1010580540, -32.0 / 17.0);
 8012bee:	4823      	ldr	r0, [pc, #140]	; (8012c7c <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xbc>)
 8012bf0:	f000 fa20 	bl	8013034 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>
 8012bf4:	4603      	mov	r3, r0
 8012bf6:	4618      	mov	r0, r3
 8012bf8:	f000 fa08 	bl	801300c <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 8012bfc:	4603      	mov	r3, r0
 8012bfe:	61bb      	str	r3, [r7, #24]
  F2 x = constant_48_over_17 + half_denominator * constant_neg_32_over_17;
 8012c00:	69b9      	ldr	r1, [r7, #24]
 8012c02:	6a38      	ldr	r0, [r7, #32]
 8012c04:	f000 fa23 	bl	801304e <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8012c08:	4603      	mov	r3, r0
 8012c0a:	4619      	mov	r1, r3
 8012c0c:	69f8      	ldr	r0, [r7, #28]
 8012c0e:	f000 fa40 	bl	8013092 <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8012c12:	4603      	mov	r3, r0
 8012c14:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < 3; i++) {
 8012c16:	2300      	movs	r3, #0
 8012c18:	627b      	str	r3, [r7, #36]	; 0x24
 8012c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c1c:	2b02      	cmp	r3, #2
 8012c1e:	dc21      	bgt.n	8012c64 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xa4>
    F2 half_denominator_times_x = half_denominator * x;
 8012c20:	6979      	ldr	r1, [r7, #20]
 8012c22:	6a38      	ldr	r0, [r7, #32]
 8012c24:	f000 fa13 	bl	801304e <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8012c28:	4603      	mov	r3, r0
 8012c2a:	613b      	str	r3, [r7, #16]
    F2 one_minus_half_denominator_times_x =
        F2::One() - half_denominator_times_x;
 8012c2c:	f000 fa4f 	bl	80130ce <_ZN8gemmlowp10FixedPointIlLi2EE3OneEv>
 8012c30:	4603      	mov	r3, r0
 8012c32:	6939      	ldr	r1, [r7, #16]
 8012c34:	4618      	mov	r0, r3
 8012c36:	f000 fa53 	bl	80130e0 <_ZN8gemmlowpmiIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8012c3a:	4603      	mov	r3, r0
 8012c3c:	60fb      	str	r3, [r7, #12]
    x = x + Rescale<2>(x * one_minus_half_denominator_times_x);
 8012c3e:	68f9      	ldr	r1, [r7, #12]
 8012c40:	6978      	ldr	r0, [r7, #20]
 8012c42:	f000 fa6b 	bl	801311c <_ZN8gemmlowpmlIlLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8012c46:	4603      	mov	r3, r0
 8012c48:	4618      	mov	r0, r3
 8012c4a:	f000 fa89 	bl	8013160 <_ZN8gemmlowp7RescaleILi2ElLi4EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 8012c4e:	4603      	mov	r3, r0
 8012c50:	4619      	mov	r1, r3
 8012c52:	6978      	ldr	r0, [r7, #20]
 8012c54:	f000 fa1d 	bl	8013092 <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8012c58:	4603      	mov	r3, r0
 8012c5a:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < 3; i++) {
 8012c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c5e:	3301      	adds	r3, #1
 8012c60:	627b      	str	r3, [r7, #36]	; 0x24
 8012c62:	e7da      	b.n	8012c1a <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x5a>
  }
  return Rescale<0>(ExactMulByPot<-1>(x));
 8012c64:	6978      	ldr	r0, [r7, #20]
 8012c66:	f000 fa95 	bl	8013194 <_ZN8gemmlowp13ExactMulByPotILin1ElLi2EEENS_10FixedPointIT0_XplT_T1_EEENS1_IS2_XT1_EEE>
 8012c6a:	4603      	mov	r3, r0
 8012c6c:	4618      	mov	r0, r3
 8012c6e:	f000 faa7 	bl	80131c0 <_ZN8gemmlowp7RescaleILi0ElLi1EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 8012c72:	4603      	mov	r3, r0
}
 8012c74:	4618      	mov	r0, r3
 8012c76:	3728      	adds	r7, #40	; 0x28
 8012c78:	46bd      	mov	sp, r7
 8012c7a:	bd80      	pop	{r7, pc}
 8012c7c:	c3c3c3c4 	.word	0xc3c3c3c4

08012c80 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 8012c80:	b580      	push	{r7, lr}
 8012c82:	b084      	sub	sp, #16
 8012c84:	af00      	add	r7, sp, #0
 8012c86:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 8012c88:	f107 030c 	add.w	r3, r7, #12
 8012c8c:	4618      	mov	r0, r3
 8012c8e:	f000 f989 	bl	8012fa4 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8012c92:	4602      	mov	r2, r0
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	6013      	str	r3, [r2, #0]
    return retval;
 8012c98:	68fb      	ldr	r3, [r7, #12]
  }
 8012c9a:	4618      	mov	r0, r3
 8012c9c:	3710      	adds	r7, #16
 8012c9e:	46bd      	mov	sp, r7
 8012ca0:	bd80      	pop	{r7, pc}
	...

08012ca4 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>:
FixedPoint<tRawType, 0> exp_on_negative_values(
 8012ca4:	b590      	push	{r4, r7, lr}
 8012ca6:	b091      	sub	sp, #68	; 0x44
 8012ca8:	af00      	add	r7, sp, #0
 8012caa:	6078      	str	r0, [r7, #4]
  const InputF kOneQuarter = InputF::template ConstantPOT<-2>();
 8012cac:	f000 faa2 	bl	80131f4 <_ZN8gemmlowp10FixedPointIlLi5EE11ConstantPOTILin2EEES1_v>
 8012cb0:	4603      	mov	r3, r0
 8012cb2:	637b      	str	r3, [r7, #52]	; 0x34
  InputF mask = kOneQuarter - InputF::FromScalarRaw(1);
 8012cb4:	2001      	movs	r0, #1
 8012cb6:	f000 faa6 	bl	8013206 <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>
 8012cba:	4603      	mov	r3, r0
 8012cbc:	4619      	mov	r1, r3
 8012cbe:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8012cc0:	f000 fab5 	bl	801322e <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8012cc4:	4603      	mov	r3, r0
 8012cc6:	633b      	str	r3, [r7, #48]	; 0x30
  InputF a_mod_quarter_minus_one_quarter = (a & mask) - kOneQuarter;
 8012cc8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012cca:	6878      	ldr	r0, [r7, #4]
 8012ccc:	f000 facd 	bl	801326a <_ZN8gemmlowpanIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8012cd0:	4603      	mov	r3, r0
 8012cd2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012cd4:	4618      	mov	r0, r3
 8012cd6:	f000 faaa 	bl	801322e <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8012cda:	4603      	mov	r3, r0
 8012cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  ResultF result = exp_on_interval_between_negative_one_quarter_and_0_excl(
 8012cde:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012ce0:	f000 fae1 	bl	80132a6 <_ZN8gemmlowp7RescaleILi0ElLi5EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 8012ce4:	4603      	mov	r3, r0
 8012ce6:	4618      	mov	r0, r3
 8012ce8:	f000 faf8 	bl	80132dc <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_>
 8012cec:	4603      	mov	r3, r0
 8012cee:	62bb      	str	r3, [r7, #40]	; 0x28
  tRawType remainder = (a_mod_quarter_minus_one_quarter - a).raw();
 8012cf0:	6879      	ldr	r1, [r7, #4]
 8012cf2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012cf4:	f000 fa9b 	bl	801322e <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8012cf8:	4603      	mov	r3, r0
 8012cfa:	63bb      	str	r3, [r7, #56]	; 0x38
 8012cfc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8012d00:	4618      	mov	r0, r3
 8012d02:	f000 f94f 	bl	8012fa4 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8012d06:	4603      	mov	r3, r0
 8012d08:	681b      	ldr	r3, [r3, #0]
 8012d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  GEMMLOWP_EXP_BARREL_SHIFTER(-2, 1672461947);
 8012d0c:	4883      	ldr	r0, [pc, #524]	; (8012f1c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x278>)
 8012d0e:	f7ff fe54 	bl	80129ba <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8012d12:	4603      	mov	r3, r0
 8012d14:	4618      	mov	r0, r3
 8012d16:	f7ff fe3c 	bl	8012992 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8012d1a:	4603      	mov	r3, r0
 8012d1c:	627b      	str	r3, [r7, #36]	; 0x24
 8012d1e:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8012d22:	f7fe ff9b 	bl	8011c5c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8012d26:	4603      	mov	r3, r0
 8012d28:	4619      	mov	r1, r3
 8012d2a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8012d2c:	f7fe ffa1 	bl	8011c72 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8012d30:	4603      	mov	r3, r0
 8012d32:	4618      	mov	r0, r3
 8012d34:	f7fe fff0 	bl	8011d18 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8012d38:	4604      	mov	r4, r0
 8012d3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012d3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012d3e:	f000 fb2f 	bl	80133a0 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8012d42:	4603      	mov	r3, r0
 8012d44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012d46:	4619      	mov	r1, r3
 8012d48:	4620      	mov	r0, r4
 8012d4a:	f000 fb4b 	bl	80133e4 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8012d4e:	4603      	mov	r3, r0
 8012d50:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(-1, 1302514674);
 8012d52:	4873      	ldr	r0, [pc, #460]	; (8012f20 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x27c>)
 8012d54:	f7ff fe31 	bl	80129ba <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8012d58:	4603      	mov	r3, r0
 8012d5a:	4618      	mov	r0, r3
 8012d5c:	f7ff fe19 	bl	8012992 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8012d60:	4603      	mov	r3, r0
 8012d62:	623b      	str	r3, [r7, #32]
 8012d64:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8012d68:	f7fe ff78 	bl	8011c5c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8012d6c:	4603      	mov	r3, r0
 8012d6e:	4619      	mov	r1, r3
 8012d70:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8012d72:	f7fe ff7e 	bl	8011c72 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8012d76:	4603      	mov	r3, r0
 8012d78:	4618      	mov	r0, r3
 8012d7a:	f7fe ffcd 	bl	8011d18 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8012d7e:	4604      	mov	r4, r0
 8012d80:	6a39      	ldr	r1, [r7, #32]
 8012d82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012d84:	f000 fb0c 	bl	80133a0 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8012d88:	4603      	mov	r3, r0
 8012d8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012d8c:	4619      	mov	r1, r3
 8012d8e:	4620      	mov	r0, r4
 8012d90:	f000 fb28 	bl	80133e4 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8012d94:	4603      	mov	r3, r0
 8012d96:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+0, 790015084);
 8012d98:	4862      	ldr	r0, [pc, #392]	; (8012f24 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x280>)
 8012d9a:	f7ff fe0e 	bl	80129ba <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8012d9e:	4603      	mov	r3, r0
 8012da0:	4618      	mov	r0, r3
 8012da2:	f7ff fdf6 	bl	8012992 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8012da6:	4603      	mov	r3, r0
 8012da8:	61fb      	str	r3, [r7, #28]
 8012daa:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8012dae:	f7fe ff55 	bl	8011c5c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8012db2:	4603      	mov	r3, r0
 8012db4:	4619      	mov	r1, r3
 8012db6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8012db8:	f7fe ff5b 	bl	8011c72 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8012dbc:	4603      	mov	r3, r0
 8012dbe:	4618      	mov	r0, r3
 8012dc0:	f7fe ffaa 	bl	8011d18 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8012dc4:	4604      	mov	r4, r0
 8012dc6:	69f9      	ldr	r1, [r7, #28]
 8012dc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012dca:	f000 fae9 	bl	80133a0 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8012dce:	4603      	mov	r3, r0
 8012dd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012dd2:	4619      	mov	r1, r3
 8012dd4:	4620      	mov	r0, r4
 8012dd6:	f000 fb05 	bl	80133e4 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8012dda:	4603      	mov	r3, r0
 8012ddc:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+1, 290630308);
 8012dde:	4852      	ldr	r0, [pc, #328]	; (8012f28 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x284>)
 8012de0:	f7ff fdeb 	bl	80129ba <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8012de4:	4603      	mov	r3, r0
 8012de6:	4618      	mov	r0, r3
 8012de8:	f7ff fdd3 	bl	8012992 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8012dec:	4603      	mov	r3, r0
 8012dee:	61bb      	str	r3, [r7, #24]
 8012df0:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8012df4:	f7fe ff32 	bl	8011c5c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8012df8:	4603      	mov	r3, r0
 8012dfa:	4619      	mov	r1, r3
 8012dfc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8012dfe:	f7fe ff38 	bl	8011c72 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8012e02:	4603      	mov	r3, r0
 8012e04:	4618      	mov	r0, r3
 8012e06:	f7fe ff87 	bl	8011d18 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8012e0a:	4604      	mov	r4, r0
 8012e0c:	69b9      	ldr	r1, [r7, #24]
 8012e0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012e10:	f000 fac6 	bl	80133a0 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8012e14:	4603      	mov	r3, r0
 8012e16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012e18:	4619      	mov	r1, r3
 8012e1a:	4620      	mov	r0, r4
 8012e1c:	f000 fae2 	bl	80133e4 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8012e20:	4603      	mov	r3, r0
 8012e22:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+2, 39332535);
 8012e24:	4841      	ldr	r0, [pc, #260]	; (8012f2c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x288>)
 8012e26:	f7ff fdc8 	bl	80129ba <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8012e2a:	4603      	mov	r3, r0
 8012e2c:	4618      	mov	r0, r3
 8012e2e:	f7ff fdb0 	bl	8012992 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8012e32:	4603      	mov	r3, r0
 8012e34:	617b      	str	r3, [r7, #20]
 8012e36:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8012e3a:	f7fe ff0f 	bl	8011c5c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8012e3e:	4603      	mov	r3, r0
 8012e40:	4619      	mov	r1, r3
 8012e42:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8012e44:	f7fe ff15 	bl	8011c72 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8012e48:	4603      	mov	r3, r0
 8012e4a:	4618      	mov	r0, r3
 8012e4c:	f7fe ff64 	bl	8011d18 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8012e50:	4604      	mov	r4, r0
 8012e52:	6979      	ldr	r1, [r7, #20]
 8012e54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012e56:	f000 faa3 	bl	80133a0 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8012e5a:	4603      	mov	r3, r0
 8012e5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012e5e:	4619      	mov	r1, r3
 8012e60:	4620      	mov	r0, r4
 8012e62:	f000 fabf 	bl	80133e4 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8012e66:	4603      	mov	r3, r0
 8012e68:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+3, 720401);
 8012e6a:	4831      	ldr	r0, [pc, #196]	; (8012f30 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x28c>)
 8012e6c:	f7ff fda5 	bl	80129ba <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8012e70:	4603      	mov	r3, r0
 8012e72:	4618      	mov	r0, r3
 8012e74:	f7ff fd8d 	bl	8012992 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8012e78:	4603      	mov	r3, r0
 8012e7a:	613b      	str	r3, [r7, #16]
 8012e7c:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8012e80:	f7fe feec 	bl	8011c5c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8012e84:	4603      	mov	r3, r0
 8012e86:	4619      	mov	r1, r3
 8012e88:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8012e8a:	f7fe fef2 	bl	8011c72 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8012e8e:	4603      	mov	r3, r0
 8012e90:	4618      	mov	r0, r3
 8012e92:	f7fe ff41 	bl	8011d18 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8012e96:	4604      	mov	r4, r0
 8012e98:	6939      	ldr	r1, [r7, #16]
 8012e9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012e9c:	f000 fa80 	bl	80133a0 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8012ea0:	4603      	mov	r3, r0
 8012ea2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012ea4:	4619      	mov	r1, r3
 8012ea6:	4620      	mov	r0, r4
 8012ea8:	f000 fa9c 	bl	80133e4 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8012eac:	4603      	mov	r3, r0
 8012eae:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+4, 242);
 8012eb0:	20f2      	movs	r0, #242	; 0xf2
 8012eb2:	f7ff fd82 	bl	80129ba <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8012eb6:	4603      	mov	r3, r0
 8012eb8:	4618      	mov	r0, r3
 8012eba:	f7ff fd6a 	bl	8012992 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8012ebe:	4603      	mov	r3, r0
 8012ec0:	60fb      	str	r3, [r7, #12]
 8012ec2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8012ec6:	f7fe fec9 	bl	8011c5c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8012eca:	4603      	mov	r3, r0
 8012ecc:	4619      	mov	r1, r3
 8012ece:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8012ed0:	f7fe fecf 	bl	8011c72 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8012ed4:	4603      	mov	r3, r0
 8012ed6:	4618      	mov	r0, r3
 8012ed8:	f7fe ff1e 	bl	8011d18 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8012edc:	4604      	mov	r4, r0
 8012ede:	68f9      	ldr	r1, [r7, #12]
 8012ee0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012ee2:	f000 fa5d 	bl	80133a0 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8012ee6:	4603      	mov	r3, r0
 8012ee8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012eea:	4619      	mov	r1, r3
 8012eec:	4620      	mov	r0, r4
 8012eee:	f000 fa79 	bl	80133e4 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8012ef2:	4603      	mov	r3, r0
 8012ef4:	62bb      	str	r3, [r7, #40]	; 0x28
  result = SelectUsingMask(MaskIfZero(a), ResultF::One(), result);
 8012ef6:	6878      	ldr	r0, [r7, #4]
 8012ef8:	f000 fa95 	bl	8013426 <_ZN8gemmlowp10MaskIfZeroIlLi5EEET_NS_10FixedPointIS1_XT0_EEE>
 8012efc:	4604      	mov	r4, r0
 8012efe:	f000 f85c 	bl	8012fba <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>
 8012f02:	4603      	mov	r3, r0
 8012f04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012f06:	4619      	mov	r1, r3
 8012f08:	4620      	mov	r0, r4
 8012f0a:	f000 fa6b 	bl	80133e4 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8012f0e:	4603      	mov	r3, r0
 8012f10:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8012f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8012f14:	4618      	mov	r0, r3
 8012f16:	3744      	adds	r7, #68	; 0x44
 8012f18:	46bd      	mov	sp, r7
 8012f1a:	bd90      	pop	{r4, r7, pc}
 8012f1c:	63afbe7b 	.word	0x63afbe7b
 8012f20:	4da2cbf2 	.word	0x4da2cbf2
 8012f24:	2f16ac6c 	.word	0x2f16ac6c
 8012f28:	1152aaa4 	.word	0x1152aaa4
 8012f2c:	02582ab7 	.word	0x02582ab7
 8012f30:	000afe11 	.word	0x000afe11

08012f34 <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 8012f34:	b5b0      	push	{r4, r5, r7, lr}
 8012f36:	b084      	sub	sp, #16
 8012f38:	af00      	add	r7, sp, #0
 8012f3a:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 8012f3c:	1d3b      	adds	r3, r7, #4
 8012f3e:	4618      	mov	r0, r3
 8012f40:	f7ff fd1c 	bl	801297c <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8012f44:	4603      	mov	r3, r0
 8012f46:	681d      	ldr	r5, [r3, #0]
 8012f48:	f107 030c 	add.w	r3, r7, #12
 8012f4c:	4618      	mov	r0, r3
 8012f4e:	f000 fa7c 	bl	801344a <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8012f52:	4604      	mov	r4, r0
 8012f54:	4628      	mov	r0, r5
 8012f56:	f000 fa83 	bl	8013460 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12ElEET0_S1_>
 8012f5a:	4603      	mov	r3, r0
 8012f5c:	6023      	str	r3, [r4, #0]
  return result;
 8012f5e:	68fb      	ldr	r3, [r7, #12]
}
 8012f60:	4618      	mov	r0, r3
 8012f62:	3710      	adds	r7, #16
 8012f64:	46bd      	mov	sp, r7
 8012f66:	bdb0      	pop	{r4, r5, r7, pc}

08012f68 <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 8012f68:	b590      	push	{r4, r7, lr}
 8012f6a:	b083      	sub	sp, #12
 8012f6c:	af00      	add	r7, sp, #0
 8012f6e:	6078      	str	r0, [r7, #4]
 8012f70:	6039      	str	r1, [r7, #0]
 8012f72:	1d3b      	adds	r3, r7, #4
 8012f74:	4618      	mov	r0, r3
 8012f76:	f000 fa68 	bl	801344a <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8012f7a:	4603      	mov	r3, r0
 8012f7c:	681c      	ldr	r4, [r3, #0]
 8012f7e:	463b      	mov	r3, r7
 8012f80:	4618      	mov	r0, r3
 8012f82:	f000 fa62 	bl	801344a <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8012f86:	4603      	mov	r3, r0
 8012f88:	681b      	ldr	r3, [r3, #0]
 8012f8a:	4619      	mov	r1, r3
 8012f8c:	4620      	mov	r0, r4
 8012f8e:	f7fe fea1 	bl	8011cd4 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 8012f92:	4603      	mov	r3, r0
 8012f94:	4618      	mov	r0, r3
 8012f96:	f000 fa6f 	bl	8013478 <_ZN8gemmlowp10FixedPointIlLi12EE7FromRawEl>
 8012f9a:	4603      	mov	r3, r0
 8012f9c:	4618      	mov	r0, r3
 8012f9e:	370c      	adds	r7, #12
 8012fa0:	46bd      	mov	sp, r7
 8012fa2:	bd90      	pop	{r4, r7, pc}

08012fa4 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>:
  RawType& raw() { return i_; }
 8012fa4:	b480      	push	{r7}
 8012fa6:	b083      	sub	sp, #12
 8012fa8:	af00      	add	r7, sp, #0
 8012faa:	6078      	str	r0, [r7, #4]
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	4618      	mov	r0, r3
 8012fb0:	370c      	adds	r7, #12
 8012fb2:	46bd      	mov	sp, r7
 8012fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fb8:	4770      	bx	lr

08012fba <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>:
  static FixedPoint One() {
 8012fba:	b580      	push	{r7, lr}
 8012fbc:	af00      	add	r7, sp, #0
    return FromScalarRaw(
 8012fbe:	f000 fa82 	bl	80134c6 <_ZN8gemmlowp10FixedPointIlLi0EE12ScalarRawMaxEv>
 8012fc2:	4603      	mov	r3, r0
 8012fc4:	4618      	mov	r0, r3
 8012fc6:	f7ff fce4 	bl	8012992 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8012fca:	4603      	mov	r3, r0
  }
 8012fcc:	4618      	mov	r0, r3
 8012fce:	bd80      	pop	{r7, pc}

08012fd0 <_ZN8gemmlowp15RoundingHalfSumIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(RoundingHalfSum, RoundingHalfSum)
 8012fd0:	b590      	push	{r4, r7, lr}
 8012fd2:	b083      	sub	sp, #12
 8012fd4:	af00      	add	r7, sp, #0
 8012fd6:	6078      	str	r0, [r7, #4]
 8012fd8:	6039      	str	r1, [r7, #0]
 8012fda:	1d3b      	adds	r3, r7, #4
 8012fdc:	4618      	mov	r0, r3
 8012fde:	f7ff fccd 	bl	801297c <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8012fe2:	4603      	mov	r3, r0
 8012fe4:	681c      	ldr	r4, [r3, #0]
 8012fe6:	463b      	mov	r3, r7
 8012fe8:	4618      	mov	r0, r3
 8012fea:	f7ff fcc7 	bl	801297c <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8012fee:	4603      	mov	r3, r0
 8012ff0:	681b      	ldr	r3, [r3, #0]
 8012ff2:	4619      	mov	r1, r3
 8012ff4:	4620      	mov	r0, r4
 8012ff6:	f7ff fd85 	bl	8012b04 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_>
 8012ffa:	4603      	mov	r3, r0
 8012ffc:	4618      	mov	r0, r3
 8012ffe:	f7ff fdce 	bl	8012b9e <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8013002:	4603      	mov	r3, r0
 8013004:	4618      	mov	r0, r3
 8013006:	370c      	adds	r7, #12
 8013008:	46bd      	mov	sp, r7
 801300a:	bd90      	pop	{r4, r7, pc}

0801300c <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 801300c:	b590      	push	{r4, r7, lr}
 801300e:	b085      	sub	sp, #20
 8013010:	af00      	add	r7, sp, #0
 8013012:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 8013014:	f107 030c 	add.w	r3, r7, #12
 8013018:	4618      	mov	r0, r3
 801301a:	f000 fa5b 	bl	80134d4 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801301e:	4604      	mov	r4, r0
 8013020:	6878      	ldr	r0, [r7, #4]
 8013022:	f7fe fe1b 	bl	8011c5c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8013026:	4603      	mov	r3, r0
 8013028:	6023      	str	r3, [r4, #0]
    return retval;
 801302a:	68fb      	ldr	r3, [r7, #12]
  }
 801302c:	4618      	mov	r0, r3
 801302e:	3714      	adds	r7, #20
 8013030:	46bd      	mov	sp, r7
 8013032:	bd90      	pop	{r4, r7, pc}

08013034 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>:
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
 8013034:	b580      	push	{r7, lr}
 8013036:	b082      	sub	sp, #8
 8013038:	af00      	add	r7, sp, #0
 801303a:	6078      	str	r0, [r7, #4]
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
 801303c:	2100      	movs	r1, #0
 801303e:	6878      	ldr	r0, [r7, #4]
 8013040:	f7fe fa48 	bl	80114d4 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8013044:	4603      	mov	r3, r0
}
 8013046:	4618      	mov	r0, r3
 8013048:	3708      	adds	r7, #8
 801304a:	46bd      	mov	sp, r7
 801304c:	bd80      	pop	{r7, pc}

0801304e <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 801304e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013050:	b085      	sub	sp, #20
 8013052:	af00      	add	r7, sp, #0
 8013054:	6078      	str	r0, [r7, #4]
 8013056:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 8013058:	1d3b      	adds	r3, r7, #4
 801305a:	4618      	mov	r0, r3
 801305c:	f7ff fc8e 	bl	801297c <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8013060:	4603      	mov	r3, r0
 8013062:	681d      	ldr	r5, [r3, #0]
 8013064:	463b      	mov	r3, r7
 8013066:	4618      	mov	r0, r3
 8013068:	f000 fa34 	bl	80134d4 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801306c:	4603      	mov	r3, r0
 801306e:	681e      	ldr	r6, [r3, #0]
 8013070:	f107 030c 	add.w	r3, r7, #12
 8013074:	4618      	mov	r0, r3
 8013076:	f000 fa2d 	bl	80134d4 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801307a:	4604      	mov	r4, r0
 801307c:	4631      	mov	r1, r6
 801307e:	4628      	mov	r0, r5
 8013080:	f7fd fdbe 	bl	8010c00 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 8013084:	4603      	mov	r3, r0
 8013086:	6023      	str	r3, [r4, #0]
  return c;
 8013088:	68fb      	ldr	r3, [r7, #12]
}
 801308a:	4618      	mov	r0, r3
 801308c:	3714      	adds	r7, #20
 801308e:	46bd      	mov	sp, r7
 8013090:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013092 <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 8013092:	b590      	push	{r4, r7, lr}
 8013094:	b083      	sub	sp, #12
 8013096:	af00      	add	r7, sp, #0
 8013098:	6078      	str	r0, [r7, #4]
 801309a:	6039      	str	r1, [r7, #0]
 801309c:	1d3b      	adds	r3, r7, #4
 801309e:	4618      	mov	r0, r3
 80130a0:	f000 fa18 	bl	80134d4 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 80130a4:	4603      	mov	r3, r0
 80130a6:	681c      	ldr	r4, [r3, #0]
 80130a8:	463b      	mov	r3, r7
 80130aa:	4618      	mov	r0, r3
 80130ac:	f000 fa12 	bl	80134d4 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 80130b0:	4603      	mov	r3, r0
 80130b2:	681b      	ldr	r3, [r3, #0]
 80130b4:	4619      	mov	r1, r3
 80130b6:	4620      	mov	r0, r4
 80130b8:	f7fe fe0c 	bl	8011cd4 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 80130bc:	4603      	mov	r3, r0
 80130be:	4618      	mov	r0, r3
 80130c0:	f000 fa13 	bl	80134ea <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>
 80130c4:	4603      	mov	r3, r0
 80130c6:	4618      	mov	r0, r3
 80130c8:	370c      	adds	r7, #12
 80130ca:	46bd      	mov	sp, r7
 80130cc:	bd90      	pop	{r4, r7, pc}

080130ce <_ZN8gemmlowp10FixedPointIlLi2EE3OneEv>:
  static FixedPoint One() {
 80130ce:	b580      	push	{r7, lr}
 80130d0:	af00      	add	r7, sp, #0
    return FromScalarRaw(
 80130d2:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 80130d6:	f7ff ff99 	bl	801300c <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 80130da:	4603      	mov	r3, r0
  }
 80130dc:	4618      	mov	r0, r3
 80130de:	bd80      	pop	{r7, pc}

080130e0 <_ZN8gemmlowpmiIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator-, Sub)
 80130e0:	b590      	push	{r4, r7, lr}
 80130e2:	b083      	sub	sp, #12
 80130e4:	af00      	add	r7, sp, #0
 80130e6:	6078      	str	r0, [r7, #4]
 80130e8:	6039      	str	r1, [r7, #0]
 80130ea:	1d3b      	adds	r3, r7, #4
 80130ec:	4618      	mov	r0, r3
 80130ee:	f000 f9f1 	bl	80134d4 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 80130f2:	4603      	mov	r3, r0
 80130f4:	681c      	ldr	r4, [r3, #0]
 80130f6:	463b      	mov	r3, r7
 80130f8:	4618      	mov	r0, r3
 80130fa:	f000 f9eb 	bl	80134d4 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 80130fe:	4603      	mov	r3, r0
 8013100:	681b      	ldr	r3, [r3, #0]
 8013102:	4619      	mov	r1, r3
 8013104:	4620      	mov	r0, r4
 8013106:	f7ff fc71 	bl	80129ec <_ZN8gemmlowp3SubIlEET_S1_S1_>
 801310a:	4603      	mov	r3, r0
 801310c:	4618      	mov	r0, r3
 801310e:	f000 f9ec 	bl	80134ea <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>
 8013112:	4603      	mov	r3, r0
 8013114:	4618      	mov	r0, r3
 8013116:	370c      	adds	r7, #12
 8013118:	46bd      	mov	sp, r7
 801311a:	bd90      	pop	{r4, r7, pc}

0801311c <_ZN8gemmlowpmlIlLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 801311c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801311e:	b085      	sub	sp, #20
 8013120:	af00      	add	r7, sp, #0
 8013122:	6078      	str	r0, [r7, #4]
 8013124:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 8013126:	1d3b      	adds	r3, r7, #4
 8013128:	4618      	mov	r0, r3
 801312a:	f000 f9d3 	bl	80134d4 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801312e:	4603      	mov	r3, r0
 8013130:	681d      	ldr	r5, [r3, #0]
 8013132:	463b      	mov	r3, r7
 8013134:	4618      	mov	r0, r3
 8013136:	f000 f9cd 	bl	80134d4 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801313a:	4603      	mov	r3, r0
 801313c:	681e      	ldr	r6, [r3, #0]
 801313e:	f107 030c 	add.w	r3, r7, #12
 8013142:	4618      	mov	r0, r3
 8013144:	f000 f9e2 	bl	801350c <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>
 8013148:	4604      	mov	r4, r0
 801314a:	4631      	mov	r1, r6
 801314c:	4628      	mov	r0, r5
 801314e:	f7fd fd57 	bl	8010c00 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 8013152:	4603      	mov	r3, r0
 8013154:	6023      	str	r3, [r4, #0]
  return c;
 8013156:	68fb      	ldr	r3, [r7, #12]
}
 8013158:	4618      	mov	r0, r3
 801315a:	3714      	adds	r7, #20
 801315c:	46bd      	mov	sp, r7
 801315e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013160 <_ZN8gemmlowp7RescaleILi2ElLi4EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 8013160:	b5b0      	push	{r4, r5, r7, lr}
 8013162:	b084      	sub	sp, #16
 8013164:	af00      	add	r7, sp, #0
 8013166:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 8013168:	1d3b      	adds	r3, r7, #4
 801316a:	4618      	mov	r0, r3
 801316c:	f000 f9ce 	bl	801350c <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>
 8013170:	4603      	mov	r3, r0
 8013172:	681d      	ldr	r5, [r3, #0]
 8013174:	f107 030c 	add.w	r3, r7, #12
 8013178:	4618      	mov	r0, r3
 801317a:	f000 f9ab 	bl	80134d4 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801317e:	4604      	mov	r4, r0
 8013180:	4628      	mov	r0, r5
 8013182:	f000 f9ce 	bl	8013522 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2ElEET0_S1_>
 8013186:	4603      	mov	r3, r0
 8013188:	6023      	str	r3, [r4, #0]
  return result;
 801318a:	68fb      	ldr	r3, [r7, #12]
}
 801318c:	4618      	mov	r0, r3
 801318e:	3710      	adds	r7, #16
 8013190:	46bd      	mov	sp, r7
 8013192:	bdb0      	pop	{r4, r5, r7, pc}

08013194 <_ZN8gemmlowp13ExactMulByPotILin1ElLi2EEENS_10FixedPointIT0_XplT_T1_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tExponent + tIntegerBits> ExactMulByPot(
 8013194:	b590      	push	{r4, r7, lr}
 8013196:	b085      	sub	sp, #20
 8013198:	af00      	add	r7, sp, #0
 801319a:	6078      	str	r0, [r7, #4]
  c.raw() = a.raw();
 801319c:	1d3b      	adds	r3, r7, #4
 801319e:	4618      	mov	r0, r3
 80131a0:	f000 f998 	bl	80134d4 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 80131a4:	4604      	mov	r4, r0
 80131a6:	f107 030c 	add.w	r3, r7, #12
 80131aa:	4618      	mov	r0, r3
 80131ac:	f000 f9c5 	bl	801353a <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>
 80131b0:	4602      	mov	r2, r0
 80131b2:	6823      	ldr	r3, [r4, #0]
 80131b4:	6013      	str	r3, [r2, #0]
  return c;
 80131b6:	68fb      	ldr	r3, [r7, #12]
}
 80131b8:	4618      	mov	r0, r3
 80131ba:	3714      	adds	r7, #20
 80131bc:	46bd      	mov	sp, r7
 80131be:	bd90      	pop	{r4, r7, pc}

080131c0 <_ZN8gemmlowp7RescaleILi0ElLi1EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 80131c0:	b5b0      	push	{r4, r5, r7, lr}
 80131c2:	b084      	sub	sp, #16
 80131c4:	af00      	add	r7, sp, #0
 80131c6:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 80131c8:	1d3b      	adds	r3, r7, #4
 80131ca:	4618      	mov	r0, r3
 80131cc:	f000 f9b5 	bl	801353a <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>
 80131d0:	4603      	mov	r3, r0
 80131d2:	681d      	ldr	r5, [r3, #0]
 80131d4:	f107 030c 	add.w	r3, r7, #12
 80131d8:	4618      	mov	r0, r3
 80131da:	f7ff fbcf 	bl	801297c <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80131de:	4604      	mov	r4, r0
 80131e0:	4628      	mov	r0, r5
 80131e2:	f000 f9b5 	bl	8013550 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1ElEET0_S1_>
 80131e6:	4603      	mov	r3, r0
 80131e8:	6023      	str	r3, [r4, #0]
  return result;
 80131ea:	68fb      	ldr	r3, [r7, #12]
}
 80131ec:	4618      	mov	r0, r3
 80131ee:	3710      	adds	r7, #16
 80131f0:	46bd      	mov	sp, r7
 80131f2:	bdb0      	pop	{r4, r5, r7, pc}

080131f4 <_ZN8gemmlowp10FixedPointIlLi5EE11ConstantPOTILin2EEES1_v>:
  static FixedPoint ConstantPOT() {
 80131f4:	b580      	push	{r7, lr}
 80131f6:	af00      	add	r7, sp, #0
    return FromScalarRaw(ScalarRawType(1) << kOffset);
 80131f8:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80131fc:	f000 f803 	bl	8013206 <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>
 8013200:	4603      	mov	r3, r0
  }
 8013202:	4618      	mov	r0, r3
 8013204:	bd80      	pop	{r7, pc}

08013206 <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 8013206:	b590      	push	{r4, r7, lr}
 8013208:	b085      	sub	sp, #20
 801320a:	af00      	add	r7, sp, #0
 801320c:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 801320e:	f107 030c 	add.w	r3, r7, #12
 8013212:	4618      	mov	r0, r3
 8013214:	f7ff fec6 	bl	8012fa4 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8013218:	4604      	mov	r4, r0
 801321a:	6878      	ldr	r0, [r7, #4]
 801321c:	f7fe fd1e 	bl	8011c5c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8013220:	4603      	mov	r3, r0
 8013222:	6023      	str	r3, [r4, #0]
    return retval;
 8013224:	68fb      	ldr	r3, [r7, #12]
  }
 8013226:	4618      	mov	r0, r3
 8013228:	3714      	adds	r7, #20
 801322a:	46bd      	mov	sp, r7
 801322c:	bd90      	pop	{r4, r7, pc}

0801322e <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator-, Sub)
 801322e:	b590      	push	{r4, r7, lr}
 8013230:	b083      	sub	sp, #12
 8013232:	af00      	add	r7, sp, #0
 8013234:	6078      	str	r0, [r7, #4]
 8013236:	6039      	str	r1, [r7, #0]
 8013238:	1d3b      	adds	r3, r7, #4
 801323a:	4618      	mov	r0, r3
 801323c:	f7ff feb2 	bl	8012fa4 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8013240:	4603      	mov	r3, r0
 8013242:	681c      	ldr	r4, [r3, #0]
 8013244:	463b      	mov	r3, r7
 8013246:	4618      	mov	r0, r3
 8013248:	f7ff feac 	bl	8012fa4 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801324c:	4603      	mov	r3, r0
 801324e:	681b      	ldr	r3, [r3, #0]
 8013250:	4619      	mov	r1, r3
 8013252:	4620      	mov	r0, r4
 8013254:	f7ff fbca 	bl	80129ec <_ZN8gemmlowp3SubIlEET_S1_S1_>
 8013258:	4603      	mov	r3, r0
 801325a:	4618      	mov	r0, r3
 801325c:	f7ff fd10 	bl	8012c80 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 8013260:	4603      	mov	r3, r0
 8013262:	4618      	mov	r0, r3
 8013264:	370c      	adds	r7, #12
 8013266:	46bd      	mov	sp, r7
 8013268:	bd90      	pop	{r4, r7, pc}

0801326a <_ZN8gemmlowpanIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator&, BitAnd)
 801326a:	b590      	push	{r4, r7, lr}
 801326c:	b083      	sub	sp, #12
 801326e:	af00      	add	r7, sp, #0
 8013270:	6078      	str	r0, [r7, #4]
 8013272:	6039      	str	r1, [r7, #0]
 8013274:	1d3b      	adds	r3, r7, #4
 8013276:	4618      	mov	r0, r3
 8013278:	f7ff fe94 	bl	8012fa4 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801327c:	4603      	mov	r3, r0
 801327e:	681c      	ldr	r4, [r3, #0]
 8013280:	463b      	mov	r3, r7
 8013282:	4618      	mov	r0, r3
 8013284:	f7ff fe8e 	bl	8012fa4 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8013288:	4603      	mov	r3, r0
 801328a:	681b      	ldr	r3, [r3, #0]
 801328c:	4619      	mov	r1, r3
 801328e:	4620      	mov	r0, r4
 8013290:	f7fe fcef 	bl	8011c72 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8013294:	4603      	mov	r3, r0
 8013296:	4618      	mov	r0, r3
 8013298:	f7ff fcf2 	bl	8012c80 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 801329c:	4603      	mov	r3, r0
 801329e:	4618      	mov	r0, r3
 80132a0:	370c      	adds	r7, #12
 80132a2:	46bd      	mov	sp, r7
 80132a4:	bd90      	pop	{r4, r7, pc}

080132a6 <_ZN8gemmlowp7RescaleILi0ElLi5EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 80132a6:	b5b0      	push	{r4, r5, r7, lr}
 80132a8:	b084      	sub	sp, #16
 80132aa:	af00      	add	r7, sp, #0
 80132ac:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 80132ae:	1d3b      	adds	r3, r7, #4
 80132b0:	4618      	mov	r0, r3
 80132b2:	f7ff fe77 	bl	8012fa4 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 80132b6:	4603      	mov	r3, r0
 80132b8:	681d      	ldr	r5, [r3, #0]
 80132ba:	f107 030c 	add.w	r3, r7, #12
 80132be:	4618      	mov	r0, r3
 80132c0:	f7ff fb5c 	bl	801297c <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80132c4:	4604      	mov	r4, r0
 80132c6:	4628      	mov	r0, r5
 80132c8:	f000 f94e 	bl	8013568 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5ElEET0_S1_>
 80132cc:	4603      	mov	r3, r0
 80132ce:	6023      	str	r3, [r4, #0]
  return result;
 80132d0:	68fb      	ldr	r3, [r7, #12]
}
 80132d2:	4618      	mov	r0, r3
 80132d4:	3710      	adds	r7, #16
 80132d6:	46bd      	mov	sp, r7
 80132d8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080132dc <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_>:
FixedPoint<tRawType, 0> exp_on_interval_between_negative_one_quarter_and_0_excl(
 80132dc:	b580      	push	{r7, lr}
 80132de:	b08a      	sub	sp, #40	; 0x28
 80132e0:	af00      	add	r7, sp, #0
 80132e2:	6078      	str	r0, [r7, #4]
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 1895147668, std::exp(-1.0 / 8.0));
 80132e4:	482c      	ldr	r0, [pc, #176]	; (8013398 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0xbc>)
 80132e6:	f7ff fb68 	bl	80129ba <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 80132ea:	4603      	mov	r3, r0
 80132ec:	4618      	mov	r0, r3
 80132ee:	f7ff fb50 	bl	8012992 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 80132f2:	4603      	mov	r3, r0
 80132f4:	627b      	str	r3, [r7, #36]	; 0x24
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 715827883, 1.0 / 3.0);
 80132f6:	4829      	ldr	r0, [pc, #164]	; (801339c <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0xc0>)
 80132f8:	f7ff fb5f 	bl	80129ba <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 80132fc:	4603      	mov	r3, r0
 80132fe:	4618      	mov	r0, r3
 8013300:	f7ff fb47 	bl	8012992 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8013304:	4603      	mov	r3, r0
 8013306:	623b      	str	r3, [r7, #32]
  F x = a + F::template ConstantPOT<-3>();
 8013308:	f000 f93a 	bl	8013580 <_ZN8gemmlowp10FixedPointIlLi0EE11ConstantPOTILin3EEES1_v>
 801330c:	4603      	mov	r3, r0
 801330e:	4619      	mov	r1, r3
 8013310:	6878      	ldr	r0, [r7, #4]
 8013312:	f000 f93e 	bl	8013592 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8013316:	4603      	mov	r3, r0
 8013318:	61fb      	str	r3, [r7, #28]
  F x2 = x * x;
 801331a:	69f9      	ldr	r1, [r7, #28]
 801331c:	69f8      	ldr	r0, [r7, #28]
 801331e:	f000 f83f 	bl	80133a0 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8013322:	4603      	mov	r3, r0
 8013324:	61bb      	str	r3, [r7, #24]
  F x3 = x2 * x;
 8013326:	69f9      	ldr	r1, [r7, #28]
 8013328:	69b8      	ldr	r0, [r7, #24]
 801332a:	f000 f839 	bl	80133a0 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801332e:	4603      	mov	r3, r0
 8013330:	617b      	str	r3, [r7, #20]
  F x4 = x2 * x2;
 8013332:	69b9      	ldr	r1, [r7, #24]
 8013334:	69b8      	ldr	r0, [r7, #24]
 8013336:	f000 f833 	bl	80133a0 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801333a:	4603      	mov	r3, r0
 801333c:	613b      	str	r3, [r7, #16]
  F x4_over_4 = SaturatingRoundingMultiplyByPOT<-2>(x4);
 801333e:	6938      	ldr	r0, [r7, #16]
 8013340:	f000 f945 	bl	80135ce <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>
 8013344:	4603      	mov	r3, r0
 8013346:	60fb      	str	r3, [r7, #12]
      SaturatingRoundingMultiplyByPOT<-1>(
 8013348:	6979      	ldr	r1, [r7, #20]
 801334a:	68f8      	ldr	r0, [r7, #12]
 801334c:	f000 f921 	bl	8013592 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8013350:	4603      	mov	r3, r0
 8013352:	6a39      	ldr	r1, [r7, #32]
 8013354:	4618      	mov	r0, r3
 8013356:	f000 f823 	bl	80133a0 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801335a:	4603      	mov	r3, r0
 801335c:	69b9      	ldr	r1, [r7, #24]
 801335e:	4618      	mov	r0, r3
 8013360:	f000 f917 	bl	8013592 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8013364:	4603      	mov	r3, r0
 8013366:	4618      	mov	r0, r3
 8013368:	f000 f947 	bl	80135fa <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>
 801336c:	4603      	mov	r3, r0
 801336e:	60bb      	str	r3, [r7, #8]
  return AddSaturatingIf16Bit(
 8013370:	68b9      	ldr	r1, [r7, #8]
 8013372:	69f8      	ldr	r0, [r7, #28]
 8013374:	f000 f90d 	bl	8013592 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8013378:	4603      	mov	r3, r0
 801337a:	4619      	mov	r1, r3
 801337c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801337e:	f000 f80f 	bl	80133a0 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8013382:	4603      	mov	r3, r0
 8013384:	4619      	mov	r1, r3
 8013386:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013388:	f000 f94d 	bl	8013626 <_ZN8gemmlowp20AddSaturatingIf16BitIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801338c:	4603      	mov	r3, r0
}
 801338e:	4618      	mov	r0, r3
 8013390:	3728      	adds	r7, #40	; 0x28
 8013392:	46bd      	mov	sp, r7
 8013394:	bd80      	pop	{r7, pc}
 8013396:	bf00      	nop
 8013398:	70f5a894 	.word	0x70f5a894
 801339c:	2aaaaaab 	.word	0x2aaaaaab

080133a0 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 80133a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80133a2:	b085      	sub	sp, #20
 80133a4:	af00      	add	r7, sp, #0
 80133a6:	6078      	str	r0, [r7, #4]
 80133a8:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 80133aa:	1d3b      	adds	r3, r7, #4
 80133ac:	4618      	mov	r0, r3
 80133ae:	f7ff fae5 	bl	801297c <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80133b2:	4603      	mov	r3, r0
 80133b4:	681d      	ldr	r5, [r3, #0]
 80133b6:	463b      	mov	r3, r7
 80133b8:	4618      	mov	r0, r3
 80133ba:	f7ff fadf 	bl	801297c <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80133be:	4603      	mov	r3, r0
 80133c0:	681e      	ldr	r6, [r3, #0]
 80133c2:	f107 030c 	add.w	r3, r7, #12
 80133c6:	4618      	mov	r0, r3
 80133c8:	f7ff fad8 	bl	801297c <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80133cc:	4604      	mov	r4, r0
 80133ce:	4631      	mov	r1, r6
 80133d0:	4628      	mov	r0, r5
 80133d2:	f7fd fc15 	bl	8010c00 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 80133d6:	4603      	mov	r3, r0
 80133d8:	6023      	str	r3, [r4, #0]
  return c;
 80133da:	68fb      	ldr	r3, [r7, #12]
}
 80133dc:	4618      	mov	r0, r3
 80133de:	3714      	adds	r7, #20
 80133e0:	46bd      	mov	sp, r7
 80133e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080133e4 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>:
FixedPoint<tRawType, tIntegerBits> SelectUsingMask(
 80133e4:	b590      	push	{r4, r7, lr}
 80133e6:	b085      	sub	sp, #20
 80133e8:	af00      	add	r7, sp, #0
 80133ea:	60f8      	str	r0, [r7, #12]
 80133ec:	60b9      	str	r1, [r7, #8]
 80133ee:	607a      	str	r2, [r7, #4]
      SelectUsingMask(if_mask, then_val.raw(), else_val.raw()));
 80133f0:	f107 0308 	add.w	r3, r7, #8
 80133f4:	4618      	mov	r0, r3
 80133f6:	f7ff fac1 	bl	801297c <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80133fa:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 80133fc:	681c      	ldr	r4, [r3, #0]
      SelectUsingMask(if_mask, then_val.raw(), else_val.raw()));
 80133fe:	1d3b      	adds	r3, r7, #4
 8013400:	4618      	mov	r0, r3
 8013402:	f7ff fabb 	bl	801297c <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8013406:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 8013408:	681b      	ldr	r3, [r3, #0]
 801340a:	461a      	mov	r2, r3
 801340c:	4621      	mov	r1, r4
 801340e:	68f8      	ldr	r0, [r7, #12]
 8013410:	f7ff fb4d 	bl	8012aae <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 8013414:	4603      	mov	r3, r0
 8013416:	4618      	mov	r0, r3
 8013418:	f7ff fbc1 	bl	8012b9e <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 801341c:	4603      	mov	r3, r0
}
 801341e:	4618      	mov	r0, r3
 8013420:	3714      	adds	r7, #20
 8013422:	46bd      	mov	sp, r7
 8013424:	bd90      	pop	{r4, r7, pc}

08013426 <_ZN8gemmlowp10MaskIfZeroIlLi5EEET_NS_10FixedPointIS1_XT0_EEE>:
MAKE_FIXEDPOINT_UNARY_FUNC_RETURNING_RAW(MaskIfZero)
 8013426:	b580      	push	{r7, lr}
 8013428:	b082      	sub	sp, #8
 801342a:	af00      	add	r7, sp, #0
 801342c:	6078      	str	r0, [r7, #4]
 801342e:	1d3b      	adds	r3, r7, #4
 8013430:	4618      	mov	r0, r3
 8013432:	f7ff fdb7 	bl	8012fa4 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8013436:	4603      	mov	r3, r0
 8013438:	681b      	ldr	r3, [r3, #0]
 801343a:	4618      	mov	r0, r3
 801343c:	f000 f911 	bl	8013662 <_ZN8gemmlowp10MaskIfZeroIlEET_S1_>
 8013440:	4603      	mov	r3, r0
 8013442:	4618      	mov	r0, r3
 8013444:	3708      	adds	r7, #8
 8013446:	46bd      	mov	sp, r7
 8013448:	bd80      	pop	{r7, pc}

0801344a <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>:
  RawType& raw() { return i_; }
 801344a:	b480      	push	{r7}
 801344c:	b083      	sub	sp, #12
 801344e:	af00      	add	r7, sp, #0
 8013450:	6078      	str	r0, [r7, #4]
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	4618      	mov	r0, r3
 8013456:	370c      	adds	r7, #12
 8013458:	46bd      	mov	sp, r7
 801345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801345e:	4770      	bx	lr

08013460 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 8013460:	b580      	push	{r7, lr}
 8013462:	b082      	sub	sp, #8
 8013464:	af00      	add	r7, sp, #0
 8013466:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 8013468:	6878      	ldr	r0, [r7, #4]
 801346a:	f000 f90c 	bl	8013686 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin12ElLin1EE4evalEl>
 801346e:	4603      	mov	r3, r0
}
 8013470:	4618      	mov	r0, r3
 8013472:	3708      	adds	r7, #8
 8013474:	46bd      	mov	sp, r7
 8013476:	bd80      	pop	{r7, pc}

08013478 <_ZN8gemmlowp10FixedPointIlLi12EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 8013478:	b580      	push	{r7, lr}
 801347a:	b084      	sub	sp, #16
 801347c:	af00      	add	r7, sp, #0
 801347e:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 8013480:	f107 030c 	add.w	r3, r7, #12
 8013484:	4618      	mov	r0, r3
 8013486:	f7ff ffe0 	bl	801344a <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 801348a:	4602      	mov	r2, r0
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	6013      	str	r3, [r2, #0]
    return retval;
 8013490:	68fb      	ldr	r3, [r7, #12]
  }
 8013492:	4618      	mov	r0, r3
 8013494:	3710      	adds	r7, #16
 8013496:	46bd      	mov	sp, r7
 8013498:	bd80      	pop	{r7, pc}

0801349a <_ZSt3maxIaERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 801349a:	b480      	push	{r7}
 801349c:	b083      	sub	sp, #12
 801349e:	af00      	add	r7, sp, #0
 80134a0:	6078      	str	r0, [r7, #4]
 80134a2:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	f993 2000 	ldrsb.w	r2, [r3]
 80134aa:	683b      	ldr	r3, [r7, #0]
 80134ac:	f993 3000 	ldrsb.w	r3, [r3]
 80134b0:	429a      	cmp	r2, r3
 80134b2:	da01      	bge.n	80134b8 <_ZSt3maxIaERKT_S2_S2_+0x1e>
	return __b;
 80134b4:	683b      	ldr	r3, [r7, #0]
 80134b6:	e000      	b.n	80134ba <_ZSt3maxIaERKT_S2_S2_+0x20>
      return __a;
 80134b8:	687b      	ldr	r3, [r7, #4]
    }
 80134ba:	4618      	mov	r0, r3
 80134bc:	370c      	adds	r7, #12
 80134be:	46bd      	mov	sp, r7
 80134c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134c4:	4770      	bx	lr

080134c6 <_ZN8gemmlowp10FixedPointIlLi0EE12ScalarRawMaxEv>:
  static const ScalarRawType ScalarRawMax() {
 80134c6:	b580      	push	{r7, lr}
 80134c8:	af00      	add	r7, sp, #0
    return std::numeric_limits<ScalarRawType>::max();
 80134ca:	f7f7 fc3c 	bl	800ad46 <_ZNSt14numeric_limitsIlE3maxEv>
 80134ce:	4603      	mov	r3, r0
  }
 80134d0:	4618      	mov	r0, r3
 80134d2:	bd80      	pop	{r7, pc}

080134d4 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>:
  RawType& raw() { return i_; }
 80134d4:	b480      	push	{r7}
 80134d6:	b083      	sub	sp, #12
 80134d8:	af00      	add	r7, sp, #0
 80134da:	6078      	str	r0, [r7, #4]
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	4618      	mov	r0, r3
 80134e0:	370c      	adds	r7, #12
 80134e2:	46bd      	mov	sp, r7
 80134e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134e8:	4770      	bx	lr

080134ea <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 80134ea:	b580      	push	{r7, lr}
 80134ec:	b084      	sub	sp, #16
 80134ee:	af00      	add	r7, sp, #0
 80134f0:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 80134f2:	f107 030c 	add.w	r3, r7, #12
 80134f6:	4618      	mov	r0, r3
 80134f8:	f7ff ffec 	bl	80134d4 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 80134fc:	4602      	mov	r2, r0
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	6013      	str	r3, [r2, #0]
    return retval;
 8013502:	68fb      	ldr	r3, [r7, #12]
  }
 8013504:	4618      	mov	r0, r3
 8013506:	3710      	adds	r7, #16
 8013508:	46bd      	mov	sp, r7
 801350a:	bd80      	pop	{r7, pc}

0801350c <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>:
  RawType& raw() { return i_; }
 801350c:	b480      	push	{r7}
 801350e:	b083      	sub	sp, #12
 8013510:	af00      	add	r7, sp, #0
 8013512:	6078      	str	r0, [r7, #4]
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	4618      	mov	r0, r3
 8013518:	370c      	adds	r7, #12
 801351a:	46bd      	mov	sp, r7
 801351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013520:	4770      	bx	lr

08013522 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 8013522:	b580      	push	{r7, lr}
 8013524:	b082      	sub	sp, #8
 8013526:	af00      	add	r7, sp, #0
 8013528:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 801352a:	6878      	ldr	r0, [r7, #4]
 801352c:	f000 f8b8 	bl	80136a0 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl>
 8013530:	4603      	mov	r3, r0
}
 8013532:	4618      	mov	r0, r3
 8013534:	3708      	adds	r7, #8
 8013536:	46bd      	mov	sp, r7
 8013538:	bd80      	pop	{r7, pc}

0801353a <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>:
  RawType& raw() { return i_; }
 801353a:	b480      	push	{r7}
 801353c:	b083      	sub	sp, #12
 801353e:	af00      	add	r7, sp, #0
 8013540:	6078      	str	r0, [r7, #4]
 8013542:	687b      	ldr	r3, [r7, #4]
 8013544:	4618      	mov	r0, r3
 8013546:	370c      	adds	r7, #12
 8013548:	46bd      	mov	sp, r7
 801354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801354e:	4770      	bx	lr

08013550 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 8013550:	b580      	push	{r7, lr}
 8013552:	b082      	sub	sp, #8
 8013554:	af00      	add	r7, sp, #0
 8013556:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 8013558:	6878      	ldr	r0, [r7, #4]
 801355a:	f000 f8e3 	bl	8013724 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl>
 801355e:	4603      	mov	r3, r0
}
 8013560:	4618      	mov	r0, r3
 8013562:	3708      	adds	r7, #8
 8013564:	46bd      	mov	sp, r7
 8013566:	bd80      	pop	{r7, pc}

08013568 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 8013568:	b580      	push	{r7, lr}
 801356a:	b082      	sub	sp, #8
 801356c:	af00      	add	r7, sp, #0
 801356e:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 8013570:	6878      	ldr	r0, [r7, #4]
 8013572:	f000 f919 	bl	80137a8 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl>
 8013576:	4603      	mov	r3, r0
}
 8013578:	4618      	mov	r0, r3
 801357a:	3708      	adds	r7, #8
 801357c:	46bd      	mov	sp, r7
 801357e:	bd80      	pop	{r7, pc}

08013580 <_ZN8gemmlowp10FixedPointIlLi0EE11ConstantPOTILin3EEES1_v>:
  static FixedPoint ConstantPOT() {
 8013580:	b580      	push	{r7, lr}
 8013582:	af00      	add	r7, sp, #0
    return FromScalarRaw(ScalarRawType(1) << kOffset);
 8013584:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8013588:	f7ff fa03 	bl	8012992 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801358c:	4603      	mov	r3, r0
  }
 801358e:	4618      	mov	r0, r3
 8013590:	bd80      	pop	{r7, pc}

08013592 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 8013592:	b590      	push	{r4, r7, lr}
 8013594:	b083      	sub	sp, #12
 8013596:	af00      	add	r7, sp, #0
 8013598:	6078      	str	r0, [r7, #4]
 801359a:	6039      	str	r1, [r7, #0]
 801359c:	1d3b      	adds	r3, r7, #4
 801359e:	4618      	mov	r0, r3
 80135a0:	f7ff f9ec 	bl	801297c <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80135a4:	4603      	mov	r3, r0
 80135a6:	681c      	ldr	r4, [r3, #0]
 80135a8:	463b      	mov	r3, r7
 80135aa:	4618      	mov	r0, r3
 80135ac:	f7ff f9e6 	bl	801297c <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80135b0:	4603      	mov	r3, r0
 80135b2:	681b      	ldr	r3, [r3, #0]
 80135b4:	4619      	mov	r1, r3
 80135b6:	4620      	mov	r0, r4
 80135b8:	f7fe fb8c 	bl	8011cd4 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 80135bc:	4603      	mov	r3, r0
 80135be:	4618      	mov	r0, r3
 80135c0:	f7ff faed 	bl	8012b9e <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 80135c4:	4603      	mov	r3, r0
 80135c6:	4618      	mov	r0, r3
 80135c8:	370c      	adds	r7, #12
 80135ca:	46bd      	mov	sp, r7
 80135cc:	bd90      	pop	{r4, r7, pc}

080135ce <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>:
FixedPoint<tRawType, tIntegerBits> SaturatingRoundingMultiplyByPOT(
 80135ce:	b580      	push	{r7, lr}
 80135d0:	b082      	sub	sp, #8
 80135d2:	af00      	add	r7, sp, #0
 80135d4:	6078      	str	r0, [r7, #4]
      SaturatingRoundingMultiplyByPOT<tExponent>(a.raw()));
 80135d6:	1d3b      	adds	r3, r7, #4
 80135d8:	4618      	mov	r0, r3
 80135da:	f7ff f9cf 	bl	801297c <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80135de:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 80135e0:	681b      	ldr	r3, [r3, #0]
 80135e2:	4618      	mov	r0, r3
 80135e4:	f000 f922 	bl	801382c <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElEET0_S1_>
 80135e8:	4603      	mov	r3, r0
 80135ea:	4618      	mov	r0, r3
 80135ec:	f7ff fad7 	bl	8012b9e <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 80135f0:	4603      	mov	r3, r0
}
 80135f2:	4618      	mov	r0, r3
 80135f4:	3708      	adds	r7, #8
 80135f6:	46bd      	mov	sp, r7
 80135f8:	bd80      	pop	{r7, pc}

080135fa <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>:
FixedPoint<tRawType, tIntegerBits> SaturatingRoundingMultiplyByPOT(
 80135fa:	b580      	push	{r7, lr}
 80135fc:	b082      	sub	sp, #8
 80135fe:	af00      	add	r7, sp, #0
 8013600:	6078      	str	r0, [r7, #4]
      SaturatingRoundingMultiplyByPOT<tExponent>(a.raw()));
 8013602:	1d3b      	adds	r3, r7, #4
 8013604:	4618      	mov	r0, r3
 8013606:	f7ff f9b9 	bl	801297c <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801360a:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 801360c:	681b      	ldr	r3, [r3, #0]
 801360e:	4618      	mov	r0, r3
 8013610:	f7ff f9e0 	bl	80129d4 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElEET0_S1_>
 8013614:	4603      	mov	r3, r0
 8013616:	4618      	mov	r0, r3
 8013618:	f7ff fac1 	bl	8012b9e <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 801361c:	4603      	mov	r3, r0
}
 801361e:	4618      	mov	r0, r3
 8013620:	3708      	adds	r7, #8
 8013622:	46bd      	mov	sp, r7
 8013624:	bd80      	pop	{r7, pc}

08013626 <_ZN8gemmlowp20AddSaturatingIf16BitIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
FixedPoint<tRawType, tIntegerBits> AddSaturatingIf16Bit(
 8013626:	b590      	push	{r4, r7, lr}
 8013628:	b083      	sub	sp, #12
 801362a:	af00      	add	r7, sp, #0
 801362c:	6078      	str	r0, [r7, #4]
 801362e:	6039      	str	r1, [r7, #0]
      AddSaturatingIf16Bit(a.raw(), b.raw()));
 8013630:	1d3b      	adds	r3, r7, #4
 8013632:	4618      	mov	r0, r3
 8013634:	f7ff f9a2 	bl	801297c <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8013638:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 801363a:	681c      	ldr	r4, [r3, #0]
      AddSaturatingIf16Bit(a.raw(), b.raw()));
 801363c:	463b      	mov	r3, r7
 801363e:	4618      	mov	r0, r3
 8013640:	f7ff f99c 	bl	801297c <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8013644:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 8013646:	681b      	ldr	r3, [r3, #0]
 8013648:	4619      	mov	r1, r3
 801364a:	4620      	mov	r0, r4
 801364c:	f000 f8fa 	bl	8013844 <_ZN8gemmlowp20AddSaturatingIf16BitIlEET_S1_S1_>
 8013650:	4603      	mov	r3, r0
 8013652:	4618      	mov	r0, r3
 8013654:	f7ff faa3 	bl	8012b9e <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8013658:	4603      	mov	r3, r0
}
 801365a:	4618      	mov	r0, r3
 801365c:	370c      	adds	r7, #12
 801365e:	46bd      	mov	sp, r7
 8013660:	bd90      	pop	{r4, r7, pc}

08013662 <_ZN8gemmlowp10MaskIfZeroIlEET_S1_>:
tIntegerType MaskIfZero(tIntegerType a) {
 8013662:	b580      	push	{r7, lr}
 8013664:	b082      	sub	sp, #8
 8013666:	af00      	add	r7, sp, #0
 8013668:	6078      	str	r0, [r7, #4]
  return MaskIfNonZero<tIntegerType>(!a);
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	2b00      	cmp	r3, #0
 801366e:	bf0c      	ite	eq
 8013670:	2301      	moveq	r3, #1
 8013672:	2300      	movne	r3, #0
 8013674:	b2db      	uxtb	r3, r3
 8013676:	4618      	mov	r0, r3
 8013678:	f7fe fb4e 	bl	8011d18 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801367c:	4603      	mov	r3, r0
}
 801367e:	4618      	mov	r0, r3
 8013680:	3708      	adds	r7, #8
 8013682:	46bd      	mov	sp, r7
 8013684:	bd80      	pop	{r7, pc}

08013686 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin12ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 8013686:	b580      	push	{r7, lr}
 8013688:	b082      	sub	sp, #8
 801368a:	af00      	add	r7, sp, #0
 801368c:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 801368e:	210c      	movs	r1, #12
 8013690:	6878      	ldr	r0, [r7, #4]
 8013692:	f7fd ff1f 	bl	80114d4 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8013696:	4603      	mov	r3, r0
  }
 8013698:	4618      	mov	r0, r3
 801369a:	3708      	adds	r7, #8
 801369c:	46bd      	mov	sp, r7
 801369e:	bd80      	pop	{r7, pc}

080136a0 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 80136a0:	b580      	push	{r7, lr}
 80136a2:	b08a      	sub	sp, #40	; 0x28
 80136a4:	af00      	add	r7, sp, #0
 80136a6:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 80136a8:	f7f7 fd57 	bl	800b15a <_ZNSt14numeric_limitsIlE3minEv>
 80136ac:	4603      	mov	r3, r0
 80136ae:	4618      	mov	r0, r3
 80136b0:	f7fe fad4 	bl	8011c5c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80136b4:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 80136b6:	f7f7 fb46 	bl	800ad46 <_ZNSt14numeric_limitsIlE3maxEv>
 80136ba:	4603      	mov	r3, r0
 80136bc:	4618      	mov	r0, r3
 80136be:	f7fe facd 	bl	8011c5c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80136c2:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 80136c4:	2320      	movs	r3, #32
 80136c6:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 80136c8:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 80136cc:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 80136ce:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
 80136d2:	f7fe fac3 	bl	8011c5c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80136d6:	4603      	mov	r3, r0
 80136d8:	4619      	mov	r1, r3
 80136da:	6878      	ldr	r0, [r7, #4]
 80136dc:	f7fe fb08 	bl	8011cf0 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 80136e0:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 80136e2:	480f      	ldr	r0, [pc, #60]	; (8013720 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl+0x80>)
 80136e4:	f7fe faba 	bl	8011c5c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80136e8:	4603      	mov	r3, r0
 80136ea:	4619      	mov	r1, r3
 80136ec:	6878      	ldr	r0, [r7, #4]
 80136ee:	f7fe fadd 	bl	8011cac <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 80136f2:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 80136f4:	2102      	movs	r1, #2
 80136f6:	6878      	ldr	r0, [r7, #4]
 80136f8:	f7ff f993 	bl	8012a22 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 80136fc:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 80136fe:	68fa      	ldr	r2, [r7, #12]
 8013700:	6a39      	ldr	r1, [r7, #32]
 8013702:	6978      	ldr	r0, [r7, #20]
 8013704:	f7ff f9d3 	bl	8012aae <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 8013708:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 801370a:	68fa      	ldr	r2, [r7, #12]
 801370c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801370e:	6938      	ldr	r0, [r7, #16]
 8013710:	f7ff f9cd 	bl	8012aae <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 8013714:	60f8      	str	r0, [r7, #12]
    return result;
 8013716:	68fb      	ldr	r3, [r7, #12]
  }
 8013718:	4618      	mov	r0, r3
 801371a:	3728      	adds	r7, #40	; 0x28
 801371c:	46bd      	mov	sp, r7
 801371e:	bd80      	pop	{r7, pc}
 8013720:	e0000001 	.word	0xe0000001

08013724 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 8013724:	b580      	push	{r7, lr}
 8013726:	b08a      	sub	sp, #40	; 0x28
 8013728:	af00      	add	r7, sp, #0
 801372a:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 801372c:	f7f7 fd15 	bl	800b15a <_ZNSt14numeric_limitsIlE3minEv>
 8013730:	4603      	mov	r3, r0
 8013732:	4618      	mov	r0, r3
 8013734:	f7fe fa92 	bl	8011c5c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8013738:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 801373a:	f7f7 fb04 	bl	800ad46 <_ZNSt14numeric_limitsIlE3maxEv>
 801373e:	4603      	mov	r3, r0
 8013740:	4618      	mov	r0, r3
 8013742:	f7fe fa8b 	bl	8011c5c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8013746:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 8013748:	2320      	movs	r3, #32
 801374a:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 801374c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8013750:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 8013752:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
 8013756:	f7fe fa81 	bl	8011c5c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801375a:	4603      	mov	r3, r0
 801375c:	4619      	mov	r1, r3
 801375e:	6878      	ldr	r0, [r7, #4]
 8013760:	f7fe fac6 	bl	8011cf0 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 8013764:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 8013766:	480f      	ldr	r0, [pc, #60]	; (80137a4 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl+0x80>)
 8013768:	f7fe fa78 	bl	8011c5c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801376c:	4603      	mov	r3, r0
 801376e:	4619      	mov	r1, r3
 8013770:	6878      	ldr	r0, [r7, #4]
 8013772:	f7fe fa9b 	bl	8011cac <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 8013776:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 8013778:	2101      	movs	r1, #1
 801377a:	6878      	ldr	r0, [r7, #4]
 801377c:	f7ff f951 	bl	8012a22 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 8013780:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 8013782:	68fa      	ldr	r2, [r7, #12]
 8013784:	6a39      	ldr	r1, [r7, #32]
 8013786:	6978      	ldr	r0, [r7, #20]
 8013788:	f7ff f991 	bl	8012aae <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 801378c:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 801378e:	68fa      	ldr	r2, [r7, #12]
 8013790:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013792:	6938      	ldr	r0, [r7, #16]
 8013794:	f7ff f98b 	bl	8012aae <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 8013798:	60f8      	str	r0, [r7, #12]
    return result;
 801379a:	68fb      	ldr	r3, [r7, #12]
  }
 801379c:	4618      	mov	r0, r3
 801379e:	3728      	adds	r7, #40	; 0x28
 80137a0:	46bd      	mov	sp, r7
 80137a2:	bd80      	pop	{r7, pc}
 80137a4:	c0000001 	.word	0xc0000001

080137a8 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 80137a8:	b580      	push	{r7, lr}
 80137aa:	b08a      	sub	sp, #40	; 0x28
 80137ac:	af00      	add	r7, sp, #0
 80137ae:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 80137b0:	f7f7 fcd3 	bl	800b15a <_ZNSt14numeric_limitsIlE3minEv>
 80137b4:	4603      	mov	r3, r0
 80137b6:	4618      	mov	r0, r3
 80137b8:	f7fe fa50 	bl	8011c5c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80137bc:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 80137be:	f7f7 fac2 	bl	800ad46 <_ZNSt14numeric_limitsIlE3maxEv>
 80137c2:	4603      	mov	r3, r0
 80137c4:	4618      	mov	r0, r3
 80137c6:	f7fe fa49 	bl	8011c5c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80137ca:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 80137cc:	2320      	movs	r3, #32
 80137ce:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 80137d0:	f06f 437c 	mvn.w	r3, #4227858432	; 0xfc000000
 80137d4:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 80137d6:	f06f 407c 	mvn.w	r0, #4227858432	; 0xfc000000
 80137da:	f7fe fa3f 	bl	8011c5c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80137de:	4603      	mov	r3, r0
 80137e0:	4619      	mov	r1, r3
 80137e2:	6878      	ldr	r0, [r7, #4]
 80137e4:	f7fe fa84 	bl	8011cf0 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 80137e8:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 80137ea:	480f      	ldr	r0, [pc, #60]	; (8013828 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl+0x80>)
 80137ec:	f7fe fa36 	bl	8011c5c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80137f0:	4603      	mov	r3, r0
 80137f2:	4619      	mov	r1, r3
 80137f4:	6878      	ldr	r0, [r7, #4]
 80137f6:	f7fe fa59 	bl	8011cac <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 80137fa:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 80137fc:	2105      	movs	r1, #5
 80137fe:	6878      	ldr	r0, [r7, #4]
 8013800:	f7ff f90f 	bl	8012a22 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 8013804:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 8013806:	68fa      	ldr	r2, [r7, #12]
 8013808:	6a39      	ldr	r1, [r7, #32]
 801380a:	6978      	ldr	r0, [r7, #20]
 801380c:	f7ff f94f 	bl	8012aae <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 8013810:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 8013812:	68fa      	ldr	r2, [r7, #12]
 8013814:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013816:	6938      	ldr	r0, [r7, #16]
 8013818:	f7ff f949 	bl	8012aae <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 801381c:	60f8      	str	r0, [r7, #12]
    return result;
 801381e:	68fb      	ldr	r3, [r7, #12]
  }
 8013820:	4618      	mov	r0, r3
 8013822:	3728      	adds	r7, #40	; 0x28
 8013824:	46bd      	mov	sp, r7
 8013826:	bd80      	pop	{r7, pc}
 8013828:	fc000001 	.word	0xfc000001

0801382c <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 801382c:	b580      	push	{r7, lr}
 801382e:	b082      	sub	sp, #8
 8013830:	af00      	add	r7, sp, #0
 8013832:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 8013834:	6878      	ldr	r0, [r7, #4]
 8013836:	f000 f813 	bl	8013860 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin2ElLin1EE4evalEl>
 801383a:	4603      	mov	r3, r0
}
 801383c:	4618      	mov	r0, r3
 801383e:	3708      	adds	r7, #8
 8013840:	46bd      	mov	sp, r7
 8013842:	bd80      	pop	{r7, pc}

08013844 <_ZN8gemmlowp20AddSaturatingIf16BitIlEET_S1_S1_>:
IntegerType AddSaturatingIf16Bit(IntegerType a, IntegerType b) {
 8013844:	b580      	push	{r7, lr}
 8013846:	b082      	sub	sp, #8
 8013848:	af00      	add	r7, sp, #0
 801384a:	6078      	str	r0, [r7, #4]
 801384c:	6039      	str	r1, [r7, #0]
  return AddSaturatingIf16BitImpl<IntegerType, sizeof(ScalarType) == 2>::Run(a,
 801384e:	6839      	ldr	r1, [r7, #0]
 8013850:	6878      	ldr	r0, [r7, #4]
 8013852:	f000 f812 	bl	801387a <_ZN8gemmlowp24AddSaturatingIf16BitImplIlLb0EE3RunEll>
 8013856:	4603      	mov	r3, r0
}
 8013858:	4618      	mov	r0, r3
 801385a:	3708      	adds	r7, #8
 801385c:	46bd      	mov	sp, r7
 801385e:	bd80      	pop	{r7, pc}

08013860 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin2ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 8013860:	b580      	push	{r7, lr}
 8013862:	b082      	sub	sp, #8
 8013864:	af00      	add	r7, sp, #0
 8013866:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 8013868:	2102      	movs	r1, #2
 801386a:	6878      	ldr	r0, [r7, #4]
 801386c:	f7fd fe32 	bl	80114d4 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8013870:	4603      	mov	r3, r0
  }
 8013872:	4618      	mov	r0, r3
 8013874:	3708      	adds	r7, #8
 8013876:	46bd      	mov	sp, r7
 8013878:	bd80      	pop	{r7, pc}

0801387a <_ZN8gemmlowp24AddSaturatingIf16BitImplIlLb0EE3RunEll>:
  static IntegerType Run(IntegerType a, IntegerType b) { return Add(a, b); }
 801387a:	b580      	push	{r7, lr}
 801387c:	b082      	sub	sp, #8
 801387e:	af00      	add	r7, sp, #0
 8013880:	6078      	str	r0, [r7, #4]
 8013882:	6039      	str	r1, [r7, #0]
 8013884:	6839      	ldr	r1, [r7, #0]
 8013886:	6878      	ldr	r0, [r7, #4]
 8013888:	f7fe fa24 	bl	8011cd4 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 801388c:	4603      	mov	r3, r0
 801388e:	4618      	mov	r0, r3
 8013890:	3708      	adds	r7, #8
 8013892:	46bd      	mov	sp, r7
 8013894:	bd80      	pop	{r7, pc}

08013896 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 8013896:	b480      	push	{r7}
 8013898:	b083      	sub	sp, #12
 801389a:	af00      	add	r7, sp, #0
 801389c:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 801389e:	687b      	ldr	r3, [r7, #4]
 80138a0:	2b00      	cmp	r3, #0
 80138a2:	d002      	beq.n	80138aa <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor+0x14>
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	681b      	ldr	r3, [r3, #0]
 80138a8:	e000      	b.n	80138ac <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor+0x16>
 80138aa:	2300      	movs	r3, #0
}
 80138ac:	4618      	mov	r0, r3
 80138ae:	370c      	adds	r7, #12
 80138b0:	46bd      	mov	sp, r7
 80138b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138b6:	4770      	bx	lr

080138b8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>:
namespace reshape {

constexpr int kInputTensor = 0;
constexpr int kOutputTensor = 0;

TfLiteStatus ReshapeOutput(TfLiteContext* context, TfLiteNode* node) {
 80138b8:	b5b0      	push	{r4, r5, r7, lr}
 80138ba:	b08e      	sub	sp, #56	; 0x38
 80138bc:	af04      	add	r7, sp, #16
 80138be:	6078      	str	r0, [r7, #4]
 80138c0:	6039      	str	r1, [r7, #0]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 80138c2:	2200      	movs	r2, #0
 80138c4:	6839      	ldr	r1, [r7, #0]
 80138c6:	6878      	ldr	r0, [r7, #4]
 80138c8:	f7f7 fd24 	bl	800b314 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 80138cc:	61b8      	str	r0, [r7, #24]
  TF_LITE_ENSURE(context, input != nullptr);
 80138ce:	69bb      	ldr	r3, [r7, #24]
 80138d0:	2b00      	cmp	r3, #0
 80138d2:	d10a      	bne.n	80138ea <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x32>
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	695c      	ldr	r4, [r3, #20]
 80138d8:	4b62      	ldr	r3, [pc, #392]	; (8013a64 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1ac>)
 80138da:	9300      	str	r3, [sp, #0]
 80138dc:	2323      	movs	r3, #35	; 0x23
 80138de:	4a62      	ldr	r2, [pc, #392]	; (8013a68 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b0>)
 80138e0:	4962      	ldr	r1, [pc, #392]	; (8013a6c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b4>)
 80138e2:	6878      	ldr	r0, [r7, #4]
 80138e4:	47a0      	blx	r4
 80138e6:	2301      	movs	r3, #1
 80138e8:	e0b8      	b.n	8013a5c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a4>
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 80138ea:	2200      	movs	r2, #0
 80138ec:	6839      	ldr	r1, [r7, #0]
 80138ee:	6878      	ldr	r0, [r7, #4]
 80138f0:	f7f7 fd20 	bl	800b334 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 80138f4:	6178      	str	r0, [r7, #20]
  TF_LITE_ENSURE(context, output != nullptr);
 80138f6:	697b      	ldr	r3, [r7, #20]
 80138f8:	2b00      	cmp	r3, #0
 80138fa:	d10a      	bne.n	8013912 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x5a>
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	695c      	ldr	r4, [r3, #20]
 8013900:	4b5b      	ldr	r3, [pc, #364]	; (8013a70 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b8>)
 8013902:	9300      	str	r3, [sp, #0]
 8013904:	2325      	movs	r3, #37	; 0x25
 8013906:	4a58      	ldr	r2, [pc, #352]	; (8013a68 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b0>)
 8013908:	4958      	ldr	r1, [pc, #352]	; (8013a6c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b4>)
 801390a:	6878      	ldr	r0, [r7, #4]
 801390c:	47a0      	blx	r4
 801390e:	2301      	movs	r3, #1
 8013910:	e0a4      	b.n	8013a5c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a4>
  // Tensorflow's Reshape allows one of the shape components to have the
  // special -1 value, meaning it will be calculated automatically based on the
  // input. Here we calculate what that dimension should be so that the number
  // of output elements in the same as the number of input elements.
  int num_input_elements = NumElements(input);
 8013912:	69b8      	ldr	r0, [r7, #24]
 8013914:	f7f7 fc7e 	bl	800b214 <_ZN6tflite11NumElementsEPK12TfLiteTensor>
 8013918:	4602      	mov	r2, r0
 801391a:	460b      	mov	r3, r1
 801391c:	4613      	mov	r3, r2
 801391e:	613b      	str	r3, [r7, #16]
  TfLiteIntArray* output_shape = output->dims;
 8013920:	697b      	ldr	r3, [r7, #20]
 8013922:	689b      	ldr	r3, [r3, #8]
 8013924:	60fb      	str	r3, [r7, #12]

  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
 8013926:	6838      	ldr	r0, [r7, #0]
 8013928:	f7fe fa13 	bl	8011d52 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 801392c:	4603      	mov	r3, r0
      output_shape->size == 1 && output_shape->data[0] == 0) {
 801392e:	2b01      	cmp	r3, #1
 8013930:	d109      	bne.n	8013946 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x8e>
 8013932:	68fb      	ldr	r3, [r7, #12]
 8013934:	681b      	ldr	r3, [r3, #0]
  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
 8013936:	2b01      	cmp	r3, #1
 8013938:	d105      	bne.n	8013946 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x8e>
      output_shape->size == 1 && output_shape->data[0] == 0) {
 801393a:	68fb      	ldr	r3, [r7, #12]
 801393c:	685b      	ldr	r3, [r3, #4]
 801393e:	2b00      	cmp	r3, #0
 8013940:	d101      	bne.n	8013946 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x8e>
 8013942:	2301      	movs	r3, #1
 8013944:	e000      	b.n	8013948 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x90>
 8013946:	2300      	movs	r3, #0
  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
 8013948:	2b00      	cmp	r3, #0
 801394a:	d002      	beq.n	8013952 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x9a>
    // Legacy tflite models use a shape parameter of [0] to indicate scalars,
    // so adjust accordingly. TODO(b/111614235): Allow zero-sized buffers during
    // toco conversion.
    output_shape->size = 0;
 801394c:	68fb      	ldr	r3, [r7, #12]
 801394e:	2200      	movs	r2, #0
 8013950:	601a      	str	r2, [r3, #0]
  }

  int num_output_elements = 1;
 8013952:	2301      	movs	r3, #1
 8013954:	627b      	str	r3, [r7, #36]	; 0x24
  int stretch_dim = -1;
 8013956:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801395a:	623b      	str	r3, [r7, #32]
  for (int i = 0; i < output_shape->size; ++i) {
 801395c:	2300      	movs	r3, #0
 801395e:	61fb      	str	r3, [r7, #28]
 8013960:	68fb      	ldr	r3, [r7, #12]
 8013962:	681b      	ldr	r3, [r3, #0]
 8013964:	69fa      	ldr	r2, [r7, #28]
 8013966:	429a      	cmp	r2, r3
 8013968:	da2b      	bge.n	80139c2 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x10a>
    int value = output_shape->data[i];
 801396a:	68fa      	ldr	r2, [r7, #12]
 801396c:	69fb      	ldr	r3, [r7, #28]
 801396e:	009b      	lsls	r3, r3, #2
 8013970:	4413      	add	r3, r2
 8013972:	685b      	ldr	r3, [r3, #4]
 8013974:	60bb      	str	r3, [r7, #8]
    if (value == -1) {
 8013976:	68bb      	ldr	r3, [r7, #8]
 8013978:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801397c:	d118      	bne.n	80139b0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xf8>
      TF_LITE_ENSURE_EQ(context, stretch_dim, -1);
 801397e:	6a3b      	ldr	r3, [r7, #32]
 8013980:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013984:	d011      	beq.n	80139aa <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xf2>
 8013986:	687b      	ldr	r3, [r7, #4]
 8013988:	695c      	ldr	r4, [r3, #20]
 801398a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801398e:	9303      	str	r3, [sp, #12]
 8013990:	6a3b      	ldr	r3, [r7, #32]
 8013992:	9302      	str	r3, [sp, #8]
 8013994:	4b37      	ldr	r3, [pc, #220]	; (8013a74 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1bc>)
 8013996:	9301      	str	r3, [sp, #4]
 8013998:	4b37      	ldr	r3, [pc, #220]	; (8013a78 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1c0>)
 801399a:	9300      	str	r3, [sp, #0]
 801399c:	233a      	movs	r3, #58	; 0x3a
 801399e:	4a32      	ldr	r2, [pc, #200]	; (8013a68 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b0>)
 80139a0:	4936      	ldr	r1, [pc, #216]	; (8013a7c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1c4>)
 80139a2:	6878      	ldr	r0, [r7, #4]
 80139a4:	47a0      	blx	r4
 80139a6:	2301      	movs	r3, #1
 80139a8:	e058      	b.n	8013a5c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a4>
      stretch_dim = i;
 80139aa:	69fb      	ldr	r3, [r7, #28]
 80139ac:	623b      	str	r3, [r7, #32]
 80139ae:	e004      	b.n	80139ba <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x102>
    } else {
      num_output_elements *= value;
 80139b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139b2:	68ba      	ldr	r2, [r7, #8]
 80139b4:	fb02 f303 	mul.w	r3, r2, r3
 80139b8:	627b      	str	r3, [r7, #36]	; 0x24
  for (int i = 0; i < output_shape->size; ++i) {
 80139ba:	69fb      	ldr	r3, [r7, #28]
 80139bc:	3301      	adds	r3, #1
 80139be:	61fb      	str	r3, [r7, #28]
 80139c0:	e7ce      	b.n	8013960 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xa8>
    }
  }
  if (stretch_dim != -1) {
 80139c2:	6a3b      	ldr	r3, [r7, #32]
 80139c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80139c8:	d011      	beq.n	80139ee <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x136>
    output_shape->data[stretch_dim] = num_input_elements / num_output_elements;
 80139ca:	693a      	ldr	r2, [r7, #16]
 80139cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139ce:	fb92 f2f3 	sdiv	r2, r2, r3
 80139d2:	68f9      	ldr	r1, [r7, #12]
 80139d4:	6a3b      	ldr	r3, [r7, #32]
 80139d6:	009b      	lsls	r3, r3, #2
 80139d8:	440b      	add	r3, r1
 80139da:	605a      	str	r2, [r3, #4]
    num_output_elements *= output_shape->data[stretch_dim];
 80139dc:	68fa      	ldr	r2, [r7, #12]
 80139de:	6a3b      	ldr	r3, [r7, #32]
 80139e0:	009b      	lsls	r3, r3, #2
 80139e2:	4413      	add	r3, r2
 80139e4:	685a      	ldr	r2, [r3, #4]
 80139e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139e8:	fb02 f303 	mul.w	r3, r2, r3
 80139ec:	627b      	str	r3, [r7, #36]	; 0x24
  }

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 80139ee:	69bb      	ldr	r3, [r7, #24]
 80139f0:	781a      	ldrb	r2, [r3, #0]
 80139f2:	697b      	ldr	r3, [r7, #20]
 80139f4:	781b      	ldrb	r3, [r3, #0]
 80139f6:	429a      	cmp	r2, r3
 80139f8:	d01a      	beq.n	8013a30 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x178>
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	695c      	ldr	r4, [r3, #20]
 80139fe:	69bb      	ldr	r3, [r7, #24]
 8013a00:	781b      	ldrb	r3, [r3, #0]
 8013a02:	4618      	mov	r0, r3
 8013a04:	f7f4 fe24 	bl	8008650 <TfLiteTypeGetName>
 8013a08:	4605      	mov	r5, r0
 8013a0a:	697b      	ldr	r3, [r7, #20]
 8013a0c:	781b      	ldrb	r3, [r3, #0]
 8013a0e:	4618      	mov	r0, r3
 8013a10:	f7f4 fe1e 	bl	8008650 <TfLiteTypeGetName>
 8013a14:	4603      	mov	r3, r0
 8013a16:	9303      	str	r3, [sp, #12]
 8013a18:	9502      	str	r5, [sp, #8]
 8013a1a:	4b19      	ldr	r3, [pc, #100]	; (8013a80 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1c8>)
 8013a1c:	9301      	str	r3, [sp, #4]
 8013a1e:	4b19      	ldr	r3, [pc, #100]	; (8013a84 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1cc>)
 8013a20:	9300      	str	r3, [sp, #0]
 8013a22:	2345      	movs	r3, #69	; 0x45
 8013a24:	4a10      	ldr	r2, [pc, #64]	; (8013a68 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b0>)
 8013a26:	4918      	ldr	r1, [pc, #96]	; (8013a88 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1d0>)
 8013a28:	6878      	ldr	r0, [r7, #4]
 8013a2a:	47a0      	blx	r4
 8013a2c:	2301      	movs	r3, #1
 8013a2e:	e015      	b.n	8013a5c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a4>
  TF_LITE_ENSURE_EQ(context, num_input_elements, num_output_elements);
 8013a30:	693a      	ldr	r2, [r7, #16]
 8013a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a34:	429a      	cmp	r2, r3
 8013a36:	d010      	beq.n	8013a5a <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a2>
 8013a38:	687b      	ldr	r3, [r7, #4]
 8013a3a:	695c      	ldr	r4, [r3, #20]
 8013a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a3e:	9303      	str	r3, [sp, #12]
 8013a40:	693b      	ldr	r3, [r7, #16]
 8013a42:	9302      	str	r3, [sp, #8]
 8013a44:	4b11      	ldr	r3, [pc, #68]	; (8013a8c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1d4>)
 8013a46:	9301      	str	r3, [sp, #4]
 8013a48:	4b11      	ldr	r3, [pc, #68]	; (8013a90 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1d8>)
 8013a4a:	9300      	str	r3, [sp, #0]
 8013a4c:	2346      	movs	r3, #70	; 0x46
 8013a4e:	4a06      	ldr	r2, [pc, #24]	; (8013a68 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b0>)
 8013a50:	490a      	ldr	r1, [pc, #40]	; (8013a7c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1c4>)
 8013a52:	6878      	ldr	r0, [r7, #4]
 8013a54:	47a0      	blx	r4
 8013a56:	2301      	movs	r3, #1
 8013a58:	e000      	b.n	8013a5c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a4>
  return kTfLiteOk;
 8013a5a:	2300      	movs	r3, #0
}
 8013a5c:	4618      	mov	r0, r3
 8013a5e:	3728      	adds	r7, #40	; 0x28
 8013a60:	46bd      	mov	sp, r7
 8013a62:	bdb0      	pop	{r4, r5, r7, pc}
 8013a64:	0802b540 	.word	0x0802b540
 8013a68:	0802b4ec 	.word	0x0802b4ec
 8013a6c:	0802b528 	.word	0x0802b528
 8013a70:	0802b554 	.word	0x0802b554
 8013a74:	0802b584 	.word	0x0802b584
 8013a78:	0802b588 	.word	0x0802b588
 8013a7c:	0802b568 	.word	0x0802b568
 8013a80:	0802b5b0 	.word	0x0802b5b0
 8013a84:	0802b5c0 	.word	0x0802b5c0
 8013a88:	0802b594 	.word	0x0802b594
 8013a8c:	0802b5cc 	.word	0x0802b5cc
 8013a90:	0802b5e0 	.word	0x0802b5e0

08013a94 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 8013a94:	b590      	push	{r4, r7, lr}
 8013a96:	b087      	sub	sp, #28
 8013a98:	af04      	add	r7, sp, #16
 8013a9a:	6078      	str	r0, [r7, #4]
 8013a9c:	6039      	str	r1, [r7, #0]
  TF_LITE_ENSURE(context, NumInputs(node) == 1 || NumInputs(node) == 2);
 8013a9e:	6838      	ldr	r0, [r7, #0]
 8013aa0:	f7fe f957 	bl	8011d52 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 8013aa4:	4603      	mov	r3, r0
 8013aa6:	2b01      	cmp	r3, #1
 8013aa8:	d007      	beq.n	8013aba <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x26>
 8013aaa:	6838      	ldr	r0, [r7, #0]
 8013aac:	f7fe f951 	bl	8011d52 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 8013ab0:	4603      	mov	r3, r0
 8013ab2:	2b02      	cmp	r3, #2
 8013ab4:	d001      	beq.n	8013aba <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x26>
 8013ab6:	2301      	movs	r3, #1
 8013ab8:	e000      	b.n	8013abc <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x28>
 8013aba:	2300      	movs	r3, #0
 8013abc:	2b00      	cmp	r3, #0
 8013abe:	d00a      	beq.n	8013ad6 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x42>
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	695c      	ldr	r4, [r3, #20]
 8013ac4:	4b27      	ldr	r3, [pc, #156]	; (8013b64 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd0>)
 8013ac6:	9300      	str	r3, [sp, #0]
 8013ac8:	234b      	movs	r3, #75	; 0x4b
 8013aca:	4a27      	ldr	r2, [pc, #156]	; (8013b68 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd4>)
 8013acc:	4927      	ldr	r1, [pc, #156]	; (8013b6c <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd8>)
 8013ace:	6878      	ldr	r0, [r7, #4]
 8013ad0:	47a0      	blx	r4
 8013ad2:	2301      	movs	r3, #1
 8013ad4:	e041      	b.n	8013b5a <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xc6>
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 8013ad6:	6838      	ldr	r0, [r7, #0]
 8013ad8:	f7fe f948 	bl	8011d6c <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 8013adc:	4603      	mov	r3, r0
 8013ade:	2b01      	cmp	r3, #1
 8013ae0:	bf14      	ite	ne
 8013ae2:	2301      	movne	r3, #1
 8013ae4:	2300      	moveq	r3, #0
 8013ae6:	b2db      	uxtb	r3, r3
 8013ae8:	2b00      	cmp	r3, #0
 8013aea:	d013      	beq.n	8013b14 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x80>
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	695c      	ldr	r4, [r3, #20]
 8013af0:	6838      	ldr	r0, [r7, #0]
 8013af2:	f7fe f93b 	bl	8011d6c <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 8013af6:	4603      	mov	r3, r0
 8013af8:	2201      	movs	r2, #1
 8013afa:	9203      	str	r2, [sp, #12]
 8013afc:	9302      	str	r3, [sp, #8]
 8013afe:	4b1c      	ldr	r3, [pc, #112]	; (8013b70 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xdc>)
 8013b00:	9301      	str	r3, [sp, #4]
 8013b02:	4b1c      	ldr	r3, [pc, #112]	; (8013b74 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xe0>)
 8013b04:	9300      	str	r3, [sp, #0]
 8013b06:	234c      	movs	r3, #76	; 0x4c
 8013b08:	4a17      	ldr	r2, [pc, #92]	; (8013b68 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd4>)
 8013b0a:	491b      	ldr	r1, [pc, #108]	; (8013b78 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xe4>)
 8013b0c:	6878      	ldr	r0, [r7, #4]
 8013b0e:	47a0      	blx	r4
 8013b10:	2301      	movs	r3, #1
 8013b12:	e022      	b.n	8013b5a <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xc6>
  TF_LITE_ENSURE_EQ(context, ReshapeOutput(context, node), kTfLiteOk);
 8013b14:	6839      	ldr	r1, [r7, #0]
 8013b16:	6878      	ldr	r0, [r7, #4]
 8013b18:	f7ff fece 	bl	80138b8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>
 8013b1c:	4603      	mov	r3, r0
 8013b1e:	2b00      	cmp	r3, #0
 8013b20:	bf14      	ite	ne
 8013b22:	2301      	movne	r3, #1
 8013b24:	2300      	moveq	r3, #0
 8013b26:	b2db      	uxtb	r3, r3
 8013b28:	2b00      	cmp	r3, #0
 8013b2a:	d015      	beq.n	8013b58 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xc4>
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	695c      	ldr	r4, [r3, #20]
 8013b30:	6839      	ldr	r1, [r7, #0]
 8013b32:	6878      	ldr	r0, [r7, #4]
 8013b34:	f7ff fec0 	bl	80138b8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>
 8013b38:	4603      	mov	r3, r0
 8013b3a:	461a      	mov	r2, r3
 8013b3c:	2300      	movs	r3, #0
 8013b3e:	9303      	str	r3, [sp, #12]
 8013b40:	9202      	str	r2, [sp, #8]
 8013b42:	4b0e      	ldr	r3, [pc, #56]	; (8013b7c <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xe8>)
 8013b44:	9301      	str	r3, [sp, #4]
 8013b46:	4b0e      	ldr	r3, [pc, #56]	; (8013b80 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xec>)
 8013b48:	9300      	str	r3, [sp, #0]
 8013b4a:	234d      	movs	r3, #77	; 0x4d
 8013b4c:	4a06      	ldr	r2, [pc, #24]	; (8013b68 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd4>)
 8013b4e:	490a      	ldr	r1, [pc, #40]	; (8013b78 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xe4>)
 8013b50:	6878      	ldr	r0, [r7, #4]
 8013b52:	47a0      	blx	r4
 8013b54:	2301      	movs	r3, #1
 8013b56:	e000      	b.n	8013b5a <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xc6>
  return kTfLiteOk;
 8013b58:	2300      	movs	r3, #0
}
 8013b5a:	4618      	mov	r0, r3
 8013b5c:	370c      	adds	r7, #12
 8013b5e:	46bd      	mov	sp, r7
 8013b60:	bd90      	pop	{r4, r7, pc}
 8013b62:	bf00      	nop
 8013b64:	0802b5f4 	.word	0x0802b5f4
 8013b68:	0802b4ec 	.word	0x0802b4ec
 8013b6c:	0802b528 	.word	0x0802b528
 8013b70:	0802b624 	.word	0x0802b624
 8013b74:	0802b628 	.word	0x0802b628
 8013b78:	0802b568 	.word	0x0802b568
 8013b7c:	0802b63c 	.word	0x0802b63c
 8013b80:	0802b648 	.word	0x0802b648

08013b84 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 8013b84:	b580      	push	{r7, lr}
 8013b86:	b088      	sub	sp, #32
 8013b88:	af00      	add	r7, sp, #0
 8013b8a:	6078      	str	r0, [r7, #4]
 8013b8c:	6039      	str	r1, [r7, #0]
  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
 8013b8e:	2200      	movs	r2, #0
 8013b90:	6839      	ldr	r1, [r7, #0]
 8013b92:	6878      	ldr	r0, [r7, #4]
 8013b94:	f7fd f978 	bl	8010e88 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8013b98:	61b8      	str	r0, [r7, #24]
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 8013b9a:	2200      	movs	r2, #0
 8013b9c:	6839      	ldr	r1, [r7, #0]
 8013b9e:	6878      	ldr	r0, [r7, #4]
 8013ba0:	f7fd f982 	bl	8010ea8 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 8013ba4:	6178      	str	r0, [r7, #20]

  // TODO(b/162522304): storing input bytes in OpData increases some models
  // significantly, possibly due to alignment issues.
  size_t input_bytes;
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(input->type, &input_bytes));
 8013ba6:	69bb      	ldr	r3, [r7, #24]
 8013ba8:	7a1b      	ldrb	r3, [r3, #8]
 8013baa:	f107 020c 	add.w	r2, r7, #12
 8013bae:	4611      	mov	r1, r2
 8013bb0:	4618      	mov	r0, r3
 8013bb2:	f7f8 fa41 	bl	800c038 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
 8013bb6:	4603      	mov	r3, r0
 8013bb8:	74fb      	strb	r3, [r7, #19]
 8013bba:	7cfb      	ldrb	r3, [r7, #19]
 8013bbc:	2b00      	cmp	r3, #0
 8013bbe:	d001      	beq.n	8013bc4 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x40>
 8013bc0:	7cfb      	ldrb	r3, [r7, #19]
 8013bc2:	e024      	b.n	8013c0e <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x8a>
  input_bytes *= ElementCount(*input->dims);
 8013bc4:	69bb      	ldr	r3, [r7, #24]
 8013bc6:	685b      	ldr	r3, [r3, #4]
 8013bc8:	4618      	mov	r0, r3
 8013bca:	f7fc fa95 	bl	80100f8 <_ZN6tflite12ElementCountERK14TfLiteIntArray>
 8013bce:	4602      	mov	r2, r0
 8013bd0:	68fb      	ldr	r3, [r7, #12]
 8013bd2:	fb02 f303 	mul.w	r3, r2, r3
 8013bd6:	60fb      	str	r3, [r7, #12]

  // Do nothing for in-place reshape.
  if (input->data.raw != output->data.raw) {
 8013bd8:	69bb      	ldr	r3, [r7, #24]
 8013bda:	681a      	ldr	r2, [r3, #0]
 8013bdc:	697b      	ldr	r3, [r7, #20]
 8013bde:	681b      	ldr	r3, [r3, #0]
 8013be0:	429a      	cmp	r2, r3
 8013be2:	d013      	beq.n	8013c0c <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x88>
    // Otherwise perform reshape with copy.
    for (size_t i = 0; i < input_bytes; ++i) {
 8013be4:	2300      	movs	r3, #0
 8013be6:	61fb      	str	r3, [r7, #28]
 8013be8:	68fb      	ldr	r3, [r7, #12]
 8013bea:	69fa      	ldr	r2, [r7, #28]
 8013bec:	429a      	cmp	r2, r3
 8013bee:	d20d      	bcs.n	8013c0c <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x88>
      output->data.raw[i] = input->data.raw[i];
 8013bf0:	69bb      	ldr	r3, [r7, #24]
 8013bf2:	681a      	ldr	r2, [r3, #0]
 8013bf4:	69fb      	ldr	r3, [r7, #28]
 8013bf6:	441a      	add	r2, r3
 8013bf8:	697b      	ldr	r3, [r7, #20]
 8013bfa:	6819      	ldr	r1, [r3, #0]
 8013bfc:	69fb      	ldr	r3, [r7, #28]
 8013bfe:	440b      	add	r3, r1
 8013c00:	7812      	ldrb	r2, [r2, #0]
 8013c02:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < input_bytes; ++i) {
 8013c04:	69fb      	ldr	r3, [r7, #28]
 8013c06:	3301      	adds	r3, #1
 8013c08:	61fb      	str	r3, [r7, #28]
 8013c0a:	e7ed      	b.n	8013be8 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x64>
    }
  }
  return kTfLiteOk;
 8013c0c:	2300      	movs	r3, #0
}
 8013c0e:	4618      	mov	r0, r3
 8013c10:	3720      	adds	r7, #32
 8013c12:	46bd      	mov	sp, r7
 8013c14:	bd80      	pop	{r7, pc}
	...

08013c18 <_ZN6tflite3ops5micro16Register_RESHAPEEv>:

}  // namespace reshape

TfLiteRegistration Register_RESHAPE() {
 8013c18:	b4b0      	push	{r4, r5, r7}
 8013c1a:	b083      	sub	sp, #12
 8013c1c:	af00      	add	r7, sp, #0
 8013c1e:	6078      	str	r0, [r7, #4]
          /*prepare=*/reshape::Prepare,
          /*invoke=*/reshape::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	4a07      	ldr	r2, [pc, #28]	; (8013c40 <_ZN6tflite3ops5micro16Register_RESHAPEEv+0x28>)
 8013c24:	461c      	mov	r4, r3
 8013c26:	4615      	mov	r5, r2
 8013c28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013c2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013c2c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8013c30:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8013c34:	6878      	ldr	r0, [r7, #4]
 8013c36:	370c      	adds	r7, #12
 8013c38:	46bd      	mov	sp, r7
 8013c3a:	bcb0      	pop	{r4, r5, r7}
 8013c3c:	4770      	bx	lr
 8013c3e:	bf00      	nop
 8013c40:	0802b668 	.word	0x0802b668

08013c44 <_ZN6tflite7gen_lutEPFffEffPsi>:
// func - the function to build the LUT for (e.g exp(x))
// min,max - table limits
// table - pointer to buffer
// num - number of elements in the LUT
inline void gen_lut(float (*func)(float), float min, float max, int16_t* table,
                    const int num) {
 8013c44:	b580      	push	{r7, lr}
 8013c46:	ed2d 8b02 	vpush	{d8}
 8013c4a:	b094      	sub	sp, #80	; 0x50
 8013c4c:	af00      	add	r7, sp, #0
 8013c4e:	6178      	str	r0, [r7, #20]
 8013c50:	ed87 0a04 	vstr	s0, [r7, #16]
 8013c54:	edc7 0a03 	vstr	s1, [r7, #12]
 8013c58:	60b9      	str	r1, [r7, #8]
 8013c5a:	607a      	str	r2, [r7, #4]
  // size of table should equal to num + 1
  // last element only for slope calculation
  float step = (max - min) / (num - 1);
 8013c5c:	ed97 7a03 	vldr	s14, [r7, #12]
 8013c60:	edd7 7a04 	vldr	s15, [r7, #16]
 8013c64:	ee77 6a67 	vsub.f32	s13, s14, s15
 8013c68:	687b      	ldr	r3, [r7, #4]
 8013c6a:	3b01      	subs	r3, #1
 8013c6c:	ee07 3a90 	vmov	s15, r3
 8013c70:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013c74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013c78:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
  float half_step = step / 2.0f;
 8013c7c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8013c80:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8013c84:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8013c88:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
  for (int i = 0; i < num - 1; i++) {
 8013c8c:	2300      	movs	r3, #0
 8013c8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	3b01      	subs	r3, #1
 8013c94:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013c96:	429a      	cmp	r2, r3
 8013c98:	f280 80c0 	bge.w	8013e1c <_ZN6tflite7gen_lutEPFffEffPsi+0x1d8>
    float sample_val = TfLiteRound(func(min + i * step) * 32768.0f);
 8013c9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013c9e:	ee07 3a90 	vmov	s15, r3
 8013ca2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013ca6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8013caa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013cae:	edd7 7a04 	vldr	s15, [r7, #16]
 8013cb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013cb6:	697b      	ldr	r3, [r7, #20]
 8013cb8:	eeb0 0a67 	vmov.f32	s0, s15
 8013cbc:	4798      	blx	r3
 8013cbe:	eef0 7a40 	vmov.f32	s15, s0
 8013cc2:	ed9f 7a74 	vldr	s14, [pc, #464]	; 8013e94 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 8013cc6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013cca:	eeb0 0a67 	vmov.f32	s0, s15
 8013cce:	f7f7 fa00 	bl	800b0d2 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 8013cd2:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
    float midpoint_interp_val =
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
 8013cd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013cd8:	3301      	adds	r3, #1
 8013cda:	ee07 3a90 	vmov	s15, r3
 8013cde:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013ce2:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8013ce6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013cea:	edd7 7a04 	vldr	s15, [r7, #16]
 8013cee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013cf2:	697b      	ldr	r3, [r7, #20]
 8013cf4:	eeb0 0a67 	vmov.f32	s0, s15
 8013cf8:	4798      	blx	r3
 8013cfa:	eef0 7a40 	vmov.f32	s15, s0
 8013cfe:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8013e94 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 8013d02:	ee27 8a87 	vmul.f32	s16, s15, s14
                     TfLiteRound(func(min + i * step) * 32768.0f)) /
 8013d06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013d08:	ee07 3a90 	vmov	s15, r3
 8013d0c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013d10:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8013d14:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013d18:	edd7 7a04 	vldr	s15, [r7, #16]
 8013d1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013d20:	697b      	ldr	r3, [r7, #20]
 8013d22:	eeb0 0a67 	vmov.f32	s0, s15
 8013d26:	4798      	blx	r3
 8013d28:	eef0 7a40 	vmov.f32	s15, s0
 8013d2c:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8013e94 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 8013d30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013d34:	eeb0 0a67 	vmov.f32	s0, s15
 8013d38:	f7f7 f9cb 	bl	800b0d2 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 8013d3c:	eef0 7a40 	vmov.f32	s15, s0
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
 8013d40:	ee78 7a27 	vadd.f32	s15, s16, s15
 8013d44:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8013d48:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8013d4c:	eeb0 0a47 	vmov.f32	s0, s14
 8013d50:	f7f7 f9bf 	bl	800b0d2 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 8013d54:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
                    2.0f);
    float midpoint_val =
        TfLiteRound(func(min + i * step + half_step) * 32768.0f);
 8013d58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013d5a:	ee07 3a90 	vmov	s15, r3
 8013d5e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013d62:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8013d66:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013d6a:	edd7 7a04 	vldr	s15, [r7, #16]
 8013d6e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013d72:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8013d76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013d7a:	697b      	ldr	r3, [r7, #20]
 8013d7c:	eeb0 0a67 	vmov.f32	s0, s15
 8013d80:	4798      	blx	r3
 8013d82:	eef0 7a40 	vmov.f32	s15, s0
 8013d86:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8013e94 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 8013d8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013d8e:	eeb0 0a67 	vmov.f32	s0, s15
 8013d92:	f7f7 f99e 	bl	800b0d2 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 8013d96:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
    float midpoint_err = midpoint_interp_val - midpoint_val;
 8013d9a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8013d9e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8013da2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013da6:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    float bias = TfLiteRound(midpoint_err / 2.0f);
 8013daa:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8013dae:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8013db2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8013db6:	eeb0 0a47 	vmov.f32	s0, s14
 8013dba:	f7f7 f98a 	bl	800b0d2 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 8013dbe:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
    table[i] = std::min<float>(std::max<float>(sample_val - bias, -32768.0f),
 8013dc2:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8013dc6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8013dca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013dce:	edc7 7a06 	vstr	s15, [r7, #24]
 8013dd2:	f04f 4347 	mov.w	r3, #3338665984	; 0xc7000000
 8013dd6:	61fb      	str	r3, [r7, #28]
                               32767.0f);
 8013dd8:	f107 021c 	add.w	r2, r7, #28
 8013ddc:	f107 0318 	add.w	r3, r7, #24
 8013de0:	4611      	mov	r1, r2
 8013de2:	4618      	mov	r0, r3
 8013de4:	f7f7 f948 	bl	800b078 <_ZSt3maxIfERKT_S2_S2_>
 8013de8:	4602      	mov	r2, r0
 8013dea:	4b2b      	ldr	r3, [pc, #172]	; (8013e98 <_ZN6tflite7gen_lutEPFffEffPsi+0x254>)
 8013dec:	623b      	str	r3, [r7, #32]
 8013dee:	f107 0320 	add.w	r3, r7, #32
 8013df2:	4619      	mov	r1, r3
 8013df4:	4610      	mov	r0, r2
 8013df6:	f7f7 f926 	bl	800b046 <_ZSt3minIfERKT_S2_S2_>
 8013dfa:	4603      	mov	r3, r0
    table[i] = std::min<float>(std::max<float>(sample_val - bias, -32768.0f),
 8013dfc:	edd3 7a00 	vldr	s15, [r3]
 8013e00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013e02:	005b      	lsls	r3, r3, #1
 8013e04:	68ba      	ldr	r2, [r7, #8]
 8013e06:	4413      	add	r3, r2
 8013e08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013e0c:	ee17 2a90 	vmov	r2, s15
 8013e10:	b212      	sxth	r2, r2
 8013e12:	801a      	strh	r2, [r3, #0]
  for (int i = 0; i < num - 1; i++) {
 8013e14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013e16:	3301      	adds	r3, #1
 8013e18:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013e1a:	e739      	b.n	8013c90 <_ZN6tflite7gen_lutEPFffEffPsi+0x4c>
  }
  table[num - 1] = std::min<float>(
      std::max<float>(TfLiteRound(func(max) * 32768.0f), -32768.0f), 32767.0f);
 8013e1c:	697b      	ldr	r3, [r7, #20]
 8013e1e:	ed97 0a03 	vldr	s0, [r7, #12]
 8013e22:	4798      	blx	r3
 8013e24:	eef0 7a40 	vmov.f32	s15, s0
 8013e28:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8013e94 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 8013e2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013e30:	eeb0 0a67 	vmov.f32	s0, s15
 8013e34:	f7f7 f94d 	bl	800b0d2 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 8013e38:	eef0 7a40 	vmov.f32	s15, s0
 8013e3c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 8013e40:	f04f 4347 	mov.w	r3, #3338665984	; 0xc7000000
 8013e44:	62bb      	str	r3, [r7, #40]	; 0x28
 8013e46:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8013e4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013e4e:	4611      	mov	r1, r2
 8013e50:	4618      	mov	r0, r3
 8013e52:	f7f7 f911 	bl	800b078 <_ZSt3maxIfERKT_S2_S2_>
 8013e56:	4602      	mov	r2, r0
 8013e58:	4b0f      	ldr	r3, [pc, #60]	; (8013e98 <_ZN6tflite7gen_lutEPFffEffPsi+0x254>)
 8013e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013e5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013e60:	4619      	mov	r1, r3
 8013e62:	4610      	mov	r0, r2
 8013e64:	f7f7 f8ef 	bl	800b046 <_ZSt3minIfERKT_S2_S2_>
 8013e68:	4603      	mov	r3, r0
  table[num - 1] = std::min<float>(
 8013e6a:	edd3 7a00 	vldr	s15, [r3]
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8013e74:	3b01      	subs	r3, #1
 8013e76:	005b      	lsls	r3, r3, #1
 8013e78:	68ba      	ldr	r2, [r7, #8]
 8013e7a:	4413      	add	r3, r2
 8013e7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013e80:	ee17 2a90 	vmov	r2, s15
 8013e84:	b212      	sxth	r2, r2
 8013e86:	801a      	strh	r2, [r3, #0]
}
 8013e88:	bf00      	nop
 8013e8a:	3750      	adds	r7, #80	; 0x50
 8013e8c:	46bd      	mov	sp, r7
 8013e8e:	ecbd 8b02 	vpop	{d8}
 8013e92:	bd80      	pop	{r7, pc}
 8013e94:	47000000 	.word	0x47000000
 8013e98:	46fffe00 	.word	0x46fffe00
 8013e9c:	00000000 	.word	0x00000000

08013ea0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>:

TfLiteStatus CalculateSoftmaxParams(TfLiteContext* context,
                                    const TfLiteTensor* input,
                                    TfLiteTensor* output,
                                    const TfLiteSoftmaxParams* params,
                                    SoftmaxParams* op_data) {
 8013ea0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8013ea4:	b090      	sub	sp, #64	; 0x40
 8013ea6:	af06      	add	r7, sp, #24
 8013ea8:	60f8      	str	r0, [r7, #12]
 8013eaa:	60b9      	str	r1, [r7, #8]
 8013eac:	607a      	str	r2, [r7, #4]
 8013eae:	603b      	str	r3, [r7, #0]
  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
 8013eb0:	68bb      	ldr	r3, [r7, #8]
 8013eb2:	781b      	ldrb	r3, [r3, #0]
 8013eb4:	2b09      	cmp	r3, #9
 8013eb6:	d004      	beq.n	8013ec2 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x22>
 8013eb8:	68bb      	ldr	r3, [r7, #8]
 8013eba:	781b      	ldrb	r3, [r3, #0]
 8013ebc:	2b07      	cmp	r3, #7
 8013ebe:	f040 81b6 	bne.w	801422e <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x38e>
    if (input->type == kTfLiteInt16) {
 8013ec2:	68bb      	ldr	r3, [r7, #8]
 8013ec4:	781b      	ldrb	r3, [r3, #0]
 8013ec6:	2b07      	cmp	r3, #7
 8013ec8:	d156      	bne.n	8013f78 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xd8>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	691b      	ldr	r3, [r3, #16]
 8013ece:	2b00      	cmp	r3, #0
 8013ed0:	d011      	beq.n	8013ef6 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x56>
 8013ed2:	68fb      	ldr	r3, [r7, #12]
 8013ed4:	695c      	ldr	r4, [r3, #20]
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	691b      	ldr	r3, [r3, #16]
 8013eda:	2200      	movs	r2, #0
 8013edc:	9203      	str	r2, [sp, #12]
 8013ede:	9302      	str	r3, [sp, #8]
 8013ee0:	4ba1      	ldr	r3, [pc, #644]	; (8014168 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c8>)
 8013ee2:	9301      	str	r3, [sp, #4]
 8013ee4:	4ba1      	ldr	r3, [pc, #644]	; (801416c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2cc>)
 8013ee6:	9300      	str	r3, [sp, #0]
 8013ee8:	2325      	movs	r3, #37	; 0x25
 8013eea:	4aa1      	ldr	r2, [pc, #644]	; (8014170 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 8013eec:	49a1      	ldr	r1, [pc, #644]	; (8014174 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d4>)
 8013eee:	68f8      	ldr	r0, [r7, #12]
 8013ef0:	47a0      	blx	r4
 8013ef2:	2301      	movs	r3, #1
 8013ef4:	e1e0      	b.n	80142b8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
      TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 32768,
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	edd3 7a03 	vldr	s15, [r3, #12]
 8013efc:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 8014178 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d8>
 8013f00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013f04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f08:	dd07      	ble.n	8013f1a <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x7a>
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	edd3 7a03 	vldr	s15, [r3, #12]
 8013f10:	ed9f 7a99 	vldr	s14, [pc, #612]	; 8014178 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d8>
 8013f14:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013f18:	e006      	b.n	8013f28 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x88>
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	edd3 7a03 	vldr	s15, [r3, #12]
 8013f20:	ed9f 7a95 	vldr	s14, [pc, #596]	; 8014178 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d8>
 8013f24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013f28:	edc7 7a08 	vstr	s15, [r7, #32]
 8013f2c:	edd7 7a08 	vldr	s15, [r7, #32]
 8013f30:	ed9f 7a92 	vldr	s14, [pc, #584]	; 801417c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2dc>
 8013f34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013f38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f3c:	f340 80dd 	ble.w	80140fa <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x25a>
 8013f40:	68fb      	ldr	r3, [r7, #12]
 8013f42:	695c      	ldr	r4, [r3, #20]
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	68db      	ldr	r3, [r3, #12]
 8013f48:	4618      	mov	r0, r3
 8013f4a:	f7ec fb2f 	bl	80005ac <__aeabi_f2d>
 8013f4e:	4602      	mov	r2, r0
 8013f50:	460b      	mov	r3, r1
 8013f52:	f04f 0000 	mov.w	r0, #0
 8013f56:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8013f5a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013f5e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013f62:	4b87      	ldr	r3, [pc, #540]	; (8014180 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e0>)
 8013f64:	9301      	str	r3, [sp, #4]
 8013f66:	4b87      	ldr	r3, [pc, #540]	; (8014184 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e4>)
 8013f68:	9300      	str	r3, [sp, #0]
 8013f6a:	2326      	movs	r3, #38	; 0x26
 8013f6c:	4a80      	ldr	r2, [pc, #512]	; (8014170 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 8013f6e:	4986      	ldr	r1, [pc, #536]	; (8014188 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
 8013f70:	68f8      	ldr	r0, [r7, #12]
 8013f72:	47a0      	blx	r4
 8013f74:	2301      	movs	r3, #1
 8013f76:	e19f      	b.n	80142b8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
                          (0.001f * 1.f / 32768));
    } else {  // input->type == kTfLiteInt8
      TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteInt8);
 8013f78:	68bb      	ldr	r3, [r7, #8]
 8013f7a:	781b      	ldrb	r3, [r3, #0]
 8013f7c:	2b09      	cmp	r3, #9
 8013f7e:	d018      	beq.n	8013fb2 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x112>
 8013f80:	68fb      	ldr	r3, [r7, #12]
 8013f82:	695c      	ldr	r4, [r3, #20]
 8013f84:	68bb      	ldr	r3, [r7, #8]
 8013f86:	781b      	ldrb	r3, [r3, #0]
 8013f88:	4618      	mov	r0, r3
 8013f8a:	f7f4 fb61 	bl	8008650 <TfLiteTypeGetName>
 8013f8e:	4605      	mov	r5, r0
 8013f90:	2009      	movs	r0, #9
 8013f92:	f7f4 fb5d 	bl	8008650 <TfLiteTypeGetName>
 8013f96:	4603      	mov	r3, r0
 8013f98:	9303      	str	r3, [sp, #12]
 8013f9a:	9502      	str	r5, [sp, #8]
 8013f9c:	4b7b      	ldr	r3, [pc, #492]	; (801418c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ec>)
 8013f9e:	9301      	str	r3, [sp, #4]
 8013fa0:	4b7b      	ldr	r3, [pc, #492]	; (8014190 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f0>)
 8013fa2:	9300      	str	r3, [sp, #0]
 8013fa4:	2329      	movs	r3, #41	; 0x29
 8013fa6:	4a72      	ldr	r2, [pc, #456]	; (8014170 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 8013fa8:	497a      	ldr	r1, [pc, #488]	; (8014194 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f4>)
 8013faa:	68f8      	ldr	r0, [r7, #12]
 8013fac:	47a0      	blx	r4
 8013fae:	2301      	movs	r3, #1
 8013fb0:	e182      	b.n	80142b8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
      if (output->type == kTfLiteInt16) {
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	781b      	ldrb	r3, [r3, #0]
 8013fb6:	2b07      	cmp	r3, #7
 8013fb8:	d155      	bne.n	8014066 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x1c6>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -32768);
 8013fba:	687b      	ldr	r3, [r7, #4]
 8013fbc:	691b      	ldr	r3, [r3, #16]
 8013fbe:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8013fc2:	d011      	beq.n	8013fe8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x148>
 8013fc4:	68fb      	ldr	r3, [r7, #12]
 8013fc6:	695c      	ldr	r4, [r3, #20]
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	691b      	ldr	r3, [r3, #16]
 8013fcc:	4a72      	ldr	r2, [pc, #456]	; (8014198 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f8>)
 8013fce:	9203      	str	r2, [sp, #12]
 8013fd0:	9302      	str	r3, [sp, #8]
 8013fd2:	4b72      	ldr	r3, [pc, #456]	; (801419c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2fc>)
 8013fd4:	9301      	str	r3, [sp, #4]
 8013fd6:	4b65      	ldr	r3, [pc, #404]	; (801416c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2cc>)
 8013fd8:	9300      	str	r3, [sp, #0]
 8013fda:	232b      	movs	r3, #43	; 0x2b
 8013fdc:	4a64      	ldr	r2, [pc, #400]	; (8014170 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 8013fde:	4965      	ldr	r1, [pc, #404]	; (8014174 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d4>)
 8013fe0:	68f8      	ldr	r0, [r7, #12]
 8013fe2:	47a0      	blx	r4
 8013fe4:	2301      	movs	r3, #1
 8013fe6:	e167      	b.n	80142b8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
        TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 65536,
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	edd3 7a03 	vldr	s15, [r3, #12]
 8013fee:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 80141a0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>
 8013ff2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ffa:	dd07      	ble.n	801400c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x16c>
 8013ffc:	687b      	ldr	r3, [r7, #4]
 8013ffe:	edd3 7a03 	vldr	s15, [r3, #12]
 8014002:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80141a0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>
 8014006:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801400a:	e006      	b.n	801401a <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x17a>
 801400c:	687b      	ldr	r3, [r7, #4]
 801400e:	edd3 7a03 	vldr	s15, [r3, #12]
 8014012:	ed9f 7a63 	vldr	s14, [pc, #396]	; 80141a0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>
 8014016:	ee77 7a67 	vsub.f32	s15, s14, s15
 801401a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 801401e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8014022:	ed9f 7a60 	vldr	s14, [pc, #384]	; 80141a4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x304>
 8014026:	eef4 7ac7 	vcmpe.f32	s15, s14
 801402a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801402e:	dd64      	ble.n	80140fa <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x25a>
 8014030:	68fb      	ldr	r3, [r7, #12]
 8014032:	695c      	ldr	r4, [r3, #20]
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	68db      	ldr	r3, [r3, #12]
 8014038:	4618      	mov	r0, r3
 801403a:	f7ec fab7 	bl	80005ac <__aeabi_f2d>
 801403e:	4602      	mov	r2, r0
 8014040:	460b      	mov	r3, r1
 8014042:	f04f 0000 	mov.w	r0, #0
 8014046:	4958      	ldr	r1, [pc, #352]	; (80141a8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x308>)
 8014048:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801404c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8014050:	4b56      	ldr	r3, [pc, #344]	; (80141ac <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x30c>)
 8014052:	9301      	str	r3, [sp, #4]
 8014054:	4b4b      	ldr	r3, [pc, #300]	; (8014184 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e4>)
 8014056:	9300      	str	r3, [sp, #0]
 8014058:	232c      	movs	r3, #44	; 0x2c
 801405a:	4a45      	ldr	r2, [pc, #276]	; (8014170 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 801405c:	494a      	ldr	r1, [pc, #296]	; (8014188 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
 801405e:	68f8      	ldr	r0, [r7, #12]
 8014060:	47a0      	blx	r4
 8014062:	2301      	movs	r3, #1
 8014064:	e128      	b.n	80142b8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
                            (0.001f * 1.f / 65536));
      } else {  // output->type == kTfLiteint8
        TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteInt8);
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	781b      	ldrb	r3, [r3, #0]
 801406a:	2b09      	cmp	r3, #9
 801406c:	d018      	beq.n	80140a0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x200>
 801406e:	68fb      	ldr	r3, [r7, #12]
 8014070:	695c      	ldr	r4, [r3, #20]
 8014072:	687b      	ldr	r3, [r7, #4]
 8014074:	781b      	ldrb	r3, [r3, #0]
 8014076:	4618      	mov	r0, r3
 8014078:	f7f4 faea 	bl	8008650 <TfLiteTypeGetName>
 801407c:	4605      	mov	r5, r0
 801407e:	2009      	movs	r0, #9
 8014080:	f7f4 fae6 	bl	8008650 <TfLiteTypeGetName>
 8014084:	4603      	mov	r3, r0
 8014086:	9303      	str	r3, [sp, #12]
 8014088:	9502      	str	r5, [sp, #8]
 801408a:	4b40      	ldr	r3, [pc, #256]	; (801418c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ec>)
 801408c:	9301      	str	r3, [sp, #4]
 801408e:	4b48      	ldr	r3, [pc, #288]	; (80141b0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x310>)
 8014090:	9300      	str	r3, [sp, #0]
 8014092:	232f      	movs	r3, #47	; 0x2f
 8014094:	4a36      	ldr	r2, [pc, #216]	; (8014170 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 8014096:	493f      	ldr	r1, [pc, #252]	; (8014194 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f4>)
 8014098:	68f8      	ldr	r0, [r7, #12]
 801409a:	47a0      	blx	r4
 801409c:	2301      	movs	r3, #1
 801409e:	e10b      	b.n	80142b8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -128);
 80140a0:	687b      	ldr	r3, [r7, #4]
 80140a2:	691b      	ldr	r3, [r3, #16]
 80140a4:	f113 0f80 	cmn.w	r3, #128	; 0x80
 80140a8:	d012      	beq.n	80140d0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x230>
 80140aa:	68fb      	ldr	r3, [r7, #12]
 80140ac:	695c      	ldr	r4, [r3, #20]
 80140ae:	687b      	ldr	r3, [r7, #4]
 80140b0:	691b      	ldr	r3, [r3, #16]
 80140b2:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 80140b6:	9203      	str	r2, [sp, #12]
 80140b8:	9302      	str	r3, [sp, #8]
 80140ba:	4b3e      	ldr	r3, [pc, #248]	; (80141b4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x314>)
 80140bc:	9301      	str	r3, [sp, #4]
 80140be:	4b2b      	ldr	r3, [pc, #172]	; (801416c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2cc>)
 80140c0:	9300      	str	r3, [sp, #0]
 80140c2:	2330      	movs	r3, #48	; 0x30
 80140c4:	4a2a      	ldr	r2, [pc, #168]	; (8014170 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 80140c6:	492b      	ldr	r1, [pc, #172]	; (8014174 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d4>)
 80140c8:	68f8      	ldr	r0, [r7, #12]
 80140ca:	47a0      	blx	r4
 80140cc:	2301      	movs	r3, #1
 80140ce:	e0f3      	b.n	80142b8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
        TF_LITE_ENSURE(context, output->params.scale == 1.f / 256);
 80140d0:	687b      	ldr	r3, [r7, #4]
 80140d2:	edd3 7a03 	vldr	s15, [r3, #12]
 80140d6:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80141b8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x318>
 80140da:	eef4 7a47 	vcmp.f32	s15, s14
 80140de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140e2:	d00a      	beq.n	80140fa <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x25a>
 80140e4:	68fb      	ldr	r3, [r7, #12]
 80140e6:	695c      	ldr	r4, [r3, #20]
 80140e8:	4b34      	ldr	r3, [pc, #208]	; (80141bc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x31c>)
 80140ea:	9300      	str	r3, [sp, #0]
 80140ec:	2331      	movs	r3, #49	; 0x31
 80140ee:	4a20      	ldr	r2, [pc, #128]	; (8014170 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 80140f0:	4933      	ldr	r1, [pc, #204]	; (80141c0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x320>)
 80140f2:	68f8      	ldr	r0, [r7, #12]
 80140f4:	47a0      	blx	r4
 80140f6:	2301      	movs	r3, #1
 80140f8:	e0de      	b.n	80142b8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
    }

    static const int kScaledDiffIntegerBits = 5;

    // Calculate input_multiplier and input_left_shift
    if (input->type == kTfLiteInt16) {
 80140fa:	68bb      	ldr	r3, [r7, #8]
 80140fc:	781b      	ldrb	r3, [r3, #0]
 80140fe:	2b07      	cmp	r3, #7
 8014100:	d160      	bne.n	80141c4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x324>
      int input_left_shift;
      double input_scale_beta_rescale =
          static_cast<double>(input->params.scale) *
 8014102:	68bb      	ldr	r3, [r7, #8]
 8014104:	68db      	ldr	r3, [r3, #12]
 8014106:	4618      	mov	r0, r3
 8014108:	f7ec fa50 	bl	80005ac <__aeabi_f2d>
 801410c:	4604      	mov	r4, r0
 801410e:	460d      	mov	r5, r1
          static_cast<double>(params->beta) /
 8014110:	683b      	ldr	r3, [r7, #0]
 8014112:	681b      	ldr	r3, [r3, #0]
 8014114:	4618      	mov	r0, r3
 8014116:	f7ec fa49 	bl	80005ac <__aeabi_f2d>
 801411a:	4602      	mov	r2, r0
 801411c:	460b      	mov	r3, r1
          static_cast<double>(input->params.scale) *
 801411e:	4620      	mov	r0, r4
 8014120:	4629      	mov	r1, r5
 8014122:	f7ec fa9b 	bl	800065c <__aeabi_dmul>
 8014126:	4602      	mov	r2, r0
 8014128:	460b      	mov	r3, r1
 801412a:	4610      	mov	r0, r2
 801412c:	4619      	mov	r1, r3
      double input_scale_beta_rescale =
 801412e:	a30c      	add	r3, pc, #48	; (adr r3, 8014160 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c0>)
 8014130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014134:	f7ec fbbc 	bl	80008b0 <__aeabi_ddiv>
 8014138:	4602      	mov	r2, r0
 801413a:	460b      	mov	r3, r1
 801413c:	e9c7 2306 	strd	r2, r3, [r7, #24]
          (10.0 / 65535.0);  // scale the input_diff such that [-65535, 0]
                             // correspond to [-10.0, 0.0]
      QuantizeMultiplier(input_scale_beta_rescale, &op_data->input_multiplier,
 8014140:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014142:	3308      	adds	r3, #8
 8014144:	f107 0214 	add.w	r2, r7, #20
 8014148:	4611      	mov	r1, r2
 801414a:	4618      	mov	r0, r3
 801414c:	ed97 0b06 	vldr	d0, [r7, #24]
 8014150:	f7f6 fe02 	bl	800ad58 <_ZN6tflite18QuantizeMultiplierEdPlPi>
                         &input_left_shift);
      op_data->input_left_shift = input_left_shift;
 8014154:	697a      	ldr	r2, [r7, #20]
 8014156:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014158:	60da      	str	r2, [r3, #12]
          &op_data->input_multiplier, &input_left_shift);
      op_data->input_left_shift = input_left_shift;
      op_data->diff_min =
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
                                              op_data->input_left_shift);
    }
 801415a:	e0ac      	b.n	80142b6 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x416>
 801415c:	f3af 8000 	nop.w
 8014160:	00140014 	.word	0x00140014
 8014164:	3f240014 	.word	0x3f240014
 8014168:	0802b6e8 	.word	0x0802b6e8
 801416c:	0802b6ec 	.word	0x0802b6ec
 8014170:	0802b688 	.word	0x0802b688
 8014174:	0802b6cc 	.word	0x0802b6cc
 8014178:	38000000 	.word	0x38000000
 801417c:	3303126f 	.word	0x3303126f
 8014180:	0802b728 	.word	0x0802b728
 8014184:	0802b734 	.word	0x0802b734
 8014188:	0802b708 	.word	0x0802b708
 801418c:	0802b768 	.word	0x0802b768
 8014190:	0802b774 	.word	0x0802b774
 8014194:	0802b74c 	.word	0x0802b74c
 8014198:	ffff8000 	.word	0xffff8000
 801419c:	0802b780 	.word	0x0802b780
 80141a0:	37800000 	.word	0x37800000
 80141a4:	3283126f 	.word	0x3283126f
 80141a8:	3ef00000 	.word	0x3ef00000
 80141ac:	0802b788 	.word	0x0802b788
 80141b0:	0802b794 	.word	0x0802b794
 80141b4:	0802b7a4 	.word	0x0802b7a4
 80141b8:	3b800000 	.word	0x3b800000
 80141bc:	0802b7c4 	.word	0x0802b7c4
 80141c0:	0802b7ac 	.word	0x0802b7ac
          static_cast<double>(params->beta),
 80141c4:	683b      	ldr	r3, [r7, #0]
 80141c6:	681b      	ldr	r3, [r3, #0]
      tflite::PreprocessSoftmaxScaling(
 80141c8:	4618      	mov	r0, r3
 80141ca:	f7ec f9ef 	bl	80005ac <__aeabi_f2d>
 80141ce:	4680      	mov	r8, r0
 80141d0:	4689      	mov	r9, r1
          static_cast<double>(input->params.scale), kScaledDiffIntegerBits,
 80141d2:	68bb      	ldr	r3, [r7, #8]
 80141d4:	68db      	ldr	r3, [r3, #12]
      tflite::PreprocessSoftmaxScaling(
 80141d6:	4618      	mov	r0, r3
 80141d8:	f7ec f9e8 	bl	80005ac <__aeabi_f2d>
 80141dc:	4682      	mov	sl, r0
 80141de:	468b      	mov	fp, r1
 80141e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80141e2:	3308      	adds	r3, #8
 80141e4:	f107 0210 	add.w	r2, r7, #16
 80141e8:	4619      	mov	r1, r3
 80141ea:	2005      	movs	r0, #5
 80141ec:	ec4b ab11 	vmov	d1, sl, fp
 80141f0:	ec49 8b10 	vmov	d0, r8, r9
 80141f4:	f7f6 fe78 	bl	800aee8 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>
      op_data->input_left_shift = input_left_shift;
 80141f8:	693a      	ldr	r2, [r7, #16]
 80141fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80141fc:	60da      	str	r2, [r3, #12]
                                              op_data->input_left_shift);
 80141fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014200:	68db      	ldr	r3, [r3, #12]
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
 8014202:	221f      	movs	r2, #31
 8014204:	4619      	mov	r1, r3
 8014206:	2005      	movs	r0, #5
 8014208:	f7f6 feb6 	bl	800af78 <_ZN6tflite20CalculateInputRadiusEiii>
 801420c:	4603      	mov	r3, r0
 801420e:	4618      	mov	r0, r3
 8014210:	f7ec f9ba 	bl	8000588 <__aeabi_i2d>
 8014214:	4602      	mov	r2, r0
 8014216:	460b      	mov	r3, r1
 8014218:	4614      	mov	r4, r2
 801421a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
      op_data->diff_min =
 801421e:	4620      	mov	r0, r4
 8014220:	4629      	mov	r1, r5
 8014222:	f7ec fcb5 	bl	8000b90 <__aeabi_d2iz>
 8014226:	4602      	mov	r2, r0
 8014228:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801422a:	619a      	str	r2, [r3, #24]
    }
 801422c:	e043      	b.n	80142b6 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x416>
  } else {
    TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
 801422e:	68bb      	ldr	r3, [r7, #8]
 8014230:	781b      	ldrb	r3, [r3, #0]
 8014232:	2b01      	cmp	r3, #1
 8014234:	d018      	beq.n	8014268 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x3c8>
 8014236:	68fb      	ldr	r3, [r7, #12]
 8014238:	695c      	ldr	r4, [r3, #20]
 801423a:	68bb      	ldr	r3, [r7, #8]
 801423c:	781b      	ldrb	r3, [r3, #0]
 801423e:	4618      	mov	r0, r3
 8014240:	f7f4 fa06 	bl	8008650 <TfLiteTypeGetName>
 8014244:	4605      	mov	r5, r0
 8014246:	2001      	movs	r0, #1
 8014248:	f7f4 fa02 	bl	8008650 <TfLiteTypeGetName>
 801424c:	4603      	mov	r3, r0
 801424e:	9303      	str	r3, [sp, #12]
 8014250:	9502      	str	r5, [sp, #8]
 8014252:	4b1c      	ldr	r3, [pc, #112]	; (80142c4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x424>)
 8014254:	9301      	str	r3, [sp, #4]
 8014256:	4b1c      	ldr	r3, [pc, #112]	; (80142c8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x428>)
 8014258:	9300      	str	r3, [sp, #0]
 801425a:	234e      	movs	r3, #78	; 0x4e
 801425c:	4a1b      	ldr	r2, [pc, #108]	; (80142cc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x42c>)
 801425e:	491c      	ldr	r1, [pc, #112]	; (80142d0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x430>)
 8014260:	68f8      	ldr	r0, [r7, #12]
 8014262:	47a0      	blx	r4
 8014264:	2301      	movs	r3, #1
 8014266:	e027      	b.n	80142b8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	781b      	ldrb	r3, [r3, #0]
 801426c:	2b01      	cmp	r3, #1
 801426e:	d018      	beq.n	80142a2 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x402>
 8014270:	68fb      	ldr	r3, [r7, #12]
 8014272:	695c      	ldr	r4, [r3, #20]
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	781b      	ldrb	r3, [r3, #0]
 8014278:	4618      	mov	r0, r3
 801427a:	f7f4 f9e9 	bl	8008650 <TfLiteTypeGetName>
 801427e:	4605      	mov	r5, r0
 8014280:	2001      	movs	r0, #1
 8014282:	f7f4 f9e5 	bl	8008650 <TfLiteTypeGetName>
 8014286:	4603      	mov	r3, r0
 8014288:	9303      	str	r3, [sp, #12]
 801428a:	9502      	str	r5, [sp, #8]
 801428c:	4b0d      	ldr	r3, [pc, #52]	; (80142c4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x424>)
 801428e:	9301      	str	r3, [sp, #4]
 8014290:	4b10      	ldr	r3, [pc, #64]	; (80142d4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x434>)
 8014292:	9300      	str	r3, [sp, #0]
 8014294:	234f      	movs	r3, #79	; 0x4f
 8014296:	4a0d      	ldr	r2, [pc, #52]	; (80142cc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x42c>)
 8014298:	490d      	ldr	r1, [pc, #52]	; (80142d0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x430>)
 801429a:	68f8      	ldr	r0, [r7, #12]
 801429c:	47a0      	blx	r4
 801429e:	2301      	movs	r3, #1
 80142a0:	e00a      	b.n	80142b8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
    op_data->beta = static_cast<double>(params->beta);
 80142a2:	683b      	ldr	r3, [r7, #0]
 80142a4:	681b      	ldr	r3, [r3, #0]
 80142a6:	4618      	mov	r0, r3
 80142a8:	f7ec f980 	bl	80005ac <__aeabi_f2d>
 80142ac:	4602      	mov	r2, r0
 80142ae:	460b      	mov	r3, r1
 80142b0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80142b2:	e9c1 2300 	strd	r2, r3, [r1]
  }
  return kTfLiteOk;
 80142b6:	2300      	movs	r3, #0
}
 80142b8:	4618      	mov	r0, r3
 80142ba:	3728      	adds	r7, #40	; 0x28
 80142bc:	46bd      	mov	sp, r7
 80142be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80142c2:	bf00      	nop
 80142c4:	0802b7e8 	.word	0x0802b7e8
 80142c8:	0802b774 	.word	0x0802b774
 80142cc:	0802b688 	.word	0x0802b688
 80142d0:	0802b74c 	.word	0x0802b74c
 80142d4:	0802b794 	.word	0x0802b794

080142d8 <_ZN6tflite11SoftmaxInitEP13TfLiteContextPKcj>:

}  // namespace

void* SoftmaxInit(TfLiteContext* context, const char* buffer, size_t length) {
 80142d8:	b580      	push	{r7, lr}
 80142da:	b084      	sub	sp, #16
 80142dc:	af00      	add	r7, sp, #0
 80142de:	60f8      	str	r0, [r7, #12]
 80142e0:	60b9      	str	r1, [r7, #8]
 80142e2:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 80142e4:	68fb      	ldr	r3, [r7, #12]
 80142e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80142e8:	2b00      	cmp	r3, #0
 80142ea:	d101      	bne.n	80142f0 <_ZN6tflite11SoftmaxInitEP13TfLiteContextPKcj+0x18>
 80142ec:	f011 fbab 	bl	8025a46 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(SoftmaxParams));
 80142f0:	68fb      	ldr	r3, [r7, #12]
 80142f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80142f4:	2138      	movs	r1, #56	; 0x38
 80142f6:	68f8      	ldr	r0, [r7, #12]
 80142f8:	4798      	blx	r3
 80142fa:	4603      	mov	r3, r0
}
 80142fc:	4618      	mov	r0, r3
 80142fe:	3710      	adds	r7, #16
 8014300:	46bd      	mov	sp, r7
 8014302:	bd80      	pop	{r7, pc}

08014304 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_clEf>:
  // Populate LUT if required
  if (input->type == kTfLiteInt16) {
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
    // exp LUT only used on negative values
    // we consider exp(-10.0) is insignificant to accumulation
    gen_lut([](float value) { return std::exp(value); }, -10.0f, 0.0f,
 8014304:	b580      	push	{r7, lr}
 8014306:	b082      	sub	sp, #8
 8014308:	af00      	add	r7, sp, #0
 801430a:	6078      	str	r0, [r7, #4]
 801430c:	ed87 0a00 	vstr	s0, [r7]
 8014310:	ed97 0a00 	vldr	s0, [r7]
 8014314:	f7fe fa3d 	bl	8012792 <_ZSt3expf>
 8014318:	eef0 7a40 	vmov.f32	s15, s0
 801431c:	eeb0 0a67 	vmov.f32	s0, s15
 8014320:	3708      	adds	r7, #8
 8014322:	46bd      	mov	sp, r7
 8014324:	bd80      	pop	{r7, pc}

08014326 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE_4_FUNEf>:
 8014326:	b580      	push	{r7, lr}
 8014328:	b082      	sub	sp, #8
 801432a:	af00      	add	r7, sp, #0
 801432c:	ed87 0a01 	vstr	s0, [r7, #4]
 8014330:	ed97 0a01 	vldr	s0, [r7, #4]
 8014334:	2000      	movs	r0, #0
 8014336:	f7ff ffe5 	bl	8014304 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_clEf>
 801433a:	eef0 7a40 	vmov.f32	s15, s0
 801433e:	eeb0 0a67 	vmov.f32	s0, s15
 8014342:	3708      	adds	r7, #8
 8014344:	46bd      	mov	sp, r7
 8014346:	bd80      	pop	{r7, pc}

08014348 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_cvPFffEEv>:
 8014348:	b480      	push	{r7}
 801434a:	b083      	sub	sp, #12
 801434c:	af00      	add	r7, sp, #0
 801434e:	6078      	str	r0, [r7, #4]
 8014350:	4b03      	ldr	r3, [pc, #12]	; (8014360 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_cvPFffEEv+0x18>)
 8014352:	4618      	mov	r0, r3
 8014354:	370c      	adds	r7, #12
 8014356:	46bd      	mov	sp, r7
 8014358:	f85d 7b04 	ldr.w	r7, [sp], #4
 801435c:	4770      	bx	lr
 801435e:	bf00      	nop
 8014360:	08014327 	.word	0x08014327

08014364 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_clEf>:
            op_data->exp_lut, kInt16LUTArraySize);
    gen_lut([](float value) { return 1.0f / (1.0f + value); }, 0.0f, 1.0f,
 8014364:	b480      	push	{r7}
 8014366:	b083      	sub	sp, #12
 8014368:	af00      	add	r7, sp, #0
 801436a:	6078      	str	r0, [r7, #4]
 801436c:	ed87 0a00 	vstr	s0, [r7]
 8014370:	edd7 7a00 	vldr	s15, [r7]
 8014374:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014378:	ee77 7a87 	vadd.f32	s15, s15, s14
 801437c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014380:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8014384:	eef0 7a66 	vmov.f32	s15, s13
 8014388:	eeb0 0a67 	vmov.f32	s0, s15
 801438c:	370c      	adds	r7, #12
 801438e:	46bd      	mov	sp, r7
 8014390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014394:	4770      	bx	lr

08014396 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE0_4_FUNEf>:
 8014396:	b580      	push	{r7, lr}
 8014398:	b082      	sub	sp, #8
 801439a:	af00      	add	r7, sp, #0
 801439c:	ed87 0a01 	vstr	s0, [r7, #4]
 80143a0:	ed97 0a01 	vldr	s0, [r7, #4]
 80143a4:	2000      	movs	r0, #0
 80143a6:	f7ff ffdd 	bl	8014364 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_clEf>
 80143aa:	eef0 7a40 	vmov.f32	s15, s0
 80143ae:	eeb0 0a67 	vmov.f32	s0, s15
 80143b2:	3708      	adds	r7, #8
 80143b4:	46bd      	mov	sp, r7
 80143b6:	bd80      	pop	{r7, pc}

080143b8 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_cvPFffEEv>:
 80143b8:	b480      	push	{r7}
 80143ba:	b083      	sub	sp, #12
 80143bc:	af00      	add	r7, sp, #0
 80143be:	6078      	str	r0, [r7, #4]
 80143c0:	4b03      	ldr	r3, [pc, #12]	; (80143d0 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_cvPFffEEv+0x18>)
 80143c2:	4618      	mov	r0, r3
 80143c4:	370c      	adds	r7, #12
 80143c6:	46bd      	mov	sp, r7
 80143c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143cc:	4770      	bx	lr
 80143ce:	bf00      	nop
 80143d0:	08014397 	.word	0x08014397

080143d4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus SoftmaxPrepare(TfLiteContext* context, TfLiteNode* node) {
 80143d4:	b590      	push	{r4, r7, lr}
 80143d6:	b08f      	sub	sp, #60	; 0x3c
 80143d8:	af04      	add	r7, sp, #16
 80143da:	6078      	str	r0, [r7, #4]
 80143dc:	6039      	str	r1, [r7, #0]
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
 80143de:	6838      	ldr	r0, [r7, #0]
 80143e0:	f7fd fcb7 	bl	8011d52 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 80143e4:	4603      	mov	r3, r0
 80143e6:	2b01      	cmp	r3, #1
 80143e8:	bf14      	ite	ne
 80143ea:	2301      	movne	r3, #1
 80143ec:	2300      	moveq	r3, #0
 80143ee:	b2db      	uxtb	r3, r3
 80143f0:	2b00      	cmp	r3, #0
 80143f2:	d013      	beq.n	801441c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x48>
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	695c      	ldr	r4, [r3, #20]
 80143f8:	6838      	ldr	r0, [r7, #0]
 80143fa:	f7fd fcaa 	bl	8011d52 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 80143fe:	4603      	mov	r3, r0
 8014400:	2201      	movs	r2, #1
 8014402:	9203      	str	r2, [sp, #12]
 8014404:	9302      	str	r3, [sp, #8]
 8014406:	4b7c      	ldr	r3, [pc, #496]	; (80145f8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x224>)
 8014408:	9301      	str	r3, [sp, #4]
 801440a:	4b7c      	ldr	r3, [pc, #496]	; (80145fc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x228>)
 801440c:	9300      	str	r3, [sp, #0]
 801440e:	235d      	movs	r3, #93	; 0x5d
 8014410:	4a7b      	ldr	r2, [pc, #492]	; (8014600 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 8014412:	497c      	ldr	r1, [pc, #496]	; (8014604 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 8014414:	6878      	ldr	r0, [r7, #4]
 8014416:	47a0      	blx	r4
 8014418:	2301      	movs	r3, #1
 801441a:	e146      	b.n	80146aa <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 801441c:	6838      	ldr	r0, [r7, #0]
 801441e:	f7fd fca5 	bl	8011d6c <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 8014422:	4603      	mov	r3, r0
 8014424:	2b01      	cmp	r3, #1
 8014426:	bf14      	ite	ne
 8014428:	2301      	movne	r3, #1
 801442a:	2300      	moveq	r3, #0
 801442c:	b2db      	uxtb	r3, r3
 801442e:	2b00      	cmp	r3, #0
 8014430:	d013      	beq.n	801445a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x86>
 8014432:	687b      	ldr	r3, [r7, #4]
 8014434:	695c      	ldr	r4, [r3, #20]
 8014436:	6838      	ldr	r0, [r7, #0]
 8014438:	f7fd fc98 	bl	8011d6c <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 801443c:	4603      	mov	r3, r0
 801443e:	2201      	movs	r2, #1
 8014440:	9203      	str	r2, [sp, #12]
 8014442:	9302      	str	r3, [sp, #8]
 8014444:	4b6c      	ldr	r3, [pc, #432]	; (80145f8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x224>)
 8014446:	9301      	str	r3, [sp, #4]
 8014448:	4b6f      	ldr	r3, [pc, #444]	; (8014608 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x234>)
 801444a:	9300      	str	r3, [sp, #0]
 801444c:	235e      	movs	r3, #94	; 0x5e
 801444e:	4a6c      	ldr	r2, [pc, #432]	; (8014600 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 8014450:	496c      	ldr	r1, [pc, #432]	; (8014604 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 8014452:	6878      	ldr	r0, [r7, #4]
 8014454:	47a0      	blx	r4
 8014456:	2301      	movs	r3, #1
 8014458:	e127      	b.n	80146aa <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  const TfLiteTensor* input = GetInput(context, node, 0);
 801445a:	2200      	movs	r2, #0
 801445c:	6839      	ldr	r1, [r7, #0]
 801445e:	6878      	ldr	r0, [r7, #4]
 8014460:	f7f6 ff58 	bl	800b314 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8014464:	6278      	str	r0, [r7, #36]	; 0x24
  TF_LITE_ENSURE(context, input != nullptr);
 8014466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014468:	2b00      	cmp	r3, #0
 801446a:	d10a      	bne.n	8014482 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xae>
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	695c      	ldr	r4, [r3, #20]
 8014470:	4b66      	ldr	r3, [pc, #408]	; (801460c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x238>)
 8014472:	9300      	str	r3, [sp, #0]
 8014474:	2360      	movs	r3, #96	; 0x60
 8014476:	4a62      	ldr	r2, [pc, #392]	; (8014600 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 8014478:	4965      	ldr	r1, [pc, #404]	; (8014610 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 801447a:	6878      	ldr	r0, [r7, #4]
 801447c:	47a0      	blx	r4
 801447e:	2301      	movs	r3, #1
 8014480:	e113      	b.n	80146aa <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
 8014482:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014484:	f7f6 fe72 	bl	800b16c <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>
 8014488:	4603      	mov	r3, r0
 801448a:	2b00      	cmp	r3, #0
 801448c:	bfd4      	ite	le
 801448e:	2301      	movle	r3, #1
 8014490:	2300      	movgt	r3, #0
 8014492:	b2db      	uxtb	r3, r3
 8014494:	2b00      	cmp	r3, #0
 8014496:	d00a      	beq.n	80144ae <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xda>
 8014498:	687b      	ldr	r3, [r7, #4]
 801449a:	695c      	ldr	r4, [r3, #20]
 801449c:	4b5d      	ldr	r3, [pc, #372]	; (8014614 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 801449e:	9300      	str	r3, [sp, #0]
 80144a0:	2361      	movs	r3, #97	; 0x61
 80144a2:	4a57      	ldr	r2, [pc, #348]	; (8014600 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 80144a4:	495a      	ldr	r1, [pc, #360]	; (8014610 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 80144a6:	6878      	ldr	r0, [r7, #4]
 80144a8:	47a0      	blx	r4
 80144aa:	2301      	movs	r3, #1
 80144ac:	e0fd      	b.n	80146aa <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  TfLiteTensor* output = GetOutput(context, node, 0);
 80144ae:	2200      	movs	r2, #0
 80144b0:	6839      	ldr	r1, [r7, #0]
 80144b2:	6878      	ldr	r0, [r7, #4]
 80144b4:	f7f6 ff3e 	bl	800b334 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 80144b8:	6238      	str	r0, [r7, #32]
  TF_LITE_ENSURE(context, output != nullptr);
 80144ba:	6a3b      	ldr	r3, [r7, #32]
 80144bc:	2b00      	cmp	r3, #0
 80144be:	d10a      	bne.n	80144d6 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x102>
 80144c0:	687b      	ldr	r3, [r7, #4]
 80144c2:	695c      	ldr	r4, [r3, #20]
 80144c4:	4b54      	ldr	r3, [pc, #336]	; (8014618 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 80144c6:	9300      	str	r3, [sp, #0]
 80144c8:	2363      	movs	r3, #99	; 0x63
 80144ca:	4a4d      	ldr	r2, [pc, #308]	; (8014600 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 80144cc:	4950      	ldr	r1, [pc, #320]	; (8014610 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 80144ce:	6878      	ldr	r0, [r7, #4]
 80144d0:	47a0      	blx	r4
 80144d2:	2301      	movs	r3, #1
 80144d4:	e0e9      	b.n	80146aa <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  TF_LITE_ENSURE(context, node->user_data != nullptr);
 80144d6:	683b      	ldr	r3, [r7, #0]
 80144d8:	691b      	ldr	r3, [r3, #16]
 80144da:	2b00      	cmp	r3, #0
 80144dc:	d10a      	bne.n	80144f4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x120>
 80144de:	687b      	ldr	r3, [r7, #4]
 80144e0:	695c      	ldr	r4, [r3, #20]
 80144e2:	4b4e      	ldr	r3, [pc, #312]	; (801461c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x248>)
 80144e4:	9300      	str	r3, [sp, #0]
 80144e6:	2365      	movs	r3, #101	; 0x65
 80144e8:	4a45      	ldr	r2, [pc, #276]	; (8014600 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 80144ea:	4949      	ldr	r1, [pc, #292]	; (8014610 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 80144ec:	6878      	ldr	r0, [r7, #4]
 80144ee:	47a0      	blx	r4
 80144f0:	2301      	movs	r3, #1
 80144f2:	e0da      	b.n	80146aa <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  SoftmaxParams* op_data = static_cast<SoftmaxParams*>(node->user_data);
 80144f4:	683b      	ldr	r3, [r7, #0]
 80144f6:	691b      	ldr	r3, [r3, #16]
 80144f8:	61fb      	str	r3, [r7, #28]
  if (input->type == kTfLiteInt16) {
 80144fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144fc:	781b      	ldrb	r3, [r3, #0]
 80144fe:	2b07      	cmp	r3, #7
 8014500:	d12f      	bne.n	8014562 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x18e>
    void* raw_exp_lut = context->AllocatePersistentBuffer(
 8014502:	687b      	ldr	r3, [r7, #4]
 8014504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014506:	f240 4102 	movw	r1, #1026	; 0x402
 801450a:	6878      	ldr	r0, [r7, #4]
 801450c:	4798      	blx	r3
 801450e:	61b8      	str	r0, [r7, #24]
    TF_LITE_ENSURE(context, raw_exp_lut != nullptr);
 8014510:	69bb      	ldr	r3, [r7, #24]
 8014512:	2b00      	cmp	r3, #0
 8014514:	d10a      	bne.n	801452c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x158>
 8014516:	687b      	ldr	r3, [r7, #4]
 8014518:	695c      	ldr	r4, [r3, #20]
 801451a:	4b41      	ldr	r3, [pc, #260]	; (8014620 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x24c>)
 801451c:	9300      	str	r3, [sp, #0]
 801451e:	236b      	movs	r3, #107	; 0x6b
 8014520:	4a37      	ldr	r2, [pc, #220]	; (8014600 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 8014522:	493b      	ldr	r1, [pc, #236]	; (8014610 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 8014524:	6878      	ldr	r0, [r7, #4]
 8014526:	47a0      	blx	r4
 8014528:	2301      	movs	r3, #1
 801452a:	e0be      	b.n	80146aa <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
    op_data->exp_lut = reinterpret_cast<int16_t*>(raw_exp_lut);
 801452c:	69fb      	ldr	r3, [r7, #28]
 801452e:	69ba      	ldr	r2, [r7, #24]
 8014530:	629a      	str	r2, [r3, #40]	; 0x28
    void* one_over_one_plus_x_lut = context->AllocatePersistentBuffer(
 8014532:	687b      	ldr	r3, [r7, #4]
 8014534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014536:	f240 4102 	movw	r1, #1026	; 0x402
 801453a:	6878      	ldr	r0, [r7, #4]
 801453c:	4798      	blx	r3
 801453e:	6178      	str	r0, [r7, #20]
    TF_LITE_ENSURE(context, one_over_one_plus_x_lut != nullptr);
 8014540:	697b      	ldr	r3, [r7, #20]
 8014542:	2b00      	cmp	r3, #0
 8014544:	d10a      	bne.n	801455c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x188>
 8014546:	687b      	ldr	r3, [r7, #4]
 8014548:	695c      	ldr	r4, [r3, #20]
 801454a:	4b36      	ldr	r3, [pc, #216]	; (8014624 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x250>)
 801454c:	9300      	str	r3, [sp, #0]
 801454e:	236f      	movs	r3, #111	; 0x6f
 8014550:	4a2b      	ldr	r2, [pc, #172]	; (8014600 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 8014552:	492f      	ldr	r1, [pc, #188]	; (8014610 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 8014554:	6878      	ldr	r0, [r7, #4]
 8014556:	47a0      	blx	r4
 8014558:	2301      	movs	r3, #1
 801455a:	e0a6      	b.n	80146aa <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
    op_data->one_over_one_plus_x_lut =
 801455c:	69fb      	ldr	r3, [r7, #28]
 801455e:	697a      	ldr	r2, [r7, #20]
 8014560:	62da      	str	r2, [r3, #44]	; 0x2c
  if (output->type == kTfLiteInt16) {
 8014562:	6a3b      	ldr	r3, [r7, #32]
 8014564:	781b      	ldrb	r3, [r3, #0]
 8014566:	2b07      	cmp	r3, #7
 8014568:	d112      	bne.n	8014590 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1bc>
    TF_LITE_ENSURE(context,
 801456a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801456c:	781b      	ldrb	r3, [r3, #0]
 801456e:	2b09      	cmp	r3, #9
 8014570:	d028      	beq.n	80145c4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1f0>
 8014572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014574:	781b      	ldrb	r3, [r3, #0]
 8014576:	2b07      	cmp	r3, #7
 8014578:	d024      	beq.n	80145c4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1f0>
 801457a:	687b      	ldr	r3, [r7, #4]
 801457c:	695c      	ldr	r4, [r3, #20]
 801457e:	4b2a      	ldr	r3, [pc, #168]	; (8014628 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x254>)
 8014580:	9300      	str	r3, [sp, #0]
 8014582:	2375      	movs	r3, #117	; 0x75
 8014584:	4a1e      	ldr	r2, [pc, #120]	; (8014600 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 8014586:	4922      	ldr	r1, [pc, #136]	; (8014610 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 8014588:	6878      	ldr	r0, [r7, #4]
 801458a:	47a0      	blx	r4
 801458c:	2301      	movs	r3, #1
 801458e:	e08c      	b.n	80146aa <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
    TF_LITE_ENSURE_EQ(context, input->type, output->type);
 8014590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014592:	781a      	ldrb	r2, [r3, #0]
 8014594:	6a3b      	ldr	r3, [r7, #32]
 8014596:	781b      	ldrb	r3, [r3, #0]
 8014598:	429a      	cmp	r2, r3
 801459a:	d013      	beq.n	80145c4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1f0>
 801459c:	687b      	ldr	r3, [r7, #4]
 801459e:	695c      	ldr	r4, [r3, #20]
 80145a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145a2:	781b      	ldrb	r3, [r3, #0]
 80145a4:	461a      	mov	r2, r3
 80145a6:	6a3b      	ldr	r3, [r7, #32]
 80145a8:	781b      	ldrb	r3, [r3, #0]
 80145aa:	9303      	str	r3, [sp, #12]
 80145ac:	9202      	str	r2, [sp, #8]
 80145ae:	4b1f      	ldr	r3, [pc, #124]	; (801462c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x258>)
 80145b0:	9301      	str	r3, [sp, #4]
 80145b2:	4b1f      	ldr	r3, [pc, #124]	; (8014630 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x25c>)
 80145b4:	9300      	str	r3, [sp, #0]
 80145b6:	2378      	movs	r3, #120	; 0x78
 80145b8:	4a11      	ldr	r2, [pc, #68]	; (8014600 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 80145ba:	4912      	ldr	r1, [pc, #72]	; (8014604 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 80145bc:	6878      	ldr	r0, [r7, #4]
 80145be:	47a0      	blx	r4
 80145c0:	2301      	movs	r3, #1
 80145c2:	e072      	b.n	80146aa <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  if (input->type == kTfLiteInt16) {
 80145c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145c6:	781b      	ldrb	r3, [r3, #0]
 80145c8:	2b07      	cmp	r3, #7
 80145ca:	d161      	bne.n	8014690 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2bc>
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
 80145cc:	6a3b      	ldr	r3, [r7, #32]
 80145ce:	691b      	ldr	r3, [r3, #16]
 80145d0:	2b00      	cmp	r3, #0
 80145d2:	d035      	beq.n	8014640 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x26c>
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	695c      	ldr	r4, [r3, #20]
 80145d8:	6a3b      	ldr	r3, [r7, #32]
 80145da:	691b      	ldr	r3, [r3, #16]
 80145dc:	2200      	movs	r2, #0
 80145de:	9203      	str	r2, [sp, #12]
 80145e0:	9302      	str	r3, [sp, #8]
 80145e2:	4b14      	ldr	r3, [pc, #80]	; (8014634 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x260>)
 80145e4:	9301      	str	r3, [sp, #4]
 80145e6:	4b14      	ldr	r3, [pc, #80]	; (8014638 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x264>)
 80145e8:	9300      	str	r3, [sp, #0]
 80145ea:	237d      	movs	r3, #125	; 0x7d
 80145ec:	4a04      	ldr	r2, [pc, #16]	; (8014600 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 80145ee:	4905      	ldr	r1, [pc, #20]	; (8014604 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 80145f0:	6878      	ldr	r0, [r7, #4]
 80145f2:	47a0      	blx	r4
 80145f4:	2301      	movs	r3, #1
 80145f6:	e058      	b.n	80146aa <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
 80145f8:	0802b7f8 	.word	0x0802b7f8
 80145fc:	0802b7fc 	.word	0x0802b7fc
 8014600:	0802b688 	.word	0x0802b688
 8014604:	0802b6cc 	.word	0x0802b6cc
 8014608:	0802b80c 	.word	0x0802b80c
 801460c:	0802b820 	.word	0x0802b820
 8014610:	0802b7ac 	.word	0x0802b7ac
 8014614:	0802b834 	.word	0x0802b834
 8014618:	0802b850 	.word	0x0802b850
 801461c:	0802b864 	.word	0x0802b864
 8014620:	0802b880 	.word	0x0802b880
 8014624:	0802b898 	.word	0x0802b898
 8014628:	0802b8bc 	.word	0x0802b8bc
 801462c:	0802b794 	.word	0x0802b794
 8014630:	0802b774 	.word	0x0802b774
 8014634:	0802b6e8 	.word	0x0802b6e8
 8014638:	0802b6ec 	.word	0x0802b6ec
 801463c:	00000000 	.word	0x00000000
    gen_lut([](float value) { return std::exp(value); }, -10.0f, 0.0f,
 8014640:	f107 0308 	add.w	r3, r7, #8
 8014644:	4618      	mov	r0, r3
 8014646:	f7ff fe7f 	bl	8014348 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_cvPFffEEv>
 801464a:	69fb      	ldr	r3, [r7, #28]
 801464c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801464e:	f240 2201 	movw	r2, #513	; 0x201
 8014652:	4619      	mov	r1, r3
 8014654:	ed5f 0a07 	vldr	s1, [pc, #-28]	; 801463c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x268>
 8014658:	eeba 0a04 	vmov.f32	s0, #164	; 0xc1200000 -10.0
 801465c:	f7ff faf2 	bl	8013c44 <_ZN6tflite7gen_lutEPFffEffPsi>
    gen_lut([](float value) { return 1.0f / (1.0f + value); }, 0.0f, 1.0f,
 8014660:	f107 030c 	add.w	r3, r7, #12
 8014664:	4618      	mov	r0, r3
 8014666:	f7ff fea7 	bl	80143b8 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_cvPFffEEv>
 801466a:	69fb      	ldr	r3, [r7, #28]
 801466c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801466e:	f240 2201 	movw	r2, #513	; 0x201
 8014672:	4619      	mov	r1, r3
 8014674:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8014678:	ed1f 0a10 	vldr	s0, [pc, #-64]	; 801463c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x268>
 801467c:	f7ff fae2 	bl	8013c44 <_ZN6tflite7gen_lutEPFffEffPsi>
            op_data->one_over_one_plus_x_lut, kInt16LUTArraySize);
    op_data->zero_point = output->params.zero_point;
 8014680:	6a3b      	ldr	r3, [r7, #32]
 8014682:	691a      	ldr	r2, [r3, #16]
 8014684:	69fb      	ldr	r3, [r7, #28]
 8014686:	61da      	str	r2, [r3, #28]
    op_data->scale = output->params.scale;
 8014688:	6a3b      	ldr	r3, [r7, #32]
 801468a:	68da      	ldr	r2, [r3, #12]
 801468c:	69fb      	ldr	r3, [r7, #28]
 801468e:	621a      	str	r2, [r3, #32]
  }

  auto* params = static_cast<TfLiteSoftmaxParams*>(node->builtin_data);
 8014690:	683b      	ldr	r3, [r7, #0]
 8014692:	695b      	ldr	r3, [r3, #20]
 8014694:	613b      	str	r3, [r7, #16]
  return CalculateSoftmaxParams(context, input, output, params, op_data);
 8014696:	69fb      	ldr	r3, [r7, #28]
 8014698:	9300      	str	r3, [sp, #0]
 801469a:	693b      	ldr	r3, [r7, #16]
 801469c:	6a3a      	ldr	r2, [r7, #32]
 801469e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80146a0:	6878      	ldr	r0, [r7, #4]
 80146a2:	f7ff fbfd 	bl	8013ea0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>
 80146a6:	4603      	mov	r3, r0
 80146a8:	bf00      	nop
}
 80146aa:	4618      	mov	r0, r3
 80146ac:	372c      	adds	r7, #44	; 0x2c
 80146ae:	46bd      	mov	sp, r7
 80146b0:	bd90      	pop	{r4, r7, pc}
 80146b2:	bf00      	nop

080146b4 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>:
    int32_t x, int32_t quantized_multiplier, int left_shift) {
 80146b4:	b580      	push	{r7, lr}
 80146b6:	b084      	sub	sp, #16
 80146b8:	af00      	add	r7, sp, #0
 80146ba:	60f8      	str	r0, [r7, #12]
 80146bc:	60b9      	str	r1, [r7, #8]
 80146be:	607a      	str	r2, [r7, #4]
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
 80146c0:	68fa      	ldr	r2, [r7, #12]
 80146c2:	687b      	ldr	r3, [r7, #4]
 80146c4:	fa02 f303 	lsl.w	r3, r2, r3
 80146c8:	68b9      	ldr	r1, [r7, #8]
 80146ca:	4618      	mov	r0, r3
 80146cc:	f7fc fa98 	bl	8010c00 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 80146d0:	4603      	mov	r3, r0
}
 80146d2:	4618      	mov	r0, r3
 80146d4:	3710      	adds	r7, #16
 80146d6:	46bd      	mov	sp, r7
 80146d8:	bd80      	pop	{r7, pc}

080146da <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_>:
inline void Conv(const ConvParams& params, const RuntimeShape& input_shape,
                 const float* input_data, const RuntimeShape& filter_shape,
                 const float* filter_data, const RuntimeShape& bias_shape,
                 const float* bias_data, const RuntimeShape& output_shape,
                 float* output_data, const RuntimeShape& im2col_shape,
                 float* im2col_data) {
 80146da:	b590      	push	{r4, r7, lr}
 80146dc:	ed2d 8b02 	vpush	{d8}
 80146e0:	b0a9      	sub	sp, #164	; 0xa4
 80146e2:	af02      	add	r7, sp, #8
 80146e4:	60f8      	str	r0, [r7, #12]
 80146e6:	60b9      	str	r1, [r7, #8]
 80146e8:	607a      	str	r2, [r7, #4]
 80146ea:	603b      	str	r3, [r7, #0]
  const int stride_width = params.stride_width;
 80146ec:	68fb      	ldr	r3, [r7, #12]
 80146ee:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80146f2:	673b      	str	r3, [r7, #112]	; 0x70
  const int stride_height = params.stride_height;
 80146f4:	68fb      	ldr	r3, [r7, #12]
 80146f6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80146fa:	66fb      	str	r3, [r7, #108]	; 0x6c
  const int dilation_width_factor = params.dilation_width_factor;
 80146fc:	68fb      	ldr	r3, [r7, #12]
 80146fe:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8014702:	66bb      	str	r3, [r7, #104]	; 0x68
  const int dilation_height_factor = params.dilation_height_factor;
 8014704:	68fb      	ldr	r3, [r7, #12]
 8014706:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801470a:	667b      	str	r3, [r7, #100]	; 0x64
  const int pad_width = params.padding_values.width;
 801470c:	68fb      	ldr	r3, [r7, #12]
 801470e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8014712:	663b      	str	r3, [r7, #96]	; 0x60
  const int pad_height = params.padding_values.height;
 8014714:	68fb      	ldr	r3, [r7, #12]
 8014716:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801471a:	65fb      	str	r3, [r7, #92]	; 0x5c
  const float output_activation_min = params.float_activation_min;
 801471c:	68fb      	ldr	r3, [r7, #12]
 801471e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014720:	65bb      	str	r3, [r7, #88]	; 0x58
  const float output_activation_max = params.float_activation_max;
 8014722:	68fb      	ldr	r3, [r7, #12]
 8014724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014726:	657b      	str	r3, [r7, #84]	; 0x54
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 8014728:	68b8      	ldr	r0, [r7, #8]
 801472a:	f7f7 fbbc 	bl	800bea6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801472e:	4603      	mov	r3, r0
 8014730:	2b04      	cmp	r3, #4
 8014732:	d001      	beq.n	8014738 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x5e>
 8014734:	f011 f987 	bl	8025a46 <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 8014738:	6838      	ldr	r0, [r7, #0]
 801473a:	f7f7 fbb4 	bl	800bea6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801473e:	4603      	mov	r3, r0
 8014740:	2b04      	cmp	r3, #4
 8014742:	d001      	beq.n	8014748 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x6e>
 8014744:	f011 f97f 	bl	8025a46 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 8014748:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 801474c:	f7f7 fbab 	bl	800bea6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8014750:	4603      	mov	r3, r0
 8014752:	2b04      	cmp	r3, #4
 8014754:	d001      	beq.n	801475a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x80>
 8014756:	f011 f976 	bl	8025a46 <abort>

  (void)im2col_data;   // only used in optimized code.
  (void)im2col_shape;  // only used in optimized code.
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 801475a:	2300      	movs	r3, #0
 801475c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8014760:	2100      	movs	r1, #0
 8014762:	68b8      	ldr	r0, [r7, #8]
 8014764:	f7fd fb82 	bl	8011e6c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8014768:	6538      	str	r0, [r7, #80]	; 0x50
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
 801476a:	2303      	movs	r3, #3
 801476c:	683a      	ldr	r2, [r7, #0]
 801476e:	2103      	movs	r1, #3
 8014770:	68b8      	ldr	r0, [r7, #8]
 8014772:	f7fd fb7b 	bl	8011e6c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8014776:	64f8      	str	r0, [r7, #76]	; 0x4c
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
 8014778:	2303      	movs	r3, #3
 801477a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 801477e:	2100      	movs	r1, #0
 8014780:	6838      	ldr	r0, [r7, #0]
 8014782:	f7fd fb73 	bl	8011e6c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8014786:	64b8      	str	r0, [r7, #72]	; 0x48
  if (bias_data) {
 8014788:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801478c:	2b00      	cmp	r3, #0
 801478e:	d009      	beq.n	80147a4 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0xca>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 8014790:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8014794:	f7fc fadc 	bl	8010d50 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 8014798:	4602      	mov	r2, r0
 801479a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801479c:	4293      	cmp	r3, r2
 801479e:	d001      	beq.n	80147a4 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0xca>
 80147a0:	f011 f951 	bl	8025a46 <abort>
  }
  const int input_height = input_shape.Dims(1);
 80147a4:	2101      	movs	r1, #1
 80147a6:	68b8      	ldr	r0, [r7, #8]
 80147a8:	f7fc fa9a 	bl	8010ce0 <_ZNK6tflite12RuntimeShape4DimsEi>
 80147ac:	6478      	str	r0, [r7, #68]	; 0x44
  const int input_width = input_shape.Dims(2);
 80147ae:	2102      	movs	r1, #2
 80147b0:	68b8      	ldr	r0, [r7, #8]
 80147b2:	f7fc fa95 	bl	8010ce0 <_ZNK6tflite12RuntimeShape4DimsEi>
 80147b6:	6438      	str	r0, [r7, #64]	; 0x40
  const int filter_height = filter_shape.Dims(1);
 80147b8:	2101      	movs	r1, #1
 80147ba:	6838      	ldr	r0, [r7, #0]
 80147bc:	f7fc fa90 	bl	8010ce0 <_ZNK6tflite12RuntimeShape4DimsEi>
 80147c0:	63f8      	str	r0, [r7, #60]	; 0x3c
  const int filter_width = filter_shape.Dims(2);
 80147c2:	2102      	movs	r1, #2
 80147c4:	6838      	ldr	r0, [r7, #0]
 80147c6:	f7fc fa8b 	bl	8010ce0 <_ZNK6tflite12RuntimeShape4DimsEi>
 80147ca:	63b8      	str	r0, [r7, #56]	; 0x38
  const int output_height = output_shape.Dims(1);
 80147cc:	2101      	movs	r1, #1
 80147ce:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 80147d2:	f7fc fa85 	bl	8010ce0 <_ZNK6tflite12RuntimeShape4DimsEi>
 80147d6:	6378      	str	r0, [r7, #52]	; 0x34
  const int output_width = output_shape.Dims(2);
 80147d8:	2102      	movs	r1, #2
 80147da:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 80147de:	f7fc fa7f 	bl	8010ce0 <_ZNK6tflite12RuntimeShape4DimsEi>
 80147e2:	6338      	str	r0, [r7, #48]	; 0x30
  for (int batch = 0; batch < batches; ++batch) {
 80147e4:	2300      	movs	r3, #0
 80147e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80147ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80147ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80147f0:	429a      	cmp	r2, r3
 80147f2:	f280 80f0 	bge.w	80149d6 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2fc>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 80147f6:	2300      	movs	r3, #0
 80147f8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80147fc:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8014800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014802:	429a      	cmp	r2, r3
 8014804:	f280 80e1 	bge.w	80149ca <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2f0>
      const int in_y_origin = (out_y * stride_height) - pad_height;
 8014808:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801480c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801480e:	fb02 f203 	mul.w	r2, r2, r3
 8014812:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014814:	1ad3      	subs	r3, r2, r3
 8014816:	62fb      	str	r3, [r7, #44]	; 0x2c
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8014818:	2300      	movs	r3, #0
 801481a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801481e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8014822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014824:	429a      	cmp	r2, r3
 8014826:	f280 80ca 	bge.w	80149be <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2e4>
        const int in_x_origin = (out_x * stride_width) - pad_width;
 801482a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801482e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8014830:	fb02 f203 	mul.w	r2, r2, r3
 8014834:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014836:	1ad3      	subs	r3, r2, r3
 8014838:	62bb      	str	r3, [r7, #40]	; 0x28
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 801483a:	2300      	movs	r3, #0
 801483c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8014840:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8014844:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014846:	429a      	cmp	r2, r3
 8014848:	f280 80b3 	bge.w	80149b2 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2d8>
          float total = 0.f;
 801484c:	f04f 0300 	mov.w	r3, #0
 8014850:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 8014854:	2300      	movs	r3, #0
 8014856:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801485a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801485e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014860:	429a      	cmp	r2, r3
 8014862:	da6d      	bge.n	8014940 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x266>
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
 8014864:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014866:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801486a:	fb02 f303 	mul.w	r3, r2, r3
 801486e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014870:	4413      	add	r3, r2
 8014872:	627b      	str	r3, [r7, #36]	; 0x24
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 8014874:	2300      	movs	r3, #0
 8014876:	67fb      	str	r3, [r7, #124]	; 0x7c
 8014878:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801487a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801487c:	429a      	cmp	r2, r3
 801487e:	da59      	bge.n	8014934 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x25a>
              const int in_x = in_x_origin + dilation_width_factor * filter_x;
 8014880:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014882:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8014884:	fb02 f303 	mul.w	r3, r2, r3
 8014888:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801488a:	4413      	add	r3, r2
 801488c:	623b      	str	r3, [r7, #32]

              // Zero padding by omitting the areas outside the image.
              const bool is_point_inside_image =
                  (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
 801488e:	6a3b      	ldr	r3, [r7, #32]
 8014890:	2b00      	cmp	r3, #0
 8014892:	db0c      	blt.n	80148ae <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1d4>
 8014894:	6a3a      	ldr	r2, [r7, #32]
 8014896:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014898:	429a      	cmp	r2, r3
 801489a:	da08      	bge.n	80148ae <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1d4>
 801489c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801489e:	2b00      	cmp	r3, #0
 80148a0:	db05      	blt.n	80148ae <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1d4>
 80148a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80148a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80148a6:	429a      	cmp	r2, r3
 80148a8:	da01      	bge.n	80148ae <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1d4>
 80148aa:	2301      	movs	r3, #1
 80148ac:	e000      	b.n	80148b0 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1d6>
 80148ae:	2300      	movs	r3, #0
              const bool is_point_inside_image =
 80148b0:	77fb      	strb	r3, [r7, #31]
                  (in_y < input_height);

              if (!is_point_inside_image) {
 80148b2:	7ffb      	ldrb	r3, [r7, #31]
 80148b4:	f083 0301 	eor.w	r3, r3, #1
 80148b8:	b2db      	uxtb	r3, r3
 80148ba:	2b00      	cmp	r3, #0
 80148bc:	d135      	bne.n	801492a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x250>
                continue;
              }

              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 80148be:	2300      	movs	r3, #0
 80148c0:	67bb      	str	r3, [r7, #120]	; 0x78
 80148c2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80148c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80148c6:	429a      	cmp	r2, r3
 80148c8:	da30      	bge.n	801492c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x252>
                float input_value = input_data[Offset(input_shape, batch, in_y,
 80148ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80148cc:	9300      	str	r3, [sp, #0]
 80148ce:	6a3b      	ldr	r3, [r7, #32]
 80148d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80148d2:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 80148d6:	68b8      	ldr	r0, [r7, #8]
 80148d8:	f7fd fa70 	bl	8011dbc <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 80148dc:	4603      	mov	r3, r0
                                                      in_x, in_channel)];
 80148de:	009b      	lsls	r3, r3, #2
 80148e0:	687a      	ldr	r2, [r7, #4]
 80148e2:	4413      	add	r3, r2
 80148e4:	681b      	ldr	r3, [r3, #0]
 80148e6:	61bb      	str	r3, [r7, #24]
                float filter_value = filter_data[Offset(
 80148e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80148ea:	9300      	str	r3, [sp, #0]
 80148ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80148ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80148f2:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80148f6:	6838      	ldr	r0, [r7, #0]
 80148f8:	f7fd fa60 	bl	8011dbc <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 80148fc:	4603      	mov	r3, r0
                    filter_shape, out_channel, filter_y, filter_x, in_channel)];
 80148fe:	009b      	lsls	r3, r3, #2
 8014900:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8014904:	4413      	add	r3, r2
 8014906:	681b      	ldr	r3, [r3, #0]
 8014908:	617b      	str	r3, [r7, #20]
                total += (input_value * filter_value);
 801490a:	ed97 7a06 	vldr	s14, [r7, #24]
 801490e:	edd7 7a05 	vldr	s15, [r7, #20]
 8014912:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014916:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 801491a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801491e:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 8014922:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014924:	3301      	adds	r3, #1
 8014926:	67bb      	str	r3, [r7, #120]	; 0x78
 8014928:	e7cb      	b.n	80148c2 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1e8>
                continue;
 801492a:	bf00      	nop
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 801492c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801492e:	3301      	adds	r3, #1
 8014930:	67fb      	str	r3, [r7, #124]	; 0x7c
 8014932:	e7a1      	b.n	8014878 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x19e>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 8014934:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8014938:	3301      	adds	r3, #1
 801493a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801493e:	e78c      	b.n	801485a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x180>
              }
            }
          }
          float bias_value = 0.0f;
 8014940:	f04f 0300 	mov.w	r3, #0
 8014944:	677b      	str	r3, [r7, #116]	; 0x74
          if (bias_data) {
 8014946:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801494a:	2b00      	cmp	r3, #0
 801494c:	d007      	beq.n	801495e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x284>
            bias_value = bias_data[out_channel];
 801494e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014952:	009b      	lsls	r3, r3, #2
 8014954:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8014958:	4413      	add	r3, r2
 801495a:	681b      	ldr	r3, [r3, #0]
 801495c:	677b      	str	r3, [r7, #116]	; 0x74
          }
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
              ActivationFunctionWithMinMax(total + bias_value,
 801495e:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8014962:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8014966:	ee37 8a27 	vadd.f32	s16, s14, s15
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
 801496a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801496e:	9300      	str	r3, [sp, #0]
 8014970:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014974:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8014978:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 801497c:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8014980:	f7fd fa1c 	bl	8011dbc <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8014984:	4603      	mov	r3, r0
 8014986:	009b      	lsls	r3, r3, #2
 8014988:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 801498c:	18d4      	adds	r4, r2, r3
              ActivationFunctionWithMinMax(total + bias_value,
 801498e:	ed97 1a15 	vldr	s2, [r7, #84]	; 0x54
 8014992:	edd7 0a16 	vldr	s1, [r7, #88]	; 0x58
 8014996:	eeb0 0a48 	vmov.f32	s0, s16
 801499a:	f7fd ff58 	bl	801284e <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>
 801499e:	eef0 7a40 	vmov.f32	s15, s0
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
 80149a2:	edc4 7a00 	vstr	s15, [r4]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 80149a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80149aa:	3301      	adds	r3, #1
 80149ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80149b0:	e746      	b.n	8014840 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x166>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 80149b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80149b6:	3301      	adds	r3, #1
 80149b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80149bc:	e72f      	b.n	801481e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x144>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 80149be:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80149c2:	3301      	adds	r3, #1
 80149c4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80149c8:	e718      	b.n	80147fc <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x122>
  for (int batch = 0; batch < batches; ++batch) {
 80149ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80149ce:	3301      	adds	r3, #1
 80149d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80149d4:	e709      	b.n	80147ea <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x110>
                                           output_activation_max);
        }
      }
    }
  }
}
 80149d6:	bf00      	nop
 80149d8:	379c      	adds	r7, #156	; 0x9c
 80149da:	46bd      	mov	sp, r7
 80149dc:	ecbd 8b02 	vpop	{d8}
 80149e0:	bd90      	pop	{r4, r7, pc}

080149e2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>:
    const ConvParams& params, const int32_t* output_multiplier,
    const int32_t* output_shift, const RuntimeShape& input_shape,
    const int8_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const int32_t* bias_data, const RuntimeShape& output_shape,
    int8_t* output_data) {
 80149e2:	b590      	push	{r4, r7, lr}
 80149e4:	b0a9      	sub	sp, #164	; 0xa4
 80149e6:	af02      	add	r7, sp, #8
 80149e8:	60f8      	str	r0, [r7, #12]
 80149ea:	60b9      	str	r1, [r7, #8]
 80149ec:	607a      	str	r2, [r7, #4]
 80149ee:	603b      	str	r3, [r7, #0]
  // Get parameters.
  const int32_t input_offset = params.input_offset;  // r = s(q - Z)
 80149f0:	68fb      	ldr	r3, [r7, #12]
 80149f2:	695b      	ldr	r3, [r3, #20]
 80149f4:	67bb      	str	r3, [r7, #120]	; 0x78
  const int stride_width = params.stride_width;
 80149f6:	68fb      	ldr	r3, [r7, #12]
 80149f8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80149fc:	677b      	str	r3, [r7, #116]	; 0x74
  const int stride_height = params.stride_height;
 80149fe:	68fb      	ldr	r3, [r7, #12]
 8014a00:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8014a04:	673b      	str	r3, [r7, #112]	; 0x70
  const int dilation_width_factor = params.dilation_width_factor;
 8014a06:	68fb      	ldr	r3, [r7, #12]
 8014a08:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8014a0c:	66fb      	str	r3, [r7, #108]	; 0x6c
  const int dilation_height_factor = params.dilation_height_factor;
 8014a0e:	68fb      	ldr	r3, [r7, #12]
 8014a10:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8014a14:	66bb      	str	r3, [r7, #104]	; 0x68
  const int pad_width = params.padding_values.width;
 8014a16:	68fb      	ldr	r3, [r7, #12]
 8014a18:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8014a1c:	667b      	str	r3, [r7, #100]	; 0x64
  const int pad_height = params.padding_values.height;
 8014a1e:	68fb      	ldr	r3, [r7, #12]
 8014a20:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014a24:	663b      	str	r3, [r7, #96]	; 0x60
  const int32_t output_offset = params.output_offset;
 8014a26:	68fb      	ldr	r3, [r7, #12]
 8014a28:	69db      	ldr	r3, [r3, #28]
 8014a2a:	65fb      	str	r3, [r7, #92]	; 0x5c

  // Set min and max value of the output.
  const int32_t output_activation_min = params.quantized_activation_min;
 8014a2c:	68fb      	ldr	r3, [r7, #12]
 8014a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014a30:	61bb      	str	r3, [r7, #24]
  const int32_t output_activation_max = params.quantized_activation_max;
 8014a32:	68fb      	ldr	r3, [r7, #12]
 8014a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a36:	617b      	str	r3, [r7, #20]

  // Consistency check.
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 8014a38:	69ba      	ldr	r2, [r7, #24]
 8014a3a:	697b      	ldr	r3, [r7, #20]
 8014a3c:	429a      	cmp	r2, r3
 8014a3e:	dd01      	ble.n	8014a44 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x62>
 8014a40:	f011 f801 	bl	8025a46 <abort>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 8014a44:	6838      	ldr	r0, [r7, #0]
 8014a46:	f7f7 fa2e 	bl	800bea6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8014a4a:	4603      	mov	r3, r0
 8014a4c:	2b04      	cmp	r3, #4
 8014a4e:	d001      	beq.n	8014a54 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x72>
 8014a50:	f010 fff9 	bl	8025a46 <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 8014a54:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8014a58:	f7f7 fa25 	bl	800bea6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8014a5c:	4603      	mov	r3, r0
 8014a5e:	2b04      	cmp	r3, #4
 8014a60:	d001      	beq.n	8014a66 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x84>
 8014a62:	f010 fff0 	bl	8025a46 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 8014a66:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8014a6a:	f7f7 fa1c 	bl	800bea6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8014a6e:	4603      	mov	r3, r0
 8014a70:	2b04      	cmp	r3, #4
 8014a72:	d001      	beq.n	8014a78 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x96>
 8014a74:	f010 ffe7 	bl	8025a46 <abort>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 8014a78:	2300      	movs	r3, #0
 8014a7a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8014a7e:	2100      	movs	r1, #0
 8014a80:	6838      	ldr	r0, [r7, #0]
 8014a82:	f7fd f9f3 	bl	8011e6c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8014a86:	65b8      	str	r0, [r7, #88]	; 0x58
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
 8014a88:	2303      	movs	r3, #3
 8014a8a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8014a8e:	2103      	movs	r1, #3
 8014a90:	6838      	ldr	r0, [r7, #0]
 8014a92:	f7fd f9eb 	bl	8011e6c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8014a96:	6578      	str	r0, [r7, #84]	; 0x54
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
 8014a98:	2303      	movs	r3, #3
 8014a9a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8014a9e:	2100      	movs	r1, #0
 8014aa0:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8014aa4:	f7fd f9e2 	bl	8011e6c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8014aa8:	6538      	str	r0, [r7, #80]	; 0x50
  if (bias_data) {
 8014aaa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014aae:	2b00      	cmp	r3, #0
 8014ab0:	d009      	beq.n	8014ac6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xe4>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 8014ab2:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8014ab6:	f7fc f94b 	bl	8010d50 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 8014aba:	4602      	mov	r2, r0
 8014abc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014abe:	4293      	cmp	r3, r2
 8014ac0:	d001      	beq.n	8014ac6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xe4>
 8014ac2:	f010 ffc0 	bl	8025a46 <abort>
  }

  // Check dimensions of the tensors.
  const int input_height = input_shape.Dims(1);
 8014ac6:	2101      	movs	r1, #1
 8014ac8:	6838      	ldr	r0, [r7, #0]
 8014aca:	f7fc f909 	bl	8010ce0 <_ZNK6tflite12RuntimeShape4DimsEi>
 8014ace:	64f8      	str	r0, [r7, #76]	; 0x4c
  const int input_width = input_shape.Dims(2);
 8014ad0:	2102      	movs	r1, #2
 8014ad2:	6838      	ldr	r0, [r7, #0]
 8014ad4:	f7fc f904 	bl	8010ce0 <_ZNK6tflite12RuntimeShape4DimsEi>
 8014ad8:	64b8      	str	r0, [r7, #72]	; 0x48
  const int filter_height = filter_shape.Dims(1);
 8014ada:	2101      	movs	r1, #1
 8014adc:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8014ae0:	f7fc f8fe 	bl	8010ce0 <_ZNK6tflite12RuntimeShape4DimsEi>
 8014ae4:	6478      	str	r0, [r7, #68]	; 0x44
  const int filter_width = filter_shape.Dims(2);
 8014ae6:	2102      	movs	r1, #2
 8014ae8:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8014aec:	f7fc f8f8 	bl	8010ce0 <_ZNK6tflite12RuntimeShape4DimsEi>
 8014af0:	6438      	str	r0, [r7, #64]	; 0x40
  const int output_height = output_shape.Dims(1);
 8014af2:	2101      	movs	r1, #1
 8014af4:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8014af8:	f7fc f8f2 	bl	8010ce0 <_ZNK6tflite12RuntimeShape4DimsEi>
 8014afc:	63f8      	str	r0, [r7, #60]	; 0x3c
  const int output_width = output_shape.Dims(2);
 8014afe:	2102      	movs	r1, #2
 8014b00:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8014b04:	f7fc f8ec 	bl	8010ce0 <_ZNK6tflite12RuntimeShape4DimsEi>
 8014b08:	63b8      	str	r0, [r7, #56]	; 0x38
  for (int batch = 0; batch < batches; ++batch) {
 8014b0a:	2300      	movs	r3, #0
 8014b0c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8014b10:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8014b14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014b16:	429a      	cmp	r2, r3
 8014b18:	f280 8113 	bge.w	8014d42 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x360>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8014b1c:	2300      	movs	r3, #0
 8014b1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8014b22:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8014b26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014b28:	429a      	cmp	r2, r3
 8014b2a:	f280 8104 	bge.w	8014d36 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x354>
      const int in_y_origin = (out_y * stride_height) - pad_height;
 8014b2e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014b32:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8014b34:	fb02 f203 	mul.w	r2, r2, r3
 8014b38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014b3a:	1ad3      	subs	r3, r2, r3
 8014b3c:	637b      	str	r3, [r7, #52]	; 0x34
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8014b3e:	2300      	movs	r3, #0
 8014b40:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8014b44:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8014b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b4a:	429a      	cmp	r2, r3
 8014b4c:	f280 80ed 	bge.w	8014d2a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x348>
        const int in_x_origin = (out_x * stride_width) - pad_width;
 8014b50:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014b54:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8014b56:	fb02 f203 	mul.w	r2, r2, r3
 8014b5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014b5c:	1ad3      	subs	r3, r2, r3
 8014b5e:	633b      	str	r3, [r7, #48]	; 0x30
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 8014b60:	2300      	movs	r3, #0
 8014b62:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8014b66:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8014b6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014b6c:	429a      	cmp	r2, r3
 8014b6e:	f280 80d6 	bge.w	8014d1e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x33c>
          int32_t acc = 0;
 8014b72:	2300      	movs	r3, #0
 8014b74:	613b      	str	r3, [r7, #16]
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 8014b76:	2300      	movs	r3, #0
 8014b78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8014b7c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8014b80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014b82:	429a      	cmp	r2, r3
 8014b84:	da76      	bge.n	8014c74 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x292>
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
 8014b86:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014b88:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8014b8c:	fb02 f303 	mul.w	r3, r2, r3
 8014b90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014b92:	4413      	add	r3, r2
 8014b94:	62fb      	str	r3, [r7, #44]	; 0x2c
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 8014b96:	2300      	movs	r3, #0
 8014b98:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8014b9c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8014ba0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014ba2:	429a      	cmp	r2, r3
 8014ba4:	da60      	bge.n	8014c68 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x286>
              const int in_x = in_x_origin + dilation_width_factor * filter_x;
 8014ba6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014ba8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8014bac:	fb02 f303 	mul.w	r3, r2, r3
 8014bb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014bb2:	4413      	add	r3, r2
 8014bb4:	62bb      	str	r3, [r7, #40]	; 0x28

              // Zero padding by omitting the areas outside the image.
              const bool is_point_inside_image =
                  (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
 8014bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bb8:	2b00      	cmp	r3, #0
 8014bba:	db0c      	blt.n	8014bd6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1f4>
 8014bbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014bbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014bc0:	429a      	cmp	r2, r3
 8014bc2:	da08      	bge.n	8014bd6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1f4>
 8014bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014bc6:	2b00      	cmp	r3, #0
 8014bc8:	db05      	blt.n	8014bd6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1f4>
 8014bca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014bcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014bce:	429a      	cmp	r2, r3
 8014bd0:	da01      	bge.n	8014bd6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1f4>
 8014bd2:	2301      	movs	r3, #1
 8014bd4:	e000      	b.n	8014bd8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1f6>
 8014bd6:	2300      	movs	r3, #0
              const bool is_point_inside_image =
 8014bd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                  (in_y < input_height);

              if (!is_point_inside_image) {
 8014bdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014be0:	f083 0301 	eor.w	r3, r3, #1
 8014be4:	b2db      	uxtb	r3, r3
 8014be6:	2b00      	cmp	r3, #0
 8014be8:	d137      	bne.n	8014c5a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x278>
                continue;
              }

              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 8014bea:	2300      	movs	r3, #0
 8014bec:	67fb      	str	r3, [r7, #124]	; 0x7c
 8014bee:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8014bf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014bf2:	429a      	cmp	r2, r3
 8014bf4:	da32      	bge.n	8014c5c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x27a>
                int32_t input_val = input_data[Offset(input_shape, batch, in_y,
 8014bf6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014bf8:	9300      	str	r3, [sp, #0]
 8014bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014bfe:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8014c02:	6838      	ldr	r0, [r7, #0]
 8014c04:	f7fd f8da 	bl	8011dbc <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8014c08:	4603      	mov	r3, r0
 8014c0a:	461a      	mov	r2, r3
                                                      in_x, in_channel)];
 8014c0c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014c10:	4413      	add	r3, r2
 8014c12:	f993 3000 	ldrsb.w	r3, [r3]
 8014c16:	623b      	str	r3, [r7, #32]
                int32_t filter_val = filter_data[Offset(
 8014c18:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014c1a:	9300      	str	r3, [sp, #0]
 8014c1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8014c20:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8014c24:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8014c28:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8014c2c:	f7fd f8c6 	bl	8011dbc <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8014c30:	4603      	mov	r3, r0
 8014c32:	461a      	mov	r2, r3
                    filter_shape, out_channel, filter_y, filter_x, in_channel)];
 8014c34:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8014c38:	4413      	add	r3, r2
 8014c3a:	f993 3000 	ldrsb.w	r3, [r3]
 8014c3e:	61fb      	str	r3, [r7, #28]
                // long as the filter size (filter_y * filter_x * in_channel)
                // does not exceed 2^16, which is the case in all the models
                // we have seen so far.
                // TODO(b/174275578): Add a check to make sure the
                // accumulator depth is smaller than 2^16.
                acc += filter_val * (input_val + input_offset);
 8014c40:	6a3a      	ldr	r2, [r7, #32]
 8014c42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014c44:	4413      	add	r3, r2
 8014c46:	69fa      	ldr	r2, [r7, #28]
 8014c48:	fb02 f203 	mul.w	r2, r2, r3
 8014c4c:	693b      	ldr	r3, [r7, #16]
 8014c4e:	4413      	add	r3, r2
 8014c50:	613b      	str	r3, [r7, #16]
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 8014c52:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014c54:	3301      	adds	r3, #1
 8014c56:	67fb      	str	r3, [r7, #124]	; 0x7c
 8014c58:	e7c9      	b.n	8014bee <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x20c>
                continue;
 8014c5a:	bf00      	nop
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 8014c5c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8014c60:	3301      	adds	r3, #1
 8014c62:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8014c66:	e799      	b.n	8014b9c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1ba>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 8014c68:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014c6c:	3301      	adds	r3, #1
 8014c6e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8014c72:	e783      	b.n	8014b7c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x19a>
              }
            }
          }

          if (bias_data) {
 8014c74:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014c78:	2b00      	cmp	r3, #0
 8014c7a:	d009      	beq.n	8014c90 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2ae>
            acc += bias_data[out_channel];
 8014c7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014c80:	009b      	lsls	r3, r3, #2
 8014c82:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8014c86:	4413      	add	r3, r2
 8014c88:	681a      	ldr	r2, [r3, #0]
 8014c8a:	693b      	ldr	r3, [r7, #16]
 8014c8c:	4413      	add	r3, r2
 8014c8e:	613b      	str	r3, [r7, #16]
          }
          acc = MultiplyByQuantizedMultiplier(
 8014c90:	6938      	ldr	r0, [r7, #16]
              acc, output_multiplier[out_channel], output_shift[out_channel]);
 8014c92:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014c96:	009b      	lsls	r3, r3, #2
 8014c98:	68ba      	ldr	r2, [r7, #8]
 8014c9a:	4413      	add	r3, r2
          acc = MultiplyByQuantizedMultiplier(
 8014c9c:	6819      	ldr	r1, [r3, #0]
              acc, output_multiplier[out_channel], output_shift[out_channel]);
 8014c9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014ca2:	009b      	lsls	r3, r3, #2
 8014ca4:	687a      	ldr	r2, [r7, #4]
 8014ca6:	4413      	add	r3, r2
          acc = MultiplyByQuantizedMultiplier(
 8014ca8:	681b      	ldr	r3, [r3, #0]
 8014caa:	461a      	mov	r2, r3
 8014cac:	f7fc f8a8 	bl	8010e00 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 8014cb0:	4603      	mov	r3, r0
 8014cb2:	613b      	str	r3, [r7, #16]
          acc += output_offset;
 8014cb4:	693a      	ldr	r2, [r7, #16]
 8014cb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014cb8:	4413      	add	r3, r2
 8014cba:	613b      	str	r3, [r7, #16]
          acc = std::max(acc, output_activation_min);
 8014cbc:	f107 0218 	add.w	r2, r7, #24
 8014cc0:	f107 0310 	add.w	r3, r7, #16
 8014cc4:	4611      	mov	r1, r2
 8014cc6:	4618      	mov	r0, r3
 8014cc8:	f7f6 ff70 	bl	800bbac <_ZSt3maxIlERKT_S2_S2_>
 8014ccc:	4603      	mov	r3, r0
 8014cce:	681b      	ldr	r3, [r3, #0]
 8014cd0:	613b      	str	r3, [r7, #16]
          acc = std::min(acc, output_activation_max);
 8014cd2:	f107 0214 	add.w	r2, r7, #20
 8014cd6:	f107 0310 	add.w	r3, r7, #16
 8014cda:	4611      	mov	r1, r2
 8014cdc:	4618      	mov	r0, r3
 8014cde:	f7f6 ff51 	bl	800bb84 <_ZSt3minIlERKT_S2_S2_>
 8014ce2:	4603      	mov	r3, r0
 8014ce4:	681b      	ldr	r3, [r3, #0]
 8014ce6:	613b      	str	r3, [r7, #16]
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
 8014ce8:	693c      	ldr	r4, [r7, #16]
 8014cea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014cee:	9300      	str	r3, [sp, #0]
 8014cf0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014cf4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8014cf8:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8014cfc:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8014d00:	f7fd f85c 	bl	8011dbc <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8014d04:	4603      	mov	r3, r0
 8014d06:	461a      	mov	r2, r3
 8014d08:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8014d0c:	4413      	add	r3, r2
 8014d0e:	b262      	sxtb	r2, r4
 8014d10:	701a      	strb	r2, [r3, #0]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 8014d12:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014d16:	3301      	adds	r3, #1
 8014d18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8014d1c:	e723      	b.n	8014b66 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x184>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8014d1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014d22:	3301      	adds	r3, #1
 8014d24:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8014d28:	e70c      	b.n	8014b44 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x162>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8014d2a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014d2e:	3301      	adds	r3, #1
 8014d30:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8014d34:	e6f5      	b.n	8014b22 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x140>
  for (int batch = 0; batch < batches; ++batch) {
 8014d36:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8014d3a:	3301      	adds	r3, #1
 8014d3c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8014d40:	e6e6      	b.n	8014b10 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x12e>
              static_cast<int8_t>(acc);
        }
      }
    }
  }
}
 8014d42:	bf00      	nop
 8014d44:	379c      	adds	r7, #156	; 0x9c
 8014d46:	46bd      	mov	sp, r7
 8014d48:	bd90      	pop	{r4, r7, pc}

08014d4a <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:

  // Index to buffer for optimizations if applicable.
  int buffer_idx;
};

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 8014d4a:	b580      	push	{r7, lr}
 8014d4c:	b084      	sub	sp, #16
 8014d4e:	af00      	add	r7, sp, #0
 8014d50:	60f8      	str	r0, [r7, #12]
 8014d52:	60b9      	str	r1, [r7, #8]
 8014d54:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 8014d56:	68fb      	ldr	r3, [r7, #12]
 8014d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014d5a:	2b00      	cmp	r3, #0
 8014d5c:	d101      	bne.n	8014d62 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0x18>
 8014d5e:	f010 fe72 	bl	8025a46 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 8014d62:	68fb      	ldr	r3, [r7, #12]
 8014d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014d66:	2138      	movs	r1, #56	; 0x38
 8014d68:	68f8      	ldr	r0, [r7, #12]
 8014d6a:	4798      	blx	r3
 8014d6c:	4603      	mov	r3, r0
}
 8014d6e:	4618      	mov	r0, r3
 8014d70:	3710      	adds	r7, #16
 8014d72:	46bd      	mov	sp, r7
 8014d74:	bd80      	pop	{r7, pc}
	...

08014d78 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 8014d78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014d7a:	b0b7      	sub	sp, #220	; 0xdc
 8014d7c:	af08      	add	r7, sp, #32
 8014d7e:	60f8      	str	r0, [r7, #12]
 8014d80:	60b9      	str	r1, [r7, #8]
  TFLITE_DCHECK(node->user_data != nullptr);
 8014d82:	68bb      	ldr	r3, [r7, #8]
 8014d84:	691b      	ldr	r3, [r3, #16]
 8014d86:	2b00      	cmp	r3, #0
 8014d88:	d101      	bne.n	8014d8e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x16>
 8014d8a:	f010 fe5c 	bl	8025a46 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 8014d8e:	68bb      	ldr	r3, [r7, #8]
 8014d90:	695b      	ldr	r3, [r3, #20]
 8014d92:	2b00      	cmp	r3, #0
 8014d94:	d101      	bne.n	8014d9a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22>
 8014d96:	f010 fe56 	bl	8025a46 <abort>

  int32_t buf_size = 0;
 8014d9a:	2300      	movs	r3, #0
 8014d9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  const auto& params =
 8014da0:	68bb      	ldr	r3, [r7, #8]
 8014da2:	695b      	ldr	r3, [r3, #20]
 8014da4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      *(static_cast<const TfLiteConvParams*>(node->builtin_data));
  OpData* data = static_cast<OpData*>(node->user_data);
 8014da8:	68bb      	ldr	r3, [r7, #8]
 8014daa:	691b      	ldr	r3, [r3, #16]
 8014dac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

  const TfLiteTensor* input = GetInput(context, node, kConvInputTensor);
 8014db0:	4ba2      	ldr	r3, [pc, #648]	; (801503c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2c4>)
 8014db2:	681b      	ldr	r3, [r3, #0]
 8014db4:	461a      	mov	r2, r3
 8014db6:	68b9      	ldr	r1, [r7, #8]
 8014db8:	68f8      	ldr	r0, [r7, #12]
 8014dba:	f7f6 faab 	bl	800b314 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8014dbe:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
  TF_LITE_ENSURE(context, input != nullptr);
 8014dc2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014dc6:	2b00      	cmp	r3, #0
 8014dc8:	d10a      	bne.n	8014de0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x68>
 8014dca:	68fb      	ldr	r3, [r7, #12]
 8014dcc:	695c      	ldr	r4, [r3, #20]
 8014dce:	4b9c      	ldr	r3, [pc, #624]	; (8015040 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2c8>)
 8014dd0:	9300      	str	r3, [sp, #0]
 8014dd2:	2338      	movs	r3, #56	; 0x38
 8014dd4:	4a9b      	ldr	r2, [pc, #620]	; (8015044 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2cc>)
 8014dd6:	499c      	ldr	r1, [pc, #624]	; (8015048 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2d0>)
 8014dd8:	68f8      	ldr	r0, [r7, #12]
 8014dda:	47a0      	blx	r4
 8014ddc:	2401      	movs	r4, #1
 8014dde:	e128      	b.n	8015032 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2ba>
  const TfLiteTensor* filter = GetInput(context, node, kConvWeightsTensor);
 8014de0:	4b9a      	ldr	r3, [pc, #616]	; (801504c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2d4>)
 8014de2:	681b      	ldr	r3, [r3, #0]
 8014de4:	461a      	mov	r2, r3
 8014de6:	68b9      	ldr	r1, [r7, #8]
 8014de8:	68f8      	ldr	r0, [r7, #12]
 8014dea:	f7f6 fa93 	bl	800b314 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8014dee:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
  TF_LITE_ENSURE(context, filter != nullptr);
 8014df2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8014df6:	2b00      	cmp	r3, #0
 8014df8:	d10a      	bne.n	8014e10 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x98>
 8014dfa:	68fb      	ldr	r3, [r7, #12]
 8014dfc:	695c      	ldr	r4, [r3, #20]
 8014dfe:	4b94      	ldr	r3, [pc, #592]	; (8015050 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2d8>)
 8014e00:	9300      	str	r3, [sp, #0]
 8014e02:	233a      	movs	r3, #58	; 0x3a
 8014e04:	4a8f      	ldr	r2, [pc, #572]	; (8015044 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2cc>)
 8014e06:	4990      	ldr	r1, [pc, #576]	; (8015048 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2d0>)
 8014e08:	68f8      	ldr	r0, [r7, #12]
 8014e0a:	47a0      	blx	r4
 8014e0c:	2401      	movs	r4, #1
 8014e0e:	e110      	b.n	8015032 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2ba>
  const TfLiteTensor* output = GetOutput(context, node, kConvOutputTensor);
 8014e10:	4b90      	ldr	r3, [pc, #576]	; (8015054 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2dc>)
 8014e12:	681b      	ldr	r3, [r3, #0]
 8014e14:	461a      	mov	r2, r3
 8014e16:	68b9      	ldr	r1, [r7, #8]
 8014e18:	68f8      	ldr	r0, [r7, #12]
 8014e1a:	f7f6 fa8b 	bl	800b334 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 8014e1e:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
  TF_LITE_ENSURE(context, output != nullptr);
 8014e22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8014e26:	2b00      	cmp	r3, #0
 8014e28:	d10a      	bne.n	8014e40 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xc8>
 8014e2a:	68fb      	ldr	r3, [r7, #12]
 8014e2c:	695c      	ldr	r4, [r3, #20]
 8014e2e:	4b8a      	ldr	r3, [pc, #552]	; (8015058 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e0>)
 8014e30:	9300      	str	r3, [sp, #0]
 8014e32:	233c      	movs	r3, #60	; 0x3c
 8014e34:	4a83      	ldr	r2, [pc, #524]	; (8015044 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2cc>)
 8014e36:	4984      	ldr	r1, [pc, #528]	; (8015048 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2d0>)
 8014e38:	68f8      	ldr	r0, [r7, #12]
 8014e3a:	47a0      	blx	r4
 8014e3c:	2401      	movs	r4, #1
 8014e3e:	e0f8      	b.n	8015032 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2ba>

  RuntimeShape input_shape = GetTensorShape(input);
 8014e40:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8014e44:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8014e48:	4618      	mov	r0, r3
 8014e4a:	f7f7 f890 	bl	800bf6e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  RuntimeShape output_shape = GetTensorShape(output);
 8014e4e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8014e52:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8014e56:	4618      	mov	r0, r3
 8014e58:	f7f7 f889 	bl	800bf6e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>

  // Initialize cmsis_nn input dimensions
  cmsis_nn_dims input_dims;
  input_dims.n = MatchingDim(input_shape, 0, output_shape, 0);
 8014e5c:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8014e60:	f107 0080 	add.w	r0, r7, #128	; 0x80
 8014e64:	2300      	movs	r3, #0
 8014e66:	2100      	movs	r1, #0
 8014e68:	f7fd f800 	bl	8011e6c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8014e6c:	4603      	mov	r3, r0
 8014e6e:	65bb      	str	r3, [r7, #88]	; 0x58
  input_dims.h = input->dims->data[1];
 8014e70:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014e74:	689b      	ldr	r3, [r3, #8]
 8014e76:	689b      	ldr	r3, [r3, #8]
 8014e78:	65fb      	str	r3, [r7, #92]	; 0x5c
  input_dims.w = input->dims->data[2];
 8014e7a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014e7e:	689b      	ldr	r3, [r3, #8]
 8014e80:	68db      	ldr	r3, [r3, #12]
 8014e82:	663b      	str	r3, [r7, #96]	; 0x60
  input_dims.c = input_shape.Dims(3);
 8014e84:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8014e88:	2103      	movs	r1, #3
 8014e8a:	4618      	mov	r0, r3
 8014e8c:	f7fb ff28 	bl	8010ce0 <_ZNK6tflite12RuntimeShape4DimsEi>
 8014e90:	4603      	mov	r3, r0
 8014e92:	667b      	str	r3, [r7, #100]	; 0x64

  // Initialize cmsis_nn filter dimensions
  cmsis_nn_dims filter_dims;
  filter_dims.n = output_shape.Dims(3);
 8014e94:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8014e98:	2103      	movs	r1, #3
 8014e9a:	4618      	mov	r0, r3
 8014e9c:	f7fb ff20 	bl	8010ce0 <_ZNK6tflite12RuntimeShape4DimsEi>
 8014ea0:	4603      	mov	r3, r0
 8014ea2:	64bb      	str	r3, [r7, #72]	; 0x48
  filter_dims.h = filter->dims->data[1];
 8014ea4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8014ea8:	689b      	ldr	r3, [r3, #8]
 8014eaa:	689b      	ldr	r3, [r3, #8]
 8014eac:	64fb      	str	r3, [r7, #76]	; 0x4c
  filter_dims.w = filter->dims->data[2];
 8014eae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8014eb2:	689b      	ldr	r3, [r3, #8]
 8014eb4:	68db      	ldr	r3, [r3, #12]
 8014eb6:	653b      	str	r3, [r7, #80]	; 0x50
  filter_dims.c = input_dims.c;
 8014eb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014eba:	657b      	str	r3, [r7, #84]	; 0x54

  // Initialize cmsis_nn output dimensions
  cmsis_nn_dims output_dims;
  output_dims.n = input_dims.n;
 8014ebc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014ebe:	63bb      	str	r3, [r7, #56]	; 0x38
  output_dims.h = output->dims->data[1];
 8014ec0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8014ec4:	689b      	ldr	r3, [r3, #8]
 8014ec6:	689b      	ldr	r3, [r3, #8]
 8014ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
  output_dims.w = output->dims->data[2];
 8014eca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8014ece:	689b      	ldr	r3, [r3, #8]
 8014ed0:	68db      	ldr	r3, [r3, #12]
 8014ed2:	643b      	str	r3, [r7, #64]	; 0x40
  output_dims.c = output_shape.Dims(3);
 8014ed4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8014ed8:	2103      	movs	r1, #3
 8014eda:	4618      	mov	r0, r3
 8014edc:	f7fb ff00 	bl	8010ce0 <_ZNK6tflite12RuntimeShape4DimsEi>
 8014ee0:	4603      	mov	r3, r0
 8014ee2:	647b      	str	r3, [r7, #68]	; 0x44
  // Dynamically allocate per-channel quantization parameters.
  // TODO(#42883): This allocation is done even for non-int8 cases to get around
  // a bug in kernel_util.cc which incorrectly uses per_channel_output_shift in
  // non-int8 cases. Protect this section with a if (input->type == kTfLiteInt8)
  // when the issue is fixed.
  const int num_channels = filter->dims->data[kConvQuantizedDimension];
 8014ee4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8014ee8:	689a      	ldr	r2, [r3, #8]
 8014eea:	4b5c      	ldr	r3, [pc, #368]	; (801505c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e4>)
 8014eec:	681b      	ldr	r3, [r3, #0]
 8014eee:	009b      	lsls	r3, r3, #2
 8014ef0:	4413      	add	r3, r2
 8014ef2:	685b      	ldr	r3, [r3, #4]
 8014ef4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  data->reference_op_data.per_channel_output_multiplier =
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
 8014ef8:	68fb      	ldr	r3, [r7, #12]
 8014efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          context, num_channels * sizeof(int32_t)));
 8014efc:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
 8014f00:	0092      	lsls	r2, r2, #2
 8014f02:	4611      	mov	r1, r2
 8014f04:	68f8      	ldr	r0, [r7, #12]
 8014f06:	4798      	blx	r3
 8014f08:	4602      	mov	r2, r0
  data->reference_op_data.per_channel_output_multiplier =
 8014f0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014f0e:	625a      	str	r2, [r3, #36]	; 0x24
  data->reference_op_data.per_channel_output_shift =
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
 8014f10:	68fb      	ldr	r3, [r7, #12]
 8014f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          context, num_channels * sizeof(int32_t)));
 8014f14:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
 8014f18:	0092      	lsls	r2, r2, #2
 8014f1a:	4611      	mov	r1, r2
 8014f1c:	68f8      	ldr	r0, [r7, #12]
 8014f1e:	4798      	blx	r3
 8014f20:	4602      	mov	r2, r0
  data->reference_op_data.per_channel_output_shift =
 8014f22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014f26:	629a      	str	r2, [r3, #40]	; 0x28

  TF_LITE_ENSURE_STATUS(CalculateOpDataConv(
 8014f28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014f2a:	607b      	str	r3, [r7, #4]
 8014f2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014f2e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014f30:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8014f32:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8014f34:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 8014f36:	f8d7 50a8 	ldr.w	r5, [r7, #168]	; 0xa8
 8014f3a:	782d      	ldrb	r5, [r5, #0]
 8014f3c:	f8d7 60ac 	ldr.w	r6, [r7, #172]	; 0xac
 8014f40:	9606      	str	r6, [sp, #24]
 8014f42:	9505      	str	r5, [sp, #20]
 8014f44:	9404      	str	r4, [sp, #16]
 8014f46:	9003      	str	r0, [sp, #12]
 8014f48:	9102      	str	r1, [sp, #8]
 8014f4a:	9201      	str	r2, [sp, #4]
 8014f4c:	9300      	str	r3, [sp, #0]
 8014f4e:	687b      	ldr	r3, [r7, #4]
 8014f50:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8014f54:	68b9      	ldr	r1, [r7, #8]
 8014f56:	68f8      	ldr	r0, [r7, #12]
 8014f58:	f7fd f90a 	bl	8012170 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>
 8014f5c:	4603      	mov	r3, r0
 8014f5e:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
 8014f62:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8014f66:	2b00      	cmp	r3, #0
 8014f68:	d002      	beq.n	8014f70 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1f8>
 8014f6a:	f897 409b 	ldrb.w	r4, [r7, #155]	; 0x9b
 8014f6e:	e056      	b.n	801501e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2a6>
      context, node, params, input_dims.w, input_dims.h, filter_dims.w,
      filter_dims.h, output_dims.w, output_dims.h, input->type,
      &data->reference_op_data));

  if (input->type == kTfLiteInt8) {
 8014f70:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014f74:	781b      	ldrb	r3, [r3, #0]
 8014f76:	2b09      	cmp	r3, #9
 8014f78:	d134      	bne.n	8014fe4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x26c>
    // Initialize cmsis_nn convolution parameters
    cmsis_nn_conv_params conv_params;
    conv_params.input_offset = -input->params.zero_point;
 8014f7a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014f7e:	691b      	ldr	r3, [r3, #16]
 8014f80:	425b      	negs	r3, r3
 8014f82:	613b      	str	r3, [r7, #16]
    conv_params.output_offset = output->params.zero_point;
 8014f84:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8014f88:	691b      	ldr	r3, [r3, #16]
 8014f8a:	617b      	str	r3, [r7, #20]
    conv_params.stride.h = params.stride_height;
 8014f8c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8014f90:	689b      	ldr	r3, [r3, #8]
 8014f92:	61fb      	str	r3, [r7, #28]
    conv_params.stride.w = params.stride_width;
 8014f94:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8014f98:	685b      	ldr	r3, [r3, #4]
 8014f9a:	61bb      	str	r3, [r7, #24]
    conv_params.dilation.h = params.dilation_height_factor;
 8014f9c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8014fa0:	695b      	ldr	r3, [r3, #20]
 8014fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
    conv_params.dilation.w = params.dilation_width_factor;
 8014fa4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8014fa8:	691b      	ldr	r3, [r3, #16]
 8014faa:	62bb      	str	r3, [r7, #40]	; 0x28
    conv_params.padding.h = data->reference_op_data.padding.height;
 8014fac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014fb0:	685b      	ldr	r3, [r3, #4]
 8014fb2:	627b      	str	r3, [r7, #36]	; 0x24
    conv_params.padding.w = data->reference_op_data.padding.width;
 8014fb4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014fb8:	681b      	ldr	r3, [r3, #0]
 8014fba:	623b      	str	r3, [r7, #32]
    conv_params.activation.min = data->reference_op_data.output_activation_min;
 8014fbc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014fc2:	633b      	str	r3, [r7, #48]	; 0x30
    conv_params.activation.max = data->reference_op_data.output_activation_max;
 8014fc4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014fca:	637b      	str	r3, [r7, #52]	; 0x34

    buf_size = arm_convolve_wrapper_s8_get_buffer_size(
 8014fcc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8014fd0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8014fd4:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8014fd8:	f107 0010 	add.w	r0, r7, #16
 8014fdc:	f004 fde0 	bl	8019ba0 <arm_convolve_wrapper_s8_get_buffer_size>
 8014fe0:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
        &conv_params, &input_dims, &filter_dims, &output_dims);
  }

  if (buf_size > 0) {
 8014fe4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014fe8:	2b00      	cmp	r3, #0
 8014fea:	dd12      	ble.n	8015012 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x29a>
    TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
 8014fec:	68fb      	ldr	r3, [r7, #12]
 8014fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014ff0:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8014ff4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8014ff8:	3234      	adds	r2, #52	; 0x34
 8014ffa:	68f8      	ldr	r0, [r7, #12]
 8014ffc:	4798      	blx	r3
 8014ffe:	4603      	mov	r3, r0
 8015000:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
 8015004:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 8015008:	2b00      	cmp	r3, #0
 801500a:	d007      	beq.n	801501c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2a4>
 801500c:	f897 409a 	ldrb.w	r4, [r7, #154]	; 0x9a
 8015010:	e005      	b.n	801501e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2a6>
        context, buf_size, &data->buffer_idx));
  } else {
    data->buffer_idx = -1;
 8015012:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015016:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801501a:	635a      	str	r2, [r3, #52]	; 0x34
  }
  return kTfLiteOk;
 801501c:	2400      	movs	r4, #0
  RuntimeShape output_shape = GetTensorShape(output);
 801501e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8015022:	4618      	mov	r0, r3
 8015024:	f7f6 ff29 	bl	800be7a <_ZN6tflite12RuntimeShapeD1Ev>
  RuntimeShape input_shape = GetTensorShape(input);
 8015028:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801502c:	4618      	mov	r0, r3
 801502e:	f7f6 ff24 	bl	800be7a <_ZN6tflite12RuntimeShapeD1Ev>
 8015032:	4623      	mov	r3, r4
}
 8015034:	4618      	mov	r0, r3
 8015036:	37bc      	adds	r7, #188	; 0xbc
 8015038:	46bd      	mov	sp, r7
 801503a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801503c:	0802ca7c 	.word	0x0802ca7c
 8015040:	0802b954 	.word	0x0802b954
 8015044:	0802b8f8 	.word	0x0802b8f8
 8015048:	0802b93c 	.word	0x0802b93c
 801504c:	0802ca80 	.word	0x0802ca80
 8015050:	0802b968 	.word	0x0802b968
 8015054:	0802ca88 	.word	0x0802ca88
 8015058:	0802b97c 	.word	0x0802b97c
 801505c:	0802ca8c 	.word	0x0802ca8c

08015060 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_>:

TfLiteStatus EvalQuantizedPerChannel(
    TfLiteContext* context, TfLiteNode* node, const TfLiteConvParams& params,
    const OpData& data, const TfLiteEvalTensor* input,
    const TfLiteEvalTensor* filter, const TfLiteEvalTensor* bias,
    TfLiteEvalTensor* output, TfLiteEvalTensor* im2col) {
 8015060:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015062:	b0ef      	sub	sp, #444	; 0x1bc
 8015064:	af08      	add	r7, sp, #32
 8015066:	f107 0414 	add.w	r4, r7, #20
 801506a:	6020      	str	r0, [r4, #0]
 801506c:	f107 0010 	add.w	r0, r7, #16
 8015070:	6001      	str	r1, [r0, #0]
 8015072:	f107 010c 	add.w	r1, r7, #12
 8015076:	600a      	str	r2, [r1, #0]
 8015078:	f107 0208 	add.w	r2, r7, #8
 801507c:	6013      	str	r3, [r2, #0]
  cmsis_nn_conv_params conv_params;
  conv_params.dilation.h = params.dilation_height_factor;
 801507e:	f107 030c 	add.w	r3, r7, #12
 8015082:	681b      	ldr	r3, [r3, #0]
 8015084:	695b      	ldr	r3, [r3, #20]
 8015086:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  conv_params.dilation.w = params.dilation_width_factor;
 801508a:	f107 030c 	add.w	r3, r7, #12
 801508e:	681b      	ldr	r3, [r3, #0]
 8015090:	691b      	ldr	r3, [r3, #16]
 8015092:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  // TODO(#43557) Remove checks for dilation and call to reference
  // implementation when dilation is supported in the optimized implementation
  // by CMSIS-NN.
  if (conv_params.dilation.h == 1 && conv_params.dilation.w == 1) {
 8015096:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801509a:	2b01      	cmp	r3, #1
 801509c:	f040 818a 	bne.w	80153b4 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x354>
 80150a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80150a4:	2b01      	cmp	r3, #1
 80150a6:	f040 8185 	bne.w	80153b4 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x354>
    // Initialize cmsis_nn convolution parameters
    conv_params.input_offset = -data.reference_op_data.input_zero_point;
 80150aa:	f107 0308 	add.w	r3, r7, #8
 80150ae:	681b      	ldr	r3, [r3, #0]
 80150b0:	691b      	ldr	r3, [r3, #16]
 80150b2:	425b      	negs	r3, r3
 80150b4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    conv_params.output_offset = data.reference_op_data.output_zero_point;
 80150b8:	f107 0308 	add.w	r3, r7, #8
 80150bc:	681b      	ldr	r3, [r3, #0]
 80150be:	699b      	ldr	r3, [r3, #24]
 80150c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    conv_params.stride.h = params.stride_height;
 80150c4:	f107 030c 	add.w	r3, r7, #12
 80150c8:	681b      	ldr	r3, [r3, #0]
 80150ca:	689b      	ldr	r3, [r3, #8]
 80150cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    conv_params.stride.w = params.stride_width;
 80150d0:	f107 030c 	add.w	r3, r7, #12
 80150d4:	681b      	ldr	r3, [r3, #0]
 80150d6:	685b      	ldr	r3, [r3, #4]
 80150d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    conv_params.padding.h = data.reference_op_data.padding.height;
 80150dc:	f107 0308 	add.w	r3, r7, #8
 80150e0:	681b      	ldr	r3, [r3, #0]
 80150e2:	685b      	ldr	r3, [r3, #4]
 80150e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    conv_params.padding.w = data.reference_op_data.padding.width;
 80150e8:	f107 0308 	add.w	r3, r7, #8
 80150ec:	681b      	ldr	r3, [r3, #0]
 80150ee:	681b      	ldr	r3, [r3, #0]
 80150f0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    conv_params.activation.min = data.reference_op_data.output_activation_min;
 80150f4:	f107 0308 	add.w	r3, r7, #8
 80150f8:	681b      	ldr	r3, [r3, #0]
 80150fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80150fc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    conv_params.activation.max = data.reference_op_data.output_activation_max;
 8015100:	f107 0308 	add.w	r3, r7, #8
 8015104:	681b      	ldr	r3, [r3, #0]
 8015106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015108:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

    // Initialize cmsis_nn per channel quantization parameters
    cmsis_nn_per_channel_quant_params quant_params;
    quant_params.multiplier = const_cast<int32_t*>(
        data.reference_op_data.per_channel_output_multiplier);
 801510c:	f107 0308 	add.w	r3, r7, #8
 8015110:	681b      	ldr	r3, [r3, #0]
 8015112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    quant_params.multiplier = const_cast<int32_t*>(
 8015114:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    quant_params.shift =
        const_cast<int32_t*>(data.reference_op_data.per_channel_output_shift);
 8015118:	f107 0308 	add.w	r3, r7, #8
 801511c:	681b      	ldr	r3, [r3, #0]
 801511e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    quant_params.shift =
 8015120:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

    RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 8015124:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8015128:	f8d7 11b4 	ldr.w	r1, [r7, #436]	; 0x1b4
 801512c:	4618      	mov	r0, r3
 801512e:	f7fd fb56 	bl	80127de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 8015132:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8015136:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 801513a:	4618      	mov	r0, r3
 801513c:	f7fd fb4f 	bl	80127de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 8015140:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8015144:	f8d7 11bc 	ldr.w	r1, [r7, #444]	; 0x1bc
 8015148:	4618      	mov	r0, r3
 801514a:	f7fd fb48 	bl	80127de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    RuntimeShape bias_shape = tflite::micro::GetTensorShape(bias);
 801514e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8015152:	f8d7 11b8 	ldr.w	r1, [r7, #440]	; 0x1b8
 8015156:	4618      	mov	r0, r3
 8015158:	f7fd fb41 	bl	80127de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>

    // Consistency check.
    TFLITE_DCHECK_LE(conv_params.activation.min, conv_params.activation.max);
 801515c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8015160:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8015164:	429a      	cmp	r2, r3
 8015166:	dd01      	ble.n	801516c <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x10c>
 8015168:	f010 fc6d 	bl	8025a46 <abort>
    TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 801516c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8015170:	4618      	mov	r0, r3
 8015172:	f7f6 fe98 	bl	800bea6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8015176:	4603      	mov	r3, r0
 8015178:	2b04      	cmp	r3, #4
 801517a:	d001      	beq.n	8015180 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x120>
 801517c:	f010 fc63 	bl	8025a46 <abort>
    TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 8015180:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8015184:	4618      	mov	r0, r3
 8015186:	f7f6 fe8e 	bl	800bea6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801518a:	4603      	mov	r3, r0
 801518c:	2b04      	cmp	r3, #4
 801518e:	d001      	beq.n	8015194 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x134>
 8015190:	f010 fc59 	bl	8025a46 <abort>
    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 8015194:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8015198:	4618      	mov	r0, r3
 801519a:	f7f6 fe84 	bl	800bea6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801519e:	4603      	mov	r3, r0
 80151a0:	2b04      	cmp	r3, #4
 80151a2:	d001      	beq.n	80151a8 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x148>
 80151a4:	f010 fc4f 	bl	8025a46 <abort>
    const int batch_size = MatchingDim(input_shape, 0, output_shape, 0);
 80151a8:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 80151ac:	f107 0094 	add.w	r0, r7, #148	; 0x94
 80151b0:	2300      	movs	r3, #0
 80151b2:	2100      	movs	r1, #0
 80151b4:	f7fc fe5a 	bl	8011e6c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80151b8:	f8c7 0194 	str.w	r0, [r7, #404]	; 0x194
    const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
 80151bc:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80151c0:	f107 0094 	add.w	r0, r7, #148	; 0x94
 80151c4:	2303      	movs	r3, #3
 80151c6:	2103      	movs	r1, #3
 80151c8:	f7fc fe50 	bl	8011e6c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80151cc:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
    const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
 80151d0:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 80151d4:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 80151d8:	2303      	movs	r3, #3
 80151da:	2100      	movs	r1, #0
 80151dc:	f7fc fe46 	bl	8011e6c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80151e0:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
    if (tflite::micro::GetTensorData<int8_t>(bias)) {
 80151e4:	f8d7 01b8 	ldr.w	r0, [r7, #440]	; 0x1b8
 80151e8:	f7fc fb4c 	bl	8011884 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 80151ec:	4603      	mov	r3, r0
 80151ee:	2b00      	cmp	r3, #0
 80151f0:	bf14      	ite	ne
 80151f2:	2301      	movne	r3, #1
 80151f4:	2300      	moveq	r3, #0
 80151f6:	b2db      	uxtb	r3, r3
 80151f8:	2b00      	cmp	r3, #0
 80151fa:	d00b      	beq.n	8015214 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x1b4>
      TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 80151fc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8015200:	4618      	mov	r0, r3
 8015202:	f7fb fda5 	bl	8010d50 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 8015206:	4602      	mov	r2, r0
 8015208:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 801520c:	4293      	cmp	r3, r2
 801520e:	d001      	beq.n	8015214 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x1b4>
 8015210:	f010 fc19 	bl	8025a46 <abort>
    }

    // Initialize cmsis_nn dimensions
    // Input
    cmsis_nn_dims input_dims;
    input_dims.n = batch_size;
 8015214:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8015218:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 801521c:	601a      	str	r2, [r3, #0]
    input_dims.h = input_shape.Dims(1);
 801521e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8015222:	2101      	movs	r1, #1
 8015224:	4618      	mov	r0, r3
 8015226:	f7fb fd5b 	bl	8010ce0 <_ZNK6tflite12RuntimeShape4DimsEi>
 801522a:	4602      	mov	r2, r0
 801522c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8015230:	605a      	str	r2, [r3, #4]
    input_dims.w = input_shape.Dims(2);
 8015232:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8015236:	2102      	movs	r1, #2
 8015238:	4618      	mov	r0, r3
 801523a:	f7fb fd51 	bl	8010ce0 <_ZNK6tflite12RuntimeShape4DimsEi>
 801523e:	4602      	mov	r2, r0
 8015240:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8015244:	609a      	str	r2, [r3, #8]
    input_dims.c = input_depth;
 8015246:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801524a:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 801524e:	60da      	str	r2, [r3, #12]

    // Filter
    cmsis_nn_dims filter_dims;
    filter_dims.n = output_depth;
 8015250:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8015254:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8015258:	601a      	str	r2, [r3, #0]
    filter_dims.h = filter_shape.Dims(1);
 801525a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 801525e:	2101      	movs	r1, #1
 8015260:	4618      	mov	r0, r3
 8015262:	f7fb fd3d 	bl	8010ce0 <_ZNK6tflite12RuntimeShape4DimsEi>
 8015266:	4602      	mov	r2, r0
 8015268:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801526c:	605a      	str	r2, [r3, #4]
    filter_dims.w = filter_shape.Dims(2);
 801526e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8015272:	2102      	movs	r1, #2
 8015274:	4618      	mov	r0, r3
 8015276:	f7fb fd33 	bl	8010ce0 <_ZNK6tflite12RuntimeShape4DimsEi>
 801527a:	4602      	mov	r2, r0
 801527c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8015280:	609a      	str	r2, [r3, #8]
    filter_dims.c = input_depth;
 8015282:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8015286:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 801528a:	60da      	str	r2, [r3, #12]

    // Bias
    cmsis_nn_dims bias_dims;
    bias_dims.n = 1;
 801528c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8015290:	2201      	movs	r2, #1
 8015292:	601a      	str	r2, [r3, #0]
    bias_dims.h = 1;
 8015294:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8015298:	2201      	movs	r2, #1
 801529a:	605a      	str	r2, [r3, #4]
    bias_dims.w = 1;
 801529c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80152a0:	2201      	movs	r2, #1
 80152a2:	609a      	str	r2, [r3, #8]
    bias_dims.c = output_depth;
 80152a4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80152a8:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 80152ac:	60da      	str	r2, [r3, #12]

    // Output
    cmsis_nn_dims output_dims;
    output_dims.n = batch_size;
 80152ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80152b2:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80152b6:	601a      	str	r2, [r3, #0]
    output_dims.h = output_shape.Dims(1);
 80152b8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80152bc:	2101      	movs	r1, #1
 80152be:	4618      	mov	r0, r3
 80152c0:	f7fb fd0e 	bl	8010ce0 <_ZNK6tflite12RuntimeShape4DimsEi>
 80152c4:	4602      	mov	r2, r0
 80152c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80152ca:	605a      	str	r2, [r3, #4]
    output_dims.w = output_shape.Dims(2);
 80152cc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80152d0:	2102      	movs	r1, #2
 80152d2:	4618      	mov	r0, r3
 80152d4:	f7fb fd04 	bl	8010ce0 <_ZNK6tflite12RuntimeShape4DimsEi>
 80152d8:	4602      	mov	r2, r0
 80152da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80152de:	609a      	str	r2, [r3, #8]
    output_dims.c = output_depth;
 80152e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80152e4:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 80152e8:	60da      	str	r2, [r3, #12]

    // Initialize cmsis_nn context
    cmsis_nn_context ctx;
    ctx.buf = nullptr;
 80152ea:	f107 031c 	add.w	r3, r7, #28
 80152ee:	2200      	movs	r2, #0
 80152f0:	601a      	str	r2, [r3, #0]
    ctx.size = 0;
 80152f2:	f107 031c 	add.w	r3, r7, #28
 80152f6:	2200      	movs	r2, #0
 80152f8:	605a      	str	r2, [r3, #4]

    if (data.buffer_idx > -1) {
 80152fa:	f107 0308 	add.w	r3, r7, #8
 80152fe:	681b      	ldr	r3, [r3, #0]
 8015300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015302:	2b00      	cmp	r3, #0
 8015304:	db0f      	blt.n	8015326 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x2c6>
      ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
 8015306:	f107 0314 	add.w	r3, r7, #20
 801530a:	681b      	ldr	r3, [r3, #0]
 801530c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801530e:	f107 0208 	add.w	r2, r7, #8
 8015312:	6812      	ldr	r2, [r2, #0]
 8015314:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8015316:	f107 0214 	add.w	r2, r7, #20
 801531a:	6810      	ldr	r0, [r2, #0]
 801531c:	4798      	blx	r3
 801531e:	4602      	mov	r2, r0
 8015320:	f107 031c 	add.w	r3, r7, #28
 8015324:	601a      	str	r2, [r3, #0]
      // arm_convolve_wrapper_s8_get_buffer_size
    }

    // arm_convolve_wrapper_s8 dispatches the optimized kernel accordingly with
    // the parameters passed
    TFLITE_DCHECK_EQ(
 8015326:	f8d7 01b0 	ldr.w	r0, [r7, #432]	; 0x1b0
 801532a:	f7fc faab 	bl	8011884 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 801532e:	4605      	mov	r5, r0
 8015330:	f8d7 01b4 	ldr.w	r0, [r7, #436]	; 0x1b4
 8015334:	f7fc faa6 	bl	8011884 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8015338:	4606      	mov	r6, r0
 801533a:	f8d7 01b8 	ldr.w	r0, [r7, #440]	; 0x1b8
 801533e:	f7fc fd22 	bl	8011d86 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 8015342:	6078      	str	r0, [r7, #4]
 8015344:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 8015348:	f7fc faab 	bl	80118a2 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 801534c:	4603      	mov	r3, r0
 801534e:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8015352:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8015356:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 801535a:	f107 001c 	add.w	r0, r7, #28
 801535e:	9306      	str	r3, [sp, #24]
 8015360:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015364:	9305      	str	r3, [sp, #20]
 8015366:	687b      	ldr	r3, [r7, #4]
 8015368:	9304      	str	r3, [sp, #16]
 801536a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801536e:	9303      	str	r3, [sp, #12]
 8015370:	9602      	str	r6, [sp, #8]
 8015372:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8015376:	9301      	str	r3, [sp, #4]
 8015378:	9500      	str	r5, [sp, #0]
 801537a:	4623      	mov	r3, r4
 801537c:	f004 fb90 	bl	8019aa0 <arm_convolve_wrapper_s8>
 8015380:	4603      	mov	r3, r0
 8015382:	2b00      	cmp	r3, #0
 8015384:	d001      	beq.n	801538a <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x32a>
 8015386:	f010 fb5e 	bl	8025a46 <abort>
    RuntimeShape bias_shape = tflite::micro::GetTensorShape(bias);
 801538a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801538e:	4618      	mov	r0, r3
 8015390:	f7f6 fd73 	bl	800be7a <_ZN6tflite12RuntimeShapeD1Ev>
    RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 8015394:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8015398:	4618      	mov	r0, r3
 801539a:	f7f6 fd6e 	bl	800be7a <_ZN6tflite12RuntimeShapeD1Ev>
    RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 801539e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80153a2:	4618      	mov	r0, r3
 80153a4:	f7f6 fd69 	bl	800be7a <_ZN6tflite12RuntimeShapeD1Ev>
    RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 80153a8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80153ac:	4618      	mov	r0, r3
 80153ae:	f7f6 fd64 	bl	800be7a <_ZN6tflite12RuntimeShapeD1Ev>
            &ctx, &conv_params, &quant_params, &input_dims,
            tflite::micro::GetTensorData<int8_t>(input), &filter_dims,
            tflite::micro::GetTensorData<int8_t>(filter), &bias_dims,
            tflite::micro::GetTensorData<int32_t>(bias), &output_dims,
            tflite::micro::GetTensorData<int8_t>(output)),
        ARM_MATH_SUCCESS);
 80153b2:	e06d      	b.n	8015490 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x430>
  } else {
    reference_integer_ops::ConvPerChannel(
        ConvParamsQuantized(params, data.reference_op_data),
 80153b4:	f107 0308 	add.w	r3, r7, #8
 80153b8:	681a      	ldr	r2, [r3, #0]
 80153ba:	f107 00f4 	add.w	r0, r7, #244	; 0xf4
 80153be:	f107 030c 	add.w	r3, r7, #12
 80153c2:	6819      	ldr	r1, [r3, #0]
 80153c4:	f7fc fe83 	bl	80120ce <_ZN6tflite19ConvParamsQuantizedERK16TfLiteConvParamsRKNS_10OpDataConvE>
        data.reference_op_data.per_channel_output_multiplier,
 80153c8:	f107 0308 	add.w	r3, r7, #8
 80153cc:	681b      	ldr	r3, [r3, #0]
 80153ce:	6a5c      	ldr	r4, [r3, #36]	; 0x24
        data.reference_op_data.per_channel_output_shift,
 80153d0:	f107 0308 	add.w	r3, r7, #8
 80153d4:	681b      	ldr	r3, [r3, #0]
 80153d6:	6a9d      	ldr	r5, [r3, #40]	; 0x28
        tflite::micro::GetTensorShape(input),
 80153d8:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 80153dc:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 80153e0:	4618      	mov	r0, r3
 80153e2:	f7fd f9fc 	bl	80127de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    reference_integer_ops::ConvPerChannel(
 80153e6:	f8d7 01b0 	ldr.w	r0, [r7, #432]	; 0x1b0
 80153ea:	f7fc fa4b 	bl	8011884 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 80153ee:	4606      	mov	r6, r0
        tflite::micro::GetTensorData<int8_t>(input),
        tflite::micro::GetTensorShape(filter),
 80153f0:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 80153f4:	f8d7 11b4 	ldr.w	r1, [r7, #436]	; 0x1b4
 80153f8:	4618      	mov	r0, r3
 80153fa:	f7fd f9f0 	bl	80127de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    reference_integer_ops::ConvPerChannel(
 80153fe:	f8d7 01b4 	ldr.w	r0, [r7, #436]	; 0x1b4
 8015402:	f7fc fa3f 	bl	8011884 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8015406:	6078      	str	r0, [r7, #4]
        tflite::micro::GetTensorData<int8_t>(filter),
        tflite::micro::GetTensorShape(bias),
 8015408:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 801540c:	f8d7 11b8 	ldr.w	r1, [r7, #440]	; 0x1b8
 8015410:	4618      	mov	r0, r3
 8015412:	f7fd f9e4 	bl	80127de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    reference_integer_ops::ConvPerChannel(
 8015416:	f8d7 01b8 	ldr.w	r0, [r7, #440]	; 0x1b8
 801541a:	f7fc fcb4 	bl	8011d86 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 801541e:	6038      	str	r0, [r7, #0]
        tflite::micro::GetTensorData<int32_t>(bias),
        tflite::micro::GetTensorShape(output),
 8015420:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8015424:	f8d7 11bc 	ldr.w	r1, [r7, #444]	; 0x1bc
 8015428:	4618      	mov	r0, r3
 801542a:	f7fd f9d8 	bl	80127de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    reference_integer_ops::ConvPerChannel(
 801542e:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 8015432:	f7fc fa36 	bl	80118a2 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 8015436:	4603      	mov	r3, r0
 8015438:	f507 7296 	add.w	r2, r7, #300	; 0x12c
 801543c:	f107 00f4 	add.w	r0, r7, #244	; 0xf4
 8015440:	9306      	str	r3, [sp, #24]
 8015442:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8015446:	9305      	str	r3, [sp, #20]
 8015448:	683b      	ldr	r3, [r7, #0]
 801544a:	9304      	str	r3, [sp, #16]
 801544c:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8015450:	9303      	str	r3, [sp, #12]
 8015452:	687b      	ldr	r3, [r7, #4]
 8015454:	9302      	str	r3, [sp, #8]
 8015456:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 801545a:	9301      	str	r3, [sp, #4]
 801545c:	9600      	str	r6, [sp, #0]
 801545e:	4613      	mov	r3, r2
 8015460:	462a      	mov	r2, r5
 8015462:	4621      	mov	r1, r4
 8015464:	f7ff fabd 	bl	80149e2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>
        tflite::micro::GetTensorShape(output),
 8015468:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 801546c:	4618      	mov	r0, r3
 801546e:	f7f6 fd04 	bl	800be7a <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorShape(bias),
 8015472:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8015476:	4618      	mov	r0, r3
 8015478:	f7f6 fcff 	bl	800be7a <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorShape(filter),
 801547c:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8015480:	4618      	mov	r0, r3
 8015482:	f7f6 fcfa 	bl	800be7a <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorShape(input),
 8015486:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 801548a:	4618      	mov	r0, r3
 801548c:	f7f6 fcf5 	bl	800be7a <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorData<int8_t>(output));
  }
  return kTfLiteOk;
 8015490:	2300      	movs	r3, #0
}
 8015492:	4618      	mov	r0, r3
 8015494:	f507 77ce 	add.w	r7, r7, #412	; 0x19c
 8015498:	46bd      	mov	sp, r7
 801549a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801549c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 801549c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80154a0:	b0bc      	sub	sp, #240	; 0xf0
 80154a2:	af08      	add	r7, sp, #32
 80154a4:	6078      	str	r0, [r7, #4]
 80154a6:	6039      	str	r1, [r7, #0]
  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kConvInputTensor);
 80154a8:	4b8b      	ldr	r3, [pc, #556]	; (80156d8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x23c>)
 80154aa:	681b      	ldr	r3, [r3, #0]
 80154ac:	461a      	mov	r2, r3
 80154ae:	6839      	ldr	r1, [r7, #0]
 80154b0:	6878      	ldr	r0, [r7, #4]
 80154b2:	f7fb fce9 	bl	8010e88 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 80154b6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kConvWeightsTensor);
 80154ba:	4b88      	ldr	r3, [pc, #544]	; (80156dc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x240>)
 80154bc:	681b      	ldr	r3, [r3, #0]
 80154be:	461a      	mov	r2, r3
 80154c0:	6839      	ldr	r1, [r7, #0]
 80154c2:	6878      	ldr	r0, [r7, #4]
 80154c4:	f7fb fce0 	bl	8010e88 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 80154c8:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
  const TfLiteEvalTensor* bias =
      (NumInputs(node) == 3)
 80154cc:	6838      	ldr	r0, [r7, #0]
 80154ce:	f7fc fc40 	bl	8011d52 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 80154d2:	4603      	mov	r3, r0
          ? tflite::micro::GetEvalInput(context, node, kConvBiasTensor)
 80154d4:	2b03      	cmp	r3, #3
 80154d6:	d108      	bne.n	80154ea <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x4e>
 80154d8:	4b81      	ldr	r3, [pc, #516]	; (80156e0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x244>)
 80154da:	681b      	ldr	r3, [r3, #0]
 80154dc:	461a      	mov	r2, r3
 80154de:	6839      	ldr	r1, [r7, #0]
 80154e0:	6878      	ldr	r0, [r7, #4]
 80154e2:	f7fb fcd1 	bl	8010e88 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 80154e6:	4603      	mov	r3, r0
 80154e8:	e000      	b.n	80154ec <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x50>
 80154ea:	2300      	movs	r3, #0
          : nullptr;
 80154ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kConvOutputTensor);
 80154f0:	4b7c      	ldr	r3, [pc, #496]	; (80156e4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x248>)
 80154f2:	681b      	ldr	r3, [r3, #0]
 80154f4:	461a      	mov	r2, r3
 80154f6:	6839      	ldr	r1, [r7, #0]
 80154f8:	6878      	ldr	r0, [r7, #4]
 80154fa:	f7fb fcd5 	bl	8010ea8 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 80154fe:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

  TFLITE_DCHECK(node->builtin_data != nullptr);
 8015502:	683b      	ldr	r3, [r7, #0]
 8015504:	695b      	ldr	r3, [r3, #20]
 8015506:	2b00      	cmp	r3, #0
 8015508:	d101      	bne.n	801550e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x72>
 801550a:	f010 fa9c 	bl	8025a46 <abort>
  const auto& params =
 801550e:	683b      	ldr	r3, [r7, #0]
 8015510:	695b      	ldr	r3, [r3, #20]
 8015512:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      *(reinterpret_cast<TfLiteConvParams*>(node->builtin_data));
  TFLITE_DCHECK(node->user_data != nullptr);
 8015516:	683b      	ldr	r3, [r7, #0]
 8015518:	691b      	ldr	r3, [r3, #16]
 801551a:	2b00      	cmp	r3, #0
 801551c:	d101      	bne.n	8015522 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x86>
 801551e:	f010 fa92 	bl	8025a46 <abort>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));
 8015522:	683b      	ldr	r3, [r7, #0]
 8015524:	691b      	ldr	r3, [r3, #16]
 8015526:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

  TF_LITE_ENSURE_EQ(context, input->type, output->type);
 801552a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801552e:	7a1a      	ldrb	r2, [r3, #8]
 8015530:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8015534:	7a1b      	ldrb	r3, [r3, #8]
 8015536:	429a      	cmp	r2, r3
 8015538:	d016      	beq.n	8015568 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xcc>
 801553a:	687b      	ldr	r3, [r7, #4]
 801553c:	695c      	ldr	r4, [r3, #20]
 801553e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8015542:	7a1b      	ldrb	r3, [r3, #8]
 8015544:	461a      	mov	r2, r3
 8015546:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801554a:	7a1b      	ldrb	r3, [r3, #8]
 801554c:	9303      	str	r3, [sp, #12]
 801554e:	9202      	str	r2, [sp, #8]
 8015550:	4b65      	ldr	r3, [pc, #404]	; (80156e8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x24c>)
 8015552:	9301      	str	r3, [sp, #4]
 8015554:	4b65      	ldr	r3, [pc, #404]	; (80156ec <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x250>)
 8015556:	9300      	str	r3, [sp, #0]
 8015558:	f240 1307 	movw	r3, #263	; 0x107
 801555c:	4a64      	ldr	r2, [pc, #400]	; (80156f0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x254>)
 801555e:	4965      	ldr	r1, [pc, #404]	; (80156f4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x258>)
 8015560:	6878      	ldr	r0, [r7, #4]
 8015562:	47a0      	blx	r4
 8015564:	2301      	movs	r3, #1
 8015566:	e0b1      	b.n	80156cc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x230>
  TF_LITE_ENSURE_MSG(context, input->type == filter->type,
 8015568:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801556c:	7a1a      	ldrb	r2, [r3, #8]
 801556e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8015572:	7a1b      	ldrb	r3, [r3, #8]
 8015574:	429a      	cmp	r2, r3
 8015576:	d006      	beq.n	8015586 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xea>
 8015578:	687b      	ldr	r3, [r7, #4]
 801557a:	695b      	ldr	r3, [r3, #20]
 801557c:	495e      	ldr	r1, [pc, #376]	; (80156f8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x25c>)
 801557e:	6878      	ldr	r0, [r7, #4]
 8015580:	4798      	blx	r3
 8015582:	2301      	movs	r3, #1
 8015584:	e0a2      	b.n	80156cc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x230>
                     "Hybrid models are not supported on TFLite Micro.");

  switch (input->type) {  // Already know in/out types are same.
 8015586:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801558a:	7a1b      	ldrb	r3, [r3, #8]
 801558c:	2b01      	cmp	r3, #1
 801558e:	d002      	beq.n	8015596 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xfa>
 8015590:	2b09      	cmp	r3, #9
 8015592:	d073      	beq.n	801567c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1e0>
 8015594:	e08a      	b.n	80156ac <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x210>
    case kTfLiteFloat32: {
      tflite::reference_ops::Conv(
          ConvParamsFloat(params, data.reference_op_data),
 8015596:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 801559a:	f107 0308 	add.w	r3, r7, #8
 801559e:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 80155a2:	4618      	mov	r0, r3
 80155a4:	f7fc fd57 	bl	8012056 <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE>
          tflite::micro::GetTensorShape(input),
 80155a8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80155ac:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 80155b0:	4618      	mov	r0, r3
 80155b2:	f7fd f914 	bl	80127de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Conv(
 80155b6:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 80155ba:	f7fc f943 	bl	8011844 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 80155be:	4680      	mov	r8, r0
          tflite::micro::GetTensorData<float>(input),
          tflite::micro::GetTensorShape(filter),
 80155c0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80155c4:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 80155c8:	4618      	mov	r0, r3
 80155ca:	f7fd f908 	bl	80127de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Conv(
 80155ce:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80155d2:	f7fc f937 	bl	8011844 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 80155d6:	4604      	mov	r4, r0
          tflite::micro::GetTensorData<float>(filter),
          tflite::micro::GetTensorShape(bias),
 80155d8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80155dc:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 80155e0:	4618      	mov	r0, r3
 80155e2:	f7fd f8fc 	bl	80127de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Conv(
 80155e6:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 80155ea:	f7fc f92b 	bl	8011844 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 80155ee:	4605      	mov	r5, r0
          tflite::micro::GetTensorData<float>(bias),
          tflite::micro::GetTensorShape(output),
 80155f0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80155f4:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 80155f8:	4618      	mov	r0, r3
 80155fa:	f7fd f8f0 	bl	80127de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Conv(
 80155fe:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8015602:	f7fc f92e 	bl	8011862 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 8015606:	4606      	mov	r6, r0
          tflite::micro::GetTensorData<float>(output),
          tflite::micro::GetTensorShape(nullptr), nullptr);
 8015608:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801560c:	2100      	movs	r1, #0
 801560e:	4618      	mov	r0, r3
 8015610:	f7fd f8e5 	bl	80127de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Conv(
 8015614:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8015618:	f107 0140 	add.w	r1, r7, #64	; 0x40
 801561c:	f107 0008 	add.w	r0, r7, #8
 8015620:	2300      	movs	r3, #0
 8015622:	9306      	str	r3, [sp, #24]
 8015624:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8015628:	9305      	str	r3, [sp, #20]
 801562a:	9604      	str	r6, [sp, #16]
 801562c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8015630:	9303      	str	r3, [sp, #12]
 8015632:	9502      	str	r5, [sp, #8]
 8015634:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8015638:	9301      	str	r3, [sp, #4]
 801563a:	9400      	str	r4, [sp, #0]
 801563c:	4613      	mov	r3, r2
 801563e:	4642      	mov	r2, r8
 8015640:	f7ff f84b 	bl	80146da <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_>
          tflite::micro::GetTensorShape(nullptr), nullptr);
 8015644:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8015648:	4618      	mov	r0, r3
 801564a:	f7f6 fc16 	bl	800be7a <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(output),
 801564e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8015652:	4618      	mov	r0, r3
 8015654:	f7f6 fc11 	bl	800be7a <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(bias),
 8015658:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801565c:	4618      	mov	r0, r3
 801565e:	f7f6 fc0c 	bl	800be7a <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(filter),
 8015662:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8015666:	4618      	mov	r0, r3
 8015668:	f7f6 fc07 	bl	800be7a <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(input),
 801566c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8015670:	4618      	mov	r0, r3
 8015672:	f7f6 fc02 	bl	800be7a <_ZN6tflite12RuntimeShapeD1Ev>
      break;
 8015676:	bf00      	nop
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
  }
  return kTfLiteOk;
 8015678:	2300      	movs	r3, #0
 801567a:	e027      	b.n	80156cc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x230>
      return EvalQuantizedPerChannel(context, node, params, data, input, filter,
 801567c:	2300      	movs	r3, #0
 801567e:	9304      	str	r3, [sp, #16]
 8015680:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8015684:	9303      	str	r3, [sp, #12]
 8015686:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801568a:	9302      	str	r3, [sp, #8]
 801568c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8015690:	9301      	str	r3, [sp, #4]
 8015692:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8015696:	9300      	str	r3, [sp, #0]
 8015698:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801569c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80156a0:	6839      	ldr	r1, [r7, #0]
 80156a2:	6878      	ldr	r0, [r7, #4]
 80156a4:	f7ff fcdc 	bl	8015060 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_>
 80156a8:	4603      	mov	r3, r0
                                     bias, output, nullptr);
 80156aa:	e00f      	b.n	80156cc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x230>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 80156ac:	687b      	ldr	r3, [r7, #4]
 80156ae:	695c      	ldr	r4, [r3, #20]
 80156b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80156b4:	7a1b      	ldrb	r3, [r3, #8]
 80156b6:	4618      	mov	r0, r3
 80156b8:	f7f2 ffca 	bl	8008650 <TfLiteTypeGetName>
 80156bc:	4602      	mov	r2, r0
 80156be:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80156c2:	7a1b      	ldrb	r3, [r3, #8]
 80156c4:	490d      	ldr	r1, [pc, #52]	; (80156fc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x260>)
 80156c6:	6878      	ldr	r0, [r7, #4]
 80156c8:	47a0      	blx	r4
      return kTfLiteError;
 80156ca:	2301      	movs	r3, #1
}
 80156cc:	4618      	mov	r0, r3
 80156ce:	37d0      	adds	r7, #208	; 0xd0
 80156d0:	46bd      	mov	sp, r7
 80156d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80156d6:	bf00      	nop
 80156d8:	0802ca7c 	.word	0x0802ca7c
 80156dc:	0802ca80 	.word	0x0802ca80
 80156e0:	0802ca84 	.word	0x0802ca84
 80156e4:	0802ca88 	.word	0x0802ca88
 80156e8:	0802b9ac 	.word	0x0802b9ac
 80156ec:	0802b9bc 	.word	0x0802b9bc
 80156f0:	0802b8f8 	.word	0x0802b8f8
 80156f4:	0802b990 	.word	0x0802b990
 80156f8:	0802b9c8 	.word	0x0802b9c8
 80156fc:	0802ba3c 	.word	0x0802ba3c

08015700 <_ZN6tflite16Register_CONV_2DEv>:

}  // namespace

TfLiteRegistration Register_CONV_2D() {
 8015700:	b4b0      	push	{r4, r5, r7}
 8015702:	b083      	sub	sp, #12
 8015704:	af00      	add	r7, sp, #0
 8015706:	6078      	str	r0, [r7, #4]
          /*prepare=*/Prepare,
          /*invoke=*/Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 8015708:	687b      	ldr	r3, [r7, #4]
 801570a:	4a07      	ldr	r2, [pc, #28]	; (8015728 <_ZN6tflite16Register_CONV_2DEv+0x28>)
 801570c:	461c      	mov	r4, r3
 801570e:	4615      	mov	r5, r2
 8015710:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015712:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015714:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8015718:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 801571c:	6878      	ldr	r0, [r7, #4]
 801571e:	370c      	adds	r7, #12
 8015720:	46bd      	mov	sp, r7
 8015722:	bcb0      	pop	{r4, r5, r7}
 8015724:	4770      	bx	lr
 8015726:	bf00      	nop
 8015728:	0802ba58 	.word	0x0802ba58

0801572c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>:
inline void DepthwiseConv(
    const DepthwiseParams& params, const RuntimeShape& input_shape,
    const float* input_data, const RuntimeShape& filter_shape,
    const float* filter_data, const RuntimeShape& bias_shape,
    const float* bias_data, const RuntimeShape& output_shape,
    float* output_data) {
 801572c:	b590      	push	{r4, r7, lr}
 801572e:	ed2d 8b02 	vpush	{d8}
 8015732:	b0a9      	sub	sp, #164	; 0xa4
 8015734:	af02      	add	r7, sp, #8
 8015736:	60f8      	str	r0, [r7, #12]
 8015738:	60b9      	str	r1, [r7, #8]
 801573a:	607a      	str	r2, [r7, #4]
 801573c:	603b      	str	r3, [r7, #0]
  const int stride_width = params.stride_width;
 801573e:	68fb      	ldr	r3, [r7, #12]
 8015740:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8015744:	673b      	str	r3, [r7, #112]	; 0x70
  const int stride_height = params.stride_height;
 8015746:	68fb      	ldr	r3, [r7, #12]
 8015748:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 801574c:	66fb      	str	r3, [r7, #108]	; 0x6c
  const int dilation_width_factor = params.dilation_width_factor;
 801574e:	68fb      	ldr	r3, [r7, #12]
 8015750:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8015754:	66bb      	str	r3, [r7, #104]	; 0x68
  const int dilation_height_factor = params.dilation_height_factor;
 8015756:	68fb      	ldr	r3, [r7, #12]
 8015758:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801575c:	667b      	str	r3, [r7, #100]	; 0x64
  const int pad_width = params.padding_values.width;
 801575e:	68fb      	ldr	r3, [r7, #12]
 8015760:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015764:	663b      	str	r3, [r7, #96]	; 0x60
  const int pad_height = params.padding_values.height;
 8015766:	68fb      	ldr	r3, [r7, #12]
 8015768:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801576c:	65fb      	str	r3, [r7, #92]	; 0x5c
  const int depth_multiplier = params.depth_multiplier;
 801576e:	68fb      	ldr	r3, [r7, #12]
 8015770:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8015774:	65bb      	str	r3, [r7, #88]	; 0x58
  const float output_activation_min = params.float_activation_min;
 8015776:	68fb      	ldr	r3, [r7, #12]
 8015778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801577a:	657b      	str	r3, [r7, #84]	; 0x54
  const float output_activation_max = params.float_activation_max;
 801577c:	68fb      	ldr	r3, [r7, #12]
 801577e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015780:	653b      	str	r3, [r7, #80]	; 0x50
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 8015782:	68b8      	ldr	r0, [r7, #8]
 8015784:	f7f6 fb8f 	bl	800bea6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8015788:	4603      	mov	r3, r0
 801578a:	2b04      	cmp	r3, #4
 801578c:	d001      	beq.n	8015792 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x66>
 801578e:	f010 f95a 	bl	8025a46 <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 8015792:	6838      	ldr	r0, [r7, #0]
 8015794:	f7f6 fb87 	bl	800bea6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8015798:	4603      	mov	r3, r0
 801579a:	2b04      	cmp	r3, #4
 801579c:	d001      	beq.n	80157a2 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x76>
 801579e:	f010 f952 	bl	8025a46 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 80157a2:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 80157a6:	f7f6 fb7e 	bl	800bea6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80157aa:	4603      	mov	r3, r0
 80157ac:	2b04      	cmp	r3, #4
 80157ae:	d001      	beq.n	80157b4 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x88>
 80157b0:	f010 f949 	bl	8025a46 <abort>

  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 80157b4:	2300      	movs	r3, #0
 80157b6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80157ba:	2100      	movs	r1, #0
 80157bc:	68b8      	ldr	r0, [r7, #8]
 80157be:	f7fc fb55 	bl	8011e6c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80157c2:	64f8      	str	r0, [r7, #76]	; 0x4c
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
 80157c4:	2303      	movs	r3, #3
 80157c6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80157ca:	2103      	movs	r1, #3
 80157cc:	6838      	ldr	r0, [r7, #0]
 80157ce:	f7fc fb4d 	bl	8011e6c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80157d2:	64b8      	str	r0, [r7, #72]	; 0x48
  const int input_height = input_shape.Dims(1);
 80157d4:	2101      	movs	r1, #1
 80157d6:	68b8      	ldr	r0, [r7, #8]
 80157d8:	f7fb fa82 	bl	8010ce0 <_ZNK6tflite12RuntimeShape4DimsEi>
 80157dc:	6478      	str	r0, [r7, #68]	; 0x44
  const int input_width = input_shape.Dims(2);
 80157de:	2102      	movs	r1, #2
 80157e0:	68b8      	ldr	r0, [r7, #8]
 80157e2:	f7fb fa7d 	bl	8010ce0 <_ZNK6tflite12RuntimeShape4DimsEi>
 80157e6:	6438      	str	r0, [r7, #64]	; 0x40
  const int input_depth = input_shape.Dims(3);
 80157e8:	2103      	movs	r1, #3
 80157ea:	68b8      	ldr	r0, [r7, #8]
 80157ec:	f7fb fa78 	bl	8010ce0 <_ZNK6tflite12RuntimeShape4DimsEi>
 80157f0:	63f8      	str	r0, [r7, #60]	; 0x3c
  const int filter_height = filter_shape.Dims(1);
 80157f2:	2101      	movs	r1, #1
 80157f4:	6838      	ldr	r0, [r7, #0]
 80157f6:	f7fb fa73 	bl	8010ce0 <_ZNK6tflite12RuntimeShape4DimsEi>
 80157fa:	63b8      	str	r0, [r7, #56]	; 0x38
  const int filter_width = filter_shape.Dims(2);
 80157fc:	2102      	movs	r1, #2
 80157fe:	6838      	ldr	r0, [r7, #0]
 8015800:	f7fb fa6e 	bl	8010ce0 <_ZNK6tflite12RuntimeShape4DimsEi>
 8015804:	6378      	str	r0, [r7, #52]	; 0x34
  const int output_height = output_shape.Dims(1);
 8015806:	2101      	movs	r1, #1
 8015808:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 801580c:	f7fb fa68 	bl	8010ce0 <_ZNK6tflite12RuntimeShape4DimsEi>
 8015810:	6338      	str	r0, [r7, #48]	; 0x30
  const int output_width = output_shape.Dims(2);
 8015812:	2102      	movs	r1, #2
 8015814:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8015818:	f7fb fa62 	bl	8010ce0 <_ZNK6tflite12RuntimeShape4DimsEi>
 801581c:	62f8      	str	r0, [r7, #44]	; 0x2c
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
 801581e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015820:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8015822:	fb02 f303 	mul.w	r3, r2, r3
 8015826:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015828:	429a      	cmp	r2, r3
 801582a:	d001      	beq.n	8015830 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x104>
 801582c:	f010 f90b 	bl	8025a46 <abort>
  TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 8015830:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8015834:	f7fb fa8c 	bl	8010d50 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 8015838:	4602      	mov	r2, r0
 801583a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801583c:	4293      	cmp	r3, r2
 801583e:	d001      	beq.n	8015844 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x118>
 8015840:	f010 f901 	bl	8025a46 <abort>

  for (int b = 0; b < batches; ++b) {
 8015844:	2300      	movs	r3, #0
 8015846:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801584a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801584e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015850:	429a      	cmp	r2, r3
 8015852:	f280 80eb 	bge.w	8015a2c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x300>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8015856:	2300      	movs	r3, #0
 8015858:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801585c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8015860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015862:	429a      	cmp	r2, r3
 8015864:	f280 80dc 	bge.w	8015a20 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2f4>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8015868:	2300      	movs	r3, #0
 801586a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801586e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8015872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015874:	429a      	cmp	r2, r3
 8015876:	f280 80cd 	bge.w	8015a14 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2e8>
        for (int ic = 0; ic < input_depth; ++ic) {
 801587a:	2300      	movs	r3, #0
 801587c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8015880:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8015884:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015886:	429a      	cmp	r2, r3
 8015888:	f280 80be 	bge.w	8015a08 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2dc>
          for (int m = 0; m < depth_multiplier; m++) {
 801588c:	2300      	movs	r3, #0
 801588e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8015892:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8015896:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015898:	429a      	cmp	r2, r3
 801589a:	f280 80af 	bge.w	80159fc <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2d0>
            const int oc = m + ic * depth_multiplier;
 801589e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80158a2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80158a4:	fb02 f303 	mul.w	r3, r2, r3
 80158a8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80158ac:	4413      	add	r3, r2
 80158ae:	62bb      	str	r3, [r7, #40]	; 0x28
            const int in_x_origin = (out_x * stride_width) - pad_width;
 80158b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80158b4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80158b6:	fb02 f203 	mul.w	r2, r2, r3
 80158ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80158bc:	1ad3      	subs	r3, r2, r3
 80158be:	627b      	str	r3, [r7, #36]	; 0x24
            const int in_y_origin = (out_y * stride_height) - pad_height;
 80158c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80158c4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80158c6:	fb02 f203 	mul.w	r2, r2, r3
 80158ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80158cc:	1ad3      	subs	r3, r2, r3
 80158ce:	623b      	str	r3, [r7, #32]
            float total = 0.f;
 80158d0:	f04f 0300 	mov.w	r3, #0
 80158d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 80158d8:	2300      	movs	r3, #0
 80158da:	67fb      	str	r3, [r7, #124]	; 0x7c
 80158dc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80158de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80158e0:	429a      	cmp	r2, r3
 80158e2:	da54      	bge.n	801598e <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x262>
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 80158e4:	2300      	movs	r3, #0
 80158e6:	67bb      	str	r3, [r7, #120]	; 0x78
 80158e8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80158ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80158ec:	429a      	cmp	r2, r3
 80158ee:	da4a      	bge.n	8015986 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x25a>
                const int in_x = in_x_origin + dilation_width_factor * filter_x;
 80158f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80158f2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80158f4:	fb02 f303 	mul.w	r3, r2, r3
 80158f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80158fa:	4413      	add	r3, r2
 80158fc:	61fb      	str	r3, [r7, #28]
                const int in_y =
                    in_y_origin + dilation_height_factor * filter_y;
 80158fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015900:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8015902:	fb02 f303 	mul.w	r3, r2, r3
                const int in_y =
 8015906:	6a3a      	ldr	r2, [r7, #32]
 8015908:	4413      	add	r3, r2
 801590a:	61bb      	str	r3, [r7, #24]
                // If the location is outside the bounds of the input image,
                // use zero as a default value.
                if ((in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
 801590c:	69fb      	ldr	r3, [r7, #28]
 801590e:	2b00      	cmp	r3, #0
 8015910:	db35      	blt.n	801597e <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x252>
 8015912:	69fa      	ldr	r2, [r7, #28]
 8015914:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015916:	429a      	cmp	r2, r3
 8015918:	da31      	bge.n	801597e <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x252>
 801591a:	69bb      	ldr	r3, [r7, #24]
 801591c:	2b00      	cmp	r3, #0
 801591e:	db2e      	blt.n	801597e <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x252>
 8015920:	69ba      	ldr	r2, [r7, #24]
 8015922:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015924:	429a      	cmp	r2, r3
 8015926:	da2a      	bge.n	801597e <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x252>
                    (in_y < input_height)) {
                  float input_value =
                      input_data[Offset(input_shape, b, in_y, in_x, ic)];
 8015928:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801592c:	9300      	str	r3, [sp, #0]
 801592e:	69fb      	ldr	r3, [r7, #28]
 8015930:	69ba      	ldr	r2, [r7, #24]
 8015932:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8015936:	68b8      	ldr	r0, [r7, #8]
 8015938:	f7fc fa40 	bl	8011dbc <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 801593c:	4603      	mov	r3, r0
 801593e:	009b      	lsls	r3, r3, #2
 8015940:	687a      	ldr	r2, [r7, #4]
 8015942:	4413      	add	r3, r2
 8015944:	681b      	ldr	r3, [r3, #0]
 8015946:	617b      	str	r3, [r7, #20]
                  float filter_value = filter_data[Offset(
 8015948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801594a:	9300      	str	r3, [sp, #0]
 801594c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801594e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8015950:	2100      	movs	r1, #0
 8015952:	6838      	ldr	r0, [r7, #0]
 8015954:	f7fc fa32 	bl	8011dbc <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8015958:	4603      	mov	r3, r0
                      filter_shape, 0, filter_y, filter_x, oc)];
 801595a:	009b      	lsls	r3, r3, #2
 801595c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8015960:	4413      	add	r3, r2
 8015962:	681b      	ldr	r3, [r3, #0]
 8015964:	613b      	str	r3, [r7, #16]
                  total += (input_value * filter_value);
 8015966:	ed97 7a05 	vldr	s14, [r7, #20]
 801596a:	edd7 7a04 	vldr	s15, [r7, #16]
 801596e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015972:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8015976:	ee77 7a27 	vadd.f32	s15, s14, s15
 801597a:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 801597e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015980:	3301      	adds	r3, #1
 8015982:	67bb      	str	r3, [r7, #120]	; 0x78
 8015984:	e7b0      	b.n	80158e8 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1bc>
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 8015986:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8015988:	3301      	adds	r3, #1
 801598a:	67fb      	str	r3, [r7, #124]	; 0x7c
 801598c:	e7a6      	b.n	80158dc <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1b0>
                }
              }
            }
            float bias_value = 0.0f;
 801598e:	f04f 0300 	mov.w	r3, #0
 8015992:	677b      	str	r3, [r7, #116]	; 0x74
            if (bias_data) {
 8015994:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8015998:	2b00      	cmp	r3, #0
 801599a:	d006      	beq.n	80159aa <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x27e>
              bias_value = bias_data[oc];
 801599c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801599e:	009b      	lsls	r3, r3, #2
 80159a0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80159a4:	4413      	add	r3, r2
 80159a6:	681b      	ldr	r3, [r3, #0]
 80159a8:	677b      	str	r3, [r7, #116]	; 0x74
            }
            output_data[Offset(output_shape, b, out_y, out_x, oc)] =
                ActivationFunctionWithMinMax(total + bias_value,
 80159aa:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80159ae:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80159b2:	ee37 8a27 	vadd.f32	s16, s14, s15
            output_data[Offset(output_shape, b, out_y, out_x, oc)] =
 80159b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159b8:	9300      	str	r3, [sp, #0]
 80159ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80159be:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80159c2:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 80159c6:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 80159ca:	f7fc f9f7 	bl	8011dbc <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 80159ce:	4603      	mov	r3, r0
 80159d0:	009b      	lsls	r3, r3, #2
 80159d2:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80159d6:	18d4      	adds	r4, r2, r3
                ActivationFunctionWithMinMax(total + bias_value,
 80159d8:	ed97 1a14 	vldr	s2, [r7, #80]	; 0x50
 80159dc:	edd7 0a15 	vldr	s1, [r7, #84]	; 0x54
 80159e0:	eeb0 0a48 	vmov.f32	s0, s16
 80159e4:	f7fc ff33 	bl	801284e <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>
 80159e8:	eef0 7a40 	vmov.f32	s15, s0
            output_data[Offset(output_shape, b, out_y, out_x, oc)] =
 80159ec:	edc4 7a00 	vstr	s15, [r4]
          for (int m = 0; m < depth_multiplier; m++) {
 80159f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80159f4:	3301      	adds	r3, #1
 80159f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80159fa:	e74a      	b.n	8015892 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x166>
        for (int ic = 0; ic < input_depth; ++ic) {
 80159fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015a00:	3301      	adds	r3, #1
 8015a02:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8015a06:	e73b      	b.n	8015880 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x154>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8015a08:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015a0c:	3301      	adds	r3, #1
 8015a0e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8015a12:	e72c      	b.n	801586e <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x142>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8015a14:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015a18:	3301      	adds	r3, #1
 8015a1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8015a1e:	e71d      	b.n	801585c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x130>
  for (int b = 0; b < batches; ++b) {
 8015a20:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8015a24:	3301      	adds	r3, #1
 8015a26:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8015a2a:	e70e      	b.n	801584a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x11e>
          }
        }
      }
    }
  }
}
 8015a2c:	bf00      	nop
 8015a2e:	379c      	adds	r7, #156	; 0x9c
 8015a30:	46bd      	mov	sp, r7
 8015a32:	ecbd 8b02 	vpop	{d8}
 8015a36:	bd90      	pop	{r4, r7, pc}

08015a38 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>:
    const DepthwiseParams& params, const int32_t* output_multiplier,
    const int32_t* output_shift, const RuntimeShape& input_shape,
    const int8_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const int32_t* bias_data, const RuntimeShape& output_shape,
    int8_t* output_data) {
 8015a38:	b590      	push	{r4, r7, lr}
 8015a3a:	b0ab      	sub	sp, #172	; 0xac
 8015a3c:	af02      	add	r7, sp, #8
 8015a3e:	60f8      	str	r0, [r7, #12]
 8015a40:	60b9      	str	r1, [r7, #8]
 8015a42:	607a      	str	r2, [r7, #4]
 8015a44:	603b      	str	r3, [r7, #0]
  // Get parameters.
  // TODO(b/141565753): Re-introduce ScopedProfilingLabel on Micro.
  const int stride_width = params.stride_width;
 8015a46:	68fb      	ldr	r3, [r7, #12]
 8015a48:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8015a4c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  const int stride_height = params.stride_height;
 8015a50:	68fb      	ldr	r3, [r7, #12]
 8015a52:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8015a56:	67fb      	str	r3, [r7, #124]	; 0x7c
  const int dilation_width_factor = params.dilation_width_factor;
 8015a58:	68fb      	ldr	r3, [r7, #12]
 8015a5a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8015a5e:	67bb      	str	r3, [r7, #120]	; 0x78
  const int dilation_height_factor = params.dilation_height_factor;
 8015a60:	68fb      	ldr	r3, [r7, #12]
 8015a62:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8015a66:	677b      	str	r3, [r7, #116]	; 0x74
  const int pad_width = params.padding_values.width;
 8015a68:	68fb      	ldr	r3, [r7, #12]
 8015a6a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015a6e:	673b      	str	r3, [r7, #112]	; 0x70
  const int pad_height = params.padding_values.height;
 8015a70:	68fb      	ldr	r3, [r7, #12]
 8015a72:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015a76:	66fb      	str	r3, [r7, #108]	; 0x6c
  const int depth_multiplier = params.depth_multiplier;
 8015a78:	68fb      	ldr	r3, [r7, #12]
 8015a7a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8015a7e:	66bb      	str	r3, [r7, #104]	; 0x68
  const int32_t input_offset = params.input_offset;
 8015a80:	68fb      	ldr	r3, [r7, #12]
 8015a82:	695b      	ldr	r3, [r3, #20]
 8015a84:	667b      	str	r3, [r7, #100]	; 0x64
  const int32_t output_offset = params.output_offset;
 8015a86:	68fb      	ldr	r3, [r7, #12]
 8015a88:	69db      	ldr	r3, [r3, #28]
 8015a8a:	663b      	str	r3, [r7, #96]	; 0x60
  const int32_t output_activation_min = params.quantized_activation_min;
 8015a8c:	68fb      	ldr	r3, [r7, #12]
 8015a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015a90:	61bb      	str	r3, [r7, #24]
  const int32_t output_activation_max = params.quantized_activation_max;
 8015a92:	68fb      	ldr	r3, [r7, #12]
 8015a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a96:	617b      	str	r3, [r7, #20]

  // Check dimensions of the tensors.
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 8015a98:	6838      	ldr	r0, [r7, #0]
 8015a9a:	f7f6 fa04 	bl	800bea6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8015a9e:	4603      	mov	r3, r0
 8015aa0:	2b04      	cmp	r3, #4
 8015aa2:	d001      	beq.n	8015aa8 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x70>
 8015aa4:	f00f ffcf 	bl	8025a46 <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 8015aa8:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8015aac:	f7f6 f9fb 	bl	800bea6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8015ab0:	4603      	mov	r3, r0
 8015ab2:	2b04      	cmp	r3, #4
 8015ab4:	d001      	beq.n	8015aba <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x82>
 8015ab6:	f00f ffc6 	bl	8025a46 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 8015aba:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8015abe:	f7f6 f9f2 	bl	800bea6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8015ac2:	4603      	mov	r3, r0
 8015ac4:	2b04      	cmp	r3, #4
 8015ac6:	d001      	beq.n	8015acc <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x94>
 8015ac8:	f00f ffbd 	bl	8025a46 <abort>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 8015acc:	69ba      	ldr	r2, [r7, #24]
 8015ace:	697b      	ldr	r3, [r7, #20]
 8015ad0:	429a      	cmp	r2, r3
 8015ad2:	dd01      	ble.n	8015ad8 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xa0>
 8015ad4:	f00f ffb7 	bl	8025a46 <abort>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 8015ad8:	2300      	movs	r3, #0
 8015ada:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8015ade:	2100      	movs	r1, #0
 8015ae0:	6838      	ldr	r0, [r7, #0]
 8015ae2:	f7fc f9c3 	bl	8011e6c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8015ae6:	65f8      	str	r0, [r7, #92]	; 0x5c
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
 8015ae8:	2303      	movs	r3, #3
 8015aea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8015aee:	2103      	movs	r1, #3
 8015af0:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8015af4:	f7fc f9ba 	bl	8011e6c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8015af8:	65b8      	str	r0, [r7, #88]	; 0x58
  const int input_height = input_shape.Dims(1);
 8015afa:	2101      	movs	r1, #1
 8015afc:	6838      	ldr	r0, [r7, #0]
 8015afe:	f7fb f8ef 	bl	8010ce0 <_ZNK6tflite12RuntimeShape4DimsEi>
 8015b02:	6578      	str	r0, [r7, #84]	; 0x54
  const int input_width = input_shape.Dims(2);
 8015b04:	2102      	movs	r1, #2
 8015b06:	6838      	ldr	r0, [r7, #0]
 8015b08:	f7fb f8ea 	bl	8010ce0 <_ZNK6tflite12RuntimeShape4DimsEi>
 8015b0c:	6538      	str	r0, [r7, #80]	; 0x50
  const int input_depth = input_shape.Dims(3);
 8015b0e:	2103      	movs	r1, #3
 8015b10:	6838      	ldr	r0, [r7, #0]
 8015b12:	f7fb f8e5 	bl	8010ce0 <_ZNK6tflite12RuntimeShape4DimsEi>
 8015b16:	64f8      	str	r0, [r7, #76]	; 0x4c
  const int filter_height = filter_shape.Dims(1);
 8015b18:	2101      	movs	r1, #1
 8015b1a:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8015b1e:	f7fb f8df 	bl	8010ce0 <_ZNK6tflite12RuntimeShape4DimsEi>
 8015b22:	64b8      	str	r0, [r7, #72]	; 0x48
  const int filter_width = filter_shape.Dims(2);
 8015b24:	2102      	movs	r1, #2
 8015b26:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8015b2a:	f7fb f8d9 	bl	8010ce0 <_ZNK6tflite12RuntimeShape4DimsEi>
 8015b2e:	6478      	str	r0, [r7, #68]	; 0x44
  const int output_height = output_shape.Dims(1);
 8015b30:	2101      	movs	r1, #1
 8015b32:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8015b36:	f7fb f8d3 	bl	8010ce0 <_ZNK6tflite12RuntimeShape4DimsEi>
 8015b3a:	6438      	str	r0, [r7, #64]	; 0x40
  const int output_width = output_shape.Dims(2);
 8015b3c:	2102      	movs	r1, #2
 8015b3e:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8015b42:	f7fb f8cd 	bl	8010ce0 <_ZNK6tflite12RuntimeShape4DimsEi>
 8015b46:	63f8      	str	r0, [r7, #60]	; 0x3c
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
 8015b48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015b4a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8015b4c:	fb02 f303 	mul.w	r3, r2, r3
 8015b50:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8015b52:	429a      	cmp	r2, r3
 8015b54:	d001      	beq.n	8015b5a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x122>
 8015b56:	f00f ff76 	bl	8025a46 <abort>
  TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 8015b5a:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8015b5e:	f7fb f8f7 	bl	8010d50 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 8015b62:	4602      	mov	r2, r0
 8015b64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015b66:	4293      	cmp	r3, r2
 8015b68:	d001      	beq.n	8015b6e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x136>
 8015b6a:	f00f ff6c 	bl	8025a46 <abort>

  for (int batch = 0; batch < batches; ++batch) {
 8015b6e:	2300      	movs	r3, #0
 8015b70:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8015b74:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8015b78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015b7a:	429a      	cmp	r2, r3
 8015b7c:	f280 811a 	bge.w	8015db4 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x37c>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8015b80:	2300      	movs	r3, #0
 8015b82:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8015b86:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8015b8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015b8c:	429a      	cmp	r2, r3
 8015b8e:	f280 810b 	bge.w	8015da8 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x370>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8015b92:	2300      	movs	r3, #0
 8015b94:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8015b98:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8015b9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015b9e:	429a      	cmp	r2, r3
 8015ba0:	f280 80fc 	bge.w	8015d9c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x364>
        for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 8015ba4:	2300      	movs	r3, #0
 8015ba6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8015baa:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8015bae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015bb0:	429a      	cmp	r2, r3
 8015bb2:	f280 80ed 	bge.w	8015d90 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x358>
          for (int m = 0; m < depth_multiplier; ++m) {
 8015bb6:	2300      	movs	r3, #0
 8015bb8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8015bbc:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8015bc0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015bc2:	429a      	cmp	r2, r3
 8015bc4:	f280 80de 	bge.w	8015d84 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x34c>
            const int output_channel = m + in_channel * depth_multiplier;
 8015bc8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015bcc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8015bce:	fb02 f303 	mul.w	r3, r2, r3
 8015bd2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8015bd6:	4413      	add	r3, r2
 8015bd8:	63bb      	str	r3, [r7, #56]	; 0x38
            const int in_x_origin = (out_x * stride_width) - pad_width;
 8015bda:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8015bde:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8015be2:	fb02 f203 	mul.w	r2, r2, r3
 8015be6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015be8:	1ad3      	subs	r3, r2, r3
 8015bea:	637b      	str	r3, [r7, #52]	; 0x34
            const int in_y_origin = (out_y * stride_height) - pad_height;
 8015bec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8015bf0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8015bf2:	fb02 f203 	mul.w	r2, r2, r3
 8015bf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015bf8:	1ad3      	subs	r3, r2, r3
 8015bfa:	633b      	str	r3, [r7, #48]	; 0x30
            int32_t acc = 0;
 8015bfc:	2300      	movs	r3, #0
 8015bfe:	613b      	str	r3, [r7, #16]
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 8015c00:	2300      	movs	r3, #0
 8015c02:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8015c06:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8015c0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015c0c:	429a      	cmp	r2, r3
 8015c0e:	da68      	bge.n	8015ce2 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2aa>
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 8015c10:	2300      	movs	r3, #0
 8015c12:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8015c16:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8015c1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015c1c:	429a      	cmp	r2, r3
 8015c1e:	da5a      	bge.n	8015cd6 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x29e>
                const int in_x = in_x_origin + dilation_width_factor * filter_x;
 8015c20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015c22:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8015c26:	fb02 f303 	mul.w	r3, r2, r3
 8015c2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015c2c:	4413      	add	r3, r2
 8015c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
                const int in_y =
                    in_y_origin + dilation_height_factor * filter_y;
 8015c30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015c32:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8015c36:	fb02 f303 	mul.w	r3, r2, r3
                const int in_y =
 8015c3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015c3c:	4413      	add	r3, r2
 8015c3e:	62bb      	str	r3, [r7, #40]	; 0x28
                // Zero padding by omitting the areas outside the image.
                const bool is_point_inside_image =
                    (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
 8015c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c42:	2b00      	cmp	r3, #0
 8015c44:	db0c      	blt.n	8015c60 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x228>
 8015c46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015c48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015c4a:	429a      	cmp	r2, r3
 8015c4c:	da08      	bge.n	8015c60 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x228>
 8015c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c50:	2b00      	cmp	r3, #0
 8015c52:	db05      	blt.n	8015c60 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x228>
 8015c54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015c56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015c58:	429a      	cmp	r2, r3
 8015c5a:	da01      	bge.n	8015c60 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x228>
 8015c5c:	2301      	movs	r3, #1
 8015c5e:	e000      	b.n	8015c62 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x22a>
 8015c60:	2300      	movs	r3, #0
                const bool is_point_inside_image =
 8015c62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                    (in_y < input_height);
                if (is_point_inside_image) {
 8015c66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015c6a:	2b00      	cmp	r3, #0
 8015c6c:	d02d      	beq.n	8015cca <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x292>
                  int32_t input_val = input_data[Offset(
 8015c6e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015c72:	9300      	str	r3, [sp, #0]
 8015c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015c78:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8015c7c:	6838      	ldr	r0, [r7, #0]
 8015c7e:	f7fc f89d 	bl	8011dbc <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8015c82:	4603      	mov	r3, r0
 8015c84:	461a      	mov	r2, r3
                      input_shape, batch, in_y, in_x, in_channel)];
 8015c86:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8015c8a:	4413      	add	r3, r2
 8015c8c:	f993 3000 	ldrsb.w	r3, [r3]
 8015c90:	623b      	str	r3, [r7, #32]
                  int32_t filter_val = filter_data[Offset(
 8015c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c94:	9300      	str	r3, [sp, #0]
 8015c96:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8015c9a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8015c9e:	2100      	movs	r1, #0
 8015ca0:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8015ca4:	f7fc f88a 	bl	8011dbc <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8015ca8:	4603      	mov	r3, r0
 8015caa:	461a      	mov	r2, r3
                      filter_shape, 0, filter_y, filter_x, output_channel)];
 8015cac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8015cb0:	4413      	add	r3, r2
 8015cb2:	f993 3000 	ldrsb.w	r3, [r3]
 8015cb6:	61fb      	str	r3, [r7, #28]
                  // long as the filter size (filter_y * filter_x * in_channel)
                  // does not exceed 2^16, which is the case in all the models
                  // we have seen so far.
                  // TODO(b/174275578): Add a check to make sure the
                  // accumulator depth is smaller than 2^16.
                  acc += filter_val * (input_val + input_offset);
 8015cb8:	6a3a      	ldr	r2, [r7, #32]
 8015cba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015cbc:	4413      	add	r3, r2
 8015cbe:	69fa      	ldr	r2, [r7, #28]
 8015cc0:	fb02 f203 	mul.w	r2, r2, r3
 8015cc4:	693b      	ldr	r3, [r7, #16]
 8015cc6:	4413      	add	r3, r2
 8015cc8:	613b      	str	r3, [r7, #16]
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 8015cca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8015cce:	3301      	adds	r3, #1
 8015cd0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8015cd4:	e79f      	b.n	8015c16 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1de>
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 8015cd6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015cda:	3301      	adds	r3, #1
 8015cdc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8015ce0:	e791      	b.n	8015c06 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1ce>
                }
              }
            }
            if (bias_data) {
 8015ce2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8015ce6:	2b00      	cmp	r3, #0
 8015ce8:	d008      	beq.n	8015cfc <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2c4>
              acc += bias_data[output_channel];
 8015cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015cec:	009b      	lsls	r3, r3, #2
 8015cee:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8015cf2:	4413      	add	r3, r2
 8015cf4:	681a      	ldr	r2, [r3, #0]
 8015cf6:	693b      	ldr	r3, [r7, #16]
 8015cf8:	4413      	add	r3, r2
 8015cfa:	613b      	str	r3, [r7, #16]
            }
            acc = MultiplyByQuantizedMultiplier(
 8015cfc:	6938      	ldr	r0, [r7, #16]
                acc, output_multiplier[output_channel],
 8015cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d00:	009b      	lsls	r3, r3, #2
 8015d02:	68ba      	ldr	r2, [r7, #8]
 8015d04:	4413      	add	r3, r2
            acc = MultiplyByQuantizedMultiplier(
 8015d06:	6819      	ldr	r1, [r3, #0]
                output_shift[output_channel]);
 8015d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d0a:	009b      	lsls	r3, r3, #2
 8015d0c:	687a      	ldr	r2, [r7, #4]
 8015d0e:	4413      	add	r3, r2
            acc = MultiplyByQuantizedMultiplier(
 8015d10:	681b      	ldr	r3, [r3, #0]
 8015d12:	461a      	mov	r2, r3
 8015d14:	f7fb f874 	bl	8010e00 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 8015d18:	4603      	mov	r3, r0
 8015d1a:	613b      	str	r3, [r7, #16]
            acc += output_offset;
 8015d1c:	693a      	ldr	r2, [r7, #16]
 8015d1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015d20:	4413      	add	r3, r2
 8015d22:	613b      	str	r3, [r7, #16]
            acc = std::max(acc, output_activation_min);
 8015d24:	f107 0218 	add.w	r2, r7, #24
 8015d28:	f107 0310 	add.w	r3, r7, #16
 8015d2c:	4611      	mov	r1, r2
 8015d2e:	4618      	mov	r0, r3
 8015d30:	f7f5 ff3c 	bl	800bbac <_ZSt3maxIlERKT_S2_S2_>
 8015d34:	4603      	mov	r3, r0
 8015d36:	681b      	ldr	r3, [r3, #0]
 8015d38:	613b      	str	r3, [r7, #16]
            acc = std::min(acc, output_activation_max);
 8015d3a:	f107 0214 	add.w	r2, r7, #20
 8015d3e:	f107 0310 	add.w	r3, r7, #16
 8015d42:	4611      	mov	r1, r2
 8015d44:	4618      	mov	r0, r3
 8015d46:	f7f5 ff1d 	bl	800bb84 <_ZSt3minIlERKT_S2_S2_>
 8015d4a:	4603      	mov	r3, r0
 8015d4c:	681b      	ldr	r3, [r3, #0]
 8015d4e:	613b      	str	r3, [r7, #16]
            output_data[Offset(output_shape, batch, out_y, out_x,
                               output_channel)] = static_cast<int8_t>(acc);
 8015d50:	693c      	ldr	r4, [r7, #16]
            output_data[Offset(output_shape, batch, out_y, out_x,
 8015d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d54:	9300      	str	r3, [sp, #0]
 8015d56:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8015d5a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8015d5e:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8015d62:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8015d66:	f7fc f829 	bl	8011dbc <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8015d6a:	4603      	mov	r3, r0
 8015d6c:	461a      	mov	r2, r3
                               output_channel)] = static_cast<int8_t>(acc);
 8015d6e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8015d72:	4413      	add	r3, r2
 8015d74:	b262      	sxtb	r2, r4
 8015d76:	701a      	strb	r2, [r3, #0]
          for (int m = 0; m < depth_multiplier; ++m) {
 8015d78:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015d7c:	3301      	adds	r3, #1
 8015d7e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8015d82:	e71b      	b.n	8015bbc <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x184>
        for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 8015d84:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015d88:	3301      	adds	r3, #1
 8015d8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8015d8e:	e70c      	b.n	8015baa <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x172>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8015d90:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8015d94:	3301      	adds	r3, #1
 8015d96:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8015d9a:	e6fd      	b.n	8015b98 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x160>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8015d9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8015da0:	3301      	adds	r3, #1
 8015da2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8015da6:	e6ee      	b.n	8015b86 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x14e>
  for (int batch = 0; batch < batches; ++batch) {
 8015da8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8015dac:	3301      	adds	r3, #1
 8015dae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8015db2:	e6df      	b.n	8015b74 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x13c>
          }
        }
      }
    }
  }
}
 8015db4:	bf00      	nop
 8015db6:	37a4      	adds	r7, #164	; 0xa4
 8015db8:	46bd      	mov	sp, r7
 8015dba:	bd90      	pop	{r4, r7, pc}

08015dbc <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:

  // Index to buffer for optimizations if applicable.
  int buffer_idx;
};

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 8015dbc:	b580      	push	{r7, lr}
 8015dbe:	b084      	sub	sp, #16
 8015dc0:	af00      	add	r7, sp, #0
 8015dc2:	60f8      	str	r0, [r7, #12]
 8015dc4:	60b9      	str	r1, [r7, #8]
 8015dc6:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 8015dc8:	68fb      	ldr	r3, [r7, #12]
 8015dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015dcc:	2b00      	cmp	r3, #0
 8015dce:	d101      	bne.n	8015dd4 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0x18>
 8015dd0:	f00f fe39 	bl	8025a46 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 8015dd4:	68fb      	ldr	r3, [r7, #12]
 8015dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015dd8:	2138      	movs	r1, #56	; 0x38
 8015dda:	68f8      	ldr	r0, [r7, #12]
 8015ddc:	4798      	blx	r3
 8015dde:	4603      	mov	r3, r0
}
 8015de0:	4618      	mov	r0, r3
 8015de2:	3710      	adds	r7, #16
 8015de4:	46bd      	mov	sp, r7
 8015de6:	bd80      	pop	{r7, pc}

08015de8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 8015de8:	b5b0      	push	{r4, r5, r7, lr}
 8015dea:	b0c6      	sub	sp, #280	; 0x118
 8015dec:	af08      	add	r7, sp, #32
 8015dee:	6078      	str	r0, [r7, #4]
 8015df0:	6039      	str	r1, [r7, #0]
 8015df2:	2400      	movs	r4, #0
  TFLITE_DCHECK(node->user_data != nullptr);
 8015df4:	683b      	ldr	r3, [r7, #0]
 8015df6:	691b      	ldr	r3, [r3, #16]
 8015df8:	2b00      	cmp	r3, #0
 8015dfa:	d101      	bne.n	8015e00 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x18>
 8015dfc:	f00f fe23 	bl	8025a46 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 8015e00:	683b      	ldr	r3, [r7, #0]
 8015e02:	695b      	ldr	r3, [r3, #20]
 8015e04:	2b00      	cmp	r3, #0
 8015e06:	d101      	bne.n	8015e0c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x24>
 8015e08:	f00f fe1d 	bl	8025a46 <abort>

  OpData* data = static_cast<OpData*>(node->user_data);
 8015e0c:	683b      	ldr	r3, [r7, #0]
 8015e0e:	691b      	ldr	r3, [r3, #16]
 8015e10:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  const auto& params =
 8015e14:	683b      	ldr	r3, [r7, #0]
 8015e16:	695b      	ldr	r3, [r3, #20]
 8015e18:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
      *(reinterpret_cast<TfLiteDepthwiseConvParams*>(node->builtin_data));

  const TfLiteTensor* input =
      GetInput(context, node, kDepthwiseConvInputTensor);
 8015e1c:	4baa      	ldr	r3, [pc, #680]	; (80160c8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e0>)
 8015e1e:	681b      	ldr	r3, [r3, #0]
 8015e20:	461a      	mov	r2, r3
 8015e22:	6839      	ldr	r1, [r7, #0]
 8015e24:	6878      	ldr	r0, [r7, #4]
 8015e26:	f7f5 fa75 	bl	800b314 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8015e2a:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
  TF_LITE_ENSURE(context, input != nullptr);
 8015e2e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8015e32:	2b00      	cmp	r3, #0
 8015e34:	d10a      	bne.n	8015e4c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x64>
 8015e36:	687b      	ldr	r3, [r7, #4]
 8015e38:	695c      	ldr	r4, [r3, #20]
 8015e3a:	4ba4      	ldr	r3, [pc, #656]	; (80160cc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e4>)
 8015e3c:	9300      	str	r3, [sp, #0]
 8015e3e:	2339      	movs	r3, #57	; 0x39
 8015e40:	4aa3      	ldr	r2, [pc, #652]	; (80160d0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e8>)
 8015e42:	49a4      	ldr	r1, [pc, #656]	; (80160d4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2ec>)
 8015e44:	6878      	ldr	r0, [r7, #4]
 8015e46:	47a0      	blx	r4
 8015e48:	2401      	movs	r4, #1
 8015e4a:	e22a      	b.n	80162a2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x4ba>
  const TfLiteTensor* filter =
      GetInput(context, node, kDepthwiseConvWeightsTensor);
 8015e4c:	4ba2      	ldr	r3, [pc, #648]	; (80160d8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2f0>)
 8015e4e:	681b      	ldr	r3, [r3, #0]
 8015e50:	461a      	mov	r2, r3
 8015e52:	6839      	ldr	r1, [r7, #0]
 8015e54:	6878      	ldr	r0, [r7, #4]
 8015e56:	f7f5 fa5d 	bl	800b314 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8015e5a:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
  TF_LITE_ENSURE(context, filter != nullptr);
 8015e5e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8015e62:	2b00      	cmp	r3, #0
 8015e64:	d10a      	bne.n	8015e7c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x94>
 8015e66:	687b      	ldr	r3, [r7, #4]
 8015e68:	695c      	ldr	r4, [r3, #20]
 8015e6a:	4b9c      	ldr	r3, [pc, #624]	; (80160dc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2f4>)
 8015e6c:	9300      	str	r3, [sp, #0]
 8015e6e:	233c      	movs	r3, #60	; 0x3c
 8015e70:	4a97      	ldr	r2, [pc, #604]	; (80160d0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e8>)
 8015e72:	4998      	ldr	r1, [pc, #608]	; (80160d4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2ec>)
 8015e74:	6878      	ldr	r0, [r7, #4]
 8015e76:	47a0      	blx	r4
 8015e78:	2401      	movs	r4, #1
 8015e7a:	e212      	b.n	80162a2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x4ba>
  TfLiteTensor* output = GetOutput(context, node, kDepthwiseConvOutputTensor);
 8015e7c:	4b98      	ldr	r3, [pc, #608]	; (80160e0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2f8>)
 8015e7e:	681b      	ldr	r3, [r3, #0]
 8015e80:	461a      	mov	r2, r3
 8015e82:	6839      	ldr	r1, [r7, #0]
 8015e84:	6878      	ldr	r0, [r7, #4]
 8015e86:	f7f5 fa55 	bl	800b334 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 8015e8a:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  TF_LITE_ENSURE(context, output != nullptr);
 8015e8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015e92:	2b00      	cmp	r3, #0
 8015e94:	d10a      	bne.n	8015eac <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xc4>
 8015e96:	687b      	ldr	r3, [r7, #4]
 8015e98:	695c      	ldr	r4, [r3, #20]
 8015e9a:	4b92      	ldr	r3, [pc, #584]	; (80160e4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2fc>)
 8015e9c:	9300      	str	r3, [sp, #0]
 8015e9e:	233e      	movs	r3, #62	; 0x3e
 8015ea0:	4a8b      	ldr	r2, [pc, #556]	; (80160d0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e8>)
 8015ea2:	498c      	ldr	r1, [pc, #560]	; (80160d4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2ec>)
 8015ea4:	6878      	ldr	r0, [r7, #4]
 8015ea6:	47a0      	blx	r4
 8015ea8:	2401      	movs	r4, #1
 8015eaa:	e1fa      	b.n	80162a2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x4ba>

  const TfLiteType data_type = input->type;
 8015eac:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8015eb0:	781b      	ldrb	r3, [r3, #0]
 8015eb2:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
  int input_width = SizeOfDimension(input, 2);
 8015eb6:	2102      	movs	r1, #2
 8015eb8:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 8015ebc:	f7f5 f963 	bl	800b186 <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>
 8015ec0:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
  int input_height = SizeOfDimension(input, 1);
 8015ec4:	2101      	movs	r1, #1
 8015ec6:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 8015eca:	f7f5 f95c 	bl	800b186 <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>
 8015ece:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
  int filter_width = SizeOfDimension(filter, 2);
 8015ed2:	2102      	movs	r1, #2
 8015ed4:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8015ed8:	f7f5 f955 	bl	800b186 <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>
 8015edc:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  int filter_height = SizeOfDimension(filter, 1);
 8015ee0:	2101      	movs	r1, #1
 8015ee2:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8015ee6:	f7f5 f94e 	bl	800b186 <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>
 8015eea:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
  int output_width = SizeOfDimension(output, 2);
 8015eee:	2102      	movs	r1, #2
 8015ef0:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 8015ef4:	f7f5 f947 	bl	800b186 <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>
 8015ef8:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
  int output_height = SizeOfDimension(output, 1);
 8015efc:	2101      	movs	r1, #1
 8015efe:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 8015f02:	f7f5 f940 	bl	800b186 <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>
 8015f06:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8

  if (input->type == kTfLiteInt8) {
 8015f0a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8015f0e:	781b      	ldrb	r3, [r3, #0]
 8015f10:	2b09      	cmp	r3, #9
 8015f12:	f040 808f 	bne.w	8016034 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x24c>
    TF_LITE_ENSURE_EQ(context, filter->quantization.type,
 8015f16:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8015f1a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015f1e:	2b01      	cmp	r3, #1
 8015f20:	d014      	beq.n	8015f4c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x164>
 8015f22:	687b      	ldr	r3, [r7, #4]
 8015f24:	695c      	ldr	r4, [r3, #20]
 8015f26:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8015f2a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015f2e:	461a      	mov	r2, r3
 8015f30:	2301      	movs	r3, #1
 8015f32:	9303      	str	r3, [sp, #12]
 8015f34:	9202      	str	r2, [sp, #8]
 8015f36:	4b6c      	ldr	r3, [pc, #432]	; (80160e8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x300>)
 8015f38:	9301      	str	r3, [sp, #4]
 8015f3a:	4b6c      	ldr	r3, [pc, #432]	; (80160ec <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x304>)
 8015f3c:	9300      	str	r3, [sp, #0]
 8015f3e:	2349      	movs	r3, #73	; 0x49
 8015f40:	4a63      	ldr	r2, [pc, #396]	; (80160d0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e8>)
 8015f42:	496b      	ldr	r1, [pc, #428]	; (80160f0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x308>)
 8015f44:	6878      	ldr	r0, [r7, #4]
 8015f46:	47a0      	blx	r4
 8015f48:	2401      	movs	r4, #1
 8015f4a:	e1aa      	b.n	80162a2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x4ba>
                      kTfLiteAffineQuantization);

    // All per-channel quantized tensors need valid zero point and scale arrays.
    const auto* affine_quantization =
 8015f4c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8015f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015f52:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
        reinterpret_cast<TfLiteAffineQuantization*>(
            filter->quantization.params);
    TF_LITE_ENSURE(context, affine_quantization);
 8015f56:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8015f5a:	2b00      	cmp	r3, #0
 8015f5c:	d10a      	bne.n	8015f74 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x18c>
 8015f5e:	687b      	ldr	r3, [r7, #4]
 8015f60:	695c      	ldr	r4, [r3, #20]
 8015f62:	4b64      	ldr	r3, [pc, #400]	; (80160f4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x30c>)
 8015f64:	9300      	str	r3, [sp, #0]
 8015f66:	2350      	movs	r3, #80	; 0x50
 8015f68:	4a59      	ldr	r2, [pc, #356]	; (80160d0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e8>)
 8015f6a:	495a      	ldr	r1, [pc, #360]	; (80160d4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2ec>)
 8015f6c:	6878      	ldr	r0, [r7, #4]
 8015f6e:	47a0      	blx	r4
 8015f70:	2401      	movs	r4, #1
 8015f72:	e196      	b.n	80162a2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x4ba>
    TF_LITE_ENSURE(context, affine_quantization->scale);
 8015f74:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8015f78:	681b      	ldr	r3, [r3, #0]
 8015f7a:	2b00      	cmp	r3, #0
 8015f7c:	d10a      	bne.n	8015f94 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1ac>
 8015f7e:	687b      	ldr	r3, [r7, #4]
 8015f80:	695c      	ldr	r4, [r3, #20]
 8015f82:	4b5d      	ldr	r3, [pc, #372]	; (80160f8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x310>)
 8015f84:	9300      	str	r3, [sp, #0]
 8015f86:	2351      	movs	r3, #81	; 0x51
 8015f88:	4a51      	ldr	r2, [pc, #324]	; (80160d0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e8>)
 8015f8a:	4952      	ldr	r1, [pc, #328]	; (80160d4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2ec>)
 8015f8c:	6878      	ldr	r0, [r7, #4]
 8015f8e:	47a0      	blx	r4
 8015f90:	2401      	movs	r4, #1
 8015f92:	e186      	b.n	80162a2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x4ba>
    TF_LITE_ENSURE(context, affine_quantization->zero_point);
 8015f94:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8015f98:	685b      	ldr	r3, [r3, #4]
 8015f9a:	2b00      	cmp	r3, #0
 8015f9c:	d10a      	bne.n	8015fb4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1cc>
 8015f9e:	687b      	ldr	r3, [r7, #4]
 8015fa0:	695c      	ldr	r4, [r3, #20]
 8015fa2:	4b56      	ldr	r3, [pc, #344]	; (80160fc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x314>)
 8015fa4:	9300      	str	r3, [sp, #0]
 8015fa6:	2352      	movs	r3, #82	; 0x52
 8015fa8:	4a49      	ldr	r2, [pc, #292]	; (80160d0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e8>)
 8015faa:	494a      	ldr	r1, [pc, #296]	; (80160d4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2ec>)
 8015fac:	6878      	ldr	r0, [r7, #4]
 8015fae:	47a0      	blx	r4
 8015fb0:	2401      	movs	r4, #1
 8015fb2:	e176      	b.n	80162a2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x4ba>
    TF_LITE_ENSURE(
 8015fb4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8015fb8:	681b      	ldr	r3, [r3, #0]
 8015fba:	681b      	ldr	r3, [r3, #0]
 8015fbc:	2b01      	cmp	r3, #1
 8015fbe:	d018      	beq.n	8015ff2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x20a>
 8015fc0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8015fc4:	681b      	ldr	r3, [r3, #0]
 8015fc6:	681a      	ldr	r2, [r3, #0]
 8015fc8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8015fcc:	6899      	ldr	r1, [r3, #8]
 8015fce:	4b4c      	ldr	r3, [pc, #304]	; (8016100 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x318>)
 8015fd0:	681b      	ldr	r3, [r3, #0]
 8015fd2:	009b      	lsls	r3, r3, #2
 8015fd4:	440b      	add	r3, r1
 8015fd6:	685b      	ldr	r3, [r3, #4]
 8015fd8:	429a      	cmp	r2, r3
 8015fda:	d00a      	beq.n	8015ff2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x20a>
 8015fdc:	687b      	ldr	r3, [r7, #4]
 8015fde:	695c      	ldr	r4, [r3, #20]
 8015fe0:	4b48      	ldr	r3, [pc, #288]	; (8016104 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x31c>)
 8015fe2:	9300      	str	r3, [sp, #0]
 8015fe4:	2353      	movs	r3, #83	; 0x53
 8015fe6:	4a3a      	ldr	r2, [pc, #232]	; (80160d0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e8>)
 8015fe8:	493a      	ldr	r1, [pc, #232]	; (80160d4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2ec>)
 8015fea:	6878      	ldr	r0, [r7, #4]
 8015fec:	47a0      	blx	r4
 8015fee:	2401      	movs	r4, #1
 8015ff0:	e157      	b.n	80162a2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x4ba>
        context, affine_quantization->scale->size == 1 ||
                     affine_quantization->scale->size ==
                         filter->dims->data[kDepthwiseConvQuantizedDimension]);
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size,
 8015ff2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8015ff6:	681b      	ldr	r3, [r3, #0]
 8015ff8:	681a      	ldr	r2, [r3, #0]
 8015ffa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8015ffe:	685b      	ldr	r3, [r3, #4]
 8016000:	681b      	ldr	r3, [r3, #0]
 8016002:	429a      	cmp	r2, r3
 8016004:	d016      	beq.n	8016034 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x24c>
 8016006:	687b      	ldr	r3, [r7, #4]
 8016008:	695c      	ldr	r4, [r3, #20]
 801600a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801600e:	681b      	ldr	r3, [r3, #0]
 8016010:	681b      	ldr	r3, [r3, #0]
 8016012:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8016016:	6852      	ldr	r2, [r2, #4]
 8016018:	6812      	ldr	r2, [r2, #0]
 801601a:	9203      	str	r2, [sp, #12]
 801601c:	9302      	str	r3, [sp, #8]
 801601e:	4b3a      	ldr	r3, [pc, #232]	; (8016108 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x320>)
 8016020:	9301      	str	r3, [sp, #4]
 8016022:	4b3a      	ldr	r3, [pc, #232]	; (801610c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x324>)
 8016024:	9300      	str	r3, [sp, #0]
 8016026:	2357      	movs	r3, #87	; 0x57
 8016028:	4a29      	ldr	r2, [pc, #164]	; (80160d0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e8>)
 801602a:	4931      	ldr	r1, [pc, #196]	; (80160f0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x308>)
 801602c:	6878      	ldr	r0, [r7, #4]
 801602e:	47a0      	blx	r4
 8016030:	2401      	movs	r4, #1
 8016032:	e136      	b.n	80162a2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x4ba>
                      affine_quantization->zero_point->size);
  }

  // Allocate memory for per-channel quantization parameters
  const int num_channels = filter->dims->data[kDepthwiseConvQuantizedDimension];
 8016034:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8016038:	689a      	ldr	r2, [r3, #8]
 801603a:	4b31      	ldr	r3, [pc, #196]	; (8016100 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x318>)
 801603c:	681b      	ldr	r3, [r3, #0]
 801603e:	009b      	lsls	r3, r3, #2
 8016040:	4413      	add	r3, r2
 8016042:	685b      	ldr	r3, [r3, #4]
 8016044:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

  data->reference_op_data.per_channel_output_multiplier =
      reinterpret_cast<int32_t*>(context->AllocatePersistentBuffer(
 8016048:	687b      	ldr	r3, [r7, #4]
 801604a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          context, num_channels * sizeof(int32_t)));
 801604c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
      reinterpret_cast<int32_t*>(context->AllocatePersistentBuffer(
 8016050:	0092      	lsls	r2, r2, #2
 8016052:	4611      	mov	r1, r2
 8016054:	6878      	ldr	r0, [r7, #4]
 8016056:	4798      	blx	r3
 8016058:	4602      	mov	r2, r0
  data->reference_op_data.per_channel_output_multiplier =
 801605a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801605e:	625a      	str	r2, [r3, #36]	; 0x24
  data->reference_op_data.per_channel_output_shift =
      reinterpret_cast<int32_t*>(context->AllocatePersistentBuffer(
 8016060:	687b      	ldr	r3, [r7, #4]
 8016062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          context, num_channels * sizeof(int32_t)));
 8016064:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
      reinterpret_cast<int32_t*>(context->AllocatePersistentBuffer(
 8016068:	0092      	lsls	r2, r2, #2
 801606a:	4611      	mov	r1, r2
 801606c:	6878      	ldr	r0, [r7, #4]
 801606e:	4798      	blx	r3
 8016070:	4602      	mov	r2, r0
  data->reference_op_data.per_channel_output_shift =
 8016072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8016076:	629a      	str	r2, [r3, #40]	; 0x28

  TF_LITE_ENSURE_STATUS(CalculateOpDataDepthwiseConv(
 8016078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801607c:	9306      	str	r3, [sp, #24]
 801607e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8016082:	9305      	str	r3, [sp, #20]
 8016084:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8016088:	9304      	str	r3, [sp, #16]
 801608a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801608e:	9303      	str	r3, [sp, #12]
 8016090:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8016094:	9302      	str	r3, [sp, #8]
 8016096:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801609a:	9301      	str	r3, [sp, #4]
 801609c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80160a0:	9300      	str	r3, [sp, #0]
 80160a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80160a6:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 80160aa:	6839      	ldr	r1, [r7, #0]
 80160ac:	6878      	ldr	r0, [r7, #4]
 80160ae:	f7fc fa3b 	bl	8012528 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>
 80160b2:	4603      	mov	r3, r0
 80160b4:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
 80160b8:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 80160bc:	2b00      	cmp	r3, #0
 80160be:	d027      	beq.n	8016110 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x328>
 80160c0:	f897 40bf 	ldrb.w	r4, [r7, #191]	; 0xbf
 80160c4:	e0ed      	b.n	80162a2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x4ba>
 80160c6:	bf00      	nop
 80160c8:	0802ca90 	.word	0x0802ca90
 80160cc:	0802bbcc 	.word	0x0802bbcc
 80160d0:	0802bb68 	.word	0x0802bb68
 80160d4:	0802bbb4 	.word	0x0802bbb4
 80160d8:	0802ca94 	.word	0x0802ca94
 80160dc:	0802bbe0 	.word	0x0802bbe0
 80160e0:	0802ca9c 	.word	0x0802ca9c
 80160e4:	0802bbf4 	.word	0x0802bbf4
 80160e8:	0802bc24 	.word	0x0802bc24
 80160ec:	0802bc40 	.word	0x0802bc40
 80160f0:	0802bc08 	.word	0x0802bc08
 80160f4:	0802bc5c 	.word	0x0802bc5c
 80160f8:	0802bc70 	.word	0x0802bc70
 80160fc:	0802bc8c 	.word	0x0802bc8c
 8016100:	0802caa0 	.word	0x0802caa0
 8016104:	0802bcac 	.word	0x0802bcac
 8016108:	0802bd30 	.word	0x0802bd30
 801610c:	0802bd58 	.word	0x0802bd58
      context, node, params, input_width, input_height, filter_width,
      filter_height, output_width, output_height, data_type,
      &data->reference_op_data));

  if (input->type == kTfLiteInt8) {
 8016110:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8016114:	781b      	ldrb	r3, [r3, #0]
 8016116:	2b09      	cmp	r3, #9
 8016118:	f040 80c2 	bne.w	80162a0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x4b8>
    RuntimeShape input_shape = GetTensorShape(input);
 801611c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8016120:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8016124:	4618      	mov	r0, r3
 8016126:	f7f5 ff22 	bl	800bf6e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    RuntimeShape output_shape = GetTensorShape(output);
 801612a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 801612e:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8016132:	4618      	mov	r0, r3
 8016134:	f7f5 ff1b 	bl	800bf6e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    RuntimeShape filter_shape = GetTensorShape(filter);
 8016138:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801613c:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8016140:	4618      	mov	r0, r3
 8016142:	f7f5 ff14 	bl	800bf6e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 8016146:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801614a:	4618      	mov	r0, r3
 801614c:	f7f5 feab 	bl	800bea6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8016150:	4603      	mov	r3, r0
 8016152:	2b04      	cmp	r3, #4
 8016154:	d001      	beq.n	801615a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x372>
 8016156:	f00f fc76 	bl	8025a46 <abort>
    TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 801615a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801615e:	4618      	mov	r0, r3
 8016160:	f7f5 fea1 	bl	800bea6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8016164:	4603      	mov	r3, r0
 8016166:	2b04      	cmp	r3, #4
 8016168:	d001      	beq.n	801616e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x386>
 801616a:	f00f fc6c 	bl	8025a46 <abort>
    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 801616e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8016172:	4618      	mov	r0, r3
 8016174:	f7f5 fe97 	bl	800bea6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8016178:	4603      	mov	r3, r0
 801617a:	2b04      	cmp	r3, #4
 801617c:	d001      	beq.n	8016182 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x39a>
 801617e:	f00f fc62 	bl	8025a46 <abort>

    const int batch_size = MatchingDim(input_shape, 0, output_shape, 0);
 8016182:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8016186:	f107 0094 	add.w	r0, r7, #148	; 0x94
 801618a:	2300      	movs	r3, #0
 801618c:	2100      	movs	r1, #0
 801618e:	f7fb fe6d 	bl	8011e6c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8016192:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
    const int output_depth = MatchingDim(output_shape, 3, filter_shape, 3);
 8016196:	f107 0264 	add.w	r2, r7, #100	; 0x64
 801619a:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 801619e:	2303      	movs	r3, #3
 80161a0:	2103      	movs	r1, #3
 80161a2:	f7fb fe63 	bl	8011e6c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80161a6:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
    TFLITE_DCHECK_EQ(batch_size, 1); /* Only batch = 1 is supported */
 80161aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80161ae:	2b01      	cmp	r3, #1
 80161b0:	d001      	beq.n	80161b6 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3ce>
 80161b2:	f00f fc48 	bl	8025a46 <abort>

    cmsis_nn_dims input_dims;
    input_dims.n = batch_size;
 80161b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80161ba:	657b      	str	r3, [r7, #84]	; 0x54
    input_dims.h = input_height;
 80161bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80161c0:	65bb      	str	r3, [r7, #88]	; 0x58
    input_dims.w = input_width;
 80161c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80161c6:	65fb      	str	r3, [r7, #92]	; 0x5c
    input_dims.c = input_shape.Dims(3);
 80161c8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80161cc:	2103      	movs	r1, #3
 80161ce:	4618      	mov	r0, r3
 80161d0:	f7fa fd86 	bl	8010ce0 <_ZNK6tflite12RuntimeShape4DimsEi>
 80161d4:	4603      	mov	r3, r0
 80161d6:	663b      	str	r3, [r7, #96]	; 0x60

    cmsis_nn_dims filter_dims;
    filter_dims.n = 1;
 80161d8:	2301      	movs	r3, #1
 80161da:	647b      	str	r3, [r7, #68]	; 0x44
    filter_dims.h = filter_height;
 80161dc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80161e0:	64bb      	str	r3, [r7, #72]	; 0x48
    filter_dims.w = filter_width;
 80161e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80161e6:	64fb      	str	r3, [r7, #76]	; 0x4c
    filter_dims.c = output_depth;
 80161e8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80161ec:	653b      	str	r3, [r7, #80]	; 0x50

    cmsis_nn_dims output_dims;
    output_dims.n = batch_size;
 80161ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80161f2:	637b      	str	r3, [r7, #52]	; 0x34
    output_dims.h = output_height;
 80161f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80161f8:	63bb      	str	r3, [r7, #56]	; 0x38
    output_dims.w = output_width;
 80161fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80161fe:	63fb      	str	r3, [r7, #60]	; 0x3c
    output_dims.c = output_depth;
 8016200:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8016204:	643b      	str	r3, [r7, #64]	; 0x40

    cmsis_nn_dw_conv_params dw_conv_params;
    dw_conv_params.padding.h = data->reference_op_data.padding.height;
 8016206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801620a:	685b      	ldr	r3, [r3, #4]
 801620c:	623b      	str	r3, [r7, #32]
    dw_conv_params.padding.w = data->reference_op_data.padding.width;
 801620e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8016212:	681b      	ldr	r3, [r3, #0]
 8016214:	61fb      	str	r3, [r7, #28]

    const int32_t buf_size = arm_depthwise_conv_wrapper_s8_get_buffer_size(
 8016216:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801621a:	f107 0244 	add.w	r2, r7, #68	; 0x44
 801621e:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8016222:	f107 0008 	add.w	r0, r7, #8
 8016226:	f006 fe71 	bl	801cf0c <arm_depthwise_conv_wrapper_s8_get_buffer_size>
 801622a:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
        &dw_conv_params, &input_dims, &filter_dims, &output_dims);

    if (buf_size > 0) {
 801622e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8016232:	2b00      	cmp	r3, #0
 8016234:	dd13      	ble.n	801625e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x476>
      TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
 8016236:	687b      	ldr	r3, [r7, #4]
 8016238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801623a:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 801623e:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8016242:	3234      	adds	r2, #52	; 0x34
 8016244:	6878      	ldr	r0, [r7, #4]
 8016246:	4798      	blx	r3
 8016248:	4603      	mov	r3, r0
 801624a:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 801624e:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8016252:	2b00      	cmp	r3, #0
 8016254:	d008      	beq.n	8016268 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x480>
 8016256:	f897 40af 	ldrb.w	r4, [r7, #175]	; 0xaf
 801625a:	2500      	movs	r5, #0
 801625c:	e005      	b.n	801626a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x482>
          context, buf_size, &data->buffer_idx));
    } else {
      data->buffer_idx = -1;
 801625e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8016262:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016266:	635a      	str	r2, [r3, #52]	; 0x34
    RuntimeShape filter_shape = GetTensorShape(filter);
 8016268:	2501      	movs	r5, #1
 801626a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801626e:	4618      	mov	r0, r3
 8016270:	f7f5 fe03 	bl	800be7a <_ZN6tflite12RuntimeShapeD1Ev>
 8016274:	2d01      	cmp	r5, #1
 8016276:	d001      	beq.n	801627c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x494>
 8016278:	2500      	movs	r5, #0
 801627a:	e000      	b.n	801627e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x496>
    RuntimeShape output_shape = GetTensorShape(output);
 801627c:	2501      	movs	r5, #1
 801627e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8016282:	4618      	mov	r0, r3
 8016284:	f7f5 fdf9 	bl	800be7a <_ZN6tflite12RuntimeShapeD1Ev>
 8016288:	2d01      	cmp	r5, #1
 801628a:	d001      	beq.n	8016290 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x4a8>
 801628c:	2500      	movs	r5, #0
 801628e:	e000      	b.n	8016292 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x4aa>
    RuntimeShape input_shape = GetTensorShape(input);
 8016290:	2501      	movs	r5, #1
 8016292:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8016296:	4618      	mov	r0, r3
 8016298:	f7f5 fdef 	bl	800be7a <_ZN6tflite12RuntimeShapeD1Ev>
 801629c:	2d01      	cmp	r5, #1
 801629e:	d100      	bne.n	80162a2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x4ba>
    }
  }
  return kTfLiteOk;
 80162a0:	2400      	movs	r4, #0
 80162a2:	4623      	mov	r3, r4
}
 80162a4:	4618      	mov	r0, r3
 80162a6:	37f8      	adds	r7, #248	; 0xf8
 80162a8:	46bd      	mov	sp, r7
 80162aa:	bdb0      	pop	{r4, r5, r7, pc}

080162ac <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_>:
void EvalQuantizedPerChannel(TfLiteContext* context, TfLiteNode* node,
                             const TfLiteDepthwiseConvParams& params,
                             const OpData& data, const TfLiteEvalTensor* input,
                             const TfLiteEvalTensor* filter,
                             const TfLiteEvalTensor* bias,
                             TfLiteEvalTensor* output) {
 80162ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80162ae:	b0f1      	sub	sp, #452	; 0x1c4
 80162b0:	af08      	add	r7, sp, #32
 80162b2:	f107 0414 	add.w	r4, r7, #20
 80162b6:	6020      	str	r0, [r4, #0]
 80162b8:	f107 0010 	add.w	r0, r7, #16
 80162bc:	6001      	str	r1, [r0, #0]
 80162be:	f107 010c 	add.w	r1, r7, #12
 80162c2:	600a      	str	r2, [r1, #0]
 80162c4:	f107 0208 	add.w	r2, r7, #8
 80162c8:	6013      	str	r3, [r2, #0]
  cmsis_nn_dw_conv_params dw_conv_params;
  dw_conv_params.dilation.h = params.dilation_height_factor;
 80162ca:	f107 030c 	add.w	r3, r7, #12
 80162ce:	681b      	ldr	r3, [r3, #0]
 80162d0:	699b      	ldr	r3, [r3, #24]
 80162d2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  dw_conv_params.dilation.w = params.dilation_width_factor;
 80162d6:	f107 030c 	add.w	r3, r7, #12
 80162da:	681b      	ldr	r3, [r3, #0]
 80162dc:	695b      	ldr	r3, [r3, #20]
 80162de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  // Call to reference implementation can be removed when dilation is supported
  // in the optimized implementations.
  if (1 == dw_conv_params.dilation.h && 1 == dw_conv_params.dilation.w) {
 80162e2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80162e6:	2b01      	cmp	r3, #1
 80162e8:	f040 8170 	bne.w	80165cc <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_+0x320>
 80162ec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80162f0:	2b01      	cmp	r3, #1
 80162f2:	f040 816b 	bne.w	80165cc <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_+0x320>
    dw_conv_params.input_offset = -data.reference_op_data.input_zero_point;
 80162f6:	f107 0308 	add.w	r3, r7, #8
 80162fa:	681b      	ldr	r3, [r3, #0]
 80162fc:	691b      	ldr	r3, [r3, #16]
 80162fe:	425b      	negs	r3, r3
 8016300:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    dw_conv_params.output_offset = data.reference_op_data.output_zero_point;
 8016304:	f107 0308 	add.w	r3, r7, #8
 8016308:	681b      	ldr	r3, [r3, #0]
 801630a:	699b      	ldr	r3, [r3, #24]
 801630c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    dw_conv_params.stride.h = params.stride_height;
 8016310:	f107 030c 	add.w	r3, r7, #12
 8016314:	681b      	ldr	r3, [r3, #0]
 8016316:	689b      	ldr	r3, [r3, #8]
 8016318:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    dw_conv_params.stride.w = params.stride_width;
 801631c:	f107 030c 	add.w	r3, r7, #12
 8016320:	681b      	ldr	r3, [r3, #0]
 8016322:	685b      	ldr	r3, [r3, #4]
 8016324:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    dw_conv_params.padding.h = data.reference_op_data.padding.height;
 8016328:	f107 0308 	add.w	r3, r7, #8
 801632c:	681b      	ldr	r3, [r3, #0]
 801632e:	685b      	ldr	r3, [r3, #4]
 8016330:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    dw_conv_params.padding.w = data.reference_op_data.padding.width;
 8016334:	f107 0308 	add.w	r3, r7, #8
 8016338:	681b      	ldr	r3, [r3, #0]
 801633a:	681b      	ldr	r3, [r3, #0]
 801633c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    // TODO(b/130439627): Use calculated value for clamping.
    dw_conv_params.activation.min = std::numeric_limits<int8_t>::min();
 8016340:	f7f4 fed7 	bl	800b0f2 <_ZNSt14numeric_limitsIaE3minEv>
 8016344:	4603      	mov	r3, r0
 8016346:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    dw_conv_params.activation.max = std::numeric_limits<int8_t>::max();
 801634a:	f7f4 fedb 	bl	800b104 <_ZNSt14numeric_limitsIaE3maxEv>
 801634e:	4603      	mov	r3, r0
 8016350:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    dw_conv_params.ch_mult = params.depth_multiplier;
 8016354:	f107 030c 	add.w	r3, r7, #12
 8016358:	681b      	ldr	r3, [r3, #0]
 801635a:	68db      	ldr	r3, [r3, #12]
 801635c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

    cmsis_nn_per_channel_quant_params quant_params;
    quant_params.multiplier =
        data.reference_op_data.per_channel_output_multiplier;
 8016360:	f107 0308 	add.w	r3, r7, #8
 8016364:	681b      	ldr	r3, [r3, #0]
 8016366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    quant_params.multiplier =
 8016368:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    quant_params.shift = data.reference_op_data.per_channel_output_shift;
 801636c:	f107 0308 	add.w	r3, r7, #8
 8016370:	681b      	ldr	r3, [r3, #0]
 8016372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016374:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

    RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 8016378:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 801637c:	f8d7 11bc 	ldr.w	r1, [r7, #444]	; 0x1bc
 8016380:	4618      	mov	r0, r3
 8016382:	f7fc fa2c 	bl	80127de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 8016386:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801638a:	f8d7 11b8 	ldr.w	r1, [r7, #440]	; 0x1b8
 801638e:	4618      	mov	r0, r3
 8016390:	f7fc fa25 	bl	80127de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 8016394:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8016398:	f8d7 11c4 	ldr.w	r1, [r7, #452]	; 0x1c4
 801639c:	4618      	mov	r0, r3
 801639e:	f7fc fa1e 	bl	80127de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    RuntimeShape bias_shape = tflite::micro::GetTensorShape(bias);
 80163a2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80163a6:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 80163aa:	4618      	mov	r0, r3
 80163ac:	f7fc fa17 	bl	80127de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>

    TFLITE_DCHECK_LE(dw_conv_params.activation.min,
 80163b0:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 80163b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80163b8:	429a      	cmp	r2, r3
 80163ba:	dd01      	ble.n	80163c0 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_+0x114>
 80163bc:	f00f fb43 	bl	8025a46 <abort>
                     dw_conv_params.activation.max);

    const int batch_size = MatchingDim(input_shape, 0, output_shape, 0);
 80163c0:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 80163c4:	f107 0094 	add.w	r0, r7, #148	; 0x94
 80163c8:	2300      	movs	r3, #0
 80163ca:	2100      	movs	r1, #0
 80163cc:	f7fb fd4e 	bl	8011e6c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80163d0:	f8c7 019c 	str.w	r0, [r7, #412]	; 0x19c
    const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
 80163d4:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 80163d8:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 80163dc:	2303      	movs	r3, #3
 80163de:	2103      	movs	r1, #3
 80163e0:	f7fb fd44 	bl	8011e6c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80163e4:	f8c7 0198 	str.w	r0, [r7, #408]	; 0x198

    if (tflite::micro::GetTensorData<int8_t>(bias)) {
 80163e8:	f8d7 01c0 	ldr.w	r0, [r7, #448]	; 0x1c0
 80163ec:	f7fb fa4a 	bl	8011884 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 80163f0:	4603      	mov	r3, r0
 80163f2:	2b00      	cmp	r3, #0
 80163f4:	bf14      	ite	ne
 80163f6:	2301      	movne	r3, #1
 80163f8:	2300      	moveq	r3, #0
 80163fa:	b2db      	uxtb	r3, r3
 80163fc:	2b00      	cmp	r3, #0
 80163fe:	d00b      	beq.n	8016418 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_+0x16c>
      TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 8016400:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8016404:	4618      	mov	r0, r3
 8016406:	f7fa fca3 	bl	8010d50 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 801640a:	4602      	mov	r2, r0
 801640c:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8016410:	4293      	cmp	r3, r2
 8016412:	d001      	beq.n	8016418 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_+0x16c>
 8016414:	f00f fb17 	bl	8025a46 <abort>
    }

    cmsis_nn_dims input_dims;
    input_dims.n = batch_size;
 8016418:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801641c:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8016420:	601a      	str	r2, [r3, #0]
    input_dims.h = input_shape.Dims(1);
 8016422:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8016426:	2101      	movs	r1, #1
 8016428:	4618      	mov	r0, r3
 801642a:	f7fa fc59 	bl	8010ce0 <_ZNK6tflite12RuntimeShape4DimsEi>
 801642e:	4602      	mov	r2, r0
 8016430:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8016434:	605a      	str	r2, [r3, #4]
    input_dims.w = input_shape.Dims(2);
 8016436:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801643a:	2102      	movs	r1, #2
 801643c:	4618      	mov	r0, r3
 801643e:	f7fa fc4f 	bl	8010ce0 <_ZNK6tflite12RuntimeShape4DimsEi>
 8016442:	4602      	mov	r2, r0
 8016444:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8016448:	609a      	str	r2, [r3, #8]
    input_dims.c = input_shape.Dims(3);
 801644a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801644e:	2103      	movs	r1, #3
 8016450:	4618      	mov	r0, r3
 8016452:	f7fa fc45 	bl	8010ce0 <_ZNK6tflite12RuntimeShape4DimsEi>
 8016456:	4602      	mov	r2, r0
 8016458:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801645c:	60da      	str	r2, [r3, #12]

    cmsis_nn_dims filter_dims;
    filter_dims.n = filter_shape.Dims(0);
 801645e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8016462:	2100      	movs	r1, #0
 8016464:	4618      	mov	r0, r3
 8016466:	f7fa fc3b 	bl	8010ce0 <_ZNK6tflite12RuntimeShape4DimsEi>
 801646a:	4602      	mov	r2, r0
 801646c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8016470:	601a      	str	r2, [r3, #0]
    filter_dims.h = filter_shape.Dims(1);
 8016472:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8016476:	2101      	movs	r1, #1
 8016478:	4618      	mov	r0, r3
 801647a:	f7fa fc31 	bl	8010ce0 <_ZNK6tflite12RuntimeShape4DimsEi>
 801647e:	4602      	mov	r2, r0
 8016480:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8016484:	605a      	str	r2, [r3, #4]
    filter_dims.w = filter_shape.Dims(2);
 8016486:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 801648a:	2102      	movs	r1, #2
 801648c:	4618      	mov	r0, r3
 801648e:	f7fa fc27 	bl	8010ce0 <_ZNK6tflite12RuntimeShape4DimsEi>
 8016492:	4602      	mov	r2, r0
 8016494:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8016498:	609a      	str	r2, [r3, #8]
    filter_dims.c = output_depth;
 801649a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801649e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80164a2:	60da      	str	r2, [r3, #12]

    cmsis_nn_dims bias_dims;
    bias_dims.n = 1;
 80164a4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80164a8:	2201      	movs	r2, #1
 80164aa:	601a      	str	r2, [r3, #0]
    bias_dims.h = 1;
 80164ac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80164b0:	2201      	movs	r2, #1
 80164b2:	605a      	str	r2, [r3, #4]
    bias_dims.w = 1;
 80164b4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80164b8:	2201      	movs	r2, #1
 80164ba:	609a      	str	r2, [r3, #8]
    bias_dims.c = output_depth;
 80164bc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80164c0:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80164c4:	60da      	str	r2, [r3, #12]

    cmsis_nn_dims output_dims;
    output_dims.n = batch_size;
 80164c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80164ca:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80164ce:	601a      	str	r2, [r3, #0]
    output_dims.h = output_shape.Dims(1);
 80164d0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80164d4:	2101      	movs	r1, #1
 80164d6:	4618      	mov	r0, r3
 80164d8:	f7fa fc02 	bl	8010ce0 <_ZNK6tflite12RuntimeShape4DimsEi>
 80164dc:	4602      	mov	r2, r0
 80164de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80164e2:	605a      	str	r2, [r3, #4]
    output_dims.w = output_shape.Dims(2);
 80164e4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80164e8:	2102      	movs	r1, #2
 80164ea:	4618      	mov	r0, r3
 80164ec:	f7fa fbf8 	bl	8010ce0 <_ZNK6tflite12RuntimeShape4DimsEi>
 80164f0:	4602      	mov	r2, r0
 80164f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80164f6:	609a      	str	r2, [r3, #8]
    output_dims.c = output_depth;
 80164f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80164fc:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8016500:	60da      	str	r2, [r3, #12]

    cmsis_nn_context ctx;
    ctx.buf = nullptr;
 8016502:	f107 031c 	add.w	r3, r7, #28
 8016506:	2200      	movs	r2, #0
 8016508:	601a      	str	r2, [r3, #0]
    /* 'size' is unused */
    ctx.size = 0;
 801650a:	f107 031c 	add.w	r3, r7, #28
 801650e:	2200      	movs	r2, #0
 8016510:	605a      	str	r2, [r3, #4]

    if (data.buffer_idx > -1) {
 8016512:	f107 0308 	add.w	r3, r7, #8
 8016516:	681b      	ldr	r3, [r3, #0]
 8016518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801651a:	2b00      	cmp	r3, #0
 801651c:	db0f      	blt.n	801653e <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_+0x292>
      ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
 801651e:	f107 0314 	add.w	r3, r7, #20
 8016522:	681b      	ldr	r3, [r3, #0]
 8016524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016526:	f107 0208 	add.w	r2, r7, #8
 801652a:	6812      	ldr	r2, [r2, #0]
 801652c:	6b51      	ldr	r1, [r2, #52]	; 0x34
 801652e:	f107 0214 	add.w	r2, r7, #20
 8016532:	6810      	ldr	r0, [r2, #0]
 8016534:	4798      	blx	r3
 8016536:	4602      	mov	r2, r0
 8016538:	f107 031c 	add.w	r3, r7, #28
 801653c:	601a      	str	r2, [r3, #0]
    }

    TFLITE_DCHECK_EQ(
 801653e:	f8d7 01b8 	ldr.w	r0, [r7, #440]	; 0x1b8
 8016542:	f7fb f99f 	bl	8011884 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8016546:	4605      	mov	r5, r0
 8016548:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 801654c:	f7fb f99a 	bl	8011884 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8016550:	4606      	mov	r6, r0
 8016552:	f8d7 01c0 	ldr.w	r0, [r7, #448]	; 0x1c0
 8016556:	f7fb fc16 	bl	8011d86 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 801655a:	6078      	str	r0, [r7, #4]
 801655c:	f8d7 01c4 	ldr.w	r0, [r7, #452]	; 0x1c4
 8016560:	f7fb f99f 	bl	80118a2 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 8016564:	4603      	mov	r3, r0
 8016566:	f107 0454 	add.w	r4, r7, #84	; 0x54
 801656a:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 801656e:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 8016572:	f107 001c 	add.w	r0, r7, #28
 8016576:	9306      	str	r3, [sp, #24]
 8016578:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801657c:	9305      	str	r3, [sp, #20]
 801657e:	687b      	ldr	r3, [r7, #4]
 8016580:	9304      	str	r3, [sp, #16]
 8016582:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8016586:	9303      	str	r3, [sp, #12]
 8016588:	9602      	str	r6, [sp, #8]
 801658a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801658e:	9301      	str	r3, [sp, #4]
 8016590:	9500      	str	r5, [sp, #0]
 8016592:	4623      	mov	r3, r4
 8016594:	f006 fc57 	bl	801ce46 <arm_depthwise_conv_wrapper_s8>
 8016598:	4603      	mov	r3, r0
 801659a:	2b00      	cmp	r3, #0
 801659c:	d001      	beq.n	80165a2 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_+0x2f6>
 801659e:	f00f fa52 	bl	8025a46 <abort>
    RuntimeShape bias_shape = tflite::micro::GetTensorShape(bias);
 80165a2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80165a6:	4618      	mov	r0, r3
 80165a8:	f7f5 fc67 	bl	800be7a <_ZN6tflite12RuntimeShapeD1Ev>
    RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 80165ac:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80165b0:	4618      	mov	r0, r3
 80165b2:	f7f5 fc62 	bl	800be7a <_ZN6tflite12RuntimeShapeD1Ev>
    RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 80165b6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80165ba:	4618      	mov	r0, r3
 80165bc:	f7f5 fc5d 	bl	800be7a <_ZN6tflite12RuntimeShapeD1Ev>
    RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 80165c0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80165c4:	4618      	mov	r0, r3
 80165c6:	f7f5 fc58 	bl	800be7a <_ZN6tflite12RuntimeShapeD1Ev>
            &ctx, &dw_conv_params, &quant_params, &input_dims,
            tflite::micro::GetTensorData<int8_t>(input), &filter_dims,
            tflite::micro::GetTensorData<int8_t>(filter), &bias_dims,
            tflite::micro::GetTensorData<int32_t>(bias), &output_dims,
            tflite::micro::GetTensorData<int8_t>(output)),
        ARM_MATH_SUCCESS);
 80165ca:	e06e      	b.n	80166aa <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_+0x3fe>
  } else {
    reference_integer_ops::DepthwiseConvPerChannel(
        DepthwiseConvParamsQuantized(params, data.reference_op_data),
 80165cc:	f107 0308 	add.w	r3, r7, #8
 80165d0:	681a      	ldr	r2, [r3, #0]
 80165d2:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 80165d6:	f107 030c 	add.w	r3, r7, #12
 80165da:	6819      	ldr	r1, [r3, #0]
 80165dc:	f7fb ff4d 	bl	801247a <_ZN6tflite28DepthwiseConvParamsQuantizedERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE>
        data.reference_op_data.per_channel_output_multiplier,
 80165e0:	f107 0308 	add.w	r3, r7, #8
 80165e4:	681b      	ldr	r3, [r3, #0]
 80165e6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
        data.reference_op_data.per_channel_output_shift,
 80165e8:	f107 0308 	add.w	r3, r7, #8
 80165ec:	681b      	ldr	r3, [r3, #0]
 80165ee:	6a9d      	ldr	r5, [r3, #40]	; 0x28
        tflite::micro::GetTensorShape(input),
 80165f0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80165f4:	f8d7 11b8 	ldr.w	r1, [r7, #440]	; 0x1b8
 80165f8:	4618      	mov	r0, r3
 80165fa:	f7fc f8f0 	bl	80127de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    reference_integer_ops::DepthwiseConvPerChannel(
 80165fe:	f8d7 01b8 	ldr.w	r0, [r7, #440]	; 0x1b8
 8016602:	f7fb f93f 	bl	8011884 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8016606:	4606      	mov	r6, r0
        tflite::micro::GetTensorData<int8_t>(input),
        tflite::micro::GetTensorShape(filter),
 8016608:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 801660c:	f8d7 11bc 	ldr.w	r1, [r7, #444]	; 0x1bc
 8016610:	4618      	mov	r0, r3
 8016612:	f7fc f8e4 	bl	80127de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    reference_integer_ops::DepthwiseConvPerChannel(
 8016616:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 801661a:	f7fb f933 	bl	8011884 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 801661e:	6078      	str	r0, [r7, #4]
        tflite::micro::GetTensorData<int8_t>(filter),
        tflite::micro::GetTensorShape(bias),
 8016620:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8016624:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 8016628:	4618      	mov	r0, r3
 801662a:	f7fc f8d8 	bl	80127de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    reference_integer_ops::DepthwiseConvPerChannel(
 801662e:	f8d7 01c0 	ldr.w	r0, [r7, #448]	; 0x1c0
 8016632:	f7fb fba8 	bl	8011d86 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 8016636:	6038      	str	r0, [r7, #0]
        tflite::micro::GetTensorData<int32_t>(bias),
        tflite::micro::GetTensorShape(output),
 8016638:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 801663c:	f8d7 11c4 	ldr.w	r1, [r7, #452]	; 0x1c4
 8016640:	4618      	mov	r0, r3
 8016642:	f7fc f8cc 	bl	80127de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    reference_integer_ops::DepthwiseConvPerChannel(
 8016646:	f8d7 01c4 	ldr.w	r0, [r7, #452]	; 0x1c4
 801664a:	f7fb f92a 	bl	80118a2 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 801664e:	4603      	mov	r3, r0
 8016650:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8016654:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 8016658:	9306      	str	r3, [sp, #24]
 801665a:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 801665e:	9305      	str	r3, [sp, #20]
 8016660:	683b      	ldr	r3, [r7, #0]
 8016662:	9304      	str	r3, [sp, #16]
 8016664:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8016668:	9303      	str	r3, [sp, #12]
 801666a:	687b      	ldr	r3, [r7, #4]
 801666c:	9302      	str	r3, [sp, #8]
 801666e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8016672:	9301      	str	r3, [sp, #4]
 8016674:	9600      	str	r6, [sp, #0]
 8016676:	4613      	mov	r3, r2
 8016678:	462a      	mov	r2, r5
 801667a:	4621      	mov	r1, r4
 801667c:	f7ff f9dc 	bl	8015a38 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>
        tflite::micro::GetTensorShape(output),
 8016680:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8016684:	4618      	mov	r0, r3
 8016686:	f7f5 fbf8 	bl	800be7a <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorShape(bias),
 801668a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 801668e:	4618      	mov	r0, r3
 8016690:	f7f5 fbf3 	bl	800be7a <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorShape(filter),
 8016694:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8016698:	4618      	mov	r0, r3
 801669a:	f7f5 fbee 	bl	800be7a <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorShape(input),
 801669e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80166a2:	4618      	mov	r0, r3
 80166a4:	f7f5 fbe9 	bl	800be7a <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorData<int8_t>(output));
  }
}
 80166a8:	bf00      	nop
 80166aa:	bf00      	nop
 80166ac:	f507 77d2 	add.w	r7, r7, #420	; 0x1a4
 80166b0:	46bd      	mov	sp, r7
 80166b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080166b4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 80166b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80166b6:	b0b7      	sub	sp, #220	; 0xdc
 80166b8:	af06      	add	r7, sp, #24
 80166ba:	6078      	str	r0, [r7, #4]
 80166bc:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 80166be:	683b      	ldr	r3, [r7, #0]
 80166c0:	691b      	ldr	r3, [r3, #16]
 80166c2:	2b00      	cmp	r3, #0
 80166c4:	d101      	bne.n	80166ca <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x16>
 80166c6:	f00f f9be 	bl	8025a46 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 80166ca:	683b      	ldr	r3, [r7, #0]
 80166cc:	695b      	ldr	r3, [r3, #20]
 80166ce:	2b00      	cmp	r3, #0
 80166d0:	d101      	bne.n	80166d6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x22>
 80166d2:	f00f f9b8 	bl	8025a46 <abort>

  const auto& params =
 80166d6:	683b      	ldr	r3, [r7, #0]
 80166d8:	695b      	ldr	r3, [r3, #20]
 80166da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      *(reinterpret_cast<TfLiteDepthwiseConvParams*>(node->builtin_data));
  const OpData& data = *(static_cast<OpData*>(node->user_data));
 80166de:	683b      	ldr	r3, [r7, #0]
 80166e0:	691b      	ldr	r3, [r3, #16]
 80166e2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kDepthwiseConvOutputTensor);
 80166e6:	4b60      	ldr	r3, [pc, #384]	; (8016868 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1b4>)
 80166e8:	681b      	ldr	r3, [r3, #0]
 80166ea:	461a      	mov	r2, r3
 80166ec:	6839      	ldr	r1, [r7, #0]
 80166ee:	6878      	ldr	r0, [r7, #4]
 80166f0:	f7fa fbda 	bl	8010ea8 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 80166f4:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kDepthwiseConvInputTensor);
 80166f8:	4b5c      	ldr	r3, [pc, #368]	; (801686c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1b8>)
 80166fa:	681b      	ldr	r3, [r3, #0]
 80166fc:	461a      	mov	r2, r3
 80166fe:	6839      	ldr	r1, [r7, #0]
 8016700:	6878      	ldr	r0, [r7, #4]
 8016702:	f7fa fbc1 	bl	8010e88 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8016706:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kDepthwiseConvWeightsTensor);
 801670a:	4b59      	ldr	r3, [pc, #356]	; (8016870 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1bc>)
 801670c:	681b      	ldr	r3, [r3, #0]
 801670e:	461a      	mov	r2, r3
 8016710:	6839      	ldr	r1, [r7, #0]
 8016712:	6878      	ldr	r0, [r7, #4]
 8016714:	f7fa fbb8 	bl	8010e88 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8016718:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
  const TfLiteEvalTensor* bias =
      (NumInputs(node) == 3)
 801671c:	6838      	ldr	r0, [r7, #0]
 801671e:	f7fb fb18 	bl	8011d52 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 8016722:	4603      	mov	r3, r0
          ? tflite::micro::GetEvalInput(context, node, kDepthwiseConvBiasTensor)
 8016724:	2b03      	cmp	r3, #3
 8016726:	d108      	bne.n	801673a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x86>
 8016728:	4b52      	ldr	r3, [pc, #328]	; (8016874 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1c0>)
 801672a:	681b      	ldr	r3, [r3, #0]
 801672c:	461a      	mov	r2, r3
 801672e:	6839      	ldr	r1, [r7, #0]
 8016730:	6878      	ldr	r0, [r7, #4]
 8016732:	f7fa fba9 	bl	8010e88 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8016736:	4603      	mov	r3, r0
 8016738:	e000      	b.n	801673c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x88>
 801673a:	2300      	movs	r3, #0
          : nullptr;
 801673c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  switch (input->type) {  // Already know in/out types are same.
 8016740:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8016744:	7a1b      	ldrb	r3, [r3, #8]
 8016746:	2b01      	cmp	r3, #1
 8016748:	d002      	beq.n	8016750 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x9c>
 801674a:	2b09      	cmp	r3, #9
 801674c:	d061      	beq.n	8016812 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x15e>
 801674e:	e075      	b.n	801683c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x188>
    case kTfLiteFloat32: {
      tflite::reference_ops::DepthwiseConv(
          DepthwiseConvParamsFloat(params, data.reference_op_data),
 8016750:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8016754:	f107 0308 	add.w	r3, r7, #8
 8016758:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 801675c:	4618      	mov	r0, r3
 801675e:	f7fb fe4b 	bl	80123f8 <_ZN6tflite24DepthwiseConvParamsFloatERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE>
          tflite::micro::GetTensorShape(input),
 8016762:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016766:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 801676a:	4618      	mov	r0, r3
 801676c:	f7fc f837 	bl	80127de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::DepthwiseConv(
 8016770:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8016774:	f7fb f866 	bl	8011844 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 8016778:	4606      	mov	r6, r0
          tflite::micro::GetTensorData<float>(input),
          tflite::micro::GetTensorShape(filter),
 801677a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801677e:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8016782:	4618      	mov	r0, r3
 8016784:	f7fc f82b 	bl	80127de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::DepthwiseConv(
 8016788:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 801678c:	f7fb f85a 	bl	8011844 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 8016790:	4604      	mov	r4, r0
          tflite::micro::GetTensorData<float>(filter),
          tflite::micro::GetTensorShape(bias),
 8016792:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8016796:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 801679a:	4618      	mov	r0, r3
 801679c:	f7fc f81f 	bl	80127de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::DepthwiseConv(
 80167a0:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 80167a4:	f7fb f84e 	bl	8011844 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 80167a8:	4605      	mov	r5, r0
          tflite::micro::GetTensorData<float>(bias),
          tflite::micro::GetTensorShape(output),
 80167aa:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80167ae:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 80167b2:	4618      	mov	r0, r3
 80167b4:	f7fc f813 	bl	80127de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::DepthwiseConv(
 80167b8:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 80167bc:	f7fb f851 	bl	8011862 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 80167c0:	4603      	mov	r3, r0
 80167c2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80167c6:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80167ca:	f107 0008 	add.w	r0, r7, #8
 80167ce:	9304      	str	r3, [sp, #16]
 80167d0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80167d4:	9303      	str	r3, [sp, #12]
 80167d6:	9502      	str	r5, [sp, #8]
 80167d8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80167dc:	9301      	str	r3, [sp, #4]
 80167de:	9400      	str	r4, [sp, #0]
 80167e0:	4613      	mov	r3, r2
 80167e2:	4632      	mov	r2, r6
 80167e4:	f7fe ffa2 	bl	801572c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>
          tflite::micro::GetTensorShape(output),
 80167e8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80167ec:	4618      	mov	r0, r3
 80167ee:	f7f5 fb44 	bl	800be7a <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(bias),
 80167f2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80167f6:	4618      	mov	r0, r3
 80167f8:	f7f5 fb3f 	bl	800be7a <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(filter),
 80167fc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8016800:	4618      	mov	r0, r3
 8016802:	f7f5 fb3a 	bl	800be7a <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(input),
 8016806:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801680a:	4618      	mov	r0, r3
 801680c:	f7f5 fb35 	bl	800be7a <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorData<float>(output));
      break;
 8016810:	e025      	b.n	801685e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1aa>
    }
    case kTfLiteInt8:
      EvalQuantizedPerChannel(context, node, params, data, input, filter, bias,
 8016812:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8016816:	9303      	str	r3, [sp, #12]
 8016818:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801681c:	9302      	str	r3, [sp, #8]
 801681e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016822:	9301      	str	r3, [sp, #4]
 8016824:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8016828:	9300      	str	r3, [sp, #0]
 801682a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801682e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8016832:	6839      	ldr	r1, [r7, #0]
 8016834:	6878      	ldr	r0, [r7, #4]
 8016836:	f7ff fd39 	bl	80162ac <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_>
                              output);
      break;
 801683a:	e010      	b.n	801685e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1aa>
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 801683c:	687b      	ldr	r3, [r7, #4]
 801683e:	695c      	ldr	r4, [r3, #20]
 8016840:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8016844:	7a1b      	ldrb	r3, [r3, #8]
 8016846:	4618      	mov	r0, r3
 8016848:	f7f1 ff02 	bl	8008650 <TfLiteTypeGetName>
 801684c:	4602      	mov	r2, r0
 801684e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8016852:	7a1b      	ldrb	r3, [r3, #8]
 8016854:	4908      	ldr	r1, [pc, #32]	; (8016878 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1c4>)
 8016856:	6878      	ldr	r0, [r7, #4]
 8016858:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 801685a:	2301      	movs	r3, #1
 801685c:	e000      	b.n	8016860 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ac>
  }
  return kTfLiteOk;
 801685e:	2300      	movs	r3, #0
}
 8016860:	4618      	mov	r0, r3
 8016862:	37c4      	adds	r7, #196	; 0xc4
 8016864:	46bd      	mov	sp, r7
 8016866:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016868:	0802ca9c 	.word	0x0802ca9c
 801686c:	0802ca90 	.word	0x0802ca90
 8016870:	0802ca94 	.word	0x0802ca94
 8016874:	0802ca98 	.word	0x0802ca98
 8016878:	0802bd7c 	.word	0x0802bd7c

0801687c <_ZN6tflite26Register_DEPTHWISE_CONV_2DEv>:

}  // namespace

TfLiteRegistration Register_DEPTHWISE_CONV_2D() {
 801687c:	b4b0      	push	{r4, r5, r7}
 801687e:	b083      	sub	sp, #12
 8016880:	af00      	add	r7, sp, #0
 8016882:	6078      	str	r0, [r7, #4]
          /*prepare=*/Prepare,
          /*invoke=*/Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 8016884:	687b      	ldr	r3, [r7, #4]
 8016886:	4a07      	ldr	r2, [pc, #28]	; (80168a4 <_ZN6tflite26Register_DEPTHWISE_CONV_2DEv+0x28>)
 8016888:	461c      	mov	r4, r3
 801688a:	4615      	mov	r5, r2
 801688c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801688e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016890:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8016894:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8016898:	6878      	ldr	r0, [r7, #4]
 801689a:	370c      	adds	r7, #12
 801689c:	46bd      	mov	sp, r7
 801689e:	bcb0      	pop	{r4, r5, r7}
 80168a0:	4770      	bx	lr
 80168a2:	bf00      	nop
 80168a4:	0802bd98 	.word	0x0802bd98

080168a8 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
namespace reference_ops {

inline void AveragePool(const PoolParams& params,
                        const RuntimeShape& input_shape,
                        const float* input_data,
                        const RuntimeShape& output_shape, float* output_data) {
 80168a8:	b590      	push	{r4, r7, lr}
 80168aa:	ed2d 8b02 	vpush	{d8}
 80168ae:	b0a7      	sub	sp, #156	; 0x9c
 80168b0:	af02      	add	r7, sp, #8
 80168b2:	60f8      	str	r0, [r7, #12]
 80168b4:	60b9      	str	r1, [r7, #8]
 80168b6:	607a      	str	r2, [r7, #4]
 80168b8:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 80168ba:	68b8      	ldr	r0, [r7, #8]
 80168bc:	f7f5 faf3 	bl	800bea6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80168c0:	4603      	mov	r3, r0
 80168c2:	2b04      	cmp	r3, #4
 80168c4:	d001      	beq.n	80168ca <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x22>
 80168c6:	f00f f8be 	bl	8025a46 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 80168ca:	6838      	ldr	r0, [r7, #0]
 80168cc:	f7f5 faeb 	bl	800bea6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80168d0:	4603      	mov	r3, r0
 80168d2:	2b04      	cmp	r3, #4
 80168d4:	d001      	beq.n	80168da <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x32>
 80168d6:	f00f f8b6 	bl	8025a46 <abort>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 80168da:	2300      	movs	r3, #0
 80168dc:	683a      	ldr	r2, [r7, #0]
 80168de:	2100      	movs	r1, #0
 80168e0:	68b8      	ldr	r0, [r7, #8]
 80168e2:	f7fb fac3 	bl	8011e6c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80168e6:	66f8      	str	r0, [r7, #108]	; 0x6c
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 80168e8:	2303      	movs	r3, #3
 80168ea:	683a      	ldr	r2, [r7, #0]
 80168ec:	2103      	movs	r1, #3
 80168ee:	68b8      	ldr	r0, [r7, #8]
 80168f0:	f7fb fabc 	bl	8011e6c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80168f4:	66b8      	str	r0, [r7, #104]	; 0x68
  const int input_height = input_shape.Dims(1);
 80168f6:	2101      	movs	r1, #1
 80168f8:	68b8      	ldr	r0, [r7, #8]
 80168fa:	f7fa f9f1 	bl	8010ce0 <_ZNK6tflite12RuntimeShape4DimsEi>
 80168fe:	6678      	str	r0, [r7, #100]	; 0x64
  const int input_width = input_shape.Dims(2);
 8016900:	2102      	movs	r1, #2
 8016902:	68b8      	ldr	r0, [r7, #8]
 8016904:	f7fa f9ec 	bl	8010ce0 <_ZNK6tflite12RuntimeShape4DimsEi>
 8016908:	6638      	str	r0, [r7, #96]	; 0x60
  const int output_height = output_shape.Dims(1);
 801690a:	2101      	movs	r1, #1
 801690c:	6838      	ldr	r0, [r7, #0]
 801690e:	f7fa f9e7 	bl	8010ce0 <_ZNK6tflite12RuntimeShape4DimsEi>
 8016912:	65f8      	str	r0, [r7, #92]	; 0x5c
  const int output_width = output_shape.Dims(2);
 8016914:	2102      	movs	r1, #2
 8016916:	6838      	ldr	r0, [r7, #0]
 8016918:	f7fa f9e2 	bl	8010ce0 <_ZNK6tflite12RuntimeShape4DimsEi>
 801691c:	65b8      	str	r0, [r7, #88]	; 0x58
  const int stride_height = params.stride_height;
 801691e:	68fb      	ldr	r3, [r7, #12]
 8016920:	68db      	ldr	r3, [r3, #12]
 8016922:	657b      	str	r3, [r7, #84]	; 0x54
  const int stride_width = params.stride_width;
 8016924:	68fb      	ldr	r3, [r7, #12]
 8016926:	691b      	ldr	r3, [r3, #16]
 8016928:	653b      	str	r3, [r7, #80]	; 0x50
  for (int batch = 0; batch < batches; ++batch) {
 801692a:	2300      	movs	r3, #0
 801692c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8016930:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8016934:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016936:	429a      	cmp	r2, r3
 8016938:	f280 80f0 	bge.w	8016b1c <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x274>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 801693c:	2300      	movs	r3, #0
 801693e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8016942:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8016946:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016948:	429a      	cmp	r2, r3
 801694a:	f280 80e1 	bge.w	8016b10 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x268>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 801694e:	2300      	movs	r3, #0
 8016950:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8016954:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8016958:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801695a:	429a      	cmp	r2, r3
 801695c:	f280 80d2 	bge.w	8016b04 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x25c>
        for (int channel = 0; channel < depth; ++channel) {
 8016960:	2300      	movs	r3, #0
 8016962:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8016966:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801696a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801696c:	429a      	cmp	r2, r3
 801696e:	f280 80c3 	bge.w	8016af8 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x250>
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
 8016972:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8016976:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8016978:	fb02 f303 	mul.w	r3, r2, r3
 801697c:	68fa      	ldr	r2, [r7, #12]
 801697e:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
          const int in_x_origin =
 8016982:	1a9b      	subs	r3, r3, r2
 8016984:	64fb      	str	r3, [r7, #76]	; 0x4c
          const int in_y_origin =
              (out_y * stride_height) - params.padding_values.height;
 8016986:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801698a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801698c:	fb02 f303 	mul.w	r3, r2, r3
 8016990:	68fa      	ldr	r2, [r7, #12]
 8016992:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
          const int in_y_origin =
 8016996:	1a9b      	subs	r3, r3, r2
 8016998:	64bb      	str	r3, [r7, #72]	; 0x48
          // Compute the boundaries of the filter region clamped so as to
          // ensure that the filter window fits in the input array.
          const int filter_x_start = std::max(0, -in_x_origin);
 801699a:	2300      	movs	r3, #0
 801699c:	617b      	str	r3, [r7, #20]
 801699e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80169a0:	425b      	negs	r3, r3
 80169a2:	61bb      	str	r3, [r7, #24]
 80169a4:	f107 0218 	add.w	r2, r7, #24
 80169a8:	f107 0314 	add.w	r3, r7, #20
 80169ac:	4611      	mov	r1, r2
 80169ae:	4618      	mov	r0, r3
 80169b0:	f7f5 f8d4 	bl	800bb5c <_ZSt3maxIiERKT_S2_S2_>
 80169b4:	4603      	mov	r3, r0
 80169b6:	681b      	ldr	r3, [r3, #0]
 80169b8:	647b      	str	r3, [r7, #68]	; 0x44
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
 80169ba:	68fb      	ldr	r3, [r7, #12]
 80169bc:	f103 0018 	add.w	r0, r3, #24
 80169c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80169c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80169c4:	1ad3      	subs	r3, r2, r3
 80169c6:	61fb      	str	r3, [r7, #28]
 80169c8:	f107 031c 	add.w	r3, r7, #28
 80169cc:	4619      	mov	r1, r3
 80169ce:	f7fb fecc 	bl	801276a <_ZSt3minIiERKT_S2_S2_>
 80169d2:	4603      	mov	r3, r0
 80169d4:	681b      	ldr	r3, [r3, #0]
 80169d6:	643b      	str	r3, [r7, #64]	; 0x40
          const int filter_y_start = std::max(0, -in_y_origin);
 80169d8:	2300      	movs	r3, #0
 80169da:	623b      	str	r3, [r7, #32]
 80169dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80169de:	425b      	negs	r3, r3
 80169e0:	627b      	str	r3, [r7, #36]	; 0x24
 80169e2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80169e6:	f107 0320 	add.w	r3, r7, #32
 80169ea:	4611      	mov	r1, r2
 80169ec:	4618      	mov	r0, r3
 80169ee:	f7f5 f8b5 	bl	800bb5c <_ZSt3maxIiERKT_S2_S2_>
 80169f2:	4603      	mov	r3, r0
 80169f4:	681b      	ldr	r3, [r3, #0]
 80169f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
 80169f8:	68fb      	ldr	r3, [r7, #12]
 80169fa:	f103 0014 	add.w	r0, r3, #20
 80169fe:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8016a00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016a02:	1ad3      	subs	r3, r2, r3
 8016a04:	62bb      	str	r3, [r7, #40]	; 0x28
 8016a06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8016a0a:	4619      	mov	r1, r3
 8016a0c:	f7fb fead 	bl	801276a <_ZSt3minIiERKT_S2_S2_>
 8016a10:	4603      	mov	r3, r0
 8016a12:	681b      	ldr	r3, [r3, #0]
 8016a14:	63bb      	str	r3, [r7, #56]	; 0x38
          float total = 0.f;
 8016a16:	f04f 0300 	mov.w	r3, #0
 8016a1a:	67fb      	str	r3, [r7, #124]	; 0x7c
          float filter_count = 0;
 8016a1c:	f04f 0300 	mov.w	r3, #0
 8016a20:	67bb      	str	r3, [r7, #120]	; 0x78
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 8016a22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016a24:	677b      	str	r3, [r7, #116]	; 0x74
 8016a26:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8016a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a2a:	429a      	cmp	r2, r3
 8016a2c:	da33      	bge.n	8016a96 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1ee>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 8016a2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016a30:	673b      	str	r3, [r7, #112]	; 0x70
 8016a32:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8016a34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016a36:	429a      	cmp	r2, r3
 8016a38:	da29      	bge.n	8016a8e <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1e6>
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
 8016a3a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8016a3c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016a3e:	4413      	add	r3, r2
 8016a40:	637b      	str	r3, [r7, #52]	; 0x34
              const int in_y = in_y_origin + filter_y;
 8016a42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016a44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016a46:	4413      	add	r3, r2
 8016a48:	633b      	str	r3, [r7, #48]	; 0x30
              total +=
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
 8016a4a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016a4e:	9300      	str	r3, [sp, #0]
 8016a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016a52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016a54:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8016a58:	68b8      	ldr	r0, [r7, #8]
 8016a5a:	f7fb f9af 	bl	8011dbc <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8016a5e:	4603      	mov	r3, r0
 8016a60:	009b      	lsls	r3, r3, #2
 8016a62:	687a      	ldr	r2, [r7, #4]
 8016a64:	4413      	add	r3, r2
 8016a66:	edd3 7a00 	vldr	s15, [r3]
              total +=
 8016a6a:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8016a6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016a72:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
              filter_count++;
 8016a76:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8016a7a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016a7e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016a82:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 8016a86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016a88:	3301      	adds	r3, #1
 8016a8a:	673b      	str	r3, [r7, #112]	; 0x70
 8016a8c:	e7d1      	b.n	8016a32 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x18a>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 8016a8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016a90:	3301      	adds	r3, #1
 8016a92:	677b      	str	r3, [r7, #116]	; 0x74
 8016a94:	e7c7      	b.n	8016a26 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x17e>
            }
          }
          const float average = total / filter_count;
 8016a96:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 8016a9a:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8016a9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016aa2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
              ActivationFunctionWithMinMax(average, params.float_activation_min,
 8016aa6:	68fb      	ldr	r3, [r7, #12]
 8016aa8:	ed93 8a09 	vldr	s16, [r3, #36]	; 0x24
                                           params.float_activation_max);
 8016aac:	68fb      	ldr	r3, [r7, #12]
 8016aae:	edd3 8a0a 	vldr	s17, [r3, #40]	; 0x28
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
 8016ab2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016ab6:	9300      	str	r3, [sp, #0]
 8016ab8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8016abc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8016ac0:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8016ac4:	6838      	ldr	r0, [r7, #0]
 8016ac6:	f7fb f979 	bl	8011dbc <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8016aca:	4603      	mov	r3, r0
 8016acc:	009b      	lsls	r3, r3, #2
 8016ace:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8016ad2:	18d4      	adds	r4, r2, r3
              ActivationFunctionWithMinMax(average, params.float_activation_min,
 8016ad4:	eeb0 1a68 	vmov.f32	s2, s17
 8016ad8:	eef0 0a48 	vmov.f32	s1, s16
 8016adc:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8016ae0:	f7fb feb5 	bl	801284e <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>
 8016ae4:	eef0 7a40 	vmov.f32	s15, s0
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
 8016ae8:	edc4 7a00 	vstr	s15, [r4]
        for (int channel = 0; channel < depth; ++channel) {
 8016aec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016af0:	3301      	adds	r3, #1
 8016af2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8016af6:	e736      	b.n	8016966 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xbe>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8016af8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8016afc:	3301      	adds	r3, #1
 8016afe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8016b02:	e727      	b.n	8016954 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xac>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8016b04:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016b08:	3301      	adds	r3, #1
 8016b0a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8016b0e:	e718      	b.n	8016942 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x9a>
  for (int batch = 0; batch < batches; ++batch) {
 8016b10:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016b14:	3301      	adds	r3, #1
 8016b16:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8016b1a:	e709      	b.n	8016930 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x88>
        }
      }
    }
  }
}
 8016b1c:	bf00      	nop
 8016b1e:	3794      	adds	r7, #148	; 0x94
 8016b20:	46bd      	mov	sp, r7
 8016b22:	ecbd 8b02 	vpop	{d8}
 8016b26:	bd90      	pop	{r4, r7, pc}

08016b28 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph>:

inline void AveragePool(const PoolParams& params,
                        const RuntimeShape& input_shape,
                        const uint8_t* input_data,
                        const RuntimeShape& output_shape,
                        uint8_t* output_data) {
 8016b28:	b590      	push	{r4, r7, lr}
 8016b2a:	b0a5      	sub	sp, #148	; 0x94
 8016b2c:	af02      	add	r7, sp, #8
 8016b2e:	60f8      	str	r0, [r7, #12]
 8016b30:	60b9      	str	r1, [r7, #8]
 8016b32:	607a      	str	r2, [r7, #4]
 8016b34:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_LE(params.quantized_activation_min,
 8016b36:	68fb      	ldr	r3, [r7, #12]
 8016b38:	69da      	ldr	r2, [r3, #28]
 8016b3a:	68fb      	ldr	r3, [r7, #12]
 8016b3c:	6a1b      	ldr	r3, [r3, #32]
 8016b3e:	429a      	cmp	r2, r3
 8016b40:	dd01      	ble.n	8016b46 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x1e>
 8016b42:	f00e ff80 	bl	8025a46 <abort>
                   params.quantized_activation_max);
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 8016b46:	68b8      	ldr	r0, [r7, #8]
 8016b48:	f7f5 f9ad 	bl	800bea6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8016b4c:	4603      	mov	r3, r0
 8016b4e:	2b04      	cmp	r3, #4
 8016b50:	d001      	beq.n	8016b56 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x2e>
 8016b52:	f00e ff78 	bl	8025a46 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 8016b56:	6838      	ldr	r0, [r7, #0]
 8016b58:	f7f5 f9a5 	bl	800bea6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8016b5c:	4603      	mov	r3, r0
 8016b5e:	2b04      	cmp	r3, #4
 8016b60:	d001      	beq.n	8016b66 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x3e>
 8016b62:	f00e ff70 	bl	8025a46 <abort>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 8016b66:	2300      	movs	r3, #0
 8016b68:	683a      	ldr	r2, [r7, #0]
 8016b6a:	2100      	movs	r1, #0
 8016b6c:	68b8      	ldr	r0, [r7, #8]
 8016b6e:	f7fb f97d 	bl	8011e6c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8016b72:	66b8      	str	r0, [r7, #104]	; 0x68
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 8016b74:	2303      	movs	r3, #3
 8016b76:	683a      	ldr	r2, [r7, #0]
 8016b78:	2103      	movs	r1, #3
 8016b7a:	68b8      	ldr	r0, [r7, #8]
 8016b7c:	f7fb f976 	bl	8011e6c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8016b80:	6678      	str	r0, [r7, #100]	; 0x64
  const int input_height = input_shape.Dims(1);
 8016b82:	2101      	movs	r1, #1
 8016b84:	68b8      	ldr	r0, [r7, #8]
 8016b86:	f7fa f8ab 	bl	8010ce0 <_ZNK6tflite12RuntimeShape4DimsEi>
 8016b8a:	6638      	str	r0, [r7, #96]	; 0x60
  const int input_width = input_shape.Dims(2);
 8016b8c:	2102      	movs	r1, #2
 8016b8e:	68b8      	ldr	r0, [r7, #8]
 8016b90:	f7fa f8a6 	bl	8010ce0 <_ZNK6tflite12RuntimeShape4DimsEi>
 8016b94:	65f8      	str	r0, [r7, #92]	; 0x5c
  const int output_height = output_shape.Dims(1);
 8016b96:	2101      	movs	r1, #1
 8016b98:	6838      	ldr	r0, [r7, #0]
 8016b9a:	f7fa f8a1 	bl	8010ce0 <_ZNK6tflite12RuntimeShape4DimsEi>
 8016b9e:	65b8      	str	r0, [r7, #88]	; 0x58
  const int output_width = output_shape.Dims(2);
 8016ba0:	2102      	movs	r1, #2
 8016ba2:	6838      	ldr	r0, [r7, #0]
 8016ba4:	f7fa f89c 	bl	8010ce0 <_ZNK6tflite12RuntimeShape4DimsEi>
 8016ba8:	6578      	str	r0, [r7, #84]	; 0x54
  const int stride_height = params.stride_height;
 8016baa:	68fb      	ldr	r3, [r7, #12]
 8016bac:	68db      	ldr	r3, [r3, #12]
 8016bae:	653b      	str	r3, [r7, #80]	; 0x50
  const int stride_width = params.stride_width;
 8016bb0:	68fb      	ldr	r3, [r7, #12]
 8016bb2:	691b      	ldr	r3, [r3, #16]
 8016bb4:	64fb      	str	r3, [r7, #76]	; 0x4c
  for (int batch = 0; batch < batches; ++batch) {
 8016bb6:	2300      	movs	r3, #0
 8016bb8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8016bbc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8016bc0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016bc2:	429a      	cmp	r2, r3
 8016bc4:	f280 80e6 	bge.w	8016d94 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x26c>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8016bc8:	2300      	movs	r3, #0
 8016bca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8016bce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8016bd2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016bd4:	429a      	cmp	r2, r3
 8016bd6:	f280 80d7 	bge.w	8016d88 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x260>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8016bda:	2300      	movs	r3, #0
 8016bdc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8016bde:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8016be0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016be2:	429a      	cmp	r2, r3
 8016be4:	f280 80ca 	bge.w	8016d7c <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x254>
        for (int channel = 0; channel < depth; ++channel) {
 8016be8:	2300      	movs	r3, #0
 8016bea:	67bb      	str	r3, [r7, #120]	; 0x78
 8016bec:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8016bee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016bf0:	429a      	cmp	r2, r3
 8016bf2:	f280 80bf 	bge.w	8016d74 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x24c>
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
 8016bf6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8016bf8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8016bfa:	fb02 f303 	mul.w	r3, r2, r3
 8016bfe:	68fa      	ldr	r2, [r7, #12]
 8016c00:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
          const int in_x_origin =
 8016c04:	1a9b      	subs	r3, r3, r2
 8016c06:	64bb      	str	r3, [r7, #72]	; 0x48
          const int in_y_origin =
              (out_y * stride_height) - params.padding_values.height;
 8016c08:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016c0c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8016c0e:	fb02 f303 	mul.w	r3, r2, r3
 8016c12:	68fa      	ldr	r2, [r7, #12]
 8016c14:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
          const int in_y_origin =
 8016c18:	1a9b      	subs	r3, r3, r2
 8016c1a:	647b      	str	r3, [r7, #68]	; 0x44
          // Compute the boundaries of the filter region clamped so as to
          // ensure that the filter window fits in the input array.
          const int filter_x_start = std::max(0, -in_x_origin);
 8016c1c:	2300      	movs	r3, #0
 8016c1e:	617b      	str	r3, [r7, #20]
 8016c20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016c22:	425b      	negs	r3, r3
 8016c24:	61bb      	str	r3, [r7, #24]
 8016c26:	f107 0218 	add.w	r2, r7, #24
 8016c2a:	f107 0314 	add.w	r3, r7, #20
 8016c2e:	4611      	mov	r1, r2
 8016c30:	4618      	mov	r0, r3
 8016c32:	f7f4 ff93 	bl	800bb5c <_ZSt3maxIiERKT_S2_S2_>
 8016c36:	4603      	mov	r3, r0
 8016c38:	681b      	ldr	r3, [r3, #0]
 8016c3a:	643b      	str	r3, [r7, #64]	; 0x40
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
 8016c3c:	68fb      	ldr	r3, [r7, #12]
 8016c3e:	f103 0018 	add.w	r0, r3, #24
 8016c42:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8016c44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016c46:	1ad3      	subs	r3, r2, r3
 8016c48:	61fb      	str	r3, [r7, #28]
 8016c4a:	f107 031c 	add.w	r3, r7, #28
 8016c4e:	4619      	mov	r1, r3
 8016c50:	f7fb fd8b 	bl	801276a <_ZSt3minIiERKT_S2_S2_>
 8016c54:	4603      	mov	r3, r0
 8016c56:	681b      	ldr	r3, [r3, #0]
 8016c58:	63fb      	str	r3, [r7, #60]	; 0x3c
          const int filter_y_start = std::max(0, -in_y_origin);
 8016c5a:	2300      	movs	r3, #0
 8016c5c:	623b      	str	r3, [r7, #32]
 8016c5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016c60:	425b      	negs	r3, r3
 8016c62:	627b      	str	r3, [r7, #36]	; 0x24
 8016c64:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8016c68:	f107 0320 	add.w	r3, r7, #32
 8016c6c:	4611      	mov	r1, r2
 8016c6e:	4618      	mov	r0, r3
 8016c70:	f7f4 ff74 	bl	800bb5c <_ZSt3maxIiERKT_S2_S2_>
 8016c74:	4603      	mov	r3, r0
 8016c76:	681b      	ldr	r3, [r3, #0]
 8016c78:	63bb      	str	r3, [r7, #56]	; 0x38
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
 8016c7a:	68fb      	ldr	r3, [r7, #12]
 8016c7c:	f103 0014 	add.w	r0, r3, #20
 8016c80:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8016c82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016c84:	1ad3      	subs	r3, r2, r3
 8016c86:	62bb      	str	r3, [r7, #40]	; 0x28
 8016c88:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8016c8c:	4619      	mov	r1, r3
 8016c8e:	f7fb fd6c 	bl	801276a <_ZSt3minIiERKT_S2_S2_>
 8016c92:	4603      	mov	r3, r0
 8016c94:	681b      	ldr	r3, [r3, #0]
 8016c96:	637b      	str	r3, [r7, #52]	; 0x34
          int32_t acc = 0;
 8016c98:	2300      	movs	r3, #0
 8016c9a:	613b      	str	r3, [r7, #16]
          int filter_count = 0;
 8016c9c:	2300      	movs	r3, #0
 8016c9e:	677b      	str	r3, [r7, #116]	; 0x74
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 8016ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ca2:	673b      	str	r3, [r7, #112]	; 0x70
 8016ca4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8016ca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016ca8:	429a      	cmp	r2, r3
 8016caa:	da2a      	bge.n	8016d02 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x1da>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 8016cac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016cae:	66fb      	str	r3, [r7, #108]	; 0x6c
 8016cb0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8016cb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016cb4:	429a      	cmp	r2, r3
 8016cb6:	da20      	bge.n	8016cfa <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x1d2>
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
 8016cb8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016cba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016cbc:	4413      	add	r3, r2
 8016cbe:	633b      	str	r3, [r7, #48]	; 0x30
              const int in_y = in_y_origin + filter_y;
 8016cc0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016cc2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016cc4:	4413      	add	r3, r2
 8016cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
              acc +=
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
 8016cc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016cca:	9300      	str	r3, [sp, #0]
 8016ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016cd0:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8016cd4:	68b8      	ldr	r0, [r7, #8]
 8016cd6:	f7fb f871 	bl	8011dbc <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8016cda:	4603      	mov	r3, r0
 8016cdc:	461a      	mov	r2, r3
 8016cde:	687b      	ldr	r3, [r7, #4]
 8016ce0:	4413      	add	r3, r2
 8016ce2:	781b      	ldrb	r3, [r3, #0]
              acc +=
 8016ce4:	461a      	mov	r2, r3
 8016ce6:	693b      	ldr	r3, [r7, #16]
 8016ce8:	4413      	add	r3, r2
 8016cea:	613b      	str	r3, [r7, #16]
              filter_count++;
 8016cec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016cee:	3301      	adds	r3, #1
 8016cf0:	677b      	str	r3, [r7, #116]	; 0x74
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 8016cf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016cf4:	3301      	adds	r3, #1
 8016cf6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8016cf8:	e7da      	b.n	8016cb0 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x188>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 8016cfa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016cfc:	3301      	adds	r3, #1
 8016cfe:	673b      	str	r3, [r7, #112]	; 0x70
 8016d00:	e7d0      	b.n	8016ca4 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x17c>
            }
          }
          acc = (acc + filter_count / 2) / filter_count;
 8016d02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016d04:	0fda      	lsrs	r2, r3, #31
 8016d06:	4413      	add	r3, r2
 8016d08:	105b      	asrs	r3, r3, #1
 8016d0a:	461a      	mov	r2, r3
 8016d0c:	693b      	ldr	r3, [r7, #16]
 8016d0e:	441a      	add	r2, r3
 8016d10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016d12:	fb92 f3f3 	sdiv	r3, r2, r3
 8016d16:	613b      	str	r3, [r7, #16]
          acc = std::max(acc, params.quantized_activation_min);
 8016d18:	68fb      	ldr	r3, [r7, #12]
 8016d1a:	f103 021c 	add.w	r2, r3, #28
 8016d1e:	f107 0310 	add.w	r3, r7, #16
 8016d22:	4611      	mov	r1, r2
 8016d24:	4618      	mov	r0, r3
 8016d26:	f7f4 ff41 	bl	800bbac <_ZSt3maxIlERKT_S2_S2_>
 8016d2a:	4603      	mov	r3, r0
 8016d2c:	681b      	ldr	r3, [r3, #0]
 8016d2e:	613b      	str	r3, [r7, #16]
          acc = std::min(acc, params.quantized_activation_max);
 8016d30:	68fb      	ldr	r3, [r7, #12]
 8016d32:	f103 0220 	add.w	r2, r3, #32
 8016d36:	f107 0310 	add.w	r3, r7, #16
 8016d3a:	4611      	mov	r1, r2
 8016d3c:	4618      	mov	r0, r3
 8016d3e:	f7f4 ff21 	bl	800bb84 <_ZSt3minIlERKT_S2_S2_>
 8016d42:	4603      	mov	r3, r0
 8016d44:	681b      	ldr	r3, [r3, #0]
 8016d46:	613b      	str	r3, [r7, #16]
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
 8016d48:	693c      	ldr	r4, [r7, #16]
 8016d4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016d4c:	9300      	str	r3, [sp, #0]
 8016d4e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8016d50:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8016d54:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8016d58:	6838      	ldr	r0, [r7, #0]
 8016d5a:	f7fb f82f 	bl	8011dbc <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8016d5e:	4603      	mov	r3, r0
 8016d60:	461a      	mov	r2, r3
 8016d62:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8016d66:	4413      	add	r3, r2
 8016d68:	b2e2      	uxtb	r2, r4
 8016d6a:	701a      	strb	r2, [r3, #0]
        for (int channel = 0; channel < depth; ++channel) {
 8016d6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016d6e:	3301      	adds	r3, #1
 8016d70:	67bb      	str	r3, [r7, #120]	; 0x78
 8016d72:	e73b      	b.n	8016bec <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xc4>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8016d74:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8016d76:	3301      	adds	r3, #1
 8016d78:	67fb      	str	r3, [r7, #124]	; 0x7c
 8016d7a:	e730      	b.n	8016bde <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xb6>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8016d7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016d80:	3301      	adds	r3, #1
 8016d82:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8016d86:	e722      	b.n	8016bce <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xa6>
  for (int batch = 0; batch < batches; ++batch) {
 8016d88:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8016d8c:	3301      	adds	r3, #1
 8016d8e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8016d92:	e713      	b.n	8016bbc <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x94>
              static_cast<uint8_t>(acc);
        }
      }
    }
  }
}
 8016d94:	bf00      	nop
 8016d96:	378c      	adds	r7, #140	; 0x8c
 8016d98:	46bd      	mov	sp, r7
 8016d9a:	bd90      	pop	{r4, r7, pc}

08016d9c <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
  }
}

inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,
                    const float* input_data, const RuntimeShape& output_shape,
                    float* output_data) {
 8016d9c:	b590      	push	{r4, r7, lr}
 8016d9e:	ed2d 8b04 	vpush	{d8-d9}
 8016da2:	b0a5      	sub	sp, #148	; 0x94
 8016da4:	af02      	add	r7, sp, #8
 8016da6:	60f8      	str	r0, [r7, #12]
 8016da8:	60b9      	str	r1, [r7, #8]
 8016daa:	607a      	str	r2, [r7, #4]
 8016dac:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 8016dae:	68b8      	ldr	r0, [r7, #8]
 8016db0:	f7f5 f879 	bl	800bea6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8016db4:	4603      	mov	r3, r0
 8016db6:	2b04      	cmp	r3, #4
 8016db8:	d001      	beq.n	8016dbe <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x22>
 8016dba:	f00e fe44 	bl	8025a46 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 8016dbe:	6838      	ldr	r0, [r7, #0]
 8016dc0:	f7f5 f871 	bl	800bea6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8016dc4:	4603      	mov	r3, r0
 8016dc6:	2b04      	cmp	r3, #4
 8016dc8:	d001      	beq.n	8016dce <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x32>
 8016dca:	f00e fe3c 	bl	8025a46 <abort>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 8016dce:	2300      	movs	r3, #0
 8016dd0:	683a      	ldr	r2, [r7, #0]
 8016dd2:	2100      	movs	r1, #0
 8016dd4:	68b8      	ldr	r0, [r7, #8]
 8016dd6:	f7fb f849 	bl	8011e6c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8016dda:	66f8      	str	r0, [r7, #108]	; 0x6c
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 8016ddc:	2303      	movs	r3, #3
 8016dde:	683a      	ldr	r2, [r7, #0]
 8016de0:	2103      	movs	r1, #3
 8016de2:	68b8      	ldr	r0, [r7, #8]
 8016de4:	f7fb f842 	bl	8011e6c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8016de8:	66b8      	str	r0, [r7, #104]	; 0x68
  const int input_height = input_shape.Dims(1);
 8016dea:	2101      	movs	r1, #1
 8016dec:	68b8      	ldr	r0, [r7, #8]
 8016dee:	f7f9 ff77 	bl	8010ce0 <_ZNK6tflite12RuntimeShape4DimsEi>
 8016df2:	6678      	str	r0, [r7, #100]	; 0x64
  const int input_width = input_shape.Dims(2);
 8016df4:	2102      	movs	r1, #2
 8016df6:	68b8      	ldr	r0, [r7, #8]
 8016df8:	f7f9 ff72 	bl	8010ce0 <_ZNK6tflite12RuntimeShape4DimsEi>
 8016dfc:	6638      	str	r0, [r7, #96]	; 0x60
  const int output_height = output_shape.Dims(1);
 8016dfe:	2101      	movs	r1, #1
 8016e00:	6838      	ldr	r0, [r7, #0]
 8016e02:	f7f9 ff6d 	bl	8010ce0 <_ZNK6tflite12RuntimeShape4DimsEi>
 8016e06:	65f8      	str	r0, [r7, #92]	; 0x5c
  const int output_width = output_shape.Dims(2);
 8016e08:	2102      	movs	r1, #2
 8016e0a:	6838      	ldr	r0, [r7, #0]
 8016e0c:	f7f9 ff68 	bl	8010ce0 <_ZNK6tflite12RuntimeShape4DimsEi>
 8016e10:	65b8      	str	r0, [r7, #88]	; 0x58
  const int stride_height = params.stride_height;
 8016e12:	68fb      	ldr	r3, [r7, #12]
 8016e14:	68db      	ldr	r3, [r3, #12]
 8016e16:	657b      	str	r3, [r7, #84]	; 0x54
  const int stride_width = params.stride_width;
 8016e18:	68fb      	ldr	r3, [r7, #12]
 8016e1a:	691b      	ldr	r3, [r3, #16]
 8016e1c:	653b      	str	r3, [r7, #80]	; 0x50
  for (int batch = 0; batch < batches; ++batch) {
 8016e1e:	2300      	movs	r3, #0
 8016e20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8016e24:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8016e28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016e2a:	429a      	cmp	r2, r3
 8016e2c:	f280 80d4 	bge.w	8016fd8 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x23c>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8016e30:	2300      	movs	r3, #0
 8016e32:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8016e36:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8016e3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016e3c:	429a      	cmp	r2, r3
 8016e3e:	f280 80c5 	bge.w	8016fcc <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x230>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8016e42:	2300      	movs	r3, #0
 8016e44:	67fb      	str	r3, [r7, #124]	; 0x7c
 8016e46:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8016e48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016e4a:	429a      	cmp	r2, r3
 8016e4c:	f280 80b8 	bge.w	8016fc0 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x224>
        for (int channel = 0; channel < depth; ++channel) {
 8016e50:	2300      	movs	r3, #0
 8016e52:	67bb      	str	r3, [r7, #120]	; 0x78
 8016e54:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8016e56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016e58:	429a      	cmp	r2, r3
 8016e5a:	f280 80ad 	bge.w	8016fb8 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x21c>
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
 8016e5e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8016e60:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8016e62:	fb02 f303 	mul.w	r3, r2, r3
 8016e66:	68fa      	ldr	r2, [r7, #12]
 8016e68:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
          const int in_x_origin =
 8016e6c:	1a9b      	subs	r3, r3, r2
 8016e6e:	64fb      	str	r3, [r7, #76]	; 0x4c
          const int in_y_origin =
              (out_y * stride_height) - params.padding_values.height;
 8016e70:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016e74:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8016e76:	fb02 f303 	mul.w	r3, r2, r3
 8016e7a:	68fa      	ldr	r2, [r7, #12]
 8016e7c:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
          const int in_y_origin =
 8016e80:	1a9b      	subs	r3, r3, r2
 8016e82:	64bb      	str	r3, [r7, #72]	; 0x48
          // Compute the boundaries of the filter region clamped so as to
          // ensure that the filter window fits in the input array.
          const int filter_x_start = std::max(0, -in_x_origin);
 8016e84:	2300      	movs	r3, #0
 8016e86:	61bb      	str	r3, [r7, #24]
 8016e88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016e8a:	425b      	negs	r3, r3
 8016e8c:	61fb      	str	r3, [r7, #28]
 8016e8e:	f107 021c 	add.w	r2, r7, #28
 8016e92:	f107 0318 	add.w	r3, r7, #24
 8016e96:	4611      	mov	r1, r2
 8016e98:	4618      	mov	r0, r3
 8016e9a:	f7f4 fe5f 	bl	800bb5c <_ZSt3maxIiERKT_S2_S2_>
 8016e9e:	4603      	mov	r3, r0
 8016ea0:	681b      	ldr	r3, [r3, #0]
 8016ea2:	647b      	str	r3, [r7, #68]	; 0x44
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
 8016ea4:	68fb      	ldr	r3, [r7, #12]
 8016ea6:	f103 0018 	add.w	r0, r3, #24
 8016eaa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8016eac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016eae:	1ad3      	subs	r3, r2, r3
 8016eb0:	623b      	str	r3, [r7, #32]
 8016eb2:	f107 0320 	add.w	r3, r7, #32
 8016eb6:	4619      	mov	r1, r3
 8016eb8:	f7fb fc57 	bl	801276a <_ZSt3minIiERKT_S2_S2_>
 8016ebc:	4603      	mov	r3, r0
 8016ebe:	681b      	ldr	r3, [r3, #0]
 8016ec0:	643b      	str	r3, [r7, #64]	; 0x40
          const int filter_y_start = std::max(0, -in_y_origin);
 8016ec2:	2300      	movs	r3, #0
 8016ec4:	627b      	str	r3, [r7, #36]	; 0x24
 8016ec6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016ec8:	425b      	negs	r3, r3
 8016eca:	62bb      	str	r3, [r7, #40]	; 0x28
 8016ecc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8016ed0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016ed4:	4611      	mov	r1, r2
 8016ed6:	4618      	mov	r0, r3
 8016ed8:	f7f4 fe40 	bl	800bb5c <_ZSt3maxIiERKT_S2_S2_>
 8016edc:	4603      	mov	r3, r0
 8016ede:	681b      	ldr	r3, [r3, #0]
 8016ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
 8016ee2:	68fb      	ldr	r3, [r7, #12]
 8016ee4:	f103 0014 	add.w	r0, r3, #20
 8016ee8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8016eea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016eec:	1ad3      	subs	r3, r2, r3
 8016eee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016ef0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8016ef4:	4619      	mov	r1, r3
 8016ef6:	f7fb fc38 	bl	801276a <_ZSt3minIiERKT_S2_S2_>
 8016efa:	4603      	mov	r3, r0
 8016efc:	681b      	ldr	r3, [r3, #0]
 8016efe:	63bb      	str	r3, [r7, #56]	; 0x38
          float max = std::numeric_limits<float>::lowest();
 8016f00:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 8016f04:	617b      	str	r3, [r7, #20]
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 8016f06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016f08:	677b      	str	r3, [r7, #116]	; 0x74
 8016f0a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8016f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f0e:	429a      	cmp	r2, r3
 8016f10:	da2b      	bge.n	8016f6a <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1ce>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 8016f12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016f14:	673b      	str	r3, [r7, #112]	; 0x70
 8016f16:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8016f18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016f1a:	429a      	cmp	r2, r3
 8016f1c:	da21      	bge.n	8016f62 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1c6>
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
 8016f1e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8016f20:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016f22:	4413      	add	r3, r2
 8016f24:	637b      	str	r3, [r7, #52]	; 0x34
              const int in_y = in_y_origin + filter_y;
 8016f26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016f28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016f2a:	4413      	add	r3, r2
 8016f2c:	633b      	str	r3, [r7, #48]	; 0x30
              max = std::max(
                  max,
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
 8016f2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016f30:	9300      	str	r3, [sp, #0]
 8016f32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016f34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016f36:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8016f3a:	68b8      	ldr	r0, [r7, #8]
 8016f3c:	f7fa ff3e 	bl	8011dbc <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8016f40:	4603      	mov	r3, r0
 8016f42:	009b      	lsls	r3, r3, #2
 8016f44:	687a      	ldr	r2, [r7, #4]
 8016f46:	441a      	add	r2, r3
 8016f48:	f107 0314 	add.w	r3, r7, #20
 8016f4c:	4611      	mov	r1, r2
 8016f4e:	4618      	mov	r0, r3
 8016f50:	f7f4 f892 	bl	800b078 <_ZSt3maxIfERKT_S2_S2_>
 8016f54:	4603      	mov	r3, r0
              max = std::max(
 8016f56:	681b      	ldr	r3, [r3, #0]
 8016f58:	617b      	str	r3, [r7, #20]
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 8016f5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016f5c:	3301      	adds	r3, #1
 8016f5e:	673b      	str	r3, [r7, #112]	; 0x70
 8016f60:	e7d9      	b.n	8016f16 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x17a>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 8016f62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016f64:	3301      	adds	r3, #1
 8016f66:	677b      	str	r3, [r7, #116]	; 0x74
 8016f68:	e7cf      	b.n	8016f0a <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x16e>
            }
          }
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
              ActivationFunctionWithMinMax(max, params.float_activation_min,
 8016f6a:	ed97 8a05 	vldr	s16, [r7, #20]
 8016f6e:	68fb      	ldr	r3, [r7, #12]
 8016f70:	edd3 8a09 	vldr	s17, [r3, #36]	; 0x24
                                           params.float_activation_max);
 8016f74:	68fb      	ldr	r3, [r7, #12]
 8016f76:	ed93 9a0a 	vldr	s18, [r3, #40]	; 0x28
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
 8016f7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016f7c:	9300      	str	r3, [sp, #0]
 8016f7e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8016f80:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8016f84:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8016f88:	6838      	ldr	r0, [r7, #0]
 8016f8a:	f7fa ff17 	bl	8011dbc <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8016f8e:	4603      	mov	r3, r0
 8016f90:	009b      	lsls	r3, r3, #2
 8016f92:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8016f96:	18d4      	adds	r4, r2, r3
              ActivationFunctionWithMinMax(max, params.float_activation_min,
 8016f98:	eeb0 1a49 	vmov.f32	s2, s18
 8016f9c:	eef0 0a68 	vmov.f32	s1, s17
 8016fa0:	eeb0 0a48 	vmov.f32	s0, s16
 8016fa4:	f7fb fc53 	bl	801284e <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>
 8016fa8:	eef0 7a40 	vmov.f32	s15, s0
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
 8016fac:	edc4 7a00 	vstr	s15, [r4]
        for (int channel = 0; channel < depth; ++channel) {
 8016fb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016fb2:	3301      	adds	r3, #1
 8016fb4:	67bb      	str	r3, [r7, #120]	; 0x78
 8016fb6:	e74d      	b.n	8016e54 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xb8>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8016fb8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8016fba:	3301      	adds	r3, #1
 8016fbc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8016fbe:	e742      	b.n	8016e46 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xaa>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8016fc0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016fc4:	3301      	adds	r3, #1
 8016fc6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8016fca:	e734      	b.n	8016e36 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x9a>
  for (int batch = 0; batch < batches; ++batch) {
 8016fcc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8016fd0:	3301      	adds	r3, #1
 8016fd2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8016fd6:	e725      	b.n	8016e24 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x88>
        }
      }
    }
  }
}
 8016fd8:	bf00      	nop
 8016fda:	378c      	adds	r7, #140	; 0x8c
 8016fdc:	46bd      	mov	sp, r7
 8016fde:	ecbd 8b04 	vpop	{d8-d9}
 8016fe2:	bd90      	pop	{r4, r7, pc}

08016fe4 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph>:

inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,
                    const uint8_t* input_data, const RuntimeShape& output_shape,
                    uint8_t* output_data) {
 8016fe4:	b580      	push	{r7, lr}
 8016fe6:	b0a4      	sub	sp, #144	; 0x90
 8016fe8:	af02      	add	r7, sp, #8
 8016fea:	60f8      	str	r0, [r7, #12]
 8016fec:	60b9      	str	r1, [r7, #8]
 8016fee:	607a      	str	r2, [r7, #4]
 8016ff0:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_LE(params.quantized_activation_min,
 8016ff2:	68fb      	ldr	r3, [r7, #12]
 8016ff4:	69da      	ldr	r2, [r3, #28]
 8016ff6:	68fb      	ldr	r3, [r7, #12]
 8016ff8:	6a1b      	ldr	r3, [r3, #32]
 8016ffa:	429a      	cmp	r2, r3
 8016ffc:	dd01      	ble.n	8017002 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x1e>
 8016ffe:	f00e fd22 	bl	8025a46 <abort>
                   params.quantized_activation_max);
  TFLITE_DCHECK_GE(params.quantized_activation_min, 0);
 8017002:	68fb      	ldr	r3, [r7, #12]
 8017004:	69db      	ldr	r3, [r3, #28]
 8017006:	2b00      	cmp	r3, #0
 8017008:	da01      	bge.n	801700e <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x2a>
 801700a:	f00e fd1c 	bl	8025a46 <abort>
  TFLITE_DCHECK_LE(params.quantized_activation_max, 255);
 801700e:	68fb      	ldr	r3, [r7, #12]
 8017010:	6a1b      	ldr	r3, [r3, #32]
 8017012:	2bff      	cmp	r3, #255	; 0xff
 8017014:	dd01      	ble.n	801701a <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x36>
 8017016:	f00e fd16 	bl	8025a46 <abort>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 801701a:	68b8      	ldr	r0, [r7, #8]
 801701c:	f7f4 ff43 	bl	800bea6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8017020:	4603      	mov	r3, r0
 8017022:	2b04      	cmp	r3, #4
 8017024:	d001      	beq.n	801702a <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x46>
 8017026:	f00e fd0e 	bl	8025a46 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 801702a:	6838      	ldr	r0, [r7, #0]
 801702c:	f7f4 ff3b 	bl	800bea6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8017030:	4603      	mov	r3, r0
 8017032:	2b04      	cmp	r3, #4
 8017034:	d001      	beq.n	801703a <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x56>
 8017036:	f00e fd06 	bl	8025a46 <abort>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 801703a:	2300      	movs	r3, #0
 801703c:	683a      	ldr	r2, [r7, #0]
 801703e:	2100      	movs	r1, #0
 8017040:	68b8      	ldr	r0, [r7, #8]
 8017042:	f7fa ff13 	bl	8011e6c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8017046:	66f8      	str	r0, [r7, #108]	; 0x6c
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 8017048:	2303      	movs	r3, #3
 801704a:	683a      	ldr	r2, [r7, #0]
 801704c:	2103      	movs	r1, #3
 801704e:	68b8      	ldr	r0, [r7, #8]
 8017050:	f7fa ff0c 	bl	8011e6c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8017054:	66b8      	str	r0, [r7, #104]	; 0x68
  const int input_height = input_shape.Dims(1);
 8017056:	2101      	movs	r1, #1
 8017058:	68b8      	ldr	r0, [r7, #8]
 801705a:	f7f9 fe41 	bl	8010ce0 <_ZNK6tflite12RuntimeShape4DimsEi>
 801705e:	6678      	str	r0, [r7, #100]	; 0x64
  const int input_width = input_shape.Dims(2);
 8017060:	2102      	movs	r1, #2
 8017062:	68b8      	ldr	r0, [r7, #8]
 8017064:	f7f9 fe3c 	bl	8010ce0 <_ZNK6tflite12RuntimeShape4DimsEi>
 8017068:	6638      	str	r0, [r7, #96]	; 0x60
  const int output_height = output_shape.Dims(1);
 801706a:	2101      	movs	r1, #1
 801706c:	6838      	ldr	r0, [r7, #0]
 801706e:	f7f9 fe37 	bl	8010ce0 <_ZNK6tflite12RuntimeShape4DimsEi>
 8017072:	65f8      	str	r0, [r7, #92]	; 0x5c
  const int output_width = output_shape.Dims(2);
 8017074:	2102      	movs	r1, #2
 8017076:	6838      	ldr	r0, [r7, #0]
 8017078:	f7f9 fe32 	bl	8010ce0 <_ZNK6tflite12RuntimeShape4DimsEi>
 801707c:	65b8      	str	r0, [r7, #88]	; 0x58
  const int stride_height = params.stride_height;
 801707e:	68fb      	ldr	r3, [r7, #12]
 8017080:	68db      	ldr	r3, [r3, #12]
 8017082:	657b      	str	r3, [r7, #84]	; 0x54
  const int stride_width = params.stride_width;
 8017084:	68fb      	ldr	r3, [r7, #12]
 8017086:	691b      	ldr	r3, [r3, #16]
 8017088:	653b      	str	r3, [r7, #80]	; 0x50
  for (int batch = 0; batch < batches; ++batch) {
 801708a:	2300      	movs	r3, #0
 801708c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8017090:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8017094:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017096:	429a      	cmp	r2, r3
 8017098:	f280 80e1 	bge.w	801725e <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x27a>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 801709c:	2300      	movs	r3, #0
 801709e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80170a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80170a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80170a8:	429a      	cmp	r2, r3
 80170aa:	f280 80d2 	bge.w	8017252 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x26e>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 80170ae:	2300      	movs	r3, #0
 80170b0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80170b2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80170b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80170b6:	429a      	cmp	r2, r3
 80170b8:	f280 80c5 	bge.w	8017246 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x262>
        for (int channel = 0; channel < depth; ++channel) {
 80170bc:	2300      	movs	r3, #0
 80170be:	67bb      	str	r3, [r7, #120]	; 0x78
 80170c0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80170c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80170c4:	429a      	cmp	r2, r3
 80170c6:	f280 80ba 	bge.w	801723e <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x25a>
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
 80170ca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80170cc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80170ce:	fb02 f303 	mul.w	r3, r2, r3
 80170d2:	68fa      	ldr	r2, [r7, #12]
 80170d4:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
          const int in_x_origin =
 80170d8:	1a9b      	subs	r3, r3, r2
 80170da:	64fb      	str	r3, [r7, #76]	; 0x4c
          const int in_y_origin =
              (out_y * stride_height) - params.padding_values.height;
 80170dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80170e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80170e2:	fb02 f303 	mul.w	r3, r2, r3
 80170e6:	68fa      	ldr	r2, [r7, #12]
 80170e8:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
          const int in_y_origin =
 80170ec:	1a9b      	subs	r3, r3, r2
 80170ee:	64bb      	str	r3, [r7, #72]	; 0x48
          // Compute the boundaries of the filter region clamped so as to
          // ensure that the filter window fits in the input array.
          const int filter_x_start = std::max(0, -in_x_origin);
 80170f0:	2300      	movs	r3, #0
 80170f2:	617b      	str	r3, [r7, #20]
 80170f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80170f6:	425b      	negs	r3, r3
 80170f8:	61bb      	str	r3, [r7, #24]
 80170fa:	f107 0218 	add.w	r2, r7, #24
 80170fe:	f107 0314 	add.w	r3, r7, #20
 8017102:	4611      	mov	r1, r2
 8017104:	4618      	mov	r0, r3
 8017106:	f7f4 fd29 	bl	800bb5c <_ZSt3maxIiERKT_S2_S2_>
 801710a:	4603      	mov	r3, r0
 801710c:	681b      	ldr	r3, [r3, #0]
 801710e:	647b      	str	r3, [r7, #68]	; 0x44
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
 8017110:	68fb      	ldr	r3, [r7, #12]
 8017112:	f103 0018 	add.w	r0, r3, #24
 8017116:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8017118:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801711a:	1ad3      	subs	r3, r2, r3
 801711c:	61fb      	str	r3, [r7, #28]
 801711e:	f107 031c 	add.w	r3, r7, #28
 8017122:	4619      	mov	r1, r3
 8017124:	f7fb fb21 	bl	801276a <_ZSt3minIiERKT_S2_S2_>
 8017128:	4603      	mov	r3, r0
 801712a:	681b      	ldr	r3, [r3, #0]
 801712c:	643b      	str	r3, [r7, #64]	; 0x40
          const int filter_y_start = std::max(0, -in_y_origin);
 801712e:	2300      	movs	r3, #0
 8017130:	623b      	str	r3, [r7, #32]
 8017132:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017134:	425b      	negs	r3, r3
 8017136:	627b      	str	r3, [r7, #36]	; 0x24
 8017138:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801713c:	f107 0320 	add.w	r3, r7, #32
 8017140:	4611      	mov	r1, r2
 8017142:	4618      	mov	r0, r3
 8017144:	f7f4 fd0a 	bl	800bb5c <_ZSt3maxIiERKT_S2_S2_>
 8017148:	4603      	mov	r3, r0
 801714a:	681b      	ldr	r3, [r3, #0]
 801714c:	63fb      	str	r3, [r7, #60]	; 0x3c
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
 801714e:	68fb      	ldr	r3, [r7, #12]
 8017150:	f103 0014 	add.w	r0, r3, #20
 8017154:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8017156:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017158:	1ad3      	subs	r3, r2, r3
 801715a:	62bb      	str	r3, [r7, #40]	; 0x28
 801715c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8017160:	4619      	mov	r1, r3
 8017162:	f7fb fb02 	bl	801276a <_ZSt3minIiERKT_S2_S2_>
 8017166:	4603      	mov	r3, r0
 8017168:	681b      	ldr	r3, [r3, #0]
 801716a:	63bb      	str	r3, [r7, #56]	; 0x38
          uint8_t max = 0;
 801716c:	2300      	movs	r3, #0
 801716e:	74fb      	strb	r3, [r7, #19]
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 8017170:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017172:	677b      	str	r3, [r7, #116]	; 0x74
 8017174:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8017176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017178:	429a      	cmp	r2, r3
 801717a:	da2b      	bge.n	80171d4 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x1f0>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 801717c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801717e:	673b      	str	r3, [r7, #112]	; 0x70
 8017180:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8017182:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017184:	429a      	cmp	r2, r3
 8017186:	da21      	bge.n	80171cc <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x1e8>
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
 8017188:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801718a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801718c:	4413      	add	r3, r2
 801718e:	637b      	str	r3, [r7, #52]	; 0x34
              const int in_y = in_y_origin + filter_y;
 8017190:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017192:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8017194:	4413      	add	r3, r2
 8017196:	633b      	str	r3, [r7, #48]	; 0x30
              max = std::max(
                  max,
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
 8017198:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801719a:	9300      	str	r3, [sp, #0]
 801719c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801719e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80171a0:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80171a4:	68b8      	ldr	r0, [r7, #8]
 80171a6:	f7fa fe09 	bl	8011dbc <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 80171aa:	4603      	mov	r3, r0
 80171ac:	461a      	mov	r2, r3
 80171ae:	687b      	ldr	r3, [r7, #4]
 80171b0:	441a      	add	r2, r3
 80171b2:	f107 0313 	add.w	r3, r7, #19
 80171b6:	4611      	mov	r1, r2
 80171b8:	4618      	mov	r0, r3
 80171ba:	f000 fd67 	bl	8017c8c <_ZSt3maxIhERKT_S2_S2_>
 80171be:	4603      	mov	r3, r0
              max = std::max(
 80171c0:	781b      	ldrb	r3, [r3, #0]
 80171c2:	74fb      	strb	r3, [r7, #19]
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 80171c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80171c6:	3301      	adds	r3, #1
 80171c8:	673b      	str	r3, [r7, #112]	; 0x70
 80171ca:	e7d9      	b.n	8017180 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x19c>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 80171cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80171ce:	3301      	adds	r3, #1
 80171d0:	677b      	str	r3, [r7, #116]	; 0x74
 80171d2:	e7cf      	b.n	8017174 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x190>
            }
          }
          max = std::max<uint8_t>(max, params.quantized_activation_min);
 80171d4:	68fb      	ldr	r3, [r7, #12]
 80171d6:	69db      	ldr	r3, [r3, #28]
 80171d8:	b2db      	uxtb	r3, r3
 80171da:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80171de:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 80171e2:	f107 0313 	add.w	r3, r7, #19
 80171e6:	4611      	mov	r1, r2
 80171e8:	4618      	mov	r0, r3
 80171ea:	f000 fd4f 	bl	8017c8c <_ZSt3maxIhERKT_S2_S2_>
 80171ee:	4603      	mov	r3, r0
 80171f0:	781b      	ldrb	r3, [r3, #0]
 80171f2:	74fb      	strb	r3, [r7, #19]
          max = std::min<uint8_t>(max, params.quantized_activation_max);
 80171f4:	68fb      	ldr	r3, [r7, #12]
 80171f6:	6a1b      	ldr	r3, [r3, #32]
 80171f8:	b2db      	uxtb	r3, r3
 80171fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80171fe:	f107 022f 	add.w	r2, r7, #47	; 0x2f
 8017202:	f107 0313 	add.w	r3, r7, #19
 8017206:	4611      	mov	r1, r2
 8017208:	4618      	mov	r0, r3
 801720a:	f000 fd53 	bl	8017cb4 <_ZSt3minIhERKT_S2_S2_>
 801720e:	4603      	mov	r3, r0
 8017210:	781b      	ldrb	r3, [r3, #0]
 8017212:	74fb      	strb	r3, [r7, #19]
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
 8017214:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8017216:	9300      	str	r3, [sp, #0]
 8017218:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801721a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801721e:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8017222:	6838      	ldr	r0, [r7, #0]
 8017224:	f7fa fdca 	bl	8011dbc <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8017228:	4603      	mov	r3, r0
 801722a:	461a      	mov	r2, r3
 801722c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8017230:	4413      	add	r3, r2
 8017232:	7cfa      	ldrb	r2, [r7, #19]
 8017234:	701a      	strb	r2, [r3, #0]
        for (int channel = 0; channel < depth; ++channel) {
 8017236:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8017238:	3301      	adds	r3, #1
 801723a:	67bb      	str	r3, [r7, #120]	; 0x78
 801723c:	e740      	b.n	80170c0 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xdc>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 801723e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8017240:	3301      	adds	r3, #1
 8017242:	67fb      	str	r3, [r7, #124]	; 0x7c
 8017244:	e735      	b.n	80170b2 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xce>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8017246:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801724a:	3301      	adds	r3, #1
 801724c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8017250:	e727      	b.n	80170a2 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xbe>
  for (int batch = 0; batch < batches; ++batch) {
 8017252:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8017256:	3301      	adds	r3, #1
 8017258:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801725c:	e718      	b.n	8017090 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xac>
              static_cast<uint8_t>(max);
        }
      }
    }
  }
}
 801725e:	bf00      	nop
 8017260:	3788      	adds	r7, #136	; 0x88
 8017262:	46bd      	mov	sp, r7
 8017264:	bd80      	pop	{r7, pc}

08017266 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE>:
};

TfLiteStatus CalculateOpData(TfLiteContext* context,
                             const TfLitePoolParams* params,
                             const TfLiteTensor* input, TfLiteTensor* output,
                             OpData* data) {
 8017266:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017268:	b099      	sub	sp, #100	; 0x64
 801726a:	af08      	add	r7, sp, #32
 801726c:	6278      	str	r0, [r7, #36]	; 0x24
 801726e:	6239      	str	r1, [r7, #32]
 8017270:	61fa      	str	r2, [r7, #28]
 8017272:	61bb      	str	r3, [r7, #24]
  // input: batch, height, width, channel
  int height = SizeOfDimension(input, 1);
 8017274:	2101      	movs	r1, #1
 8017276:	69f8      	ldr	r0, [r7, #28]
 8017278:	f7f3 ff85 	bl	800b186 <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>
 801727c:	63f8      	str	r0, [r7, #60]	; 0x3c
  int width = SizeOfDimension(input, 2);
 801727e:	2102      	movs	r1, #2
 8017280:	69f8      	ldr	r0, [r7, #28]
 8017282:	f7f3 ff80 	bl	800b186 <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>
 8017286:	63b8      	str	r0, [r7, #56]	; 0x38

  int out_height, out_width;

  data->padding = ComputePaddingHeightWidth(
      params->stride_height, params->stride_width,
 8017288:	6a3b      	ldr	r3, [r7, #32]
 801728a:	689d      	ldr	r5, [r3, #8]
 801728c:	6a3b      	ldr	r3, [r7, #32]
 801728e:	685e      	ldr	r6, [r3, #4]
      /*dilation_rate_height=*/1,
      /*dilation_rate_width=*/1, height, width, params->filter_height,
 8017290:	6a3b      	ldr	r3, [r7, #32]
 8017292:	691b      	ldr	r3, [r3, #16]
      params->filter_width, params->padding, &out_height, &out_width);
 8017294:	6a3a      	ldr	r2, [r7, #32]
 8017296:	68d2      	ldr	r2, [r2, #12]
 8017298:	6a39      	ldr	r1, [r7, #32]
 801729a:	7809      	ldrb	r1, [r1, #0]
 801729c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801729e:	6078      	str	r0, [r7, #4]
 80172a0:	f107 0408 	add.w	r4, r7, #8
 80172a4:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80172a8:	9007      	str	r0, [sp, #28]
 80172aa:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80172ae:	9006      	str	r0, [sp, #24]
 80172b0:	9105      	str	r1, [sp, #20]
 80172b2:	9204      	str	r2, [sp, #16]
 80172b4:	9303      	str	r3, [sp, #12]
 80172b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80172b8:	9302      	str	r3, [sp, #8]
 80172ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80172bc:	9301      	str	r3, [sp, #4]
 80172be:	2301      	movs	r3, #1
 80172c0:	9300      	str	r3, [sp, #0]
 80172c2:	2301      	movs	r3, #1
 80172c4:	4632      	mov	r2, r6
 80172c6:	4629      	mov	r1, r5
 80172c8:	4620      	mov	r0, r4
 80172ca:	f7fa fe7a 	bl	8011fc2 <_ZN6tflite25ComputePaddingHeightWidthEiiiiiiii13TfLitePaddingPiS1_>
 80172ce:	687c      	ldr	r4, [r7, #4]
 80172d0:	f107 0308 	add.w	r3, r7, #8
 80172d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80172d6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  if (input->type == kTfLiteFloat32) {
 80172da:	69fb      	ldr	r3, [r7, #28]
 80172dc:	781b      	ldrb	r3, [r3, #0]
 80172de:	2b01      	cmp	r3, #1
 80172e0:	d10a      	bne.n	80172f8 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0x92>
    CalculateActivationRange(params->activation, &data->activation_min_f32,
 80172e2:	6a3b      	ldr	r3, [r7, #32]
 80172e4:	7d18      	ldrb	r0, [r3, #20]
 80172e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80172e8:	f103 011c 	add.w	r1, r3, #28
 80172ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80172ee:	3320      	adds	r3, #32
 80172f0:	461a      	mov	r2, r3
 80172f2:	f7fb f83f 	bl	8012374 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
 80172f6:	e01e      	b.n	8017336 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0xd0>
                             &data->activation_max_f32);
  } else {
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
 80172f8:	6a3b      	ldr	r3, [r7, #32]
 80172fa:	7d19      	ldrb	r1, [r3, #20]
 80172fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80172fe:	f103 0214 	add.w	r2, r3, #20
 8017302:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8017304:	3318      	adds	r3, #24
 8017306:	9300      	str	r3, [sp, #0]
 8017308:	4613      	mov	r3, r2
 801730a:	69ba      	ldr	r2, [r7, #24]
 801730c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801730e:	f7f4 fbcd 	bl	800baac <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 8017312:	4603      	mov	r3, r0
 8017314:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8017318:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801731c:	2b00      	cmp	r3, #0
 801731e:	d002      	beq.n	8017326 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0xc0>
 8017320:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8017324:	e00c      	b.n	8017340 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0xda>
        context, params->activation, output, &data->activation_min,
        &data->activation_max));
    TFLITE_DCHECK_LE(data->activation_min, data->activation_max);
 8017326:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8017328:	695a      	ldr	r2, [r3, #20]
 801732a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801732c:	699b      	ldr	r3, [r3, #24]
 801732e:	429a      	cmp	r2, r3
 8017330:	dd01      	ble.n	8017336 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0xd0>
 8017332:	f00e fb88 	bl	8025a46 <abort>
  }

  // Set buffer index to a reset value
  data->buffer_idx = -1;
 8017336:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8017338:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801733c:	611a      	str	r2, [r3, #16]

  return kTfLiteOk;
 801733e:	2300      	movs	r3, #0
}
 8017340:	4618      	mov	r0, r3
 8017342:	3744      	adds	r7, #68	; 0x44
 8017344:	46bd      	mov	sp, r7
 8017346:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017348 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_116AverageEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSG_>:

void AverageEvalFloat(const TfLiteContext* context, const TfLiteNode* node,
                      const TfLitePoolParams* params, const OpData& data,
                      const TfLiteEvalTensor* input, TfLiteEvalTensor* output) {
 8017348:	b590      	push	{r4, r7, lr}
 801734a:	b0a1      	sub	sp, #132	; 0x84
 801734c:	af02      	add	r7, sp, #8
 801734e:	60f8      	str	r0, [r7, #12]
 8017350:	60b9      	str	r1, [r7, #8]
 8017352:	607a      	str	r2, [r7, #4]
 8017354:	603b      	str	r3, [r7, #0]
  float activation_min, activation_max;
  CalculateActivationRange(params->activation, &activation_min,
 8017356:	687b      	ldr	r3, [r7, #4]
 8017358:	7d1b      	ldrb	r3, [r3, #20]
 801735a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801735e:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8017362:	4618      	mov	r0, r3
 8017364:	f7fb f806 	bl	8012374 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
                           &activation_max);

  PoolParams op_params;
  op_params.stride_height = params->stride_height;
 8017368:	687b      	ldr	r3, [r7, #4]
 801736a:	689b      	ldr	r3, [r3, #8]
 801736c:	623b      	str	r3, [r7, #32]
  op_params.stride_width = params->stride_width;
 801736e:	687b      	ldr	r3, [r7, #4]
 8017370:	685b      	ldr	r3, [r3, #4]
 8017372:	627b      	str	r3, [r7, #36]	; 0x24
  op_params.filter_height = params->filter_height;
 8017374:	687b      	ldr	r3, [r7, #4]
 8017376:	691b      	ldr	r3, [r3, #16]
 8017378:	62bb      	str	r3, [r7, #40]	; 0x28
  op_params.filter_width = params->filter_width;
 801737a:	687b      	ldr	r3, [r7, #4]
 801737c:	68db      	ldr	r3, [r3, #12]
 801737e:	62fb      	str	r3, [r7, #44]	; 0x2c
  op_params.padding_values.height = data.padding.height;
 8017380:	683b      	ldr	r3, [r7, #0]
 8017382:	685b      	ldr	r3, [r3, #4]
 8017384:	b21b      	sxth	r3, r3
 8017386:	833b      	strh	r3, [r7, #24]
  op_params.padding_values.width = data.padding.width;
 8017388:	683b      	ldr	r3, [r7, #0]
 801738a:	681b      	ldr	r3, [r3, #0]
 801738c:	b21b      	sxth	r3, r3
 801738e:	82fb      	strh	r3, [r7, #22]
  op_params.float_activation_min = activation_min;
 8017390:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017392:	63bb      	str	r3, [r7, #56]	; 0x38
  op_params.float_activation_max = activation_max;
 8017394:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017396:	63fb      	str	r3, [r7, #60]	; 0x3c
  reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
 8017398:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801739c:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80173a0:	4618      	mov	r0, r3
 80173a2:	f7fb fa1c 	bl	80127de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 80173a6:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80173aa:	f7fa fa4b 	bl	8011844 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 80173ae:	4604      	mov	r4, r0
                             tflite::micro::GetTensorData<float>(input),
                             tflite::micro::GetTensorShape(output),
 80173b0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80173b4:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80173b8:	4618      	mov	r0, r3
 80173ba:	f7fb fa10 	bl	80127de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
 80173be:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 80173c2:	f7fa fa4e 	bl	8011862 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 80173c6:	4602      	mov	r2, r0
 80173c8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80173cc:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80173d0:	f107 0014 	add.w	r0, r7, #20
 80173d4:	9200      	str	r2, [sp, #0]
 80173d6:	4622      	mov	r2, r4
 80173d8:	f7ff fa66 	bl	80168a8 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>
                             tflite::micro::GetTensorShape(output),
 80173dc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80173e0:	4618      	mov	r0, r3
 80173e2:	f7f4 fd4a 	bl	800be7a <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
 80173e6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80173ea:	4618      	mov	r0, r3
 80173ec:	f7f4 fd45 	bl	800be7a <_ZN6tflite12RuntimeShapeD1Ev>
                             tflite::micro::GetTensorData<float>(output));
}
 80173f0:	bf00      	nop
 80173f2:	377c      	adds	r7, #124	; 0x7c
 80173f4:	46bd      	mov	sp, r7
 80173f6:	bd90      	pop	{r4, r7, pc}

080173f8 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_120AverageEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSF_>:

void AverageEvalQuantized(TfLiteContext* context, const TfLiteNode* node,
                          const TfLitePoolParams* params, const OpData& data,
                          const TfLiteEvalTensor* input,
                          TfLiteEvalTensor* output) {
 80173f8:	b590      	push	{r4, r7, lr}
 80173fa:	b0c1      	sub	sp, #260	; 0x104
 80173fc:	af04      	add	r7, sp, #16
 80173fe:	60f8      	str	r0, [r7, #12]
 8017400:	60b9      	str	r1, [r7, #8]
 8017402:	607a      	str	r2, [r7, #4]
 8017404:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(input->type == kTfLiteUInt8 || input->type == kTfLiteInt8);
 8017406:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801740a:	7a1b      	ldrb	r3, [r3, #8]
 801740c:	2b03      	cmp	r3, #3
 801740e:	d006      	beq.n	801741e <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_120AverageEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSF_+0x26>
 8017410:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8017414:	7a1b      	ldrb	r3, [r3, #8]
 8017416:	2b09      	cmp	r3, #9
 8017418:	d001      	beq.n	801741e <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_120AverageEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSF_+0x26>
 801741a:	f00e fb14 	bl	8025a46 <abort>

  if (input->type == kTfLiteUInt8) {
 801741e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8017422:	7a1b      	ldrb	r3, [r3, #8]
 8017424:	2b03      	cmp	r3, #3
 8017426:	d146      	bne.n	80174b6 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_120AverageEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSF_+0xbe>
    PoolParams op_params;
    op_params.stride_height = params->stride_height;
 8017428:	687b      	ldr	r3, [r7, #4]
 801742a:	689b      	ldr	r3, [r3, #8]
 801742c:	61fb      	str	r3, [r7, #28]
    op_params.stride_width = params->stride_width;
 801742e:	687b      	ldr	r3, [r7, #4]
 8017430:	685b      	ldr	r3, [r3, #4]
 8017432:	623b      	str	r3, [r7, #32]
    op_params.filter_height = params->filter_height;
 8017434:	687b      	ldr	r3, [r7, #4]
 8017436:	691b      	ldr	r3, [r3, #16]
 8017438:	627b      	str	r3, [r7, #36]	; 0x24
    op_params.filter_width = params->filter_width;
 801743a:	687b      	ldr	r3, [r7, #4]
 801743c:	68db      	ldr	r3, [r3, #12]
 801743e:	62bb      	str	r3, [r7, #40]	; 0x28
    op_params.padding_values.height = data.padding.height;
 8017440:	683b      	ldr	r3, [r7, #0]
 8017442:	685b      	ldr	r3, [r3, #4]
 8017444:	b21b      	sxth	r3, r3
 8017446:	82bb      	strh	r3, [r7, #20]
    op_params.padding_values.width = data.padding.width;
 8017448:	683b      	ldr	r3, [r7, #0]
 801744a:	681b      	ldr	r3, [r3, #0]
 801744c:	b21b      	sxth	r3, r3
 801744e:	827b      	strh	r3, [r7, #18]
    op_params.quantized_activation_min = data.activation_min;
 8017450:	683b      	ldr	r3, [r7, #0]
 8017452:	695b      	ldr	r3, [r3, #20]
 8017454:	62fb      	str	r3, [r7, #44]	; 0x2c
    op_params.quantized_activation_max = data.activation_max;
 8017456:	683b      	ldr	r3, [r7, #0]
 8017458:	699b      	ldr	r3, [r3, #24]
 801745a:	633b      	str	r3, [r7, #48]	; 0x30

    reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
 801745c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8017460:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8017464:	4618      	mov	r0, r3
 8017466:	f7fb f9ba 	bl	80127de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 801746a:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 801746e:	f7fa fa75 	bl	801195c <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 8017472:	4604      	mov	r4, r0
                               tflite::micro::GetTensorData<uint8_t>(input),
                               tflite::micro::GetTensorShape(output),
 8017474:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8017478:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 801747c:	4618      	mov	r0, r3
 801747e:	f7fb f9ae 	bl	80127de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
 8017482:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 8017486:	f7fa fa78 	bl	801197a <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 801748a:	4602      	mov	r2, r0
 801748c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8017490:	f107 01bc 	add.w	r1, r7, #188	; 0xbc
 8017494:	f107 0010 	add.w	r0, r7, #16
 8017498:	9200      	str	r2, [sp, #0]
 801749a:	4622      	mov	r2, r4
 801749c:	f7ff fb44 	bl	8016b28 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph>
                               tflite::micro::GetTensorShape(output),
 80174a0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80174a4:	4618      	mov	r0, r3
 80174a6:	f7f4 fce8 	bl	800be7a <_ZN6tflite12RuntimeShapeD1Ev>
    reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
 80174aa:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80174ae:	4618      	mov	r0, r3
 80174b0:	f7f4 fce3 	bl	800be7a <_ZN6tflite12RuntimeShapeD1Ev>
                       tflite::micro::GetTensorData<int8_t>(input),
                       &filter_dims, &output_dims,
                       tflite::micro::GetTensorData<int8_t>(output)),
        ARM_MATH_SUCCESS);
  }
}
 80174b4:	e0ae      	b.n	8017614 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_120AverageEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSF_+0x21c>
    RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 80174b6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80174ba:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 80174be:	4618      	mov	r0, r3
 80174c0:	f7fb f98d 	bl	80127de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 80174c4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80174c8:	4618      	mov	r0, r3
 80174ca:	f7f4 fcec 	bl	800bea6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80174ce:	4603      	mov	r3, r0
 80174d0:	2b04      	cmp	r3, #4
 80174d2:	d001      	beq.n	80174d8 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_120AverageEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSF_+0xe0>
 80174d4:	f00e fab7 	bl	8025a46 <abort>
    RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 80174d8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80174dc:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 80174e0:	4618      	mov	r0, r3
 80174e2:	f7fb f97c 	bl	80127de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 80174e6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80174ea:	4618      	mov	r0, r3
 80174ec:	f7f4 fcdb 	bl	800bea6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80174f0:	4603      	mov	r3, r0
 80174f2:	2b04      	cmp	r3, #4
 80174f4:	d001      	beq.n	80174fa <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_120AverageEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSF_+0x102>
 80174f6:	f00e faa6 	bl	8025a46 <abort>
    const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 80174fa:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80174fe:	f107 00a4 	add.w	r0, r7, #164	; 0xa4
 8017502:	2303      	movs	r3, #3
 8017504:	2103      	movs	r1, #3
 8017506:	f7fa fcb1 	bl	8011e6c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 801750a:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
    input_dims.n = 1;
 801750e:	2301      	movs	r3, #1
 8017510:	67fb      	str	r3, [r7, #124]	; 0x7c
    input_dims.h = input_shape.Dims(1);
 8017512:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8017516:	2101      	movs	r1, #1
 8017518:	4618      	mov	r0, r3
 801751a:	f7f9 fbe1 	bl	8010ce0 <_ZNK6tflite12RuntimeShape4DimsEi>
 801751e:	4603      	mov	r3, r0
 8017520:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    input_dims.w = input_shape.Dims(2);
 8017524:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8017528:	2102      	movs	r1, #2
 801752a:	4618      	mov	r0, r3
 801752c:	f7f9 fbd8 	bl	8010ce0 <_ZNK6tflite12RuntimeShape4DimsEi>
 8017530:	4603      	mov	r3, r0
 8017532:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    input_dims.c = depth;
 8017536:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801753a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    output_dims.n = 1;
 801753e:	2301      	movs	r3, #1
 8017540:	66fb      	str	r3, [r7, #108]	; 0x6c
    output_dims.h = output_shape.Dims(1);
 8017542:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8017546:	2101      	movs	r1, #1
 8017548:	4618      	mov	r0, r3
 801754a:	f7f9 fbc9 	bl	8010ce0 <_ZNK6tflite12RuntimeShape4DimsEi>
 801754e:	4603      	mov	r3, r0
 8017550:	673b      	str	r3, [r7, #112]	; 0x70
    output_dims.w = output_shape.Dims(2);
 8017552:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8017556:	2102      	movs	r1, #2
 8017558:	4618      	mov	r0, r3
 801755a:	f7f9 fbc1 	bl	8010ce0 <_ZNK6tflite12RuntimeShape4DimsEi>
 801755e:	4603      	mov	r3, r0
 8017560:	677b      	str	r3, [r7, #116]	; 0x74
    output_dims.c = depth;
 8017562:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8017566:	67bb      	str	r3, [r7, #120]	; 0x78
    pool_params.stride.h = params->stride_height;
 8017568:	687b      	ldr	r3, [r7, #4]
 801756a:	689b      	ldr	r3, [r3, #8]
 801756c:	65bb      	str	r3, [r7, #88]	; 0x58
    pool_params.stride.w = params->stride_width;
 801756e:	687b      	ldr	r3, [r7, #4]
 8017570:	685b      	ldr	r3, [r3, #4]
 8017572:	657b      	str	r3, [r7, #84]	; 0x54
    pool_params.padding.h = data.padding.height;
 8017574:	683b      	ldr	r3, [r7, #0]
 8017576:	685b      	ldr	r3, [r3, #4]
 8017578:	663b      	str	r3, [r7, #96]	; 0x60
    pool_params.padding.w = data.padding.width;
 801757a:	683b      	ldr	r3, [r7, #0]
 801757c:	681b      	ldr	r3, [r3, #0]
 801757e:	65fb      	str	r3, [r7, #92]	; 0x5c
    pool_params.activation.min = data.activation_min;
 8017580:	683b      	ldr	r3, [r7, #0]
 8017582:	695b      	ldr	r3, [r3, #20]
 8017584:	667b      	str	r3, [r7, #100]	; 0x64
    pool_params.activation.max = data.activation_max;
 8017586:	683b      	ldr	r3, [r7, #0]
 8017588:	699b      	ldr	r3, [r3, #24]
 801758a:	66bb      	str	r3, [r7, #104]	; 0x68
    filter_dims.n = 1;
 801758c:	2301      	movs	r3, #1
 801758e:	647b      	str	r3, [r7, #68]	; 0x44
    filter_dims.h = params->filter_height;
 8017590:	687b      	ldr	r3, [r7, #4]
 8017592:	691b      	ldr	r3, [r3, #16]
 8017594:	64bb      	str	r3, [r7, #72]	; 0x48
    filter_dims.w = params->filter_width;
 8017596:	687b      	ldr	r3, [r7, #4]
 8017598:	68db      	ldr	r3, [r3, #12]
 801759a:	64fb      	str	r3, [r7, #76]	; 0x4c
    filter_dims.c = 1;
 801759c:	2301      	movs	r3, #1
 801759e:	653b      	str	r3, [r7, #80]	; 0x50
    ctx.buf = nullptr;
 80175a0:	2300      	movs	r3, #0
 80175a2:	63fb      	str	r3, [r7, #60]	; 0x3c
    ctx.size = 0;
 80175a4:	2300      	movs	r3, #0
 80175a6:	643b      	str	r3, [r7, #64]	; 0x40
    if (data.buffer_idx > -1) {
 80175a8:	683b      	ldr	r3, [r7, #0]
 80175aa:	691b      	ldr	r3, [r3, #16]
 80175ac:	2b00      	cmp	r3, #0
 80175ae:	db08      	blt.n	80175c2 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_120AverageEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSF_+0x1ca>
      ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
 80175b0:	68fb      	ldr	r3, [r7, #12]
 80175b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80175b4:	683a      	ldr	r2, [r7, #0]
 80175b6:	6912      	ldr	r2, [r2, #16]
 80175b8:	4611      	mov	r1, r2
 80175ba:	68f8      	ldr	r0, [r7, #12]
 80175bc:	4798      	blx	r3
 80175be:	4603      	mov	r3, r0
 80175c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    TFLITE_DCHECK_EQ(
 80175c2:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 80175c6:	f7fa f95d 	bl	8011884 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 80175ca:	4604      	mov	r4, r0
 80175cc:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 80175d0:	f7fa f967 	bl	80118a2 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 80175d4:	4603      	mov	r3, r0
 80175d6:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 80175da:	f107 0154 	add.w	r1, r7, #84	; 0x54
 80175de:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80175e2:	9302      	str	r3, [sp, #8]
 80175e4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80175e8:	9301      	str	r3, [sp, #4]
 80175ea:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80175ee:	9300      	str	r3, [sp, #0]
 80175f0:	4623      	mov	r3, r4
 80175f2:	f00a fbcb 	bl	8021d8c <arm_avgpool_s8>
 80175f6:	4603      	mov	r3, r0
 80175f8:	2b00      	cmp	r3, #0
 80175fa:	d001      	beq.n	8017600 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_120AverageEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSF_+0x208>
 80175fc:	f00e fa23 	bl	8025a46 <abort>
    RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 8017600:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8017604:	4618      	mov	r0, r3
 8017606:	f7f4 fc38 	bl	800be7a <_ZN6tflite12RuntimeShapeD1Ev>
    RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 801760a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801760e:	4618      	mov	r0, r3
 8017610:	f7f4 fc33 	bl	800be7a <_ZN6tflite12RuntimeShapeD1Ev>
}
 8017614:	bf00      	nop
 8017616:	37f4      	adds	r7, #244	; 0xf4
 8017618:	46bd      	mov	sp, r7
 801761a:	bd90      	pop	{r4, r7, pc}

0801761c <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_112MaxEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSD_>:

void MaxEvalFloat(TfLiteContext* context, TfLiteNode* node,
                  TfLitePoolParams* params, const OpData& data,
                  const TfLiteEvalTensor* input, TfLiteEvalTensor* output) {
 801761c:	b590      	push	{r4, r7, lr}
 801761e:	b0a1      	sub	sp, #132	; 0x84
 8017620:	af02      	add	r7, sp, #8
 8017622:	60f8      	str	r0, [r7, #12]
 8017624:	60b9      	str	r1, [r7, #8]
 8017626:	607a      	str	r2, [r7, #4]
 8017628:	603b      	str	r3, [r7, #0]
  float activation_min, activation_max;
  CalculateActivationRange(params->activation, &activation_min,
 801762a:	687b      	ldr	r3, [r7, #4]
 801762c:	7d1b      	ldrb	r3, [r3, #20]
 801762e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8017632:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8017636:	4618      	mov	r0, r3
 8017638:	f7fa fe9c 	bl	8012374 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
                           &activation_max);
  tflite::PoolParams op_params;
  op_params.stride_height = params->stride_height;
 801763c:	687b      	ldr	r3, [r7, #4]
 801763e:	689b      	ldr	r3, [r3, #8]
 8017640:	623b      	str	r3, [r7, #32]
  op_params.stride_width = params->stride_width;
 8017642:	687b      	ldr	r3, [r7, #4]
 8017644:	685b      	ldr	r3, [r3, #4]
 8017646:	627b      	str	r3, [r7, #36]	; 0x24
  op_params.filter_height = params->filter_height;
 8017648:	687b      	ldr	r3, [r7, #4]
 801764a:	691b      	ldr	r3, [r3, #16]
 801764c:	62bb      	str	r3, [r7, #40]	; 0x28
  op_params.filter_width = params->filter_width;
 801764e:	687b      	ldr	r3, [r7, #4]
 8017650:	68db      	ldr	r3, [r3, #12]
 8017652:	62fb      	str	r3, [r7, #44]	; 0x2c
  op_params.padding_values.height = data.padding.height;
 8017654:	683b      	ldr	r3, [r7, #0]
 8017656:	685b      	ldr	r3, [r3, #4]
 8017658:	b21b      	sxth	r3, r3
 801765a:	833b      	strh	r3, [r7, #24]
  op_params.padding_values.width = data.padding.width;
 801765c:	683b      	ldr	r3, [r7, #0]
 801765e:	681b      	ldr	r3, [r3, #0]
 8017660:	b21b      	sxth	r3, r3
 8017662:	82fb      	strh	r3, [r7, #22]
  op_params.float_activation_min = data.activation_min_f32;
 8017664:	683b      	ldr	r3, [r7, #0]
 8017666:	69db      	ldr	r3, [r3, #28]
 8017668:	63bb      	str	r3, [r7, #56]	; 0x38
  op_params.float_activation_max = data.activation_max_f32;
 801766a:	683b      	ldr	r3, [r7, #0]
 801766c:	6a1b      	ldr	r3, [r3, #32]
 801766e:	63fb      	str	r3, [r7, #60]	; 0x3c
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
 8017670:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8017674:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8017678:	4618      	mov	r0, r3
 801767a:	f7fb f8b0 	bl	80127de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 801767e:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8017682:	f7fa f8df 	bl	8011844 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 8017686:	4604      	mov	r4, r0
                         tflite::micro::GetTensorData<float>(input),
                         tflite::micro::GetTensorShape(output),
 8017688:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801768c:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8017690:	4618      	mov	r0, r3
 8017692:	f7fb f8a4 	bl	80127de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
 8017696:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 801769a:	f7fa f8e2 	bl	8011862 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 801769e:	4602      	mov	r2, r0
 80176a0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80176a4:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80176a8:	f107 0014 	add.w	r0, r7, #20
 80176ac:	9200      	str	r2, [sp, #0]
 80176ae:	4622      	mov	r2, r4
 80176b0:	f7ff fb74 	bl	8016d9c <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>
                         tflite::micro::GetTensorShape(output),
 80176b4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80176b8:	4618      	mov	r0, r3
 80176ba:	f7f4 fbde 	bl	800be7a <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
 80176be:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80176c2:	4618      	mov	r0, r3
 80176c4:	f7f4 fbd9 	bl	800be7a <_ZN6tflite12RuntimeShapeD1Ev>
                         tflite::micro::GetTensorData<float>(output));
}
 80176c8:	bf00      	nop
 80176ca:	377c      	adds	r7, #124	; 0x7c
 80176cc:	46bd      	mov	sp, r7
 80176ce:	bd90      	pop	{r4, r7, pc}

080176d0 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_121MaxEvalQuantizedUInt8EP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSD_>:

void MaxEvalQuantizedUInt8(TfLiteContext* context, TfLiteNode* node,
                           TfLitePoolParams* params, const OpData& data,
                           const TfLiteEvalTensor* input,
                           TfLiteEvalTensor* output) {
 80176d0:	b590      	push	{r4, r7, lr}
 80176d2:	b09f      	sub	sp, #124	; 0x7c
 80176d4:	af02      	add	r7, sp, #8
 80176d6:	60f8      	str	r0, [r7, #12]
 80176d8:	60b9      	str	r1, [r7, #8]
 80176da:	607a      	str	r2, [r7, #4]
 80176dc:	603b      	str	r3, [r7, #0]
  tflite::PoolParams op_params;
  op_params.stride_height = params->stride_height;
 80176de:	687b      	ldr	r3, [r7, #4]
 80176e0:	689b      	ldr	r3, [r3, #8]
 80176e2:	623b      	str	r3, [r7, #32]
  op_params.stride_width = params->stride_width;
 80176e4:	687b      	ldr	r3, [r7, #4]
 80176e6:	685b      	ldr	r3, [r3, #4]
 80176e8:	627b      	str	r3, [r7, #36]	; 0x24
  op_params.filter_height = params->filter_height;
 80176ea:	687b      	ldr	r3, [r7, #4]
 80176ec:	691b      	ldr	r3, [r3, #16]
 80176ee:	62bb      	str	r3, [r7, #40]	; 0x28
  op_params.filter_width = params->filter_width;
 80176f0:	687b      	ldr	r3, [r7, #4]
 80176f2:	68db      	ldr	r3, [r3, #12]
 80176f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  op_params.padding_values.height = data.padding.height;
 80176f6:	683b      	ldr	r3, [r7, #0]
 80176f8:	685b      	ldr	r3, [r3, #4]
 80176fa:	b21b      	sxth	r3, r3
 80176fc:	833b      	strh	r3, [r7, #24]
  op_params.padding_values.width = data.padding.width;
 80176fe:	683b      	ldr	r3, [r7, #0]
 8017700:	681b      	ldr	r3, [r3, #0]
 8017702:	b21b      	sxth	r3, r3
 8017704:	82fb      	strh	r3, [r7, #22]
  op_params.quantized_activation_min = data.activation_min;
 8017706:	683b      	ldr	r3, [r7, #0]
 8017708:	695b      	ldr	r3, [r3, #20]
 801770a:	633b      	str	r3, [r7, #48]	; 0x30
  op_params.quantized_activation_max = data.activation_max;
 801770c:	683b      	ldr	r3, [r7, #0]
 801770e:	699b      	ldr	r3, [r3, #24]
 8017710:	637b      	str	r3, [r7, #52]	; 0x34
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
 8017712:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8017716:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 801771a:	4618      	mov	r0, r3
 801771c:	f7fb f85f 	bl	80127de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 8017720:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8017724:	f7fa f91a 	bl	801195c <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 8017728:	4604      	mov	r4, r0
                         tflite::micro::GetTensorData<uint8_t>(input),
                         tflite::micro::GetTensorShape(output),
 801772a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801772e:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8017732:	4618      	mov	r0, r3
 8017734:	f7fb f853 	bl	80127de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
 8017738:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 801773c:	f7fa f91d 	bl	801197a <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 8017740:	4602      	mov	r2, r0
 8017742:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8017746:	f107 0140 	add.w	r1, r7, #64	; 0x40
 801774a:	f107 0014 	add.w	r0, r7, #20
 801774e:	9200      	str	r2, [sp, #0]
 8017750:	4622      	mov	r2, r4
 8017752:	f7ff fc47 	bl	8016fe4 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph>
                         tflite::micro::GetTensorShape(output),
 8017756:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801775a:	4618      	mov	r0, r3
 801775c:	f7f4 fb8d 	bl	800be7a <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
 8017760:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8017764:	4618      	mov	r0, r3
 8017766:	f7f4 fb88 	bl	800be7a <_ZN6tflite12RuntimeShapeD1Ev>
                         tflite::micro::GetTensorData<uint8_t>(output));
}
 801776a:	bf00      	nop
 801776c:	3774      	adds	r7, #116	; 0x74
 801776e:	46bd      	mov	sp, r7
 8017770:	bd90      	pop	{r4, r7, pc}

08017772 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_111MaxEvalInt8EP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSF_>:

TfLiteStatus MaxEvalInt8(TfLiteContext* context, const TfLiteNode* node,
                         const TfLitePoolParams* params, const OpData& data,
                         const TfLiteEvalTensor* input,
                         TfLiteEvalTensor* output) {
 8017772:	b590      	push	{r4, r7, lr}
 8017774:	b0ab      	sub	sp, #172	; 0xac
 8017776:	af04      	add	r7, sp, #16
 8017778:	60f8      	str	r0, [r7, #12]
 801777a:	60b9      	str	r1, [r7, #8]
 801777c:	607a      	str	r2, [r7, #4]
 801777e:	603b      	str	r3, [r7, #0]
  RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 8017780:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8017784:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8017788:	4618      	mov	r0, r3
 801778a:	f7fb f828 	bl	80127de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 801778e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8017792:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8017796:	4618      	mov	r0, r3
 8017798:	f7fb f821 	bl	80127de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 801779c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80177a0:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 80177a4:	2303      	movs	r3, #3
 80177a6:	2103      	movs	r1, #3
 80177a8:	f7fa fb60 	bl	8011e6c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80177ac:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

  cmsis_nn_dims input_dims;
  input_dims.n = 1;
 80177b0:	2301      	movs	r3, #1
 80177b2:	657b      	str	r3, [r7, #84]	; 0x54
  input_dims.h = input_shape.Dims(1);
 80177b4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80177b8:	2101      	movs	r1, #1
 80177ba:	4618      	mov	r0, r3
 80177bc:	f7f9 fa90 	bl	8010ce0 <_ZNK6tflite12RuntimeShape4DimsEi>
 80177c0:	4603      	mov	r3, r0
 80177c2:	65bb      	str	r3, [r7, #88]	; 0x58
  input_dims.w = input_shape.Dims(2);
 80177c4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80177c8:	2102      	movs	r1, #2
 80177ca:	4618      	mov	r0, r3
 80177cc:	f7f9 fa88 	bl	8010ce0 <_ZNK6tflite12RuntimeShape4DimsEi>
 80177d0:	4603      	mov	r3, r0
 80177d2:	65fb      	str	r3, [r7, #92]	; 0x5c
  input_dims.c = depth;
 80177d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80177d8:	663b      	str	r3, [r7, #96]	; 0x60

  cmsis_nn_dims output_dims;
  output_dims.n = 1;
 80177da:	2301      	movs	r3, #1
 80177dc:	647b      	str	r3, [r7, #68]	; 0x44
  output_dims.h = output_shape.Dims(1);
 80177de:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80177e2:	2101      	movs	r1, #1
 80177e4:	4618      	mov	r0, r3
 80177e6:	f7f9 fa7b 	bl	8010ce0 <_ZNK6tflite12RuntimeShape4DimsEi>
 80177ea:	4603      	mov	r3, r0
 80177ec:	64bb      	str	r3, [r7, #72]	; 0x48
  output_dims.w = output_shape.Dims(2);
 80177ee:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80177f2:	2102      	movs	r1, #2
 80177f4:	4618      	mov	r0, r3
 80177f6:	f7f9 fa73 	bl	8010ce0 <_ZNK6tflite12RuntimeShape4DimsEi>
 80177fa:	4603      	mov	r3, r0
 80177fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  output_dims.c = depth;
 80177fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8017802:	653b      	str	r3, [r7, #80]	; 0x50

  cmsis_nn_pool_params pool_params;
  pool_params.stride.h = params->stride_height;
 8017804:	687b      	ldr	r3, [r7, #4]
 8017806:	689b      	ldr	r3, [r3, #8]
 8017808:	633b      	str	r3, [r7, #48]	; 0x30
  pool_params.stride.w = params->stride_width;
 801780a:	687b      	ldr	r3, [r7, #4]
 801780c:	685b      	ldr	r3, [r3, #4]
 801780e:	62fb      	str	r3, [r7, #44]	; 0x2c
  pool_params.padding.h = data.padding.height;
 8017810:	683b      	ldr	r3, [r7, #0]
 8017812:	685b      	ldr	r3, [r3, #4]
 8017814:	63bb      	str	r3, [r7, #56]	; 0x38
  pool_params.padding.w = data.padding.width;
 8017816:	683b      	ldr	r3, [r7, #0]
 8017818:	681b      	ldr	r3, [r3, #0]
 801781a:	637b      	str	r3, [r7, #52]	; 0x34
  pool_params.activation.min = data.activation_min;
 801781c:	683b      	ldr	r3, [r7, #0]
 801781e:	695b      	ldr	r3, [r3, #20]
 8017820:	63fb      	str	r3, [r7, #60]	; 0x3c
  pool_params.activation.max = data.activation_max;
 8017822:	683b      	ldr	r3, [r7, #0]
 8017824:	699b      	ldr	r3, [r3, #24]
 8017826:	643b      	str	r3, [r7, #64]	; 0x40

  cmsis_nn_dims filter_dims;
  filter_dims.n = 1;
 8017828:	2301      	movs	r3, #1
 801782a:	61fb      	str	r3, [r7, #28]
  filter_dims.h = params->filter_height;
 801782c:	687b      	ldr	r3, [r7, #4]
 801782e:	691b      	ldr	r3, [r3, #16]
 8017830:	623b      	str	r3, [r7, #32]
  filter_dims.w = params->filter_width;
 8017832:	687b      	ldr	r3, [r7, #4]
 8017834:	68db      	ldr	r3, [r3, #12]
 8017836:	627b      	str	r3, [r7, #36]	; 0x24
  filter_dims.c = 1;
 8017838:	2301      	movs	r3, #1
 801783a:	62bb      	str	r3, [r7, #40]	; 0x28

  cmsis_nn_context ctx;
  ctx.buf = nullptr;
 801783c:	2300      	movs	r3, #0
 801783e:	617b      	str	r3, [r7, #20]
  ctx.size = 0;
 8017840:	2300      	movs	r3, #0
 8017842:	61bb      	str	r3, [r7, #24]
  if (data.buffer_idx > -1) {
 8017844:	683b      	ldr	r3, [r7, #0]
 8017846:	691b      	ldr	r3, [r3, #16]
 8017848:	2b00      	cmp	r3, #0
 801784a:	db08      	blt.n	801785e <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_111MaxEvalInt8EP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSF_+0xec>
    ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
 801784c:	68fb      	ldr	r3, [r7, #12]
 801784e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017850:	683a      	ldr	r2, [r7, #0]
 8017852:	6912      	ldr	r2, [r2, #16]
 8017854:	4611      	mov	r1, r2
 8017856:	68f8      	ldr	r0, [r7, #12]
 8017858:	4798      	blx	r3
 801785a:	4603      	mov	r3, r0
 801785c:	617b      	str	r3, [r7, #20]
  }

  TFLITE_DCHECK_EQ(
 801785e:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8017862:	f7fa f80f 	bl	8011884 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8017866:	4604      	mov	r4, r0
 8017868:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 801786c:	f7fa f819 	bl	80118a2 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 8017870:	4603      	mov	r3, r0
 8017872:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8017876:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 801787a:	f107 0014 	add.w	r0, r7, #20
 801787e:	9302      	str	r3, [sp, #8]
 8017880:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8017884:	9301      	str	r3, [sp, #4]
 8017886:	f107 031c 	add.w	r3, r7, #28
 801788a:	9300      	str	r3, [sp, #0]
 801788c:	4623      	mov	r3, r4
 801788e:	f00a fcba 	bl	8022206 <arm_max_pool_s8>
 8017892:	4603      	mov	r3, r0
 8017894:	2b00      	cmp	r3, #0
 8017896:	d001      	beq.n	801789c <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_111MaxEvalInt8EP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSF_+0x12a>
 8017898:	f00e f8d5 	bl	8025a46 <abort>
                      tflite::micro::GetTensorData<int8_t>(input), &filter_dims,
                      &output_dims,
                      tflite::micro::GetTensorData<int8_t>(output)),
      ARM_MATH_SUCCESS);

  return kTfLiteOk;
 801789c:	2400      	movs	r4, #0
  RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 801789e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80178a2:	4618      	mov	r0, r3
 80178a4:	f7f4 fae9 	bl	800be7a <_ZN6tflite12RuntimeShapeD1Ev>
  RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 80178a8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80178ac:	4618      	mov	r0, r3
 80178ae:	f7f4 fae4 	bl	800be7a <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
 80178b2:	4623      	mov	r3, r4
}
 80178b4:	4618      	mov	r0, r3
 80178b6:	379c      	adds	r7, #156	; 0x9c
 80178b8:	46bd      	mov	sp, r7
 80178ba:	bd90      	pop	{r4, r7, pc}

080178bc <_ZN6tflite3ops5micro7pooling4InitEP13TfLiteContextPKcj>:

}  // namespace

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 80178bc:	b580      	push	{r7, lr}
 80178be:	b084      	sub	sp, #16
 80178c0:	af00      	add	r7, sp, #0
 80178c2:	60f8      	str	r0, [r7, #12]
 80178c4:	60b9      	str	r1, [r7, #8]
 80178c6:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 80178c8:	68fb      	ldr	r3, [r7, #12]
 80178ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80178cc:	2b00      	cmp	r3, #0
 80178ce:	d101      	bne.n	80178d4 <_ZN6tflite3ops5micro7pooling4InitEP13TfLiteContextPKcj+0x18>
 80178d0:	f00e f8b9 	bl	8025a46 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 80178d4:	68fb      	ldr	r3, [r7, #12]
 80178d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80178d8:	2124      	movs	r1, #36	; 0x24
 80178da:	68f8      	ldr	r0, [r7, #12]
 80178dc:	4798      	blx	r3
 80178de:	4603      	mov	r3, r0
}
 80178e0:	4618      	mov	r0, r3
 80178e2:	3710      	adds	r7, #16
 80178e4:	46bd      	mov	sp, r7
 80178e6:	bd80      	pop	{r7, pc}

080178e8 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus MaxPrepare(TfLiteContext* context, TfLiteNode* node) {
 80178e8:	b590      	push	{r4, r7, lr}
 80178ea:	b08b      	sub	sp, #44	; 0x2c
 80178ec:	af02      	add	r7, sp, #8
 80178ee:	6078      	str	r0, [r7, #4]
 80178f0:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 80178f2:	683b      	ldr	r3, [r7, #0]
 80178f4:	691b      	ldr	r3, [r3, #16]
 80178f6:	2b00      	cmp	r3, #0
 80178f8:	d101      	bne.n	80178fe <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x16>
 80178fa:	f00e f8a4 	bl	8025a46 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 80178fe:	683b      	ldr	r3, [r7, #0]
 8017900:	695b      	ldr	r3, [r3, #20]
 8017902:	2b00      	cmp	r3, #0
 8017904:	d101      	bne.n	801790a <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x22>
 8017906:	f00e f89e 	bl	8025a46 <abort>

  OpData* data = static_cast<OpData*>(node->user_data);
 801790a:	683b      	ldr	r3, [r7, #0]
 801790c:	691b      	ldr	r3, [r3, #16]
 801790e:	61fb      	str	r3, [r7, #28]
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);
 8017910:	683b      	ldr	r3, [r7, #0]
 8017912:	695b      	ldr	r3, [r3, #20]
 8017914:	61bb      	str	r3, [r7, #24]

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 8017916:	2200      	movs	r2, #0
 8017918:	6839      	ldr	r1, [r7, #0]
 801791a:	6878      	ldr	r0, [r7, #4]
 801791c:	f7f3 fcfa 	bl	800b314 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8017920:	6178      	str	r0, [r7, #20]
  TF_LITE_ENSURE(context, input != nullptr);
 8017922:	697b      	ldr	r3, [r7, #20]
 8017924:	2b00      	cmp	r3, #0
 8017926:	d10b      	bne.n	8017940 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x58>
 8017928:	687b      	ldr	r3, [r7, #4]
 801792a:	695c      	ldr	r4, [r3, #20]
 801792c:	4b19      	ldr	r3, [pc, #100]	; (8017994 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0xac>)
 801792e:	9300      	str	r3, [sp, #0]
 8017930:	f240 1317 	movw	r3, #279	; 0x117
 8017934:	4a18      	ldr	r2, [pc, #96]	; (8017998 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0xb0>)
 8017936:	4919      	ldr	r1, [pc, #100]	; (801799c <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0xb4>)
 8017938:	6878      	ldr	r0, [r7, #4]
 801793a:	47a0      	blx	r4
 801793c:	2301      	movs	r3, #1
 801793e:	e024      	b.n	801798a <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0xa2>
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 8017940:	2200      	movs	r2, #0
 8017942:	6839      	ldr	r1, [r7, #0]
 8017944:	6878      	ldr	r0, [r7, #4]
 8017946:	f7f3 fcf5 	bl	800b334 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 801794a:	6138      	str	r0, [r7, #16]
  TF_LITE_ENSURE(context, output != nullptr);
 801794c:	693b      	ldr	r3, [r7, #16]
 801794e:	2b00      	cmp	r3, #0
 8017950:	d10b      	bne.n	801796a <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x82>
 8017952:	687b      	ldr	r3, [r7, #4]
 8017954:	695c      	ldr	r4, [r3, #20]
 8017956:	4b12      	ldr	r3, [pc, #72]	; (80179a0 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0xb8>)
 8017958:	9300      	str	r3, [sp, #0]
 801795a:	f240 1319 	movw	r3, #281	; 0x119
 801795e:	4a0e      	ldr	r2, [pc, #56]	; (8017998 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0xb0>)
 8017960:	490e      	ldr	r1, [pc, #56]	; (801799c <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0xb4>)
 8017962:	6878      	ldr	r0, [r7, #4]
 8017964:	47a0      	blx	r4
 8017966:	2301      	movs	r3, #1
 8017968:	e00f      	b.n	801798a <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0xa2>

  TF_LITE_ENSURE_STATUS(CalculateOpData(context, params, input, output, data));
 801796a:	69fb      	ldr	r3, [r7, #28]
 801796c:	9300      	str	r3, [sp, #0]
 801796e:	693b      	ldr	r3, [r7, #16]
 8017970:	697a      	ldr	r2, [r7, #20]
 8017972:	69b9      	ldr	r1, [r7, #24]
 8017974:	6878      	ldr	r0, [r7, #4]
 8017976:	f7ff fc76 	bl	8017266 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE>
 801797a:	4603      	mov	r3, r0
 801797c:	73fb      	strb	r3, [r7, #15]
 801797e:	7bfb      	ldrb	r3, [r7, #15]
 8017980:	2b00      	cmp	r3, #0
 8017982:	d001      	beq.n	8017988 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0xa0>
 8017984:	7bfb      	ldrb	r3, [r7, #15]
 8017986:	e000      	b.n	801798a <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0xa2>

  return kTfLiteOk;
 8017988:	2300      	movs	r3, #0
}
 801798a:	4618      	mov	r0, r3
 801798c:	3724      	adds	r7, #36	; 0x24
 801798e:	46bd      	mov	sp, r7
 8017990:	bd90      	pop	{r4, r7, pc}
 8017992:	bf00      	nop
 8017994:	0802bf08 	.word	0x0802bf08
 8017998:	0802bea8 	.word	0x0802bea8
 801799c:	0802bef0 	.word	0x0802bef0
 80179a0:	0802bf1c 	.word	0x0802bf1c

080179a4 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus AveragePrepare(TfLiteContext* context, TfLiteNode* node) {
 80179a4:	b5b0      	push	{r4, r5, r7, lr}
 80179a6:	b09a      	sub	sp, #104	; 0x68
 80179a8:	af02      	add	r7, sp, #8
 80179aa:	6078      	str	r0, [r7, #4]
 80179ac:	6039      	str	r1, [r7, #0]
 80179ae:	2400      	movs	r4, #0
  TFLITE_DCHECK(node->user_data != nullptr);
 80179b0:	683b      	ldr	r3, [r7, #0]
 80179b2:	691b      	ldr	r3, [r3, #16]
 80179b4:	2b00      	cmp	r3, #0
 80179b6:	d101      	bne.n	80179bc <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x18>
 80179b8:	f00e f845 	bl	8025a46 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 80179bc:	683b      	ldr	r3, [r7, #0]
 80179be:	695b      	ldr	r3, [r3, #20]
 80179c0:	2b00      	cmp	r3, #0
 80179c2:	d101      	bne.n	80179c8 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x24>
 80179c4:	f00e f83f 	bl	8025a46 <abort>

  OpData* data = static_cast<OpData*>(node->user_data);
 80179c8:	683b      	ldr	r3, [r7, #0]
 80179ca:	691b      	ldr	r3, [r3, #16]
 80179cc:	65fb      	str	r3, [r7, #92]	; 0x5c
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);
 80179ce:	683b      	ldr	r3, [r7, #0]
 80179d0:	695b      	ldr	r3, [r3, #20]
 80179d2:	65bb      	str	r3, [r7, #88]	; 0x58

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 80179d4:	2200      	movs	r2, #0
 80179d6:	6839      	ldr	r1, [r7, #0]
 80179d8:	6878      	ldr	r0, [r7, #4]
 80179da:	f7f3 fc9b 	bl	800b314 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 80179de:	6578      	str	r0, [r7, #84]	; 0x54
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 80179e0:	2200      	movs	r2, #0
 80179e2:	6839      	ldr	r1, [r7, #0]
 80179e4:	6878      	ldr	r0, [r7, #4]
 80179e6:	f7f3 fca5 	bl	800b334 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 80179ea:	6538      	str	r0, [r7, #80]	; 0x50

  TF_LITE_ENSURE_STATUS(CalculateOpData(context, params, input, output, data));
 80179ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80179ee:	9300      	str	r3, [sp, #0]
 80179f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80179f2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80179f4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80179f6:	6878      	ldr	r0, [r7, #4]
 80179f8:	f7ff fc35 	bl	8017266 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE>
 80179fc:	4603      	mov	r3, r0
 80179fe:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8017a02:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8017a06:	2b00      	cmp	r3, #0
 8017a08:	d002      	beq.n	8017a10 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x6c>
 8017a0a:	f897 404f 	ldrb.w	r4, [r7, #79]	; 0x4f
 8017a0e:	e064      	b.n	8017ada <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x136>

  if (input->type == kTfLiteInt8) {
 8017a10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017a12:	781b      	ldrb	r3, [r3, #0]
 8017a14:	2b09      	cmp	r3, #9
 8017a16:	d15f      	bne.n	8017ad8 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x134>
    RuntimeShape input_shape = GetTensorShape(input);
 8017a18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8017a1c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8017a1e:	4618      	mov	r0, r3
 8017a20:	f7f4 faa5 	bl	800bf6e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 8017a24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8017a28:	4618      	mov	r0, r3
 8017a2a:	f7f4 fa3c 	bl	800bea6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8017a2e:	4603      	mov	r3, r0
 8017a30:	2b04      	cmp	r3, #4
 8017a32:	d001      	beq.n	8017a38 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x94>
 8017a34:	f00e f807 	bl	8025a46 <abort>

    RuntimeShape output_shape = GetTensorShape(output);
 8017a38:	f107 030c 	add.w	r3, r7, #12
 8017a3c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8017a3e:	4618      	mov	r0, r3
 8017a40:	f7f4 fa95 	bl	800bf6e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 8017a44:	f107 030c 	add.w	r3, r7, #12
 8017a48:	4618      	mov	r0, r3
 8017a4a:	f7f4 fa2c 	bl	800bea6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8017a4e:	4603      	mov	r3, r0
 8017a50:	2b04      	cmp	r3, #4
 8017a52:	d001      	beq.n	8017a58 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xb4>
 8017a54:	f00d fff7 	bl	8025a46 <abort>

    const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 8017a58:	f107 020c 	add.w	r2, r7, #12
 8017a5c:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8017a60:	2303      	movs	r3, #3
 8017a62:	2103      	movs	r1, #3
 8017a64:	f7fa fa02 	bl	8011e6c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8017a68:	64b8      	str	r0, [r7, #72]	; 0x48
    const int output_width = output_shape.Dims(2);
 8017a6a:	f107 030c 	add.w	r3, r7, #12
 8017a6e:	2102      	movs	r1, #2
 8017a70:	4618      	mov	r0, r3
 8017a72:	f7f9 f935 	bl	8010ce0 <_ZNK6tflite12RuntimeShape4DimsEi>
 8017a76:	6478      	str	r0, [r7, #68]	; 0x44

    const int32_t buffer_size =
        arm_avgpool_s8_get_buffer_size(output_width, depth);
 8017a78:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8017a7a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8017a7c:	f00a fa96 	bl	8021fac <arm_avgpool_s8_get_buffer_size>
 8017a80:	6438      	str	r0, [r7, #64]	; 0x40

    if (buffer_size > 0) {
 8017a82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017a84:	2b00      	cmp	r3, #0
 8017a86:	dd11      	ble.n	8017aac <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x108>
      TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
 8017a88:	687b      	ldr	r3, [r7, #4]
 8017a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017a8c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8017a8e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8017a90:	3210      	adds	r2, #16
 8017a92:	6878      	ldr	r0, [r7, #4]
 8017a94:	4798      	blx	r3
 8017a96:	4603      	mov	r3, r0
 8017a98:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8017a9c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8017aa0:	2b00      	cmp	r3, #0
 8017aa2:	d007      	beq.n	8017ab4 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x110>
 8017aa4:	f897 403f 	ldrb.w	r4, [r7, #63]	; 0x3f
 8017aa8:	2500      	movs	r5, #0
 8017aaa:	e004      	b.n	8017ab6 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x112>
          context, buffer_size, &data->buffer_idx));
    } else {
      data->buffer_idx = -1;
 8017aac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017aae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017ab2:	611a      	str	r2, [r3, #16]
    RuntimeShape output_shape = GetTensorShape(output);
 8017ab4:	2501      	movs	r5, #1
 8017ab6:	f107 030c 	add.w	r3, r7, #12
 8017aba:	4618      	mov	r0, r3
 8017abc:	f7f4 f9dd 	bl	800be7a <_ZN6tflite12RuntimeShapeD1Ev>
 8017ac0:	2d01      	cmp	r5, #1
 8017ac2:	d001      	beq.n	8017ac8 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x124>
 8017ac4:	2500      	movs	r5, #0
 8017ac6:	e000      	b.n	8017aca <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x126>
    RuntimeShape input_shape = GetTensorShape(input);
 8017ac8:	2501      	movs	r5, #1
 8017aca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8017ace:	4618      	mov	r0, r3
 8017ad0:	f7f4 f9d3 	bl	800be7a <_ZN6tflite12RuntimeShapeD1Ev>
 8017ad4:	2d01      	cmp	r5, #1
 8017ad6:	d100      	bne.n	8017ada <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x136>
    }
  }
  return kTfLiteOk;
 8017ad8:	2400      	movs	r4, #0
 8017ada:	4623      	mov	r3, r4
}
 8017adc:	4618      	mov	r0, r3
 8017ade:	3760      	adds	r7, #96	; 0x60
 8017ae0:	46bd      	mov	sp, r7
 8017ae2:	bdb0      	pop	{r4, r5, r7, pc}

08017ae4 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus AverageEval(TfLiteContext* context, TfLiteNode* node) {
 8017ae4:	b590      	push	{r4, r7, lr}
 8017ae6:	b089      	sub	sp, #36	; 0x24
 8017ae8:	af02      	add	r7, sp, #8
 8017aea:	6078      	str	r0, [r7, #4]
 8017aec:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->builtin_data != nullptr);
 8017aee:	683b      	ldr	r3, [r7, #0]
 8017af0:	695b      	ldr	r3, [r3, #20]
 8017af2:	2b00      	cmp	r3, #0
 8017af4:	d101      	bne.n	8017afa <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x16>
 8017af6:	f00d ffa6 	bl	8025a46 <abort>
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);
 8017afa:	683b      	ldr	r3, [r7, #0]
 8017afc:	695b      	ldr	r3, [r3, #20]
 8017afe:	617b      	str	r3, [r7, #20]

  TFLITE_DCHECK(node->user_data != nullptr);
 8017b00:	683b      	ldr	r3, [r7, #0]
 8017b02:	691b      	ldr	r3, [r3, #16]
 8017b04:	2b00      	cmp	r3, #0
 8017b06:	d101      	bne.n	8017b0c <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x28>
 8017b08:	f00d ff9d 	bl	8025a46 <abort>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));
 8017b0c:	683b      	ldr	r3, [r7, #0]
 8017b0e:	691b      	ldr	r3, [r3, #16]
 8017b10:	613b      	str	r3, [r7, #16]

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
 8017b12:	2200      	movs	r2, #0
 8017b14:	6839      	ldr	r1, [r7, #0]
 8017b16:	6878      	ldr	r0, [r7, #4]
 8017b18:	f7f9 f9b6 	bl	8010e88 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8017b1c:	60f8      	str	r0, [r7, #12]
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 8017b1e:	2200      	movs	r2, #0
 8017b20:	6839      	ldr	r1, [r7, #0]
 8017b22:	6878      	ldr	r0, [r7, #4]
 8017b24:	f7f9 f9c0 	bl	8010ea8 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 8017b28:	60b8      	str	r0, [r7, #8]

  // Inputs and outputs share the same type, guaranteed by the converter.
  switch (input->type) {
 8017b2a:	68fb      	ldr	r3, [r7, #12]
 8017b2c:	7a1b      	ldrb	r3, [r3, #8]
 8017b2e:	2b09      	cmp	r3, #9
 8017b30:	d011      	beq.n	8017b56 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x72>
 8017b32:	2b09      	cmp	r3, #9
 8017b34:	dc1a      	bgt.n	8017b6c <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x88>
 8017b36:	2b01      	cmp	r3, #1
 8017b38:	d002      	beq.n	8017b40 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x5c>
 8017b3a:	2b03      	cmp	r3, #3
 8017b3c:	d00b      	beq.n	8017b56 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x72>
 8017b3e:	e015      	b.n	8017b6c <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x88>
    case kTfLiteFloat32:
      AverageEvalFloat(context, node, params, data, input, output);
 8017b40:	68bb      	ldr	r3, [r7, #8]
 8017b42:	9301      	str	r3, [sp, #4]
 8017b44:	68fb      	ldr	r3, [r7, #12]
 8017b46:	9300      	str	r3, [sp, #0]
 8017b48:	693b      	ldr	r3, [r7, #16]
 8017b4a:	697a      	ldr	r2, [r7, #20]
 8017b4c:	6839      	ldr	r1, [r7, #0]
 8017b4e:	6878      	ldr	r0, [r7, #4]
 8017b50:	f7ff fbfa 	bl	8017348 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_116AverageEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSG_>
      break;
 8017b54:	e018      	b.n	8017b88 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xa4>
    case kTfLiteUInt8:
    case kTfLiteInt8:
      AverageEvalQuantized(context, node, params, data, input, output);
 8017b56:	68bb      	ldr	r3, [r7, #8]
 8017b58:	9301      	str	r3, [sp, #4]
 8017b5a:	68fb      	ldr	r3, [r7, #12]
 8017b5c:	9300      	str	r3, [sp, #0]
 8017b5e:	693b      	ldr	r3, [r7, #16]
 8017b60:	697a      	ldr	r2, [r7, #20]
 8017b62:	6839      	ldr	r1, [r7, #0]
 8017b64:	6878      	ldr	r0, [r7, #4]
 8017b66:	f7ff fc47 	bl	80173f8 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_120AverageEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSF_>
      break;
 8017b6a:	e00d      	b.n	8017b88 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xa4>
    default:
      TF_LITE_KERNEL_LOG(context, "Input type %s is not currently supported",
 8017b6c:	687b      	ldr	r3, [r7, #4]
 8017b6e:	695c      	ldr	r4, [r3, #20]
 8017b70:	68fb      	ldr	r3, [r7, #12]
 8017b72:	7a1b      	ldrb	r3, [r3, #8]
 8017b74:	4618      	mov	r0, r3
 8017b76:	f7f0 fd6b 	bl	8008650 <TfLiteTypeGetName>
 8017b7a:	4603      	mov	r3, r0
 8017b7c:	461a      	mov	r2, r3
 8017b7e:	4905      	ldr	r1, [pc, #20]	; (8017b94 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xb0>)
 8017b80:	6878      	ldr	r0, [r7, #4]
 8017b82:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
 8017b84:	2301      	movs	r3, #1
 8017b86:	e000      	b.n	8017b8a <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xa6>
  }
  return kTfLiteOk;
 8017b88:	2300      	movs	r3, #0
}
 8017b8a:	4618      	mov	r0, r3
 8017b8c:	371c      	adds	r7, #28
 8017b8e:	46bd      	mov	sp, r7
 8017b90:	bd90      	pop	{r4, r7, pc}
 8017b92:	bf00      	nop
 8017b94:	0802bf30 	.word	0x0802bf30

08017b98 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus MaxEval(TfLiteContext* context, TfLiteNode* node) {
 8017b98:	b590      	push	{r4, r7, lr}
 8017b9a:	b089      	sub	sp, #36	; 0x24
 8017b9c:	af02      	add	r7, sp, #8
 8017b9e:	6078      	str	r0, [r7, #4]
 8017ba0:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->builtin_data != nullptr);
 8017ba2:	683b      	ldr	r3, [r7, #0]
 8017ba4:	695b      	ldr	r3, [r3, #20]
 8017ba6:	2b00      	cmp	r3, #0
 8017ba8:	d101      	bne.n	8017bae <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x16>
 8017baa:	f00d ff4c 	bl	8025a46 <abort>
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);
 8017bae:	683b      	ldr	r3, [r7, #0]
 8017bb0:	695b      	ldr	r3, [r3, #20]
 8017bb2:	617b      	str	r3, [r7, #20]

  TFLITE_DCHECK(node->user_data != nullptr);
 8017bb4:	683b      	ldr	r3, [r7, #0]
 8017bb6:	691b      	ldr	r3, [r3, #16]
 8017bb8:	2b00      	cmp	r3, #0
 8017bba:	d101      	bne.n	8017bc0 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x28>
 8017bbc:	f00d ff43 	bl	8025a46 <abort>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));
 8017bc0:	683b      	ldr	r3, [r7, #0]
 8017bc2:	691b      	ldr	r3, [r3, #16]
 8017bc4:	613b      	str	r3, [r7, #16]

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
 8017bc6:	2200      	movs	r2, #0
 8017bc8:	6839      	ldr	r1, [r7, #0]
 8017bca:	6878      	ldr	r0, [r7, #4]
 8017bcc:	f7f9 f95c 	bl	8010e88 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8017bd0:	60f8      	str	r0, [r7, #12]
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 8017bd2:	2200      	movs	r2, #0
 8017bd4:	6839      	ldr	r1, [r7, #0]
 8017bd6:	6878      	ldr	r0, [r7, #4]
 8017bd8:	f7f9 f966 	bl	8010ea8 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 8017bdc:	60b8      	str	r0, [r7, #8]

  switch (input->type) {
 8017bde:	68fb      	ldr	r3, [r7, #12]
 8017be0:	7a1b      	ldrb	r3, [r3, #8]
 8017be2:	2b09      	cmp	r3, #9
 8017be4:	d01c      	beq.n	8017c20 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x88>
 8017be6:	2b09      	cmp	r3, #9
 8017be8:	dc25      	bgt.n	8017c36 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x9e>
 8017bea:	2b01      	cmp	r3, #1
 8017bec:	d002      	beq.n	8017bf4 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x5c>
 8017bee:	2b03      	cmp	r3, #3
 8017bf0:	d00b      	beq.n	8017c0a <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x72>
 8017bf2:	e020      	b.n	8017c36 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x9e>
    case kTfLiteFloat32:
      MaxEvalFloat(context, node, params, data, input, output);
 8017bf4:	68bb      	ldr	r3, [r7, #8]
 8017bf6:	9301      	str	r3, [sp, #4]
 8017bf8:	68fb      	ldr	r3, [r7, #12]
 8017bfa:	9300      	str	r3, [sp, #0]
 8017bfc:	693b      	ldr	r3, [r7, #16]
 8017bfe:	697a      	ldr	r2, [r7, #20]
 8017c00:	6839      	ldr	r1, [r7, #0]
 8017c02:	6878      	ldr	r0, [r7, #4]
 8017c04:	f7ff fd0a 	bl	801761c <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_112MaxEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSD_>
      break;
 8017c08:	e023      	b.n	8017c52 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xba>
    case kTfLiteUInt8:
      MaxEvalQuantizedUInt8(context, node, params, data, input, output);
 8017c0a:	68bb      	ldr	r3, [r7, #8]
 8017c0c:	9301      	str	r3, [sp, #4]
 8017c0e:	68fb      	ldr	r3, [r7, #12]
 8017c10:	9300      	str	r3, [sp, #0]
 8017c12:	693b      	ldr	r3, [r7, #16]
 8017c14:	697a      	ldr	r2, [r7, #20]
 8017c16:	6839      	ldr	r1, [r7, #0]
 8017c18:	6878      	ldr	r0, [r7, #4]
 8017c1a:	f7ff fd59 	bl	80176d0 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_121MaxEvalQuantizedUInt8EP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSD_>
      break;
 8017c1e:	e018      	b.n	8017c52 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xba>
    case kTfLiteInt8:
      MaxEvalInt8(context, node, params, data, input, output);
 8017c20:	68bb      	ldr	r3, [r7, #8]
 8017c22:	9301      	str	r3, [sp, #4]
 8017c24:	68fb      	ldr	r3, [r7, #12]
 8017c26:	9300      	str	r3, [sp, #0]
 8017c28:	693b      	ldr	r3, [r7, #16]
 8017c2a:	697a      	ldr	r2, [r7, #20]
 8017c2c:	6839      	ldr	r1, [r7, #0]
 8017c2e:	6878      	ldr	r0, [r7, #4]
 8017c30:	f7ff fd9f 	bl	8017772 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_111MaxEvalInt8EP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSF_>
      break;
 8017c34:	e00d      	b.n	8017c52 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xba>
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s not currently supported.",
 8017c36:	687b      	ldr	r3, [r7, #4]
 8017c38:	695c      	ldr	r4, [r3, #20]
 8017c3a:	68fb      	ldr	r3, [r7, #12]
 8017c3c:	7a1b      	ldrb	r3, [r3, #8]
 8017c3e:	4618      	mov	r0, r3
 8017c40:	f7f0 fd06 	bl	8008650 <TfLiteTypeGetName>
 8017c44:	4603      	mov	r3, r0
 8017c46:	461a      	mov	r2, r3
 8017c48:	4904      	ldr	r1, [pc, #16]	; (8017c5c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xc4>)
 8017c4a:	6878      	ldr	r0, [r7, #4]
 8017c4c:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
 8017c4e:	2301      	movs	r3, #1
 8017c50:	e000      	b.n	8017c54 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xbc>
  }
  return kTfLiteOk;
 8017c52:	2300      	movs	r3, #0
}
 8017c54:	4618      	mov	r0, r3
 8017c56:	371c      	adds	r7, #28
 8017c58:	46bd      	mov	sp, r7
 8017c5a:	bd90      	pop	{r4, r7, pc}
 8017c5c:	0802bf5c 	.word	0x0802bf5c

08017c60 <_ZN6tflite3ops5micro24Register_AVERAGE_POOL_2DEv>:

}  // namespace pooling

TfLiteRegistration Register_AVERAGE_POOL_2D() {
 8017c60:	b4b0      	push	{r4, r5, r7}
 8017c62:	b083      	sub	sp, #12
 8017c64:	af00      	add	r7, sp, #0
 8017c66:	6078      	str	r0, [r7, #4]
          /*prepare=*/pooling::AveragePrepare,
          /*invoke=*/pooling::AverageEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 8017c68:	687b      	ldr	r3, [r7, #4]
 8017c6a:	4a07      	ldr	r2, [pc, #28]	; (8017c88 <_ZN6tflite3ops5micro24Register_AVERAGE_POOL_2DEv+0x28>)
 8017c6c:	461c      	mov	r4, r3
 8017c6e:	4615      	mov	r5, r2
 8017c70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017c72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017c74:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8017c78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8017c7c:	6878      	ldr	r0, [r7, #4]
 8017c7e:	370c      	adds	r7, #12
 8017c80:	46bd      	mov	sp, r7
 8017c82:	bcb0      	pop	{r4, r5, r7}
 8017c84:	4770      	bx	lr
 8017c86:	bf00      	nop
 8017c88:	0802bf80 	.word	0x0802bf80

08017c8c <_ZSt3maxIhERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8017c8c:	b480      	push	{r7}
 8017c8e:	b083      	sub	sp, #12
 8017c90:	af00      	add	r7, sp, #0
 8017c92:	6078      	str	r0, [r7, #4]
 8017c94:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8017c96:	687b      	ldr	r3, [r7, #4]
 8017c98:	781a      	ldrb	r2, [r3, #0]
 8017c9a:	683b      	ldr	r3, [r7, #0]
 8017c9c:	781b      	ldrb	r3, [r3, #0]
 8017c9e:	429a      	cmp	r2, r3
 8017ca0:	d201      	bcs.n	8017ca6 <_ZSt3maxIhERKT_S2_S2_+0x1a>
	return __b;
 8017ca2:	683b      	ldr	r3, [r7, #0]
 8017ca4:	e000      	b.n	8017ca8 <_ZSt3maxIhERKT_S2_S2_+0x1c>
      return __a;
 8017ca6:	687b      	ldr	r3, [r7, #4]
    }
 8017ca8:	4618      	mov	r0, r3
 8017caa:	370c      	adds	r7, #12
 8017cac:	46bd      	mov	sp, r7
 8017cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cb2:	4770      	bx	lr

08017cb4 <_ZSt3minIhERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8017cb4:	b480      	push	{r7}
 8017cb6:	b083      	sub	sp, #12
 8017cb8:	af00      	add	r7, sp, #0
 8017cba:	6078      	str	r0, [r7, #4]
 8017cbc:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8017cbe:	683b      	ldr	r3, [r7, #0]
 8017cc0:	781a      	ldrb	r2, [r3, #0]
 8017cc2:	687b      	ldr	r3, [r7, #4]
 8017cc4:	781b      	ldrb	r3, [r3, #0]
 8017cc6:	429a      	cmp	r2, r3
 8017cc8:	d201      	bcs.n	8017cce <_ZSt3minIhERKT_S2_S2_+0x1a>
	return __b;
 8017cca:	683b      	ldr	r3, [r7, #0]
 8017ccc:	e000      	b.n	8017cd0 <_ZSt3minIhERKT_S2_S2_+0x1c>
      return __a;
 8017cce:	687b      	ldr	r3, [r7, #4]
    }
 8017cd0:	4618      	mov	r0, r3
 8017cd2:	370c      	adds	r7, #12
 8017cd4:	46bd      	mov	sp, r7
 8017cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cda:	4770      	bx	lr

08017cdc <_ZN6tflite26generic_int16_table_lookupEsPKs>:

// int16_t func table lookup, e.g., lookup exp() and 1/(1+x) used in softmax
inline int16_t generic_int16_table_lookup(int16_t value, const int16_t* lut) {
 8017cdc:	b580      	push	{r7, lr}
 8017cde:	b086      	sub	sp, #24
 8017ce0:	af00      	add	r7, sp, #0
 8017ce2:	4603      	mov	r3, r0
 8017ce4:	6039      	str	r1, [r7, #0]
 8017ce6:	80fb      	strh	r3, [r7, #6]
  // 512 base value, lut[513] only for calculate slope
  uint16_t index = static_cast<uint16_t>(256 + (value >> 7));
 8017ce8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8017cec:	11db      	asrs	r3, r3, #7
 8017cee:	b29b      	uxth	r3, r3
 8017cf0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8017cf4:	82fb      	strh	r3, [r7, #22]
  assert(index < 512 && "LUT index out of range.");
 8017cf6:	8afb      	ldrh	r3, [r7, #22]
 8017cf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017cfc:	d306      	bcc.n	8017d0c <_ZN6tflite26generic_int16_table_lookupEsPKs+0x30>
 8017cfe:	4b1b      	ldr	r3, [pc, #108]	; (8017d6c <_ZN6tflite26generic_int16_table_lookupEsPKs+0x90>)
 8017d00:	4a1b      	ldr	r2, [pc, #108]	; (8017d70 <_ZN6tflite26generic_int16_table_lookupEsPKs+0x94>)
 8017d02:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8017d06:	481b      	ldr	r0, [pc, #108]	; (8017d74 <_ZN6tflite26generic_int16_table_lookupEsPKs+0x98>)
 8017d08:	f00d fea4 	bl	8025a54 <__assert_func>
  int16_t offset = value & 0x7f;
 8017d0c:	88fb      	ldrh	r3, [r7, #6]
 8017d0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017d12:	82bb      	strh	r3, [r7, #20]

  // base and slope are Q0.15
  int16_t base = lut[index];
 8017d14:	8afb      	ldrh	r3, [r7, #22]
 8017d16:	005b      	lsls	r3, r3, #1
 8017d18:	683a      	ldr	r2, [r7, #0]
 8017d1a:	4413      	add	r3, r2
 8017d1c:	881b      	ldrh	r3, [r3, #0]
 8017d1e:	827b      	strh	r3, [r7, #18]
  int16_t slope = lut[index + 1] - lut[index];
 8017d20:	8afb      	ldrh	r3, [r7, #22]
 8017d22:	3301      	adds	r3, #1
 8017d24:	005b      	lsls	r3, r3, #1
 8017d26:	683a      	ldr	r2, [r7, #0]
 8017d28:	4413      	add	r3, r2
 8017d2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017d2e:	b29a      	uxth	r2, r3
 8017d30:	8afb      	ldrh	r3, [r7, #22]
 8017d32:	005b      	lsls	r3, r3, #1
 8017d34:	6839      	ldr	r1, [r7, #0]
 8017d36:	440b      	add	r3, r1
 8017d38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017d3c:	b29b      	uxth	r3, r3
 8017d3e:	1ad3      	subs	r3, r2, r3
 8017d40:	b29b      	uxth	r3, r3
 8017d42:	823b      	strh	r3, [r7, #16]

  // Q0.15 * Q0.7 = Q0.22
  // Round and convert from Q0.22 to Q0.15
  int32_t delta = (static_cast<int32_t>(slope) * offset + 64) >> 7;
 8017d44:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8017d48:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8017d4c:	fb02 f303 	mul.w	r3, r2, r3
 8017d50:	3340      	adds	r3, #64	; 0x40
 8017d52:	11db      	asrs	r3, r3, #7
 8017d54:	60fb      	str	r3, [r7, #12]

  // Q0.15 + Q0.15
  return base + delta;
 8017d56:	68fb      	ldr	r3, [r7, #12]
 8017d58:	b29a      	uxth	r2, r3
 8017d5a:	8a7b      	ldrh	r3, [r7, #18]
 8017d5c:	4413      	add	r3, r2
 8017d5e:	b29b      	uxth	r3, r3
 8017d60:	b21b      	sxth	r3, r3
}
 8017d62:	4618      	mov	r0, r3
 8017d64:	3718      	adds	r7, #24
 8017d66:	46bd      	mov	sp, r7
 8017d68:	bd80      	pop	{r7, pc}
 8017d6a:	bf00      	nop
 8017d6c:	0802bfc0 	.word	0x0802bfc0
 8017d70:	0802bfec 	.word	0x0802bfec
 8017d74:	0802c030 	.word	0x0802c030

08017d78 <_ZN6tflite13GetReciprocalEliPi>:
                                                     InputIntegerBits>(
      input_val);
}

inline int32_t GetReciprocal(int32_t x, int x_integer_digits,
                             int* num_bits_over_unit) {
 8017d78:	b580      	push	{r7, lr}
 8017d7a:	b088      	sub	sp, #32
 8017d7c:	af00      	add	r7, sp, #0
 8017d7e:	60f8      	str	r0, [r7, #12]
 8017d80:	60b9      	str	r1, [r7, #8]
 8017d82:	607a      	str	r2, [r7, #4]
  int headroom_plus_one = CountLeadingZeros(static_cast<uint32_t>(x));
 8017d84:	68fb      	ldr	r3, [r7, #12]
 8017d86:	4618      	mov	r0, r3
 8017d88:	f7fa fde6 	bl	8012958 <_ZN6tflite17CountLeadingZerosImEEiT_>
 8017d8c:	61f8      	str	r0, [r7, #28]
  // This is the number of bits to the left of the binary point above 1.0.
  // Consider x=1.25.  In that case shifted_scale=0.8 and
  // no later adjustment will be needed.
  *num_bits_over_unit = x_integer_digits - headroom_plus_one;
 8017d8e:	68ba      	ldr	r2, [r7, #8]
 8017d90:	69fb      	ldr	r3, [r7, #28]
 8017d92:	1ad2      	subs	r2, r2, r3
 8017d94:	687b      	ldr	r3, [r7, #4]
 8017d96:	601a      	str	r2, [r3, #0]
  const int32_t shifted_sum_minus_one =
      static_cast<int32_t>((static_cast<uint32_t>(x) << headroom_plus_one) -
 8017d98:	68fa      	ldr	r2, [r7, #12]
 8017d9a:	69fb      	ldr	r3, [r7, #28]
 8017d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8017da0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  const int32_t shifted_sum_minus_one =
 8017da4:	61bb      	str	r3, [r7, #24]
                           (static_cast<uint32_t>(1) << 31));

  gemmlowp::FixedPoint<int32_t, 0> shifted_scale =
      gemmlowp::one_over_one_plus_x_for_x_in_0_1(
          gemmlowp::FixedPoint<int32_t, 0>::FromRaw(shifted_sum_minus_one));
 8017da6:	69b8      	ldr	r0, [r7, #24]
 8017da8:	f7fa fef9 	bl	8012b9e <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8017dac:	4603      	mov	r3, r0
 8017dae:	4618      	mov	r0, r3
 8017db0:	f7fa ff06 	bl	8012bc0 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>
 8017db4:	4603      	mov	r3, r0
 8017db6:	617b      	str	r3, [r7, #20]
  return shifted_scale.raw();
 8017db8:	f107 0314 	add.w	r3, r7, #20
 8017dbc:	4618      	mov	r0, r3
 8017dbe:	f7fa fddd 	bl	801297c <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8017dc2:	4603      	mov	r3, r0
 8017dc4:	681b      	ldr	r3, [r3, #0]
}
 8017dc6:	4618      	mov	r0, r3
 8017dc8:	3720      	adds	r7, #32
 8017dca:	46bd      	mov	sp, r7
 8017dcc:	bd80      	pop	{r7, pc}

08017dce <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
namespace tflite {
namespace reference_ops {

inline void Softmax(const SoftmaxParams& params,
                    const RuntimeShape& input_shape, const float* input_data,
                    const RuntimeShape& output_shape, float* output_data) {
 8017dce:	b580      	push	{r7, lr}
 8017dd0:	ed2d 8b02 	vpush	{d8}
 8017dd4:	b08e      	sub	sp, #56	; 0x38
 8017dd6:	af00      	add	r7, sp, #0
 8017dd8:	60f8      	str	r0, [r7, #12]
 8017dda:	60b9      	str	r1, [r7, #8]
 8017ddc:	607a      	str	r2, [r7, #4]
 8017dde:	603b      	str	r3, [r7, #0]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 8017de0:	68b8      	ldr	r0, [r7, #8]
 8017de2:	f7f4 f860 	bl	800bea6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8017de6:	4603      	mov	r3, r0
 8017de8:	3b01      	subs	r3, #1
 8017dea:	623b      	str	r3, [r7, #32]
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 8017dec:	683a      	ldr	r2, [r7, #0]
 8017dee:	6a39      	ldr	r1, [r7, #32]
 8017df0:	68b8      	ldr	r0, [r7, #8]
 8017df2:	f7fa fd82 	bl	80128fa <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 8017df6:	61f8      	str	r0, [r7, #28]
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 8017df8:	6a3b      	ldr	r3, [r7, #32]
 8017dfa:	683a      	ldr	r2, [r7, #0]
 8017dfc:	6a39      	ldr	r1, [r7, #32]
 8017dfe:	68b8      	ldr	r0, [r7, #8]
 8017e00:	f7fa f834 	bl	8011e6c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8017e04:	61b8      	str	r0, [r7, #24]

  for (int i = 0; i < outer_size; ++i) {
 8017e06:	2300      	movs	r3, #0
 8017e08:	637b      	str	r3, [r7, #52]	; 0x34
 8017e0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017e0c:	69fb      	ldr	r3, [r7, #28]
 8017e0e:	429a      	cmp	r2, r3
 8017e10:	f280 8087 	bge.w	8017f22 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x154>
    // Find max element value which we'll use to ensure numerical stability
    // taking advantage of the following equality:
    // exp(x[i])/sum(exp(x[i])) == exp(x[i]+C)/sum(exp(x[i]+C))
    float max = std::numeric_limits<float>::lowest();
 8017e14:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 8017e18:	613b      	str	r3, [r7, #16]
    for (int c = 0; c < depth; ++c) {
 8017e1a:	2300      	movs	r3, #0
 8017e1c:	633b      	str	r3, [r7, #48]	; 0x30
 8017e1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017e20:	69bb      	ldr	r3, [r7, #24]
 8017e22:	429a      	cmp	r2, r3
 8017e24:	da15      	bge.n	8017e52 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x84>
      max = std::max(max, input_data[i * depth + c]);
 8017e26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017e28:	69ba      	ldr	r2, [r7, #24]
 8017e2a:	fb02 f203 	mul.w	r2, r2, r3
 8017e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e30:	4413      	add	r3, r2
 8017e32:	009b      	lsls	r3, r3, #2
 8017e34:	687a      	ldr	r2, [r7, #4]
 8017e36:	441a      	add	r2, r3
 8017e38:	f107 0310 	add.w	r3, r7, #16
 8017e3c:	4611      	mov	r1, r2
 8017e3e:	4618      	mov	r0, r3
 8017e40:	f7f3 f91a 	bl	800b078 <_ZSt3maxIfERKT_S2_S2_>
 8017e44:	4603      	mov	r3, r0
 8017e46:	681b      	ldr	r3, [r3, #0]
 8017e48:	613b      	str	r3, [r7, #16]
    for (int c = 0; c < depth; ++c) {
 8017e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e4c:	3301      	adds	r3, #1
 8017e4e:	633b      	str	r3, [r7, #48]	; 0x30
 8017e50:	e7e5      	b.n	8017e1e <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x50>
    }

    // Compute sum.
    float sum = 0.f;
 8017e52:	f04f 0300 	mov.w	r3, #0
 8017e56:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (int c = 0; c < depth; ++c) {
 8017e58:	2300      	movs	r3, #0
 8017e5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8017e5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017e5e:	69bb      	ldr	r3, [r7, #24]
 8017e60:	429a      	cmp	r2, r3
 8017e62:	da36      	bge.n	8017ed2 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x104>
      const float exp_c = std::exp((input_data[i * depth + c] - max) *
 8017e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017e66:	69ba      	ldr	r2, [r7, #24]
 8017e68:	fb02 f203 	mul.w	r2, r2, r3
 8017e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e6e:	4413      	add	r3, r2
 8017e70:	009b      	lsls	r3, r3, #2
 8017e72:	687a      	ldr	r2, [r7, #4]
 8017e74:	4413      	add	r3, r2
 8017e76:	ed93 7a00 	vldr	s14, [r3]
 8017e7a:	edd7 7a04 	vldr	s15, [r7, #16]
 8017e7e:	ee37 8a67 	vsub.f32	s16, s14, s15
                                   static_cast<float>(params.beta));
 8017e82:	68fb      	ldr	r3, [r7, #12]
 8017e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017e88:	4610      	mov	r0, r2
 8017e8a:	4619      	mov	r1, r3
 8017e8c:	f7e8 fea8 	bl	8000be0 <__aeabi_d2f>
 8017e90:	ee07 0a90 	vmov	s15, r0
      const float exp_c = std::exp((input_data[i * depth + c] - max) *
 8017e94:	ee68 7a27 	vmul.f32	s15, s16, s15
 8017e98:	eeb0 0a67 	vmov.f32	s0, s15
 8017e9c:	f7fa fc79 	bl	8012792 <_ZSt3expf>
 8017ea0:	ed87 0a05 	vstr	s0, [r7, #20]
      output_data[i * depth + c] = exp_c;
 8017ea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017ea6:	69ba      	ldr	r2, [r7, #24]
 8017ea8:	fb02 f203 	mul.w	r2, r2, r3
 8017eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017eae:	4413      	add	r3, r2
 8017eb0:	009b      	lsls	r3, r3, #2
 8017eb2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017eb4:	4413      	add	r3, r2
 8017eb6:	697a      	ldr	r2, [r7, #20]
 8017eb8:	601a      	str	r2, [r3, #0]
      sum += exp_c;
 8017eba:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8017ebe:	edd7 7a05 	vldr	s15, [r7, #20]
 8017ec2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017ec6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    for (int c = 0; c < depth; ++c) {
 8017eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ecc:	3301      	adds	r3, #1
 8017ece:	62bb      	str	r3, [r7, #40]	; 0x28
 8017ed0:	e7c4      	b.n	8017e5c <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x8e>
    }

    // Compute result.
    for (int c = 0; c < depth; ++c) {
 8017ed2:	2300      	movs	r3, #0
 8017ed4:	627b      	str	r3, [r7, #36]	; 0x24
 8017ed6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017ed8:	69bb      	ldr	r3, [r7, #24]
 8017eda:	429a      	cmp	r2, r3
 8017edc:	da1d      	bge.n	8017f1a <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x14c>
      output_data[i * depth + c] = output_data[i * depth + c] / sum;
 8017ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017ee0:	69ba      	ldr	r2, [r7, #24]
 8017ee2:	fb02 f203 	mul.w	r2, r2, r3
 8017ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ee8:	4413      	add	r3, r2
 8017eea:	009b      	lsls	r3, r3, #2
 8017eec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017eee:	4413      	add	r3, r2
 8017ef0:	edd3 6a00 	vldr	s13, [r3]
 8017ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017ef6:	69ba      	ldr	r2, [r7, #24]
 8017ef8:	fb02 f203 	mul.w	r2, r2, r3
 8017efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017efe:	4413      	add	r3, r2
 8017f00:	009b      	lsls	r3, r3, #2
 8017f02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017f04:	4413      	add	r3, r2
 8017f06:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8017f0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8017f0e:	edc3 7a00 	vstr	s15, [r3]
    for (int c = 0; c < depth; ++c) {
 8017f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f14:	3301      	adds	r3, #1
 8017f16:	627b      	str	r3, [r7, #36]	; 0x24
 8017f18:	e7dd      	b.n	8017ed6 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x108>
  for (int i = 0; i < outer_size; ++i) {
 8017f1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017f1c:	3301      	adds	r3, #1
 8017f1e:	637b      	str	r3, [r7, #52]	; 0x34
 8017f20:	e773      	b.n	8017e0a <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x3c>
    }
  }
}
 8017f22:	bf00      	nop
 8017f24:	3738      	adds	r7, #56	; 0x38
 8017f26:	46bd      	mov	sp, r7
 8017f28:	ecbd 8b02 	vpop	{d8}
 8017f2c:	bd80      	pop	{r7, pc}
	...

08017f30 <_ZN6tflite13reference_ops19SoftMaxCalculateExpERKNS_13SoftmaxParamsEPKsisii>:
}

// Computes exp(input - max_input)
inline int16_t SoftMaxCalculateExp(const SoftmaxParams& params,
                                   const int16_t* input_data, const int depth,
                                   int16_t max_in_row, int i, int c) {
 8017f30:	b580      	push	{r7, lr}
 8017f32:	b08a      	sub	sp, #40	; 0x28
 8017f34:	af00      	add	r7, sp, #0
 8017f36:	60f8      	str	r0, [r7, #12]
 8017f38:	60b9      	str	r1, [r7, #8]
 8017f3a:	607a      	str	r2, [r7, #4]
 8017f3c:	807b      	strh	r3, [r7, #2]
  int32_t input_diff = input_data[i * depth + c] - max_in_row;
 8017f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f40:	687a      	ldr	r2, [r7, #4]
 8017f42:	fb02 f203 	mul.w	r2, r2, r3
 8017f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017f48:	4413      	add	r3, r2
 8017f4a:	005b      	lsls	r3, r3, #1
 8017f4c:	68ba      	ldr	r2, [r7, #8]
 8017f4e:	4413      	add	r3, r2
 8017f50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017f54:	461a      	mov	r2, r3
 8017f56:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8017f5a:	1ad3      	subs	r3, r2, r3
 8017f5c:	627b      	str	r3, [r7, #36]	; 0x24
  // scale the input_diff such that [-65535, 0] correspond to [-10.0, 0.0]
  // exp lut generated with range [-10, 0], as exp(-10) is negligible.
  int32_t scaled_diff = MultiplyByQuantizedMultiplier(
      input_diff, params.input_multiplier, params.input_left_shift);
 8017f5e:	68fb      	ldr	r3, [r7, #12]
 8017f60:	6899      	ldr	r1, [r3, #8]
 8017f62:	68fb      	ldr	r3, [r7, #12]
 8017f64:	68db      	ldr	r3, [r3, #12]
  int32_t scaled_diff = MultiplyByQuantizedMultiplier(
 8017f66:	461a      	mov	r2, r3
 8017f68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017f6a:	f7f8 ff49 	bl	8010e00 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 8017f6e:	6238      	str	r0, [r7, #32]
  // recenter to [-32768, 32767]
  int32_t sym_scaled_diff = scaled_diff + 32767;
 8017f70:	6a3b      	ldr	r3, [r7, #32]
 8017f72:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8017f76:	337f      	adds	r3, #127	; 0x7f
 8017f78:	613b      	str	r3, [r7, #16]
  int16_t sat_sym_scaled_diff =
      std::min(std::max(sym_scaled_diff, static_cast<int32_t>(-32768)),
 8017f7a:	4b12      	ldr	r3, [pc, #72]	; (8017fc4 <_ZN6tflite13reference_ops19SoftMaxCalculateExpERKNS_13SoftmaxParamsEPKsisii+0x94>)
 8017f7c:	617b      	str	r3, [r7, #20]
               static_cast<int32_t>(32767));
 8017f7e:	f107 0214 	add.w	r2, r7, #20
 8017f82:	f107 0310 	add.w	r3, r7, #16
 8017f86:	4611      	mov	r1, r2
 8017f88:	4618      	mov	r0, r3
 8017f8a:	f7f3 fe0f 	bl	800bbac <_ZSt3maxIlERKT_S2_S2_>
 8017f8e:	4602      	mov	r2, r0
 8017f90:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8017f94:	61bb      	str	r3, [r7, #24]
 8017f96:	f107 0318 	add.w	r3, r7, #24
 8017f9a:	4619      	mov	r1, r3
 8017f9c:	4610      	mov	r0, r2
 8017f9e:	f7f3 fdf1 	bl	800bb84 <_ZSt3minIlERKT_S2_S2_>
 8017fa2:	4603      	mov	r3, r0
      std::min(std::max(sym_scaled_diff, static_cast<int32_t>(-32768)),
 8017fa4:	681b      	ldr	r3, [r3, #0]
               static_cast<int32_t>(32767));
 8017fa6:	83fb      	strh	r3, [r7, #30]
  // apply the exp() LUT activation function
  return generic_int16_table_lookup(sat_sym_scaled_diff, params.exp_lut);
 8017fa8:	68fb      	ldr	r3, [r7, #12]
 8017faa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017fac:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8017fb0:	4611      	mov	r1, r2
 8017fb2:	4618      	mov	r0, r3
 8017fb4:	f7ff fe92 	bl	8017cdc <_ZN6tflite26generic_int16_table_lookupEsPKs>
 8017fb8:	4603      	mov	r3, r0
}
 8017fba:	4618      	mov	r0, r3
 8017fbc:	3728      	adds	r7, #40	; 0x28
 8017fbe:	46bd      	mov	sp, r7
 8017fc0:	bd80      	pop	{r7, pc}
 8017fc2:	bf00      	nop
 8017fc4:	ffff8000 	.word	0xffff8000

08017fc8 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps>:
// Quantized softmax with int16_t input and int16_t output.
inline void SoftmaxInt16(const SoftmaxParams& params,
                         const RuntimeShape& input_shape,
                         const int16_t* input_data,
                         const RuntimeShape& output_shape,
                         int16_t* output_data) {
 8017fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017fcc:	b0a1      	sub	sp, #132	; 0x84
 8017fce:	af02      	add	r7, sp, #8
 8017fd0:	6178      	str	r0, [r7, #20]
 8017fd2:	6139      	str	r1, [r7, #16]
 8017fd4:	60fa      	str	r2, [r7, #12]
 8017fd6:	60bb      	str	r3, [r7, #8]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 8017fd8:	6938      	ldr	r0, [r7, #16]
 8017fda:	f7f3 ff64 	bl	800bea6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8017fde:	4603      	mov	r3, r0
 8017fe0:	3b01      	subs	r3, #1
 8017fe2:	663b      	str	r3, [r7, #96]	; 0x60
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 8017fe4:	68ba      	ldr	r2, [r7, #8]
 8017fe6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8017fe8:	6938      	ldr	r0, [r7, #16]
 8017fea:	f7fa fc86 	bl	80128fa <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 8017fee:	65f8      	str	r0, [r7, #92]	; 0x5c
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 8017ff0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8017ff2:	68ba      	ldr	r2, [r7, #8]
 8017ff4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8017ff6:	6938      	ldr	r0, [r7, #16]
 8017ff8:	f7f9 ff38 	bl	8011e6c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8017ffc:	65b8      	str	r0, [r7, #88]	; 0x58

  for (int i = 0; i < outer_size; ++i) {
 8017ffe:	2300      	movs	r3, #0
 8018000:	677b      	str	r3, [r7, #116]	; 0x74
 8018002:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8018004:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8018006:	429a      	cmp	r2, r3
 8018008:	f280 8119 	bge.w	801823e <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x276>
    // Find the largest element
    int16_t max_in_row = std::numeric_limits<int16_t>::min();
 801800c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8018010:	84fb      	strh	r3, [r7, #38]	; 0x26
    for (int c = 0; c < depth; ++c) {
 8018012:	2300      	movs	r3, #0
 8018014:	673b      	str	r3, [r7, #112]	; 0x70
 8018016:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8018018:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801801a:	429a      	cmp	r2, r3
 801801c:	da16      	bge.n	801804c <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x84>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 801801e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8018020:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8018022:	fb02 f203 	mul.w	r2, r2, r3
 8018026:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8018028:	4413      	add	r3, r2
 801802a:	005b      	lsls	r3, r3, #1
 801802c:	68fa      	ldr	r2, [r7, #12]
 801802e:	441a      	add	r2, r3
 8018030:	f107 0326 	add.w	r3, r7, #38	; 0x26
 8018034:	4611      	mov	r1, r2
 8018036:	4618      	mov	r0, r3
 8018038:	f7fa fbbb 	bl	80127b2 <_ZSt3maxIsERKT_S2_S2_>
 801803c:	4603      	mov	r3, r0
 801803e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018042:	84fb      	strh	r3, [r7, #38]	; 0x26
    for (int c = 0; c < depth; ++c) {
 8018044:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8018046:	3301      	adds	r3, #1
 8018048:	673b      	str	r3, [r7, #112]	; 0x70
 801804a:	e7e4      	b.n	8018016 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x4e>

    // This loops computes the exp values and their sum. We will need the exp
    // values later on in the function so we cache them in the output_data
    // buffer. This is an optimization done to avoid calculating the exp values
    // twice making use of the output_data buffer as scratch memory.
    int32_t sum_of_exps = 0;  // Q16.15 fixed point format.
 801804c:	2300      	movs	r3, #0
 801804e:	66fb      	str	r3, [r7, #108]	; 0x6c
    int16_t* exp_results_Q015 = output_data + i * depth;
 8018050:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8018052:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8018054:	fb02 f303 	mul.w	r3, r2, r3
 8018058:	005b      	lsls	r3, r3, #1
 801805a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 801805e:	4413      	add	r3, r2
 8018060:	657b      	str	r3, [r7, #84]	; 0x54
    for (int c = 0; c < depth; ++c) {
 8018062:	2300      	movs	r3, #0
 8018064:	66bb      	str	r3, [r7, #104]	; 0x68
 8018066:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8018068:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801806a:	429a      	cmp	r2, r3
 801806c:	da1f      	bge.n	80180ae <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0xe6>
      exp_results_Q015[c] =
          SoftMaxCalculateExp(params, input_data, depth, max_in_row, i, c);
 801806e:	f9b7 1026 	ldrsh.w	r1, [r7, #38]	; 0x26
      exp_results_Q015[c] =
 8018072:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8018074:	005b      	lsls	r3, r3, #1
 8018076:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8018078:	18d6      	adds	r6, r2, r3
          SoftMaxCalculateExp(params, input_data, depth, max_in_row, i, c);
 801807a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801807c:	9301      	str	r3, [sp, #4]
 801807e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8018080:	9300      	str	r3, [sp, #0]
 8018082:	460b      	mov	r3, r1
 8018084:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8018086:	68f9      	ldr	r1, [r7, #12]
 8018088:	6978      	ldr	r0, [r7, #20]
 801808a:	f7ff ff51 	bl	8017f30 <_ZN6tflite13reference_ops19SoftMaxCalculateExpERKNS_13SoftmaxParamsEPKsisii>
 801808e:	4603      	mov	r3, r0
      exp_results_Q015[c] =
 8018090:	8033      	strh	r3, [r6, #0]
      sum_of_exps += exp_results_Q015[c];
 8018092:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8018094:	005b      	lsls	r3, r3, #1
 8018096:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8018098:	4413      	add	r3, r2
 801809a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801809e:	461a      	mov	r2, r3
 80180a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80180a2:	4413      	add	r3, r2
 80180a4:	66fb      	str	r3, [r7, #108]	; 0x6c
    for (int c = 0; c < depth; ++c) {
 80180a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80180a8:	3301      	adds	r3, #1
 80180aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80180ac:	e7db      	b.n	8018066 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x9e>
    }

    // Compute the reciprocal 1/sum_of_exps
    uint8_t headroom_plus_one =
        CountLeadingZeros(static_cast<uint32_t>(sum_of_exps));
 80180ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80180b0:	4618      	mov	r0, r3
 80180b2:	f7fa fc51 	bl	8012958 <_ZN6tflite17CountLeadingZerosImEEiT_>
 80180b6:	4603      	mov	r3, r0
 80180b8:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    int32_t shifted_sum =
        ((static_cast<int64_t>(sum_of_exps) << (headroom_plus_one - 1)) +
 80180bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80180be:	461a      	mov	r2, r3
 80180c0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80180c4:	f897 1053 	ldrb.w	r1, [r7, #83]	; 0x53
 80180c8:	3901      	subs	r1, #1
 80180ca:	f1a1 0620 	sub.w	r6, r1, #32
 80180ce:	f1c1 0020 	rsb	r0, r1, #32
 80180d2:	fa03 f501 	lsl.w	r5, r3, r1
 80180d6:	fa02 f606 	lsl.w	r6, r2, r6
 80180da:	4335      	orrs	r5, r6
 80180dc:	fa22 f000 	lsr.w	r0, r2, r0
 80180e0:	4305      	orrs	r5, r0
 80180e2:	fa02 f401 	lsl.w	r4, r2, r1
 80180e6:	f514 5300 	adds.w	r3, r4, #8192	; 0x2000
 80180ea:	603b      	str	r3, [r7, #0]
 80180ec:	f145 0300 	adc.w	r3, r5, #0
 80180f0:	607b      	str	r3, [r7, #4]
         (1 << 13)) >>
 80180f2:	f04f 0200 	mov.w	r2, #0
 80180f6:	f04f 0300 	mov.w	r3, #0
 80180fa:	6839      	ldr	r1, [r7, #0]
 80180fc:	0b8a      	lsrs	r2, r1, #14
 80180fe:	6879      	ldr	r1, [r7, #4]
 8018100:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 8018104:	6879      	ldr	r1, [r7, #4]
 8018106:	138b      	asrs	r3, r1, #14
    int32_t shifted_sum =
 8018108:	4613      	mov	r3, r2
 801810a:	64fb      	str	r3, [r7, #76]	; 0x4c
        14;
    // since the LUT computes 1/(1 + x) we need to first compute x = (sum - 1).
    // also, the LUT expects a symmetrical input, so we must also recenter x
    // from [0, 65535] to [-32768, 32767].
    int32_t sym_shifted_sum = shifted_sum + (-((1 << 15) + (1 << 16)));
 801810c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801810e:	f5a3 33c0 	sub.w	r3, r3, #98304	; 0x18000
 8018112:	623b      	str	r3, [r7, #32]
    int16_t sat_sym_shifted_sum = static_cast<int16_t>(
        std::min(std::max(sym_shifted_sum, static_cast<int32_t>(-32768)),
 8018114:	4b4c      	ldr	r3, [pc, #304]	; (8018248 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x280>)
 8018116:	62bb      	str	r3, [r7, #40]	; 0x28
                 static_cast<int32_t>(32767)));
 8018118:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801811c:	f107 0320 	add.w	r3, r7, #32
 8018120:	4611      	mov	r1, r2
 8018122:	4618      	mov	r0, r3
 8018124:	f7f3 fd42 	bl	800bbac <_ZSt3maxIlERKT_S2_S2_>
 8018128:	4602      	mov	r2, r0
 801812a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801812e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018130:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8018134:	4619      	mov	r1, r3
 8018136:	4610      	mov	r0, r2
 8018138:	f7f3 fd24 	bl	800bb84 <_ZSt3minIlERKT_S2_S2_>
 801813c:	4603      	mov	r3, r0
        std::min(std::max(sym_shifted_sum, static_cast<int32_t>(-32768)),
 801813e:	681b      	ldr	r3, [r3, #0]
                 static_cast<int32_t>(32767)));
 8018140:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    // apply 1/(1 + x) LUT activation function
    int16_t reciprocal_scale_Q015 = generic_int16_table_lookup(
        sat_sym_shifted_sum, params.one_over_one_plus_x_lut);
 8018144:	697b      	ldr	r3, [r7, #20]
 8018146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    int16_t reciprocal_scale_Q015 = generic_int16_table_lookup(
 8018148:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 801814c:	4611      	mov	r1, r2
 801814e:	4618      	mov	r0, r3
 8018150:	f7ff fdc4 	bl	8017cdc <_ZN6tflite26generic_int16_table_lookupEsPKs>
 8018154:	4603      	mov	r3, r0
 8018156:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    // Rescale the exp_result with reciprocal
    // range of output is [0, 32767] correspond to [0.0, 1.0]
    for (int c = 0; c < depth; ++c) {
 801815a:	2300      	movs	r3, #0
 801815c:	667b      	str	r3, [r7, #100]	; 0x64
 801815e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8018160:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8018162:	429a      	cmp	r2, r3
 8018164:	da67      	bge.n	8018236 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x26e>
      uint8_t right_shift = 31 - headroom_plus_one;
 8018166:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 801816a:	f1c3 031f 	rsb	r3, r3, #31
 801816e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      int64_t round = 1 << (right_shift - 1);
 8018172:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8018176:	3b01      	subs	r3, #1
 8018178:	2201      	movs	r2, #1
 801817a:	fa02 f303 	lsl.w	r3, r2, r3
 801817e:	461a      	mov	r2, r3
 8018180:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8018184:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
 8018188:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801818a:	005b      	lsls	r3, r3, #1
 801818c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801818e:	4413      	add	r3, r2
 8018190:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018194:	b218      	sxth	r0, r3
 8018196:	ea4f 71e0 	mov.w	r1, r0, asr #31
                            static_cast<int64_t>(reciprocal_scale_Q015) +
 801819a:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 801819e:	ea4f 73e2 	mov.w	r3, r2, asr #31
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
 80181a2:	fb02 fc01 	mul.w	ip, r2, r1
 80181a6:	fb00 f603 	mul.w	r6, r0, r3
 80181aa:	4466      	add	r6, ip
 80181ac:	fba0 2302 	umull	r2, r3, r0, r2
 80181b0:	18f1      	adds	r1, r6, r3
 80181b2:	460b      	mov	r3, r1
                            static_cast<int64_t>(reciprocal_scale_Q015) +
 80181b4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80181b8:	eb12 0a00 	adds.w	sl, r2, r0
 80181bc:	eb43 0b01 	adc.w	fp, r3, r1
                        round) >>
                       right_shift;
 80181c0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
                        round) >>
 80181c4:	f1c3 0120 	rsb	r1, r3, #32
 80181c8:	f1b3 0220 	subs.w	r2, r3, #32
 80181cc:	fa2a f803 	lsr.w	r8, sl, r3
 80181d0:	fa0b f101 	lsl.w	r1, fp, r1
 80181d4:	ea48 0801 	orr.w	r8, r8, r1
 80181d8:	d403      	bmi.n	80181e2 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x21a>
 80181da:	fa4b f202 	asr.w	r2, fp, r2
 80181de:	ea48 0802 	orr.w	r8, r8, r2
 80181e2:	fa4b f903 	asr.w	r9, fp, r3
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
 80181e6:	4643      	mov	r3, r8
 80181e8:	61fb      	str	r3, [r7, #28]
      output_data[i * depth + c] = static_cast<int16_t>(
          std::min(std::max(result, static_cast<int32_t>(0)),
 80181ea:	2300      	movs	r3, #0
 80181ec:	633b      	str	r3, [r7, #48]	; 0x30
                   static_cast<int32_t>(32767)));
 80181ee:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80181f2:	f107 031c 	add.w	r3, r7, #28
 80181f6:	4611      	mov	r1, r2
 80181f8:	4618      	mov	r0, r3
 80181fa:	f7f3 fcd7 	bl	800bbac <_ZSt3maxIlERKT_S2_S2_>
 80181fe:	4602      	mov	r2, r0
 8018200:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8018204:	637b      	str	r3, [r7, #52]	; 0x34
 8018206:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801820a:	4619      	mov	r1, r3
 801820c:	4610      	mov	r0, r2
 801820e:	f7f3 fcb9 	bl	800bb84 <_ZSt3minIlERKT_S2_S2_>
 8018212:	4603      	mov	r3, r0
          std::min(std::max(result, static_cast<int32_t>(0)),
 8018214:	6819      	ldr	r1, [r3, #0]
      output_data[i * depth + c] = static_cast<int16_t>(
 8018216:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8018218:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801821a:	fb02 f203 	mul.w	r2, r2, r3
 801821e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8018220:	4413      	add	r3, r2
 8018222:	005b      	lsls	r3, r3, #1
 8018224:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8018228:	4413      	add	r3, r2
 801822a:	b20a      	sxth	r2, r1
 801822c:	801a      	strh	r2, [r3, #0]
    for (int c = 0; c < depth; ++c) {
 801822e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8018230:	3301      	adds	r3, #1
 8018232:	667b      	str	r3, [r7, #100]	; 0x64
 8018234:	e793      	b.n	801815e <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x196>
  for (int i = 0; i < outer_size; ++i) {
 8018236:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8018238:	3301      	adds	r3, #1
 801823a:	677b      	str	r3, [r7, #116]	; 0x74
 801823c:	e6e1      	b.n	8018002 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x3a>
    }
  }
}
 801823e:	bf00      	nop
 8018240:	377c      	adds	r7, #124	; 0x7c
 8018242:	46bd      	mov	sp, r7
 8018244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018248:	ffff8000 	.word	0xffff8000

0801824c <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE>:

namespace tflite {
namespace {

void SoftmaxQuantized(const TfLiteEvalTensor* input, TfLiteEvalTensor* output,
                      const SoftmaxParams& op_data) {
 801824c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018250:	b0bc      	sub	sp, #240	; 0xf0
 8018252:	af04      	add	r7, sp, #16
 8018254:	60f8      	str	r0, [r7, #12]
 8018256:	60b9      	str	r1, [r7, #8]
 8018258:	607a      	str	r2, [r7, #4]
  if (input->type == kTfLiteUInt8) {
 801825a:	68fb      	ldr	r3, [r7, #12]
 801825c:	7a1b      	ldrb	r3, [r3, #8]
 801825e:	2b03      	cmp	r3, #3
 8018260:	d127      	bne.n	80182b2 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x66>
    tflite::reference_ops::Softmax(
        op_data, tflite::micro::GetTensorShape(input),
 8018262:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8018266:	68f9      	ldr	r1, [r7, #12]
 8018268:	4618      	mov	r0, r3
 801826a:	f7fa fab8 	bl	80127de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::Softmax(
 801826e:	68f8      	ldr	r0, [r7, #12]
 8018270:	f7f9 fb74 	bl	801195c <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 8018274:	4604      	mov	r4, r0
        tflite::micro::GetTensorData<uint8_t>(input),
        tflite::micro::GetTensorShape(output),
 8018276:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801827a:	68b9      	ldr	r1, [r7, #8]
 801827c:	4618      	mov	r0, r3
 801827e:	f7fa faae 	bl	80127de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::Softmax(
 8018282:	68b8      	ldr	r0, [r7, #8]
 8018284:	f7f9 fb79 	bl	801197a <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 8018288:	4602      	mov	r2, r0
 801828a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801828e:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8018292:	9200      	str	r2, [sp, #0]
 8018294:	4622      	mov	r2, r4
 8018296:	6878      	ldr	r0, [r7, #4]
 8018298:	f000 f956 	bl	8018548 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
        tflite::micro::GetTensorShape(output),
 801829c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80182a0:	4618      	mov	r0, r3
 80182a2:	f7f3 fdea 	bl	800be7a <_ZN6tflite12RuntimeShapeD1Ev>
        op_data, tflite::micro::GetTensorShape(input),
 80182a6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80182aa:	4618      	mov	r0, r3
 80182ac:	f7f3 fde5 	bl	800be7a <_ZN6tflite12RuntimeShapeD1Ev>
        op_data, tflite::micro::GetTensorShape(input),
        tflite::micro::GetTensorData<int16_t>(input),
        tflite::micro::GetTensorShape(output),
        tflite::micro::GetTensorData<int16_t>(output));
  }
}
 80182b0:	e0a6      	b.n	8018400 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x1b4>
  } else if (input->type == kTfLiteInt8) {
 80182b2:	68fb      	ldr	r3, [r7, #12]
 80182b4:	7a1b      	ldrb	r3, [r3, #8]
 80182b6:	2b09      	cmp	r3, #9
 80182b8:	d17b      	bne.n	80183b2 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x166>
    if (output->type == kTfLiteInt16) {
 80182ba:	68bb      	ldr	r3, [r7, #8]
 80182bc:	7a1b      	ldrb	r3, [r3, #8]
 80182be:	2b07      	cmp	r3, #7
 80182c0:	d127      	bne.n	8018312 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0xc6>
          op_data, tflite::micro::GetTensorShape(input),
 80182c2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80182c6:	68f9      	ldr	r1, [r7, #12]
 80182c8:	4618      	mov	r0, r3
 80182ca:	f7fa fa88 	bl	80127de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 80182ce:	68f8      	ldr	r0, [r7, #12]
 80182d0:	f7f9 fad8 	bl	8011884 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 80182d4:	4604      	mov	r4, r0
          tflite::micro::GetTensorShape(output),
 80182d6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80182da:	68b9      	ldr	r1, [r7, #8]
 80182dc:	4618      	mov	r0, r3
 80182de:	f7fa fa7e 	bl	80127de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 80182e2:	68b8      	ldr	r0, [r7, #8]
 80182e4:	f7fb fad7 	bl	8013896 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
 80182e8:	4602      	mov	r2, r0
 80182ea:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80182ee:	f107 0174 	add.w	r1, r7, #116	; 0x74
 80182f2:	9200      	str	r2, [sp, #0]
 80182f4:	4622      	mov	r2, r4
 80182f6:	6878      	ldr	r0, [r7, #4]
 80182f8:	f000 fa41 	bl	801877e <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
          tflite::micro::GetTensorShape(output),
 80182fc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8018300:	4618      	mov	r0, r3
 8018302:	f7f3 fdba 	bl	800be7a <_ZN6tflite12RuntimeShapeD1Ev>
          op_data, tflite::micro::GetTensorShape(input),
 8018306:	f107 0374 	add.w	r3, r7, #116	; 0x74
 801830a:	4618      	mov	r0, r3
 801830c:	f7f3 fdb5 	bl	800be7a <_ZN6tflite12RuntimeShapeD1Ev>
}
 8018310:	e076      	b.n	8018400 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x1b4>
      const auto input_shape = tflite::micro::GetTensorShape(input);
 8018312:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8018316:	68f9      	ldr	r1, [r7, #12]
 8018318:	4618      	mov	r0, r3
 801831a:	f7fa fa60 	bl	80127de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      const auto output_shape = tflite::micro::GetTensorShape(output);
 801831e:	f107 0314 	add.w	r3, r7, #20
 8018322:	68b9      	ldr	r1, [r7, #8]
 8018324:	4618      	mov	r0, r3
 8018326:	f7fa fa5a 	bl	80127de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      const int trailing_dim = input_shape.DimensionsCount() - 1;
 801832a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801832e:	4618      	mov	r0, r3
 8018330:	f7f3 fdb9 	bl	800bea6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8018334:	4603      	mov	r3, r0
 8018336:	3b01      	subs	r3, #1
 8018338:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
          MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 801833c:	f107 0214 	add.w	r2, r7, #20
 8018340:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8018344:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8018348:	4618      	mov	r0, r3
 801834a:	f7fa fad6 	bl	80128fa <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 801834e:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
          MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 8018352:	f107 0214 	add.w	r2, r7, #20
 8018356:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 801835a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801835e:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8018362:	f7f9 fd83 	bl	8011e6c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8018366:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
      arm_softmax_s8(tflite::micro::GetTensorData<int8_t>(input), outer_size,
 801836a:	68f8      	ldr	r0, [r7, #12]
 801836c:	f7f9 fa8a 	bl	8011884 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8018370:	4680      	mov	r8, r0
                     depth, op_data.input_multiplier, op_data.input_left_shift,
 8018372:	687b      	ldr	r3, [r7, #4]
 8018374:	689e      	ldr	r6, [r3, #8]
 8018376:	687b      	ldr	r3, [r7, #4]
 8018378:	68dc      	ldr	r4, [r3, #12]
                     op_data.diff_min,
 801837a:	687b      	ldr	r3, [r7, #4]
 801837c:	699d      	ldr	r5, [r3, #24]
      arm_softmax_s8(tflite::micro::GetTensorData<int8_t>(input), outer_size,
 801837e:	68b8      	ldr	r0, [r7, #8]
 8018380:	f7f9 fa8f 	bl	80118a2 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 8018384:	4603      	mov	r3, r0
 8018386:	9302      	str	r3, [sp, #8]
 8018388:	9501      	str	r5, [sp, #4]
 801838a:	9400      	str	r4, [sp, #0]
 801838c:	4633      	mov	r3, r6
 801838e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8018392:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8018396:	4640      	mov	r0, r8
 8018398:	f009 fffe 	bl	8022398 <arm_softmax_s8>
      const auto output_shape = tflite::micro::GetTensorShape(output);
 801839c:	f107 0314 	add.w	r3, r7, #20
 80183a0:	4618      	mov	r0, r3
 80183a2:	f7f3 fd6a 	bl	800be7a <_ZN6tflite12RuntimeShapeD1Ev>
      const auto input_shape = tflite::micro::GetTensorShape(input);
 80183a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80183aa:	4618      	mov	r0, r3
 80183ac:	f7f3 fd65 	bl	800be7a <_ZN6tflite12RuntimeShapeD1Ev>
}
 80183b0:	e026      	b.n	8018400 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x1b4>
        op_data, tflite::micro::GetTensorShape(input),
 80183b2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80183b6:	68f9      	ldr	r1, [r7, #12]
 80183b8:	4618      	mov	r0, r3
 80183ba:	f7fa fa10 	bl	80127de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::SoftmaxInt16(
 80183be:	68f8      	ldr	r0, [r7, #12]
 80183c0:	f7fa f9c4 	bl	801274c <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>
 80183c4:	4604      	mov	r4, r0
        tflite::micro::GetTensorShape(output),
 80183c6:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80183ca:	68b9      	ldr	r1, [r7, #8]
 80183cc:	4618      	mov	r0, r3
 80183ce:	f7fa fa06 	bl	80127de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::SoftmaxInt16(
 80183d2:	68b8      	ldr	r0, [r7, #8]
 80183d4:	f7fb fa5f 	bl	8013896 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
 80183d8:	4602      	mov	r2, r0
 80183da:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80183de:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 80183e2:	9200      	str	r2, [sp, #0]
 80183e4:	4622      	mov	r2, r4
 80183e6:	6878      	ldr	r0, [r7, #4]
 80183e8:	f7ff fdee 	bl	8017fc8 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps>
        tflite::micro::GetTensorShape(output),
 80183ec:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80183f0:	4618      	mov	r0, r3
 80183f2:	f7f3 fd42 	bl	800be7a <_ZN6tflite12RuntimeShapeD1Ev>
        op_data, tflite::micro::GetTensorShape(input),
 80183f6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80183fa:	4618      	mov	r0, r3
 80183fc:	f7f3 fd3d 	bl	800be7a <_ZN6tflite12RuntimeShapeD1Ev>
}
 8018400:	bf00      	nop
 8018402:	37e0      	adds	r7, #224	; 0xe0
 8018404:	46bd      	mov	sp, r7
 8018406:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0801840c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
 801840c:	b5b0      	push	{r4, r5, r7, lr}
 801840e:	b0a0      	sub	sp, #128	; 0x80
 8018410:	af02      	add	r7, sp, #8
 8018412:	6078      	str	r0, [r7, #4]
 8018414:	6039      	str	r1, [r7, #0]
  const TfLiteEvalTensor* input = tflite::micro::GetEvalInput(context, node, 0);
 8018416:	2200      	movs	r2, #0
 8018418:	6839      	ldr	r1, [r7, #0]
 801841a:	6878      	ldr	r0, [r7, #4]
 801841c:	f7f8 fd34 	bl	8010e88 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8018420:	6778      	str	r0, [r7, #116]	; 0x74
  TfLiteEvalTensor* output = tflite::micro::GetEvalOutput(context, node, 0);
 8018422:	2200      	movs	r2, #0
 8018424:	6839      	ldr	r1, [r7, #0]
 8018426:	6878      	ldr	r0, [r7, #4]
 8018428:	f7f8 fd3e 	bl	8010ea8 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 801842c:	6738      	str	r0, [r7, #112]	; 0x70

  TFLITE_DCHECK(node->user_data != nullptr);
 801842e:	683b      	ldr	r3, [r7, #0]
 8018430:	691b      	ldr	r3, [r3, #16]
 8018432:	2b00      	cmp	r3, #0
 8018434:	d101      	bne.n	801843a <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x2e>
 8018436:	f00d fb06 	bl	8025a46 <abort>
  const SoftmaxParams data =
      *static_cast<const SoftmaxParams*>(node->user_data);
 801843a:	683b      	ldr	r3, [r7, #0]
 801843c:	691b      	ldr	r3, [r3, #16]
  const SoftmaxParams data =
 801843e:	f107 0408 	add.w	r4, r7, #8
 8018442:	461d      	mov	r5, r3
 8018444:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018446:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018448:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801844a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801844c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801844e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018450:	e895 0003 	ldmia.w	r5, {r0, r1}
 8018454:	e884 0003 	stmia.w	r4, {r0, r1}

  switch (input->type) {
 8018458:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801845a:	7a1b      	ldrb	r3, [r3, #8]
 801845c:	3b01      	subs	r3, #1
 801845e:	2b08      	cmp	r3, #8
 8018460:	d847      	bhi.n	80184f2 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe6>
 8018462:	a201      	add	r2, pc, #4	; (adr r2, 8018468 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x5c>)
 8018464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018468:	0801848d 	.word	0x0801848d
 801846c:	080184f3 	.word	0x080184f3
 8018470:	080184e1 	.word	0x080184e1
 8018474:	080184f3 	.word	0x080184f3
 8018478:	080184f3 	.word	0x080184f3
 801847c:	080184f3 	.word	0x080184f3
 8018480:	080184e1 	.word	0x080184e1
 8018484:	080184f3 	.word	0x080184f3
 8018488:	080184e1 	.word	0x080184e1
    case kTfLiteFloat32: {
      tflite::reference_ops::Softmax(
          data, tflite::micro::GetTensorShape(input),
 801848c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8018490:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8018492:	4618      	mov	r0, r3
 8018494:	f7fa f9a3 	bl	80127de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 8018498:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801849a:	f7f9 f9d3 	bl	8011844 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 801849e:	4604      	mov	r4, r0
          tflite::micro::GetTensorData<float>(input),
          tflite::micro::GetTensorShape(output),
 80184a0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80184a4:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80184a6:	4618      	mov	r0, r3
 80184a8:	f7fa f999 	bl	80127de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 80184ac:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80184ae:	f7f9 f9d8 	bl	8011862 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 80184b2:	4602      	mov	r2, r0
 80184b4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80184b8:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80184bc:	f107 0008 	add.w	r0, r7, #8
 80184c0:	9200      	str	r2, [sp, #0]
 80184c2:	4622      	mov	r2, r4
 80184c4:	f7ff fc83 	bl	8017dce <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>
          tflite::micro::GetTensorShape(output),
 80184c8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80184cc:	4618      	mov	r0, r3
 80184ce:	f7f3 fcd4 	bl	800be7a <_ZN6tflite12RuntimeShapeD1Ev>
          data, tflite::micro::GetTensorShape(input),
 80184d2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80184d6:	4618      	mov	r0, r3
 80184d8:	f7f3 fccf 	bl	800be7a <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorData<float>(output));
      return kTfLiteOk;
 80184dc:	2300      	movs	r3, #0
 80184de:	e016      	b.n	801850e <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x102>
    }
    case kTfLiteInt8:
    case kTfLiteUInt8:
    case kTfLiteInt16: {
      SoftmaxQuantized(input, output, data);
 80184e0:	f107 0308 	add.w	r3, r7, #8
 80184e4:	461a      	mov	r2, r3
 80184e6:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80184e8:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80184ea:	f7ff feaf 	bl	801824c <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE>
      return kTfLiteOk;
 80184ee:	2300      	movs	r3, #0
 80184f0:	e00d      	b.n	801850e <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x102>
    }
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 80184f2:	687b      	ldr	r3, [r7, #4]
 80184f4:	695c      	ldr	r4, [r3, #20]
 80184f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80184f8:	7a1b      	ldrb	r3, [r3, #8]
 80184fa:	4618      	mov	r0, r3
 80184fc:	f7f0 f8a8 	bl	8008650 <TfLiteTypeGetName>
 8018500:	4602      	mov	r2, r0
 8018502:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8018504:	7a1b      	ldrb	r3, [r3, #8]
 8018506:	4904      	ldr	r1, [pc, #16]	; (8018518 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x10c>)
 8018508:	6878      	ldr	r0, [r7, #4]
 801850a:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 801850c:	2301      	movs	r3, #1
  }
}
 801850e:	4618      	mov	r0, r3
 8018510:	3778      	adds	r7, #120	; 0x78
 8018512:	46bd      	mov	sp, r7
 8018514:	bdb0      	pop	{r4, r5, r7, pc}
 8018516:	bf00      	nop
 8018518:	0802c0a4 	.word	0x0802c0a4

0801851c <_ZN6tflite16Register_SOFTMAXEv>:

}  // namespace

TfLiteRegistration Register_SOFTMAX() {
 801851c:	b4b0      	push	{r4, r5, r7}
 801851e:	b083      	sub	sp, #12
 8018520:	af00      	add	r7, sp, #0
 8018522:	6078      	str	r0, [r7, #4]
          /*prepare=*/SoftmaxPrepare,
          /*invoke=*/SoftmaxEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 8018524:	687b      	ldr	r3, [r7, #4]
 8018526:	4a07      	ldr	r2, [pc, #28]	; (8018544 <_ZN6tflite16Register_SOFTMAXEv+0x28>)
 8018528:	461c      	mov	r4, r3
 801852a:	4615      	mov	r5, r2
 801852c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801852e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018530:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8018534:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8018538:	6878      	ldr	r0, [r7, #4]
 801853a:	370c      	adds	r7, #12
 801853c:	46bd      	mov	sp, r7
 801853e:	bcb0      	pop	{r4, r5, r7}
 8018540:	4770      	bx	lr
 8018542:	bf00      	nop
 8018544:	0802c0c0 	.word	0x0802c0c0

08018548 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
 8018548:	b590      	push	{r4, r7, lr}
 801854a:	b09f      	sub	sp, #124	; 0x7c
 801854c:	af00      	add	r7, sp, #0
 801854e:	60f8      	str	r0, [r7, #12]
 8018550:	60b9      	str	r1, [r7, #8]
 8018552:	607a      	str	r2, [r7, #4]
 8018554:	603b      	str	r3, [r7, #0]
  const int32_t input_beta_multiplier = params.input_multiplier;
 8018556:	68fb      	ldr	r3, [r7, #12]
 8018558:	689b      	ldr	r3, [r3, #8]
 801855a:	667b      	str	r3, [r7, #100]	; 0x64
  const int32_t input_beta_left_shift = params.input_left_shift;
 801855c:	68fb      	ldr	r3, [r7, #12]
 801855e:	68db      	ldr	r3, [r3, #12]
 8018560:	663b      	str	r3, [r7, #96]	; 0x60
  const int diff_min = params.diff_min;
 8018562:	68fb      	ldr	r3, [r7, #12]
 8018564:	699b      	ldr	r3, [r3, #24]
 8018566:	65fb      	str	r3, [r7, #92]	; 0x5c
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 8018568:	68b8      	ldr	r0, [r7, #8]
 801856a:	f7f3 fc9c 	bl	800bea6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801856e:	4603      	mov	r3, r0
 8018570:	3b01      	subs	r3, #1
 8018572:	65bb      	str	r3, [r7, #88]	; 0x58
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 8018574:	683a      	ldr	r2, [r7, #0]
 8018576:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8018578:	68b8      	ldr	r0, [r7, #8]
 801857a:	f7fa f9be 	bl	80128fa <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 801857e:	6578      	str	r0, [r7, #84]	; 0x54
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 8018580:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8018582:	683a      	ldr	r2, [r7, #0]
 8018584:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8018586:	68b8      	ldr	r0, [r7, #8]
 8018588:	f7f9 fc70 	bl	8011e6c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 801858c:	6538      	str	r0, [r7, #80]	; 0x50
  for (int i = 0; i < outer_size; ++i) {
 801858e:	2300      	movs	r3, #0
 8018590:	677b      	str	r3, [r7, #116]	; 0x74
 8018592:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8018594:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018596:	429a      	cmp	r2, r3
 8018598:	f280 80ed 	bge.w	8018776 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x22e>
    InputT max_in_row = std::numeric_limits<InputT>::min();
 801859c:	2300      	movs	r3, #0
 801859e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 80185a2:	2300      	movs	r3, #0
 80185a4:	673b      	str	r3, [r7, #112]	; 0x70
 80185a6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80185a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80185aa:	429a      	cmp	r2, r3
 80185ac:	da16      	bge.n	80185dc <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x94>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 80185ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80185b0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80185b2:	fb02 f203 	mul.w	r2, r2, r3
 80185b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80185b8:	4413      	add	r3, r2
 80185ba:	461a      	mov	r2, r3
 80185bc:	687b      	ldr	r3, [r7, #4]
 80185be:	441a      	add	r2, r3
 80185c0:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 80185c4:	4611      	mov	r1, r2
 80185c6:	4618      	mov	r0, r3
 80185c8:	f7ff fb60 	bl	8017c8c <_ZSt3maxIhERKT_S2_S2_>
 80185cc:	4603      	mov	r3, r0
 80185ce:	781b      	ldrb	r3, [r3, #0]
 80185d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 80185d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80185d6:	3301      	adds	r3, #1
 80185d8:	673b      	str	r3, [r7, #112]	; 0x70
 80185da:	e7e4      	b.n	80185a6 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x5e>
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
 80185dc:	f000 f9ed 	bl	80189ba <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>
 80185e0:	4603      	mov	r3, r0
 80185e2:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 80185e4:	2300      	movs	r3, #0
 80185e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80185e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80185ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80185ec:	429a      	cmp	r2, r3
 80185ee:	da2f      	bge.n	8018650 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x108>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 80185f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80185f2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80185f4:	fb02 f203 	mul.w	r2, r2, r3
 80185f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80185fa:	4413      	add	r3, r2
 80185fc:	461a      	mov	r2, r3
 80185fe:	687b      	ldr	r3, [r7, #4]
 8018600:	4413      	add	r3, r2
 8018602:	781b      	ldrb	r3, [r3, #0]
 8018604:	461a      	mov	r2, r3
 8018606:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
      int32_t input_diff =
 801860a:	1ad3      	subs	r3, r2, r3
 801860c:	64fb      	str	r3, [r7, #76]	; 0x4c
      if (input_diff >= diff_min) {
 801860e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8018610:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8018612:	429a      	cmp	r2, r3
 8018614:	db18      	blt.n	8018648 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x100>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 8018616:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8018618:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801861a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801861c:	f7fc f84a 	bl	80146b4 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 8018620:	64b8      	str	r0, [r7, #72]	; 0x48
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 8018622:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8018624:	f7fa fb2c 	bl	8012c80 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 8018628:	4603      	mov	r3, r0
 801862a:	61fb      	str	r3, [r7, #28]
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
 801862c:	69f8      	ldr	r0, [r7, #28]
 801862e:	f7fa fb39 	bl	8012ca4 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 8018632:	4603      	mov	r3, r0
 8018634:	4618      	mov	r0, r3
 8018636:	f7fa fc7d 	bl	8012f34 <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 801863a:	4603      	mov	r3, r0
 801863c:	4619      	mov	r1, r3
 801863e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018640:	f7fa fc92 	bl	8012f68 <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8018644:	4603      	mov	r3, r0
 8018646:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 8018648:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801864a:	3301      	adds	r3, #1
 801864c:	66fb      	str	r3, [r7, #108]	; 0x6c
 801864e:	e7cb      	b.n	80185e8 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xa0>
        sum_of_exps.raw(), kAccumulationIntegerBits, &num_bits_over_unit));
 8018650:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8018654:	4618      	mov	r0, r3
 8018656:	f7fa fef8 	bl	801344a <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 801865a:	4603      	mov	r3, r0
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
 801865c:	681b      	ldr	r3, [r3, #0]
 801865e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8018662:	210c      	movs	r1, #12
 8018664:	4618      	mov	r0, r3
 8018666:	f7ff fb87 	bl	8017d78 <_ZN6tflite13GetReciprocalEliPi>
 801866a:	4603      	mov	r3, r0
 801866c:	4618      	mov	r0, r3
 801866e:	f7fa fa96 	bl	8012b9e <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8018672:	4603      	mov	r3, r0
 8018674:	623b      	str	r3, [r7, #32]
    for (int c = 0; c < depth; ++c) {
 8018676:	2300      	movs	r3, #0
 8018678:	66bb      	str	r3, [r7, #104]	; 0x68
 801867a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801867c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801867e:	429a      	cmp	r2, r3
 8018680:	da75      	bge.n	801876e <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x226>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 8018682:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8018684:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8018686:	fb02 f203 	mul.w	r2, r2, r3
 801868a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801868c:	4413      	add	r3, r2
 801868e:	461a      	mov	r2, r3
 8018690:	687b      	ldr	r3, [r7, #4]
 8018692:	4413      	add	r3, r2
 8018694:	781b      	ldrb	r3, [r3, #0]
 8018696:	461a      	mov	r2, r3
 8018698:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
      int32_t input_diff =
 801869c:	1ad3      	subs	r3, r2, r3
 801869e:	647b      	str	r3, [r7, #68]	; 0x44
      if (input_diff >= diff_min) {
 80186a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80186a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80186a4:	429a      	cmp	r2, r3
 80186a6:	db50      	blt.n	801874a <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x202>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 80186a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80186aa:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80186ac:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80186ae:	f7fc f801 	bl	80146b4 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 80186b2:	6438      	str	r0, [r7, #64]	; 0x40
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 80186b4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80186b6:	f7fa fae3 	bl	8012c80 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 80186ba:	4603      	mov	r3, r0
 80186bc:	61bb      	str	r3, [r7, #24]
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
 80186be:	69b8      	ldr	r0, [r7, #24]
 80186c0:	f7fa faf0 	bl	8012ca4 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 80186c4:	4603      	mov	r3, r0
 80186c6:	617b      	str	r3, [r7, #20]
            (shifted_scale * exp_in_0).raw(),
 80186c8:	6979      	ldr	r1, [r7, #20]
 80186ca:	6a38      	ldr	r0, [r7, #32]
 80186cc:	f7fa fe68 	bl	80133a0 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 80186d0:	4603      	mov	r3, r0
 80186d2:	633b      	str	r3, [r7, #48]	; 0x30
 80186d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80186d8:	4618      	mov	r0, r3
 80186da:	f7fa f94f 	bl	801297c <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80186de:	4603      	mov	r3, r0
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
 80186e0:	681b      	ldr	r3, [r3, #0]
            num_bits_over_unit + 31 - (sizeof(OutputT) * 8));
 80186e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80186e4:	3217      	adds	r2, #23
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
 80186e6:	4611      	mov	r1, r2
 80186e8:	4618      	mov	r0, r3
 80186ea:	f7f8 fef3 	bl	80114d4 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 80186ee:	63f8      	str	r0, [r7, #60]	; 0x3c
            static_cast<int32_t>(std::numeric_limits<OutputT>::min());
 80186f0:	f7f2 fd10 	bl	800b114 <_ZNSt14numeric_limitsIhE3minEv>
 80186f4:	4603      	mov	r3, r0
 80186f6:	461a      	mov	r2, r3
            unsat_output +
 80186f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80186fa:	4413      	add	r3, r2
        const int32_t shifted_output =
 80186fc:	613b      	str	r3, [r7, #16]
                     static_cast<int32_t>(std::numeric_limits<OutputT>::max())),
 80186fe:	f7f2 fd11 	bl	800b124 <_ZNSt14numeric_limitsIhE3maxEv>
 8018702:	4603      	mov	r3, r0
 8018704:	637b      	str	r3, [r7, #52]	; 0x34
            static_cast<int32_t>(std::numeric_limits<OutputT>::min())));
 8018706:	f107 0234 	add.w	r2, r7, #52	; 0x34
 801870a:	f107 0310 	add.w	r3, r7, #16
 801870e:	4611      	mov	r1, r2
 8018710:	4618      	mov	r0, r3
 8018712:	f7f3 fa37 	bl	800bb84 <_ZSt3minIlERKT_S2_S2_>
 8018716:	4604      	mov	r4, r0
 8018718:	f7f2 fcfc 	bl	800b114 <_ZNSt14numeric_limitsIhE3minEv>
 801871c:	4603      	mov	r3, r0
 801871e:	63bb      	str	r3, [r7, #56]	; 0x38
 8018720:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8018724:	4619      	mov	r1, r3
 8018726:	4620      	mov	r0, r4
 8018728:	f7f3 fa40 	bl	800bbac <_ZSt3maxIlERKT_S2_S2_>
 801872c:	4603      	mov	r3, r0
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
 801872e:	6819      	ldr	r1, [r3, #0]
 8018730:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8018732:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8018734:	fb02 f203 	mul.w	r2, r2, r3
 8018738:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801873a:	4413      	add	r3, r2
 801873c:	461a      	mov	r2, r3
 801873e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8018742:	4413      	add	r3, r2
 8018744:	b2ca      	uxtb	r2, r1
 8018746:	701a      	strb	r2, [r3, #0]
 8018748:	e00d      	b.n	8018766 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x21e>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
 801874a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801874c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801874e:	fb02 f203 	mul.w	r2, r2, r3
 8018752:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8018754:	4413      	add	r3, r2
 8018756:	461a      	mov	r2, r3
 8018758:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801875c:	189c      	adds	r4, r3, r2
 801875e:	f7f2 fcd9 	bl	800b114 <_ZNSt14numeric_limitsIhE3minEv>
 8018762:	4603      	mov	r3, r0
 8018764:	7023      	strb	r3, [r4, #0]
    for (int c = 0; c < depth; ++c) {
 8018766:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8018768:	3301      	adds	r3, #1
 801876a:	66bb      	str	r3, [r7, #104]	; 0x68
 801876c:	e785      	b.n	801867a <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x132>
  for (int i = 0; i < outer_size; ++i) {
 801876e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8018770:	3301      	adds	r3, #1
 8018772:	677b      	str	r3, [r7, #116]	; 0x74
 8018774:	e70d      	b.n	8018592 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x4a>
}
 8018776:	bf00      	nop
 8018778:	377c      	adds	r7, #124	; 0x7c
 801877a:	46bd      	mov	sp, r7
 801877c:	bd90      	pop	{r4, r7, pc}

0801877e <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
 801877e:	b590      	push	{r4, r7, lr}
 8018780:	b09f      	sub	sp, #124	; 0x7c
 8018782:	af00      	add	r7, sp, #0
 8018784:	60f8      	str	r0, [r7, #12]
 8018786:	60b9      	str	r1, [r7, #8]
 8018788:	607a      	str	r2, [r7, #4]
 801878a:	603b      	str	r3, [r7, #0]
  const int32_t input_beta_multiplier = params.input_multiplier;
 801878c:	68fb      	ldr	r3, [r7, #12]
 801878e:	689b      	ldr	r3, [r3, #8]
 8018790:	667b      	str	r3, [r7, #100]	; 0x64
  const int32_t input_beta_left_shift = params.input_left_shift;
 8018792:	68fb      	ldr	r3, [r7, #12]
 8018794:	68db      	ldr	r3, [r3, #12]
 8018796:	663b      	str	r3, [r7, #96]	; 0x60
  const int diff_min = params.diff_min;
 8018798:	68fb      	ldr	r3, [r7, #12]
 801879a:	699b      	ldr	r3, [r3, #24]
 801879c:	65fb      	str	r3, [r7, #92]	; 0x5c
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 801879e:	68b8      	ldr	r0, [r7, #8]
 80187a0:	f7f3 fb81 	bl	800bea6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80187a4:	4603      	mov	r3, r0
 80187a6:	3b01      	subs	r3, #1
 80187a8:	65bb      	str	r3, [r7, #88]	; 0x58
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 80187aa:	683a      	ldr	r2, [r7, #0]
 80187ac:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80187ae:	68b8      	ldr	r0, [r7, #8]
 80187b0:	f7fa f8a3 	bl	80128fa <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 80187b4:	6578      	str	r0, [r7, #84]	; 0x54
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 80187b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80187b8:	683a      	ldr	r2, [r7, #0]
 80187ba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80187bc:	68b8      	ldr	r0, [r7, #8]
 80187be:	f7f9 fb55 	bl	8011e6c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80187c2:	6538      	str	r0, [r7, #80]	; 0x50
  for (int i = 0; i < outer_size; ++i) {
 80187c4:	2300      	movs	r3, #0
 80187c6:	677b      	str	r3, [r7, #116]	; 0x74
 80187c8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80187ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80187cc:	429a      	cmp	r2, r3
 80187ce:	f280 80f0 	bge.w	80189b2 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x234>
    InputT max_in_row = std::numeric_limits<InputT>::min();
 80187d2:	2380      	movs	r3, #128	; 0x80
 80187d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 80187d8:	2300      	movs	r3, #0
 80187da:	673b      	str	r3, [r7, #112]	; 0x70
 80187dc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80187de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80187e0:	429a      	cmp	r2, r3
 80187e2:	da17      	bge.n	8018814 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x96>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 80187e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80187e6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80187e8:	fb02 f203 	mul.w	r2, r2, r3
 80187ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80187ee:	4413      	add	r3, r2
 80187f0:	461a      	mov	r2, r3
 80187f2:	687b      	ldr	r3, [r7, #4]
 80187f4:	441a      	add	r2, r3
 80187f6:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 80187fa:	4611      	mov	r1, r2
 80187fc:	4618      	mov	r0, r3
 80187fe:	f7fa fe4c 	bl	801349a <_ZSt3maxIaERKT_S2_S2_>
 8018802:	4603      	mov	r3, r0
 8018804:	f993 3000 	ldrsb.w	r3, [r3]
 8018808:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 801880c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801880e:	3301      	adds	r3, #1
 8018810:	673b      	str	r3, [r7, #112]	; 0x70
 8018812:	e7e3      	b.n	80187dc <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x5e>
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
 8018814:	f000 f8d1 	bl	80189ba <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>
 8018818:	4603      	mov	r3, r0
 801881a:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 801881c:	2300      	movs	r3, #0
 801881e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8018820:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8018822:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018824:	429a      	cmp	r2, r3
 8018826:	da30      	bge.n	801888a <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x10c>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 8018828:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801882a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801882c:	fb02 f203 	mul.w	r2, r2, r3
 8018830:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018832:	4413      	add	r3, r2
 8018834:	461a      	mov	r2, r3
 8018836:	687b      	ldr	r3, [r7, #4]
 8018838:	4413      	add	r3, r2
 801883a:	f993 3000 	ldrsb.w	r3, [r3]
 801883e:	461a      	mov	r2, r3
 8018840:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
      int32_t input_diff =
 8018844:	1ad3      	subs	r3, r2, r3
 8018846:	64fb      	str	r3, [r7, #76]	; 0x4c
      if (input_diff >= diff_min) {
 8018848:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801884a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801884c:	429a      	cmp	r2, r3
 801884e:	db18      	blt.n	8018882 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x104>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 8018850:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8018852:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8018854:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8018856:	f7fb ff2d 	bl	80146b4 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 801885a:	64b8      	str	r0, [r7, #72]	; 0x48
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 801885c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 801885e:	f7fa fa0f 	bl	8012c80 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 8018862:	4603      	mov	r3, r0
 8018864:	61fb      	str	r3, [r7, #28]
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
 8018866:	69f8      	ldr	r0, [r7, #28]
 8018868:	f7fa fa1c 	bl	8012ca4 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 801886c:	4603      	mov	r3, r0
 801886e:	4618      	mov	r0, r3
 8018870:	f7fa fb60 	bl	8012f34 <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 8018874:	4603      	mov	r3, r0
 8018876:	4619      	mov	r1, r3
 8018878:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801887a:	f7fa fb75 	bl	8012f68 <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801887e:	4603      	mov	r3, r0
 8018880:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 8018882:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018884:	3301      	adds	r3, #1
 8018886:	66fb      	str	r3, [r7, #108]	; 0x6c
 8018888:	e7ca      	b.n	8018820 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xa2>
        sum_of_exps.raw(), kAccumulationIntegerBits, &num_bits_over_unit));
 801888a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801888e:	4618      	mov	r0, r3
 8018890:	f7fa fddb 	bl	801344a <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8018894:	4603      	mov	r3, r0
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
 8018896:	681b      	ldr	r3, [r3, #0]
 8018898:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801889c:	210c      	movs	r1, #12
 801889e:	4618      	mov	r0, r3
 80188a0:	f7ff fa6a 	bl	8017d78 <_ZN6tflite13GetReciprocalEliPi>
 80188a4:	4603      	mov	r3, r0
 80188a6:	4618      	mov	r0, r3
 80188a8:	f7fa f979 	bl	8012b9e <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 80188ac:	4603      	mov	r3, r0
 80188ae:	623b      	str	r3, [r7, #32]
    for (int c = 0; c < depth; ++c) {
 80188b0:	2300      	movs	r3, #0
 80188b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80188b4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80188b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80188b8:	429a      	cmp	r2, r3
 80188ba:	da76      	bge.n	80189aa <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x22c>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 80188bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80188be:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80188c0:	fb02 f203 	mul.w	r2, r2, r3
 80188c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80188c6:	4413      	add	r3, r2
 80188c8:	461a      	mov	r2, r3
 80188ca:	687b      	ldr	r3, [r7, #4]
 80188cc:	4413      	add	r3, r2
 80188ce:	f993 3000 	ldrsb.w	r3, [r3]
 80188d2:	461a      	mov	r2, r3
 80188d4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
      int32_t input_diff =
 80188d8:	1ad3      	subs	r3, r2, r3
 80188da:	647b      	str	r3, [r7, #68]	; 0x44
      if (input_diff >= diff_min) {
 80188dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80188de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80188e0:	429a      	cmp	r2, r3
 80188e2:	db50      	blt.n	8018986 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x208>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 80188e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80188e6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80188e8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80188ea:	f7fb fee3 	bl	80146b4 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 80188ee:	6438      	str	r0, [r7, #64]	; 0x40
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 80188f0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80188f2:	f7fa f9c5 	bl	8012c80 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 80188f6:	4603      	mov	r3, r0
 80188f8:	61bb      	str	r3, [r7, #24]
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
 80188fa:	69b8      	ldr	r0, [r7, #24]
 80188fc:	f7fa f9d2 	bl	8012ca4 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 8018900:	4603      	mov	r3, r0
 8018902:	617b      	str	r3, [r7, #20]
            (shifted_scale * exp_in_0).raw(),
 8018904:	6979      	ldr	r1, [r7, #20]
 8018906:	6a38      	ldr	r0, [r7, #32]
 8018908:	f7fa fd4a 	bl	80133a0 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801890c:	4603      	mov	r3, r0
 801890e:	633b      	str	r3, [r7, #48]	; 0x30
 8018910:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8018914:	4618      	mov	r0, r3
 8018916:	f7fa f831 	bl	801297c <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801891a:	4603      	mov	r3, r0
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
 801891c:	681b      	ldr	r3, [r3, #0]
            num_bits_over_unit + 31 - (sizeof(OutputT) * 8));
 801891e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018920:	320f      	adds	r2, #15
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
 8018922:	4611      	mov	r1, r2
 8018924:	4618      	mov	r0, r3
 8018926:	f7f8 fdd5 	bl	80114d4 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 801892a:	63f8      	str	r0, [r7, #60]	; 0x3c
            static_cast<int32_t>(std::numeric_limits<OutputT>::min());
 801892c:	f7f2 fc02 	bl	800b134 <_ZNSt14numeric_limitsIsE3minEv>
 8018930:	4603      	mov	r3, r0
 8018932:	461a      	mov	r2, r3
            unsat_output +
 8018934:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018936:	4413      	add	r3, r2
        const int32_t shifted_output =
 8018938:	613b      	str	r3, [r7, #16]
                     static_cast<int32_t>(std::numeric_limits<OutputT>::max())),
 801893a:	f7f2 fc05 	bl	800b148 <_ZNSt14numeric_limitsIsE3maxEv>
 801893e:	4603      	mov	r3, r0
 8018940:	637b      	str	r3, [r7, #52]	; 0x34
            static_cast<int32_t>(std::numeric_limits<OutputT>::min())));
 8018942:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8018946:	f107 0310 	add.w	r3, r7, #16
 801894a:	4611      	mov	r1, r2
 801894c:	4618      	mov	r0, r3
 801894e:	f7f3 f919 	bl	800bb84 <_ZSt3minIlERKT_S2_S2_>
 8018952:	4604      	mov	r4, r0
 8018954:	f7f2 fbee 	bl	800b134 <_ZNSt14numeric_limitsIsE3minEv>
 8018958:	4603      	mov	r3, r0
 801895a:	63bb      	str	r3, [r7, #56]	; 0x38
 801895c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8018960:	4619      	mov	r1, r3
 8018962:	4620      	mov	r0, r4
 8018964:	f7f3 f922 	bl	800bbac <_ZSt3maxIlERKT_S2_S2_>
 8018968:	4603      	mov	r3, r0
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
 801896a:	6819      	ldr	r1, [r3, #0]
 801896c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801896e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8018970:	fb02 f203 	mul.w	r2, r2, r3
 8018974:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8018976:	4413      	add	r3, r2
 8018978:	005b      	lsls	r3, r3, #1
 801897a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801897e:	4413      	add	r3, r2
 8018980:	b20a      	sxth	r2, r1
 8018982:	801a      	strh	r2, [r3, #0]
 8018984:	e00d      	b.n	80189a2 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x224>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
 8018986:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8018988:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801898a:	fb02 f203 	mul.w	r2, r2, r3
 801898e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8018990:	4413      	add	r3, r2
 8018992:	005b      	lsls	r3, r3, #1
 8018994:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8018998:	18d4      	adds	r4, r2, r3
 801899a:	f7f2 fbcb 	bl	800b134 <_ZNSt14numeric_limitsIsE3minEv>
 801899e:	4603      	mov	r3, r0
 80189a0:	8023      	strh	r3, [r4, #0]
    for (int c = 0; c < depth; ++c) {
 80189a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80189a4:	3301      	adds	r3, #1
 80189a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80189a8:	e784      	b.n	80188b4 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x136>
  for (int i = 0; i < outer_size; ++i) {
 80189aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80189ac:	3301      	adds	r3, #1
 80189ae:	677b      	str	r3, [r7, #116]	; 0x74
 80189b0:	e70a      	b.n	80187c8 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x4a>
}
 80189b2:	bf00      	nop
 80189b4:	377c      	adds	r7, #124	; 0x7c
 80189b6:	46bd      	mov	sp, r7
 80189b8:	bd90      	pop	{r4, r7, pc}

080189ba <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>:
  static FixedPoint Zero() { return FromScalarRaw(0); }
 80189ba:	b580      	push	{r7, lr}
 80189bc:	af00      	add	r7, sp, #0
 80189be:	2000      	movs	r0, #0
 80189c0:	f000 f803 	bl	80189ca <_ZN8gemmlowp10FixedPointIlLi12EE13FromScalarRawEl>
 80189c4:	4603      	mov	r3, r0
 80189c6:	4618      	mov	r0, r3
 80189c8:	bd80      	pop	{r7, pc}

080189ca <_ZN8gemmlowp10FixedPointIlLi12EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 80189ca:	b590      	push	{r4, r7, lr}
 80189cc:	b085      	sub	sp, #20
 80189ce:	af00      	add	r7, sp, #0
 80189d0:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 80189d2:	f107 030c 	add.w	r3, r7, #12
 80189d6:	4618      	mov	r0, r3
 80189d8:	f7fa fd37 	bl	801344a <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 80189dc:	4604      	mov	r4, r0
 80189de:	6878      	ldr	r0, [r7, #4]
 80189e0:	f7f9 f93c 	bl	8011c5c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80189e4:	4603      	mov	r3, r0
 80189e6:	6023      	str	r3, [r4, #0]
    return retval;
 80189e8:	68fb      	ldr	r3, [r7, #12]
  }
 80189ea:	4618      	mov	r0, r3
 80189ec:	3714      	adds	r7, #20
 80189ee:	46bd      	mov	sp, r7
 80189f0:	bd90      	pop	{r4, r7, pc}
	...

080189f4 <_ZN6tflite13MemoryPlannerC1Ev>:
// The goal is for applications to be able to experiment with different layout
// strategies without changing their client code, by swapping out classes that
// implement this interface.=
class MemoryPlanner {
 public:
  MemoryPlanner() {}
 80189f4:	b480      	push	{r7}
 80189f6:	b083      	sub	sp, #12
 80189f8:	af00      	add	r7, sp, #0
 80189fa:	6078      	str	r0, [r7, #4]
 80189fc:	4a04      	ldr	r2, [pc, #16]	; (8018a10 <_ZN6tflite13MemoryPlannerC1Ev+0x1c>)
 80189fe:	687b      	ldr	r3, [r7, #4]
 8018a00:	601a      	str	r2, [r3, #0]
 8018a02:	687b      	ldr	r3, [r7, #4]
 8018a04:	4618      	mov	r0, r3
 8018a06:	370c      	adds	r7, #12
 8018a08:	46bd      	mov	sp, r7
 8018a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a0e:	4770      	bx	lr
 8018a10:	0802cacc 	.word	0x0802cacc

08018a14 <_ZN6tflite13MemoryPlannerD1Ev>:
  virtual ~MemoryPlanner() {}
 8018a14:	b480      	push	{r7}
 8018a16:	b083      	sub	sp, #12
 8018a18:	af00      	add	r7, sp, #0
 8018a1a:	6078      	str	r0, [r7, #4]
 8018a1c:	4a04      	ldr	r2, [pc, #16]	; (8018a30 <_ZN6tflite13MemoryPlannerD1Ev+0x1c>)
 8018a1e:	687b      	ldr	r3, [r7, #4]
 8018a20:	601a      	str	r2, [r3, #0]
 8018a22:	687b      	ldr	r3, [r7, #4]
 8018a24:	4618      	mov	r0, r3
 8018a26:	370c      	adds	r7, #12
 8018a28:	46bd      	mov	sp, r7
 8018a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a2e:	4770      	bx	lr
 8018a30:	0802cacc 	.word	0x0802cacc

08018a34 <_ZN6tflite13MemoryPlannerD0Ev>:
 8018a34:	b580      	push	{r7, lr}
 8018a36:	b082      	sub	sp, #8
 8018a38:	af00      	add	r7, sp, #0
 8018a3a:	6078      	str	r0, [r7, #4]
 8018a3c:	6878      	ldr	r0, [r7, #4]
 8018a3e:	f7ff ffe9 	bl	8018a14 <_ZN6tflite13MemoryPlannerD1Ev>
 8018a42:	2104      	movs	r1, #4
 8018a44:	6878      	ldr	r0, [r7, #4]
 8018a46:	f00c fd78 	bl	802553a <_ZdlPvj>
 8018a4a:	687b      	ldr	r3, [r7, #4]
 8018a4c:	4618      	mov	r0, r3
 8018a4e:	3708      	adds	r7, #8
 8018a50:	46bd      	mov	sp, r7
 8018a52:	bd80      	pop	{r7, pc}

08018a54 <_ZN6tflite19GreedyMemoryPlanner15per_buffer_sizeEv>:
    int requirements_index;
    int next_entry_index;
  };

  // Number of bytes required in order to plan a buffer.
  static size_t per_buffer_size() {
 8018a54:	b480      	push	{r7}
 8018a56:	b083      	sub	sp, #12
 8018a58:	af00      	add	r7, sp, #0
    const int per_buffer_size =
 8018a5a:	2328      	movs	r3, #40	; 0x28
 8018a5c:	607b      	str	r3, [r7, #4]
        sizeof(BufferRequirements) +  // requirements_
        sizeof(int) +                 // buffer_sizes_sorted_
        sizeof(int) +                 // buffer_ids_sorted_
        sizeof(ListEntry) +           // buffers_sorted_by_offset_
        sizeof(int);                  // buffer_offsets_;
    return per_buffer_size;
 8018a5e:	2328      	movs	r3, #40	; 0x28
  }
 8018a60:	4618      	mov	r0, r3
 8018a62:	370c      	adds	r7, #12
 8018a64:	46bd      	mov	sp, r7
 8018a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a6a:	4770      	bx	lr

08018a6c <_ZN6tflite18ReverseSortInPlaceEPiS0_i>:
}  // namespace

// Simple stable in-place sort function. Not time-efficient for large arrays.
// Would normally be in an anonymous namespace to keep it private, but we want
// to be able to test it externally.
void ReverseSortInPlace(int* values, int* ids, int size) {
 8018a6c:	b480      	push	{r7}
 8018a6e:	b089      	sub	sp, #36	; 0x24
 8018a70:	af00      	add	r7, sp, #0
 8018a72:	60f8      	str	r0, [r7, #12]
 8018a74:	60b9      	str	r1, [r7, #8]
 8018a76:	607a      	str	r2, [r7, #4]
  bool any_swapped;
  do {
    any_swapped = false;
 8018a78:	2300      	movs	r3, #0
 8018a7a:	77fb      	strb	r3, [r7, #31]
    for (int i = 1; i < size; ++i) {
 8018a7c:	2301      	movs	r3, #1
 8018a7e:	61bb      	str	r3, [r7, #24]
 8018a80:	69ba      	ldr	r2, [r7, #24]
 8018a82:	687b      	ldr	r3, [r7, #4]
 8018a84:	429a      	cmp	r2, r3
 8018a86:	da4c      	bge.n	8018b22 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xb6>
      if (values[i - 1] < values[i]) {
 8018a88:	69bb      	ldr	r3, [r7, #24]
 8018a8a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8018a8e:	3b01      	subs	r3, #1
 8018a90:	009b      	lsls	r3, r3, #2
 8018a92:	68fa      	ldr	r2, [r7, #12]
 8018a94:	4413      	add	r3, r2
 8018a96:	681a      	ldr	r2, [r3, #0]
 8018a98:	69bb      	ldr	r3, [r7, #24]
 8018a9a:	009b      	lsls	r3, r3, #2
 8018a9c:	68f9      	ldr	r1, [r7, #12]
 8018a9e:	440b      	add	r3, r1
 8018aa0:	681b      	ldr	r3, [r3, #0]
 8018aa2:	429a      	cmp	r2, r3
 8018aa4:	da39      	bge.n	8018b1a <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xae>
        const int value_temp = values[i - 1];
 8018aa6:	69bb      	ldr	r3, [r7, #24]
 8018aa8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8018aac:	3b01      	subs	r3, #1
 8018aae:	009b      	lsls	r3, r3, #2
 8018ab0:	68fa      	ldr	r2, [r7, #12]
 8018ab2:	4413      	add	r3, r2
 8018ab4:	681b      	ldr	r3, [r3, #0]
 8018ab6:	617b      	str	r3, [r7, #20]
        values[i - 1] = values[i];
 8018ab8:	69bb      	ldr	r3, [r7, #24]
 8018aba:	009b      	lsls	r3, r3, #2
 8018abc:	68fa      	ldr	r2, [r7, #12]
 8018abe:	441a      	add	r2, r3
 8018ac0:	69bb      	ldr	r3, [r7, #24]
 8018ac2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8018ac6:	3b01      	subs	r3, #1
 8018ac8:	009b      	lsls	r3, r3, #2
 8018aca:	68f9      	ldr	r1, [r7, #12]
 8018acc:	440b      	add	r3, r1
 8018ace:	6812      	ldr	r2, [r2, #0]
 8018ad0:	601a      	str	r2, [r3, #0]
        values[i] = value_temp;
 8018ad2:	69bb      	ldr	r3, [r7, #24]
 8018ad4:	009b      	lsls	r3, r3, #2
 8018ad6:	68fa      	ldr	r2, [r7, #12]
 8018ad8:	4413      	add	r3, r2
 8018ada:	697a      	ldr	r2, [r7, #20]
 8018adc:	601a      	str	r2, [r3, #0]
        const int id_temp = ids[i - 1];
 8018ade:	69bb      	ldr	r3, [r7, #24]
 8018ae0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8018ae4:	3b01      	subs	r3, #1
 8018ae6:	009b      	lsls	r3, r3, #2
 8018ae8:	68ba      	ldr	r2, [r7, #8]
 8018aea:	4413      	add	r3, r2
 8018aec:	681b      	ldr	r3, [r3, #0]
 8018aee:	613b      	str	r3, [r7, #16]
        ids[i - 1] = ids[i];
 8018af0:	69bb      	ldr	r3, [r7, #24]
 8018af2:	009b      	lsls	r3, r3, #2
 8018af4:	68ba      	ldr	r2, [r7, #8]
 8018af6:	441a      	add	r2, r3
 8018af8:	69bb      	ldr	r3, [r7, #24]
 8018afa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8018afe:	3b01      	subs	r3, #1
 8018b00:	009b      	lsls	r3, r3, #2
 8018b02:	68b9      	ldr	r1, [r7, #8]
 8018b04:	440b      	add	r3, r1
 8018b06:	6812      	ldr	r2, [r2, #0]
 8018b08:	601a      	str	r2, [r3, #0]
        ids[i] = id_temp;
 8018b0a:	69bb      	ldr	r3, [r7, #24]
 8018b0c:	009b      	lsls	r3, r3, #2
 8018b0e:	68ba      	ldr	r2, [r7, #8]
 8018b10:	4413      	add	r3, r2
 8018b12:	693a      	ldr	r2, [r7, #16]
 8018b14:	601a      	str	r2, [r3, #0]
        any_swapped = true;
 8018b16:	2301      	movs	r3, #1
 8018b18:	77fb      	strb	r3, [r7, #31]
    for (int i = 1; i < size; ++i) {
 8018b1a:	69bb      	ldr	r3, [r7, #24]
 8018b1c:	3301      	adds	r3, #1
 8018b1e:	61bb      	str	r3, [r7, #24]
 8018b20:	e7ae      	b.n	8018a80 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x14>
  do {
 8018b22:	7ffb      	ldrb	r3, [r7, #31]
 8018b24:	2b00      	cmp	r3, #0
 8018b26:	d000      	beq.n	8018b2a <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xbe>
 8018b28:	e7a6      	b.n	8018a78 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xc>
      }
    }
  } while (any_swapped);
}
 8018b2a:	bf00      	nop
 8018b2c:	3724      	adds	r7, #36	; 0x24
 8018b2e:	46bd      	mov	sp, r7
 8018b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b34:	4770      	bx	lr
	...

08018b38 <_ZN6tflite19GreedyMemoryPlannerC1EPhi>:

GreedyMemoryPlanner::GreedyMemoryPlanner(unsigned char* scratch_buffer,
 8018b38:	b590      	push	{r4, r7, lr}
 8018b3a:	b087      	sub	sp, #28
 8018b3c:	af00      	add	r7, sp, #0
 8018b3e:	60f8      	str	r0, [r7, #12]
 8018b40:	60b9      	str	r1, [r7, #8]
 8018b42:	607a      	str	r2, [r7, #4]
                                         int scratch_buffer_size)
    : buffer_count_(0), need_to_calculate_offsets_(true) {
 8018b44:	68fb      	ldr	r3, [r7, #12]
 8018b46:	4618      	mov	r0, r3
 8018b48:	f7ff ff54 	bl	80189f4 <_ZN6tflite13MemoryPlannerC1Ev>
 8018b4c:	4a22      	ldr	r2, [pc, #136]	; (8018bd8 <_ZN6tflite19GreedyMemoryPlannerC1EPhi+0xa0>)
 8018b4e:	68fb      	ldr	r3, [r7, #12]
 8018b50:	601a      	str	r2, [r3, #0]
 8018b52:	68fb      	ldr	r3, [r7, #12]
 8018b54:	2200      	movs	r2, #0
 8018b56:	609a      	str	r2, [r3, #8]
 8018b58:	68fb      	ldr	r3, [r7, #12]
 8018b5a:	2201      	movs	r2, #1
 8018b5c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  // Allocate the arrays we need within the scratch buffer arena.
  max_buffer_count_ = scratch_buffer_size / per_buffer_size();
 8018b60:	687c      	ldr	r4, [r7, #4]
 8018b62:	f7ff ff77 	bl	8018a54 <_ZN6tflite19GreedyMemoryPlanner15per_buffer_sizeEv>
 8018b66:	4603      	mov	r3, r0
 8018b68:	fbb4 f3f3 	udiv	r3, r4, r3
 8018b6c:	461a      	mov	r2, r3
 8018b6e:	68fb      	ldr	r3, [r7, #12]
 8018b70:	605a      	str	r2, [r3, #4]

  unsigned char* next_free = scratch_buffer;
 8018b72:	68bb      	ldr	r3, [r7, #8]
 8018b74:	617b      	str	r3, [r7, #20]
  requirements_ = reinterpret_cast<BufferRequirements*>(next_free);
 8018b76:	68fb      	ldr	r3, [r7, #12]
 8018b78:	697a      	ldr	r2, [r7, #20]
 8018b7a:	60da      	str	r2, [r3, #12]
  next_free += sizeof(BufferRequirements) * max_buffer_count_;
 8018b7c:	68fb      	ldr	r3, [r7, #12]
 8018b7e:	685b      	ldr	r3, [r3, #4]
 8018b80:	011b      	lsls	r3, r3, #4
 8018b82:	697a      	ldr	r2, [r7, #20]
 8018b84:	4413      	add	r3, r2
 8018b86:	617b      	str	r3, [r7, #20]

  buffer_sizes_sorted_ = reinterpret_cast<int*>(next_free);
 8018b88:	68fb      	ldr	r3, [r7, #12]
 8018b8a:	697a      	ldr	r2, [r7, #20]
 8018b8c:	611a      	str	r2, [r3, #16]
  next_free += sizeof(int) * max_buffer_count_;
 8018b8e:	68fb      	ldr	r3, [r7, #12]
 8018b90:	685b      	ldr	r3, [r3, #4]
 8018b92:	009b      	lsls	r3, r3, #2
 8018b94:	697a      	ldr	r2, [r7, #20]
 8018b96:	4413      	add	r3, r2
 8018b98:	617b      	str	r3, [r7, #20]

  buffer_ids_sorted_ = reinterpret_cast<int*>(next_free);
 8018b9a:	68fb      	ldr	r3, [r7, #12]
 8018b9c:	697a      	ldr	r2, [r7, #20]
 8018b9e:	615a      	str	r2, [r3, #20]
  next_free += sizeof(int) * max_buffer_count_;
 8018ba0:	68fb      	ldr	r3, [r7, #12]
 8018ba2:	685b      	ldr	r3, [r3, #4]
 8018ba4:	009b      	lsls	r3, r3, #2
 8018ba6:	697a      	ldr	r2, [r7, #20]
 8018ba8:	4413      	add	r3, r2
 8018baa:	617b      	str	r3, [r7, #20]

  buffers_sorted_by_offset_ = reinterpret_cast<ListEntry*>(next_free);
 8018bac:	68fb      	ldr	r3, [r7, #12]
 8018bae:	697a      	ldr	r2, [r7, #20]
 8018bb0:	619a      	str	r2, [r3, #24]
  next_free += sizeof(ListEntry) * max_buffer_count_;
 8018bb2:	68fb      	ldr	r3, [r7, #12]
 8018bb4:	685b      	ldr	r3, [r3, #4]
 8018bb6:	461a      	mov	r2, r3
 8018bb8:	4613      	mov	r3, r2
 8018bba:	005b      	lsls	r3, r3, #1
 8018bbc:	4413      	add	r3, r2
 8018bbe:	009b      	lsls	r3, r3, #2
 8018bc0:	461a      	mov	r2, r3
 8018bc2:	697b      	ldr	r3, [r7, #20]
 8018bc4:	4413      	add	r3, r2
 8018bc6:	617b      	str	r3, [r7, #20]

  buffer_offsets_ = reinterpret_cast<int*>(next_free);
 8018bc8:	68fb      	ldr	r3, [r7, #12]
 8018bca:	697a      	ldr	r2, [r7, #20]
 8018bcc:	625a      	str	r2, [r3, #36]	; 0x24
}
 8018bce:	68fb      	ldr	r3, [r7, #12]
 8018bd0:	4618      	mov	r0, r3
 8018bd2:	371c      	adds	r7, #28
 8018bd4:	46bd      	mov	sp, r7
 8018bd6:	bd90      	pop	{r4, r7, pc}
 8018bd8:	0802caac 	.word	0x0802caac

08018bdc <_ZN6tflite19GreedyMemoryPlannerD1Ev>:

GreedyMemoryPlanner::~GreedyMemoryPlanner() {
 8018bdc:	b580      	push	{r7, lr}
 8018bde:	b082      	sub	sp, #8
 8018be0:	af00      	add	r7, sp, #0
 8018be2:	6078      	str	r0, [r7, #4]
 8018be4:	4a05      	ldr	r2, [pc, #20]	; (8018bfc <_ZN6tflite19GreedyMemoryPlannerD1Ev+0x20>)
 8018be6:	687b      	ldr	r3, [r7, #4]
 8018be8:	601a      	str	r2, [r3, #0]
 8018bea:	687b      	ldr	r3, [r7, #4]
 8018bec:	4618      	mov	r0, r3
 8018bee:	f7ff ff11 	bl	8018a14 <_ZN6tflite13MemoryPlannerD1Ev>
  // We don't own the scratch buffer, so don't deallocate anything.
}
 8018bf2:	687b      	ldr	r3, [r7, #4]
 8018bf4:	4618      	mov	r0, r3
 8018bf6:	3708      	adds	r7, #8
 8018bf8:	46bd      	mov	sp, r7
 8018bfa:	bd80      	pop	{r7, pc}
 8018bfc:	0802caac 	.word	0x0802caac

08018c00 <_ZN6tflite19GreedyMemoryPlannerD0Ev>:
GreedyMemoryPlanner::~GreedyMemoryPlanner() {
 8018c00:	b580      	push	{r7, lr}
 8018c02:	b082      	sub	sp, #8
 8018c04:	af00      	add	r7, sp, #0
 8018c06:	6078      	str	r0, [r7, #4]
}
 8018c08:	6878      	ldr	r0, [r7, #4]
 8018c0a:	f7ff ffe7 	bl	8018bdc <_ZN6tflite19GreedyMemoryPlannerD1Ev>
 8018c0e:	212c      	movs	r1, #44	; 0x2c
 8018c10:	6878      	ldr	r0, [r7, #4]
 8018c12:	f00c fc92 	bl	802553a <_ZdlPvj>
 8018c16:	687b      	ldr	r3, [r7, #4]
 8018c18:	4618      	mov	r0, r3
 8018c1a:	3708      	adds	r7, #8
 8018c1c:	46bd      	mov	sp, r7
 8018c1e:	bd80      	pop	{r7, pc}

08018c20 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii>:

TfLiteStatus GreedyMemoryPlanner::AddBuffer(
    tflite::ErrorReporter* error_reporter, int size, int first_time_used,
    int last_time_used) {
 8018c20:	b580      	push	{r7, lr}
 8018c22:	b086      	sub	sp, #24
 8018c24:	af00      	add	r7, sp, #0
 8018c26:	60f8      	str	r0, [r7, #12]
 8018c28:	60b9      	str	r1, [r7, #8]
 8018c2a:	607a      	str	r2, [r7, #4]
 8018c2c:	603b      	str	r3, [r7, #0]
  if (buffer_count_ >= max_buffer_count_) {
 8018c2e:	68fb      	ldr	r3, [r7, #12]
 8018c30:	689a      	ldr	r2, [r3, #8]
 8018c32:	68fb      	ldr	r3, [r7, #12]
 8018c34:	685b      	ldr	r3, [r3, #4]
 8018c36:	429a      	cmp	r2, r3
 8018c38:	db08      	blt.n	8018c4c <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter, "Too many buffers (max is %d)",
 8018c3a:	68fb      	ldr	r3, [r7, #12]
 8018c3c:	685b      	ldr	r3, [r3, #4]
 8018c3e:	461a      	mov	r2, r3
 8018c40:	4913      	ldr	r1, [pc, #76]	; (8018c90 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x70>)
 8018c42:	68b8      	ldr	r0, [r7, #8]
 8018c44:	f7ef fd80 	bl	8008748 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         max_buffer_count_);
    return kTfLiteError;
 8018c48:	2301      	movs	r3, #1
 8018c4a:	e01d      	b.n	8018c88 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x68>
  }
  BufferRequirements* current = &requirements_[buffer_count_];
 8018c4c:	68fb      	ldr	r3, [r7, #12]
 8018c4e:	68da      	ldr	r2, [r3, #12]
 8018c50:	68fb      	ldr	r3, [r7, #12]
 8018c52:	689b      	ldr	r3, [r3, #8]
 8018c54:	011b      	lsls	r3, r3, #4
 8018c56:	4413      	add	r3, r2
 8018c58:	617b      	str	r3, [r7, #20]
  current->size = size;
 8018c5a:	697b      	ldr	r3, [r7, #20]
 8018c5c:	687a      	ldr	r2, [r7, #4]
 8018c5e:	601a      	str	r2, [r3, #0]
  current->first_time_used = first_time_used;
 8018c60:	697b      	ldr	r3, [r7, #20]
 8018c62:	683a      	ldr	r2, [r7, #0]
 8018c64:	609a      	str	r2, [r3, #8]
  current->last_time_used = last_time_used;
 8018c66:	697b      	ldr	r3, [r7, #20]
 8018c68:	6a3a      	ldr	r2, [r7, #32]
 8018c6a:	60da      	str	r2, [r3, #12]
  current->offline_offset = kOnlinePlannedBuffer;
 8018c6c:	697b      	ldr	r3, [r7, #20]
 8018c6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018c72:	605a      	str	r2, [r3, #4]
  ++buffer_count_;
 8018c74:	68fb      	ldr	r3, [r7, #12]
 8018c76:	689b      	ldr	r3, [r3, #8]
 8018c78:	1c5a      	adds	r2, r3, #1
 8018c7a:	68fb      	ldr	r3, [r7, #12]
 8018c7c:	609a      	str	r2, [r3, #8]
  need_to_calculate_offsets_ = true;
 8018c7e:	68fb      	ldr	r3, [r7, #12]
 8018c80:	2201      	movs	r2, #1
 8018c82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  return kTfLiteOk;
 8018c86:	2300      	movs	r3, #0
}
 8018c88:	4618      	mov	r0, r3
 8018c8a:	3718      	adds	r7, #24
 8018c8c:	46bd      	mov	sp, r7
 8018c8e:	bd80      	pop	{r7, pc}
 8018c90:	0802c1d0 	.word	0x0802c1d0

08018c94 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii>:

TfLiteStatus GreedyMemoryPlanner::AddBuffer(
    tflite::ErrorReporter* error_reporter, int size, int first_time_used,
    int last_time_used, int offline_offset) {
 8018c94:	b590      	push	{r4, r7, lr}
 8018c96:	b089      	sub	sp, #36	; 0x24
 8018c98:	af02      	add	r7, sp, #8
 8018c9a:	60f8      	str	r0, [r7, #12]
 8018c9c:	60b9      	str	r1, [r7, #8]
 8018c9e:	607a      	str	r2, [r7, #4]
 8018ca0:	603b      	str	r3, [r7, #0]
  BufferRequirements* current = &requirements_[buffer_count_];
 8018ca2:	68fb      	ldr	r3, [r7, #12]
 8018ca4:	68da      	ldr	r2, [r3, #12]
 8018ca6:	68fb      	ldr	r3, [r7, #12]
 8018ca8:	689b      	ldr	r3, [r3, #8]
 8018caa:	011b      	lsls	r3, r3, #4
 8018cac:	4413      	add	r3, r2
 8018cae:	617b      	str	r3, [r7, #20]
  if (AddBuffer(error_reporter, size, first_time_used, last_time_used) !=
 8018cb0:	68fb      	ldr	r3, [r7, #12]
 8018cb2:	681b      	ldr	r3, [r3, #0]
 8018cb4:	3308      	adds	r3, #8
 8018cb6:	681c      	ldr	r4, [r3, #0]
 8018cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018cba:	9300      	str	r3, [sp, #0]
 8018cbc:	683b      	ldr	r3, [r7, #0]
 8018cbe:	687a      	ldr	r2, [r7, #4]
 8018cc0:	68b9      	ldr	r1, [r7, #8]
 8018cc2:	68f8      	ldr	r0, [r7, #12]
 8018cc4:	47a0      	blx	r4
 8018cc6:	4603      	mov	r3, r0
 8018cc8:	2b00      	cmp	r3, #0
 8018cca:	bf14      	ite	ne
 8018ccc:	2301      	movne	r3, #1
 8018cce:	2300      	moveq	r3, #0
 8018cd0:	b2db      	uxtb	r3, r3
 8018cd2:	2b00      	cmp	r3, #0
 8018cd4:	d001      	beq.n	8018cda <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x46>
      kTfLiteOk) {
    return kTfLiteError;
 8018cd6:	2301      	movs	r3, #1
 8018cd8:	e003      	b.n	8018ce2 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x4e>
  }
  current->offline_offset = offline_offset;
 8018cda:	697b      	ldr	r3, [r7, #20]
 8018cdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018cde:	605a      	str	r2, [r3, #4]
  return kTfLiteOk;
 8018ce0:	2300      	movs	r3, #0
}
 8018ce2:	4618      	mov	r0, r3
 8018ce4:	371c      	adds	r7, #28
 8018ce6:	46bd      	mov	sp, r7
 8018ce8:	bd90      	pop	{r4, r7, pc}

08018cea <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>:

bool GreedyMemoryPlanner::DoesEntryOverlapInTime(
    const GreedyMemoryPlanner::ListEntry* entry, const int first_time_used,
    const int last_time_used) const {
 8018cea:	b480      	push	{r7}
 8018cec:	b087      	sub	sp, #28
 8018cee:	af00      	add	r7, sp, #0
 8018cf0:	60f8      	str	r0, [r7, #12]
 8018cf2:	60b9      	str	r1, [r7, #8]
 8018cf4:	607a      	str	r2, [r7, #4]
 8018cf6:	603b      	str	r3, [r7, #0]
  const BufferRequirements* entry_requirements =
      &requirements_[entry->requirements_index];
 8018cf8:	68fb      	ldr	r3, [r7, #12]
 8018cfa:	68da      	ldr	r2, [r3, #12]
 8018cfc:	68bb      	ldr	r3, [r7, #8]
 8018cfe:	685b      	ldr	r3, [r3, #4]
 8018d00:	011b      	lsls	r3, r3, #4
  const BufferRequirements* entry_requirements =
 8018d02:	4413      	add	r3, r2
 8018d04:	617b      	str	r3, [r7, #20]
  if (entry_requirements->first_time_used > last_time_used) {
 8018d06:	697b      	ldr	r3, [r7, #20]
 8018d08:	689b      	ldr	r3, [r3, #8]
 8018d0a:	683a      	ldr	r2, [r7, #0]
 8018d0c:	429a      	cmp	r2, r3
 8018d0e:	da01      	bge.n	8018d14 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x2a>
    return false;
 8018d10:	2300      	movs	r3, #0
 8018d12:	e007      	b.n	8018d24 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x3a>
  }
  if (first_time_used > entry_requirements->last_time_used) {
 8018d14:	697b      	ldr	r3, [r7, #20]
 8018d16:	68db      	ldr	r3, [r3, #12]
 8018d18:	687a      	ldr	r2, [r7, #4]
 8018d1a:	429a      	cmp	r2, r3
 8018d1c:	dd01      	ble.n	8018d22 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x38>
    return false;
 8018d1e:	2300      	movs	r3, #0
 8018d20:	e000      	b.n	8018d24 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x3a>
  }
  return true;
 8018d22:	2301      	movs	r3, #1
}
 8018d24:	4618      	mov	r0, r3
 8018d26:	371c      	adds	r7, #28
 8018d28:	46bd      	mov	sp, r7
 8018d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d2e:	4770      	bx	lr

08018d30 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>:

GreedyMemoryPlanner::ListEntry*
GreedyMemoryPlanner::NextSimultaneouslyActiveBuffer(
    const GreedyMemoryPlanner::ListEntry* start, const int first_time_used,
    const int last_time_used) {
 8018d30:	b580      	push	{r7, lr}
 8018d32:	b086      	sub	sp, #24
 8018d34:	af00      	add	r7, sp, #0
 8018d36:	60f8      	str	r0, [r7, #12]
 8018d38:	60b9      	str	r1, [r7, #8]
 8018d3a:	607a      	str	r2, [r7, #4]
 8018d3c:	603b      	str	r3, [r7, #0]
  ListEntry* result = nullptr;
 8018d3e:	2300      	movs	r3, #0
 8018d40:	617b      	str	r3, [r7, #20]
  ListEntry* candidate_next_entry;
  if (start == nullptr) {
 8018d42:	68bb      	ldr	r3, [r7, #8]
 8018d44:	2b00      	cmp	r3, #0
 8018d46:	d10b      	bne.n	8018d60 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x30>
    candidate_next_entry = &buffers_sorted_by_offset_[first_entry_index_];
 8018d48:	68fb      	ldr	r3, [r7, #12]
 8018d4a:	699a      	ldr	r2, [r3, #24]
 8018d4c:	68fb      	ldr	r3, [r7, #12]
 8018d4e:	6a1b      	ldr	r3, [r3, #32]
 8018d50:	4619      	mov	r1, r3
 8018d52:	460b      	mov	r3, r1
 8018d54:	005b      	lsls	r3, r3, #1
 8018d56:	440b      	add	r3, r1
 8018d58:	009b      	lsls	r3, r3, #2
 8018d5a:	4413      	add	r3, r2
 8018d5c:	613b      	str	r3, [r7, #16]
 8018d5e:	e011      	b.n	8018d84 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x54>
  } else {
    if (start->next_entry_index == -1) {
 8018d60:	68bb      	ldr	r3, [r7, #8]
 8018d62:	689b      	ldr	r3, [r3, #8]
 8018d64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018d68:	d101      	bne.n	8018d6e <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x3e>
      return nullptr;
 8018d6a:	2300      	movs	r3, #0
 8018d6c:	e029      	b.n	8018dc2 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x92>
    }
    candidate_next_entry = &buffers_sorted_by_offset_[start->next_entry_index];
 8018d6e:	68fb      	ldr	r3, [r7, #12]
 8018d70:	699a      	ldr	r2, [r3, #24]
 8018d72:	68bb      	ldr	r3, [r7, #8]
 8018d74:	689b      	ldr	r3, [r3, #8]
 8018d76:	4619      	mov	r1, r3
 8018d78:	460b      	mov	r3, r1
 8018d7a:	005b      	lsls	r3, r3, #1
 8018d7c:	440b      	add	r3, r1
 8018d7e:	009b      	lsls	r3, r3, #2
 8018d80:	4413      	add	r3, r2
 8018d82:	613b      	str	r3, [r7, #16]
  }
  do {
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
 8018d84:	683b      	ldr	r3, [r7, #0]
 8018d86:	687a      	ldr	r2, [r7, #4]
 8018d88:	6939      	ldr	r1, [r7, #16]
 8018d8a:	68f8      	ldr	r0, [r7, #12]
 8018d8c:	f7ff ffad 	bl	8018cea <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>
 8018d90:	4603      	mov	r3, r0
 8018d92:	2b00      	cmp	r3, #0
 8018d94:	d002      	beq.n	8018d9c <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x6c>
                               last_time_used)) {
      result = candidate_next_entry;
 8018d96:	693b      	ldr	r3, [r7, #16]
 8018d98:	617b      	str	r3, [r7, #20]
      break;
 8018d9a:	e011      	b.n	8018dc0 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x90>
    }
    if (candidate_next_entry->next_entry_index == -1) {
 8018d9c:	693b      	ldr	r3, [r7, #16]
 8018d9e:	689b      	ldr	r3, [r3, #8]
 8018da0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018da4:	d00b      	beq.n	8018dbe <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x8e>
      break;
    }
    candidate_next_entry =
        &buffers_sorted_by_offset_[candidate_next_entry->next_entry_index];
 8018da6:	68fb      	ldr	r3, [r7, #12]
 8018da8:	699a      	ldr	r2, [r3, #24]
 8018daa:	693b      	ldr	r3, [r7, #16]
 8018dac:	689b      	ldr	r3, [r3, #8]
 8018dae:	4619      	mov	r1, r3
 8018db0:	460b      	mov	r3, r1
 8018db2:	005b      	lsls	r3, r3, #1
 8018db4:	440b      	add	r3, r1
 8018db6:	009b      	lsls	r3, r3, #2
    candidate_next_entry =
 8018db8:	4413      	add	r3, r2
 8018dba:	613b      	str	r3, [r7, #16]
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
 8018dbc:	e7e2      	b.n	8018d84 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x54>
      break;
 8018dbe:	bf00      	nop
  } while (true);
  return result;
 8018dc0:	697b      	ldr	r3, [r7, #20]
}
 8018dc2:	4618      	mov	r0, r3
 8018dc4:	3718      	adds	r7, #24
 8018dc6:	46bd      	mov	sp, r7
 8018dc8:	bd80      	pop	{r7, pc}

08018dca <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>:

void GreedyMemoryPlanner::CalculateOffsetsIfNeeded() {
 8018dca:	b580      	push	{r7, lr}
 8018dcc:	b098      	sub	sp, #96	; 0x60
 8018dce:	af00      	add	r7, sp, #0
 8018dd0:	6078      	str	r0, [r7, #4]
  if (!need_to_calculate_offsets_ || (buffer_count_ == 0)) {
 8018dd2:	687b      	ldr	r3, [r7, #4]
 8018dd4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018dd8:	f083 0301 	eor.w	r3, r3, #1
 8018ddc:	b2db      	uxtb	r3, r3
 8018dde:	2b00      	cmp	r3, #0
 8018de0:	f040 815f 	bne.w	80190a2 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d8>
 8018de4:	687b      	ldr	r3, [r7, #4]
 8018de6:	689b      	ldr	r3, [r3, #8]
 8018de8:	2b00      	cmp	r3, #0
 8018dea:	f000 815a 	beq.w	80190a2 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d8>
    return;
  }
  need_to_calculate_offsets_ = false;
 8018dee:	687b      	ldr	r3, [r7, #4]
 8018df0:	2200      	movs	r2, #0
 8018df2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  // This helps find a more compact layout. Intuitively, you can think
  // about putting the large buffers in place first, and then the
  // smaller buffers can fit in the gaps, rather than fragmenting the
  // gaps with small buffers at the beginning. Add offline planned offsets
  // first in the list, since they have a predetermined offset.
  int idx_from_tail = buffer_count_;
 8018df6:	687b      	ldr	r3, [r7, #4]
 8018df8:	689b      	ldr	r3, [r3, #8]
 8018dfa:	65fb      	str	r3, [r7, #92]	; 0x5c
  int idx_from_head = 0;
 8018dfc:	2300      	movs	r3, #0
 8018dfe:	65bb      	str	r3, [r7, #88]	; 0x58
  for (int i = 0; i < buffer_count_; ++i) {
 8018e00:	2300      	movs	r3, #0
 8018e02:	657b      	str	r3, [r7, #84]	; 0x54
 8018e04:	687b      	ldr	r3, [r7, #4]
 8018e06:	689b      	ldr	r3, [r3, #8]
 8018e08:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8018e0a:	429a      	cmp	r2, r3
 8018e0c:	da4d      	bge.n	8018eaa <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xe0>
    if (requirements_[i].offline_offset == kOnlinePlannedBuffer) {
 8018e0e:	687b      	ldr	r3, [r7, #4]
 8018e10:	68da      	ldr	r2, [r3, #12]
 8018e12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018e14:	011b      	lsls	r3, r3, #4
 8018e16:	4413      	add	r3, r2
 8018e18:	685b      	ldr	r3, [r3, #4]
 8018e1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018e1e:	d11e      	bne.n	8018e5e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x94>
      idx_from_tail--;
 8018e20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8018e22:	3b01      	subs	r3, #1
 8018e24:	65fb      	str	r3, [r7, #92]	; 0x5c
      buffer_sizes_sorted_[idx_from_tail] = requirements_[i].size;
 8018e26:	687b      	ldr	r3, [r7, #4]
 8018e28:	68da      	ldr	r2, [r3, #12]
 8018e2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018e2c:	011b      	lsls	r3, r3, #4
 8018e2e:	441a      	add	r2, r3
 8018e30:	687b      	ldr	r3, [r7, #4]
 8018e32:	6919      	ldr	r1, [r3, #16]
 8018e34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8018e36:	009b      	lsls	r3, r3, #2
 8018e38:	440b      	add	r3, r1
 8018e3a:	6812      	ldr	r2, [r2, #0]
 8018e3c:	601a      	str	r2, [r3, #0]
      buffer_ids_sorted_[idx_from_tail] = i;
 8018e3e:	687b      	ldr	r3, [r7, #4]
 8018e40:	695a      	ldr	r2, [r3, #20]
 8018e42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8018e44:	009b      	lsls	r3, r3, #2
 8018e46:	4413      	add	r3, r2
 8018e48:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8018e4a:	601a      	str	r2, [r3, #0]
      buffer_offsets_[i] = -1;
 8018e4c:	687b      	ldr	r3, [r7, #4]
 8018e4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018e50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018e52:	009b      	lsls	r3, r3, #2
 8018e54:	4413      	add	r3, r2
 8018e56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018e5a:	601a      	str	r2, [r3, #0]
 8018e5c:	e021      	b.n	8018ea2 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xd8>
    } else {
      buffer_sizes_sorted_[idx_from_head] = requirements_[i].size;
 8018e5e:	687b      	ldr	r3, [r7, #4]
 8018e60:	68da      	ldr	r2, [r3, #12]
 8018e62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018e64:	011b      	lsls	r3, r3, #4
 8018e66:	441a      	add	r2, r3
 8018e68:	687b      	ldr	r3, [r7, #4]
 8018e6a:	6919      	ldr	r1, [r3, #16]
 8018e6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8018e6e:	009b      	lsls	r3, r3, #2
 8018e70:	440b      	add	r3, r1
 8018e72:	6812      	ldr	r2, [r2, #0]
 8018e74:	601a      	str	r2, [r3, #0]
      buffer_ids_sorted_[idx_from_head] = i;
 8018e76:	687b      	ldr	r3, [r7, #4]
 8018e78:	695a      	ldr	r2, [r3, #20]
 8018e7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8018e7c:	009b      	lsls	r3, r3, #2
 8018e7e:	4413      	add	r3, r2
 8018e80:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8018e82:	601a      	str	r2, [r3, #0]
      buffer_offsets_[i] = requirements_[i].offline_offset;
 8018e84:	687b      	ldr	r3, [r7, #4]
 8018e86:	68da      	ldr	r2, [r3, #12]
 8018e88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018e8a:	011b      	lsls	r3, r3, #4
 8018e8c:	441a      	add	r2, r3
 8018e8e:	687b      	ldr	r3, [r7, #4]
 8018e90:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8018e92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018e94:	009b      	lsls	r3, r3, #2
 8018e96:	440b      	add	r3, r1
 8018e98:	6852      	ldr	r2, [r2, #4]
 8018e9a:	601a      	str	r2, [r3, #0]
      idx_from_head++;
 8018e9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8018e9e:	3301      	adds	r3, #1
 8018ea0:	65bb      	str	r3, [r7, #88]	; 0x58
  for (int i = 0; i < buffer_count_; ++i) {
 8018ea2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018ea4:	3301      	adds	r3, #1
 8018ea6:	657b      	str	r3, [r7, #84]	; 0x54
 8018ea8:	e7ac      	b.n	8018e04 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x3a>
    }
  }

  // This sorting algorithm is naive, and may end up taking a very long time
  // with hundreds of buffers. Do not sort the offline planned offsets.
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
 8018eaa:	687b      	ldr	r3, [r7, #4]
 8018eac:	691a      	ldr	r2, [r3, #16]
 8018eae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8018eb0:	009b      	lsls	r3, r3, #2
 8018eb2:	18d0      	adds	r0, r2, r3
                     &buffer_ids_sorted_[idx_from_head],
 8018eb4:	687b      	ldr	r3, [r7, #4]
 8018eb6:	695a      	ldr	r2, [r3, #20]
 8018eb8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8018eba:	009b      	lsls	r3, r3, #2
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
 8018ebc:	18d1      	adds	r1, r2, r3
                     buffer_count_ - idx_from_head);
 8018ebe:	687b      	ldr	r3, [r7, #4]
 8018ec0:	689a      	ldr	r2, [r3, #8]
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
 8018ec2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8018ec4:	1ad3      	subs	r3, r2, r3
 8018ec6:	461a      	mov	r2, r3
 8018ec8:	f7ff fdd0 	bl	8018a6c <_ZN6tflite18ReverseSortInPlaceEPiS0_i>
  // buffer_ids_sorted_.
  //   - If there are no offline planned offsets, the largest buffer will be
  //     first, and the buffers will be handled in size order.
  //   - If offline offsets are present, these will be handled first in order
  //     for the greedy algorithm to utilized gaps in the offline plan.
  first_entry_index_ = 0;
 8018ecc:	687b      	ldr	r3, [r7, #4]
 8018ece:	2200      	movs	r2, #0
 8018ed0:	621a      	str	r2, [r3, #32]
  next_free_entry_ = 1;
 8018ed2:	687b      	ldr	r3, [r7, #4]
 8018ed4:	2201      	movs	r2, #1
 8018ed6:	61da      	str	r2, [r3, #28]
  ListEntry* first_entry = &buffers_sorted_by_offset_[first_entry_index_];
 8018ed8:	687b      	ldr	r3, [r7, #4]
 8018eda:	699a      	ldr	r2, [r3, #24]
 8018edc:	687b      	ldr	r3, [r7, #4]
 8018ede:	6a1b      	ldr	r3, [r3, #32]
 8018ee0:	4619      	mov	r1, r3
 8018ee2:	460b      	mov	r3, r1
 8018ee4:	005b      	lsls	r3, r3, #1
 8018ee6:	440b      	add	r3, r1
 8018ee8:	009b      	lsls	r3, r3, #2
 8018eea:	4413      	add	r3, r2
 8018eec:	653b      	str	r3, [r7, #80]	; 0x50
  first_entry->next_entry_index = -1;  // to mark the entry as end of list
 8018eee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018ef0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018ef4:	609a      	str	r2, [r3, #8]
  int buffer_id = buffer_ids_sorted_[0];
 8018ef6:	687b      	ldr	r3, [r7, #4]
 8018ef8:	695b      	ldr	r3, [r3, #20]
 8018efa:	681b      	ldr	r3, [r3, #0]
 8018efc:	63fb      	str	r3, [r7, #60]	; 0x3c
  first_entry->requirements_index = buffer_id;
 8018efe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018f00:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8018f02:	605a      	str	r2, [r3, #4]
  if (requirements_[buffer_id].offline_offset == kOnlinePlannedBuffer) {
 8018f04:	687b      	ldr	r3, [r7, #4]
 8018f06:	68da      	ldr	r2, [r3, #12]
 8018f08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018f0a:	011b      	lsls	r3, r3, #4
 8018f0c:	4413      	add	r3, r2
 8018f0e:	685b      	ldr	r3, [r3, #4]
 8018f10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018f14:	d106      	bne.n	8018f24 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x15a>
    buffer_offsets_[buffer_id] = 0;
 8018f16:	687b      	ldr	r3, [r7, #4]
 8018f18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018f1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018f1c:	009b      	lsls	r3, r3, #2
 8018f1e:	4413      	add	r3, r2
 8018f20:	2200      	movs	r2, #0
 8018f22:	601a      	str	r2, [r3, #0]
  }
  first_entry->offset = buffer_offsets_[buffer_id];
 8018f24:	687b      	ldr	r3, [r7, #4]
 8018f26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018f28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018f2a:	009b      	lsls	r3, r3, #2
 8018f2c:	4413      	add	r3, r2
 8018f2e:	681a      	ldr	r2, [r3, #0]
 8018f30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018f32:	601a      	str	r2, [r3, #0]

  // Work through the rest of the buffers to find a good gap to place each one.
  for (int i = 1; i < buffer_count_; ++i) {
 8018f34:	2301      	movs	r3, #1
 8018f36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8018f38:	687b      	ldr	r3, [r7, #4]
 8018f3a:	689b      	ldr	r3, [r3, #8]
 8018f3c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8018f3e:	429a      	cmp	r2, r3
 8018f40:	f280 80b0 	bge.w	80190a4 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2da>
    // The id is the order the buffer was originally added by the client.
    buffer_id = buffer_ids_sorted_[i];
 8018f44:	687b      	ldr	r3, [r7, #4]
 8018f46:	695a      	ldr	r2, [r3, #20]
 8018f48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018f4a:	009b      	lsls	r3, r3, #2
 8018f4c:	4413      	add	r3, r2
 8018f4e:	681b      	ldr	r3, [r3, #0]
 8018f50:	63fb      	str	r3, [r7, #60]	; 0x3c
    // Look at what size and time range the buffer needs to be active.
    BufferRequirements* wanted_requirements = &requirements_[buffer_id];
 8018f52:	687b      	ldr	r3, [r7, #4]
 8018f54:	68da      	ldr	r2, [r3, #12]
 8018f56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018f58:	011b      	lsls	r3, r3, #4
 8018f5a:	4413      	add	r3, r2
 8018f5c:	63bb      	str	r3, [r7, #56]	; 0x38
    const int wanted_size = wanted_requirements->size;
 8018f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018f60:	681b      	ldr	r3, [r3, #0]
 8018f62:	637b      	str	r3, [r7, #52]	; 0x34
    const int wanted_first_time_used = wanted_requirements->first_time_used;
 8018f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018f66:	689b      	ldr	r3, [r3, #8]
 8018f68:	633b      	str	r3, [r7, #48]	; 0x30
    const int wanted_last_time_used = wanted_requirements->last_time_used;
 8018f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018f6c:	68db      	ldr	r3, [r3, #12]
 8018f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    // buffers are stored in the order of their starting position in the arena
    // so that it's easy to find the next buffer in memory, and so the gap.
    // The candidate_entry variable holds the buffer that we're considering
    // placing the current buffer after.

    int candidate_offset = 0;
 8018f70:	2300      	movs	r3, #0
 8018f72:	64bb      	str	r3, [r7, #72]	; 0x48
    // Loop through the offset-ordered list of buffers, looking for gaps.
    if (wanted_requirements->offline_offset == kOnlinePlannedBuffer) {
 8018f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018f76:	685b      	ldr	r3, [r3, #4]
 8018f78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018f7c:	d12d      	bne.n	8018fda <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x210>
      ListEntry* prior_entry = nullptr;
 8018f7e:	2300      	movs	r3, #0
 8018f80:	647b      	str	r3, [r7, #68]	; 0x44
      while (true) {
        // Find out what the next active buffer is.
        ListEntry* next_entry = NextSimultaneouslyActiveBuffer(
 8018f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018f84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018f86:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8018f88:	6878      	ldr	r0, [r7, #4]
 8018f8a:	f7ff fed1 	bl	8018d30 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>
 8018f8e:	62b8      	str	r0, [r7, #40]	; 0x28
            prior_entry, wanted_first_time_used, wanted_last_time_used);

        if (prior_entry) {
 8018f90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018f92:	2b00      	cmp	r3, #0
 8018f94:	d012      	beq.n	8018fbc <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1f2>
          BufferRequirements* candidate_requirements =
              &requirements_[prior_entry->requirements_index];
 8018f96:	687b      	ldr	r3, [r7, #4]
 8018f98:	68da      	ldr	r2, [r3, #12]
 8018f9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018f9c:	685b      	ldr	r3, [r3, #4]
 8018f9e:	011b      	lsls	r3, r3, #4
          BufferRequirements* candidate_requirements =
 8018fa0:	4413      	add	r3, r2
 8018fa2:	627b      	str	r3, [r7, #36]	; 0x24
          const int prior_entry_offset =
              prior_entry->offset + candidate_requirements->size;
 8018fa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018fa6:	681a      	ldr	r2, [r3, #0]
 8018fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018faa:	681b      	ldr	r3, [r3, #0]
          const int prior_entry_offset =
 8018fac:	4413      	add	r3, r2
 8018fae:	623b      	str	r3, [r7, #32]
          if (prior_entry_offset > candidate_offset) {
 8018fb0:	6a3a      	ldr	r2, [r7, #32]
 8018fb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018fb4:	429a      	cmp	r2, r3
 8018fb6:	dd01      	ble.n	8018fbc <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1f2>
            candidate_offset = prior_entry_offset;
 8018fb8:	6a3b      	ldr	r3, [r7, #32]
 8018fba:	64bb      	str	r3, [r7, #72]	; 0x48
          }
        }
        if (next_entry == nullptr) {
 8018fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018fbe:	2b00      	cmp	r3, #0
 8018fc0:	d00f      	beq.n	8018fe2 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x218>
          // We're at the end of the list, so we can always append the buffer
          // here.
          break;
        }
        // Find out how much space there is between us and the next buffer.
        const int gap = next_entry->offset - candidate_offset;
 8018fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018fc4:	681a      	ldr	r2, [r3, #0]
 8018fc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018fc8:	1ad3      	subs	r3, r2, r3
 8018fca:	61fb      	str	r3, [r7, #28]
        if (gap >= wanted_size) {
 8018fcc:	69fa      	ldr	r2, [r7, #28]
 8018fce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018fd0:	429a      	cmp	r2, r3
 8018fd2:	da08      	bge.n	8018fe6 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x21c>
          // This entry has a big enough gap between it and the next, so
          // use it!
          break;
        }
        // The gap wasn't big enough, so move on to another candidate.
        prior_entry = next_entry;
 8018fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018fd6:	647b      	str	r3, [r7, #68]	; 0x44
      }
 8018fd8:	e7d3      	b.n	8018f82 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1b8>
    } else {
      // Offline planned offset are to be considered constant
      candidate_offset = wanted_requirements->offline_offset;
 8018fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018fdc:	685b      	ldr	r3, [r3, #4]
 8018fde:	64bb      	str	r3, [r7, #72]	; 0x48
 8018fe0:	e002      	b.n	8018fe8 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x21e>
          break;
 8018fe2:	bf00      	nop
 8018fe4:	e000      	b.n	8018fe8 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x21e>
          break;
 8018fe6:	bf00      	nop
    }
    // At this point, we've either found a gap (possibly at the end of the
    // list) and want to place the buffer there, or there are no other active
    // buffers in this time range and so we can put it at offset zero.
    // Record the buffer's offset in our plan.
    buffer_offsets_[buffer_id] = candidate_offset;
 8018fe8:	687b      	ldr	r3, [r7, #4]
 8018fea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018fec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018fee:	009b      	lsls	r3, r3, #2
 8018ff0:	4413      	add	r3, r2
 8018ff2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8018ff4:	601a      	str	r2, [r3, #0]
    // Add the newly-placed buffer to our offset-ordered list, so that
    // subsequent passes can fit in their buffers around it.
    ListEntry* new_entry = &buffers_sorted_by_offset_[next_free_entry_];
 8018ff6:	687b      	ldr	r3, [r7, #4]
 8018ff8:	699a      	ldr	r2, [r3, #24]
 8018ffa:	687b      	ldr	r3, [r7, #4]
 8018ffc:	69db      	ldr	r3, [r3, #28]
 8018ffe:	4619      	mov	r1, r3
 8019000:	460b      	mov	r3, r1
 8019002:	005b      	lsls	r3, r3, #1
 8019004:	440b      	add	r3, r1
 8019006:	009b      	lsls	r3, r3, #2
 8019008:	4413      	add	r3, r2
 801900a:	61bb      	str	r3, [r7, #24]
    new_entry->offset = candidate_offset;
 801900c:	69bb      	ldr	r3, [r7, #24]
 801900e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8019010:	601a      	str	r2, [r3, #0]
    new_entry->requirements_index = buffer_id;
 8019012:	69bb      	ldr	r3, [r7, #24]
 8019014:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8019016:	605a      	str	r2, [r3, #4]
    const int new_entry_index = next_free_entry_;
 8019018:	687b      	ldr	r3, [r7, #4]
 801901a:	69db      	ldr	r3, [r3, #28]
 801901c:	617b      	str	r3, [r7, #20]
    ++next_free_entry_;
 801901e:	687b      	ldr	r3, [r7, #4]
 8019020:	69db      	ldr	r3, [r3, #28]
 8019022:	1c5a      	adds	r2, r3, #1
 8019024:	687b      	ldr	r3, [r7, #4]
 8019026:	61da      	str	r2, [r3, #28]

    if (first_entry->offset > candidate_offset) {
 8019028:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801902a:	681b      	ldr	r3, [r3, #0]
 801902c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801902e:	429a      	cmp	r2, r3
 8019030:	da09      	bge.n	8019046 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x27c>
      // The new entry offset is smaller than the first entry offset =>
      // replace the first entry
      first_entry = new_entry;
 8019032:	69bb      	ldr	r3, [r7, #24]
 8019034:	653b      	str	r3, [r7, #80]	; 0x50
      first_entry->next_entry_index = first_entry_index_;
 8019036:	687b      	ldr	r3, [r7, #4]
 8019038:	6a1a      	ldr	r2, [r3, #32]
 801903a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801903c:	609a      	str	r2, [r3, #8]
      first_entry_index_ = new_entry_index;
 801903e:	687b      	ldr	r3, [r7, #4]
 8019040:	697a      	ldr	r2, [r7, #20]
 8019042:	621a      	str	r2, [r3, #32]
 8019044:	e029      	b.n	801909a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d0>
    } else {
      ListEntry* current_entry = first_entry;
 8019046:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019048:	643b      	str	r3, [r7, #64]	; 0x40
      // Make sure that we insert the buffer at the correct place in the
      // buffer-offset-ordered list
      while (true) {
        const int next_entry_index = current_entry->next_entry_index;
 801904a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801904c:	689b      	ldr	r3, [r3, #8]
 801904e:	613b      	str	r3, [r7, #16]
        if (next_entry_index == -1) {
 8019050:	693b      	ldr	r3, [r7, #16]
 8019052:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8019056:	d107      	bne.n	8019068 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x29e>
          // We're at the end of the list, so just add the new entry here.
          current_entry->next_entry_index = new_entry_index;
 8019058:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801905a:	697a      	ldr	r2, [r7, #20]
 801905c:	609a      	str	r2, [r3, #8]
          new_entry->next_entry_index = -1;
 801905e:	69bb      	ldr	r3, [r7, #24]
 8019060:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019064:	609a      	str	r2, [r3, #8]
          break;
 8019066:	e018      	b.n	801909a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d0>
        }
        // not at the end of the list -> take a look at next entry
        ListEntry* next_entry = &buffers_sorted_by_offset_[next_entry_index];
 8019068:	687b      	ldr	r3, [r7, #4]
 801906a:	6999      	ldr	r1, [r3, #24]
 801906c:	693a      	ldr	r2, [r7, #16]
 801906e:	4613      	mov	r3, r2
 8019070:	005b      	lsls	r3, r3, #1
 8019072:	4413      	add	r3, r2
 8019074:	009b      	lsls	r3, r3, #2
 8019076:	440b      	add	r3, r1
 8019078:	60fb      	str	r3, [r7, #12]
        if (next_entry->offset > candidate_offset) {
 801907a:	68fb      	ldr	r3, [r7, #12]
 801907c:	681b      	ldr	r3, [r3, #0]
 801907e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8019080:	429a      	cmp	r2, r3
 8019082:	da07      	bge.n	8019094 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2ca>
          // We're at the right spot to do an insertion and retain the sorting
          // order, so place the new entry here.
          new_entry->next_entry_index = current_entry->next_entry_index;
 8019084:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019086:	689a      	ldr	r2, [r3, #8]
 8019088:	69bb      	ldr	r3, [r7, #24]
 801908a:	609a      	str	r2, [r3, #8]
          current_entry->next_entry_index = new_entry_index;
 801908c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801908e:	697a      	ldr	r2, [r7, #20]
 8019090:	609a      	str	r2, [r3, #8]
          break;
 8019092:	e002      	b.n	801909a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d0>
        }
        current_entry = next_entry;
 8019094:	68fb      	ldr	r3, [r7, #12]
 8019096:	643b      	str	r3, [r7, #64]	; 0x40
      }
 8019098:	e7d7      	b.n	801904a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x280>
  for (int i = 1; i < buffer_count_; ++i) {
 801909a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801909c:	3301      	adds	r3, #1
 801909e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80190a0:	e74a      	b.n	8018f38 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x16e>
    return;
 80190a2:	bf00      	nop
    }
  }
}
 80190a4:	3760      	adds	r7, #96	; 0x60
 80190a6:	46bd      	mov	sp, r7
 80190a8:	bd80      	pop	{r7, pc}

080190aa <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>:

size_t GreedyMemoryPlanner::GetMaximumMemorySize() {
 80190aa:	b580      	push	{r7, lr}
 80190ac:	b086      	sub	sp, #24
 80190ae:	af00      	add	r7, sp, #0
 80190b0:	6078      	str	r0, [r7, #4]
  CalculateOffsetsIfNeeded();
 80190b2:	6878      	ldr	r0, [r7, #4]
 80190b4:	f7ff fe89 	bl	8018dca <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if (buffer_count_ == 0) {
 80190b8:	687b      	ldr	r3, [r7, #4]
 80190ba:	689b      	ldr	r3, [r3, #8]
 80190bc:	2b00      	cmp	r3, #0
 80190be:	d101      	bne.n	80190c4 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x1a>
    return 0;
 80190c0:	2300      	movs	r3, #0
 80190c2:	e035      	b.n	8019130 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x86>
  }
  ListEntry* entry = &buffers_sorted_by_offset_[first_entry_index_];
 80190c4:	687b      	ldr	r3, [r7, #4]
 80190c6:	699a      	ldr	r2, [r3, #24]
 80190c8:	687b      	ldr	r3, [r7, #4]
 80190ca:	6a1b      	ldr	r3, [r3, #32]
 80190cc:	4619      	mov	r1, r3
 80190ce:	460b      	mov	r3, r1
 80190d0:	005b      	lsls	r3, r3, #1
 80190d2:	440b      	add	r3, r1
 80190d4:	009b      	lsls	r3, r3, #2
 80190d6:	4413      	add	r3, r2
 80190d8:	617b      	str	r3, [r7, #20]
  size_t max_size = 0;
 80190da:	2300      	movs	r3, #0
 80190dc:	613b      	str	r3, [r7, #16]
  while (entry) {
 80190de:	697b      	ldr	r3, [r7, #20]
 80190e0:	2b00      	cmp	r3, #0
 80190e2:	d024      	beq.n	801912e <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x84>
    BufferRequirements* requirements =
        &requirements_[entry->requirements_index];
 80190e4:	687b      	ldr	r3, [r7, #4]
 80190e6:	68da      	ldr	r2, [r3, #12]
 80190e8:	697b      	ldr	r3, [r7, #20]
 80190ea:	685b      	ldr	r3, [r3, #4]
 80190ec:	011b      	lsls	r3, r3, #4
    BufferRequirements* requirements =
 80190ee:	4413      	add	r3, r2
 80190f0:	60fb      	str	r3, [r7, #12]
    const size_t current_size = entry->offset + requirements->size;
 80190f2:	697b      	ldr	r3, [r7, #20]
 80190f4:	681a      	ldr	r2, [r3, #0]
 80190f6:	68fb      	ldr	r3, [r7, #12]
 80190f8:	681b      	ldr	r3, [r3, #0]
 80190fa:	4413      	add	r3, r2
 80190fc:	60bb      	str	r3, [r7, #8]
    if (current_size > max_size) {
 80190fe:	68ba      	ldr	r2, [r7, #8]
 8019100:	693b      	ldr	r3, [r7, #16]
 8019102:	429a      	cmp	r2, r3
 8019104:	d901      	bls.n	801910a <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x60>
      max_size = current_size;
 8019106:	68bb      	ldr	r3, [r7, #8]
 8019108:	613b      	str	r3, [r7, #16]
    }
    if (entry->next_entry_index == -1) {
 801910a:	697b      	ldr	r3, [r7, #20]
 801910c:	689b      	ldr	r3, [r3, #8]
 801910e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8019112:	d00b      	beq.n	801912c <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x82>
      break;
    }
    entry = &buffers_sorted_by_offset_[entry->next_entry_index];
 8019114:	687b      	ldr	r3, [r7, #4]
 8019116:	699a      	ldr	r2, [r3, #24]
 8019118:	697b      	ldr	r3, [r7, #20]
 801911a:	689b      	ldr	r3, [r3, #8]
 801911c:	4619      	mov	r1, r3
 801911e:	460b      	mov	r3, r1
 8019120:	005b      	lsls	r3, r3, #1
 8019122:	440b      	add	r3, r1
 8019124:	009b      	lsls	r3, r3, #2
 8019126:	4413      	add	r3, r2
 8019128:	617b      	str	r3, [r7, #20]
  while (entry) {
 801912a:	e7d8      	b.n	80190de <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x34>
      break;
 801912c:	bf00      	nop
  }
  return max_size;
 801912e:	693b      	ldr	r3, [r7, #16]
}
 8019130:	4618      	mov	r0, r3
 8019132:	3718      	adds	r7, #24
 8019134:	46bd      	mov	sp, r7
 8019136:	bd80      	pop	{r7, pc}

08019138 <_ZN6tflite19GreedyMemoryPlanner14GetBufferCountEv>:
    MicroPrintf("%s%d: %s (%dk)", t < 10 ? " " : "", t, (const char*)line,
                (memory_use + 1023) / 1024);
  }
}

int GreedyMemoryPlanner::GetBufferCount() { return buffer_count_; }
 8019138:	b480      	push	{r7}
 801913a:	b083      	sub	sp, #12
 801913c:	af00      	add	r7, sp, #0
 801913e:	6078      	str	r0, [r7, #4]
 8019140:	687b      	ldr	r3, [r7, #4]
 8019142:	689b      	ldr	r3, [r3, #8]
 8019144:	4618      	mov	r0, r3
 8019146:	370c      	adds	r7, #12
 8019148:	46bd      	mov	sp, r7
 801914a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801914e:	4770      	bx	lr

08019150 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi>:

TfLiteStatus GreedyMemoryPlanner::GetOffsetForBuffer(
    tflite::ErrorReporter* error_reporter, int buffer_index, int* offset) {
 8019150:	b580      	push	{r7, lr}
 8019152:	b084      	sub	sp, #16
 8019154:	af00      	add	r7, sp, #0
 8019156:	60f8      	str	r0, [r7, #12]
 8019158:	60b9      	str	r1, [r7, #8]
 801915a:	607a      	str	r2, [r7, #4]
 801915c:	603b      	str	r3, [r7, #0]
  CalculateOffsetsIfNeeded();
 801915e:	68f8      	ldr	r0, [r7, #12]
 8019160:	f7ff fe33 	bl	8018dca <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if ((buffer_index < 0) || (buffer_index >= buffer_count_)) {
 8019164:	687b      	ldr	r3, [r7, #4]
 8019166:	2b00      	cmp	r3, #0
 8019168:	db04      	blt.n	8019174 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x24>
 801916a:	68fb      	ldr	r3, [r7, #12]
 801916c:	689b      	ldr	r3, [r3, #8]
 801916e:	687a      	ldr	r2, [r7, #4]
 8019170:	429a      	cmp	r2, r3
 8019172:	db08      	blt.n	8019186 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x36>
    TF_LITE_REPORT_ERROR(error_reporter,
 8019174:	68fb      	ldr	r3, [r7, #12]
 8019176:	689b      	ldr	r3, [r3, #8]
 8019178:	687a      	ldr	r2, [r7, #4]
 801917a:	4909      	ldr	r1, [pc, #36]	; (80191a0 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x50>)
 801917c:	68b8      	ldr	r0, [r7, #8]
 801917e:	f7ef fae3 	bl	8008748 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "buffer index %d is outside range 0 to %d",
                         buffer_index, buffer_count_);
    return kTfLiteError;
 8019182:	2301      	movs	r3, #1
 8019184:	e008      	b.n	8019198 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x48>
  }
  *offset = buffer_offsets_[buffer_index];
 8019186:	68fb      	ldr	r3, [r7, #12]
 8019188:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801918a:	687b      	ldr	r3, [r7, #4]
 801918c:	009b      	lsls	r3, r3, #2
 801918e:	4413      	add	r3, r2
 8019190:	681a      	ldr	r2, [r3, #0]
 8019192:	683b      	ldr	r3, [r7, #0]
 8019194:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8019196:	2300      	movs	r3, #0
}
 8019198:	4618      	mov	r0, r3
 801919a:	3710      	adds	r7, #16
 801919c:	46bd      	mov	sp, r7
 801919e:	bd80      	pop	{r7, pc}
 80191a0:	0802c244 	.word	0x0802c244

080191a4 <arm_convolve_1_x_n_s8>:
                                 const q7_t *filter_data,
                                 const cmsis_nn_dims *bias_dims,
                                 const int32_t *bias_data,
                                 const cmsis_nn_dims *output_dims,
                                 q7_t *output_data)
{
 80191a4:	b580      	push	{r7, lr}
 80191a6:	b08e      	sub	sp, #56	; 0x38
 80191a8:	af08      	add	r7, sp, #32
 80191aa:	60f8      	str	r0, [r7, #12]
 80191ac:	60b9      	str	r1, [r7, #8]
 80191ae:	607a      	str	r2, [r7, #4]
 80191b0:	603b      	str	r3, [r7, #0]
    (void)bias_dims;
    arm_status status = ARM_MATH_SUCCESS;
 80191b2:	2300      	movs	r3, #0
 80191b4:	75fb      	strb	r3, [r7, #23]
    if (output_dims->w % 4 != 0)
 80191b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80191b8:	689b      	ldr	r3, [r3, #8]
 80191ba:	f003 0303 	and.w	r3, r3, #3
 80191be:	2b00      	cmp	r3, #0
 80191c0:	d002      	beq.n	80191c8 <arm_convolve_1_x_n_s8+0x24>
    {
        status = ARM_MATH_SIZE_MISMATCH;
 80191c2:	23fd      	movs	r3, #253	; 0xfd
 80191c4:	75fb      	strb	r3, [r7, #23]
        goto out;
 80191c6:	e015      	b.n	80191f4 <arm_convolve_1_x_n_s8+0x50>
        }
        output_data += (3 * output_ch);
    }

#else
    status = arm_convolve_s8(ctx,
 80191c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80191ca:	9306      	str	r3, [sp, #24]
 80191cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80191ce:	9305      	str	r3, [sp, #20]
 80191d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80191d2:	9304      	str	r3, [sp, #16]
 80191d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80191d6:	9303      	str	r3, [sp, #12]
 80191d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80191da:	9302      	str	r3, [sp, #8]
 80191dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80191de:	9301      	str	r3, [sp, #4]
 80191e0:	6a3b      	ldr	r3, [r7, #32]
 80191e2:	9300      	str	r3, [sp, #0]
 80191e4:	683b      	ldr	r3, [r7, #0]
 80191e6:	687a      	ldr	r2, [r7, #4]
 80191e8:	68b9      	ldr	r1, [r7, #8]
 80191ea:	68f8      	ldr	r0, [r7, #12]
 80191ec:	f000 f87d 	bl	80192ea <arm_convolve_s8>
 80191f0:	4603      	mov	r3, r0
 80191f2:	75fb      	strb	r3, [r7, #23]
                             output_data);
#endif

out:
    /* Return to application */
    return status;
 80191f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80191f8:	4618      	mov	r0, r3
 80191fa:	3718      	adds	r7, #24
 80191fc:	46bd      	mov	sp, r7
 80191fe:	bd80      	pop	{r7, pc}

08019200 <arm_convolve_1_x_n_s8_get_buffer_size>:

int32_t arm_convolve_1_x_n_s8_get_buffer_size(const cmsis_nn_dims *input_dims, const cmsis_nn_dims *filter_dims)
{
 8019200:	b480      	push	{r7}
 8019202:	b083      	sub	sp, #12
 8019204:	af00      	add	r7, sp, #0
 8019206:	6078      	str	r0, [r7, #4]
 8019208:	6039      	str	r1, [r7, #0]
#if defined(ARM_MATH_DSP) && !defined(ARM_MATH_MVEI)
    return (2 * input_dims->c * filter_dims->w * filter_dims->h) * sizeof(int16_t);
 801920a:	687b      	ldr	r3, [r7, #4]
 801920c:	68db      	ldr	r3, [r3, #12]
 801920e:	683a      	ldr	r2, [r7, #0]
 8019210:	6892      	ldr	r2, [r2, #8]
 8019212:	fb02 f303 	mul.w	r3, r2, r3
 8019216:	683a      	ldr	r2, [r7, #0]
 8019218:	6852      	ldr	r2, [r2, #4]
 801921a:	fb02 f303 	mul.w	r3, r2, r3
 801921e:	009b      	lsls	r3, r3, #2
#else
    (void)input_dims;
    (void)filter_dims;
    return 0;
#endif
}
 8019220:	4618      	mov	r0, r3
 8019222:	370c      	adds	r7, #12
 8019224:	46bd      	mov	sp, r7
 8019226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801922a:	4770      	bx	lr

0801922c <arm_convolve_1x1_s8_fast>:
                                    const q7_t *filter_data,
                                    const cmsis_nn_dims *bias_dims,
                                    const int32_t *bias_data,
                                    const cmsis_nn_dims *output_dims,
                                    q7_t *output_data)
{
 801922c:	b5b0      	push	{r4, r5, r7, lr}
 801922e:	b092      	sub	sp, #72	; 0x48
 8019230:	af0a      	add	r7, sp, #40	; 0x28
 8019232:	60f8      	str	r0, [r7, #12]
 8019234:	60b9      	str	r1, [r7, #8]
 8019236:	607a      	str	r2, [r7, #4]
 8019238:	603b      	str	r3, [r7, #0]
    if (input_dims->c % 4 != 0 || conv_params->padding.w != 0 || conv_params->padding.h != 0 ||
 801923a:	683b      	ldr	r3, [r7, #0]
 801923c:	68db      	ldr	r3, [r3, #12]
 801923e:	f003 0303 	and.w	r3, r3, #3
 8019242:	2b00      	cmp	r3, #0
 8019244:	d10f      	bne.n	8019266 <arm_convolve_1x1_s8_fast+0x3a>
 8019246:	68bb      	ldr	r3, [r7, #8]
 8019248:	691b      	ldr	r3, [r3, #16]
 801924a:	2b00      	cmp	r3, #0
 801924c:	d10b      	bne.n	8019266 <arm_convolve_1x1_s8_fast+0x3a>
 801924e:	68bb      	ldr	r3, [r7, #8]
 8019250:	695b      	ldr	r3, [r3, #20]
 8019252:	2b00      	cmp	r3, #0
 8019254:	d107      	bne.n	8019266 <arm_convolve_1x1_s8_fast+0x3a>
        conv_params->stride.w != 1 || conv_params->stride.h != 1)
 8019256:	68bb      	ldr	r3, [r7, #8]
 8019258:	689b      	ldr	r3, [r3, #8]
    if (input_dims->c % 4 != 0 || conv_params->padding.w != 0 || conv_params->padding.h != 0 ||
 801925a:	2b01      	cmp	r3, #1
 801925c:	d103      	bne.n	8019266 <arm_convolve_1x1_s8_fast+0x3a>
        conv_params->stride.w != 1 || conv_params->stride.h != 1)
 801925e:	68bb      	ldr	r3, [r7, #8]
 8019260:	68db      	ldr	r3, [r3, #12]
 8019262:	2b01      	cmp	r3, #1
 8019264:	d002      	beq.n	801926c <arm_convolve_1x1_s8_fast+0x40>
    {
        return ARM_MATH_SIZE_MISMATCH;
 8019266:	f06f 0302 	mvn.w	r3, #2
 801926a:	e02f      	b.n	80192cc <arm_convolve_1x1_s8_fast+0xa0>
    }

#else
    /* Run the following code as reference implementation for Cortex-M processors with or without DSP extension */

    const int32_t lhs_rows = input_dims->w * input_dims->h * input_dims->n;
 801926c:	683b      	ldr	r3, [r7, #0]
 801926e:	689b      	ldr	r3, [r3, #8]
 8019270:	683a      	ldr	r2, [r7, #0]
 8019272:	6852      	ldr	r2, [r2, #4]
 8019274:	fb02 f303 	mul.w	r3, r2, r3
 8019278:	683a      	ldr	r2, [r7, #0]
 801927a:	6812      	ldr	r2, [r2, #0]
 801927c:	fb02 f303 	mul.w	r3, r2, r3
 8019280:	61fb      	str	r3, [r7, #28]
    const int32_t rhs_rows = output_dims->c;
 8019282:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019284:	68db      	ldr	r3, [r3, #12]
 8019286:	61bb      	str	r3, [r7, #24]
    const int32_t rhs_cols = input_dims->c;
 8019288:	683b      	ldr	r3, [r7, #0]
 801928a:	68db      	ldr	r3, [r3, #12]
 801928c:	617b      	str	r3, [r7, #20]

    arm_nn_mat_mult_nt_t_s8(input_data,
                            filter_data,
                            bias_data,
                            output_data,
                            quant_params->multiplier,
 801928e:	687b      	ldr	r3, [r7, #4]
 8019290:	681b      	ldr	r3, [r3, #0]
                            quant_params->shift,
 8019292:	687a      	ldr	r2, [r7, #4]
 8019294:	6852      	ldr	r2, [r2, #4]
    arm_nn_mat_mult_nt_t_s8(input_data,
 8019296:	68b9      	ldr	r1, [r7, #8]
 8019298:	6809      	ldr	r1, [r1, #0]
 801929a:	68b8      	ldr	r0, [r7, #8]
 801929c:	6840      	ldr	r0, [r0, #4]
 801929e:	68bc      	ldr	r4, [r7, #8]
 80192a0:	6a24      	ldr	r4, [r4, #32]
 80192a2:	68bd      	ldr	r5, [r7, #8]
 80192a4:	6a6d      	ldr	r5, [r5, #36]	; 0x24
 80192a6:	9508      	str	r5, [sp, #32]
 80192a8:	9407      	str	r4, [sp, #28]
 80192aa:	9006      	str	r0, [sp, #24]
 80192ac:	9105      	str	r1, [sp, #20]
 80192ae:	6979      	ldr	r1, [r7, #20]
 80192b0:	9104      	str	r1, [sp, #16]
 80192b2:	69b9      	ldr	r1, [r7, #24]
 80192b4:	9103      	str	r1, [sp, #12]
 80192b6:	69f9      	ldr	r1, [r7, #28]
 80192b8:	9102      	str	r1, [sp, #8]
 80192ba:	9201      	str	r2, [sp, #4]
 80192bc:	9300      	str	r3, [sp, #0]
 80192be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80192c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80192c2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80192c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80192c6:	f005 f95a 	bl	801e57e <arm_nn_mat_mult_nt_t_s8>
                            conv_params->activation.max);

#endif

    /* Return to application */
    return ARM_MATH_SUCCESS;
 80192ca:	2300      	movs	r3, #0
}
 80192cc:	4618      	mov	r0, r3
 80192ce:	3720      	adds	r7, #32
 80192d0:	46bd      	mov	sp, r7
 80192d2:	bdb0      	pop	{r4, r5, r7, pc}

080192d4 <arm_convolve_1x1_s8_fast_get_buffer_size>:

int32_t arm_convolve_1x1_s8_fast_get_buffer_size(const cmsis_nn_dims *input_dims)
{
 80192d4:	b480      	push	{r7}
 80192d6:	b083      	sub	sp, #12
 80192d8:	af00      	add	r7, sp, #0
 80192da:	6078      	str	r0, [r7, #4]
    (void)input_dims;
    return 0;
 80192dc:	2300      	movs	r3, #0
}
 80192de:	4618      	mov	r0, r3
 80192e0:	370c      	adds	r7, #12
 80192e2:	46bd      	mov	sp, r7
 80192e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192e8:	4770      	bx	lr

080192ea <arm_convolve_s8>:
                           const q7_t *filter_data,
                           const cmsis_nn_dims *bias_dims,
                           const int32_t *bias_data,
                           const cmsis_nn_dims *output_dims,
                           q7_t *output_data)
{
 80192ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80192ee:	b0db      	sub	sp, #364	; 0x16c
 80192f0:	af08      	add	r7, sp, #32
 80192f2:	f107 040c 	add.w	r4, r7, #12
 80192f6:	6020      	str	r0, [r4, #0]
 80192f8:	f107 0008 	add.w	r0, r7, #8
 80192fc:	6001      	str	r1, [r0, #0]
 80192fe:	1d39      	adds	r1, r7, #4
 8019300:	600a      	str	r2, [r1, #0]
 8019302:	463a      	mov	r2, r7
 8019304:	6013      	str	r3, [r2, #0]
    (void)bias_dims;
    q15_t *buffer_a = (q15_t *)ctx->buf;
 8019306:	f107 030c 	add.w	r3, r7, #12
 801930a:	681b      	ldr	r3, [r3, #0]
 801930c:	681b      	ldr	r3, [r3, #0]
 801930e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

    const uint16_t input_batches = input_dims->n;
 8019312:	463b      	mov	r3, r7
 8019314:	681b      	ldr	r3, [r3, #0]
 8019316:	681b      	ldr	r3, [r3, #0]
 8019318:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
    const uint16_t input_x = input_dims->w;
 801931c:	463b      	mov	r3, r7
 801931e:	681b      	ldr	r3, [r3, #0]
 8019320:	689b      	ldr	r3, [r3, #8]
 8019322:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
    const uint16_t input_y = input_dims->h;
 8019326:	463b      	mov	r3, r7
 8019328:	681b      	ldr	r3, [r3, #0]
 801932a:	685b      	ldr	r3, [r3, #4]
 801932c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
    const uint16_t input_ch = input_dims->c;
 8019330:	463b      	mov	r3, r7
 8019332:	681b      	ldr	r3, [r3, #0]
 8019334:	68db      	ldr	r3, [r3, #12]
 8019336:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
    const uint16_t kernel_x = filter_dims->w;
 801933a:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 801933e:	689b      	ldr	r3, [r3, #8]
 8019340:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
    const uint16_t kernel_y = filter_dims->h;
 8019344:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8019348:	685b      	ldr	r3, [r3, #4]
 801934a:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
    const uint16_t output_x = output_dims->w;
 801934e:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8019352:	689b      	ldr	r3, [r3, #8]
 8019354:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
    const uint16_t output_y = output_dims->h;
 8019358:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 801935c:	685b      	ldr	r3, [r3, #4]
 801935e:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
    const uint16_t output_ch = output_dims->c;
 8019362:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8019366:	68db      	ldr	r3, [r3, #12]
 8019368:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106

    const uint16_t pad_x = conv_params->padding.w;
 801936c:	f107 0308 	add.w	r3, r7, #8
 8019370:	681b      	ldr	r3, [r3, #0]
 8019372:	691b      	ldr	r3, [r3, #16]
 8019374:	f8a7 3104 	strh.w	r3, [r7, #260]	; 0x104
    const uint16_t pad_y = conv_params->padding.h;
 8019378:	f107 0308 	add.w	r3, r7, #8
 801937c:	681b      	ldr	r3, [r3, #0]
 801937e:	695b      	ldr	r3, [r3, #20]
 8019380:	f8a7 3102 	strh.w	r3, [r7, #258]	; 0x102
    const uint16_t stride_x = conv_params->stride.w;
 8019384:	f107 0308 	add.w	r3, r7, #8
 8019388:	681b      	ldr	r3, [r3, #0]
 801938a:	689b      	ldr	r3, [r3, #8]
 801938c:	f8a7 3100 	strh.w	r3, [r7, #256]	; 0x100
    const uint16_t stride_y = conv_params->stride.h;
 8019390:	f107 0308 	add.w	r3, r7, #8
 8019394:	681b      	ldr	r3, [r3, #0]
 8019396:	68db      	ldr	r3, [r3, #12]
 8019398:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe

    const int32_t input_offset = conv_params->input_offset;
 801939c:	f107 0308 	add.w	r3, r7, #8
 80193a0:	681b      	ldr	r3, [r3, #0]
 80193a2:	681b      	ldr	r3, [r3, #0]
 80193a4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    const int32_t out_offset = conv_params->output_offset;
 80193a8:	f107 0308 	add.w	r3, r7, #8
 80193ac:	681b      	ldr	r3, [r3, #0]
 80193ae:	685b      	ldr	r3, [r3, #4]
 80193b0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    const int32_t out_activation_min = conv_params->activation.min;
 80193b4:	f107 0308 	add.w	r3, r7, #8
 80193b8:	681b      	ldr	r3, [r3, #0]
 80193ba:	6a1b      	ldr	r3, [r3, #32]
 80193bc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    const int32_t out_activation_max = conv_params->activation.max;
 80193c0:	f107 0308 	add.w	r3, r7, #8
 80193c4:	681b      	ldr	r3, [r3, #0]
 80193c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80193c8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    int32_t *output_mult = quant_params->multiplier;
 80193cc:	1d3b      	adds	r3, r7, #4
 80193ce:	681b      	ldr	r3, [r3, #0]
 80193d0:	681b      	ldr	r3, [r3, #0]
 80193d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    int32_t *output_shift = quant_params->shift;
 80193d6:	1d3b      	adds	r3, r7, #4
 80193d8:	681b      	ldr	r3, [r3, #0]
 80193da:	685b      	ldr	r3, [r3, #4]
 80193dc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

    int i_batch;
    for (i_batch = 0; i_batch < input_batches; i_batch++)
 80193e0:	2300      	movs	r3, #0
 80193e2:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80193e6:	e337      	b.n	8019a58 <arm_convolve_s8+0x76e>

#elif defined(ARM_MATH_DSP)
        int32_t i_out_y, i_out_x, i_ker_y, i_ker_x;

        /* Generate two columns from the input tensor a GEMM computation */
        q15_t *two_column_buf = buffer_a;
 80193e8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80193ec:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
        q7_t *out = output_data;
 80193f0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80193f4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

        /* This part implements the im2col function */
        for (i_out_y = 0; i_out_y < output_y; i_out_y++)
 80193f8:	2300      	movs	r3, #0
 80193fa:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 80193fe:	e0da      	b.n	80195b6 <arm_convolve_s8+0x2cc>
        {
            for (i_out_x = 0; i_out_x < output_x; i_out_x++)
 8019400:	2300      	movs	r3, #0
 8019402:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8019406:	e0ca      	b.n	801959e <arm_convolve_s8+0x2b4>
            {
                for (i_ker_y = i_out_y * stride_y - pad_y; i_ker_y < i_out_y * stride_y - pad_y + kernel_y; i_ker_y++)
 8019408:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 801940c:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8019410:	fb02 f203 	mul.w	r2, r2, r3
 8019414:	f8b7 3102 	ldrh.w	r3, [r7, #258]	; 0x102
 8019418:	1ad3      	subs	r3, r2, r3
 801941a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 801941e:	e065      	b.n	80194ec <arm_convolve_s8+0x202>
                {
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x;
 8019420:	f8b7 3100 	ldrh.w	r3, [r7, #256]	; 0x100
 8019424:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8019428:	fb02 f203 	mul.w	r2, r2, r3
 801942c:	f8b7 3104 	ldrh.w	r3, [r7, #260]	; 0x104
 8019430:	1ad3      	subs	r3, r2, r3
 8019432:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8019436:	e044      	b.n	80194c2 <arm_convolve_s8+0x1d8>
                         i_ker_x++)
                    {
                        if (i_ker_y < 0 || i_ker_y >= input_y || i_ker_x < 0 || i_ker_x >= input_x)
 8019438:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801943c:	2b00      	cmp	r3, #0
 801943e:	db0f      	blt.n	8019460 <arm_convolve_s8+0x176>
 8019440:	f8b7 3112 	ldrh.w	r3, [r7, #274]	; 0x112
 8019444:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8019448:	429a      	cmp	r2, r3
 801944a:	da09      	bge.n	8019460 <arm_convolve_s8+0x176>
 801944c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8019450:	2b00      	cmp	r3, #0
 8019452:	db05      	blt.n	8019460 <arm_convolve_s8+0x176>
 8019454:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 8019458:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 801945c:	429a      	cmp	r2, r3
 801945e:	db09      	blt.n	8019474 <arm_convolve_s8+0x18a>
                        {
                            /* Filling 0 for out-of-bound paddings */
                            memset(two_column_buf, 0, sizeof(q15_t) * input_ch);
 8019460:	f8b7 3110 	ldrh.w	r3, [r7, #272]	; 0x110
 8019464:	005b      	lsls	r3, r3, #1
 8019466:	461a      	mov	r2, r3
 8019468:	2100      	movs	r1, #0
 801946a:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 801946e:	f00c fbe1 	bl	8025c34 <memset>
 8019472:	e019      	b.n	80194a8 <arm_convolve_s8+0x1be>
                        }
                        else
                        {
                            /* Copying the pixel data to column */
                            arm_q7_to_q15_with_offset(input_data + (i_ker_y * input_x + i_ker_x) * input_ch,
 8019474:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 8019478:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 801947c:	fb02 f203 	mul.w	r2, r2, r3
 8019480:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8019484:	4413      	add	r3, r2
 8019486:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 801948a:	fb02 f303 	mul.w	r3, r2, r3
 801948e:	461a      	mov	r2, r3
 8019490:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8019494:	1898      	adds	r0, r3, r2
 8019496:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 801949a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801949e:	b21b      	sxth	r3, r3
 80194a0:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 80194a4:	f008 fb6f 	bl	8021b86 <arm_q7_to_q15_with_offset>
                                                      two_column_buf,
                                                      input_ch,
                                                      input_offset);
                        }
                        two_column_buf += input_ch;
 80194a8:	f8b7 3110 	ldrh.w	r3, [r7, #272]	; 0x110
 80194ac:	005b      	lsls	r3, r3, #1
 80194ae:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80194b2:	4413      	add	r3, r2
 80194b4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
                         i_ker_x++)
 80194b8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80194bc:	3301      	adds	r3, #1
 80194be:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x;
 80194c2:	f8b7 3100 	ldrh.w	r3, [r7, #256]	; 0x100
 80194c6:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 80194ca:	fb02 f203 	mul.w	r2, r2, r3
 80194ce:	f8b7 3104 	ldrh.w	r3, [r7, #260]	; 0x104
 80194d2:	1ad2      	subs	r2, r2, r3
 80194d4:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 80194d8:	4413      	add	r3, r2
 80194da:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80194de:	429a      	cmp	r2, r3
 80194e0:	dbaa      	blt.n	8019438 <arm_convolve_s8+0x14e>
                for (i_ker_y = i_out_y * stride_y - pad_y; i_ker_y < i_out_y * stride_y - pad_y + kernel_y; i_ker_y++)
 80194e2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80194e6:	3301      	adds	r3, #1
 80194e8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80194ec:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 80194f0:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 80194f4:	fb02 f203 	mul.w	r2, r2, r3
 80194f8:	f8b7 3102 	ldrh.w	r3, [r7, #258]	; 0x102
 80194fc:	1ad2      	subs	r2, r2, r3
 80194fe:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8019502:	4413      	add	r3, r2
 8019504:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8019508:	429a      	cmp	r2, r3
 801950a:	db89      	blt.n	8019420 <arm_convolve_s8+0x136>
                    }
                }

                /* Computation is filed for every 2 columns */
                if (two_column_buf == buffer_a + 2 * input_ch * kernel_y * kernel_x)
 801950c:	f8b7 3110 	ldrh.w	r3, [r7, #272]	; 0x110
 8019510:	f8b7 210c 	ldrh.w	r2, [r7, #268]	; 0x10c
 8019514:	fb02 f303 	mul.w	r3, r2, r3
 8019518:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 801951c:	fb02 f303 	mul.w	r3, r2, r3
 8019520:	009b      	lsls	r3, r3, #2
 8019522:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8019526:	4413      	add	r3, r2
 8019528:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 801952c:	429a      	cmp	r2, r3
 801952e:	d131      	bne.n	8019594 <arm_convolve_s8+0x2aa>
                {
                    out = arm_nn_mat_mult_kernel_s8_s16(filter_data,
 8019530:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8019534:	b21b      	sxth	r3, r3
 8019536:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 801953a:	b212      	sxth	r2, r2
 801953c:	f8b7 0110 	ldrh.w	r0, [r7, #272]	; 0x110
 8019540:	f8b7 110c 	ldrh.w	r1, [r7, #268]	; 0x10c
 8019544:	fb10 f101 	smulbb	r1, r0, r1
 8019548:	b289      	uxth	r1, r1
 801954a:	f8b7 010e 	ldrh.w	r0, [r7, #270]	; 0x10e
 801954e:	fb10 f101 	smulbb	r1, r0, r1
 8019552:	b289      	uxth	r1, r1
 8019554:	f8b7 4106 	ldrh.w	r4, [r7, #262]	; 0x106
 8019558:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 801955c:	9006      	str	r0, [sp, #24]
 801955e:	f8d7 0178 	ldr.w	r0, [r7, #376]	; 0x178
 8019562:	9005      	str	r0, [sp, #20]
 8019564:	9104      	str	r1, [sp, #16]
 8019566:	9203      	str	r2, [sp, #12]
 8019568:	9302      	str	r3, [sp, #8]
 801956a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801956e:	9301      	str	r3, [sp, #4]
 8019570:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8019574:	9300      	str	r3, [sp, #0]
 8019576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801957a:	4622      	mov	r2, r4
 801957c:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8019580:	f8d7 0170 	ldr.w	r0, [r7, #368]	; 0x170
 8019584:	f003 fcdb 	bl	801cf3e <arm_nn_mat_mult_kernel_s8_s16>
 8019588:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
                                                        input_ch * kernel_y * kernel_x,
                                                        bias_data,
                                                        out);

                    /* counter reset */
                    two_column_buf = buffer_a;
 801958c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8019590:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
            for (i_out_x = 0; i_out_x < output_x; i_out_x++)
 8019594:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8019598:	3301      	adds	r3, #1
 801959a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 801959e:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 80195a2:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 80195a6:	429a      	cmp	r2, r3
 80195a8:	f6ff af2e 	blt.w	8019408 <arm_convolve_s8+0x11e>
        for (i_out_y = 0; i_out_y < output_y; i_out_y++)
 80195ac:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80195b0:	3301      	adds	r3, #1
 80195b2:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 80195b6:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
 80195ba:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 80195be:	429a      	cmp	r2, r3
 80195c0:	f6ff af1e 	blt.w	8019400 <arm_convolve_s8+0x116>
                }
            }
        }

        /* left-over because odd number of output pixels */
        if (two_column_buf != buffer_a)
 80195c4:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80195c8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80195cc:	429a      	cmp	r2, r3
 80195ce:	f000 821e 	beq.w	8019a0e <arm_convolve_s8+0x724>
        {
            const q7_t *ker_a = filter_data;
 80195d2:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80195d6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            int i;

            for (i = 0; i < output_ch; i++)
 80195da:	2300      	movs	r3, #0
 80195dc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80195e0:	e20e      	b.n	8019a00 <arm_convolve_s8+0x716>
            {
                /* Load the accumulator with bias first */
                q31_t sum = 0;
 80195e2:	2300      	movs	r3, #0
 80195e4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
                if (bias_data)
 80195e8:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80195ec:	2b00      	cmp	r3, #0
 80195ee:	d008      	beq.n	8019602 <arm_convolve_s8+0x318>
                {
                    sum = bias_data[i];
 80195f0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80195f4:	009b      	lsls	r3, r3, #2
 80195f6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80195fa:	4413      	add	r3, r2
 80195fc:	681b      	ldr	r3, [r3, #0]
 80195fe:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
                }

                /* Point to the beginning of the im2col buffer where the input is available as a rearranged column */
                const q15_t *ip_as_col = buffer_a;
 8019602:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8019606:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 801960a:	601a      	str	r2, [r3, #0]

                /* 4 multiply and accumulates are done in one loop. */
                uint16_t col_count = (input_ch * kernel_y * kernel_x) >> 2;
 801960c:	f8b7 3110 	ldrh.w	r3, [r7, #272]	; 0x110
 8019610:	f8b7 210c 	ldrh.w	r2, [r7, #268]	; 0x10c
 8019614:	fb02 f303 	mul.w	r3, r2, r3
 8019618:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 801961c:	fb02 f303 	mul.w	r3, r2, r3
 8019620:	109b      	asrs	r3, r3, #2
 8019622:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e

                while (col_count)
 8019626:	e0ea      	b.n	80197fe <arm_convolve_s8+0x514>
 8019628:	f107 031c 	add.w	r3, r7, #28
 801962c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8019630:	601a      	str	r2, [r3, #0]
 8019632:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8019636:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801963a:	f107 0320 	add.w	r3, r7, #32
 801963e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8019642:	f107 031c 	add.w	r3, r7, #28
 8019646:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  @return        q31 value
 */
__STATIC_FORCEINLINE q31_t arm_nn_read_q7x4_ia(const q7_t **in_q7)
{
    q31_t val;
    memcpy(&val, *in_q7, 4);
 801964a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801964e:	681b      	ldr	r3, [r3, #0]
 8019650:	681b      	ldr	r3, [r3, #0]
 8019652:	461a      	mov	r2, r3
 8019654:	f107 0318 	add.w	r3, r7, #24
 8019658:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801965a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801965e:	681b      	ldr	r3, [r3, #0]
 8019660:	1d1a      	adds	r2, r3, #4
 8019662:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8019666:	601a      	str	r2, [r3, #0]

    return (val);
 8019668:	f107 0318 	add.w	r3, r7, #24
 801966c:	681b      	ldr	r3, [r3, #0]
 * @brief read and expand one q7 word into two q15 words
 */

__STATIC_FORCEINLINE const q7_t *read_and_pad(const q7_t *source, q31_t *out1, q31_t *out2)
{
    q31_t inA = arm_nn_read_q7x4_ia(&source);
 801966e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    q31_t inAbuf1 = __SXTB16(__ROR((uint32_t)inA, 8));
 8019672:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8019676:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801967a:	2308      	movs	r3, #8
 801967c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  \param [in]    op2  Number of Bits to rotate
  \return               Rotated value
 */
__STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
{
  op2 %= 32U;
 8019680:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8019684:	f003 031f 	and.w	r3, r3, #31
 8019688:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (op2 == 0U)
 801968c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8019690:	2b00      	cmp	r3, #0
 8019692:	d102      	bne.n	801969a <arm_convolve_s8+0x3b0>
  {
    return op1;
 8019694:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8019698:	e005      	b.n	80196a6 <arm_convolve_s8+0x3bc>
  }
  return (op1 >> op2) | (op1 << (32U - op2));
 801969a:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801969e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80196a2:	fa62 f303 	ror.w	r3, r2, r3
 80196a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

__STATIC_FORCEINLINE uint32_t __SXTB16(uint32_t op1)
{
  uint32_t result;

  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80196aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80196ae:	fa2f f383 	sxtb16	r3, r3
 80196b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return(result);
 80196b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80196ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    q31_t inAbuf2 = __SXTB16(inA);
 80196be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80196c2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80196c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80196ca:	fa2f f383 	sxtb16	r3, r3
 80196ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return(result);
 80196d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80196d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

#ifndef ARM_MATH_BIG_ENDIAN
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 80196da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80196de:	67fb      	str	r3, [r7, #124]	; 0x7c
 80196e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80196e4:	67bb      	str	r3, [r7, #120]	; 0x78
 80196e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80196e8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80196ea:	eac3 4322 	pkhtb	r3, r3, r2, asr #16
 80196ee:	677b      	str	r3, [r7, #116]	; 0x74
 80196f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80196f2:	461a      	mov	r2, r3
 80196f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80196f8:	601a      	str	r2, [r3, #0]
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 80196fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80196fe:	673b      	str	r3, [r7, #112]	; 0x70
 8019700:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8019704:	66fb      	str	r3, [r7, #108]	; 0x6c
 8019706:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019708:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801970a:	eac3 4302 	pkhbt	r3, r3, r2, lsl #16
 801970e:	66bb      	str	r3, [r7, #104]	; 0x68
 8019710:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8019712:	461a      	mov	r2, r3
 8019714:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8019718:	601a      	str	r2, [r3, #0]
#else
    *out1 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
    *out2 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
#endif

    return source;
 801971a:	f107 031c 	add.w	r3, r7, #28
 801971e:	681b      	ldr	r3, [r3, #0]
                {
                    q31_t ker_a1, ker_a2;
                    q31_t ip_b1, ip_b2;

                    ker_a = read_and_pad(ker_a, &ker_a1, &ker_a2);
 8019720:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8019724:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8019728:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    memcpy(&val, *in_q15, 4);
 801972c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8019730:	681b      	ldr	r3, [r3, #0]
 8019732:	681b      	ldr	r3, [r3, #0]
 8019734:	461a      	mov	r2, r3
 8019736:	f107 0314 	add.w	r3, r7, #20
 801973a:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 801973c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8019740:	681b      	ldr	r3, [r3, #0]
 8019742:	1d1a      	adds	r2, r3, #4
 8019744:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8019748:	601a      	str	r2, [r3, #0]
    return (val);
 801974a:	f107 0314 	add.w	r3, r7, #20
 801974e:	681b      	ldr	r3, [r3, #0]

                    ip_b1 = arm_nn_read_q15x2_ia(&ip_as_col);
 8019750:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                    sum = __SMLAD(ker_a1, ip_b1, sum);
 8019754:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8019758:	681b      	ldr	r3, [r3, #0]
 801975a:	4619      	mov	r1, r3
 801975c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8019760:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8019764:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8019768:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 801976c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

__STATIC_FORCEINLINE uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8019770:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8019774:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8019778:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 801977c:	fb23 1302 	smlad	r3, r3, r2, r1
 8019780:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return(result);
 8019784:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8019788:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 801978c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8019790:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    memcpy(&val, *in_q15, 4);
 8019794:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8019798:	681b      	ldr	r3, [r3, #0]
 801979a:	681b      	ldr	r3, [r3, #0]
 801979c:	461a      	mov	r2, r3
 801979e:	f107 0310 	add.w	r3, r7, #16
 80197a2:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 80197a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80197a8:	681b      	ldr	r3, [r3, #0]
 80197aa:	1d1a      	adds	r2, r3, #4
 80197ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80197b0:	601a      	str	r2, [r3, #0]
    return (val);
 80197b2:	f107 0310 	add.w	r3, r7, #16
 80197b6:	681b      	ldr	r3, [r3, #0]
                    ip_b2 = arm_nn_read_q15x2_ia(&ip_as_col);
 80197b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
                    sum = __SMLAD(ker_a2, ip_b2, sum);
 80197bc:	f107 0320 	add.w	r3, r7, #32
 80197c0:	681b      	ldr	r3, [r3, #0]
 80197c2:	4619      	mov	r1, r3
 80197c4:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80197c8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80197cc:	f8c7 10d4 	str.w	r1, [r7, #212]	; 0xd4
 80197d0:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 80197d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80197d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80197dc:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80197e0:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 80197e4:	fb23 1302 	smlad	r3, r3, r2, r1
 80197e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  return(result);
 80197ec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80197f0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

                    col_count--;
 80197f4:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
 80197f8:	3b01      	subs	r3, #1
 80197fa:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e
                while (col_count)
 80197fe:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
 8019802:	2b00      	cmp	r3, #0
 8019804:	f47f af10 	bne.w	8019628 <arm_convolve_s8+0x33e>
                }
                /* Handle left over mac */
                col_count = input_ch * kernel_y * kernel_x & 0x3;
 8019808:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 801980c:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8019810:	fb12 f303 	smulbb	r3, r2, r3
 8019814:	b29b      	uxth	r3, r3
 8019816:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 801981a:	fb12 f303 	smulbb	r3, r2, r3
 801981e:	b29b      	uxth	r3, r3
 8019820:	f003 0303 	and.w	r3, r3, #3
 8019824:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e
                while (col_count)
 8019828:	e021      	b.n	801986e <arm_convolve_s8+0x584>
                {
                    q7_t ker_a1 = *ker_a++;
 801982a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801982e:	1c5a      	adds	r2, r3, #1
 8019830:	f8c7 2128 	str.w	r2, [r7, #296]	; 0x128
 8019834:	781b      	ldrb	r3, [r3, #0]
 8019836:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
                    q15_t ip_b1 = *ip_as_col++;
 801983a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801983e:	681b      	ldr	r3, [r3, #0]
 8019840:	1c99      	adds	r1, r3, #2
 8019842:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8019846:	6011      	str	r1, [r2, #0]
 8019848:	881b      	ldrh	r3, [r3, #0]
 801984a:	f8a7 30e0 	strh.w	r3, [r7, #224]	; 0xe0
                    sum += ker_a1 * ip_b1;
 801984e:	f997 30e3 	ldrsb.w	r3, [r7, #227]	; 0xe3
 8019852:	f9b7 20e0 	ldrsh.w	r2, [r7, #224]	; 0xe0
 8019856:	fb02 f303 	mul.w	r3, r2, r3
 801985a:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 801985e:	4413      	add	r3, r2
 8019860:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
                    col_count--;
 8019864:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
 8019868:	3b01      	subs	r3, #1
 801986a:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e
                while (col_count)
 801986e:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
 8019872:	2b00      	cmp	r3, #0
 8019874:	d1d9      	bne.n	801982a <arm_convolve_s8+0x540>
                }

                sum = arm_nn_requantize(sum, output_mult[i], output_shift[i]);
 8019876:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801987a:	009b      	lsls	r3, r3, #2
 801987c:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8019880:	4413      	add	r3, r2
 8019882:	681a      	ldr	r2, [r3, #0]
 8019884:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8019888:	009b      	lsls	r3, r3, #2
 801988a:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 801988e:	440b      	add	r3, r1
 8019890:	681b      	ldr	r3, [r3, #0]
 8019892:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8019896:	6679      	str	r1, [r7, #100]	; 0x64
 8019898:	663a      	str	r2, [r7, #96]	; 0x60
 801989a:	65fb      	str	r3, [r7, #92]	; 0x5c
 * @return          Returns (val * multiplier)/(2 ^ shift)
 *
 */
__STATIC_FORCEINLINE q31_t arm_nn_requantize(const q31_t val, const q31_t multiplier, const q31_t shift)
{
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801989c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801989e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80198a2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80198a4:	fa02 f303 	lsl.w	r3, r2, r3
 80198a8:	65bb      	str	r3, [r7, #88]	; 0x58
 80198aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80198ac:	657b      	str	r3, [r7, #84]	; 0x54
    q31_t result = 0;
 80198ae:	2300      	movs	r3, #0
 80198b0:	653b      	str	r3, [r7, #80]	; 0x50
    mult.word.low = 1 << 30;
 80198b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80198b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80198ba:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 80198bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80198c0:	2200      	movs	r2, #0
 80198c2:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 80198c4:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80198c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80198ca:	4618      	mov	r0, r3
 80198cc:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80198d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80198d2:	461a      	mov	r2, r3
 80198d4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80198d8:	fb02 fc01 	mul.w	ip, r2, r1
 80198dc:	fb00 f603 	mul.w	r6, r0, r3
 80198e0:	4466      	add	r6, ip
 80198e2:	fba0 2302 	umull	r2, r3, r0, r2
 80198e6:	18f1      	adds	r1, r6, r3
 80198e8:	460b      	mov	r3, r1
 80198ea:	eb14 0802 	adds.w	r8, r4, r2
 80198ee:	eb45 0903 	adc.w	r9, r5, r3
 80198f2:	e9c7 890a 	strd	r8, r9, [r7, #40]	; 0x28
    result = (int32_t)(mult.long_long >> 31);
 80198f6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80198fa:	f04f 0200 	mov.w	r2, #0
 80198fe:	f04f 0300 	mov.w	r3, #0
 8019902:	0fc2      	lsrs	r2, r0, #31
 8019904:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8019908:	17cb      	asrs	r3, r1, #31
 801990a:	4613      	mov	r3, r2
 801990c:	653b      	str	r3, [r7, #80]	; 0x50
    return result;
 801990e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8019910:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019912:	2b00      	cmp	r3, #0
 8019914:	dc02      	bgt.n	801991c <arm_convolve_s8+0x632>
 8019916:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019918:	425b      	negs	r3, r3
 801991a:	e000      	b.n	801991e <arm_convolve_s8+0x634>
 801991c:	2300      	movs	r3, #0
 801991e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8019920:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8019924:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8019926:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801992a:	2200      	movs	r2, #0
 801992c:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801992e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8019932:	2201      	movs	r2, #1
 8019934:	681b      	ldr	r3, [r3, #0]
 8019936:	409a      	lsls	r2, r3
 8019938:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801993c:	3a01      	subs	r2, #1
 801993e:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 8019940:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8019944:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8019948:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801994a:	6812      	ldr	r2, [r2, #0]
 801994c:	400a      	ands	r2, r1
 801994e:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 8019950:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8019954:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8019958:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801995a:	6812      	ldr	r2, [r2, #0]
 801995c:	fa41 f202 	asr.w	r2, r1, r2
 8019960:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 8019962:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8019966:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801996a:	6812      	ldr	r2, [r2, #0]
 801996c:	1052      	asrs	r2, r2, #1
 801996e:	601a      	str	r2, [r3, #0]
    if (result < 0)
 8019970:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8019974:	681b      	ldr	r3, [r3, #0]
 8019976:	2b00      	cmp	r3, #0
 8019978:	da06      	bge.n	8019988 <arm_convolve_s8+0x69e>
        threshold++;
 801997a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801997e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8019982:	6812      	ldr	r2, [r2, #0]
 8019984:	3201      	adds	r2, #1
 8019986:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 8019988:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 801998c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8019990:	6812      	ldr	r2, [r2, #0]
 8019992:	681b      	ldr	r3, [r3, #0]
 8019994:	429a      	cmp	r2, r3
 8019996:	dd06      	ble.n	80199a6 <arm_convolve_s8+0x6bc>
        result++;
 8019998:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801999c:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80199a0:	6812      	ldr	r2, [r2, #0]
 80199a2:	3201      	adds	r2, #1
 80199a4:	601a      	str	r2, [r3, #0]
    return result;
 80199a6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80199aa:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80199ac:	bf00      	nop
 80199ae:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
                sum += out_offset;
 80199b2:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80199b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80199ba:	4413      	add	r3, r2
 80199bc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
                sum = MAX(sum, out_activation_min);
 80199c0:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80199c4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80199c8:	4293      	cmp	r3, r2
 80199ca:	bfb8      	it	lt
 80199cc:	4613      	movlt	r3, r2
 80199ce:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
                sum = MIN(sum, out_activation_max);
 80199d2:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80199d6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80199da:	4293      	cmp	r3, r2
 80199dc:	bfa8      	it	ge
 80199de:	4613      	movge	r3, r2
 80199e0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
                *out++ = (q7_t)sum;
 80199e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80199e8:	1c5a      	adds	r2, r3, #1
 80199ea:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 80199ee:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80199f2:	b252      	sxtb	r2, r2
 80199f4:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < output_ch; i++)
 80199f6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80199fa:	3301      	adds	r3, #1
 80199fc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8019a00:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 8019a04:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8019a08:	429a      	cmp	r2, r3
 8019a0a:	f6ff adea 	blt.w	80195e2 <arm_convolve_s8+0x2f8>
                }
            }
        }
#endif
        /* Advance to the next batch */
        input_data += (input_x * input_y * input_ch);
 8019a0e:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 8019a12:	f8b7 2112 	ldrh.w	r2, [r7, #274]	; 0x112
 8019a16:	fb02 f303 	mul.w	r3, r2, r3
 8019a1a:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 8019a1e:	fb02 f303 	mul.w	r3, r2, r3
 8019a22:	461a      	mov	r2, r3
 8019a24:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8019a28:	4413      	add	r3, r2
 8019a2a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
        output_data += (output_x * output_y * output_ch);
 8019a2e:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8019a32:	f8b7 2108 	ldrh.w	r2, [r7, #264]	; 0x108
 8019a36:	fb02 f303 	mul.w	r3, r2, r3
 8019a3a:	f8b7 2106 	ldrh.w	r2, [r7, #262]	; 0x106
 8019a3e:	fb02 f303 	mul.w	r3, r2, r3
 8019a42:	461a      	mov	r2, r3
 8019a44:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8019a48:	4413      	add	r3, r2
 8019a4a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
    for (i_batch = 0; i_batch < input_batches; i_batch++)
 8019a4e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8019a52:	3301      	adds	r3, #1
 8019a54:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8019a58:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 8019a5c:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8019a60:	429a      	cmp	r2, r3
 8019a62:	f6ff acc1 	blt.w	80193e8 <arm_convolve_s8+0xfe>
    }

    /* Return to application */
    return ARM_MATH_SUCCESS;
 8019a66:	2300      	movs	r3, #0
}
 8019a68:	4618      	mov	r0, r3
 8019a6a:	f507 77a6 	add.w	r7, r7, #332	; 0x14c
 8019a6e:	46bd      	mov	sp, r7
 8019a70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08019a74 <arm_convolve_s8_get_buffer_size>:

int32_t arm_convolve_s8_get_buffer_size(const cmsis_nn_dims *input_dims, const cmsis_nn_dims *filter_dims)
{
 8019a74:	b480      	push	{r7}
 8019a76:	b083      	sub	sp, #12
 8019a78:	af00      	add	r7, sp, #0
 8019a7a:	6078      	str	r0, [r7, #4]
 8019a7c:	6039      	str	r1, [r7, #0]
#if defined(ARM_MATH_DSP)
    return (2 * input_dims->c * filter_dims->w * filter_dims->h) * (int32_t)sizeof(int16_t);
 8019a7e:	687b      	ldr	r3, [r7, #4]
 8019a80:	68db      	ldr	r3, [r3, #12]
 8019a82:	683a      	ldr	r2, [r7, #0]
 8019a84:	6892      	ldr	r2, [r2, #8]
 8019a86:	fb02 f303 	mul.w	r3, r2, r3
 8019a8a:	683a      	ldr	r2, [r7, #0]
 8019a8c:	6852      	ldr	r2, [r2, #4]
 8019a8e:	fb02 f303 	mul.w	r3, r2, r3
 8019a92:	009b      	lsls	r3, r3, #2
#else
    (void)input_dims;
    (void)filter_dims;
    return 0;
#endif
}
 8019a94:	4618      	mov	r0, r3
 8019a96:	370c      	adds	r7, #12
 8019a98:	46bd      	mov	sp, r7
 8019a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a9e:	4770      	bx	lr

08019aa0 <arm_convolve_wrapper_s8>:
                                   const q7_t *filter_data,
                                   const cmsis_nn_dims *bias_dims,
                                   const int32_t *bias_data,
                                   const cmsis_nn_dims *output_dims,
                                   q7_t *output_data)
{
 8019aa0:	b580      	push	{r7, lr}
 8019aa2:	b08c      	sub	sp, #48	; 0x30
 8019aa4:	af08      	add	r7, sp, #32
 8019aa6:	60f8      	str	r0, [r7, #12]
 8019aa8:	60b9      	str	r1, [r7, #8]
 8019aaa:	607a      	str	r2, [r7, #4]
 8019aac:	603b      	str	r3, [r7, #0]
    if ((conv_params->padding.w == 0) && (conv_params->padding.h == 0) && (input_dims->c % 4 == 0) &&
 8019aae:	68bb      	ldr	r3, [r7, #8]
 8019ab0:	691b      	ldr	r3, [r3, #16]
 8019ab2:	2b00      	cmp	r3, #0
 8019ab4:	d12f      	bne.n	8019b16 <arm_convolve_wrapper_s8+0x76>
 8019ab6:	68bb      	ldr	r3, [r7, #8]
 8019ab8:	695b      	ldr	r3, [r3, #20]
 8019aba:	2b00      	cmp	r3, #0
 8019abc:	d12b      	bne.n	8019b16 <arm_convolve_wrapper_s8+0x76>
 8019abe:	683b      	ldr	r3, [r7, #0]
 8019ac0:	68db      	ldr	r3, [r3, #12]
 8019ac2:	f003 0303 	and.w	r3, r3, #3
 8019ac6:	2b00      	cmp	r3, #0
 8019ac8:	d125      	bne.n	8019b16 <arm_convolve_wrapper_s8+0x76>
        (conv_params->stride.w == 1) && (conv_params->stride.h == 1) && (filter_dims->w == 1) && (filter_dims->h == 1))
 8019aca:	68bb      	ldr	r3, [r7, #8]
 8019acc:	689b      	ldr	r3, [r3, #8]
    if ((conv_params->padding.w == 0) && (conv_params->padding.h == 0) && (input_dims->c % 4 == 0) &&
 8019ace:	2b01      	cmp	r3, #1
 8019ad0:	d121      	bne.n	8019b16 <arm_convolve_wrapper_s8+0x76>
        (conv_params->stride.w == 1) && (conv_params->stride.h == 1) && (filter_dims->w == 1) && (filter_dims->h == 1))
 8019ad2:	68bb      	ldr	r3, [r7, #8]
 8019ad4:	68db      	ldr	r3, [r3, #12]
 8019ad6:	2b01      	cmp	r3, #1
 8019ad8:	d11d      	bne.n	8019b16 <arm_convolve_wrapper_s8+0x76>
 8019ada:	69fb      	ldr	r3, [r7, #28]
 8019adc:	689b      	ldr	r3, [r3, #8]
 8019ade:	2b01      	cmp	r3, #1
 8019ae0:	d119      	bne.n	8019b16 <arm_convolve_wrapper_s8+0x76>
 8019ae2:	69fb      	ldr	r3, [r7, #28]
 8019ae4:	685b      	ldr	r3, [r3, #4]
 8019ae6:	2b01      	cmp	r3, #1
 8019ae8:	d115      	bne.n	8019b16 <arm_convolve_wrapper_s8+0x76>
    {
        return arm_convolve_1x1_s8_fast(ctx,
 8019aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019aec:	9306      	str	r3, [sp, #24]
 8019aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019af0:	9305      	str	r3, [sp, #20]
 8019af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019af4:	9304      	str	r3, [sp, #16]
 8019af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019af8:	9303      	str	r3, [sp, #12]
 8019afa:	6a3b      	ldr	r3, [r7, #32]
 8019afc:	9302      	str	r3, [sp, #8]
 8019afe:	69fb      	ldr	r3, [r7, #28]
 8019b00:	9301      	str	r3, [sp, #4]
 8019b02:	69bb      	ldr	r3, [r7, #24]
 8019b04:	9300      	str	r3, [sp, #0]
 8019b06:	683b      	ldr	r3, [r7, #0]
 8019b08:	687a      	ldr	r2, [r7, #4]
 8019b0a:	68b9      	ldr	r1, [r7, #8]
 8019b0c:	68f8      	ldr	r0, [r7, #12]
 8019b0e:	f7ff fb8d 	bl	801922c <arm_convolve_1x1_s8_fast>
 8019b12:	4603      	mov	r3, r0
 8019b14:	e040      	b.n	8019b98 <arm_convolve_wrapper_s8+0xf8>
                                        bias_dims,
                                        bias_data,
                                        output_dims,
                                        output_data);
    }
    else if ((output_dims->h == 1) && (input_dims->h == 1) && (filter_dims->h == 1) && (output_dims->w % 4 == 0) &&
 8019b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019b18:	685b      	ldr	r3, [r3, #4]
 8019b1a:	2b01      	cmp	r3, #1
 8019b1c:	d127      	bne.n	8019b6e <arm_convolve_wrapper_s8+0xce>
 8019b1e:	683b      	ldr	r3, [r7, #0]
 8019b20:	685b      	ldr	r3, [r3, #4]
 8019b22:	2b01      	cmp	r3, #1
 8019b24:	d123      	bne.n	8019b6e <arm_convolve_wrapper_s8+0xce>
 8019b26:	69fb      	ldr	r3, [r7, #28]
 8019b28:	685b      	ldr	r3, [r3, #4]
 8019b2a:	2b01      	cmp	r3, #1
 8019b2c:	d11f      	bne.n	8019b6e <arm_convolve_wrapper_s8+0xce>
 8019b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019b30:	689b      	ldr	r3, [r3, #8]
 8019b32:	f003 0303 	and.w	r3, r3, #3
 8019b36:	2b00      	cmp	r3, #0
 8019b38:	d119      	bne.n	8019b6e <arm_convolve_wrapper_s8+0xce>
             (input_dims->n == 1))
 8019b3a:	683b      	ldr	r3, [r7, #0]
 8019b3c:	681b      	ldr	r3, [r3, #0]
    else if ((output_dims->h == 1) && (input_dims->h == 1) && (filter_dims->h == 1) && (output_dims->w % 4 == 0) &&
 8019b3e:	2b01      	cmp	r3, #1
 8019b40:	d115      	bne.n	8019b6e <arm_convolve_wrapper_s8+0xce>
    {
        return arm_convolve_1_x_n_s8(ctx,
 8019b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019b44:	9306      	str	r3, [sp, #24]
 8019b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019b48:	9305      	str	r3, [sp, #20]
 8019b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019b4c:	9304      	str	r3, [sp, #16]
 8019b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b50:	9303      	str	r3, [sp, #12]
 8019b52:	6a3b      	ldr	r3, [r7, #32]
 8019b54:	9302      	str	r3, [sp, #8]
 8019b56:	69fb      	ldr	r3, [r7, #28]
 8019b58:	9301      	str	r3, [sp, #4]
 8019b5a:	69bb      	ldr	r3, [r7, #24]
 8019b5c:	9300      	str	r3, [sp, #0]
 8019b5e:	683b      	ldr	r3, [r7, #0]
 8019b60:	687a      	ldr	r2, [r7, #4]
 8019b62:	68b9      	ldr	r1, [r7, #8]
 8019b64:	68f8      	ldr	r0, [r7, #12]
 8019b66:	f7ff fb1d 	bl	80191a4 <arm_convolve_1_x_n_s8>
 8019b6a:	4603      	mov	r3, r0
 8019b6c:	e014      	b.n	8019b98 <arm_convolve_wrapper_s8+0xf8>
                                     output_dims,
                                     output_data);
    }
    else
    {
        return arm_convolve_s8(ctx,
 8019b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019b70:	9306      	str	r3, [sp, #24]
 8019b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019b74:	9305      	str	r3, [sp, #20]
 8019b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019b78:	9304      	str	r3, [sp, #16]
 8019b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b7c:	9303      	str	r3, [sp, #12]
 8019b7e:	6a3b      	ldr	r3, [r7, #32]
 8019b80:	9302      	str	r3, [sp, #8]
 8019b82:	69fb      	ldr	r3, [r7, #28]
 8019b84:	9301      	str	r3, [sp, #4]
 8019b86:	69bb      	ldr	r3, [r7, #24]
 8019b88:	9300      	str	r3, [sp, #0]
 8019b8a:	683b      	ldr	r3, [r7, #0]
 8019b8c:	687a      	ldr	r2, [r7, #4]
 8019b8e:	68b9      	ldr	r1, [r7, #8]
 8019b90:	68f8      	ldr	r0, [r7, #12]
 8019b92:	f7ff fbaa 	bl	80192ea <arm_convolve_s8>
 8019b96:	4603      	mov	r3, r0
                               bias_dims,
                               bias_data,
                               output_dims,
                               output_data);
    }
}
 8019b98:	4618      	mov	r0, r3
 8019b9a:	3710      	adds	r7, #16
 8019b9c:	46bd      	mov	sp, r7
 8019b9e:	bd80      	pop	{r7, pc}

08019ba0 <arm_convolve_wrapper_s8_get_buffer_size>:

int32_t arm_convolve_wrapper_s8_get_buffer_size(const cmsis_nn_conv_params *conv_params,
                                                const cmsis_nn_dims *input_dims,
                                                const cmsis_nn_dims *filter_dims,
                                                const cmsis_nn_dims *output_dims)
{
 8019ba0:	b580      	push	{r7, lr}
 8019ba2:	b084      	sub	sp, #16
 8019ba4:	af00      	add	r7, sp, #0
 8019ba6:	60f8      	str	r0, [r7, #12]
 8019ba8:	60b9      	str	r1, [r7, #8]
 8019baa:	607a      	str	r2, [r7, #4]
 8019bac:	603b      	str	r3, [r7, #0]
    if ((conv_params->padding.w == 0) && (conv_params->padding.h == 0) && (input_dims->c % 4 == 0) &&
 8019bae:	68fb      	ldr	r3, [r7, #12]
 8019bb0:	691b      	ldr	r3, [r3, #16]
 8019bb2:	2b00      	cmp	r3, #0
 8019bb4:	d11e      	bne.n	8019bf4 <arm_convolve_wrapper_s8_get_buffer_size+0x54>
 8019bb6:	68fb      	ldr	r3, [r7, #12]
 8019bb8:	695b      	ldr	r3, [r3, #20]
 8019bba:	2b00      	cmp	r3, #0
 8019bbc:	d11a      	bne.n	8019bf4 <arm_convolve_wrapper_s8_get_buffer_size+0x54>
 8019bbe:	68bb      	ldr	r3, [r7, #8]
 8019bc0:	68db      	ldr	r3, [r3, #12]
 8019bc2:	f003 0303 	and.w	r3, r3, #3
 8019bc6:	2b00      	cmp	r3, #0
 8019bc8:	d114      	bne.n	8019bf4 <arm_convolve_wrapper_s8_get_buffer_size+0x54>
        (conv_params->stride.w == 1) && (conv_params->stride.h == 1) && (filter_dims->w == 1) && (filter_dims->h == 1))
 8019bca:	68fb      	ldr	r3, [r7, #12]
 8019bcc:	689b      	ldr	r3, [r3, #8]
    if ((conv_params->padding.w == 0) && (conv_params->padding.h == 0) && (input_dims->c % 4 == 0) &&
 8019bce:	2b01      	cmp	r3, #1
 8019bd0:	d110      	bne.n	8019bf4 <arm_convolve_wrapper_s8_get_buffer_size+0x54>
        (conv_params->stride.w == 1) && (conv_params->stride.h == 1) && (filter_dims->w == 1) && (filter_dims->h == 1))
 8019bd2:	68fb      	ldr	r3, [r7, #12]
 8019bd4:	68db      	ldr	r3, [r3, #12]
 8019bd6:	2b01      	cmp	r3, #1
 8019bd8:	d10c      	bne.n	8019bf4 <arm_convolve_wrapper_s8_get_buffer_size+0x54>
 8019bda:	687b      	ldr	r3, [r7, #4]
 8019bdc:	689b      	ldr	r3, [r3, #8]
 8019bde:	2b01      	cmp	r3, #1
 8019be0:	d108      	bne.n	8019bf4 <arm_convolve_wrapper_s8_get_buffer_size+0x54>
 8019be2:	687b      	ldr	r3, [r7, #4]
 8019be4:	685b      	ldr	r3, [r3, #4]
 8019be6:	2b01      	cmp	r3, #1
 8019be8:	d104      	bne.n	8019bf4 <arm_convolve_wrapper_s8_get_buffer_size+0x54>
    {
        return arm_convolve_1x1_s8_fast_get_buffer_size(input_dims);
 8019bea:	68b8      	ldr	r0, [r7, #8]
 8019bec:	f7ff fb72 	bl	80192d4 <arm_convolve_1x1_s8_fast_get_buffer_size>
 8019bf0:	4603      	mov	r3, r0
 8019bf2:	e020      	b.n	8019c36 <arm_convolve_wrapper_s8_get_buffer_size+0x96>
    }
    else if ((output_dims->h == 1) && (input_dims->h == 1) && (filter_dims->h == 1) && (output_dims->w % 4 == 0) &&
 8019bf4:	683b      	ldr	r3, [r7, #0]
 8019bf6:	685b      	ldr	r3, [r3, #4]
 8019bf8:	2b01      	cmp	r3, #1
 8019bfa:	d117      	bne.n	8019c2c <arm_convolve_wrapper_s8_get_buffer_size+0x8c>
 8019bfc:	68bb      	ldr	r3, [r7, #8]
 8019bfe:	685b      	ldr	r3, [r3, #4]
 8019c00:	2b01      	cmp	r3, #1
 8019c02:	d113      	bne.n	8019c2c <arm_convolve_wrapper_s8_get_buffer_size+0x8c>
 8019c04:	687b      	ldr	r3, [r7, #4]
 8019c06:	685b      	ldr	r3, [r3, #4]
 8019c08:	2b01      	cmp	r3, #1
 8019c0a:	d10f      	bne.n	8019c2c <arm_convolve_wrapper_s8_get_buffer_size+0x8c>
 8019c0c:	683b      	ldr	r3, [r7, #0]
 8019c0e:	689b      	ldr	r3, [r3, #8]
 8019c10:	f003 0303 	and.w	r3, r3, #3
 8019c14:	2b00      	cmp	r3, #0
 8019c16:	d109      	bne.n	8019c2c <arm_convolve_wrapper_s8_get_buffer_size+0x8c>
             (input_dims->n == 1))
 8019c18:	68bb      	ldr	r3, [r7, #8]
 8019c1a:	681b      	ldr	r3, [r3, #0]
    else if ((output_dims->h == 1) && (input_dims->h == 1) && (filter_dims->h == 1) && (output_dims->w % 4 == 0) &&
 8019c1c:	2b01      	cmp	r3, #1
 8019c1e:	d105      	bne.n	8019c2c <arm_convolve_wrapper_s8_get_buffer_size+0x8c>
    {
        return arm_convolve_1_x_n_s8_get_buffer_size(input_dims, filter_dims);
 8019c20:	6879      	ldr	r1, [r7, #4]
 8019c22:	68b8      	ldr	r0, [r7, #8]
 8019c24:	f7ff faec 	bl	8019200 <arm_convolve_1_x_n_s8_get_buffer_size>
 8019c28:	4603      	mov	r3, r0
 8019c2a:	e004      	b.n	8019c36 <arm_convolve_wrapper_s8_get_buffer_size+0x96>
    }
    else
    {
        return arm_convolve_s8_get_buffer_size(input_dims, filter_dims);
 8019c2c:	6879      	ldr	r1, [r7, #4]
 8019c2e:	68b8      	ldr	r0, [r7, #8]
 8019c30:	f7ff ff20 	bl	8019a74 <arm_convolve_s8_get_buffer_size>
 8019c34:	4603      	mov	r3, r0
    }
}
 8019c36:	4618      	mov	r0, r3
 8019c38:	3710      	adds	r7, #16
 8019c3a:	46bd      	mov	sp, r7
 8019c3c:	bd80      	pop	{r7, pc}

08019c3e <arm_depthwise_conv_3x3_s8>:
                                     const q7_t *kernel,
                                     const cmsis_nn_dims *bias_dims,
                                     const int32_t *bias,
                                     const cmsis_nn_dims *output_dims,
                                     q7_t *output)
{
 8019c3e:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8019c42:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
 8019c46:	af00      	add	r7, sp, #0
 8019c48:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8019c4c:	6020      	str	r0, [r4, #0]
 8019c4e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8019c52:	6001      	str	r1, [r0, #0]
 8019c54:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8019c58:	600a      	str	r2, [r1, #0]
 8019c5a:	f107 0220 	add.w	r2, r7, #32
 8019c5e:	6013      	str	r3, [r2, #0]
    (void)ctx;
    (void)bias_dims;

    const int32_t input_x = input_dims->w;
 8019c60:	f107 0320 	add.w	r3, r7, #32
 8019c64:	681b      	ldr	r3, [r3, #0]
 8019c66:	689b      	ldr	r3, [r3, #8]
 8019c68:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
    const int32_t input_y = input_dims->h;
 8019c6c:	f107 0320 	add.w	r3, r7, #32
 8019c70:	681b      	ldr	r3, [r3, #0]
 8019c72:	685b      	ldr	r3, [r3, #4]
 8019c74:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
    const int32_t input_ch = input_dims->c;
 8019c78:	f107 0320 	add.w	r3, r7, #32
 8019c7c:	681b      	ldr	r3, [r3, #0]
 8019c7e:	68db      	ldr	r3, [r3, #12]
 8019c80:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
    const int32_t output_ch = output_dims->c;
 8019c84:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8019c88:	68db      	ldr	r3, [r3, #12]
 8019c8a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
    const int32_t pad_x = dw_conv_params->padding.w;
 8019c8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019c92:	681b      	ldr	r3, [r3, #0]
 8019c94:	695b      	ldr	r3, [r3, #20]
 8019c96:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
    const int32_t pad_y = dw_conv_params->padding.h;
 8019c9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019c9e:	681b      	ldr	r3, [r3, #0]
 8019ca0:	699b      	ldr	r3, [r3, #24]
 8019ca2:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
    const int32_t stride_x = dw_conv_params->stride.w;
 8019ca6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019caa:	681b      	ldr	r3, [r3, #0]
 8019cac:	68db      	ldr	r3, [r3, #12]
 8019cae:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
    const int32_t stride_y = dw_conv_params->stride.h;
 8019cb2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019cb6:	681b      	ldr	r3, [r3, #0]
 8019cb8:	691b      	ldr	r3, [r3, #16]
 8019cba:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
    const int32_t *output_shift = quant_params->shift;
 8019cbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8019cc2:	681b      	ldr	r3, [r3, #0]
 8019cc4:	685b      	ldr	r3, [r3, #4]
 8019cc6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
    const int32_t *output_mult = quant_params->multiplier;
 8019cca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8019cce:	681b      	ldr	r3, [r3, #0]
 8019cd0:	681b      	ldr	r3, [r3, #0]
 8019cd2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
    const int32_t output_x = output_dims->w;
 8019cd6:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8019cda:	689b      	ldr	r3, [r3, #8]
 8019cdc:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
    const int32_t output_y = output_dims->h;
 8019ce0:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8019ce4:	685b      	ldr	r3, [r3, #4]
 8019ce6:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
    const int32_t output_offset = dw_conv_params->output_offset;
 8019cea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019cee:	681b      	ldr	r3, [r3, #0]
 8019cf0:	685b      	ldr	r3, [r3, #4]
 8019cf2:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
    const int32_t input_offset = dw_conv_params->input_offset;
 8019cf6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019cfa:	681b      	ldr	r3, [r3, #0]
 8019cfc:	681b      	ldr	r3, [r3, #0]
 8019cfe:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
    const int32_t output_activation_min = dw_conv_params->activation.min;
 8019d02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019d06:	681b      	ldr	r3, [r3, #0]
 8019d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d0a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
    const int32_t output_activation_max = dw_conv_params->activation.max;
 8019d0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019d12:	681b      	ldr	r3, [r3, #0]
 8019d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019d16:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c

    /* Check input constraints input_ch == output_ch */
    if (input_ch != output_ch)
 8019d1a:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8019d1e:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8019d22:	429a      	cmp	r2, r3
 8019d24:	d003      	beq.n	8019d2e <arm_depthwise_conv_3x3_s8+0xf0>
    {
        return ARM_MATH_SIZE_MISMATCH;
 8019d26:	f06f 0302 	mvn.w	r3, #2
 8019d2a:	f000 bf70 	b.w	801ac0e <arm_depthwise_conv_3x3_s8+0xfd0>
    }
    /* Check input constraints pad_x <= 1 */
    if (pad_x > 1 || filter_dims->w != 3 || filter_dims->h != 3)
 8019d2e:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8019d32:	2b01      	cmp	r3, #1
 8019d34:	dc09      	bgt.n	8019d4a <arm_depthwise_conv_3x3_s8+0x10c>
 8019d36:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8019d3a:	689b      	ldr	r3, [r3, #8]
 8019d3c:	2b03      	cmp	r3, #3
 8019d3e:	d104      	bne.n	8019d4a <arm_depthwise_conv_3x3_s8+0x10c>
 8019d40:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8019d44:	685b      	ldr	r3, [r3, #4]
 8019d46:	2b03      	cmp	r3, #3
 8019d48:	d003      	beq.n	8019d52 <arm_depthwise_conv_3x3_s8+0x114>
    {
        return ARM_MATH_ARGUMENT_ERROR;
 8019d4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019d4e:	f000 bf5e 	b.w	801ac0e <arm_depthwise_conv_3x3_s8+0xfd0>
    }

    for (int32_t in_h = -pad_y, out_h = 0, out_idx = 0; out_h < output_y; in_h += stride_y, ++out_h)
 8019d52:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8019d56:	425b      	negs	r3, r3
 8019d58:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8019d5c:	2300      	movs	r3, #0
 8019d5e:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
 8019d62:	2300      	movs	r3, #0
 8019d64:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8019d68:	f000 bf49 	b.w	801abfe <arm_depthwise_conv_3x3_s8+0xfc0>
    {
        for (int32_t in_w = -pad_x, out_w = 0, ker_h_start = MAX(0, -in_h); out_w < output_x; in_w += stride_x, ++out_w)
 8019d6c:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8019d70:	425b      	negs	r3, r3
 8019d72:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 8019d76:	2300      	movs	r3, #0
 8019d78:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 8019d7c:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8019d80:	2b00      	cmp	r3, #0
 8019d82:	dc03      	bgt.n	8019d8c <arm_depthwise_conv_3x3_s8+0x14e>
 8019d84:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8019d88:	425b      	negs	r3, r3
 8019d8a:	e000      	b.n	8019d8e <arm_depthwise_conv_3x3_s8+0x150>
 8019d8c:	2300      	movs	r3, #0
 8019d8e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8019d92:	f000 bf21 	b.w	801abd8 <arm_depthwise_conv_3x3_s8+0xf9a>
        {
            int32_t in_ch = 0;
 8019d96:	2300      	movs	r3, #0
 8019d98:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
            int32_t ker_w_start = MAX(0, -in_w);
 8019d9c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8019da0:	2b00      	cmp	r3, #0
 8019da2:	dc03      	bgt.n	8019dac <arm_depthwise_conv_3x3_s8+0x16e>
 8019da4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8019da8:	425b      	negs	r3, r3
 8019daa:	e000      	b.n	8019dae <arm_depthwise_conv_3x3_s8+0x170>
 8019dac:	2300      	movs	r3, #0
 8019dae:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184

            for (; in_ch <= (input_ch - 4); in_ch += 4)
 8019db2:	f000 bd50 	b.w	801a856 <arm_depthwise_conv_3x3_s8+0xc18>
            {
                int32_t out_buff0 = bias[in_ch + 0];
 8019db6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8019dba:	009b      	lsls	r3, r3, #2
 8019dbc:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 8019dc0:	4413      	add	r3, r2
 8019dc2:	681b      	ldr	r3, [r3, #0]
 8019dc4:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
                int32_t out_buff1 = bias[in_ch + 1];
 8019dc8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8019dcc:	3301      	adds	r3, #1
 8019dce:	009b      	lsls	r3, r3, #2
 8019dd0:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 8019dd4:	4413      	add	r3, r2
 8019dd6:	681b      	ldr	r3, [r3, #0]
 8019dd8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
                int32_t out_buff2 = bias[in_ch + 2];
 8019ddc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8019de0:	3302      	adds	r3, #2
 8019de2:	009b      	lsls	r3, r3, #2
 8019de4:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 8019de8:	4413      	add	r3, r2
 8019dea:	681b      	ldr	r3, [r3, #0]
 8019dec:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
                int32_t out_buff3 = bias[in_ch + 3];
 8019df0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8019df4:	3303      	adds	r3, #3
 8019df6:	009b      	lsls	r3, r3, #2
 8019df8:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 8019dfc:	4413      	add	r3, r2
 8019dfe:	681b      	ldr	r3, [r3, #0]
 8019e00:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8

                const int8_t *input_ptr = input + (in_h + ker_h_start) * (input_ch * input_x) + in_w * input_ch + in_ch;
 8019e04:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 8019e08:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8019e0c:	4413      	add	r3, r2
 8019e0e:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8019e12:	f8d7 11c8 	ldr.w	r1, [r7, #456]	; 0x1c8
 8019e16:	fb01 f202 	mul.w	r2, r1, r2
 8019e1a:	fb02 f303 	mul.w	r3, r2, r3
 8019e1e:	4619      	mov	r1, r3
 8019e20:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8019e24:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8019e28:	fb02 f303 	mul.w	r3, r2, r3
 8019e2c:	18ca      	adds	r2, r1, r3
 8019e2e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8019e32:	4413      	add	r3, r2
 8019e34:	f8d7 2230 	ldr.w	r2, [r7, #560]	; 0x230
 8019e38:	4413      	add	r3, r2
 8019e3a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
                const int8_t *kernel_ptr = kernel + ker_h_start * (input_ch * 3) + in_ch;
 8019e3e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8019e42:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 8019e46:	fb02 f203 	mul.w	r2, r2, r3
 8019e4a:	4613      	mov	r3, r2
 8019e4c:	005b      	lsls	r3, r3, #1
 8019e4e:	4413      	add	r3, r2
 8019e50:	461a      	mov	r2, r3
 8019e52:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8019e56:	4413      	add	r3, r2
 8019e58:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8019e5c:	4413      	add	r3, r2
 8019e5e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0

                for (int32_t ker_h = ker_h_start; ker_h < MIN(3, input_y - in_h); ++ker_h)
 8019e62:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8019e66:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8019e6a:	e17a      	b.n	801a162 <arm_depthwise_conv_3x3_s8+0x524>
                {
                    int32_t in_val = 0;
 8019e6c:	2300      	movs	r3, #0
 8019e6e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
                    int32_t ker_val = 0;
 8019e72:	2300      	movs	r3, #0
 8019e74:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c

                    if (ker_w_start == 0)
 8019e78:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8019e7c:	2b00      	cmp	r3, #0
 8019e7e:	d169      	bne.n	8019f54 <arm_depthwise_conv_3x3_s8+0x316>
 8019e80:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8019e84:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8019e88:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8019e8c:	681b      	ldr	r3, [r3, #0]
 8019e8e:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 8019e90:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8019e94:	601a      	str	r2, [r3, #0]
    return (val);
 8019e96:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8019e9a:	681b      	ldr	r3, [r3, #0]
                    {
                        in_val = arm_nn_read_q7x4(input_ptr);
 8019e9c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8019ea0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8019ea4:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8019ea8:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8019eac:	681b      	ldr	r3, [r3, #0]
 8019eae:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 8019eb0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8019eb4:	601a      	str	r2, [r3, #0]
    return (val);
 8019eb6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8019eba:	681b      	ldr	r3, [r3, #0]
                        ker_val = arm_nn_read_q7x4(kernel_ptr);
 8019ebc:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c

                        out_buff0 += ((int8_t)in_val + input_offset) * (int8_t)ker_val;
 8019ec0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8019ec4:	b25b      	sxtb	r3, r3
 8019ec6:	461a      	mov	r2, r3
 8019ec8:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8019ecc:	4413      	add	r3, r2
 8019ece:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8019ed2:	b252      	sxtb	r2, r2
 8019ed4:	fb02 f303 	mul.w	r3, r2, r3
 8019ed8:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 8019edc:	4413      	add	r3, r2
 8019ede:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
                        out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8);
 8019ee2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8019ee6:	121b      	asrs	r3, r3, #8
 8019ee8:	b25b      	sxtb	r3, r3
 8019eea:	461a      	mov	r2, r3
 8019eec:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8019ef0:	4413      	add	r3, r2
 8019ef2:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8019ef6:	1212      	asrs	r2, r2, #8
 8019ef8:	b252      	sxtb	r2, r2
 8019efa:	fb02 f303 	mul.w	r3, r2, r3
 8019efe:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 8019f02:	4413      	add	r3, r2
 8019f04:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
                        out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 16);
 8019f08:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8019f0c:	141b      	asrs	r3, r3, #16
 8019f0e:	b25b      	sxtb	r3, r3
 8019f10:	461a      	mov	r2, r3
 8019f12:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8019f16:	4413      	add	r3, r2
 8019f18:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8019f1c:	1412      	asrs	r2, r2, #16
 8019f1e:	b252      	sxtb	r2, r2
 8019f20:	fb02 f303 	mul.w	r3, r2, r3
 8019f24:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 8019f28:	4413      	add	r3, r2
 8019f2a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
                        out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 24);
 8019f2e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8019f32:	161b      	asrs	r3, r3, #24
 8019f34:	b25b      	sxtb	r3, r3
 8019f36:	461a      	mov	r2, r3
 8019f38:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8019f3c:	4413      	add	r3, r2
 8019f3e:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8019f42:	1612      	asrs	r2, r2, #24
 8019f44:	b252      	sxtb	r2, r2
 8019f46:	fb02 f303 	mul.w	r3, r2, r3
 8019f4a:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
 8019f4e:	4413      	add	r3, r2
 8019f50:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
                    }

                    in_val = arm_nn_read_q7x4(input_ptr + input_ch);
 8019f54:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8019f58:	f8d7 21e4 	ldr.w	r2, [r7, #484]	; 0x1e4
 8019f5c:	4413      	add	r3, r2
 8019f5e:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8019f62:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8019f66:	681b      	ldr	r3, [r3, #0]
 8019f68:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 8019f6a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8019f6e:	601a      	str	r2, [r3, #0]
    return (val);
 8019f70:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8019f74:	681b      	ldr	r3, [r3, #0]
 8019f76:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
                    ker_val = arm_nn_read_q7x4(kernel_ptr + input_ch);
 8019f7a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8019f7e:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 8019f82:	4413      	add	r3, r2
 8019f84:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8019f88:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8019f8c:	681b      	ldr	r3, [r3, #0]
 8019f8e:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 8019f90:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8019f94:	601a      	str	r2, [r3, #0]
    return (val);
 8019f96:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8019f9a:	681b      	ldr	r3, [r3, #0]
 8019f9c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c

                    out_buff0 += ((int8_t)in_val + input_offset) * (int8_t)ker_val;
 8019fa0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8019fa4:	b25b      	sxtb	r3, r3
 8019fa6:	461a      	mov	r2, r3
 8019fa8:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8019fac:	4413      	add	r3, r2
 8019fae:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8019fb2:	b252      	sxtb	r2, r2
 8019fb4:	fb02 f303 	mul.w	r3, r2, r3
 8019fb8:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 8019fbc:	4413      	add	r3, r2
 8019fbe:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
                    out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8);
 8019fc2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8019fc6:	121b      	asrs	r3, r3, #8
 8019fc8:	b25b      	sxtb	r3, r3
 8019fca:	461a      	mov	r2, r3
 8019fcc:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8019fd0:	4413      	add	r3, r2
 8019fd2:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8019fd6:	1212      	asrs	r2, r2, #8
 8019fd8:	b252      	sxtb	r2, r2
 8019fda:	fb02 f303 	mul.w	r3, r2, r3
 8019fde:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 8019fe2:	4413      	add	r3, r2
 8019fe4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
                    out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 16);
 8019fe8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8019fec:	141b      	asrs	r3, r3, #16
 8019fee:	b25b      	sxtb	r3, r3
 8019ff0:	461a      	mov	r2, r3
 8019ff2:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8019ff6:	4413      	add	r3, r2
 8019ff8:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8019ffc:	1412      	asrs	r2, r2, #16
 8019ffe:	b252      	sxtb	r2, r2
 801a000:	fb02 f303 	mul.w	r3, r2, r3
 801a004:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 801a008:	4413      	add	r3, r2
 801a00a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
                    out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 24);
 801a00e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 801a012:	161b      	asrs	r3, r3, #24
 801a014:	b25b      	sxtb	r3, r3
 801a016:	461a      	mov	r2, r3
 801a018:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 801a01c:	4413      	add	r3, r2
 801a01e:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 801a022:	1612      	asrs	r2, r2, #24
 801a024:	b252      	sxtb	r2, r2
 801a026:	fb02 f303 	mul.w	r3, r2, r3
 801a02a:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
 801a02e:	4413      	add	r3, r2
 801a030:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8

                    if ((input_x - in_w) >= 3)
 801a034:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 801a038:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 801a03c:	1ad3      	subs	r3, r2, r3
 801a03e:	2b02      	cmp	r3, #2
 801a040:	dd73      	ble.n	801a12a <arm_depthwise_conv_3x3_s8+0x4ec>
                    {
                        in_val = arm_nn_read_q7x4(input_ptr + (input_ch << 1));
 801a042:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 801a046:	005b      	lsls	r3, r3, #1
 801a048:	461a      	mov	r2, r3
 801a04a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 801a04e:	4413      	add	r3, r2
 801a050:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 801a054:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 801a058:	681b      	ldr	r3, [r3, #0]
 801a05a:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801a05c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a060:	601a      	str	r2, [r3, #0]
    return (val);
 801a062:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801a066:	681b      	ldr	r3, [r3, #0]
 801a068:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
                        ker_val = arm_nn_read_q7x4(kernel_ptr + (input_ch << 1));
 801a06c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 801a070:	005b      	lsls	r3, r3, #1
 801a072:	461a      	mov	r2, r3
 801a074:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 801a078:	4413      	add	r3, r2
 801a07a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 801a07e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 801a082:	681b      	ldr	r3, [r3, #0]
 801a084:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801a086:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801a08a:	601a      	str	r2, [r3, #0]
    return (val);
 801a08c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801a090:	681b      	ldr	r3, [r3, #0]
 801a092:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c

                        out_buff0 += ((int8_t)in_val + input_offset) * (int8_t)ker_val;
 801a096:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 801a09a:	b25b      	sxtb	r3, r3
 801a09c:	461a      	mov	r2, r3
 801a09e:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 801a0a2:	4413      	add	r3, r2
 801a0a4:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 801a0a8:	b252      	sxtb	r2, r2
 801a0aa:	fb02 f303 	mul.w	r3, r2, r3
 801a0ae:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 801a0b2:	4413      	add	r3, r2
 801a0b4:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
                        out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8);
 801a0b8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 801a0bc:	121b      	asrs	r3, r3, #8
 801a0be:	b25b      	sxtb	r3, r3
 801a0c0:	461a      	mov	r2, r3
 801a0c2:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 801a0c6:	4413      	add	r3, r2
 801a0c8:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 801a0cc:	1212      	asrs	r2, r2, #8
 801a0ce:	b252      	sxtb	r2, r2
 801a0d0:	fb02 f303 	mul.w	r3, r2, r3
 801a0d4:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 801a0d8:	4413      	add	r3, r2
 801a0da:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
                        out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 16);
 801a0de:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 801a0e2:	141b      	asrs	r3, r3, #16
 801a0e4:	b25b      	sxtb	r3, r3
 801a0e6:	461a      	mov	r2, r3
 801a0e8:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 801a0ec:	4413      	add	r3, r2
 801a0ee:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 801a0f2:	1412      	asrs	r2, r2, #16
 801a0f4:	b252      	sxtb	r2, r2
 801a0f6:	fb02 f303 	mul.w	r3, r2, r3
 801a0fa:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 801a0fe:	4413      	add	r3, r2
 801a100:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
                        out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 24);
 801a104:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 801a108:	161b      	asrs	r3, r3, #24
 801a10a:	b25b      	sxtb	r3, r3
 801a10c:	461a      	mov	r2, r3
 801a10e:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 801a112:	4413      	add	r3, r2
 801a114:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 801a118:	1612      	asrs	r2, r2, #24
 801a11a:	b252      	sxtb	r2, r2
 801a11c:	fb02 f303 	mul.w	r3, r2, r3
 801a120:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
 801a124:	4413      	add	r3, r2
 801a126:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
                    }

                    input_ptr += (input_ch * input_x);
 801a12a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 801a12e:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 801a132:	fb02 f303 	mul.w	r3, r2, r3
 801a136:	461a      	mov	r2, r3
 801a138:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 801a13c:	4413      	add	r3, r2
 801a13e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
                    kernel_ptr += (input_ch * 3);
 801a142:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 801a146:	4613      	mov	r3, r2
 801a148:	005b      	lsls	r3, r3, #1
 801a14a:	4413      	add	r3, r2
 801a14c:	461a      	mov	r2, r3
 801a14e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 801a152:	4413      	add	r3, r2
 801a154:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
                for (int32_t ker_h = ker_h_start; ker_h < MIN(3, input_y - in_h); ++ker_h)
 801a158:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 801a15c:	3301      	adds	r3, #1
 801a15e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 801a162:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 801a166:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 801a16a:	1ad3      	subs	r3, r2, r3
 801a16c:	2b03      	cmp	r3, #3
 801a16e:	bfa8      	it	ge
 801a170:	2303      	movge	r3, #3
 801a172:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 801a176:	429a      	cmp	r2, r3
 801a178:	f6ff ae78 	blt.w	8019e6c <arm_depthwise_conv_3x3_s8+0x22e>
                }

                out_buff0 = arm_nn_requantize(out_buff0, output_mult[in_ch + 0], output_shift[in_ch + 0]);
 801a17c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801a180:	009b      	lsls	r3, r3, #2
 801a182:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 801a186:	4413      	add	r3, r2
 801a188:	6819      	ldr	r1, [r3, #0]
 801a18a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801a18e:	009b      	lsls	r3, r3, #2
 801a190:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 801a194:	4413      	add	r3, r2
 801a196:	681a      	ldr	r2, [r3, #0]
 801a198:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801a19c:	f8d7 01f4 	ldr.w	r0, [r7, #500]	; 0x1f4
 801a1a0:	6018      	str	r0, [r3, #0]
 801a1a2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801a1a6:	6019      	str	r1, [r3, #0]
 801a1a8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801a1ac:	601a      	str	r2, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801a1ae:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801a1b2:	681b      	ldr	r3, [r3, #0]
 801a1b4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a1b8:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 801a1bc:	6812      	ldr	r2, [r2, #0]
 801a1be:	409a      	lsls	r2, r3
 801a1c0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 801a1c4:	601a      	str	r2, [r3, #0]
 801a1c6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801a1ca:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 801a1ce:	6812      	ldr	r2, [r2, #0]
 801a1d0:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801a1d2:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801a1d6:	2200      	movs	r2, #0
 801a1d8:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 801a1da:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801a1de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801a1e2:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 801a1e4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801a1e8:	2200      	movs	r2, #0
 801a1ea:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801a1ec:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 801a1f0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 801a1f4:	681b      	ldr	r3, [r3, #0]
 801a1f6:	4618      	mov	r0, r3
 801a1f8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801a1fc:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801a200:	681b      	ldr	r3, [r3, #0]
 801a202:	461a      	mov	r2, r3
 801a204:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801a208:	fb02 f501 	mul.w	r5, r2, r1
 801a20c:	fb00 f403 	mul.w	r4, r0, r3
 801a210:	442c      	add	r4, r5
 801a212:	fba0 2302 	umull	r2, r3, r0, r2
 801a216:	18e1      	adds	r1, r4, r3
 801a218:	460b      	mov	r3, r1
 801a21a:	eb18 0102 	adds.w	r1, r8, r2
 801a21e:	60b9      	str	r1, [r7, #8]
 801a220:	eb49 0303 	adc.w	r3, r9, r3
 801a224:	60fb      	str	r3, [r7, #12]
 801a226:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 801a22a:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
    result = (int32_t)(mult.long_long >> 31);
 801a22e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 801a232:	f04f 0200 	mov.w	r2, #0
 801a236:	f04f 0300 	mov.w	r3, #0
 801a23a:	0fc2      	lsrs	r2, r0, #31
 801a23c:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801a240:	17cb      	asrs	r3, r1, #31
 801a242:	f107 01bc 	add.w	r1, r7, #188	; 0xbc
 801a246:	4613      	mov	r3, r2
 801a248:	600b      	str	r3, [r1, #0]
    return result;
 801a24a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801a24e:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801a250:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801a254:	681b      	ldr	r3, [r3, #0]
 801a256:	2b00      	cmp	r3, #0
 801a258:	dc04      	bgt.n	801a264 <arm_depthwise_conv_3x3_s8+0x626>
 801a25a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801a25e:	681b      	ldr	r3, [r3, #0]
 801a260:	425b      	negs	r3, r3
 801a262:	e000      	b.n	801a266 <arm_depthwise_conv_3x3_s8+0x628>
 801a264:	2300      	movs	r3, #0
 801a266:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 801a26a:	6011      	str	r1, [r2, #0]
 801a26c:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 801a270:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801a272:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801a276:	2200      	movs	r2, #0
 801a278:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801a27a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 801a27e:	2201      	movs	r2, #1
 801a280:	681b      	ldr	r3, [r3, #0]
 801a282:	409a      	lsls	r2, r3
 801a284:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 801a288:	3a01      	subs	r2, #1
 801a28a:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 801a28c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801a290:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 801a294:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 801a298:	6809      	ldr	r1, [r1, #0]
 801a29a:	6812      	ldr	r2, [r2, #0]
 801a29c:	400a      	ands	r2, r1
 801a29e:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 801a2a0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801a2a4:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 801a2a8:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 801a2ac:	6809      	ldr	r1, [r1, #0]
 801a2ae:	6812      	ldr	r2, [r2, #0]
 801a2b0:	fa41 f202 	asr.w	r2, r1, r2
 801a2b4:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 801a2b6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801a2ba:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 801a2be:	6812      	ldr	r2, [r2, #0]
 801a2c0:	1052      	asrs	r2, r2, #1
 801a2c2:	601a      	str	r2, [r3, #0]
    if (result < 0)
 801a2c4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801a2c8:	681b      	ldr	r3, [r3, #0]
 801a2ca:	2b00      	cmp	r3, #0
 801a2cc:	da06      	bge.n	801a2dc <arm_depthwise_conv_3x3_s8+0x69e>
        threshold++;
 801a2ce:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801a2d2:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 801a2d6:	6812      	ldr	r2, [r2, #0]
 801a2d8:	3201      	adds	r2, #1
 801a2da:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 801a2dc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 801a2e0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801a2e4:	6812      	ldr	r2, [r2, #0]
 801a2e6:	681b      	ldr	r3, [r3, #0]
 801a2e8:	429a      	cmp	r2, r3
 801a2ea:	dd06      	ble.n	801a2fa <arm_depthwise_conv_3x3_s8+0x6bc>
        result++;
 801a2ec:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801a2f0:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 801a2f4:	6812      	ldr	r2, [r2, #0]
 801a2f6:	3201      	adds	r2, #1
 801a2f8:	601a      	str	r2, [r3, #0]
    return result;
 801a2fa:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801a2fe:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801a300:	bf00      	nop
 801a302:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
                out_buff1 = arm_nn_requantize(out_buff1, output_mult[in_ch + 1], output_shift[in_ch + 1]);
 801a306:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801a30a:	3301      	adds	r3, #1
 801a30c:	009b      	lsls	r3, r3, #2
 801a30e:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 801a312:	4413      	add	r3, r2
 801a314:	6819      	ldr	r1, [r3, #0]
 801a316:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801a31a:	3301      	adds	r3, #1
 801a31c:	009b      	lsls	r3, r3, #2
 801a31e:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 801a322:	4413      	add	r3, r2
 801a324:	681a      	ldr	r2, [r3, #0]
 801a326:	f507 7380 	add.w	r3, r7, #256	; 0x100
 801a32a:	f8d7 01f0 	ldr.w	r0, [r7, #496]	; 0x1f0
 801a32e:	6018      	str	r0, [r3, #0]
 801a330:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 801a334:	6019      	str	r1, [r3, #0]
 801a336:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801a33a:	601a      	str	r2, [r3, #0]
 801a33c:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801a340:	681b      	ldr	r3, [r3, #0]
 801a342:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a346:	f507 7280 	add.w	r2, r7, #256	; 0x100
 801a34a:	6812      	ldr	r2, [r2, #0]
 801a34c:	409a      	lsls	r2, r3
 801a34e:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 801a352:	601a      	str	r2, [r3, #0]
 801a354:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801a358:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 801a35c:	6812      	ldr	r2, [r2, #0]
 801a35e:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801a360:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 801a364:	2200      	movs	r2, #0
 801a366:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 801a368:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801a36c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801a370:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 801a372:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801a376:	2200      	movs	r2, #0
 801a378:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801a37a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 801a37e:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 801a382:	681b      	ldr	r3, [r3, #0]
 801a384:	4618      	mov	r0, r3
 801a386:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801a38a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801a38e:	681b      	ldr	r3, [r3, #0]
 801a390:	461a      	mov	r2, r3
 801a392:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801a396:	fb02 f501 	mul.w	r5, r2, r1
 801a39a:	fb00 f403 	mul.w	r4, r0, r3
 801a39e:	442c      	add	r4, r5
 801a3a0:	fba0 2302 	umull	r2, r3, r0, r2
 801a3a4:	18e1      	adds	r1, r4, r3
 801a3a6:	460b      	mov	r3, r1
 801a3a8:	eb18 0102 	adds.w	r1, r8, r2
 801a3ac:	6139      	str	r1, [r7, #16]
 801a3ae:	eb49 0303 	adc.w	r3, r9, r3
 801a3b2:	617b      	str	r3, [r7, #20]
 801a3b4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 801a3b8:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
    result = (int32_t)(mult.long_long >> 31);
 801a3bc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 801a3c0:	f04f 0200 	mov.w	r2, #0
 801a3c4:	f04f 0300 	mov.w	r3, #0
 801a3c8:	0fc2      	lsrs	r2, r0, #31
 801a3ca:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801a3ce:	17cb      	asrs	r3, r1, #31
 801a3d0:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 801a3d4:	4613      	mov	r3, r2
 801a3d6:	600b      	str	r3, [r1, #0]
    return result;
 801a3d8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 801a3dc:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801a3de:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801a3e2:	681b      	ldr	r3, [r3, #0]
 801a3e4:	2b00      	cmp	r3, #0
 801a3e6:	dc04      	bgt.n	801a3f2 <arm_depthwise_conv_3x3_s8+0x7b4>
 801a3e8:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801a3ec:	681b      	ldr	r3, [r3, #0]
 801a3ee:	425b      	negs	r3, r3
 801a3f0:	e000      	b.n	801a3f4 <arm_depthwise_conv_3x3_s8+0x7b6>
 801a3f2:	2300      	movs	r3, #0
 801a3f4:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 801a3f8:	6011      	str	r1, [r2, #0]
 801a3fa:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 801a3fe:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801a400:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801a404:	2200      	movs	r2, #0
 801a406:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801a408:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 801a40c:	2201      	movs	r2, #1
 801a40e:	681b      	ldr	r3, [r3, #0]
 801a410:	409a      	lsls	r2, r3
 801a412:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 801a416:	3a01      	subs	r2, #1
 801a418:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 801a41a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801a41e:	f107 01e8 	add.w	r1, r7, #232	; 0xe8
 801a422:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 801a426:	6809      	ldr	r1, [r1, #0]
 801a428:	6812      	ldr	r2, [r2, #0]
 801a42a:	400a      	ands	r2, r1
 801a42c:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 801a42e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801a432:	f107 01e8 	add.w	r1, r7, #232	; 0xe8
 801a436:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 801a43a:	6809      	ldr	r1, [r1, #0]
 801a43c:	6812      	ldr	r2, [r2, #0]
 801a43e:	fa41 f202 	asr.w	r2, r1, r2
 801a442:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 801a444:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 801a448:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 801a44c:	6812      	ldr	r2, [r2, #0]
 801a44e:	1052      	asrs	r2, r2, #1
 801a450:	601a      	str	r2, [r3, #0]
    if (result < 0)
 801a452:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801a456:	681b      	ldr	r3, [r3, #0]
 801a458:	2b00      	cmp	r3, #0
 801a45a:	da06      	bge.n	801a46a <arm_depthwise_conv_3x3_s8+0x82c>
        threshold++;
 801a45c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 801a460:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 801a464:	6812      	ldr	r2, [r2, #0]
 801a466:	3201      	adds	r2, #1
 801a468:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 801a46a:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 801a46e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 801a472:	6812      	ldr	r2, [r2, #0]
 801a474:	681b      	ldr	r3, [r3, #0]
 801a476:	429a      	cmp	r2, r3
 801a478:	dd06      	ble.n	801a488 <arm_depthwise_conv_3x3_s8+0x84a>
        result++;
 801a47a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801a47e:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 801a482:	6812      	ldr	r2, [r2, #0]
 801a484:	3201      	adds	r2, #1
 801a486:	601a      	str	r2, [r3, #0]
    return result;
 801a488:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801a48c:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801a48e:	bf00      	nop
 801a490:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
                out_buff2 = arm_nn_requantize(out_buff2, output_mult[in_ch + 2], output_shift[in_ch + 2]);
 801a494:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801a498:	3302      	adds	r3, #2
 801a49a:	009b      	lsls	r3, r3, #2
 801a49c:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 801a4a0:	4413      	add	r3, r2
 801a4a2:	681a      	ldr	r2, [r3, #0]
 801a4a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801a4a8:	3302      	adds	r3, #2
 801a4aa:	009b      	lsls	r3, r3, #2
 801a4ac:	f8d7 11a8 	ldr.w	r1, [r7, #424]	; 0x1a8
 801a4b0:	440b      	add	r3, r1
 801a4b2:	681b      	ldr	r3, [r3, #0]
 801a4b4:	f8d7 11ec 	ldr.w	r1, [r7, #492]	; 0x1ec
 801a4b8:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 801a4bc:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 801a4c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801a4c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801a4c8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a4cc:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 801a4d0:	fa02 f303 	lsl.w	r3, r2, r3
 801a4d4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 801a4d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801a4dc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    q31_t result = 0;
 801a4e0:	2300      	movs	r3, #0
 801a4e2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    mult.word.low = 1 << 30;
 801a4e6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801a4ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801a4ee:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 801a4f0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801a4f4:	2200      	movs	r2, #0
 801a4f6:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801a4f8:	e9d7 8916 	ldrd	r8, r9, [r7, #88]	; 0x58
 801a4fc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801a500:	4618      	mov	r0, r3
 801a502:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801a506:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801a50a:	461a      	mov	r2, r3
 801a50c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801a510:	fb02 f501 	mul.w	r5, r2, r1
 801a514:	fb00 f403 	mul.w	r4, r0, r3
 801a518:	442c      	add	r4, r5
 801a51a:	fba0 2302 	umull	r2, r3, r0, r2
 801a51e:	18e1      	adds	r1, r4, r3
 801a520:	460b      	mov	r3, r1
 801a522:	eb18 0102 	adds.w	r1, r8, r2
 801a526:	61b9      	str	r1, [r7, #24]
 801a528:	eb49 0303 	adc.w	r3, r9, r3
 801a52c:	61fb      	str	r3, [r7, #28]
 801a52e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 801a532:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
    result = (int32_t)(mult.long_long >> 31);
 801a536:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 801a53a:	f04f 0200 	mov.w	r2, #0
 801a53e:	f04f 0300 	mov.w	r3, #0
 801a542:	0fc2      	lsrs	r2, r0, #31
 801a544:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801a548:	17cb      	asrs	r3, r1, #31
 801a54a:	4613      	mov	r3, r2
 801a54c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    return result;
 801a550:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801a554:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801a558:	2b00      	cmp	r3, #0
 801a55a:	dc03      	bgt.n	801a564 <arm_depthwise_conv_3x3_s8+0x926>
 801a55c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801a560:	425b      	negs	r3, r3
 801a562:	e000      	b.n	801a566 <arm_depthwise_conv_3x3_s8+0x928>
 801a564:	2300      	movs	r3, #0
 801a566:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 801a56a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    q31_t result = 0;
 801a56e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801a572:	2200      	movs	r2, #0
 801a574:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801a576:	2201      	movs	r2, #1
 801a578:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801a57c:	409a      	lsls	r2, r3
 801a57e:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 801a582:	3a01      	subs	r2, #1
 801a584:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 801a586:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801a58a:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 801a58e:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 801a592:	6812      	ldr	r2, [r2, #0]
 801a594:	400a      	ands	r2, r1
 801a596:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 801a598:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801a59c:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 801a5a0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801a5a4:	fa41 f202 	asr.w	r2, r1, r2
 801a5a8:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 801a5aa:	f507 7382 	add.w	r3, r7, #260	; 0x104
 801a5ae:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 801a5b2:	6812      	ldr	r2, [r2, #0]
 801a5b4:	1052      	asrs	r2, r2, #1
 801a5b6:	601a      	str	r2, [r3, #0]
    if (result < 0)
 801a5b8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801a5bc:	681b      	ldr	r3, [r3, #0]
 801a5be:	2b00      	cmp	r3, #0
 801a5c0:	da06      	bge.n	801a5d0 <arm_depthwise_conv_3x3_s8+0x992>
        threshold++;
 801a5c2:	f507 7382 	add.w	r3, r7, #260	; 0x104
 801a5c6:	f507 7282 	add.w	r2, r7, #260	; 0x104
 801a5ca:	6812      	ldr	r2, [r2, #0]
 801a5cc:	3201      	adds	r2, #1
 801a5ce:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 801a5d0:	f507 7284 	add.w	r2, r7, #264	; 0x108
 801a5d4:	f507 7382 	add.w	r3, r7, #260	; 0x104
 801a5d8:	6812      	ldr	r2, [r2, #0]
 801a5da:	681b      	ldr	r3, [r3, #0]
 801a5dc:	429a      	cmp	r2, r3
 801a5de:	dd06      	ble.n	801a5ee <arm_depthwise_conv_3x3_s8+0x9b0>
        result++;
 801a5e0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801a5e4:	f507 7288 	add.w	r2, r7, #272	; 0x110
 801a5e8:	6812      	ldr	r2, [r2, #0]
 801a5ea:	3201      	adds	r2, #1
 801a5ec:	601a      	str	r2, [r3, #0]
    return result;
 801a5ee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801a5f2:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801a5f4:	bf00      	nop
 801a5f6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
                out_buff3 = arm_nn_requantize(out_buff3, output_mult[in_ch + 3], output_shift[in_ch + 3]);
 801a5fa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801a5fe:	3303      	adds	r3, #3
 801a600:	009b      	lsls	r3, r3, #2
 801a602:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 801a606:	4413      	add	r3, r2
 801a608:	681a      	ldr	r2, [r3, #0]
 801a60a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801a60e:	3303      	adds	r3, #3
 801a610:	009b      	lsls	r3, r3, #2
 801a612:	f8d7 11a8 	ldr.w	r1, [r7, #424]	; 0x1a8
 801a616:	440b      	add	r3, r1
 801a618:	681b      	ldr	r3, [r3, #0]
 801a61a:	f8d7 11e8 	ldr.w	r1, [r7, #488]	; 0x1e8
 801a61e:	f8c7 1160 	str.w	r1, [r7, #352]	; 0x160
 801a622:	f8c7 215c 	str.w	r2, [r7, #348]	; 0x15c
 801a626:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 801a62a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 801a62e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a632:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 801a636:	fa02 f303 	lsl.w	r3, r2, r3
 801a63a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 801a63e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 801a642:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
    q31_t result = 0;
 801a646:	2300      	movs	r3, #0
 801a648:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    mult.word.low = 1 << 30;
 801a64c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801a650:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801a654:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 801a656:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801a65a:	2200      	movs	r2, #0
 801a65c:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801a65e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 801a662:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 801a666:	4618      	mov	r0, r3
 801a668:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801a66c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 801a670:	461a      	mov	r2, r3
 801a672:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801a676:	fb02 f501 	mul.w	r5, r2, r1
 801a67a:	fb00 f403 	mul.w	r4, r0, r3
 801a67e:	442c      	add	r4, r5
 801a680:	fba0 2302 	umull	r2, r3, r0, r2
 801a684:	18e1      	adds	r1, r4, r3
 801a686:	460b      	mov	r3, r1
 801a688:	eb18 0a02 	adds.w	sl, r8, r2
 801a68c:	eb49 0b03 	adc.w	fp, r9, r3
 801a690:	e9c7 ab14 	strd	sl, fp, [r7, #80]	; 0x50
    result = (int32_t)(mult.long_long >> 31);
 801a694:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 801a698:	f04f 0200 	mov.w	r2, #0
 801a69c:	f04f 0300 	mov.w	r3, #0
 801a6a0:	0fc2      	lsrs	r2, r0, #31
 801a6a2:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801a6a6:	17cb      	asrs	r3, r1, #31
 801a6a8:	4613      	mov	r3, r2
 801a6aa:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    return result;
 801a6ae:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801a6b2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 801a6b6:	2b00      	cmp	r3, #0
 801a6b8:	dc03      	bgt.n	801a6c2 <arm_depthwise_conv_3x3_s8+0xa84>
 801a6ba:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 801a6be:	425b      	negs	r3, r3
 801a6c0:	e000      	b.n	801a6c4 <arm_depthwise_conv_3x3_s8+0xa86>
 801a6c2:	2300      	movs	r3, #0
 801a6c4:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 801a6c8:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    q31_t result = 0;
 801a6cc:	2300      	movs	r3, #0
 801a6ce:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    const q31_t remainder_mask = (1 << exponent) - 1;
 801a6d2:	2201      	movs	r2, #1
 801a6d4:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 801a6d8:	fa02 f303 	lsl.w	r3, r2, r3
 801a6dc:	3b01      	subs	r3, #1
 801a6de:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    int32_t remainder = remainder_mask & dividend;
 801a6e2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 801a6e6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801a6ea:	4013      	ands	r3, r2
 801a6ec:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    result = dividend >> exponent;
 801a6f0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 801a6f4:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 801a6f8:	fa42 f303 	asr.w	r3, r2, r3
 801a6fc:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    q31_t threshold = remainder_mask >> 1;
 801a700:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801a704:	105b      	asrs	r3, r3, #1
 801a706:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    if (result < 0)
 801a70a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 801a70e:	2b00      	cmp	r3, #0
 801a710:	da04      	bge.n	801a71c <arm_depthwise_conv_3x3_s8+0xade>
        threshold++;
 801a712:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801a716:	3301      	adds	r3, #1
 801a718:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    if (remainder > threshold)
 801a71c:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 801a720:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801a724:	429a      	cmp	r2, r3
 801a726:	dd04      	ble.n	801a732 <arm_depthwise_conv_3x3_s8+0xaf4>
        result++;
 801a728:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 801a72c:	3301      	adds	r3, #1
 801a72e:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    return result;
 801a732:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801a736:	bf00      	nop
 801a738:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8

                out_buff0 += output_offset;
 801a73c:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 801a740:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 801a744:	4413      	add	r3, r2
 801a746:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
                out_buff1 += output_offset;
 801a74a:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 801a74e:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 801a752:	4413      	add	r3, r2
 801a754:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
                out_buff2 += output_offset;
 801a758:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 801a75c:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 801a760:	4413      	add	r3, r2
 801a762:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
                out_buff3 += output_offset;
 801a766:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
 801a76a:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 801a76e:	4413      	add	r3, r2
 801a770:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8

                out_buff0 = MIN(MAX(out_buff0, output_activation_min), output_activation_max);
 801a774:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 801a778:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 801a77c:	4293      	cmp	r3, r2
 801a77e:	bfb8      	it	lt
 801a780:	4613      	movlt	r3, r2
 801a782:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 801a786:	4293      	cmp	r3, r2
 801a788:	bfa8      	it	ge
 801a78a:	4613      	movge	r3, r2
 801a78c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
                out_buff1 = MIN(MAX(out_buff1, output_activation_min), output_activation_max);
 801a790:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 801a794:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801a798:	4293      	cmp	r3, r2
 801a79a:	bfb8      	it	lt
 801a79c:	4613      	movlt	r3, r2
 801a79e:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 801a7a2:	4293      	cmp	r3, r2
 801a7a4:	bfa8      	it	ge
 801a7a6:	4613      	movge	r3, r2
 801a7a8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
                out_buff2 = MIN(MAX(out_buff2, output_activation_min), output_activation_max);
 801a7ac:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 801a7b0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801a7b4:	4293      	cmp	r3, r2
 801a7b6:	bfb8      	it	lt
 801a7b8:	4613      	movlt	r3, r2
 801a7ba:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 801a7be:	4293      	cmp	r3, r2
 801a7c0:	bfa8      	it	ge
 801a7c2:	4613      	movge	r3, r2
 801a7c4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
                out_buff3 = MIN(MAX(out_buff3, output_activation_min), output_activation_max);
 801a7c8:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 801a7cc:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 801a7d0:	4293      	cmp	r3, r2
 801a7d2:	bfb8      	it	lt
 801a7d4:	4613      	movlt	r3, r2
 801a7d6:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 801a7da:	4293      	cmp	r3, r2
 801a7dc:	bfa8      	it	ge
 801a7de:	4613      	movge	r3, r2
 801a7e0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8

                output[out_idx++] = (int8_t)out_buff0;
 801a7e4:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 801a7e8:	1c5a      	adds	r2, r3, #1
 801a7ea:	f8c7 2204 	str.w	r2, [r7, #516]	; 0x204
 801a7ee:	461a      	mov	r2, r3
 801a7f0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 801a7f4:	4413      	add	r3, r2
 801a7f6:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 801a7fa:	b252      	sxtb	r2, r2
 801a7fc:	701a      	strb	r2, [r3, #0]
                output[out_idx++] = (int8_t)out_buff1;
 801a7fe:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 801a802:	1c5a      	adds	r2, r3, #1
 801a804:	f8c7 2204 	str.w	r2, [r7, #516]	; 0x204
 801a808:	461a      	mov	r2, r3
 801a80a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 801a80e:	4413      	add	r3, r2
 801a810:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 801a814:	b252      	sxtb	r2, r2
 801a816:	701a      	strb	r2, [r3, #0]
                output[out_idx++] = (int8_t)out_buff2;
 801a818:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 801a81c:	1c5a      	adds	r2, r3, #1
 801a81e:	f8c7 2204 	str.w	r2, [r7, #516]	; 0x204
 801a822:	461a      	mov	r2, r3
 801a824:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 801a828:	4413      	add	r3, r2
 801a82a:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 801a82e:	b252      	sxtb	r2, r2
 801a830:	701a      	strb	r2, [r3, #0]
                output[out_idx++] = (int8_t)out_buff3;
 801a832:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 801a836:	1c5a      	adds	r2, r3, #1
 801a838:	f8c7 2204 	str.w	r2, [r7, #516]	; 0x204
 801a83c:	461a      	mov	r2, r3
 801a83e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 801a842:	4413      	add	r3, r2
 801a844:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
 801a848:	b252      	sxtb	r2, r2
 801a84a:	701a      	strb	r2, [r3, #0]
            for (; in_ch <= (input_ch - 4); in_ch += 4)
 801a84c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801a850:	3304      	adds	r3, #4
 801a852:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 801a856:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 801a85a:	3b03      	subs	r3, #3
 801a85c:	f8d7 21f8 	ldr.w	r2, [r7, #504]	; 0x1f8
 801a860:	429a      	cmp	r2, r3
 801a862:	f6ff aaa8 	blt.w	8019db6 <arm_depthwise_conv_3x3_s8+0x178>
            }

            // Leftover
            for (; in_ch < input_ch; ++in_ch)
 801a866:	e1a4      	b.n	801abb2 <arm_depthwise_conv_3x3_s8+0xf74>
            {
                int32_t out_buff = bias[in_ch];
 801a868:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801a86c:	009b      	lsls	r3, r3, #2
 801a86e:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 801a872:	4413      	add	r3, r2
 801a874:	681b      	ldr	r3, [r3, #0]
 801a876:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8

                const int8_t *input_ptr = input + (in_h + ker_h_start) * (input_ch * input_x) + in_w * input_ch + in_ch;
 801a87a:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 801a87e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 801a882:	4413      	add	r3, r2
 801a884:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 801a888:	f8d7 11c8 	ldr.w	r1, [r7, #456]	; 0x1c8
 801a88c:	fb01 f202 	mul.w	r2, r1, r2
 801a890:	fb02 f303 	mul.w	r3, r2, r3
 801a894:	4619      	mov	r1, r3
 801a896:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 801a89a:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 801a89e:	fb02 f303 	mul.w	r3, r2, r3
 801a8a2:	18ca      	adds	r2, r1, r3
 801a8a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801a8a8:	4413      	add	r3, r2
 801a8aa:	f8d7 2230 	ldr.w	r2, [r7, #560]	; 0x230
 801a8ae:	4413      	add	r3, r2
 801a8b0:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
                const int8_t *kernel_ptr = kernel + ker_h_start * (input_ch * 3) + in_ch;
 801a8b4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 801a8b8:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 801a8bc:	fb02 f203 	mul.w	r2, r2, r3
 801a8c0:	4613      	mov	r3, r2
 801a8c2:	005b      	lsls	r3, r3, #1
 801a8c4:	4413      	add	r3, r2
 801a8c6:	461a      	mov	r2, r3
 801a8c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801a8cc:	4413      	add	r3, r2
 801a8ce:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 801a8d2:	4413      	add	r3, r2
 801a8d4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0

                for (int32_t ker_h = ker_h_start; ker_h < MIN(3, input_y - in_h); ++ker_h)
 801a8d8:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 801a8dc:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 801a8e0:	e06f      	b.n	801a9c2 <arm_depthwise_conv_3x3_s8+0xd84>
                {
                    if (ker_w_start == 0)
 801a8e2:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 801a8e6:	2b00      	cmp	r3, #0
 801a8e8:	d112      	bne.n	801a910 <arm_depthwise_conv_3x3_s8+0xcd2>
                    {
                        out_buff += (*(input_ptr) + input_offset) * *(kernel_ptr);
 801a8ea:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 801a8ee:	f993 3000 	ldrsb.w	r3, [r3]
 801a8f2:	461a      	mov	r2, r3
 801a8f4:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 801a8f8:	4413      	add	r3, r2
 801a8fa:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 801a8fe:	f992 2000 	ldrsb.w	r2, [r2]
 801a902:	fb02 f303 	mul.w	r3, r2, r3
 801a906:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 801a90a:	4413      	add	r3, r2
 801a90c:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
                    }

                    out_buff += (*(input_ptr + input_ch) + input_offset) * *(kernel_ptr + input_ch);
 801a910:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 801a914:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 801a918:	4413      	add	r3, r2
 801a91a:	f993 3000 	ldrsb.w	r3, [r3]
 801a91e:	461a      	mov	r2, r3
 801a920:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 801a924:	4413      	add	r3, r2
 801a926:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 801a92a:	f8d7 11d0 	ldr.w	r1, [r7, #464]	; 0x1d0
 801a92e:	440a      	add	r2, r1
 801a930:	f992 2000 	ldrsb.w	r2, [r2]
 801a934:	fb02 f303 	mul.w	r3, r2, r3
 801a938:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 801a93c:	4413      	add	r3, r2
 801a93e:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8

                    if ((input_x - in_w) >= 3)
 801a942:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 801a946:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 801a94a:	1ad3      	subs	r3, r2, r3
 801a94c:	2b02      	cmp	r3, #2
 801a94e:	dd1c      	ble.n	801a98a <arm_depthwise_conv_3x3_s8+0xd4c>
                    {
                        out_buff += (*(input_ptr + (input_ch << 1)) + input_offset) * *(kernel_ptr + (input_ch << 1));
 801a950:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 801a954:	005b      	lsls	r3, r3, #1
 801a956:	461a      	mov	r2, r3
 801a958:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 801a95c:	4413      	add	r3, r2
 801a95e:	f993 3000 	ldrsb.w	r3, [r3]
 801a962:	461a      	mov	r2, r3
 801a964:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 801a968:	4413      	add	r3, r2
 801a96a:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 801a96e:	0052      	lsls	r2, r2, #1
 801a970:	4611      	mov	r1, r2
 801a972:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 801a976:	440a      	add	r2, r1
 801a978:	f992 2000 	ldrsb.w	r2, [r2]
 801a97c:	fb02 f303 	mul.w	r3, r2, r3
 801a980:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 801a984:	4413      	add	r3, r2
 801a986:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
                    }

                    input_ptr += (input_ch * input_x);
 801a98a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 801a98e:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 801a992:	fb02 f303 	mul.w	r3, r2, r3
 801a996:	461a      	mov	r2, r3
 801a998:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 801a99c:	4413      	add	r3, r2
 801a99e:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
                    kernel_ptr += (input_ch * 3);
 801a9a2:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 801a9a6:	4613      	mov	r3, r2
 801a9a8:	005b      	lsls	r3, r3, #1
 801a9aa:	4413      	add	r3, r2
 801a9ac:	461a      	mov	r2, r3
 801a9ae:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 801a9b2:	4413      	add	r3, r2
 801a9b4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
                for (int32_t ker_h = ker_h_start; ker_h < MIN(3, input_y - in_h); ++ker_h)
 801a9b8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 801a9bc:	3301      	adds	r3, #1
 801a9be:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 801a9c2:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 801a9c6:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 801a9ca:	1ad3      	subs	r3, r2, r3
 801a9cc:	2b03      	cmp	r3, #3
 801a9ce:	bfa8      	it	ge
 801a9d0:	2303      	movge	r3, #3
 801a9d2:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 801a9d6:	429a      	cmp	r2, r3
 801a9d8:	db83      	blt.n	801a8e2 <arm_depthwise_conv_3x3_s8+0xca4>
                }

                out_buff = arm_nn_requantize(out_buff, output_mult[in_ch], output_shift[in_ch]);
 801a9da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801a9de:	009b      	lsls	r3, r3, #2
 801a9e0:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 801a9e4:	4413      	add	r3, r2
 801a9e6:	6819      	ldr	r1, [r3, #0]
 801a9e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801a9ec:	009b      	lsls	r3, r3, #2
 801a9ee:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 801a9f2:	4413      	add	r3, r2
 801a9f4:	681a      	ldr	r2, [r3, #0]
 801a9f6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801a9fa:	f8d7 01d8 	ldr.w	r0, [r7, #472]	; 0x1d8
 801a9fe:	6018      	str	r0, [r3, #0]
 801aa00:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 801aa04:	6019      	str	r1, [r3, #0]
 801aa06:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801aa0a:	601a      	str	r2, [r3, #0]
 801aa0c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801aa10:	681b      	ldr	r3, [r3, #0]
 801aa12:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801aa16:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 801aa1a:	6812      	ldr	r2, [r2, #0]
 801aa1c:	409a      	lsls	r2, r3
 801aa1e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801aa22:	601a      	str	r2, [r3, #0]
 801aa24:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801aa28:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 801aa2c:	6812      	ldr	r2, [r2, #0]
 801aa2e:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801aa30:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801aa34:	2200      	movs	r2, #0
 801aa36:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 801aa38:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801aa3c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801aa40:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 801aa42:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801aa46:	2200      	movs	r2, #0
 801aa48:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801aa4a:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	; 0x30
 801aa4e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801aa52:	681b      	ldr	r3, [r3, #0]
 801aa54:	4618      	mov	r0, r3
 801aa56:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801aa5a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801aa5e:	681b      	ldr	r3, [r3, #0]
 801aa60:	461a      	mov	r2, r3
 801aa62:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801aa66:	fb02 f501 	mul.w	r5, r2, r1
 801aa6a:	fb00 f403 	mul.w	r4, r0, r3
 801aa6e:	442c      	add	r4, r5
 801aa70:	fba0 2302 	umull	r2, r3, r0, r2
 801aa74:	18e1      	adds	r1, r4, r3
 801aa76:	460b      	mov	r3, r1
 801aa78:	eb18 0102 	adds.w	r1, r8, r2
 801aa7c:	6039      	str	r1, [r7, #0]
 801aa7e:	eb49 0303 	adc.w	r3, r9, r3
 801aa82:	607b      	str	r3, [r7, #4]
 801aa84:	e9d7 3400 	ldrd	r3, r4, [r7]
 801aa88:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    result = (int32_t)(mult.long_long >> 31);
 801aa8c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 801aa90:	f04f 0200 	mov.w	r2, #0
 801aa94:	f04f 0300 	mov.w	r3, #0
 801aa98:	0fc2      	lsrs	r2, r0, #31
 801aa9a:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801aa9e:	17cb      	asrs	r3, r1, #31
 801aaa0:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 801aaa4:	4613      	mov	r3, r2
 801aaa6:	600b      	str	r3, [r1, #0]
    return result;
 801aaa8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801aaac:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801aaae:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801aab2:	681b      	ldr	r3, [r3, #0]
 801aab4:	2b00      	cmp	r3, #0
 801aab6:	dc04      	bgt.n	801aac2 <arm_depthwise_conv_3x3_s8+0xe84>
 801aab8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801aabc:	681b      	ldr	r3, [r3, #0]
 801aabe:	425b      	negs	r3, r3
 801aac0:	e000      	b.n	801aac4 <arm_depthwise_conv_3x3_s8+0xe86>
 801aac2:	2300      	movs	r3, #0
 801aac4:	f107 0288 	add.w	r2, r7, #136	; 0x88
 801aac8:	6011      	str	r1, [r2, #0]
 801aaca:	f107 0284 	add.w	r2, r7, #132	; 0x84
 801aace:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801aad0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801aad4:	2200      	movs	r2, #0
 801aad6:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801aad8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801aadc:	2201      	movs	r2, #1
 801aade:	681b      	ldr	r3, [r3, #0]
 801aae0:	409a      	lsls	r2, r3
 801aae2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 801aae6:	3a01      	subs	r2, #1
 801aae8:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 801aaea:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801aaee:	f107 0188 	add.w	r1, r7, #136	; 0x88
 801aaf2:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 801aaf6:	6809      	ldr	r1, [r1, #0]
 801aaf8:	6812      	ldr	r2, [r2, #0]
 801aafa:	400a      	ands	r2, r1
 801aafc:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 801aafe:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801ab02:	f107 0188 	add.w	r1, r7, #136	; 0x88
 801ab06:	f107 0284 	add.w	r2, r7, #132	; 0x84
 801ab0a:	6809      	ldr	r1, [r1, #0]
 801ab0c:	6812      	ldr	r2, [r2, #0]
 801ab0e:	fa41 f202 	asr.w	r2, r1, r2
 801ab12:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 801ab14:	f107 0374 	add.w	r3, r7, #116	; 0x74
 801ab18:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 801ab1c:	6812      	ldr	r2, [r2, #0]
 801ab1e:	1052      	asrs	r2, r2, #1
 801ab20:	601a      	str	r2, [r3, #0]
    if (result < 0)
 801ab22:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801ab26:	681b      	ldr	r3, [r3, #0]
 801ab28:	2b00      	cmp	r3, #0
 801ab2a:	da06      	bge.n	801ab3a <arm_depthwise_conv_3x3_s8+0xefc>
        threshold++;
 801ab2c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 801ab30:	f107 0274 	add.w	r2, r7, #116	; 0x74
 801ab34:	6812      	ldr	r2, [r2, #0]
 801ab36:	3201      	adds	r2, #1
 801ab38:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 801ab3a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 801ab3e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 801ab42:	6812      	ldr	r2, [r2, #0]
 801ab44:	681b      	ldr	r3, [r3, #0]
 801ab46:	429a      	cmp	r2, r3
 801ab48:	dd06      	ble.n	801ab58 <arm_depthwise_conv_3x3_s8+0xf1a>
        result++;
 801ab4a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801ab4e:	f107 0280 	add.w	r2, r7, #128	; 0x80
 801ab52:	6812      	ldr	r2, [r2, #0]
 801ab54:	3201      	adds	r2, #1
 801ab56:	601a      	str	r2, [r3, #0]
    return result;
 801ab58:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801ab5c:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801ab5e:	bf00      	nop
 801ab60:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
                out_buff += output_offset;
 801ab64:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 801ab68:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 801ab6c:	4413      	add	r3, r2
 801ab6e:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
                out_buff = MIN(MAX(out_buff, output_activation_min), output_activation_max);
 801ab72:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 801ab76:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 801ab7a:	4293      	cmp	r3, r2
 801ab7c:	bfb8      	it	lt
 801ab7e:	4613      	movlt	r3, r2
 801ab80:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 801ab84:	4293      	cmp	r3, r2
 801ab86:	bfa8      	it	ge
 801ab88:	4613      	movge	r3, r2
 801ab8a:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
                output[out_idx++] = (int8_t)out_buff;
 801ab8e:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 801ab92:	1c5a      	adds	r2, r3, #1
 801ab94:	f8c7 2204 	str.w	r2, [r7, #516]	; 0x204
 801ab98:	461a      	mov	r2, r3
 801ab9a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 801ab9e:	4413      	add	r3, r2
 801aba0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 801aba4:	b252      	sxtb	r2, r2
 801aba6:	701a      	strb	r2, [r3, #0]
            for (; in_ch < input_ch; ++in_ch)
 801aba8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801abac:	3301      	adds	r3, #1
 801abae:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 801abb2:	f8d7 21f8 	ldr.w	r2, [r7, #504]	; 0x1f8
 801abb6:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 801abba:	429a      	cmp	r2, r3
 801abbc:	f6ff ae54 	blt.w	801a868 <arm_depthwise_conv_3x3_s8+0xc2a>
        for (int32_t in_w = -pad_x, out_w = 0, ker_h_start = MAX(0, -in_h); out_w < output_x; in_w += stride_x, ++out_w)
 801abc0:	f8d7 2200 	ldr.w	r2, [r7, #512]	; 0x200
 801abc4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 801abc8:	4413      	add	r3, r2
 801abca:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 801abce:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801abd2:	3301      	adds	r3, #1
 801abd4:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 801abd8:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 801abdc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 801abe0:	429a      	cmp	r2, r3
 801abe2:	f6ff a8d8 	blt.w	8019d96 <arm_depthwise_conv_3x3_s8+0x158>
    for (int32_t in_h = -pad_y, out_h = 0, out_idx = 0; out_h < output_y; in_h += stride_y, ++out_h)
 801abe6:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 801abea:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 801abee:	4413      	add	r3, r2
 801abf0:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 801abf4:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 801abf8:	3301      	adds	r3, #1
 801abfa:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
 801abfe:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 801ac02:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 801ac06:	429a      	cmp	r2, r3
 801ac08:	f6ff a8b0 	blt.w	8019d6c <arm_depthwise_conv_3x3_s8+0x12e>
            }
        }
    }

    /* Return to application */
    return ARM_MATH_SUCCESS;
 801ac0c:	2300      	movs	r3, #0
}
 801ac0e:	4618      	mov	r0, r3
 801ac10:	f507 7705 	add.w	r7, r7, #532	; 0x214
 801ac14:	46bd      	mov	sp, r7
 801ac16:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 801ac1a:	4770      	bx	lr

0801ac1c <depthwise_conv_s8_mult_4>:
                                     const int32_t output_y,
                                     const int32_t output_offset,
                                     const int32_t input_offset,
                                     const int32_t output_activation_min,
                                     const int32_t output_activation_max)
{
 801ac1c:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 801ac20:	b0d7      	sub	sp, #348	; 0x15c
 801ac22:	af00      	add	r7, sp, #0
 801ac24:	f107 0424 	add.w	r4, r7, #36	; 0x24
 801ac28:	6020      	str	r0, [r4, #0]
 801ac2a:	f107 0020 	add.w	r0, r7, #32
 801ac2e:	6001      	str	r1, [r0, #0]
 801ac30:	f107 011c 	add.w	r1, r7, #28
 801ac34:	600a      	str	r2, [r1, #0]
 801ac36:	f107 0218 	add.w	r2, r7, #24
 801ac3a:	6013      	str	r3, [r2, #0]
    for (int32_t in_h = -pad_y, out_h = 0, out_idx = 0; out_h < output_y; in_h += stride_y, ++out_h)
 801ac3c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 801ac40:	425b      	negs	r3, r3
 801ac42:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 801ac46:	2300      	movs	r3, #0
 801ac48:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 801ac4c:	2300      	movs	r3, #0
 801ac4e:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 801ac52:	f000 bcb3 	b.w	801b5bc <depthwise_conv_s8_mult_4+0x9a0>
    {
        for (int32_t in_w = -pad_x, out_w = 0, ker_h_start = MAX(0, -in_h); out_w < output_x; in_w += stride_x, ++out_w)
 801ac56:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 801ac5a:	425b      	negs	r3, r3
 801ac5c:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 801ac60:	2300      	movs	r3, #0
 801ac62:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 801ac66:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 801ac6a:	2b00      	cmp	r3, #0
 801ac6c:	dc03      	bgt.n	801ac76 <depthwise_conv_s8_mult_4+0x5a>
 801ac6e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 801ac72:	425b      	negs	r3, r3
 801ac74:	e000      	b.n	801ac78 <depthwise_conv_s8_mult_4+0x5c>
 801ac76:	2300      	movs	r3, #0
 801ac78:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801ac7c:	f000 bc8b 	b.w	801b596 <depthwise_conv_s8_mult_4+0x97a>
        {
            for (int32_t in_ch = 0, out_ch = 0, ker_w_start = MAX(0, -in_w); out_ch < output_ch;
 801ac80:	2300      	movs	r3, #0
 801ac82:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 801ac86:	2300      	movs	r3, #0
 801ac88:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 801ac8c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801ac90:	2b00      	cmp	r3, #0
 801ac92:	dc03      	bgt.n	801ac9c <depthwise_conv_s8_mult_4+0x80>
 801ac94:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801ac98:	425b      	negs	r3, r3
 801ac9a:	e000      	b.n	801ac9e <depthwise_conv_s8_mult_4+0x82>
 801ac9c:	2300      	movs	r3, #0
 801ac9e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 801aca2:	f000 bc65 	b.w	801b570 <depthwise_conv_s8_mult_4+0x954>
                 ++in_ch, out_ch += ch_mult)
            {
                for (int mult_tile = 0; mult_tile < ch_mult; mult_tile += 4)
 801aca6:	2300      	movs	r3, #0
 801aca8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 801acac:	f000 bc4d 	b.w	801b54a <depthwise_conv_s8_mult_4+0x92e>
                {
                    int32_t out_buff[4];

                    out_buff[0] = bias[out_ch + 0 + mult_tile];
 801acb0:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 801acb4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801acb8:	4413      	add	r3, r2
 801acba:	009b      	lsls	r3, r3, #2
 801acbc:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 801acc0:	4413      	add	r3, r2
 801acc2:	681a      	ldr	r2, [r3, #0]
 801acc4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801acc8:	601a      	str	r2, [r3, #0]
                    out_buff[1] = bias[out_ch + 1 + mult_tile];
 801acca:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801acce:	1c5a      	adds	r2, r3, #1
 801acd0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801acd4:	4413      	add	r3, r2
 801acd6:	009b      	lsls	r3, r3, #2
 801acd8:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 801acdc:	4413      	add	r3, r2
 801acde:	681a      	ldr	r2, [r3, #0]
 801ace0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801ace4:	605a      	str	r2, [r3, #4]
                    out_buff[2] = bias[out_ch + 2 + mult_tile];
 801ace6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801acea:	1c9a      	adds	r2, r3, #2
 801acec:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801acf0:	4413      	add	r3, r2
 801acf2:	009b      	lsls	r3, r3, #2
 801acf4:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 801acf8:	4413      	add	r3, r2
 801acfa:	681a      	ldr	r2, [r3, #0]
 801acfc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801ad00:	609a      	str	r2, [r3, #8]
                    out_buff[3] = bias[out_ch + 3 + mult_tile];
 801ad02:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801ad06:	1cda      	adds	r2, r3, #3
 801ad08:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801ad0c:	4413      	add	r3, r2
 801ad0e:	009b      	lsls	r3, r3, #2
 801ad10:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 801ad14:	4413      	add	r3, r2
 801ad16:	681a      	ldr	r2, [r3, #0]
 801ad18:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801ad1c:	60da      	str	r2, [r3, #12]

                    for (int32_t ker_h = ker_h_start; ker_h < MIN(kernel_y, input_y - in_h); ++ker_h)
 801ad1e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801ad22:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 801ad26:	e0cd      	b.n	801aec4 <depthwise_conv_s8_mult_4+0x2a8>
                    {
                        int32_t ker_idx = ker_h * (output_ch * kernel_x) + ker_w_start * output_ch + out_ch;
 801ad28:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 801ad2c:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 801ad30:	fb02 f303 	mul.w	r3, r2, r3
 801ad34:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 801ad38:	fb02 f203 	mul.w	r2, r2, r3
 801ad3c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801ad40:	f8d7 117c 	ldr.w	r1, [r7, #380]	; 0x17c
 801ad44:	fb01 f303 	mul.w	r3, r1, r3
 801ad48:	4413      	add	r3, r2
 801ad4a:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 801ad4e:	4413      	add	r3, r2
 801ad50:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
                        int32_t in_idx = (in_h + ker_h) * (input_ch * input_x) + in_w * input_ch + in_ch;
 801ad54:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 801ad58:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801ad5c:	4413      	add	r3, r2
 801ad5e:	f107 0218 	add.w	r2, r7, #24
 801ad62:	f107 0120 	add.w	r1, r7, #32
 801ad66:	6812      	ldr	r2, [r2, #0]
 801ad68:	6809      	ldr	r1, [r1, #0]
 801ad6a:	fb01 f202 	mul.w	r2, r1, r2
 801ad6e:	fb02 f203 	mul.w	r2, r2, r3
 801ad72:	f107 0118 	add.w	r1, r7, #24
 801ad76:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801ad7a:	6809      	ldr	r1, [r1, #0]
 801ad7c:	fb01 f303 	mul.w	r3, r1, r3
 801ad80:	4413      	add	r3, r2
 801ad82:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 801ad86:	4413      	add	r3, r2
 801ad88:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

                        for (int32_t ker_w = ker_w_start; ker_w < MIN(kernel_x, input_x - in_w);
 801ad8c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801ad90:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801ad94:	e081      	b.n	801ae9a <depthwise_conv_s8_mult_4+0x27e>
                             ++ker_w, ker_idx += output_ch)
                        {
                            int32_t in_val = input[in_idx + ker_w * input_ch] + input_offset;
 801ad96:	f107 0218 	add.w	r2, r7, #24
 801ad9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801ad9e:	6812      	ldr	r2, [r2, #0]
 801ada0:	fb02 f203 	mul.w	r2, r2, r3
 801ada4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801ada8:	4413      	add	r3, r2
 801adaa:	461a      	mov	r2, r3
 801adac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801adb0:	681b      	ldr	r3, [r3, #0]
 801adb2:	4413      	add	r3, r2
 801adb4:	f993 3000 	ldrsb.w	r3, [r3]
 801adb8:	461a      	mov	r2, r3
 801adba:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 801adbe:	4413      	add	r3, r2
 801adc0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
                            out_buff[0] += in_val * kernel[ker_idx + 0 + mult_tile];
 801adc4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801adc8:	681a      	ldr	r2, [r3, #0]
 801adca:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 801adce:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801add2:	440b      	add	r3, r1
 801add4:	4619      	mov	r1, r3
 801add6:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 801adda:	440b      	add	r3, r1
 801addc:	f993 3000 	ldrsb.w	r3, [r3]
 801ade0:	4619      	mov	r1, r3
 801ade2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801ade6:	fb03 f301 	mul.w	r3, r3, r1
 801adea:	441a      	add	r2, r3
 801adec:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801adf0:	601a      	str	r2, [r3, #0]
                            out_buff[1] += in_val * kernel[ker_idx + 1 + mult_tile];
 801adf2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801adf6:	685a      	ldr	r2, [r3, #4]
 801adf8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 801adfc:	1c59      	adds	r1, r3, #1
 801adfe:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801ae02:	440b      	add	r3, r1
 801ae04:	4619      	mov	r1, r3
 801ae06:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 801ae0a:	440b      	add	r3, r1
 801ae0c:	f993 3000 	ldrsb.w	r3, [r3]
 801ae10:	4619      	mov	r1, r3
 801ae12:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801ae16:	fb03 f301 	mul.w	r3, r3, r1
 801ae1a:	441a      	add	r2, r3
 801ae1c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801ae20:	605a      	str	r2, [r3, #4]
                            out_buff[2] += in_val * kernel[ker_idx + 2 + mult_tile];
 801ae22:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801ae26:	689a      	ldr	r2, [r3, #8]
 801ae28:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 801ae2c:	1c99      	adds	r1, r3, #2
 801ae2e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801ae32:	440b      	add	r3, r1
 801ae34:	4619      	mov	r1, r3
 801ae36:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 801ae3a:	440b      	add	r3, r1
 801ae3c:	f993 3000 	ldrsb.w	r3, [r3]
 801ae40:	4619      	mov	r1, r3
 801ae42:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801ae46:	fb03 f301 	mul.w	r3, r3, r1
 801ae4a:	441a      	add	r2, r3
 801ae4c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801ae50:	609a      	str	r2, [r3, #8]
                            out_buff[3] += in_val * kernel[ker_idx + 3 + mult_tile];
 801ae52:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801ae56:	68da      	ldr	r2, [r3, #12]
 801ae58:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 801ae5c:	1cd9      	adds	r1, r3, #3
 801ae5e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801ae62:	440b      	add	r3, r1
 801ae64:	4619      	mov	r1, r3
 801ae66:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 801ae6a:	440b      	add	r3, r1
 801ae6c:	f993 3000 	ldrsb.w	r3, [r3]
 801ae70:	4619      	mov	r1, r3
 801ae72:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801ae76:	fb03 f301 	mul.w	r3, r3, r1
 801ae7a:	441a      	add	r2, r3
 801ae7c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801ae80:	60da      	str	r2, [r3, #12]
                             ++ker_w, ker_idx += output_ch)
 801ae82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801ae86:	3301      	adds	r3, #1
 801ae88:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801ae8c:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 801ae90:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 801ae94:	4413      	add	r3, r2
 801ae96:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
                        for (int32_t ker_w = ker_w_start; ker_w < MIN(kernel_x, input_x - in_w);
 801ae9a:	f107 0320 	add.w	r3, r7, #32
 801ae9e:	681a      	ldr	r2, [r3, #0]
 801aea0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801aea4:	1ad2      	subs	r2, r2, r3
 801aea6:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 801aeaa:	4293      	cmp	r3, r2
 801aeac:	bfa8      	it	ge
 801aeae:	4613      	movge	r3, r2
 801aeb0:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 801aeb4:	429a      	cmp	r2, r3
 801aeb6:	f6ff af6e 	blt.w	801ad96 <depthwise_conv_s8_mult_4+0x17a>
                    for (int32_t ker_h = ker_h_start; ker_h < MIN(kernel_y, input_y - in_h); ++ker_h)
 801aeba:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801aebe:	3301      	adds	r3, #1
 801aec0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 801aec4:	f107 031c 	add.w	r3, r7, #28
 801aec8:	681a      	ldr	r2, [r3, #0]
 801aeca:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 801aece:	1ad2      	subs	r2, r2, r3
 801aed0:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 801aed4:	4293      	cmp	r3, r2
 801aed6:	bfa8      	it	ge
 801aed8:	4613      	movge	r3, r2
 801aeda:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 801aede:	429a      	cmp	r2, r3
 801aee0:	f6ff af22 	blt.w	801ad28 <depthwise_conv_s8_mult_4+0x10c>
                    res = vmaxq_s32(res, vdupq_n_s32(output_activation_min));
                    res = vminq_s32(res, vdupq_n_s32(output_activation_max));
                    vstrbq_s32(output, res);
                    output += 4;
#else
                    out_buff[0] = arm_nn_requantize(
 801aee4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801aee8:	6819      	ldr	r1, [r3, #0]
                        out_buff[0], output_mult[out_ch + 0 + mult_tile], output_shift[out_ch + 0 + mult_tile]);
 801aeea:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 801aeee:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801aef2:	4413      	add	r3, r2
 801aef4:	009b      	lsls	r3, r3, #2
 801aef6:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 801aefa:	4413      	add	r3, r2
                    out_buff[0] = arm_nn_requantize(
 801aefc:	681a      	ldr	r2, [r3, #0]
                        out_buff[0], output_mult[out_ch + 0 + mult_tile], output_shift[out_ch + 0 + mult_tile]);
 801aefe:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 801af02:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801af06:	4403      	add	r3, r0
 801af08:	009b      	lsls	r3, r3, #2
 801af0a:	f8d7 01a4 	ldr.w	r0, [r7, #420]	; 0x1a4
 801af0e:	4403      	add	r3, r0
                    out_buff[0] = arm_nn_requantize(
 801af10:	681b      	ldr	r3, [r3, #0]
 801af12:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 801af16:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 801af1a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801af1e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801af22:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801af26:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801af2a:	fa02 f303 	lsl.w	r3, r2, r3
 801af2e:	67fb      	str	r3, [r7, #124]	; 0x7c
 801af30:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801af34:	67bb      	str	r3, [r7, #120]	; 0x78
    q31_t result = 0;
 801af36:	2300      	movs	r3, #0
 801af38:	677b      	str	r3, [r7, #116]	; 0x74
    mult.word.low = 1 << 30;
 801af3a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801af3e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801af42:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 801af44:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801af48:	2200      	movs	r2, #0
 801af4a:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801af4c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 801af50:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801af52:	461a      	mov	r2, r3
 801af54:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801af58:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 801af5a:	4608      	mov	r0, r1
 801af5c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801af60:	fb00 f503 	mul.w	r5, r0, r3
 801af64:	fb02 f401 	mul.w	r4, r2, r1
 801af68:	442c      	add	r4, r5
 801af6a:	fba2 2300 	umull	r2, r3, r2, r0
 801af6e:	18e1      	adds	r1, r4, r3
 801af70:	460b      	mov	r3, r1
 801af72:	eb18 0102 	adds.w	r1, r8, r2
 801af76:	6039      	str	r1, [r7, #0]
 801af78:	eb49 0303 	adc.w	r3, r9, r3
 801af7c:	607b      	str	r3, [r7, #4]
 801af7e:	e9d7 3400 	ldrd	r3, r4, [r7]
 801af82:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
    result = (int32_t)(mult.long_long >> 31);
 801af86:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 801af8a:	f04f 0200 	mov.w	r2, #0
 801af8e:	f04f 0300 	mov.w	r3, #0
 801af92:	0fc2      	lsrs	r2, r0, #31
 801af94:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801af98:	17cb      	asrs	r3, r1, #31
 801af9a:	4613      	mov	r3, r2
 801af9c:	677b      	str	r3, [r7, #116]	; 0x74
    return result;
 801af9e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801afa0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801afa4:	2b00      	cmp	r3, #0
 801afa6:	dc03      	bgt.n	801afb0 <depthwise_conv_s8_mult_4+0x394>
 801afa8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801afac:	425b      	negs	r3, r3
 801afae:	e000      	b.n	801afb2 <depthwise_conv_s8_mult_4+0x396>
 801afb0:	2300      	movs	r3, #0
 801afb2:	673a      	str	r2, [r7, #112]	; 0x70
 801afb4:	66fb      	str	r3, [r7, #108]	; 0x6c
    q31_t result = 0;
 801afb6:	2300      	movs	r3, #0
 801afb8:	66bb      	str	r3, [r7, #104]	; 0x68
    const q31_t remainder_mask = (1 << exponent) - 1;
 801afba:	2201      	movs	r2, #1
 801afbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801afbe:	fa02 f303 	lsl.w	r3, r2, r3
 801afc2:	3b01      	subs	r3, #1
 801afc4:	667b      	str	r3, [r7, #100]	; 0x64
    int32_t remainder = remainder_mask & dividend;
 801afc6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801afc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801afca:	4013      	ands	r3, r2
 801afcc:	663b      	str	r3, [r7, #96]	; 0x60
    result = dividend >> exponent;
 801afce:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801afd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801afd2:	fa42 f303 	asr.w	r3, r2, r3
 801afd6:	66bb      	str	r3, [r7, #104]	; 0x68
    q31_t threshold = remainder_mask >> 1;
 801afd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801afda:	105b      	asrs	r3, r3, #1
 801afdc:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (result < 0)
 801afde:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801afe0:	2b00      	cmp	r3, #0
 801afe2:	da02      	bge.n	801afea <depthwise_conv_s8_mult_4+0x3ce>
        threshold++;
 801afe4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801afe6:	3301      	adds	r3, #1
 801afe8:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (remainder > threshold)
 801afea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801afec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801afee:	429a      	cmp	r2, r3
 801aff0:	dd02      	ble.n	801aff8 <depthwise_conv_s8_mult_4+0x3dc>
        result++;
 801aff2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801aff4:	3301      	adds	r3, #1
 801aff6:	66bb      	str	r3, [r7, #104]	; 0x68
    return result;
 801aff8:	6eba      	ldr	r2, [r7, #104]	; 0x68
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801affa:	bf00      	nop
 801affc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801b000:	601a      	str	r2, [r3, #0]
                    out_buff[1] = arm_nn_requantize(
 801b002:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801b006:	6859      	ldr	r1, [r3, #4]
                        out_buff[1], output_mult[out_ch + 1 + mult_tile], output_shift[out_ch + 1 + mult_tile]);
 801b008:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801b00c:	1c5a      	adds	r2, r3, #1
 801b00e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801b012:	4413      	add	r3, r2
 801b014:	009b      	lsls	r3, r3, #2
 801b016:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 801b01a:	4413      	add	r3, r2
                    out_buff[1] = arm_nn_requantize(
 801b01c:	681a      	ldr	r2, [r3, #0]
                        out_buff[1], output_mult[out_ch + 1 + mult_tile], output_shift[out_ch + 1 + mult_tile]);
 801b01e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801b022:	1c58      	adds	r0, r3, #1
 801b024:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801b028:	4403      	add	r3, r0
 801b02a:	009b      	lsls	r3, r3, #2
 801b02c:	f8d7 01a4 	ldr.w	r0, [r7, #420]	; 0x1a4
 801b030:	4403      	add	r3, r0
                    out_buff[1] = arm_nn_requantize(
 801b032:	681b      	ldr	r3, [r3, #0]
 801b034:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 801b038:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 801b03c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801b040:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801b044:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b048:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 801b04c:	fa02 f303 	lsl.w	r3, r2, r3
 801b050:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801b054:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801b058:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    q31_t result = 0;
 801b05c:	2300      	movs	r3, #0
 801b05e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    mult.word.low = 1 << 30;
 801b062:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801b066:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801b06a:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 801b06c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801b070:	2200      	movs	r2, #0
 801b072:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801b074:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 801b078:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801b07c:	461a      	mov	r2, r3
 801b07e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801b082:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 801b086:	4608      	mov	r0, r1
 801b088:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801b08c:	fb00 f503 	mul.w	r5, r0, r3
 801b090:	fb02 f401 	mul.w	r4, r2, r1
 801b094:	442c      	add	r4, r5
 801b096:	fba2 2300 	umull	r2, r3, r2, r0
 801b09a:	18e1      	adds	r1, r4, r3
 801b09c:	460b      	mov	r3, r1
 801b09e:	eb18 0102 	adds.w	r1, r8, r2
 801b0a2:	60b9      	str	r1, [r7, #8]
 801b0a4:	eb49 0303 	adc.w	r3, r9, r3
 801b0a8:	60fb      	str	r3, [r7, #12]
 801b0aa:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 801b0ae:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
    result = (int32_t)(mult.long_long >> 31);
 801b0b2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 801b0b6:	f04f 0200 	mov.w	r2, #0
 801b0ba:	f04f 0300 	mov.w	r3, #0
 801b0be:	0fc2      	lsrs	r2, r0, #31
 801b0c0:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801b0c4:	17cb      	asrs	r3, r1, #31
 801b0c6:	4613      	mov	r3, r2
 801b0c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    return result;
 801b0cc:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801b0d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801b0d4:	2b00      	cmp	r3, #0
 801b0d6:	dc03      	bgt.n	801b0e0 <depthwise_conv_s8_mult_4+0x4c4>
 801b0d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801b0dc:	425b      	negs	r3, r3
 801b0de:	e000      	b.n	801b0e2 <depthwise_conv_s8_mult_4+0x4c6>
 801b0e0:	2300      	movs	r3, #0
 801b0e2:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 801b0e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    q31_t result = 0;
 801b0ea:	2300      	movs	r3, #0
 801b0ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    const q31_t remainder_mask = (1 << exponent) - 1;
 801b0f0:	2201      	movs	r2, #1
 801b0f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801b0f6:	fa02 f303 	lsl.w	r3, r2, r3
 801b0fa:	3b01      	subs	r3, #1
 801b0fc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    int32_t remainder = remainder_mask & dividend;
 801b100:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 801b104:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801b108:	4013      	ands	r3, r2
 801b10a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    result = dividend >> exponent;
 801b10e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 801b112:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801b116:	fa42 f303 	asr.w	r3, r2, r3
 801b11a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    q31_t threshold = remainder_mask >> 1;
 801b11e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801b122:	105b      	asrs	r3, r3, #1
 801b124:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (result < 0)
 801b128:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801b12c:	2b00      	cmp	r3, #0
 801b12e:	da04      	bge.n	801b13a <depthwise_conv_s8_mult_4+0x51e>
        threshold++;
 801b130:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801b134:	3301      	adds	r3, #1
 801b136:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (remainder > threshold)
 801b13a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801b13e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801b142:	429a      	cmp	r2, r3
 801b144:	dd04      	ble.n	801b150 <depthwise_conv_s8_mult_4+0x534>
        result++;
 801b146:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801b14a:	3301      	adds	r3, #1
 801b14c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    return result;
 801b150:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801b154:	bf00      	nop
 801b156:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801b15a:	605a      	str	r2, [r3, #4]
                    out_buff[2] = arm_nn_requantize(
 801b15c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801b160:	6899      	ldr	r1, [r3, #8]
                        out_buff[2], output_mult[out_ch + 2 + mult_tile], output_shift[out_ch + 2 + mult_tile]);
 801b162:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801b166:	1c9a      	adds	r2, r3, #2
 801b168:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801b16c:	4413      	add	r3, r2
 801b16e:	009b      	lsls	r3, r3, #2
 801b170:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 801b174:	4413      	add	r3, r2
                    out_buff[2] = arm_nn_requantize(
 801b176:	681a      	ldr	r2, [r3, #0]
                        out_buff[2], output_mult[out_ch + 2 + mult_tile], output_shift[out_ch + 2 + mult_tile]);
 801b178:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801b17c:	1c98      	adds	r0, r3, #2
 801b17e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801b182:	4403      	add	r3, r0
 801b184:	009b      	lsls	r3, r3, #2
 801b186:	f8d7 01a4 	ldr.w	r0, [r7, #420]	; 0x1a4
 801b18a:	4403      	add	r3, r0
                    out_buff[2] = arm_nn_requantize(
 801b18c:	681b      	ldr	r3, [r3, #0]
 801b18e:	f8c7 10e8 	str.w	r1, [r7, #232]	; 0xe8
 801b192:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 801b196:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801b19a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801b19e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b1a2:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 801b1a6:	fa02 f303 	lsl.w	r3, r2, r3
 801b1aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 801b1ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b1b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    q31_t result = 0;
 801b1b6:	2300      	movs	r3, #0
 801b1b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    mult.word.low = 1 << 30;
 801b1bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b1c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801b1c4:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 801b1c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b1ca:	2200      	movs	r2, #0
 801b1cc:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801b1ce:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	; 0x30
 801b1d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801b1d6:	461a      	mov	r2, r3
 801b1d8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801b1dc:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 801b1e0:	4608      	mov	r0, r1
 801b1e2:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801b1e6:	fb00 f503 	mul.w	r5, r0, r3
 801b1ea:	fb02 f401 	mul.w	r4, r2, r1
 801b1ee:	442c      	add	r4, r5
 801b1f0:	fba2 2300 	umull	r2, r3, r2, r0
 801b1f4:	18e1      	adds	r1, r4, r3
 801b1f6:	460b      	mov	r3, r1
 801b1f8:	eb18 0102 	adds.w	r1, r8, r2
 801b1fc:	6139      	str	r1, [r7, #16]
 801b1fe:	eb49 0303 	adc.w	r3, r9, r3
 801b202:	617b      	str	r3, [r7, #20]
 801b204:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 801b208:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    result = (int32_t)(mult.long_long >> 31);
 801b20c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 801b210:	f04f 0200 	mov.w	r2, #0
 801b214:	f04f 0300 	mov.w	r3, #0
 801b218:	0fc2      	lsrs	r2, r0, #31
 801b21a:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801b21e:	17cb      	asrs	r3, r1, #31
 801b220:	4613      	mov	r3, r2
 801b222:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    return result;
 801b226:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801b22a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801b22e:	2b00      	cmp	r3, #0
 801b230:	dc03      	bgt.n	801b23a <depthwise_conv_s8_mult_4+0x61e>
 801b232:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801b236:	425b      	negs	r3, r3
 801b238:	e000      	b.n	801b23c <depthwise_conv_s8_mult_4+0x620>
 801b23a:	2300      	movs	r3, #0
 801b23c:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 801b240:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    q31_t result = 0;
 801b244:	2300      	movs	r3, #0
 801b246:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    const q31_t remainder_mask = (1 << exponent) - 1;
 801b24a:	2201      	movs	r2, #1
 801b24c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801b250:	fa02 f303 	lsl.w	r3, r2, r3
 801b254:	3b01      	subs	r3, #1
 801b256:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    int32_t remainder = remainder_mask & dividend;
 801b25a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801b25e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801b262:	4013      	ands	r3, r2
 801b264:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result = dividend >> exponent;
 801b268:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801b26c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801b270:	fa42 f303 	asr.w	r3, r2, r3
 801b274:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    q31_t threshold = remainder_mask >> 1;
 801b278:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801b27c:	105b      	asrs	r3, r3, #1
 801b27e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (result < 0)
 801b282:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801b286:	2b00      	cmp	r3, #0
 801b288:	da04      	bge.n	801b294 <depthwise_conv_s8_mult_4+0x678>
        threshold++;
 801b28a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801b28e:	3301      	adds	r3, #1
 801b290:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (remainder > threshold)
 801b294:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 801b298:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801b29c:	429a      	cmp	r2, r3
 801b29e:	dd04      	ble.n	801b2aa <depthwise_conv_s8_mult_4+0x68e>
        result++;
 801b2a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801b2a4:	3301      	adds	r3, #1
 801b2a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    return result;
 801b2aa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801b2ae:	bf00      	nop
 801b2b0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801b2b4:	609a      	str	r2, [r3, #8]
                    out_buff[3] = arm_nn_requantize(
 801b2b6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801b2ba:	68d9      	ldr	r1, [r3, #12]
                        out_buff[3], output_mult[out_ch + 3 + mult_tile], output_shift[out_ch + 3 + mult_tile]);
 801b2bc:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801b2c0:	1cda      	adds	r2, r3, #3
 801b2c2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801b2c6:	4413      	add	r3, r2
 801b2c8:	009b      	lsls	r3, r3, #2
 801b2ca:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 801b2ce:	4413      	add	r3, r2
                    out_buff[3] = arm_nn_requantize(
 801b2d0:	681a      	ldr	r2, [r3, #0]
                        out_buff[3], output_mult[out_ch + 3 + mult_tile], output_shift[out_ch + 3 + mult_tile]);
 801b2d2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801b2d6:	1cd8      	adds	r0, r3, #3
 801b2d8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801b2dc:	4403      	add	r3, r0
 801b2de:	009b      	lsls	r3, r3, #2
 801b2e0:	f8d7 01a4 	ldr.w	r0, [r7, #420]	; 0x1a4
 801b2e4:	4403      	add	r3, r0
                    out_buff[3] = arm_nn_requantize(
 801b2e6:	681b      	ldr	r3, [r3, #0]
 801b2e8:	f8c7 1118 	str.w	r1, [r7, #280]	; 0x118
 801b2ec:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 801b2f0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 801b2f4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801b2f8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b2fc:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 801b300:	fa02 f303 	lsl.w	r3, r2, r3
 801b304:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 801b308:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b30c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    q31_t result = 0;
 801b310:	2300      	movs	r3, #0
 801b312:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    mult.word.low = 1 << 30;
 801b316:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801b31a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801b31e:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 801b320:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801b324:	2200      	movs	r2, #0
 801b326:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801b328:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 801b32c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b330:	461a      	mov	r2, r3
 801b332:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801b336:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 801b33a:	4608      	mov	r0, r1
 801b33c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801b340:	fb00 f503 	mul.w	r5, r0, r3
 801b344:	fb02 f401 	mul.w	r4, r2, r1
 801b348:	442c      	add	r4, r5
 801b34a:	fba2 2300 	umull	r2, r3, r2, r0
 801b34e:	18e1      	adds	r1, r4, r3
 801b350:	460b      	mov	r3, r1
 801b352:	eb18 0a02 	adds.w	sl, r8, r2
 801b356:	eb49 0b03 	adc.w	fp, r9, r3
 801b35a:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	; 0x28
    result = (int32_t)(mult.long_long >> 31);
 801b35e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801b362:	f04f 0200 	mov.w	r2, #0
 801b366:	f04f 0300 	mov.w	r3, #0
 801b36a:	0fc2      	lsrs	r2, r0, #31
 801b36c:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801b370:	17cb      	asrs	r3, r1, #31
 801b372:	4613      	mov	r3, r2
 801b374:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    return result;
 801b378:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801b37c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801b380:	2b00      	cmp	r3, #0
 801b382:	dc03      	bgt.n	801b38c <depthwise_conv_s8_mult_4+0x770>
 801b384:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801b388:	425b      	negs	r3, r3
 801b38a:	e000      	b.n	801b38e <depthwise_conv_s8_mult_4+0x772>
 801b38c:	2300      	movs	r3, #0
 801b38e:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 801b392:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    q31_t result = 0;
 801b396:	2300      	movs	r3, #0
 801b398:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    const q31_t remainder_mask = (1 << exponent) - 1;
 801b39c:	2201      	movs	r2, #1
 801b39e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801b3a2:	fa02 f303 	lsl.w	r3, r2, r3
 801b3a6:	3b01      	subs	r3, #1
 801b3a8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    int32_t remainder = remainder_mask & dividend;
 801b3ac:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 801b3b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801b3b4:	4013      	ands	r3, r2
 801b3b6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    result = dividend >> exponent;
 801b3ba:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 801b3be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801b3c2:	fa42 f303 	asr.w	r3, r2, r3
 801b3c6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    q31_t threshold = remainder_mask >> 1;
 801b3ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801b3ce:	105b      	asrs	r3, r3, #1
 801b3d0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    if (result < 0)
 801b3d4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801b3d8:	2b00      	cmp	r3, #0
 801b3da:	da04      	bge.n	801b3e6 <depthwise_conv_s8_mult_4+0x7ca>
        threshold++;
 801b3dc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801b3e0:	3301      	adds	r3, #1
 801b3e2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    if (remainder > threshold)
 801b3e6:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 801b3ea:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801b3ee:	429a      	cmp	r2, r3
 801b3f0:	dd04      	ble.n	801b3fc <depthwise_conv_s8_mult_4+0x7e0>
        result++;
 801b3f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801b3f6:	3301      	adds	r3, #1
 801b3f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    return result;
 801b3fc:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801b400:	bf00      	nop
 801b402:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801b406:	60da      	str	r2, [r3, #12]

                    out_buff[0] += output_offset;
 801b408:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801b40c:	681a      	ldr	r2, [r3, #0]
 801b40e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 801b412:	441a      	add	r2, r3
 801b414:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801b418:	601a      	str	r2, [r3, #0]
                    out_buff[1] += output_offset;
 801b41a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801b41e:	685a      	ldr	r2, [r3, #4]
 801b420:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 801b424:	441a      	add	r2, r3
 801b426:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801b42a:	605a      	str	r2, [r3, #4]
                    out_buff[2] += output_offset;
 801b42c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801b430:	689a      	ldr	r2, [r3, #8]
 801b432:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 801b436:	441a      	add	r2, r3
 801b438:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801b43c:	609a      	str	r2, [r3, #8]
                    out_buff[3] += output_offset;
 801b43e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801b442:	68da      	ldr	r2, [r3, #12]
 801b444:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 801b448:	441a      	add	r2, r3
 801b44a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801b44e:	60da      	str	r2, [r3, #12]

                    out_buff[0] = MIN(MAX(out_buff[0], output_activation_min), output_activation_max);
 801b450:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801b454:	681a      	ldr	r2, [r3, #0]
 801b456:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 801b45a:	429a      	cmp	r2, r3
 801b45c:	bfb8      	it	lt
 801b45e:	461a      	movlt	r2, r3
 801b460:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 801b464:	429a      	cmp	r2, r3
 801b466:	bfa8      	it	ge
 801b468:	461a      	movge	r2, r3
 801b46a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801b46e:	601a      	str	r2, [r3, #0]
                    out_buff[1] = MIN(MAX(out_buff[1], output_activation_min), output_activation_max);
 801b470:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801b474:	685a      	ldr	r2, [r3, #4]
 801b476:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 801b47a:	429a      	cmp	r2, r3
 801b47c:	bfb8      	it	lt
 801b47e:	461a      	movlt	r2, r3
 801b480:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 801b484:	429a      	cmp	r2, r3
 801b486:	bfa8      	it	ge
 801b488:	461a      	movge	r2, r3
 801b48a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801b48e:	605a      	str	r2, [r3, #4]
                    out_buff[2] = MIN(MAX(out_buff[2], output_activation_min), output_activation_max);
 801b490:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801b494:	689a      	ldr	r2, [r3, #8]
 801b496:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 801b49a:	429a      	cmp	r2, r3
 801b49c:	bfb8      	it	lt
 801b49e:	461a      	movlt	r2, r3
 801b4a0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 801b4a4:	429a      	cmp	r2, r3
 801b4a6:	bfa8      	it	ge
 801b4a8:	461a      	movge	r2, r3
 801b4aa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801b4ae:	609a      	str	r2, [r3, #8]
                    out_buff[3] = MIN(MAX(out_buff[3], output_activation_min), output_activation_max);
 801b4b0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801b4b4:	68da      	ldr	r2, [r3, #12]
 801b4b6:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 801b4ba:	429a      	cmp	r2, r3
 801b4bc:	bfb8      	it	lt
 801b4be:	461a      	movlt	r2, r3
 801b4c0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 801b4c4:	429a      	cmp	r2, r3
 801b4c6:	bfa8      	it	ge
 801b4c8:	461a      	movge	r2, r3
 801b4ca:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801b4ce:	60da      	str	r2, [r3, #12]

                    output[out_idx++] = (int8_t)out_buff[0];
 801b4d0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801b4d4:	6819      	ldr	r1, [r3, #0]
 801b4d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801b4da:	1c5a      	adds	r2, r3, #1
 801b4dc:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 801b4e0:	461a      	mov	r2, r3
 801b4e2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 801b4e6:	4413      	add	r3, r2
 801b4e8:	b24a      	sxtb	r2, r1
 801b4ea:	701a      	strb	r2, [r3, #0]
                    output[out_idx++] = (int8_t)out_buff[1];
 801b4ec:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801b4f0:	6859      	ldr	r1, [r3, #4]
 801b4f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801b4f6:	1c5a      	adds	r2, r3, #1
 801b4f8:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 801b4fc:	461a      	mov	r2, r3
 801b4fe:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 801b502:	4413      	add	r3, r2
 801b504:	b24a      	sxtb	r2, r1
 801b506:	701a      	strb	r2, [r3, #0]
                    output[out_idx++] = (int8_t)out_buff[2];
 801b508:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801b50c:	6899      	ldr	r1, [r3, #8]
 801b50e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801b512:	1c5a      	adds	r2, r3, #1
 801b514:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 801b518:	461a      	mov	r2, r3
 801b51a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 801b51e:	4413      	add	r3, r2
 801b520:	b24a      	sxtb	r2, r1
 801b522:	701a      	strb	r2, [r3, #0]
                    output[out_idx++] = (int8_t)out_buff[3];
 801b524:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801b528:	68d9      	ldr	r1, [r3, #12]
 801b52a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801b52e:	1c5a      	adds	r2, r3, #1
 801b530:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 801b534:	461a      	mov	r2, r3
 801b536:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 801b53a:	4413      	add	r3, r2
 801b53c:	b24a      	sxtb	r2, r1
 801b53e:	701a      	strb	r2, [r3, #0]
                for (int mult_tile = 0; mult_tile < ch_mult; mult_tile += 4)
 801b540:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801b544:	3304      	adds	r3, #4
 801b546:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 801b54a:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 801b54e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 801b552:	429a      	cmp	r2, r3
 801b554:	f6ff abac 	blt.w	801acb0 <depthwise_conv_s8_mult_4+0x94>
                 ++in_ch, out_ch += ch_mult)
 801b558:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 801b55c:	3301      	adds	r3, #1
 801b55e:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 801b562:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 801b566:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 801b56a:	4413      	add	r3, r2
 801b56c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
            for (int32_t in_ch = 0, out_ch = 0, ker_w_start = MAX(0, -in_w); out_ch < output_ch;
 801b570:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 801b574:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 801b578:	429a      	cmp	r2, r3
 801b57a:	f6ff ab94 	blt.w	801aca6 <depthwise_conv_s8_mult_4+0x8a>
        for (int32_t in_w = -pad_x, out_w = 0, ker_h_start = MAX(0, -in_h); out_w < output_x; in_w += stride_x, ++out_w)
 801b57e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 801b582:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 801b586:	4413      	add	r3, r2
 801b588:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 801b58c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 801b590:	3301      	adds	r3, #1
 801b592:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 801b596:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 801b59a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 801b59e:	429a      	cmp	r2, r3
 801b5a0:	f6ff ab6e 	blt.w	801ac80 <depthwise_conv_s8_mult_4+0x64>
    for (int32_t in_h = -pad_y, out_h = 0, out_idx = 0; out_h < output_y; in_h += stride_y, ++out_h)
 801b5a4:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 801b5a8:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 801b5ac:	4413      	add	r3, r2
 801b5ae:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 801b5b2:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 801b5b6:	3301      	adds	r3, #1
 801b5b8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 801b5bc:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 801b5c0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 801b5c4:	429a      	cmp	r2, r3
 801b5c6:	f6ff ab46 	blt.w	801ac56 <depthwise_conv_s8_mult_4+0x3a>
#endif
                }
            }
        }
    }
}
 801b5ca:	bf00      	nop
 801b5cc:	bf00      	nop
 801b5ce:	f507 77ae 	add.w	r7, r7, #348	; 0x15c
 801b5d2:	46bd      	mov	sp, r7
 801b5d4:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 801b5d8:	4770      	bx	lr

0801b5da <depthwise_conv_s8_generic>:
                                      const uint16_t output_y,
                                      const int32_t output_offset,
                                      const int32_t input_offset,
                                      const int32_t output_activation_min,
                                      const int32_t output_activation_max)
{
 801b5da:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 801b5de:	b0a4      	sub	sp, #144	; 0x90
 801b5e0:	af00      	add	r7, sp, #0
 801b5e2:	60f8      	str	r0, [r7, #12]
 801b5e4:	4608      	mov	r0, r1
 801b5e6:	4611      	mov	r1, r2
 801b5e8:	461a      	mov	r2, r3
 801b5ea:	4603      	mov	r3, r0
 801b5ec:	817b      	strh	r3, [r7, #10]
 801b5ee:	460b      	mov	r3, r1
 801b5f0:	813b      	strh	r3, [r7, #8]
 801b5f2:	4613      	mov	r3, r2
 801b5f4:	80fb      	strh	r3, [r7, #6]
    (void)output_ch;
    int i_out = 0;
 801b5f6:	2300      	movs	r3, #0
 801b5f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    for (int i_out_y = 0; i_out_y < output_y; i_out_y++)
 801b5fc:	2300      	movs	r3, #0
 801b5fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801b602:	e165      	b.n	801b8d0 <depthwise_conv_s8_generic+0x2f6>
    {
        const int16_t base_idx_y = (i_out_y * stride_y) - pad_y;
 801b604:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801b608:	b29b      	uxth	r3, r3
 801b60a:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 801b60e:	fb12 f303 	smulbb	r3, r2, r3
 801b612:	b29a      	uxth	r2, r3
 801b614:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 801b618:	1ad3      	subs	r3, r2, r3
 801b61a:	b29b      	uxth	r3, r3
 801b61c:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
        for (int i_out_x = 0; i_out_x < output_x; i_out_x++)
 801b620:	2300      	movs	r3, #0
 801b622:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801b626:	e147      	b.n	801b8b8 <depthwise_conv_s8_generic+0x2de>
        {
            const int16_t base_idx_x = (i_out_x * stride_x) - pad_x;
 801b628:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801b62c:	b29b      	uxth	r3, r3
 801b62e:	f8b7 20c4 	ldrh.w	r2, [r7, #196]	; 0xc4
 801b632:	fb12 f303 	smulbb	r3, r2, r3
 801b636:	b29a      	uxth	r2, r3
 801b638:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 801b63c:	1ad3      	subs	r3, r2, r3
 801b63e:	b29b      	uxth	r3, r3
 801b640:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
            for (int i_input_ch = 0; i_input_ch < input_ch; i_input_ch++)
 801b644:	2300      	movs	r3, #0
 801b646:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801b64a:	e12a      	b.n	801b8a2 <depthwise_conv_s8_generic+0x2c8>
            {
                for (int i_ch_mult = 0; i_ch_mult < ch_mult; i_ch_mult++)
 801b64c:	2300      	movs	r3, #0
 801b64e:	67fb      	str	r3, [r7, #124]	; 0x7c
 801b650:	e11c      	b.n	801b88c <depthwise_conv_s8_generic+0x2b2>
                {
                    const int idx_out_ch = i_ch_mult + i_input_ch * ch_mult;
 801b652:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 801b656:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801b65a:	fb02 f303 	mul.w	r3, r2, r3
 801b65e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801b660:	4413      	add	r3, r2
 801b662:	66bb      	str	r3, [r7, #104]	; 0x68
                    int32_t acc_0;
                    /* Condition for kernel start dimension: (base_idx_<x,y> + ker_<x,y>_start) >= 0 */
                    const int ker_y_start = MAX(0, -base_idx_y);
 801b664:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 801b668:	2b00      	cmp	r3, #0
 801b66a:	dc03      	bgt.n	801b674 <depthwise_conv_s8_generic+0x9a>
 801b66c:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 801b670:	425b      	negs	r3, r3
 801b672:	e000      	b.n	801b676 <depthwise_conv_s8_generic+0x9c>
 801b674:	2300      	movs	r3, #0
 801b676:	667b      	str	r3, [r7, #100]	; 0x64
                    const int ker_x_start = MAX(0, -base_idx_x);
 801b678:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801b67c:	2b00      	cmp	r3, #0
 801b67e:	dc03      	bgt.n	801b688 <depthwise_conv_s8_generic+0xae>
 801b680:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801b684:	425b      	negs	r3, r3
 801b686:	e000      	b.n	801b68a <depthwise_conv_s8_generic+0xb0>
 801b688:	2300      	movs	r3, #0
 801b68a:	663b      	str	r3, [r7, #96]	; 0x60
                    /* Condition for kernel end dimension: (base_idx_<x,y> + ker_<x,y>_end) < input_<x,y> */
                    const int ker_y_end = MIN(kernel_y, input_y - base_idx_y);
 801b68c:	893a      	ldrh	r2, [r7, #8]
 801b68e:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 801b692:	1ad2      	subs	r2, r2, r3
 801b694:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 801b698:	4293      	cmp	r3, r2
 801b69a:	bfa8      	it	ge
 801b69c:	4613      	movge	r3, r2
 801b69e:	65fb      	str	r3, [r7, #92]	; 0x5c
                    const int ker_x_end = MIN(kernel_x, input_x - base_idx_x);
 801b6a0:	897a      	ldrh	r2, [r7, #10]
 801b6a2:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801b6a6:	1ad2      	subs	r2, r2, r3
 801b6a8:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 801b6ac:	4293      	cmp	r3, r2
 801b6ae:	bfa8      	it	ge
 801b6b0:	4613      	movge	r3, r2
 801b6b2:	65bb      	str	r3, [r7, #88]	; 0x58
                    acc_0 = bias[idx_out_ch];
 801b6b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801b6b6:	009b      	lsls	r3, r3, #2
 801b6b8:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 801b6bc:	4413      	add	r3, r2
 801b6be:	681b      	ldr	r3, [r3, #0]
 801b6c0:	67bb      	str	r3, [r7, #120]	; 0x78

                    for (int i_ker_y = ker_y_start; i_ker_y < ker_y_end; i_ker_y++)
 801b6c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801b6c4:	677b      	str	r3, [r7, #116]	; 0x74
 801b6c6:	e048      	b.n	801b75a <depthwise_conv_s8_generic+0x180>
                    {
                        const int32_t idx_y = base_idx_y + i_ker_y;
 801b6c8:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 801b6cc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801b6ce:	4413      	add	r3, r2
 801b6d0:	657b      	str	r3, [r7, #84]	; 0x54
                        for (int i_ker_x = ker_x_start; i_ker_x < ker_x_end; i_ker_x++)
 801b6d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801b6d4:	673b      	str	r3, [r7, #112]	; 0x70
 801b6d6:	e039      	b.n	801b74c <depthwise_conv_s8_generic+0x172>
                        {
                            const int32_t idx_x = base_idx_x + i_ker_x;
 801b6d8:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801b6dc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801b6de:	4413      	add	r3, r2
 801b6e0:	653b      	str	r3, [r7, #80]	; 0x50
                            int32_t idx_0 = (idx_y * input_x + idx_x) * input_ch + i_input_ch;
 801b6e2:	897b      	ldrh	r3, [r7, #10]
 801b6e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801b6e6:	fb02 f203 	mul.w	r2, r2, r3
 801b6ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b6ec:	4413      	add	r3, r2
 801b6ee:	88fa      	ldrh	r2, [r7, #6]
 801b6f0:	fb02 f303 	mul.w	r3, r2, r3
 801b6f4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801b6f8:	4413      	add	r3, r2
 801b6fa:	64fb      	str	r3, [r7, #76]	; 0x4c
                            int32_t ker_idx_0 = (i_ker_y * kernel_x + i_ker_x) * (input_ch * ch_mult) + idx_out_ch;
 801b6fc:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 801b700:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801b702:	fb02 f203 	mul.w	r2, r2, r3
 801b706:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801b708:	4413      	add	r3, r2
 801b70a:	88fa      	ldrh	r2, [r7, #6]
 801b70c:	f8b7 10b0 	ldrh.w	r1, [r7, #176]	; 0xb0
 801b710:	fb01 f202 	mul.w	r2, r1, r2
 801b714:	fb02 f303 	mul.w	r3, r2, r3
 801b718:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801b71a:	4413      	add	r3, r2
 801b71c:	64bb      	str	r3, [r7, #72]	; 0x48

                            acc_0 += (input[idx_0] + input_offset) * kernel[ker_idx_0];
 801b71e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b720:	68fa      	ldr	r2, [r7, #12]
 801b722:	4413      	add	r3, r2
 801b724:	f993 3000 	ldrsb.w	r3, [r3]
 801b728:	461a      	mov	r2, r3
 801b72a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801b72e:	4413      	add	r3, r2
 801b730:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801b732:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 801b736:	440a      	add	r2, r1
 801b738:	f992 2000 	ldrsb.w	r2, [r2]
 801b73c:	fb02 f303 	mul.w	r3, r2, r3
 801b740:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801b742:	4413      	add	r3, r2
 801b744:	67bb      	str	r3, [r7, #120]	; 0x78
                        for (int i_ker_x = ker_x_start; i_ker_x < ker_x_end; i_ker_x++)
 801b746:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801b748:	3301      	adds	r3, #1
 801b74a:	673b      	str	r3, [r7, #112]	; 0x70
 801b74c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801b74e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801b750:	429a      	cmp	r2, r3
 801b752:	dbc1      	blt.n	801b6d8 <depthwise_conv_s8_generic+0xfe>
                    for (int i_ker_y = ker_y_start; i_ker_y < ker_y_end; i_ker_y++)
 801b754:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b756:	3301      	adds	r3, #1
 801b758:	677b      	str	r3, [r7, #116]	; 0x74
 801b75a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801b75c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801b75e:	429a      	cmp	r2, r3
 801b760:	dbb2      	blt.n	801b6c8 <depthwise_conv_s8_generic+0xee>
                        }
                    }

                    /* Requantize and clamp output to provided range */
                    acc_0 = arm_nn_requantize(acc_0, output_mult[idx_out_ch], output_shift[idx_out_ch]);
 801b762:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801b764:	009b      	lsls	r3, r3, #2
 801b766:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 801b76a:	4413      	add	r3, r2
 801b76c:	681a      	ldr	r2, [r3, #0]
 801b76e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801b770:	009b      	lsls	r3, r3, #2
 801b772:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 801b776:	440b      	add	r3, r1
 801b778:	681b      	ldr	r3, [r3, #0]
 801b77a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 801b77c:	6479      	str	r1, [r7, #68]	; 0x44
 801b77e:	643a      	str	r2, [r7, #64]	; 0x40
 801b780:	63fb      	str	r3, [r7, #60]	; 0x3c
 801b782:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b784:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b788:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801b78a:	fa02 f303 	lsl.w	r3, r2, r3
 801b78e:	63bb      	str	r3, [r7, #56]	; 0x38
 801b790:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b792:	637b      	str	r3, [r7, #52]	; 0x34
    q31_t result = 0;
 801b794:	2300      	movs	r3, #0
 801b796:	633b      	str	r3, [r7, #48]	; 0x30
    mult.word.low = 1 << 30;
 801b798:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801b79c:	613b      	str	r3, [r7, #16]
    mult.word.high = 0;
 801b79e:	2300      	movs	r3, #0
 801b7a0:	617b      	str	r3, [r7, #20]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801b7a2:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 801b7a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b7a8:	4618      	mov	r0, r3
 801b7aa:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801b7ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b7b0:	461a      	mov	r2, r3
 801b7b2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801b7b6:	fb02 fc01 	mul.w	ip, r2, r1
 801b7ba:	fb00 f603 	mul.w	r6, r0, r3
 801b7be:	4466      	add	r6, ip
 801b7c0:	fba0 2302 	umull	r2, r3, r0, r2
 801b7c4:	18f1      	adds	r1, r6, r3
 801b7c6:	460b      	mov	r3, r1
 801b7c8:	eb14 0802 	adds.w	r8, r4, r2
 801b7cc:	eb45 0903 	adc.w	r9, r5, r3
 801b7d0:	e9c7 8904 	strd	r8, r9, [r7, #16]
    result = (int32_t)(mult.long_long >> 31);
 801b7d4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801b7d8:	f04f 0200 	mov.w	r2, #0
 801b7dc:	f04f 0300 	mov.w	r3, #0
 801b7e0:	0fc2      	lsrs	r2, r0, #31
 801b7e2:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801b7e6:	17cb      	asrs	r3, r1, #31
 801b7e8:	4613      	mov	r3, r2
 801b7ea:	633b      	str	r3, [r7, #48]	; 0x30
    return result;
 801b7ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801b7ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b7f0:	2b00      	cmp	r3, #0
 801b7f2:	dc02      	bgt.n	801b7fa <depthwise_conv_s8_generic+0x220>
 801b7f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b7f6:	425b      	negs	r3, r3
 801b7f8:	e000      	b.n	801b7fc <depthwise_conv_s8_generic+0x222>
 801b7fa:	2300      	movs	r3, #0
 801b7fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 801b7fe:	62bb      	str	r3, [r7, #40]	; 0x28
    q31_t result = 0;
 801b800:	2300      	movs	r3, #0
 801b802:	627b      	str	r3, [r7, #36]	; 0x24
    const q31_t remainder_mask = (1 << exponent) - 1;
 801b804:	2201      	movs	r2, #1
 801b806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b808:	fa02 f303 	lsl.w	r3, r2, r3
 801b80c:	3b01      	subs	r3, #1
 801b80e:	623b      	str	r3, [r7, #32]
    int32_t remainder = remainder_mask & dividend;
 801b810:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b812:	6a3b      	ldr	r3, [r7, #32]
 801b814:	4013      	ands	r3, r2
 801b816:	61fb      	str	r3, [r7, #28]
    result = dividend >> exponent;
 801b818:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b81a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b81c:	fa42 f303 	asr.w	r3, r2, r3
 801b820:	627b      	str	r3, [r7, #36]	; 0x24
    q31_t threshold = remainder_mask >> 1;
 801b822:	6a3b      	ldr	r3, [r7, #32]
 801b824:	105b      	asrs	r3, r3, #1
 801b826:	61bb      	str	r3, [r7, #24]
    if (result < 0)
 801b828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b82a:	2b00      	cmp	r3, #0
 801b82c:	da02      	bge.n	801b834 <depthwise_conv_s8_generic+0x25a>
        threshold++;
 801b82e:	69bb      	ldr	r3, [r7, #24]
 801b830:	3301      	adds	r3, #1
 801b832:	61bb      	str	r3, [r7, #24]
    if (remainder > threshold)
 801b834:	69fa      	ldr	r2, [r7, #28]
 801b836:	69bb      	ldr	r3, [r7, #24]
 801b838:	429a      	cmp	r2, r3
 801b83a:	dd02      	ble.n	801b842 <depthwise_conv_s8_generic+0x268>
        result++;
 801b83c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b83e:	3301      	adds	r3, #1
 801b840:	627b      	str	r3, [r7, #36]	; 0x24
    return result;
 801b842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801b844:	bf00      	nop
 801b846:	67bb      	str	r3, [r7, #120]	; 0x78
                    acc_0 += output_offset;
 801b848:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801b84a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b84e:	4413      	add	r3, r2
 801b850:	67bb      	str	r3, [r7, #120]	; 0x78
                    acc_0 = MAX(acc_0, output_activation_min);
 801b852:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801b854:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801b858:	4293      	cmp	r3, r2
 801b85a:	bfb8      	it	lt
 801b85c:	4613      	movlt	r3, r2
 801b85e:	67bb      	str	r3, [r7, #120]	; 0x78
                    acc_0 = MIN(acc_0, output_activation_max);
 801b860:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801b862:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801b866:	4293      	cmp	r3, r2
 801b868:	bfa8      	it	ge
 801b86a:	4613      	movge	r3, r2
 801b86c:	67bb      	str	r3, [r7, #120]	; 0x78

                    output[i_out++] = acc_0;
 801b86e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801b872:	1c5a      	adds	r2, r3, #1
 801b874:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 801b878:	461a      	mov	r2, r3
 801b87a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801b87e:	4413      	add	r3, r2
 801b880:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801b882:	b252      	sxtb	r2, r2
 801b884:	701a      	strb	r2, [r3, #0]
                for (int i_ch_mult = 0; i_ch_mult < ch_mult; i_ch_mult++)
 801b886:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801b888:	3301      	adds	r3, #1
 801b88a:	67fb      	str	r3, [r7, #124]	; 0x7c
 801b88c:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 801b890:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801b892:	429a      	cmp	r2, r3
 801b894:	f6ff aedd 	blt.w	801b652 <depthwise_conv_s8_generic+0x78>
            for (int i_input_ch = 0; i_input_ch < input_ch; i_input_ch++)
 801b898:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801b89c:	3301      	adds	r3, #1
 801b89e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801b8a2:	88fb      	ldrh	r3, [r7, #6]
 801b8a4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801b8a8:	429a      	cmp	r2, r3
 801b8aa:	f6ff aecf 	blt.w	801b64c <depthwise_conv_s8_generic+0x72>
        for (int i_out_x = 0; i_out_x < output_x; i_out_x++)
 801b8ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801b8b2:	3301      	adds	r3, #1
 801b8b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801b8b8:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	; 0xdc
 801b8bc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801b8c0:	429a      	cmp	r2, r3
 801b8c2:	f6ff aeb1 	blt.w	801b628 <depthwise_conv_s8_generic+0x4e>
    for (int i_out_y = 0; i_out_y < output_y; i_out_y++)
 801b8c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801b8ca:	3301      	adds	r3, #1
 801b8cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801b8d0:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
 801b8d4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801b8d8:	429a      	cmp	r2, r3
 801b8da:	f6ff ae93 	blt.w	801b604 <depthwise_conv_s8_generic+0x2a>
                }
            }
        }
    }
}
 801b8de:	bf00      	nop
 801b8e0:	bf00      	nop
 801b8e2:	3790      	adds	r7, #144	; 0x90
 801b8e4:	46bd      	mov	sp, r7
 801b8e6:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 801b8ea:	4770      	bx	lr

0801b8ec <arm_depthwise_conv_s8>:
                                 const q7_t *kernel,
                                 const cmsis_nn_dims *bias_dims,
                                 const int32_t *bias,
                                 const cmsis_nn_dims *output_dims,
                                 q7_t *output)
{
 801b8ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b8f0:	b0a4      	sub	sp, #144	; 0x90
 801b8f2:	af14      	add	r7, sp, #80	; 0x50
 801b8f4:	63f8      	str	r0, [r7, #60]	; 0x3c
 801b8f6:	63b9      	str	r1, [r7, #56]	; 0x38
 801b8f8:	637a      	str	r2, [r7, #52]	; 0x34
 801b8fa:	633b      	str	r3, [r7, #48]	; 0x30
    (void)dw_conv_params->dilation;
    (void)bias_dims;
    (void)ctx;

    if (dw_conv_params->ch_mult % 4 == 0)
 801b8fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b8fe:	689b      	ldr	r3, [r3, #8]
 801b900:	f003 0303 	and.w	r3, r3, #3
 801b904:	2b00      	cmp	r3, #0
 801b906:	d157      	bne.n	801b9b8 <arm_depthwise_conv_s8+0xcc>
    {
        depthwise_conv_s8_mult_4(input,
 801b908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b90a:	689b      	ldr	r3, [r3, #8]
 801b90c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801b90e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b910:	685a      	ldr	r2, [r3, #4]
 801b912:	62ba      	str	r2, [r7, #40]	; 0x28
 801b914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b916:	68d8      	ldr	r0, [r3, #12]
 801b918:	6278      	str	r0, [r7, #36]	; 0x24
 801b91a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801b91c:	68de      	ldr	r6, [r3, #12]
 801b91e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b920:	689c      	ldr	r4, [r3, #8]
 801b922:	623c      	str	r4, [r7, #32]
 801b924:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801b926:	689d      	ldr	r5, [r3, #8]
 801b928:	61fd      	str	r5, [r7, #28]
 801b92a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801b92c:	6859      	ldr	r1, [r3, #4]
 801b92e:	61b9      	str	r1, [r7, #24]
 801b930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b932:	6958      	ldr	r0, [r3, #20]
 801b934:	6178      	str	r0, [r7, #20]
 801b936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b938:	699b      	ldr	r3, [r3, #24]
 801b93a:	613b      	str	r3, [r7, #16]
 801b93c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b93e:	68da      	ldr	r2, [r3, #12]
 801b940:	60fa      	str	r2, [r7, #12]
 801b942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b944:	691c      	ldr	r4, [r3, #16]
 801b946:	60bc      	str	r4, [r7, #8]
                                 dw_conv_params->padding.h,
                                 dw_conv_params->stride.w,
                                 dw_conv_params->stride.h,
                                 bias,
                                 output,
                                 quant_params->shift,
 801b948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b94a:	685d      	ldr	r5, [r3, #4]
 801b94c:	607d      	str	r5, [r7, #4]
                                 quant_params->multiplier,
 801b94e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b950:	6819      	ldr	r1, [r3, #0]
 801b952:	6039      	str	r1, [r7, #0]
        depthwise_conv_s8_mult_4(input,
 801b954:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801b956:	689d      	ldr	r5, [r3, #8]
 801b958:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801b95a:	685c      	ldr	r4, [r3, #4]
 801b95c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b95e:	6858      	ldr	r0, [r3, #4]
 801b960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b962:	6819      	ldr	r1, [r3, #0]
 801b964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b966:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801b968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b96a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b96c:	9312      	str	r3, [sp, #72]	; 0x48
 801b96e:	9211      	str	r2, [sp, #68]	; 0x44
 801b970:	9110      	str	r1, [sp, #64]	; 0x40
 801b972:	900f      	str	r0, [sp, #60]	; 0x3c
 801b974:	940e      	str	r4, [sp, #56]	; 0x38
 801b976:	950d      	str	r5, [sp, #52]	; 0x34
 801b978:	6839      	ldr	r1, [r7, #0]
 801b97a:	910c      	str	r1, [sp, #48]	; 0x30
 801b97c:	687d      	ldr	r5, [r7, #4]
 801b97e:	950b      	str	r5, [sp, #44]	; 0x2c
 801b980:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801b982:	930a      	str	r3, [sp, #40]	; 0x28
 801b984:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801b986:	9309      	str	r3, [sp, #36]	; 0x24
 801b988:	68bc      	ldr	r4, [r7, #8]
 801b98a:	9408      	str	r4, [sp, #32]
 801b98c:	68fa      	ldr	r2, [r7, #12]
 801b98e:	9207      	str	r2, [sp, #28]
 801b990:	693b      	ldr	r3, [r7, #16]
 801b992:	9306      	str	r3, [sp, #24]
 801b994:	6978      	ldr	r0, [r7, #20]
 801b996:	9005      	str	r0, [sp, #20]
 801b998:	69b9      	ldr	r1, [r7, #24]
 801b99a:	9104      	str	r1, [sp, #16]
 801b99c:	69fd      	ldr	r5, [r7, #28]
 801b99e:	9503      	str	r5, [sp, #12]
 801b9a0:	6a3c      	ldr	r4, [r7, #32]
 801b9a2:	9402      	str	r4, [sp, #8]
 801b9a4:	9601      	str	r6, [sp, #4]
 801b9a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801b9a8:	9300      	str	r3, [sp, #0]
 801b9aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b9ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801b9ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801b9b0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801b9b2:	f7ff f933 	bl	801ac1c <depthwise_conv_s8_mult_4>
 801b9b6:	e063      	b.n	801ba80 <arm_depthwise_conv_s8+0x194>
                                 dw_conv_params->activation.max);
    }
    else
    {
        depthwise_conv_s8_generic(input,
                                  input_dims->w,
 801b9b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b9ba:	689b      	ldr	r3, [r3, #8]
        depthwise_conv_s8_generic(input,
 801b9bc:	fa1f fc83 	uxth.w	ip, r3
                                  input_dims->h,
 801b9c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b9c2:	685b      	ldr	r3, [r3, #4]
        depthwise_conv_s8_generic(input,
 801b9c4:	fa1f fe83 	uxth.w	lr, r3
                                  input_dims->c,
 801b9c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b9ca:	68db      	ldr	r3, [r3, #12]
        depthwise_conv_s8_generic(input,
 801b9cc:	fa1f f883 	uxth.w	r8, r3
                                  kernel,
                                  output_dims->c,
 801b9d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801b9d2:	68db      	ldr	r3, [r3, #12]
        depthwise_conv_s8_generic(input,
 801b9d4:	b29e      	uxth	r6, r3
                                  dw_conv_params->ch_mult,
 801b9d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b9d8:	689b      	ldr	r3, [r3, #8]
        depthwise_conv_s8_generic(input,
 801b9da:	b29b      	uxth	r3, r3
 801b9dc:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  filter_dims->w,
 801b9de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801b9e0:	689b      	ldr	r3, [r3, #8]
        depthwise_conv_s8_generic(input,
 801b9e2:	b29a      	uxth	r2, r3
 801b9e4:	62ba      	str	r2, [r7, #40]	; 0x28
                                  filter_dims->h,
 801b9e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801b9e8:	685b      	ldr	r3, [r3, #4]
        depthwise_conv_s8_generic(input,
 801b9ea:	b299      	uxth	r1, r3
 801b9ec:	6279      	str	r1, [r7, #36]	; 0x24
                                  dw_conv_params->padding.w,
 801b9ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b9f0:	695b      	ldr	r3, [r3, #20]
        depthwise_conv_s8_generic(input,
 801b9f2:	b298      	uxth	r0, r3
 801b9f4:	6238      	str	r0, [r7, #32]
                                  dw_conv_params->padding.h,
 801b9f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b9f8:	699b      	ldr	r3, [r3, #24]
        depthwise_conv_s8_generic(input,
 801b9fa:	b29c      	uxth	r4, r3
 801b9fc:	61fc      	str	r4, [r7, #28]
                                  dw_conv_params->stride.w,
 801b9fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ba00:	68db      	ldr	r3, [r3, #12]
        depthwise_conv_s8_generic(input,
 801ba02:	b29d      	uxth	r5, r3
 801ba04:	61bd      	str	r5, [r7, #24]
                                  dw_conv_params->stride.h,
 801ba06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ba08:	691b      	ldr	r3, [r3, #16]
        depthwise_conv_s8_generic(input,
 801ba0a:	b29b      	uxth	r3, r3
 801ba0c:	617b      	str	r3, [r7, #20]
                                  bias,
                                  output,
                                  quant_params->shift,
 801ba0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ba10:	685a      	ldr	r2, [r3, #4]
 801ba12:	613a      	str	r2, [r7, #16]
                                  quant_params->multiplier,
 801ba14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ba16:	6819      	ldr	r1, [r3, #0]
 801ba18:	60f9      	str	r1, [r7, #12]
                                  output_dims->w,
 801ba1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ba1c:	689b      	ldr	r3, [r3, #8]
        depthwise_conv_s8_generic(input,
 801ba1e:	b29d      	uxth	r5, r3
                                  output_dims->h,
 801ba20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ba22:	685b      	ldr	r3, [r3, #4]
        depthwise_conv_s8_generic(input,
 801ba24:	b29c      	uxth	r4, r3
 801ba26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ba28:	6858      	ldr	r0, [r3, #4]
 801ba2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ba2c:	6819      	ldr	r1, [r3, #0]
 801ba2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ba30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801ba32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ba34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ba36:	9312      	str	r3, [sp, #72]	; 0x48
 801ba38:	9211      	str	r2, [sp, #68]	; 0x44
 801ba3a:	9110      	str	r1, [sp, #64]	; 0x40
 801ba3c:	900f      	str	r0, [sp, #60]	; 0x3c
 801ba3e:	940e      	str	r4, [sp, #56]	; 0x38
 801ba40:	950d      	str	r5, [sp, #52]	; 0x34
 801ba42:	68f9      	ldr	r1, [r7, #12]
 801ba44:	910c      	str	r1, [sp, #48]	; 0x30
 801ba46:	693a      	ldr	r2, [r7, #16]
 801ba48:	920b      	str	r2, [sp, #44]	; 0x2c
 801ba4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801ba4c:	930a      	str	r3, [sp, #40]	; 0x28
 801ba4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801ba50:	9309      	str	r3, [sp, #36]	; 0x24
 801ba52:	697b      	ldr	r3, [r7, #20]
 801ba54:	9308      	str	r3, [sp, #32]
 801ba56:	69bd      	ldr	r5, [r7, #24]
 801ba58:	9507      	str	r5, [sp, #28]
 801ba5a:	69fc      	ldr	r4, [r7, #28]
 801ba5c:	9406      	str	r4, [sp, #24]
 801ba5e:	6a38      	ldr	r0, [r7, #32]
 801ba60:	9005      	str	r0, [sp, #20]
 801ba62:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801ba64:	9104      	str	r1, [sp, #16]
 801ba66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801ba68:	9203      	str	r2, [sp, #12]
 801ba6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ba6c:	9302      	str	r3, [sp, #8]
 801ba6e:	9601      	str	r6, [sp, #4]
 801ba70:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801ba72:	9300      	str	r3, [sp, #0]
 801ba74:	4643      	mov	r3, r8
 801ba76:	4672      	mov	r2, lr
 801ba78:	4661      	mov	r1, ip
 801ba7a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801ba7c:	f7ff fdad 	bl	801b5da <depthwise_conv_s8_generic>
                                  dw_conv_params->activation.min,
                                  dw_conv_params->activation.max);
    }

    /* Return to application */
    return ARM_MATH_SUCCESS;
 801ba80:	2300      	movs	r3, #0
}
 801ba82:	4618      	mov	r0, r3
 801ba84:	3740      	adds	r7, #64	; 0x40
 801ba86:	46bd      	mov	sp, r7
 801ba88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801ba8c <arm_depthwise_conv_s8_opt>:
                                     const q7_t *kernel,
                                     const cmsis_nn_dims *bias_dims,
                                     const int32_t *bias,
                                     const cmsis_nn_dims *output_dims,
                                     q7_t *output)
{
 801ba8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801ba90:	f5ad 7d4a 	sub.w	sp, sp, #808	; 0x328
 801ba94:	af00      	add	r7, sp, #0
 801ba96:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 801ba9a:	6020      	str	r0, [r4, #0]
 801ba9c:	f107 0028 	add.w	r0, r7, #40	; 0x28
 801baa0:	6001      	str	r1, [r0, #0]
 801baa2:	f107 0124 	add.w	r1, r7, #36	; 0x24
 801baa6:	600a      	str	r2, [r1, #0]
 801baa8:	f107 0220 	add.w	r2, r7, #32
 801baac:	6013      	str	r3, [r2, #0]

    const int32_t input_ch = input_dims->c;
 801baae:	f107 0320 	add.w	r3, r7, #32
 801bab2:	681b      	ldr	r3, [r3, #0]
 801bab4:	68db      	ldr	r3, [r3, #12]
 801bab6:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
    const int32_t output_ch = output_dims->c;
 801baba:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 801babe:	68db      	ldr	r3, [r3, #12]
 801bac0:	f8c7 32d8 	str.w	r3, [r7, #728]	; 0x2d8

    /* Check input constraints input_ch == output_ch */
    if (input_ch != output_ch)
 801bac4:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 801bac8:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 801bacc:	429a      	cmp	r2, r3
 801bace:	d003      	beq.n	801bad8 <arm_depthwise_conv_s8_opt+0x4c>
    {
        return ARM_MATH_SIZE_MISMATCH;
 801bad0:	f06f 0302 	mvn.w	r3, #2
 801bad4:	f001 b99b 	b.w	801ce0e <arm_depthwise_conv_s8_opt+0x1382>
    }
#ifdef ARM_MATH_DSP
    const int32_t input_x = input_dims->w;
 801bad8:	f107 0320 	add.w	r3, r7, #32
 801badc:	681b      	ldr	r3, [r3, #0]
 801bade:	689b      	ldr	r3, [r3, #8]
 801bae0:	f8c7 32d4 	str.w	r3, [r7, #724]	; 0x2d4
    const int32_t input_y = input_dims->h;
 801bae4:	f107 0320 	add.w	r3, r7, #32
 801bae8:	681b      	ldr	r3, [r3, #0]
 801baea:	685b      	ldr	r3, [r3, #4]
 801baec:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
    const int32_t kernel_x = filter_dims->w;
 801baf0:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 801baf4:	689b      	ldr	r3, [r3, #8]
 801baf6:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
    const int32_t kernel_y = filter_dims->h;
 801bafa:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 801bafe:	685b      	ldr	r3, [r3, #4]
 801bb00:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
    const int32_t pad_x = dw_conv_params->padding.w;
 801bb04:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801bb08:	681b      	ldr	r3, [r3, #0]
 801bb0a:	695b      	ldr	r3, [r3, #20]
 801bb0c:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
    const int32_t pad_y = dw_conv_params->padding.h;
 801bb10:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801bb14:	681b      	ldr	r3, [r3, #0]
 801bb16:	699b      	ldr	r3, [r3, #24]
 801bb18:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
    const int32_t stride_x = dw_conv_params->stride.w;
 801bb1c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801bb20:	681b      	ldr	r3, [r3, #0]
 801bb22:	68db      	ldr	r3, [r3, #12]
 801bb24:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
    const int32_t stride_y = dw_conv_params->stride.h;
 801bb28:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801bb2c:	681b      	ldr	r3, [r3, #0]
 801bb2e:	691b      	ldr	r3, [r3, #16]
 801bb30:	f8c7 32b8 	str.w	r3, [r7, #696]	; 0x2b8
    const int32_t *output_shift = quant_params->shift;
 801bb34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801bb38:	681b      	ldr	r3, [r3, #0]
 801bb3a:	685b      	ldr	r3, [r3, #4]
 801bb3c:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
    const int32_t *output_mult = quant_params->multiplier;
 801bb40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801bb44:	681b      	ldr	r3, [r3, #0]
 801bb46:	681b      	ldr	r3, [r3, #0]
 801bb48:	f8c7 3320 	str.w	r3, [r7, #800]	; 0x320
    const int32_t output_x = output_dims->w;
 801bb4c:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 801bb50:	689b      	ldr	r3, [r3, #8]
 801bb52:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
    const int32_t output_y = output_dims->h;
 801bb56:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 801bb5a:	685b      	ldr	r3, [r3, #4]
 801bb5c:	f8c7 32b0 	str.w	r3, [r7, #688]	; 0x2b0
    const int32_t output_offset = dw_conv_params->output_offset;
 801bb60:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801bb64:	681b      	ldr	r3, [r3, #0]
 801bb66:	685b      	ldr	r3, [r3, #4]
 801bb68:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
    const int32_t input_offset = dw_conv_params->input_offset;
 801bb6c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801bb70:	681b      	ldr	r3, [r3, #0]
 801bb72:	681b      	ldr	r3, [r3, #0]
 801bb74:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
    const int32_t output_activation_min = dw_conv_params->activation.min;
 801bb78:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801bb7c:	681b      	ldr	r3, [r3, #0]
 801bb7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bb80:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
    const int32_t output_activation_max = dw_conv_params->activation.max;
 801bb84:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801bb88:	681b      	ldr	r3, [r3, #0]
 801bb8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bb8c:	f8c7 32a0 	str.w	r3, [r7, #672]	; 0x2a0
    q15_t *buffer_a = (q15_t *)ctx->buf;
 801bb90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801bb94:	681b      	ldr	r3, [r3, #0]
 801bb96:	681b      	ldr	r3, [r3, #0]
 801bb98:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
    }

#else // ARM_MATH_DSP
    (void)bias_dims;
    /* Run the following code in cores using DSP extension */
    q15_t *const col_buffer_start = buffer_a;
 801bb9c:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 801bba0:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
    q15_t *col_buffer = col_buffer_start;
 801bba4:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801bba8:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
    const int32_t *const bias_start_pos = bias;
 801bbac:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 801bbb0:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
    const q31_t *const out_mult_start_pos = output_mult;
 801bbb4:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 801bbb8:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
    const q31_t *const out_shift_start_pos = output_shift;
 801bbbc:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 801bbc0:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
    uint16_t row_count;
    uint16_t row_shift;

    for (int i_out_y = 0; i_out_y < output_y; i_out_y++)
 801bbc4:	2300      	movs	r3, #0
 801bbc6:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
 801bbca:	f001 b918 	b.w	801cdfe <arm_depthwise_conv_s8_opt+0x1372>
    {
        const int16_t base_idx_y = (i_out_y * stride_y) - pad_y;
 801bbce:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 801bbd2:	b29a      	uxth	r2, r3
 801bbd4:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 801bbd8:	b29b      	uxth	r3, r3
 801bbda:	fb12 f303 	smulbb	r3, r2, r3
 801bbde:	b29a      	uxth	r2, r3
 801bbe0:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 801bbe4:	b29b      	uxth	r3, r3
 801bbe6:	1ad3      	subs	r3, r2, r3
 801bbe8:	b29b      	uxth	r3, r3
 801bbea:	f8a7 328a 	strh.w	r3, [r7, #650]	; 0x28a
        for (int i_out_x = 0; i_out_x < output_x; i_out_x++)
 801bbee:	2300      	movs	r3, #0
 801bbf0:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
 801bbf4:	f001 b8f7 	b.w	801cde6 <arm_depthwise_conv_s8_opt+0x135a>
        {
            const int16_t base_idx_x = (i_out_x * stride_x) - pad_x;
 801bbf8:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 801bbfc:	b29a      	uxth	r2, r3
 801bbfe:	f8d7 32bc 	ldr.w	r3, [r7, #700]	; 0x2bc
 801bc02:	b29b      	uxth	r3, r3
 801bc04:	fb12 f303 	smulbb	r3, r2, r3
 801bc08:	b29a      	uxth	r2, r3
 801bc0a:	f8d7 32c4 	ldr.w	r3, [r7, #708]	; 0x2c4
 801bc0e:	b29b      	uxth	r3, r3
 801bc10:	1ad3      	subs	r3, r2, r3
 801bc12:	b29b      	uxth	r3, r3
 801bc14:	f8a7 3288 	strh.w	r3, [r7, #648]	; 0x288

            /* Out of bounds is only considered for the y axis as it provides a contiguous zero'ing opportunity than
               along the x axis */
            const int ker_y_start = MAX(0, -base_idx_y);
 801bc18:	f9b7 328a 	ldrsh.w	r3, [r7, #650]	; 0x28a
 801bc1c:	2b00      	cmp	r3, #0
 801bc1e:	dc03      	bgt.n	801bc28 <arm_depthwise_conv_s8_opt+0x19c>
 801bc20:	f9b7 328a 	ldrsh.w	r3, [r7, #650]	; 0x28a
 801bc24:	425b      	negs	r3, r3
 801bc26:	e000      	b.n	801bc2a <arm_depthwise_conv_s8_opt+0x19e>
 801bc28:	2300      	movs	r3, #0
 801bc2a:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
            /* Condition for kernel end dimension: (base_idx_y + ker_y_end) < input_y */
            const int ker_y_end = MIN(kernel_y, input_y - base_idx_y);
 801bc2e:	f9b7 328a 	ldrsh.w	r3, [r7, #650]	; 0x28a
 801bc32:	f8d7 22d0 	ldr.w	r2, [r7, #720]	; 0x2d0
 801bc36:	1ad3      	subs	r3, r2, r3
 801bc38:	f8d7 22c8 	ldr.w	r2, [r7, #712]	; 0x2c8
 801bc3c:	4293      	cmp	r3, r2
 801bc3e:	bfa8      	it	ge
 801bc40:	4613      	movge	r3, r2
 801bc42:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280

            int32_t index = 0;
 801bc46:	2300      	movs	r3, #0
 801bc48:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
            if (ker_y_start != 0)
 801bc4c:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 801bc50:	2b00      	cmp	r3, #0
 801bc52:	d023      	beq.n	801bc9c <arm_depthwise_conv_s8_opt+0x210>
            {
                memset(&col_buffer[index], 0, (kernel_x * input_ch) * ker_y_start * sizeof(q15_t));
 801bc54:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
 801bc58:	005b      	lsls	r3, r3, #1
 801bc5a:	f8d7 231c 	ldr.w	r2, [r7, #796]	; 0x31c
 801bc5e:	18d0      	adds	r0, r2, r3
 801bc60:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 801bc64:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 801bc68:	fb02 f303 	mul.w	r3, r2, r3
 801bc6c:	f8d7 2284 	ldr.w	r2, [r7, #644]	; 0x284
 801bc70:	fb02 f303 	mul.w	r3, r2, r3
 801bc74:	005b      	lsls	r3, r3, #1
 801bc76:	461a      	mov	r2, r3
 801bc78:	2100      	movs	r1, #0
 801bc7a:	f009 ffdb 	bl	8025c34 <memset>
                index += (kernel_x * input_ch) * ker_y_start;
 801bc7e:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 801bc82:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 801bc86:	fb02 f303 	mul.w	r3, r2, r3
 801bc8a:	f8d7 2284 	ldr.w	r2, [r7, #644]	; 0x284
 801bc8e:	fb02 f303 	mul.w	r3, r2, r3
 801bc92:	f8d7 230c 	ldr.w	r2, [r7, #780]	; 0x30c
 801bc96:	4413      	add	r3, r2
 801bc98:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
            }

            for (int i_ker_y = ker_y_start; i_ker_y < ker_y_end; i_ker_y++)
 801bc9c:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 801bca0:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
 801bca4:	e064      	b.n	801bd70 <arm_depthwise_conv_s8_opt+0x2e4>
            {
                const int32_t idx_y = base_idx_y + i_ker_y;
 801bca6:	f9b7 228a 	ldrsh.w	r2, [r7, #650]	; 0x28a
 801bcaa:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 801bcae:	f8d7 1308 	ldr.w	r1, [r7, #776]	; 0x308
 801bcb2:	440a      	add	r2, r1
 801bcb4:	601a      	str	r2, [r3, #0]

                for (int i_ker_x = 0; i_ker_x < kernel_x; i_ker_x++)
 801bcb6:	2300      	movs	r3, #0
 801bcb8:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
 801bcbc:	e04d      	b.n	801bd5a <arm_depthwise_conv_s8_opt+0x2ce>
                {
                    const int32_t idx_x = base_idx_x + i_ker_x;
 801bcbe:	f9b7 2288 	ldrsh.w	r2, [r7, #648]	; 0x288
 801bcc2:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 801bcc6:	f8d7 1304 	ldr.w	r1, [r7, #772]	; 0x304
 801bcca:	440a      	add	r2, r1
 801bccc:	601a      	str	r2, [r3, #0]
                    if (idx_x < 0 || idx_x >= input_x)
 801bcce:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 801bcd2:	681b      	ldr	r3, [r3, #0]
 801bcd4:	2b00      	cmp	r3, #0
 801bcd6:	db06      	blt.n	801bce6 <arm_depthwise_conv_s8_opt+0x25a>
 801bcd8:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 801bcdc:	681a      	ldr	r2, [r3, #0]
 801bcde:	f8d7 32d4 	ldr.w	r3, [r7, #724]	; 0x2d4
 801bce2:	429a      	cmp	r2, r3
 801bce4:	db0d      	blt.n	801bd02 <arm_depthwise_conv_s8_opt+0x276>
                    {
                        memset(&col_buffer[index], 0, input_ch * sizeof(q15_t));
 801bce6:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
 801bcea:	005b      	lsls	r3, r3, #1
 801bcec:	f8d7 231c 	ldr.w	r2, [r7, #796]	; 0x31c
 801bcf0:	18d0      	adds	r0, r2, r3
 801bcf2:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 801bcf6:	005b      	lsls	r3, r3, #1
 801bcf8:	461a      	mov	r2, r3
 801bcfa:	2100      	movs	r1, #0
 801bcfc:	f009 ff9a 	bl	8025c34 <memset>
 801bd00:	e01f      	b.n	801bd42 <arm_depthwise_conv_s8_opt+0x2b6>
                    }
                    else
                    {
                        arm_q7_to_q15_with_offset((q7_t *)input + (idx_y * input_x + idx_x) * input_ch,
 801bd02:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 801bd06:	681b      	ldr	r3, [r3, #0]
 801bd08:	f8d7 22d4 	ldr.w	r2, [r7, #724]	; 0x2d4
 801bd0c:	fb02 f203 	mul.w	r2, r2, r3
 801bd10:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 801bd14:	681b      	ldr	r3, [r3, #0]
 801bd16:	4413      	add	r3, r2
 801bd18:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 801bd1c:	fb02 f303 	mul.w	r3, r2, r3
 801bd20:	461a      	mov	r2, r3
 801bd22:	f8d7 3348 	ldr.w	r3, [r7, #840]	; 0x348
 801bd26:	1898      	adds	r0, r3, r2
                                                  &col_buffer[index],
 801bd28:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
 801bd2c:	005b      	lsls	r3, r3, #1
                        arm_q7_to_q15_with_offset((q7_t *)input + (idx_y * input_x + idx_x) * input_ch,
 801bd2e:	f8d7 231c 	ldr.w	r2, [r7, #796]	; 0x31c
 801bd32:	18d1      	adds	r1, r2, r3
 801bd34:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 801bd38:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 801bd3c:	b21b      	sxth	r3, r3
 801bd3e:	f005 ff22 	bl	8021b86 <arm_q7_to_q15_with_offset>
                                                  input_ch,
                                                  input_offset);
                    }
                    index += input_ch;
 801bd42:	f8d7 230c 	ldr.w	r2, [r7, #780]	; 0x30c
 801bd46:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 801bd4a:	4413      	add	r3, r2
 801bd4c:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
                for (int i_ker_x = 0; i_ker_x < kernel_x; i_ker_x++)
 801bd50:	f8d7 3304 	ldr.w	r3, [r7, #772]	; 0x304
 801bd54:	3301      	adds	r3, #1
 801bd56:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
 801bd5a:	f8d7 2304 	ldr.w	r2, [r7, #772]	; 0x304
 801bd5e:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 801bd62:	429a      	cmp	r2, r3
 801bd64:	dbab      	blt.n	801bcbe <arm_depthwise_conv_s8_opt+0x232>
            for (int i_ker_y = ker_y_start; i_ker_y < ker_y_end; i_ker_y++)
 801bd66:	f8d7 3308 	ldr.w	r3, [r7, #776]	; 0x308
 801bd6a:	3301      	adds	r3, #1
 801bd6c:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
 801bd70:	f8d7 2308 	ldr.w	r2, [r7, #776]	; 0x308
 801bd74:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 801bd78:	429a      	cmp	r2, r3
 801bd7a:	db94      	blt.n	801bca6 <arm_depthwise_conv_s8_opt+0x21a>
                }
            }

            const int diff = kernel_y - ker_y_end;
 801bd7c:	f8d7 22c8 	ldr.w	r2, [r7, #712]	; 0x2c8
 801bd80:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 801bd84:	1ad3      	subs	r3, r2, r3
 801bd86:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
            if (diff != 0)
 801bd8a:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 801bd8e:	2b00      	cmp	r3, #0
 801bd90:	d014      	beq.n	801bdbc <arm_depthwise_conv_s8_opt+0x330>
            {
                memset(&col_buffer[index], 0, (kernel_x * input_ch) * diff * sizeof(q15_t));
 801bd92:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
 801bd96:	005b      	lsls	r3, r3, #1
 801bd98:	f8d7 231c 	ldr.w	r2, [r7, #796]	; 0x31c
 801bd9c:	18d0      	adds	r0, r2, r3
 801bd9e:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 801bda2:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 801bda6:	fb02 f303 	mul.w	r3, r2, r3
 801bdaa:	f8d7 227c 	ldr.w	r2, [r7, #636]	; 0x27c
 801bdae:	fb02 f303 	mul.w	r3, r2, r3
 801bdb2:	005b      	lsls	r3, r3, #1
 801bdb4:	461a      	mov	r2, r3
 801bdb6:	2100      	movs	r1, #0
 801bdb8:	f009 ff3c 	bl	8025c34 <memset>
            }

            row_count = output_ch / 4;
 801bdbc:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 801bdc0:	2b00      	cmp	r3, #0
 801bdc2:	da00      	bge.n	801bdc6 <arm_depthwise_conv_s8_opt+0x33a>
 801bdc4:	3303      	adds	r3, #3
 801bdc6:	109b      	asrs	r3, r3, #2
 801bdc8:	f8a7 331a 	strh.w	r3, [r7, #794]	; 0x31a
            row_shift = 0;
 801bdcc:	2300      	movs	r3, #0
 801bdce:	f8a7 3318 	strh.w	r3, [r7, #792]	; 0x318
            bias = bias_start_pos;
 801bdd2:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 801bdd6:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358
            output_mult = out_mult_start_pos;
 801bdda:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 801bdde:	f8c7 3320 	str.w	r3, [r7, #800]	; 0x320
            output_shift = out_shift_start_pos;
 801bde2:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801bde6:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324

            while (row_count)
 801bdea:	f000 bea2 	b.w	801cb32 <arm_depthwise_conv_s8_opt+0x10a6>
            {
                q31_t sum = *bias++;
 801bdee:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 801bdf2:	1d1a      	adds	r2, r3, #4
 801bdf4:	f8c7 2358 	str.w	r2, [r7, #856]	; 0x358
 801bdf8:	681b      	ldr	r3, [r3, #0]
 801bdfa:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
                q31_t sum_2 = *bias++;
 801bdfe:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 801be02:	1d1a      	adds	r2, r3, #4
 801be04:	f8c7 2358 	str.w	r2, [r7, #856]	; 0x358
 801be08:	681b      	ldr	r3, [r3, #0]
 801be0a:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
                q31_t sum_3 = *bias++;
 801be0e:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 801be12:	1d1a      	adds	r2, r3, #4
 801be14:	f8c7 2358 	str.w	r2, [r7, #856]	; 0x358
 801be18:	681b      	ldr	r3, [r3, #0]
 801be1a:	f8c7 32f8 	str.w	r3, [r7, #760]	; 0x2f8
                q31_t sum_4 = *bias++;
 801be1e:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 801be22:	1d1a      	adds	r2, r3, #4
 801be24:	f8c7 2358 	str.w	r2, [r7, #856]	; 0x358
 801be28:	681b      	ldr	r3, [r3, #0]
 801be2a:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4

                uint16_t col_count = (kernel_x * kernel_y) / 2;
 801be2e:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 801be32:	f8d7 22c8 	ldr.w	r2, [r7, #712]	; 0x2c8
 801be36:	fb02 f303 	mul.w	r3, r2, r3
 801be3a:	0fda      	lsrs	r2, r3, #31
 801be3c:	4413      	add	r3, r2
 801be3e:	105b      	asrs	r3, r3, #1
 801be40:	f8a7 32f2 	strh.w	r3, [r7, #754]	; 0x2f2
                q15_t *col_pos = col_buffer_start + row_shift;
 801be44:	f8b7 3318 	ldrh.w	r3, [r7, #792]	; 0x318
 801be48:	005b      	lsls	r3, r3, #1
 801be4a:	f8d7 2298 	ldr.w	r2, [r7, #664]	; 0x298
 801be4e:	4413      	add	r3, r2
 801be50:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
                const q7_t *row_pos = kernel + row_shift;
 801be54:	f8b7 3318 	ldrh.w	r3, [r7, #792]	; 0x318
 801be58:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 801be5c:	4413      	add	r3, r2
 801be5e:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
                row_shift += 4;
 801be62:	f8b7 3318 	ldrh.w	r3, [r7, #792]	; 0x318
 801be66:	3304      	adds	r3, #4
 801be68:	f8a7 3318 	strh.w	r3, [r7, #792]	; 0x318

                while (col_count)
 801be6c:	e25b      	b.n	801c326 <arm_depthwise_conv_s8_opt+0x89a>
 801be6e:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 801be72:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 801be76:	601a      	str	r2, [r3, #0]
 801be78:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 801be7c:	681b      	ldr	r3, [r3, #0]
 801be7e:	681b      	ldr	r3, [r3, #0]
 801be80:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801be82:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801be86:	601a      	str	r2, [r3, #0]
    return (val);
 801be88:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801be8c:	681b      	ldr	r3, [r3, #0]
                    /* General idea is to read 4 + 4 (input, kernel) pair and re-arrange them in the right order to
                    use in a SMLAD instruction . One run of this loop produces 4 partial outputs with 8 MACs. */
                    /* Note: variable names can be improved here to align with rows and columns. */
                    q31_t ip_a1, ip_a2, ip_b1, ip_b2, op_a, op_b, op_c;
                    /* Read 4 weights */
                    ip_b1 = arm_nn_read_q7x4(row_pos);
 801be8e:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
                    ip_a1 = arm_nn_read_q7x4(row_pos + input_ch);
 801be92:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 801be96:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 801be9a:	441a      	add	r2, r3
 801be9c:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 801bea0:	601a      	str	r2, [r3, #0]
 801bea2:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 801bea6:	681b      	ldr	r3, [r3, #0]
 801bea8:	681b      	ldr	r3, [r3, #0]
 801beaa:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801beac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801beb0:	601a      	str	r2, [r3, #0]
    return (val);
 801beb2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801beb6:	681b      	ldr	r3, [r3, #0]
 801beb8:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
 801bebc:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 801bec0:	f8d7 22ec 	ldr.w	r2, [r7, #748]	; 0x2ec
 801bec4:	601a      	str	r2, [r3, #0]
 801bec6:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 801beca:	681b      	ldr	r3, [r3, #0]
 801becc:	681b      	ldr	r3, [r3, #0]
 801bece:	461a      	mov	r2, r3
    memcpy(&val, in_q15, 4);
 801bed0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801bed4:	601a      	str	r2, [r3, #0]
    return (val);
 801bed6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801beda:	681b      	ldr	r3, [r3, #0]
                    op_a = arm_nn_read_q15x2(col_pos);
 801bedc:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
                    op_b = arm_nn_read_q15x2(col_pos + input_ch);
 801bee0:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 801bee4:	005b      	lsls	r3, r3, #1
 801bee6:	f8d7 22ec 	ldr.w	r2, [r7, #748]	; 0x2ec
 801beea:	441a      	add	r2, r3
 801beec:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 801bef0:	601a      	str	r2, [r3, #0]
 801bef2:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 801bef6:	681b      	ldr	r3, [r3, #0]
 801bef8:	681b      	ldr	r3, [r3, #0]
 801befa:	461a      	mov	r2, r3
    memcpy(&val, in_q15, 4);
 801befc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801bf00:	601a      	str	r2, [r3, #0]
    return (val);
 801bf02:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801bf06:	681b      	ldr	r3, [r3, #0]
 801bf08:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260

                    ip_a2 = __SXTB16(ip_b1);
 801bf0c:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 801bf10:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 801bf14:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801bf16:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 801bf1a:	681b      	ldr	r3, [r3, #0]
 801bf1c:	fa2f f283 	sxtb16	r2, r3
 801bf20:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 801bf24:	601a      	str	r2, [r3, #0]
  return(result);
 801bf26:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 801bf2a:	681b      	ldr	r3, [r3, #0]
 801bf2c:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
                    ip_b1 = __SXTB16(__ROR(ip_b1, 8));
 801bf30:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 801bf34:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801bf38:	601a      	str	r2, [r3, #0]
 801bf3a:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 801bf3e:	2208      	movs	r2, #8
 801bf40:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 801bf42:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 801bf46:	f507 72e2 	add.w	r2, r7, #452	; 0x1c4
 801bf4a:	6812      	ldr	r2, [r2, #0]
 801bf4c:	f002 021f 	and.w	r2, r2, #31
 801bf50:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 801bf52:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 801bf56:	681b      	ldr	r3, [r3, #0]
 801bf58:	2b00      	cmp	r3, #0
 801bf5a:	d103      	bne.n	801bf64 <arm_depthwise_conv_s8_opt+0x4d8>
    return op1;
 801bf5c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801bf60:	681b      	ldr	r3, [r3, #0]
 801bf62:	e007      	b.n	801bf74 <arm_depthwise_conv_s8_opt+0x4e8>
  return (op1 >> op2) | (op1 << (32U - op2));
 801bf64:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 801bf68:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 801bf6c:	6812      	ldr	r2, [r2, #0]
 801bf6e:	681b      	ldr	r3, [r3, #0]
 801bf70:	fa62 f303 	ror.w	r3, r2, r3
 801bf74:	f507 72e8 	add.w	r2, r7, #464	; 0x1d0
 801bf78:	6013      	str	r3, [r2, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801bf7a:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 801bf7e:	681b      	ldr	r3, [r3, #0]
 801bf80:	fa2f f283 	sxtb16	r2, r3
 801bf84:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 801bf88:	601a      	str	r2, [r3, #0]
  return(result);
 801bf8a:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 801bf8e:	681b      	ldr	r3, [r3, #0]
 801bf90:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c

                    ip_b2 = __SXTB16(ip_a1);
 801bf94:	f8d7 2268 	ldr.w	r2, [r7, #616]	; 0x268
 801bf98:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 801bf9c:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801bf9e:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 801bfa2:	681b      	ldr	r3, [r3, #0]
 801bfa4:	fa2f f283 	sxtb16	r2, r3
 801bfa8:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 801bfac:	601a      	str	r2, [r3, #0]
  return(result);
 801bfae:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 801bfb2:	681b      	ldr	r3, [r3, #0]
 801bfb4:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
                    ip_a1 = __SXTB16(__ROR(ip_a1, 8));
 801bfb8:	f8d7 2268 	ldr.w	r2, [r7, #616]	; 0x268
 801bfbc:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 801bfc0:	601a      	str	r2, [r3, #0]
 801bfc2:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 801bfc6:	2208      	movs	r2, #8
 801bfc8:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 801bfca:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 801bfce:	f507 72ee 	add.w	r2, r7, #476	; 0x1dc
 801bfd2:	6812      	ldr	r2, [r2, #0]
 801bfd4:	f002 021f 	and.w	r2, r2, #31
 801bfd8:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 801bfda:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 801bfde:	681b      	ldr	r3, [r3, #0]
 801bfe0:	2b00      	cmp	r3, #0
 801bfe2:	d103      	bne.n	801bfec <arm_depthwise_conv_s8_opt+0x560>
    return op1;
 801bfe4:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 801bfe8:	681b      	ldr	r3, [r3, #0]
 801bfea:	e007      	b.n	801bffc <arm_depthwise_conv_s8_opt+0x570>
  return (op1 >> op2) | (op1 << (32U - op2));
 801bfec:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 801bff0:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 801bff4:	6812      	ldr	r2, [r2, #0]
 801bff6:	681b      	ldr	r3, [r3, #0]
 801bff8:	fa62 f303 	ror.w	r3, r2, r3
 801bffc:	f507 72f4 	add.w	r2, r7, #488	; 0x1e8
 801c000:	6013      	str	r3, [r2, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801c002:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 801c006:	681b      	ldr	r3, [r3, #0]
 801c008:	fa2f f283 	sxtb16	r2, r3
 801c00c:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 801c010:	601a      	str	r2, [r3, #0]
  return(result);
 801c012:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 801c016:	681b      	ldr	r3, [r3, #0]
 801c018:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268

                    op_c = __PKHBT(op_b, op_a, 16);
 801c01c:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 801c020:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 801c024:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 801c028:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 801c02c:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 801c030:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 801c034:	eac3 4302 	pkhbt	r3, r3, r2, lsl #16
 801c038:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 801c03c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 801c040:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
                    op_a = __PKHTB(op_b, op_a, 16);
 801c044:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 801c048:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 801c04c:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 801c050:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 801c054:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 801c058:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 801c05c:	eac3 4322 	pkhtb	r3, r3, r2, asr #16
 801c060:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 801c064:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 801c068:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
                    op_b = __PKHBT(ip_b2, ip_a2, 16);
 801c06c:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 801c070:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 801c074:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 801c078:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 801c07c:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 801c080:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 801c084:	eac3 4302 	pkhbt	r3, r3, r2, lsl #16
 801c088:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
 801c08c:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 801c090:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
                    sum = __SMLAD(op_c, op_b, sum);
 801c094:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 801c098:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 801c09c:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 801c0a0:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 801c0a4:	6018      	str	r0, [r3, #0]
 801c0a6:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 801c0aa:	6019      	str	r1, [r3, #0]
 801c0ac:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 801c0b0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801c0b2:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 801c0b6:	681b      	ldr	r3, [r3, #0]
 801c0b8:	f507 72c6 	add.w	r2, r7, #396	; 0x18c
 801c0bc:	6812      	ldr	r2, [r2, #0]
 801c0be:	f507 71c4 	add.w	r1, r7, #392	; 0x188
 801c0c2:	6809      	ldr	r1, [r1, #0]
 801c0c4:	fb23 1202 	smlad	r2, r3, r2, r1
 801c0c8:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 801c0cc:	601a      	str	r2, [r3, #0]
  return(result);
 801c0ce:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 801c0d2:	681b      	ldr	r3, [r3, #0]
 801c0d4:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300

                    op_b = __PKHBT(ip_b1, ip_a1, 16);
 801c0d8:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 801c0dc:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 801c0e0:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801c0e4:	f8d7 2268 	ldr.w	r2, [r7, #616]	; 0x268
 801c0e8:	601a      	str	r2, [r3, #0]
 801c0ea:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 801c0ee:	f507 720a 	add.w	r2, r7, #552	; 0x228
 801c0f2:	6812      	ldr	r2, [r2, #0]
 801c0f4:	eac3 4202 	pkhbt	r2, r3, r2, lsl #16
 801c0f8:	f507 7309 	add.w	r3, r7, #548	; 0x224
 801c0fc:	601a      	str	r2, [r3, #0]
 801c0fe:	f507 7309 	add.w	r3, r7, #548	; 0x224
 801c102:	681b      	ldr	r3, [r3, #0]
 801c104:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
                    sum_2 = __SMLAD(op_a, op_b, sum_2);
 801c108:	f8d7 0264 	ldr.w	r0, [r7, #612]	; 0x264
 801c10c:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 801c110:	f8d7 22fc 	ldr.w	r2, [r7, #764]	; 0x2fc
 801c114:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 801c118:	6018      	str	r0, [r3, #0]
 801c11a:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 801c11e:	6019      	str	r1, [r3, #0]
 801c120:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 801c124:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801c126:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 801c12a:	681b      	ldr	r3, [r3, #0]
 801c12c:	f507 72ce 	add.w	r2, r7, #412	; 0x19c
 801c130:	6812      	ldr	r2, [r2, #0]
 801c132:	f507 71cc 	add.w	r1, r7, #408	; 0x198
 801c136:	6809      	ldr	r1, [r1, #0]
 801c138:	fb23 1202 	smlad	r2, r3, r2, r1
 801c13c:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 801c140:	601a      	str	r2, [r3, #0]
  return(result);
 801c142:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 801c146:	681b      	ldr	r3, [r3, #0]
 801c148:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc

                    op_a = arm_nn_read_q15x2(col_pos + 2);
 801c14c:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 801c150:	1d1a      	adds	r2, r3, #4
 801c152:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 801c156:	601a      	str	r2, [r3, #0]
 801c158:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 801c15c:	681b      	ldr	r3, [r3, #0]
 801c15e:	681b      	ldr	r3, [r3, #0]
 801c160:	461a      	mov	r2, r3
    memcpy(&val, in_q15, 4);
 801c162:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801c166:	601a      	str	r2, [r3, #0]
    return (val);
 801c168:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801c16c:	681b      	ldr	r3, [r3, #0]
 801c16e:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
                    op_b = arm_nn_read_q15x2(col_pos + input_ch + 2);
 801c172:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 801c176:	3302      	adds	r3, #2
 801c178:	005b      	lsls	r3, r3, #1
 801c17a:	f8d7 22ec 	ldr.w	r2, [r7, #748]	; 0x2ec
 801c17e:	441a      	add	r2, r3
 801c180:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 801c184:	601a      	str	r2, [r3, #0]
 801c186:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 801c18a:	681b      	ldr	r3, [r3, #0]
 801c18c:	681b      	ldr	r3, [r3, #0]
 801c18e:	461a      	mov	r2, r3
    memcpy(&val, in_q15, 4);
 801c190:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801c194:	601a      	str	r2, [r3, #0]
    return (val);
 801c196:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801c19a:	681b      	ldr	r3, [r3, #0]
 801c19c:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260

                    op_c = __PKHBT(op_b, op_a, 16);
 801c1a0:	f507 7308 	add.w	r3, r7, #544	; 0x220
 801c1a4:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 801c1a8:	601a      	str	r2, [r3, #0]
 801c1aa:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 801c1ae:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 801c1b2:	601a      	str	r2, [r3, #0]
 801c1b4:	f507 7308 	add.w	r3, r7, #544	; 0x220
 801c1b8:	681b      	ldr	r3, [r3, #0]
 801c1ba:	f507 7207 	add.w	r2, r7, #540	; 0x21c
 801c1be:	6812      	ldr	r2, [r2, #0]
 801c1c0:	eac3 4202 	pkhbt	r2, r3, r2, lsl #16
 801c1c4:	f507 7306 	add.w	r3, r7, #536	; 0x218
 801c1c8:	601a      	str	r2, [r3, #0]
 801c1ca:	f507 7306 	add.w	r3, r7, #536	; 0x218
 801c1ce:	681b      	ldr	r3, [r3, #0]
 801c1d0:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
                    op_a = __PKHTB(op_b, op_a, 16);
 801c1d4:	f507 7305 	add.w	r3, r7, #532	; 0x214
 801c1d8:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 801c1dc:	601a      	str	r2, [r3, #0]
 801c1de:	f507 7304 	add.w	r3, r7, #528	; 0x210
 801c1e2:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 801c1e6:	601a      	str	r2, [r3, #0]
 801c1e8:	f507 7305 	add.w	r3, r7, #532	; 0x214
 801c1ec:	681b      	ldr	r3, [r3, #0]
 801c1ee:	f507 7204 	add.w	r2, r7, #528	; 0x210
 801c1f2:	6812      	ldr	r2, [r2, #0]
 801c1f4:	eac3 4222 	pkhtb	r2, r3, r2, asr #16
 801c1f8:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 801c1fc:	601a      	str	r2, [r3, #0]
 801c1fe:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 801c202:	681b      	ldr	r3, [r3, #0]
 801c204:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
                    op_b = __PKHTB(ip_a2, ip_b2, 16);
 801c208:	f507 7302 	add.w	r3, r7, #520	; 0x208
 801c20c:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 801c210:	601a      	str	r2, [r3, #0]
 801c212:	f507 7301 	add.w	r3, r7, #516	; 0x204
 801c216:	f8d7 2258 	ldr.w	r2, [r7, #600]	; 0x258
 801c21a:	601a      	str	r2, [r3, #0]
 801c21c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 801c220:	681b      	ldr	r3, [r3, #0]
 801c222:	f507 7201 	add.w	r2, r7, #516	; 0x204
 801c226:	6812      	ldr	r2, [r2, #0]
 801c228:	eac3 4222 	pkhtb	r2, r3, r2, asr #16
 801c22c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801c230:	601a      	str	r2, [r3, #0]
 801c232:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801c236:	681b      	ldr	r3, [r3, #0]
 801c238:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
                    sum_3 = __SMLAD(op_c, op_b, sum_3);
 801c23c:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 801c240:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 801c244:	f8d7 22f8 	ldr.w	r2, [r7, #760]	; 0x2f8
 801c248:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 801c24c:	6018      	str	r0, [r3, #0]
 801c24e:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 801c252:	6019      	str	r1, [r3, #0]
 801c254:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 801c258:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801c25a:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 801c25e:	681b      	ldr	r3, [r3, #0]
 801c260:	f507 72be 	add.w	r2, r7, #380	; 0x17c
 801c264:	6812      	ldr	r2, [r2, #0]
 801c266:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 801c26a:	6809      	ldr	r1, [r1, #0]
 801c26c:	fb23 1202 	smlad	r2, r3, r2, r1
 801c270:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 801c274:	601a      	str	r2, [r3, #0]
  return(result);
 801c276:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 801c27a:	681b      	ldr	r3, [r3, #0]
 801c27c:	f8c7 32f8 	str.w	r3, [r7, #760]	; 0x2f8

                    op_b = __PKHTB(ip_a1, ip_b1, 16);
 801c280:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 801c284:	f8d7 2268 	ldr.w	r2, [r7, #616]	; 0x268
 801c288:	601a      	str	r2, [r3, #0]
 801c28a:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 801c28e:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 801c292:	601a      	str	r2, [r3, #0]
 801c294:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 801c298:	681b      	ldr	r3, [r3, #0]
 801c29a:	f507 72fc 	add.w	r2, r7, #504	; 0x1f8
 801c29e:	6812      	ldr	r2, [r2, #0]
 801c2a0:	eac3 4222 	pkhtb	r2, r3, r2, asr #16
 801c2a4:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 801c2a8:	601a      	str	r2, [r3, #0]
 801c2aa:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 801c2ae:	681b      	ldr	r3, [r3, #0]
 801c2b0:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
                    sum_4 = __SMLAD(op_a, op_b, sum_4);
 801c2b4:	f8d7 0264 	ldr.w	r0, [r7, #612]	; 0x264
 801c2b8:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 801c2bc:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 801c2c0:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 801c2c4:	6018      	str	r0, [r3, #0]
 801c2c6:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 801c2ca:	6019      	str	r1, [r3, #0]
 801c2cc:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 801c2d0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801c2d2:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 801c2d6:	681b      	ldr	r3, [r3, #0]
 801c2d8:	f507 72b6 	add.w	r2, r7, #364	; 0x16c
 801c2dc:	6812      	ldr	r2, [r2, #0]
 801c2de:	f507 71b4 	add.w	r1, r7, #360	; 0x168
 801c2e2:	6809      	ldr	r1, [r1, #0]
 801c2e4:	fb23 1202 	smlad	r2, r3, r2, r1
 801c2e8:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 801c2ec:	601a      	str	r2, [r3, #0]
  return(result);
 801c2ee:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 801c2f2:	681b      	ldr	r3, [r3, #0]
 801c2f4:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4

                    row_pos += input_ch << 1;
 801c2f8:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 801c2fc:	005b      	lsls	r3, r3, #1
 801c2fe:	461a      	mov	r2, r3
 801c300:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 801c304:	4413      	add	r3, r2
 801c306:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
                    col_pos += input_ch << 1;
 801c30a:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 801c30e:	005b      	lsls	r3, r3, #1
 801c310:	005b      	lsls	r3, r3, #1
 801c312:	f8d7 22ec 	ldr.w	r2, [r7, #748]	; 0x2ec
 801c316:	4413      	add	r3, r2
 801c318:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
                    col_count--;
 801c31c:	f8b7 32f2 	ldrh.w	r3, [r7, #754]	; 0x2f2
 801c320:	3b01      	subs	r3, #1
 801c322:	f8a7 32f2 	strh.w	r3, [r7, #754]	; 0x2f2
                while (col_count)
 801c326:	f8b7 32f2 	ldrh.w	r3, [r7, #754]	; 0x2f2
 801c32a:	2b00      	cmp	r3, #0
 801c32c:	f47f ad9f 	bne.w	801be6e <arm_depthwise_conv_s8_opt+0x3e2>
                }

                col_count = (kernel_x * kernel_y) & 0x1;
 801c330:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 801c334:	b29a      	uxth	r2, r3
 801c336:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 801c33a:	b29b      	uxth	r3, r3
 801c33c:	fb12 f303 	smulbb	r3, r2, r3
 801c340:	b29b      	uxth	r3, r3
 801c342:	f003 0301 	and.w	r3, r3, #1
 801c346:	f8a7 32f2 	strh.w	r3, [r7, #754]	; 0x2f2
                while (col_count)
 801c34a:	e059      	b.n	801c400 <arm_depthwise_conv_s8_opt+0x974>
                {
                    sum += row_pos[0] * col_pos[0];
 801c34c:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 801c350:	f993 3000 	ldrsb.w	r3, [r3]
 801c354:	461a      	mov	r2, r3
 801c356:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 801c35a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c35e:	fb03 f302 	mul.w	r3, r3, r2
 801c362:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 801c366:	4413      	add	r3, r2
 801c368:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
                    sum_2 += row_pos[1] * col_pos[1];
 801c36c:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 801c370:	3301      	adds	r3, #1
 801c372:	f993 3000 	ldrsb.w	r3, [r3]
 801c376:	461a      	mov	r2, r3
 801c378:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 801c37c:	3302      	adds	r3, #2
 801c37e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c382:	fb03 f302 	mul.w	r3, r3, r2
 801c386:	f8d7 22fc 	ldr.w	r2, [r7, #764]	; 0x2fc
 801c38a:	4413      	add	r3, r2
 801c38c:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
                    sum_3 += row_pos[2] * col_pos[2];
 801c390:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 801c394:	3302      	adds	r3, #2
 801c396:	f993 3000 	ldrsb.w	r3, [r3]
 801c39a:	461a      	mov	r2, r3
 801c39c:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 801c3a0:	3304      	adds	r3, #4
 801c3a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c3a6:	fb03 f302 	mul.w	r3, r3, r2
 801c3aa:	f8d7 22f8 	ldr.w	r2, [r7, #760]	; 0x2f8
 801c3ae:	4413      	add	r3, r2
 801c3b0:	f8c7 32f8 	str.w	r3, [r7, #760]	; 0x2f8
                    sum_4 += row_pos[3] * col_pos[3];
 801c3b4:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 801c3b8:	3303      	adds	r3, #3
 801c3ba:	f993 3000 	ldrsb.w	r3, [r3]
 801c3be:	461a      	mov	r2, r3
 801c3c0:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 801c3c4:	3306      	adds	r3, #6
 801c3c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c3ca:	fb03 f302 	mul.w	r3, r3, r2
 801c3ce:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 801c3d2:	4413      	add	r3, r2
 801c3d4:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4

                    row_pos += input_ch;
 801c3d8:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 801c3dc:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 801c3e0:	4413      	add	r3, r2
 801c3e2:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
                    col_pos += input_ch;
 801c3e6:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 801c3ea:	005b      	lsls	r3, r3, #1
 801c3ec:	f8d7 22ec 	ldr.w	r2, [r7, #748]	; 0x2ec
 801c3f0:	4413      	add	r3, r2
 801c3f2:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec

                    col_count--;
 801c3f6:	f8b7 32f2 	ldrh.w	r3, [r7, #754]	; 0x2f2
 801c3fa:	3b01      	subs	r3, #1
 801c3fc:	f8a7 32f2 	strh.w	r3, [r7, #754]	; 0x2f2
                while (col_count)
 801c400:	f8b7 32f2 	ldrh.w	r3, [r7, #754]	; 0x2f2
 801c404:	2b00      	cmp	r3, #0
 801c406:	d1a1      	bne.n	801c34c <arm_depthwise_conv_s8_opt+0x8c0>
                }
                sum = arm_nn_requantize(sum, *output_mult++, *output_shift++);
 801c408:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 801c40c:	1d1a      	adds	r2, r3, #4
 801c40e:	f8c7 2320 	str.w	r2, [r7, #800]	; 0x320
 801c412:	6819      	ldr	r1, [r3, #0]
 801c414:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 801c418:	1d1a      	adds	r2, r3, #4
 801c41a:	f8c7 2324 	str.w	r2, [r7, #804]	; 0x324
 801c41e:	681a      	ldr	r2, [r3, #0]
 801c420:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801c424:	f8d7 0300 	ldr.w	r0, [r7, #768]	; 0x300
 801c428:	6018      	str	r0, [r3, #0]
 801c42a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801c42e:	6019      	str	r1, [r3, #0]
 801c430:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801c434:	601a      	str	r2, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801c436:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801c43a:	681b      	ldr	r3, [r3, #0]
 801c43c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c440:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 801c444:	6812      	ldr	r2, [r2, #0]
 801c446:	409a      	lsls	r2, r3
 801c448:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 801c44c:	601a      	str	r2, [r3, #0]
 801c44e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801c452:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 801c456:	6812      	ldr	r2, [r2, #0]
 801c458:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801c45a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801c45e:	2200      	movs	r2, #0
 801c460:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 801c462:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801c466:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801c46a:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 801c46c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801c470:	2200      	movs	r2, #0
 801c472:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801c474:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 801c478:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 801c47c:	681b      	ldr	r3, [r3, #0]
 801c47e:	4618      	mov	r0, r3
 801c480:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801c484:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801c488:	681b      	ldr	r3, [r3, #0]
 801c48a:	461a      	mov	r2, r3
 801c48c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801c490:	fb02 f501 	mul.w	r5, r2, r1
 801c494:	fb00 f403 	mul.w	r4, r0, r3
 801c498:	442c      	add	r4, r5
 801c49a:	fba0 2302 	umull	r2, r3, r0, r2
 801c49e:	18e1      	adds	r1, r4, r3
 801c4a0:	460b      	mov	r3, r1
 801c4a2:	eb18 0102 	adds.w	r1, r8, r2
 801c4a6:	60b9      	str	r1, [r7, #8]
 801c4a8:	eb49 0303 	adc.w	r3, r9, r3
 801c4ac:	60fb      	str	r3, [r7, #12]
 801c4ae:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 801c4b2:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
    result = (int32_t)(mult.long_long >> 31);
 801c4b6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 801c4ba:	f04f 0200 	mov.w	r2, #0
 801c4be:	f04f 0300 	mov.w	r3, #0
 801c4c2:	0fc2      	lsrs	r2, r0, #31
 801c4c4:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801c4c8:	17cb      	asrs	r3, r1, #31
 801c4ca:	f107 01bc 	add.w	r1, r7, #188	; 0xbc
 801c4ce:	4613      	mov	r3, r2
 801c4d0:	600b      	str	r3, [r1, #0]
    return result;
 801c4d2:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801c4d6:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801c4d8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801c4dc:	681b      	ldr	r3, [r3, #0]
 801c4de:	2b00      	cmp	r3, #0
 801c4e0:	dc04      	bgt.n	801c4ec <arm_depthwise_conv_s8_opt+0xa60>
 801c4e2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801c4e6:	681b      	ldr	r3, [r3, #0]
 801c4e8:	425b      	negs	r3, r3
 801c4ea:	e000      	b.n	801c4ee <arm_depthwise_conv_s8_opt+0xa62>
 801c4ec:	2300      	movs	r3, #0
 801c4ee:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 801c4f2:	6011      	str	r1, [r2, #0]
 801c4f4:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 801c4f8:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801c4fa:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801c4fe:	2200      	movs	r2, #0
 801c500:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801c502:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 801c506:	2201      	movs	r2, #1
 801c508:	681b      	ldr	r3, [r3, #0]
 801c50a:	409a      	lsls	r2, r3
 801c50c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 801c510:	3a01      	subs	r2, #1
 801c512:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 801c514:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801c518:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 801c51c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 801c520:	6809      	ldr	r1, [r1, #0]
 801c522:	6812      	ldr	r2, [r2, #0]
 801c524:	400a      	ands	r2, r1
 801c526:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 801c528:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801c52c:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 801c530:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 801c534:	6809      	ldr	r1, [r1, #0]
 801c536:	6812      	ldr	r2, [r2, #0]
 801c538:	fa41 f202 	asr.w	r2, r1, r2
 801c53c:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 801c53e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801c542:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 801c546:	6812      	ldr	r2, [r2, #0]
 801c548:	1052      	asrs	r2, r2, #1
 801c54a:	601a      	str	r2, [r3, #0]
    if (result < 0)
 801c54c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801c550:	681b      	ldr	r3, [r3, #0]
 801c552:	2b00      	cmp	r3, #0
 801c554:	da06      	bge.n	801c564 <arm_depthwise_conv_s8_opt+0xad8>
        threshold++;
 801c556:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801c55a:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 801c55e:	6812      	ldr	r2, [r2, #0]
 801c560:	3201      	adds	r2, #1
 801c562:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 801c564:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 801c568:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801c56c:	6812      	ldr	r2, [r2, #0]
 801c56e:	681b      	ldr	r3, [r3, #0]
 801c570:	429a      	cmp	r2, r3
 801c572:	dd06      	ble.n	801c582 <arm_depthwise_conv_s8_opt+0xaf6>
        result++;
 801c574:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801c578:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 801c57c:	6812      	ldr	r2, [r2, #0]
 801c57e:	3201      	adds	r2, #1
 801c580:	601a      	str	r2, [r3, #0]
    return result;
 801c582:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801c586:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801c588:	bf00      	nop
 801c58a:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
                sum += output_offset;
 801c58e:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 801c592:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 801c596:	4413      	add	r3, r2
 801c598:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
                sum = MAX(sum, output_activation_min);
 801c59c:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 801c5a0:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 801c5a4:	4293      	cmp	r3, r2
 801c5a6:	bfb8      	it	lt
 801c5a8:	4613      	movlt	r3, r2
 801c5aa:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
                sum = MIN(sum, output_activation_max);
 801c5ae:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 801c5b2:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 801c5b6:	4293      	cmp	r3, r2
 801c5b8:	bfa8      	it	ge
 801c5ba:	4613      	movge	r3, r2
 801c5bc:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
                *output++ = (q7_t)sum;
 801c5c0:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 801c5c4:	1c5a      	adds	r2, r3, #1
 801c5c6:	f8c7 2360 	str.w	r2, [r7, #864]	; 0x360
 801c5ca:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 801c5ce:	b252      	sxtb	r2, r2
 801c5d0:	701a      	strb	r2, [r3, #0]

                sum_2 = arm_nn_requantize(sum_2, *output_mult++, *output_shift++);
 801c5d2:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 801c5d6:	1d1a      	adds	r2, r3, #4
 801c5d8:	f8c7 2320 	str.w	r2, [r7, #800]	; 0x320
 801c5dc:	6819      	ldr	r1, [r3, #0]
 801c5de:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 801c5e2:	1d1a      	adds	r2, r3, #4
 801c5e4:	f8c7 2324 	str.w	r2, [r7, #804]	; 0x324
 801c5e8:	681a      	ldr	r2, [r3, #0]
 801c5ea:	f507 7380 	add.w	r3, r7, #256	; 0x100
 801c5ee:	f8d7 02fc 	ldr.w	r0, [r7, #764]	; 0x2fc
 801c5f2:	6018      	str	r0, [r3, #0]
 801c5f4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 801c5f8:	6019      	str	r1, [r3, #0]
 801c5fa:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801c5fe:	601a      	str	r2, [r3, #0]
 801c600:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801c604:	681b      	ldr	r3, [r3, #0]
 801c606:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c60a:	f507 7280 	add.w	r2, r7, #256	; 0x100
 801c60e:	6812      	ldr	r2, [r2, #0]
 801c610:	409a      	lsls	r2, r3
 801c612:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 801c616:	601a      	str	r2, [r3, #0]
 801c618:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801c61c:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 801c620:	6812      	ldr	r2, [r2, #0]
 801c622:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801c624:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 801c628:	2200      	movs	r2, #0
 801c62a:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 801c62c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801c630:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801c634:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 801c636:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801c63a:	2200      	movs	r2, #0
 801c63c:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801c63e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 801c642:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 801c646:	681b      	ldr	r3, [r3, #0]
 801c648:	4618      	mov	r0, r3
 801c64a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801c64e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801c652:	681b      	ldr	r3, [r3, #0]
 801c654:	461a      	mov	r2, r3
 801c656:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801c65a:	fb02 f501 	mul.w	r5, r2, r1
 801c65e:	fb00 f403 	mul.w	r4, r0, r3
 801c662:	442c      	add	r4, r5
 801c664:	fba0 2302 	umull	r2, r3, r0, r2
 801c668:	18e1      	adds	r1, r4, r3
 801c66a:	460b      	mov	r3, r1
 801c66c:	eb18 0102 	adds.w	r1, r8, r2
 801c670:	6139      	str	r1, [r7, #16]
 801c672:	eb49 0303 	adc.w	r3, r9, r3
 801c676:	617b      	str	r3, [r7, #20]
 801c678:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 801c67c:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
    result = (int32_t)(mult.long_long >> 31);
 801c680:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 801c684:	f04f 0200 	mov.w	r2, #0
 801c688:	f04f 0300 	mov.w	r3, #0
 801c68c:	0fc2      	lsrs	r2, r0, #31
 801c68e:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801c692:	17cb      	asrs	r3, r1, #31
 801c694:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 801c698:	4613      	mov	r3, r2
 801c69a:	600b      	str	r3, [r1, #0]
    return result;
 801c69c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 801c6a0:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801c6a2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801c6a6:	681b      	ldr	r3, [r3, #0]
 801c6a8:	2b00      	cmp	r3, #0
 801c6aa:	dc04      	bgt.n	801c6b6 <arm_depthwise_conv_s8_opt+0xc2a>
 801c6ac:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801c6b0:	681b      	ldr	r3, [r3, #0]
 801c6b2:	425b      	negs	r3, r3
 801c6b4:	e000      	b.n	801c6b8 <arm_depthwise_conv_s8_opt+0xc2c>
 801c6b6:	2300      	movs	r3, #0
 801c6b8:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 801c6bc:	6011      	str	r1, [r2, #0]
 801c6be:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 801c6c2:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801c6c4:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801c6c8:	2200      	movs	r2, #0
 801c6ca:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801c6cc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 801c6d0:	2201      	movs	r2, #1
 801c6d2:	681b      	ldr	r3, [r3, #0]
 801c6d4:	409a      	lsls	r2, r3
 801c6d6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 801c6da:	3a01      	subs	r2, #1
 801c6dc:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 801c6de:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801c6e2:	f107 01e8 	add.w	r1, r7, #232	; 0xe8
 801c6e6:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 801c6ea:	6809      	ldr	r1, [r1, #0]
 801c6ec:	6812      	ldr	r2, [r2, #0]
 801c6ee:	400a      	ands	r2, r1
 801c6f0:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 801c6f2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801c6f6:	f107 01e8 	add.w	r1, r7, #232	; 0xe8
 801c6fa:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 801c6fe:	6809      	ldr	r1, [r1, #0]
 801c700:	6812      	ldr	r2, [r2, #0]
 801c702:	fa41 f202 	asr.w	r2, r1, r2
 801c706:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 801c708:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 801c70c:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 801c710:	6812      	ldr	r2, [r2, #0]
 801c712:	1052      	asrs	r2, r2, #1
 801c714:	601a      	str	r2, [r3, #0]
    if (result < 0)
 801c716:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801c71a:	681b      	ldr	r3, [r3, #0]
 801c71c:	2b00      	cmp	r3, #0
 801c71e:	da06      	bge.n	801c72e <arm_depthwise_conv_s8_opt+0xca2>
        threshold++;
 801c720:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 801c724:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 801c728:	6812      	ldr	r2, [r2, #0]
 801c72a:	3201      	adds	r2, #1
 801c72c:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 801c72e:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 801c732:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 801c736:	6812      	ldr	r2, [r2, #0]
 801c738:	681b      	ldr	r3, [r3, #0]
 801c73a:	429a      	cmp	r2, r3
 801c73c:	dd06      	ble.n	801c74c <arm_depthwise_conv_s8_opt+0xcc0>
        result++;
 801c73e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801c742:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 801c746:	6812      	ldr	r2, [r2, #0]
 801c748:	3201      	adds	r2, #1
 801c74a:	601a      	str	r2, [r3, #0]
    return result;
 801c74c:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801c750:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801c752:	bf00      	nop
 801c754:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
                sum_2 += output_offset;
 801c758:	f8d7 22fc 	ldr.w	r2, [r7, #764]	; 0x2fc
 801c75c:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 801c760:	4413      	add	r3, r2
 801c762:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
                sum_2 = MAX(sum_2, output_activation_min);
 801c766:	f8d7 22fc 	ldr.w	r2, [r7, #764]	; 0x2fc
 801c76a:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 801c76e:	4293      	cmp	r3, r2
 801c770:	bfb8      	it	lt
 801c772:	4613      	movlt	r3, r2
 801c774:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
                sum_2 = MIN(sum_2, output_activation_max);
 801c778:	f8d7 22fc 	ldr.w	r2, [r7, #764]	; 0x2fc
 801c77c:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 801c780:	4293      	cmp	r3, r2
 801c782:	bfa8      	it	ge
 801c784:	4613      	movge	r3, r2
 801c786:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
                *output++ = (q7_t)sum_2;
 801c78a:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 801c78e:	1c5a      	adds	r2, r3, #1
 801c790:	f8c7 2360 	str.w	r2, [r7, #864]	; 0x360
 801c794:	f8d7 22fc 	ldr.w	r2, [r7, #764]	; 0x2fc
 801c798:	b252      	sxtb	r2, r2
 801c79a:	701a      	strb	r2, [r3, #0]
                sum_3 = arm_nn_requantize(sum_3, *output_mult++, *output_shift++);
 801c79c:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 801c7a0:	1d1a      	adds	r2, r3, #4
 801c7a2:	f8c7 2320 	str.w	r2, [r7, #800]	; 0x320
 801c7a6:	6819      	ldr	r1, [r3, #0]
 801c7a8:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 801c7ac:	1d1a      	adds	r2, r3, #4
 801c7ae:	f8c7 2324 	str.w	r2, [r7, #804]	; 0x324
 801c7b2:	681a      	ldr	r2, [r3, #0]
 801c7b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801c7b8:	f8d7 02f8 	ldr.w	r0, [r7, #760]	; 0x2f8
 801c7bc:	6018      	str	r0, [r3, #0]
 801c7be:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 801c7c2:	6019      	str	r1, [r3, #0]
 801c7c4:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801c7c8:	601a      	str	r2, [r3, #0]
 801c7ca:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801c7ce:	681b      	ldr	r3, [r3, #0]
 801c7d0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c7d4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 801c7d8:	6812      	ldr	r2, [r2, #0]
 801c7da:	409a      	lsls	r2, r3
 801c7dc:	f507 7392 	add.w	r3, r7, #292	; 0x124
 801c7e0:	601a      	str	r2, [r3, #0]
 801c7e2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801c7e6:	f507 7296 	add.w	r2, r7, #300	; 0x12c
 801c7ea:	6812      	ldr	r2, [r2, #0]
 801c7ec:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801c7ee:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 801c7f2:	2200      	movs	r2, #0
 801c7f4:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 801c7f6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801c7fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801c7fe:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 801c800:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801c804:	2200      	movs	r2, #0
 801c806:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801c808:	e9d7 8916 	ldrd	r8, r9, [r7, #88]	; 0x58
 801c80c:	f507 7392 	add.w	r3, r7, #292	; 0x124
 801c810:	681b      	ldr	r3, [r3, #0]
 801c812:	4618      	mov	r0, r3
 801c814:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801c818:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801c81c:	681b      	ldr	r3, [r3, #0]
 801c81e:	461a      	mov	r2, r3
 801c820:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801c824:	fb02 f501 	mul.w	r5, r2, r1
 801c828:	fb00 f403 	mul.w	r4, r0, r3
 801c82c:	442c      	add	r4, r5
 801c82e:	fba0 2302 	umull	r2, r3, r0, r2
 801c832:	18e1      	adds	r1, r4, r3
 801c834:	460b      	mov	r3, r1
 801c836:	eb18 0102 	adds.w	r1, r8, r2
 801c83a:	61b9      	str	r1, [r7, #24]
 801c83c:	eb49 0303 	adc.w	r3, r9, r3
 801c840:	61fb      	str	r3, [r7, #28]
 801c842:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 801c846:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
    result = (int32_t)(mult.long_long >> 31);
 801c84a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 801c84e:	f04f 0200 	mov.w	r2, #0
 801c852:	f04f 0300 	mov.w	r3, #0
 801c856:	0fc2      	lsrs	r2, r0, #31
 801c858:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801c85c:	17cb      	asrs	r3, r1, #31
 801c85e:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 801c862:	4613      	mov	r3, r2
 801c864:	600b      	str	r3, [r1, #0]
    return result;
 801c866:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 801c86a:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801c86c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801c870:	681b      	ldr	r3, [r3, #0]
 801c872:	2b00      	cmp	r3, #0
 801c874:	dc04      	bgt.n	801c880 <arm_depthwise_conv_s8_opt+0xdf4>
 801c876:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801c87a:	681b      	ldr	r3, [r3, #0]
 801c87c:	425b      	negs	r3, r3
 801c87e:	e000      	b.n	801c882 <arm_depthwise_conv_s8_opt+0xdf6>
 801c880:	2300      	movs	r3, #0
 801c882:	f507 728c 	add.w	r2, r7, #280	; 0x118
 801c886:	6011      	str	r1, [r2, #0]
 801c888:	f507 728a 	add.w	r2, r7, #276	; 0x114
 801c88c:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801c88e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801c892:	2200      	movs	r2, #0
 801c894:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801c896:	f507 738a 	add.w	r3, r7, #276	; 0x114
 801c89a:	2201      	movs	r2, #1
 801c89c:	681b      	ldr	r3, [r3, #0]
 801c89e:	409a      	lsls	r2, r3
 801c8a0:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 801c8a4:	3a01      	subs	r2, #1
 801c8a6:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 801c8a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801c8ac:	f507 718c 	add.w	r1, r7, #280	; 0x118
 801c8b0:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 801c8b4:	6809      	ldr	r1, [r1, #0]
 801c8b6:	6812      	ldr	r2, [r2, #0]
 801c8b8:	400a      	ands	r2, r1
 801c8ba:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 801c8bc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801c8c0:	f507 718c 	add.w	r1, r7, #280	; 0x118
 801c8c4:	f507 728a 	add.w	r2, r7, #276	; 0x114
 801c8c8:	6809      	ldr	r1, [r1, #0]
 801c8ca:	6812      	ldr	r2, [r2, #0]
 801c8cc:	fa41 f202 	asr.w	r2, r1, r2
 801c8d0:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 801c8d2:	f507 7382 	add.w	r3, r7, #260	; 0x104
 801c8d6:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 801c8da:	6812      	ldr	r2, [r2, #0]
 801c8dc:	1052      	asrs	r2, r2, #1
 801c8de:	601a      	str	r2, [r3, #0]
    if (result < 0)
 801c8e0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801c8e4:	681b      	ldr	r3, [r3, #0]
 801c8e6:	2b00      	cmp	r3, #0
 801c8e8:	da06      	bge.n	801c8f8 <arm_depthwise_conv_s8_opt+0xe6c>
        threshold++;
 801c8ea:	f507 7382 	add.w	r3, r7, #260	; 0x104
 801c8ee:	f507 7282 	add.w	r2, r7, #260	; 0x104
 801c8f2:	6812      	ldr	r2, [r2, #0]
 801c8f4:	3201      	adds	r2, #1
 801c8f6:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 801c8f8:	f507 7284 	add.w	r2, r7, #264	; 0x108
 801c8fc:	f507 7382 	add.w	r3, r7, #260	; 0x104
 801c900:	6812      	ldr	r2, [r2, #0]
 801c902:	681b      	ldr	r3, [r3, #0]
 801c904:	429a      	cmp	r2, r3
 801c906:	dd06      	ble.n	801c916 <arm_depthwise_conv_s8_opt+0xe8a>
        result++;
 801c908:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801c90c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 801c910:	6812      	ldr	r2, [r2, #0]
 801c912:	3201      	adds	r2, #1
 801c914:	601a      	str	r2, [r3, #0]
    return result;
 801c916:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801c91a:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801c91c:	bf00      	nop
 801c91e:	f8c7 32f8 	str.w	r3, [r7, #760]	; 0x2f8
                sum_3 += output_offset;
 801c922:	f8d7 22f8 	ldr.w	r2, [r7, #760]	; 0x2f8
 801c926:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 801c92a:	4413      	add	r3, r2
 801c92c:	f8c7 32f8 	str.w	r3, [r7, #760]	; 0x2f8
                sum_3 = MAX(sum_3, output_activation_min);
 801c930:	f8d7 22f8 	ldr.w	r2, [r7, #760]	; 0x2f8
 801c934:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 801c938:	4293      	cmp	r3, r2
 801c93a:	bfb8      	it	lt
 801c93c:	4613      	movlt	r3, r2
 801c93e:	f8c7 32f8 	str.w	r3, [r7, #760]	; 0x2f8
                sum_3 = MIN(sum_3, output_activation_max);
 801c942:	f8d7 22f8 	ldr.w	r2, [r7, #760]	; 0x2f8
 801c946:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 801c94a:	4293      	cmp	r3, r2
 801c94c:	bfa8      	it	ge
 801c94e:	4613      	movge	r3, r2
 801c950:	f8c7 32f8 	str.w	r3, [r7, #760]	; 0x2f8
                *output++ = (q7_t)sum_3;
 801c954:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 801c958:	1c5a      	adds	r2, r3, #1
 801c95a:	f8c7 2360 	str.w	r2, [r7, #864]	; 0x360
 801c95e:	f8d7 22f8 	ldr.w	r2, [r7, #760]	; 0x2f8
 801c962:	b252      	sxtb	r2, r2
 801c964:	701a      	strb	r2, [r3, #0]

                sum_4 = arm_nn_requantize(sum_4, *output_mult++, *output_shift++);
 801c966:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 801c96a:	1d1a      	adds	r2, r3, #4
 801c96c:	f8c7 2320 	str.w	r2, [r7, #800]	; 0x320
 801c970:	6819      	ldr	r1, [r3, #0]
 801c972:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 801c976:	1d1a      	adds	r2, r3, #4
 801c978:	f8c7 2324 	str.w	r2, [r7, #804]	; 0x324
 801c97c:	681a      	ldr	r2, [r3, #0]
 801c97e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 801c982:	f8d7 02f4 	ldr.w	r0, [r7, #756]	; 0x2f4
 801c986:	6018      	str	r0, [r3, #0]
 801c988:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 801c98c:	6019      	str	r1, [r3, #0]
 801c98e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 801c992:	601a      	str	r2, [r3, #0]
 801c994:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 801c998:	681b      	ldr	r3, [r3, #0]
 801c99a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c99e:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 801c9a2:	6812      	ldr	r2, [r2, #0]
 801c9a4:	409a      	lsls	r2, r3
 801c9a6:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 801c9aa:	601a      	str	r2, [r3, #0]
 801c9ac:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 801c9b0:	f507 72ae 	add.w	r2, r7, #348	; 0x15c
 801c9b4:	6812      	ldr	r2, [r2, #0]
 801c9b6:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801c9b8:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 801c9bc:	2200      	movs	r2, #0
 801c9be:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 801c9c0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801c9c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801c9c8:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 801c9ca:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801c9ce:	2200      	movs	r2, #0
 801c9d0:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801c9d2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 801c9d6:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 801c9da:	681b      	ldr	r3, [r3, #0]
 801c9dc:	4618      	mov	r0, r3
 801c9de:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801c9e2:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 801c9e6:	681b      	ldr	r3, [r3, #0]
 801c9e8:	461a      	mov	r2, r3
 801c9ea:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801c9ee:	fb02 f501 	mul.w	r5, r2, r1
 801c9f2:	fb00 f403 	mul.w	r4, r0, r3
 801c9f6:	442c      	add	r4, r5
 801c9f8:	fba0 2302 	umull	r2, r3, r0, r2
 801c9fc:	18e1      	adds	r1, r4, r3
 801c9fe:	460b      	mov	r3, r1
 801ca00:	eb18 0a02 	adds.w	sl, r8, r2
 801ca04:	eb49 0b03 	adc.w	fp, r9, r3
 801ca08:	e9c7 ab14 	strd	sl, fp, [r7, #80]	; 0x50
    result = (int32_t)(mult.long_long >> 31);
 801ca0c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 801ca10:	f04f 0200 	mov.w	r2, #0
 801ca14:	f04f 0300 	mov.w	r3, #0
 801ca18:	0fc2      	lsrs	r2, r0, #31
 801ca1a:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801ca1e:	17cb      	asrs	r3, r1, #31
 801ca20:	f507 71a6 	add.w	r1, r7, #332	; 0x14c
 801ca24:	4613      	mov	r3, r2
 801ca26:	600b      	str	r3, [r1, #0]
    return result;
 801ca28:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 801ca2c:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801ca2e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 801ca32:	681b      	ldr	r3, [r3, #0]
 801ca34:	2b00      	cmp	r3, #0
 801ca36:	dc04      	bgt.n	801ca42 <arm_depthwise_conv_s8_opt+0xfb6>
 801ca38:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 801ca3c:	681b      	ldr	r3, [r3, #0]
 801ca3e:	425b      	negs	r3, r3
 801ca40:	e000      	b.n	801ca44 <arm_depthwise_conv_s8_opt+0xfb8>
 801ca42:	2300      	movs	r3, #0
 801ca44:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 801ca48:	6011      	str	r1, [r2, #0]
 801ca4a:	f507 72a2 	add.w	r2, r7, #324	; 0x144
 801ca4e:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801ca50:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801ca54:	2200      	movs	r2, #0
 801ca56:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801ca58:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 801ca5c:	2201      	movs	r2, #1
 801ca5e:	681b      	ldr	r3, [r3, #0]
 801ca60:	409a      	lsls	r2, r3
 801ca62:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 801ca66:	3a01      	subs	r2, #1
 801ca68:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 801ca6a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801ca6e:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 801ca72:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 801ca76:	6809      	ldr	r1, [r1, #0]
 801ca78:	6812      	ldr	r2, [r2, #0]
 801ca7a:	400a      	ands	r2, r1
 801ca7c:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 801ca7e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801ca82:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 801ca86:	f507 72a2 	add.w	r2, r7, #324	; 0x144
 801ca8a:	6809      	ldr	r1, [r1, #0]
 801ca8c:	6812      	ldr	r2, [r2, #0]
 801ca8e:	fa41 f202 	asr.w	r2, r1, r2
 801ca92:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 801ca94:	f507 739a 	add.w	r3, r7, #308	; 0x134
 801ca98:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 801ca9c:	6812      	ldr	r2, [r2, #0]
 801ca9e:	1052      	asrs	r2, r2, #1
 801caa0:	601a      	str	r2, [r3, #0]
    if (result < 0)
 801caa2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801caa6:	681b      	ldr	r3, [r3, #0]
 801caa8:	2b00      	cmp	r3, #0
 801caaa:	da06      	bge.n	801caba <arm_depthwise_conv_s8_opt+0x102e>
        threshold++;
 801caac:	f507 739a 	add.w	r3, r7, #308	; 0x134
 801cab0:	f507 729a 	add.w	r2, r7, #308	; 0x134
 801cab4:	6812      	ldr	r2, [r2, #0]
 801cab6:	3201      	adds	r2, #1
 801cab8:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 801caba:	f507 729c 	add.w	r2, r7, #312	; 0x138
 801cabe:	f507 739a 	add.w	r3, r7, #308	; 0x134
 801cac2:	6812      	ldr	r2, [r2, #0]
 801cac4:	681b      	ldr	r3, [r3, #0]
 801cac6:	429a      	cmp	r2, r3
 801cac8:	dd06      	ble.n	801cad8 <arm_depthwise_conv_s8_opt+0x104c>
        result++;
 801caca:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801cace:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 801cad2:	6812      	ldr	r2, [r2, #0]
 801cad4:	3201      	adds	r2, #1
 801cad6:	601a      	str	r2, [r3, #0]
    return result;
 801cad8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801cadc:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801cade:	bf00      	nop
 801cae0:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
                sum_4 += output_offset;
 801cae4:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 801cae8:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 801caec:	4413      	add	r3, r2
 801caee:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
                sum_4 = MAX(sum_4, output_activation_min);
 801caf2:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 801caf6:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 801cafa:	4293      	cmp	r3, r2
 801cafc:	bfb8      	it	lt
 801cafe:	4613      	movlt	r3, r2
 801cb00:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
                sum_4 = MIN(sum_4, output_activation_max);
 801cb04:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 801cb08:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 801cb0c:	4293      	cmp	r3, r2
 801cb0e:	bfa8      	it	ge
 801cb10:	4613      	movge	r3, r2
 801cb12:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
                *output++ = (q7_t)sum_4;
 801cb16:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 801cb1a:	1c5a      	adds	r2, r3, #1
 801cb1c:	f8c7 2360 	str.w	r2, [r7, #864]	; 0x360
 801cb20:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 801cb24:	b252      	sxtb	r2, r2
 801cb26:	701a      	strb	r2, [r3, #0]

                row_count--;
 801cb28:	f8b7 331a 	ldrh.w	r3, [r7, #794]	; 0x31a
 801cb2c:	3b01      	subs	r3, #1
 801cb2e:	f8a7 331a 	strh.w	r3, [r7, #794]	; 0x31a
            while (row_count)
 801cb32:	f8b7 331a 	ldrh.w	r3, [r7, #794]	; 0x31a
 801cb36:	2b00      	cmp	r3, #0
 801cb38:	f47f a959 	bne.w	801bdee <arm_depthwise_conv_s8_opt+0x362>
            }

            row_count = output_ch & 0x3;
 801cb3c:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 801cb40:	b29b      	uxth	r3, r3
 801cb42:	f003 0303 	and.w	r3, r3, #3
 801cb46:	f8a7 331a 	strh.w	r3, [r7, #794]	; 0x31a
            while (row_count)
 801cb4a:	e13e      	b.n	801cdca <arm_depthwise_conv_s8_opt+0x133e>
            {
                q15_t *col_pos = col_buffer_start + row_shift;
 801cb4c:	f8b7 3318 	ldrh.w	r3, [r7, #792]	; 0x318
 801cb50:	005b      	lsls	r3, r3, #1
 801cb52:	f8d7 2298 	ldr.w	r2, [r7, #664]	; 0x298
 801cb56:	4413      	add	r3, r2
 801cb58:	f8c7 3278 	str.w	r3, [r7, #632]	; 0x278
                const q7_t *row_pos = kernel + row_shift;
 801cb5c:	f8b7 3318 	ldrh.w	r3, [r7, #792]	; 0x318
 801cb60:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 801cb64:	4413      	add	r3, r2
 801cb66:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
                q31_t sum = *bias++;
 801cb6a:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 801cb6e:	1d1a      	adds	r2, r3, #4
 801cb70:	f8c7 2358 	str.w	r2, [r7, #856]	; 0x358
 801cb74:	681b      	ldr	r3, [r3, #0]
 801cb76:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
                const uint16_t col_count = (kernel_x * kernel_y);
 801cb7a:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 801cb7e:	b29a      	uxth	r2, r3
 801cb80:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 801cb84:	b29b      	uxth	r3, r3
 801cb86:	fb12 f303 	smulbb	r3, r2, r3
 801cb8a:	f8a7 3272 	strh.w	r3, [r7, #626]	; 0x272
                row_shift += 1;
 801cb8e:	f8b7 3318 	ldrh.w	r3, [r7, #792]	; 0x318
 801cb92:	3301      	adds	r3, #1
 801cb94:	f8a7 3318 	strh.w	r3, [r7, #792]	; 0x318

                for (int i = 0; i < col_count; i++)
 801cb98:	2300      	movs	r3, #0
 801cb9a:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 801cb9e:	e024      	b.n	801cbea <arm_depthwise_conv_s8_opt+0x115e>
                {
                    sum += row_pos[i * input_ch] * col_pos[i * input_ch];
 801cba0:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801cba4:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 801cba8:	fb02 f303 	mul.w	r3, r2, r3
 801cbac:	461a      	mov	r2, r3
 801cbae:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 801cbb2:	4413      	add	r3, r2
 801cbb4:	f993 3000 	ldrsb.w	r3, [r3]
 801cbb8:	4619      	mov	r1, r3
 801cbba:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801cbbe:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 801cbc2:	fb02 f303 	mul.w	r3, r2, r3
 801cbc6:	005b      	lsls	r3, r3, #1
 801cbc8:	f8d7 2278 	ldr.w	r2, [r7, #632]	; 0x278
 801cbcc:	4413      	add	r3, r2
 801cbce:	f9b3 3000 	ldrsh.w	r3, [r3]
 801cbd2:	fb03 f301 	mul.w	r3, r3, r1
 801cbd6:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801cbda:	4413      	add	r3, r2
 801cbdc:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
                for (int i = 0; i < col_count; i++)
 801cbe0:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801cbe4:	3301      	adds	r3, #1
 801cbe6:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 801cbea:	f8b7 3272 	ldrh.w	r3, [r7, #626]	; 0x272
 801cbee:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 801cbf2:	429a      	cmp	r2, r3
 801cbf4:	dbd4      	blt.n	801cba0 <arm_depthwise_conv_s8_opt+0x1114>
                }
                sum = arm_nn_requantize(sum, *output_mult++, *output_shift++);
 801cbf6:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 801cbfa:	1d1a      	adds	r2, r3, #4
 801cbfc:	f8c7 2320 	str.w	r2, [r7, #800]	; 0x320
 801cc00:	6819      	ldr	r1, [r3, #0]
 801cc02:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 801cc06:	1d1a      	adds	r2, r3, #4
 801cc08:	f8c7 2324 	str.w	r2, [r7, #804]	; 0x324
 801cc0c:	681a      	ldr	r2, [r3, #0]
 801cc0e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801cc12:	f8d7 02e4 	ldr.w	r0, [r7, #740]	; 0x2e4
 801cc16:	6018      	str	r0, [r3, #0]
 801cc18:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 801cc1c:	6019      	str	r1, [r3, #0]
 801cc1e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801cc22:	601a      	str	r2, [r3, #0]
 801cc24:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801cc28:	681b      	ldr	r3, [r3, #0]
 801cc2a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cc2e:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 801cc32:	6812      	ldr	r2, [r2, #0]
 801cc34:	409a      	lsls	r2, r3
 801cc36:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801cc3a:	601a      	str	r2, [r3, #0]
 801cc3c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801cc40:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 801cc44:	6812      	ldr	r2, [r2, #0]
 801cc46:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801cc48:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801cc4c:	2200      	movs	r2, #0
 801cc4e:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 801cc50:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801cc54:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801cc58:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 801cc5a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801cc5e:	2200      	movs	r2, #0
 801cc60:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801cc62:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	; 0x30
 801cc66:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801cc6a:	681b      	ldr	r3, [r3, #0]
 801cc6c:	4618      	mov	r0, r3
 801cc6e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801cc72:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801cc76:	681b      	ldr	r3, [r3, #0]
 801cc78:	461a      	mov	r2, r3
 801cc7a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801cc7e:	fb02 f501 	mul.w	r5, r2, r1
 801cc82:	fb00 f403 	mul.w	r4, r0, r3
 801cc86:	442c      	add	r4, r5
 801cc88:	fba0 2302 	umull	r2, r3, r0, r2
 801cc8c:	18e1      	adds	r1, r4, r3
 801cc8e:	460b      	mov	r3, r1
 801cc90:	eb18 0102 	adds.w	r1, r8, r2
 801cc94:	6039      	str	r1, [r7, #0]
 801cc96:	eb49 0303 	adc.w	r3, r9, r3
 801cc9a:	607b      	str	r3, [r7, #4]
 801cc9c:	e9d7 3400 	ldrd	r3, r4, [r7]
 801cca0:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    result = (int32_t)(mult.long_long >> 31);
 801cca4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 801cca8:	f04f 0200 	mov.w	r2, #0
 801ccac:	f04f 0300 	mov.w	r3, #0
 801ccb0:	0fc2      	lsrs	r2, r0, #31
 801ccb2:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801ccb6:	17cb      	asrs	r3, r1, #31
 801ccb8:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 801ccbc:	4613      	mov	r3, r2
 801ccbe:	600b      	str	r3, [r1, #0]
    return result;
 801ccc0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801ccc4:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801ccc6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801ccca:	681b      	ldr	r3, [r3, #0]
 801cccc:	2b00      	cmp	r3, #0
 801ccce:	dc04      	bgt.n	801ccda <arm_depthwise_conv_s8_opt+0x124e>
 801ccd0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801ccd4:	681b      	ldr	r3, [r3, #0]
 801ccd6:	425b      	negs	r3, r3
 801ccd8:	e000      	b.n	801ccdc <arm_depthwise_conv_s8_opt+0x1250>
 801ccda:	2300      	movs	r3, #0
 801ccdc:	f107 0288 	add.w	r2, r7, #136	; 0x88
 801cce0:	6011      	str	r1, [r2, #0]
 801cce2:	f107 0284 	add.w	r2, r7, #132	; 0x84
 801cce6:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801cce8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801ccec:	2200      	movs	r2, #0
 801ccee:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801ccf0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801ccf4:	2201      	movs	r2, #1
 801ccf6:	681b      	ldr	r3, [r3, #0]
 801ccf8:	409a      	lsls	r2, r3
 801ccfa:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 801ccfe:	3a01      	subs	r2, #1
 801cd00:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 801cd02:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801cd06:	f107 0188 	add.w	r1, r7, #136	; 0x88
 801cd0a:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 801cd0e:	6809      	ldr	r1, [r1, #0]
 801cd10:	6812      	ldr	r2, [r2, #0]
 801cd12:	400a      	ands	r2, r1
 801cd14:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 801cd16:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801cd1a:	f107 0188 	add.w	r1, r7, #136	; 0x88
 801cd1e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 801cd22:	6809      	ldr	r1, [r1, #0]
 801cd24:	6812      	ldr	r2, [r2, #0]
 801cd26:	fa41 f202 	asr.w	r2, r1, r2
 801cd2a:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 801cd2c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 801cd30:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 801cd34:	6812      	ldr	r2, [r2, #0]
 801cd36:	1052      	asrs	r2, r2, #1
 801cd38:	601a      	str	r2, [r3, #0]
    if (result < 0)
 801cd3a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801cd3e:	681b      	ldr	r3, [r3, #0]
 801cd40:	2b00      	cmp	r3, #0
 801cd42:	da06      	bge.n	801cd52 <arm_depthwise_conv_s8_opt+0x12c6>
        threshold++;
 801cd44:	f107 0374 	add.w	r3, r7, #116	; 0x74
 801cd48:	f107 0274 	add.w	r2, r7, #116	; 0x74
 801cd4c:	6812      	ldr	r2, [r2, #0]
 801cd4e:	3201      	adds	r2, #1
 801cd50:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 801cd52:	f107 0278 	add.w	r2, r7, #120	; 0x78
 801cd56:	f107 0374 	add.w	r3, r7, #116	; 0x74
 801cd5a:	6812      	ldr	r2, [r2, #0]
 801cd5c:	681b      	ldr	r3, [r3, #0]
 801cd5e:	429a      	cmp	r2, r3
 801cd60:	dd06      	ble.n	801cd70 <arm_depthwise_conv_s8_opt+0x12e4>
        result++;
 801cd62:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801cd66:	f107 0280 	add.w	r2, r7, #128	; 0x80
 801cd6a:	6812      	ldr	r2, [r2, #0]
 801cd6c:	3201      	adds	r2, #1
 801cd6e:	601a      	str	r2, [r3, #0]
    return result;
 801cd70:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801cd74:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801cd76:	bf00      	nop
 801cd78:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
                sum += output_offset;
 801cd7c:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801cd80:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 801cd84:	4413      	add	r3, r2
 801cd86:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
                sum = MAX(sum, output_activation_min);
 801cd8a:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801cd8e:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 801cd92:	4293      	cmp	r3, r2
 801cd94:	bfb8      	it	lt
 801cd96:	4613      	movlt	r3, r2
 801cd98:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
                sum = MIN(sum, output_activation_max);
 801cd9c:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801cda0:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 801cda4:	4293      	cmp	r3, r2
 801cda6:	bfa8      	it	ge
 801cda8:	4613      	movge	r3, r2
 801cdaa:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
                *output++ = (q7_t)sum;
 801cdae:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 801cdb2:	1c5a      	adds	r2, r3, #1
 801cdb4:	f8c7 2360 	str.w	r2, [r7, #864]	; 0x360
 801cdb8:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801cdbc:	b252      	sxtb	r2, r2
 801cdbe:	701a      	strb	r2, [r3, #0]

                row_count--;
 801cdc0:	f8b7 331a 	ldrh.w	r3, [r7, #794]	; 0x31a
 801cdc4:	3b01      	subs	r3, #1
 801cdc6:	f8a7 331a 	strh.w	r3, [r7, #794]	; 0x31a
            while (row_count)
 801cdca:	f8b7 331a 	ldrh.w	r3, [r7, #794]	; 0x31a
 801cdce:	2b00      	cmp	r3, #0
 801cdd0:	f47f aebc 	bne.w	801cb4c <arm_depthwise_conv_s8_opt+0x10c0>
            }

            // clear counter and pointers
            col_buffer = col_buffer_start;
 801cdd4:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801cdd8:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
        for (int i_out_x = 0; i_out_x < output_x; i_out_x++)
 801cddc:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 801cde0:	3301      	adds	r3, #1
 801cde2:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
 801cde6:	f8d7 2310 	ldr.w	r2, [r7, #784]	; 0x310
 801cdea:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 801cdee:	429a      	cmp	r2, r3
 801cdf0:	f6fe af02 	blt.w	801bbf8 <arm_depthwise_conv_s8_opt+0x16c>
    for (int i_out_y = 0; i_out_y < output_y; i_out_y++)
 801cdf4:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 801cdf8:	3301      	adds	r3, #1
 801cdfa:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
 801cdfe:	f8d7 2314 	ldr.w	r2, [r7, #788]	; 0x314
 801ce02:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 801ce06:	429a      	cmp	r2, r3
 801ce08:	f6fe aee1 	blt.w	801bbce <arm_depthwise_conv_s8_opt+0x142>
                                 output_dims,
                                 output);
#endif /* ARM_MATH_MVEI | ARM_MATH_DSP */

    /* Return to application */
    return ARM_MATH_SUCCESS;
 801ce0c:	2300      	movs	r3, #0
}
 801ce0e:	4618      	mov	r0, r3
 801ce10:	f507 774a 	add.w	r7, r7, #808	; 0x328
 801ce14:	46bd      	mov	sp, r7
 801ce16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801ce1a <arm_depthwise_conv_s8_opt_get_buffer_size>:

int32_t arm_depthwise_conv_s8_opt_get_buffer_size(const cmsis_nn_dims *input_dims, const cmsis_nn_dims *filter_dims)
{
 801ce1a:	b480      	push	{r7}
 801ce1c:	b083      	sub	sp, #12
 801ce1e:	af00      	add	r7, sp, #0
 801ce20:	6078      	str	r0, [r7, #4]
 801ce22:	6039      	str	r1, [r7, #0]
#if defined(ARM_MATH_MVEI)
    /* The + 4 accounts for out of bounds read of the lhs buffers in the *_nt_t_* functions.  */
    return (2 * input_dims->c * filter_dims->w * filter_dims->h) * (int32_t)sizeof(int16_t) + 4;
#elif defined(ARM_MATH_DSP)
    return (input_dims->c * filter_dims->w * filter_dims->h) * sizeof(int16_t);
 801ce24:	687b      	ldr	r3, [r7, #4]
 801ce26:	68db      	ldr	r3, [r3, #12]
 801ce28:	683a      	ldr	r2, [r7, #0]
 801ce2a:	6892      	ldr	r2, [r2, #8]
 801ce2c:	fb02 f303 	mul.w	r3, r2, r3
 801ce30:	683a      	ldr	r2, [r7, #0]
 801ce32:	6852      	ldr	r2, [r2, #4]
 801ce34:	fb02 f303 	mul.w	r3, r2, r3
 801ce38:	005b      	lsls	r3, r3, #1
#else
    (void)input_dims;
    (void)filter_dims;
    return 0;
#endif
}
 801ce3a:	4618      	mov	r0, r3
 801ce3c:	370c      	adds	r7, #12
 801ce3e:	46bd      	mov	sp, r7
 801ce40:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ce44:	4770      	bx	lr

0801ce46 <arm_depthwise_conv_wrapper_s8>:
                                         const q7_t *filter,
                                         const cmsis_nn_dims *bias_dims,
                                         const int32_t *bias,
                                         const cmsis_nn_dims *output_dims,
                                         q7_t *output)
{
 801ce46:	b580      	push	{r7, lr}
 801ce48:	b08e      	sub	sp, #56	; 0x38
 801ce4a:	af08      	add	r7, sp, #32
 801ce4c:	60f8      	str	r0, [r7, #12]
 801ce4e:	60b9      	str	r1, [r7, #8]
 801ce50:	607a      	str	r2, [r7, #4]
 801ce52:	603b      	str	r3, [r7, #0]
    arm_status status = ARM_MATH_SUCCESS;
 801ce54:	2300      	movs	r3, #0
 801ce56:	75fb      	strb	r3, [r7, #23]
    if (1 == dw_conv_params->ch_mult)
 801ce58:	68bb      	ldr	r3, [r7, #8]
 801ce5a:	689b      	ldr	r3, [r3, #8]
 801ce5c:	2b01      	cmp	r3, #1
 801ce5e:	d139      	bne.n	801ced4 <arm_depthwise_conv_wrapper_s8+0x8e>
    {
#if !defined(ARM_MATH_MVEI)
        if ((filter_dims->w == 3) && (filter_dims->h == 3) && (dw_conv_params->padding.h <= 1))
 801ce60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce62:	689b      	ldr	r3, [r3, #8]
 801ce64:	2b03      	cmp	r3, #3
 801ce66:	d11e      	bne.n	801cea6 <arm_depthwise_conv_wrapper_s8+0x60>
 801ce68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce6a:	685b      	ldr	r3, [r3, #4]
 801ce6c:	2b03      	cmp	r3, #3
 801ce6e:	d11a      	bne.n	801cea6 <arm_depthwise_conv_wrapper_s8+0x60>
 801ce70:	68bb      	ldr	r3, [r7, #8]
 801ce72:	699b      	ldr	r3, [r3, #24]
 801ce74:	2b01      	cmp	r3, #1
 801ce76:	dc16      	bgt.n	801cea6 <arm_depthwise_conv_wrapper_s8+0x60>
        {
            status = arm_depthwise_conv_3x3_s8(ctx,
 801ce78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ce7a:	9306      	str	r3, [sp, #24]
 801ce7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ce7e:	9305      	str	r3, [sp, #20]
 801ce80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ce82:	9304      	str	r3, [sp, #16]
 801ce84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ce86:	9303      	str	r3, [sp, #12]
 801ce88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ce8a:	9302      	str	r3, [sp, #8]
 801ce8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce8e:	9301      	str	r3, [sp, #4]
 801ce90:	6a3b      	ldr	r3, [r7, #32]
 801ce92:	9300      	str	r3, [sp, #0]
 801ce94:	683b      	ldr	r3, [r7, #0]
 801ce96:	687a      	ldr	r2, [r7, #4]
 801ce98:	68b9      	ldr	r1, [r7, #8]
 801ce9a:	68f8      	ldr	r0, [r7, #12]
 801ce9c:	f7fc fecf 	bl	8019c3e <arm_depthwise_conv_3x3_s8>
 801cea0:	4603      	mov	r3, r0
 801cea2:	75fb      	strb	r3, [r7, #23]
 801cea4:	e02c      	b.n	801cf00 <arm_depthwise_conv_wrapper_s8+0xba>
                                               output);
        }
        else
#endif
        {
            status = arm_depthwise_conv_s8_opt(ctx,
 801cea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cea8:	9306      	str	r3, [sp, #24]
 801ceaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ceac:	9305      	str	r3, [sp, #20]
 801ceae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ceb0:	9304      	str	r3, [sp, #16]
 801ceb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ceb4:	9303      	str	r3, [sp, #12]
 801ceb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ceb8:	9302      	str	r3, [sp, #8]
 801ceba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cebc:	9301      	str	r3, [sp, #4]
 801cebe:	6a3b      	ldr	r3, [r7, #32]
 801cec0:	9300      	str	r3, [sp, #0]
 801cec2:	683b      	ldr	r3, [r7, #0]
 801cec4:	687a      	ldr	r2, [r7, #4]
 801cec6:	68b9      	ldr	r1, [r7, #8]
 801cec8:	68f8      	ldr	r0, [r7, #12]
 801ceca:	f7fe fddf 	bl	801ba8c <arm_depthwise_conv_s8_opt>
 801cece:	4603      	mov	r3, r0
 801ced0:	75fb      	strb	r3, [r7, #23]
 801ced2:	e015      	b.n	801cf00 <arm_depthwise_conv_wrapper_s8+0xba>
                                               output);
        }
    }
    else
    {
        status = arm_depthwise_conv_s8(ctx,
 801ced4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ced6:	9306      	str	r3, [sp, #24]
 801ced8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ceda:	9305      	str	r3, [sp, #20]
 801cedc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cede:	9304      	str	r3, [sp, #16]
 801cee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cee2:	9303      	str	r3, [sp, #12]
 801cee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cee6:	9302      	str	r3, [sp, #8]
 801cee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ceea:	9301      	str	r3, [sp, #4]
 801ceec:	6a3b      	ldr	r3, [r7, #32]
 801ceee:	9300      	str	r3, [sp, #0]
 801cef0:	683b      	ldr	r3, [r7, #0]
 801cef2:	687a      	ldr	r2, [r7, #4]
 801cef4:	68b9      	ldr	r1, [r7, #8]
 801cef6:	68f8      	ldr	r0, [r7, #12]
 801cef8:	f7fe fcf8 	bl	801b8ec <arm_depthwise_conv_s8>
 801cefc:	4603      	mov	r3, r0
 801cefe:	75fb      	strb	r3, [r7, #23]
                                       output_dims,
                                       output);
    }

    /* Return to application */
    return status;
 801cf00:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801cf04:	4618      	mov	r0, r3
 801cf06:	3718      	adds	r7, #24
 801cf08:	46bd      	mov	sp, r7
 801cf0a:	bd80      	pop	{r7, pc}

0801cf0c <arm_depthwise_conv_wrapper_s8_get_buffer_size>:

int32_t arm_depthwise_conv_wrapper_s8_get_buffer_size(const cmsis_nn_dw_conv_params *dw_conv_params,
                                                      const cmsis_nn_dims *input_dims,
                                                      const cmsis_nn_dims *filter_dims,
                                                      const cmsis_nn_dims *output_dims)
{
 801cf0c:	b580      	push	{r7, lr}
 801cf0e:	b086      	sub	sp, #24
 801cf10:	af00      	add	r7, sp, #0
 801cf12:	60f8      	str	r0, [r7, #12]
 801cf14:	60b9      	str	r1, [r7, #8]
 801cf16:	607a      	str	r2, [r7, #4]
 801cf18:	603b      	str	r3, [r7, #0]
    (void)dw_conv_params;
    int32_t size = 0;
 801cf1a:	2300      	movs	r3, #0
 801cf1c:	617b      	str	r3, [r7, #20]

    if (input_dims->c == output_dims->c)
 801cf1e:	68bb      	ldr	r3, [r7, #8]
 801cf20:	68da      	ldr	r2, [r3, #12]
 801cf22:	683b      	ldr	r3, [r7, #0]
 801cf24:	68db      	ldr	r3, [r3, #12]
 801cf26:	429a      	cmp	r2, r3
 801cf28:	d104      	bne.n	801cf34 <arm_depthwise_conv_wrapper_s8_get_buffer_size+0x28>
    {
        size = arm_depthwise_conv_s8_opt_get_buffer_size(input_dims, filter_dims);
 801cf2a:	6879      	ldr	r1, [r7, #4]
 801cf2c:	68b8      	ldr	r0, [r7, #8]
 801cf2e:	f7ff ff74 	bl	801ce1a <arm_depthwise_conv_s8_opt_get_buffer_size>
 801cf32:	6178      	str	r0, [r7, #20]
    }

    return size;
 801cf34:	697b      	ldr	r3, [r7, #20]
}
 801cf36:	4618      	mov	r0, r3
 801cf38:	3718      	adds	r7, #24
 801cf3a:	46bd      	mov	sp, r7
 801cf3c:	bd80      	pop	{r7, pc}

0801cf3e <arm_nn_mat_mult_kernel_s8_s16>:
                                    const int16_t activation_min,
                                    const int16_t activation_max,
                                    const uint16_t num_col_a,
                                    const int32_t *const output_bias,
                                    q7_t *out_0)
{
 801cf3e:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 801cf42:	f5ad 7d7c 	sub.w	sp, sp, #1008	; 0x3f0
 801cf46:	af00      	add	r7, sp, #0
 801cf48:	f107 0434 	add.w	r4, r7, #52	; 0x34
 801cf4c:	6020      	str	r0, [r4, #0]
 801cf4e:	f107 0030 	add.w	r0, r7, #48	; 0x30
 801cf52:	6001      	str	r1, [r0, #0]
 801cf54:	4611      	mov	r1, r2
 801cf56:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801cf5a:	6013      	str	r3, [r2, #0]
 801cf5c:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 801cf60:	460b      	mov	r3, r1
 801cf62:	8013      	strh	r3, [r2, #0]

    return out_1;

#elif defined(ARM_MATH_DSP)
    /* set up the second output pointers */
    q7_t *out_1 = out_0 + output_ch;
 801cf64:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 801cf68:	881b      	ldrh	r3, [r3, #0]
 801cf6a:	f8d7 2428 	ldr.w	r2, [r7, #1064]	; 0x428
 801cf6e:	4413      	add	r3, r2
 801cf70:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
    const int32_t *bias = output_bias;
 801cf74:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 801cf78:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8

    uint16_t row_count = output_ch / 2;
 801cf7c:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 801cf80:	881b      	ldrh	r3, [r3, #0]
 801cf82:	085b      	lsrs	r3, r3, #1
 801cf84:	f8a7 33e6 	strh.w	r3, [r7, #998]	; 0x3e6
    const q7_t *ip_a0 = input_a;
 801cf88:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801cf8c:	681b      	ldr	r3, [r3, #0]
 801cf8e:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
    /* this loop over rows in A */
    while (row_count)
 801cf92:	f000 bee9 	b.w	801dd68 <arm_nn_mat_mult_kernel_s8_s16+0xe2a>
    {
        /* setup pointers for B */
        const q15_t *ip_b0 = input_b;
 801cf96:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 801cf9a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801cf9e:	681b      	ldr	r3, [r3, #0]
 801cfa0:	6013      	str	r3, [r2, #0]
        const q15_t *ip_b1 = ip_b0 + num_col_a;
 801cfa2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 801cfa6:	681a      	ldr	r2, [r3, #0]
 801cfa8:	f8b7 3420 	ldrh.w	r3, [r7, #1056]	; 0x420
 801cfac:	005b      	lsls	r3, r3, #1
 801cfae:	441a      	add	r2, r3
 801cfb0:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801cfb4:	601a      	str	r2, [r3, #0]

        /* align the second pointer for A */
        const q7_t *ip_a1 = ip_a0 + num_col_a;
 801cfb6:	f8b7 3420 	ldrh.w	r3, [r7, #1056]	; 0x420
 801cfba:	f8d7 23e0 	ldr.w	r2, [r7, #992]	; 0x3e0
 801cfbe:	4413      	add	r3, r2
 801cfc0:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc

        /* Init accumulator with bias for channel N and N + 1 */
        q31_t ch_0_out_0 = *bias;
 801cfc4:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	; 0x3e8
 801cfc8:	681b      	ldr	r3, [r3, #0]
 801cfca:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
        q31_t ch_0_out_1 = *bias++;
 801cfce:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	; 0x3e8
 801cfd2:	1d1a      	adds	r2, r3, #4
 801cfd4:	f8c7 23e8 	str.w	r2, [r7, #1000]	; 0x3e8
 801cfd8:	681b      	ldr	r3, [r3, #0]
 801cfda:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
        q31_t ch_1_out_0 = *bias;
 801cfde:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	; 0x3e8
 801cfe2:	681b      	ldr	r3, [r3, #0]
 801cfe4:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
        q31_t ch_1_out_1 = *bias++;
 801cfe8:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	; 0x3e8
 801cfec:	1d1a      	adds	r2, r3, #4
 801cfee:	f8c7 23e8 	str.w	r2, [r7, #1000]	; 0x3e8
 801cff2:	681b      	ldr	r3, [r3, #0]
 801cff4:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc

        uint16_t col_count = num_col_a / 4;
 801cff8:	f8b7 3420 	ldrh.w	r3, [r7, #1056]	; 0x420
 801cffc:	089b      	lsrs	r3, r3, #2
 801cffe:	f8a7 33ca 	strh.w	r3, [r7, #970]	; 0x3ca
        /* accumulate over the vector */
        while (col_count)
 801d002:	e2a0      	b.n	801d546 <arm_nn_mat_mult_kernel_s8_s16+0x608>
 801d004:	f507 7320 	add.w	r3, r7, #640	; 0x280
 801d008:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 801d00c:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q15, 4);
 801d00e:	f507 7320 	add.w	r3, r7, #640	; 0x280
 801d012:	681b      	ldr	r3, [r3, #0]
 801d014:	681b      	ldr	r3, [r3, #0]
 801d016:	681b      	ldr	r3, [r3, #0]
 801d018:	461a      	mov	r2, r3
 801d01a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801d01e:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 801d020:	f507 7320 	add.w	r3, r7, #640	; 0x280
 801d024:	681b      	ldr	r3, [r3, #0]
 801d026:	681b      	ldr	r3, [r3, #0]
 801d028:	1d1a      	adds	r2, r3, #4
 801d02a:	f507 7320 	add.w	r3, r7, #640	; 0x280
 801d02e:	681b      	ldr	r3, [r3, #0]
 801d030:	601a      	str	r2, [r3, #0]
    return (val);
 801d032:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801d036:	681b      	ldr	r3, [r3, #0]
        {
            q31_t a01, a02, a11, a12;
            q31_t b0 = arm_nn_read_q15x2_ia(&ip_b0);
 801d038:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
 801d03c:	f507 7321 	add.w	r3, r7, #644	; 0x284
 801d040:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 801d044:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q15, 4);
 801d046:	f507 7321 	add.w	r3, r7, #644	; 0x284
 801d04a:	681b      	ldr	r3, [r3, #0]
 801d04c:	681b      	ldr	r3, [r3, #0]
 801d04e:	681b      	ldr	r3, [r3, #0]
 801d050:	461a      	mov	r2, r3
 801d052:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801d056:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 801d058:	f507 7321 	add.w	r3, r7, #644	; 0x284
 801d05c:	681b      	ldr	r3, [r3, #0]
 801d05e:	681b      	ldr	r3, [r3, #0]
 801d060:	1d1a      	adds	r2, r3, #4
 801d062:	f507 7321 	add.w	r3, r7, #644	; 0x284
 801d066:	681b      	ldr	r3, [r3, #0]
 801d068:	601a      	str	r2, [r3, #0]
    return (val);
 801d06a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801d06e:	681b      	ldr	r3, [r3, #0]
            q31_t b1 = arm_nn_read_q15x2_ia(&ip_b1);
 801d070:	f8c7 33a0 	str.w	r3, [r7, #928]	; 0x3a0
 801d074:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801d078:	f8d7 23e0 	ldr.w	r2, [r7, #992]	; 0x3e0
 801d07c:	601a      	str	r2, [r3, #0]
 801d07e:	f507 7333 	add.w	r3, r7, #716	; 0x2cc
 801d082:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 801d086:	601a      	str	r2, [r3, #0]
 801d088:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 801d08c:	f107 0298 	add.w	r2, r7, #152	; 0x98
 801d090:	601a      	str	r2, [r3, #0]
 801d092:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 801d096:	f107 0284 	add.w	r2, r7, #132	; 0x84
 801d09a:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 801d09c:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 801d0a0:	681b      	ldr	r3, [r3, #0]
 801d0a2:	681b      	ldr	r3, [r3, #0]
 801d0a4:	681b      	ldr	r3, [r3, #0]
 801d0a6:	461a      	mov	r2, r3
 801d0a8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801d0ac:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801d0ae:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 801d0b2:	681b      	ldr	r3, [r3, #0]
 801d0b4:	681b      	ldr	r3, [r3, #0]
 801d0b6:	1d1a      	adds	r2, r3, #4
 801d0b8:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 801d0bc:	681b      	ldr	r3, [r3, #0]
 801d0be:	601a      	str	r2, [r3, #0]
    return (val);
 801d0c0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801d0c4:	681a      	ldr	r2, [r3, #0]
    q31_t inA = arm_nn_read_q7x4_ia(&source);
 801d0c6:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 801d0ca:	601a      	str	r2, [r3, #0]
    q31_t inAbuf1 = __SXTB16(__ROR((uint32_t)inA, 8));
 801d0cc:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 801d0d0:	681a      	ldr	r2, [r3, #0]
 801d0d2:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 801d0d6:	601a      	str	r2, [r3, #0]
 801d0d8:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 801d0dc:	2208      	movs	r2, #8
 801d0de:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 801d0e0:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 801d0e4:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 801d0e8:	681b      	ldr	r3, [r3, #0]
 801d0ea:	f003 031f 	and.w	r3, r3, #31
 801d0ee:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801d0f0:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 801d0f4:	681b      	ldr	r3, [r3, #0]
 801d0f6:	2b00      	cmp	r3, #0
 801d0f8:	d103      	bne.n	801d102 <arm_nn_mat_mult_kernel_s8_s16+0x1c4>
    return op1;
 801d0fa:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 801d0fe:	681b      	ldr	r3, [r3, #0]
 801d100:	e007      	b.n	801d112 <arm_nn_mat_mult_kernel_s8_s16+0x1d4>
  return (op1 >> op2) | (op1 << (32U - op2));
 801d102:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 801d106:	f507 712e 	add.w	r1, r7, #696	; 0x2b8
 801d10a:	681a      	ldr	r2, [r3, #0]
 801d10c:	680b      	ldr	r3, [r1, #0]
 801d10e:	fa62 f303 	ror.w	r3, r2, r3
 801d112:	f507 722d 	add.w	r2, r7, #692	; 0x2b4
 801d116:	6013      	str	r3, [r2, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801d118:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 801d11c:	681b      	ldr	r3, [r3, #0]
 801d11e:	fa2f f283 	sxtb16	r2, r3
 801d122:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 801d126:	601a      	str	r2, [r3, #0]
  return(result);
 801d128:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 801d12c:	681a      	ldr	r2, [r3, #0]
 801d12e:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 801d132:	601a      	str	r2, [r3, #0]
    q31_t inAbuf2 = __SXTB16(inA);
 801d134:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 801d138:	681a      	ldr	r2, [r3, #0]
 801d13a:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 801d13e:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801d140:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 801d144:	681b      	ldr	r3, [r3, #0]
 801d146:	fa2f f283 	sxtb16	r2, r3
 801d14a:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 801d14e:	601a      	str	r2, [r3, #0]
  return(result);
 801d150:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 801d154:	681a      	ldr	r2, [r3, #0]
 801d156:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 801d15a:	601a      	str	r2, [r3, #0]
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 801d15c:	f507 7227 	add.w	r2, r7, #668	; 0x29c
 801d160:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 801d164:	681b      	ldr	r3, [r3, #0]
 801d166:	6013      	str	r3, [r2, #0]
 801d168:	f507 7226 	add.w	r2, r7, #664	; 0x298
 801d16c:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 801d170:	681b      	ldr	r3, [r3, #0]
 801d172:	6013      	str	r3, [r2, #0]
 801d174:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 801d178:	681a      	ldr	r2, [r3, #0]
 801d17a:	f507 7326 	add.w	r3, r7, #664	; 0x298
 801d17e:	681b      	ldr	r3, [r3, #0]
 801d180:	eac2 4223 	pkhtb	r2, r2, r3, asr #16
 801d184:	f507 7325 	add.w	r3, r7, #660	; 0x294
 801d188:	601a      	str	r2, [r3, #0]
 801d18a:	f507 7325 	add.w	r3, r7, #660	; 0x294
 801d18e:	681b      	ldr	r3, [r3, #0]
 801d190:	461a      	mov	r2, r3
 801d192:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 801d196:	681b      	ldr	r3, [r3, #0]
 801d198:	601a      	str	r2, [r3, #0]
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 801d19a:	f507 7224 	add.w	r2, r7, #656	; 0x290
 801d19e:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 801d1a2:	681b      	ldr	r3, [r3, #0]
 801d1a4:	6013      	str	r3, [r2, #0]
 801d1a6:	f507 7223 	add.w	r2, r7, #652	; 0x28c
 801d1aa:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 801d1ae:	681b      	ldr	r3, [r3, #0]
 801d1b0:	6013      	str	r3, [r2, #0]
 801d1b2:	f507 7324 	add.w	r3, r7, #656	; 0x290
 801d1b6:	681a      	ldr	r2, [r3, #0]
 801d1b8:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 801d1bc:	681b      	ldr	r3, [r3, #0]
 801d1be:	eac2 4203 	pkhbt	r2, r2, r3, lsl #16
 801d1c2:	f507 7322 	add.w	r3, r7, #648	; 0x288
 801d1c6:	601a      	str	r2, [r3, #0]
 801d1c8:	f507 7322 	add.w	r3, r7, #648	; 0x288
 801d1cc:	681b      	ldr	r3, [r3, #0]
 801d1ce:	461a      	mov	r2, r3
 801d1d0:	f507 7333 	add.w	r3, r7, #716	; 0x2cc
 801d1d4:	681b      	ldr	r3, [r3, #0]
 801d1d6:	601a      	str	r2, [r3, #0]
    return source;
 801d1d8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801d1dc:	681b      	ldr	r3, [r3, #0]

            ip_a0 = read_and_pad(ip_a0, &a01, &a02);
 801d1de:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
 801d1e2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 801d1e6:	f8d7 23dc 	ldr.w	r2, [r7, #988]	; 0x3dc
 801d1ea:	601a      	str	r2, [r3, #0]
 801d1ec:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801d1f0:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
 801d1f4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801d1f8:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
 801d1fc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 801d200:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
    memcpy(&val, *in_q7, 4);
 801d204:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
 801d208:	681b      	ldr	r3, [r3, #0]
 801d20a:	681b      	ldr	r3, [r3, #0]
 801d20c:	461a      	mov	r2, r3
 801d20e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801d212:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801d214:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
 801d218:	681b      	ldr	r3, [r3, #0]
 801d21a:	1d1a      	adds	r2, r3, #4
 801d21c:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
 801d220:	601a      	str	r2, [r3, #0]
    return (val);
 801d222:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801d226:	681b      	ldr	r3, [r3, #0]
    q31_t inA = arm_nn_read_q7x4_ia(&source);
 801d228:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
    q31_t inAbuf1 = __SXTB16(__ROR((uint32_t)inA, 8));
 801d22c:	f8d7 3308 	ldr.w	r3, [r7, #776]	; 0x308
 801d230:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
 801d234:	2308      	movs	r3, #8
 801d236:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
  op2 %= 32U;
 801d23a:	f8d7 3300 	ldr.w	r3, [r7, #768]	; 0x300
 801d23e:	f003 031f 	and.w	r3, r3, #31
 801d242:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
  if (op2 == 0U)
 801d246:	f8d7 3300 	ldr.w	r3, [r7, #768]	; 0x300
 801d24a:	2b00      	cmp	r3, #0
 801d24c:	d102      	bne.n	801d254 <arm_nn_mat_mult_kernel_s8_s16+0x316>
    return op1;
 801d24e:	f8d7 3304 	ldr.w	r3, [r7, #772]	; 0x304
 801d252:	e005      	b.n	801d260 <arm_nn_mat_mult_kernel_s8_s16+0x322>
  return (op1 >> op2) | (op1 << (32U - op2));
 801d254:	f8d7 2304 	ldr.w	r2, [r7, #772]	; 0x304
 801d258:	f8d7 3300 	ldr.w	r3, [r7, #768]	; 0x300
 801d25c:	fa62 f303 	ror.w	r3, r2, r3
 801d260:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801d264:	f8d7 32fc 	ldr.w	r3, [r7, #764]	; 0x2fc
 801d268:	fa2f f383 	sxtb16	r3, r3
 801d26c:	f8c7 32f8 	str.w	r3, [r7, #760]	; 0x2f8
  return(result);
 801d270:	f8d7 32f8 	ldr.w	r3, [r7, #760]	; 0x2f8
 801d274:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
    q31_t inAbuf2 = __SXTB16(inA);
 801d278:	f8d7 2308 	ldr.w	r2, [r7, #776]	; 0x308
 801d27c:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 801d280:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801d282:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 801d286:	681b      	ldr	r3, [r3, #0]
 801d288:	fa2f f283 	sxtb16	r2, r3
 801d28c:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 801d290:	601a      	str	r2, [r3, #0]
  return(result);
 801d292:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 801d296:	681a      	ldr	r2, [r3, #0]
 801d298:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 801d29c:	601a      	str	r2, [r3, #0]
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 801d29e:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 801d2a2:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 801d2a6:	601a      	str	r2, [r3, #0]
 801d2a8:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 801d2ac:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 801d2b0:	681b      	ldr	r3, [r3, #0]
 801d2b2:	6013      	str	r3, [r2, #0]
 801d2b4:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 801d2b8:	681a      	ldr	r2, [r3, #0]
 801d2ba:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 801d2be:	681b      	ldr	r3, [r3, #0]
 801d2c0:	eac2 4223 	pkhtb	r2, r2, r3, asr #16
 801d2c4:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 801d2c8:	601a      	str	r2, [r3, #0]
 801d2ca:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 801d2ce:	681b      	ldr	r3, [r3, #0]
 801d2d0:	461a      	mov	r2, r3
 801d2d2:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 801d2d6:	601a      	str	r2, [r3, #0]
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 801d2d8:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 801d2dc:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 801d2e0:	681b      	ldr	r3, [r3, #0]
 801d2e2:	6013      	str	r3, [r2, #0]
 801d2e4:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 801d2e8:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 801d2ec:	601a      	str	r2, [r3, #0]
 801d2ee:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801d2f2:	681a      	ldr	r2, [r3, #0]
 801d2f4:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 801d2f8:	681b      	ldr	r3, [r3, #0]
 801d2fa:	eac2 4203 	pkhbt	r2, r2, r3, lsl #16
 801d2fe:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 801d302:	601a      	str	r2, [r3, #0]
 801d304:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 801d308:	681b      	ldr	r3, [r3, #0]
 801d30a:	461a      	mov	r2, r3
 801d30c:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 801d310:	601a      	str	r2, [r3, #0]
    return source;
 801d312:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 801d316:	681b      	ldr	r3, [r3, #0]
            ip_a1 = read_and_pad(ip_a1, &a11, &a12);
 801d318:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc

            ch_0_out_0 = __SMLAD(a01, b0, ch_0_out_0);
 801d31c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 801d320:	681b      	ldr	r3, [r3, #0]
 801d322:	4619      	mov	r1, r3
 801d324:	f8d7 23a4 	ldr.w	r2, [r7, #932]	; 0x3a4
 801d328:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 801d32c:	f8c7 1324 	str.w	r1, [r7, #804]	; 0x324
 801d330:	f8c7 2320 	str.w	r2, [r7, #800]	; 0x320
 801d334:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801d338:	f8d7 2324 	ldr.w	r2, [r7, #804]	; 0x324
 801d33c:	f8d7 1320 	ldr.w	r1, [r7, #800]	; 0x320
 801d340:	f8d7 331c 	ldr.w	r3, [r7, #796]	; 0x31c
 801d344:	fb22 3301 	smlad	r3, r2, r1, r3
 801d348:	f8c7 3318 	str.w	r3, [r7, #792]	; 0x318
  return(result);
 801d34c:	f8d7 3318 	ldr.w	r3, [r7, #792]	; 0x318
 801d350:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
            ch_0_out_1 = __SMLAD(a01, b1, ch_0_out_1);
 801d354:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 801d358:	681b      	ldr	r3, [r3, #0]
 801d35a:	4619      	mov	r1, r3
 801d35c:	f8d7 23a0 	ldr.w	r2, [r7, #928]	; 0x3a0
 801d360:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 801d364:	f8c7 1334 	str.w	r1, [r7, #820]	; 0x334
 801d368:	f8c7 2330 	str.w	r2, [r7, #816]	; 0x330
 801d36c:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801d370:	f8d7 2334 	ldr.w	r2, [r7, #820]	; 0x334
 801d374:	f8d7 1330 	ldr.w	r1, [r7, #816]	; 0x330
 801d378:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 801d37c:	fb22 3301 	smlad	r3, r2, r1, r3
 801d380:	f8c7 3328 	str.w	r3, [r7, #808]	; 0x328
  return(result);
 801d384:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 801d388:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
            ch_1_out_0 = __SMLAD(a11, b0, ch_1_out_0);
 801d38c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801d390:	681b      	ldr	r3, [r3, #0]
 801d392:	4619      	mov	r1, r3
 801d394:	f8d7 23a4 	ldr.w	r2, [r7, #932]	; 0x3a4
 801d398:	f8d7 33d0 	ldr.w	r3, [r7, #976]	; 0x3d0
 801d39c:	f8c7 1344 	str.w	r1, [r7, #836]	; 0x344
 801d3a0:	f8c7 2340 	str.w	r2, [r7, #832]	; 0x340
 801d3a4:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801d3a8:	f8d7 2344 	ldr.w	r2, [r7, #836]	; 0x344
 801d3ac:	f8d7 1340 	ldr.w	r1, [r7, #832]	; 0x340
 801d3b0:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 801d3b4:	fb22 3301 	smlad	r3, r2, r1, r3
 801d3b8:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338
  return(result);
 801d3bc:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 801d3c0:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
            ch_1_out_1 = __SMLAD(a11, b1, ch_1_out_1);
 801d3c4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801d3c8:	681b      	ldr	r3, [r3, #0]
 801d3ca:	4619      	mov	r1, r3
 801d3cc:	f8d7 23a0 	ldr.w	r2, [r7, #928]	; 0x3a0
 801d3d0:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 801d3d4:	f8c7 1354 	str.w	r1, [r7, #852]	; 0x354
 801d3d8:	f8c7 2350 	str.w	r2, [r7, #848]	; 0x350
 801d3dc:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801d3e0:	f8d7 2354 	ldr.w	r2, [r7, #852]	; 0x354
 801d3e4:	f8d7 1350 	ldr.w	r1, [r7, #848]	; 0x350
 801d3e8:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 801d3ec:	fb22 3301 	smlad	r3, r2, r1, r3
 801d3f0:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348
  return(result);
 801d3f4:	f8d7 3348 	ldr.w	r3, [r7, #840]	; 0x348
 801d3f8:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 801d3fc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 801d400:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358
    memcpy(&val, *in_q15, 4);
 801d404:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 801d408:	681b      	ldr	r3, [r3, #0]
 801d40a:	681b      	ldr	r3, [r3, #0]
 801d40c:	461a      	mov	r2, r3
 801d40e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 801d412:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 801d414:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 801d418:	681b      	ldr	r3, [r3, #0]
 801d41a:	1d1a      	adds	r2, r3, #4
 801d41c:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 801d420:	601a      	str	r2, [r3, #0]
    return (val);
 801d422:	f107 0374 	add.w	r3, r7, #116	; 0x74
 801d426:	681b      	ldr	r3, [r3, #0]

            b0 = arm_nn_read_q15x2_ia(&ip_b0);
 801d428:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
 801d42c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801d430:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
    memcpy(&val, *in_q15, 4);
 801d434:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 801d438:	681b      	ldr	r3, [r3, #0]
 801d43a:	681b      	ldr	r3, [r3, #0]
 801d43c:	461a      	mov	r2, r3
 801d43e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801d442:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 801d444:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 801d448:	681b      	ldr	r3, [r3, #0]
 801d44a:	1d1a      	adds	r2, r3, #4
 801d44c:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 801d450:	601a      	str	r2, [r3, #0]
    return (val);
 801d452:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801d456:	681b      	ldr	r3, [r3, #0]
            b1 = arm_nn_read_q15x2_ia(&ip_b1);
 801d458:	f8c7 33a0 	str.w	r3, [r7, #928]	; 0x3a0

            ch_0_out_0 = __SMLAD(a02, b0, ch_0_out_0);
 801d45c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801d460:	681b      	ldr	r3, [r3, #0]
 801d462:	4619      	mov	r1, r3
 801d464:	f8d7 23a4 	ldr.w	r2, [r7, #932]	; 0x3a4
 801d468:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 801d46c:	f8c7 136c 	str.w	r1, [r7, #876]	; 0x36c
 801d470:	f8c7 2368 	str.w	r2, [r7, #872]	; 0x368
 801d474:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801d478:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 801d47c:	f8d7 1368 	ldr.w	r1, [r7, #872]	; 0x368
 801d480:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 801d484:	fb22 3301 	smlad	r3, r2, r1, r3
 801d488:	f8c7 3360 	str.w	r3, [r7, #864]	; 0x360
  return(result);
 801d48c:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 801d490:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
            ch_0_out_1 = __SMLAD(a02, b1, ch_0_out_1);
 801d494:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801d498:	681b      	ldr	r3, [r3, #0]
 801d49a:	4619      	mov	r1, r3
 801d49c:	f8d7 23a0 	ldr.w	r2, [r7, #928]	; 0x3a0
 801d4a0:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 801d4a4:	f8c7 137c 	str.w	r1, [r7, #892]	; 0x37c
 801d4a8:	f8c7 2378 	str.w	r2, [r7, #888]	; 0x378
 801d4ac:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801d4b0:	f8d7 237c 	ldr.w	r2, [r7, #892]	; 0x37c
 801d4b4:	f8d7 1378 	ldr.w	r1, [r7, #888]	; 0x378
 801d4b8:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 801d4bc:	fb22 3301 	smlad	r3, r2, r1, r3
 801d4c0:	f8c7 3370 	str.w	r3, [r7, #880]	; 0x370
  return(result);
 801d4c4:	f8d7 3370 	ldr.w	r3, [r7, #880]	; 0x370
 801d4c8:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
            ch_1_out_0 = __SMLAD(a12, b0, ch_1_out_0);
 801d4cc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801d4d0:	681b      	ldr	r3, [r3, #0]
 801d4d2:	4619      	mov	r1, r3
 801d4d4:	f8d7 23a4 	ldr.w	r2, [r7, #932]	; 0x3a4
 801d4d8:	f8d7 33d0 	ldr.w	r3, [r7, #976]	; 0x3d0
 801d4dc:	f8c7 138c 	str.w	r1, [r7, #908]	; 0x38c
 801d4e0:	f8c7 2388 	str.w	r2, [r7, #904]	; 0x388
 801d4e4:	f8c7 3384 	str.w	r3, [r7, #900]	; 0x384
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801d4e8:	f8d7 238c 	ldr.w	r2, [r7, #908]	; 0x38c
 801d4ec:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 801d4f0:	f8d7 3384 	ldr.w	r3, [r7, #900]	; 0x384
 801d4f4:	fb22 3301 	smlad	r3, r2, r1, r3
 801d4f8:	f8c7 3380 	str.w	r3, [r7, #896]	; 0x380
  return(result);
 801d4fc:	f8d7 3380 	ldr.w	r3, [r7, #896]	; 0x380
 801d500:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
            ch_1_out_1 = __SMLAD(a12, b1, ch_1_out_1);
 801d504:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801d508:	681b      	ldr	r3, [r3, #0]
 801d50a:	4619      	mov	r1, r3
 801d50c:	f8d7 23a0 	ldr.w	r2, [r7, #928]	; 0x3a0
 801d510:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 801d514:	f8c7 139c 	str.w	r1, [r7, #924]	; 0x39c
 801d518:	f8c7 2398 	str.w	r2, [r7, #920]	; 0x398
 801d51c:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801d520:	f8d7 239c 	ldr.w	r2, [r7, #924]	; 0x39c
 801d524:	f8d7 1398 	ldr.w	r1, [r7, #920]	; 0x398
 801d528:	f8d7 3394 	ldr.w	r3, [r7, #916]	; 0x394
 801d52c:	fb22 3301 	smlad	r3, r2, r1, r3
 801d530:	f8c7 3390 	str.w	r3, [r7, #912]	; 0x390
  return(result);
 801d534:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 801d538:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc

            col_count--;
 801d53c:	f8b7 33ca 	ldrh.w	r3, [r7, #970]	; 0x3ca
 801d540:	3b01      	subs	r3, #1
 801d542:	f8a7 33ca 	strh.w	r3, [r7, #970]	; 0x3ca
        while (col_count)
 801d546:	f8b7 33ca 	ldrh.w	r3, [r7, #970]	; 0x3ca
 801d54a:	2b00      	cmp	r3, #0
 801d54c:	f47f ad5a 	bne.w	801d004 <arm_nn_mat_mult_kernel_s8_s16+0xc6>
        } /* while over col_count */
        col_count = num_col_a & 0x3;
 801d550:	f8b7 3420 	ldrh.w	r3, [r7, #1056]	; 0x420
 801d554:	f003 0303 	and.w	r3, r3, #3
 801d558:	f8a7 33ca 	strh.w	r3, [r7, #970]	; 0x3ca
        while (col_count)
 801d55c:	e054      	b.n	801d608 <arm_nn_mat_mult_kernel_s8_s16+0x6ca>
        {
            q7_t a0 = *ip_a0++;
 801d55e:	f8d7 33e0 	ldr.w	r3, [r7, #992]	; 0x3e0
 801d562:	1c5a      	adds	r2, r3, #1
 801d564:	f8c7 23e0 	str.w	r2, [r7, #992]	; 0x3e0
 801d568:	781b      	ldrb	r3, [r3, #0]
 801d56a:	f887 33af 	strb.w	r3, [r7, #943]	; 0x3af
            q15_t b0 = *ip_b0++;
 801d56e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 801d572:	681a      	ldr	r2, [r3, #0]
 801d574:	1c91      	adds	r1, r2, #2
 801d576:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 801d57a:	6019      	str	r1, [r3, #0]
 801d57c:	8813      	ldrh	r3, [r2, #0]
 801d57e:	f8a7 33ac 	strh.w	r3, [r7, #940]	; 0x3ac
            q7_t a1 = *ip_a1++;
 801d582:	f8d7 33dc 	ldr.w	r3, [r7, #988]	; 0x3dc
 801d586:	1c5a      	adds	r2, r3, #1
 801d588:	f8c7 23dc 	str.w	r2, [r7, #988]	; 0x3dc
 801d58c:	781b      	ldrb	r3, [r3, #0]
 801d58e:	f887 33ab 	strb.w	r3, [r7, #939]	; 0x3ab
            q15_t b1 = *ip_b1++;
 801d592:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801d596:	681a      	ldr	r2, [r3, #0]
 801d598:	1c91      	adds	r1, r2, #2
 801d59a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801d59e:	6019      	str	r1, [r3, #0]
 801d5a0:	8813      	ldrh	r3, [r2, #0]
 801d5a2:	f8a7 33a8 	strh.w	r3, [r7, #936]	; 0x3a8

            ch_0_out_0 += a0 * b0;
 801d5a6:	f997 33af 	ldrsb.w	r3, [r7, #943]	; 0x3af
 801d5aa:	f9b7 23ac 	ldrsh.w	r2, [r7, #940]	; 0x3ac
 801d5ae:	fb02 f303 	mul.w	r3, r2, r3
 801d5b2:	f8d7 23d8 	ldr.w	r2, [r7, #984]	; 0x3d8
 801d5b6:	4413      	add	r3, r2
 801d5b8:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
            ch_0_out_1 += a0 * b1;
 801d5bc:	f997 33af 	ldrsb.w	r3, [r7, #943]	; 0x3af
 801d5c0:	f9b7 23a8 	ldrsh.w	r2, [r7, #936]	; 0x3a8
 801d5c4:	fb02 f303 	mul.w	r3, r2, r3
 801d5c8:	f8d7 23d4 	ldr.w	r2, [r7, #980]	; 0x3d4
 801d5cc:	4413      	add	r3, r2
 801d5ce:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
            ch_1_out_0 += a1 * b0;
 801d5d2:	f997 33ab 	ldrsb.w	r3, [r7, #939]	; 0x3ab
 801d5d6:	f9b7 23ac 	ldrsh.w	r2, [r7, #940]	; 0x3ac
 801d5da:	fb02 f303 	mul.w	r3, r2, r3
 801d5de:	f8d7 23d0 	ldr.w	r2, [r7, #976]	; 0x3d0
 801d5e2:	4413      	add	r3, r2
 801d5e4:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
            ch_1_out_1 += a1 * b1;
 801d5e8:	f997 33ab 	ldrsb.w	r3, [r7, #939]	; 0x3ab
 801d5ec:	f9b7 23a8 	ldrsh.w	r2, [r7, #936]	; 0x3a8
 801d5f0:	fb02 f303 	mul.w	r3, r2, r3
 801d5f4:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 801d5f8:	4413      	add	r3, r2
 801d5fa:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
            col_count--;
 801d5fe:	f8b7 33ca 	ldrh.w	r3, [r7, #970]	; 0x3ca
 801d602:	3b01      	subs	r3, #1
 801d604:	f8a7 33ca 	strh.w	r3, [r7, #970]	; 0x3ca
        while (col_count)
 801d608:	f8b7 33ca 	ldrh.w	r3, [r7, #970]	; 0x3ca
 801d60c:	2b00      	cmp	r3, #0
 801d60e:	d1a6      	bne.n	801d55e <arm_nn_mat_mult_kernel_s8_s16+0x620>
        } /* while over col_count */

        ch_0_out_0 = arm_nn_requantize(ch_0_out_0, *out_mult, *out_shift);
 801d610:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 801d614:	6818      	ldr	r0, [r3, #0]
 801d616:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d61a:	681b      	ldr	r3, [r3, #0]
 801d61c:	6819      	ldr	r1, [r3, #0]
 801d61e:	f507 72f6 	add.w	r2, r7, #492	; 0x1ec
 801d622:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 801d626:	6013      	str	r3, [r2, #0]
 801d628:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 801d62c:	6018      	str	r0, [r3, #0]
 801d62e:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 801d632:	6019      	str	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801d634:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 801d638:	681b      	ldr	r3, [r3, #0]
 801d63a:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 801d63e:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 801d642:	681b      	ldr	r3, [r3, #0]
 801d644:	fa03 f202 	lsl.w	r2, r3, r2
 801d648:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 801d64c:	601a      	str	r2, [r3, #0]
 801d64e:	f507 72ee 	add.w	r2, r7, #476	; 0x1dc
 801d652:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 801d656:	681b      	ldr	r3, [r3, #0]
 801d658:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801d65a:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 801d65e:	2200      	movs	r2, #0
 801d660:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 801d662:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801d666:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801d66a:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 801d66c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801d670:	2200      	movs	r2, #0
 801d672:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801d674:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 801d678:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 801d67c:	681b      	ldr	r3, [r3, #0]
 801d67e:	4618      	mov	r0, r3
 801d680:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801d684:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 801d688:	681b      	ldr	r3, [r3, #0]
 801d68a:	461a      	mov	r2, r3
 801d68c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801d690:	fb02 f501 	mul.w	r5, r2, r1
 801d694:	fb00 f403 	mul.w	r4, r0, r3
 801d698:	442c      	add	r4, r5
 801d69a:	fba0 2302 	umull	r2, r3, r0, r2
 801d69e:	18e1      	adds	r1, r4, r3
 801d6a0:	460b      	mov	r3, r1
 801d6a2:	eb18 0102 	adds.w	r1, r8, r2
 801d6a6:	60b9      	str	r1, [r7, #8]
 801d6a8:	eb49 0303 	adc.w	r3, r9, r3
 801d6ac:	60fb      	str	r3, [r7, #12]
 801d6ae:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 801d6b2:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
    result = (int32_t)(mult.long_long >> 31);
 801d6b6:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 801d6ba:	f04f 0000 	mov.w	r0, #0
 801d6be:	f04f 0100 	mov.w	r1, #0
 801d6c2:	0fd0      	lsrs	r0, r2, #31
 801d6c4:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801d6c8:	17d9      	asrs	r1, r3, #31
 801d6ca:	f507 72ec 	add.w	r2, r7, #472	; 0x1d8
 801d6ce:	4603      	mov	r3, r0
 801d6d0:	6013      	str	r3, [r2, #0]
    return result;
 801d6d2:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 801d6d6:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801d6d8:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 801d6dc:	681b      	ldr	r3, [r3, #0]
 801d6de:	2b00      	cmp	r3, #0
 801d6e0:	dc04      	bgt.n	801d6ec <arm_nn_mat_mult_kernel_s8_s16+0x7ae>
 801d6e2:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 801d6e6:	681b      	ldr	r3, [r3, #0]
 801d6e8:	425a      	negs	r2, r3
 801d6ea:	e000      	b.n	801d6ee <arm_nn_mat_mult_kernel_s8_s16+0x7b0>
 801d6ec:	2200      	movs	r2, #0
 801d6ee:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 801d6f2:	6019      	str	r1, [r3, #0]
 801d6f4:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 801d6f8:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801d6fa:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 801d6fe:	2200      	movs	r2, #0
 801d700:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801d702:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 801d706:	2201      	movs	r2, #1
 801d708:	681b      	ldr	r3, [r3, #0]
 801d70a:	fa02 f303 	lsl.w	r3, r2, r3
 801d70e:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 801d712:	3b01      	subs	r3, #1
 801d714:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 801d716:	f507 71e2 	add.w	r1, r7, #452	; 0x1c4
 801d71a:	f507 72ea 	add.w	r2, r7, #468	; 0x1d4
 801d71e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801d722:	6812      	ldr	r2, [r2, #0]
 801d724:	681b      	ldr	r3, [r3, #0]
 801d726:	4013      	ands	r3, r2
 801d728:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 801d72a:	f507 71e6 	add.w	r1, r7, #460	; 0x1cc
 801d72e:	f507 72ea 	add.w	r2, r7, #468	; 0x1d4
 801d732:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 801d736:	6812      	ldr	r2, [r2, #0]
 801d738:	681b      	ldr	r3, [r3, #0]
 801d73a:	fa42 f303 	asr.w	r3, r2, r3
 801d73e:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 801d740:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
 801d744:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801d748:	681b      	ldr	r3, [r3, #0]
 801d74a:	105b      	asrs	r3, r3, #1
 801d74c:	6013      	str	r3, [r2, #0]
    if (result < 0)
 801d74e:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 801d752:	681b      	ldr	r3, [r3, #0]
 801d754:	2b00      	cmp	r3, #0
 801d756:	da06      	bge.n	801d766 <arm_nn_mat_mult_kernel_s8_s16+0x828>
        threshold++;
 801d758:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
 801d75c:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 801d760:	681b      	ldr	r3, [r3, #0]
 801d762:	3301      	adds	r3, #1
 801d764:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 801d766:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 801d76a:	f507 71e0 	add.w	r1, r7, #448	; 0x1c0
 801d76e:	681a      	ldr	r2, [r3, #0]
 801d770:	680b      	ldr	r3, [r1, #0]
 801d772:	429a      	cmp	r2, r3
 801d774:	dd06      	ble.n	801d784 <arm_nn_mat_mult_kernel_s8_s16+0x846>
        result++;
 801d776:	f507 72e6 	add.w	r2, r7, #460	; 0x1cc
 801d77a:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 801d77e:	681b      	ldr	r3, [r3, #0]
 801d780:	3301      	adds	r3, #1
 801d782:	6013      	str	r3, [r2, #0]
    return result;
 801d784:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 801d788:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801d78a:	bf00      	nop
 801d78c:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
        ch_0_out_0 += out_offset;
 801d790:	f8d7 23d8 	ldr.w	r2, [r7, #984]	; 0x3d8
 801d794:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 801d798:	4413      	add	r3, r2
 801d79a:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
        ch_0_out_0 = MAX(ch_0_out_0, activation_min);
 801d79e:	f9b7 3418 	ldrsh.w	r3, [r7, #1048]	; 0x418
 801d7a2:	f8d7 23d8 	ldr.w	r2, [r7, #984]	; 0x3d8
 801d7a6:	4293      	cmp	r3, r2
 801d7a8:	bfb8      	it	lt
 801d7aa:	4613      	movlt	r3, r2
 801d7ac:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 801d7b0:	f9b7 341c 	ldrsh.w	r3, [r7, #1052]	; 0x41c
 801d7b4:	f8d7 23d8 	ldr.w	r2, [r7, #984]	; 0x3d8
 801d7b8:	4293      	cmp	r3, r2
 801d7ba:	bfa8      	it	ge
 801d7bc:	4613      	movge	r3, r2
 801d7be:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
        *out_0++ = (q7_t)ch_0_out_0;
 801d7c2:	f8d7 2428 	ldr.w	r2, [r7, #1064]	; 0x428
 801d7c6:	1c53      	adds	r3, r2, #1
 801d7c8:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
 801d7cc:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 801d7d0:	b25b      	sxtb	r3, r3
 801d7d2:	7013      	strb	r3, [r2, #0]

        ch_0_out_1 = arm_nn_requantize(ch_0_out_1, *out_mult, *out_shift);
 801d7d4:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 801d7d8:	6818      	ldr	r0, [r3, #0]
 801d7da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d7de:	681b      	ldr	r3, [r3, #0]
 801d7e0:	6819      	ldr	r1, [r3, #0]
 801d7e2:	f507 7207 	add.w	r2, r7, #540	; 0x21c
 801d7e6:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 801d7ea:	6013      	str	r3, [r2, #0]
 801d7ec:	f507 7306 	add.w	r3, r7, #536	; 0x218
 801d7f0:	6018      	str	r0, [r3, #0]
 801d7f2:	f507 7305 	add.w	r3, r7, #532	; 0x214
 801d7f6:	6019      	str	r1, [r3, #0]
 801d7f8:	f507 7305 	add.w	r3, r7, #532	; 0x214
 801d7fc:	681b      	ldr	r3, [r3, #0]
 801d7fe:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 801d802:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 801d806:	681b      	ldr	r3, [r3, #0]
 801d808:	fa03 f202 	lsl.w	r2, r3, r2
 801d80c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 801d810:	601a      	str	r2, [r3, #0]
 801d812:	f507 7203 	add.w	r2, r7, #524	; 0x20c
 801d816:	f507 7306 	add.w	r3, r7, #536	; 0x218
 801d81a:	681b      	ldr	r3, [r3, #0]
 801d81c:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801d81e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 801d822:	2200      	movs	r2, #0
 801d824:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 801d826:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801d82a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801d82e:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 801d830:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801d834:	2200      	movs	r2, #0
 801d836:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801d838:	e9d7 892c 	ldrd	r8, r9, [r7, #176]	; 0xb0
 801d83c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 801d840:	681b      	ldr	r3, [r3, #0]
 801d842:	4618      	mov	r0, r3
 801d844:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801d848:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 801d84c:	681b      	ldr	r3, [r3, #0]
 801d84e:	461a      	mov	r2, r3
 801d850:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801d854:	fb02 f501 	mul.w	r5, r2, r1
 801d858:	fb00 f403 	mul.w	r4, r0, r3
 801d85c:	442c      	add	r4, r5
 801d85e:	fba0 2302 	umull	r2, r3, r0, r2
 801d862:	18e1      	adds	r1, r4, r3
 801d864:	460b      	mov	r3, r1
 801d866:	eb18 0102 	adds.w	r1, r8, r2
 801d86a:	6139      	str	r1, [r7, #16]
 801d86c:	eb49 0303 	adc.w	r3, r9, r3
 801d870:	617b      	str	r3, [r7, #20]
 801d872:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 801d876:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
    result = (int32_t)(mult.long_long >> 31);
 801d87a:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 801d87e:	f04f 0000 	mov.w	r0, #0
 801d882:	f04f 0100 	mov.w	r1, #0
 801d886:	0fd0      	lsrs	r0, r2, #31
 801d888:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801d88c:	17d9      	asrs	r1, r3, #31
 801d88e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 801d892:	4603      	mov	r3, r0
 801d894:	6013      	str	r3, [r2, #0]
    return result;
 801d896:	f507 7302 	add.w	r3, r7, #520	; 0x208
 801d89a:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801d89c:	f507 7305 	add.w	r3, r7, #532	; 0x214
 801d8a0:	681b      	ldr	r3, [r3, #0]
 801d8a2:	2b00      	cmp	r3, #0
 801d8a4:	dc04      	bgt.n	801d8b0 <arm_nn_mat_mult_kernel_s8_s16+0x972>
 801d8a6:	f507 7305 	add.w	r3, r7, #532	; 0x214
 801d8aa:	681b      	ldr	r3, [r3, #0]
 801d8ac:	425a      	negs	r2, r3
 801d8ae:	e000      	b.n	801d8b2 <arm_nn_mat_mult_kernel_s8_s16+0x974>
 801d8b0:	2200      	movs	r2, #0
 801d8b2:	f507 7301 	add.w	r3, r7, #516	; 0x204
 801d8b6:	6019      	str	r1, [r3, #0]
 801d8b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801d8bc:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801d8be:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 801d8c2:	2200      	movs	r2, #0
 801d8c4:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801d8c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801d8ca:	2201      	movs	r2, #1
 801d8cc:	681b      	ldr	r3, [r3, #0]
 801d8ce:	fa02 f303 	lsl.w	r3, r2, r3
 801d8d2:	f507 72fc 	add.w	r2, r7, #504	; 0x1f8
 801d8d6:	3b01      	subs	r3, #1
 801d8d8:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 801d8da:	f507 71fa 	add.w	r1, r7, #500	; 0x1f4
 801d8de:	f507 7201 	add.w	r2, r7, #516	; 0x204
 801d8e2:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 801d8e6:	6812      	ldr	r2, [r2, #0]
 801d8e8:	681b      	ldr	r3, [r3, #0]
 801d8ea:	4013      	ands	r3, r2
 801d8ec:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 801d8ee:	f507 71fe 	add.w	r1, r7, #508	; 0x1fc
 801d8f2:	f507 7201 	add.w	r2, r7, #516	; 0x204
 801d8f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801d8fa:	6812      	ldr	r2, [r2, #0]
 801d8fc:	681b      	ldr	r3, [r3, #0]
 801d8fe:	fa42 f303 	asr.w	r3, r2, r3
 801d902:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 801d904:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 801d908:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 801d90c:	681b      	ldr	r3, [r3, #0]
 801d90e:	105b      	asrs	r3, r3, #1
 801d910:	6013      	str	r3, [r2, #0]
    if (result < 0)
 801d912:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 801d916:	681b      	ldr	r3, [r3, #0]
 801d918:	2b00      	cmp	r3, #0
 801d91a:	da06      	bge.n	801d92a <arm_nn_mat_mult_kernel_s8_s16+0x9ec>
        threshold++;
 801d91c:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 801d920:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 801d924:	681b      	ldr	r3, [r3, #0]
 801d926:	3301      	adds	r3, #1
 801d928:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 801d92a:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 801d92e:	f507 71f8 	add.w	r1, r7, #496	; 0x1f0
 801d932:	681a      	ldr	r2, [r3, #0]
 801d934:	680b      	ldr	r3, [r1, #0]
 801d936:	429a      	cmp	r2, r3
 801d938:	dd06      	ble.n	801d948 <arm_nn_mat_mult_kernel_s8_s16+0xa0a>
        result++;
 801d93a:	f507 72fe 	add.w	r2, r7, #508	; 0x1fc
 801d93e:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 801d942:	681b      	ldr	r3, [r3, #0]
 801d944:	3301      	adds	r3, #1
 801d946:	6013      	str	r3, [r2, #0]
    return result;
 801d948:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 801d94c:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801d94e:	bf00      	nop
 801d950:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
        ch_0_out_1 += out_offset;
 801d954:	f8d7 23d4 	ldr.w	r2, [r7, #980]	; 0x3d4
 801d958:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 801d95c:	4413      	add	r3, r2
 801d95e:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
        ch_0_out_1 = MAX(ch_0_out_1, activation_min);
 801d962:	f9b7 3418 	ldrsh.w	r3, [r7, #1048]	; 0x418
 801d966:	f8d7 23d4 	ldr.w	r2, [r7, #980]	; 0x3d4
 801d96a:	4293      	cmp	r3, r2
 801d96c:	bfb8      	it	lt
 801d96e:	4613      	movlt	r3, r2
 801d970:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
        ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 801d974:	f9b7 341c 	ldrsh.w	r3, [r7, #1052]	; 0x41c
 801d978:	f8d7 23d4 	ldr.w	r2, [r7, #980]	; 0x3d4
 801d97c:	4293      	cmp	r3, r2
 801d97e:	bfa8      	it	ge
 801d980:	4613      	movge	r3, r2
 801d982:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
        *out_1++ = (q7_t)ch_0_out_1;
 801d986:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	; 0x3ec
 801d98a:	1c53      	adds	r3, r2, #1
 801d98c:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
 801d990:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 801d994:	b25b      	sxtb	r3, r3
 801d996:	7013      	strb	r3, [r2, #0]
        out_mult++;
 801d998:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 801d99c:	3304      	adds	r3, #4
 801d99e:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
        out_shift++;
 801d9a2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801d9a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d9aa:	681b      	ldr	r3, [r3, #0]
 801d9ac:	3304      	adds	r3, #4
 801d9ae:	6013      	str	r3, [r2, #0]

        ch_1_out_0 = arm_nn_requantize(ch_1_out_0, *out_mult, *out_shift);
 801d9b0:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 801d9b4:	6818      	ldr	r0, [r3, #0]
 801d9b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d9ba:	681b      	ldr	r3, [r3, #0]
 801d9bc:	6819      	ldr	r1, [r3, #0]
 801d9be:	f507 7213 	add.w	r2, r7, #588	; 0x24c
 801d9c2:	f8d7 33d0 	ldr.w	r3, [r7, #976]	; 0x3d0
 801d9c6:	6013      	str	r3, [r2, #0]
 801d9c8:	f507 7312 	add.w	r3, r7, #584	; 0x248
 801d9cc:	6018      	str	r0, [r3, #0]
 801d9ce:	f507 7311 	add.w	r3, r7, #580	; 0x244
 801d9d2:	6019      	str	r1, [r3, #0]
 801d9d4:	f507 7311 	add.w	r3, r7, #580	; 0x244
 801d9d8:	681b      	ldr	r3, [r3, #0]
 801d9da:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 801d9de:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 801d9e2:	681b      	ldr	r3, [r3, #0]
 801d9e4:	fa03 f202 	lsl.w	r2, r3, r2
 801d9e8:	f507 7310 	add.w	r3, r7, #576	; 0x240
 801d9ec:	601a      	str	r2, [r3, #0]
 801d9ee:	f507 720f 	add.w	r2, r7, #572	; 0x23c
 801d9f2:	f507 7312 	add.w	r3, r7, #584	; 0x248
 801d9f6:	681b      	ldr	r3, [r3, #0]
 801d9f8:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801d9fa:	f507 730e 	add.w	r3, r7, #568	; 0x238
 801d9fe:	2200      	movs	r2, #0
 801da00:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 801da02:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801da06:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801da0a:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 801da0c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801da10:	2200      	movs	r2, #0
 801da12:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801da14:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 801da18:	f507 7310 	add.w	r3, r7, #576	; 0x240
 801da1c:	681b      	ldr	r3, [r3, #0]
 801da1e:	4618      	mov	r0, r3
 801da20:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801da24:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 801da28:	681b      	ldr	r3, [r3, #0]
 801da2a:	461a      	mov	r2, r3
 801da2c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801da30:	fb02 f501 	mul.w	r5, r2, r1
 801da34:	fb00 f403 	mul.w	r4, r0, r3
 801da38:	442c      	add	r4, r5
 801da3a:	fba0 2302 	umull	r2, r3, r0, r2
 801da3e:	18e1      	adds	r1, r4, r3
 801da40:	460b      	mov	r3, r1
 801da42:	eb18 0102 	adds.w	r1, r8, r2
 801da46:	61b9      	str	r1, [r7, #24]
 801da48:	eb49 0303 	adc.w	r3, r9, r3
 801da4c:	61fb      	str	r3, [r7, #28]
 801da4e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 801da52:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
    result = (int32_t)(mult.long_long >> 31);
 801da56:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 801da5a:	f04f 0000 	mov.w	r0, #0
 801da5e:	f04f 0100 	mov.w	r1, #0
 801da62:	0fd0      	lsrs	r0, r2, #31
 801da64:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801da68:	17d9      	asrs	r1, r3, #31
 801da6a:	f507 720e 	add.w	r2, r7, #568	; 0x238
 801da6e:	4603      	mov	r3, r0
 801da70:	6013      	str	r3, [r2, #0]
    return result;
 801da72:	f507 730e 	add.w	r3, r7, #568	; 0x238
 801da76:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801da78:	f507 7311 	add.w	r3, r7, #580	; 0x244
 801da7c:	681b      	ldr	r3, [r3, #0]
 801da7e:	2b00      	cmp	r3, #0
 801da80:	dc04      	bgt.n	801da8c <arm_nn_mat_mult_kernel_s8_s16+0xb4e>
 801da82:	f507 7311 	add.w	r3, r7, #580	; 0x244
 801da86:	681b      	ldr	r3, [r3, #0]
 801da88:	425a      	negs	r2, r3
 801da8a:	e000      	b.n	801da8e <arm_nn_mat_mult_kernel_s8_s16+0xb50>
 801da8c:	2200      	movs	r2, #0
 801da8e:	f507 730d 	add.w	r3, r7, #564	; 0x234
 801da92:	6019      	str	r1, [r3, #0]
 801da94:	f507 730c 	add.w	r3, r7, #560	; 0x230
 801da98:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801da9a:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 801da9e:	2200      	movs	r2, #0
 801daa0:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801daa2:	f507 730c 	add.w	r3, r7, #560	; 0x230
 801daa6:	2201      	movs	r2, #1
 801daa8:	681b      	ldr	r3, [r3, #0]
 801daaa:	fa02 f303 	lsl.w	r3, r2, r3
 801daae:	f507 720a 	add.w	r2, r7, #552	; 0x228
 801dab2:	3b01      	subs	r3, #1
 801dab4:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 801dab6:	f507 7109 	add.w	r1, r7, #548	; 0x224
 801daba:	f507 720d 	add.w	r2, r7, #564	; 0x234
 801dabe:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801dac2:	6812      	ldr	r2, [r2, #0]
 801dac4:	681b      	ldr	r3, [r3, #0]
 801dac6:	4013      	ands	r3, r2
 801dac8:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 801daca:	f507 710b 	add.w	r1, r7, #556	; 0x22c
 801dace:	f507 720d 	add.w	r2, r7, #564	; 0x234
 801dad2:	f507 730c 	add.w	r3, r7, #560	; 0x230
 801dad6:	6812      	ldr	r2, [r2, #0]
 801dad8:	681b      	ldr	r3, [r3, #0]
 801dada:	fa42 f303 	asr.w	r3, r2, r3
 801dade:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 801dae0:	f507 7208 	add.w	r2, r7, #544	; 0x220
 801dae4:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801dae8:	681b      	ldr	r3, [r3, #0]
 801daea:	105b      	asrs	r3, r3, #1
 801daec:	6013      	str	r3, [r2, #0]
    if (result < 0)
 801daee:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 801daf2:	681b      	ldr	r3, [r3, #0]
 801daf4:	2b00      	cmp	r3, #0
 801daf6:	da06      	bge.n	801db06 <arm_nn_mat_mult_kernel_s8_s16+0xbc8>
        threshold++;
 801daf8:	f507 7208 	add.w	r2, r7, #544	; 0x220
 801dafc:	f507 7308 	add.w	r3, r7, #544	; 0x220
 801db00:	681b      	ldr	r3, [r3, #0]
 801db02:	3301      	adds	r3, #1
 801db04:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 801db06:	f507 7309 	add.w	r3, r7, #548	; 0x224
 801db0a:	f507 7108 	add.w	r1, r7, #544	; 0x220
 801db0e:	681a      	ldr	r2, [r3, #0]
 801db10:	680b      	ldr	r3, [r1, #0]
 801db12:	429a      	cmp	r2, r3
 801db14:	dd06      	ble.n	801db24 <arm_nn_mat_mult_kernel_s8_s16+0xbe6>
        result++;
 801db16:	f507 720b 	add.w	r2, r7, #556	; 0x22c
 801db1a:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 801db1e:	681b      	ldr	r3, [r3, #0]
 801db20:	3301      	adds	r3, #1
 801db22:	6013      	str	r3, [r2, #0]
    return result;
 801db24:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 801db28:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801db2a:	bf00      	nop
 801db2c:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
        ch_1_out_0 += out_offset;
 801db30:	f8d7 23d0 	ldr.w	r2, [r7, #976]	; 0x3d0
 801db34:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 801db38:	4413      	add	r3, r2
 801db3a:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
        ch_1_out_0 = MAX(ch_1_out_0, activation_min);
 801db3e:	f9b7 3418 	ldrsh.w	r3, [r7, #1048]	; 0x418
 801db42:	f8d7 23d0 	ldr.w	r2, [r7, #976]	; 0x3d0
 801db46:	4293      	cmp	r3, r2
 801db48:	bfb8      	it	lt
 801db4a:	4613      	movlt	r3, r2
 801db4c:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
        ch_1_out_0 = MIN(ch_1_out_0, activation_max);
 801db50:	f9b7 341c 	ldrsh.w	r3, [r7, #1052]	; 0x41c
 801db54:	f8d7 23d0 	ldr.w	r2, [r7, #976]	; 0x3d0
 801db58:	4293      	cmp	r3, r2
 801db5a:	bfa8      	it	ge
 801db5c:	4613      	movge	r3, r2
 801db5e:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
        *out_0++ = (q7_t)ch_1_out_0;
 801db62:	f8d7 2428 	ldr.w	r2, [r7, #1064]	; 0x428
 801db66:	1c53      	adds	r3, r2, #1
 801db68:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
 801db6c:	f8d7 33d0 	ldr.w	r3, [r7, #976]	; 0x3d0
 801db70:	b25b      	sxtb	r3, r3
 801db72:	7013      	strb	r3, [r2, #0]

        ch_1_out_1 = arm_nn_requantize(ch_1_out_1, *out_mult, *out_shift);
 801db74:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 801db78:	6818      	ldr	r0, [r3, #0]
 801db7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801db7e:	681b      	ldr	r3, [r3, #0]
 801db80:	6819      	ldr	r1, [r3, #0]
 801db82:	f507 721f 	add.w	r2, r7, #636	; 0x27c
 801db86:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 801db8a:	6013      	str	r3, [r2, #0]
 801db8c:	f507 731e 	add.w	r3, r7, #632	; 0x278
 801db90:	6018      	str	r0, [r3, #0]
 801db92:	f507 731d 	add.w	r3, r7, #628	; 0x274
 801db96:	6019      	str	r1, [r3, #0]
 801db98:	f507 731d 	add.w	r3, r7, #628	; 0x274
 801db9c:	681b      	ldr	r3, [r3, #0]
 801db9e:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 801dba2:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 801dba6:	681b      	ldr	r3, [r3, #0]
 801dba8:	fa03 f202 	lsl.w	r2, r3, r2
 801dbac:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801dbb0:	601a      	str	r2, [r3, #0]
 801dbb2:	f507 721b 	add.w	r2, r7, #620	; 0x26c
 801dbb6:	f507 731e 	add.w	r3, r7, #632	; 0x278
 801dbba:	681b      	ldr	r3, [r3, #0]
 801dbbc:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801dbbe:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801dbc2:	2200      	movs	r2, #0
 801dbc4:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 801dbc6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801dbca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801dbce:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 801dbd0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801dbd4:	2200      	movs	r2, #0
 801dbd6:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801dbd8:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 801dbdc:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801dbe0:	681b      	ldr	r3, [r3, #0]
 801dbe2:	4618      	mov	r0, r3
 801dbe4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801dbe8:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 801dbec:	681b      	ldr	r3, [r3, #0]
 801dbee:	461a      	mov	r2, r3
 801dbf0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801dbf4:	fb02 f501 	mul.w	r5, r2, r1
 801dbf8:	fb00 f403 	mul.w	r4, r0, r3
 801dbfc:	442c      	add	r4, r5
 801dbfe:	fba0 2302 	umull	r2, r3, r0, r2
 801dc02:	18e1      	adds	r1, r4, r3
 801dc04:	460b      	mov	r3, r1
 801dc06:	eb18 0102 	adds.w	r1, r8, r2
 801dc0a:	6239      	str	r1, [r7, #32]
 801dc0c:	eb49 0303 	adc.w	r3, r9, r3
 801dc10:	627b      	str	r3, [r7, #36]	; 0x24
 801dc12:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 801dc16:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
    result = (int32_t)(mult.long_long >> 31);
 801dc1a:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 801dc1e:	f04f 0000 	mov.w	r0, #0
 801dc22:	f04f 0100 	mov.w	r1, #0
 801dc26:	0fd0      	lsrs	r0, r2, #31
 801dc28:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801dc2c:	17d9      	asrs	r1, r3, #31
 801dc2e:	f507 721a 	add.w	r2, r7, #616	; 0x268
 801dc32:	4603      	mov	r3, r0
 801dc34:	6013      	str	r3, [r2, #0]
    return result;
 801dc36:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801dc3a:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801dc3c:	f507 731d 	add.w	r3, r7, #628	; 0x274
 801dc40:	681b      	ldr	r3, [r3, #0]
 801dc42:	2b00      	cmp	r3, #0
 801dc44:	dc04      	bgt.n	801dc50 <arm_nn_mat_mult_kernel_s8_s16+0xd12>
 801dc46:	f507 731d 	add.w	r3, r7, #628	; 0x274
 801dc4a:	681b      	ldr	r3, [r3, #0]
 801dc4c:	425a      	negs	r2, r3
 801dc4e:	e000      	b.n	801dc52 <arm_nn_mat_mult_kernel_s8_s16+0xd14>
 801dc50:	2200      	movs	r2, #0
 801dc52:	f507 7319 	add.w	r3, r7, #612	; 0x264
 801dc56:	6019      	str	r1, [r3, #0]
 801dc58:	f507 7318 	add.w	r3, r7, #608	; 0x260
 801dc5c:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801dc5e:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 801dc62:	2200      	movs	r2, #0
 801dc64:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801dc66:	f507 7318 	add.w	r3, r7, #608	; 0x260
 801dc6a:	2201      	movs	r2, #1
 801dc6c:	681b      	ldr	r3, [r3, #0]
 801dc6e:	fa02 f303 	lsl.w	r3, r2, r3
 801dc72:	f507 7216 	add.w	r2, r7, #600	; 0x258
 801dc76:	3b01      	subs	r3, #1
 801dc78:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 801dc7a:	f507 7115 	add.w	r1, r7, #596	; 0x254
 801dc7e:	f507 7219 	add.w	r2, r7, #612	; 0x264
 801dc82:	f507 7316 	add.w	r3, r7, #600	; 0x258
 801dc86:	6812      	ldr	r2, [r2, #0]
 801dc88:	681b      	ldr	r3, [r3, #0]
 801dc8a:	4013      	ands	r3, r2
 801dc8c:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 801dc8e:	f507 7117 	add.w	r1, r7, #604	; 0x25c
 801dc92:	f507 7219 	add.w	r2, r7, #612	; 0x264
 801dc96:	f507 7318 	add.w	r3, r7, #608	; 0x260
 801dc9a:	6812      	ldr	r2, [r2, #0]
 801dc9c:	681b      	ldr	r3, [r3, #0]
 801dc9e:	fa42 f303 	asr.w	r3, r2, r3
 801dca2:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 801dca4:	f507 7214 	add.w	r2, r7, #592	; 0x250
 801dca8:	f507 7316 	add.w	r3, r7, #600	; 0x258
 801dcac:	681b      	ldr	r3, [r3, #0]
 801dcae:	105b      	asrs	r3, r3, #1
 801dcb0:	6013      	str	r3, [r2, #0]
    if (result < 0)
 801dcb2:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 801dcb6:	681b      	ldr	r3, [r3, #0]
 801dcb8:	2b00      	cmp	r3, #0
 801dcba:	da06      	bge.n	801dcca <arm_nn_mat_mult_kernel_s8_s16+0xd8c>
        threshold++;
 801dcbc:	f507 7214 	add.w	r2, r7, #592	; 0x250
 801dcc0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 801dcc4:	681b      	ldr	r3, [r3, #0]
 801dcc6:	3301      	adds	r3, #1
 801dcc8:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 801dcca:	f507 7315 	add.w	r3, r7, #596	; 0x254
 801dcce:	f507 7114 	add.w	r1, r7, #592	; 0x250
 801dcd2:	681a      	ldr	r2, [r3, #0]
 801dcd4:	680b      	ldr	r3, [r1, #0]
 801dcd6:	429a      	cmp	r2, r3
 801dcd8:	dd06      	ble.n	801dce8 <arm_nn_mat_mult_kernel_s8_s16+0xdaa>
        result++;
 801dcda:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 801dcde:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 801dce2:	681b      	ldr	r3, [r3, #0]
 801dce4:	3301      	adds	r3, #1
 801dce6:	6013      	str	r3, [r2, #0]
    return result;
 801dce8:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 801dcec:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801dcee:	bf00      	nop
 801dcf0:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
        ch_1_out_1 += out_offset;
 801dcf4:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 801dcf8:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 801dcfc:	4413      	add	r3, r2
 801dcfe:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
        ch_1_out_1 = MAX(ch_1_out_1, activation_min);
 801dd02:	f9b7 3418 	ldrsh.w	r3, [r7, #1048]	; 0x418
 801dd06:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 801dd0a:	4293      	cmp	r3, r2
 801dd0c:	bfb8      	it	lt
 801dd0e:	4613      	movlt	r3, r2
 801dd10:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
        ch_1_out_1 = MIN(ch_1_out_1, activation_max);
 801dd14:	f9b7 341c 	ldrsh.w	r3, [r7, #1052]	; 0x41c
 801dd18:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 801dd1c:	4293      	cmp	r3, r2
 801dd1e:	bfa8      	it	ge
 801dd20:	4613      	movge	r3, r2
 801dd22:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
        *out_1++ = (q7_t)ch_1_out_1;
 801dd26:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	; 0x3ec
 801dd2a:	1c53      	adds	r3, r2, #1
 801dd2c:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
 801dd30:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 801dd34:	b25b      	sxtb	r3, r3
 801dd36:	7013      	strb	r3, [r2, #0]
        out_mult++;
 801dd38:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 801dd3c:	3304      	adds	r3, #4
 801dd3e:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
        out_shift++;
 801dd42:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801dd46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801dd4a:	681b      	ldr	r3, [r3, #0]
 801dd4c:	3304      	adds	r3, #4
 801dd4e:	6013      	str	r3, [r2, #0]

        /* skip row */
        ip_a0 += num_col_a;
 801dd50:	f8b7 3420 	ldrh.w	r3, [r7, #1056]	; 0x420
 801dd54:	f8d7 23e0 	ldr.w	r2, [r7, #992]	; 0x3e0
 801dd58:	4413      	add	r3, r2
 801dd5a:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
        row_count--;
 801dd5e:	f8b7 33e6 	ldrh.w	r3, [r7, #998]	; 0x3e6
 801dd62:	3b01      	subs	r3, #1
 801dd64:	f8a7 33e6 	strh.w	r3, [r7, #998]	; 0x3e6
    while (row_count)
 801dd68:	f8b7 33e6 	ldrh.w	r3, [r7, #998]	; 0x3e6
 801dd6c:	2b00      	cmp	r3, #0
 801dd6e:	f47f a912 	bne.w	801cf96 <arm_nn_mat_mult_kernel_s8_s16+0x58>
    }

    /* compute the last odd numbered row if any */
    if (output_ch & 0x1)
 801dd72:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 801dd76:	881b      	ldrh	r3, [r3, #0]
 801dd78:	f003 0301 	and.w	r3, r3, #1
 801dd7c:	2b00      	cmp	r3, #0
 801dd7e:	f000 83ed 	beq.w	801e55c <arm_nn_mat_mult_kernel_s8_s16+0x161e>
    {
        /* setup pointers for B */
        const q15_t *ip_b0 = input_b;
 801dd82:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801dd86:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801dd8a:	6812      	ldr	r2, [r2, #0]
 801dd8c:	601a      	str	r2, [r3, #0]
        const q15_t *ip_b1 = ip_b0 + num_col_a;
 801dd8e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801dd92:	681a      	ldr	r2, [r3, #0]
 801dd94:	f8b7 3420 	ldrh.w	r3, [r7, #1056]	; 0x420
 801dd98:	005b      	lsls	r3, r3, #1
 801dd9a:	441a      	add	r2, r3
 801dd9c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801dda0:	601a      	str	r2, [r3, #0]

        /* load the bias */
        q31_t ch_0_out_0 = *bias;
 801dda2:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	; 0x3e8
 801dda6:	681b      	ldr	r3, [r3, #0]
 801dda8:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
        q31_t ch_0_out_1 = *bias++;
 801ddac:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	; 0x3e8
 801ddb0:	1d1a      	adds	r2, r3, #4
 801ddb2:	f8c7 23e8 	str.w	r2, [r7, #1000]	; 0x3e8
 801ddb6:	681b      	ldr	r3, [r3, #0]
 801ddb8:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0

        uint16_t col_count = num_col_a >> 2;
 801ddbc:	f8b7 3420 	ldrh.w	r3, [r7, #1056]	; 0x420
 801ddc0:	089b      	lsrs	r3, r3, #2
 801ddc2:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
        while (col_count)
 801ddc6:	e1bb      	b.n	801e140 <arm_nn_mat_mult_kernel_s8_s16+0x1202>
 801ddc8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801ddcc:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 801ddd0:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q15, 4);
 801ddd2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801ddd6:	681b      	ldr	r3, [r3, #0]
 801ddd8:	681b      	ldr	r3, [r3, #0]
 801ddda:	681b      	ldr	r3, [r3, #0]
 801dddc:	461a      	mov	r2, r3
 801ddde:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801dde2:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 801dde4:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801dde8:	681b      	ldr	r3, [r3, #0]
 801ddea:	681b      	ldr	r3, [r3, #0]
 801ddec:	1d1a      	adds	r2, r3, #4
 801ddee:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801ddf2:	681b      	ldr	r3, [r3, #0]
 801ddf4:	601a      	str	r2, [r3, #0]
    return (val);
 801ddf6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801ddfa:	681b      	ldr	r3, [r3, #0]
        {
            q31_t a01, a02;
            q31_t b0 = arm_nn_read_q15x2_ia(&ip_b0);
 801ddfc:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
 801de00:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 801de04:	f107 0268 	add.w	r2, r7, #104	; 0x68
 801de08:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q15, 4);
 801de0a:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 801de0e:	681b      	ldr	r3, [r3, #0]
 801de10:	681b      	ldr	r3, [r3, #0]
 801de12:	681b      	ldr	r3, [r3, #0]
 801de14:	461a      	mov	r2, r3
 801de16:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801de1a:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 801de1c:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 801de20:	681b      	ldr	r3, [r3, #0]
 801de22:	681b      	ldr	r3, [r3, #0]
 801de24:	1d1a      	adds	r2, r3, #4
 801de26:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 801de2a:	681b      	ldr	r3, [r3, #0]
 801de2c:	601a      	str	r2, [r3, #0]
    return (val);
 801de2e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801de32:	681b      	ldr	r3, [r3, #0]
            q31_t b1 = arm_nn_read_q15x2_ia(&ip_b1);
 801de34:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
 801de38:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801de3c:	f8d7 23e0 	ldr.w	r2, [r7, #992]	; 0x3e0
 801de40:	601a      	str	r2, [r3, #0]
 801de42:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 801de46:	f107 0254 	add.w	r2, r7, #84	; 0x54
 801de4a:	601a      	str	r2, [r3, #0]
 801de4c:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 801de50:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801de54:	601a      	str	r2, [r3, #0]
 801de56:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 801de5a:	f107 0244 	add.w	r2, r7, #68	; 0x44
 801de5e:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 801de60:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 801de64:	681b      	ldr	r3, [r3, #0]
 801de66:	681b      	ldr	r3, [r3, #0]
 801de68:	681b      	ldr	r3, [r3, #0]
 801de6a:	461a      	mov	r2, r3
 801de6c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801de70:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801de72:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 801de76:	681b      	ldr	r3, [r3, #0]
 801de78:	681b      	ldr	r3, [r3, #0]
 801de7a:	1d1a      	adds	r2, r3, #4
 801de7c:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 801de80:	681b      	ldr	r3, [r3, #0]
 801de82:	601a      	str	r2, [r3, #0]
    return (val);
 801de84:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801de88:	681a      	ldr	r2, [r3, #0]
    q31_t inA = arm_nn_read_q7x4_ia(&source);
 801de8a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 801de8e:	601a      	str	r2, [r3, #0]
    q31_t inAbuf1 = __SXTB16(__ROR((uint32_t)inA, 8));
 801de90:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 801de94:	681a      	ldr	r2, [r3, #0]
 801de96:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 801de9a:	601a      	str	r2, [r3, #0]
 801de9c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 801dea0:	2208      	movs	r2, #8
 801dea2:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 801dea4:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 801dea8:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 801deac:	6812      	ldr	r2, [r2, #0]
 801deae:	f002 021f 	and.w	r2, r2, #31
 801deb2:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 801deb4:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 801deb8:	681b      	ldr	r3, [r3, #0]
 801deba:	2b00      	cmp	r3, #0
 801debc:	d103      	bne.n	801dec6 <arm_nn_mat_mult_kernel_s8_s16+0xf88>
    return op1;
 801debe:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 801dec2:	681b      	ldr	r3, [r3, #0]
 801dec4:	e007      	b.n	801ded6 <arm_nn_mat_mult_kernel_s8_s16+0xf98>
  return (op1 >> op2) | (op1 << (32U - op2));
 801dec6:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 801deca:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 801dece:	6812      	ldr	r2, [r2, #0]
 801ded0:	681b      	ldr	r3, [r3, #0]
 801ded2:	fa62 f303 	ror.w	r3, r2, r3
 801ded6:	f507 72ae 	add.w	r2, r7, #348	; 0x15c
 801deda:	6013      	str	r3, [r2, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801dedc:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 801dee0:	681b      	ldr	r3, [r3, #0]
 801dee2:	fa2f f283 	sxtb16	r2, r3
 801dee6:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 801deea:	601a      	str	r2, [r3, #0]
  return(result);
 801deec:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 801def0:	681a      	ldr	r2, [r3, #0]
 801def2:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 801def6:	601a      	str	r2, [r3, #0]
    q31_t inAbuf2 = __SXTB16(inA);
 801def8:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 801defc:	681a      	ldr	r2, [r3, #0]
 801defe:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 801df02:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801df04:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 801df08:	681b      	ldr	r3, [r3, #0]
 801df0a:	fa2f f283 	sxtb16	r2, r3
 801df0e:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 801df12:	601a      	str	r2, [r3, #0]
  return(result);
 801df14:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 801df18:	681a      	ldr	r2, [r3, #0]
 801df1a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 801df1e:	601a      	str	r2, [r3, #0]
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 801df20:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 801df24:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 801df28:	6812      	ldr	r2, [r2, #0]
 801df2a:	601a      	str	r2, [r3, #0]
 801df2c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801df30:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 801df34:	6812      	ldr	r2, [r2, #0]
 801df36:	601a      	str	r2, [r3, #0]
 801df38:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 801df3c:	681b      	ldr	r3, [r3, #0]
 801df3e:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 801df42:	6812      	ldr	r2, [r2, #0]
 801df44:	eac3 4222 	pkhtb	r2, r3, r2, asr #16
 801df48:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 801df4c:	601a      	str	r2, [r3, #0]
 801df4e:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 801df52:	681b      	ldr	r3, [r3, #0]
 801df54:	461a      	mov	r2, r3
 801df56:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 801df5a:	681b      	ldr	r3, [r3, #0]
 801df5c:	601a      	str	r2, [r3, #0]
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 801df5e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801df62:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 801df66:	6812      	ldr	r2, [r2, #0]
 801df68:	601a      	str	r2, [r3, #0]
 801df6a:	f507 739a 	add.w	r3, r7, #308	; 0x134
 801df6e:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 801df72:	6812      	ldr	r2, [r2, #0]
 801df74:	601a      	str	r2, [r3, #0]
 801df76:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801df7a:	681b      	ldr	r3, [r3, #0]
 801df7c:	f507 729a 	add.w	r2, r7, #308	; 0x134
 801df80:	6812      	ldr	r2, [r2, #0]
 801df82:	eac3 4202 	pkhbt	r2, r3, r2, lsl #16
 801df86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801df8a:	601a      	str	r2, [r3, #0]
 801df8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801df90:	681b      	ldr	r3, [r3, #0]
 801df92:	461a      	mov	r2, r3
 801df94:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 801df98:	681b      	ldr	r3, [r3, #0]
 801df9a:	601a      	str	r2, [r3, #0]
    return source;
 801df9c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801dfa0:	681b      	ldr	r3, [r3, #0]

            ip_a0 = read_and_pad(ip_a0, &a01, &a02);
 801dfa2:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0

            ch_0_out_0 = __SMLAD(a01, b0, ch_0_out_0);
 801dfa6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801dfaa:	681b      	ldr	r3, [r3, #0]
 801dfac:	4618      	mov	r0, r3
 801dfae:	f8d7 13b4 	ldr.w	r1, [r7, #948]	; 0x3b4
 801dfb2:	f8d7 23c4 	ldr.w	r2, [r7, #964]	; 0x3c4
 801dfb6:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 801dfba:	6018      	str	r0, [r3, #0]
 801dfbc:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 801dfc0:	6019      	str	r1, [r3, #0]
 801dfc2:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 801dfc6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801dfc8:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 801dfcc:	681b      	ldr	r3, [r3, #0]
 801dfce:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 801dfd2:	6812      	ldr	r2, [r2, #0]
 801dfd4:	f507 71be 	add.w	r1, r7, #380	; 0x17c
 801dfd8:	6809      	ldr	r1, [r1, #0]
 801dfda:	fb23 1202 	smlad	r2, r3, r2, r1
 801dfde:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 801dfe2:	601a      	str	r2, [r3, #0]
  return(result);
 801dfe4:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 801dfe8:	681b      	ldr	r3, [r3, #0]
 801dfea:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
            ch_0_out_1 = __SMLAD(a01, b1, ch_0_out_1);
 801dfee:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801dff2:	681b      	ldr	r3, [r3, #0]
 801dff4:	4618      	mov	r0, r3
 801dff6:	f8d7 13b0 	ldr.w	r1, [r7, #944]	; 0x3b0
 801dffa:	f8d7 23c0 	ldr.w	r2, [r7, #960]	; 0x3c0
 801dffe:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 801e002:	6018      	str	r0, [r3, #0]
 801e004:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 801e008:	6019      	str	r1, [r3, #0]
 801e00a:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 801e00e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801e010:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 801e014:	681b      	ldr	r3, [r3, #0]
 801e016:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 801e01a:	6812      	ldr	r2, [r2, #0]
 801e01c:	f507 71c6 	add.w	r1, r7, #396	; 0x18c
 801e020:	6809      	ldr	r1, [r1, #0]
 801e022:	fb23 1202 	smlad	r2, r3, r2, r1
 801e026:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 801e02a:	601a      	str	r2, [r3, #0]
  return(result);
 801e02c:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 801e030:	681b      	ldr	r3, [r3, #0]
 801e032:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
 801e036:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 801e03a:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 801e03e:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q15, 4);
 801e040:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 801e044:	681b      	ldr	r3, [r3, #0]
 801e046:	681b      	ldr	r3, [r3, #0]
 801e048:	681b      	ldr	r3, [r3, #0]
 801e04a:	461a      	mov	r2, r3
 801e04c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801e050:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 801e052:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 801e056:	681b      	ldr	r3, [r3, #0]
 801e058:	681b      	ldr	r3, [r3, #0]
 801e05a:	1d1a      	adds	r2, r3, #4
 801e05c:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 801e060:	681b      	ldr	r3, [r3, #0]
 801e062:	601a      	str	r2, [r3, #0]
    return (val);
 801e064:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801e068:	681b      	ldr	r3, [r3, #0]

            b0 = arm_nn_read_q15x2_ia(&ip_b0);
 801e06a:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
 801e06e:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 801e072:	f107 0268 	add.w	r2, r7, #104	; 0x68
 801e076:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q15, 4);
 801e078:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 801e07c:	681b      	ldr	r3, [r3, #0]
 801e07e:	681b      	ldr	r3, [r3, #0]
 801e080:	681b      	ldr	r3, [r3, #0]
 801e082:	461a      	mov	r2, r3
 801e084:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801e088:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 801e08a:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 801e08e:	681b      	ldr	r3, [r3, #0]
 801e090:	681b      	ldr	r3, [r3, #0]
 801e092:	1d1a      	adds	r2, r3, #4
 801e094:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 801e098:	681b      	ldr	r3, [r3, #0]
 801e09a:	601a      	str	r2, [r3, #0]
    return (val);
 801e09c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801e0a0:	681b      	ldr	r3, [r3, #0]
            b1 = arm_nn_read_q15x2_ia(&ip_b1);
 801e0a2:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
            ch_0_out_0 = __SMLAD(a02, b0, ch_0_out_0);
 801e0a6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801e0aa:	681b      	ldr	r3, [r3, #0]
 801e0ac:	4618      	mov	r0, r3
 801e0ae:	f8d7 13b4 	ldr.w	r1, [r7, #948]	; 0x3b4
 801e0b2:	f8d7 23c4 	ldr.w	r2, [r7, #964]	; 0x3c4
 801e0b6:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 801e0ba:	6018      	str	r0, [r3, #0]
 801e0bc:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 801e0c0:	6019      	str	r1, [r3, #0]
 801e0c2:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 801e0c6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801e0c8:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 801e0cc:	681b      	ldr	r3, [r3, #0]
 801e0ce:	f507 72d4 	add.w	r2, r7, #424	; 0x1a8
 801e0d2:	6812      	ldr	r2, [r2, #0]
 801e0d4:	f507 71d2 	add.w	r1, r7, #420	; 0x1a4
 801e0d8:	6809      	ldr	r1, [r1, #0]
 801e0da:	fb23 1202 	smlad	r2, r3, r2, r1
 801e0de:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 801e0e2:	601a      	str	r2, [r3, #0]
  return(result);
 801e0e4:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 801e0e8:	681b      	ldr	r3, [r3, #0]
 801e0ea:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
            ch_0_out_1 = __SMLAD(a02, b1, ch_0_out_1);
 801e0ee:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801e0f2:	681b      	ldr	r3, [r3, #0]
 801e0f4:	4618      	mov	r0, r3
 801e0f6:	f8d7 13b0 	ldr.w	r1, [r7, #944]	; 0x3b0
 801e0fa:	f8d7 23c0 	ldr.w	r2, [r7, #960]	; 0x3c0
 801e0fe:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 801e102:	6018      	str	r0, [r3, #0]
 801e104:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 801e108:	6019      	str	r1, [r3, #0]
 801e10a:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 801e10e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801e110:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 801e114:	681b      	ldr	r3, [r3, #0]
 801e116:	f507 72dc 	add.w	r2, r7, #440	; 0x1b8
 801e11a:	6812      	ldr	r2, [r2, #0]
 801e11c:	f507 71da 	add.w	r1, r7, #436	; 0x1b4
 801e120:	6809      	ldr	r1, [r1, #0]
 801e122:	fb23 1202 	smlad	r2, r3, r2, r1
 801e126:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 801e12a:	601a      	str	r2, [r3, #0]
  return(result);
 801e12c:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 801e130:	681b      	ldr	r3, [r3, #0]
 801e132:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0

            col_count--;
 801e136:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 801e13a:	3b01      	subs	r3, #1
 801e13c:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
        while (col_count)
 801e140:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 801e144:	2b00      	cmp	r3, #0
 801e146:	f47f ae3f 	bne.w	801ddc8 <arm_nn_mat_mult_kernel_s8_s16+0xe8a>
        }
        col_count = num_col_a & 0x3;
 801e14a:	f8b7 3420 	ldrh.w	r3, [r7, #1056]	; 0x420
 801e14e:	f003 0303 	and.w	r3, r3, #3
 801e152:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
        while (col_count)
 801e156:	e036      	b.n	801e1c6 <arm_nn_mat_mult_kernel_s8_s16+0x1288>
        {
            q7_t a0 = *ip_a0++;
 801e158:	f8d7 33e0 	ldr.w	r3, [r7, #992]	; 0x3e0
 801e15c:	1c5a      	adds	r2, r3, #1
 801e15e:	f8c7 23e0 	str.w	r2, [r7, #992]	; 0x3e0
 801e162:	781b      	ldrb	r3, [r3, #0]
 801e164:	f887 33bd 	strb.w	r3, [r7, #957]	; 0x3bd
            q15_t b0 = *ip_b0++;
 801e168:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801e16c:	681b      	ldr	r3, [r3, #0]
 801e16e:	1c99      	adds	r1, r3, #2
 801e170:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 801e174:	6011      	str	r1, [r2, #0]
 801e176:	881b      	ldrh	r3, [r3, #0]
 801e178:	f8a7 33ba 	strh.w	r3, [r7, #954]	; 0x3ba
            q15_t b1 = *ip_b1++;
 801e17c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801e180:	681b      	ldr	r3, [r3, #0]
 801e182:	1c99      	adds	r1, r3, #2
 801e184:	f107 0268 	add.w	r2, r7, #104	; 0x68
 801e188:	6011      	str	r1, [r2, #0]
 801e18a:	881b      	ldrh	r3, [r3, #0]
 801e18c:	f8a7 33b8 	strh.w	r3, [r7, #952]	; 0x3b8

            ch_0_out_0 += a0 * b0;
 801e190:	f997 33bd 	ldrsb.w	r3, [r7, #957]	; 0x3bd
 801e194:	f9b7 23ba 	ldrsh.w	r2, [r7, #954]	; 0x3ba
 801e198:	fb02 f303 	mul.w	r3, r2, r3
 801e19c:	f8d7 23c4 	ldr.w	r2, [r7, #964]	; 0x3c4
 801e1a0:	4413      	add	r3, r2
 801e1a2:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
            ch_0_out_1 += a0 * b1;
 801e1a6:	f997 33bd 	ldrsb.w	r3, [r7, #957]	; 0x3bd
 801e1aa:	f9b7 23b8 	ldrsh.w	r2, [r7, #952]	; 0x3b8
 801e1ae:	fb02 f303 	mul.w	r3, r2, r3
 801e1b2:	f8d7 23c0 	ldr.w	r2, [r7, #960]	; 0x3c0
 801e1b6:	4413      	add	r3, r2
 801e1b8:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
            col_count--;
 801e1bc:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 801e1c0:	3b01      	subs	r3, #1
 801e1c2:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
        while (col_count)
 801e1c6:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 801e1ca:	2b00      	cmp	r3, #0
 801e1cc:	d1c4      	bne.n	801e158 <arm_nn_mat_mult_kernel_s8_s16+0x121a>
        }
        ch_0_out_0 = arm_nn_requantize(ch_0_out_0, *out_mult, *out_shift);
 801e1ce:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 801e1d2:	6819      	ldr	r1, [r3, #0]
 801e1d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801e1d8:	681b      	ldr	r3, [r3, #0]
 801e1da:	681a      	ldr	r2, [r3, #0]
 801e1dc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 801e1e0:	f8d7 03c4 	ldr.w	r0, [r7, #964]	; 0x3c4
 801e1e4:	6018      	str	r0, [r3, #0]
 801e1e6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801e1ea:	6019      	str	r1, [r3, #0]
 801e1ec:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 801e1f0:	601a      	str	r2, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801e1f2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 801e1f6:	681b      	ldr	r3, [r3, #0]
 801e1f8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e1fc:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 801e200:	6812      	ldr	r2, [r2, #0]
 801e202:	409a      	lsls	r2, r3
 801e204:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801e208:	601a      	str	r2, [r3, #0]
 801e20a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 801e20e:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801e212:	6812      	ldr	r2, [r2, #0]
 801e214:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801e216:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801e21a:	2200      	movs	r2, #0
 801e21c:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 801e21e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801e222:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801e226:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 801e228:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801e22c:	2200      	movs	r2, #0
 801e22e:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801e230:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 801e234:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801e238:	681b      	ldr	r3, [r3, #0]
 801e23a:	4618      	mov	r0, r3
 801e23c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801e240:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 801e244:	681b      	ldr	r3, [r3, #0]
 801e246:	461a      	mov	r2, r3
 801e248:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801e24c:	fb02 fc01 	mul.w	ip, r2, r1
 801e250:	fb00 f603 	mul.w	r6, r0, r3
 801e254:	4466      	add	r6, ip
 801e256:	fba0 2302 	umull	r2, r3, r0, r2
 801e25a:	18f1      	adds	r1, r6, r3
 801e25c:	460b      	mov	r3, r1
 801e25e:	18a1      	adds	r1, r4, r2
 801e260:	6039      	str	r1, [r7, #0]
 801e262:	eb45 0303 	adc.w	r3, r5, r3
 801e266:	607b      	str	r3, [r7, #4]
 801e268:	e9d7 3400 	ldrd	r3, r4, [r7]
 801e26c:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
    result = (int32_t)(mult.long_long >> 31);
 801e270:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 801e274:	f04f 0200 	mov.w	r2, #0
 801e278:	f04f 0300 	mov.w	r3, #0
 801e27c:	0fc2      	lsrs	r2, r0, #31
 801e27e:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801e282:	17cb      	asrs	r3, r1, #31
 801e284:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 801e288:	4613      	mov	r3, r2
 801e28a:	600b      	str	r3, [r1, #0]
    return result;
 801e28c:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801e290:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801e292:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 801e296:	681b      	ldr	r3, [r3, #0]
 801e298:	2b00      	cmp	r3, #0
 801e29a:	dc04      	bgt.n	801e2a6 <arm_nn_mat_mult_kernel_s8_s16+0x1368>
 801e29c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 801e2a0:	681b      	ldr	r3, [r3, #0]
 801e2a2:	425b      	negs	r3, r3
 801e2a4:	e000      	b.n	801e2a8 <arm_nn_mat_mult_kernel_s8_s16+0x136a>
 801e2a6:	2300      	movs	r3, #0
 801e2a8:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 801e2ac:	6011      	str	r1, [r2, #0]
 801e2ae:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 801e2b2:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801e2b4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 801e2b8:	2200      	movs	r2, #0
 801e2ba:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801e2bc:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801e2c0:	2201      	movs	r2, #1
 801e2c2:	681b      	ldr	r3, [r3, #0]
 801e2c4:	409a      	lsls	r2, r3
 801e2c6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801e2ca:	3a01      	subs	r2, #1
 801e2cc:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 801e2ce:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801e2d2:	f107 01dc 	add.w	r1, r7, #220	; 0xdc
 801e2d6:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 801e2da:	6809      	ldr	r1, [r1, #0]
 801e2dc:	6812      	ldr	r2, [r2, #0]
 801e2de:	400a      	ands	r2, r1
 801e2e0:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 801e2e2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 801e2e6:	f107 01dc 	add.w	r1, r7, #220	; 0xdc
 801e2ea:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 801e2ee:	6809      	ldr	r1, [r1, #0]
 801e2f0:	6812      	ldr	r2, [r2, #0]
 801e2f2:	fa41 f202 	asr.w	r2, r1, r2
 801e2f6:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 801e2f8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801e2fc:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 801e300:	6812      	ldr	r2, [r2, #0]
 801e302:	1052      	asrs	r2, r2, #1
 801e304:	601a      	str	r2, [r3, #0]
    if (result < 0)
 801e306:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 801e30a:	681b      	ldr	r3, [r3, #0]
 801e30c:	2b00      	cmp	r3, #0
 801e30e:	da06      	bge.n	801e31e <arm_nn_mat_mult_kernel_s8_s16+0x13e0>
        threshold++;
 801e310:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801e314:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 801e318:	6812      	ldr	r2, [r2, #0]
 801e31a:	3201      	adds	r2, #1
 801e31c:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 801e31e:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 801e322:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801e326:	6812      	ldr	r2, [r2, #0]
 801e328:	681b      	ldr	r3, [r3, #0]
 801e32a:	429a      	cmp	r2, r3
 801e32c:	dd06      	ble.n	801e33c <arm_nn_mat_mult_kernel_s8_s16+0x13fe>
        result++;
 801e32e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 801e332:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 801e336:	6812      	ldr	r2, [r2, #0]
 801e338:	3201      	adds	r2, #1
 801e33a:	601a      	str	r2, [r3, #0]
    return result;
 801e33c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 801e340:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801e342:	bf00      	nop
 801e344:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
        ch_0_out_0 += out_offset;
 801e348:	f8d7 23c4 	ldr.w	r2, [r7, #964]	; 0x3c4
 801e34c:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 801e350:	4413      	add	r3, r2
 801e352:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
        ch_0_out_0 = MAX(ch_0_out_0, activation_min);
 801e356:	f9b7 3418 	ldrsh.w	r3, [r7, #1048]	; 0x418
 801e35a:	f8d7 23c4 	ldr.w	r2, [r7, #964]	; 0x3c4
 801e35e:	4293      	cmp	r3, r2
 801e360:	bfb8      	it	lt
 801e362:	4613      	movlt	r3, r2
 801e364:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 801e368:	f9b7 341c 	ldrsh.w	r3, [r7, #1052]	; 0x41c
 801e36c:	f8d7 23c4 	ldr.w	r2, [r7, #964]	; 0x3c4
 801e370:	4293      	cmp	r3, r2
 801e372:	bfa8      	it	ge
 801e374:	4613      	movge	r3, r2
 801e376:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
        *out_0++ = (q7_t)ch_0_out_0;
 801e37a:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 801e37e:	1c5a      	adds	r2, r3, #1
 801e380:	f8c7 2428 	str.w	r2, [r7, #1064]	; 0x428
 801e384:	f8d7 23c4 	ldr.w	r2, [r7, #964]	; 0x3c4
 801e388:	b252      	sxtb	r2, r2
 801e38a:	701a      	strb	r2, [r3, #0]

        ch_0_out_1 = arm_nn_requantize(ch_0_out_1, *out_mult, *out_shift);
 801e38c:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 801e390:	6819      	ldr	r1, [r3, #0]
 801e392:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801e396:	681b      	ldr	r3, [r3, #0]
 801e398:	681a      	ldr	r2, [r3, #0]
 801e39a:	f507 7392 	add.w	r3, r7, #292	; 0x124
 801e39e:	f8d7 03c0 	ldr.w	r0, [r7, #960]	; 0x3c0
 801e3a2:	6018      	str	r0, [r3, #0]
 801e3a4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801e3a8:	6019      	str	r1, [r3, #0]
 801e3aa:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 801e3ae:	601a      	str	r2, [r3, #0]
 801e3b0:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 801e3b4:	681b      	ldr	r3, [r3, #0]
 801e3b6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e3ba:	f507 7292 	add.w	r2, r7, #292	; 0x124
 801e3be:	6812      	ldr	r2, [r2, #0]
 801e3c0:	409a      	lsls	r2, r3
 801e3c2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801e3c6:	601a      	str	r2, [r3, #0]
 801e3c8:	f507 738a 	add.w	r3, r7, #276	; 0x114
 801e3cc:	f507 7290 	add.w	r2, r7, #288	; 0x120
 801e3d0:	6812      	ldr	r2, [r2, #0]
 801e3d2:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801e3d4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801e3d8:	2200      	movs	r2, #0
 801e3da:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 801e3dc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801e3e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801e3e4:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 801e3e6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801e3ea:	2200      	movs	r2, #0
 801e3ec:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801e3ee:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 801e3f2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801e3f6:	681b      	ldr	r3, [r3, #0]
 801e3f8:	4618      	mov	r0, r3
 801e3fa:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801e3fe:	f507 738a 	add.w	r3, r7, #276	; 0x114
 801e402:	681b      	ldr	r3, [r3, #0]
 801e404:	461a      	mov	r2, r3
 801e406:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801e40a:	fb02 fc01 	mul.w	ip, r2, r1
 801e40e:	fb00 f603 	mul.w	r6, r0, r3
 801e412:	4466      	add	r6, ip
 801e414:	fba0 2302 	umull	r2, r3, r0, r2
 801e418:	18f1      	adds	r1, r6, r3
 801e41a:	460b      	mov	r3, r1
 801e41c:	eb14 0a02 	adds.w	sl, r4, r2
 801e420:	eb45 0b03 	adc.w	fp, r5, r3
 801e424:	e9c7 ab16 	strd	sl, fp, [r7, #88]	; 0x58
    result = (int32_t)(mult.long_long >> 31);
 801e428:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 801e42c:	f04f 0200 	mov.w	r2, #0
 801e430:	f04f 0300 	mov.w	r3, #0
 801e434:	0fc2      	lsrs	r2, r0, #31
 801e436:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801e43a:	17cb      	asrs	r3, r1, #31
 801e43c:	f507 7188 	add.w	r1, r7, #272	; 0x110
 801e440:	4613      	mov	r3, r2
 801e442:	600b      	str	r3, [r1, #0]
    return result;
 801e444:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801e448:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801e44a:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 801e44e:	681b      	ldr	r3, [r3, #0]
 801e450:	2b00      	cmp	r3, #0
 801e452:	dc04      	bgt.n	801e45e <arm_nn_mat_mult_kernel_s8_s16+0x1520>
 801e454:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 801e458:	681b      	ldr	r3, [r3, #0]
 801e45a:	425b      	negs	r3, r3
 801e45c:	e000      	b.n	801e460 <arm_nn_mat_mult_kernel_s8_s16+0x1522>
 801e45e:	2300      	movs	r3, #0
 801e460:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 801e464:	6011      	str	r1, [r2, #0]
 801e466:	f507 7284 	add.w	r2, r7, #264	; 0x108
 801e46a:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801e46c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 801e470:	2200      	movs	r2, #0
 801e472:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801e474:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801e478:	2201      	movs	r2, #1
 801e47a:	681b      	ldr	r3, [r3, #0]
 801e47c:	409a      	lsls	r2, r3
 801e47e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 801e482:	3a01      	subs	r2, #1
 801e484:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 801e486:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 801e48a:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 801e48e:	f507 7280 	add.w	r2, r7, #256	; 0x100
 801e492:	6809      	ldr	r1, [r1, #0]
 801e494:	6812      	ldr	r2, [r2, #0]
 801e496:	400a      	ands	r2, r1
 801e498:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 801e49a:	f507 7382 	add.w	r3, r7, #260	; 0x104
 801e49e:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 801e4a2:	f507 7284 	add.w	r2, r7, #264	; 0x108
 801e4a6:	6809      	ldr	r1, [r1, #0]
 801e4a8:	6812      	ldr	r2, [r2, #0]
 801e4aa:	fa41 f202 	asr.w	r2, r1, r2
 801e4ae:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 801e4b0:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801e4b4:	f507 7280 	add.w	r2, r7, #256	; 0x100
 801e4b8:	6812      	ldr	r2, [r2, #0]
 801e4ba:	1052      	asrs	r2, r2, #1
 801e4bc:	601a      	str	r2, [r3, #0]
    if (result < 0)
 801e4be:	f507 7382 	add.w	r3, r7, #260	; 0x104
 801e4c2:	681b      	ldr	r3, [r3, #0]
 801e4c4:	2b00      	cmp	r3, #0
 801e4c6:	da06      	bge.n	801e4d6 <arm_nn_mat_mult_kernel_s8_s16+0x1598>
        threshold++;
 801e4c8:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801e4cc:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 801e4d0:	6812      	ldr	r2, [r2, #0]
 801e4d2:	3201      	adds	r2, #1
 801e4d4:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 801e4d6:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 801e4da:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801e4de:	6812      	ldr	r2, [r2, #0]
 801e4e0:	681b      	ldr	r3, [r3, #0]
 801e4e2:	429a      	cmp	r2, r3
 801e4e4:	dd06      	ble.n	801e4f4 <arm_nn_mat_mult_kernel_s8_s16+0x15b6>
        result++;
 801e4e6:	f507 7382 	add.w	r3, r7, #260	; 0x104
 801e4ea:	f507 7282 	add.w	r2, r7, #260	; 0x104
 801e4ee:	6812      	ldr	r2, [r2, #0]
 801e4f0:	3201      	adds	r2, #1
 801e4f2:	601a      	str	r2, [r3, #0]
    return result;
 801e4f4:	f507 7382 	add.w	r3, r7, #260	; 0x104
 801e4f8:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801e4fa:	bf00      	nop
 801e4fc:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
        ch_0_out_1 += out_offset;
 801e500:	f8d7 23c0 	ldr.w	r2, [r7, #960]	; 0x3c0
 801e504:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 801e508:	4413      	add	r3, r2
 801e50a:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
        ch_0_out_1 = MAX(ch_0_out_1, activation_min);
 801e50e:	f9b7 3418 	ldrsh.w	r3, [r7, #1048]	; 0x418
 801e512:	f8d7 23c0 	ldr.w	r2, [r7, #960]	; 0x3c0
 801e516:	4293      	cmp	r3, r2
 801e518:	bfb8      	it	lt
 801e51a:	4613      	movlt	r3, r2
 801e51c:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
        ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 801e520:	f9b7 341c 	ldrsh.w	r3, [r7, #1052]	; 0x41c
 801e524:	f8d7 23c0 	ldr.w	r2, [r7, #960]	; 0x3c0
 801e528:	4293      	cmp	r3, r2
 801e52a:	bfa8      	it	ge
 801e52c:	4613      	movge	r3, r2
 801e52e:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
        *out_1++ = (q7_t)ch_0_out_1;
 801e532:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 801e536:	1c5a      	adds	r2, r3, #1
 801e538:	f8c7 23ec 	str.w	r2, [r7, #1004]	; 0x3ec
 801e53c:	f8d7 23c0 	ldr.w	r2, [r7, #960]	; 0x3c0
 801e540:	b252      	sxtb	r2, r2
 801e542:	701a      	strb	r2, [r3, #0]
        out_mult++;
 801e544:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 801e548:	3304      	adds	r3, #4
 801e54a:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
        out_shift++;
 801e54e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801e552:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801e556:	6812      	ldr	r2, [r2, #0]
 801e558:	3204      	adds	r2, #4
 801e55a:	601a      	str	r2, [r3, #0]
    }

    out_0 += output_ch;
 801e55c:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 801e560:	881b      	ldrh	r3, [r3, #0]
 801e562:	f8d7 2428 	ldr.w	r2, [r7, #1064]	; 0x428
 801e566:	4413      	add	r3, r2
 801e568:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428

    /* return the new output pointer with offset */
    return out_0;
 801e56c:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
    (void)output_bias;
    (void)out_0;
    /* To be completed */
    return NULL;
#endif
}
 801e570:	4618      	mov	r0, r3
 801e572:	f507 777c 	add.w	r7, r7, #1008	; 0x3f0
 801e576:	46bd      	mov	sp, r7
 801e578:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 801e57c:	4770      	bx	lr

0801e57e <arm_nn_mat_mult_nt_t_s8>:
                                   const int32_t rhs_cols,
                                   const int32_t lhs_offset,
                                   const int32_t dst_offset,
                                   const int32_t activation_min,
                                   const int32_t activation_max)
{
 801e57e:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 801e582:	f5ad 6d24 	sub.w	sp, sp, #2624	; 0xa40
 801e586:	af00      	add	r7, sp, #0
 801e588:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 801e58c:	6020      	str	r0, [r4, #0]
 801e58e:	f107 0038 	add.w	r0, r7, #56	; 0x38
 801e592:	6001      	str	r1, [r0, #0]
 801e594:	f107 0134 	add.w	r1, r7, #52	; 0x34
 801e598:	600a      	str	r2, [r1, #0]
 801e59a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801e59e:	6013      	str	r3, [r2, #0]
#if defined(ARM_MATH_DSP)
    const int32_t off0 = rhs_cols - 4;
 801e5a0:	f8d7 3a70 	ldr.w	r3, [r7, #2672]	; 0xa70
 801e5a4:	3b04      	subs	r3, #4
 801e5a6:	f8c7 39ec 	str.w	r3, [r7, #2540]	; 0x9ec

    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 801e5aa:	2300      	movs	r3, #0
 801e5ac:	f8c7 3a3c 	str.w	r3, [r7, #2620]	; 0xa3c
 801e5b0:	f003 b977 	b.w	80218a2 <arm_nn_mat_mult_nt_t_s8+0x3324>
    {
        const q7_t *lhs_ptr = &lhs[0];
 801e5b4:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 801e5b8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801e5bc:	681b      	ldr	r3, [r3, #0]
 801e5be:	6013      	str	r3, [r2, #0]
        q7_t *dst_ptr = &dst[0];
 801e5c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801e5c4:	681b      	ldr	r3, [r3, #0]
 801e5c6:	f8c7 3a38 	str.w	r3, [r7, #2616]	; 0xa38

        q31_t lhs_offset_contribution0 = 0;
 801e5ca:	2300      	movs	r3, #0
 801e5cc:	f8c7 3a34 	str.w	r3, [r7, #2612]	; 0xa34
        q31_t lhs_offset_contribution1 = 0;
 801e5d0:	2300      	movs	r3, #0
 801e5d2:	f8c7 3a30 	str.w	r3, [r7, #2608]	; 0xa30

        for (int32_t x = 0; x < rhs_cols; ++x)
 801e5d6:	2300      	movs	r3, #0
 801e5d8:	f8c7 3a2c 	str.w	r3, [r7, #2604]	; 0xa2c
 801e5dc:	e024      	b.n	801e628 <arm_nn_mat_mult_nt_t_s8+0xaa>
        {
            lhs_offset_contribution0 += rhs[x];
 801e5de:	f8d7 2a2c 	ldr.w	r2, [r7, #2604]	; 0xa2c
 801e5e2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801e5e6:	681b      	ldr	r3, [r3, #0]
 801e5e8:	4413      	add	r3, r2
 801e5ea:	f993 3000 	ldrsb.w	r3, [r3]
 801e5ee:	461a      	mov	r2, r3
 801e5f0:	f8d7 3a34 	ldr.w	r3, [r7, #2612]	; 0xa34
 801e5f4:	4413      	add	r3, r2
 801e5f6:	f8c7 3a34 	str.w	r3, [r7, #2612]	; 0xa34
            lhs_offset_contribution1 += rhs[x + rhs_cols];
 801e5fa:	f8d7 2a2c 	ldr.w	r2, [r7, #2604]	; 0xa2c
 801e5fe:	f8d7 3a70 	ldr.w	r3, [r7, #2672]	; 0xa70
 801e602:	4413      	add	r3, r2
 801e604:	461a      	mov	r2, r3
 801e606:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801e60a:	681b      	ldr	r3, [r3, #0]
 801e60c:	4413      	add	r3, r2
 801e60e:	f993 3000 	ldrsb.w	r3, [r3]
 801e612:	461a      	mov	r2, r3
 801e614:	f8d7 3a30 	ldr.w	r3, [r7, #2608]	; 0xa30
 801e618:	4413      	add	r3, r2
 801e61a:	f8c7 3a30 	str.w	r3, [r7, #2608]	; 0xa30
        for (int32_t x = 0; x < rhs_cols; ++x)
 801e61e:	f8d7 3a2c 	ldr.w	r3, [r7, #2604]	; 0xa2c
 801e622:	3301      	adds	r3, #1
 801e624:	f8c7 3a2c 	str.w	r3, [r7, #2604]	; 0xa2c
 801e628:	f8d7 2a2c 	ldr.w	r2, [r7, #2604]	; 0xa2c
 801e62c:	f8d7 3a70 	ldr.w	r3, [r7, #2672]	; 0xa70
 801e630:	429a      	cmp	r2, r3
 801e632:	dbd4      	blt.n	801e5de <arm_nn_mat_mult_nt_t_s8+0x60>
        }

        lhs_offset_contribution0 *= lhs_offset;
 801e634:	f8d7 2a34 	ldr.w	r2, [r7, #2612]	; 0xa34
 801e638:	f8d7 3a74 	ldr.w	r3, [r7, #2676]	; 0xa74
 801e63c:	fb03 f302 	mul.w	r3, r3, r2
 801e640:	f8c7 3a34 	str.w	r3, [r7, #2612]	; 0xa34
        lhs_offset_contribution1 *= lhs_offset;
 801e644:	f8d7 2a30 	ldr.w	r2, [r7, #2608]	; 0xa30
 801e648:	f8d7 3a74 	ldr.w	r3, [r7, #2676]	; 0xa74
 801e64c:	fb03 f302 	mul.w	r3, r3, r2
 801e650:	f8c7 3a30 	str.w	r3, [r7, #2608]	; 0xa30
        if (bias)
 801e654:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801e658:	681b      	ldr	r3, [r3, #0]
 801e65a:	2b00      	cmp	r3, #0
 801e65c:	d01a      	beq.n	801e694 <arm_nn_mat_mult_nt_t_s8+0x116>
        {
            lhs_offset_contribution0 += bias[rhs_rows_idx];
 801e65e:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 801e662:	009a      	lsls	r2, r3, #2
 801e664:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801e668:	681b      	ldr	r3, [r3, #0]
 801e66a:	4413      	add	r3, r2
 801e66c:	681a      	ldr	r2, [r3, #0]
 801e66e:	f8d7 3a34 	ldr.w	r3, [r7, #2612]	; 0xa34
 801e672:	4413      	add	r3, r2
 801e674:	f8c7 3a34 	str.w	r3, [r7, #2612]	; 0xa34
            lhs_offset_contribution1 += bias[rhs_rows_idx + 1];
 801e678:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 801e67c:	3301      	adds	r3, #1
 801e67e:	009a      	lsls	r2, r3, #2
 801e680:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801e684:	681b      	ldr	r3, [r3, #0]
 801e686:	4413      	add	r3, r2
 801e688:	681a      	ldr	r2, [r3, #0]
 801e68a:	f8d7 3a30 	ldr.w	r3, [r7, #2608]	; 0xa30
 801e68e:	4413      	add	r3, r2
 801e690:	f8c7 3a30 	str.w	r3, [r7, #2608]	; 0xa30
        }

        int32_t lhs_rows_idx = lhs_rows >> 1;
 801e694:	f8d7 3a68 	ldr.w	r3, [r7, #2664]	; 0xa68
 801e698:	105b      	asrs	r3, r3, #1
 801e69a:	f8c7 3a28 	str.w	r3, [r7, #2600]	; 0xa28

        while (lhs_rows_idx)
 801e69e:	f001 bf48 	b.w	8020532 <arm_nn_mat_mult_nt_t_s8+0x1fb4>
        {
            const q7_t *rhs_ptr = &rhs[0];
 801e6a2:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 801e6a6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801e6aa:	681b      	ldr	r3, [r3, #0]
 801e6ac:	6013      	str	r3, [r2, #0]

            q31_t res00 = lhs_offset_contribution0;
 801e6ae:	f8d7 3a34 	ldr.w	r3, [r7, #2612]	; 0xa34
 801e6b2:	f8c7 3a24 	str.w	r3, [r7, #2596]	; 0xa24
            q31_t res01 = lhs_offset_contribution1;
 801e6b6:	f8d7 3a30 	ldr.w	r3, [r7, #2608]	; 0xa30
 801e6ba:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20
            q31_t res10 = lhs_offset_contribution0;
 801e6be:	f8d7 3a34 	ldr.w	r3, [r7, #2612]	; 0xa34
 801e6c2:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
            q31_t res11 = lhs_offset_contribution1;
 801e6c6:	f8d7 3a30 	ldr.w	r3, [r7, #2608]	; 0xa30
 801e6ca:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18

            int32_t rhs_cols_idx = 0;
 801e6ce:	2300      	movs	r3, #0
 801e6d0:	f8c7 3a14 	str.w	r3, [r7, #2580]	; 0xa14

            q31_t val0, val1, val2, val3, val4, val5;

            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 801e6d4:	f001 baee 	b.w	801fcb4 <arm_nn_mat_mult_nt_t_s8+0x1736>
 801e6d8:	f207 522c 	addw	r2, r7, #1324	; 0x52c
 801e6dc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 801e6e0:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801e6e2:	f207 532c 	addw	r3, r7, #1324	; 0x52c
 801e6e6:	681b      	ldr	r3, [r3, #0]
 801e6e8:	681b      	ldr	r3, [r3, #0]
 801e6ea:	681b      	ldr	r3, [r3, #0]
 801e6ec:	461a      	mov	r2, r3
 801e6ee:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801e6f2:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801e6f4:	f207 532c 	addw	r3, r7, #1324	; 0x52c
 801e6f8:	681b      	ldr	r3, [r3, #0]
 801e6fa:	681b      	ldr	r3, [r3, #0]
 801e6fc:	1d1a      	adds	r2, r3, #4
 801e6fe:	f207 532c 	addw	r3, r7, #1324	; 0x52c
 801e702:	681b      	ldr	r3, [r3, #0]
 801e704:	601a      	str	r2, [r3, #0]
    return (val);
 801e706:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801e70a:	681b      	ldr	r3, [r3, #0]
            {
                val1 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 801e70c:	f8c7 39c0 	str.w	r3, [r7, #2496]	; 0x9c0
                val2 = __SXTB16(val1);
 801e710:	f8d7 29c0 	ldr.w	r2, [r7, #2496]	; 0x9c0
 801e714:	f207 5334 	addw	r3, r7, #1332	; 0x534
 801e718:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801e71a:	f207 5334 	addw	r3, r7, #1332	; 0x534
 801e71e:	681b      	ldr	r3, [r3, #0]
 801e720:	fa2f f283 	sxtb16	r2, r3
 801e724:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 801e728:	601a      	str	r2, [r3, #0]
  return(result);
 801e72a:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 801e72e:	681b      	ldr	r3, [r3, #0]
 801e730:	f8c7 39bc 	str.w	r3, [r7, #2492]	; 0x9bc
 801e734:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 801e738:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801e73c:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801e73e:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 801e742:	681b      	ldr	r3, [r3, #0]
 801e744:	681b      	ldr	r3, [r3, #0]
 801e746:	681b      	ldr	r3, [r3, #0]
 801e748:	461a      	mov	r2, r3
 801e74a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801e74e:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801e750:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 801e754:	681b      	ldr	r3, [r3, #0]
 801e756:	681b      	ldr	r3, [r3, #0]
 801e758:	1d1a      	adds	r2, r3, #4
 801e75a:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 801e75e:	681b      	ldr	r3, [r3, #0]
 801e760:	601a      	str	r2, [r3, #0]
    return (val);
 801e762:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801e766:	681b      	ldr	r3, [r3, #0]
                val0 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 801e768:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8
                val3 = __SXTB16(val0);
 801e76c:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801e770:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 801e774:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801e776:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 801e77a:	681b      	ldr	r3, [r3, #0]
 801e77c:	fa2f f283 	sxtb16	r2, r3
 801e780:	f207 533c 	addw	r3, r7, #1340	; 0x53c
 801e784:	601a      	str	r2, [r3, #0]
  return(result);
 801e786:	f207 533c 	addw	r3, r7, #1340	; 0x53c
 801e78a:	681b      	ldr	r3, [r3, #0]
 801e78c:	f8c7 39b4 	str.w	r3, [r7, #2484]	; 0x9b4
                val4 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 801e790:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 801e794:	681a      	ldr	r2, [r3, #0]
 801e796:	f8d7 39ec 	ldr.w	r3, [r7, #2540]	; 0x9ec
 801e79a:	441a      	add	r2, r3
 801e79c:	f207 5344 	addw	r3, r7, #1348	; 0x544
 801e7a0:	601a      	str	r2, [r3, #0]
 801e7a2:	f207 5344 	addw	r3, r7, #1348	; 0x544
 801e7a6:	681b      	ldr	r3, [r3, #0]
 801e7a8:	681b      	ldr	r3, [r3, #0]
 801e7aa:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801e7ac:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 801e7b0:	601a      	str	r2, [r3, #0]
    return (val);
 801e7b2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 801e7b6:	681b      	ldr	r3, [r3, #0]
 801e7b8:	f8c7 39b0 	str.w	r3, [r7, #2480]	; 0x9b0
                val1 = __SXTB16_RORn(val1, 8);
 801e7bc:	f8d7 29c0 	ldr.w	r2, [r7, #2496]	; 0x9c0
 801e7c0:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 801e7c4:	601a      	str	r2, [r3, #0]
 801e7c6:	f207 525c 	addw	r2, r7, #1372	; 0x55c
 801e7ca:	2308      	movs	r3, #8
 801e7cc:	6013      	str	r3, [r2, #0]
 801e7ce:	f507 62ab 	add.w	r2, r7, #1368	; 0x558
 801e7d2:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 801e7d6:	681b      	ldr	r3, [r3, #0]
 801e7d8:	6013      	str	r3, [r2, #0]
 801e7da:	f207 5254 	addw	r2, r7, #1364	; 0x554
 801e7de:	f207 535c 	addw	r3, r7, #1372	; 0x55c
 801e7e2:	681b      	ldr	r3, [r3, #0]
 801e7e4:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801e7e6:	f207 5254 	addw	r2, r7, #1364	; 0x554
 801e7ea:	f207 5354 	addw	r3, r7, #1364	; 0x554
 801e7ee:	681b      	ldr	r3, [r3, #0]
 801e7f0:	f003 031f 	and.w	r3, r3, #31
 801e7f4:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801e7f6:	f207 5354 	addw	r3, r7, #1364	; 0x554
 801e7fa:	681b      	ldr	r3, [r3, #0]
 801e7fc:	2b00      	cmp	r3, #0
 801e7fe:	d103      	bne.n	801e808 <arm_nn_mat_mult_nt_t_s8+0x28a>
    return op1;
 801e800:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
 801e804:	681a      	ldr	r2, [r3, #0]
 801e806:	e006      	b.n	801e816 <arm_nn_mat_mult_nt_t_s8+0x298>
  return (op1 >> op2) | (op1 << (32U - op2));
 801e808:	f507 62ab 	add.w	r2, r7, #1368	; 0x558
 801e80c:	f207 5354 	addw	r3, r7, #1364	; 0x554
 801e810:	6812      	ldr	r2, [r2, #0]
 801e812:	681b      	ldr	r3, [r3, #0]
 801e814:	41da      	rors	r2, r3
 801e816:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 801e81a:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801e81c:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 801e820:	681b      	ldr	r3, [r3, #0]
 801e822:	fa2f f283 	sxtb16	r2, r3
 801e826:	f207 534c 	addw	r3, r7, #1356	; 0x54c
 801e82a:	601a      	str	r2, [r3, #0]
  return(result);
 801e82c:	f207 534c 	addw	r3, r7, #1356	; 0x54c
 801e830:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801e832:	f507 63a9 	add.w	r3, r7, #1352	; 0x548
 801e836:	601a      	str	r2, [r3, #0]
  return result;
 801e838:	f507 63a9 	add.w	r3, r7, #1352	; 0x548
 801e83c:	681b      	ldr	r3, [r3, #0]
 801e83e:	f8c7 39c0 	str.w	r3, [r7, #2496]	; 0x9c0
                val0 = __SXTB16_RORn(val0, 8);
 801e842:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801e846:	f207 537c 	addw	r3, r7, #1404	; 0x57c
 801e84a:	601a      	str	r2, [r3, #0]
 801e84c:	f507 62af 	add.w	r2, r7, #1400	; 0x578
 801e850:	2308      	movs	r3, #8
 801e852:	6013      	str	r3, [r2, #0]
 801e854:	f207 5274 	addw	r2, r7, #1396	; 0x574
 801e858:	f207 537c 	addw	r3, r7, #1404	; 0x57c
 801e85c:	681b      	ldr	r3, [r3, #0]
 801e85e:	6013      	str	r3, [r2, #0]
 801e860:	f507 62ae 	add.w	r2, r7, #1392	; 0x570
 801e864:	f507 63af 	add.w	r3, r7, #1400	; 0x578
 801e868:	681b      	ldr	r3, [r3, #0]
 801e86a:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801e86c:	f507 62ae 	add.w	r2, r7, #1392	; 0x570
 801e870:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 801e874:	681b      	ldr	r3, [r3, #0]
 801e876:	f003 031f 	and.w	r3, r3, #31
 801e87a:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801e87c:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 801e880:	681b      	ldr	r3, [r3, #0]
 801e882:	2b00      	cmp	r3, #0
 801e884:	d103      	bne.n	801e88e <arm_nn_mat_mult_nt_t_s8+0x310>
    return op1;
 801e886:	f207 5374 	addw	r3, r7, #1396	; 0x574
 801e88a:	681a      	ldr	r2, [r3, #0]
 801e88c:	e006      	b.n	801e89c <arm_nn_mat_mult_nt_t_s8+0x31e>
  return (op1 >> op2) | (op1 << (32U - op2));
 801e88e:	f207 5274 	addw	r2, r7, #1396	; 0x574
 801e892:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 801e896:	6812      	ldr	r2, [r2, #0]
 801e898:	681b      	ldr	r3, [r3, #0]
 801e89a:	41da      	rors	r2, r3
 801e89c:	f207 536c 	addw	r3, r7, #1388	; 0x56c
 801e8a0:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801e8a2:	f207 536c 	addw	r3, r7, #1388	; 0x56c
 801e8a6:	681b      	ldr	r3, [r3, #0]
 801e8a8:	fa2f f283 	sxtb16	r2, r3
 801e8ac:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 801e8b0:	601a      	str	r2, [r3, #0]
  return(result);
 801e8b2:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 801e8b6:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801e8b8:	f207 5364 	addw	r3, r7, #1380	; 0x564
 801e8bc:	601a      	str	r2, [r3, #0]
  return result;
 801e8be:	f207 5364 	addw	r3, r7, #1380	; 0x564
 801e8c2:	681b      	ldr	r3, [r3, #0]
 801e8c4:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8

                // 4 x MAC res00, res01
                res00 = __SMLAD(val3, val2, res00);
 801e8c8:	f8d7 29b4 	ldr.w	r2, [r7, #2484]	; 0x9b4
 801e8cc:	f8d7 19bc 	ldr.w	r1, [r7, #2492]	; 0x9bc
 801e8d0:	f8d7 0a24 	ldr.w	r0, [r7, #2596]	; 0xa24
 801e8d4:	f207 538c 	addw	r3, r7, #1420	; 0x58c
 801e8d8:	601a      	str	r2, [r3, #0]
 801e8da:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 801e8de:	6019      	str	r1, [r3, #0]
 801e8e0:	f207 5384 	addw	r3, r7, #1412	; 0x584
 801e8e4:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801e8e6:	f207 538c 	addw	r3, r7, #1420	; 0x58c
 801e8ea:	6819      	ldr	r1, [r3, #0]
 801e8ec:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 801e8f0:	681a      	ldr	r2, [r3, #0]
 801e8f2:	f207 5384 	addw	r3, r7, #1412	; 0x584
 801e8f6:	681b      	ldr	r3, [r3, #0]
 801e8f8:	fb21 3202 	smlad	r2, r1, r2, r3
 801e8fc:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801e900:	601a      	str	r2, [r3, #0]
  return(result);
 801e902:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801e906:	681b      	ldr	r3, [r3, #0]
 801e908:	f8c7 3a24 	str.w	r3, [r7, #2596]	; 0xa24
                val5 = __SXTB16(val4);
 801e90c:	f8d7 29b0 	ldr.w	r2, [r7, #2480]	; 0x9b0
 801e910:	f207 5394 	addw	r3, r7, #1428	; 0x594
 801e914:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801e916:	f207 5394 	addw	r3, r7, #1428	; 0x594
 801e91a:	681b      	ldr	r3, [r3, #0]
 801e91c:	fa2f f283 	sxtb16	r2, r3
 801e920:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 801e924:	601a      	str	r2, [r3, #0]
  return(result);
 801e926:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 801e92a:	681b      	ldr	r3, [r3, #0]
 801e92c:	f8c7 39ac 	str.w	r3, [r7, #2476]	; 0x9ac
                res00 = __SMLAD(val0, val1, res00);
 801e930:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801e934:	f8d7 19c0 	ldr.w	r1, [r7, #2496]	; 0x9c0
 801e938:	f8d7 0a24 	ldr.w	r0, [r7, #2596]	; 0xa24
 801e93c:	f207 53a4 	addw	r3, r7, #1444	; 0x5a4
 801e940:	601a      	str	r2, [r3, #0]
 801e942:	f507 63b4 	add.w	r3, r7, #1440	; 0x5a0
 801e946:	6019      	str	r1, [r3, #0]
 801e948:	f207 539c 	addw	r3, r7, #1436	; 0x59c
 801e94c:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801e94e:	f207 53a4 	addw	r3, r7, #1444	; 0x5a4
 801e952:	6819      	ldr	r1, [r3, #0]
 801e954:	f507 63b4 	add.w	r3, r7, #1440	; 0x5a0
 801e958:	681a      	ldr	r2, [r3, #0]
 801e95a:	f207 539c 	addw	r3, r7, #1436	; 0x59c
 801e95e:	681b      	ldr	r3, [r3, #0]
 801e960:	fb21 3202 	smlad	r2, r1, r2, r3
 801e964:	f507 63b3 	add.w	r3, r7, #1432	; 0x598
 801e968:	601a      	str	r2, [r3, #0]
  return(result);
 801e96a:	f507 63b3 	add.w	r3, r7, #1432	; 0x598
 801e96e:	681b      	ldr	r3, [r3, #0]
 801e970:	f8c7 3a24 	str.w	r3, [r7, #2596]	; 0xa24
                val4 = __SXTB16_RORn(val4, 8);
 801e974:	f8d7 29b0 	ldr.w	r2, [r7, #2480]	; 0x9b0
 801e978:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 801e97c:	601a      	str	r2, [r3, #0]
 801e97e:	f207 52bc 	addw	r2, r7, #1468	; 0x5bc
 801e982:	2308      	movs	r3, #8
 801e984:	6013      	str	r3, [r2, #0]
 801e986:	f507 62b7 	add.w	r2, r7, #1464	; 0x5b8
 801e98a:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 801e98e:	681b      	ldr	r3, [r3, #0]
 801e990:	6013      	str	r3, [r2, #0]
 801e992:	f207 52b4 	addw	r2, r7, #1460	; 0x5b4
 801e996:	f207 53bc 	addw	r3, r7, #1468	; 0x5bc
 801e99a:	681b      	ldr	r3, [r3, #0]
 801e99c:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801e99e:	f207 52b4 	addw	r2, r7, #1460	; 0x5b4
 801e9a2:	f207 53b4 	addw	r3, r7, #1460	; 0x5b4
 801e9a6:	681b      	ldr	r3, [r3, #0]
 801e9a8:	f003 031f 	and.w	r3, r3, #31
 801e9ac:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801e9ae:	f207 53b4 	addw	r3, r7, #1460	; 0x5b4
 801e9b2:	681b      	ldr	r3, [r3, #0]
 801e9b4:	2b00      	cmp	r3, #0
 801e9b6:	d103      	bne.n	801e9c0 <arm_nn_mat_mult_nt_t_s8+0x442>
    return op1;
 801e9b8:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 801e9bc:	681a      	ldr	r2, [r3, #0]
 801e9be:	e006      	b.n	801e9ce <arm_nn_mat_mult_nt_t_s8+0x450>
  return (op1 >> op2) | (op1 << (32U - op2));
 801e9c0:	f507 62b7 	add.w	r2, r7, #1464	; 0x5b8
 801e9c4:	f207 53b4 	addw	r3, r7, #1460	; 0x5b4
 801e9c8:	6812      	ldr	r2, [r2, #0]
 801e9ca:	681b      	ldr	r3, [r3, #0]
 801e9cc:	41da      	rors	r2, r3
 801e9ce:	f507 63b6 	add.w	r3, r7, #1456	; 0x5b0
 801e9d2:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801e9d4:	f507 63b6 	add.w	r3, r7, #1456	; 0x5b0
 801e9d8:	681b      	ldr	r3, [r3, #0]
 801e9da:	fa2f f283 	sxtb16	r2, r3
 801e9de:	f207 53ac 	addw	r3, r7, #1452	; 0x5ac
 801e9e2:	601a      	str	r2, [r3, #0]
  return(result);
 801e9e4:	f207 53ac 	addw	r3, r7, #1452	; 0x5ac
 801e9e8:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801e9ea:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 801e9ee:	601a      	str	r2, [r3, #0]
  return result;
 801e9f0:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 801e9f4:	681b      	ldr	r3, [r3, #0]
 801e9f6:	f8c7 39b0 	str.w	r3, [r7, #2480]	; 0x9b0
                res01 = __SMLAD(val3, val5, res01);
 801e9fa:	f8d7 29b4 	ldr.w	r2, [r7, #2484]	; 0x9b4
 801e9fe:	f8d7 19ac 	ldr.w	r1, [r7, #2476]	; 0x9ac
 801ea02:	f8d7 0a20 	ldr.w	r0, [r7, #2592]	; 0xa20
 801ea06:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 801ea0a:	601a      	str	r2, [r3, #0]
 801ea0c:	f207 53cc 	addw	r3, r7, #1484	; 0x5cc
 801ea10:	6019      	str	r1, [r3, #0]
 801ea12:	f507 63b9 	add.w	r3, r7, #1480	; 0x5c8
 801ea16:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801ea18:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 801ea1c:	6819      	ldr	r1, [r3, #0]
 801ea1e:	f207 53cc 	addw	r3, r7, #1484	; 0x5cc
 801ea22:	681a      	ldr	r2, [r3, #0]
 801ea24:	f507 63b9 	add.w	r3, r7, #1480	; 0x5c8
 801ea28:	681b      	ldr	r3, [r3, #0]
 801ea2a:	fb21 3202 	smlad	r2, r1, r2, r3
 801ea2e:	f207 53c4 	addw	r3, r7, #1476	; 0x5c4
 801ea32:	601a      	str	r2, [r3, #0]
  return(result);
 801ea34:	f207 53c4 	addw	r3, r7, #1476	; 0x5c4
 801ea38:	681b      	ldr	r3, [r3, #0]
 801ea3a:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20
                res01 = __SMLAD(val0, val4, res01);
 801ea3e:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801ea42:	f8d7 19b0 	ldr.w	r1, [r7, #2480]	; 0x9b0
 801ea46:	f8d7 0a20 	ldr.w	r0, [r7, #2592]	; 0xa20
 801ea4a:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 801ea4e:	601a      	str	r2, [r3, #0]
 801ea50:	f207 53dc 	addw	r3, r7, #1500	; 0x5dc
 801ea54:	6019      	str	r1, [r3, #0]
 801ea56:	f507 63bb 	add.w	r3, r7, #1496	; 0x5d8
 801ea5a:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801ea5c:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 801ea60:	6819      	ldr	r1, [r3, #0]
 801ea62:	f207 53dc 	addw	r3, r7, #1500	; 0x5dc
 801ea66:	681a      	ldr	r2, [r3, #0]
 801ea68:	f507 63bb 	add.w	r3, r7, #1496	; 0x5d8
 801ea6c:	681b      	ldr	r3, [r3, #0]
 801ea6e:	fb21 3202 	smlad	r2, r1, r2, r3
 801ea72:	f207 53d4 	addw	r3, r7, #1492	; 0x5d4
 801ea76:	601a      	str	r2, [r3, #0]
  return(result);
 801ea78:	f207 53d4 	addw	r3, r7, #1492	; 0x5d4
 801ea7c:	681b      	ldr	r3, [r3, #0]
 801ea7e:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20

                // 4 x MAC res10, res11
                val0 = arm_nn_read_q7x4((const q7_t *)&lhs_ptr[off0]);
 801ea82:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801ea86:	681a      	ldr	r2, [r3, #0]
 801ea88:	f8d7 39ec 	ldr.w	r3, [r7, #2540]	; 0x9ec
 801ea8c:	441a      	add	r2, r3
 801ea8e:	f207 53e4 	addw	r3, r7, #1508	; 0x5e4
 801ea92:	601a      	str	r2, [r3, #0]
 801ea94:	f207 53e4 	addw	r3, r7, #1508	; 0x5e4
 801ea98:	681b      	ldr	r3, [r3, #0]
 801ea9a:	681b      	ldr	r3, [r3, #0]
 801ea9c:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801ea9e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801eaa2:	601a      	str	r2, [r3, #0]
    return (val);
 801eaa4:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801eaa8:	681b      	ldr	r3, [r3, #0]
 801eaaa:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8
                val3 = __SXTB16(val0);
 801eaae:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801eab2:	f207 53ec 	addw	r3, r7, #1516	; 0x5ec
 801eab6:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801eab8:	f207 53ec 	addw	r3, r7, #1516	; 0x5ec
 801eabc:	681b      	ldr	r3, [r3, #0]
 801eabe:	fa2f f283 	sxtb16	r2, r3
 801eac2:	f507 63bd 	add.w	r3, r7, #1512	; 0x5e8
 801eac6:	601a      	str	r2, [r3, #0]
  return(result);
 801eac8:	f507 63bd 	add.w	r3, r7, #1512	; 0x5e8
 801eacc:	681b      	ldr	r3, [r3, #0]
 801eace:	f8c7 39b4 	str.w	r3, [r7, #2484]	; 0x9b4
                val0 = __SXTB16_RORn(val0, 8);
 801ead2:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801ead6:	f507 63c1 	add.w	r3, r7, #1544	; 0x608
 801eada:	601a      	str	r2, [r3, #0]
 801eadc:	f207 6204 	addw	r2, r7, #1540	; 0x604
 801eae0:	2308      	movs	r3, #8
 801eae2:	6013      	str	r3, [r2, #0]
 801eae4:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 801eae8:	f507 63c1 	add.w	r3, r7, #1544	; 0x608
 801eaec:	681b      	ldr	r3, [r3, #0]
 801eaee:	6013      	str	r3, [r2, #0]
 801eaf0:	f207 52fc 	addw	r2, r7, #1532	; 0x5fc
 801eaf4:	f207 6304 	addw	r3, r7, #1540	; 0x604
 801eaf8:	681b      	ldr	r3, [r3, #0]
 801eafa:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801eafc:	f207 52fc 	addw	r2, r7, #1532	; 0x5fc
 801eb00:	f207 53fc 	addw	r3, r7, #1532	; 0x5fc
 801eb04:	681b      	ldr	r3, [r3, #0]
 801eb06:	f003 031f 	and.w	r3, r3, #31
 801eb0a:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801eb0c:	f207 53fc 	addw	r3, r7, #1532	; 0x5fc
 801eb10:	681b      	ldr	r3, [r3, #0]
 801eb12:	2b00      	cmp	r3, #0
 801eb14:	d103      	bne.n	801eb1e <arm_nn_mat_mult_nt_t_s8+0x5a0>
    return op1;
 801eb16:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 801eb1a:	681a      	ldr	r2, [r3, #0]
 801eb1c:	e006      	b.n	801eb2c <arm_nn_mat_mult_nt_t_s8+0x5ae>
  return (op1 >> op2) | (op1 << (32U - op2));
 801eb1e:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 801eb22:	f207 53fc 	addw	r3, r7, #1532	; 0x5fc
 801eb26:	6812      	ldr	r2, [r2, #0]
 801eb28:	681b      	ldr	r3, [r3, #0]
 801eb2a:	41da      	rors	r2, r3
 801eb2c:	f507 63bf 	add.w	r3, r7, #1528	; 0x5f8
 801eb30:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801eb32:	f507 63bf 	add.w	r3, r7, #1528	; 0x5f8
 801eb36:	681b      	ldr	r3, [r3, #0]
 801eb38:	fa2f f283 	sxtb16	r2, r3
 801eb3c:	f207 53f4 	addw	r3, r7, #1524	; 0x5f4
 801eb40:	601a      	str	r2, [r3, #0]
  return(result);
 801eb42:	f207 53f4 	addw	r3, r7, #1524	; 0x5f4
 801eb46:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801eb48:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 801eb4c:	601a      	str	r2, [r3, #0]
  return result;
 801eb4e:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 801eb52:	681b      	ldr	r3, [r3, #0]
 801eb54:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8
                res10 = __SMLAD(val3, val2, res10);
 801eb58:	f8d7 29b4 	ldr.w	r2, [r7, #2484]	; 0x9b4
 801eb5c:	f8d7 19bc 	ldr.w	r1, [r7, #2492]	; 0x9bc
 801eb60:	f8d7 0a1c 	ldr.w	r0, [r7, #2588]	; 0xa1c
 801eb64:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 801eb68:	601a      	str	r2, [r3, #0]
 801eb6a:	f207 6314 	addw	r3, r7, #1556	; 0x614
 801eb6e:	6019      	str	r1, [r3, #0]
 801eb70:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 801eb74:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801eb76:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 801eb7a:	6819      	ldr	r1, [r3, #0]
 801eb7c:	f207 6314 	addw	r3, r7, #1556	; 0x614
 801eb80:	681a      	ldr	r2, [r3, #0]
 801eb82:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 801eb86:	681b      	ldr	r3, [r3, #0]
 801eb88:	fb21 3202 	smlad	r2, r1, r2, r3
 801eb8c:	f207 630c 	addw	r3, r7, #1548	; 0x60c
 801eb90:	601a      	str	r2, [r3, #0]
  return(result);
 801eb92:	f207 630c 	addw	r3, r7, #1548	; 0x60c
 801eb96:	681b      	ldr	r3, [r3, #0]
 801eb98:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
                res11 = __SMLAD(val3, val5, res11);
 801eb9c:	f8d7 29b4 	ldr.w	r2, [r7, #2484]	; 0x9b4
 801eba0:	f8d7 19ac 	ldr.w	r1, [r7, #2476]	; 0x9ac
 801eba4:	f8d7 0a18 	ldr.w	r0, [r7, #2584]	; 0xa18
 801eba8:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 801ebac:	601a      	str	r2, [r3, #0]
 801ebae:	f207 6324 	addw	r3, r7, #1572	; 0x624
 801ebb2:	6019      	str	r1, [r3, #0]
 801ebb4:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 801ebb8:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801ebba:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 801ebbe:	6819      	ldr	r1, [r3, #0]
 801ebc0:	f207 6324 	addw	r3, r7, #1572	; 0x624
 801ebc4:	681a      	ldr	r2, [r3, #0]
 801ebc6:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 801ebca:	681b      	ldr	r3, [r3, #0]
 801ebcc:	fb21 3202 	smlad	r2, r1, r2, r3
 801ebd0:	f207 631c 	addw	r3, r7, #1564	; 0x61c
 801ebd4:	601a      	str	r2, [r3, #0]
  return(result);
 801ebd6:	f207 631c 	addw	r3, r7, #1564	; 0x61c
 801ebda:	681b      	ldr	r3, [r3, #0]
 801ebdc:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18
                res10 = __SMLAD(val0, val1, res10);
 801ebe0:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801ebe4:	f8d7 19c0 	ldr.w	r1, [r7, #2496]	; 0x9c0
 801ebe8:	f8d7 0a1c 	ldr.w	r0, [r7, #2588]	; 0xa1c
 801ebec:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 801ebf0:	601a      	str	r2, [r3, #0]
 801ebf2:	f207 6334 	addw	r3, r7, #1588	; 0x634
 801ebf6:	6019      	str	r1, [r3, #0]
 801ebf8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ebfc:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801ebfe:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 801ec02:	6819      	ldr	r1, [r3, #0]
 801ec04:	f207 6334 	addw	r3, r7, #1588	; 0x634
 801ec08:	681a      	ldr	r2, [r3, #0]
 801ec0a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ec0e:	681b      	ldr	r3, [r3, #0]
 801ec10:	fb21 3202 	smlad	r2, r1, r2, r3
 801ec14:	f207 632c 	addw	r3, r7, #1580	; 0x62c
 801ec18:	601a      	str	r2, [r3, #0]
  return(result);
 801ec1a:	f207 632c 	addw	r3, r7, #1580	; 0x62c
 801ec1e:	681b      	ldr	r3, [r3, #0]
 801ec20:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
 801ec24:	f207 623c 	addw	r2, r7, #1596	; 0x63c
 801ec28:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 801ec2c:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801ec2e:	f207 633c 	addw	r3, r7, #1596	; 0x63c
 801ec32:	681b      	ldr	r3, [r3, #0]
 801ec34:	681b      	ldr	r3, [r3, #0]
 801ec36:	681b      	ldr	r3, [r3, #0]
 801ec38:	461a      	mov	r2, r3
 801ec3a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801ec3e:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801ec40:	f207 633c 	addw	r3, r7, #1596	; 0x63c
 801ec44:	681b      	ldr	r3, [r3, #0]
 801ec46:	681b      	ldr	r3, [r3, #0]
 801ec48:	1d1a      	adds	r2, r3, #4
 801ec4a:	f207 633c 	addw	r3, r7, #1596	; 0x63c
 801ec4e:	681b      	ldr	r3, [r3, #0]
 801ec50:	601a      	str	r2, [r3, #0]
    return (val);
 801ec52:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801ec56:	681b      	ldr	r3, [r3, #0]
                val1 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 801ec58:	f8c7 39c0 	str.w	r3, [r7, #2496]	; 0x9c0
                res11 = __SMLAD(val0, val4, res11);
 801ec5c:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801ec60:	f8d7 19b0 	ldr.w	r1, [r7, #2480]	; 0x9b0
 801ec64:	f8d7 0a18 	ldr.w	r0, [r7, #2584]	; 0xa18
 801ec68:	f207 634c 	addw	r3, r7, #1612	; 0x64c
 801ec6c:	601a      	str	r2, [r3, #0]
 801ec6e:	f507 63c9 	add.w	r3, r7, #1608	; 0x648
 801ec72:	6019      	str	r1, [r3, #0]
 801ec74:	f207 6344 	addw	r3, r7, #1604	; 0x644
 801ec78:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801ec7a:	f207 634c 	addw	r3, r7, #1612	; 0x64c
 801ec7e:	6819      	ldr	r1, [r3, #0]
 801ec80:	f507 63c9 	add.w	r3, r7, #1608	; 0x648
 801ec84:	681a      	ldr	r2, [r3, #0]
 801ec86:	f207 6344 	addw	r3, r7, #1604	; 0x644
 801ec8a:	681b      	ldr	r3, [r3, #0]
 801ec8c:	fb21 3202 	smlad	r2, r1, r2, r3
 801ec90:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 801ec94:	601a      	str	r2, [r3, #0]
  return(result);
 801ec96:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 801ec9a:	681b      	ldr	r3, [r3, #0]
 801ec9c:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18

                val4 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 801eca0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 801eca4:	681a      	ldr	r2, [r3, #0]
 801eca6:	f8d7 39ec 	ldr.w	r3, [r7, #2540]	; 0x9ec
 801ecaa:	441a      	add	r2, r3
 801ecac:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 801ecb0:	601a      	str	r2, [r3, #0]
 801ecb2:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 801ecb6:	681b      	ldr	r3, [r3, #0]
 801ecb8:	681b      	ldr	r3, [r3, #0]
 801ecba:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801ecbc:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801ecc0:	601a      	str	r2, [r3, #0]
    return (val);
 801ecc2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801ecc6:	681b      	ldr	r3, [r3, #0]
 801ecc8:	f8c7 39b0 	str.w	r3, [r7, #2480]	; 0x9b0
                val2 = __SXTB16(val1);
 801eccc:	f8d7 29c0 	ldr.w	r2, [r7, #2496]	; 0x9c0
 801ecd0:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 801ecd4:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801ecd6:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 801ecda:	681b      	ldr	r3, [r3, #0]
 801ecdc:	fa2f f283 	sxtb16	r2, r3
 801ece0:	f207 6354 	addw	r3, r7, #1620	; 0x654
 801ece4:	601a      	str	r2, [r3, #0]
  return(result);
 801ece6:	f207 6354 	addw	r3, r7, #1620	; 0x654
 801ecea:	681b      	ldr	r3, [r3, #0]
 801ecec:	f8c7 39bc 	str.w	r3, [r7, #2492]	; 0x9bc
 801ecf0:	f207 625c 	addw	r2, r7, #1628	; 0x65c
 801ecf4:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801ecf8:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801ecfa:	f207 635c 	addw	r3, r7, #1628	; 0x65c
 801ecfe:	681b      	ldr	r3, [r3, #0]
 801ed00:	681b      	ldr	r3, [r3, #0]
 801ed02:	681b      	ldr	r3, [r3, #0]
 801ed04:	461a      	mov	r2, r3
 801ed06:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 801ed0a:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801ed0c:	f207 635c 	addw	r3, r7, #1628	; 0x65c
 801ed10:	681b      	ldr	r3, [r3, #0]
 801ed12:	681b      	ldr	r3, [r3, #0]
 801ed14:	1d1a      	adds	r2, r3, #4
 801ed16:	f207 635c 	addw	r3, r7, #1628	; 0x65c
 801ed1a:	681b      	ldr	r3, [r3, #0]
 801ed1c:	601a      	str	r2, [r3, #0]
    return (val);
 801ed1e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 801ed22:	681b      	ldr	r3, [r3, #0]
                val0 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 801ed24:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8
                val3 = __SXTB16(val0);
 801ed28:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801ed2c:	f207 6364 	addw	r3, r7, #1636	; 0x664
 801ed30:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801ed32:	f207 6364 	addw	r3, r7, #1636	; 0x664
 801ed36:	681b      	ldr	r3, [r3, #0]
 801ed38:	fa2f f283 	sxtb16	r2, r3
 801ed3c:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 801ed40:	601a      	str	r2, [r3, #0]
  return(result);
 801ed42:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 801ed46:	681b      	ldr	r3, [r3, #0]
 801ed48:	f8c7 39b4 	str.w	r3, [r7, #2484]	; 0x9b4
                val1 = __SXTB16_RORn(val1, 8);
 801ed4c:	f8d7 29c0 	ldr.w	r2, [r7, #2496]	; 0x9c0
 801ed50:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 801ed54:	601a      	str	r2, [r3, #0]
 801ed56:	f207 627c 	addw	r2, r7, #1660	; 0x67c
 801ed5a:	2308      	movs	r3, #8
 801ed5c:	6013      	str	r3, [r2, #0]
 801ed5e:	f507 62cf 	add.w	r2, r7, #1656	; 0x678
 801ed62:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 801ed66:	681b      	ldr	r3, [r3, #0]
 801ed68:	6013      	str	r3, [r2, #0]
 801ed6a:	f207 6274 	addw	r2, r7, #1652	; 0x674
 801ed6e:	f207 637c 	addw	r3, r7, #1660	; 0x67c
 801ed72:	681b      	ldr	r3, [r3, #0]
 801ed74:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801ed76:	f207 6274 	addw	r2, r7, #1652	; 0x674
 801ed7a:	f207 6374 	addw	r3, r7, #1652	; 0x674
 801ed7e:	681b      	ldr	r3, [r3, #0]
 801ed80:	f003 031f 	and.w	r3, r3, #31
 801ed84:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801ed86:	f207 6374 	addw	r3, r7, #1652	; 0x674
 801ed8a:	681b      	ldr	r3, [r3, #0]
 801ed8c:	2b00      	cmp	r3, #0
 801ed8e:	d103      	bne.n	801ed98 <arm_nn_mat_mult_nt_t_s8+0x81a>
    return op1;
 801ed90:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801ed94:	681a      	ldr	r2, [r3, #0]
 801ed96:	e006      	b.n	801eda6 <arm_nn_mat_mult_nt_t_s8+0x828>
  return (op1 >> op2) | (op1 << (32U - op2));
 801ed98:	f507 62cf 	add.w	r2, r7, #1656	; 0x678
 801ed9c:	f207 6374 	addw	r3, r7, #1652	; 0x674
 801eda0:	6812      	ldr	r2, [r2, #0]
 801eda2:	681b      	ldr	r3, [r3, #0]
 801eda4:	41da      	rors	r2, r3
 801eda6:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 801edaa:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801edac:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 801edb0:	681b      	ldr	r3, [r3, #0]
 801edb2:	fa2f f283 	sxtb16	r2, r3
 801edb6:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 801edba:	601a      	str	r2, [r3, #0]
  return(result);
 801edbc:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 801edc0:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801edc2:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 801edc6:	601a      	str	r2, [r3, #0]
  return result;
 801edc8:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 801edcc:	681b      	ldr	r3, [r3, #0]
 801edce:	f8c7 39c0 	str.w	r3, [r7, #2496]	; 0x9c0
                val0 = __SXTB16_RORn(val0, 8);
 801edd2:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801edd6:	f207 639c 	addw	r3, r7, #1692	; 0x69c
 801edda:	601a      	str	r2, [r3, #0]
 801eddc:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 801ede0:	2308      	movs	r3, #8
 801ede2:	6013      	str	r3, [r2, #0]
 801ede4:	f207 6294 	addw	r2, r7, #1684	; 0x694
 801ede8:	f207 639c 	addw	r3, r7, #1692	; 0x69c
 801edec:	681b      	ldr	r3, [r3, #0]
 801edee:	6013      	str	r3, [r2, #0]
 801edf0:	f507 62d2 	add.w	r2, r7, #1680	; 0x690
 801edf4:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 801edf8:	681b      	ldr	r3, [r3, #0]
 801edfa:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801edfc:	f507 62d2 	add.w	r2, r7, #1680	; 0x690
 801ee00:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 801ee04:	681b      	ldr	r3, [r3, #0]
 801ee06:	f003 031f 	and.w	r3, r3, #31
 801ee0a:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801ee0c:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 801ee10:	681b      	ldr	r3, [r3, #0]
 801ee12:	2b00      	cmp	r3, #0
 801ee14:	d103      	bne.n	801ee1e <arm_nn_mat_mult_nt_t_s8+0x8a0>
    return op1;
 801ee16:	f207 6394 	addw	r3, r7, #1684	; 0x694
 801ee1a:	681a      	ldr	r2, [r3, #0]
 801ee1c:	e006      	b.n	801ee2c <arm_nn_mat_mult_nt_t_s8+0x8ae>
  return (op1 >> op2) | (op1 << (32U - op2));
 801ee1e:	f207 6294 	addw	r2, r7, #1684	; 0x694
 801ee22:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 801ee26:	6812      	ldr	r2, [r2, #0]
 801ee28:	681b      	ldr	r3, [r3, #0]
 801ee2a:	41da      	rors	r2, r3
 801ee2c:	f207 638c 	addw	r3, r7, #1676	; 0x68c
 801ee30:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801ee32:	f207 638c 	addw	r3, r7, #1676	; 0x68c
 801ee36:	681b      	ldr	r3, [r3, #0]
 801ee38:	fa2f f283 	sxtb16	r2, r3
 801ee3c:	f507 63d1 	add.w	r3, r7, #1672	; 0x688
 801ee40:	601a      	str	r2, [r3, #0]
  return(result);
 801ee42:	f507 63d1 	add.w	r3, r7, #1672	; 0x688
 801ee46:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801ee48:	f207 6384 	addw	r3, r7, #1668	; 0x684
 801ee4c:	601a      	str	r2, [r3, #0]
  return result;
 801ee4e:	f207 6384 	addw	r3, r7, #1668	; 0x684
 801ee52:	681b      	ldr	r3, [r3, #0]
 801ee54:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8

                // 4 x MAC res00, res01
                res00 = __SMLAD(val3, val2, res00);
 801ee58:	f8d7 29b4 	ldr.w	r2, [r7, #2484]	; 0x9b4
 801ee5c:	f8d7 19bc 	ldr.w	r1, [r7, #2492]	; 0x9bc
 801ee60:	f8d7 0a24 	ldr.w	r0, [r7, #2596]	; 0xa24
 801ee64:	f207 63ac 	addw	r3, r7, #1708	; 0x6ac
 801ee68:	601a      	str	r2, [r3, #0]
 801ee6a:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
 801ee6e:	6019      	str	r1, [r3, #0]
 801ee70:	f207 63a4 	addw	r3, r7, #1700	; 0x6a4
 801ee74:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801ee76:	f207 63ac 	addw	r3, r7, #1708	; 0x6ac
 801ee7a:	6819      	ldr	r1, [r3, #0]
 801ee7c:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
 801ee80:	681a      	ldr	r2, [r3, #0]
 801ee82:	f207 63a4 	addw	r3, r7, #1700	; 0x6a4
 801ee86:	681b      	ldr	r3, [r3, #0]
 801ee88:	fb21 3202 	smlad	r2, r1, r2, r3
 801ee8c:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 801ee90:	601a      	str	r2, [r3, #0]
  return(result);
 801ee92:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 801ee96:	681b      	ldr	r3, [r3, #0]
 801ee98:	f8c7 3a24 	str.w	r3, [r7, #2596]	; 0xa24
                val5 = __SXTB16(val4);
 801ee9c:	f8d7 29b0 	ldr.w	r2, [r7, #2480]	; 0x9b0
 801eea0:	f207 63b4 	addw	r3, r7, #1716	; 0x6b4
 801eea4:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801eea6:	f207 63b4 	addw	r3, r7, #1716	; 0x6b4
 801eeaa:	681b      	ldr	r3, [r3, #0]
 801eeac:	fa2f f283 	sxtb16	r2, r3
 801eeb0:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 801eeb4:	601a      	str	r2, [r3, #0]
  return(result);
 801eeb6:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 801eeba:	681b      	ldr	r3, [r3, #0]
 801eebc:	f8c7 39ac 	str.w	r3, [r7, #2476]	; 0x9ac
                res00 = __SMLAD(val0, val1, res00);
 801eec0:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801eec4:	f8d7 19c0 	ldr.w	r1, [r7, #2496]	; 0x9c0
 801eec8:	f8d7 0a24 	ldr.w	r0, [r7, #2596]	; 0xa24
 801eecc:	f207 63c4 	addw	r3, r7, #1732	; 0x6c4
 801eed0:	601a      	str	r2, [r3, #0]
 801eed2:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 801eed6:	6019      	str	r1, [r3, #0]
 801eed8:	f207 63bc 	addw	r3, r7, #1724	; 0x6bc
 801eedc:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801eede:	f207 63c4 	addw	r3, r7, #1732	; 0x6c4
 801eee2:	6819      	ldr	r1, [r3, #0]
 801eee4:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 801eee8:	681a      	ldr	r2, [r3, #0]
 801eeea:	f207 63bc 	addw	r3, r7, #1724	; 0x6bc
 801eeee:	681b      	ldr	r3, [r3, #0]
 801eef0:	fb21 3202 	smlad	r2, r1, r2, r3
 801eef4:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 801eef8:	601a      	str	r2, [r3, #0]
  return(result);
 801eefa:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 801eefe:	681b      	ldr	r3, [r3, #0]
 801ef00:	f8c7 3a24 	str.w	r3, [r7, #2596]	; 0xa24
                val4 = __SXTB16_RORn(val4, 8);
 801ef04:	f8d7 29b0 	ldr.w	r2, [r7, #2480]	; 0x9b0
 801ef08:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 801ef0c:	601a      	str	r2, [r3, #0]
 801ef0e:	f207 62dc 	addw	r2, r7, #1756	; 0x6dc
 801ef12:	2308      	movs	r3, #8
 801ef14:	6013      	str	r3, [r2, #0]
 801ef16:	f507 62db 	add.w	r2, r7, #1752	; 0x6d8
 801ef1a:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 801ef1e:	681b      	ldr	r3, [r3, #0]
 801ef20:	6013      	str	r3, [r2, #0]
 801ef22:	f207 62d4 	addw	r2, r7, #1748	; 0x6d4
 801ef26:	f207 63dc 	addw	r3, r7, #1756	; 0x6dc
 801ef2a:	681b      	ldr	r3, [r3, #0]
 801ef2c:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801ef2e:	f207 62d4 	addw	r2, r7, #1748	; 0x6d4
 801ef32:	f207 63d4 	addw	r3, r7, #1748	; 0x6d4
 801ef36:	681b      	ldr	r3, [r3, #0]
 801ef38:	f003 031f 	and.w	r3, r3, #31
 801ef3c:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801ef3e:	f207 63d4 	addw	r3, r7, #1748	; 0x6d4
 801ef42:	681b      	ldr	r3, [r3, #0]
 801ef44:	2b00      	cmp	r3, #0
 801ef46:	d103      	bne.n	801ef50 <arm_nn_mat_mult_nt_t_s8+0x9d2>
    return op1;
 801ef48:	f507 63db 	add.w	r3, r7, #1752	; 0x6d8
 801ef4c:	681a      	ldr	r2, [r3, #0]
 801ef4e:	e006      	b.n	801ef5e <arm_nn_mat_mult_nt_t_s8+0x9e0>
  return (op1 >> op2) | (op1 << (32U - op2));
 801ef50:	f507 62db 	add.w	r2, r7, #1752	; 0x6d8
 801ef54:	f207 63d4 	addw	r3, r7, #1748	; 0x6d4
 801ef58:	6812      	ldr	r2, [r2, #0]
 801ef5a:	681b      	ldr	r3, [r3, #0]
 801ef5c:	41da      	rors	r2, r3
 801ef5e:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
 801ef62:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801ef64:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
 801ef68:	681b      	ldr	r3, [r3, #0]
 801ef6a:	fa2f f283 	sxtb16	r2, r3
 801ef6e:	f207 63cc 	addw	r3, r7, #1740	; 0x6cc
 801ef72:	601a      	str	r2, [r3, #0]
  return(result);
 801ef74:	f207 63cc 	addw	r3, r7, #1740	; 0x6cc
 801ef78:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801ef7a:	f507 63d9 	add.w	r3, r7, #1736	; 0x6c8
 801ef7e:	601a      	str	r2, [r3, #0]
  return result;
 801ef80:	f507 63d9 	add.w	r3, r7, #1736	; 0x6c8
 801ef84:	681b      	ldr	r3, [r3, #0]
 801ef86:	f8c7 39b0 	str.w	r3, [r7, #2480]	; 0x9b0
                res01 = __SMLAD(val3, val5, res01);
 801ef8a:	f8d7 29b4 	ldr.w	r2, [r7, #2484]	; 0x9b4
 801ef8e:	f8d7 19ac 	ldr.w	r1, [r7, #2476]	; 0x9ac
 801ef92:	f8d7 0a20 	ldr.w	r0, [r7, #2592]	; 0xa20
 801ef96:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 801ef9a:	601a      	str	r2, [r3, #0]
 801ef9c:	f207 63ec 	addw	r3, r7, #1772	; 0x6ec
 801efa0:	6019      	str	r1, [r3, #0]
 801efa2:	f507 63dd 	add.w	r3, r7, #1768	; 0x6e8
 801efa6:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801efa8:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 801efac:	6819      	ldr	r1, [r3, #0]
 801efae:	f207 63ec 	addw	r3, r7, #1772	; 0x6ec
 801efb2:	681a      	ldr	r2, [r3, #0]
 801efb4:	f507 63dd 	add.w	r3, r7, #1768	; 0x6e8
 801efb8:	681b      	ldr	r3, [r3, #0]
 801efba:	fb21 3202 	smlad	r2, r1, r2, r3
 801efbe:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 801efc2:	601a      	str	r2, [r3, #0]
  return(result);
 801efc4:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 801efc8:	681b      	ldr	r3, [r3, #0]
 801efca:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20
                res01 = __SMLAD(val0, val4, res01);
 801efce:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801efd2:	f8d7 19b0 	ldr.w	r1, [r7, #2480]	; 0x9b0
 801efd6:	f8d7 0a20 	ldr.w	r0, [r7, #2592]	; 0xa20
 801efda:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
 801efde:	601a      	str	r2, [r3, #0]
 801efe0:	f207 63fc 	addw	r3, r7, #1788	; 0x6fc
 801efe4:	6019      	str	r1, [r3, #0]
 801efe6:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 801efea:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801efec:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
 801eff0:	6819      	ldr	r1, [r3, #0]
 801eff2:	f207 63fc 	addw	r3, r7, #1788	; 0x6fc
 801eff6:	681a      	ldr	r2, [r3, #0]
 801eff8:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 801effc:	681b      	ldr	r3, [r3, #0]
 801effe:	fb21 3202 	smlad	r2, r1, r2, r3
 801f002:	f207 63f4 	addw	r3, r7, #1780	; 0x6f4
 801f006:	601a      	str	r2, [r3, #0]
  return(result);
 801f008:	f207 63f4 	addw	r3, r7, #1780	; 0x6f4
 801f00c:	681b      	ldr	r3, [r3, #0]
 801f00e:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20

                // 4 x MAC res10, res11
                val0 = arm_nn_read_q7x4((const q7_t *)&lhs_ptr[off0]);
 801f012:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801f016:	681a      	ldr	r2, [r3, #0]
 801f018:	f8d7 39ec 	ldr.w	r3, [r7, #2540]	; 0x9ec
 801f01c:	441a      	add	r2, r3
 801f01e:	f207 7304 	addw	r3, r7, #1796	; 0x704
 801f022:	601a      	str	r2, [r3, #0]
 801f024:	f207 7304 	addw	r3, r7, #1796	; 0x704
 801f028:	681b      	ldr	r3, [r3, #0]
 801f02a:	681b      	ldr	r3, [r3, #0]
 801f02c:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801f02e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801f032:	601a      	str	r2, [r3, #0]
    return (val);
 801f034:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801f038:	681b      	ldr	r3, [r3, #0]
 801f03a:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8
                val3 = __SXTB16(val0);
 801f03e:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801f042:	f207 730c 	addw	r3, r7, #1804	; 0x70c
 801f046:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801f048:	f207 730c 	addw	r3, r7, #1804	; 0x70c
 801f04c:	681b      	ldr	r3, [r3, #0]
 801f04e:	fa2f f283 	sxtb16	r2, r3
 801f052:	f507 63e1 	add.w	r3, r7, #1800	; 0x708
 801f056:	601a      	str	r2, [r3, #0]
  return(result);
 801f058:	f507 63e1 	add.w	r3, r7, #1800	; 0x708
 801f05c:	681b      	ldr	r3, [r3, #0]
 801f05e:	f8c7 39b4 	str.w	r3, [r7, #2484]	; 0x9b4
                val0 = __SXTB16_RORn(val0, 8);
 801f062:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801f066:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 801f06a:	601a      	str	r2, [r3, #0]
 801f06c:	f207 7224 	addw	r2, r7, #1828	; 0x724
 801f070:	2308      	movs	r3, #8
 801f072:	6013      	str	r3, [r2, #0]
 801f074:	f507 62e4 	add.w	r2, r7, #1824	; 0x720
 801f078:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 801f07c:	681b      	ldr	r3, [r3, #0]
 801f07e:	6013      	str	r3, [r2, #0]
 801f080:	f207 721c 	addw	r2, r7, #1820	; 0x71c
 801f084:	f207 7324 	addw	r3, r7, #1828	; 0x724
 801f088:	681b      	ldr	r3, [r3, #0]
 801f08a:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801f08c:	f207 721c 	addw	r2, r7, #1820	; 0x71c
 801f090:	f207 731c 	addw	r3, r7, #1820	; 0x71c
 801f094:	681b      	ldr	r3, [r3, #0]
 801f096:	f003 031f 	and.w	r3, r3, #31
 801f09a:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801f09c:	f207 731c 	addw	r3, r7, #1820	; 0x71c
 801f0a0:	681b      	ldr	r3, [r3, #0]
 801f0a2:	2b00      	cmp	r3, #0
 801f0a4:	d103      	bne.n	801f0ae <arm_nn_mat_mult_nt_t_s8+0xb30>
    return op1;
 801f0a6:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 801f0aa:	681a      	ldr	r2, [r3, #0]
 801f0ac:	e006      	b.n	801f0bc <arm_nn_mat_mult_nt_t_s8+0xb3e>
  return (op1 >> op2) | (op1 << (32U - op2));
 801f0ae:	f507 62e4 	add.w	r2, r7, #1824	; 0x720
 801f0b2:	f207 731c 	addw	r3, r7, #1820	; 0x71c
 801f0b6:	6812      	ldr	r2, [r2, #0]
 801f0b8:	681b      	ldr	r3, [r3, #0]
 801f0ba:	41da      	rors	r2, r3
 801f0bc:	f507 63e3 	add.w	r3, r7, #1816	; 0x718
 801f0c0:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801f0c2:	f507 63e3 	add.w	r3, r7, #1816	; 0x718
 801f0c6:	681b      	ldr	r3, [r3, #0]
 801f0c8:	fa2f f283 	sxtb16	r2, r3
 801f0cc:	f207 7314 	addw	r3, r7, #1812	; 0x714
 801f0d0:	601a      	str	r2, [r3, #0]
  return(result);
 801f0d2:	f207 7314 	addw	r3, r7, #1812	; 0x714
 801f0d6:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801f0d8:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 801f0dc:	601a      	str	r2, [r3, #0]
  return result;
 801f0de:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 801f0e2:	681b      	ldr	r3, [r3, #0]
 801f0e4:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8
                res10 = __SMLAD(val3, val2, res10);
 801f0e8:	f8d7 29b4 	ldr.w	r2, [r7, #2484]	; 0x9b4
 801f0ec:	f8d7 19bc 	ldr.w	r1, [r7, #2492]	; 0x9bc
 801f0f0:	f8d7 0a1c 	ldr.w	r0, [r7, #2588]	; 0xa1c
 801f0f4:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 801f0f8:	601a      	str	r2, [r3, #0]
 801f0fa:	f207 7334 	addw	r3, r7, #1844	; 0x734
 801f0fe:	6019      	str	r1, [r3, #0]
 801f100:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 801f104:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801f106:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 801f10a:	6819      	ldr	r1, [r3, #0]
 801f10c:	f207 7334 	addw	r3, r7, #1844	; 0x734
 801f110:	681a      	ldr	r2, [r3, #0]
 801f112:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 801f116:	681b      	ldr	r3, [r3, #0]
 801f118:	fb21 3202 	smlad	r2, r1, r2, r3
 801f11c:	f207 732c 	addw	r3, r7, #1836	; 0x72c
 801f120:	601a      	str	r2, [r3, #0]
  return(result);
 801f122:	f207 732c 	addw	r3, r7, #1836	; 0x72c
 801f126:	681b      	ldr	r3, [r3, #0]
 801f128:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
                res11 = __SMLAD(val3, val5, res11);
 801f12c:	f8d7 29b4 	ldr.w	r2, [r7, #2484]	; 0x9b4
 801f130:	f8d7 19ac 	ldr.w	r1, [r7, #2476]	; 0x9ac
 801f134:	f8d7 0a18 	ldr.w	r0, [r7, #2584]	; 0xa18
 801f138:	f507 63e9 	add.w	r3, r7, #1864	; 0x748
 801f13c:	601a      	str	r2, [r3, #0]
 801f13e:	f207 7344 	addw	r3, r7, #1860	; 0x744
 801f142:	6019      	str	r1, [r3, #0]
 801f144:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 801f148:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801f14a:	f507 63e9 	add.w	r3, r7, #1864	; 0x748
 801f14e:	6819      	ldr	r1, [r3, #0]
 801f150:	f207 7344 	addw	r3, r7, #1860	; 0x744
 801f154:	681a      	ldr	r2, [r3, #0]
 801f156:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 801f15a:	681b      	ldr	r3, [r3, #0]
 801f15c:	fb21 3202 	smlad	r2, r1, r2, r3
 801f160:	f207 733c 	addw	r3, r7, #1852	; 0x73c
 801f164:	601a      	str	r2, [r3, #0]
  return(result);
 801f166:	f207 733c 	addw	r3, r7, #1852	; 0x73c
 801f16a:	681b      	ldr	r3, [r3, #0]
 801f16c:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18
                res10 = __SMLAD(val0, val1, res10);
 801f170:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801f174:	f8d7 19c0 	ldr.w	r1, [r7, #2496]	; 0x9c0
 801f178:	f8d7 0a1c 	ldr.w	r0, [r7, #2588]	; 0xa1c
 801f17c:	f507 63eb 	add.w	r3, r7, #1880	; 0x758
 801f180:	601a      	str	r2, [r3, #0]
 801f182:	f207 7354 	addw	r3, r7, #1876	; 0x754
 801f186:	6019      	str	r1, [r3, #0]
 801f188:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 801f18c:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801f18e:	f507 63eb 	add.w	r3, r7, #1880	; 0x758
 801f192:	6819      	ldr	r1, [r3, #0]
 801f194:	f207 7354 	addw	r3, r7, #1876	; 0x754
 801f198:	681a      	ldr	r2, [r3, #0]
 801f19a:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 801f19e:	681b      	ldr	r3, [r3, #0]
 801f1a0:	fb21 3202 	smlad	r2, r1, r2, r3
 801f1a4:	f207 734c 	addw	r3, r7, #1868	; 0x74c
 801f1a8:	601a      	str	r2, [r3, #0]
  return(result);
 801f1aa:	f207 734c 	addw	r3, r7, #1868	; 0x74c
 801f1ae:	681b      	ldr	r3, [r3, #0]
 801f1b0:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
 801f1b4:	f207 725c 	addw	r2, r7, #1884	; 0x75c
 801f1b8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 801f1bc:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801f1be:	f207 735c 	addw	r3, r7, #1884	; 0x75c
 801f1c2:	681b      	ldr	r3, [r3, #0]
 801f1c4:	681b      	ldr	r3, [r3, #0]
 801f1c6:	681b      	ldr	r3, [r3, #0]
 801f1c8:	461a      	mov	r2, r3
 801f1ca:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 801f1ce:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801f1d0:	f207 735c 	addw	r3, r7, #1884	; 0x75c
 801f1d4:	681b      	ldr	r3, [r3, #0]
 801f1d6:	681b      	ldr	r3, [r3, #0]
 801f1d8:	1d1a      	adds	r2, r3, #4
 801f1da:	f207 735c 	addw	r3, r7, #1884	; 0x75c
 801f1de:	681b      	ldr	r3, [r3, #0]
 801f1e0:	601a      	str	r2, [r3, #0]
    return (val);
 801f1e2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 801f1e6:	681b      	ldr	r3, [r3, #0]
                val1 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 801f1e8:	f8c7 39c0 	str.w	r3, [r7, #2496]	; 0x9c0
                res11 = __SMLAD(val0, val4, res11);
 801f1ec:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801f1f0:	f8d7 19b0 	ldr.w	r1, [r7, #2480]	; 0x9b0
 801f1f4:	f8d7 0a18 	ldr.w	r0, [r7, #2584]	; 0xa18
 801f1f8:	f207 736c 	addw	r3, r7, #1900	; 0x76c
 801f1fc:	601a      	str	r2, [r3, #0]
 801f1fe:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 801f202:	6019      	str	r1, [r3, #0]
 801f204:	f207 7364 	addw	r3, r7, #1892	; 0x764
 801f208:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801f20a:	f207 736c 	addw	r3, r7, #1900	; 0x76c
 801f20e:	6819      	ldr	r1, [r3, #0]
 801f210:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 801f214:	681a      	ldr	r2, [r3, #0]
 801f216:	f207 7364 	addw	r3, r7, #1892	; 0x764
 801f21a:	681b      	ldr	r3, [r3, #0]
 801f21c:	fb21 3202 	smlad	r2, r1, r2, r3
 801f220:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 801f224:	601a      	str	r2, [r3, #0]
  return(result);
 801f226:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 801f22a:	681b      	ldr	r3, [r3, #0]
 801f22c:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18

                val4 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 801f230:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 801f234:	681a      	ldr	r2, [r3, #0]
 801f236:	f8d7 39ec 	ldr.w	r3, [r7, #2540]	; 0x9ec
 801f23a:	441a      	add	r2, r3
 801f23c:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 801f240:	601a      	str	r2, [r3, #0]
 801f242:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 801f246:	681b      	ldr	r3, [r3, #0]
 801f248:	681b      	ldr	r3, [r3, #0]
 801f24a:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801f24c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801f250:	601a      	str	r2, [r3, #0]
    return (val);
 801f252:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801f256:	681b      	ldr	r3, [r3, #0]
 801f258:	f8c7 39b0 	str.w	r3, [r7, #2480]	; 0x9b0
                val2 = __SXTB16(val1);
 801f25c:	f8d7 29c0 	ldr.w	r2, [r7, #2496]	; 0x9c0
 801f260:	f507 63ef 	add.w	r3, r7, #1912	; 0x778
 801f264:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801f266:	f507 63ef 	add.w	r3, r7, #1912	; 0x778
 801f26a:	681b      	ldr	r3, [r3, #0]
 801f26c:	fa2f f283 	sxtb16	r2, r3
 801f270:	f207 7374 	addw	r3, r7, #1908	; 0x774
 801f274:	601a      	str	r2, [r3, #0]
  return(result);
 801f276:	f207 7374 	addw	r3, r7, #1908	; 0x774
 801f27a:	681b      	ldr	r3, [r3, #0]
 801f27c:	f8c7 39bc 	str.w	r3, [r7, #2492]	; 0x9bc
 801f280:	f207 727c 	addw	r2, r7, #1916	; 0x77c
 801f284:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801f288:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801f28a:	f207 737c 	addw	r3, r7, #1916	; 0x77c
 801f28e:	681b      	ldr	r3, [r3, #0]
 801f290:	681b      	ldr	r3, [r3, #0]
 801f292:	681b      	ldr	r3, [r3, #0]
 801f294:	461a      	mov	r2, r3
 801f296:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801f29a:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801f29c:	f207 737c 	addw	r3, r7, #1916	; 0x77c
 801f2a0:	681b      	ldr	r3, [r3, #0]
 801f2a2:	681b      	ldr	r3, [r3, #0]
 801f2a4:	1d1a      	adds	r2, r3, #4
 801f2a6:	f207 737c 	addw	r3, r7, #1916	; 0x77c
 801f2aa:	681b      	ldr	r3, [r3, #0]
 801f2ac:	601a      	str	r2, [r3, #0]
    return (val);
 801f2ae:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801f2b2:	681b      	ldr	r3, [r3, #0]
                val0 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 801f2b4:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8
                val3 = __SXTB16(val0);
 801f2b8:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801f2bc:	f207 7384 	addw	r3, r7, #1924	; 0x784
 801f2c0:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801f2c2:	f207 7384 	addw	r3, r7, #1924	; 0x784
 801f2c6:	681b      	ldr	r3, [r3, #0]
 801f2c8:	fa2f f283 	sxtb16	r2, r3
 801f2cc:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 801f2d0:	601a      	str	r2, [r3, #0]
  return(result);
 801f2d2:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 801f2d6:	681b      	ldr	r3, [r3, #0]
 801f2d8:	f8c7 39b4 	str.w	r3, [r7, #2484]	; 0x9b4
                val1 = __SXTB16_RORn(val1, 8);
 801f2dc:	f8d7 29c0 	ldr.w	r2, [r7, #2496]	; 0x9c0
 801f2e0:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 801f2e4:	601a      	str	r2, [r3, #0]
 801f2e6:	f207 729c 	addw	r2, r7, #1948	; 0x79c
 801f2ea:	2308      	movs	r3, #8
 801f2ec:	6013      	str	r3, [r2, #0]
 801f2ee:	f507 62f3 	add.w	r2, r7, #1944	; 0x798
 801f2f2:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 801f2f6:	681b      	ldr	r3, [r3, #0]
 801f2f8:	6013      	str	r3, [r2, #0]
 801f2fa:	f207 7294 	addw	r2, r7, #1940	; 0x794
 801f2fe:	f207 739c 	addw	r3, r7, #1948	; 0x79c
 801f302:	681b      	ldr	r3, [r3, #0]
 801f304:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801f306:	f207 7294 	addw	r2, r7, #1940	; 0x794
 801f30a:	f207 7394 	addw	r3, r7, #1940	; 0x794
 801f30e:	681b      	ldr	r3, [r3, #0]
 801f310:	f003 031f 	and.w	r3, r3, #31
 801f314:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801f316:	f207 7394 	addw	r3, r7, #1940	; 0x794
 801f31a:	681b      	ldr	r3, [r3, #0]
 801f31c:	2b00      	cmp	r3, #0
 801f31e:	d103      	bne.n	801f328 <arm_nn_mat_mult_nt_t_s8+0xdaa>
    return op1;
 801f320:	f507 63f3 	add.w	r3, r7, #1944	; 0x798
 801f324:	681a      	ldr	r2, [r3, #0]
 801f326:	e006      	b.n	801f336 <arm_nn_mat_mult_nt_t_s8+0xdb8>
  return (op1 >> op2) | (op1 << (32U - op2));
 801f328:	f507 62f3 	add.w	r2, r7, #1944	; 0x798
 801f32c:	f207 7394 	addw	r3, r7, #1940	; 0x794
 801f330:	6812      	ldr	r2, [r2, #0]
 801f332:	681b      	ldr	r3, [r3, #0]
 801f334:	41da      	rors	r2, r3
 801f336:	f507 63f2 	add.w	r3, r7, #1936	; 0x790
 801f33a:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801f33c:	f507 63f2 	add.w	r3, r7, #1936	; 0x790
 801f340:	681b      	ldr	r3, [r3, #0]
 801f342:	fa2f f283 	sxtb16	r2, r3
 801f346:	f207 738c 	addw	r3, r7, #1932	; 0x78c
 801f34a:	601a      	str	r2, [r3, #0]
  return(result);
 801f34c:	f207 738c 	addw	r3, r7, #1932	; 0x78c
 801f350:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801f352:	f507 63f1 	add.w	r3, r7, #1928	; 0x788
 801f356:	601a      	str	r2, [r3, #0]
  return result;
 801f358:	f507 63f1 	add.w	r3, r7, #1928	; 0x788
 801f35c:	681b      	ldr	r3, [r3, #0]
 801f35e:	f8c7 39c0 	str.w	r3, [r7, #2496]	; 0x9c0
                val0 = __SXTB16_RORn(val0, 8);
 801f362:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801f366:	f207 73bc 	addw	r3, r7, #1980	; 0x7bc
 801f36a:	601a      	str	r2, [r3, #0]
 801f36c:	f507 62f7 	add.w	r2, r7, #1976	; 0x7b8
 801f370:	2308      	movs	r3, #8
 801f372:	6013      	str	r3, [r2, #0]
 801f374:	f207 72b4 	addw	r2, r7, #1972	; 0x7b4
 801f378:	f207 73bc 	addw	r3, r7, #1980	; 0x7bc
 801f37c:	681b      	ldr	r3, [r3, #0]
 801f37e:	6013      	str	r3, [r2, #0]
 801f380:	f507 62f6 	add.w	r2, r7, #1968	; 0x7b0
 801f384:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 801f388:	681b      	ldr	r3, [r3, #0]
 801f38a:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801f38c:	f507 62f6 	add.w	r2, r7, #1968	; 0x7b0
 801f390:	f507 63f6 	add.w	r3, r7, #1968	; 0x7b0
 801f394:	681b      	ldr	r3, [r3, #0]
 801f396:	f003 031f 	and.w	r3, r3, #31
 801f39a:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801f39c:	f507 63f6 	add.w	r3, r7, #1968	; 0x7b0
 801f3a0:	681b      	ldr	r3, [r3, #0]
 801f3a2:	2b00      	cmp	r3, #0
 801f3a4:	d103      	bne.n	801f3ae <arm_nn_mat_mult_nt_t_s8+0xe30>
    return op1;
 801f3a6:	f207 73b4 	addw	r3, r7, #1972	; 0x7b4
 801f3aa:	681a      	ldr	r2, [r3, #0]
 801f3ac:	e006      	b.n	801f3bc <arm_nn_mat_mult_nt_t_s8+0xe3e>
  return (op1 >> op2) | (op1 << (32U - op2));
 801f3ae:	f207 72b4 	addw	r2, r7, #1972	; 0x7b4
 801f3b2:	f507 63f6 	add.w	r3, r7, #1968	; 0x7b0
 801f3b6:	6812      	ldr	r2, [r2, #0]
 801f3b8:	681b      	ldr	r3, [r3, #0]
 801f3ba:	41da      	rors	r2, r3
 801f3bc:	f207 73ac 	addw	r3, r7, #1964	; 0x7ac
 801f3c0:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801f3c2:	f207 73ac 	addw	r3, r7, #1964	; 0x7ac
 801f3c6:	681b      	ldr	r3, [r3, #0]
 801f3c8:	fa2f f283 	sxtb16	r2, r3
 801f3cc:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 801f3d0:	601a      	str	r2, [r3, #0]
  return(result);
 801f3d2:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 801f3d6:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801f3d8:	f207 73a4 	addw	r3, r7, #1956	; 0x7a4
 801f3dc:	601a      	str	r2, [r3, #0]
  return result;
 801f3de:	f207 73a4 	addw	r3, r7, #1956	; 0x7a4
 801f3e2:	681b      	ldr	r3, [r3, #0]
 801f3e4:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8

                // 4 x MAC res00, res01
                res00 = __SMLAD(val3, val2, res00);
 801f3e8:	f8d7 29b4 	ldr.w	r2, [r7, #2484]	; 0x9b4
 801f3ec:	f8d7 19bc 	ldr.w	r1, [r7, #2492]	; 0x9bc
 801f3f0:	f8d7 0a24 	ldr.w	r0, [r7, #2596]	; 0xa24
 801f3f4:	f207 73cc 	addw	r3, r7, #1996	; 0x7cc
 801f3f8:	601a      	str	r2, [r3, #0]
 801f3fa:	f507 63f9 	add.w	r3, r7, #1992	; 0x7c8
 801f3fe:	6019      	str	r1, [r3, #0]
 801f400:	f207 73c4 	addw	r3, r7, #1988	; 0x7c4
 801f404:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801f406:	f207 73cc 	addw	r3, r7, #1996	; 0x7cc
 801f40a:	6819      	ldr	r1, [r3, #0]
 801f40c:	f507 63f9 	add.w	r3, r7, #1992	; 0x7c8
 801f410:	681a      	ldr	r2, [r3, #0]
 801f412:	f207 73c4 	addw	r3, r7, #1988	; 0x7c4
 801f416:	681b      	ldr	r3, [r3, #0]
 801f418:	fb21 3202 	smlad	r2, r1, r2, r3
 801f41c:	f507 63f8 	add.w	r3, r7, #1984	; 0x7c0
 801f420:	601a      	str	r2, [r3, #0]
  return(result);
 801f422:	f507 63f8 	add.w	r3, r7, #1984	; 0x7c0
 801f426:	681b      	ldr	r3, [r3, #0]
 801f428:	f8c7 3a24 	str.w	r3, [r7, #2596]	; 0xa24
                val5 = __SXTB16(val4);
 801f42c:	f8d7 29b0 	ldr.w	r2, [r7, #2480]	; 0x9b0
 801f430:	f207 73d4 	addw	r3, r7, #2004	; 0x7d4
 801f434:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801f436:	f207 73d4 	addw	r3, r7, #2004	; 0x7d4
 801f43a:	681b      	ldr	r3, [r3, #0]
 801f43c:	fa2f f283 	sxtb16	r2, r3
 801f440:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 801f444:	601a      	str	r2, [r3, #0]
  return(result);
 801f446:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 801f44a:	681b      	ldr	r3, [r3, #0]
 801f44c:	f8c7 39ac 	str.w	r3, [r7, #2476]	; 0x9ac
                res00 = __SMLAD(val0, val1, res00);
 801f450:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801f454:	f8d7 19c0 	ldr.w	r1, [r7, #2496]	; 0x9c0
 801f458:	f8d7 0a24 	ldr.w	r0, [r7, #2596]	; 0xa24
 801f45c:	f207 73e4 	addw	r3, r7, #2020	; 0x7e4
 801f460:	601a      	str	r2, [r3, #0]
 801f462:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 801f466:	6019      	str	r1, [r3, #0]
 801f468:	f207 73dc 	addw	r3, r7, #2012	; 0x7dc
 801f46c:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801f46e:	f207 73e4 	addw	r3, r7, #2020	; 0x7e4
 801f472:	6819      	ldr	r1, [r3, #0]
 801f474:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 801f478:	681a      	ldr	r2, [r3, #0]
 801f47a:	f207 73dc 	addw	r3, r7, #2012	; 0x7dc
 801f47e:	681b      	ldr	r3, [r3, #0]
 801f480:	fb21 3202 	smlad	r2, r1, r2, r3
 801f484:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 801f488:	601a      	str	r2, [r3, #0]
  return(result);
 801f48a:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 801f48e:	681b      	ldr	r3, [r3, #0]
 801f490:	f8c7 3a24 	str.w	r3, [r7, #2596]	; 0xa24
                val4 = __SXTB16_RORn(val4, 8);
 801f494:	f8d7 29b0 	ldr.w	r2, [r7, #2480]	; 0x9b0
 801f498:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 801f49c:	601a      	str	r2, [r3, #0]
 801f49e:	f207 72fc 	addw	r2, r7, #2044	; 0x7fc
 801f4a2:	2308      	movs	r3, #8
 801f4a4:	6013      	str	r3, [r2, #0]
 801f4a6:	f507 62ff 	add.w	r2, r7, #2040	; 0x7f8
 801f4aa:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 801f4ae:	681b      	ldr	r3, [r3, #0]
 801f4b0:	6013      	str	r3, [r2, #0]
 801f4b2:	f207 72f4 	addw	r2, r7, #2036	; 0x7f4
 801f4b6:	f207 73fc 	addw	r3, r7, #2044	; 0x7fc
 801f4ba:	681b      	ldr	r3, [r3, #0]
 801f4bc:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801f4be:	f207 72f4 	addw	r2, r7, #2036	; 0x7f4
 801f4c2:	f207 73f4 	addw	r3, r7, #2036	; 0x7f4
 801f4c6:	681b      	ldr	r3, [r3, #0]
 801f4c8:	f003 031f 	and.w	r3, r3, #31
 801f4cc:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801f4ce:	f207 73f4 	addw	r3, r7, #2036	; 0x7f4
 801f4d2:	681b      	ldr	r3, [r3, #0]
 801f4d4:	2b00      	cmp	r3, #0
 801f4d6:	d103      	bne.n	801f4e0 <arm_nn_mat_mult_nt_t_s8+0xf62>
    return op1;
 801f4d8:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 801f4dc:	681a      	ldr	r2, [r3, #0]
 801f4de:	e006      	b.n	801f4ee <arm_nn_mat_mult_nt_t_s8+0xf70>
  return (op1 >> op2) | (op1 << (32U - op2));
 801f4e0:	f507 62ff 	add.w	r2, r7, #2040	; 0x7f8
 801f4e4:	f207 73f4 	addw	r3, r7, #2036	; 0x7f4
 801f4e8:	6812      	ldr	r2, [r2, #0]
 801f4ea:	681b      	ldr	r3, [r3, #0]
 801f4ec:	41da      	rors	r2, r3
 801f4ee:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 801f4f2:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801f4f4:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 801f4f8:	681b      	ldr	r3, [r3, #0]
 801f4fa:	fa2f f283 	sxtb16	r2, r3
 801f4fe:	f207 73ec 	addw	r3, r7, #2028	; 0x7ec
 801f502:	601a      	str	r2, [r3, #0]
  return(result);
 801f504:	f207 73ec 	addw	r3, r7, #2028	; 0x7ec
 801f508:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801f50a:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 801f50e:	601a      	str	r2, [r3, #0]
  return result;
 801f510:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 801f514:	681b      	ldr	r3, [r3, #0]
 801f516:	f8c7 39b0 	str.w	r3, [r7, #2480]	; 0x9b0
                res01 = __SMLAD(val3, val5, res01);
 801f51a:	f8d7 29b4 	ldr.w	r2, [r7, #2484]	; 0x9b4
 801f51e:	f8d7 19ac 	ldr.w	r1, [r7, #2476]	; 0x9ac
 801f522:	f8d7 0a20 	ldr.w	r0, [r7, #2592]	; 0xa20
 801f526:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 801f52a:	601a      	str	r2, [r3, #0]
 801f52c:	f607 030c 	addw	r3, r7, #2060	; 0x80c
 801f530:	6019      	str	r1, [r3, #0]
 801f532:	f607 0308 	addw	r3, r7, #2056	; 0x808
 801f536:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801f538:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 801f53c:	6819      	ldr	r1, [r3, #0]
 801f53e:	f607 030c 	addw	r3, r7, #2060	; 0x80c
 801f542:	681a      	ldr	r2, [r3, #0]
 801f544:	f607 0308 	addw	r3, r7, #2056	; 0x808
 801f548:	681b      	ldr	r3, [r3, #0]
 801f54a:	fb21 3202 	smlad	r2, r1, r2, r3
 801f54e:	f607 0304 	addw	r3, r7, #2052	; 0x804
 801f552:	601a      	str	r2, [r3, #0]
  return(result);
 801f554:	f607 0304 	addw	r3, r7, #2052	; 0x804
 801f558:	681b      	ldr	r3, [r3, #0]
 801f55a:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20
                res01 = __SMLAD(val0, val4, res01);
 801f55e:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801f562:	f8d7 19b0 	ldr.w	r1, [r7, #2480]	; 0x9b0
 801f566:	f8d7 0a20 	ldr.w	r0, [r7, #2592]	; 0xa20
 801f56a:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 801f56e:	601a      	str	r2, [r3, #0]
 801f570:	f607 031c 	addw	r3, r7, #2076	; 0x81c
 801f574:	6019      	str	r1, [r3, #0]
 801f576:	f607 0318 	addw	r3, r7, #2072	; 0x818
 801f57a:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801f57c:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 801f580:	6819      	ldr	r1, [r3, #0]
 801f582:	f607 031c 	addw	r3, r7, #2076	; 0x81c
 801f586:	681a      	ldr	r2, [r3, #0]
 801f588:	f607 0318 	addw	r3, r7, #2072	; 0x818
 801f58c:	681b      	ldr	r3, [r3, #0]
 801f58e:	fb21 3202 	smlad	r2, r1, r2, r3
 801f592:	f607 0314 	addw	r3, r7, #2068	; 0x814
 801f596:	601a      	str	r2, [r3, #0]
  return(result);
 801f598:	f607 0314 	addw	r3, r7, #2068	; 0x814
 801f59c:	681b      	ldr	r3, [r3, #0]
 801f59e:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20

                // 4 x MAC res10, res11
                val0 = arm_nn_read_q7x4((const q7_t *)&lhs_ptr[off0]);
 801f5a2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801f5a6:	681a      	ldr	r2, [r3, #0]
 801f5a8:	f8d7 39ec 	ldr.w	r3, [r7, #2540]	; 0x9ec
 801f5ac:	441a      	add	r2, r3
 801f5ae:	f607 0324 	addw	r3, r7, #2084	; 0x824
 801f5b2:	601a      	str	r2, [r3, #0]
 801f5b4:	f607 0324 	addw	r3, r7, #2084	; 0x824
 801f5b8:	681b      	ldr	r3, [r3, #0]
 801f5ba:	681b      	ldr	r3, [r3, #0]
 801f5bc:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801f5be:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801f5c2:	601a      	str	r2, [r3, #0]
    return (val);
 801f5c4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801f5c8:	681b      	ldr	r3, [r3, #0]
 801f5ca:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8
                val3 = __SXTB16(val0);
 801f5ce:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801f5d2:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 801f5d6:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801f5d8:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 801f5dc:	681b      	ldr	r3, [r3, #0]
 801f5de:	fa2f f283 	sxtb16	r2, r3
 801f5e2:	f607 0328 	addw	r3, r7, #2088	; 0x828
 801f5e6:	601a      	str	r2, [r3, #0]
  return(result);
 801f5e8:	f607 0328 	addw	r3, r7, #2088	; 0x828
 801f5ec:	681b      	ldr	r3, [r3, #0]
 801f5ee:	f8c7 39b4 	str.w	r3, [r7, #2484]	; 0x9b4
                val0 = __SXTB16_RORn(val0, 8);
 801f5f2:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801f5f6:	f607 0348 	addw	r3, r7, #2120	; 0x848
 801f5fa:	601a      	str	r2, [r3, #0]
 801f5fc:	f607 0244 	addw	r2, r7, #2116	; 0x844
 801f600:	2308      	movs	r3, #8
 801f602:	6013      	str	r3, [r2, #0]
 801f604:	f507 6204 	add.w	r2, r7, #2112	; 0x840
 801f608:	f607 0348 	addw	r3, r7, #2120	; 0x848
 801f60c:	681b      	ldr	r3, [r3, #0]
 801f60e:	6013      	str	r3, [r2, #0]
 801f610:	f607 023c 	addw	r2, r7, #2108	; 0x83c
 801f614:	f607 0344 	addw	r3, r7, #2116	; 0x844
 801f618:	681b      	ldr	r3, [r3, #0]
 801f61a:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801f61c:	f607 023c 	addw	r2, r7, #2108	; 0x83c
 801f620:	f607 033c 	addw	r3, r7, #2108	; 0x83c
 801f624:	681b      	ldr	r3, [r3, #0]
 801f626:	f003 031f 	and.w	r3, r3, #31
 801f62a:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801f62c:	f607 033c 	addw	r3, r7, #2108	; 0x83c
 801f630:	681b      	ldr	r3, [r3, #0]
 801f632:	2b00      	cmp	r3, #0
 801f634:	d103      	bne.n	801f63e <arm_nn_mat_mult_nt_t_s8+0x10c0>
    return op1;
 801f636:	f507 6304 	add.w	r3, r7, #2112	; 0x840
 801f63a:	681a      	ldr	r2, [r3, #0]
 801f63c:	e006      	b.n	801f64c <arm_nn_mat_mult_nt_t_s8+0x10ce>
  return (op1 >> op2) | (op1 << (32U - op2));
 801f63e:	f507 6204 	add.w	r2, r7, #2112	; 0x840
 801f642:	f607 033c 	addw	r3, r7, #2108	; 0x83c
 801f646:	6812      	ldr	r2, [r2, #0]
 801f648:	681b      	ldr	r3, [r3, #0]
 801f64a:	41da      	rors	r2, r3
 801f64c:	f607 0338 	addw	r3, r7, #2104	; 0x838
 801f650:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801f652:	f607 0338 	addw	r3, r7, #2104	; 0x838
 801f656:	681b      	ldr	r3, [r3, #0]
 801f658:	fa2f f283 	sxtb16	r2, r3
 801f65c:	f607 0334 	addw	r3, r7, #2100	; 0x834
 801f660:	601a      	str	r2, [r3, #0]
  return(result);
 801f662:	f607 0334 	addw	r3, r7, #2100	; 0x834
 801f666:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801f668:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 801f66c:	601a      	str	r2, [r3, #0]
  return result;
 801f66e:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 801f672:	681b      	ldr	r3, [r3, #0]
 801f674:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8
                res10 = __SMLAD(val3, val2, res10);
 801f678:	f8d7 29b4 	ldr.w	r2, [r7, #2484]	; 0x9b4
 801f67c:	f8d7 19bc 	ldr.w	r1, [r7, #2492]	; 0x9bc
 801f680:	f8d7 0a1c 	ldr.w	r0, [r7, #2588]	; 0xa1c
 801f684:	f607 0358 	addw	r3, r7, #2136	; 0x858
 801f688:	601a      	str	r2, [r3, #0]
 801f68a:	f607 0354 	addw	r3, r7, #2132	; 0x854
 801f68e:	6019      	str	r1, [r3, #0]
 801f690:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 801f694:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801f696:	f607 0358 	addw	r3, r7, #2136	; 0x858
 801f69a:	6819      	ldr	r1, [r3, #0]
 801f69c:	f607 0354 	addw	r3, r7, #2132	; 0x854
 801f6a0:	681a      	ldr	r2, [r3, #0]
 801f6a2:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 801f6a6:	681b      	ldr	r3, [r3, #0]
 801f6a8:	fb21 3202 	smlad	r2, r1, r2, r3
 801f6ac:	f607 034c 	addw	r3, r7, #2124	; 0x84c
 801f6b0:	601a      	str	r2, [r3, #0]
  return(result);
 801f6b2:	f607 034c 	addw	r3, r7, #2124	; 0x84c
 801f6b6:	681b      	ldr	r3, [r3, #0]
 801f6b8:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
                res11 = __SMLAD(val3, val5, res11);
 801f6bc:	f8d7 29b4 	ldr.w	r2, [r7, #2484]	; 0x9b4
 801f6c0:	f8d7 19ac 	ldr.w	r1, [r7, #2476]	; 0x9ac
 801f6c4:	f8d7 0a18 	ldr.w	r0, [r7, #2584]	; 0xa18
 801f6c8:	f607 0368 	addw	r3, r7, #2152	; 0x868
 801f6cc:	601a      	str	r2, [r3, #0]
 801f6ce:	f607 0364 	addw	r3, r7, #2148	; 0x864
 801f6d2:	6019      	str	r1, [r3, #0]
 801f6d4:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 801f6d8:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801f6da:	f607 0368 	addw	r3, r7, #2152	; 0x868
 801f6de:	6819      	ldr	r1, [r3, #0]
 801f6e0:	f607 0364 	addw	r3, r7, #2148	; 0x864
 801f6e4:	681a      	ldr	r2, [r3, #0]
 801f6e6:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 801f6ea:	681b      	ldr	r3, [r3, #0]
 801f6ec:	fb21 3202 	smlad	r2, r1, r2, r3
 801f6f0:	f607 035c 	addw	r3, r7, #2140	; 0x85c
 801f6f4:	601a      	str	r2, [r3, #0]
  return(result);
 801f6f6:	f607 035c 	addw	r3, r7, #2140	; 0x85c
 801f6fa:	681b      	ldr	r3, [r3, #0]
 801f6fc:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18
                res10 = __SMLAD(val0, val1, res10);
 801f700:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801f704:	f8d7 19c0 	ldr.w	r1, [r7, #2496]	; 0x9c0
 801f708:	f8d7 0a1c 	ldr.w	r0, [r7, #2588]	; 0xa1c
 801f70c:	f607 0378 	addw	r3, r7, #2168	; 0x878
 801f710:	601a      	str	r2, [r3, #0]
 801f712:	f607 0374 	addw	r3, r7, #2164	; 0x874
 801f716:	6019      	str	r1, [r3, #0]
 801f718:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 801f71c:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801f71e:	f607 0378 	addw	r3, r7, #2168	; 0x878
 801f722:	6819      	ldr	r1, [r3, #0]
 801f724:	f607 0374 	addw	r3, r7, #2164	; 0x874
 801f728:	681a      	ldr	r2, [r3, #0]
 801f72a:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 801f72e:	681b      	ldr	r3, [r3, #0]
 801f730:	fb21 3202 	smlad	r2, r1, r2, r3
 801f734:	f607 036c 	addw	r3, r7, #2156	; 0x86c
 801f738:	601a      	str	r2, [r3, #0]
  return(result);
 801f73a:	f607 036c 	addw	r3, r7, #2156	; 0x86c
 801f73e:	681b      	ldr	r3, [r3, #0]
 801f740:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
 801f744:	f607 027c 	addw	r2, r7, #2172	; 0x87c
 801f748:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 801f74c:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801f74e:	f607 037c 	addw	r3, r7, #2172	; 0x87c
 801f752:	681b      	ldr	r3, [r3, #0]
 801f754:	681b      	ldr	r3, [r3, #0]
 801f756:	681b      	ldr	r3, [r3, #0]
 801f758:	461a      	mov	r2, r3
 801f75a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 801f75e:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801f760:	f607 037c 	addw	r3, r7, #2172	; 0x87c
 801f764:	681b      	ldr	r3, [r3, #0]
 801f766:	681b      	ldr	r3, [r3, #0]
 801f768:	1d1a      	adds	r2, r3, #4
 801f76a:	f607 037c 	addw	r3, r7, #2172	; 0x87c
 801f76e:	681b      	ldr	r3, [r3, #0]
 801f770:	601a      	str	r2, [r3, #0]
    return (val);
 801f772:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 801f776:	681b      	ldr	r3, [r3, #0]
                val1 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 801f778:	f8c7 39c0 	str.w	r3, [r7, #2496]	; 0x9c0
                res11 = __SMLAD(val0, val4, res11);
 801f77c:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801f780:	f8d7 19b0 	ldr.w	r1, [r7, #2480]	; 0x9b0
 801f784:	f8d7 0a18 	ldr.w	r0, [r7, #2584]	; 0xa18
 801f788:	f607 038c 	addw	r3, r7, #2188	; 0x88c
 801f78c:	601a      	str	r2, [r3, #0]
 801f78e:	f607 0388 	addw	r3, r7, #2184	; 0x888
 801f792:	6019      	str	r1, [r3, #0]
 801f794:	f607 0384 	addw	r3, r7, #2180	; 0x884
 801f798:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801f79a:	f607 038c 	addw	r3, r7, #2188	; 0x88c
 801f79e:	6819      	ldr	r1, [r3, #0]
 801f7a0:	f607 0388 	addw	r3, r7, #2184	; 0x888
 801f7a4:	681a      	ldr	r2, [r3, #0]
 801f7a6:	f607 0384 	addw	r3, r7, #2180	; 0x884
 801f7aa:	681b      	ldr	r3, [r3, #0]
 801f7ac:	fb21 3202 	smlad	r2, r1, r2, r3
 801f7b0:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 801f7b4:	601a      	str	r2, [r3, #0]
  return(result);
 801f7b6:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 801f7ba:	681b      	ldr	r3, [r3, #0]
 801f7bc:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18

                val4 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 801f7c0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 801f7c4:	681a      	ldr	r2, [r3, #0]
 801f7c6:	f8d7 39ec 	ldr.w	r3, [r7, #2540]	; 0x9ec
 801f7ca:	441a      	add	r2, r3
 801f7cc:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 801f7d0:	601a      	str	r2, [r3, #0]
 801f7d2:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 801f7d6:	681b      	ldr	r3, [r3, #0]
 801f7d8:	681b      	ldr	r3, [r3, #0]
 801f7da:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801f7dc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801f7e0:	601a      	str	r2, [r3, #0]
    return (val);
 801f7e2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801f7e6:	681b      	ldr	r3, [r3, #0]
 801f7e8:	f8c7 39b0 	str.w	r3, [r7, #2480]	; 0x9b0
                val2 = __SXTB16(val1);
 801f7ec:	f8d7 29c0 	ldr.w	r2, [r7, #2496]	; 0x9c0
 801f7f0:	f607 0398 	addw	r3, r7, #2200	; 0x898
 801f7f4:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801f7f6:	f607 0398 	addw	r3, r7, #2200	; 0x898
 801f7fa:	681b      	ldr	r3, [r3, #0]
 801f7fc:	fa2f f283 	sxtb16	r2, r3
 801f800:	f607 0394 	addw	r3, r7, #2196	; 0x894
 801f804:	601a      	str	r2, [r3, #0]
  return(result);
 801f806:	f607 0394 	addw	r3, r7, #2196	; 0x894
 801f80a:	681b      	ldr	r3, [r3, #0]
 801f80c:	f8c7 39bc 	str.w	r3, [r7, #2492]	; 0x9bc
 801f810:	f607 029c 	addw	r2, r7, #2204	; 0x89c
 801f814:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801f818:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801f81a:	f607 039c 	addw	r3, r7, #2204	; 0x89c
 801f81e:	681b      	ldr	r3, [r3, #0]
 801f820:	681b      	ldr	r3, [r3, #0]
 801f822:	681b      	ldr	r3, [r3, #0]
 801f824:	461a      	mov	r2, r3
 801f826:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801f82a:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801f82c:	f607 039c 	addw	r3, r7, #2204	; 0x89c
 801f830:	681b      	ldr	r3, [r3, #0]
 801f832:	681b      	ldr	r3, [r3, #0]
 801f834:	1d1a      	adds	r2, r3, #4
 801f836:	f607 039c 	addw	r3, r7, #2204	; 0x89c
 801f83a:	681b      	ldr	r3, [r3, #0]
 801f83c:	601a      	str	r2, [r3, #0]
    return (val);
 801f83e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801f842:	681b      	ldr	r3, [r3, #0]
                val0 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 801f844:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8
                val3 = __SXTB16(val0);
 801f848:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801f84c:	f607 03a4 	addw	r3, r7, #2212	; 0x8a4
 801f850:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801f852:	f607 03a4 	addw	r3, r7, #2212	; 0x8a4
 801f856:	681b      	ldr	r3, [r3, #0]
 801f858:	fa2f f283 	sxtb16	r2, r3
 801f85c:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 801f860:	601a      	str	r2, [r3, #0]
  return(result);
 801f862:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 801f866:	681b      	ldr	r3, [r3, #0]
 801f868:	f8c7 39b4 	str.w	r3, [r7, #2484]	; 0x9b4
                val1 = __SXTB16_RORn(val1, 8);
 801f86c:	f8d7 29c0 	ldr.w	r2, [r7, #2496]	; 0x9c0
 801f870:	f507 630c 	add.w	r3, r7, #2240	; 0x8c0
 801f874:	601a      	str	r2, [r3, #0]
 801f876:	f607 02bc 	addw	r2, r7, #2236	; 0x8bc
 801f87a:	2308      	movs	r3, #8
 801f87c:	6013      	str	r3, [r2, #0]
 801f87e:	f607 02b8 	addw	r2, r7, #2232	; 0x8b8
 801f882:	f507 630c 	add.w	r3, r7, #2240	; 0x8c0
 801f886:	681b      	ldr	r3, [r3, #0]
 801f888:	6013      	str	r3, [r2, #0]
 801f88a:	f607 02b4 	addw	r2, r7, #2228	; 0x8b4
 801f88e:	f607 03bc 	addw	r3, r7, #2236	; 0x8bc
 801f892:	681b      	ldr	r3, [r3, #0]
 801f894:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801f896:	f607 02b4 	addw	r2, r7, #2228	; 0x8b4
 801f89a:	f607 03b4 	addw	r3, r7, #2228	; 0x8b4
 801f89e:	681b      	ldr	r3, [r3, #0]
 801f8a0:	f003 031f 	and.w	r3, r3, #31
 801f8a4:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801f8a6:	f607 03b4 	addw	r3, r7, #2228	; 0x8b4
 801f8aa:	681b      	ldr	r3, [r3, #0]
 801f8ac:	2b00      	cmp	r3, #0
 801f8ae:	d103      	bne.n	801f8b8 <arm_nn_mat_mult_nt_t_s8+0x133a>
    return op1;
 801f8b0:	f607 03b8 	addw	r3, r7, #2232	; 0x8b8
 801f8b4:	681a      	ldr	r2, [r3, #0]
 801f8b6:	e006      	b.n	801f8c6 <arm_nn_mat_mult_nt_t_s8+0x1348>
  return (op1 >> op2) | (op1 << (32U - op2));
 801f8b8:	f607 02b8 	addw	r2, r7, #2232	; 0x8b8
 801f8bc:	f607 03b4 	addw	r3, r7, #2228	; 0x8b4
 801f8c0:	6812      	ldr	r2, [r2, #0]
 801f8c2:	681b      	ldr	r3, [r3, #0]
 801f8c4:	41da      	rors	r2, r3
 801f8c6:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 801f8ca:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801f8cc:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 801f8d0:	681b      	ldr	r3, [r3, #0]
 801f8d2:	fa2f f283 	sxtb16	r2, r3
 801f8d6:	f607 03ac 	addw	r3, r7, #2220	; 0x8ac
 801f8da:	601a      	str	r2, [r3, #0]
  return(result);
 801f8dc:	f607 03ac 	addw	r3, r7, #2220	; 0x8ac
 801f8e0:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801f8e2:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 801f8e6:	601a      	str	r2, [r3, #0]
  return result;
 801f8e8:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 801f8ec:	681b      	ldr	r3, [r3, #0]
 801f8ee:	f8c7 39c0 	str.w	r3, [r7, #2496]	; 0x9c0
                val0 = __SXTB16_RORn(val0, 8);
 801f8f2:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801f8f6:	f607 03dc 	addw	r3, r7, #2268	; 0x8dc
 801f8fa:	601a      	str	r2, [r3, #0]
 801f8fc:	f607 02d8 	addw	r2, r7, #2264	; 0x8d8
 801f900:	2308      	movs	r3, #8
 801f902:	6013      	str	r3, [r2, #0]
 801f904:	f607 02d4 	addw	r2, r7, #2260	; 0x8d4
 801f908:	f607 03dc 	addw	r3, r7, #2268	; 0x8dc
 801f90c:	681b      	ldr	r3, [r3, #0]
 801f90e:	6013      	str	r3, [r2, #0]
 801f910:	f507 620d 	add.w	r2, r7, #2256	; 0x8d0
 801f914:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 801f918:	681b      	ldr	r3, [r3, #0]
 801f91a:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801f91c:	f507 620d 	add.w	r2, r7, #2256	; 0x8d0
 801f920:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 801f924:	681b      	ldr	r3, [r3, #0]
 801f926:	f003 031f 	and.w	r3, r3, #31
 801f92a:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801f92c:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 801f930:	681b      	ldr	r3, [r3, #0]
 801f932:	2b00      	cmp	r3, #0
 801f934:	d103      	bne.n	801f93e <arm_nn_mat_mult_nt_t_s8+0x13c0>
    return op1;
 801f936:	f607 03d4 	addw	r3, r7, #2260	; 0x8d4
 801f93a:	681a      	ldr	r2, [r3, #0]
 801f93c:	e006      	b.n	801f94c <arm_nn_mat_mult_nt_t_s8+0x13ce>
  return (op1 >> op2) | (op1 << (32U - op2));
 801f93e:	f607 02d4 	addw	r2, r7, #2260	; 0x8d4
 801f942:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 801f946:	6812      	ldr	r2, [r2, #0]
 801f948:	681b      	ldr	r3, [r3, #0]
 801f94a:	41da      	rors	r2, r3
 801f94c:	f607 03cc 	addw	r3, r7, #2252	; 0x8cc
 801f950:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801f952:	f607 03cc 	addw	r3, r7, #2252	; 0x8cc
 801f956:	681b      	ldr	r3, [r3, #0]
 801f958:	fa2f f283 	sxtb16	r2, r3
 801f95c:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 801f960:	601a      	str	r2, [r3, #0]
  return(result);
 801f962:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 801f966:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801f968:	f607 03c4 	addw	r3, r7, #2244	; 0x8c4
 801f96c:	601a      	str	r2, [r3, #0]
  return result;
 801f96e:	f607 03c4 	addw	r3, r7, #2244	; 0x8c4
 801f972:	681b      	ldr	r3, [r3, #0]
 801f974:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8

                // 4 x MAC res00, res01
                res00 = __SMLAD(val3, val2, res00);
 801f978:	f8d7 29b4 	ldr.w	r2, [r7, #2484]	; 0x9b4
 801f97c:	f8d7 19bc 	ldr.w	r1, [r7, #2492]	; 0x9bc
 801f980:	f8d7 0a24 	ldr.w	r0, [r7, #2596]	; 0xa24
 801f984:	f607 03ec 	addw	r3, r7, #2284	; 0x8ec
 801f988:	601a      	str	r2, [r3, #0]
 801f98a:	f607 03e8 	addw	r3, r7, #2280	; 0x8e8
 801f98e:	6019      	str	r1, [r3, #0]
 801f990:	f607 03e4 	addw	r3, r7, #2276	; 0x8e4
 801f994:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801f996:	f607 03ec 	addw	r3, r7, #2284	; 0x8ec
 801f99a:	6819      	ldr	r1, [r3, #0]
 801f99c:	f607 03e8 	addw	r3, r7, #2280	; 0x8e8
 801f9a0:	681a      	ldr	r2, [r3, #0]
 801f9a2:	f607 03e4 	addw	r3, r7, #2276	; 0x8e4
 801f9a6:	681b      	ldr	r3, [r3, #0]
 801f9a8:	fb21 3202 	smlad	r2, r1, r2, r3
 801f9ac:	f507 630e 	add.w	r3, r7, #2272	; 0x8e0
 801f9b0:	601a      	str	r2, [r3, #0]
  return(result);
 801f9b2:	f507 630e 	add.w	r3, r7, #2272	; 0x8e0
 801f9b6:	681b      	ldr	r3, [r3, #0]
 801f9b8:	f8c7 3a24 	str.w	r3, [r7, #2596]	; 0xa24
                val5 = __SXTB16(val4);
 801f9bc:	f8d7 29b0 	ldr.w	r2, [r7, #2480]	; 0x9b0
 801f9c0:	f607 03f4 	addw	r3, r7, #2292	; 0x8f4
 801f9c4:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801f9c6:	f607 03f4 	addw	r3, r7, #2292	; 0x8f4
 801f9ca:	681b      	ldr	r3, [r3, #0]
 801f9cc:	fa2f f283 	sxtb16	r2, r3
 801f9d0:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 801f9d4:	601a      	str	r2, [r3, #0]
  return(result);
 801f9d6:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 801f9da:	681b      	ldr	r3, [r3, #0]
 801f9dc:	f8c7 39ac 	str.w	r3, [r7, #2476]	; 0x9ac
                res00 = __SMLAD(val0, val1, res00);
 801f9e0:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801f9e4:	f8d7 19c0 	ldr.w	r1, [r7, #2496]	; 0x9c0
 801f9e8:	f8d7 0a24 	ldr.w	r0, [r7, #2596]	; 0xa24
 801f9ec:	f607 1304 	addw	r3, r7, #2308	; 0x904
 801f9f0:	601a      	str	r2, [r3, #0]
 801f9f2:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 801f9f6:	6019      	str	r1, [r3, #0]
 801f9f8:	f607 03fc 	addw	r3, r7, #2300	; 0x8fc
 801f9fc:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801f9fe:	f607 1304 	addw	r3, r7, #2308	; 0x904
 801fa02:	6819      	ldr	r1, [r3, #0]
 801fa04:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 801fa08:	681a      	ldr	r2, [r3, #0]
 801fa0a:	f607 03fc 	addw	r3, r7, #2300	; 0x8fc
 801fa0e:	681b      	ldr	r3, [r3, #0]
 801fa10:	fb21 3202 	smlad	r2, r1, r2, r3
 801fa14:	f607 03f8 	addw	r3, r7, #2296	; 0x8f8
 801fa18:	601a      	str	r2, [r3, #0]
  return(result);
 801fa1a:	f607 03f8 	addw	r3, r7, #2296	; 0x8f8
 801fa1e:	681b      	ldr	r3, [r3, #0]
 801fa20:	f8c7 3a24 	str.w	r3, [r7, #2596]	; 0xa24
                val4 = __SXTB16_RORn(val4, 8);
 801fa24:	f8d7 29b0 	ldr.w	r2, [r7, #2480]	; 0x9b0
 801fa28:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 801fa2c:	601a      	str	r2, [r3, #0]
 801fa2e:	f607 121c 	addw	r2, r7, #2332	; 0x91c
 801fa32:	2308      	movs	r3, #8
 801fa34:	6013      	str	r3, [r2, #0]
 801fa36:	f607 1218 	addw	r2, r7, #2328	; 0x918
 801fa3a:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 801fa3e:	681b      	ldr	r3, [r3, #0]
 801fa40:	6013      	str	r3, [r2, #0]
 801fa42:	f607 1214 	addw	r2, r7, #2324	; 0x914
 801fa46:	f607 131c 	addw	r3, r7, #2332	; 0x91c
 801fa4a:	681b      	ldr	r3, [r3, #0]
 801fa4c:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801fa4e:	f607 1214 	addw	r2, r7, #2324	; 0x914
 801fa52:	f607 1314 	addw	r3, r7, #2324	; 0x914
 801fa56:	681b      	ldr	r3, [r3, #0]
 801fa58:	f003 031f 	and.w	r3, r3, #31
 801fa5c:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801fa5e:	f607 1314 	addw	r3, r7, #2324	; 0x914
 801fa62:	681b      	ldr	r3, [r3, #0]
 801fa64:	2b00      	cmp	r3, #0
 801fa66:	d103      	bne.n	801fa70 <arm_nn_mat_mult_nt_t_s8+0x14f2>
    return op1;
 801fa68:	f607 1318 	addw	r3, r7, #2328	; 0x918
 801fa6c:	681a      	ldr	r2, [r3, #0]
 801fa6e:	e006      	b.n	801fa7e <arm_nn_mat_mult_nt_t_s8+0x1500>
  return (op1 >> op2) | (op1 << (32U - op2));
 801fa70:	f607 1218 	addw	r2, r7, #2328	; 0x918
 801fa74:	f607 1314 	addw	r3, r7, #2324	; 0x914
 801fa78:	6812      	ldr	r2, [r2, #0]
 801fa7a:	681b      	ldr	r3, [r3, #0]
 801fa7c:	41da      	rors	r2, r3
 801fa7e:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 801fa82:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801fa84:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 801fa88:	681b      	ldr	r3, [r3, #0]
 801fa8a:	fa2f f283 	sxtb16	r2, r3
 801fa8e:	f607 130c 	addw	r3, r7, #2316	; 0x90c
 801fa92:	601a      	str	r2, [r3, #0]
  return(result);
 801fa94:	f607 130c 	addw	r3, r7, #2316	; 0x90c
 801fa98:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801fa9a:	f607 1308 	addw	r3, r7, #2312	; 0x908
 801fa9e:	601a      	str	r2, [r3, #0]
  return result;
 801faa0:	f607 1308 	addw	r3, r7, #2312	; 0x908
 801faa4:	681b      	ldr	r3, [r3, #0]
 801faa6:	f8c7 39b0 	str.w	r3, [r7, #2480]	; 0x9b0
                res01 = __SMLAD(val3, val5, res01);
 801faaa:	f8d7 29b4 	ldr.w	r2, [r7, #2484]	; 0x9b4
 801faae:	f8d7 19ac 	ldr.w	r1, [r7, #2476]	; 0x9ac
 801fab2:	f8d7 0a20 	ldr.w	r0, [r7, #2592]	; 0xa20
 801fab6:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 801faba:	601a      	str	r2, [r3, #0]
 801fabc:	f607 132c 	addw	r3, r7, #2348	; 0x92c
 801fac0:	6019      	str	r1, [r3, #0]
 801fac2:	f607 1328 	addw	r3, r7, #2344	; 0x928
 801fac6:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801fac8:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 801facc:	6819      	ldr	r1, [r3, #0]
 801face:	f607 132c 	addw	r3, r7, #2348	; 0x92c
 801fad2:	681a      	ldr	r2, [r3, #0]
 801fad4:	f607 1328 	addw	r3, r7, #2344	; 0x928
 801fad8:	681b      	ldr	r3, [r3, #0]
 801fada:	fb21 3202 	smlad	r2, r1, r2, r3
 801fade:	f607 1324 	addw	r3, r7, #2340	; 0x924
 801fae2:	601a      	str	r2, [r3, #0]
  return(result);
 801fae4:	f607 1324 	addw	r3, r7, #2340	; 0x924
 801fae8:	681b      	ldr	r3, [r3, #0]
 801faea:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20
                res01 = __SMLAD(val0, val4, res01);
 801faee:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801faf2:	f8d7 19b0 	ldr.w	r1, [r7, #2480]	; 0x9b0
 801faf6:	f8d7 0a20 	ldr.w	r0, [r7, #2592]	; 0xa20
 801fafa:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 801fafe:	601a      	str	r2, [r3, #0]
 801fb00:	f607 133c 	addw	r3, r7, #2364	; 0x93c
 801fb04:	6019      	str	r1, [r3, #0]
 801fb06:	f607 1338 	addw	r3, r7, #2360	; 0x938
 801fb0a:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801fb0c:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 801fb10:	6819      	ldr	r1, [r3, #0]
 801fb12:	f607 133c 	addw	r3, r7, #2364	; 0x93c
 801fb16:	681a      	ldr	r2, [r3, #0]
 801fb18:	f607 1338 	addw	r3, r7, #2360	; 0x938
 801fb1c:	681b      	ldr	r3, [r3, #0]
 801fb1e:	fb21 3202 	smlad	r2, r1, r2, r3
 801fb22:	f607 1334 	addw	r3, r7, #2356	; 0x934
 801fb26:	601a      	str	r2, [r3, #0]
  return(result);
 801fb28:	f607 1334 	addw	r3, r7, #2356	; 0x934
 801fb2c:	681b      	ldr	r3, [r3, #0]
 801fb2e:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20

                // 4 x MAC res10, res11
                val0 = arm_nn_read_q7x4((const q7_t *)&lhs_ptr[off0]);
 801fb32:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801fb36:	681a      	ldr	r2, [r3, #0]
 801fb38:	f8d7 39ec 	ldr.w	r3, [r7, #2540]	; 0x9ec
 801fb3c:	4413      	add	r3, r2
 801fb3e:	f8c7 3944 	str.w	r3, [r7, #2372]	; 0x944
 801fb42:	f8d7 3944 	ldr.w	r3, [r7, #2372]	; 0x944
 801fb46:	681b      	ldr	r3, [r3, #0]
 801fb48:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801fb4a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801fb4e:	601a      	str	r2, [r3, #0]
    return (val);
 801fb50:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801fb54:	681b      	ldr	r3, [r3, #0]
 801fb56:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8
                val3 = __SXTB16(val0);
 801fb5a:	f8d7 39b8 	ldr.w	r3, [r7, #2488]	; 0x9b8
 801fb5e:	f8c7 394c 	str.w	r3, [r7, #2380]	; 0x94c
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801fb62:	f8d7 394c 	ldr.w	r3, [r7, #2380]	; 0x94c
 801fb66:	fa2f f383 	sxtb16	r3, r3
 801fb6a:	f8c7 3948 	str.w	r3, [r7, #2376]	; 0x948
  return(result);
 801fb6e:	f8d7 3948 	ldr.w	r3, [r7, #2376]	; 0x948
 801fb72:	f8c7 39b4 	str.w	r3, [r7, #2484]	; 0x9b4
                val0 = __SXTB16_RORn(val0, 8);
 801fb76:	f8d7 39b8 	ldr.w	r3, [r7, #2488]	; 0x9b8
 801fb7a:	f8c7 3968 	str.w	r3, [r7, #2408]	; 0x968
 801fb7e:	2308      	movs	r3, #8
 801fb80:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 801fb84:	f8d7 3968 	ldr.w	r3, [r7, #2408]	; 0x968
 801fb88:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 801fb8c:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 801fb90:	f8c7 395c 	str.w	r3, [r7, #2396]	; 0x95c
  op2 %= 32U;
 801fb94:	f8d7 395c 	ldr.w	r3, [r7, #2396]	; 0x95c
 801fb98:	f003 031f 	and.w	r3, r3, #31
 801fb9c:	f8c7 395c 	str.w	r3, [r7, #2396]	; 0x95c
  if (op2 == 0U)
 801fba0:	f8d7 395c 	ldr.w	r3, [r7, #2396]	; 0x95c
 801fba4:	2b00      	cmp	r3, #0
 801fba6:	d102      	bne.n	801fbae <arm_nn_mat_mult_nt_t_s8+0x1630>
    return op1;
 801fba8:	f8d7 3960 	ldr.w	r3, [r7, #2400]	; 0x960
 801fbac:	e005      	b.n	801fbba <arm_nn_mat_mult_nt_t_s8+0x163c>
  return (op1 >> op2) | (op1 << (32U - op2));
 801fbae:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 801fbb2:	f8d7 395c 	ldr.w	r3, [r7, #2396]	; 0x95c
 801fbb6:	fa62 f303 	ror.w	r3, r2, r3
 801fbba:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801fbbe:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 801fbc2:	fa2f f383 	sxtb16	r3, r3
 801fbc6:	f8c7 3954 	str.w	r3, [r7, #2388]	; 0x954
  return(result);
 801fbca:	f8d7 3954 	ldr.w	r3, [r7, #2388]	; 0x954
    result = __SXTB16(__ROR(op1, rotate)) ;
 801fbce:	f8c7 3950 	str.w	r3, [r7, #2384]	; 0x950
  return result;
 801fbd2:	f8d7 3950 	ldr.w	r3, [r7, #2384]	; 0x950
 801fbd6:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8
                res10 = __SMLAD(val3, val2, res10);
 801fbda:	f8d7 19b4 	ldr.w	r1, [r7, #2484]	; 0x9b4
 801fbde:	f8d7 29bc 	ldr.w	r2, [r7, #2492]	; 0x9bc
 801fbe2:	f8d7 3a1c 	ldr.w	r3, [r7, #2588]	; 0xa1c
 801fbe6:	f8c7 1978 	str.w	r1, [r7, #2424]	; 0x978
 801fbea:	f8c7 2974 	str.w	r2, [r7, #2420]	; 0x974
 801fbee:	f8c7 3970 	str.w	r3, [r7, #2416]	; 0x970
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801fbf2:	f8d7 1978 	ldr.w	r1, [r7, #2424]	; 0x978
 801fbf6:	f8d7 2974 	ldr.w	r2, [r7, #2420]	; 0x974
 801fbfa:	f8d7 3970 	ldr.w	r3, [r7, #2416]	; 0x970
 801fbfe:	fb21 3302 	smlad	r3, r1, r2, r3
 801fc02:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
  return(result);
 801fc06:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 801fc0a:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
                res11 = __SMLAD(val3, val5, res11);
 801fc0e:	f8d7 19b4 	ldr.w	r1, [r7, #2484]	; 0x9b4
 801fc12:	f8d7 29ac 	ldr.w	r2, [r7, #2476]	; 0x9ac
 801fc16:	f8d7 3a18 	ldr.w	r3, [r7, #2584]	; 0xa18
 801fc1a:	f8c7 1988 	str.w	r1, [r7, #2440]	; 0x988
 801fc1e:	f8c7 2984 	str.w	r2, [r7, #2436]	; 0x984
 801fc22:	f8c7 3980 	str.w	r3, [r7, #2432]	; 0x980
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801fc26:	f8d7 1988 	ldr.w	r1, [r7, #2440]	; 0x988
 801fc2a:	f8d7 2984 	ldr.w	r2, [r7, #2436]	; 0x984
 801fc2e:	f8d7 3980 	ldr.w	r3, [r7, #2432]	; 0x980
 801fc32:	fb21 3302 	smlad	r3, r1, r2, r3
 801fc36:	f8c7 397c 	str.w	r3, [r7, #2428]	; 0x97c
  return(result);
 801fc3a:	f8d7 397c 	ldr.w	r3, [r7, #2428]	; 0x97c
 801fc3e:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18
                res10 = __SMLAD(val0, val1, res10);
 801fc42:	f8d7 19b8 	ldr.w	r1, [r7, #2488]	; 0x9b8
 801fc46:	f8d7 29c0 	ldr.w	r2, [r7, #2496]	; 0x9c0
 801fc4a:	f8d7 3a1c 	ldr.w	r3, [r7, #2588]	; 0xa1c
 801fc4e:	f8c7 1998 	str.w	r1, [r7, #2456]	; 0x998
 801fc52:	f8c7 2994 	str.w	r2, [r7, #2452]	; 0x994
 801fc56:	f8c7 3990 	str.w	r3, [r7, #2448]	; 0x990
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801fc5a:	f8d7 1998 	ldr.w	r1, [r7, #2456]	; 0x998
 801fc5e:	f8d7 2994 	ldr.w	r2, [r7, #2452]	; 0x994
 801fc62:	f8d7 3990 	ldr.w	r3, [r7, #2448]	; 0x990
 801fc66:	fb21 3302 	smlad	r3, r1, r2, r3
 801fc6a:	f8c7 398c 	str.w	r3, [r7, #2444]	; 0x98c
  return(result);
 801fc6e:	f8d7 398c 	ldr.w	r3, [r7, #2444]	; 0x98c
 801fc72:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
                res11 = __SMLAD(val0, val4, res11);
 801fc76:	f8d7 19b8 	ldr.w	r1, [r7, #2488]	; 0x9b8
 801fc7a:	f8d7 29b0 	ldr.w	r2, [r7, #2480]	; 0x9b0
 801fc7e:	f8d7 3a18 	ldr.w	r3, [r7, #2584]	; 0xa18
 801fc82:	f8c7 19a8 	str.w	r1, [r7, #2472]	; 0x9a8
 801fc86:	f8c7 29a4 	str.w	r2, [r7, #2468]	; 0x9a4
 801fc8a:	f8c7 39a0 	str.w	r3, [r7, #2464]	; 0x9a0
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801fc8e:	f8d7 19a8 	ldr.w	r1, [r7, #2472]	; 0x9a8
 801fc92:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 801fc96:	f8d7 39a0 	ldr.w	r3, [r7, #2464]	; 0x9a0
 801fc9a:	fb21 3302 	smlad	r3, r1, r2, r3
 801fc9e:	f8c7 399c 	str.w	r3, [r7, #2460]	; 0x99c
  return(result);
 801fca2:	f8d7 399c 	ldr.w	r3, [r7, #2460]	; 0x99c
 801fca6:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 801fcaa:	f8d7 3a14 	ldr.w	r3, [r7, #2580]	; 0xa14
 801fcae:	3310      	adds	r3, #16
 801fcb0:	f8c7 3a14 	str.w	r3, [r7, #2580]	; 0xa14
 801fcb4:	f8d7 3a70 	ldr.w	r3, [r7, #2672]	; 0xa70
 801fcb8:	f1a3 020f 	sub.w	r2, r3, #15
 801fcbc:	f8d7 3a14 	ldr.w	r3, [r7, #2580]	; 0xa14
 801fcc0:	4293      	cmp	r3, r2
 801fcc2:	f6fe ad09 	blt.w	801e6d8 <arm_nn_mat_mult_nt_t_s8+0x15a>
            }

            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 801fcc6:	e05c      	b.n	801fd82 <arm_nn_mat_mult_nt_t_s8+0x1804>
            {
                q7_t rhs_value0 = rhs_ptr[0];
 801fcc8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 801fccc:	681b      	ldr	r3, [r3, #0]
 801fcce:	781b      	ldrb	r3, [r3, #0]
 801fcd0:	f887 39c7 	strb.w	r3, [r7, #2503]	; 0x9c7
                q7_t rhs_value1 = rhs_ptr[rhs_cols];
 801fcd4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 801fcd8:	681a      	ldr	r2, [r3, #0]
 801fcda:	f8d7 3a70 	ldr.w	r3, [r7, #2672]	; 0xa70
 801fcde:	4413      	add	r3, r2
 801fce0:	781b      	ldrb	r3, [r3, #0]
 801fce2:	f887 39c6 	strb.w	r3, [r7, #2502]	; 0x9c6
                q7_t lhs_value = lhs_ptr[0];
 801fce6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801fcea:	681b      	ldr	r3, [r3, #0]
 801fcec:	781b      	ldrb	r3, [r3, #0]
 801fcee:	f887 39c5 	strb.w	r3, [r7, #2501]	; 0x9c5

                res00 += lhs_value * rhs_value0;
 801fcf2:	f997 29c5 	ldrsb.w	r2, [r7, #2501]	; 0x9c5
 801fcf6:	f997 39c7 	ldrsb.w	r3, [r7, #2503]	; 0x9c7
 801fcfa:	fb03 f202 	mul.w	r2, r3, r2
 801fcfe:	f8d7 3a24 	ldr.w	r3, [r7, #2596]	; 0xa24
 801fd02:	4413      	add	r3, r2
 801fd04:	f8c7 3a24 	str.w	r3, [r7, #2596]	; 0xa24
                res01 += lhs_value * rhs_value1;
 801fd08:	f997 29c5 	ldrsb.w	r2, [r7, #2501]	; 0x9c5
 801fd0c:	f997 39c6 	ldrsb.w	r3, [r7, #2502]	; 0x9c6
 801fd10:	fb03 f202 	mul.w	r2, r3, r2
 801fd14:	f8d7 3a20 	ldr.w	r3, [r7, #2592]	; 0xa20
 801fd18:	4413      	add	r3, r2
 801fd1a:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20

                lhs_value = lhs_ptr[rhs_cols];
 801fd1e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801fd22:	681a      	ldr	r2, [r3, #0]
 801fd24:	f8d7 3a70 	ldr.w	r3, [r7, #2672]	; 0xa70
 801fd28:	4413      	add	r3, r2
 801fd2a:	781b      	ldrb	r3, [r3, #0]
 801fd2c:	f887 39c5 	strb.w	r3, [r7, #2501]	; 0x9c5
                res10 += lhs_value * rhs_value0;
 801fd30:	f997 29c5 	ldrsb.w	r2, [r7, #2501]	; 0x9c5
 801fd34:	f997 39c7 	ldrsb.w	r3, [r7, #2503]	; 0x9c7
 801fd38:	fb03 f202 	mul.w	r2, r3, r2
 801fd3c:	f8d7 3a1c 	ldr.w	r3, [r7, #2588]	; 0xa1c
 801fd40:	4413      	add	r3, r2
 801fd42:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
                res11 += lhs_value * rhs_value1;
 801fd46:	f997 29c5 	ldrsb.w	r2, [r7, #2501]	; 0x9c5
 801fd4a:	f997 39c6 	ldrsb.w	r3, [r7, #2502]	; 0x9c6
 801fd4e:	fb03 f202 	mul.w	r2, r3, r2
 801fd52:	f8d7 3a18 	ldr.w	r3, [r7, #2584]	; 0xa18
 801fd56:	4413      	add	r3, r2
 801fd58:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18

                ++rhs_ptr;
 801fd5c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 801fd60:	681b      	ldr	r3, [r3, #0]
 801fd62:	1c5a      	adds	r2, r3, #1
 801fd64:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 801fd68:	601a      	str	r2, [r3, #0]
                ++lhs_ptr;
 801fd6a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801fd6e:	681b      	ldr	r3, [r3, #0]
 801fd70:	1c5a      	adds	r2, r3, #1
 801fd72:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801fd76:	601a      	str	r2, [r3, #0]
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 801fd78:	f8d7 3a14 	ldr.w	r3, [r7, #2580]	; 0xa14
 801fd7c:	3301      	adds	r3, #1
 801fd7e:	f8c7 3a14 	str.w	r3, [r7, #2580]	; 0xa14
 801fd82:	f8d7 2a14 	ldr.w	r2, [r7, #2580]	; 0xa14
 801fd86:	f8d7 3a70 	ldr.w	r3, [r7, #2672]	; 0xa70
 801fd8a:	429a      	cmp	r2, r3
 801fd8c:	db9c      	blt.n	801fcc8 <arm_nn_mat_mult_nt_t_s8+0x174a>
            }

            // Quantize down
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows_idx], dst_shifts[rhs_rows_idx]);
 801fd8e:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 801fd92:	009a      	lsls	r2, r3, #2
 801fd94:	f8d7 3a60 	ldr.w	r3, [r7, #2656]	; 0xa60
 801fd98:	4413      	add	r3, r2
 801fd9a:	6818      	ldr	r0, [r3, #0]
 801fd9c:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 801fda0:	009a      	lsls	r2, r3, #2
 801fda2:	f8d7 3a64 	ldr.w	r3, [r7, #2660]	; 0xa64
 801fda6:	4413      	add	r3, r2
 801fda8:	6819      	ldr	r1, [r3, #0]
 801fdaa:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 801fdae:	f8d7 3a24 	ldr.w	r3, [r7, #2596]	; 0xa24
 801fdb2:	6013      	str	r3, [r2, #0]
 801fdb4:	f207 4394 	addw	r3, r7, #1172	; 0x494
 801fdb8:	6018      	str	r0, [r3, #0]
 801fdba:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 801fdbe:	6019      	str	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801fdc0:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 801fdc4:	681b      	ldr	r3, [r3, #0]
 801fdc6:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 801fdca:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 801fdce:	681b      	ldr	r3, [r3, #0]
 801fdd0:	fa03 f202 	lsl.w	r2, r3, r2
 801fdd4:	f207 438c 	addw	r3, r7, #1164	; 0x48c
 801fdd8:	601a      	str	r2, [r3, #0]
 801fdda:	f507 6291 	add.w	r2, r7, #1160	; 0x488
 801fdde:	f207 4394 	addw	r3, r7, #1172	; 0x494
 801fde2:	681b      	ldr	r3, [r3, #0]
 801fde4:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801fde6:	f207 4284 	addw	r2, r7, #1156	; 0x484
 801fdea:	2300      	movs	r3, #0
 801fdec:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 801fdee:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 801fdf2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801fdf6:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 801fdf8:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 801fdfc:	2300      	movs	r3, #0
 801fdfe:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801fe00:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801fe04:	e9d3 8900 	ldrd	r8, r9, [r3]
 801fe08:	f207 438c 	addw	r3, r7, #1164	; 0x48c
 801fe0c:	681b      	ldr	r3, [r3, #0]
 801fe0e:	4618      	mov	r0, r3
 801fe10:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801fe14:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 801fe18:	681b      	ldr	r3, [r3, #0]
 801fe1a:	461a      	mov	r2, r3
 801fe1c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801fe20:	fb02 f501 	mul.w	r5, r2, r1
 801fe24:	fb00 f403 	mul.w	r4, r0, r3
 801fe28:	442c      	add	r4, r5
 801fe2a:	fba0 2302 	umull	r2, r3, r0, r2
 801fe2e:	18e1      	adds	r1, r4, r3
 801fe30:	460b      	mov	r3, r1
 801fe32:	eb18 0102 	adds.w	r1, r8, r2
 801fe36:	6139      	str	r1, [r7, #16]
 801fe38:	eb49 0303 	adc.w	r3, r9, r3
 801fe3c:	617b      	str	r3, [r7, #20]
 801fe3e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801fe42:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 801fe46:	e9c3 1200 	strd	r1, r2, [r3]
    result = (int32_t)(mult.long_long >> 31);
 801fe4a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801fe4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fe52:	f04f 0000 	mov.w	r0, #0
 801fe56:	f04f 0100 	mov.w	r1, #0
 801fe5a:	0fd0      	lsrs	r0, r2, #31
 801fe5c:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801fe60:	17d9      	asrs	r1, r3, #31
 801fe62:	f207 4284 	addw	r2, r7, #1156	; 0x484
 801fe66:	4603      	mov	r3, r0
 801fe68:	6013      	str	r3, [r2, #0]
    return result;
 801fe6a:	f207 4384 	addw	r3, r7, #1156	; 0x484
 801fe6e:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801fe70:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 801fe74:	681b      	ldr	r3, [r3, #0]
 801fe76:	2b00      	cmp	r3, #0
 801fe78:	dc04      	bgt.n	801fe84 <arm_nn_mat_mult_nt_t_s8+0x1906>
 801fe7a:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 801fe7e:	681b      	ldr	r3, [r3, #0]
 801fe80:	425a      	negs	r2, r3
 801fe82:	e000      	b.n	801fe86 <arm_nn_mat_mult_nt_t_s8+0x1908>
 801fe84:	2200      	movs	r2, #0
 801fe86:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 801fe8a:	6019      	str	r1, [r3, #0]
 801fe8c:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 801fe90:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801fe92:	f507 628f 	add.w	r2, r7, #1144	; 0x478
 801fe96:	2300      	movs	r3, #0
 801fe98:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801fe9a:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 801fe9e:	2201      	movs	r2, #1
 801fea0:	681b      	ldr	r3, [r3, #0]
 801fea2:	fa02 f303 	lsl.w	r3, r2, r3
 801fea6:	f207 4274 	addw	r2, r7, #1140	; 0x474
 801feaa:	3b01      	subs	r3, #1
 801feac:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 801feae:	f507 618e 	add.w	r1, r7, #1136	; 0x470
 801feb2:	f507 6290 	add.w	r2, r7, #1152	; 0x480
 801feb6:	f207 4374 	addw	r3, r7, #1140	; 0x474
 801feba:	6812      	ldr	r2, [r2, #0]
 801febc:	681b      	ldr	r3, [r3, #0]
 801febe:	4013      	ands	r3, r2
 801fec0:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 801fec2:	f507 618f 	add.w	r1, r7, #1144	; 0x478
 801fec6:	f507 6290 	add.w	r2, r7, #1152	; 0x480
 801feca:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 801fece:	6812      	ldr	r2, [r2, #0]
 801fed0:	681b      	ldr	r3, [r3, #0]
 801fed2:	fa42 f303 	asr.w	r3, r2, r3
 801fed6:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 801fed8:	f207 426c 	addw	r2, r7, #1132	; 0x46c
 801fedc:	f207 4374 	addw	r3, r7, #1140	; 0x474
 801fee0:	681b      	ldr	r3, [r3, #0]
 801fee2:	105b      	asrs	r3, r3, #1
 801fee4:	6013      	str	r3, [r2, #0]
    if (result < 0)
 801fee6:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 801feea:	681b      	ldr	r3, [r3, #0]
 801feec:	2b00      	cmp	r3, #0
 801feee:	da06      	bge.n	801fefe <arm_nn_mat_mult_nt_t_s8+0x1980>
        threshold++;
 801fef0:	f207 426c 	addw	r2, r7, #1132	; 0x46c
 801fef4:	f207 436c 	addw	r3, r7, #1132	; 0x46c
 801fef8:	681b      	ldr	r3, [r3, #0]
 801fefa:	3301      	adds	r3, #1
 801fefc:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 801fefe:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 801ff02:	f207 436c 	addw	r3, r7, #1132	; 0x46c
 801ff06:	6812      	ldr	r2, [r2, #0]
 801ff08:	681b      	ldr	r3, [r3, #0]
 801ff0a:	429a      	cmp	r2, r3
 801ff0c:	dd06      	ble.n	801ff1c <arm_nn_mat_mult_nt_t_s8+0x199e>
        result++;
 801ff0e:	f507 628f 	add.w	r2, r7, #1144	; 0x478
 801ff12:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 801ff16:	681b      	ldr	r3, [r3, #0]
 801ff18:	3301      	adds	r3, #1
 801ff1a:	6013      	str	r3, [r2, #0]
    return result;
 801ff1c:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 801ff20:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801ff22:	bf00      	nop
 801ff24:	f8c7 3a24 	str.w	r3, [r7, #2596]	; 0xa24
            res01 = arm_nn_requantize(res01, dst_multipliers[rhs_rows_idx + 1], dst_shifts[rhs_rows_idx + 1]);
 801ff28:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 801ff2c:	3301      	adds	r3, #1
 801ff2e:	009a      	lsls	r2, r3, #2
 801ff30:	f8d7 3a60 	ldr.w	r3, [r7, #2656]	; 0xa60
 801ff34:	4413      	add	r3, r2
 801ff36:	6818      	ldr	r0, [r3, #0]
 801ff38:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 801ff3c:	3301      	adds	r3, #1
 801ff3e:	009a      	lsls	r2, r3, #2
 801ff40:	f8d7 3a64 	ldr.w	r3, [r7, #2660]	; 0xa64
 801ff44:	4413      	add	r3, r2
 801ff46:	6819      	ldr	r1, [r3, #0]
 801ff48:	f507 6299 	add.w	r2, r7, #1224	; 0x4c8
 801ff4c:	f8d7 3a20 	ldr.w	r3, [r7, #2592]	; 0xa20
 801ff50:	6013      	str	r3, [r2, #0]
 801ff52:	f207 43c4 	addw	r3, r7, #1220	; 0x4c4
 801ff56:	6018      	str	r0, [r3, #0]
 801ff58:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 801ff5c:	6019      	str	r1, [r3, #0]
 801ff5e:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 801ff62:	681b      	ldr	r3, [r3, #0]
 801ff64:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 801ff68:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 801ff6c:	681b      	ldr	r3, [r3, #0]
 801ff6e:	fa03 f202 	lsl.w	r2, r3, r2
 801ff72:	f207 43bc 	addw	r3, r7, #1212	; 0x4bc
 801ff76:	601a      	str	r2, [r3, #0]
 801ff78:	f507 6297 	add.w	r2, r7, #1208	; 0x4b8
 801ff7c:	f207 43c4 	addw	r3, r7, #1220	; 0x4c4
 801ff80:	681b      	ldr	r3, [r3, #0]
 801ff82:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801ff84:	f207 42b4 	addw	r2, r7, #1204	; 0x4b4
 801ff88:	2300      	movs	r3, #0
 801ff8a:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 801ff8c:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 801ff90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801ff94:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 801ff96:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 801ff9a:	2300      	movs	r3, #0
 801ff9c:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801ff9e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801ffa2:	e9d3 8900 	ldrd	r8, r9, [r3]
 801ffa6:	f207 43bc 	addw	r3, r7, #1212	; 0x4bc
 801ffaa:	681b      	ldr	r3, [r3, #0]
 801ffac:	4618      	mov	r0, r3
 801ffae:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801ffb2:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 801ffb6:	681b      	ldr	r3, [r3, #0]
 801ffb8:	461a      	mov	r2, r3
 801ffba:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801ffbe:	fb02 f501 	mul.w	r5, r2, r1
 801ffc2:	fb00 f403 	mul.w	r4, r0, r3
 801ffc6:	442c      	add	r4, r5
 801ffc8:	fba0 2302 	umull	r2, r3, r0, r2
 801ffcc:	18e1      	adds	r1, r4, r3
 801ffce:	460b      	mov	r3, r1
 801ffd0:	eb18 0102 	adds.w	r1, r8, r2
 801ffd4:	61b9      	str	r1, [r7, #24]
 801ffd6:	eb49 0303 	adc.w	r3, r9, r3
 801ffda:	61fb      	str	r3, [r7, #28]
 801ffdc:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801ffe0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 801ffe4:	e9c3 1200 	strd	r1, r2, [r3]
    result = (int32_t)(mult.long_long >> 31);
 801ffe8:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801ffec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fff0:	f04f 0000 	mov.w	r0, #0
 801fff4:	f04f 0100 	mov.w	r1, #0
 801fff8:	0fd0      	lsrs	r0, r2, #31
 801fffa:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801fffe:	17d9      	asrs	r1, r3, #31
 8020000:	f207 42b4 	addw	r2, r7, #1204	; 0x4b4
 8020004:	4603      	mov	r3, r0
 8020006:	6013      	str	r3, [r2, #0]
    return result;
 8020008:	f207 43b4 	addw	r3, r7, #1204	; 0x4b4
 802000c:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 802000e:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8020012:	681b      	ldr	r3, [r3, #0]
 8020014:	2b00      	cmp	r3, #0
 8020016:	dc04      	bgt.n	8020022 <arm_nn_mat_mult_nt_t_s8+0x1aa4>
 8020018:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 802001c:	681b      	ldr	r3, [r3, #0]
 802001e:	425a      	negs	r2, r3
 8020020:	e000      	b.n	8020024 <arm_nn_mat_mult_nt_t_s8+0x1aa6>
 8020022:	2200      	movs	r2, #0
 8020024:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8020028:	6019      	str	r1, [r3, #0]
 802002a:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 802002e:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8020030:	f507 6295 	add.w	r2, r7, #1192	; 0x4a8
 8020034:	2300      	movs	r3, #0
 8020036:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8020038:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 802003c:	2201      	movs	r2, #1
 802003e:	681b      	ldr	r3, [r3, #0]
 8020040:	fa02 f303 	lsl.w	r3, r2, r3
 8020044:	f207 42a4 	addw	r2, r7, #1188	; 0x4a4
 8020048:	3b01      	subs	r3, #1
 802004a:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 802004c:	f507 6194 	add.w	r1, r7, #1184	; 0x4a0
 8020050:	f507 6296 	add.w	r2, r7, #1200	; 0x4b0
 8020054:	f207 43a4 	addw	r3, r7, #1188	; 0x4a4
 8020058:	6812      	ldr	r2, [r2, #0]
 802005a:	681b      	ldr	r3, [r3, #0]
 802005c:	4013      	ands	r3, r2
 802005e:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 8020060:	f507 6195 	add.w	r1, r7, #1192	; 0x4a8
 8020064:	f507 6296 	add.w	r2, r7, #1200	; 0x4b0
 8020068:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 802006c:	6812      	ldr	r2, [r2, #0]
 802006e:	681b      	ldr	r3, [r3, #0]
 8020070:	fa42 f303 	asr.w	r3, r2, r3
 8020074:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 8020076:	f207 429c 	addw	r2, r7, #1180	; 0x49c
 802007a:	f207 43a4 	addw	r3, r7, #1188	; 0x4a4
 802007e:	681b      	ldr	r3, [r3, #0]
 8020080:	105b      	asrs	r3, r3, #1
 8020082:	6013      	str	r3, [r2, #0]
    if (result < 0)
 8020084:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 8020088:	681b      	ldr	r3, [r3, #0]
 802008a:	2b00      	cmp	r3, #0
 802008c:	da06      	bge.n	802009c <arm_nn_mat_mult_nt_t_s8+0x1b1e>
        threshold++;
 802008e:	f207 429c 	addw	r2, r7, #1180	; 0x49c
 8020092:	f207 439c 	addw	r3, r7, #1180	; 0x49c
 8020096:	681b      	ldr	r3, [r3, #0]
 8020098:	3301      	adds	r3, #1
 802009a:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 802009c:	f507 6294 	add.w	r2, r7, #1184	; 0x4a0
 80200a0:	f207 439c 	addw	r3, r7, #1180	; 0x49c
 80200a4:	6812      	ldr	r2, [r2, #0]
 80200a6:	681b      	ldr	r3, [r3, #0]
 80200a8:	429a      	cmp	r2, r3
 80200aa:	dd06      	ble.n	80200ba <arm_nn_mat_mult_nt_t_s8+0x1b3c>
        result++;
 80200ac:	f507 6295 	add.w	r2, r7, #1192	; 0x4a8
 80200b0:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 80200b4:	681b      	ldr	r3, [r3, #0]
 80200b6:	3301      	adds	r3, #1
 80200b8:	6013      	str	r3, [r2, #0]
    return result;
 80200ba:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 80200be:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80200c0:	bf00      	nop
 80200c2:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20
            res10 = arm_nn_requantize(res10, dst_multipliers[rhs_rows_idx], dst_shifts[rhs_rows_idx]);
 80200c6:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 80200ca:	009a      	lsls	r2, r3, #2
 80200cc:	f8d7 3a60 	ldr.w	r3, [r7, #2656]	; 0xa60
 80200d0:	4413      	add	r3, r2
 80200d2:	6818      	ldr	r0, [r3, #0]
 80200d4:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 80200d8:	009a      	lsls	r2, r3, #2
 80200da:	f8d7 3a64 	ldr.w	r3, [r7, #2660]	; 0xa64
 80200de:	4413      	add	r3, r2
 80200e0:	6819      	ldr	r1, [r3, #0]
 80200e2:	f507 629f 	add.w	r2, r7, #1272	; 0x4f8
 80200e6:	f8d7 3a1c 	ldr.w	r3, [r7, #2588]	; 0xa1c
 80200ea:	6013      	str	r3, [r2, #0]
 80200ec:	f207 43f4 	addw	r3, r7, #1268	; 0x4f4
 80200f0:	6018      	str	r0, [r3, #0]
 80200f2:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 80200f6:	6019      	str	r1, [r3, #0]
 80200f8:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 80200fc:	681b      	ldr	r3, [r3, #0]
 80200fe:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8020102:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 8020106:	681b      	ldr	r3, [r3, #0]
 8020108:	fa03 f202 	lsl.w	r2, r3, r2
 802010c:	f207 43ec 	addw	r3, r7, #1260	; 0x4ec
 8020110:	601a      	str	r2, [r3, #0]
 8020112:	f507 629d 	add.w	r2, r7, #1256	; 0x4e8
 8020116:	f207 43f4 	addw	r3, r7, #1268	; 0x4f4
 802011a:	681b      	ldr	r3, [r3, #0]
 802011c:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 802011e:	f207 42e4 	addw	r2, r7, #1252	; 0x4e4
 8020122:	2300      	movs	r3, #0
 8020124:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 8020126:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 802012a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 802012e:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 8020130:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8020134:	2300      	movs	r3, #0
 8020136:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8020138:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 802013c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8020140:	f207 43ec 	addw	r3, r7, #1260	; 0x4ec
 8020144:	681b      	ldr	r3, [r3, #0]
 8020146:	4618      	mov	r0, r3
 8020148:	ea4f 71e0 	mov.w	r1, r0, asr #31
 802014c:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8020150:	681b      	ldr	r3, [r3, #0]
 8020152:	461a      	mov	r2, r3
 8020154:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8020158:	fb02 f501 	mul.w	r5, r2, r1
 802015c:	fb00 f403 	mul.w	r4, r0, r3
 8020160:	442c      	add	r4, r5
 8020162:	fba0 2302 	umull	r2, r3, r0, r2
 8020166:	18e1      	adds	r1, r4, r3
 8020168:	460b      	mov	r3, r1
 802016a:	eb18 0102 	adds.w	r1, r8, r2
 802016e:	6239      	str	r1, [r7, #32]
 8020170:	eb49 0303 	adc.w	r3, r9, r3
 8020174:	627b      	str	r3, [r7, #36]	; 0x24
 8020176:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 802017a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 802017e:	e9c3 1200 	strd	r1, r2, [r3]
    result = (int32_t)(mult.long_long >> 31);
 8020182:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8020186:	e9d3 2300 	ldrd	r2, r3, [r3]
 802018a:	f04f 0000 	mov.w	r0, #0
 802018e:	f04f 0100 	mov.w	r1, #0
 8020192:	0fd0      	lsrs	r0, r2, #31
 8020194:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8020198:	17d9      	asrs	r1, r3, #31
 802019a:	f207 42e4 	addw	r2, r7, #1252	; 0x4e4
 802019e:	4603      	mov	r3, r0
 80201a0:	6013      	str	r3, [r2, #0]
    return result;
 80201a2:	f207 43e4 	addw	r3, r7, #1252	; 0x4e4
 80201a6:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80201a8:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 80201ac:	681b      	ldr	r3, [r3, #0]
 80201ae:	2b00      	cmp	r3, #0
 80201b0:	dc04      	bgt.n	80201bc <arm_nn_mat_mult_nt_t_s8+0x1c3e>
 80201b2:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 80201b6:	681b      	ldr	r3, [r3, #0]
 80201b8:	425a      	negs	r2, r3
 80201ba:	e000      	b.n	80201be <arm_nn_mat_mult_nt_t_s8+0x1c40>
 80201bc:	2200      	movs	r2, #0
 80201be:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 80201c2:	6019      	str	r1, [r3, #0]
 80201c4:	f207 43dc 	addw	r3, r7, #1244	; 0x4dc
 80201c8:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 80201ca:	f507 629b 	add.w	r2, r7, #1240	; 0x4d8
 80201ce:	2300      	movs	r3, #0
 80201d0:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 80201d2:	f207 43dc 	addw	r3, r7, #1244	; 0x4dc
 80201d6:	2201      	movs	r2, #1
 80201d8:	681b      	ldr	r3, [r3, #0]
 80201da:	fa02 f303 	lsl.w	r3, r2, r3
 80201de:	f207 42d4 	addw	r2, r7, #1236	; 0x4d4
 80201e2:	3b01      	subs	r3, #1
 80201e4:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 80201e6:	f507 619a 	add.w	r1, r7, #1232	; 0x4d0
 80201ea:	f507 629c 	add.w	r2, r7, #1248	; 0x4e0
 80201ee:	f207 43d4 	addw	r3, r7, #1236	; 0x4d4
 80201f2:	6812      	ldr	r2, [r2, #0]
 80201f4:	681b      	ldr	r3, [r3, #0]
 80201f6:	4013      	ands	r3, r2
 80201f8:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 80201fa:	f507 619b 	add.w	r1, r7, #1240	; 0x4d8
 80201fe:	f507 629c 	add.w	r2, r7, #1248	; 0x4e0
 8020202:	f207 43dc 	addw	r3, r7, #1244	; 0x4dc
 8020206:	6812      	ldr	r2, [r2, #0]
 8020208:	681b      	ldr	r3, [r3, #0]
 802020a:	fa42 f303 	asr.w	r3, r2, r3
 802020e:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 8020210:	f207 42cc 	addw	r2, r7, #1228	; 0x4cc
 8020214:	f207 43d4 	addw	r3, r7, #1236	; 0x4d4
 8020218:	681b      	ldr	r3, [r3, #0]
 802021a:	105b      	asrs	r3, r3, #1
 802021c:	6013      	str	r3, [r2, #0]
    if (result < 0)
 802021e:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8020222:	681b      	ldr	r3, [r3, #0]
 8020224:	2b00      	cmp	r3, #0
 8020226:	da06      	bge.n	8020236 <arm_nn_mat_mult_nt_t_s8+0x1cb8>
        threshold++;
 8020228:	f207 42cc 	addw	r2, r7, #1228	; 0x4cc
 802022c:	f207 43cc 	addw	r3, r7, #1228	; 0x4cc
 8020230:	681b      	ldr	r3, [r3, #0]
 8020232:	3301      	adds	r3, #1
 8020234:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 8020236:	f507 629a 	add.w	r2, r7, #1232	; 0x4d0
 802023a:	f207 43cc 	addw	r3, r7, #1228	; 0x4cc
 802023e:	6812      	ldr	r2, [r2, #0]
 8020240:	681b      	ldr	r3, [r3, #0]
 8020242:	429a      	cmp	r2, r3
 8020244:	dd06      	ble.n	8020254 <arm_nn_mat_mult_nt_t_s8+0x1cd6>
        result++;
 8020246:	f507 629b 	add.w	r2, r7, #1240	; 0x4d8
 802024a:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 802024e:	681b      	ldr	r3, [r3, #0]
 8020250:	3301      	adds	r3, #1
 8020252:	6013      	str	r3, [r2, #0]
    return result;
 8020254:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8020258:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 802025a:	bf00      	nop
 802025c:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
            res11 = arm_nn_requantize(res11, dst_multipliers[rhs_rows_idx + 1], dst_shifts[rhs_rows_idx + 1]);
 8020260:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 8020264:	3301      	adds	r3, #1
 8020266:	009a      	lsls	r2, r3, #2
 8020268:	f8d7 3a60 	ldr.w	r3, [r7, #2656]	; 0xa60
 802026c:	4413      	add	r3, r2
 802026e:	6818      	ldr	r0, [r3, #0]
 8020270:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 8020274:	3301      	adds	r3, #1
 8020276:	009a      	lsls	r2, r3, #2
 8020278:	f8d7 3a64 	ldr.w	r3, [r7, #2660]	; 0xa64
 802027c:	4413      	add	r3, r2
 802027e:	6819      	ldr	r1, [r3, #0]
 8020280:	f507 62a5 	add.w	r2, r7, #1320	; 0x528
 8020284:	f8d7 3a18 	ldr.w	r3, [r7, #2584]	; 0xa18
 8020288:	6013      	str	r3, [r2, #0]
 802028a:	f207 5324 	addw	r3, r7, #1316	; 0x524
 802028e:	6018      	str	r0, [r3, #0]
 8020290:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8020294:	6019      	str	r1, [r3, #0]
 8020296:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 802029a:	681b      	ldr	r3, [r3, #0]
 802029c:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 80202a0:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 80202a4:	681b      	ldr	r3, [r3, #0]
 80202a6:	fa03 f202 	lsl.w	r2, r3, r2
 80202aa:	f207 531c 	addw	r3, r7, #1308	; 0x51c
 80202ae:	601a      	str	r2, [r3, #0]
 80202b0:	f507 62a3 	add.w	r2, r7, #1304	; 0x518
 80202b4:	f207 5324 	addw	r3, r7, #1316	; 0x524
 80202b8:	681b      	ldr	r3, [r3, #0]
 80202ba:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80202bc:	f207 5214 	addw	r2, r7, #1300	; 0x514
 80202c0:	2300      	movs	r3, #0
 80202c2:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 80202c4:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 80202c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80202cc:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 80202ce:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 80202d2:	2300      	movs	r3, #0
 80202d4:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 80202d6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80202da:	e9d3 8900 	ldrd	r8, r9, [r3]
 80202de:	f207 531c 	addw	r3, r7, #1308	; 0x51c
 80202e2:	681b      	ldr	r3, [r3, #0]
 80202e4:	4618      	mov	r0, r3
 80202e6:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80202ea:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 80202ee:	681b      	ldr	r3, [r3, #0]
 80202f0:	461a      	mov	r2, r3
 80202f2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80202f6:	fb02 f501 	mul.w	r5, r2, r1
 80202fa:	fb00 f403 	mul.w	r4, r0, r3
 80202fe:	442c      	add	r4, r5
 8020300:	fba0 2302 	umull	r2, r3, r0, r2
 8020304:	18e1      	adds	r1, r4, r3
 8020306:	460b      	mov	r3, r1
 8020308:	eb18 0102 	adds.w	r1, r8, r2
 802030c:	62b9      	str	r1, [r7, #40]	; 0x28
 802030e:	eb49 0303 	adc.w	r3, r9, r3
 8020312:	62fb      	str	r3, [r7, #44]	; 0x2c
 8020314:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8020318:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 802031c:	e9c3 1200 	strd	r1, r2, [r3]
    result = (int32_t)(mult.long_long >> 31);
 8020320:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8020324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020328:	f04f 0000 	mov.w	r0, #0
 802032c:	f04f 0100 	mov.w	r1, #0
 8020330:	0fd0      	lsrs	r0, r2, #31
 8020332:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8020336:	17d9      	asrs	r1, r3, #31
 8020338:	f207 5214 	addw	r2, r7, #1300	; 0x514
 802033c:	4603      	mov	r3, r0
 802033e:	6013      	str	r3, [r2, #0]
    return result;
 8020340:	f207 5314 	addw	r3, r7, #1300	; 0x514
 8020344:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8020346:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 802034a:	681b      	ldr	r3, [r3, #0]
 802034c:	2b00      	cmp	r3, #0
 802034e:	dc04      	bgt.n	802035a <arm_nn_mat_mult_nt_t_s8+0x1ddc>
 8020350:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8020354:	681b      	ldr	r3, [r3, #0]
 8020356:	425a      	negs	r2, r3
 8020358:	e000      	b.n	802035c <arm_nn_mat_mult_nt_t_s8+0x1dde>
 802035a:	2200      	movs	r2, #0
 802035c:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8020360:	6019      	str	r1, [r3, #0]
 8020362:	f207 530c 	addw	r3, r7, #1292	; 0x50c
 8020366:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8020368:	f507 62a1 	add.w	r2, r7, #1288	; 0x508
 802036c:	2300      	movs	r3, #0
 802036e:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8020370:	f207 530c 	addw	r3, r7, #1292	; 0x50c
 8020374:	2201      	movs	r2, #1
 8020376:	681b      	ldr	r3, [r3, #0]
 8020378:	fa02 f303 	lsl.w	r3, r2, r3
 802037c:	f207 5204 	addw	r2, r7, #1284	; 0x504
 8020380:	3b01      	subs	r3, #1
 8020382:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 8020384:	f507 61a0 	add.w	r1, r7, #1280	; 0x500
 8020388:	f507 62a2 	add.w	r2, r7, #1296	; 0x510
 802038c:	f207 5304 	addw	r3, r7, #1284	; 0x504
 8020390:	6812      	ldr	r2, [r2, #0]
 8020392:	681b      	ldr	r3, [r3, #0]
 8020394:	4013      	ands	r3, r2
 8020396:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 8020398:	f507 61a1 	add.w	r1, r7, #1288	; 0x508
 802039c:	f507 62a2 	add.w	r2, r7, #1296	; 0x510
 80203a0:	f207 530c 	addw	r3, r7, #1292	; 0x50c
 80203a4:	6812      	ldr	r2, [r2, #0]
 80203a6:	681b      	ldr	r3, [r3, #0]
 80203a8:	fa42 f303 	asr.w	r3, r2, r3
 80203ac:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 80203ae:	f207 42fc 	addw	r2, r7, #1276	; 0x4fc
 80203b2:	f207 5304 	addw	r3, r7, #1284	; 0x504
 80203b6:	681b      	ldr	r3, [r3, #0]
 80203b8:	105b      	asrs	r3, r3, #1
 80203ba:	6013      	str	r3, [r2, #0]
    if (result < 0)
 80203bc:	f507 63a1 	add.w	r3, r7, #1288	; 0x508
 80203c0:	681b      	ldr	r3, [r3, #0]
 80203c2:	2b00      	cmp	r3, #0
 80203c4:	da06      	bge.n	80203d4 <arm_nn_mat_mult_nt_t_s8+0x1e56>
        threshold++;
 80203c6:	f207 42fc 	addw	r2, r7, #1276	; 0x4fc
 80203ca:	f207 43fc 	addw	r3, r7, #1276	; 0x4fc
 80203ce:	681b      	ldr	r3, [r3, #0]
 80203d0:	3301      	adds	r3, #1
 80203d2:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 80203d4:	f507 62a0 	add.w	r2, r7, #1280	; 0x500
 80203d8:	f207 43fc 	addw	r3, r7, #1276	; 0x4fc
 80203dc:	6812      	ldr	r2, [r2, #0]
 80203de:	681b      	ldr	r3, [r3, #0]
 80203e0:	429a      	cmp	r2, r3
 80203e2:	dd06      	ble.n	80203f2 <arm_nn_mat_mult_nt_t_s8+0x1e74>
        result++;
 80203e4:	f507 62a1 	add.w	r2, r7, #1288	; 0x508
 80203e8:	f507 63a1 	add.w	r3, r7, #1288	; 0x508
 80203ec:	681b      	ldr	r3, [r3, #0]
 80203ee:	3301      	adds	r3, #1
 80203f0:	6013      	str	r3, [r2, #0]
    return result;
 80203f2:	f507 63a1 	add.w	r3, r7, #1288	; 0x508
 80203f6:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80203f8:	bf00      	nop
 80203fa:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18

            // Add offset
            res00 += dst_offset;
 80203fe:	f8d7 2a24 	ldr.w	r2, [r7, #2596]	; 0xa24
 8020402:	f8d7 3a78 	ldr.w	r3, [r7, #2680]	; 0xa78
 8020406:	4413      	add	r3, r2
 8020408:	f8c7 3a24 	str.w	r3, [r7, #2596]	; 0xa24
            res01 += dst_offset;
 802040c:	f8d7 2a20 	ldr.w	r2, [r7, #2592]	; 0xa20
 8020410:	f8d7 3a78 	ldr.w	r3, [r7, #2680]	; 0xa78
 8020414:	4413      	add	r3, r2
 8020416:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20
            res10 += dst_offset;
 802041a:	f8d7 2a1c 	ldr.w	r2, [r7, #2588]	; 0xa1c
 802041e:	f8d7 3a78 	ldr.w	r3, [r7, #2680]	; 0xa78
 8020422:	4413      	add	r3, r2
 8020424:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
            res11 += dst_offset;
 8020428:	f8d7 2a18 	ldr.w	r2, [r7, #2584]	; 0xa18
 802042c:	f8d7 3a78 	ldr.w	r3, [r7, #2680]	; 0xa78
 8020430:	4413      	add	r3, r2
 8020432:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18

            // Clamp the result
            res00 = MAX(res00, activation_min);
 8020436:	f8d7 2a24 	ldr.w	r2, [r7, #2596]	; 0xa24
 802043a:	f8d7 3a7c 	ldr.w	r3, [r7, #2684]	; 0xa7c
 802043e:	4293      	cmp	r3, r2
 8020440:	bfb8      	it	lt
 8020442:	4613      	movlt	r3, r2
 8020444:	f8c7 3a24 	str.w	r3, [r7, #2596]	; 0xa24
            res00 = MIN(res00, activation_max);
 8020448:	f8d7 2a24 	ldr.w	r2, [r7, #2596]	; 0xa24
 802044c:	f8d7 3a80 	ldr.w	r3, [r7, #2688]	; 0xa80
 8020450:	4293      	cmp	r3, r2
 8020452:	bfa8      	it	ge
 8020454:	4613      	movge	r3, r2
 8020456:	f8c7 3a24 	str.w	r3, [r7, #2596]	; 0xa24
            res01 = MAX(res01, activation_min);
 802045a:	f8d7 2a20 	ldr.w	r2, [r7, #2592]	; 0xa20
 802045e:	f8d7 3a7c 	ldr.w	r3, [r7, #2684]	; 0xa7c
 8020462:	4293      	cmp	r3, r2
 8020464:	bfb8      	it	lt
 8020466:	4613      	movlt	r3, r2
 8020468:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20
            res01 = MIN(res01, activation_max);
 802046c:	f8d7 2a20 	ldr.w	r2, [r7, #2592]	; 0xa20
 8020470:	f8d7 3a80 	ldr.w	r3, [r7, #2688]	; 0xa80
 8020474:	4293      	cmp	r3, r2
 8020476:	bfa8      	it	ge
 8020478:	4613      	movge	r3, r2
 802047a:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20
            res10 = MAX(res10, activation_min);
 802047e:	f8d7 2a1c 	ldr.w	r2, [r7, #2588]	; 0xa1c
 8020482:	f8d7 3a7c 	ldr.w	r3, [r7, #2684]	; 0xa7c
 8020486:	4293      	cmp	r3, r2
 8020488:	bfb8      	it	lt
 802048a:	4613      	movlt	r3, r2
 802048c:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
            res10 = MIN(res10, activation_max);
 8020490:	f8d7 2a1c 	ldr.w	r2, [r7, #2588]	; 0xa1c
 8020494:	f8d7 3a80 	ldr.w	r3, [r7, #2688]	; 0xa80
 8020498:	4293      	cmp	r3, r2
 802049a:	bfa8      	it	ge
 802049c:	4613      	movge	r3, r2
 802049e:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
            res11 = MAX(res11, activation_min);
 80204a2:	f8d7 2a18 	ldr.w	r2, [r7, #2584]	; 0xa18
 80204a6:	f8d7 3a7c 	ldr.w	r3, [r7, #2684]	; 0xa7c
 80204aa:	4293      	cmp	r3, r2
 80204ac:	bfb8      	it	lt
 80204ae:	4613      	movlt	r3, r2
 80204b0:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18
            res11 = MIN(res11, activation_max);
 80204b4:	f8d7 2a18 	ldr.w	r2, [r7, #2584]	; 0xa18
 80204b8:	f8d7 3a80 	ldr.w	r3, [r7, #2688]	; 0xa80
 80204bc:	4293      	cmp	r3, r2
 80204be:	bfa8      	it	ge
 80204c0:	4613      	movge	r3, r2
 80204c2:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18

            dst_ptr[0] = (q7_t)res00;
 80204c6:	f8d7 3a24 	ldr.w	r3, [r7, #2596]	; 0xa24
 80204ca:	b25b      	sxtb	r3, r3
 80204cc:	f8d7 2a38 	ldr.w	r2, [r7, #2616]	; 0xa38
 80204d0:	7013      	strb	r3, [r2, #0]
            dst_ptr[1] = (q7_t)res01;
 80204d2:	f8d7 3a38 	ldr.w	r3, [r7, #2616]	; 0xa38
 80204d6:	1c5a      	adds	r2, r3, #1
 80204d8:	f8d7 3a20 	ldr.w	r3, [r7, #2592]	; 0xa20
 80204dc:	b25b      	sxtb	r3, r3
 80204de:	7013      	strb	r3, [r2, #0]
            dst_ptr += rhs_rows;
 80204e0:	f8d7 2a6c 	ldr.w	r2, [r7, #2668]	; 0xa6c
 80204e4:	f8d7 3a38 	ldr.w	r3, [r7, #2616]	; 0xa38
 80204e8:	4413      	add	r3, r2
 80204ea:	f8c7 3a38 	str.w	r3, [r7, #2616]	; 0xa38
            dst_ptr[0] = (q7_t)res10;
 80204ee:	f8d7 3a1c 	ldr.w	r3, [r7, #2588]	; 0xa1c
 80204f2:	b25b      	sxtb	r3, r3
 80204f4:	f8d7 2a38 	ldr.w	r2, [r7, #2616]	; 0xa38
 80204f8:	7013      	strb	r3, [r2, #0]
            dst_ptr[1] = (q7_t)res11;
 80204fa:	f8d7 3a38 	ldr.w	r3, [r7, #2616]	; 0xa38
 80204fe:	1c5a      	adds	r2, r3, #1
 8020500:	f8d7 3a18 	ldr.w	r3, [r7, #2584]	; 0xa18
 8020504:	b25b      	sxtb	r3, r3
 8020506:	7013      	strb	r3, [r2, #0]
            dst_ptr += rhs_rows;
 8020508:	f8d7 2a6c 	ldr.w	r2, [r7, #2668]	; 0xa6c
 802050c:	f8d7 3a38 	ldr.w	r3, [r7, #2616]	; 0xa38
 8020510:	4413      	add	r3, r2
 8020512:	f8c7 3a38 	str.w	r3, [r7, #2616]	; 0xa38

            lhs_ptr += rhs_cols;
 8020516:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 802051a:	681a      	ldr	r2, [r3, #0]
 802051c:	f8d7 3a70 	ldr.w	r3, [r7, #2672]	; 0xa70
 8020520:	441a      	add	r2, r3
 8020522:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8020526:	601a      	str	r2, [r3, #0]

            lhs_rows_idx--;
 8020528:	f8d7 3a28 	ldr.w	r3, [r7, #2600]	; 0xa28
 802052c:	3b01      	subs	r3, #1
 802052e:	f8c7 3a28 	str.w	r3, [r7, #2600]	; 0xa28
        while (lhs_rows_idx)
 8020532:	f8d7 3a28 	ldr.w	r3, [r7, #2600]	; 0xa28
 8020536:	2b00      	cmp	r3, #0
 8020538:	f47e a8b3 	bne.w	801e6a2 <arm_nn_mat_mult_nt_t_s8+0x124>
        }

        // Left-over rows
        if (lhs_rows % 2)
 802053c:	f8d7 3a68 	ldr.w	r3, [r7, #2664]	; 0xa68
 8020540:	f003 0301 	and.w	r3, r3, #1
 8020544:	2b00      	cmp	r3, #0
 8020546:	f001 8195 	beq.w	8021874 <arm_nn_mat_mult_nt_t_s8+0x32f6>
        {
            const q7_t *rhs_ptr = &rhs[0];
 802054a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 802054e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8020552:	681b      	ldr	r3, [r3, #0]
 8020554:	6013      	str	r3, [r2, #0]

            q31_t res00 = lhs_offset_contribution0;
 8020556:	f8d7 3a34 	ldr.w	r3, [r7, #2612]	; 0xa34
 802055a:	f8c7 3a10 	str.w	r3, [r7, #2576]	; 0xa10
            q31_t res01 = lhs_offset_contribution1;
 802055e:	f8d7 3a30 	ldr.w	r3, [r7, #2608]	; 0xa30
 8020562:	f8c7 3a0c 	str.w	r3, [r7, #2572]	; 0xa0c

            int32_t rhs_cols_idx = 0;
 8020566:	2300      	movs	r3, #0
 8020568:	f8c7 3a08 	str.w	r3, [r7, #2568]	; 0xa08

            q31_t val0, val1, val2, val3, val4, val5;
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 802056c:	f000 bf59 	b.w	8021422 <arm_nn_mat_mult_nt_t_s8+0x2ea4>
 8020570:	f507 72c6 	add.w	r2, r7, #396	; 0x18c
 8020574:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8020578:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 802057a:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 802057e:	681b      	ldr	r3, [r3, #0]
 8020580:	681b      	ldr	r3, [r3, #0]
 8020582:	681b      	ldr	r3, [r3, #0]
 8020584:	461a      	mov	r2, r3
 8020586:	f107 0374 	add.w	r3, r7, #116	; 0x74
 802058a:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 802058c:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8020590:	681b      	ldr	r3, [r3, #0]
 8020592:	681b      	ldr	r3, [r3, #0]
 8020594:	1d1a      	adds	r2, r3, #4
 8020596:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 802059a:	681b      	ldr	r3, [r3, #0]
 802059c:	601a      	str	r2, [r3, #0]
    return (val);
 802059e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80205a2:	681b      	ldr	r3, [r3, #0]
            {
                val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 80205a4:	f8c7 39dc 	str.w	r3, [r7, #2524]	; 0x9dc
                val1 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 80205a8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80205ac:	681a      	ldr	r2, [r3, #0]
 80205ae:	f8d7 39ec 	ldr.w	r3, [r7, #2540]	; 0x9ec
 80205b2:	441a      	add	r2, r3
 80205b4:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80205b8:	601a      	str	r2, [r3, #0]
 80205ba:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80205be:	681b      	ldr	r3, [r3, #0]
 80205c0:	681b      	ldr	r3, [r3, #0]
 80205c2:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 80205c4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80205c8:	601a      	str	r2, [r3, #0]
    return (val);
 80205ca:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80205ce:	681b      	ldr	r3, [r3, #0]
 80205d0:	f8c7 39d8 	str.w	r3, [r7, #2520]	; 0x9d8
 80205d4:	f507 72ca 	add.w	r2, r7, #404	; 0x194
 80205d8:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80205dc:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 80205de:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 80205e2:	681b      	ldr	r3, [r3, #0]
 80205e4:	681b      	ldr	r3, [r3, #0]
 80205e6:	681b      	ldr	r3, [r3, #0]
 80205e8:	461a      	mov	r2, r3
 80205ea:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80205ee:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 80205f0:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 80205f4:	681b      	ldr	r3, [r3, #0]
 80205f6:	681b      	ldr	r3, [r3, #0]
 80205f8:	1d1a      	adds	r2, r3, #4
 80205fa:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 80205fe:	681b      	ldr	r3, [r3, #0]
 8020600:	601a      	str	r2, [r3, #0]
    return (val);
 8020602:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8020606:	681b      	ldr	r3, [r3, #0]
                val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 8020608:	f8c7 39d4 	str.w	r3, [r7, #2516]	; 0x9d4
                val3 = __SXTB16(val0);
 802060c:	f8d7 29dc 	ldr.w	r2, [r7, #2524]	; 0x9dc
 8020610:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8020614:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8020616:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 802061a:	681b      	ldr	r3, [r3, #0]
 802061c:	fa2f f283 	sxtb16	r2, r3
 8020620:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8020624:	601a      	str	r2, [r3, #0]
  return(result);
 8020626:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 802062a:	681b      	ldr	r3, [r3, #0]
 802062c:	f8c7 39d0 	str.w	r3, [r7, #2512]	; 0x9d0
                val5 = __SXTB16(val2);
 8020630:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 8020634:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 8020638:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 802063a:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 802063e:	681b      	ldr	r3, [r3, #0]
 8020640:	fa2f f283 	sxtb16	r2, r3
 8020644:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8020648:	601a      	str	r2, [r3, #0]
  return(result);
 802064a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 802064e:	681b      	ldr	r3, [r3, #0]
 8020650:	f8c7 39cc 	str.w	r3, [r7, #2508]	; 0x9cc
                val4 = __SXTB16(val1);
 8020654:	f8d7 29d8 	ldr.w	r2, [r7, #2520]	; 0x9d8
 8020658:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 802065c:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 802065e:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8020662:	681b      	ldr	r3, [r3, #0]
 8020664:	fa2f f283 	sxtb16	r2, r3
 8020668:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 802066c:	601a      	str	r2, [r3, #0]
  return(result);
 802066e:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8020672:	681b      	ldr	r3, [r3, #0]
 8020674:	f8c7 39c8 	str.w	r3, [r7, #2504]	; 0x9c8
                val0 = __SXTB16_RORn(val0, 8);
 8020678:	f8d7 29dc 	ldr.w	r2, [r7, #2524]	; 0x9dc
 802067c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8020680:	601a      	str	r2, [r3, #0]
 8020682:	f507 72e2 	add.w	r2, r7, #452	; 0x1c4
 8020686:	2308      	movs	r3, #8
 8020688:	6013      	str	r3, [r2, #0]
 802068a:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
 802068e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8020692:	681b      	ldr	r3, [r3, #0]
 8020694:	6013      	str	r3, [r2, #0]
 8020696:	f507 72de 	add.w	r2, r7, #444	; 0x1bc
 802069a:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 802069e:	681b      	ldr	r3, [r3, #0]
 80206a0:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 80206a2:	f507 72de 	add.w	r2, r7, #444	; 0x1bc
 80206a6:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 80206aa:	681b      	ldr	r3, [r3, #0]
 80206ac:	f003 031f 	and.w	r3, r3, #31
 80206b0:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 80206b2:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 80206b6:	681b      	ldr	r3, [r3, #0]
 80206b8:	2b00      	cmp	r3, #0
 80206ba:	d103      	bne.n	80206c4 <arm_nn_mat_mult_nt_t_s8+0x2146>
    return op1;
 80206bc:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 80206c0:	681a      	ldr	r2, [r3, #0]
 80206c2:	e006      	b.n	80206d2 <arm_nn_mat_mult_nt_t_s8+0x2154>
  return (op1 >> op2) | (op1 << (32U - op2));
 80206c4:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
 80206c8:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 80206cc:	6812      	ldr	r2, [r2, #0]
 80206ce:	681b      	ldr	r3, [r3, #0]
 80206d0:	41da      	rors	r2, r3
 80206d2:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80206d6:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80206d8:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80206dc:	681b      	ldr	r3, [r3, #0]
 80206de:	fa2f f283 	sxtb16	r2, r3
 80206e2:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 80206e6:	601a      	str	r2, [r3, #0]
  return(result);
 80206e8:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 80206ec:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 80206ee:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80206f2:	601a      	str	r2, [r3, #0]
  return result;
 80206f4:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80206f8:	681b      	ldr	r3, [r3, #0]
 80206fa:	f8c7 39dc 	str.w	r3, [r7, #2524]	; 0x9dc
                val2 = __SXTB16_RORn(val2, 8);
 80206fe:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 8020702:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 8020706:	601a      	str	r2, [r3, #0]
 8020708:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 802070c:	2308      	movs	r3, #8
 802070e:	6013      	str	r3, [r2, #0]
 8020710:	f507 72ee 	add.w	r2, r7, #476	; 0x1dc
 8020714:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 8020718:	681b      	ldr	r3, [r3, #0]
 802071a:	6013      	str	r3, [r2, #0]
 802071c:	f507 72ec 	add.w	r2, r7, #472	; 0x1d8
 8020720:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8020724:	681b      	ldr	r3, [r3, #0]
 8020726:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8020728:	f507 72ec 	add.w	r2, r7, #472	; 0x1d8
 802072c:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8020730:	681b      	ldr	r3, [r3, #0]
 8020732:	f003 031f 	and.w	r3, r3, #31
 8020736:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8020738:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 802073c:	681b      	ldr	r3, [r3, #0]
 802073e:	2b00      	cmp	r3, #0
 8020740:	d103      	bne.n	802074a <arm_nn_mat_mult_nt_t_s8+0x21cc>
    return op1;
 8020742:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 8020746:	681a      	ldr	r2, [r3, #0]
 8020748:	e006      	b.n	8020758 <arm_nn_mat_mult_nt_t_s8+0x21da>
  return (op1 >> op2) | (op1 << (32U - op2));
 802074a:	f507 72ee 	add.w	r2, r7, #476	; 0x1dc
 802074e:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8020752:	6812      	ldr	r2, [r2, #0]
 8020754:	681b      	ldr	r3, [r3, #0]
 8020756:	41da      	rors	r2, r3
 8020758:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 802075c:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 802075e:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 8020762:	681b      	ldr	r3, [r3, #0]
 8020764:	fa2f f283 	sxtb16	r2, r3
 8020768:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 802076c:	601a      	str	r2, [r3, #0]
  return(result);
 802076e:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8020772:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 8020774:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 8020778:	601a      	str	r2, [r3, #0]
  return result;
 802077a:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 802077e:	681b      	ldr	r3, [r3, #0]
 8020780:	f8c7 39d4 	str.w	r3, [r7, #2516]	; 0x9d4
                val1 = __SXTB16_RORn(val1, 8);
 8020784:	f8d7 29d8 	ldr.w	r2, [r7, #2520]	; 0x9d8
 8020788:	f507 7300 	add.w	r3, r7, #512	; 0x200
 802078c:	601a      	str	r2, [r3, #0]
 802078e:	f507 72fe 	add.w	r2, r7, #508	; 0x1fc
 8020792:	2308      	movs	r3, #8
 8020794:	6013      	str	r3, [r2, #0]
 8020796:	f507 72fc 	add.w	r2, r7, #504	; 0x1f8
 802079a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 802079e:	681b      	ldr	r3, [r3, #0]
 80207a0:	6013      	str	r3, [r2, #0]
 80207a2:	f507 72fa 	add.w	r2, r7, #500	; 0x1f4
 80207a6:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 80207aa:	681b      	ldr	r3, [r3, #0]
 80207ac:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 80207ae:	f507 72fa 	add.w	r2, r7, #500	; 0x1f4
 80207b2:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 80207b6:	681b      	ldr	r3, [r3, #0]
 80207b8:	f003 031f 	and.w	r3, r3, #31
 80207bc:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 80207be:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 80207c2:	681b      	ldr	r3, [r3, #0]
 80207c4:	2b00      	cmp	r3, #0
 80207c6:	d103      	bne.n	80207d0 <arm_nn_mat_mult_nt_t_s8+0x2252>
    return op1;
 80207c8:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 80207cc:	681a      	ldr	r2, [r3, #0]
 80207ce:	e006      	b.n	80207de <arm_nn_mat_mult_nt_t_s8+0x2260>
  return (op1 >> op2) | (op1 << (32U - op2));
 80207d0:	f507 72fc 	add.w	r2, r7, #504	; 0x1f8
 80207d4:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 80207d8:	6812      	ldr	r2, [r2, #0]
 80207da:	681b      	ldr	r3, [r3, #0]
 80207dc:	41da      	rors	r2, r3
 80207de:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80207e2:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80207e4:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80207e8:	681b      	ldr	r3, [r3, #0]
 80207ea:	fa2f f283 	sxtb16	r2, r3
 80207ee:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 80207f2:	601a      	str	r2, [r3, #0]
  return(result);
 80207f4:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 80207f8:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 80207fa:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80207fe:	601a      	str	r2, [r3, #0]
  return result;
 8020800:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8020804:	681b      	ldr	r3, [r3, #0]
 8020806:	f8c7 39d8 	str.w	r3, [r7, #2520]	; 0x9d8

                // 4 x MAC res00, res01
                res00 = __SMLAD(val5, val3, res00);
 802080a:	f8d7 29cc 	ldr.w	r2, [r7, #2508]	; 0x9cc
 802080e:	f8d7 19d0 	ldr.w	r1, [r7, #2512]	; 0x9d0
 8020812:	f8d7 0a10 	ldr.w	r0, [r7, #2576]	; 0xa10
 8020816:	f507 7304 	add.w	r3, r7, #528	; 0x210
 802081a:	601a      	str	r2, [r3, #0]
 802081c:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8020820:	6019      	str	r1, [r3, #0]
 8020822:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8020826:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8020828:	f507 7304 	add.w	r3, r7, #528	; 0x210
 802082c:	6819      	ldr	r1, [r3, #0]
 802082e:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8020832:	681a      	ldr	r2, [r3, #0]
 8020834:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8020838:	681b      	ldr	r3, [r3, #0]
 802083a:	fb21 3202 	smlad	r2, r1, r2, r3
 802083e:	f507 7301 	add.w	r3, r7, #516	; 0x204
 8020842:	601a      	str	r2, [r3, #0]
  return(result);
 8020844:	f507 7301 	add.w	r3, r7, #516	; 0x204
 8020848:	681b      	ldr	r3, [r3, #0]
 802084a:	f8c7 3a10 	str.w	r3, [r7, #2576]	; 0xa10
                res00 = __SMLAD(val2, val0, res00);
 802084e:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 8020852:	f8d7 19dc 	ldr.w	r1, [r7, #2524]	; 0x9dc
 8020856:	f8d7 0a10 	ldr.w	r0, [r7, #2576]	; 0xa10
 802085a:	f507 7308 	add.w	r3, r7, #544	; 0x220
 802085e:	601a      	str	r2, [r3, #0]
 8020860:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8020864:	6019      	str	r1, [r3, #0]
 8020866:	f507 7306 	add.w	r3, r7, #536	; 0x218
 802086a:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 802086c:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8020870:	6819      	ldr	r1, [r3, #0]
 8020872:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8020876:	681a      	ldr	r2, [r3, #0]
 8020878:	f507 7306 	add.w	r3, r7, #536	; 0x218
 802087c:	681b      	ldr	r3, [r3, #0]
 802087e:	fb21 3202 	smlad	r2, r1, r2, r3
 8020882:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8020886:	601a      	str	r2, [r3, #0]
  return(result);
 8020888:	f507 7305 	add.w	r3, r7, #532	; 0x214
 802088c:	681b      	ldr	r3, [r3, #0]
 802088e:	f8c7 3a10 	str.w	r3, [r7, #2576]	; 0xa10
                res01 = __SMLAD(val5, val4, res01);
 8020892:	f8d7 29cc 	ldr.w	r2, [r7, #2508]	; 0x9cc
 8020896:	f8d7 19c8 	ldr.w	r1, [r7, #2504]	; 0x9c8
 802089a:	f8d7 0a0c 	ldr.w	r0, [r7, #2572]	; 0xa0c
 802089e:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80208a2:	601a      	str	r2, [r3, #0]
 80208a4:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 80208a8:	6019      	str	r1, [r3, #0]
 80208aa:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80208ae:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80208b0:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80208b4:	6819      	ldr	r1, [r3, #0]
 80208b6:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 80208ba:	681a      	ldr	r2, [r3, #0]
 80208bc:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80208c0:	681b      	ldr	r3, [r3, #0]
 80208c2:	fb21 3202 	smlad	r2, r1, r2, r3
 80208c6:	f507 7309 	add.w	r3, r7, #548	; 0x224
 80208ca:	601a      	str	r2, [r3, #0]
  return(result);
 80208cc:	f507 7309 	add.w	r3, r7, #548	; 0x224
 80208d0:	681b      	ldr	r3, [r3, #0]
 80208d2:	f8c7 3a0c 	str.w	r3, [r7, #2572]	; 0xa0c
                res01 = __SMLAD(val2, val1, res01);
 80208d6:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 80208da:	f8d7 19d8 	ldr.w	r1, [r7, #2520]	; 0x9d8
 80208de:	f8d7 0a0c 	ldr.w	r0, [r7, #2572]	; 0xa0c
 80208e2:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80208e6:	601a      	str	r2, [r3, #0]
 80208e8:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 80208ec:	6019      	str	r1, [r3, #0]
 80208ee:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80208f2:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80208f4:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80208f8:	6819      	ldr	r1, [r3, #0]
 80208fa:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 80208fe:	681a      	ldr	r2, [r3, #0]
 8020900:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8020904:	681b      	ldr	r3, [r3, #0]
 8020906:	fb21 3202 	smlad	r2, r1, r2, r3
 802090a:	f507 730d 	add.w	r3, r7, #564	; 0x234
 802090e:	601a      	str	r2, [r3, #0]
  return(result);
 8020910:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8020914:	681b      	ldr	r3, [r3, #0]
 8020916:	f8c7 3a0c 	str.w	r3, [r7, #2572]	; 0xa0c
 802091a:	f507 7211 	add.w	r2, r7, #580	; 0x244
 802091e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8020922:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 8020924:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8020928:	681b      	ldr	r3, [r3, #0]
 802092a:	681b      	ldr	r3, [r3, #0]
 802092c:	681b      	ldr	r3, [r3, #0]
 802092e:	461a      	mov	r2, r3
 8020930:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8020934:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8020936:	f507 7311 	add.w	r3, r7, #580	; 0x244
 802093a:	681b      	ldr	r3, [r3, #0]
 802093c:	681b      	ldr	r3, [r3, #0]
 802093e:	1d1a      	adds	r2, r3, #4
 8020940:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8020944:	681b      	ldr	r3, [r3, #0]
 8020946:	601a      	str	r2, [r3, #0]
    return (val);
 8020948:	f107 0368 	add.w	r3, r7, #104	; 0x68
 802094c:	681b      	ldr	r3, [r3, #0]

                val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 802094e:	f8c7 39dc 	str.w	r3, [r7, #2524]	; 0x9dc
                val1 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 8020952:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8020956:	681a      	ldr	r2, [r3, #0]
 8020958:	f8d7 39ec 	ldr.w	r3, [r7, #2540]	; 0x9ec
 802095c:	441a      	add	r2, r3
 802095e:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8020962:	601a      	str	r2, [r3, #0]
 8020964:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8020968:	681b      	ldr	r3, [r3, #0]
 802096a:	681b      	ldr	r3, [r3, #0]
 802096c:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 802096e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8020972:	601a      	str	r2, [r3, #0]
    return (val);
 8020974:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8020978:	681b      	ldr	r3, [r3, #0]
 802097a:	f8c7 39d8 	str.w	r3, [r7, #2520]	; 0x9d8
 802097e:	f507 7213 	add.w	r2, r7, #588	; 0x24c
 8020982:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8020986:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 8020988:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 802098c:	681b      	ldr	r3, [r3, #0]
 802098e:	681b      	ldr	r3, [r3, #0]
 8020990:	681b      	ldr	r3, [r3, #0]
 8020992:	461a      	mov	r2, r3
 8020994:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8020998:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 802099a:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 802099e:	681b      	ldr	r3, [r3, #0]
 80209a0:	681b      	ldr	r3, [r3, #0]
 80209a2:	1d1a      	adds	r2, r3, #4
 80209a4:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 80209a8:	681b      	ldr	r3, [r3, #0]
 80209aa:	601a      	str	r2, [r3, #0]
    return (val);
 80209ac:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80209b0:	681b      	ldr	r3, [r3, #0]
                val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 80209b2:	f8c7 39d4 	str.w	r3, [r7, #2516]	; 0x9d4
                val3 = __SXTB16(val0);
 80209b6:	f8d7 29dc 	ldr.w	r2, [r7, #2524]	; 0x9dc
 80209ba:	f507 7315 	add.w	r3, r7, #596	; 0x254
 80209be:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80209c0:	f507 7315 	add.w	r3, r7, #596	; 0x254
 80209c4:	681b      	ldr	r3, [r3, #0]
 80209c6:	fa2f f283 	sxtb16	r2, r3
 80209ca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80209ce:	601a      	str	r2, [r3, #0]
  return(result);
 80209d0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80209d4:	681b      	ldr	r3, [r3, #0]
 80209d6:	f8c7 39d0 	str.w	r3, [r7, #2512]	; 0x9d0
                val5 = __SXTB16(val2);
 80209da:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 80209de:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 80209e2:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80209e4:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 80209e8:	681b      	ldr	r3, [r3, #0]
 80209ea:	fa2f f283 	sxtb16	r2, r3
 80209ee:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80209f2:	601a      	str	r2, [r3, #0]
  return(result);
 80209f4:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80209f8:	681b      	ldr	r3, [r3, #0]
 80209fa:	f8c7 39cc 	str.w	r3, [r7, #2508]	; 0x9cc
                val4 = __SXTB16(val1);
 80209fe:	f8d7 29d8 	ldr.w	r2, [r7, #2520]	; 0x9d8
 8020a02:	f507 7319 	add.w	r3, r7, #612	; 0x264
 8020a06:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8020a08:	f507 7319 	add.w	r3, r7, #612	; 0x264
 8020a0c:	681b      	ldr	r3, [r3, #0]
 8020a0e:	fa2f f283 	sxtb16	r2, r3
 8020a12:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8020a16:	601a      	str	r2, [r3, #0]
  return(result);
 8020a18:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8020a1c:	681b      	ldr	r3, [r3, #0]
 8020a1e:	f8c7 39c8 	str.w	r3, [r7, #2504]	; 0x9c8
                val0 = __SXTB16_RORn(val0, 8);
 8020a22:	f8d7 29dc 	ldr.w	r2, [r7, #2524]	; 0x9dc
 8020a26:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8020a2a:	601a      	str	r2, [r3, #0]
 8020a2c:	f507 721f 	add.w	r2, r7, #636	; 0x27c
 8020a30:	2308      	movs	r3, #8
 8020a32:	6013      	str	r3, [r2, #0]
 8020a34:	f507 721e 	add.w	r2, r7, #632	; 0x278
 8020a38:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8020a3c:	681b      	ldr	r3, [r3, #0]
 8020a3e:	6013      	str	r3, [r2, #0]
 8020a40:	f507 721d 	add.w	r2, r7, #628	; 0x274
 8020a44:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 8020a48:	681b      	ldr	r3, [r3, #0]
 8020a4a:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8020a4c:	f507 721d 	add.w	r2, r7, #628	; 0x274
 8020a50:	f507 731d 	add.w	r3, r7, #628	; 0x274
 8020a54:	681b      	ldr	r3, [r3, #0]
 8020a56:	f003 031f 	and.w	r3, r3, #31
 8020a5a:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8020a5c:	f507 731d 	add.w	r3, r7, #628	; 0x274
 8020a60:	681b      	ldr	r3, [r3, #0]
 8020a62:	2b00      	cmp	r3, #0
 8020a64:	d103      	bne.n	8020a6e <arm_nn_mat_mult_nt_t_s8+0x24f0>
    return op1;
 8020a66:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8020a6a:	681a      	ldr	r2, [r3, #0]
 8020a6c:	e006      	b.n	8020a7c <arm_nn_mat_mult_nt_t_s8+0x24fe>
  return (op1 >> op2) | (op1 << (32U - op2));
 8020a6e:	f507 721e 	add.w	r2, r7, #632	; 0x278
 8020a72:	f507 731d 	add.w	r3, r7, #628	; 0x274
 8020a76:	6812      	ldr	r2, [r2, #0]
 8020a78:	681b      	ldr	r3, [r3, #0]
 8020a7a:	41da      	rors	r2, r3
 8020a7c:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8020a80:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8020a82:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8020a86:	681b      	ldr	r3, [r3, #0]
 8020a88:	fa2f f283 	sxtb16	r2, r3
 8020a8c:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 8020a90:	601a      	str	r2, [r3, #0]
  return(result);
 8020a92:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 8020a96:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 8020a98:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8020a9c:	601a      	str	r2, [r3, #0]
  return result;
 8020a9e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8020aa2:	681b      	ldr	r3, [r3, #0]
 8020aa4:	f8c7 39dc 	str.w	r3, [r7, #2524]	; 0x9dc
                val2 = __SXTB16_RORn(val2, 8);
 8020aa8:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 8020aac:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 8020ab0:	601a      	str	r2, [r3, #0]
 8020ab2:	f507 7226 	add.w	r2, r7, #664	; 0x298
 8020ab6:	2308      	movs	r3, #8
 8020ab8:	6013      	str	r3, [r2, #0]
 8020aba:	f507 7225 	add.w	r2, r7, #660	; 0x294
 8020abe:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 8020ac2:	681b      	ldr	r3, [r3, #0]
 8020ac4:	6013      	str	r3, [r2, #0]
 8020ac6:	f507 7224 	add.w	r2, r7, #656	; 0x290
 8020aca:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8020ace:	681b      	ldr	r3, [r3, #0]
 8020ad0:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8020ad2:	f507 7224 	add.w	r2, r7, #656	; 0x290
 8020ad6:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8020ada:	681b      	ldr	r3, [r3, #0]
 8020adc:	f003 031f 	and.w	r3, r3, #31
 8020ae0:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8020ae2:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8020ae6:	681b      	ldr	r3, [r3, #0]
 8020ae8:	2b00      	cmp	r3, #0
 8020aea:	d103      	bne.n	8020af4 <arm_nn_mat_mult_nt_t_s8+0x2576>
    return op1;
 8020aec:	f507 7325 	add.w	r3, r7, #660	; 0x294
 8020af0:	681a      	ldr	r2, [r3, #0]
 8020af2:	e006      	b.n	8020b02 <arm_nn_mat_mult_nt_t_s8+0x2584>
  return (op1 >> op2) | (op1 << (32U - op2));
 8020af4:	f507 7225 	add.w	r2, r7, #660	; 0x294
 8020af8:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8020afc:	6812      	ldr	r2, [r2, #0]
 8020afe:	681b      	ldr	r3, [r3, #0]
 8020b00:	41da      	rors	r2, r3
 8020b02:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 8020b06:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8020b08:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 8020b0c:	681b      	ldr	r3, [r3, #0]
 8020b0e:	fa2f f283 	sxtb16	r2, r3
 8020b12:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8020b16:	601a      	str	r2, [r3, #0]
  return(result);
 8020b18:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8020b1c:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 8020b1e:	f507 7321 	add.w	r3, r7, #644	; 0x284
 8020b22:	601a      	str	r2, [r3, #0]
  return result;
 8020b24:	f507 7321 	add.w	r3, r7, #644	; 0x284
 8020b28:	681b      	ldr	r3, [r3, #0]
 8020b2a:	f8c7 39d4 	str.w	r3, [r7, #2516]	; 0x9d4
                val1 = __SXTB16_RORn(val1, 8);
 8020b2e:	f8d7 29d8 	ldr.w	r2, [r7, #2520]	; 0x9d8
 8020b32:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8020b36:	601a      	str	r2, [r3, #0]
 8020b38:	f507 722d 	add.w	r2, r7, #692	; 0x2b4
 8020b3c:	2308      	movs	r3, #8
 8020b3e:	6013      	str	r3, [r2, #0]
 8020b40:	f507 722c 	add.w	r2, r7, #688	; 0x2b0
 8020b44:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8020b48:	681b      	ldr	r3, [r3, #0]
 8020b4a:	6013      	str	r3, [r2, #0]
 8020b4c:	f507 722b 	add.w	r2, r7, #684	; 0x2ac
 8020b50:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 8020b54:	681b      	ldr	r3, [r3, #0]
 8020b56:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8020b58:	f507 722b 	add.w	r2, r7, #684	; 0x2ac
 8020b5c:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 8020b60:	681b      	ldr	r3, [r3, #0]
 8020b62:	f003 031f 	and.w	r3, r3, #31
 8020b66:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8020b68:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 8020b6c:	681b      	ldr	r3, [r3, #0]
 8020b6e:	2b00      	cmp	r3, #0
 8020b70:	d103      	bne.n	8020b7a <arm_nn_mat_mult_nt_t_s8+0x25fc>
    return op1;
 8020b72:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8020b76:	681a      	ldr	r2, [r3, #0]
 8020b78:	e006      	b.n	8020b88 <arm_nn_mat_mult_nt_t_s8+0x260a>
  return (op1 >> op2) | (op1 << (32U - op2));
 8020b7a:	f507 722c 	add.w	r2, r7, #688	; 0x2b0
 8020b7e:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 8020b82:	6812      	ldr	r2, [r2, #0]
 8020b84:	681b      	ldr	r3, [r3, #0]
 8020b86:	41da      	rors	r2, r3
 8020b88:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8020b8c:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8020b8e:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8020b92:	681b      	ldr	r3, [r3, #0]
 8020b94:	fa2f f283 	sxtb16	r2, r3
 8020b98:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 8020b9c:	601a      	str	r2, [r3, #0]
  return(result);
 8020b9e:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 8020ba2:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 8020ba4:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8020ba8:	601a      	str	r2, [r3, #0]
  return result;
 8020baa:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8020bae:	681b      	ldr	r3, [r3, #0]
 8020bb0:	f8c7 39d8 	str.w	r3, [r7, #2520]	; 0x9d8

                // 4 x MAC res00, res01
                res00 = __SMLAD(val5, val3, res00);
 8020bb4:	f8d7 29cc 	ldr.w	r2, [r7, #2508]	; 0x9cc
 8020bb8:	f8d7 19d0 	ldr.w	r1, [r7, #2512]	; 0x9d0
 8020bbc:	f8d7 0a10 	ldr.w	r0, [r7, #2576]	; 0xa10
 8020bc0:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8020bc4:	601a      	str	r2, [r3, #0]
 8020bc6:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 8020bca:	6019      	str	r1, [r3, #0]
 8020bcc:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8020bd0:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8020bd2:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8020bd6:	6819      	ldr	r1, [r3, #0]
 8020bd8:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 8020bdc:	681a      	ldr	r2, [r3, #0]
 8020bde:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8020be2:	681b      	ldr	r3, [r3, #0]
 8020be4:	fb21 3202 	smlad	r2, r1, r2, r3
 8020be8:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 8020bec:	601a      	str	r2, [r3, #0]
  return(result);
 8020bee:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 8020bf2:	681b      	ldr	r3, [r3, #0]
 8020bf4:	f8c7 3a10 	str.w	r3, [r7, #2576]	; 0xa10
                res00 = __SMLAD(val2, val0, res00);
 8020bf8:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 8020bfc:	f8d7 19dc 	ldr.w	r1, [r7, #2524]	; 0x9dc
 8020c00:	f8d7 0a10 	ldr.w	r0, [r7, #2576]	; 0xa10
 8020c04:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8020c08:	601a      	str	r2, [r3, #0]
 8020c0a:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 8020c0e:	6019      	str	r1, [r3, #0]
 8020c10:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8020c14:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8020c16:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8020c1a:	6819      	ldr	r1, [r3, #0]
 8020c1c:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 8020c20:	681a      	ldr	r2, [r3, #0]
 8020c22:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8020c26:	681b      	ldr	r3, [r3, #0]
 8020c28:	fb21 3202 	smlad	r2, r1, r2, r3
 8020c2c:	f507 7333 	add.w	r3, r7, #716	; 0x2cc
 8020c30:	601a      	str	r2, [r3, #0]
  return(result);
 8020c32:	f507 7333 	add.w	r3, r7, #716	; 0x2cc
 8020c36:	681b      	ldr	r3, [r3, #0]
 8020c38:	f8c7 3a10 	str.w	r3, [r7, #2576]	; 0xa10
                res01 = __SMLAD(val5, val4, res01);
 8020c3c:	f8d7 29cc 	ldr.w	r2, [r7, #2508]	; 0x9cc
 8020c40:	f8d7 19c8 	ldr.w	r1, [r7, #2504]	; 0x9c8
 8020c44:	f8d7 0a0c 	ldr.w	r0, [r7, #2572]	; 0xa0c
 8020c48:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 8020c4c:	601a      	str	r2, [r3, #0]
 8020c4e:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 8020c52:	6019      	str	r1, [r3, #0]
 8020c54:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8020c58:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8020c5a:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 8020c5e:	6819      	ldr	r1, [r3, #0]
 8020c60:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 8020c64:	681a      	ldr	r2, [r3, #0]
 8020c66:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8020c6a:	681b      	ldr	r3, [r3, #0]
 8020c6c:	fb21 3202 	smlad	r2, r1, r2, r3
 8020c70:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 8020c74:	601a      	str	r2, [r3, #0]
  return(result);
 8020c76:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 8020c7a:	681b      	ldr	r3, [r3, #0]
 8020c7c:	f8c7 3a0c 	str.w	r3, [r7, #2572]	; 0xa0c
                res01 = __SMLAD(val2, val1, res01);
 8020c80:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 8020c84:	f8d7 19d8 	ldr.w	r1, [r7, #2520]	; 0x9d8
 8020c88:	f8d7 0a0c 	ldr.w	r0, [r7, #2572]	; 0xa0c
 8020c8c:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8020c90:	601a      	str	r2, [r3, #0]
 8020c92:	f507 733d 	add.w	r3, r7, #756	; 0x2f4
 8020c96:	6019      	str	r1, [r3, #0]
 8020c98:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8020c9c:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8020c9e:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8020ca2:	6819      	ldr	r1, [r3, #0]
 8020ca4:	f507 733d 	add.w	r3, r7, #756	; 0x2f4
 8020ca8:	681a      	ldr	r2, [r3, #0]
 8020caa:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8020cae:	681b      	ldr	r3, [r3, #0]
 8020cb0:	fb21 3202 	smlad	r2, r1, r2, r3
 8020cb4:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 8020cb8:	601a      	str	r2, [r3, #0]
  return(result);
 8020cba:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 8020cbe:	681b      	ldr	r3, [r3, #0]
 8020cc0:	f8c7 3a0c 	str.w	r3, [r7, #2572]	; 0xa0c
 8020cc4:	f507 723f 	add.w	r2, r7, #764	; 0x2fc
 8020cc8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8020ccc:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 8020cce:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 8020cd2:	681b      	ldr	r3, [r3, #0]
 8020cd4:	681b      	ldr	r3, [r3, #0]
 8020cd6:	681b      	ldr	r3, [r3, #0]
 8020cd8:	461a      	mov	r2, r3
 8020cda:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8020cde:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8020ce0:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 8020ce4:	681b      	ldr	r3, [r3, #0]
 8020ce6:	681b      	ldr	r3, [r3, #0]
 8020ce8:	1d1a      	adds	r2, r3, #4
 8020cea:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 8020cee:	681b      	ldr	r3, [r3, #0]
 8020cf0:	601a      	str	r2, [r3, #0]
    return (val);
 8020cf2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8020cf6:	681b      	ldr	r3, [r3, #0]

                val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 8020cf8:	f8c7 39dc 	str.w	r3, [r7, #2524]	; 0x9dc
                val1 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 8020cfc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8020d00:	681a      	ldr	r2, [r3, #0]
 8020d02:	f8d7 39ec 	ldr.w	r3, [r7, #2540]	; 0x9ec
 8020d06:	441a      	add	r2, r3
 8020d08:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8020d0c:	601a      	str	r2, [r3, #0]
 8020d0e:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8020d12:	681b      	ldr	r3, [r3, #0]
 8020d14:	681b      	ldr	r3, [r3, #0]
 8020d16:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 8020d18:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8020d1c:	601a      	str	r2, [r3, #0]
    return (val);
 8020d1e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8020d22:	681b      	ldr	r3, [r3, #0]
 8020d24:	f8c7 39d8 	str.w	r3, [r7, #2520]	; 0x9d8
 8020d28:	f507 7241 	add.w	r2, r7, #772	; 0x304
 8020d2c:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8020d30:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 8020d32:	f507 7341 	add.w	r3, r7, #772	; 0x304
 8020d36:	681b      	ldr	r3, [r3, #0]
 8020d38:	681b      	ldr	r3, [r3, #0]
 8020d3a:	681b      	ldr	r3, [r3, #0]
 8020d3c:	461a      	mov	r2, r3
 8020d3e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8020d42:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8020d44:	f507 7341 	add.w	r3, r7, #772	; 0x304
 8020d48:	681b      	ldr	r3, [r3, #0]
 8020d4a:	681b      	ldr	r3, [r3, #0]
 8020d4c:	1d1a      	adds	r2, r3, #4
 8020d4e:	f507 7341 	add.w	r3, r7, #772	; 0x304
 8020d52:	681b      	ldr	r3, [r3, #0]
 8020d54:	601a      	str	r2, [r3, #0]
    return (val);
 8020d56:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8020d5a:	681b      	ldr	r3, [r3, #0]
                val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 8020d5c:	f8c7 39d4 	str.w	r3, [r7, #2516]	; 0x9d4
                val3 = __SXTB16(val0);
 8020d60:	f8d7 29dc 	ldr.w	r2, [r7, #2524]	; 0x9dc
 8020d64:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 8020d68:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8020d6a:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 8020d6e:	681b      	ldr	r3, [r3, #0]
 8020d70:	fa2f f283 	sxtb16	r2, r3
 8020d74:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8020d78:	601a      	str	r2, [r3, #0]
  return(result);
 8020d7a:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8020d7e:	681b      	ldr	r3, [r3, #0]
 8020d80:	f8c7 39d0 	str.w	r3, [r7, #2512]	; 0x9d0
                val5 = __SXTB16(val2);
 8020d84:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 8020d88:	f507 7345 	add.w	r3, r7, #788	; 0x314
 8020d8c:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8020d8e:	f507 7345 	add.w	r3, r7, #788	; 0x314
 8020d92:	681b      	ldr	r3, [r3, #0]
 8020d94:	fa2f f283 	sxtb16	r2, r3
 8020d98:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8020d9c:	601a      	str	r2, [r3, #0]
  return(result);
 8020d9e:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8020da2:	681b      	ldr	r3, [r3, #0]
 8020da4:	f8c7 39cc 	str.w	r3, [r7, #2508]	; 0x9cc
                val4 = __SXTB16(val1);
 8020da8:	f8d7 29d8 	ldr.w	r2, [r7, #2520]	; 0x9d8
 8020dac:	f507 7347 	add.w	r3, r7, #796	; 0x31c
 8020db0:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8020db2:	f507 7347 	add.w	r3, r7, #796	; 0x31c
 8020db6:	681b      	ldr	r3, [r3, #0]
 8020db8:	fa2f f283 	sxtb16	r2, r3
 8020dbc:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8020dc0:	601a      	str	r2, [r3, #0]
  return(result);
 8020dc2:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8020dc6:	681b      	ldr	r3, [r3, #0]
 8020dc8:	f8c7 39c8 	str.w	r3, [r7, #2504]	; 0x9c8
                val0 = __SXTB16_RORn(val0, 8);
 8020dcc:	f8d7 29dc 	ldr.w	r2, [r7, #2524]	; 0x9dc
 8020dd0:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8020dd4:	601a      	str	r2, [r3, #0]
 8020dd6:	f507 724d 	add.w	r2, r7, #820	; 0x334
 8020dda:	2308      	movs	r3, #8
 8020ddc:	6013      	str	r3, [r2, #0]
 8020dde:	f507 724c 	add.w	r2, r7, #816	; 0x330
 8020de2:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8020de6:	681b      	ldr	r3, [r3, #0]
 8020de8:	6013      	str	r3, [r2, #0]
 8020dea:	f507 724b 	add.w	r2, r7, #812	; 0x32c
 8020dee:	f507 734d 	add.w	r3, r7, #820	; 0x334
 8020df2:	681b      	ldr	r3, [r3, #0]
 8020df4:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8020df6:	f507 724b 	add.w	r2, r7, #812	; 0x32c
 8020dfa:	f507 734b 	add.w	r3, r7, #812	; 0x32c
 8020dfe:	681b      	ldr	r3, [r3, #0]
 8020e00:	f003 031f 	and.w	r3, r3, #31
 8020e04:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8020e06:	f507 734b 	add.w	r3, r7, #812	; 0x32c
 8020e0a:	681b      	ldr	r3, [r3, #0]
 8020e0c:	2b00      	cmp	r3, #0
 8020e0e:	d103      	bne.n	8020e18 <arm_nn_mat_mult_nt_t_s8+0x289a>
    return op1;
 8020e10:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8020e14:	681a      	ldr	r2, [r3, #0]
 8020e16:	e006      	b.n	8020e26 <arm_nn_mat_mult_nt_t_s8+0x28a8>
  return (op1 >> op2) | (op1 << (32U - op2));
 8020e18:	f507 724c 	add.w	r2, r7, #816	; 0x330
 8020e1c:	f507 734b 	add.w	r3, r7, #812	; 0x32c
 8020e20:	6812      	ldr	r2, [r2, #0]
 8020e22:	681b      	ldr	r3, [r3, #0]
 8020e24:	41da      	rors	r2, r3
 8020e26:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8020e2a:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8020e2c:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8020e30:	681b      	ldr	r3, [r3, #0]
 8020e32:	fa2f f283 	sxtb16	r2, r3
 8020e36:	f507 7349 	add.w	r3, r7, #804	; 0x324
 8020e3a:	601a      	str	r2, [r3, #0]
  return(result);
 8020e3c:	f507 7349 	add.w	r3, r7, #804	; 0x324
 8020e40:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 8020e42:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8020e46:	601a      	str	r2, [r3, #0]
  return result;
 8020e48:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8020e4c:	681b      	ldr	r3, [r3, #0]
 8020e4e:	f8c7 39dc 	str.w	r3, [r7, #2524]	; 0x9dc
                val2 = __SXTB16_RORn(val2, 8);
 8020e52:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 8020e56:	f507 7355 	add.w	r3, r7, #852	; 0x354
 8020e5a:	601a      	str	r2, [r3, #0]
 8020e5c:	f507 7254 	add.w	r2, r7, #848	; 0x350
 8020e60:	2308      	movs	r3, #8
 8020e62:	6013      	str	r3, [r2, #0]
 8020e64:	f507 7253 	add.w	r2, r7, #844	; 0x34c
 8020e68:	f507 7355 	add.w	r3, r7, #852	; 0x354
 8020e6c:	681b      	ldr	r3, [r3, #0]
 8020e6e:	6013      	str	r3, [r2, #0]
 8020e70:	f507 7252 	add.w	r2, r7, #840	; 0x348
 8020e74:	f507 7354 	add.w	r3, r7, #848	; 0x350
 8020e78:	681b      	ldr	r3, [r3, #0]
 8020e7a:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8020e7c:	f507 7252 	add.w	r2, r7, #840	; 0x348
 8020e80:	f507 7352 	add.w	r3, r7, #840	; 0x348
 8020e84:	681b      	ldr	r3, [r3, #0]
 8020e86:	f003 031f 	and.w	r3, r3, #31
 8020e8a:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8020e8c:	f507 7352 	add.w	r3, r7, #840	; 0x348
 8020e90:	681b      	ldr	r3, [r3, #0]
 8020e92:	2b00      	cmp	r3, #0
 8020e94:	d103      	bne.n	8020e9e <arm_nn_mat_mult_nt_t_s8+0x2920>
    return op1;
 8020e96:	f507 7353 	add.w	r3, r7, #844	; 0x34c
 8020e9a:	681a      	ldr	r2, [r3, #0]
 8020e9c:	e006      	b.n	8020eac <arm_nn_mat_mult_nt_t_s8+0x292e>
  return (op1 >> op2) | (op1 << (32U - op2));
 8020e9e:	f507 7253 	add.w	r2, r7, #844	; 0x34c
 8020ea2:	f507 7352 	add.w	r3, r7, #840	; 0x348
 8020ea6:	6812      	ldr	r2, [r2, #0]
 8020ea8:	681b      	ldr	r3, [r3, #0]
 8020eaa:	41da      	rors	r2, r3
 8020eac:	f507 7351 	add.w	r3, r7, #836	; 0x344
 8020eb0:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8020eb2:	f507 7351 	add.w	r3, r7, #836	; 0x344
 8020eb6:	681b      	ldr	r3, [r3, #0]
 8020eb8:	fa2f f283 	sxtb16	r2, r3
 8020ebc:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8020ec0:	601a      	str	r2, [r3, #0]
  return(result);
 8020ec2:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8020ec6:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 8020ec8:	f507 734f 	add.w	r3, r7, #828	; 0x33c
 8020ecc:	601a      	str	r2, [r3, #0]
  return result;
 8020ece:	f507 734f 	add.w	r3, r7, #828	; 0x33c
 8020ed2:	681b      	ldr	r3, [r3, #0]
 8020ed4:	f8c7 39d4 	str.w	r3, [r7, #2516]	; 0x9d4
                val1 = __SXTB16_RORn(val1, 8);
 8020ed8:	f8d7 29d8 	ldr.w	r2, [r7, #2520]	; 0x9d8
 8020edc:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8020ee0:	601a      	str	r2, [r3, #0]
 8020ee2:	f507 725b 	add.w	r2, r7, #876	; 0x36c
 8020ee6:	2308      	movs	r3, #8
 8020ee8:	6013      	str	r3, [r2, #0]
 8020eea:	f507 725a 	add.w	r2, r7, #872	; 0x368
 8020eee:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8020ef2:	681b      	ldr	r3, [r3, #0]
 8020ef4:	6013      	str	r3, [r2, #0]
 8020ef6:	f507 7259 	add.w	r2, r7, #868	; 0x364
 8020efa:	f507 735b 	add.w	r3, r7, #876	; 0x36c
 8020efe:	681b      	ldr	r3, [r3, #0]
 8020f00:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8020f02:	f507 7259 	add.w	r2, r7, #868	; 0x364
 8020f06:	f507 7359 	add.w	r3, r7, #868	; 0x364
 8020f0a:	681b      	ldr	r3, [r3, #0]
 8020f0c:	f003 031f 	and.w	r3, r3, #31
 8020f10:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8020f12:	f507 7359 	add.w	r3, r7, #868	; 0x364
 8020f16:	681b      	ldr	r3, [r3, #0]
 8020f18:	2b00      	cmp	r3, #0
 8020f1a:	d103      	bne.n	8020f24 <arm_nn_mat_mult_nt_t_s8+0x29a6>
    return op1;
 8020f1c:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8020f20:	681a      	ldr	r2, [r3, #0]
 8020f22:	e006      	b.n	8020f32 <arm_nn_mat_mult_nt_t_s8+0x29b4>
  return (op1 >> op2) | (op1 << (32U - op2));
 8020f24:	f507 725a 	add.w	r2, r7, #872	; 0x368
 8020f28:	f507 7359 	add.w	r3, r7, #868	; 0x364
 8020f2c:	6812      	ldr	r2, [r2, #0]
 8020f2e:	681b      	ldr	r3, [r3, #0]
 8020f30:	41da      	rors	r2, r3
 8020f32:	f507 7358 	add.w	r3, r7, #864	; 0x360
 8020f36:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8020f38:	f507 7358 	add.w	r3, r7, #864	; 0x360
 8020f3c:	681b      	ldr	r3, [r3, #0]
 8020f3e:	fa2f f283 	sxtb16	r2, r3
 8020f42:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 8020f46:	601a      	str	r2, [r3, #0]
  return(result);
 8020f48:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 8020f4c:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 8020f4e:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8020f52:	601a      	str	r2, [r3, #0]
  return result;
 8020f54:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8020f58:	681b      	ldr	r3, [r3, #0]
 8020f5a:	f8c7 39d8 	str.w	r3, [r7, #2520]	; 0x9d8

                // 4 x MAC res00, res01
                res00 = __SMLAD(val5, val3, res00);
 8020f5e:	f8d7 29cc 	ldr.w	r2, [r7, #2508]	; 0x9cc
 8020f62:	f8d7 19d0 	ldr.w	r1, [r7, #2512]	; 0x9d0
 8020f66:	f8d7 0a10 	ldr.w	r0, [r7, #2576]	; 0xa10
 8020f6a:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8020f6e:	601a      	str	r2, [r3, #0]
 8020f70:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 8020f74:	6019      	str	r1, [r3, #0]
 8020f76:	f507 735e 	add.w	r3, r7, #888	; 0x378
 8020f7a:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8020f7c:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8020f80:	6819      	ldr	r1, [r3, #0]
 8020f82:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 8020f86:	681a      	ldr	r2, [r3, #0]
 8020f88:	f507 735e 	add.w	r3, r7, #888	; 0x378
 8020f8c:	681b      	ldr	r3, [r3, #0]
 8020f8e:	fb21 3202 	smlad	r2, r1, r2, r3
 8020f92:	f507 735d 	add.w	r3, r7, #884	; 0x374
 8020f96:	601a      	str	r2, [r3, #0]
  return(result);
 8020f98:	f507 735d 	add.w	r3, r7, #884	; 0x374
 8020f9c:	681b      	ldr	r3, [r3, #0]
 8020f9e:	f8c7 3a10 	str.w	r3, [r7, #2576]	; 0xa10
                res00 = __SMLAD(val2, val0, res00);
 8020fa2:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 8020fa6:	f8d7 19dc 	ldr.w	r1, [r7, #2524]	; 0x9dc
 8020faa:	f8d7 0a10 	ldr.w	r0, [r7, #2576]	; 0xa10
 8020fae:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8020fb2:	601a      	str	r2, [r3, #0]
 8020fb4:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 8020fb8:	6019      	str	r1, [r3, #0]
 8020fba:	f507 7362 	add.w	r3, r7, #904	; 0x388
 8020fbe:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8020fc0:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8020fc4:	6819      	ldr	r1, [r3, #0]
 8020fc6:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 8020fca:	681a      	ldr	r2, [r3, #0]
 8020fcc:	f507 7362 	add.w	r3, r7, #904	; 0x388
 8020fd0:	681b      	ldr	r3, [r3, #0]
 8020fd2:	fb21 3202 	smlad	r2, r1, r2, r3
 8020fd6:	f507 7361 	add.w	r3, r7, #900	; 0x384
 8020fda:	601a      	str	r2, [r3, #0]
  return(result);
 8020fdc:	f507 7361 	add.w	r3, r7, #900	; 0x384
 8020fe0:	681b      	ldr	r3, [r3, #0]
 8020fe2:	f8c7 3a10 	str.w	r3, [r7, #2576]	; 0xa10
                res01 = __SMLAD(val5, val4, res01);
 8020fe6:	f8d7 29cc 	ldr.w	r2, [r7, #2508]	; 0x9cc
 8020fea:	f8d7 19c8 	ldr.w	r1, [r7, #2504]	; 0x9c8
 8020fee:	f8d7 0a0c 	ldr.w	r0, [r7, #2572]	; 0xa0c
 8020ff2:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8020ff6:	601a      	str	r2, [r3, #0]
 8020ff8:	f507 7367 	add.w	r3, r7, #924	; 0x39c
 8020ffc:	6019      	str	r1, [r3, #0]
 8020ffe:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8021002:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8021004:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8021008:	6819      	ldr	r1, [r3, #0]
 802100a:	f507 7367 	add.w	r3, r7, #924	; 0x39c
 802100e:	681a      	ldr	r2, [r3, #0]
 8021010:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8021014:	681b      	ldr	r3, [r3, #0]
 8021016:	fb21 3202 	smlad	r2, r1, r2, r3
 802101a:	f507 7365 	add.w	r3, r7, #916	; 0x394
 802101e:	601a      	str	r2, [r3, #0]
  return(result);
 8021020:	f507 7365 	add.w	r3, r7, #916	; 0x394
 8021024:	681b      	ldr	r3, [r3, #0]
 8021026:	f8c7 3a0c 	str.w	r3, [r7, #2572]	; 0xa0c
                res01 = __SMLAD(val2, val1, res01);
 802102a:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 802102e:	f8d7 19d8 	ldr.w	r1, [r7, #2520]	; 0x9d8
 8021032:	f8d7 0a0c 	ldr.w	r0, [r7, #2572]	; 0xa0c
 8021036:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 802103a:	601a      	str	r2, [r3, #0]
 802103c:	f507 736b 	add.w	r3, r7, #940	; 0x3ac
 8021040:	6019      	str	r1, [r3, #0]
 8021042:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8021046:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8021048:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 802104c:	6819      	ldr	r1, [r3, #0]
 802104e:	f507 736b 	add.w	r3, r7, #940	; 0x3ac
 8021052:	681a      	ldr	r2, [r3, #0]
 8021054:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8021058:	681b      	ldr	r3, [r3, #0]
 802105a:	fb21 3202 	smlad	r2, r1, r2, r3
 802105e:	f507 7369 	add.w	r3, r7, #932	; 0x3a4
 8021062:	601a      	str	r2, [r3, #0]
  return(result);
 8021064:	f507 7369 	add.w	r3, r7, #932	; 0x3a4
 8021068:	681b      	ldr	r3, [r3, #0]
 802106a:	f8c7 3a0c 	str.w	r3, [r7, #2572]	; 0xa0c
 802106e:	f507 726d 	add.w	r2, r7, #948	; 0x3b4
 8021072:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8021076:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 8021078:	f507 736d 	add.w	r3, r7, #948	; 0x3b4
 802107c:	681b      	ldr	r3, [r3, #0]
 802107e:	681b      	ldr	r3, [r3, #0]
 8021080:	681b      	ldr	r3, [r3, #0]
 8021082:	461a      	mov	r2, r3
 8021084:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8021088:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 802108a:	f507 736d 	add.w	r3, r7, #948	; 0x3b4
 802108e:	681b      	ldr	r3, [r3, #0]
 8021090:	681b      	ldr	r3, [r3, #0]
 8021092:	1d1a      	adds	r2, r3, #4
 8021094:	f507 736d 	add.w	r3, r7, #948	; 0x3b4
 8021098:	681b      	ldr	r3, [r3, #0]
 802109a:	601a      	str	r2, [r3, #0]
    return (val);
 802109c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80210a0:	681b      	ldr	r3, [r3, #0]

                val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 80210a2:	f8c7 39dc 	str.w	r3, [r7, #2524]	; 0x9dc
                val1 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 80210a6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80210aa:	681a      	ldr	r2, [r3, #0]
 80210ac:	f8d7 39ec 	ldr.w	r3, [r7, #2540]	; 0x9ec
 80210b0:	441a      	add	r2, r3
 80210b2:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80210b6:	601a      	str	r2, [r3, #0]
 80210b8:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80210bc:	681b      	ldr	r3, [r3, #0]
 80210be:	681b      	ldr	r3, [r3, #0]
 80210c0:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 80210c2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80210c6:	601a      	str	r2, [r3, #0]
    return (val);
 80210c8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80210cc:	681b      	ldr	r3, [r3, #0]
 80210ce:	f8c7 39d8 	str.w	r3, [r7, #2520]	; 0x9d8
 80210d2:	f507 726f 	add.w	r2, r7, #956	; 0x3bc
 80210d6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80210da:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 80210dc:	f507 736f 	add.w	r3, r7, #956	; 0x3bc
 80210e0:	681b      	ldr	r3, [r3, #0]
 80210e2:	681b      	ldr	r3, [r3, #0]
 80210e4:	681b      	ldr	r3, [r3, #0]
 80210e6:	461a      	mov	r2, r3
 80210e8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80210ec:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 80210ee:	f507 736f 	add.w	r3, r7, #956	; 0x3bc
 80210f2:	681b      	ldr	r3, [r3, #0]
 80210f4:	681b      	ldr	r3, [r3, #0]
 80210f6:	1d1a      	adds	r2, r3, #4
 80210f8:	f507 736f 	add.w	r3, r7, #956	; 0x3bc
 80210fc:	681b      	ldr	r3, [r3, #0]
 80210fe:	601a      	str	r2, [r3, #0]
    return (val);
 8021100:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8021104:	681b      	ldr	r3, [r3, #0]
                val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 8021106:	f8c7 39d4 	str.w	r3, [r7, #2516]	; 0x9d4
                val3 = __SXTB16(val0);
 802110a:	f8d7 29dc 	ldr.w	r2, [r7, #2524]	; 0x9dc
 802110e:	f507 7371 	add.w	r3, r7, #964	; 0x3c4
 8021112:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8021114:	f507 7371 	add.w	r3, r7, #964	; 0x3c4
 8021118:	681b      	ldr	r3, [r3, #0]
 802111a:	fa2f f283 	sxtb16	r2, r3
 802111e:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 8021122:	601a      	str	r2, [r3, #0]
  return(result);
 8021124:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 8021128:	681b      	ldr	r3, [r3, #0]
 802112a:	f8c7 39d0 	str.w	r3, [r7, #2512]	; 0x9d0
                val5 = __SXTB16(val2);
 802112e:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 8021132:	f507 7373 	add.w	r3, r7, #972	; 0x3cc
 8021136:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8021138:	f507 7373 	add.w	r3, r7, #972	; 0x3cc
 802113c:	681b      	ldr	r3, [r3, #0]
 802113e:	fa2f f283 	sxtb16	r2, r3
 8021142:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 8021146:	601a      	str	r2, [r3, #0]
  return(result);
 8021148:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 802114c:	681b      	ldr	r3, [r3, #0]
 802114e:	f8c7 39cc 	str.w	r3, [r7, #2508]	; 0x9cc
                val4 = __SXTB16(val1);
 8021152:	f8d7 29d8 	ldr.w	r2, [r7, #2520]	; 0x9d8
 8021156:	f507 7375 	add.w	r3, r7, #980	; 0x3d4
 802115a:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 802115c:	f507 7375 	add.w	r3, r7, #980	; 0x3d4
 8021160:	681b      	ldr	r3, [r3, #0]
 8021162:	fa2f f283 	sxtb16	r2, r3
 8021166:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 802116a:	601a      	str	r2, [r3, #0]
  return(result);
 802116c:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8021170:	681b      	ldr	r3, [r3, #0]
 8021172:	f8c7 39c8 	str.w	r3, [r7, #2504]	; 0x9c8
                val0 = __SXTB16_RORn(val0, 8);
 8021176:	f8d7 29dc 	ldr.w	r2, [r7, #2524]	; 0x9dc
 802117a:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 802117e:	601a      	str	r2, [r3, #0]
 8021180:	f507 727b 	add.w	r2, r7, #1004	; 0x3ec
 8021184:	2308      	movs	r3, #8
 8021186:	6013      	str	r3, [r2, #0]
 8021188:	f507 727a 	add.w	r2, r7, #1000	; 0x3e8
 802118c:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8021190:	681b      	ldr	r3, [r3, #0]
 8021192:	6013      	str	r3, [r2, #0]
 8021194:	f507 7279 	add.w	r2, r7, #996	; 0x3e4
 8021198:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 802119c:	681b      	ldr	r3, [r3, #0]
 802119e:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 80211a0:	f507 7279 	add.w	r2, r7, #996	; 0x3e4
 80211a4:	f507 7379 	add.w	r3, r7, #996	; 0x3e4
 80211a8:	681b      	ldr	r3, [r3, #0]
 80211aa:	f003 031f 	and.w	r3, r3, #31
 80211ae:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 80211b0:	f507 7379 	add.w	r3, r7, #996	; 0x3e4
 80211b4:	681b      	ldr	r3, [r3, #0]
 80211b6:	2b00      	cmp	r3, #0
 80211b8:	d103      	bne.n	80211c2 <arm_nn_mat_mult_nt_t_s8+0x2c44>
    return op1;
 80211ba:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 80211be:	681a      	ldr	r2, [r3, #0]
 80211c0:	e006      	b.n	80211d0 <arm_nn_mat_mult_nt_t_s8+0x2c52>
  return (op1 >> op2) | (op1 << (32U - op2));
 80211c2:	f507 727a 	add.w	r2, r7, #1000	; 0x3e8
 80211c6:	f507 7379 	add.w	r3, r7, #996	; 0x3e4
 80211ca:	6812      	ldr	r2, [r2, #0]
 80211cc:	681b      	ldr	r3, [r3, #0]
 80211ce:	41da      	rors	r2, r3
 80211d0:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80211d4:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80211d6:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80211da:	681b      	ldr	r3, [r3, #0]
 80211dc:	fa2f f283 	sxtb16	r2, r3
 80211e0:	f507 7377 	add.w	r3, r7, #988	; 0x3dc
 80211e4:	601a      	str	r2, [r3, #0]
  return(result);
 80211e6:	f507 7377 	add.w	r3, r7, #988	; 0x3dc
 80211ea:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 80211ec:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 80211f0:	601a      	str	r2, [r3, #0]
  return result;
 80211f2:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 80211f6:	681b      	ldr	r3, [r3, #0]
 80211f8:	f8c7 39dc 	str.w	r3, [r7, #2524]	; 0x9dc
                val2 = __SXTB16_RORn(val2, 8);
 80211fc:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 8021200:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 8021204:	601a      	str	r2, [r3, #0]
 8021206:	f507 6281 	add.w	r2, r7, #1032	; 0x408
 802120a:	2308      	movs	r3, #8
 802120c:	6013      	str	r3, [r2, #0]
 802120e:	f207 4204 	addw	r2, r7, #1028	; 0x404
 8021212:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 8021216:	681b      	ldr	r3, [r3, #0]
 8021218:	6013      	str	r3, [r2, #0]
 802121a:	f507 6280 	add.w	r2, r7, #1024	; 0x400
 802121e:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8021222:	681b      	ldr	r3, [r3, #0]
 8021224:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8021226:	f507 6280 	add.w	r2, r7, #1024	; 0x400
 802122a:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 802122e:	681b      	ldr	r3, [r3, #0]
 8021230:	f003 031f 	and.w	r3, r3, #31
 8021234:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8021236:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 802123a:	681b      	ldr	r3, [r3, #0]
 802123c:	2b00      	cmp	r3, #0
 802123e:	d103      	bne.n	8021248 <arm_nn_mat_mult_nt_t_s8+0x2cca>
    return op1;
 8021240:	f207 4304 	addw	r3, r7, #1028	; 0x404
 8021244:	681a      	ldr	r2, [r3, #0]
 8021246:	e006      	b.n	8021256 <arm_nn_mat_mult_nt_t_s8+0x2cd8>
  return (op1 >> op2) | (op1 << (32U - op2));
 8021248:	f207 4204 	addw	r2, r7, #1028	; 0x404
 802124c:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8021250:	6812      	ldr	r2, [r2, #0]
 8021252:	681b      	ldr	r3, [r3, #0]
 8021254:	41da      	rors	r2, r3
 8021256:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 802125a:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 802125c:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 8021260:	681b      	ldr	r3, [r3, #0]
 8021262:	fa2f f283 	sxtb16	r2, r3
 8021266:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 802126a:	601a      	str	r2, [r3, #0]
  return(result);
 802126c:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8021270:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 8021272:	f507 737d 	add.w	r3, r7, #1012	; 0x3f4
 8021276:	601a      	str	r2, [r3, #0]
  return result;
 8021278:	f507 737d 	add.w	r3, r7, #1012	; 0x3f4
 802127c:	681b      	ldr	r3, [r3, #0]
 802127e:	f8c7 39d4 	str.w	r3, [r7, #2516]	; 0x9d4
                val1 = __SXTB16_RORn(val1, 8);
 8021282:	f8d7 29d8 	ldr.w	r2, [r7, #2520]	; 0x9d8
 8021286:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 802128a:	601a      	str	r2, [r3, #0]
 802128c:	f207 4224 	addw	r2, r7, #1060	; 0x424
 8021290:	2308      	movs	r3, #8
 8021292:	6013      	str	r3, [r2, #0]
 8021294:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 8021298:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 802129c:	681b      	ldr	r3, [r3, #0]
 802129e:	6013      	str	r3, [r2, #0]
 80212a0:	f207 421c 	addw	r2, r7, #1052	; 0x41c
 80212a4:	f207 4324 	addw	r3, r7, #1060	; 0x424
 80212a8:	681b      	ldr	r3, [r3, #0]
 80212aa:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 80212ac:	f207 421c 	addw	r2, r7, #1052	; 0x41c
 80212b0:	f207 431c 	addw	r3, r7, #1052	; 0x41c
 80212b4:	681b      	ldr	r3, [r3, #0]
 80212b6:	f003 031f 	and.w	r3, r3, #31
 80212ba:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 80212bc:	f207 431c 	addw	r3, r7, #1052	; 0x41c
 80212c0:	681b      	ldr	r3, [r3, #0]
 80212c2:	2b00      	cmp	r3, #0
 80212c4:	d103      	bne.n	80212ce <arm_nn_mat_mult_nt_t_s8+0x2d50>
    return op1;
 80212c6:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80212ca:	681a      	ldr	r2, [r3, #0]
 80212cc:	e006      	b.n	80212dc <arm_nn_mat_mult_nt_t_s8+0x2d5e>
  return (op1 >> op2) | (op1 << (32U - op2));
 80212ce:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 80212d2:	f207 431c 	addw	r3, r7, #1052	; 0x41c
 80212d6:	6812      	ldr	r2, [r2, #0]
 80212d8:	681b      	ldr	r3, [r3, #0]
 80212da:	41da      	rors	r2, r3
 80212dc:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80212e0:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80212e2:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80212e6:	681b      	ldr	r3, [r3, #0]
 80212e8:	fa2f f283 	sxtb16	r2, r3
 80212ec:	f207 4314 	addw	r3, r7, #1044	; 0x414
 80212f0:	601a      	str	r2, [r3, #0]
  return(result);
 80212f2:	f207 4314 	addw	r3, r7, #1044	; 0x414
 80212f6:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 80212f8:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80212fc:	601a      	str	r2, [r3, #0]
  return result;
 80212fe:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8021302:	681b      	ldr	r3, [r3, #0]
 8021304:	f8c7 39d8 	str.w	r3, [r7, #2520]	; 0x9d8

                // 4 x MAC res00, res01
                res00 = __SMLAD(val5, val3, res00);
 8021308:	f8d7 29cc 	ldr.w	r2, [r7, #2508]	; 0x9cc
 802130c:	f8d7 19d0 	ldr.w	r1, [r7, #2512]	; 0x9d0
 8021310:	f8d7 0a10 	ldr.w	r0, [r7, #2576]	; 0xa10
 8021314:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8021318:	601a      	str	r2, [r3, #0]
 802131a:	f207 4334 	addw	r3, r7, #1076	; 0x434
 802131e:	6019      	str	r1, [r3, #0]
 8021320:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8021324:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8021326:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 802132a:	6819      	ldr	r1, [r3, #0]
 802132c:	f207 4334 	addw	r3, r7, #1076	; 0x434
 8021330:	681a      	ldr	r2, [r3, #0]
 8021332:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8021336:	681b      	ldr	r3, [r3, #0]
 8021338:	fb21 3202 	smlad	r2, r1, r2, r3
 802133c:	f207 432c 	addw	r3, r7, #1068	; 0x42c
 8021340:	601a      	str	r2, [r3, #0]
  return(result);
 8021342:	f207 432c 	addw	r3, r7, #1068	; 0x42c
 8021346:	681b      	ldr	r3, [r3, #0]
 8021348:	f8c7 3a10 	str.w	r3, [r7, #2576]	; 0xa10
                res00 = __SMLAD(val2, val0, res00);
 802134c:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 8021350:	f8d7 19dc 	ldr.w	r1, [r7, #2524]	; 0x9dc
 8021354:	f8d7 0a10 	ldr.w	r0, [r7, #2576]	; 0xa10
 8021358:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 802135c:	601a      	str	r2, [r3, #0]
 802135e:	f207 4344 	addw	r3, r7, #1092	; 0x444
 8021362:	6019      	str	r1, [r3, #0]
 8021364:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8021368:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 802136a:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 802136e:	6819      	ldr	r1, [r3, #0]
 8021370:	f207 4344 	addw	r3, r7, #1092	; 0x444
 8021374:	681a      	ldr	r2, [r3, #0]
 8021376:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 802137a:	681b      	ldr	r3, [r3, #0]
 802137c:	fb21 3202 	smlad	r2, r1, r2, r3
 8021380:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8021384:	601a      	str	r2, [r3, #0]
  return(result);
 8021386:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 802138a:	681b      	ldr	r3, [r3, #0]
 802138c:	f8c7 3a10 	str.w	r3, [r7, #2576]	; 0xa10
                res01 = __SMLAD(val5, val4, res01);
 8021390:	f8d7 29cc 	ldr.w	r2, [r7, #2508]	; 0x9cc
 8021394:	f8d7 19c8 	ldr.w	r1, [r7, #2504]	; 0x9c8
 8021398:	f8d7 0a0c 	ldr.w	r0, [r7, #2572]	; 0xa0c
 802139c:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 80213a0:	601a      	str	r2, [r3, #0]
 80213a2:	f207 4354 	addw	r3, r7, #1108	; 0x454
 80213a6:	6019      	str	r1, [r3, #0]
 80213a8:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80213ac:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80213ae:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 80213b2:	6819      	ldr	r1, [r3, #0]
 80213b4:	f207 4354 	addw	r3, r7, #1108	; 0x454
 80213b8:	681a      	ldr	r2, [r3, #0]
 80213ba:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80213be:	681b      	ldr	r3, [r3, #0]
 80213c0:	fb21 3202 	smlad	r2, r1, r2, r3
 80213c4:	f207 434c 	addw	r3, r7, #1100	; 0x44c
 80213c8:	601a      	str	r2, [r3, #0]
  return(result);
 80213ca:	f207 434c 	addw	r3, r7, #1100	; 0x44c
 80213ce:	681b      	ldr	r3, [r3, #0]
 80213d0:	f8c7 3a0c 	str.w	r3, [r7, #2572]	; 0xa0c
                res01 = __SMLAD(val2, val1, res01);
 80213d4:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 80213d8:	f8d7 19d8 	ldr.w	r1, [r7, #2520]	; 0x9d8
 80213dc:	f8d7 0a0c 	ldr.w	r0, [r7, #2572]	; 0xa0c
 80213e0:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 80213e4:	601a      	str	r2, [r3, #0]
 80213e6:	f207 4364 	addw	r3, r7, #1124	; 0x464
 80213ea:	6019      	str	r1, [r3, #0]
 80213ec:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 80213f0:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80213f2:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 80213f6:	6819      	ldr	r1, [r3, #0]
 80213f8:	f207 4364 	addw	r3, r7, #1124	; 0x464
 80213fc:	681a      	ldr	r2, [r3, #0]
 80213fe:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8021402:	681b      	ldr	r3, [r3, #0]
 8021404:	fb21 3202 	smlad	r2, r1, r2, r3
 8021408:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 802140c:	601a      	str	r2, [r3, #0]
  return(result);
 802140e:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 8021412:	681b      	ldr	r3, [r3, #0]
 8021414:	f8c7 3a0c 	str.w	r3, [r7, #2572]	; 0xa0c
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 8021418:	f8d7 3a08 	ldr.w	r3, [r7, #2568]	; 0xa08
 802141c:	3310      	adds	r3, #16
 802141e:	f8c7 3a08 	str.w	r3, [r7, #2568]	; 0xa08
 8021422:	f8d7 3a70 	ldr.w	r3, [r7, #2672]	; 0xa70
 8021426:	f1a3 020f 	sub.w	r2, r3, #15
 802142a:	f8d7 3a08 	ldr.w	r3, [r7, #2568]	; 0xa08
 802142e:	4293      	cmp	r3, r2
 8021430:	f6ff a89e 	blt.w	8020570 <arm_nn_mat_mult_nt_t_s8+0x1ff2>
            }

            // Left-over accumulations
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 8021434:	e03d      	b.n	80214b2 <arm_nn_mat_mult_nt_t_s8+0x2f34>
            {
                q7_t rhs_value0 = rhs_ptr[0];
 8021436:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 802143a:	681b      	ldr	r3, [r3, #0]
 802143c:	781b      	ldrb	r3, [r3, #0]
 802143e:	f887 39e3 	strb.w	r3, [r7, #2531]	; 0x9e3
                q7_t rhs_value1 = rhs_ptr[rhs_cols];
 8021442:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8021446:	681a      	ldr	r2, [r3, #0]
 8021448:	f8d7 3a70 	ldr.w	r3, [r7, #2672]	; 0xa70
 802144c:	4413      	add	r3, r2
 802144e:	781b      	ldrb	r3, [r3, #0]
 8021450:	f887 39e2 	strb.w	r3, [r7, #2530]	; 0x9e2
                q7_t lhs_value = lhs_ptr[0];
 8021454:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8021458:	681b      	ldr	r3, [r3, #0]
 802145a:	781b      	ldrb	r3, [r3, #0]
 802145c:	f887 39e1 	strb.w	r3, [r7, #2529]	; 0x9e1

                res00 += lhs_value * rhs_value0;
 8021460:	f997 29e1 	ldrsb.w	r2, [r7, #2529]	; 0x9e1
 8021464:	f997 39e3 	ldrsb.w	r3, [r7, #2531]	; 0x9e3
 8021468:	fb03 f202 	mul.w	r2, r3, r2
 802146c:	f8d7 3a10 	ldr.w	r3, [r7, #2576]	; 0xa10
 8021470:	4413      	add	r3, r2
 8021472:	f8c7 3a10 	str.w	r3, [r7, #2576]	; 0xa10
                res01 += lhs_value * rhs_value1;
 8021476:	f997 29e1 	ldrsb.w	r2, [r7, #2529]	; 0x9e1
 802147a:	f997 39e2 	ldrsb.w	r3, [r7, #2530]	; 0x9e2
 802147e:	fb03 f202 	mul.w	r2, r3, r2
 8021482:	f8d7 3a0c 	ldr.w	r3, [r7, #2572]	; 0xa0c
 8021486:	4413      	add	r3, r2
 8021488:	f8c7 3a0c 	str.w	r3, [r7, #2572]	; 0xa0c

                ++rhs_ptr;
 802148c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8021490:	681b      	ldr	r3, [r3, #0]
 8021492:	1c5a      	adds	r2, r3, #1
 8021494:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8021498:	601a      	str	r2, [r3, #0]
                ++lhs_ptr;
 802149a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 802149e:	681b      	ldr	r3, [r3, #0]
 80214a0:	1c5a      	adds	r2, r3, #1
 80214a2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80214a6:	601a      	str	r2, [r3, #0]
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 80214a8:	f8d7 3a08 	ldr.w	r3, [r7, #2568]	; 0xa08
 80214ac:	3301      	adds	r3, #1
 80214ae:	f8c7 3a08 	str.w	r3, [r7, #2568]	; 0xa08
 80214b2:	f8d7 2a08 	ldr.w	r2, [r7, #2568]	; 0xa08
 80214b6:	f8d7 3a70 	ldr.w	r3, [r7, #2672]	; 0xa70
 80214ba:	429a      	cmp	r2, r3
 80214bc:	dbbb      	blt.n	8021436 <arm_nn_mat_mult_nt_t_s8+0x2eb8>
            }

            // Quantize down
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows_idx], dst_shifts[rhs_rows_idx]);
 80214be:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 80214c2:	009a      	lsls	r2, r3, #2
 80214c4:	f8d7 3a60 	ldr.w	r3, [r7, #2656]	; 0xa60
 80214c8:	4413      	add	r3, r2
 80214ca:	6818      	ldr	r0, [r3, #0]
 80214cc:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 80214d0:	009a      	lsls	r2, r3, #2
 80214d2:	f8d7 3a64 	ldr.w	r3, [r7, #2660]	; 0xa64
 80214d6:	4413      	add	r3, r2
 80214d8:	6819      	ldr	r1, [r3, #0]
 80214da:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 80214de:	f8d7 3a10 	ldr.w	r3, [r7, #2576]	; 0xa10
 80214e2:	6013      	str	r3, [r2, #0]
 80214e4:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 80214e8:	6018      	str	r0, [r3, #0]
 80214ea:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80214ee:	6019      	str	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80214f0:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80214f4:	681b      	ldr	r3, [r3, #0]
 80214f6:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 80214fa:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80214fe:	681b      	ldr	r3, [r3, #0]
 8021500:	fa03 f202 	lsl.w	r2, r3, r2
 8021504:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8021508:	601a      	str	r2, [r3, #0]
 802150a:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 802150e:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8021512:	681b      	ldr	r3, [r3, #0]
 8021514:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8021516:	f507 72a2 	add.w	r2, r7, #324	; 0x144
 802151a:	2300      	movs	r3, #0
 802151c:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 802151e:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8021522:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8021526:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 8021528:	f107 0280 	add.w	r2, r7, #128	; 0x80
 802152c:	2300      	movs	r3, #0
 802152e:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8021530:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8021534:	e9d3 8900 	ldrd	r8, r9, [r3]
 8021538:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 802153c:	681b      	ldr	r3, [r3, #0]
 802153e:	4618      	mov	r0, r3
 8021540:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8021544:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8021548:	681b      	ldr	r3, [r3, #0]
 802154a:	461a      	mov	r2, r3
 802154c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8021550:	fb02 f501 	mul.w	r5, r2, r1
 8021554:	fb00 f403 	mul.w	r4, r0, r3
 8021558:	442c      	add	r4, r5
 802155a:	fba0 2302 	umull	r2, r3, r0, r2
 802155e:	18e1      	adds	r1, r4, r3
 8021560:	460b      	mov	r3, r1
 8021562:	eb18 0102 	adds.w	r1, r8, r2
 8021566:	6039      	str	r1, [r7, #0]
 8021568:	eb49 0303 	adc.w	r3, r9, r3
 802156c:	607b      	str	r3, [r7, #4]
 802156e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8021572:	e9d7 1200 	ldrd	r1, r2, [r7]
 8021576:	e9c3 1200 	strd	r1, r2, [r3]
    result = (int32_t)(mult.long_long >> 31);
 802157a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 802157e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021582:	f04f 0000 	mov.w	r0, #0
 8021586:	f04f 0100 	mov.w	r1, #0
 802158a:	0fd0      	lsrs	r0, r2, #31
 802158c:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8021590:	17d9      	asrs	r1, r3, #31
 8021592:	f507 72a2 	add.w	r2, r7, #324	; 0x144
 8021596:	4603      	mov	r3, r0
 8021598:	6013      	str	r3, [r2, #0]
    return result;
 802159a:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 802159e:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80215a0:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80215a4:	681b      	ldr	r3, [r3, #0]
 80215a6:	2b00      	cmp	r3, #0
 80215a8:	dc04      	bgt.n	80215b4 <arm_nn_mat_mult_nt_t_s8+0x3036>
 80215aa:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80215ae:	681b      	ldr	r3, [r3, #0]
 80215b0:	425a      	negs	r2, r3
 80215b2:	e000      	b.n	80215b6 <arm_nn_mat_mult_nt_t_s8+0x3038>
 80215b4:	2200      	movs	r2, #0
 80215b6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80215ba:	6019      	str	r1, [r3, #0]
 80215bc:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 80215c0:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 80215c2:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80215c6:	2300      	movs	r3, #0
 80215c8:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 80215ca:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 80215ce:	2201      	movs	r2, #1
 80215d0:	681b      	ldr	r3, [r3, #0]
 80215d2:	fa02 f303 	lsl.w	r3, r2, r3
 80215d6:	f507 729a 	add.w	r2, r7, #308	; 0x134
 80215da:	3b01      	subs	r3, #1
 80215dc:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 80215de:	f507 7198 	add.w	r1, r7, #304	; 0x130
 80215e2:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80215e6:	f507 739a 	add.w	r3, r7, #308	; 0x134
 80215ea:	6812      	ldr	r2, [r2, #0]
 80215ec:	681b      	ldr	r3, [r3, #0]
 80215ee:	4013      	ands	r3, r2
 80215f0:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 80215f2:	f507 719c 	add.w	r1, r7, #312	; 0x138
 80215f6:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80215fa:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 80215fe:	6812      	ldr	r2, [r2, #0]
 8021600:	681b      	ldr	r3, [r3, #0]
 8021602:	fa42 f303 	asr.w	r3, r2, r3
 8021606:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 8021608:	f507 7296 	add.w	r2, r7, #300	; 0x12c
 802160c:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8021610:	681b      	ldr	r3, [r3, #0]
 8021612:	105b      	asrs	r3, r3, #1
 8021614:	6013      	str	r3, [r2, #0]
    if (result < 0)
 8021616:	f507 739c 	add.w	r3, r7, #312	; 0x138
 802161a:	681b      	ldr	r3, [r3, #0]
 802161c:	2b00      	cmp	r3, #0
 802161e:	da06      	bge.n	802162e <arm_nn_mat_mult_nt_t_s8+0x30b0>
        threshold++;
 8021620:	f507 7296 	add.w	r2, r7, #300	; 0x12c
 8021624:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8021628:	681b      	ldr	r3, [r3, #0]
 802162a:	3301      	adds	r3, #1
 802162c:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 802162e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8021632:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8021636:	6812      	ldr	r2, [r2, #0]
 8021638:	681b      	ldr	r3, [r3, #0]
 802163a:	429a      	cmp	r2, r3
 802163c:	dd06      	ble.n	802164c <arm_nn_mat_mult_nt_t_s8+0x30ce>
        result++;
 802163e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8021642:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8021646:	681b      	ldr	r3, [r3, #0]
 8021648:	3301      	adds	r3, #1
 802164a:	6013      	str	r3, [r2, #0]
    return result;
 802164c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8021650:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8021652:	bf00      	nop
 8021654:	f8c7 3a10 	str.w	r3, [r7, #2576]	; 0xa10
            res01 = arm_nn_requantize(res01, dst_multipliers[rhs_rows_idx + 1], dst_shifts[rhs_rows_idx + 1]);
 8021658:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 802165c:	3301      	adds	r3, #1
 802165e:	009a      	lsls	r2, r3, #2
 8021660:	f8d7 3a60 	ldr.w	r3, [r7, #2656]	; 0xa60
 8021664:	4413      	add	r3, r2
 8021666:	6818      	ldr	r0, [r3, #0]
 8021668:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 802166c:	3301      	adds	r3, #1
 802166e:	009a      	lsls	r2, r3, #2
 8021670:	f8d7 3a64 	ldr.w	r3, [r7, #2660]	; 0xa64
 8021674:	4413      	add	r3, r2
 8021676:	6819      	ldr	r1, [r3, #0]
 8021678:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 802167c:	f8d7 3a0c 	ldr.w	r3, [r7, #2572]	; 0xa0c
 8021680:	6013      	str	r3, [r2, #0]
 8021682:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8021686:	6018      	str	r0, [r3, #0]
 8021688:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 802168c:	6019      	str	r1, [r3, #0]
 802168e:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8021692:	681b      	ldr	r3, [r3, #0]
 8021694:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8021698:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 802169c:	681b      	ldr	r3, [r3, #0]
 802169e:	fa03 f202 	lsl.w	r2, r3, r2
 80216a2:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 80216a6:	601a      	str	r2, [r3, #0]
 80216a8:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 80216ac:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 80216b0:	681b      	ldr	r3, [r3, #0]
 80216b2:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80216b4:	f507 72ba 	add.w	r2, r7, #372	; 0x174
 80216b8:	2300      	movs	r3, #0
 80216ba:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 80216bc:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80216c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80216c4:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 80216c6:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80216ca:	2300      	movs	r3, #0
 80216cc:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 80216ce:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80216d2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80216d6:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 80216da:	681b      	ldr	r3, [r3, #0]
 80216dc:	4618      	mov	r0, r3
 80216de:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80216e2:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80216e6:	681b      	ldr	r3, [r3, #0]
 80216e8:	461a      	mov	r2, r3
 80216ea:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80216ee:	fb02 f501 	mul.w	r5, r2, r1
 80216f2:	fb00 f403 	mul.w	r4, r0, r3
 80216f6:	442c      	add	r4, r5
 80216f8:	fba0 2302 	umull	r2, r3, r0, r2
 80216fc:	18e1      	adds	r1, r4, r3
 80216fe:	460b      	mov	r3, r1
 8021700:	eb18 0102 	adds.w	r1, r8, r2
 8021704:	60b9      	str	r1, [r7, #8]
 8021706:	eb49 0303 	adc.w	r3, r9, r3
 802170a:	60fb      	str	r3, [r7, #12]
 802170c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8021710:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8021714:	e9c3 1200 	strd	r1, r2, [r3]
    result = (int32_t)(mult.long_long >> 31);
 8021718:	f107 0378 	add.w	r3, r7, #120	; 0x78
 802171c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021720:	f04f 0000 	mov.w	r0, #0
 8021724:	f04f 0100 	mov.w	r1, #0
 8021728:	0fd0      	lsrs	r0, r2, #31
 802172a:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 802172e:	17d9      	asrs	r1, r3, #31
 8021730:	f507 72ba 	add.w	r2, r7, #372	; 0x174
 8021734:	4603      	mov	r3, r0
 8021736:	6013      	str	r3, [r2, #0]
    return result;
 8021738:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 802173c:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 802173e:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8021742:	681b      	ldr	r3, [r3, #0]
 8021744:	2b00      	cmp	r3, #0
 8021746:	dc04      	bgt.n	8021752 <arm_nn_mat_mult_nt_t_s8+0x31d4>
 8021748:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 802174c:	681b      	ldr	r3, [r3, #0]
 802174e:	425a      	negs	r2, r3
 8021750:	e000      	b.n	8021754 <arm_nn_mat_mult_nt_t_s8+0x31d6>
 8021752:	2200      	movs	r2, #0
 8021754:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8021758:	6019      	str	r1, [r3, #0]
 802175a:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 802175e:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8021760:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8021764:	2300      	movs	r3, #0
 8021766:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8021768:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 802176c:	2201      	movs	r2, #1
 802176e:	681b      	ldr	r3, [r3, #0]
 8021770:	fa02 f303 	lsl.w	r3, r2, r3
 8021774:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8021778:	3b01      	subs	r3, #1
 802177a:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 802177c:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 8021780:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8021784:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8021788:	6812      	ldr	r2, [r2, #0]
 802178a:	681b      	ldr	r3, [r3, #0]
 802178c:	4013      	ands	r3, r2
 802178e:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 8021790:	f507 71b4 	add.w	r1, r7, #360	; 0x168
 8021794:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8021798:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 802179c:	6812      	ldr	r2, [r2, #0]
 802179e:	681b      	ldr	r3, [r3, #0]
 80217a0:	fa42 f303 	asr.w	r3, r2, r3
 80217a4:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 80217a6:	f507 72ae 	add.w	r2, r7, #348	; 0x15c
 80217aa:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 80217ae:	681b      	ldr	r3, [r3, #0]
 80217b0:	105b      	asrs	r3, r3, #1
 80217b2:	6013      	str	r3, [r2, #0]
    if (result < 0)
 80217b4:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80217b8:	681b      	ldr	r3, [r3, #0]
 80217ba:	2b00      	cmp	r3, #0
 80217bc:	da06      	bge.n	80217cc <arm_nn_mat_mult_nt_t_s8+0x324e>
        threshold++;
 80217be:	f507 72ae 	add.w	r2, r7, #348	; 0x15c
 80217c2:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 80217c6:	681b      	ldr	r3, [r3, #0]
 80217c8:	3301      	adds	r3, #1
 80217ca:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 80217cc:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 80217d0:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 80217d4:	6812      	ldr	r2, [r2, #0]
 80217d6:	681b      	ldr	r3, [r3, #0]
 80217d8:	429a      	cmp	r2, r3
 80217da:	dd06      	ble.n	80217ea <arm_nn_mat_mult_nt_t_s8+0x326c>
        result++;
 80217dc:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 80217e0:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80217e4:	681b      	ldr	r3, [r3, #0]
 80217e6:	3301      	adds	r3, #1
 80217e8:	6013      	str	r3, [r2, #0]
    return result;
 80217ea:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80217ee:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80217f0:	bf00      	nop
 80217f2:	f8c7 3a0c 	str.w	r3, [r7, #2572]	; 0xa0c

            // Add offset
            res00 += dst_offset;
 80217f6:	f8d7 2a10 	ldr.w	r2, [r7, #2576]	; 0xa10
 80217fa:	f8d7 3a78 	ldr.w	r3, [r7, #2680]	; 0xa78
 80217fe:	4413      	add	r3, r2
 8021800:	f8c7 3a10 	str.w	r3, [r7, #2576]	; 0xa10
            res01 += dst_offset;
 8021804:	f8d7 2a0c 	ldr.w	r2, [r7, #2572]	; 0xa0c
 8021808:	f8d7 3a78 	ldr.w	r3, [r7, #2680]	; 0xa78
 802180c:	4413      	add	r3, r2
 802180e:	f8c7 3a0c 	str.w	r3, [r7, #2572]	; 0xa0c

            // Clamp the result
            res00 = MAX(res00, activation_min);
 8021812:	f8d7 2a10 	ldr.w	r2, [r7, #2576]	; 0xa10
 8021816:	f8d7 3a7c 	ldr.w	r3, [r7, #2684]	; 0xa7c
 802181a:	4293      	cmp	r3, r2
 802181c:	bfb8      	it	lt
 802181e:	4613      	movlt	r3, r2
 8021820:	f8c7 3a10 	str.w	r3, [r7, #2576]	; 0xa10
            res00 = MIN(res00, activation_max);
 8021824:	f8d7 2a10 	ldr.w	r2, [r7, #2576]	; 0xa10
 8021828:	f8d7 3a80 	ldr.w	r3, [r7, #2688]	; 0xa80
 802182c:	4293      	cmp	r3, r2
 802182e:	bfa8      	it	ge
 8021830:	4613      	movge	r3, r2
 8021832:	f8c7 3a10 	str.w	r3, [r7, #2576]	; 0xa10
            res01 = MAX(res01, activation_min);
 8021836:	f8d7 2a0c 	ldr.w	r2, [r7, #2572]	; 0xa0c
 802183a:	f8d7 3a7c 	ldr.w	r3, [r7, #2684]	; 0xa7c
 802183e:	4293      	cmp	r3, r2
 8021840:	bfb8      	it	lt
 8021842:	4613      	movlt	r3, r2
 8021844:	f8c7 3a0c 	str.w	r3, [r7, #2572]	; 0xa0c
            res01 = MIN(res01, activation_max);
 8021848:	f8d7 2a0c 	ldr.w	r2, [r7, #2572]	; 0xa0c
 802184c:	f8d7 3a80 	ldr.w	r3, [r7, #2688]	; 0xa80
 8021850:	4293      	cmp	r3, r2
 8021852:	bfa8      	it	ge
 8021854:	4613      	movge	r3, r2
 8021856:	f8c7 3a0c 	str.w	r3, [r7, #2572]	; 0xa0c

            dst_ptr[0] = (q7_t)res00;
 802185a:	f8d7 3a10 	ldr.w	r3, [r7, #2576]	; 0xa10
 802185e:	b25b      	sxtb	r3, r3
 8021860:	f8d7 2a38 	ldr.w	r2, [r7, #2616]	; 0xa38
 8021864:	7013      	strb	r3, [r2, #0]
            dst_ptr[1] = (q7_t)res01;
 8021866:	f8d7 3a38 	ldr.w	r3, [r7, #2616]	; 0xa38
 802186a:	1c5a      	adds	r2, r3, #1
 802186c:	f8d7 3a0c 	ldr.w	r3, [r7, #2572]	; 0xa0c
 8021870:	b25b      	sxtb	r3, r3
 8021872:	7013      	strb	r3, [r2, #0]
        }

        rhs += 2 * rhs_cols;
 8021874:	f8d7 3a70 	ldr.w	r3, [r7, #2672]	; 0xa70
 8021878:	005b      	lsls	r3, r3, #1
 802187a:	4619      	mov	r1, r3
 802187c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8021880:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8021884:	681b      	ldr	r3, [r3, #0]
 8021886:	440b      	add	r3, r1
 8021888:	6013      	str	r3, [r2, #0]
        dst += 2;
 802188a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 802188e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8021892:	681b      	ldr	r3, [r3, #0]
 8021894:	3302      	adds	r3, #2
 8021896:	6013      	str	r3, [r2, #0]
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 8021898:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 802189c:	3302      	adds	r3, #2
 802189e:	f8c7 3a3c 	str.w	r3, [r7, #2620]	; 0xa3c
 80218a2:	f8d7 3a6c 	ldr.w	r3, [r7, #2668]	; 0xa6c
 80218a6:	1e5a      	subs	r2, r3, #1
 80218a8:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 80218ac:	4293      	cmp	r3, r2
 80218ae:	f6fc ae81 	blt.w	801e5b4 <arm_nn_mat_mult_nt_t_s8+0x36>
    }

    if (rhs_rows % 2)
 80218b2:	f8d7 3a6c 	ldr.w	r3, [r7, #2668]	; 0xa6c
 80218b6:	f003 0301 	and.w	r3, r3, #1
 80218ba:	2b00      	cmp	r3, #0
 80218bc:	f000 815b 	beq.w	8021b76 <arm_nn_mat_mult_nt_t_s8+0x35f8>
    {
        const q7_t *lhs_ptr = &lhs[0];
 80218c0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80218c4:	681b      	ldr	r3, [r3, #0]
 80218c6:	f8c7 3a04 	str.w	r3, [r7, #2564]	; 0xa04
        q7_t *dst_ptr = &dst[0];
 80218ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80218ce:	681b      	ldr	r3, [r3, #0]
 80218d0:	f8c7 3a00 	str.w	r3, [r7, #2560]	; 0xa00

        for (int32_t lhs_rows_idx = 0; lhs_rows_idx < lhs_rows; ++lhs_rows_idx)
 80218d4:	2300      	movs	r3, #0
 80218d6:	f8c7 39fc 	str.w	r3, [r7, #2556]	; 0x9fc
 80218da:	e145      	b.n	8021b68 <arm_nn_mat_mult_nt_t_s8+0x35ea>
        {
            const q7_t *rhs_ptr = &rhs[0];
 80218dc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80218e0:	681b      	ldr	r3, [r3, #0]
 80218e2:	f8c7 39f8 	str.w	r3, [r7, #2552]	; 0x9f8
            q31_t res00 = 0;
 80218e6:	2300      	movs	r3, #0
 80218e8:	f8c7 39f4 	str.w	r3, [r7, #2548]	; 0x9f4
            if (bias)
 80218ec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80218f0:	681b      	ldr	r3, [r3, #0]
 80218f2:	2b00      	cmp	r3, #0
 80218f4:	d00c      	beq.n	8021910 <arm_nn_mat_mult_nt_t_s8+0x3392>
            {
                res00 = bias[rhs_rows - 1];
 80218f6:	f8d7 3a6c 	ldr.w	r3, [r7, #2668]	; 0xa6c
 80218fa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80218fe:	3b01      	subs	r3, #1
 8021900:	009b      	lsls	r3, r3, #2
 8021902:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8021906:	6812      	ldr	r2, [r2, #0]
 8021908:	4413      	add	r3, r2
 802190a:	681b      	ldr	r3, [r3, #0]
 802190c:	f8c7 39f4 	str.w	r3, [r7, #2548]	; 0x9f4
            }

            for (int32_t rhs_cols_idx = 0; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 8021910:	2300      	movs	r3, #0
 8021912:	f8c7 39f0 	str.w	r3, [r7, #2544]	; 0x9f0
 8021916:	e029      	b.n	802196c <arm_nn_mat_mult_nt_t_s8+0x33ee>
            {
                q31_t rhs_value = rhs_ptr[0];
 8021918:	f8d7 39f8 	ldr.w	r3, [r7, #2552]	; 0x9f8
 802191c:	f993 3000 	ldrsb.w	r3, [r3]
 8021920:	f8c7 39e8 	str.w	r3, [r7, #2536]	; 0x9e8
                q31_t lhs_value = lhs_ptr[0] + lhs_offset;
 8021924:	f8d7 3a04 	ldr.w	r3, [r7, #2564]	; 0xa04
 8021928:	f993 3000 	ldrsb.w	r3, [r3]
 802192c:	461a      	mov	r2, r3
 802192e:	f8d7 3a74 	ldr.w	r3, [r7, #2676]	; 0xa74
 8021932:	4413      	add	r3, r2
 8021934:	f8c7 39e4 	str.w	r3, [r7, #2532]	; 0x9e4

                res00 += lhs_value * rhs_value;
 8021938:	f8d7 39e4 	ldr.w	r3, [r7, #2532]	; 0x9e4
 802193c:	f8d7 29e8 	ldr.w	r2, [r7, #2536]	; 0x9e8
 8021940:	fb02 f303 	mul.w	r3, r2, r3
 8021944:	f8d7 29f4 	ldr.w	r2, [r7, #2548]	; 0x9f4
 8021948:	4413      	add	r3, r2
 802194a:	f8c7 39f4 	str.w	r3, [r7, #2548]	; 0x9f4

                ++rhs_ptr;
 802194e:	f8d7 39f8 	ldr.w	r3, [r7, #2552]	; 0x9f8
 8021952:	3301      	adds	r3, #1
 8021954:	f8c7 39f8 	str.w	r3, [r7, #2552]	; 0x9f8
                ++lhs_ptr;
 8021958:	f8d7 3a04 	ldr.w	r3, [r7, #2564]	; 0xa04
 802195c:	3301      	adds	r3, #1
 802195e:	f8c7 3a04 	str.w	r3, [r7, #2564]	; 0xa04
            for (int32_t rhs_cols_idx = 0; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 8021962:	f8d7 39f0 	ldr.w	r3, [r7, #2544]	; 0x9f0
 8021966:	3301      	adds	r3, #1
 8021968:	f8c7 39f0 	str.w	r3, [r7, #2544]	; 0x9f0
 802196c:	f8d7 29f0 	ldr.w	r2, [r7, #2544]	; 0x9f0
 8021970:	f8d7 3a70 	ldr.w	r3, [r7, #2672]	; 0xa70
 8021974:	429a      	cmp	r2, r3
 8021976:	dbcf      	blt.n	8021918 <arm_nn_mat_mult_nt_t_s8+0x339a>
            }

            // Quantize down
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows - 1], dst_shifts[rhs_rows - 1]);
 8021978:	f8d7 3a6c 	ldr.w	r3, [r7, #2668]	; 0xa6c
 802197c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8021980:	3b01      	subs	r3, #1
 8021982:	009b      	lsls	r3, r3, #2
 8021984:	f8d7 2a60 	ldr.w	r2, [r7, #2656]	; 0xa60
 8021988:	4413      	add	r3, r2
 802198a:	6819      	ldr	r1, [r3, #0]
 802198c:	f8d7 3a6c 	ldr.w	r3, [r7, #2668]	; 0xa6c
 8021990:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8021994:	3b01      	subs	r3, #1
 8021996:	009b      	lsls	r3, r3, #2
 8021998:	f8d7 2a64 	ldr.w	r2, [r7, #2660]	; 0xa64
 802199c:	4413      	add	r3, r2
 802199e:	681a      	ldr	r2, [r3, #0]
 80219a0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80219a4:	f8d7 09f4 	ldr.w	r0, [r7, #2548]	; 0x9f4
 80219a8:	6018      	str	r0, [r3, #0]
 80219aa:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80219ae:	6019      	str	r1, [r3, #0]
 80219b0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80219b4:	601a      	str	r2, [r3, #0]
 80219b6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80219ba:	681b      	ldr	r3, [r3, #0]
 80219bc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80219c0:	f507 7294 	add.w	r2, r7, #296	; 0x128
 80219c4:	6812      	ldr	r2, [r2, #0]
 80219c6:	409a      	lsls	r2, r3
 80219c8:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80219cc:	601a      	str	r2, [r3, #0]
 80219ce:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80219d2:	f507 7292 	add.w	r2, r7, #292	; 0x124
 80219d6:	6812      	ldr	r2, [r2, #0]
 80219d8:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 80219da:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80219de:	2200      	movs	r2, #0
 80219e0:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 80219e2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80219e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80219ea:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 80219ec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80219f0:	2200      	movs	r2, #0
 80219f2:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 80219f4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80219f8:	e9d3 4500 	ldrd	r4, r5, [r3]
 80219fc:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8021a00:	681b      	ldr	r3, [r3, #0]
 8021a02:	4618      	mov	r0, r3
 8021a04:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8021a08:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021a0c:	681b      	ldr	r3, [r3, #0]
 8021a0e:	461a      	mov	r2, r3
 8021a10:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8021a14:	fb02 fc01 	mul.w	ip, r2, r1
 8021a18:	fb00 f603 	mul.w	r6, r0, r3
 8021a1c:	4466      	add	r6, ip
 8021a1e:	fba0 2302 	umull	r2, r3, r0, r2
 8021a22:	18f1      	adds	r1, r6, r3
 8021a24:	460b      	mov	r3, r1
 8021a26:	eb14 0a02 	adds.w	sl, r4, r2
 8021a2a:	eb45 0b03 	adc.w	fp, r5, r3
 8021a2e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8021a32:	e9c3 ab00 	strd	sl, fp, [r3]
    result = (int32_t)(mult.long_long >> 31);
 8021a36:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8021a3a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8021a3e:	f04f 0200 	mov.w	r2, #0
 8021a42:	f04f 0300 	mov.w	r3, #0
 8021a46:	0fc2      	lsrs	r2, r0, #31
 8021a48:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8021a4c:	17cb      	asrs	r3, r1, #31
 8021a4e:	f507 718a 	add.w	r1, r7, #276	; 0x114
 8021a52:	4613      	mov	r3, r2
 8021a54:	600b      	str	r3, [r1, #0]
    return result;
 8021a56:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8021a5a:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8021a5c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8021a60:	681b      	ldr	r3, [r3, #0]
 8021a62:	2b00      	cmp	r3, #0
 8021a64:	dc04      	bgt.n	8021a70 <arm_nn_mat_mult_nt_t_s8+0x34f2>
 8021a66:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8021a6a:	681b      	ldr	r3, [r3, #0]
 8021a6c:	425b      	negs	r3, r3
 8021a6e:	e000      	b.n	8021a72 <arm_nn_mat_mult_nt_t_s8+0x34f4>
 8021a70:	2300      	movs	r3, #0
 8021a72:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8021a76:	6011      	str	r1, [r2, #0]
 8021a78:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8021a7c:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8021a7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8021a82:	2200      	movs	r2, #0
 8021a84:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8021a86:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8021a8a:	2201      	movs	r2, #1
 8021a8c:	681b      	ldr	r3, [r3, #0]
 8021a8e:	409a      	lsls	r2, r3
 8021a90:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8021a94:	3a01      	subs	r2, #1
 8021a96:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 8021a98:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8021a9c:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8021aa0:	f507 7282 	add.w	r2, r7, #260	; 0x104
 8021aa4:	6809      	ldr	r1, [r1, #0]
 8021aa6:	6812      	ldr	r2, [r2, #0]
 8021aa8:	400a      	ands	r2, r1
 8021aaa:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 8021aac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8021ab0:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8021ab4:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8021ab8:	6809      	ldr	r1, [r1, #0]
 8021aba:	6812      	ldr	r2, [r2, #0]
 8021abc:	fa41 f202 	asr.w	r2, r1, r2
 8021ac0:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 8021ac2:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8021ac6:	f507 7282 	add.w	r2, r7, #260	; 0x104
 8021aca:	6812      	ldr	r2, [r2, #0]
 8021acc:	1052      	asrs	r2, r2, #1
 8021ace:	601a      	str	r2, [r3, #0]
    if (result < 0)
 8021ad0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8021ad4:	681b      	ldr	r3, [r3, #0]
 8021ad6:	2b00      	cmp	r3, #0
 8021ad8:	da06      	bge.n	8021ae8 <arm_nn_mat_mult_nt_t_s8+0x356a>
        threshold++;
 8021ada:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8021ade:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 8021ae2:	6812      	ldr	r2, [r2, #0]
 8021ae4:	3201      	adds	r2, #1
 8021ae6:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 8021ae8:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8021aec:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8021af0:	6812      	ldr	r2, [r2, #0]
 8021af2:	681b      	ldr	r3, [r3, #0]
 8021af4:	429a      	cmp	r2, r3
 8021af6:	dd06      	ble.n	8021b06 <arm_nn_mat_mult_nt_t_s8+0x3588>
        result++;
 8021af8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8021afc:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8021b00:	6812      	ldr	r2, [r2, #0]
 8021b02:	3201      	adds	r2, #1
 8021b04:	601a      	str	r2, [r3, #0]
    return result;
 8021b06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8021b0a:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8021b0c:	bf00      	nop
 8021b0e:	f8c7 39f4 	str.w	r3, [r7, #2548]	; 0x9f4

            // Add offset
            res00 += dst_offset;
 8021b12:	f8d7 29f4 	ldr.w	r2, [r7, #2548]	; 0x9f4
 8021b16:	f8d7 3a78 	ldr.w	r3, [r7, #2680]	; 0xa78
 8021b1a:	4413      	add	r3, r2
 8021b1c:	f8c7 39f4 	str.w	r3, [r7, #2548]	; 0x9f4

            // Clamp the result
            res00 = MAX(res00, activation_min);
 8021b20:	f8d7 29f4 	ldr.w	r2, [r7, #2548]	; 0x9f4
 8021b24:	f8d7 3a7c 	ldr.w	r3, [r7, #2684]	; 0xa7c
 8021b28:	4293      	cmp	r3, r2
 8021b2a:	bfb8      	it	lt
 8021b2c:	4613      	movlt	r3, r2
 8021b2e:	f8c7 39f4 	str.w	r3, [r7, #2548]	; 0x9f4
            res00 = MIN(res00, activation_max);
 8021b32:	f8d7 29f4 	ldr.w	r2, [r7, #2548]	; 0x9f4
 8021b36:	f8d7 3a80 	ldr.w	r3, [r7, #2688]	; 0xa80
 8021b3a:	4293      	cmp	r3, r2
 8021b3c:	bfa8      	it	ge
 8021b3e:	4613      	movge	r3, r2
 8021b40:	f8c7 39f4 	str.w	r3, [r7, #2548]	; 0x9f4

            dst_ptr[0] = (q7_t)res00;
 8021b44:	f8d7 39f4 	ldr.w	r3, [r7, #2548]	; 0x9f4
 8021b48:	b25a      	sxtb	r2, r3
 8021b4a:	f8d7 3a00 	ldr.w	r3, [r7, #2560]	; 0xa00
 8021b4e:	701a      	strb	r2, [r3, #0]
            dst_ptr += rhs_rows;
 8021b50:	f8d7 3a6c 	ldr.w	r3, [r7, #2668]	; 0xa6c
 8021b54:	f8d7 2a00 	ldr.w	r2, [r7, #2560]	; 0xa00
 8021b58:	4413      	add	r3, r2
 8021b5a:	f8c7 3a00 	str.w	r3, [r7, #2560]	; 0xa00
        for (int32_t lhs_rows_idx = 0; lhs_rows_idx < lhs_rows; ++lhs_rows_idx)
 8021b5e:	f8d7 39fc 	ldr.w	r3, [r7, #2556]	; 0x9fc
 8021b62:	3301      	adds	r3, #1
 8021b64:	f8c7 39fc 	str.w	r3, [r7, #2556]	; 0x9fc
 8021b68:	f8d7 29fc 	ldr.w	r2, [r7, #2556]	; 0x9fc
 8021b6c:	f8d7 3a68 	ldr.w	r3, [r7, #2664]	; 0xa68
 8021b70:	429a      	cmp	r2, r3
 8021b72:	f6ff aeb3 	blt.w	80218dc <arm_nn_mat_mult_nt_t_s8+0x335e>
            dst_ptr[0] = (q7_t)res00;
            dst_ptr += rhs_rows;
        }
    }
#endif
    return ARM_MATH_SUCCESS;
 8021b76:	2300      	movs	r3, #0
}
 8021b78:	4618      	mov	r0, r3
 8021b7a:	f507 6724 	add.w	r7, r7, #2624	; 0xa40
 8021b7e:	46bd      	mov	sp, r7
 8021b80:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8021b84:	4770      	bx	lr

08021b86 <arm_q7_to_q15_with_offset>:
 * @addtogroup nndata_convert
 * @{
 */

void arm_q7_to_q15_with_offset(const q7_t *src, q15_t *dst, uint32_t block_size, q15_t offset)
{
 8021b86:	b480      	push	{r7}
 8021b88:	b0a5      	sub	sp, #148	; 0x94
 8021b8a:	af00      	add	r7, sp, #0
 8021b8c:	60f8      	str	r0, [r7, #12]
 8021b8e:	60b9      	str	r1, [r7, #8]
 8021b90:	607a      	str	r2, [r7, #4]
 8021b92:	807b      	strh	r3, [r7, #2]
    q31_t in_q15x2_2;
    q31_t out_q15x2_1;
    q31_t out_q15x2_2;

    /*loop unrolling */
    block_cnt = block_size >> 2;
 8021b94:	687b      	ldr	r3, [r7, #4]
 8021b96:	089b      	lsrs	r3, r3, #2
 8021b98:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

    /* First part of the processing with loop unrolling.  Compute 4 outputs at a time. */
    const q31_t offset_q15x2 = __PKHBT(offset, offset, 16);
 8021b9c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8021ba0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8021ba4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8021ba8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8021bac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8021bb0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8021bb4:	eac3 4302 	pkhbt	r3, r3, r2, lsl #16
 8021bb8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8021bbc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8021bc0:	67fb      	str	r3, [r7, #124]	; 0x7c
    while (block_cnt > 0)
 8021bc2:	e070      	b.n	8021ca6 <arm_q7_to_q15_with_offset+0x120>
 8021bc4:	f107 030c 	add.w	r3, r7, #12
 8021bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    memcpy(&val, *in_q7, 4);
 8021bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021bcc:	681b      	ldr	r3, [r3, #0]
 8021bce:	681b      	ldr	r3, [r3, #0]
 8021bd0:	613b      	str	r3, [r7, #16]
    *in_q7 += 4;
 8021bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021bd4:	681b      	ldr	r3, [r3, #0]
 8021bd6:	1d1a      	adds	r2, r3, #4
 8021bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021bda:	601a      	str	r2, [r3, #0]
    return (val);
 8021bdc:	693b      	ldr	r3, [r7, #16]
    {
        /* convert from q7 to q15 and then store the results in the destination buffer */
        in_q7x4 = arm_nn_read_q7x4_ia(&src);
 8021bde:	67bb      	str	r3, [r7, #120]	; 0x78

        /* Extract and sign extend each of the four q7 values to q15 */
        in_q15x2_1 = __SXTAB16(offset_q15x2, __ROR(in_q7x4, 8));
 8021be0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8021be2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8021be4:	637b      	str	r3, [r7, #52]	; 0x34
 8021be6:	2308      	movs	r3, #8
 8021be8:	633b      	str	r3, [r7, #48]	; 0x30
  op2 %= 32U;
 8021bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021bec:	f003 031f 	and.w	r3, r3, #31
 8021bf0:	633b      	str	r3, [r7, #48]	; 0x30
  if (op2 == 0U)
 8021bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021bf4:	2b00      	cmp	r3, #0
 8021bf6:	d101      	bne.n	8021bfc <arm_q7_to_q15_with_offset+0x76>
    return op1;
 8021bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021bfa:	e003      	b.n	8021c04 <arm_q7_to_q15_with_offset+0x7e>
  return (op1 >> op2) | (op1 << (32U - op2));
 8021bfc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8021bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021c00:	fa61 f303 	ror.w	r3, r1, r3
 8021c04:	643a      	str	r2, [r7, #64]	; 0x40
 8021c06:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8021c08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8021c0a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8021c0c:	fa23 f382 	sxtab16	r3, r3, r2
 8021c10:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8021c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8021c14:	677b      	str	r3, [r7, #116]	; 0x74
        in_q15x2_2 = __SXTAB16(offset_q15x2, in_q7x4);
 8021c16:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8021c18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8021c1a:	64fa      	str	r2, [r7, #76]	; 0x4c
 8021c1c:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8021c1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021c20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8021c22:	fa23 f382 	sxtab16	r3, r3, r2
 8021c26:	647b      	str	r3, [r7, #68]	; 0x44
  return(result);
 8021c28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8021c2a:	673b      	str	r3, [r7, #112]	; 0x70

        out_q15x2_2 = __PKHTB(in_q15x2_1, in_q15x2_2, 16);
 8021c2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8021c2e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8021c30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8021c32:	66bb      	str	r3, [r7, #104]	; 0x68
 8021c34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8021c36:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8021c38:	eac3 4322 	pkhtb	r3, r3, r2, asr #16
 8021c3c:	667b      	str	r3, [r7, #100]	; 0x64
 8021c3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8021c40:	663b      	str	r3, [r7, #96]	; 0x60
        out_q15x2_1 = __PKHBT(in_q15x2_2, in_q15x2_1, 16);
 8021c42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8021c44:	65fb      	str	r3, [r7, #92]	; 0x5c
 8021c46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8021c48:	65bb      	str	r3, [r7, #88]	; 0x58
 8021c4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8021c4c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8021c4e:	eac3 4302 	pkhbt	r3, r3, r2, lsl #16
 8021c52:	657b      	str	r3, [r7, #84]	; 0x54
 8021c54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8021c56:	653b      	str	r3, [r7, #80]	; 0x50
 8021c58:	f107 0308 	add.w	r3, r7, #8
 8021c5c:	623b      	str	r3, [r7, #32]
 8021c5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021c60:	61fb      	str	r3, [r7, #28]
  @param[in]     src_q31   Input value to be written.
  @return        none
 */
__STATIC_FORCEINLINE void arm_nn_write_q15x2_ia(q15_t **dest_q15, q31_t src_q31)
{
    q31_t val = src_q31;
 8021c62:	69fb      	ldr	r3, [r7, #28]
 8021c64:	61bb      	str	r3, [r7, #24]

    memcpy(*dest_q15, &val, 4);
 8021c66:	6a3b      	ldr	r3, [r7, #32]
 8021c68:	681b      	ldr	r3, [r3, #0]
 8021c6a:	69ba      	ldr	r2, [r7, #24]
 8021c6c:	601a      	str	r2, [r3, #0]
    *dest_q15 += 2;
 8021c6e:	6a3b      	ldr	r3, [r7, #32]
 8021c70:	681b      	ldr	r3, [r3, #0]
 8021c72:	1d1a      	adds	r2, r3, #4
 8021c74:	6a3b      	ldr	r3, [r7, #32]
 8021c76:	601a      	str	r2, [r3, #0]
}
 8021c78:	bf00      	nop
 8021c7a:	f107 0308 	add.w	r3, r7, #8
 8021c7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8021c80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8021c82:	627b      	str	r3, [r7, #36]	; 0x24
    q31_t val = src_q31;
 8021c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021c86:	617b      	str	r3, [r7, #20]
    memcpy(*dest_q15, &val, 4);
 8021c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021c8a:	681b      	ldr	r3, [r3, #0]
 8021c8c:	697a      	ldr	r2, [r7, #20]
 8021c8e:	601a      	str	r2, [r3, #0]
    *dest_q15 += 2;
 8021c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021c92:	681b      	ldr	r3, [r3, #0]
 8021c94:	1d1a      	adds	r2, r3, #4
 8021c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021c98:	601a      	str	r2, [r3, #0]
}
 8021c9a:	bf00      	nop

        arm_nn_write_q15x2_ia(&dst, out_q15x2_1);
        arm_nn_write_q15x2_ia(&dst, out_q15x2_2);

        block_cnt--;
 8021c9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8021ca0:	3b01      	subs	r3, #1
 8021ca2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    while (block_cnt > 0)
 8021ca6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8021caa:	2b00      	cmp	r3, #0
 8021cac:	dc8a      	bgt.n	8021bc4 <arm_q7_to_q15_with_offset+0x3e>
    }
    /* Handle left over samples */
    block_cnt = block_size % 0x4;
 8021cae:	687b      	ldr	r3, [r7, #4]
 8021cb0:	f003 0303 	and.w	r3, r3, #3
 8021cb4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    /* Run the below code for Cortex-M0 */
    /* Loop over block_size number of values */
    block_cnt = block_size;
#endif

    while (block_cnt > 0)
 8021cb8:	e012      	b.n	8021ce0 <arm_q7_to_q15_with_offset+0x15a>
    {
        *dst++ = (q15_t)*src++ + offset;
 8021cba:	68fb      	ldr	r3, [r7, #12]
 8021cbc:	1c5a      	adds	r2, r3, #1
 8021cbe:	60fa      	str	r2, [r7, #12]
 8021cc0:	f993 3000 	ldrsb.w	r3, [r3]
 8021cc4:	b29a      	uxth	r2, r3
 8021cc6:	887b      	ldrh	r3, [r7, #2]
 8021cc8:	4413      	add	r3, r2
 8021cca:	b299      	uxth	r1, r3
 8021ccc:	68bb      	ldr	r3, [r7, #8]
 8021cce:	1c9a      	adds	r2, r3, #2
 8021cd0:	60ba      	str	r2, [r7, #8]
 8021cd2:	b20a      	sxth	r2, r1
 8021cd4:	801a      	strh	r2, [r3, #0]

        /* Decrement the loop counter */
        block_cnt--;
 8021cd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8021cda:	3b01      	subs	r3, #1
 8021cdc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    while (block_cnt > 0)
 8021ce0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8021ce4:	2b00      	cmp	r3, #0
 8021ce6:	dce8      	bgt.n	8021cba <arm_q7_to_q15_with_offset+0x134>
    }
}
 8021ce8:	bf00      	nop
 8021cea:	bf00      	nop
 8021cec:	3794      	adds	r7, #148	; 0x94
 8021cee:	46bd      	mov	sp, r7
 8021cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021cf4:	4770      	bx	lr

08021cf6 <scale_q31_to_q7_and_clamp>:
                                      q7_t *target,
                                      int32_t length,
                                      const int32_t count,
                                      const int act_min,
                                      const int act_max)
{
 8021cf6:	b480      	push	{r7}
 8021cf8:	b089      	sub	sp, #36	; 0x24
 8021cfa:	af00      	add	r7, sp, #0
 8021cfc:	60f8      	str	r0, [r7, #12]
 8021cfe:	60b9      	str	r1, [r7, #8]
 8021d00:	607a      	str	r2, [r7, #4]
 8021d02:	603b      	str	r3, [r7, #0]
    const int half_count = count / 2;
 8021d04:	683b      	ldr	r3, [r7, #0]
 8021d06:	0fda      	lsrs	r2, r3, #31
 8021d08:	4413      	add	r3, r2
 8021d0a:	105b      	asrs	r3, r3, #1
 8021d0c:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < length; i++)
 8021d0e:	2300      	movs	r3, #0
 8021d10:	61fb      	str	r3, [r7, #28]
 8021d12:	e030      	b.n	8021d76 <scale_q31_to_q7_and_clamp+0x80>
    {
        int32_t sum = buffer[i] > 0 ? (buffer[i] + half_count) : (buffer[i] - half_count);
 8021d14:	69fb      	ldr	r3, [r7, #28]
 8021d16:	009b      	lsls	r3, r3, #2
 8021d18:	68fa      	ldr	r2, [r7, #12]
 8021d1a:	4413      	add	r3, r2
 8021d1c:	681b      	ldr	r3, [r3, #0]
 8021d1e:	2b00      	cmp	r3, #0
 8021d20:	dd07      	ble.n	8021d32 <scale_q31_to_q7_and_clamp+0x3c>
 8021d22:	69fb      	ldr	r3, [r7, #28]
 8021d24:	009b      	lsls	r3, r3, #2
 8021d26:	68fa      	ldr	r2, [r7, #12]
 8021d28:	4413      	add	r3, r2
 8021d2a:	681a      	ldr	r2, [r3, #0]
 8021d2c:	69bb      	ldr	r3, [r7, #24]
 8021d2e:	4413      	add	r3, r2
 8021d30:	e006      	b.n	8021d40 <scale_q31_to_q7_and_clamp+0x4a>
 8021d32:	69fb      	ldr	r3, [r7, #28]
 8021d34:	009b      	lsls	r3, r3, #2
 8021d36:	68fa      	ldr	r2, [r7, #12]
 8021d38:	4413      	add	r3, r2
 8021d3a:	681a      	ldr	r2, [r3, #0]
 8021d3c:	69bb      	ldr	r3, [r7, #24]
 8021d3e:	1ad3      	subs	r3, r2, r3
 8021d40:	617b      	str	r3, [r7, #20]
        sum = sum / count;
 8021d42:	697a      	ldr	r2, [r7, #20]
 8021d44:	683b      	ldr	r3, [r7, #0]
 8021d46:	fb92 f3f3 	sdiv	r3, r2, r3
 8021d4a:	617b      	str	r3, [r7, #20]
        sum = MAX(sum, act_min);
 8021d4c:	697a      	ldr	r2, [r7, #20]
 8021d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021d50:	4293      	cmp	r3, r2
 8021d52:	bfb8      	it	lt
 8021d54:	4613      	movlt	r3, r2
 8021d56:	617b      	str	r3, [r7, #20]
        sum = MIN(sum, act_max);
 8021d58:	697a      	ldr	r2, [r7, #20]
 8021d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021d5c:	4293      	cmp	r3, r2
 8021d5e:	bfa8      	it	ge
 8021d60:	4613      	movge	r3, r2
 8021d62:	617b      	str	r3, [r7, #20]

        target[i] = (q7_t)sum;
 8021d64:	69fb      	ldr	r3, [r7, #28]
 8021d66:	68ba      	ldr	r2, [r7, #8]
 8021d68:	4413      	add	r3, r2
 8021d6a:	697a      	ldr	r2, [r7, #20]
 8021d6c:	b252      	sxtb	r2, r2
 8021d6e:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < length; i++)
 8021d70:	69fb      	ldr	r3, [r7, #28]
 8021d72:	3301      	adds	r3, #1
 8021d74:	61fb      	str	r3, [r7, #28]
 8021d76:	69fa      	ldr	r2, [r7, #28]
 8021d78:	687b      	ldr	r3, [r7, #4]
 8021d7a:	429a      	cmp	r2, r3
 8021d7c:	dbca      	blt.n	8021d14 <scale_q31_to_q7_and_clamp+0x1e>
    }
}
 8021d7e:	bf00      	nop
 8021d80:	bf00      	nop
 8021d82:	3724      	adds	r7, #36	; 0x24
 8021d84:	46bd      	mov	sp, r7
 8021d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021d8a:	4770      	bx	lr

08021d8c <arm_avgpool_s8>:
                          const cmsis_nn_dims *input_dims,
                          const q7_t *src,
                          const cmsis_nn_dims *filter_dims,
                          const cmsis_nn_dims *output_dims,
                          q7_t *dst)
{
 8021d8c:	b580      	push	{r7, lr}
 8021d8e:	b0a6      	sub	sp, #152	; 0x98
 8021d90:	af02      	add	r7, sp, #8
 8021d92:	60f8      	str	r0, [r7, #12]
 8021d94:	60b9      	str	r1, [r7, #8]
 8021d96:	607a      	str	r2, [r7, #4]
 8021d98:	603b      	str	r3, [r7, #0]
    const int32_t input_y = input_dims->h;
 8021d9a:	687b      	ldr	r3, [r7, #4]
 8021d9c:	685b      	ldr	r3, [r3, #4]
 8021d9e:	66bb      	str	r3, [r7, #104]	; 0x68
    const int32_t input_x = input_dims->w;
 8021da0:	687b      	ldr	r3, [r7, #4]
 8021da2:	689b      	ldr	r3, [r3, #8]
 8021da4:	667b      	str	r3, [r7, #100]	; 0x64
    const int32_t output_y = output_dims->h;
 8021da6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8021daa:	685b      	ldr	r3, [r3, #4]
 8021dac:	663b      	str	r3, [r7, #96]	; 0x60
    const int32_t output_x = output_dims->w;
 8021dae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8021db2:	689b      	ldr	r3, [r3, #8]
 8021db4:	65fb      	str	r3, [r7, #92]	; 0x5c
    const int32_t stride_y = pool_params->stride.h;
 8021db6:	68bb      	ldr	r3, [r7, #8]
 8021db8:	685b      	ldr	r3, [r3, #4]
 8021dba:	65bb      	str	r3, [r7, #88]	; 0x58
    const int32_t stride_x = pool_params->stride.w;
 8021dbc:	68bb      	ldr	r3, [r7, #8]
 8021dbe:	681b      	ldr	r3, [r3, #0]
 8021dc0:	657b      	str	r3, [r7, #84]	; 0x54
    const int32_t kernel_y = filter_dims->h;
 8021dc2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8021dc6:	685b      	ldr	r3, [r3, #4]
 8021dc8:	653b      	str	r3, [r7, #80]	; 0x50
    const int32_t kernel_x = filter_dims->w;
 8021dca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8021dce:	689b      	ldr	r3, [r3, #8]
 8021dd0:	64fb      	str	r3, [r7, #76]	; 0x4c
    const int32_t pad_y = pool_params->padding.h;
 8021dd2:	68bb      	ldr	r3, [r7, #8]
 8021dd4:	68db      	ldr	r3, [r3, #12]
 8021dd6:	64bb      	str	r3, [r7, #72]	; 0x48
    const int32_t pad_x = pool_params->padding.w;
 8021dd8:	68bb      	ldr	r3, [r7, #8]
 8021dda:	689b      	ldr	r3, [r3, #8]
 8021ddc:	647b      	str	r3, [r7, #68]	; 0x44
    const int32_t act_min = pool_params->activation.min;
 8021dde:	68bb      	ldr	r3, [r7, #8]
 8021de0:	691b      	ldr	r3, [r3, #16]
 8021de2:	643b      	str	r3, [r7, #64]	; 0x40
    const int32_t act_max = pool_params->activation.max;
 8021de4:	68bb      	ldr	r3, [r7, #8]
 8021de6:	695b      	ldr	r3, [r3, #20]
 8021de8:	63fb      	str	r3, [r7, #60]	; 0x3c
    const int32_t ch_src = input_dims->c;
 8021dea:	687b      	ldr	r3, [r7, #4]
 8021dec:	68db      	ldr	r3, [r3, #12]
 8021dee:	63bb      	str	r3, [r7, #56]	; 0x38
    q31_t *buffer = (q31_t *)ctx->buf;
 8021df0:	68fb      	ldr	r3, [r7, #12]
 8021df2:	681b      	ldr	r3, [r3, #0]
 8021df4:	637b      	str	r3, [r7, #52]	; 0x34

#if defined(ARM_MATH_DSP)

    /* Run the following code for CPU's with DSP extension
     */
    for (int i_y = 0, idx_y = -pad_y; i_y < output_y; idx_y += stride_y, i_y++)
 8021df6:	2300      	movs	r3, #0
 8021df8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8021dfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8021dfe:	425b      	negs	r3, r3
 8021e00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8021e04:	e0c7      	b.n	8021f96 <arm_avgpool_s8+0x20a>
    {
        for (int i_x = 0, idx_x = -pad_x; i_x < output_x; idx_x += stride_x, i_x++)
 8021e06:	2300      	movs	r3, #0
 8021e08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8021e0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8021e0e:	425b      	negs	r3, r3
 8021e10:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8021e14:	e0ae      	b.n	8021f74 <arm_avgpool_s8+0x1e8>
        {
            /* Condition for kernel start dimension:
                      (base_idx_<x,y> + kernel_<x,y>_start) >= 0 */
            const int32_t kernel_y_start = MAX(0, -idx_y);
 8021e16:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8021e1a:	2b00      	cmp	r3, #0
 8021e1c:	dc03      	bgt.n	8021e26 <arm_avgpool_s8+0x9a>
 8021e1e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8021e22:	425b      	negs	r3, r3
 8021e24:	e000      	b.n	8021e28 <arm_avgpool_s8+0x9c>
 8021e26:	2300      	movs	r3, #0
 8021e28:	633b      	str	r3, [r7, #48]	; 0x30
            const int32_t kernel_x_start = MAX(0, -idx_x);
 8021e2a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8021e2e:	2b00      	cmp	r3, #0
 8021e30:	dc03      	bgt.n	8021e3a <arm_avgpool_s8+0xae>
 8021e32:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8021e36:	425b      	negs	r3, r3
 8021e38:	e000      	b.n	8021e3c <arm_avgpool_s8+0xb0>
 8021e3a:	2300      	movs	r3, #0
 8021e3c:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Condition for kernel end dimension:
                   (base_idx_<x,y> + kernel_<x,y>_end) < dim_src_<width,height> */
            const int32_t kernel_y_end = MIN(kernel_y, input_y - idx_y);
 8021e3e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8021e40:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8021e44:	1ad3      	subs	r3, r2, r3
 8021e46:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8021e48:	4293      	cmp	r3, r2
 8021e4a:	bfa8      	it	ge
 8021e4c:	4613      	movge	r3, r2
 8021e4e:	62bb      	str	r3, [r7, #40]	; 0x28
            const int32_t kernel_x_end = MIN(kernel_x, input_x - idx_x);
 8021e50:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8021e52:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8021e56:	1ad3      	subs	r3, r2, r3
 8021e58:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8021e5a:	4293      	cmp	r3, r2
 8021e5c:	bfa8      	it	ge
 8021e5e:	4613      	movge	r3, r2
 8021e60:	627b      	str	r3, [r7, #36]	; 0x24

            int count = 0;
 8021e62:	2300      	movs	r3, #0
 8021e64:	67fb      	str	r3, [r7, #124]	; 0x7c

            for (int k_y = kernel_y_start; k_y < kernel_y_end; k_y++)
 8021e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021e68:	67bb      	str	r3, [r7, #120]	; 0x78
 8021e6a:	e05d      	b.n	8021f28 <arm_avgpool_s8+0x19c>
            {
                for (int k_x = kernel_x_start; k_x < kernel_x_end; k_x++)
 8021e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021e6e:	677b      	str	r3, [r7, #116]	; 0x74
 8021e70:	e053      	b.n	8021f1a <arm_avgpool_s8+0x18e>
                {
                    const q7_t *start = src + ch_src * (k_x + idx_x + (k_y + idx_y) * input_x);
 8021e72:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8021e74:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8021e78:	441a      	add	r2, r3
 8021e7a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8021e7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8021e80:	440b      	add	r3, r1
 8021e82:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8021e84:	fb01 f303 	mul.w	r3, r1, r3
 8021e88:	4413      	add	r3, r2
 8021e8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8021e8c:	fb02 f303 	mul.w	r3, r2, r3
 8021e90:	461a      	mov	r2, r3
 8021e92:	683b      	ldr	r3, [r7, #0]
 8021e94:	4413      	add	r3, r2
 8021e96:	623b      	str	r3, [r7, #32]

                    if (count == 0)
 8021e98:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8021e9a:	2b00      	cmp	r3, #0
 8021e9c:	d115      	bne.n	8021eca <arm_avgpool_s8+0x13e>
                    {
                        for (int i = 0; i < ch_src; i++)
 8021e9e:	2300      	movs	r3, #0
 8021ea0:	673b      	str	r3, [r7, #112]	; 0x70
 8021ea2:	e00d      	b.n	8021ec0 <arm_avgpool_s8+0x134>
                        {
                            buffer[i] = start[i];
 8021ea4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8021ea6:	6a3a      	ldr	r2, [r7, #32]
 8021ea8:	4413      	add	r3, r2
 8021eaa:	f993 1000 	ldrsb.w	r1, [r3]
 8021eae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8021eb0:	009b      	lsls	r3, r3, #2
 8021eb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8021eb4:	4413      	add	r3, r2
 8021eb6:	460a      	mov	r2, r1
 8021eb8:	601a      	str	r2, [r3, #0]
                        for (int i = 0; i < ch_src; i++)
 8021eba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8021ebc:	3301      	adds	r3, #1
 8021ebe:	673b      	str	r3, [r7, #112]	; 0x70
 8021ec0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8021ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8021ec4:	429a      	cmp	r2, r3
 8021ec6:	dbed      	blt.n	8021ea4 <arm_avgpool_s8+0x118>
 8021ec8:	e021      	b.n	8021f0e <arm_avgpool_s8+0x182>
                        }
                    }
                    else
                    {
                        for (int i = 0; i < ch_src; i++)
 8021eca:	2300      	movs	r3, #0
 8021ecc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8021ece:	e01a      	b.n	8021f06 <arm_avgpool_s8+0x17a>
                        {
                            buffer[i] = __QADD(start[i], buffer[i]);
 8021ed0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8021ed2:	6a3a      	ldr	r2, [r7, #32]
 8021ed4:	4413      	add	r3, r2
 8021ed6:	f993 3000 	ldrsb.w	r3, [r3]
 8021eda:	4618      	mov	r0, r3
 8021edc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8021ede:	009b      	lsls	r3, r3, #2
 8021ee0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8021ee2:	4413      	add	r3, r2
 8021ee4:	681a      	ldr	r2, [r3, #0]
 8021ee6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8021ee8:	009b      	lsls	r3, r3, #2
 8021eea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8021eec:	440b      	add	r3, r1
 8021eee:	61f8      	str	r0, [r7, #28]
 8021ef0:	61ba      	str	r2, [r7, #24]

__STATIC_FORCEINLINE  int32_t __QADD( int32_t op1,  int32_t op2)
{
  int32_t result;

  __ASM volatile ("qadd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8021ef2:	69fa      	ldr	r2, [r7, #28]
 8021ef4:	69b9      	ldr	r1, [r7, #24]
 8021ef6:	fa81 f282 	qadd	r2, r2, r1
 8021efa:	617a      	str	r2, [r7, #20]
  return(result);
 8021efc:	697a      	ldr	r2, [r7, #20]
 8021efe:	601a      	str	r2, [r3, #0]
                        for (int i = 0; i < ch_src; i++)
 8021f00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8021f02:	3301      	adds	r3, #1
 8021f04:	66fb      	str	r3, [r7, #108]	; 0x6c
 8021f06:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8021f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8021f0a:	429a      	cmp	r2, r3
 8021f0c:	dbe0      	blt.n	8021ed0 <arm_avgpool_s8+0x144>
                        }
                    }
                    count++;
 8021f0e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8021f10:	3301      	adds	r3, #1
 8021f12:	67fb      	str	r3, [r7, #124]	; 0x7c
                for (int k_x = kernel_x_start; k_x < kernel_x_end; k_x++)
 8021f14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8021f16:	3301      	adds	r3, #1
 8021f18:	677b      	str	r3, [r7, #116]	; 0x74
 8021f1a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8021f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021f1e:	429a      	cmp	r2, r3
 8021f20:	dba7      	blt.n	8021e72 <arm_avgpool_s8+0xe6>
            for (int k_y = kernel_y_start; k_y < kernel_y_end; k_y++)
 8021f22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8021f24:	3301      	adds	r3, #1
 8021f26:	67bb      	str	r3, [r7, #120]	; 0x78
 8021f28:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8021f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021f2c:	429a      	cmp	r2, r3
 8021f2e:	db9d      	blt.n	8021e6c <arm_avgpool_s8+0xe0>
                }
            }

            // Prevent static code issue DIVIDE_BY_ZERO.
            if (count == 0)
 8021f30:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8021f32:	2b00      	cmp	r3, #0
 8021f34:	d102      	bne.n	8021f3c <arm_avgpool_s8+0x1b0>
            {
                return ARM_MATH_ARGUMENT_ERROR;
 8021f36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8021f3a:	e033      	b.n	8021fa4 <arm_avgpool_s8+0x218>
            }

            scale_q31_to_q7_and_clamp(buffer, dst, ch_src, count, act_min, act_max);
 8021f3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8021f3e:	9301      	str	r3, [sp, #4]
 8021f40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8021f42:	9300      	str	r3, [sp, #0]
 8021f44:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8021f46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8021f48:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8021f4c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8021f4e:	f7ff fed2 	bl	8021cf6 <scale_q31_to_q7_and_clamp>
            dst += ch_src;
 8021f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8021f54:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8021f58:	4413      	add	r3, r2
 8021f5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        for (int i_x = 0, idx_x = -pad_x; i_x < output_x; idx_x += stride_x, i_x++)
 8021f5e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8021f62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8021f64:	4413      	add	r3, r2
 8021f66:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8021f6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8021f6e:	3301      	adds	r3, #1
 8021f70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8021f74:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8021f78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8021f7a:	429a      	cmp	r2, r3
 8021f7c:	f6ff af4b 	blt.w	8021e16 <arm_avgpool_s8+0x8a>
    for (int i_y = 0, idx_y = -pad_y; i_y < output_y; idx_y += stride_y, i_y++)
 8021f80:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8021f84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8021f86:	4413      	add	r3, r2
 8021f88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8021f8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8021f90:	3301      	adds	r3, #1
 8021f92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8021f96:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8021f9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8021f9c:	429a      	cmp	r2, r3
 8021f9e:	f6ff af32 	blt.w	8021e06 <arm_avgpool_s8+0x7a>
            }
        }
    }

#endif
    return ARM_MATH_SUCCESS;
 8021fa2:	2300      	movs	r3, #0
}
 8021fa4:	4618      	mov	r0, r3
 8021fa6:	3790      	adds	r7, #144	; 0x90
 8021fa8:	46bd      	mov	sp, r7
 8021faa:	bd80      	pop	{r7, pc}

08021fac <arm_avgpool_s8_get_buffer_size>:

#endif /* ARM_MATH_MVEI */

int32_t arm_avgpool_s8_get_buffer_size(const int output_x, const int ch_src)
{
 8021fac:	b480      	push	{r7}
 8021fae:	b083      	sub	sp, #12
 8021fb0:	af00      	add	r7, sp, #0
 8021fb2:	6078      	str	r0, [r7, #4]
 8021fb4:	6039      	str	r1, [r7, #0]
    (void)output_x;

#if defined(ARM_MATH_DSP) && !defined(ARM_MATH_MVEI)
    return (ch_src * sizeof(int32_t));
 8021fb6:	683b      	ldr	r3, [r7, #0]
 8021fb8:	009b      	lsls	r3, r3, #2
#else
    (void)ch_src;
    return 0;
#endif
}
 8021fba:	4618      	mov	r0, r3
 8021fbc:	370c      	adds	r7, #12
 8021fbe:	46bd      	mov	sp, r7
 8021fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021fc4:	4770      	bx	lr

08021fc6 <compare_and_replace_if_larger_q7>:

#include "arm_nnfunctions.h"
#include "arm_nnsupportfunctions.h"

static void compare_and_replace_if_larger_q7(q7_t *base, const q7_t *target, int32_t length)
{
 8021fc6:	b480      	push	{r7}
 8021fc8:	b091      	sub	sp, #68	; 0x44
 8021fca:	af00      	add	r7, sp, #0
 8021fcc:	60f8      	str	r0, [r7, #12]
 8021fce:	60b9      	str	r1, [r7, #8]
 8021fd0:	607a      	str	r2, [r7, #4]
        base += 16;
        target += 16;
        length -= 16;
    }
#else
    q7_t *dst = base;
 8021fd2:	68fb      	ldr	r3, [r7, #12]
 8021fd4:	62bb      	str	r3, [r7, #40]	; 0x28
    const q7_t *src = target;
 8021fd6:	68bb      	ldr	r3, [r7, #8]
 8021fd8:	627b      	str	r3, [r7, #36]	; 0x24
    union arm_nnword ref_max;
    union arm_nnword comp_max;
    int32_t cnt = length >> 2;
 8021fda:	687b      	ldr	r3, [r7, #4]
 8021fdc:	109b      	asrs	r3, r3, #2
 8021fde:	63fb      	str	r3, [r7, #60]	; 0x3c

    while (cnt > 0l)
 8021fe0:	e050      	b.n	8022084 <compare_and_replace_if_larger_q7+0xbe>
    {
        ref_max.word = arm_nn_read_q7x4(dst);
 8021fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021fe4:	637b      	str	r3, [r7, #52]	; 0x34
 8021fe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021fe8:	681b      	ldr	r3, [r3, #0]
    memcpy(&val, in_q7, 4);
 8021fea:	617b      	str	r3, [r7, #20]
    return (val);
 8021fec:	697b      	ldr	r3, [r7, #20]
 8021fee:	623b      	str	r3, [r7, #32]
 8021ff0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8021ff4:	63bb      	str	r3, [r7, #56]	; 0x38
    memcpy(&val, *in_q7, 4);
 8021ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8021ff8:	681b      	ldr	r3, [r3, #0]
 8021ffa:	681b      	ldr	r3, [r3, #0]
 8021ffc:	613b      	str	r3, [r7, #16]
    *in_q7 += 4;
 8021ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8022000:	681b      	ldr	r3, [r3, #0]
 8022002:	1d1a      	adds	r2, r3, #4
 8022004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8022006:	601a      	str	r2, [r3, #0]
    return (val);
 8022008:	693b      	ldr	r3, [r7, #16]
        comp_max.word = arm_nn_read_q7x4_ia(&src);
 802200a:	61fb      	str	r3, [r7, #28]

        if (comp_max.bytes[0] > ref_max.bytes[0])
 802200c:	f997 201c 	ldrsb.w	r2, [r7, #28]
 8022010:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8022014:	429a      	cmp	r2, r3
 8022016:	dd03      	ble.n	8022020 <compare_and_replace_if_larger_q7+0x5a>
        {
            ref_max.bytes[0] = comp_max.bytes[0];
 8022018:	f997 301c 	ldrsb.w	r3, [r7, #28]
 802201c:	f887 3020 	strb.w	r3, [r7, #32]
        }
        if (comp_max.bytes[1] > ref_max.bytes[1])
 8022020:	f997 201d 	ldrsb.w	r2, [r7, #29]
 8022024:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8022028:	429a      	cmp	r2, r3
 802202a:	dd03      	ble.n	8022034 <compare_and_replace_if_larger_q7+0x6e>
        {
            ref_max.bytes[1] = comp_max.bytes[1];
 802202c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8022030:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        }
        if (comp_max.bytes[2] > ref_max.bytes[2])
 8022034:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8022038:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 802203c:	429a      	cmp	r2, r3
 802203e:	dd03      	ble.n	8022048 <compare_and_replace_if_larger_q7+0x82>
        {
            ref_max.bytes[2] = comp_max.bytes[2];
 8022040:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8022044:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        }
        if (comp_max.bytes[3] > ref_max.bytes[3])
 8022048:	f997 201f 	ldrsb.w	r2, [r7, #31]
 802204c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8022050:	429a      	cmp	r2, r3
 8022052:	dd03      	ble.n	802205c <compare_and_replace_if_larger_q7+0x96>
        {
            ref_max.bytes[3] = comp_max.bytes[3];
 8022054:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8022058:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        }

        write_q7x4_ia(&dst, ref_max.word);
 802205c:	6a3b      	ldr	r3, [r7, #32]
 802205e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8022062:	633a      	str	r2, [r7, #48]	; 0x30
 8022064:	62fb      	str	r3, [r7, #44]	; 0x2c
 */
__STATIC_FORCEINLINE void write_q7x4_ia (
  q7_t ** pQ7,
  q31_t   value)
{
  q31_t val = value;
 8022066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022068:	61bb      	str	r3, [r7, #24]
#ifdef __ARM_FEATURE_UNALIGNED
  memcpy (*pQ7, &val, 4);
 802206a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802206c:	681b      	ldr	r3, [r3, #0]
 802206e:	69ba      	ldr	r2, [r7, #24]
 8022070:	601a      	str	r2, [r3, #0]
  (*pQ7)[1] = (val >> 8) & 0x0FF;
  (*pQ7)[2] = (val >> 16) & 0x0FF;
  (*pQ7)[3] = (val >> 24) & 0x0FF;

#endif
  *pQ7 += 4;
 8022072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022074:	681b      	ldr	r3, [r3, #0]
 8022076:	1d1a      	adds	r2, r3, #4
 8022078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802207a:	601a      	str	r2, [r3, #0]
}
 802207c:	bf00      	nop

        cnt--;
 802207e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8022080:	3b01      	subs	r3, #1
 8022082:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (cnt > 0l)
 8022084:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8022086:	2b00      	cmp	r3, #0
 8022088:	dcab      	bgt.n	8021fe2 <compare_and_replace_if_larger_q7+0x1c>
    }

    cnt = length & 0x3;
 802208a:	687b      	ldr	r3, [r7, #4]
 802208c:	f003 0303 	and.w	r3, r3, #3
 8022090:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (cnt > 0l)
 8022092:	e015      	b.n	80220c0 <compare_and_replace_if_larger_q7+0xfa>
    {
        if (*src > *dst)
 8022094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022096:	f993 2000 	ldrsb.w	r2, [r3]
 802209a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802209c:	f993 3000 	ldrsb.w	r3, [r3]
 80220a0:	429a      	cmp	r2, r3
 80220a2:	dd04      	ble.n	80220ae <compare_and_replace_if_larger_q7+0xe8>
        {
            *dst = *src;
 80220a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80220a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80220a8:	f992 2000 	ldrsb.w	r2, [r2]
 80220ac:	701a      	strb	r2, [r3, #0]
        }
        dst++;
 80220ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80220b0:	3301      	adds	r3, #1
 80220b2:	62bb      	str	r3, [r7, #40]	; 0x28
        src++;
 80220b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80220b6:	3301      	adds	r3, #1
 80220b8:	627b      	str	r3, [r7, #36]	; 0x24
        cnt--;
 80220ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80220bc:	3b01      	subs	r3, #1
 80220be:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (cnt > 0l)
 80220c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80220c2:	2b00      	cmp	r3, #0
 80220c4:	dce6      	bgt.n	8022094 <compare_and_replace_if_larger_q7+0xce>
    }
#endif
}
 80220c6:	bf00      	nop
 80220c8:	bf00      	nop
 80220ca:	3744      	adds	r7, #68	; 0x44
 80220cc:	46bd      	mov	sp, r7
 80220ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80220d2:	4770      	bx	lr

080220d4 <clamp_output>:

static void clamp_output(q7_t *source, int32_t length, const int32_t act_min, const int32_t act_max)
{
 80220d4:	b480      	push	{r7}
 80220d6:	b08d      	sub	sp, #52	; 0x34
 80220d8:	af00      	add	r7, sp, #0
 80220da:	60f8      	str	r0, [r7, #12]
 80220dc:	60b9      	str	r1, [r7, #8]
 80220de:	607a      	str	r2, [r7, #4]
 80220e0:	603b      	str	r3, [r7, #0]
        vstrbq_p_s8(source, res, p);
        source += 16;
    }
#else
    union arm_nnword in;
    int32_t cnt = length >> 2;
 80220e2:	68bb      	ldr	r3, [r7, #8]
 80220e4:	109b      	asrs	r3, r3, #2
 80220e6:	62fb      	str	r3, [r7, #44]	; 0x2c

    while (cnt > 0l)
 80220e8:	e062      	b.n	80221b0 <clamp_output+0xdc>
    {
        in.word = arm_nn_read_q7x4(source);
 80220ea:	68fb      	ldr	r3, [r7, #12]
 80220ec:	61fb      	str	r3, [r7, #28]
 80220ee:	69fb      	ldr	r3, [r7, #28]
 80220f0:	681b      	ldr	r3, [r3, #0]
    memcpy(&val, in_q7, 4);
 80220f2:	617b      	str	r3, [r7, #20]
    return (val);
 80220f4:	697b      	ldr	r3, [r7, #20]
 80220f6:	61bb      	str	r3, [r7, #24]

        in.bytes[0] = MAX(in.bytes[0], act_min);
 80220f8:	f997 3018 	ldrsb.w	r3, [r7, #24]
 80220fc:	461a      	mov	r2, r3
 80220fe:	687b      	ldr	r3, [r7, #4]
 8022100:	4293      	cmp	r3, r2
 8022102:	bfb8      	it	lt
 8022104:	4613      	movlt	r3, r2
 8022106:	b25b      	sxtb	r3, r3
 8022108:	763b      	strb	r3, [r7, #24]
        in.bytes[0] = MIN(in.bytes[0], act_max);
 802210a:	f997 3018 	ldrsb.w	r3, [r7, #24]
 802210e:	461a      	mov	r2, r3
 8022110:	683b      	ldr	r3, [r7, #0]
 8022112:	4293      	cmp	r3, r2
 8022114:	bfa8      	it	ge
 8022116:	4613      	movge	r3, r2
 8022118:	b25b      	sxtb	r3, r3
 802211a:	763b      	strb	r3, [r7, #24]
        in.bytes[1] = MAX(in.bytes[1], act_min);
 802211c:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8022120:	461a      	mov	r2, r3
 8022122:	687b      	ldr	r3, [r7, #4]
 8022124:	4293      	cmp	r3, r2
 8022126:	bfb8      	it	lt
 8022128:	4613      	movlt	r3, r2
 802212a:	b25b      	sxtb	r3, r3
 802212c:	767b      	strb	r3, [r7, #25]
        in.bytes[1] = MIN(in.bytes[1], act_max);
 802212e:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8022132:	461a      	mov	r2, r3
 8022134:	683b      	ldr	r3, [r7, #0]
 8022136:	4293      	cmp	r3, r2
 8022138:	bfa8      	it	ge
 802213a:	4613      	movge	r3, r2
 802213c:	b25b      	sxtb	r3, r3
 802213e:	767b      	strb	r3, [r7, #25]
        in.bytes[2] = MAX(in.bytes[2], act_min);
 8022140:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8022144:	461a      	mov	r2, r3
 8022146:	687b      	ldr	r3, [r7, #4]
 8022148:	4293      	cmp	r3, r2
 802214a:	bfb8      	it	lt
 802214c:	4613      	movlt	r3, r2
 802214e:	b25b      	sxtb	r3, r3
 8022150:	76bb      	strb	r3, [r7, #26]
        in.bytes[2] = MIN(in.bytes[2], act_max);
 8022152:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8022156:	461a      	mov	r2, r3
 8022158:	683b      	ldr	r3, [r7, #0]
 802215a:	4293      	cmp	r3, r2
 802215c:	bfa8      	it	ge
 802215e:	4613      	movge	r3, r2
 8022160:	b25b      	sxtb	r3, r3
 8022162:	76bb      	strb	r3, [r7, #26]
        in.bytes[3] = MAX(in.bytes[3], act_min);
 8022164:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8022168:	461a      	mov	r2, r3
 802216a:	687b      	ldr	r3, [r7, #4]
 802216c:	4293      	cmp	r3, r2
 802216e:	bfb8      	it	lt
 8022170:	4613      	movlt	r3, r2
 8022172:	b25b      	sxtb	r3, r3
 8022174:	76fb      	strb	r3, [r7, #27]
        in.bytes[3] = MIN(in.bytes[3], act_max);
 8022176:	f997 301b 	ldrsb.w	r3, [r7, #27]
 802217a:	461a      	mov	r2, r3
 802217c:	683b      	ldr	r3, [r7, #0]
 802217e:	4293      	cmp	r3, r2
 8022180:	bfa8      	it	ge
 8022182:	4613      	movge	r3, r2
 8022184:	b25b      	sxtb	r3, r3
 8022186:	76fb      	strb	r3, [r7, #27]

        write_q7x4_ia(&source, in.word);
 8022188:	69bb      	ldr	r3, [r7, #24]
 802218a:	f107 020c 	add.w	r2, r7, #12
 802218e:	627a      	str	r2, [r7, #36]	; 0x24
 8022190:	623b      	str	r3, [r7, #32]
  q31_t val = value;
 8022192:	6a3b      	ldr	r3, [r7, #32]
 8022194:	613b      	str	r3, [r7, #16]
  memcpy (*pQ7, &val, 4);
 8022196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022198:	681b      	ldr	r3, [r3, #0]
 802219a:	693a      	ldr	r2, [r7, #16]
 802219c:	601a      	str	r2, [r3, #0]
  *pQ7 += 4;
 802219e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80221a0:	681b      	ldr	r3, [r3, #0]
 80221a2:	1d1a      	adds	r2, r3, #4
 80221a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80221a6:	601a      	str	r2, [r3, #0]
}
 80221a8:	bf00      	nop
        cnt--;
 80221aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80221ac:	3b01      	subs	r3, #1
 80221ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (cnt > 0l)
 80221b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80221b2:	2b00      	cmp	r3, #0
 80221b4:	dc99      	bgt.n	80220ea <clamp_output+0x16>
    }

    cnt = length & 0x3;
 80221b6:	68bb      	ldr	r3, [r7, #8]
 80221b8:	f003 0303 	and.w	r3, r3, #3
 80221bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (cnt > 0l)
 80221be:	e018      	b.n	80221f2 <clamp_output+0x11e>
    {
        int32_t comp = *source;
 80221c0:	68fb      	ldr	r3, [r7, #12]
 80221c2:	f993 3000 	ldrsb.w	r3, [r3]
 80221c6:	62bb      	str	r3, [r7, #40]	; 0x28
        comp = MAX(comp, act_min);
 80221c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80221ca:	687b      	ldr	r3, [r7, #4]
 80221cc:	4293      	cmp	r3, r2
 80221ce:	bfb8      	it	lt
 80221d0:	4613      	movlt	r3, r2
 80221d2:	62bb      	str	r3, [r7, #40]	; 0x28
        comp = MIN(comp, act_max);
 80221d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80221d6:	683b      	ldr	r3, [r7, #0]
 80221d8:	4293      	cmp	r3, r2
 80221da:	bfa8      	it	ge
 80221dc:	4613      	movge	r3, r2
 80221de:	62bb      	str	r3, [r7, #40]	; 0x28
        *source++ = (int8_t)comp;
 80221e0:	68fb      	ldr	r3, [r7, #12]
 80221e2:	1c5a      	adds	r2, r3, #1
 80221e4:	60fa      	str	r2, [r7, #12]
 80221e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80221e8:	b252      	sxtb	r2, r2
 80221ea:	701a      	strb	r2, [r3, #0]
        cnt--;
 80221ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80221ee:	3b01      	subs	r3, #1
 80221f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (cnt > 0l)
 80221f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80221f4:	2b00      	cmp	r3, #0
 80221f6:	dce3      	bgt.n	80221c0 <clamp_output+0xec>
    }
#endif
}
 80221f8:	bf00      	nop
 80221fa:	bf00      	nop
 80221fc:	3734      	adds	r7, #52	; 0x34
 80221fe:	46bd      	mov	sp, r7
 8022200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022204:	4770      	bx	lr

08022206 <arm_max_pool_s8>:
                           const cmsis_nn_dims *input_dims,
                           const q7_t *src,
                           const cmsis_nn_dims *filter_dims,
                           const cmsis_nn_dims *output_dims,
                           q7_t *dst)
{
 8022206:	b580      	push	{r7, lr}
 8022208:	b09e      	sub	sp, #120	; 0x78
 802220a:	af00      	add	r7, sp, #0
 802220c:	60f8      	str	r0, [r7, #12]
 802220e:	60b9      	str	r1, [r7, #8]
 8022210:	607a      	str	r2, [r7, #4]
 8022212:	603b      	str	r3, [r7, #0]
    const int32_t input_y = input_dims->h;
 8022214:	687b      	ldr	r3, [r7, #4]
 8022216:	685b      	ldr	r3, [r3, #4]
 8022218:	65bb      	str	r3, [r7, #88]	; 0x58
    const int32_t input_x = input_dims->w;
 802221a:	687b      	ldr	r3, [r7, #4]
 802221c:	689b      	ldr	r3, [r3, #8]
 802221e:	657b      	str	r3, [r7, #84]	; 0x54
    const int32_t output_y = output_dims->h;
 8022220:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8022224:	685b      	ldr	r3, [r3, #4]
 8022226:	653b      	str	r3, [r7, #80]	; 0x50
    const int32_t output_x = output_dims->w;
 8022228:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 802222c:	689b      	ldr	r3, [r3, #8]
 802222e:	64fb      	str	r3, [r7, #76]	; 0x4c
    const int32_t stride_y = pool_params->stride.h;
 8022230:	68bb      	ldr	r3, [r7, #8]
 8022232:	685b      	ldr	r3, [r3, #4]
 8022234:	64bb      	str	r3, [r7, #72]	; 0x48
    const int32_t stride_x = pool_params->stride.w;
 8022236:	68bb      	ldr	r3, [r7, #8]
 8022238:	681b      	ldr	r3, [r3, #0]
 802223a:	647b      	str	r3, [r7, #68]	; 0x44
    const int32_t kernel_y = filter_dims->h;
 802223c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8022240:	685b      	ldr	r3, [r3, #4]
 8022242:	643b      	str	r3, [r7, #64]	; 0x40
    const int32_t kernel_x = filter_dims->w;
 8022244:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8022248:	689b      	ldr	r3, [r3, #8]
 802224a:	63fb      	str	r3, [r7, #60]	; 0x3c
    const int32_t pad_y = pool_params->padding.h;
 802224c:	68bb      	ldr	r3, [r7, #8]
 802224e:	68db      	ldr	r3, [r3, #12]
 8022250:	63bb      	str	r3, [r7, #56]	; 0x38
    const int32_t pad_x = pool_params->padding.w;
 8022252:	68bb      	ldr	r3, [r7, #8]
 8022254:	689b      	ldr	r3, [r3, #8]
 8022256:	637b      	str	r3, [r7, #52]	; 0x34
    const int32_t act_min = pool_params->activation.min;
 8022258:	68bb      	ldr	r3, [r7, #8]
 802225a:	691b      	ldr	r3, [r3, #16]
 802225c:	633b      	str	r3, [r7, #48]	; 0x30
    const int32_t act_max = pool_params->activation.max;
 802225e:	68bb      	ldr	r3, [r7, #8]
 8022260:	695b      	ldr	r3, [r3, #20]
 8022262:	62fb      	str	r3, [r7, #44]	; 0x2c
    const int32_t channel_in = input_dims->c;
 8022264:	687b      	ldr	r3, [r7, #4]
 8022266:	68db      	ldr	r3, [r3, #12]
 8022268:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)ctx;
    q7_t *dst_base = dst;
 802226a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 802226e:	627b      	str	r3, [r7, #36]	; 0x24

    for (int i_y = 0, base_idx_y = -pad_y; i_y < output_y; base_idx_y += stride_y, i_y++)
 8022270:	2300      	movs	r3, #0
 8022272:	677b      	str	r3, [r7, #116]	; 0x74
 8022274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8022276:	425b      	negs	r3, r3
 8022278:	673b      	str	r3, [r7, #112]	; 0x70
 802227a:	e078      	b.n	802236e <arm_max_pool_s8+0x168>
    {
        for (int i_x = 0, base_idx_x = -pad_x; i_x < output_x; base_idx_x += stride_x, i_x++)
 802227c:	2300      	movs	r3, #0
 802227e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8022280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8022282:	425b      	negs	r3, r3
 8022284:	66bb      	str	r3, [r7, #104]	; 0x68
 8022286:	e067      	b.n	8022358 <arm_max_pool_s8+0x152>
        {
            /* Condition for kernel start dimension: (base_idx_<x,y> + kernel_<x,y>_start) >= 0 */
            const int32_t ker_y_start = MAX(0, -base_idx_y);
 8022288:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 802228a:	2b00      	cmp	r3, #0
 802228c:	dc02      	bgt.n	8022294 <arm_max_pool_s8+0x8e>
 802228e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8022290:	425b      	negs	r3, r3
 8022292:	e000      	b.n	8022296 <arm_max_pool_s8+0x90>
 8022294:	2300      	movs	r3, #0
 8022296:	623b      	str	r3, [r7, #32]
            const int32_t ker_x_start = MAX(0, -base_idx_x);
 8022298:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 802229a:	2b00      	cmp	r3, #0
 802229c:	dc02      	bgt.n	80222a4 <arm_max_pool_s8+0x9e>
 802229e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80222a0:	425b      	negs	r3, r3
 80222a2:	e000      	b.n	80222a6 <arm_max_pool_s8+0xa0>
 80222a4:	2300      	movs	r3, #0
 80222a6:	61fb      	str	r3, [r7, #28]

            /* Condition for kernel end dimension: (base_idx_<x,y> + kernel_<x,y>_end) < dim_src_<width,height> */
            const int32_t kernel_y_end = MIN(kernel_y, input_y - base_idx_y);
 80222a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80222aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80222ac:	1ad3      	subs	r3, r2, r3
 80222ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80222b0:	4293      	cmp	r3, r2
 80222b2:	bfa8      	it	ge
 80222b4:	4613      	movge	r3, r2
 80222b6:	61bb      	str	r3, [r7, #24]
            const int32_t kernel_x_end = MIN(kernel_x, input_x - base_idx_x);
 80222b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80222ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80222bc:	1ad3      	subs	r3, r2, r3
 80222be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80222c0:	4293      	cmp	r3, r2
 80222c2:	bfa8      	it	ge
 80222c4:	4613      	movge	r3, r2
 80222c6:	617b      	str	r3, [r7, #20]

            int count = 0;
 80222c8:	2300      	movs	r3, #0
 80222ca:	667b      	str	r3, [r7, #100]	; 0x64

            for (int k_y = ker_y_start; k_y < kernel_y_end; k_y++)
 80222cc:	6a3b      	ldr	r3, [r7, #32]
 80222ce:	663b      	str	r3, [r7, #96]	; 0x60
 80222d0:	e031      	b.n	8022336 <arm_max_pool_s8+0x130>
            {
                for (int k_x = ker_x_start; k_x < kernel_x_end; k_x++)
 80222d2:	69fb      	ldr	r3, [r7, #28]
 80222d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80222d6:	e027      	b.n	8022328 <arm_max_pool_s8+0x122>
                {
                    const q7_t *start = src + channel_in * (k_x + base_idx_x + (k_y + base_idx_y) * input_x);
 80222d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80222da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80222dc:	441a      	add	r2, r3
 80222de:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80222e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80222e2:	440b      	add	r3, r1
 80222e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80222e6:	fb01 f303 	mul.w	r3, r1, r3
 80222ea:	4413      	add	r3, r2
 80222ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80222ee:	fb02 f303 	mul.w	r3, r2, r3
 80222f2:	461a      	mov	r2, r3
 80222f4:	683b      	ldr	r3, [r7, #0]
 80222f6:	4413      	add	r3, r2
 80222f8:	613b      	str	r3, [r7, #16]

                    if (count == 0)
 80222fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80222fc:	2b00      	cmp	r3, #0
 80222fe:	d10a      	bne.n	8022316 <arm_max_pool_s8+0x110>
                    {
                        memcpy(dst, start, channel_in);
 8022300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022302:	461a      	mov	r2, r3
 8022304:	6939      	ldr	r1, [r7, #16]
 8022306:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 802230a:	f003 fc85 	bl	8025c18 <memcpy>
                        count++;
 802230e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8022310:	3301      	adds	r3, #1
 8022312:	667b      	str	r3, [r7, #100]	; 0x64
 8022314:	e005      	b.n	8022322 <arm_max_pool_s8+0x11c>
                    }
                    else
                    {
                        compare_and_replace_if_larger_q7(dst, start, channel_in);
 8022316:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8022318:	6939      	ldr	r1, [r7, #16]
 802231a:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 802231e:	f7ff fe52 	bl	8021fc6 <compare_and_replace_if_larger_q7>
                for (int k_x = ker_x_start; k_x < kernel_x_end; k_x++)
 8022322:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8022324:	3301      	adds	r3, #1
 8022326:	65fb      	str	r3, [r7, #92]	; 0x5c
 8022328:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 802232a:	697b      	ldr	r3, [r7, #20]
 802232c:	429a      	cmp	r2, r3
 802232e:	dbd3      	blt.n	80222d8 <arm_max_pool_s8+0xd2>
            for (int k_y = ker_y_start; k_y < kernel_y_end; k_y++)
 8022330:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8022332:	3301      	adds	r3, #1
 8022334:	663b      	str	r3, [r7, #96]	; 0x60
 8022336:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8022338:	69bb      	ldr	r3, [r7, #24]
 802233a:	429a      	cmp	r2, r3
 802233c:	dbc9      	blt.n	80222d2 <arm_max_pool_s8+0xcc>
                    }
                }
            }
            /* 'count' is expected to be non-zero here. */
            dst += channel_in;
 802233e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022340:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8022344:	4413      	add	r3, r2
 8022346:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (int i_x = 0, base_idx_x = -pad_x; i_x < output_x; base_idx_x += stride_x, i_x++)
 802234a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 802234c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802234e:	4413      	add	r3, r2
 8022350:	66bb      	str	r3, [r7, #104]	; 0x68
 8022352:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8022354:	3301      	adds	r3, #1
 8022356:	66fb      	str	r3, [r7, #108]	; 0x6c
 8022358:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 802235a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802235c:	429a      	cmp	r2, r3
 802235e:	db93      	blt.n	8022288 <arm_max_pool_s8+0x82>
    for (int i_y = 0, base_idx_y = -pad_y; i_y < output_y; base_idx_y += stride_y, i_y++)
 8022360:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8022362:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8022364:	4413      	add	r3, r2
 8022366:	673b      	str	r3, [r7, #112]	; 0x70
 8022368:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802236a:	3301      	adds	r3, #1
 802236c:	677b      	str	r3, [r7, #116]	; 0x74
 802236e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8022370:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8022372:	429a      	cmp	r2, r3
 8022374:	db82      	blt.n	802227c <arm_max_pool_s8+0x76>
        }
    }

    clamp_output(dst_base, output_x * output_y * channel_in, act_min, act_max);
 8022376:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8022378:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802237a:	fb02 f303 	mul.w	r3, r2, r3
 802237e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8022380:	fb02 f103 	mul.w	r1, r2, r3
 8022384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022386:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8022388:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802238a:	f7ff fea3 	bl	80220d4 <clamp_output>

    return ARM_MATH_SUCCESS;
 802238e:	2300      	movs	r3, #0
}
 8022390:	4618      	mov	r0, r3
 8022392:	3778      	adds	r7, #120	; 0x78
 8022394:	46bd      	mov	sp, r7
 8022396:	bd80      	pop	{r7, pc}

08022398 <arm_softmax_s8>:
                    const int32_t row_size,
                    const int32_t mult,
                    const int32_t shift,
                    const int32_t diff_min,
                    int8_t *output)
{
 8022398:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 802239c:	f5ad 6dbf 	sub.w	sp, sp, #1528	; 0x5f8
 80223a0:	af00      	add	r7, sp, #0
 80223a2:	f507 740d 	add.w	r4, r7, #564	; 0x234
 80223a6:	6020      	str	r0, [r4, #0]
 80223a8:	f507 700c 	add.w	r0, r7, #560	; 0x230
 80223ac:	6001      	str	r1, [r0, #0]
 80223ae:	f507 710b 	add.w	r1, r7, #556	; 0x22c
 80223b2:	600a      	str	r2, [r1, #0]
 80223b4:	f507 720a 	add.w	r2, r7, #552	; 0x228
 80223b8:	6013      	str	r3, [r2, #0]

        input += row_size;
        output += row_size;
    }
#else
    const int32_t mask = (1 << shift);
 80223ba:	2201      	movs	r2, #1
 80223bc:	f8d7 3618 	ldr.w	r3, [r7, #1560]	; 0x618
 80223c0:	fa02 f303 	lsl.w	r3, r2, r3
 80223c4:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4

    int32_t col = 0;
 80223c8:	2300      	movs	r3, #0
 80223ca:	f8c7 35f4 	str.w	r3, [r7, #1524]	; 0x5f4
    int32_t row_idx;

    for (row_idx = 0; row_idx < num_rows; ++row_idx)
 80223ce:	2300      	movs	r3, #0
 80223d0:	f8c7 35f0 	str.w	r3, [r7, #1520]	; 0x5f0
 80223d4:	f003 b84a 	b.w	802546c <arm_softmax_s8+0x30d4>
    {
        // Find the maximum value in order to ensure numerical stability
        int8_t max = *input;
 80223d8:	f507 730d 	add.w	r3, r7, #564	; 0x234
 80223dc:	681b      	ldr	r3, [r3, #0]
 80223de:	781b      	ldrb	r3, [r3, #0]
 80223e0:	f887 35ef 	strb.w	r3, [r7, #1519]	; 0x5ef

        for (col = 1; col < row_size; ++col)
 80223e4:	2301      	movs	r3, #1
 80223e6:	f8c7 35f4 	str.w	r3, [r7, #1524]	; 0x5f4
 80223ea:	e013      	b.n	8022414 <arm_softmax_s8+0x7c>
        {
            max = MAX(max, input[col]);
 80223ec:	f8d7 25f4 	ldr.w	r2, [r7, #1524]	; 0x5f4
 80223f0:	f507 730d 	add.w	r3, r7, #564	; 0x234
 80223f4:	681b      	ldr	r3, [r3, #0]
 80223f6:	4413      	add	r3, r2
 80223f8:	f993 2000 	ldrsb.w	r2, [r3]
 80223fc:	f997 35ef 	ldrsb.w	r3, [r7, #1519]	; 0x5ef
 8022400:	4293      	cmp	r3, r2
 8022402:	bfb8      	it	lt
 8022404:	4613      	movlt	r3, r2
 8022406:	f887 35ef 	strb.w	r3, [r7, #1519]	; 0x5ef
        for (col = 1; col < row_size; ++col)
 802240a:	f8d7 35f4 	ldr.w	r3, [r7, #1524]	; 0x5f4
 802240e:	3301      	adds	r3, #1
 8022410:	f8c7 35f4 	str.w	r3, [r7, #1524]	; 0x5f4
 8022414:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 8022418:	f8d7 25f4 	ldr.w	r2, [r7, #1524]	; 0x5f4
 802241c:	681b      	ldr	r3, [r3, #0]
 802241e:	429a      	cmp	r2, r3
 8022420:	dbe4      	blt.n	80223ec <arm_softmax_s8+0x54>
        }

        int32_t diff = 0;
 8022422:	2300      	movs	r3, #0
 8022424:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
        int32_t sum = 0;
 8022428:	2300      	movs	r3, #0
 802242a:	f8c7 35e8 	str.w	r3, [r7, #1512]	; 0x5e8

        for (col = 0; col < row_size; ++col)
 802242e:	2300      	movs	r3, #0
 8022430:	f8c7 35f4 	str.w	r3, [r7, #1524]	; 0x5f4
 8022434:	f001 b8a1 	b.w	802357a <arm_softmax_s8+0x11e2>
        {
            diff = input[col] - max;
 8022438:	f8d7 25f4 	ldr.w	r2, [r7, #1524]	; 0x5f4
 802243c:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8022440:	681b      	ldr	r3, [r3, #0]
 8022442:	4413      	add	r3, r2
 8022444:	f993 3000 	ldrsb.w	r3, [r3]
 8022448:	461a      	mov	r2, r3
 802244a:	f997 35ef 	ldrsb.w	r3, [r7, #1519]	; 0x5ef
 802244e:	1ad3      	subs	r3, r2, r3
 8022450:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
            if (diff >= diff_min)
 8022454:	f8d7 25e0 	ldr.w	r2, [r7, #1504]	; 0x5e0
 8022458:	f8d7 361c 	ldr.w	r3, [r7, #1564]	; 0x61c
 802245c:	429a      	cmp	r2, r3
 802245e:	f2c1 8087 	blt.w	8023570 <arm_softmax_s8+0x11d8>
            {
                sum += DIV_POW2(EXP_ON_NEG(MUL_SAT(diff * mask, mult)), ACCUM_BITS);
 8022462:	f8d7 25e0 	ldr.w	r2, [r7, #1504]	; 0x5e0
 8022466:	f8d7 35e4 	ldr.w	r3, [r7, #1508]	; 0x5e4
 802246a:	fb03 f202 	mul.w	r2, r3, r2
 802246e:	f207 439c 	addw	r3, r7, #1180	; 0x49c
 8022472:	601a      	str	r2, [r3, #0]
 8022474:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 8022478:	f507 730a 	add.w	r3, r7, #552	; 0x228
 802247c:	681b      	ldr	r3, [r3, #0]
 802247e:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8022480:	f207 4294 	addw	r2, r7, #1172	; 0x494
 8022484:	2300      	movs	r3, #0
 8022486:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8022488:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 802248c:	f04f 0300 	mov.w	r3, #0
 8022490:	f507 6191 	add.w	r1, r7, #1160	; 0x488
 8022494:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8022498:	f207 439c 	addw	r3, r7, #1180	; 0x49c
 802249c:	681b      	ldr	r3, [r3, #0]
 802249e:	0fdb      	lsrs	r3, r3, #31
 80224a0:	b2da      	uxtb	r2, r3
 80224a2:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80224a6:	681b      	ldr	r3, [r3, #0]
 80224a8:	0fdb      	lsrs	r3, r3, #31
 80224aa:	b2db      	uxtb	r3, r3
 80224ac:	4053      	eors	r3, r2
 80224ae:	b2db      	uxtb	r3, r3
 80224b0:	2b00      	cmp	r3, #0
 80224b2:	d014      	beq.n	80224de <arm_softmax_s8+0x146>
        mult = 1 - mult;
 80224b4:	f04f 0001 	mov.w	r0, #1
 80224b8:	f04f 0100 	mov.w	r1, #0
 80224bc:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 80224c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80224c4:	1a84      	subs	r4, r0, r2
 80224c6:	f8c7 4220 	str.w	r4, [r7, #544]	; 0x220
 80224ca:	eb61 0303 	sbc.w	r3, r1, r3
 80224ce:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 80224d2:	e9d7 3488 	ldrd	r3, r4, [r7, #544]	; 0x220
 80224d6:	f507 6291 	add.w	r2, r7, #1160	; 0x488
 80224da:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80224de:	f207 439c 	addw	r3, r7, #1180	; 0x49c
 80224e2:	681b      	ldr	r3, [r3, #0]
 80224e4:	4618      	mov	r0, r3
 80224e6:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80224ea:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80224ee:	681b      	ldr	r3, [r3, #0]
 80224f0:	461a      	mov	r2, r3
 80224f2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80224f6:	fb02 f501 	mul.w	r5, r2, r1
 80224fa:	fb00 f403 	mul.w	r4, r0, r3
 80224fe:	442c      	add	r4, r5
 8022500:	fba0 0102 	umull	r0, r1, r0, r2
 8022504:	1863      	adds	r3, r4, r1
 8022506:	4619      	mov	r1, r3
 8022508:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 802250c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022510:	1814      	adds	r4, r2, r0
 8022512:	f8c7 4218 	str.w	r4, [r7, #536]	; 0x218
 8022516:	414b      	adcs	r3, r1
 8022518:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 802251c:	e9d7 3486 	ldrd	r3, r4, [r7, #536]	; 0x218
 8022520:	f507 6291 	add.w	r2, r7, #1160	; 0x488
 8022524:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8022528:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 802252c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022530:	4610      	mov	r0, r2
 8022532:	4619      	mov	r1, r3
 8022534:	2800      	cmp	r0, #0
 8022536:	f171 0300 	sbcs.w	r3, r1, #0
 802253a:	da06      	bge.n	802254a <arm_softmax_s8+0x1b2>
 802253c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8022540:	f04f 0300 	mov.w	r3, #0
 8022544:	1880      	adds	r0, r0, r2
 8022546:	eb43 0101 	adc.w	r1, r3, r1
 802254a:	f04f 0200 	mov.w	r2, #0
 802254e:	f04f 0300 	mov.w	r3, #0
 8022552:	0fc2      	lsrs	r2, r0, #31
 8022554:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8022558:	17cb      	asrs	r3, r1, #31
 802255a:	4610      	mov	r0, r2
 802255c:	4619      	mov	r1, r3
 802255e:	f207 4294 	addw	r2, r7, #1172	; 0x494
 8022562:	4603      	mov	r3, r0
 8022564:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8022566:	f207 429c 	addw	r2, r7, #1180	; 0x49c
 802256a:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 802256e:	6812      	ldr	r2, [r2, #0]
 8022570:	681b      	ldr	r3, [r3, #0]
 8022572:	429a      	cmp	r2, r3
 8022574:	d10a      	bne.n	802258c <arm_softmax_s8+0x1f4>
 8022576:	f207 439c 	addw	r3, r7, #1180	; 0x49c
 802257a:	681b      	ldr	r3, [r3, #0]
 802257c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8022580:	d104      	bne.n	802258c <arm_softmax_s8+0x1f4>
        result = Q31_MAX;
 8022582:	f207 4294 	addw	r2, r7, #1172	; 0x494
 8022586:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 802258a:	6013      	str	r3, [r2, #0]
    return result;
 802258c:	f207 4394 	addw	r3, r7, #1172	; 0x494
 8022590:	681b      	ldr	r3, [r3, #0]
 8022592:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
    int32_t mask = 0;
 8022596:	2300      	movs	r3, #0
 8022598:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
    int32_t shift = 24;
 802259c:	2318      	movs	r3, #24
 802259e:	f8c7 35b0 	str.w	r3, [r7, #1456]	; 0x5b0
    const int32_t val_mod_minus_quarter = (val & ((1 << shift) - 1)) - (1 << shift);
 80225a2:	2201      	movs	r2, #1
 80225a4:	f8d7 35b0 	ldr.w	r3, [r7, #1456]	; 0x5b0
 80225a8:	fa02 f303 	lsl.w	r3, r2, r3
 80225ac:	1e5a      	subs	r2, r3, #1
 80225ae:	f8d7 35b8 	ldr.w	r3, [r7, #1464]	; 0x5b8
 80225b2:	ea02 0103 	and.w	r1, r2, r3
 80225b6:	2201      	movs	r2, #1
 80225b8:	f8d7 35b0 	ldr.w	r3, [r7, #1456]	; 0x5b0
 80225bc:	fa02 f303 	lsl.w	r3, r2, r3
 80225c0:	1acb      	subs	r3, r1, r3
 80225c2:	f8c7 35ac 	str.w	r3, [r7, #1452]	; 0x5ac
    const int32_t remainder = val_mod_minus_quarter - val;
 80225c6:	f8d7 25ac 	ldr.w	r2, [r7, #1452]	; 0x5ac
 80225ca:	f8d7 35b8 	ldr.w	r3, [r7, #1464]	; 0x5b8
 80225ce:	1ad3      	subs	r3, r2, r3
 80225d0:	f8c7 35a8 	str.w	r3, [r7, #1448]	; 0x5a8
    const int32_t x = (val_mod_minus_quarter << 5) + (1 << 28);
 80225d4:	f8d7 35ac 	ldr.w	r3, [r7, #1452]	; 0x5ac
 80225d8:	015b      	lsls	r3, r3, #5
 80225da:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 80225de:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
 80225e2:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 80225e6:	f8c7 35a0 	str.w	r3, [r7, #1440]	; 0x5a0
 80225ea:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 80225ee:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c
    q31_t result = 0;
 80225f2:	2300      	movs	r3, #0
 80225f4:	f8c7 3598 	str.w	r3, [r7, #1432]	; 0x598
    q63_t mult = 1 << 30;
 80225f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80225fc:	f04f 0300 	mov.w	r3, #0
 8022600:	f507 61b2 	add.w	r1, r7, #1424	; 0x590
 8022604:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8022608:	f8d7 35a0 	ldr.w	r3, [r7, #1440]	; 0x5a0
 802260c:	0fdb      	lsrs	r3, r3, #31
 802260e:	b2da      	uxtb	r2, r3
 8022610:	f8d7 359c 	ldr.w	r3, [r7, #1436]	; 0x59c
 8022614:	0fdb      	lsrs	r3, r3, #31
 8022616:	b2db      	uxtb	r3, r3
 8022618:	4053      	eors	r3, r2
 802261a:	b2db      	uxtb	r3, r3
 802261c:	2b00      	cmp	r3, #0
 802261e:	d014      	beq.n	802264a <arm_softmax_s8+0x2b2>
        mult = 1 - mult;
 8022620:	f04f 0001 	mov.w	r0, #1
 8022624:	f04f 0100 	mov.w	r1, #0
 8022628:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 802262c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022630:	1a84      	subs	r4, r0, r2
 8022632:	f8c7 4210 	str.w	r4, [r7, #528]	; 0x210
 8022636:	eb61 0303 	sbc.w	r3, r1, r3
 802263a:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 802263e:	e9d7 3484 	ldrd	r3, r4, [r7, #528]	; 0x210
 8022642:	f507 62b2 	add.w	r2, r7, #1424	; 0x590
 8022646:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 802264a:	f8d7 35a0 	ldr.w	r3, [r7, #1440]	; 0x5a0
 802264e:	4618      	mov	r0, r3
 8022650:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8022654:	f8d7 359c 	ldr.w	r3, [r7, #1436]	; 0x59c
 8022658:	461a      	mov	r2, r3
 802265a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 802265e:	fb02 f501 	mul.w	r5, r2, r1
 8022662:	fb00 f403 	mul.w	r4, r0, r3
 8022666:	442c      	add	r4, r5
 8022668:	fba0 0102 	umull	r0, r1, r0, r2
 802266c:	1863      	adds	r3, r4, r1
 802266e:	4619      	mov	r1, r3
 8022670:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 8022674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022678:	1814      	adds	r4, r2, r0
 802267a:	f8c7 4208 	str.w	r4, [r7, #520]	; 0x208
 802267e:	414b      	adcs	r3, r1
 8022680:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8022684:	e9d7 3482 	ldrd	r3, r4, [r7, #520]	; 0x208
 8022688:	f507 62b2 	add.w	r2, r7, #1424	; 0x590
 802268c:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8022690:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 8022694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022698:	4610      	mov	r0, r2
 802269a:	4619      	mov	r1, r3
 802269c:	2800      	cmp	r0, #0
 802269e:	f171 0300 	sbcs.w	r3, r1, #0
 80226a2:	da06      	bge.n	80226b2 <arm_softmax_s8+0x31a>
 80226a4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80226a8:	f04f 0300 	mov.w	r3, #0
 80226ac:	1880      	adds	r0, r0, r2
 80226ae:	eb43 0101 	adc.w	r1, r3, r1
 80226b2:	f04f 0200 	mov.w	r2, #0
 80226b6:	f04f 0300 	mov.w	r3, #0
 80226ba:	0fc2      	lsrs	r2, r0, #31
 80226bc:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80226c0:	17cb      	asrs	r3, r1, #31
 80226c2:	4613      	mov	r3, r2
 80226c4:	f8c7 3598 	str.w	r3, [r7, #1432]	; 0x598
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80226c8:	f8d7 25a0 	ldr.w	r2, [r7, #1440]	; 0x5a0
 80226cc:	f8d7 359c 	ldr.w	r3, [r7, #1436]	; 0x59c
 80226d0:	429a      	cmp	r2, r3
 80226d2:	d108      	bne.n	80226e6 <arm_softmax_s8+0x34e>
 80226d4:	f8d7 35a0 	ldr.w	r3, [r7, #1440]	; 0x5a0
 80226d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80226dc:	d103      	bne.n	80226e6 <arm_softmax_s8+0x34e>
        result = Q31_MAX;
 80226de:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80226e2:	f8c7 3598 	str.w	r3, [r7, #1432]	; 0x598
    return result;
 80226e6:	f8d7 3598 	ldr.w	r3, [r7, #1432]	; 0x598
    const int32_t x2 = MUL_SAT(x, x);
 80226ea:	f8c7 358c 	str.w	r3, [r7, #1420]	; 0x58c
 80226ee:	f8d7 358c 	ldr.w	r3, [r7, #1420]	; 0x58c
 80226f2:	f8c7 3588 	str.w	r3, [r7, #1416]	; 0x588
 80226f6:	f8d7 358c 	ldr.w	r3, [r7, #1420]	; 0x58c
 80226fa:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
    q31_t result = 0;
 80226fe:	2300      	movs	r3, #0
 8022700:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580
    q63_t mult = 1 << 30;
 8022704:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8022708:	f04f 0300 	mov.w	r3, #0
 802270c:	f507 61af 	add.w	r1, r7, #1400	; 0x578
 8022710:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8022714:	f8d7 3588 	ldr.w	r3, [r7, #1416]	; 0x588
 8022718:	0fdb      	lsrs	r3, r3, #31
 802271a:	b2da      	uxtb	r2, r3
 802271c:	f8d7 3584 	ldr.w	r3, [r7, #1412]	; 0x584
 8022720:	0fdb      	lsrs	r3, r3, #31
 8022722:	b2db      	uxtb	r3, r3
 8022724:	4053      	eors	r3, r2
 8022726:	b2db      	uxtb	r3, r3
 8022728:	2b00      	cmp	r3, #0
 802272a:	d014      	beq.n	8022756 <arm_softmax_s8+0x3be>
        mult = 1 - mult;
 802272c:	f04f 0001 	mov.w	r0, #1
 8022730:	f04f 0100 	mov.w	r1, #0
 8022734:	f507 63af 	add.w	r3, r7, #1400	; 0x578
 8022738:	e9d3 2300 	ldrd	r2, r3, [r3]
 802273c:	1a84      	subs	r4, r0, r2
 802273e:	f8c7 4200 	str.w	r4, [r7, #512]	; 0x200
 8022742:	eb61 0303 	sbc.w	r3, r1, r3
 8022746:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 802274a:	e9d7 3480 	ldrd	r3, r4, [r7, #512]	; 0x200
 802274e:	f507 62af 	add.w	r2, r7, #1400	; 0x578
 8022752:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8022756:	f8d7 3588 	ldr.w	r3, [r7, #1416]	; 0x588
 802275a:	4618      	mov	r0, r3
 802275c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8022760:	f8d7 3584 	ldr.w	r3, [r7, #1412]	; 0x584
 8022764:	461a      	mov	r2, r3
 8022766:	ea4f 73e2 	mov.w	r3, r2, asr #31
 802276a:	fb02 f501 	mul.w	r5, r2, r1
 802276e:	fb00 f403 	mul.w	r4, r0, r3
 8022772:	442c      	add	r4, r5
 8022774:	fba0 0102 	umull	r0, r1, r0, r2
 8022778:	1863      	adds	r3, r4, r1
 802277a:	4619      	mov	r1, r3
 802277c:	f507 63af 	add.w	r3, r7, #1400	; 0x578
 8022780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022784:	1814      	adds	r4, r2, r0
 8022786:	f8c7 41f8 	str.w	r4, [r7, #504]	; 0x1f8
 802278a:	414b      	adcs	r3, r1
 802278c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 8022790:	e9d7 347e 	ldrd	r3, r4, [r7, #504]	; 0x1f8
 8022794:	f507 62af 	add.w	r2, r7, #1400	; 0x578
 8022798:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 802279c:	f507 63af 	add.w	r3, r7, #1400	; 0x578
 80227a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80227a4:	4610      	mov	r0, r2
 80227a6:	4619      	mov	r1, r3
 80227a8:	2800      	cmp	r0, #0
 80227aa:	f171 0300 	sbcs.w	r3, r1, #0
 80227ae:	da06      	bge.n	80227be <arm_softmax_s8+0x426>
 80227b0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80227b4:	f04f 0300 	mov.w	r3, #0
 80227b8:	1880      	adds	r0, r0, r2
 80227ba:	eb43 0101 	adc.w	r1, r3, r1
 80227be:	f04f 0200 	mov.w	r2, #0
 80227c2:	f04f 0300 	mov.w	r3, #0
 80227c6:	0fc2      	lsrs	r2, r0, #31
 80227c8:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80227cc:	17cb      	asrs	r3, r1, #31
 80227ce:	4613      	mov	r3, r2
 80227d0:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80227d4:	f8d7 2588 	ldr.w	r2, [r7, #1416]	; 0x588
 80227d8:	f8d7 3584 	ldr.w	r3, [r7, #1412]	; 0x584
 80227dc:	429a      	cmp	r2, r3
 80227de:	d108      	bne.n	80227f2 <arm_softmax_s8+0x45a>
 80227e0:	f8d7 3588 	ldr.w	r3, [r7, #1416]	; 0x588
 80227e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80227e8:	d103      	bne.n	80227f2 <arm_softmax_s8+0x45a>
        result = Q31_MAX;
 80227ea:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80227ee:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580
    return result;
 80227f2:	f8d7 3580 	ldr.w	r3, [r7, #1408]	; 0x580
 80227f6:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
    q31_t result = 0;
 80227fa:	2300      	movs	r3, #0
 80227fc:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
    const q31_t remainder_mask = (1 << exponent) - 1;
 8022800:	2304      	movs	r3, #4
 8022802:	3b01      	subs	r3, #1
 8022804:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
    int32_t remainder = remainder_mask & dividend;
 8022808:	f8d7 2574 	ldr.w	r2, [r7, #1396]	; 0x574
 802280c:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8022810:	4013      	ands	r3, r2
 8022812:	f8c7 3568 	str.w	r3, [r7, #1384]	; 0x568
    result = dividend >> exponent;
 8022816:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 802281a:	109b      	asrs	r3, r3, #2
 802281c:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
    q31_t threshold = remainder_mask >> 1;
 8022820:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8022824:	105b      	asrs	r3, r3, #1
 8022826:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
    if (result < 0)
 802282a:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 802282e:	2b00      	cmp	r3, #0
 8022830:	da04      	bge.n	802283c <arm_softmax_s8+0x4a4>
        threshold++;
 8022832:	f8d7 3564 	ldr.w	r3, [r7, #1380]	; 0x564
 8022836:	3301      	adds	r3, #1
 8022838:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
    if (remainder > threshold)
 802283c:	f8d7 2568 	ldr.w	r2, [r7, #1384]	; 0x568
 8022840:	f8d7 3564 	ldr.w	r3, [r7, #1380]	; 0x564
 8022844:	429a      	cmp	r2, r3
 8022846:	dd04      	ble.n	8022852 <arm_softmax_s8+0x4ba>
        result++;
 8022848:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 802284c:	3301      	adds	r3, #1
 802284e:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
    return result;
 8022852:	f8d7 6570 	ldr.w	r6, [r7, #1392]	; 0x570
 8022856:	f8d7 358c 	ldr.w	r3, [r7, #1420]	; 0x58c
 802285a:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
 802285e:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 8022862:	f8c7 355c 	str.w	r3, [r7, #1372]	; 0x55c
    q31_t result = 0;
 8022866:	2300      	movs	r3, #0
 8022868:	f8c7 3558 	str.w	r3, [r7, #1368]	; 0x558
    q63_t mult = 1 << 30;
 802286c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8022870:	f04f 0300 	mov.w	r3, #0
 8022874:	f507 61aa 	add.w	r1, r7, #1360	; 0x550
 8022878:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 802287c:	f8d7 3560 	ldr.w	r3, [r7, #1376]	; 0x560
 8022880:	0fdb      	lsrs	r3, r3, #31
 8022882:	b2da      	uxtb	r2, r3
 8022884:	f8d7 355c 	ldr.w	r3, [r7, #1372]	; 0x55c
 8022888:	0fdb      	lsrs	r3, r3, #31
 802288a:	b2db      	uxtb	r3, r3
 802288c:	4053      	eors	r3, r2
 802288e:	b2db      	uxtb	r3, r3
 8022890:	2b00      	cmp	r3, #0
 8022892:	d014      	beq.n	80228be <arm_softmax_s8+0x526>
        mult = 1 - mult;
 8022894:	f04f 0001 	mov.w	r0, #1
 8022898:	f04f 0100 	mov.w	r1, #0
 802289c:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 80228a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80228a4:	1a84      	subs	r4, r0, r2
 80228a6:	f8c7 41f0 	str.w	r4, [r7, #496]	; 0x1f0
 80228aa:	eb61 0303 	sbc.w	r3, r1, r3
 80228ae:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 80228b2:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 80228b6:	f507 62aa 	add.w	r2, r7, #1360	; 0x550
 80228ba:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80228be:	f8d7 3560 	ldr.w	r3, [r7, #1376]	; 0x560
 80228c2:	4618      	mov	r0, r3
 80228c4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80228c8:	f8d7 355c 	ldr.w	r3, [r7, #1372]	; 0x55c
 80228cc:	461a      	mov	r2, r3
 80228ce:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80228d2:	fb02 f501 	mul.w	r5, r2, r1
 80228d6:	fb00 f403 	mul.w	r4, r0, r3
 80228da:	442c      	add	r4, r5
 80228dc:	fba0 0102 	umull	r0, r1, r0, r2
 80228e0:	1863      	adds	r3, r4, r1
 80228e2:	4619      	mov	r1, r3
 80228e4:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 80228e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80228ec:	1814      	adds	r4, r2, r0
 80228ee:	f8c7 41e8 	str.w	r4, [r7, #488]	; 0x1e8
 80228f2:	414b      	adcs	r3, r1
 80228f4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 80228f8:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 80228fc:	f507 62aa 	add.w	r2, r7, #1360	; 0x550
 8022900:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8022904:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 8022908:	e9d3 2300 	ldrd	r2, r3, [r3]
 802290c:	4610      	mov	r0, r2
 802290e:	4619      	mov	r1, r3
 8022910:	2800      	cmp	r0, #0
 8022912:	f171 0300 	sbcs.w	r3, r1, #0
 8022916:	da06      	bge.n	8022926 <arm_softmax_s8+0x58e>
 8022918:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 802291c:	f04f 0300 	mov.w	r3, #0
 8022920:	1880      	adds	r0, r0, r2
 8022922:	eb43 0101 	adc.w	r1, r3, r1
 8022926:	f04f 0200 	mov.w	r2, #0
 802292a:	f04f 0300 	mov.w	r3, #0
 802292e:	0fc2      	lsrs	r2, r0, #31
 8022930:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8022934:	17cb      	asrs	r3, r1, #31
 8022936:	4613      	mov	r3, r2
 8022938:	f8c7 3558 	str.w	r3, [r7, #1368]	; 0x558
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 802293c:	f8d7 2560 	ldr.w	r2, [r7, #1376]	; 0x560
 8022940:	f8d7 355c 	ldr.w	r3, [r7, #1372]	; 0x55c
 8022944:	429a      	cmp	r2, r3
 8022946:	d108      	bne.n	802295a <arm_softmax_s8+0x5c2>
 8022948:	f8d7 3560 	ldr.w	r3, [r7, #1376]	; 0x560
 802294c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8022950:	d103      	bne.n	802295a <arm_softmax_s8+0x5c2>
        result = Q31_MAX;
 8022952:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8022956:	f8c7 3558 	str.w	r3, [r7, #1368]	; 0x558
    return result;
 802295a:	f8d7 3558 	ldr.w	r3, [r7, #1368]	; 0x558
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 802295e:	4433      	add	r3, r6
 8022960:	f8c7 354c 	str.w	r3, [r7, #1356]	; 0x54c
    q31_t result = 0;
 8022964:	2300      	movs	r3, #0
 8022966:	f8c7 3548 	str.w	r3, [r7, #1352]	; 0x548
    q63_t mult = 1 << 30;
 802296a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 802296e:	f04f 0300 	mov.w	r3, #0
 8022972:	f507 61a8 	add.w	r1, r7, #1344	; 0x540
 8022976:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 802297a:	f8d7 354c 	ldr.w	r3, [r7, #1356]	; 0x54c
 802297e:	0fdb      	lsrs	r3, r3, #31
 8022980:	b2da      	uxtb	r2, r3
 8022982:	2300      	movs	r3, #0
 8022984:	4053      	eors	r3, r2
 8022986:	b2db      	uxtb	r3, r3
 8022988:	2b00      	cmp	r3, #0
 802298a:	d014      	beq.n	80229b6 <arm_softmax_s8+0x61e>
        mult = 1 - mult;
 802298c:	f04f 0001 	mov.w	r0, #1
 8022990:	f04f 0100 	mov.w	r1, #0
 8022994:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 8022998:	e9d3 2300 	ldrd	r2, r3, [r3]
 802299c:	1a84      	subs	r4, r0, r2
 802299e:	f8c7 41e0 	str.w	r4, [r7, #480]	; 0x1e0
 80229a2:	eb61 0303 	sbc.w	r3, r1, r3
 80229a6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80229aa:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 80229ae:	f507 62a8 	add.w	r2, r7, #1344	; 0x540
 80229b2:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80229b6:	f8d7 354c 	ldr.w	r3, [r7, #1356]	; 0x54c
 80229ba:	4618      	mov	r0, r3
 80229bc:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80229c0:	a3d2      	add	r3, pc, #840	; (adr r3, 8022d0c <arm_softmax_s8+0x974>)
 80229c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80229c6:	fb02 f501 	mul.w	r5, r2, r1
 80229ca:	fb00 f403 	mul.w	r4, r0, r3
 80229ce:	442c      	add	r4, r5
 80229d0:	fba0 0102 	umull	r0, r1, r0, r2
 80229d4:	1863      	adds	r3, r4, r1
 80229d6:	4619      	mov	r1, r3
 80229d8:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 80229dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80229e0:	1814      	adds	r4, r2, r0
 80229e2:	f8c7 41d8 	str.w	r4, [r7, #472]	; 0x1d8
 80229e6:	414b      	adcs	r3, r1
 80229e8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80229ec:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 80229f0:	f507 62a8 	add.w	r2, r7, #1344	; 0x540
 80229f4:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80229f8:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 80229fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022a00:	4610      	mov	r0, r2
 8022a02:	4619      	mov	r1, r3
 8022a04:	2800      	cmp	r0, #0
 8022a06:	f171 0300 	sbcs.w	r3, r1, #0
 8022a0a:	da06      	bge.n	8022a1a <arm_softmax_s8+0x682>
 8022a0c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8022a10:	f04f 0300 	mov.w	r3, #0
 8022a14:	1880      	adds	r0, r0, r2
 8022a16:	eb43 0101 	adc.w	r1, r3, r1
 8022a1a:	f04f 0200 	mov.w	r2, #0
 8022a1e:	f04f 0300 	mov.w	r3, #0
 8022a22:	0fc2      	lsrs	r2, r0, #31
 8022a24:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8022a28:	17cb      	asrs	r3, r1, #31
 8022a2a:	4613      	mov	r3, r2
 8022a2c:	f8c7 3548 	str.w	r3, [r7, #1352]	; 0x548
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8022a30:	f8d7 254c 	ldr.w	r2, [r7, #1356]	; 0x54c
 8022a34:	4bb2      	ldr	r3, [pc, #712]	; (8022d00 <arm_softmax_s8+0x968>)
 8022a36:	429a      	cmp	r2, r3
 8022a38:	d108      	bne.n	8022a4c <arm_softmax_s8+0x6b4>
 8022a3a:	f8d7 354c 	ldr.w	r3, [r7, #1356]	; 0x54c
 8022a3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8022a42:	d103      	bne.n	8022a4c <arm_softmax_s8+0x6b4>
        result = Q31_MAX;
 8022a44:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8022a48:	f8c7 3548 	str.w	r3, [r7, #1352]	; 0x548
    return result;
 8022a4c:	f8d7 2548 	ldr.w	r2, [r7, #1352]	; 0x548
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 8022a50:	f8d7 358c 	ldr.w	r3, [r7, #1420]	; 0x58c
 8022a54:	4413      	add	r3, r2
 8022a56:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
    q31_t result = 0;
 8022a5a:	2300      	movs	r3, #0
 8022a5c:	f8c7 3538 	str.w	r3, [r7, #1336]	; 0x538
    const q31_t remainder_mask = (1 << exponent) - 1;
 8022a60:	2302      	movs	r3, #2
 8022a62:	3b01      	subs	r3, #1
 8022a64:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
    int32_t remainder = remainder_mask & dividend;
 8022a68:	f8d7 253c 	ldr.w	r2, [r7, #1340]	; 0x53c
 8022a6c:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 8022a70:	4013      	ands	r3, r2
 8022a72:	f8c7 3530 	str.w	r3, [r7, #1328]	; 0x530
    result = dividend >> exponent;
 8022a76:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 8022a7a:	105b      	asrs	r3, r3, #1
 8022a7c:	f8c7 3538 	str.w	r3, [r7, #1336]	; 0x538
    q31_t threshold = remainder_mask >> 1;
 8022a80:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 8022a84:	105b      	asrs	r3, r3, #1
 8022a86:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
    if (result < 0)
 8022a8a:	f8d7 3538 	ldr.w	r3, [r7, #1336]	; 0x538
 8022a8e:	2b00      	cmp	r3, #0
 8022a90:	da04      	bge.n	8022a9c <arm_softmax_s8+0x704>
        threshold++;
 8022a92:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 8022a96:	3301      	adds	r3, #1
 8022a98:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
    if (remainder > threshold)
 8022a9c:	f8d7 2530 	ldr.w	r2, [r7, #1328]	; 0x530
 8022aa0:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 8022aa4:	429a      	cmp	r2, r3
 8022aa6:	dd04      	ble.n	8022ab2 <arm_softmax_s8+0x71a>
        result++;
 8022aa8:	f8d7 3538 	ldr.w	r3, [r7, #1336]	; 0x538
 8022aac:	3301      	adds	r3, #1
 8022aae:	f8c7 3538 	str.w	r3, [r7, #1336]	; 0x538
    return result;
 8022ab2:	f8d7 2538 	ldr.w	r2, [r7, #1336]	; 0x538
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 8022ab6:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 8022aba:	4413      	add	r3, r2
 8022abc:	f8c7 3528 	str.w	r3, [r7, #1320]	; 0x528
    q31_t result = 0;
 8022ac0:	2300      	movs	r3, #0
 8022ac2:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
    q63_t mult = 1 << 30;
 8022ac6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8022aca:	f04f 0300 	mov.w	r3, #0
 8022ace:	f507 61a3 	add.w	r1, r7, #1304	; 0x518
 8022ad2:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8022ad6:	2200      	movs	r2, #0
 8022ad8:	f8d7 3528 	ldr.w	r3, [r7, #1320]	; 0x528
 8022adc:	0fdb      	lsrs	r3, r3, #31
 8022ade:	b2db      	uxtb	r3, r3
 8022ae0:	4053      	eors	r3, r2
 8022ae2:	b2db      	uxtb	r3, r3
 8022ae4:	2b00      	cmp	r3, #0
 8022ae6:	d014      	beq.n	8022b12 <arm_softmax_s8+0x77a>
        mult = 1 - mult;
 8022ae8:	f04f 0001 	mov.w	r0, #1
 8022aec:	f04f 0100 	mov.w	r1, #0
 8022af0:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 8022af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022af8:	1a84      	subs	r4, r0, r2
 8022afa:	f8c7 41d0 	str.w	r4, [r7, #464]	; 0x1d0
 8022afe:	eb61 0303 	sbc.w	r3, r1, r3
 8022b02:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8022b06:	e9d7 3474 	ldrd	r3, r4, [r7, #464]	; 0x1d0
 8022b0a:	f507 62a3 	add.w	r2, r7, #1304	; 0x518
 8022b0e:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8022b12:	a177      	add	r1, pc, #476	; (adr r1, 8022cf0 <arm_softmax_s8+0x958>)
 8022b14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8022b18:	f8d7 3528 	ldr.w	r3, [r7, #1320]	; 0x528
 8022b1c:	461a      	mov	r2, r3
 8022b1e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8022b22:	fb02 f501 	mul.w	r5, r2, r1
 8022b26:	fb00 f403 	mul.w	r4, r0, r3
 8022b2a:	442c      	add	r4, r5
 8022b2c:	fba0 0102 	umull	r0, r1, r0, r2
 8022b30:	1863      	adds	r3, r4, r1
 8022b32:	4619      	mov	r1, r3
 8022b34:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 8022b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022b3c:	1814      	adds	r4, r2, r0
 8022b3e:	f8c7 41c8 	str.w	r4, [r7, #456]	; 0x1c8
 8022b42:	414b      	adcs	r3, r1
 8022b44:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 8022b48:	e9d7 3472 	ldrd	r3, r4, [r7, #456]	; 0x1c8
 8022b4c:	f507 62a3 	add.w	r2, r7, #1304	; 0x518
 8022b50:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8022b54:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 8022b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022b5c:	4610      	mov	r0, r2
 8022b5e:	4619      	mov	r1, r3
 8022b60:	2800      	cmp	r0, #0
 8022b62:	f171 0300 	sbcs.w	r3, r1, #0
 8022b66:	da06      	bge.n	8022b76 <arm_softmax_s8+0x7de>
 8022b68:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8022b6c:	f04f 0300 	mov.w	r3, #0
 8022b70:	1880      	adds	r0, r0, r2
 8022b72:	eb43 0101 	adc.w	r1, r3, r1
 8022b76:	f04f 0200 	mov.w	r2, #0
 8022b7a:	f04f 0300 	mov.w	r3, #0
 8022b7e:	0fc2      	lsrs	r2, r0, #31
 8022b80:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8022b84:	17cb      	asrs	r3, r1, #31
 8022b86:	4613      	mov	r3, r2
 8022b88:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
    return result;
 8022b8c:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
    int32_t result = 1895147668 +
 8022b90:	4b5c      	ldr	r3, [pc, #368]	; (8022d04 <arm_softmax_s8+0x96c>)
 8022b92:	4413      	add	r3, r2
 8022b94:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
    SELECT_IF_NON_ZERO(1672461947)
 8022b98:	f8d7 25b0 	ldr.w	r2, [r7, #1456]	; 0x5b0
 8022b9c:	1c53      	adds	r3, r2, #1
 8022b9e:	f8c7 35b0 	str.w	r3, [r7, #1456]	; 0x5b0
 8022ba2:	2301      	movs	r3, #1
 8022ba4:	fa03 f202 	lsl.w	r2, r3, r2
 8022ba8:	f8d7 35a8 	ldr.w	r3, [r7, #1448]	; 0x5a8
 8022bac:	4013      	ands	r3, r2
 8022bae:	2b00      	cmp	r3, #0
 8022bb0:	d002      	beq.n	8022bb8 <arm_softmax_s8+0x820>
 8022bb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8022bb6:	e000      	b.n	8022bba <arm_softmax_s8+0x822>
 8022bb8:	2300      	movs	r3, #0
 8022bba:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 8022bbe:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8022bc2:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
    q31_t result = 0;
 8022bc6:	2300      	movs	r3, #0
 8022bc8:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
    q63_t mult = 1 << 30;
 8022bcc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8022bd0:	f04f 0300 	mov.w	r3, #0
 8022bd4:	f507 61a0 	add.w	r1, r7, #1280	; 0x500
 8022bd8:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8022bdc:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 8022be0:	0fdb      	lsrs	r3, r3, #31
 8022be2:	b2da      	uxtb	r2, r3
 8022be4:	2300      	movs	r3, #0
 8022be6:	4053      	eors	r3, r2
 8022be8:	b2db      	uxtb	r3, r3
 8022bea:	2b00      	cmp	r3, #0
 8022bec:	d014      	beq.n	8022c18 <arm_softmax_s8+0x880>
        mult = 1 - mult;
 8022bee:	f04f 0001 	mov.w	r0, #1
 8022bf2:	f04f 0100 	mov.w	r1, #0
 8022bf6:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 8022bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022bfe:	1a84      	subs	r4, r0, r2
 8022c00:	f8c7 41c0 	str.w	r4, [r7, #448]	; 0x1c0
 8022c04:	eb61 0303 	sbc.w	r3, r1, r3
 8022c08:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8022c0c:	e9d7 3470 	ldrd	r3, r4, [r7, #448]	; 0x1c0
 8022c10:	f507 62a0 	add.w	r2, r7, #1280	; 0x500
 8022c14:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8022c18:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 8022c1c:	4618      	mov	r0, r3
 8022c1e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8022c22:	a335      	add	r3, pc, #212	; (adr r3, 8022cf8 <arm_softmax_s8+0x960>)
 8022c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022c28:	fb02 f501 	mul.w	r5, r2, r1
 8022c2c:	fb00 f403 	mul.w	r4, r0, r3
 8022c30:	442c      	add	r4, r5
 8022c32:	fba0 0102 	umull	r0, r1, r0, r2
 8022c36:	1863      	adds	r3, r4, r1
 8022c38:	4619      	mov	r1, r3
 8022c3a:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 8022c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022c42:	1814      	adds	r4, r2, r0
 8022c44:	f8c7 41b8 	str.w	r4, [r7, #440]	; 0x1b8
 8022c48:	414b      	adcs	r3, r1
 8022c4a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8022c4e:	e9d7 346e 	ldrd	r3, r4, [r7, #440]	; 0x1b8
 8022c52:	f507 62a0 	add.w	r2, r7, #1280	; 0x500
 8022c56:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8022c5a:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 8022c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022c62:	4610      	mov	r0, r2
 8022c64:	4619      	mov	r1, r3
 8022c66:	2800      	cmp	r0, #0
 8022c68:	f171 0300 	sbcs.w	r3, r1, #0
 8022c6c:	da06      	bge.n	8022c7c <arm_softmax_s8+0x8e4>
 8022c6e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8022c72:	f04f 0300 	mov.w	r3, #0
 8022c76:	1880      	adds	r0, r0, r2
 8022c78:	eb43 0101 	adc.w	r1, r3, r1
 8022c7c:	f04f 0200 	mov.w	r2, #0
 8022c80:	f04f 0300 	mov.w	r3, #0
 8022c84:	0fc2      	lsrs	r2, r0, #31
 8022c86:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8022c8a:	17cb      	asrs	r3, r1, #31
 8022c8c:	4613      	mov	r3, r2
 8022c8e:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8022c92:	f8d7 2510 	ldr.w	r2, [r7, #1296]	; 0x510
 8022c96:	4b1c      	ldr	r3, [pc, #112]	; (8022d08 <arm_softmax_s8+0x970>)
 8022c98:	429a      	cmp	r2, r3
 8022c9a:	d108      	bne.n	8022cae <arm_softmax_s8+0x916>
 8022c9c:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 8022ca0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8022ca4:	d103      	bne.n	8022cae <arm_softmax_s8+0x916>
        result = Q31_MAX;
 8022ca6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8022caa:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
    return result;
 8022cae:	f8d7 250c 	ldr.w	r2, [r7, #1292]	; 0x50c
    SELECT_IF_NON_ZERO(1672461947)
 8022cb2:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 8022cb6:	ea02 0103 	and.w	r1, r2, r3
 8022cba:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 8022cbe:	43da      	mvns	r2, r3
 8022cc0:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8022cc4:	4013      	ands	r3, r2
 8022cc6:	404b      	eors	r3, r1
 8022cc8:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
    SELECT_IF_NON_ZERO(1302514674)
 8022ccc:	f8d7 25b0 	ldr.w	r2, [r7, #1456]	; 0x5b0
 8022cd0:	1c53      	adds	r3, r2, #1
 8022cd2:	f8c7 35b0 	str.w	r3, [r7, #1456]	; 0x5b0
 8022cd6:	2301      	movs	r3, #1
 8022cd8:	fa03 f202 	lsl.w	r2, r3, r2
 8022cdc:	f8d7 35a8 	ldr.w	r3, [r7, #1448]	; 0x5a8
 8022ce0:	4013      	ands	r3, r2
 8022ce2:	2b00      	cmp	r3, #0
 8022ce4:	d016      	beq.n	8022d14 <arm_softmax_s8+0x97c>
 8022ce6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8022cea:	e014      	b.n	8022d16 <arm_softmax_s8+0x97e>
 8022cec:	f3af 8000 	nop.w
 8022cf0:	70f5a894 	.word	0x70f5a894
 8022cf4:	00000000 	.word	0x00000000
 8022cf8:	63afbe7b 	.word	0x63afbe7b
 8022cfc:	00000000 	.word	0x00000000
 8022d00:	2aaaaaab 	.word	0x2aaaaaab
 8022d04:	70f5a894 	.word	0x70f5a894
 8022d08:	63afbe7b 	.word	0x63afbe7b
 8022d0c:	2aaaaaab 	.word	0x2aaaaaab
 8022d10:	00000000 	.word	0x00000000
 8022d14:	2300      	movs	r3, #0
 8022d16:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 8022d1a:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8022d1e:	f8c7 34fc 	str.w	r3, [r7, #1276]	; 0x4fc
    q31_t result = 0;
 8022d22:	f507 629f 	add.w	r2, r7, #1272	; 0x4f8
 8022d26:	2300      	movs	r3, #0
 8022d28:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8022d2a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8022d2e:	f04f 0300 	mov.w	r3, #0
 8022d32:	f507 619e 	add.w	r1, r7, #1264	; 0x4f0
 8022d36:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8022d3a:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	; 0x4fc
 8022d3e:	0fdb      	lsrs	r3, r3, #31
 8022d40:	b2da      	uxtb	r2, r3
 8022d42:	2300      	movs	r3, #0
 8022d44:	4053      	eors	r3, r2
 8022d46:	b2db      	uxtb	r3, r3
 8022d48:	2b00      	cmp	r3, #0
 8022d4a:	d014      	beq.n	8022d76 <arm_softmax_s8+0x9de>
        mult = 1 - mult;
 8022d4c:	f04f 0001 	mov.w	r0, #1
 8022d50:	f04f 0100 	mov.w	r1, #0
 8022d54:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8022d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022d5c:	1a84      	subs	r4, r0, r2
 8022d5e:	f8c7 41b0 	str.w	r4, [r7, #432]	; 0x1b0
 8022d62:	eb61 0303 	sbc.w	r3, r1, r3
 8022d66:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8022d6a:	e9d7 346c 	ldrd	r3, r4, [r7, #432]	; 0x1b0
 8022d6e:	f507 629e 	add.w	r2, r7, #1264	; 0x4f0
 8022d72:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8022d76:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	; 0x4fc
 8022d7a:	4618      	mov	r0, r3
 8022d7c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8022d80:	a3e0      	add	r3, pc, #896	; (adr r3, 8023104 <arm_softmax_s8+0xd6c>)
 8022d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022d86:	fb02 f501 	mul.w	r5, r2, r1
 8022d8a:	fb00 f403 	mul.w	r4, r0, r3
 8022d8e:	442c      	add	r4, r5
 8022d90:	fba0 0102 	umull	r0, r1, r0, r2
 8022d94:	1863      	adds	r3, r4, r1
 8022d96:	4619      	mov	r1, r3
 8022d98:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8022d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022da0:	1814      	adds	r4, r2, r0
 8022da2:	f8c7 41a8 	str.w	r4, [r7, #424]	; 0x1a8
 8022da6:	414b      	adcs	r3, r1
 8022da8:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8022dac:	e9d7 346a 	ldrd	r3, r4, [r7, #424]	; 0x1a8
 8022db0:	f507 629e 	add.w	r2, r7, #1264	; 0x4f0
 8022db4:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8022db8:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8022dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022dc0:	4610      	mov	r0, r2
 8022dc2:	4619      	mov	r1, r3
 8022dc4:	2800      	cmp	r0, #0
 8022dc6:	f171 0300 	sbcs.w	r3, r1, #0
 8022dca:	da06      	bge.n	8022dda <arm_softmax_s8+0xa42>
 8022dcc:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8022dd0:	f04f 0300 	mov.w	r3, #0
 8022dd4:	1880      	adds	r0, r0, r2
 8022dd6:	eb43 0101 	adc.w	r1, r3, r1
 8022dda:	f04f 0200 	mov.w	r2, #0
 8022dde:	f04f 0300 	mov.w	r3, #0
 8022de2:	0fc2      	lsrs	r2, r0, #31
 8022de4:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8022de8:	17cb      	asrs	r3, r1, #31
 8022dea:	4610      	mov	r0, r2
 8022dec:	4619      	mov	r1, r3
 8022dee:	f507 629f 	add.w	r2, r7, #1272	; 0x4f8
 8022df2:	4603      	mov	r3, r0
 8022df4:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8022df6:	f8d7 24fc 	ldr.w	r2, [r7, #1276]	; 0x4fc
 8022dfa:	4bbf      	ldr	r3, [pc, #764]	; (80230f8 <arm_softmax_s8+0xd60>)
 8022dfc:	429a      	cmp	r2, r3
 8022dfe:	d109      	bne.n	8022e14 <arm_softmax_s8+0xa7c>
 8022e00:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	; 0x4fc
 8022e04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8022e08:	d104      	bne.n	8022e14 <arm_softmax_s8+0xa7c>
        result = Q31_MAX;
 8022e0a:	f507 629f 	add.w	r2, r7, #1272	; 0x4f8
 8022e0e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8022e12:	6013      	str	r3, [r2, #0]
    return result;
 8022e14:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 8022e18:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(1302514674)
 8022e1a:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 8022e1e:	ea02 0103 	and.w	r1, r2, r3
 8022e22:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 8022e26:	43da      	mvns	r2, r3
 8022e28:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8022e2c:	4013      	ands	r3, r2
 8022e2e:	404b      	eors	r3, r1
 8022e30:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
    SELECT_IF_NON_ZERO(790015084)
 8022e34:	f8d7 25b0 	ldr.w	r2, [r7, #1456]	; 0x5b0
 8022e38:	1c53      	adds	r3, r2, #1
 8022e3a:	f8c7 35b0 	str.w	r3, [r7, #1456]	; 0x5b0
 8022e3e:	2301      	movs	r3, #1
 8022e40:	fa03 f202 	lsl.w	r2, r3, r2
 8022e44:	f8d7 35a8 	ldr.w	r3, [r7, #1448]	; 0x5a8
 8022e48:	4013      	ands	r3, r2
 8022e4a:	2b00      	cmp	r3, #0
 8022e4c:	d002      	beq.n	8022e54 <arm_softmax_s8+0xabc>
 8022e4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8022e52:	e000      	b.n	8022e56 <arm_softmax_s8+0xabe>
 8022e54:	2300      	movs	r3, #0
 8022e56:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 8022e5a:	f207 42ec 	addw	r2, r7, #1260	; 0x4ec
 8022e5e:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8022e62:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8022e64:	f507 629d 	add.w	r2, r7, #1256	; 0x4e8
 8022e68:	2300      	movs	r3, #0
 8022e6a:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8022e6c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8022e70:	f04f 0300 	mov.w	r3, #0
 8022e74:	f507 619c 	add.w	r1, r7, #1248	; 0x4e0
 8022e78:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8022e7c:	f207 43ec 	addw	r3, r7, #1260	; 0x4ec
 8022e80:	681b      	ldr	r3, [r3, #0]
 8022e82:	0fdb      	lsrs	r3, r3, #31
 8022e84:	b2da      	uxtb	r2, r3
 8022e86:	2300      	movs	r3, #0
 8022e88:	4053      	eors	r3, r2
 8022e8a:	b2db      	uxtb	r3, r3
 8022e8c:	2b00      	cmp	r3, #0
 8022e8e:	d014      	beq.n	8022eba <arm_softmax_s8+0xb22>
        mult = 1 - mult;
 8022e90:	f04f 0001 	mov.w	r0, #1
 8022e94:	f04f 0100 	mov.w	r1, #0
 8022e98:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 8022e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022ea0:	1a84      	subs	r4, r0, r2
 8022ea2:	f8c7 41a0 	str.w	r4, [r7, #416]	; 0x1a0
 8022ea6:	eb61 0303 	sbc.w	r3, r1, r3
 8022eaa:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8022eae:	e9d7 3468 	ldrd	r3, r4, [r7, #416]	; 0x1a0
 8022eb2:	f507 629c 	add.w	r2, r7, #1248	; 0x4e0
 8022eb6:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8022eba:	f207 43ec 	addw	r3, r7, #1260	; 0x4ec
 8022ebe:	681b      	ldr	r3, [r3, #0]
 8022ec0:	4618      	mov	r0, r3
 8022ec2:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8022ec6:	a388      	add	r3, pc, #544	; (adr r3, 80230e8 <arm_softmax_s8+0xd50>)
 8022ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022ecc:	fb02 f501 	mul.w	r5, r2, r1
 8022ed0:	fb00 f403 	mul.w	r4, r0, r3
 8022ed4:	442c      	add	r4, r5
 8022ed6:	fba0 0102 	umull	r0, r1, r0, r2
 8022eda:	1863      	adds	r3, r4, r1
 8022edc:	4619      	mov	r1, r3
 8022ede:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 8022ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022ee6:	1814      	adds	r4, r2, r0
 8022ee8:	f8c7 4198 	str.w	r4, [r7, #408]	; 0x198
 8022eec:	414b      	adcs	r3, r1
 8022eee:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8022ef2:	e9d7 3466 	ldrd	r3, r4, [r7, #408]	; 0x198
 8022ef6:	f507 629c 	add.w	r2, r7, #1248	; 0x4e0
 8022efa:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8022efe:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 8022f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022f06:	4610      	mov	r0, r2
 8022f08:	4619      	mov	r1, r3
 8022f0a:	2800      	cmp	r0, #0
 8022f0c:	f171 0300 	sbcs.w	r3, r1, #0
 8022f10:	da06      	bge.n	8022f20 <arm_softmax_s8+0xb88>
 8022f12:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8022f16:	f04f 0300 	mov.w	r3, #0
 8022f1a:	1880      	adds	r0, r0, r2
 8022f1c:	eb43 0101 	adc.w	r1, r3, r1
 8022f20:	f04f 0200 	mov.w	r2, #0
 8022f24:	f04f 0300 	mov.w	r3, #0
 8022f28:	0fc2      	lsrs	r2, r0, #31
 8022f2a:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8022f2e:	17cb      	asrs	r3, r1, #31
 8022f30:	4610      	mov	r0, r2
 8022f32:	4619      	mov	r1, r3
 8022f34:	f507 629d 	add.w	r2, r7, #1256	; 0x4e8
 8022f38:	4603      	mov	r3, r0
 8022f3a:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8022f3c:	f207 43ec 	addw	r3, r7, #1260	; 0x4ec
 8022f40:	681a      	ldr	r2, [r3, #0]
 8022f42:	4b6e      	ldr	r3, [pc, #440]	; (80230fc <arm_softmax_s8+0xd64>)
 8022f44:	429a      	cmp	r2, r3
 8022f46:	d10a      	bne.n	8022f5e <arm_softmax_s8+0xbc6>
 8022f48:	f207 43ec 	addw	r3, r7, #1260	; 0x4ec
 8022f4c:	681b      	ldr	r3, [r3, #0]
 8022f4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8022f52:	d104      	bne.n	8022f5e <arm_softmax_s8+0xbc6>
        result = Q31_MAX;
 8022f54:	f507 629d 	add.w	r2, r7, #1256	; 0x4e8
 8022f58:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8022f5c:	6013      	str	r3, [r2, #0]
    return result;
 8022f5e:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8022f62:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(790015084)
 8022f64:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 8022f68:	ea02 0103 	and.w	r1, r2, r3
 8022f6c:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 8022f70:	43da      	mvns	r2, r3
 8022f72:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8022f76:	4013      	ands	r3, r2
 8022f78:	404b      	eors	r3, r1
 8022f7a:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
    SELECT_IF_NON_ZERO(290630308)
 8022f7e:	f8d7 25b0 	ldr.w	r2, [r7, #1456]	; 0x5b0
 8022f82:	1c53      	adds	r3, r2, #1
 8022f84:	f8c7 35b0 	str.w	r3, [r7, #1456]	; 0x5b0
 8022f88:	2301      	movs	r3, #1
 8022f8a:	fa03 f202 	lsl.w	r2, r3, r2
 8022f8e:	f8d7 35a8 	ldr.w	r3, [r7, #1448]	; 0x5a8
 8022f92:	4013      	ands	r3, r2
 8022f94:	2b00      	cmp	r3, #0
 8022f96:	d002      	beq.n	8022f9e <arm_softmax_s8+0xc06>
 8022f98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8022f9c:	e000      	b.n	8022fa0 <arm_softmax_s8+0xc08>
 8022f9e:	2300      	movs	r3, #0
 8022fa0:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 8022fa4:	f207 42dc 	addw	r2, r7, #1244	; 0x4dc
 8022fa8:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8022fac:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8022fae:	f507 629b 	add.w	r2, r7, #1240	; 0x4d8
 8022fb2:	2300      	movs	r3, #0
 8022fb4:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8022fb6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8022fba:	f04f 0300 	mov.w	r3, #0
 8022fbe:	f507 619a 	add.w	r1, r7, #1232	; 0x4d0
 8022fc2:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8022fc6:	f207 43dc 	addw	r3, r7, #1244	; 0x4dc
 8022fca:	681b      	ldr	r3, [r3, #0]
 8022fcc:	0fdb      	lsrs	r3, r3, #31
 8022fce:	b2da      	uxtb	r2, r3
 8022fd0:	2300      	movs	r3, #0
 8022fd2:	4053      	eors	r3, r2
 8022fd4:	b2db      	uxtb	r3, r3
 8022fd6:	2b00      	cmp	r3, #0
 8022fd8:	d014      	beq.n	8023004 <arm_softmax_s8+0xc6c>
        mult = 1 - mult;
 8022fda:	f04f 0001 	mov.w	r0, #1
 8022fde:	f04f 0100 	mov.w	r1, #0
 8022fe2:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 8022fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022fea:	1a84      	subs	r4, r0, r2
 8022fec:	f8c7 4190 	str.w	r4, [r7, #400]	; 0x190
 8022ff0:	eb61 0303 	sbc.w	r3, r1, r3
 8022ff4:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8022ff8:	e9d7 3464 	ldrd	r3, r4, [r7, #400]	; 0x190
 8022ffc:	f507 629a 	add.w	r2, r7, #1232	; 0x4d0
 8023000:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8023004:	f207 43dc 	addw	r3, r7, #1244	; 0x4dc
 8023008:	681b      	ldr	r3, [r3, #0]
 802300a:	4618      	mov	r0, r3
 802300c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8023010:	a337      	add	r3, pc, #220	; (adr r3, 80230f0 <arm_softmax_s8+0xd58>)
 8023012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023016:	fb02 f501 	mul.w	r5, r2, r1
 802301a:	fb00 f403 	mul.w	r4, r0, r3
 802301e:	442c      	add	r4, r5
 8023020:	fba0 0102 	umull	r0, r1, r0, r2
 8023024:	1863      	adds	r3, r4, r1
 8023026:	4619      	mov	r1, r3
 8023028:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 802302c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023030:	1814      	adds	r4, r2, r0
 8023032:	f8c7 4188 	str.w	r4, [r7, #392]	; 0x188
 8023036:	414b      	adcs	r3, r1
 8023038:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 802303c:	e9d7 3462 	ldrd	r3, r4, [r7, #392]	; 0x188
 8023040:	f507 629a 	add.w	r2, r7, #1232	; 0x4d0
 8023044:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8023048:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 802304c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023050:	4610      	mov	r0, r2
 8023052:	4619      	mov	r1, r3
 8023054:	2800      	cmp	r0, #0
 8023056:	f171 0300 	sbcs.w	r3, r1, #0
 802305a:	da06      	bge.n	802306a <arm_softmax_s8+0xcd2>
 802305c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8023060:	f04f 0300 	mov.w	r3, #0
 8023064:	1880      	adds	r0, r0, r2
 8023066:	eb43 0101 	adc.w	r1, r3, r1
 802306a:	f04f 0200 	mov.w	r2, #0
 802306e:	f04f 0300 	mov.w	r3, #0
 8023072:	0fc2      	lsrs	r2, r0, #31
 8023074:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8023078:	17cb      	asrs	r3, r1, #31
 802307a:	4610      	mov	r0, r2
 802307c:	4619      	mov	r1, r3
 802307e:	f507 629b 	add.w	r2, r7, #1240	; 0x4d8
 8023082:	4603      	mov	r3, r0
 8023084:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8023086:	f207 43dc 	addw	r3, r7, #1244	; 0x4dc
 802308a:	681a      	ldr	r2, [r3, #0]
 802308c:	4b1c      	ldr	r3, [pc, #112]	; (8023100 <arm_softmax_s8+0xd68>)
 802308e:	429a      	cmp	r2, r3
 8023090:	d10a      	bne.n	80230a8 <arm_softmax_s8+0xd10>
 8023092:	f207 43dc 	addw	r3, r7, #1244	; 0x4dc
 8023096:	681b      	ldr	r3, [r3, #0]
 8023098:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802309c:	d104      	bne.n	80230a8 <arm_softmax_s8+0xd10>
        result = Q31_MAX;
 802309e:	f507 629b 	add.w	r2, r7, #1240	; 0x4d8
 80230a2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80230a6:	6013      	str	r3, [r2, #0]
    return result;
 80230a8:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 80230ac:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(290630308)
 80230ae:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 80230b2:	ea02 0103 	and.w	r1, r2, r3
 80230b6:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 80230ba:	43da      	mvns	r2, r3
 80230bc:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 80230c0:	4013      	ands	r3, r2
 80230c2:	404b      	eors	r3, r1
 80230c4:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
    SELECT_IF_NON_ZERO(39332535)
 80230c8:	f8d7 25b0 	ldr.w	r2, [r7, #1456]	; 0x5b0
 80230cc:	1c53      	adds	r3, r2, #1
 80230ce:	f8c7 35b0 	str.w	r3, [r7, #1456]	; 0x5b0
 80230d2:	2301      	movs	r3, #1
 80230d4:	fa03 f202 	lsl.w	r2, r3, r2
 80230d8:	f8d7 35a8 	ldr.w	r3, [r7, #1448]	; 0x5a8
 80230dc:	4013      	ands	r3, r2
 80230de:	2b00      	cmp	r3, #0
 80230e0:	d014      	beq.n	802310c <arm_softmax_s8+0xd74>
 80230e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80230e6:	e012      	b.n	802310e <arm_softmax_s8+0xd76>
 80230e8:	2f16ac6c 	.word	0x2f16ac6c
 80230ec:	00000000 	.word	0x00000000
 80230f0:	1152aaa4 	.word	0x1152aaa4
 80230f4:	00000000 	.word	0x00000000
 80230f8:	4da2cbf2 	.word	0x4da2cbf2
 80230fc:	2f16ac6c 	.word	0x2f16ac6c
 8023100:	1152aaa4 	.word	0x1152aaa4
 8023104:	4da2cbf2 	.word	0x4da2cbf2
 8023108:	00000000 	.word	0x00000000
 802310c:	2300      	movs	r3, #0
 802310e:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 8023112:	f207 42cc 	addw	r2, r7, #1228	; 0x4cc
 8023116:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 802311a:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 802311c:	f507 6299 	add.w	r2, r7, #1224	; 0x4c8
 8023120:	2300      	movs	r3, #0
 8023122:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8023124:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8023128:	f04f 0300 	mov.w	r3, #0
 802312c:	f507 6198 	add.w	r1, r7, #1216	; 0x4c0
 8023130:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8023134:	f207 43cc 	addw	r3, r7, #1228	; 0x4cc
 8023138:	681b      	ldr	r3, [r3, #0]
 802313a:	0fdb      	lsrs	r3, r3, #31
 802313c:	b2da      	uxtb	r2, r3
 802313e:	2300      	movs	r3, #0
 8023140:	4053      	eors	r3, r2
 8023142:	b2db      	uxtb	r3, r3
 8023144:	2b00      	cmp	r3, #0
 8023146:	d014      	beq.n	8023172 <arm_softmax_s8+0xdda>
        mult = 1 - mult;
 8023148:	f04f 0001 	mov.w	r0, #1
 802314c:	f04f 0100 	mov.w	r1, #0
 8023150:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8023154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023158:	1a84      	subs	r4, r0, r2
 802315a:	f8c7 4180 	str.w	r4, [r7, #384]	; 0x180
 802315e:	eb61 0303 	sbc.w	r3, r1, r3
 8023162:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8023166:	e9d7 3460 	ldrd	r3, r4, [r7, #384]	; 0x180
 802316a:	f507 6298 	add.w	r2, r7, #1216	; 0x4c0
 802316e:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8023172:	f207 43cc 	addw	r3, r7, #1228	; 0x4cc
 8023176:	681b      	ldr	r3, [r3, #0]
 8023178:	4618      	mov	r0, r3
 802317a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 802317e:	a3d8      	add	r3, pc, #864	; (adr r3, 80234e0 <arm_softmax_s8+0x1148>)
 8023180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023184:	fb02 f501 	mul.w	r5, r2, r1
 8023188:	fb00 f403 	mul.w	r4, r0, r3
 802318c:	442c      	add	r4, r5
 802318e:	fba0 0102 	umull	r0, r1, r0, r2
 8023192:	1863      	adds	r3, r4, r1
 8023194:	4619      	mov	r1, r3
 8023196:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 802319a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802319e:	1814      	adds	r4, r2, r0
 80231a0:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 80231a4:	414b      	adcs	r3, r1
 80231a6:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80231aa:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 80231ae:	f507 6298 	add.w	r2, r7, #1216	; 0x4c0
 80231b2:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80231b6:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 80231ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80231be:	4610      	mov	r0, r2
 80231c0:	4619      	mov	r1, r3
 80231c2:	2800      	cmp	r0, #0
 80231c4:	f171 0300 	sbcs.w	r3, r1, #0
 80231c8:	da06      	bge.n	80231d8 <arm_softmax_s8+0xe40>
 80231ca:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80231ce:	f04f 0300 	mov.w	r3, #0
 80231d2:	1880      	adds	r0, r0, r2
 80231d4:	eb43 0101 	adc.w	r1, r3, r1
 80231d8:	f04f 0200 	mov.w	r2, #0
 80231dc:	f04f 0300 	mov.w	r3, #0
 80231e0:	0fc2      	lsrs	r2, r0, #31
 80231e2:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80231e6:	17cb      	asrs	r3, r1, #31
 80231e8:	4610      	mov	r0, r2
 80231ea:	4619      	mov	r1, r3
 80231ec:	f507 6299 	add.w	r2, r7, #1224	; 0x4c8
 80231f0:	4603      	mov	r3, r0
 80231f2:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80231f4:	f207 43cc 	addw	r3, r7, #1228	; 0x4cc
 80231f8:	681a      	ldr	r2, [r3, #0]
 80231fa:	4bb7      	ldr	r3, [pc, #732]	; (80234d8 <arm_softmax_s8+0x1140>)
 80231fc:	429a      	cmp	r2, r3
 80231fe:	d10a      	bne.n	8023216 <arm_softmax_s8+0xe7e>
 8023200:	f207 43cc 	addw	r3, r7, #1228	; 0x4cc
 8023204:	681b      	ldr	r3, [r3, #0]
 8023206:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802320a:	d104      	bne.n	8023216 <arm_softmax_s8+0xe7e>
        result = Q31_MAX;
 802320c:	f507 6299 	add.w	r2, r7, #1224	; 0x4c8
 8023210:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8023214:	6013      	str	r3, [r2, #0]
    return result;
 8023216:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 802321a:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(39332535)
 802321c:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 8023220:	ea02 0103 	and.w	r1, r2, r3
 8023224:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 8023228:	43da      	mvns	r2, r3
 802322a:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 802322e:	4013      	ands	r3, r2
 8023230:	404b      	eors	r3, r1
 8023232:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
    SELECT_IF_NON_ZERO(720401)
 8023236:	f8d7 25b0 	ldr.w	r2, [r7, #1456]	; 0x5b0
 802323a:	1c53      	adds	r3, r2, #1
 802323c:	f8c7 35b0 	str.w	r3, [r7, #1456]	; 0x5b0
 8023240:	2301      	movs	r3, #1
 8023242:	fa03 f202 	lsl.w	r2, r3, r2
 8023246:	f8d7 35a8 	ldr.w	r3, [r7, #1448]	; 0x5a8
 802324a:	4013      	ands	r3, r2
 802324c:	2b00      	cmp	r3, #0
 802324e:	d002      	beq.n	8023256 <arm_softmax_s8+0xebe>
 8023250:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8023254:	e000      	b.n	8023258 <arm_softmax_s8+0xec0>
 8023256:	2300      	movs	r3, #0
 8023258:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 802325c:	f207 42bc 	addw	r2, r7, #1212	; 0x4bc
 8023260:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8023264:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8023266:	f507 6297 	add.w	r2, r7, #1208	; 0x4b8
 802326a:	2300      	movs	r3, #0
 802326c:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 802326e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8023272:	f04f 0300 	mov.w	r3, #0
 8023276:	f507 6196 	add.w	r1, r7, #1200	; 0x4b0
 802327a:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 802327e:	f207 43bc 	addw	r3, r7, #1212	; 0x4bc
 8023282:	681b      	ldr	r3, [r3, #0]
 8023284:	0fdb      	lsrs	r3, r3, #31
 8023286:	b2da      	uxtb	r2, r3
 8023288:	2300      	movs	r3, #0
 802328a:	4053      	eors	r3, r2
 802328c:	b2db      	uxtb	r3, r3
 802328e:	2b00      	cmp	r3, #0
 8023290:	d014      	beq.n	80232bc <arm_softmax_s8+0xf24>
        mult = 1 - mult;
 8023292:	f04f 0001 	mov.w	r0, #1
 8023296:	f04f 0100 	mov.w	r1, #0
 802329a:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 802329e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80232a2:	1a84      	subs	r4, r0, r2
 80232a4:	f8c7 4170 	str.w	r4, [r7, #368]	; 0x170
 80232a8:	eb61 0303 	sbc.w	r3, r1, r3
 80232ac:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 80232b0:	e9d7 345c 	ldrd	r3, r4, [r7, #368]	; 0x170
 80232b4:	f507 6296 	add.w	r2, r7, #1200	; 0x4b0
 80232b8:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80232bc:	f207 43bc 	addw	r3, r7, #1212	; 0x4bc
 80232c0:	681b      	ldr	r3, [r3, #0]
 80232c2:	4618      	mov	r0, r3
 80232c4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80232c8:	4a84      	ldr	r2, [pc, #528]	; (80234dc <arm_softmax_s8+0x1144>)
 80232ca:	f04f 0300 	mov.w	r3, #0
 80232ce:	fb02 f501 	mul.w	r5, r2, r1
 80232d2:	fb00 f403 	mul.w	r4, r0, r3
 80232d6:	442c      	add	r4, r5
 80232d8:	fba0 0102 	umull	r0, r1, r0, r2
 80232dc:	1863      	adds	r3, r4, r1
 80232de:	4619      	mov	r1, r3
 80232e0:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 80232e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80232e8:	1814      	adds	r4, r2, r0
 80232ea:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 80232ee:	414b      	adcs	r3, r1
 80232f0:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80232f4:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 80232f8:	f507 6296 	add.w	r2, r7, #1200	; 0x4b0
 80232fc:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8023300:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8023304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023308:	4610      	mov	r0, r2
 802330a:	4619      	mov	r1, r3
 802330c:	2800      	cmp	r0, #0
 802330e:	f171 0300 	sbcs.w	r3, r1, #0
 8023312:	da06      	bge.n	8023322 <arm_softmax_s8+0xf8a>
 8023314:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8023318:	f04f 0300 	mov.w	r3, #0
 802331c:	1880      	adds	r0, r0, r2
 802331e:	eb43 0101 	adc.w	r1, r3, r1
 8023322:	f04f 0200 	mov.w	r2, #0
 8023326:	f04f 0300 	mov.w	r3, #0
 802332a:	0fc2      	lsrs	r2, r0, #31
 802332c:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8023330:	17cb      	asrs	r3, r1, #31
 8023332:	4610      	mov	r0, r2
 8023334:	4619      	mov	r1, r3
 8023336:	f507 6297 	add.w	r2, r7, #1208	; 0x4b8
 802333a:	4603      	mov	r3, r0
 802333c:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 802333e:	f207 43bc 	addw	r3, r7, #1212	; 0x4bc
 8023342:	681a      	ldr	r2, [r3, #0]
 8023344:	4b65      	ldr	r3, [pc, #404]	; (80234dc <arm_softmax_s8+0x1144>)
 8023346:	429a      	cmp	r2, r3
 8023348:	d10a      	bne.n	8023360 <arm_softmax_s8+0xfc8>
 802334a:	f207 43bc 	addw	r3, r7, #1212	; 0x4bc
 802334e:	681b      	ldr	r3, [r3, #0]
 8023350:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8023354:	d104      	bne.n	8023360 <arm_softmax_s8+0xfc8>
        result = Q31_MAX;
 8023356:	f507 6297 	add.w	r2, r7, #1208	; 0x4b8
 802335a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 802335e:	6013      	str	r3, [r2, #0]
    return result;
 8023360:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8023364:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(720401)
 8023366:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 802336a:	ea02 0103 	and.w	r1, r2, r3
 802336e:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 8023372:	43da      	mvns	r2, r3
 8023374:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8023378:	4013      	ands	r3, r2
 802337a:	404b      	eors	r3, r1
 802337c:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
    SELECT_IF_NON_ZERO(242)
 8023380:	f8d7 25b0 	ldr.w	r2, [r7, #1456]	; 0x5b0
 8023384:	1c53      	adds	r3, r2, #1
 8023386:	f8c7 35b0 	str.w	r3, [r7, #1456]	; 0x5b0
 802338a:	2301      	movs	r3, #1
 802338c:	fa03 f202 	lsl.w	r2, r3, r2
 8023390:	f8d7 35a8 	ldr.w	r3, [r7, #1448]	; 0x5a8
 8023394:	4013      	ands	r3, r2
 8023396:	2b00      	cmp	r3, #0
 8023398:	d002      	beq.n	80233a0 <arm_softmax_s8+0x1008>
 802339a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802339e:	e000      	b.n	80233a2 <arm_softmax_s8+0x100a>
 80233a0:	2300      	movs	r3, #0
 80233a2:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 80233a6:	f207 42ac 	addw	r2, r7, #1196	; 0x4ac
 80233aa:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 80233ae:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80233b0:	f507 6295 	add.w	r2, r7, #1192	; 0x4a8
 80233b4:	2300      	movs	r3, #0
 80233b6:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80233b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80233bc:	f04f 0300 	mov.w	r3, #0
 80233c0:	f507 6194 	add.w	r1, r7, #1184	; 0x4a0
 80233c4:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80233c8:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 80233cc:	681b      	ldr	r3, [r3, #0]
 80233ce:	0fdb      	lsrs	r3, r3, #31
 80233d0:	b2da      	uxtb	r2, r3
 80233d2:	2300      	movs	r3, #0
 80233d4:	4053      	eors	r3, r2
 80233d6:	b2db      	uxtb	r3, r3
 80233d8:	2b00      	cmp	r3, #0
 80233da:	d014      	beq.n	8023406 <arm_softmax_s8+0x106e>
        mult = 1 - mult;
 80233dc:	f04f 0001 	mov.w	r0, #1
 80233e0:	f04f 0100 	mov.w	r1, #0
 80233e4:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 80233e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80233ec:	1a84      	subs	r4, r0, r2
 80233ee:	f8c7 4160 	str.w	r4, [r7, #352]	; 0x160
 80233f2:	eb61 0303 	sbc.w	r3, r1, r3
 80233f6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 80233fa:	e9d7 3458 	ldrd	r3, r4, [r7, #352]	; 0x160
 80233fe:	f507 6294 	add.w	r2, r7, #1184	; 0x4a0
 8023402:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8023406:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 802340a:	681b      	ldr	r3, [r3, #0]
 802340c:	4618      	mov	r0, r3
 802340e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8023412:	f04f 02f2 	mov.w	r2, #242	; 0xf2
 8023416:	f04f 0300 	mov.w	r3, #0
 802341a:	fb02 f501 	mul.w	r5, r2, r1
 802341e:	fb00 f403 	mul.w	r4, r0, r3
 8023422:	442c      	add	r4, r5
 8023424:	fba0 0102 	umull	r0, r1, r0, r2
 8023428:	1863      	adds	r3, r4, r1
 802342a:	4619      	mov	r1, r3
 802342c:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 8023430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023434:	1814      	adds	r4, r2, r0
 8023436:	f8c7 4158 	str.w	r4, [r7, #344]	; 0x158
 802343a:	414b      	adcs	r3, r1
 802343c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8023440:	e9d7 3456 	ldrd	r3, r4, [r7, #344]	; 0x158
 8023444:	f507 6294 	add.w	r2, r7, #1184	; 0x4a0
 8023448:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 802344c:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 8023450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023454:	4610      	mov	r0, r2
 8023456:	4619      	mov	r1, r3
 8023458:	2800      	cmp	r0, #0
 802345a:	f171 0300 	sbcs.w	r3, r1, #0
 802345e:	da06      	bge.n	802346e <arm_softmax_s8+0x10d6>
 8023460:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8023464:	f04f 0300 	mov.w	r3, #0
 8023468:	1880      	adds	r0, r0, r2
 802346a:	eb43 0101 	adc.w	r1, r3, r1
 802346e:	f04f 0200 	mov.w	r2, #0
 8023472:	f04f 0300 	mov.w	r3, #0
 8023476:	0fc2      	lsrs	r2, r0, #31
 8023478:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 802347c:	17cb      	asrs	r3, r1, #31
 802347e:	4610      	mov	r0, r2
 8023480:	4619      	mov	r1, r3
 8023482:	f507 6295 	add.w	r2, r7, #1192	; 0x4a8
 8023486:	4603      	mov	r3, r0
 8023488:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 802348a:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 802348e:	681b      	ldr	r3, [r3, #0]
 8023490:	2bf2      	cmp	r3, #242	; 0xf2
 8023492:	d10a      	bne.n	80234aa <arm_softmax_s8+0x1112>
 8023494:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 8023498:	681b      	ldr	r3, [r3, #0]
 802349a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802349e:	d104      	bne.n	80234aa <arm_softmax_s8+0x1112>
        result = Q31_MAX;
 80234a0:	f507 6295 	add.w	r2, r7, #1192	; 0x4a8
 80234a4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80234a8:	6013      	str	r3, [r2, #0]
    return result;
 80234aa:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 80234ae:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(242)
 80234b0:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 80234b4:	ea02 0103 	and.w	r1, r2, r3
 80234b8:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 80234bc:	43da      	mvns	r2, r3
 80234be:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 80234c2:	4013      	ands	r3, r2
 80234c4:	404b      	eors	r3, r1
 80234c6:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
    mask = MASK_IF_ZERO(val);
 80234ca:	f8d7 35b8 	ldr.w	r3, [r7, #1464]	; 0x5b8
 80234ce:	2b00      	cmp	r3, #0
 80234d0:	d10a      	bne.n	80234e8 <arm_softmax_s8+0x1150>
 80234d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80234d6:	e008      	b.n	80234ea <arm_softmax_s8+0x1152>
 80234d8:	02582ab7 	.word	0x02582ab7
 80234dc:	000afe11 	.word	0x000afe11
 80234e0:	02582ab7 	.word	0x02582ab7
 80234e4:	00000000 	.word	0x00000000
 80234e8:	2300      	movs	r3, #0
 80234ea:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
    return SELECT_USING_MASK(mask, Q31_MAX, result);
 80234ee:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 80234f2:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80234f6:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 80234fa:	43da      	mvns	r2, r3
 80234fc:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8023500:	4013      	ands	r3, r2
 8023502:	404b      	eors	r3, r1
 8023504:	f8c7 35cc 	str.w	r3, [r7, #1484]	; 0x5cc
    q31_t result = 0;
 8023508:	2300      	movs	r3, #0
 802350a:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
    const q31_t remainder_mask = (1 << exponent) - 1;
 802350e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8023512:	3b01      	subs	r3, #1
 8023514:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
    int32_t remainder = remainder_mask & dividend;
 8023518:	f8d7 25cc 	ldr.w	r2, [r7, #1484]	; 0x5cc
 802351c:	f8d7 35c4 	ldr.w	r3, [r7, #1476]	; 0x5c4
 8023520:	4013      	ands	r3, r2
 8023522:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
    result = dividend >> exponent;
 8023526:	f8d7 35cc 	ldr.w	r3, [r7, #1484]	; 0x5cc
 802352a:	131b      	asrs	r3, r3, #12
 802352c:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
    q31_t threshold = remainder_mask >> 1;
 8023530:	f8d7 35c4 	ldr.w	r3, [r7, #1476]	; 0x5c4
 8023534:	105b      	asrs	r3, r3, #1
 8023536:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
    if (result < 0)
 802353a:	f8d7 35c8 	ldr.w	r3, [r7, #1480]	; 0x5c8
 802353e:	2b00      	cmp	r3, #0
 8023540:	da04      	bge.n	802354c <arm_softmax_s8+0x11b4>
        threshold++;
 8023542:	f8d7 35bc 	ldr.w	r3, [r7, #1468]	; 0x5bc
 8023546:	3301      	adds	r3, #1
 8023548:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
    if (remainder > threshold)
 802354c:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 8023550:	f8d7 35bc 	ldr.w	r3, [r7, #1468]	; 0x5bc
 8023554:	429a      	cmp	r2, r3
 8023556:	dd04      	ble.n	8023562 <arm_softmax_s8+0x11ca>
        result++;
 8023558:	f8d7 35c8 	ldr.w	r3, [r7, #1480]	; 0x5c8
 802355c:	3301      	adds	r3, #1
 802355e:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
    return result;
 8023562:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 8023566:	f8d7 35e8 	ldr.w	r3, [r7, #1512]	; 0x5e8
 802356a:	4413      	add	r3, r2
 802356c:	f8c7 35e8 	str.w	r3, [r7, #1512]	; 0x5e8
        for (col = 0; col < row_size; ++col)
 8023570:	f8d7 35f4 	ldr.w	r3, [r7, #1524]	; 0x5f4
 8023574:	3301      	adds	r3, #1
 8023576:	f8c7 35f4 	str.w	r3, [r7, #1524]	; 0x5f4
 802357a:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 802357e:	f8d7 25f4 	ldr.w	r2, [r7, #1524]	; 0x5f4
 8023582:	681b      	ldr	r3, [r3, #0]
 8023584:	429a      	cmp	r2, r3
 8023586:	f6fe af57 	blt.w	8022438 <arm_softmax_s8+0xa0>
            }
        }

        const int32_t headroom = __CLZ(sum);
 802358a:	f8d7 25e8 	ldr.w	r2, [r7, #1512]	; 0x5e8
 802358e:	f207 4384 	addw	r3, r7, #1156	; 0x484
 8023592:	601a      	str	r2, [r3, #0]
  if (value == 0U)
 8023594:	f207 4384 	addw	r3, r7, #1156	; 0x484
 8023598:	681b      	ldr	r3, [r3, #0]
 802359a:	2b00      	cmp	r3, #0
 802359c:	d101      	bne.n	80235a2 <arm_softmax_s8+0x120a>
    return 32U;
 802359e:	2320      	movs	r3, #32
 80235a0:	e005      	b.n	80235ae <arm_softmax_s8+0x1216>
  return __builtin_clz(value);
 80235a2:	f207 4384 	addw	r3, r7, #1156	; 0x484
 80235a6:	681b      	ldr	r3, [r3, #0]
 80235a8:	fab3 f383 	clz	r3, r3
 80235ac:	b2db      	uxtb	r3, r3
 80235ae:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
        const int32_t bits_over_unit = ACCUM_BITS - headroom + 23;
 80235b2:	f8d7 35dc 	ldr.w	r3, [r7, #1500]	; 0x5dc
 80235b6:	f1c3 0323 	rsb	r3, r3, #35	; 0x23
 80235ba:	f8c7 35d8 	str.w	r3, [r7, #1496]	; 0x5d8
        const int32_t shifted_scale = ONE_OVER1((sum > 0 ? sum << headroom : 0) - (1 << 31));
 80235be:	f8d7 35e8 	ldr.w	r3, [r7, #1512]	; 0x5e8
 80235c2:	2b00      	cmp	r3, #0
 80235c4:	dd08      	ble.n	80235d8 <arm_softmax_s8+0x1240>
 80235c6:	f8d7 25e8 	ldr.w	r2, [r7, #1512]	; 0x5e8
 80235ca:	f8d7 35dc 	ldr.w	r3, [r7, #1500]	; 0x5dc
 80235ce:	fa02 f303 	lsl.w	r3, r2, r3
 80235d2:	f103 4200 	add.w	r2, r3, #2147483648	; 0x80000000
 80235d6:	e001      	b.n	80235dc <arm_softmax_s8+0x1244>
 80235d8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80235dc:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 80235e0:	601a      	str	r2, [r3, #0]
    const int64_t sum = (int64_t)val + (int64_t)Q31_MAX;
 80235e2:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 80235e6:	681b      	ldr	r3, [r3, #0]
 80235e8:	4618      	mov	r0, r3
 80235ea:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80235ee:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80235f2:	f04f 0300 	mov.w	r3, #0
 80235f6:	1884      	adds	r4, r0, r2
 80235f8:	f8c7 4150 	str.w	r4, [r7, #336]	; 0x150
 80235fc:	eb41 0303 	adc.w	r3, r1, r3
 8023600:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8023604:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 8023608:	f507 628f 	add.w	r2, r7, #1144	; 0x478
 802360c:	e9c2 3400 	strd	r3, r4, [r2]
    const int32_t half_denominator = (int32_t)((sum + (sum >= 0 ? 1 : -1)) / 2L);
 8023610:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8023614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023618:	2a00      	cmp	r2, #0
 802361a:	f173 0300 	sbcs.w	r3, r3, #0
 802361e:	db04      	blt.n	802362a <arm_softmax_s8+0x1292>
 8023620:	f04f 0001 	mov.w	r0, #1
 8023624:	f04f 0100 	mov.w	r1, #0
 8023628:	e003      	b.n	8023632 <arm_softmax_s8+0x129a>
 802362a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802362e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8023632:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8023636:	e9d3 2300 	ldrd	r2, r3, [r3]
 802363a:	eb10 0a02 	adds.w	sl, r0, r2
 802363e:	eb41 0b03 	adc.w	fp, r1, r3
 8023642:	ea4f 73db 	mov.w	r3, fp, lsr #31
 8023646:	461a      	mov	r2, r3
 8023648:	f04f 0300 	mov.w	r3, #0
 802364c:	eb12 080a 	adds.w	r8, r2, sl
 8023650:	eb43 090b 	adc.w	r9, r3, fp
 8023654:	f04f 0200 	mov.w	r2, #0
 8023658:	f04f 0300 	mov.w	r3, #0
 802365c:	ea4f 0258 	mov.w	r2, r8, lsr #1
 8023660:	ea42 72c9 	orr.w	r2, r2, r9, lsl #31
 8023664:	ea4f 0369 	mov.w	r3, r9, asr #1
 8023668:	4610      	mov	r0, r2
 802366a:	4619      	mov	r1, r3
 802366c:	f207 4274 	addw	r2, r7, #1140	; 0x474
 8023670:	4603      	mov	r3, r0
 8023672:	6013      	str	r3, [r2, #0]
 8023674:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8023678:	f207 4374 	addw	r3, r7, #1140	; 0x474
 802367c:	681b      	ldr	r3, [r3, #0]
 802367e:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8023680:	f207 426c 	addw	r2, r7, #1132	; 0x46c
 8023684:	2300      	movs	r3, #0
 8023686:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8023688:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 802368c:	f04f 0300 	mov.w	r3, #0
 8023690:	f507 618c 	add.w	r1, r7, #1120	; 0x460
 8023694:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8023698:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 802369c:	681b      	ldr	r3, [r3, #0]
 802369e:	0fdb      	lsrs	r3, r3, #31
 80236a0:	b2da      	uxtb	r2, r3
 80236a2:	2301      	movs	r3, #1
 80236a4:	4053      	eors	r3, r2
 80236a6:	b2db      	uxtb	r3, r3
 80236a8:	2b00      	cmp	r3, #0
 80236aa:	d014      	beq.n	80236d6 <arm_softmax_s8+0x133e>
        mult = 1 - mult;
 80236ac:	f04f 0001 	mov.w	r0, #1
 80236b0:	f04f 0100 	mov.w	r1, #0
 80236b4:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 80236b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80236bc:	1a84      	subs	r4, r0, r2
 80236be:	f8c7 4148 	str.w	r4, [r7, #328]	; 0x148
 80236c2:	eb61 0303 	sbc.w	r3, r1, r3
 80236c6:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80236ca:	e9d7 3452 	ldrd	r3, r4, [r7, #328]	; 0x148
 80236ce:	f507 628c 	add.w	r2, r7, #1120	; 0x460
 80236d2:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80236d6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80236da:	681b      	ldr	r3, [r3, #0]
 80236dc:	4618      	mov	r0, r3
 80236de:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80236e2:	f60f 2354 	addw	r3, pc, #2644	; 0xa54
 80236e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80236ea:	fb02 f501 	mul.w	r5, r2, r1
 80236ee:	fb00 f403 	mul.w	r4, r0, r3
 80236f2:	442c      	add	r4, r5
 80236f4:	fba0 0102 	umull	r0, r1, r0, r2
 80236f8:	1863      	adds	r3, r4, r1
 80236fa:	4619      	mov	r1, r3
 80236fc:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8023700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023704:	1814      	adds	r4, r2, r0
 8023706:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 802370a:	414b      	adcs	r3, r1
 802370c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8023710:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8023714:	f507 628c 	add.w	r2, r7, #1120	; 0x460
 8023718:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 802371c:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8023720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023724:	4610      	mov	r0, r2
 8023726:	4619      	mov	r1, r3
 8023728:	2800      	cmp	r0, #0
 802372a:	f171 0300 	sbcs.w	r3, r1, #0
 802372e:	da06      	bge.n	802373e <arm_softmax_s8+0x13a6>
 8023730:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8023734:	f04f 0300 	mov.w	r3, #0
 8023738:	1880      	adds	r0, r0, r2
 802373a:	eb43 0101 	adc.w	r1, r3, r1
 802373e:	f04f 0200 	mov.w	r2, #0
 8023742:	f04f 0300 	mov.w	r3, #0
 8023746:	0fc2      	lsrs	r2, r0, #31
 8023748:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 802374c:	17cb      	asrs	r3, r1, #31
 802374e:	4610      	mov	r0, r2
 8023750:	4619      	mov	r1, r3
 8023752:	f207 426c 	addw	r2, r7, #1132	; 0x46c
 8023756:	4603      	mov	r3, r0
 8023758:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 802375a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 802375e:	681b      	ldr	r3, [r3, #0]
 8023760:	f113 3f3c 	cmn.w	r3, #1010580540	; 0x3c3c3c3c
 8023764:	d10a      	bne.n	802377c <arm_softmax_s8+0x13e4>
 8023766:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 802376a:	681b      	ldr	r3, [r3, #0]
 802376c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8023770:	d104      	bne.n	802377c <arm_softmax_s8+0x13e4>
        result = Q31_MAX;
 8023772:	f207 426c 	addw	r2, r7, #1132	; 0x46c
 8023776:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 802377a:	6013      	str	r3, [r2, #0]
    return result;
 802377c:	f207 436c 	addw	r3, r7, #1132	; 0x46c
 8023780:	681b      	ldr	r3, [r3, #0]
    int32_t x = 1515870810 + MUL_SAT(half_denominator, -1010580540);
 8023782:	f207 425c 	addw	r2, r7, #1116	; 0x45c
 8023786:	f103 335a 	add.w	r3, r3, #1515870810	; 0x5a5a5a5a
 802378a:	6013      	str	r3, [r2, #0]
    const int32_t shift = (1 << 29);
 802378c:	f507 628b 	add.w	r2, r7, #1112	; 0x458
 8023790:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8023794:	6013      	str	r3, [r2, #0]
 8023796:	f207 4254 	addw	r2, r7, #1108	; 0x454
 802379a:	f207 4374 	addw	r3, r7, #1140	; 0x474
 802379e:	681b      	ldr	r3, [r3, #0]
 80237a0:	6013      	str	r3, [r2, #0]
 80237a2:	f507 628a 	add.w	r2, r7, #1104	; 0x450
 80237a6:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 80237aa:	681b      	ldr	r3, [r3, #0]
 80237ac:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80237ae:	f207 424c 	addw	r2, r7, #1100	; 0x44c
 80237b2:	2300      	movs	r3, #0
 80237b4:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80237b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80237ba:	f04f 0300 	mov.w	r3, #0
 80237be:	f507 6188 	add.w	r1, r7, #1088	; 0x440
 80237c2:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80237c6:	f207 4354 	addw	r3, r7, #1108	; 0x454
 80237ca:	681b      	ldr	r3, [r3, #0]
 80237cc:	0fdb      	lsrs	r3, r3, #31
 80237ce:	b2da      	uxtb	r2, r3
 80237d0:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80237d4:	681b      	ldr	r3, [r3, #0]
 80237d6:	0fdb      	lsrs	r3, r3, #31
 80237d8:	b2db      	uxtb	r3, r3
 80237da:	4053      	eors	r3, r2
 80237dc:	b2db      	uxtb	r3, r3
 80237de:	2b00      	cmp	r3, #0
 80237e0:	d014      	beq.n	802380c <arm_softmax_s8+0x1474>
        mult = 1 - mult;
 80237e2:	f04f 0001 	mov.w	r0, #1
 80237e6:	f04f 0100 	mov.w	r1, #0
 80237ea:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 80237ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80237f2:	1a84      	subs	r4, r0, r2
 80237f4:	f8c7 4138 	str.w	r4, [r7, #312]	; 0x138
 80237f8:	eb61 0303 	sbc.w	r3, r1, r3
 80237fc:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8023800:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 8023804:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 8023808:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 802380c:	f207 4354 	addw	r3, r7, #1108	; 0x454
 8023810:	681b      	ldr	r3, [r3, #0]
 8023812:	4618      	mov	r0, r3
 8023814:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8023818:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 802381c:	681b      	ldr	r3, [r3, #0]
 802381e:	461a      	mov	r2, r3
 8023820:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8023824:	fb02 f501 	mul.w	r5, r2, r1
 8023828:	fb00 f403 	mul.w	r4, r0, r3
 802382c:	442c      	add	r4, r5
 802382e:	fba0 0102 	umull	r0, r1, r0, r2
 8023832:	1863      	adds	r3, r4, r1
 8023834:	4619      	mov	r1, r3
 8023836:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 802383a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802383e:	1814      	adds	r4, r2, r0
 8023840:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 8023844:	414b      	adcs	r3, r1
 8023846:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 802384a:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 802384e:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 8023852:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8023856:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 802385a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802385e:	4610      	mov	r0, r2
 8023860:	4619      	mov	r1, r3
 8023862:	2800      	cmp	r0, #0
 8023864:	f171 0300 	sbcs.w	r3, r1, #0
 8023868:	da06      	bge.n	8023878 <arm_softmax_s8+0x14e0>
 802386a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 802386e:	f04f 0300 	mov.w	r3, #0
 8023872:	1880      	adds	r0, r0, r2
 8023874:	eb43 0101 	adc.w	r1, r3, r1
 8023878:	f04f 0200 	mov.w	r2, #0
 802387c:	f04f 0300 	mov.w	r3, #0
 8023880:	0fc2      	lsrs	r2, r0, #31
 8023882:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8023886:	17cb      	asrs	r3, r1, #31
 8023888:	4610      	mov	r0, r2
 802388a:	4619      	mov	r1, r3
 802388c:	f207 424c 	addw	r2, r7, #1100	; 0x44c
 8023890:	4603      	mov	r3, r0
 8023892:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8023894:	f207 4254 	addw	r2, r7, #1108	; 0x454
 8023898:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 802389c:	6812      	ldr	r2, [r2, #0]
 802389e:	681b      	ldr	r3, [r3, #0]
 80238a0:	429a      	cmp	r2, r3
 80238a2:	d10a      	bne.n	80238ba <arm_softmax_s8+0x1522>
 80238a4:	f207 4354 	addw	r3, r7, #1108	; 0x454
 80238a8:	681b      	ldr	r3, [r3, #0]
 80238aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80238ae:	d104      	bne.n	80238ba <arm_softmax_s8+0x1522>
        result = Q31_MAX;
 80238b0:	f207 424c 	addw	r2, r7, #1100	; 0x44c
 80238b4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80238b8:	6013      	str	r3, [r2, #0]
    return result;
 80238ba:	f207 434c 	addw	r3, r7, #1100	; 0x44c
 80238be:	681a      	ldr	r2, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 80238c0:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 80238c4:	681b      	ldr	r3, [r3, #0]
 80238c6:	1a99      	subs	r1, r3, r2
 80238c8:	f207 423c 	addw	r2, r7, #1084	; 0x43c
 80238cc:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 80238d0:	681b      	ldr	r3, [r3, #0]
 80238d2:	6013      	str	r3, [r2, #0]
 80238d4:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 80238d8:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 80238da:	f207 4234 	addw	r2, r7, #1076	; 0x434
 80238de:	2300      	movs	r3, #0
 80238e0:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80238e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80238e6:	f04f 0300 	mov.w	r3, #0
 80238ea:	f507 6185 	add.w	r1, r7, #1064	; 0x428
 80238ee:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80238f2:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 80238f6:	681b      	ldr	r3, [r3, #0]
 80238f8:	0fdb      	lsrs	r3, r3, #31
 80238fa:	b2da      	uxtb	r2, r3
 80238fc:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8023900:	681b      	ldr	r3, [r3, #0]
 8023902:	0fdb      	lsrs	r3, r3, #31
 8023904:	b2db      	uxtb	r3, r3
 8023906:	4053      	eors	r3, r2
 8023908:	b2db      	uxtb	r3, r3
 802390a:	2b00      	cmp	r3, #0
 802390c:	d014      	beq.n	8023938 <arm_softmax_s8+0x15a0>
        mult = 1 - mult;
 802390e:	f04f 0001 	mov.w	r0, #1
 8023912:	f04f 0100 	mov.w	r1, #0
 8023916:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 802391a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802391e:	1a84      	subs	r4, r0, r2
 8023920:	f8c7 4128 	str.w	r4, [r7, #296]	; 0x128
 8023924:	eb61 0303 	sbc.w	r3, r1, r3
 8023928:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 802392c:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	; 0x128
 8023930:	f507 6285 	add.w	r2, r7, #1064	; 0x428
 8023934:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8023938:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 802393c:	681b      	ldr	r3, [r3, #0]
 802393e:	4618      	mov	r0, r3
 8023940:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8023944:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8023948:	681b      	ldr	r3, [r3, #0]
 802394a:	461a      	mov	r2, r3
 802394c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8023950:	fb02 f501 	mul.w	r5, r2, r1
 8023954:	fb00 f403 	mul.w	r4, r0, r3
 8023958:	442c      	add	r4, r5
 802395a:	fba0 0102 	umull	r0, r1, r0, r2
 802395e:	1863      	adds	r3, r4, r1
 8023960:	4619      	mov	r1, r3
 8023962:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8023966:	e9d3 2300 	ldrd	r2, r3, [r3]
 802396a:	1814      	adds	r4, r2, r0
 802396c:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 8023970:	414b      	adcs	r3, r1
 8023972:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8023976:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 802397a:	f507 6285 	add.w	r2, r7, #1064	; 0x428
 802397e:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8023982:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8023986:	e9d3 2300 	ldrd	r2, r3, [r3]
 802398a:	4610      	mov	r0, r2
 802398c:	4619      	mov	r1, r3
 802398e:	2800      	cmp	r0, #0
 8023990:	f171 0300 	sbcs.w	r3, r1, #0
 8023994:	da06      	bge.n	80239a4 <arm_softmax_s8+0x160c>
 8023996:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 802399a:	f04f 0300 	mov.w	r3, #0
 802399e:	1880      	adds	r0, r0, r2
 80239a0:	eb43 0101 	adc.w	r1, r3, r1
 80239a4:	f04f 0200 	mov.w	r2, #0
 80239a8:	f04f 0300 	mov.w	r3, #0
 80239ac:	0fc2      	lsrs	r2, r0, #31
 80239ae:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80239b2:	17cb      	asrs	r3, r1, #31
 80239b4:	4610      	mov	r0, r2
 80239b6:	4619      	mov	r1, r3
 80239b8:	f207 4234 	addw	r2, r7, #1076	; 0x434
 80239bc:	4603      	mov	r3, r0
 80239be:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80239c0:	f207 423c 	addw	r2, r7, #1084	; 0x43c
 80239c4:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 80239c8:	6812      	ldr	r2, [r2, #0]
 80239ca:	681b      	ldr	r3, [r3, #0]
 80239cc:	429a      	cmp	r2, r3
 80239ce:	d10a      	bne.n	80239e6 <arm_softmax_s8+0x164e>
 80239d0:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 80239d4:	681b      	ldr	r3, [r3, #0]
 80239d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80239da:	d104      	bne.n	80239e6 <arm_softmax_s8+0x164e>
        result = Q31_MAX;
 80239dc:	f207 4234 	addw	r2, r7, #1076	; 0x434
 80239e0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80239e4:	6013      	str	r3, [r2, #0]
    return result;
 80239e6:	f207 4334 	addw	r3, r7, #1076	; 0x434
 80239ea:	681a      	ldr	r2, [r3, #0]
 80239ec:	f207 4324 	addw	r3, r7, #1060	; 0x424
 80239f0:	601a      	str	r2, [r3, #0]
    const int32_t thresh = ((1 << (31 - exp)) - 1);
 80239f2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80239f6:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 80239fa:	3b01      	subs	r3, #1
 80239fc:	6013      	str	r3, [r2, #0]
    int32_t result = val << exp;
 80239fe:	f207 421c 	addw	r2, r7, #1052	; 0x41c
 8023a02:	f207 4324 	addw	r3, r7, #1060	; 0x424
 8023a06:	681b      	ldr	r3, [r3, #0]
 8023a08:	009b      	lsls	r3, r3, #2
 8023a0a:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 8023a0c:	f207 4224 	addw	r2, r7, #1060	; 0x424
 8023a10:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8023a14:	6812      	ldr	r2, [r2, #0]
 8023a16:	681b      	ldr	r3, [r3, #0]
 8023a18:	429a      	cmp	r2, r3
 8023a1a:	dd02      	ble.n	8023a22 <arm_softmax_s8+0x168a>
 8023a1c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8023a20:	e000      	b.n	8023a24 <arm_softmax_s8+0x168c>
 8023a22:	2100      	movs	r1, #0
 8023a24:	f207 4224 	addw	r2, r7, #1060	; 0x424
 8023a28:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8023a2c:	6812      	ldr	r2, [r2, #0]
 8023a2e:	681b      	ldr	r3, [r3, #0]
 8023a30:	429a      	cmp	r2, r3
 8023a32:	dd01      	ble.n	8023a38 <arm_softmax_s8+0x16a0>
 8023a34:	2200      	movs	r2, #0
 8023a36:	e001      	b.n	8023a3c <arm_softmax_s8+0x16a4>
 8023a38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8023a3c:	f207 431c 	addw	r3, r7, #1052	; 0x41c
 8023a40:	681b      	ldr	r3, [r3, #0]
 8023a42:	4013      	ands	r3, r2
 8023a44:	f207 421c 	addw	r2, r7, #1052	; 0x41c
 8023a48:	404b      	eors	r3, r1
 8023a4a:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 8023a4c:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8023a50:	681b      	ldr	r3, [r3, #0]
 8023a52:	425a      	negs	r2, r3
 8023a54:	f207 4324 	addw	r3, r7, #1060	; 0x424
 8023a58:	681b      	ldr	r3, [r3, #0]
 8023a5a:	4293      	cmp	r3, r2
 8023a5c:	da02      	bge.n	8023a64 <arm_softmax_s8+0x16cc>
 8023a5e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8023a62:	e000      	b.n	8023a66 <arm_softmax_s8+0x16ce>
 8023a64:	2100      	movs	r1, #0
 8023a66:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8023a6a:	681b      	ldr	r3, [r3, #0]
 8023a6c:	425a      	negs	r2, r3
 8023a6e:	f207 4324 	addw	r3, r7, #1060	; 0x424
 8023a72:	681b      	ldr	r3, [r3, #0]
 8023a74:	4293      	cmp	r3, r2
 8023a76:	da01      	bge.n	8023a7c <arm_softmax_s8+0x16e4>
 8023a78:	2200      	movs	r2, #0
 8023a7a:	e001      	b.n	8023a80 <arm_softmax_s8+0x16e8>
 8023a7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8023a80:	f207 431c 	addw	r3, r7, #1052	; 0x41c
 8023a84:	681b      	ldr	r3, [r3, #0]
 8023a86:	4013      	ands	r3, r2
 8023a88:	f207 421c 	addw	r2, r7, #1052	; 0x41c
 8023a8c:	404b      	eors	r3, r1
 8023a8e:	6013      	str	r3, [r2, #0]
    return result;
 8023a90:	f207 431c 	addw	r3, r7, #1052	; 0x41c
 8023a94:	6819      	ldr	r1, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 8023a96:	f207 425c 	addw	r2, r7, #1116	; 0x45c
 8023a9a:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 8023a9e:	681b      	ldr	r3, [r3, #0]
 8023aa0:	440b      	add	r3, r1
 8023aa2:	6013      	str	r3, [r2, #0]
 8023aa4:	f507 6283 	add.w	r2, r7, #1048	; 0x418
 8023aa8:	f207 4374 	addw	r3, r7, #1140	; 0x474
 8023aac:	681b      	ldr	r3, [r3, #0]
 8023aae:	6013      	str	r3, [r2, #0]
 8023ab0:	f207 4214 	addw	r2, r7, #1044	; 0x414
 8023ab4:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 8023ab8:	681b      	ldr	r3, [r3, #0]
 8023aba:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8023abc:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8023ac0:	2300      	movs	r3, #0
 8023ac2:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8023ac4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8023ac8:	f04f 0300 	mov.w	r3, #0
 8023acc:	f507 6181 	add.w	r1, r7, #1032	; 0x408
 8023ad0:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8023ad4:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8023ad8:	681b      	ldr	r3, [r3, #0]
 8023ada:	0fdb      	lsrs	r3, r3, #31
 8023adc:	b2da      	uxtb	r2, r3
 8023ade:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8023ae2:	681b      	ldr	r3, [r3, #0]
 8023ae4:	0fdb      	lsrs	r3, r3, #31
 8023ae6:	b2db      	uxtb	r3, r3
 8023ae8:	4053      	eors	r3, r2
 8023aea:	b2db      	uxtb	r3, r3
 8023aec:	2b00      	cmp	r3, #0
 8023aee:	d014      	beq.n	8023b1a <arm_softmax_s8+0x1782>
        mult = 1 - mult;
 8023af0:	f04f 0001 	mov.w	r0, #1
 8023af4:	f04f 0100 	mov.w	r1, #0
 8023af8:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8023afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023b00:	1a84      	subs	r4, r0, r2
 8023b02:	f8c7 4118 	str.w	r4, [r7, #280]	; 0x118
 8023b06:	eb61 0303 	sbc.w	r3, r1, r3
 8023b0a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8023b0e:	e9d7 3446 	ldrd	r3, r4, [r7, #280]	; 0x118
 8023b12:	f507 6281 	add.w	r2, r7, #1032	; 0x408
 8023b16:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8023b1a:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8023b1e:	681b      	ldr	r3, [r3, #0]
 8023b20:	4618      	mov	r0, r3
 8023b22:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8023b26:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8023b2a:	681b      	ldr	r3, [r3, #0]
 8023b2c:	461a      	mov	r2, r3
 8023b2e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8023b32:	fb02 f501 	mul.w	r5, r2, r1
 8023b36:	fb00 f403 	mul.w	r4, r0, r3
 8023b3a:	442c      	add	r4, r5
 8023b3c:	fba0 0102 	umull	r0, r1, r0, r2
 8023b40:	1863      	adds	r3, r4, r1
 8023b42:	4619      	mov	r1, r3
 8023b44:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8023b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023b4c:	1814      	adds	r4, r2, r0
 8023b4e:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 8023b52:	414b      	adcs	r3, r1
 8023b54:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8023b58:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8023b5c:	f507 6281 	add.w	r2, r7, #1032	; 0x408
 8023b60:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8023b64:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8023b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023b6c:	4610      	mov	r0, r2
 8023b6e:	4619      	mov	r1, r3
 8023b70:	2800      	cmp	r0, #0
 8023b72:	f171 0300 	sbcs.w	r3, r1, #0
 8023b76:	da06      	bge.n	8023b86 <arm_softmax_s8+0x17ee>
 8023b78:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8023b7c:	f04f 0300 	mov.w	r3, #0
 8023b80:	1880      	adds	r0, r0, r2
 8023b82:	eb43 0101 	adc.w	r1, r3, r1
 8023b86:	f04f 0200 	mov.w	r2, #0
 8023b8a:	f04f 0300 	mov.w	r3, #0
 8023b8e:	0fc2      	lsrs	r2, r0, #31
 8023b90:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8023b94:	17cb      	asrs	r3, r1, #31
 8023b96:	4610      	mov	r0, r2
 8023b98:	4619      	mov	r1, r3
 8023b9a:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8023b9e:	4603      	mov	r3, r0
 8023ba0:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8023ba2:	f507 6283 	add.w	r2, r7, #1048	; 0x418
 8023ba6:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8023baa:	6812      	ldr	r2, [r2, #0]
 8023bac:	681b      	ldr	r3, [r3, #0]
 8023bae:	429a      	cmp	r2, r3
 8023bb0:	d10a      	bne.n	8023bc8 <arm_softmax_s8+0x1830>
 8023bb2:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8023bb6:	681b      	ldr	r3, [r3, #0]
 8023bb8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8023bbc:	d104      	bne.n	8023bc8 <arm_softmax_s8+0x1830>
        result = Q31_MAX;
 8023bbe:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8023bc2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8023bc6:	6013      	str	r3, [r2, #0]
    return result;
 8023bc8:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8023bcc:	681a      	ldr	r2, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 8023bce:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8023bd2:	681b      	ldr	r3, [r3, #0]
 8023bd4:	1a99      	subs	r1, r3, r2
 8023bd6:	f207 4204 	addw	r2, r7, #1028	; 0x404
 8023bda:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 8023bde:	681b      	ldr	r3, [r3, #0]
 8023be0:	6013      	str	r3, [r2, #0]
 8023be2:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8023be6:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 8023be8:	f507 727f 	add.w	r2, r7, #1020	; 0x3fc
 8023bec:	2300      	movs	r3, #0
 8023bee:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8023bf0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8023bf4:	f04f 0300 	mov.w	r3, #0
 8023bf8:	e9c7 23fc 	strd	r2, r3, [r7, #1008]	; 0x3f0
    if ((m1 < 0) ^ (m2 < 0))
 8023bfc:	f207 4304 	addw	r3, r7, #1028	; 0x404
 8023c00:	681b      	ldr	r3, [r3, #0]
 8023c02:	0fdb      	lsrs	r3, r3, #31
 8023c04:	b2da      	uxtb	r2, r3
 8023c06:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8023c0a:	681b      	ldr	r3, [r3, #0]
 8023c0c:	0fdb      	lsrs	r3, r3, #31
 8023c0e:	b2db      	uxtb	r3, r3
 8023c10:	4053      	eors	r3, r2
 8023c12:	b2db      	uxtb	r3, r3
 8023c14:	2b00      	cmp	r3, #0
 8023c16:	d010      	beq.n	8023c3a <arm_softmax_s8+0x18a2>
        mult = 1 - mult;
 8023c18:	f04f 0001 	mov.w	r0, #1
 8023c1c:	f04f 0100 	mov.w	r1, #0
 8023c20:	e9d7 23fc 	ldrd	r2, r3, [r7, #1008]	; 0x3f0
 8023c24:	1a84      	subs	r4, r0, r2
 8023c26:	f8c7 4108 	str.w	r4, [r7, #264]	; 0x108
 8023c2a:	eb61 0303 	sbc.w	r3, r1, r3
 8023c2e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8023c32:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	; 0x108
 8023c36:	e9c7 34fc 	strd	r3, r4, [r7, #1008]	; 0x3f0
    mult = mult + (q63_t)m1 * m2;
 8023c3a:	f207 4304 	addw	r3, r7, #1028	; 0x404
 8023c3e:	681b      	ldr	r3, [r3, #0]
 8023c40:	4618      	mov	r0, r3
 8023c42:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8023c46:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8023c4a:	681b      	ldr	r3, [r3, #0]
 8023c4c:	461a      	mov	r2, r3
 8023c4e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8023c52:	fb02 f501 	mul.w	r5, r2, r1
 8023c56:	fb00 f403 	mul.w	r4, r0, r3
 8023c5a:	442c      	add	r4, r5
 8023c5c:	fba0 0102 	umull	r0, r1, r0, r2
 8023c60:	1863      	adds	r3, r4, r1
 8023c62:	4619      	mov	r1, r3
 8023c64:	e9d7 23fc 	ldrd	r2, r3, [r7, #1008]	; 0x3f0
 8023c68:	1814      	adds	r4, r2, r0
 8023c6a:	f8c7 4100 	str.w	r4, [r7, #256]	; 0x100
 8023c6e:	414b      	adcs	r3, r1
 8023c70:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8023c74:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8023c78:	e9c7 34fc 	strd	r3, r4, [r7, #1008]	; 0x3f0
    result = (int32_t)(mult / (1ll << 31));
 8023c7c:	e9d7 23fc 	ldrd	r2, r3, [r7, #1008]	; 0x3f0
 8023c80:	4610      	mov	r0, r2
 8023c82:	4619      	mov	r1, r3
 8023c84:	2800      	cmp	r0, #0
 8023c86:	f171 0300 	sbcs.w	r3, r1, #0
 8023c8a:	da06      	bge.n	8023c9a <arm_softmax_s8+0x1902>
 8023c8c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8023c90:	f04f 0300 	mov.w	r3, #0
 8023c94:	1880      	adds	r0, r0, r2
 8023c96:	eb43 0101 	adc.w	r1, r3, r1
 8023c9a:	f04f 0200 	mov.w	r2, #0
 8023c9e:	f04f 0300 	mov.w	r3, #0
 8023ca2:	0fc2      	lsrs	r2, r0, #31
 8023ca4:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8023ca8:	17cb      	asrs	r3, r1, #31
 8023caa:	4610      	mov	r0, r2
 8023cac:	4619      	mov	r1, r3
 8023cae:	f507 727f 	add.w	r2, r7, #1020	; 0x3fc
 8023cb2:	4603      	mov	r3, r0
 8023cb4:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8023cb6:	f207 4204 	addw	r2, r7, #1028	; 0x404
 8023cba:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8023cbe:	6812      	ldr	r2, [r2, #0]
 8023cc0:	681b      	ldr	r3, [r3, #0]
 8023cc2:	429a      	cmp	r2, r3
 8023cc4:	d10a      	bne.n	8023cdc <arm_softmax_s8+0x1944>
 8023cc6:	f207 4304 	addw	r3, r7, #1028	; 0x404
 8023cca:	681b      	ldr	r3, [r3, #0]
 8023ccc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8023cd0:	d104      	bne.n	8023cdc <arm_softmax_s8+0x1944>
        result = Q31_MAX;
 8023cd2:	f507 727f 	add.w	r2, r7, #1020	; 0x3fc
 8023cd6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8023cda:	6013      	str	r3, [r2, #0]
    return result;
 8023cdc:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 8023ce0:	681a      	ldr	r2, [r3, #0]
 8023ce2:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 8023ce6:	601a      	str	r2, [r3, #0]
    const int32_t thresh = ((1 << (31 - exp)) - 1);
 8023ce8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8023cec:	f507 727a 	add.w	r2, r7, #1000	; 0x3e8
 8023cf0:	3b01      	subs	r3, #1
 8023cf2:	6013      	str	r3, [r2, #0]
    int32_t result = val << exp;
 8023cf4:	f507 7279 	add.w	r2, r7, #996	; 0x3e4
 8023cf8:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 8023cfc:	681b      	ldr	r3, [r3, #0]
 8023cfe:	009b      	lsls	r3, r3, #2
 8023d00:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 8023d02:	f507 727b 	add.w	r2, r7, #1004	; 0x3ec
 8023d06:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 8023d0a:	6812      	ldr	r2, [r2, #0]
 8023d0c:	681b      	ldr	r3, [r3, #0]
 8023d0e:	429a      	cmp	r2, r3
 8023d10:	dd02      	ble.n	8023d18 <arm_softmax_s8+0x1980>
 8023d12:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8023d16:	e000      	b.n	8023d1a <arm_softmax_s8+0x1982>
 8023d18:	2100      	movs	r1, #0
 8023d1a:	f507 727b 	add.w	r2, r7, #1004	; 0x3ec
 8023d1e:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 8023d22:	6812      	ldr	r2, [r2, #0]
 8023d24:	681b      	ldr	r3, [r3, #0]
 8023d26:	429a      	cmp	r2, r3
 8023d28:	dd01      	ble.n	8023d2e <arm_softmax_s8+0x1996>
 8023d2a:	2200      	movs	r2, #0
 8023d2c:	e001      	b.n	8023d32 <arm_softmax_s8+0x199a>
 8023d2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8023d32:	f507 7379 	add.w	r3, r7, #996	; 0x3e4
 8023d36:	681b      	ldr	r3, [r3, #0]
 8023d38:	4013      	ands	r3, r2
 8023d3a:	f507 7279 	add.w	r2, r7, #996	; 0x3e4
 8023d3e:	404b      	eors	r3, r1
 8023d40:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 8023d42:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 8023d46:	681b      	ldr	r3, [r3, #0]
 8023d48:	425a      	negs	r2, r3
 8023d4a:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 8023d4e:	681b      	ldr	r3, [r3, #0]
 8023d50:	4293      	cmp	r3, r2
 8023d52:	da02      	bge.n	8023d5a <arm_softmax_s8+0x19c2>
 8023d54:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8023d58:	e000      	b.n	8023d5c <arm_softmax_s8+0x19c4>
 8023d5a:	2100      	movs	r1, #0
 8023d5c:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 8023d60:	681b      	ldr	r3, [r3, #0]
 8023d62:	425a      	negs	r2, r3
 8023d64:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 8023d68:	681b      	ldr	r3, [r3, #0]
 8023d6a:	4293      	cmp	r3, r2
 8023d6c:	da01      	bge.n	8023d72 <arm_softmax_s8+0x19da>
 8023d6e:	2200      	movs	r2, #0
 8023d70:	e001      	b.n	8023d76 <arm_softmax_s8+0x19de>
 8023d72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8023d76:	f507 7379 	add.w	r3, r7, #996	; 0x3e4
 8023d7a:	681b      	ldr	r3, [r3, #0]
 8023d7c:	4013      	ands	r3, r2
 8023d7e:	f507 7279 	add.w	r2, r7, #996	; 0x3e4
 8023d82:	404b      	eors	r3, r1
 8023d84:	6013      	str	r3, [r2, #0]
    return result;
 8023d86:	f507 7379 	add.w	r3, r7, #996	; 0x3e4
 8023d8a:	6819      	ldr	r1, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 8023d8c:	f207 425c 	addw	r2, r7, #1116	; 0x45c
 8023d90:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 8023d94:	681b      	ldr	r3, [r3, #0]
 8023d96:	440b      	add	r3, r1
 8023d98:	6013      	str	r3, [r2, #0]
 8023d9a:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 8023d9e:	f207 4374 	addw	r3, r7, #1140	; 0x474
 8023da2:	681b      	ldr	r3, [r3, #0]
 8023da4:	6013      	str	r3, [r2, #0]
 8023da6:	f507 7277 	add.w	r2, r7, #988	; 0x3dc
 8023daa:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 8023dae:	681b      	ldr	r3, [r3, #0]
 8023db0:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8023db2:	f507 7276 	add.w	r2, r7, #984	; 0x3d8
 8023db6:	2300      	movs	r3, #0
 8023db8:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8023dba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8023dbe:	f04f 0300 	mov.w	r3, #0
 8023dc2:	e9c7 23f4 	strd	r2, r3, [r7, #976]	; 0x3d0
    if ((m1 < 0) ^ (m2 < 0))
 8023dc6:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8023dca:	681b      	ldr	r3, [r3, #0]
 8023dcc:	0fdb      	lsrs	r3, r3, #31
 8023dce:	b2da      	uxtb	r2, r3
 8023dd0:	f507 7377 	add.w	r3, r7, #988	; 0x3dc
 8023dd4:	681b      	ldr	r3, [r3, #0]
 8023dd6:	0fdb      	lsrs	r3, r3, #31
 8023dd8:	b2db      	uxtb	r3, r3
 8023dda:	4053      	eors	r3, r2
 8023ddc:	b2db      	uxtb	r3, r3
 8023dde:	2b00      	cmp	r3, #0
 8023de0:	d010      	beq.n	8023e04 <arm_softmax_s8+0x1a6c>
        mult = 1 - mult;
 8023de2:	f04f 0001 	mov.w	r0, #1
 8023de6:	f04f 0100 	mov.w	r1, #0
 8023dea:	e9d7 23f4 	ldrd	r2, r3, [r7, #976]	; 0x3d0
 8023dee:	1a84      	subs	r4, r0, r2
 8023df0:	f8c7 40f8 	str.w	r4, [r7, #248]	; 0xf8
 8023df4:	eb61 0303 	sbc.w	r3, r1, r3
 8023df8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8023dfc:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 8023e00:	e9c7 34f4 	strd	r3, r4, [r7, #976]	; 0x3d0
    mult = mult + (q63_t)m1 * m2;
 8023e04:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8023e08:	681b      	ldr	r3, [r3, #0]
 8023e0a:	4618      	mov	r0, r3
 8023e0c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8023e10:	f507 7377 	add.w	r3, r7, #988	; 0x3dc
 8023e14:	681b      	ldr	r3, [r3, #0]
 8023e16:	461a      	mov	r2, r3
 8023e18:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8023e1c:	fb02 f501 	mul.w	r5, r2, r1
 8023e20:	fb00 f403 	mul.w	r4, r0, r3
 8023e24:	442c      	add	r4, r5
 8023e26:	fba0 0102 	umull	r0, r1, r0, r2
 8023e2a:	1863      	adds	r3, r4, r1
 8023e2c:	4619      	mov	r1, r3
 8023e2e:	e9d7 23f4 	ldrd	r2, r3, [r7, #976]	; 0x3d0
 8023e32:	1814      	adds	r4, r2, r0
 8023e34:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 8023e38:	414b      	adcs	r3, r1
 8023e3a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8023e3e:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8023e42:	e9c7 34f4 	strd	r3, r4, [r7, #976]	; 0x3d0
    result = (int32_t)(mult / (1ll << 31));
 8023e46:	e9d7 23f4 	ldrd	r2, r3, [r7, #976]	; 0x3d0
 8023e4a:	4610      	mov	r0, r2
 8023e4c:	4619      	mov	r1, r3
 8023e4e:	2800      	cmp	r0, #0
 8023e50:	f171 0300 	sbcs.w	r3, r1, #0
 8023e54:	da06      	bge.n	8023e64 <arm_softmax_s8+0x1acc>
 8023e56:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8023e5a:	f04f 0300 	mov.w	r3, #0
 8023e5e:	1880      	adds	r0, r0, r2
 8023e60:	eb43 0101 	adc.w	r1, r3, r1
 8023e64:	f04f 0200 	mov.w	r2, #0
 8023e68:	f04f 0300 	mov.w	r3, #0
 8023e6c:	0fc2      	lsrs	r2, r0, #31
 8023e6e:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8023e72:	17cb      	asrs	r3, r1, #31
 8023e74:	4610      	mov	r0, r2
 8023e76:	4619      	mov	r1, r3
 8023e78:	f507 7276 	add.w	r2, r7, #984	; 0x3d8
 8023e7c:	4603      	mov	r3, r0
 8023e7e:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8023e80:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 8023e84:	f507 7377 	add.w	r3, r7, #988	; 0x3dc
 8023e88:	6812      	ldr	r2, [r2, #0]
 8023e8a:	681b      	ldr	r3, [r3, #0]
 8023e8c:	429a      	cmp	r2, r3
 8023e8e:	d10a      	bne.n	8023ea6 <arm_softmax_s8+0x1b0e>
 8023e90:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8023e94:	681b      	ldr	r3, [r3, #0]
 8023e96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8023e9a:	d104      	bne.n	8023ea6 <arm_softmax_s8+0x1b0e>
        result = Q31_MAX;
 8023e9c:	f507 7276 	add.w	r2, r7, #984	; 0x3d8
 8023ea0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8023ea4:	6013      	str	r3, [r2, #0]
    return result;
 8023ea6:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 8023eaa:	681a      	ldr	r2, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 8023eac:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8023eb0:	681b      	ldr	r3, [r3, #0]
 8023eb2:	1a99      	subs	r1, r3, r2
 8023eb4:	f507 7273 	add.w	r2, r7, #972	; 0x3cc
 8023eb8:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 8023ebc:	681b      	ldr	r3, [r3, #0]
 8023ebe:	6013      	str	r3, [r2, #0]
 8023ec0:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 8023ec4:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 8023ec6:	f507 7271 	add.w	r2, r7, #964	; 0x3c4
 8023eca:	2300      	movs	r3, #0
 8023ecc:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8023ece:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8023ed2:	f04f 0300 	mov.w	r3, #0
 8023ed6:	e9c7 23ee 	strd	r2, r3, [r7, #952]	; 0x3b8
    if ((m1 < 0) ^ (m2 < 0))
 8023eda:	f507 7373 	add.w	r3, r7, #972	; 0x3cc
 8023ede:	681b      	ldr	r3, [r3, #0]
 8023ee0:	0fdb      	lsrs	r3, r3, #31
 8023ee2:	b2da      	uxtb	r2, r3
 8023ee4:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 8023ee8:	681b      	ldr	r3, [r3, #0]
 8023eea:	0fdb      	lsrs	r3, r3, #31
 8023eec:	b2db      	uxtb	r3, r3
 8023eee:	4053      	eors	r3, r2
 8023ef0:	b2db      	uxtb	r3, r3
 8023ef2:	2b00      	cmp	r3, #0
 8023ef4:	d010      	beq.n	8023f18 <arm_softmax_s8+0x1b80>
        mult = 1 - mult;
 8023ef6:	f04f 0001 	mov.w	r0, #1
 8023efa:	f04f 0100 	mov.w	r1, #0
 8023efe:	e9d7 23ee 	ldrd	r2, r3, [r7, #952]	; 0x3b8
 8023f02:	1a84      	subs	r4, r0, r2
 8023f04:	f8c7 40e8 	str.w	r4, [r7, #232]	; 0xe8
 8023f08:	eb61 0303 	sbc.w	r3, r1, r3
 8023f0c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8023f10:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 8023f14:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
    mult = mult + (q63_t)m1 * m2;
 8023f18:	f507 7373 	add.w	r3, r7, #972	; 0x3cc
 8023f1c:	681b      	ldr	r3, [r3, #0]
 8023f1e:	4618      	mov	r0, r3
 8023f20:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8023f24:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 8023f28:	681b      	ldr	r3, [r3, #0]
 8023f2a:	461a      	mov	r2, r3
 8023f2c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8023f30:	fb02 f501 	mul.w	r5, r2, r1
 8023f34:	fb00 f403 	mul.w	r4, r0, r3
 8023f38:	442c      	add	r4, r5
 8023f3a:	fba0 0102 	umull	r0, r1, r0, r2
 8023f3e:	1863      	adds	r3, r4, r1
 8023f40:	4619      	mov	r1, r3
 8023f42:	e9d7 23ee 	ldrd	r2, r3, [r7, #952]	; 0x3b8
 8023f46:	1814      	adds	r4, r2, r0
 8023f48:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8023f4c:	414b      	adcs	r3, r1
 8023f4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8023f52:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8023f56:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
    result = (int32_t)(mult / (1ll << 31));
 8023f5a:	e9d7 23ee 	ldrd	r2, r3, [r7, #952]	; 0x3b8
 8023f5e:	4610      	mov	r0, r2
 8023f60:	4619      	mov	r1, r3
 8023f62:	2800      	cmp	r0, #0
 8023f64:	f171 0300 	sbcs.w	r3, r1, #0
 8023f68:	da06      	bge.n	8023f78 <arm_softmax_s8+0x1be0>
 8023f6a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8023f6e:	f04f 0300 	mov.w	r3, #0
 8023f72:	1880      	adds	r0, r0, r2
 8023f74:	eb43 0101 	adc.w	r1, r3, r1
 8023f78:	f04f 0200 	mov.w	r2, #0
 8023f7c:	f04f 0300 	mov.w	r3, #0
 8023f80:	0fc2      	lsrs	r2, r0, #31
 8023f82:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8023f86:	17cb      	asrs	r3, r1, #31
 8023f88:	4610      	mov	r0, r2
 8023f8a:	4619      	mov	r1, r3
 8023f8c:	f507 7271 	add.w	r2, r7, #964	; 0x3c4
 8023f90:	4603      	mov	r3, r0
 8023f92:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8023f94:	f507 7273 	add.w	r2, r7, #972	; 0x3cc
 8023f98:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 8023f9c:	6812      	ldr	r2, [r2, #0]
 8023f9e:	681b      	ldr	r3, [r3, #0]
 8023fa0:	429a      	cmp	r2, r3
 8023fa2:	d10a      	bne.n	8023fba <arm_softmax_s8+0x1c22>
 8023fa4:	f507 7373 	add.w	r3, r7, #972	; 0x3cc
 8023fa8:	681b      	ldr	r3, [r3, #0]
 8023faa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8023fae:	d104      	bne.n	8023fba <arm_softmax_s8+0x1c22>
        result = Q31_MAX;
 8023fb0:	f507 7271 	add.w	r2, r7, #964	; 0x3c4
 8023fb4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8023fb8:	6013      	str	r3, [r2, #0]
    return result;
 8023fba:	f507 7371 	add.w	r3, r7, #964	; 0x3c4
 8023fbe:	681a      	ldr	r2, [r3, #0]
 8023fc0:	f507 736d 	add.w	r3, r7, #948	; 0x3b4
 8023fc4:	601a      	str	r2, [r3, #0]
    const int32_t thresh = ((1 << (31 - exp)) - 1);
 8023fc6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8023fca:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 8023fce:	3b01      	subs	r3, #1
 8023fd0:	6013      	str	r3, [r2, #0]
    int32_t result = val << exp;
 8023fd2:	f507 726b 	add.w	r2, r7, #940	; 0x3ac
 8023fd6:	f507 736d 	add.w	r3, r7, #948	; 0x3b4
 8023fda:	681b      	ldr	r3, [r3, #0]
 8023fdc:	009b      	lsls	r3, r3, #2
 8023fde:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 8023fe0:	f507 726d 	add.w	r2, r7, #948	; 0x3b4
 8023fe4:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8023fe8:	6812      	ldr	r2, [r2, #0]
 8023fea:	681b      	ldr	r3, [r3, #0]
 8023fec:	429a      	cmp	r2, r3
 8023fee:	dd02      	ble.n	8023ff6 <arm_softmax_s8+0x1c5e>
 8023ff0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8023ff4:	e000      	b.n	8023ff8 <arm_softmax_s8+0x1c60>
 8023ff6:	2100      	movs	r1, #0
 8023ff8:	f507 726d 	add.w	r2, r7, #948	; 0x3b4
 8023ffc:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8024000:	6812      	ldr	r2, [r2, #0]
 8024002:	681b      	ldr	r3, [r3, #0]
 8024004:	429a      	cmp	r2, r3
 8024006:	dd01      	ble.n	802400c <arm_softmax_s8+0x1c74>
 8024008:	2200      	movs	r2, #0
 802400a:	e001      	b.n	8024010 <arm_softmax_s8+0x1c78>
 802400c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8024010:	f507 736b 	add.w	r3, r7, #940	; 0x3ac
 8024014:	681b      	ldr	r3, [r3, #0]
 8024016:	4013      	ands	r3, r2
 8024018:	f507 726b 	add.w	r2, r7, #940	; 0x3ac
 802401c:	404b      	eors	r3, r1
 802401e:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 8024020:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8024024:	681b      	ldr	r3, [r3, #0]
 8024026:	425a      	negs	r2, r3
 8024028:	f507 736d 	add.w	r3, r7, #948	; 0x3b4
 802402c:	681b      	ldr	r3, [r3, #0]
 802402e:	4293      	cmp	r3, r2
 8024030:	da02      	bge.n	8024038 <arm_softmax_s8+0x1ca0>
 8024032:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8024036:	e000      	b.n	802403a <arm_softmax_s8+0x1ca2>
 8024038:	2100      	movs	r1, #0
 802403a:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 802403e:	681b      	ldr	r3, [r3, #0]
 8024040:	425a      	negs	r2, r3
 8024042:	f507 736d 	add.w	r3, r7, #948	; 0x3b4
 8024046:	681b      	ldr	r3, [r3, #0]
 8024048:	4293      	cmp	r3, r2
 802404a:	da01      	bge.n	8024050 <arm_softmax_s8+0x1cb8>
 802404c:	2200      	movs	r2, #0
 802404e:	e001      	b.n	8024054 <arm_softmax_s8+0x1cbc>
 8024050:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8024054:	f507 736b 	add.w	r3, r7, #940	; 0x3ac
 8024058:	681b      	ldr	r3, [r3, #0]
 802405a:	4013      	ands	r3, r2
 802405c:	f507 726b 	add.w	r2, r7, #940	; 0x3ac
 8024060:	404b      	eors	r3, r1
 8024062:	6013      	str	r3, [r2, #0]
    return result;
 8024064:	f507 736b 	add.w	r3, r7, #940	; 0x3ac
 8024068:	6819      	ldr	r1, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 802406a:	f207 425c 	addw	r2, r7, #1116	; 0x45c
 802406e:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 8024072:	681b      	ldr	r3, [r3, #0]
 8024074:	440b      	add	r3, r1
 8024076:	6013      	str	r3, [r2, #0]
 8024078:	f507 726a 	add.w	r2, r7, #936	; 0x3a8
 802407c:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 8024080:	681b      	ldr	r3, [r3, #0]
 8024082:	6013      	str	r3, [r2, #0]
    const int32_t thresh = ((1 << (31 - exp)) - 1);
 8024084:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8024088:	f507 7269 	add.w	r2, r7, #932	; 0x3a4
 802408c:	3b01      	subs	r3, #1
 802408e:	6013      	str	r3, [r2, #0]
    int32_t result = val << exp;
 8024090:	f507 7268 	add.w	r2, r7, #928	; 0x3a0
 8024094:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8024098:	681b      	ldr	r3, [r3, #0]
 802409a:	005b      	lsls	r3, r3, #1
 802409c:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 802409e:	f507 726a 	add.w	r2, r7, #936	; 0x3a8
 80240a2:	f507 7369 	add.w	r3, r7, #932	; 0x3a4
 80240a6:	6812      	ldr	r2, [r2, #0]
 80240a8:	681b      	ldr	r3, [r3, #0]
 80240aa:	429a      	cmp	r2, r3
 80240ac:	dd02      	ble.n	80240b4 <arm_softmax_s8+0x1d1c>
 80240ae:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80240b2:	e000      	b.n	80240b6 <arm_softmax_s8+0x1d1e>
 80240b4:	2100      	movs	r1, #0
 80240b6:	f507 726a 	add.w	r2, r7, #936	; 0x3a8
 80240ba:	f507 7369 	add.w	r3, r7, #932	; 0x3a4
 80240be:	6812      	ldr	r2, [r2, #0]
 80240c0:	681b      	ldr	r3, [r3, #0]
 80240c2:	429a      	cmp	r2, r3
 80240c4:	dd01      	ble.n	80240ca <arm_softmax_s8+0x1d32>
 80240c6:	2200      	movs	r2, #0
 80240c8:	e001      	b.n	80240ce <arm_softmax_s8+0x1d36>
 80240ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80240ce:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 80240d2:	681b      	ldr	r3, [r3, #0]
 80240d4:	4013      	ands	r3, r2
 80240d6:	f507 7268 	add.w	r2, r7, #928	; 0x3a0
 80240da:	404b      	eors	r3, r1
 80240dc:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 80240de:	f507 7369 	add.w	r3, r7, #932	; 0x3a4
 80240e2:	681b      	ldr	r3, [r3, #0]
 80240e4:	425a      	negs	r2, r3
 80240e6:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 80240ea:	681b      	ldr	r3, [r3, #0]
 80240ec:	4293      	cmp	r3, r2
 80240ee:	da02      	bge.n	80240f6 <arm_softmax_s8+0x1d5e>
 80240f0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80240f4:	e000      	b.n	80240f8 <arm_softmax_s8+0x1d60>
 80240f6:	2100      	movs	r1, #0
 80240f8:	f507 7369 	add.w	r3, r7, #932	; 0x3a4
 80240fc:	681b      	ldr	r3, [r3, #0]
 80240fe:	425a      	negs	r2, r3
 8024100:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8024104:	681b      	ldr	r3, [r3, #0]
 8024106:	4293      	cmp	r3, r2
 8024108:	da01      	bge.n	802410e <arm_softmax_s8+0x1d76>
 802410a:	2200      	movs	r2, #0
 802410c:	e001      	b.n	8024112 <arm_softmax_s8+0x1d7a>
 802410e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8024112:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8024116:	681b      	ldr	r3, [r3, #0]
 8024118:	4013      	ands	r3, r2
 802411a:	f507 7268 	add.w	r2, r7, #928	; 0x3a0
 802411e:	404b      	eors	r3, r1
 8024120:	6013      	str	r3, [r2, #0]
    return result;
 8024122:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8024126:	681b      	ldr	r3, [r3, #0]
    return MUL_POW2(x, 1);
 8024128:	bf00      	nop
 802412a:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4

        for (col = 0; col < row_size; ++col)
 802412e:	2300      	movs	r3, #0
 8024130:	f8c7 35f4 	str.w	r3, [r7, #1524]	; 0x5f4
 8024134:	f001 b97b 	b.w	802542e <arm_softmax_s8+0x3096>
 8024138:	c3c3c3c4 	.word	0xc3c3c3c4
 802413c:	ffffffff 	.word	0xffffffff
        {
            diff = input[col] - max;
 8024140:	f8d7 25f4 	ldr.w	r2, [r7, #1524]	; 0x5f4
 8024144:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8024148:	681b      	ldr	r3, [r3, #0]
 802414a:	4413      	add	r3, r2
 802414c:	f993 3000 	ldrsb.w	r3, [r3]
 8024150:	461a      	mov	r2, r3
 8024152:	f997 35ef 	ldrsb.w	r3, [r7, #1519]	; 0x5ef
 8024156:	1ad3      	subs	r3, r2, r3
 8024158:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
            if (diff >= diff_min)
 802415c:	f8d7 25e0 	ldr.w	r2, [r7, #1504]	; 0x5e0
 8024160:	f8d7 361c 	ldr.w	r3, [r7, #1564]	; 0x61c
 8024164:	429a      	cmp	r2, r3
 8024166:	f2c1 8156 	blt.w	8025416 <arm_softmax_s8+0x307e>
            {
                const int32_t res =
                    DIV_POW2(MUL_SAT(shifted_scale, EXP_ON_NEG(MUL_SAT(diff * mask, mult))), bits_over_unit) - 128;
 802416a:	f8d7 25e0 	ldr.w	r2, [r7, #1504]	; 0x5e0
 802416e:	f8d7 35e4 	ldr.w	r3, [r7, #1508]	; 0x5e4
 8024172:	fb03 f202 	mul.w	r2, r3, r2
 8024176:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 802417a:	601a      	str	r2, [r3, #0]
 802417c:	f507 7212 	add.w	r2, r7, #584	; 0x248
 8024180:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8024184:	681b      	ldr	r3, [r3, #0]
 8024186:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8024188:	f507 7211 	add.w	r2, r7, #580	; 0x244
 802418c:	2300      	movs	r3, #0
 802418e:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8024190:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8024194:	f04f 0300 	mov.w	r3, #0
 8024198:	e9c7 238e 	strd	r2, r3, [r7, #568]	; 0x238
    if ((m1 < 0) ^ (m2 < 0))
 802419c:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 80241a0:	681b      	ldr	r3, [r3, #0]
 80241a2:	0fdb      	lsrs	r3, r3, #31
 80241a4:	b2da      	uxtb	r2, r3
 80241a6:	f507 7312 	add.w	r3, r7, #584	; 0x248
 80241aa:	681b      	ldr	r3, [r3, #0]
 80241ac:	0fdb      	lsrs	r3, r3, #31
 80241ae:	b2db      	uxtb	r3, r3
 80241b0:	4053      	eors	r3, r2
 80241b2:	b2db      	uxtb	r3, r3
 80241b4:	2b00      	cmp	r3, #0
 80241b6:	d010      	beq.n	80241da <arm_softmax_s8+0x1e42>
        mult = 1 - mult;
 80241b8:	f04f 0001 	mov.w	r0, #1
 80241bc:	f04f 0100 	mov.w	r1, #0
 80241c0:	e9d7 238e 	ldrd	r2, r3, [r7, #568]	; 0x238
 80241c4:	1a84      	subs	r4, r0, r2
 80241c6:	f8c7 40d8 	str.w	r4, [r7, #216]	; 0xd8
 80241ca:	eb61 0303 	sbc.w	r3, r1, r3
 80241ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80241d2:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 80241d6:	e9c7 348e 	strd	r3, r4, [r7, #568]	; 0x238
    mult = mult + (q63_t)m1 * m2;
 80241da:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 80241de:	681b      	ldr	r3, [r3, #0]
 80241e0:	4618      	mov	r0, r3
 80241e2:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80241e6:	f507 7312 	add.w	r3, r7, #584	; 0x248
 80241ea:	681b      	ldr	r3, [r3, #0]
 80241ec:	461a      	mov	r2, r3
 80241ee:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80241f2:	fb02 f501 	mul.w	r5, r2, r1
 80241f6:	fb00 f403 	mul.w	r4, r0, r3
 80241fa:	442c      	add	r4, r5
 80241fc:	fba0 0102 	umull	r0, r1, r0, r2
 8024200:	1863      	adds	r3, r4, r1
 8024202:	4619      	mov	r1, r3
 8024204:	e9d7 238e 	ldrd	r2, r3, [r7, #568]	; 0x238
 8024208:	1814      	adds	r4, r2, r0
 802420a:	f8c7 40d0 	str.w	r4, [r7, #208]	; 0xd0
 802420e:	414b      	adcs	r3, r1
 8024210:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8024214:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 8024218:	e9c7 348e 	strd	r3, r4, [r7, #568]	; 0x238
    result = (int32_t)(mult / (1ll << 31));
 802421c:	e9d7 238e 	ldrd	r2, r3, [r7, #568]	; 0x238
 8024220:	4610      	mov	r0, r2
 8024222:	4619      	mov	r1, r3
 8024224:	2800      	cmp	r0, #0
 8024226:	f171 0300 	sbcs.w	r3, r1, #0
 802422a:	da06      	bge.n	802423a <arm_softmax_s8+0x1ea2>
 802422c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8024230:	f04f 0300 	mov.w	r3, #0
 8024234:	1880      	adds	r0, r0, r2
 8024236:	eb43 0101 	adc.w	r1, r3, r1
 802423a:	f04f 0200 	mov.w	r2, #0
 802423e:	f04f 0300 	mov.w	r3, #0
 8024242:	0fc2      	lsrs	r2, r0, #31
 8024244:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8024248:	17cb      	asrs	r3, r1, #31
 802424a:	4610      	mov	r0, r2
 802424c:	4619      	mov	r1, r3
 802424e:	f507 7211 	add.w	r2, r7, #580	; 0x244
 8024252:	4603      	mov	r3, r0
 8024254:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8024256:	f507 7213 	add.w	r2, r7, #588	; 0x24c
 802425a:	f507 7312 	add.w	r3, r7, #584	; 0x248
 802425e:	6812      	ldr	r2, [r2, #0]
 8024260:	681b      	ldr	r3, [r3, #0]
 8024262:	429a      	cmp	r2, r3
 8024264:	d10a      	bne.n	802427c <arm_softmax_s8+0x1ee4>
 8024266:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 802426a:	681b      	ldr	r3, [r3, #0]
 802426c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8024270:	d104      	bne.n	802427c <arm_softmax_s8+0x1ee4>
        result = Q31_MAX;
 8024272:	f507 7211 	add.w	r2, r7, #580	; 0x244
 8024276:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 802427a:	6013      	str	r3, [r2, #0]
    return result;
 802427c:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8024280:	681a      	ldr	r2, [r3, #0]
 8024282:	f507 735b 	add.w	r3, r7, #876	; 0x36c
 8024286:	601a      	str	r2, [r3, #0]
    int32_t mask = 0;
 8024288:	f507 725a 	add.w	r2, r7, #872	; 0x368
 802428c:	2300      	movs	r3, #0
 802428e:	6013      	str	r3, [r2, #0]
    int32_t shift = 24;
 8024290:	f507 7259 	add.w	r2, r7, #868	; 0x364
 8024294:	2318      	movs	r3, #24
 8024296:	6013      	str	r3, [r2, #0]
    const int32_t val_mod_minus_quarter = (val & ((1 << shift) - 1)) - (1 << shift);
 8024298:	f507 7359 	add.w	r3, r7, #868	; 0x364
 802429c:	2201      	movs	r2, #1
 802429e:	681b      	ldr	r3, [r3, #0]
 80242a0:	fa02 f303 	lsl.w	r3, r2, r3
 80242a4:	1e5a      	subs	r2, r3, #1
 80242a6:	f507 735b 	add.w	r3, r7, #876	; 0x36c
 80242aa:	681b      	ldr	r3, [r3, #0]
 80242ac:	ea02 0103 	and.w	r1, r2, r3
 80242b0:	f507 7359 	add.w	r3, r7, #868	; 0x364
 80242b4:	2201      	movs	r2, #1
 80242b6:	681b      	ldr	r3, [r3, #0]
 80242b8:	fa02 f303 	lsl.w	r3, r2, r3
 80242bc:	f507 7258 	add.w	r2, r7, #864	; 0x360
 80242c0:	1acb      	subs	r3, r1, r3
 80242c2:	6013      	str	r3, [r2, #0]
    const int32_t remainder = val_mod_minus_quarter - val;
 80242c4:	f507 7157 	add.w	r1, r7, #860	; 0x35c
 80242c8:	f507 7258 	add.w	r2, r7, #864	; 0x360
 80242cc:	f507 735b 	add.w	r3, r7, #876	; 0x36c
 80242d0:	6812      	ldr	r2, [r2, #0]
 80242d2:	681b      	ldr	r3, [r3, #0]
 80242d4:	1ad3      	subs	r3, r2, r3
 80242d6:	600b      	str	r3, [r1, #0]
    const int32_t x = (val_mod_minus_quarter << 5) + (1 << 28);
 80242d8:	f507 7358 	add.w	r3, r7, #864	; 0x360
 80242dc:	681b      	ldr	r3, [r3, #0]
 80242de:	015b      	lsls	r3, r3, #5
 80242e0:	f507 7256 	add.w	r2, r7, #856	; 0x358
 80242e4:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 80242e8:	6013      	str	r3, [r2, #0]
 80242ea:	f507 7255 	add.w	r2, r7, #852	; 0x354
 80242ee:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80242f2:	681b      	ldr	r3, [r3, #0]
 80242f4:	6013      	str	r3, [r2, #0]
 80242f6:	f507 7254 	add.w	r2, r7, #848	; 0x350
 80242fa:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80242fe:	681b      	ldr	r3, [r3, #0]
 8024300:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8024302:	f507 7253 	add.w	r2, r7, #844	; 0x34c
 8024306:	2300      	movs	r3, #0
 8024308:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 802430a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 802430e:	f04f 0300 	mov.w	r3, #0
 8024312:	e9c7 23d0 	strd	r2, r3, [r7, #832]	; 0x340
    if ((m1 < 0) ^ (m2 < 0))
 8024316:	f507 7355 	add.w	r3, r7, #852	; 0x354
 802431a:	681b      	ldr	r3, [r3, #0]
 802431c:	0fdb      	lsrs	r3, r3, #31
 802431e:	b2da      	uxtb	r2, r3
 8024320:	f507 7354 	add.w	r3, r7, #848	; 0x350
 8024324:	681b      	ldr	r3, [r3, #0]
 8024326:	0fdb      	lsrs	r3, r3, #31
 8024328:	b2db      	uxtb	r3, r3
 802432a:	4053      	eors	r3, r2
 802432c:	b2db      	uxtb	r3, r3
 802432e:	2b00      	cmp	r3, #0
 8024330:	d010      	beq.n	8024354 <arm_softmax_s8+0x1fbc>
        mult = 1 - mult;
 8024332:	f04f 0001 	mov.w	r0, #1
 8024336:	f04f 0100 	mov.w	r1, #0
 802433a:	e9d7 23d0 	ldrd	r2, r3, [r7, #832]	; 0x340
 802433e:	1a84      	subs	r4, r0, r2
 8024340:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8024344:	eb61 0303 	sbc.w	r3, r1, r3
 8024348:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 802434c:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8024350:	e9c7 34d0 	strd	r3, r4, [r7, #832]	; 0x340
    mult = mult + (q63_t)m1 * m2;
 8024354:	f507 7355 	add.w	r3, r7, #852	; 0x354
 8024358:	681b      	ldr	r3, [r3, #0]
 802435a:	4618      	mov	r0, r3
 802435c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8024360:	f507 7354 	add.w	r3, r7, #848	; 0x350
 8024364:	681b      	ldr	r3, [r3, #0]
 8024366:	461a      	mov	r2, r3
 8024368:	ea4f 73e2 	mov.w	r3, r2, asr #31
 802436c:	fb02 f501 	mul.w	r5, r2, r1
 8024370:	fb00 f403 	mul.w	r4, r0, r3
 8024374:	442c      	add	r4, r5
 8024376:	fba0 0102 	umull	r0, r1, r0, r2
 802437a:	1863      	adds	r3, r4, r1
 802437c:	4619      	mov	r1, r3
 802437e:	e9d7 23d0 	ldrd	r2, r3, [r7, #832]	; 0x340
 8024382:	1814      	adds	r4, r2, r0
 8024384:	f8c7 40c0 	str.w	r4, [r7, #192]	; 0xc0
 8024388:	414b      	adcs	r3, r1
 802438a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 802438e:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8024392:	e9c7 34d0 	strd	r3, r4, [r7, #832]	; 0x340
    result = (int32_t)(mult / (1ll << 31));
 8024396:	e9d7 23d0 	ldrd	r2, r3, [r7, #832]	; 0x340
 802439a:	4610      	mov	r0, r2
 802439c:	4619      	mov	r1, r3
 802439e:	2800      	cmp	r0, #0
 80243a0:	f171 0300 	sbcs.w	r3, r1, #0
 80243a4:	da06      	bge.n	80243b4 <arm_softmax_s8+0x201c>
 80243a6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80243aa:	f04f 0300 	mov.w	r3, #0
 80243ae:	1880      	adds	r0, r0, r2
 80243b0:	eb43 0101 	adc.w	r1, r3, r1
 80243b4:	f04f 0200 	mov.w	r2, #0
 80243b8:	f04f 0300 	mov.w	r3, #0
 80243bc:	0fc2      	lsrs	r2, r0, #31
 80243be:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80243c2:	17cb      	asrs	r3, r1, #31
 80243c4:	4610      	mov	r0, r2
 80243c6:	4619      	mov	r1, r3
 80243c8:	f507 7253 	add.w	r2, r7, #844	; 0x34c
 80243cc:	4603      	mov	r3, r0
 80243ce:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80243d0:	f507 7255 	add.w	r2, r7, #852	; 0x354
 80243d4:	f507 7354 	add.w	r3, r7, #848	; 0x350
 80243d8:	6812      	ldr	r2, [r2, #0]
 80243da:	681b      	ldr	r3, [r3, #0]
 80243dc:	429a      	cmp	r2, r3
 80243de:	d10a      	bne.n	80243f6 <arm_softmax_s8+0x205e>
 80243e0:	f507 7355 	add.w	r3, r7, #852	; 0x354
 80243e4:	681b      	ldr	r3, [r3, #0]
 80243e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80243ea:	d104      	bne.n	80243f6 <arm_softmax_s8+0x205e>
        result = Q31_MAX;
 80243ec:	f507 7253 	add.w	r2, r7, #844	; 0x34c
 80243f0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80243f4:	6013      	str	r3, [r2, #0]
    return result;
 80243f6:	f507 7353 	add.w	r3, r7, #844	; 0x34c
 80243fa:	681a      	ldr	r2, [r3, #0]
    const int32_t x2 = MUL_SAT(x, x);
 80243fc:	f507 734f 	add.w	r3, r7, #828	; 0x33c
 8024400:	601a      	str	r2, [r3, #0]
 8024402:	f507 724e 	add.w	r2, r7, #824	; 0x338
 8024406:	f507 734f 	add.w	r3, r7, #828	; 0x33c
 802440a:	681b      	ldr	r3, [r3, #0]
 802440c:	6013      	str	r3, [r2, #0]
 802440e:	f507 724d 	add.w	r2, r7, #820	; 0x334
 8024412:	f507 734f 	add.w	r3, r7, #828	; 0x33c
 8024416:	681b      	ldr	r3, [r3, #0]
 8024418:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 802441a:	f507 724c 	add.w	r2, r7, #816	; 0x330
 802441e:	2300      	movs	r3, #0
 8024420:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8024422:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8024426:	f04f 0300 	mov.w	r3, #0
 802442a:	e9c7 23ca 	strd	r2, r3, [r7, #808]	; 0x328
    if ((m1 < 0) ^ (m2 < 0))
 802442e:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8024432:	681b      	ldr	r3, [r3, #0]
 8024434:	0fdb      	lsrs	r3, r3, #31
 8024436:	b2da      	uxtb	r2, r3
 8024438:	f507 734d 	add.w	r3, r7, #820	; 0x334
 802443c:	681b      	ldr	r3, [r3, #0]
 802443e:	0fdb      	lsrs	r3, r3, #31
 8024440:	b2db      	uxtb	r3, r3
 8024442:	4053      	eors	r3, r2
 8024444:	b2db      	uxtb	r3, r3
 8024446:	2b00      	cmp	r3, #0
 8024448:	d010      	beq.n	802446c <arm_softmax_s8+0x20d4>
        mult = 1 - mult;
 802444a:	f04f 0001 	mov.w	r0, #1
 802444e:	f04f 0100 	mov.w	r1, #0
 8024452:	e9d7 23ca 	ldrd	r2, r3, [r7, #808]	; 0x328
 8024456:	1a84      	subs	r4, r0, r2
 8024458:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 802445c:	eb61 0303 	sbc.w	r3, r1, r3
 8024460:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8024464:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8024468:	e9c7 34ca 	strd	r3, r4, [r7, #808]	; 0x328
    mult = mult + (q63_t)m1 * m2;
 802446c:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8024470:	681b      	ldr	r3, [r3, #0]
 8024472:	4618      	mov	r0, r3
 8024474:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8024478:	f507 734d 	add.w	r3, r7, #820	; 0x334
 802447c:	681b      	ldr	r3, [r3, #0]
 802447e:	461a      	mov	r2, r3
 8024480:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8024484:	fb02 f501 	mul.w	r5, r2, r1
 8024488:	fb00 f403 	mul.w	r4, r0, r3
 802448c:	442c      	add	r4, r5
 802448e:	fba0 0102 	umull	r0, r1, r0, r2
 8024492:	1863      	adds	r3, r4, r1
 8024494:	4619      	mov	r1, r3
 8024496:	e9d7 23ca 	ldrd	r2, r3, [r7, #808]	; 0x328
 802449a:	1814      	adds	r4, r2, r0
 802449c:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 80244a0:	414b      	adcs	r3, r1
 80244a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80244a6:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 80244aa:	e9c7 34ca 	strd	r3, r4, [r7, #808]	; 0x328
    result = (int32_t)(mult / (1ll << 31));
 80244ae:	e9d7 23ca 	ldrd	r2, r3, [r7, #808]	; 0x328
 80244b2:	4610      	mov	r0, r2
 80244b4:	4619      	mov	r1, r3
 80244b6:	2800      	cmp	r0, #0
 80244b8:	f171 0300 	sbcs.w	r3, r1, #0
 80244bc:	da06      	bge.n	80244cc <arm_softmax_s8+0x2134>
 80244be:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80244c2:	f04f 0300 	mov.w	r3, #0
 80244c6:	1880      	adds	r0, r0, r2
 80244c8:	eb43 0101 	adc.w	r1, r3, r1
 80244cc:	f04f 0200 	mov.w	r2, #0
 80244d0:	f04f 0300 	mov.w	r3, #0
 80244d4:	0fc2      	lsrs	r2, r0, #31
 80244d6:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80244da:	17cb      	asrs	r3, r1, #31
 80244dc:	4610      	mov	r0, r2
 80244de:	4619      	mov	r1, r3
 80244e0:	f507 724c 	add.w	r2, r7, #816	; 0x330
 80244e4:	4603      	mov	r3, r0
 80244e6:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80244e8:	f507 724e 	add.w	r2, r7, #824	; 0x338
 80244ec:	f507 734d 	add.w	r3, r7, #820	; 0x334
 80244f0:	6812      	ldr	r2, [r2, #0]
 80244f2:	681b      	ldr	r3, [r3, #0]
 80244f4:	429a      	cmp	r2, r3
 80244f6:	d10a      	bne.n	802450e <arm_softmax_s8+0x2176>
 80244f8:	f507 734e 	add.w	r3, r7, #824	; 0x338
 80244fc:	681b      	ldr	r3, [r3, #0]
 80244fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8024502:	d104      	bne.n	802450e <arm_softmax_s8+0x2176>
        result = Q31_MAX;
 8024504:	f507 724c 	add.w	r2, r7, #816	; 0x330
 8024508:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 802450c:	6013      	str	r3, [r2, #0]
    return result;
 802450e:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8024512:	681a      	ldr	r2, [r3, #0]
 8024514:	f507 7349 	add.w	r3, r7, #804	; 0x324
 8024518:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 802451a:	f507 7248 	add.w	r2, r7, #800	; 0x320
 802451e:	2300      	movs	r3, #0
 8024520:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8024522:	2304      	movs	r3, #4
 8024524:	f507 7247 	add.w	r2, r7, #796	; 0x31c
 8024528:	3b01      	subs	r3, #1
 802452a:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 802452c:	f507 7146 	add.w	r1, r7, #792	; 0x318
 8024530:	f507 7249 	add.w	r2, r7, #804	; 0x324
 8024534:	f507 7347 	add.w	r3, r7, #796	; 0x31c
 8024538:	6812      	ldr	r2, [r2, #0]
 802453a:	681b      	ldr	r3, [r3, #0]
 802453c:	4013      	ands	r3, r2
 802453e:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 8024540:	f507 7248 	add.w	r2, r7, #800	; 0x320
 8024544:	f507 7349 	add.w	r3, r7, #804	; 0x324
 8024548:	681b      	ldr	r3, [r3, #0]
 802454a:	109b      	asrs	r3, r3, #2
 802454c:	6013      	str	r3, [r2, #0]
    q31_t threshold = remainder_mask >> 1;
 802454e:	f507 7245 	add.w	r2, r7, #788	; 0x314
 8024552:	f507 7347 	add.w	r3, r7, #796	; 0x31c
 8024556:	681b      	ldr	r3, [r3, #0]
 8024558:	105b      	asrs	r3, r3, #1
 802455a:	6013      	str	r3, [r2, #0]
    if (result < 0)
 802455c:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8024560:	681b      	ldr	r3, [r3, #0]
 8024562:	2b00      	cmp	r3, #0
 8024564:	da06      	bge.n	8024574 <arm_softmax_s8+0x21dc>
        threshold++;
 8024566:	f507 7245 	add.w	r2, r7, #788	; 0x314
 802456a:	f507 7345 	add.w	r3, r7, #788	; 0x314
 802456e:	681b      	ldr	r3, [r3, #0]
 8024570:	3301      	adds	r3, #1
 8024572:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 8024574:	f507 7246 	add.w	r2, r7, #792	; 0x318
 8024578:	f507 7345 	add.w	r3, r7, #788	; 0x314
 802457c:	6812      	ldr	r2, [r2, #0]
 802457e:	681b      	ldr	r3, [r3, #0]
 8024580:	429a      	cmp	r2, r3
 8024582:	dd06      	ble.n	8024592 <arm_softmax_s8+0x21fa>
        result++;
 8024584:	f507 7248 	add.w	r2, r7, #800	; 0x320
 8024588:	f507 7348 	add.w	r3, r7, #800	; 0x320
 802458c:	681b      	ldr	r3, [r3, #0]
 802458e:	3301      	adds	r3, #1
 8024590:	6013      	str	r3, [r2, #0]
    return result;
 8024592:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8024596:	681e      	ldr	r6, [r3, #0]
 8024598:	f507 7244 	add.w	r2, r7, #784	; 0x310
 802459c:	f507 734f 	add.w	r3, r7, #828	; 0x33c
 80245a0:	681b      	ldr	r3, [r3, #0]
 80245a2:	6013      	str	r3, [r2, #0]
 80245a4:	f507 7243 	add.w	r2, r7, #780	; 0x30c
 80245a8:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80245ac:	681b      	ldr	r3, [r3, #0]
 80245ae:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80245b0:	f507 7242 	add.w	r2, r7, #776	; 0x308
 80245b4:	2300      	movs	r3, #0
 80245b6:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80245b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80245bc:	f04f 0300 	mov.w	r3, #0
 80245c0:	e9c7 23c0 	strd	r2, r3, [r7, #768]	; 0x300
    if ((m1 < 0) ^ (m2 < 0))
 80245c4:	f507 7344 	add.w	r3, r7, #784	; 0x310
 80245c8:	681b      	ldr	r3, [r3, #0]
 80245ca:	0fdb      	lsrs	r3, r3, #31
 80245cc:	b2da      	uxtb	r2, r3
 80245ce:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 80245d2:	681b      	ldr	r3, [r3, #0]
 80245d4:	0fdb      	lsrs	r3, r3, #31
 80245d6:	b2db      	uxtb	r3, r3
 80245d8:	4053      	eors	r3, r2
 80245da:	b2db      	uxtb	r3, r3
 80245dc:	2b00      	cmp	r3, #0
 80245de:	d010      	beq.n	8024602 <arm_softmax_s8+0x226a>
        mult = 1 - mult;
 80245e0:	f04f 0001 	mov.w	r0, #1
 80245e4:	f04f 0100 	mov.w	r1, #0
 80245e8:	e9d7 23c0 	ldrd	r2, r3, [r7, #768]	; 0x300
 80245ec:	1a84      	subs	r4, r0, r2
 80245ee:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 80245f2:	eb61 0303 	sbc.w	r3, r1, r3
 80245f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80245fa:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 80245fe:	e9c7 34c0 	strd	r3, r4, [r7, #768]	; 0x300
    mult = mult + (q63_t)m1 * m2;
 8024602:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8024606:	681b      	ldr	r3, [r3, #0]
 8024608:	4618      	mov	r0, r3
 802460a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 802460e:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 8024612:	681b      	ldr	r3, [r3, #0]
 8024614:	461a      	mov	r2, r3
 8024616:	ea4f 73e2 	mov.w	r3, r2, asr #31
 802461a:	fb02 f501 	mul.w	r5, r2, r1
 802461e:	fb00 f403 	mul.w	r4, r0, r3
 8024622:	442c      	add	r4, r5
 8024624:	fba0 0102 	umull	r0, r1, r0, r2
 8024628:	1863      	adds	r3, r4, r1
 802462a:	4619      	mov	r1, r3
 802462c:	e9d7 23c0 	ldrd	r2, r3, [r7, #768]	; 0x300
 8024630:	1814      	adds	r4, r2, r0
 8024632:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8024636:	414b      	adcs	r3, r1
 8024638:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 802463c:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 8024640:	e9c7 34c0 	strd	r3, r4, [r7, #768]	; 0x300
    result = (int32_t)(mult / (1ll << 31));
 8024644:	e9d7 23c0 	ldrd	r2, r3, [r7, #768]	; 0x300
 8024648:	4610      	mov	r0, r2
 802464a:	4619      	mov	r1, r3
 802464c:	2800      	cmp	r0, #0
 802464e:	f171 0300 	sbcs.w	r3, r1, #0
 8024652:	da06      	bge.n	8024662 <arm_softmax_s8+0x22ca>
 8024654:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8024658:	f04f 0300 	mov.w	r3, #0
 802465c:	1880      	adds	r0, r0, r2
 802465e:	eb43 0101 	adc.w	r1, r3, r1
 8024662:	f04f 0200 	mov.w	r2, #0
 8024666:	f04f 0300 	mov.w	r3, #0
 802466a:	0fc2      	lsrs	r2, r0, #31
 802466c:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8024670:	17cb      	asrs	r3, r1, #31
 8024672:	4610      	mov	r0, r2
 8024674:	4619      	mov	r1, r3
 8024676:	f507 7242 	add.w	r2, r7, #776	; 0x308
 802467a:	4603      	mov	r3, r0
 802467c:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 802467e:	f507 7244 	add.w	r2, r7, #784	; 0x310
 8024682:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 8024686:	6812      	ldr	r2, [r2, #0]
 8024688:	681b      	ldr	r3, [r3, #0]
 802468a:	429a      	cmp	r2, r3
 802468c:	d10a      	bne.n	80246a4 <arm_softmax_s8+0x230c>
 802468e:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8024692:	681b      	ldr	r3, [r3, #0]
 8024694:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8024698:	d104      	bne.n	80246a4 <arm_softmax_s8+0x230c>
        result = Q31_MAX;
 802469a:	f507 7242 	add.w	r2, r7, #776	; 0x308
 802469e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80246a2:	6013      	str	r3, [r2, #0]
    return result;
 80246a4:	f507 7342 	add.w	r3, r7, #776	; 0x308
 80246a8:	681b      	ldr	r3, [r3, #0]
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 80246aa:	18f2      	adds	r2, r6, r3
 80246ac:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 80246b0:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 80246b2:	f507 723e 	add.w	r2, r7, #760	; 0x2f8
 80246b6:	2300      	movs	r3, #0
 80246b8:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80246ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80246be:	f04f 0300 	mov.w	r3, #0
 80246c2:	e9c7 23bc 	strd	r2, r3, [r7, #752]	; 0x2f0
    if ((m1 < 0) ^ (m2 < 0))
 80246c6:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 80246ca:	681b      	ldr	r3, [r3, #0]
 80246cc:	0fdb      	lsrs	r3, r3, #31
 80246ce:	b2da      	uxtb	r2, r3
 80246d0:	2300      	movs	r3, #0
 80246d2:	4053      	eors	r3, r2
 80246d4:	b2db      	uxtb	r3, r3
 80246d6:	2b00      	cmp	r3, #0
 80246d8:	d010      	beq.n	80246fc <arm_softmax_s8+0x2364>
        mult = 1 - mult;
 80246da:	f04f 0001 	mov.w	r0, #1
 80246de:	f04f 0100 	mov.w	r1, #0
 80246e2:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	; 0x2f0
 80246e6:	1a84      	subs	r4, r0, r2
 80246e8:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 80246ec:	eb61 0303 	sbc.w	r3, r1, r3
 80246f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80246f4:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 80246f8:	e9c7 34bc 	strd	r3, r4, [r7, #752]	; 0x2f0
    mult = mult + (q63_t)m1 * m2;
 80246fc:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 8024700:	681b      	ldr	r3, [r3, #0]
 8024702:	4618      	mov	r0, r3
 8024704:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8024708:	a3de      	add	r3, pc, #888	; (adr r3, 8024a84 <arm_softmax_s8+0x26ec>)
 802470a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802470e:	fb02 f501 	mul.w	r5, r2, r1
 8024712:	fb00 f403 	mul.w	r4, r0, r3
 8024716:	442c      	add	r4, r5
 8024718:	fba0 0102 	umull	r0, r1, r0, r2
 802471c:	1863      	adds	r3, r4, r1
 802471e:	4619      	mov	r1, r3
 8024720:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	; 0x2f0
 8024724:	1814      	adds	r4, r2, r0
 8024726:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 802472a:	414b      	adcs	r3, r1
 802472c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8024730:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 8024734:	e9c7 34bc 	strd	r3, r4, [r7, #752]	; 0x2f0
    result = (int32_t)(mult / (1ll << 31));
 8024738:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	; 0x2f0
 802473c:	4610      	mov	r0, r2
 802473e:	4619      	mov	r1, r3
 8024740:	2800      	cmp	r0, #0
 8024742:	f171 0300 	sbcs.w	r3, r1, #0
 8024746:	da06      	bge.n	8024756 <arm_softmax_s8+0x23be>
 8024748:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 802474c:	f04f 0300 	mov.w	r3, #0
 8024750:	1880      	adds	r0, r0, r2
 8024752:	eb43 0101 	adc.w	r1, r3, r1
 8024756:	f04f 0200 	mov.w	r2, #0
 802475a:	f04f 0300 	mov.w	r3, #0
 802475e:	0fc2      	lsrs	r2, r0, #31
 8024760:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8024764:	17cb      	asrs	r3, r1, #31
 8024766:	4610      	mov	r0, r2
 8024768:	4619      	mov	r1, r3
 802476a:	f507 723e 	add.w	r2, r7, #760	; 0x2f8
 802476e:	4603      	mov	r3, r0
 8024770:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8024772:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 8024776:	681a      	ldr	r2, [r3, #0]
 8024778:	4bbf      	ldr	r3, [pc, #764]	; (8024a78 <arm_softmax_s8+0x26e0>)
 802477a:	429a      	cmp	r2, r3
 802477c:	d10a      	bne.n	8024794 <arm_softmax_s8+0x23fc>
 802477e:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 8024782:	681b      	ldr	r3, [r3, #0]
 8024784:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8024788:	d104      	bne.n	8024794 <arm_softmax_s8+0x23fc>
        result = Q31_MAX;
 802478a:	f507 723e 	add.w	r2, r7, #760	; 0x2f8
 802478e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8024792:	6013      	str	r3, [r2, #0]
    return result;
 8024794:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8024798:	681a      	ldr	r2, [r3, #0]
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 802479a:	f507 734f 	add.w	r3, r7, #828	; 0x33c
 802479e:	681b      	ldr	r3, [r3, #0]
 80247a0:	441a      	add	r2, r3
 80247a2:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 80247a6:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 80247a8:	f507 723a 	add.w	r2, r7, #744	; 0x2e8
 80247ac:	2300      	movs	r3, #0
 80247ae:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 80247b0:	2302      	movs	r3, #2
 80247b2:	f507 7239 	add.w	r2, r7, #740	; 0x2e4
 80247b6:	3b01      	subs	r3, #1
 80247b8:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 80247ba:	f507 7138 	add.w	r1, r7, #736	; 0x2e0
 80247be:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
 80247c2:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 80247c6:	6812      	ldr	r2, [r2, #0]
 80247c8:	681b      	ldr	r3, [r3, #0]
 80247ca:	4013      	ands	r3, r2
 80247cc:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 80247ce:	f507 723a 	add.w	r2, r7, #744	; 0x2e8
 80247d2:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 80247d6:	681b      	ldr	r3, [r3, #0]
 80247d8:	105b      	asrs	r3, r3, #1
 80247da:	6013      	str	r3, [r2, #0]
    q31_t threshold = remainder_mask >> 1;
 80247dc:	f507 7237 	add.w	r2, r7, #732	; 0x2dc
 80247e0:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 80247e4:	681b      	ldr	r3, [r3, #0]
 80247e6:	105b      	asrs	r3, r3, #1
 80247e8:	6013      	str	r3, [r2, #0]
    if (result < 0)
 80247ea:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 80247ee:	681b      	ldr	r3, [r3, #0]
 80247f0:	2b00      	cmp	r3, #0
 80247f2:	da06      	bge.n	8024802 <arm_softmax_s8+0x246a>
        threshold++;
 80247f4:	f507 7237 	add.w	r2, r7, #732	; 0x2dc
 80247f8:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 80247fc:	681b      	ldr	r3, [r3, #0]
 80247fe:	3301      	adds	r3, #1
 8024800:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 8024802:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 8024806:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 802480a:	6812      	ldr	r2, [r2, #0]
 802480c:	681b      	ldr	r3, [r3, #0]
 802480e:	429a      	cmp	r2, r3
 8024810:	dd06      	ble.n	8024820 <arm_softmax_s8+0x2488>
        result++;
 8024812:	f507 723a 	add.w	r2, r7, #744	; 0x2e8
 8024816:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 802481a:	681b      	ldr	r3, [r3, #0]
 802481c:	3301      	adds	r3, #1
 802481e:	6013      	str	r3, [r2, #0]
    return result;
 8024820:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 8024824:	681a      	ldr	r2, [r3, #0]
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 8024826:	f507 7356 	add.w	r3, r7, #856	; 0x358
 802482a:	681b      	ldr	r3, [r3, #0]
 802482c:	441a      	add	r2, r3
 802482e:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8024832:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8024834:	f507 7235 	add.w	r2, r7, #724	; 0x2d4
 8024838:	2300      	movs	r3, #0
 802483a:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 802483c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8024840:	f04f 0300 	mov.w	r3, #0
 8024844:	e9c7 23b2 	strd	r2, r3, [r7, #712]	; 0x2c8
    if ((m1 < 0) ^ (m2 < 0))
 8024848:	2200      	movs	r2, #0
 802484a:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 802484e:	681b      	ldr	r3, [r3, #0]
 8024850:	0fdb      	lsrs	r3, r3, #31
 8024852:	b2db      	uxtb	r3, r3
 8024854:	4053      	eors	r3, r2
 8024856:	b2db      	uxtb	r3, r3
 8024858:	2b00      	cmp	r3, #0
 802485a:	d010      	beq.n	802487e <arm_softmax_s8+0x24e6>
        mult = 1 - mult;
 802485c:	f04f 0001 	mov.w	r0, #1
 8024860:	f04f 0100 	mov.w	r1, #0
 8024864:	e9d7 23b2 	ldrd	r2, r3, [r7, #712]	; 0x2c8
 8024868:	1a84      	subs	r4, r0, r2
 802486a:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 802486e:	eb61 0303 	sbc.w	r3, r1, r3
 8024872:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8024876:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 802487a:	e9c7 34b2 	strd	r3, r4, [r7, #712]	; 0x2c8
    mult = mult + (q63_t)m1 * m2;
 802487e:	a57a      	add	r5, pc, #488	; (adr r5, 8024a68 <arm_softmax_s8+0x26d0>)
 8024880:	e9d5 4500 	ldrd	r4, r5, [r5]
 8024884:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8024888:	681b      	ldr	r3, [r3, #0]
 802488a:	461a      	mov	r2, r3
 802488c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8024890:	fb02 f005 	mul.w	r0, r2, r5
 8024894:	fb04 f103 	mul.w	r1, r4, r3
 8024898:	1846      	adds	r6, r0, r1
 802489a:	fba4 0102 	umull	r0, r1, r4, r2
 802489e:	1873      	adds	r3, r6, r1
 80248a0:	4619      	mov	r1, r3
 80248a2:	e9d7 23b2 	ldrd	r2, r3, [r7, #712]	; 0x2c8
 80248a6:	1814      	adds	r4, r2, r0
 80248a8:	f8c7 4080 	str.w	r4, [r7, #128]	; 0x80
 80248ac:	414b      	adcs	r3, r1
 80248ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80248b2:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 80248b6:	e9c7 34b2 	strd	r3, r4, [r7, #712]	; 0x2c8
    result = (int32_t)(mult / (1ll << 31));
 80248ba:	e9d7 23b2 	ldrd	r2, r3, [r7, #712]	; 0x2c8
 80248be:	4610      	mov	r0, r2
 80248c0:	4619      	mov	r1, r3
 80248c2:	2800      	cmp	r0, #0
 80248c4:	f171 0300 	sbcs.w	r3, r1, #0
 80248c8:	da06      	bge.n	80248d8 <arm_softmax_s8+0x2540>
 80248ca:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80248ce:	f04f 0300 	mov.w	r3, #0
 80248d2:	1880      	adds	r0, r0, r2
 80248d4:	eb43 0101 	adc.w	r1, r3, r1
 80248d8:	f04f 0200 	mov.w	r2, #0
 80248dc:	f04f 0300 	mov.w	r3, #0
 80248e0:	0fc2      	lsrs	r2, r0, #31
 80248e2:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80248e6:	17cb      	asrs	r3, r1, #31
 80248e8:	4610      	mov	r0, r2
 80248ea:	4619      	mov	r1, r3
 80248ec:	f507 7235 	add.w	r2, r7, #724	; 0x2d4
 80248f0:	4603      	mov	r3, r0
 80248f2:	6013      	str	r3, [r2, #0]
    return result;
 80248f4:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 80248f8:	6819      	ldr	r1, [r3, #0]
    int32_t result = 1895147668 +
 80248fa:	f507 7231 	add.w	r2, r7, #708	; 0x2c4
 80248fe:	4b5f      	ldr	r3, [pc, #380]	; (8024a7c <arm_softmax_s8+0x26e4>)
 8024900:	440b      	add	r3, r1
 8024902:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(1672461947)
 8024904:	f507 7359 	add.w	r3, r7, #868	; 0x364
 8024908:	6819      	ldr	r1, [r3, #0]
 802490a:	f507 7259 	add.w	r2, r7, #868	; 0x364
 802490e:	1c4b      	adds	r3, r1, #1
 8024910:	6013      	str	r3, [r2, #0]
 8024912:	2301      	movs	r3, #1
 8024914:	fa03 f201 	lsl.w	r2, r3, r1
 8024918:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 802491c:	681b      	ldr	r3, [r3, #0]
 802491e:	4013      	ands	r3, r2
 8024920:	2b00      	cmp	r3, #0
 8024922:	d002      	beq.n	802492a <arm_softmax_s8+0x2592>
 8024924:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8024928:	e000      	b.n	802492c <arm_softmax_s8+0x2594>
 802492a:	2200      	movs	r2, #0
 802492c:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8024930:	601a      	str	r2, [r3, #0]
 8024932:	f507 7230 	add.w	r2, r7, #704	; 0x2c0
 8024936:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 802493a:	681b      	ldr	r3, [r3, #0]
 802493c:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 802493e:	f507 722f 	add.w	r2, r7, #700	; 0x2bc
 8024942:	2300      	movs	r3, #0
 8024944:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8024946:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 802494a:	f04f 0300 	mov.w	r3, #0
 802494e:	e9c7 23ac 	strd	r2, r3, [r7, #688]	; 0x2b0
    if ((m1 < 0) ^ (m2 < 0))
 8024952:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8024956:	681b      	ldr	r3, [r3, #0]
 8024958:	0fdb      	lsrs	r3, r3, #31
 802495a:	b2da      	uxtb	r2, r3
 802495c:	2300      	movs	r3, #0
 802495e:	4053      	eors	r3, r2
 8024960:	b2db      	uxtb	r3, r3
 8024962:	2b00      	cmp	r3, #0
 8024964:	d00e      	beq.n	8024984 <arm_softmax_s8+0x25ec>
        mult = 1 - mult;
 8024966:	f04f 0001 	mov.w	r0, #1
 802496a:	f04f 0100 	mov.w	r1, #0
 802496e:	e9d7 23ac 	ldrd	r2, r3, [r7, #688]	; 0x2b0
 8024972:	1a84      	subs	r4, r0, r2
 8024974:	67bc      	str	r4, [r7, #120]	; 0x78
 8024976:	eb61 0303 	sbc.w	r3, r1, r3
 802497a:	67fb      	str	r3, [r7, #124]	; 0x7c
 802497c:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8024980:	e9c7 34ac 	strd	r3, r4, [r7, #688]	; 0x2b0
    mult = mult + (q63_t)m1 * m2;
 8024984:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8024988:	681b      	ldr	r3, [r3, #0]
 802498a:	4618      	mov	r0, r3
 802498c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8024990:	a337      	add	r3, pc, #220	; (adr r3, 8024a70 <arm_softmax_s8+0x26d8>)
 8024992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024996:	fb02 f501 	mul.w	r5, r2, r1
 802499a:	fb00 f403 	mul.w	r4, r0, r3
 802499e:	442c      	add	r4, r5
 80249a0:	fba0 0102 	umull	r0, r1, r0, r2
 80249a4:	1863      	adds	r3, r4, r1
 80249a6:	4619      	mov	r1, r3
 80249a8:	e9d7 23ac 	ldrd	r2, r3, [r7, #688]	; 0x2b0
 80249ac:	1814      	adds	r4, r2, r0
 80249ae:	673c      	str	r4, [r7, #112]	; 0x70
 80249b0:	414b      	adcs	r3, r1
 80249b2:	677b      	str	r3, [r7, #116]	; 0x74
 80249b4:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 80249b8:	e9c7 34ac 	strd	r3, r4, [r7, #688]	; 0x2b0
    result = (int32_t)(mult / (1ll << 31));
 80249bc:	e9d7 23ac 	ldrd	r2, r3, [r7, #688]	; 0x2b0
 80249c0:	4610      	mov	r0, r2
 80249c2:	4619      	mov	r1, r3
 80249c4:	2800      	cmp	r0, #0
 80249c6:	f171 0300 	sbcs.w	r3, r1, #0
 80249ca:	da06      	bge.n	80249da <arm_softmax_s8+0x2642>
 80249cc:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80249d0:	f04f 0300 	mov.w	r3, #0
 80249d4:	1880      	adds	r0, r0, r2
 80249d6:	eb43 0101 	adc.w	r1, r3, r1
 80249da:	f04f 0200 	mov.w	r2, #0
 80249de:	f04f 0300 	mov.w	r3, #0
 80249e2:	0fc2      	lsrs	r2, r0, #31
 80249e4:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80249e8:	17cb      	asrs	r3, r1, #31
 80249ea:	4610      	mov	r0, r2
 80249ec:	4619      	mov	r1, r3
 80249ee:	f507 722f 	add.w	r2, r7, #700	; 0x2bc
 80249f2:	4603      	mov	r3, r0
 80249f4:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80249f6:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 80249fa:	681a      	ldr	r2, [r3, #0]
 80249fc:	4b20      	ldr	r3, [pc, #128]	; (8024a80 <arm_softmax_s8+0x26e8>)
 80249fe:	429a      	cmp	r2, r3
 8024a00:	d10a      	bne.n	8024a18 <arm_softmax_s8+0x2680>
 8024a02:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8024a06:	681b      	ldr	r3, [r3, #0]
 8024a08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8024a0c:	d104      	bne.n	8024a18 <arm_softmax_s8+0x2680>
        result = Q31_MAX;
 8024a0e:	f507 722f 	add.w	r2, r7, #700	; 0x2bc
 8024a12:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8024a16:	6013      	str	r3, [r2, #0]
    return result;
 8024a18:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 8024a1c:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(1672461947)
 8024a1e:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8024a22:	681b      	ldr	r3, [r3, #0]
 8024a24:	ea02 0103 	and.w	r1, r2, r3
 8024a28:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8024a2c:	681b      	ldr	r3, [r3, #0]
 8024a2e:	43da      	mvns	r2, r3
 8024a30:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 8024a34:	681b      	ldr	r3, [r3, #0]
 8024a36:	4013      	ands	r3, r2
 8024a38:	f507 7231 	add.w	r2, r7, #708	; 0x2c4
 8024a3c:	404b      	eors	r3, r1
 8024a3e:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(1302514674)
 8024a40:	f507 7359 	add.w	r3, r7, #868	; 0x364
 8024a44:	6819      	ldr	r1, [r3, #0]
 8024a46:	f507 7259 	add.w	r2, r7, #868	; 0x364
 8024a4a:	1c4b      	adds	r3, r1, #1
 8024a4c:	6013      	str	r3, [r2, #0]
 8024a4e:	2301      	movs	r3, #1
 8024a50:	fa03 f201 	lsl.w	r2, r3, r1
 8024a54:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 8024a58:	681b      	ldr	r3, [r3, #0]
 8024a5a:	4013      	ands	r3, r2
 8024a5c:	2b00      	cmp	r3, #0
 8024a5e:	d015      	beq.n	8024a8c <arm_softmax_s8+0x26f4>
 8024a60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8024a64:	e013      	b.n	8024a8e <arm_softmax_s8+0x26f6>
 8024a66:	bf00      	nop
 8024a68:	70f5a894 	.word	0x70f5a894
 8024a6c:	00000000 	.word	0x00000000
 8024a70:	63afbe7b 	.word	0x63afbe7b
 8024a74:	00000000 	.word	0x00000000
 8024a78:	2aaaaaab 	.word	0x2aaaaaab
 8024a7c:	70f5a894 	.word	0x70f5a894
 8024a80:	63afbe7b 	.word	0x63afbe7b
 8024a84:	2aaaaaab 	.word	0x2aaaaaab
 8024a88:	00000000 	.word	0x00000000
 8024a8c:	2200      	movs	r2, #0
 8024a8e:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8024a92:	601a      	str	r2, [r3, #0]
 8024a94:	f507 722b 	add.w	r2, r7, #684	; 0x2ac
 8024a98:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 8024a9c:	681b      	ldr	r3, [r3, #0]
 8024a9e:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8024aa0:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8024aa4:	2300      	movs	r3, #0
 8024aa6:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8024aa8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8024aac:	f04f 0300 	mov.w	r3, #0
 8024ab0:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
    if ((m1 < 0) ^ (m2 < 0))
 8024ab4:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 8024ab8:	681b      	ldr	r3, [r3, #0]
 8024aba:	0fdb      	lsrs	r3, r3, #31
 8024abc:	b2da      	uxtb	r2, r3
 8024abe:	2300      	movs	r3, #0
 8024ac0:	4053      	eors	r3, r2
 8024ac2:	b2db      	uxtb	r3, r3
 8024ac4:	2b00      	cmp	r3, #0
 8024ac6:	d00e      	beq.n	8024ae6 <arm_softmax_s8+0x274e>
        mult = 1 - mult;
 8024ac8:	f04f 0001 	mov.w	r0, #1
 8024acc:	f04f 0100 	mov.w	r1, #0
 8024ad0:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 8024ad4:	1a84      	subs	r4, r0, r2
 8024ad6:	66bc      	str	r4, [r7, #104]	; 0x68
 8024ad8:	eb61 0303 	sbc.w	r3, r1, r3
 8024adc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8024ade:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8024ae2:	e9c7 34a8 	strd	r3, r4, [r7, #672]	; 0x2a0
    mult = mult + (q63_t)m1 * m2;
 8024ae6:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 8024aea:	681b      	ldr	r3, [r3, #0]
 8024aec:	4618      	mov	r0, r3
 8024aee:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8024af2:	a3da      	add	r3, pc, #872	; (adr r3, 8024e5c <arm_softmax_s8+0x2ac4>)
 8024af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024af8:	fb02 f501 	mul.w	r5, r2, r1
 8024afc:	fb00 f403 	mul.w	r4, r0, r3
 8024b00:	442c      	add	r4, r5
 8024b02:	fba0 0102 	umull	r0, r1, r0, r2
 8024b06:	1863      	adds	r3, r4, r1
 8024b08:	4619      	mov	r1, r3
 8024b0a:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 8024b0e:	1814      	adds	r4, r2, r0
 8024b10:	663c      	str	r4, [r7, #96]	; 0x60
 8024b12:	414b      	adcs	r3, r1
 8024b14:	667b      	str	r3, [r7, #100]	; 0x64
 8024b16:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8024b1a:	e9c7 34a8 	strd	r3, r4, [r7, #672]	; 0x2a0
    result = (int32_t)(mult / (1ll << 31));
 8024b1e:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 8024b22:	4610      	mov	r0, r2
 8024b24:	4619      	mov	r1, r3
 8024b26:	2800      	cmp	r0, #0
 8024b28:	f171 0300 	sbcs.w	r3, r1, #0
 8024b2c:	da06      	bge.n	8024b3c <arm_softmax_s8+0x27a4>
 8024b2e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8024b32:	f04f 0300 	mov.w	r3, #0
 8024b36:	1880      	adds	r0, r0, r2
 8024b38:	eb43 0101 	adc.w	r1, r3, r1
 8024b3c:	f04f 0200 	mov.w	r2, #0
 8024b40:	f04f 0300 	mov.w	r3, #0
 8024b44:	0fc2      	lsrs	r2, r0, #31
 8024b46:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8024b4a:	17cb      	asrs	r3, r1, #31
 8024b4c:	4610      	mov	r0, r2
 8024b4e:	4619      	mov	r1, r3
 8024b50:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8024b54:	4603      	mov	r3, r0
 8024b56:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8024b58:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 8024b5c:	681a      	ldr	r2, [r3, #0]
 8024b5e:	4bbc      	ldr	r3, [pc, #752]	; (8024e50 <arm_softmax_s8+0x2ab8>)
 8024b60:	429a      	cmp	r2, r3
 8024b62:	d10a      	bne.n	8024b7a <arm_softmax_s8+0x27e2>
 8024b64:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 8024b68:	681b      	ldr	r3, [r3, #0]
 8024b6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8024b6e:	d104      	bne.n	8024b7a <arm_softmax_s8+0x27e2>
        result = Q31_MAX;
 8024b70:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8024b74:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8024b78:	6013      	str	r3, [r2, #0]
    return result;
 8024b7a:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8024b7e:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(1302514674)
 8024b80:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8024b84:	681b      	ldr	r3, [r3, #0]
 8024b86:	ea02 0103 	and.w	r1, r2, r3
 8024b8a:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8024b8e:	681b      	ldr	r3, [r3, #0]
 8024b90:	43da      	mvns	r2, r3
 8024b92:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 8024b96:	681b      	ldr	r3, [r3, #0]
 8024b98:	4013      	ands	r3, r2
 8024b9a:	f507 7231 	add.w	r2, r7, #708	; 0x2c4
 8024b9e:	404b      	eors	r3, r1
 8024ba0:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(790015084)
 8024ba2:	f507 7359 	add.w	r3, r7, #868	; 0x364
 8024ba6:	6819      	ldr	r1, [r3, #0]
 8024ba8:	f507 7259 	add.w	r2, r7, #868	; 0x364
 8024bac:	1c4b      	adds	r3, r1, #1
 8024bae:	6013      	str	r3, [r2, #0]
 8024bb0:	2301      	movs	r3, #1
 8024bb2:	fa03 f201 	lsl.w	r2, r3, r1
 8024bb6:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 8024bba:	681b      	ldr	r3, [r3, #0]
 8024bbc:	4013      	ands	r3, r2
 8024bbe:	2b00      	cmp	r3, #0
 8024bc0:	d002      	beq.n	8024bc8 <arm_softmax_s8+0x2830>
 8024bc2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8024bc6:	e000      	b.n	8024bca <arm_softmax_s8+0x2832>
 8024bc8:	2200      	movs	r2, #0
 8024bca:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8024bce:	601a      	str	r2, [r3, #0]
 8024bd0:	f507 7227 	add.w	r2, r7, #668	; 0x29c
 8024bd4:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 8024bd8:	681b      	ldr	r3, [r3, #0]
 8024bda:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8024bdc:	f507 7226 	add.w	r2, r7, #664	; 0x298
 8024be0:	2300      	movs	r3, #0
 8024be2:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8024be4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8024be8:	f04f 0300 	mov.w	r3, #0
 8024bec:	e9c7 23a4 	strd	r2, r3, [r7, #656]	; 0x290
    if ((m1 < 0) ^ (m2 < 0))
 8024bf0:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 8024bf4:	681b      	ldr	r3, [r3, #0]
 8024bf6:	0fdb      	lsrs	r3, r3, #31
 8024bf8:	b2da      	uxtb	r2, r3
 8024bfa:	2300      	movs	r3, #0
 8024bfc:	4053      	eors	r3, r2
 8024bfe:	b2db      	uxtb	r3, r3
 8024c00:	2b00      	cmp	r3, #0
 8024c02:	d00e      	beq.n	8024c22 <arm_softmax_s8+0x288a>
        mult = 1 - mult;
 8024c04:	f04f 0001 	mov.w	r0, #1
 8024c08:	f04f 0100 	mov.w	r1, #0
 8024c0c:	e9d7 23a4 	ldrd	r2, r3, [r7, #656]	; 0x290
 8024c10:	1a84      	subs	r4, r0, r2
 8024c12:	65bc      	str	r4, [r7, #88]	; 0x58
 8024c14:	eb61 0303 	sbc.w	r3, r1, r3
 8024c18:	65fb      	str	r3, [r7, #92]	; 0x5c
 8024c1a:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8024c1e:	e9c7 34a4 	strd	r3, r4, [r7, #656]	; 0x290
    mult = mult + (q63_t)m1 * m2;
 8024c22:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 8024c26:	681b      	ldr	r3, [r3, #0]
 8024c28:	4618      	mov	r0, r3
 8024c2a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8024c2e:	a384      	add	r3, pc, #528	; (adr r3, 8024e40 <arm_softmax_s8+0x2aa8>)
 8024c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024c34:	fb02 f501 	mul.w	r5, r2, r1
 8024c38:	fb00 f403 	mul.w	r4, r0, r3
 8024c3c:	442c      	add	r4, r5
 8024c3e:	fba0 0102 	umull	r0, r1, r0, r2
 8024c42:	1863      	adds	r3, r4, r1
 8024c44:	4619      	mov	r1, r3
 8024c46:	e9d7 23a4 	ldrd	r2, r3, [r7, #656]	; 0x290
 8024c4a:	1814      	adds	r4, r2, r0
 8024c4c:	653c      	str	r4, [r7, #80]	; 0x50
 8024c4e:	414b      	adcs	r3, r1
 8024c50:	657b      	str	r3, [r7, #84]	; 0x54
 8024c52:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8024c56:	e9c7 34a4 	strd	r3, r4, [r7, #656]	; 0x290
    result = (int32_t)(mult / (1ll << 31));
 8024c5a:	e9d7 23a4 	ldrd	r2, r3, [r7, #656]	; 0x290
 8024c5e:	4610      	mov	r0, r2
 8024c60:	4619      	mov	r1, r3
 8024c62:	2800      	cmp	r0, #0
 8024c64:	f171 0300 	sbcs.w	r3, r1, #0
 8024c68:	da06      	bge.n	8024c78 <arm_softmax_s8+0x28e0>
 8024c6a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8024c6e:	f04f 0300 	mov.w	r3, #0
 8024c72:	1880      	adds	r0, r0, r2
 8024c74:	eb43 0101 	adc.w	r1, r3, r1
 8024c78:	f04f 0200 	mov.w	r2, #0
 8024c7c:	f04f 0300 	mov.w	r3, #0
 8024c80:	0fc2      	lsrs	r2, r0, #31
 8024c82:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8024c86:	17cb      	asrs	r3, r1, #31
 8024c88:	4610      	mov	r0, r2
 8024c8a:	4619      	mov	r1, r3
 8024c8c:	f507 7226 	add.w	r2, r7, #664	; 0x298
 8024c90:	4603      	mov	r3, r0
 8024c92:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8024c94:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 8024c98:	681a      	ldr	r2, [r3, #0]
 8024c9a:	4b6e      	ldr	r3, [pc, #440]	; (8024e54 <arm_softmax_s8+0x2abc>)
 8024c9c:	429a      	cmp	r2, r3
 8024c9e:	d10a      	bne.n	8024cb6 <arm_softmax_s8+0x291e>
 8024ca0:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 8024ca4:	681b      	ldr	r3, [r3, #0]
 8024ca6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8024caa:	d104      	bne.n	8024cb6 <arm_softmax_s8+0x291e>
        result = Q31_MAX;
 8024cac:	f507 7226 	add.w	r2, r7, #664	; 0x298
 8024cb0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8024cb4:	6013      	str	r3, [r2, #0]
    return result;
 8024cb6:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8024cba:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(790015084)
 8024cbc:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8024cc0:	681b      	ldr	r3, [r3, #0]
 8024cc2:	ea02 0103 	and.w	r1, r2, r3
 8024cc6:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8024cca:	681b      	ldr	r3, [r3, #0]
 8024ccc:	43da      	mvns	r2, r3
 8024cce:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 8024cd2:	681b      	ldr	r3, [r3, #0]
 8024cd4:	4013      	ands	r3, r2
 8024cd6:	f507 7231 	add.w	r2, r7, #708	; 0x2c4
 8024cda:	404b      	eors	r3, r1
 8024cdc:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(290630308)
 8024cde:	f507 7359 	add.w	r3, r7, #868	; 0x364
 8024ce2:	6819      	ldr	r1, [r3, #0]
 8024ce4:	f507 7259 	add.w	r2, r7, #868	; 0x364
 8024ce8:	1c4b      	adds	r3, r1, #1
 8024cea:	6013      	str	r3, [r2, #0]
 8024cec:	2301      	movs	r3, #1
 8024cee:	fa03 f201 	lsl.w	r2, r3, r1
 8024cf2:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 8024cf6:	681b      	ldr	r3, [r3, #0]
 8024cf8:	4013      	ands	r3, r2
 8024cfa:	2b00      	cmp	r3, #0
 8024cfc:	d002      	beq.n	8024d04 <arm_softmax_s8+0x296c>
 8024cfe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8024d02:	e000      	b.n	8024d06 <arm_softmax_s8+0x296e>
 8024d04:	2200      	movs	r2, #0
 8024d06:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8024d0a:	601a      	str	r2, [r3, #0]
 8024d0c:	f507 7223 	add.w	r2, r7, #652	; 0x28c
 8024d10:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 8024d14:	681b      	ldr	r3, [r3, #0]
 8024d16:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8024d18:	f507 7222 	add.w	r2, r7, #648	; 0x288
 8024d1c:	2300      	movs	r3, #0
 8024d1e:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8024d20:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8024d24:	f04f 0300 	mov.w	r3, #0
 8024d28:	e9c7 23a0 	strd	r2, r3, [r7, #640]	; 0x280
    if ((m1 < 0) ^ (m2 < 0))
 8024d2c:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 8024d30:	681b      	ldr	r3, [r3, #0]
 8024d32:	0fdb      	lsrs	r3, r3, #31
 8024d34:	b2da      	uxtb	r2, r3
 8024d36:	2300      	movs	r3, #0
 8024d38:	4053      	eors	r3, r2
 8024d3a:	b2db      	uxtb	r3, r3
 8024d3c:	2b00      	cmp	r3, #0
 8024d3e:	d00e      	beq.n	8024d5e <arm_softmax_s8+0x29c6>
        mult = 1 - mult;
 8024d40:	f04f 0001 	mov.w	r0, #1
 8024d44:	f04f 0100 	mov.w	r1, #0
 8024d48:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	; 0x280
 8024d4c:	1a84      	subs	r4, r0, r2
 8024d4e:	64bc      	str	r4, [r7, #72]	; 0x48
 8024d50:	eb61 0303 	sbc.w	r3, r1, r3
 8024d54:	64fb      	str	r3, [r7, #76]	; 0x4c
 8024d56:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8024d5a:	e9c7 34a0 	strd	r3, r4, [r7, #640]	; 0x280
    mult = mult + (q63_t)m1 * m2;
 8024d5e:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 8024d62:	681b      	ldr	r3, [r3, #0]
 8024d64:	4618      	mov	r0, r3
 8024d66:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8024d6a:	a337      	add	r3, pc, #220	; (adr r3, 8024e48 <arm_softmax_s8+0x2ab0>)
 8024d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024d70:	fb02 f501 	mul.w	r5, r2, r1
 8024d74:	fb00 f403 	mul.w	r4, r0, r3
 8024d78:	442c      	add	r4, r5
 8024d7a:	fba0 0102 	umull	r0, r1, r0, r2
 8024d7e:	1863      	adds	r3, r4, r1
 8024d80:	4619      	mov	r1, r3
 8024d82:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	; 0x280
 8024d86:	1814      	adds	r4, r2, r0
 8024d88:	643c      	str	r4, [r7, #64]	; 0x40
 8024d8a:	414b      	adcs	r3, r1
 8024d8c:	647b      	str	r3, [r7, #68]	; 0x44
 8024d8e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8024d92:	e9c7 34a0 	strd	r3, r4, [r7, #640]	; 0x280
    result = (int32_t)(mult / (1ll << 31));
 8024d96:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	; 0x280
 8024d9a:	4610      	mov	r0, r2
 8024d9c:	4619      	mov	r1, r3
 8024d9e:	2800      	cmp	r0, #0
 8024da0:	f171 0300 	sbcs.w	r3, r1, #0
 8024da4:	da06      	bge.n	8024db4 <arm_softmax_s8+0x2a1c>
 8024da6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8024daa:	f04f 0300 	mov.w	r3, #0
 8024dae:	1880      	adds	r0, r0, r2
 8024db0:	eb43 0101 	adc.w	r1, r3, r1
 8024db4:	f04f 0200 	mov.w	r2, #0
 8024db8:	f04f 0300 	mov.w	r3, #0
 8024dbc:	0fc2      	lsrs	r2, r0, #31
 8024dbe:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8024dc2:	17cb      	asrs	r3, r1, #31
 8024dc4:	4610      	mov	r0, r2
 8024dc6:	4619      	mov	r1, r3
 8024dc8:	f507 7222 	add.w	r2, r7, #648	; 0x288
 8024dcc:	4603      	mov	r3, r0
 8024dce:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8024dd0:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 8024dd4:	681a      	ldr	r2, [r3, #0]
 8024dd6:	4b20      	ldr	r3, [pc, #128]	; (8024e58 <arm_softmax_s8+0x2ac0>)
 8024dd8:	429a      	cmp	r2, r3
 8024dda:	d10a      	bne.n	8024df2 <arm_softmax_s8+0x2a5a>
 8024ddc:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 8024de0:	681b      	ldr	r3, [r3, #0]
 8024de2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8024de6:	d104      	bne.n	8024df2 <arm_softmax_s8+0x2a5a>
        result = Q31_MAX;
 8024de8:	f507 7222 	add.w	r2, r7, #648	; 0x288
 8024dec:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8024df0:	6013      	str	r3, [r2, #0]
    return result;
 8024df2:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8024df6:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(290630308)
 8024df8:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8024dfc:	681b      	ldr	r3, [r3, #0]
 8024dfe:	ea02 0103 	and.w	r1, r2, r3
 8024e02:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8024e06:	681b      	ldr	r3, [r3, #0]
 8024e08:	43da      	mvns	r2, r3
 8024e0a:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 8024e0e:	681b      	ldr	r3, [r3, #0]
 8024e10:	4013      	ands	r3, r2
 8024e12:	f507 7231 	add.w	r2, r7, #708	; 0x2c4
 8024e16:	404b      	eors	r3, r1
 8024e18:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(39332535)
 8024e1a:	f507 7359 	add.w	r3, r7, #868	; 0x364
 8024e1e:	6819      	ldr	r1, [r3, #0]
 8024e20:	f507 7259 	add.w	r2, r7, #868	; 0x364
 8024e24:	1c4b      	adds	r3, r1, #1
 8024e26:	6013      	str	r3, [r2, #0]
 8024e28:	2301      	movs	r3, #1
 8024e2a:	fa03 f201 	lsl.w	r2, r3, r1
 8024e2e:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 8024e32:	681b      	ldr	r3, [r3, #0]
 8024e34:	4013      	ands	r3, r2
 8024e36:	2b00      	cmp	r3, #0
 8024e38:	d014      	beq.n	8024e64 <arm_softmax_s8+0x2acc>
 8024e3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8024e3e:	e012      	b.n	8024e66 <arm_softmax_s8+0x2ace>
 8024e40:	2f16ac6c 	.word	0x2f16ac6c
 8024e44:	00000000 	.word	0x00000000
 8024e48:	1152aaa4 	.word	0x1152aaa4
 8024e4c:	00000000 	.word	0x00000000
 8024e50:	4da2cbf2 	.word	0x4da2cbf2
 8024e54:	2f16ac6c 	.word	0x2f16ac6c
 8024e58:	1152aaa4 	.word	0x1152aaa4
 8024e5c:	4da2cbf2 	.word	0x4da2cbf2
 8024e60:	00000000 	.word	0x00000000
 8024e64:	2200      	movs	r2, #0
 8024e66:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8024e6a:	601a      	str	r2, [r3, #0]
 8024e6c:	f507 721f 	add.w	r2, r7, #636	; 0x27c
 8024e70:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 8024e74:	681b      	ldr	r3, [r3, #0]
 8024e76:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8024e78:	f507 721e 	add.w	r2, r7, #632	; 0x278
 8024e7c:	2300      	movs	r3, #0
 8024e7e:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8024e80:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8024e84:	f04f 0300 	mov.w	r3, #0
 8024e88:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
    if ((m1 < 0) ^ (m2 < 0))
 8024e8c:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 8024e90:	681b      	ldr	r3, [r3, #0]
 8024e92:	0fdb      	lsrs	r3, r3, #31
 8024e94:	b2da      	uxtb	r2, r3
 8024e96:	2300      	movs	r3, #0
 8024e98:	4053      	eors	r3, r2
 8024e9a:	b2db      	uxtb	r3, r3
 8024e9c:	2b00      	cmp	r3, #0
 8024e9e:	d00e      	beq.n	8024ebe <arm_softmax_s8+0x2b26>
        mult = 1 - mult;
 8024ea0:	f04f 0001 	mov.w	r0, #1
 8024ea4:	f04f 0100 	mov.w	r1, #0
 8024ea8:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 8024eac:	1a84      	subs	r4, r0, r2
 8024eae:	63bc      	str	r4, [r7, #56]	; 0x38
 8024eb0:	eb61 0303 	sbc.w	r3, r1, r3
 8024eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8024eb6:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8024eba:	e9c7 349c 	strd	r3, r4, [r7, #624]	; 0x270
    mult = mult + (q63_t)m1 * m2;
 8024ebe:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 8024ec2:	681b      	ldr	r3, [r3, #0]
 8024ec4:	4618      	mov	r0, r3
 8024ec6:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8024eca:	a3d1      	add	r3, pc, #836	; (adr r3, 8025210 <arm_softmax_s8+0x2e78>)
 8024ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024ed0:	fb02 f501 	mul.w	r5, r2, r1
 8024ed4:	fb00 f403 	mul.w	r4, r0, r3
 8024ed8:	442c      	add	r4, r5
 8024eda:	fba0 0102 	umull	r0, r1, r0, r2
 8024ede:	1863      	adds	r3, r4, r1
 8024ee0:	4619      	mov	r1, r3
 8024ee2:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 8024ee6:	1814      	adds	r4, r2, r0
 8024ee8:	633c      	str	r4, [r7, #48]	; 0x30
 8024eea:	414b      	adcs	r3, r1
 8024eec:	637b      	str	r3, [r7, #52]	; 0x34
 8024eee:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8024ef2:	e9c7 349c 	strd	r3, r4, [r7, #624]	; 0x270
    result = (int32_t)(mult / (1ll << 31));
 8024ef6:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 8024efa:	4610      	mov	r0, r2
 8024efc:	4619      	mov	r1, r3
 8024efe:	2800      	cmp	r0, #0
 8024f00:	f171 0300 	sbcs.w	r3, r1, #0
 8024f04:	da06      	bge.n	8024f14 <arm_softmax_s8+0x2b7c>
 8024f06:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8024f0a:	f04f 0300 	mov.w	r3, #0
 8024f0e:	1880      	adds	r0, r0, r2
 8024f10:	eb43 0101 	adc.w	r1, r3, r1
 8024f14:	f04f 0200 	mov.w	r2, #0
 8024f18:	f04f 0300 	mov.w	r3, #0
 8024f1c:	0fc2      	lsrs	r2, r0, #31
 8024f1e:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8024f22:	17cb      	asrs	r3, r1, #31
 8024f24:	4610      	mov	r0, r2
 8024f26:	4619      	mov	r1, r3
 8024f28:	f507 721e 	add.w	r2, r7, #632	; 0x278
 8024f2c:	4603      	mov	r3, r0
 8024f2e:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8024f30:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 8024f34:	681a      	ldr	r2, [r3, #0]
 8024f36:	4bb4      	ldr	r3, [pc, #720]	; (8025208 <arm_softmax_s8+0x2e70>)
 8024f38:	429a      	cmp	r2, r3
 8024f3a:	d10a      	bne.n	8024f52 <arm_softmax_s8+0x2bba>
 8024f3c:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 8024f40:	681b      	ldr	r3, [r3, #0]
 8024f42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8024f46:	d104      	bne.n	8024f52 <arm_softmax_s8+0x2bba>
        result = Q31_MAX;
 8024f48:	f507 721e 	add.w	r2, r7, #632	; 0x278
 8024f4c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8024f50:	6013      	str	r3, [r2, #0]
    return result;
 8024f52:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8024f56:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(39332535)
 8024f58:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8024f5c:	681b      	ldr	r3, [r3, #0]
 8024f5e:	ea02 0103 	and.w	r1, r2, r3
 8024f62:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8024f66:	681b      	ldr	r3, [r3, #0]
 8024f68:	43da      	mvns	r2, r3
 8024f6a:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 8024f6e:	681b      	ldr	r3, [r3, #0]
 8024f70:	4013      	ands	r3, r2
 8024f72:	f507 7231 	add.w	r2, r7, #708	; 0x2c4
 8024f76:	404b      	eors	r3, r1
 8024f78:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(720401)
 8024f7a:	f507 7359 	add.w	r3, r7, #868	; 0x364
 8024f7e:	6819      	ldr	r1, [r3, #0]
 8024f80:	f507 7259 	add.w	r2, r7, #868	; 0x364
 8024f84:	1c4b      	adds	r3, r1, #1
 8024f86:	6013      	str	r3, [r2, #0]
 8024f88:	2301      	movs	r3, #1
 8024f8a:	fa03 f201 	lsl.w	r2, r3, r1
 8024f8e:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 8024f92:	681b      	ldr	r3, [r3, #0]
 8024f94:	4013      	ands	r3, r2
 8024f96:	2b00      	cmp	r3, #0
 8024f98:	d002      	beq.n	8024fa0 <arm_softmax_s8+0x2c08>
 8024f9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8024f9e:	e000      	b.n	8024fa2 <arm_softmax_s8+0x2c0a>
 8024fa0:	2200      	movs	r2, #0
 8024fa2:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8024fa6:	601a      	str	r2, [r3, #0]
 8024fa8:	f507 721b 	add.w	r2, r7, #620	; 0x26c
 8024fac:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 8024fb0:	681b      	ldr	r3, [r3, #0]
 8024fb2:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8024fb4:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8024fb8:	2300      	movs	r3, #0
 8024fba:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8024fbc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8024fc0:	f04f 0300 	mov.w	r3, #0
 8024fc4:	e9c7 2398 	strd	r2, r3, [r7, #608]	; 0x260
    if ((m1 < 0) ^ (m2 < 0))
 8024fc8:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 8024fcc:	681b      	ldr	r3, [r3, #0]
 8024fce:	0fdb      	lsrs	r3, r3, #31
 8024fd0:	b2da      	uxtb	r2, r3
 8024fd2:	2300      	movs	r3, #0
 8024fd4:	4053      	eors	r3, r2
 8024fd6:	b2db      	uxtb	r3, r3
 8024fd8:	2b00      	cmp	r3, #0
 8024fda:	d00e      	beq.n	8024ffa <arm_softmax_s8+0x2c62>
        mult = 1 - mult;
 8024fdc:	f04f 0001 	mov.w	r0, #1
 8024fe0:	f04f 0100 	mov.w	r1, #0
 8024fe4:	e9d7 2398 	ldrd	r2, r3, [r7, #608]	; 0x260
 8024fe8:	1a84      	subs	r4, r0, r2
 8024fea:	62bc      	str	r4, [r7, #40]	; 0x28
 8024fec:	eb61 0303 	sbc.w	r3, r1, r3
 8024ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8024ff2:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8024ff6:	e9c7 3498 	strd	r3, r4, [r7, #608]	; 0x260
    mult = mult + (q63_t)m1 * m2;
 8024ffa:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 8024ffe:	681b      	ldr	r3, [r3, #0]
 8025000:	4618      	mov	r0, r3
 8025002:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8025006:	4a81      	ldr	r2, [pc, #516]	; (802520c <arm_softmax_s8+0x2e74>)
 8025008:	f04f 0300 	mov.w	r3, #0
 802500c:	fb02 f501 	mul.w	r5, r2, r1
 8025010:	fb00 f403 	mul.w	r4, r0, r3
 8025014:	442c      	add	r4, r5
 8025016:	fba0 0102 	umull	r0, r1, r0, r2
 802501a:	1863      	adds	r3, r4, r1
 802501c:	4619      	mov	r1, r3
 802501e:	e9d7 2398 	ldrd	r2, r3, [r7, #608]	; 0x260
 8025022:	1814      	adds	r4, r2, r0
 8025024:	623c      	str	r4, [r7, #32]
 8025026:	414b      	adcs	r3, r1
 8025028:	627b      	str	r3, [r7, #36]	; 0x24
 802502a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 802502e:	e9c7 3498 	strd	r3, r4, [r7, #608]	; 0x260
    result = (int32_t)(mult / (1ll << 31));
 8025032:	e9d7 2398 	ldrd	r2, r3, [r7, #608]	; 0x260
 8025036:	4610      	mov	r0, r2
 8025038:	4619      	mov	r1, r3
 802503a:	2800      	cmp	r0, #0
 802503c:	f171 0300 	sbcs.w	r3, r1, #0
 8025040:	da06      	bge.n	8025050 <arm_softmax_s8+0x2cb8>
 8025042:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8025046:	f04f 0300 	mov.w	r3, #0
 802504a:	1880      	adds	r0, r0, r2
 802504c:	eb43 0101 	adc.w	r1, r3, r1
 8025050:	f04f 0200 	mov.w	r2, #0
 8025054:	f04f 0300 	mov.w	r3, #0
 8025058:	0fc2      	lsrs	r2, r0, #31
 802505a:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 802505e:	17cb      	asrs	r3, r1, #31
 8025060:	4610      	mov	r0, r2
 8025062:	4619      	mov	r1, r3
 8025064:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8025068:	4603      	mov	r3, r0
 802506a:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 802506c:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 8025070:	681a      	ldr	r2, [r3, #0]
 8025072:	4b66      	ldr	r3, [pc, #408]	; (802520c <arm_softmax_s8+0x2e74>)
 8025074:	429a      	cmp	r2, r3
 8025076:	d10a      	bne.n	802508e <arm_softmax_s8+0x2cf6>
 8025078:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 802507c:	681b      	ldr	r3, [r3, #0]
 802507e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8025082:	d104      	bne.n	802508e <arm_softmax_s8+0x2cf6>
        result = Q31_MAX;
 8025084:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8025088:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 802508c:	6013      	str	r3, [r2, #0]
    return result;
 802508e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8025092:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(720401)
 8025094:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8025098:	681b      	ldr	r3, [r3, #0]
 802509a:	ea02 0103 	and.w	r1, r2, r3
 802509e:	f507 735a 	add.w	r3, r7, #872	; 0x368
 80250a2:	681b      	ldr	r3, [r3, #0]
 80250a4:	43da      	mvns	r2, r3
 80250a6:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 80250aa:	681b      	ldr	r3, [r3, #0]
 80250ac:	4013      	ands	r3, r2
 80250ae:	f507 7231 	add.w	r2, r7, #708	; 0x2c4
 80250b2:	404b      	eors	r3, r1
 80250b4:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(242)
 80250b6:	f507 7359 	add.w	r3, r7, #868	; 0x364
 80250ba:	6819      	ldr	r1, [r3, #0]
 80250bc:	f507 7259 	add.w	r2, r7, #868	; 0x364
 80250c0:	1c4b      	adds	r3, r1, #1
 80250c2:	6013      	str	r3, [r2, #0]
 80250c4:	2301      	movs	r3, #1
 80250c6:	fa03 f201 	lsl.w	r2, r3, r1
 80250ca:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 80250ce:	681b      	ldr	r3, [r3, #0]
 80250d0:	4013      	ands	r3, r2
 80250d2:	2b00      	cmp	r3, #0
 80250d4:	d002      	beq.n	80250dc <arm_softmax_s8+0x2d44>
 80250d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80250da:	e000      	b.n	80250de <arm_softmax_s8+0x2d46>
 80250dc:	2200      	movs	r2, #0
 80250de:	f507 735a 	add.w	r3, r7, #872	; 0x368
 80250e2:	601a      	str	r2, [r3, #0]
 80250e4:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 80250e8:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 80250ec:	681b      	ldr	r3, [r3, #0]
 80250ee:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80250f0:	f507 7216 	add.w	r2, r7, #600	; 0x258
 80250f4:	2300      	movs	r3, #0
 80250f6:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80250f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80250fc:	f04f 0300 	mov.w	r3, #0
 8025100:	e9c7 2394 	strd	r2, r3, [r7, #592]	; 0x250
    if ((m1 < 0) ^ (m2 < 0))
 8025104:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8025108:	681b      	ldr	r3, [r3, #0]
 802510a:	0fdb      	lsrs	r3, r3, #31
 802510c:	b2da      	uxtb	r2, r3
 802510e:	2300      	movs	r3, #0
 8025110:	4053      	eors	r3, r2
 8025112:	b2db      	uxtb	r3, r3
 8025114:	2b00      	cmp	r3, #0
 8025116:	d00e      	beq.n	8025136 <arm_softmax_s8+0x2d9e>
        mult = 1 - mult;
 8025118:	f04f 0001 	mov.w	r0, #1
 802511c:	f04f 0100 	mov.w	r1, #0
 8025120:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 8025124:	1a84      	subs	r4, r0, r2
 8025126:	61bc      	str	r4, [r7, #24]
 8025128:	eb61 0303 	sbc.w	r3, r1, r3
 802512c:	61fb      	str	r3, [r7, #28]
 802512e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8025132:	e9c7 3494 	strd	r3, r4, [r7, #592]	; 0x250
    mult = mult + (q63_t)m1 * m2;
 8025136:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 802513a:	681b      	ldr	r3, [r3, #0]
 802513c:	4618      	mov	r0, r3
 802513e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8025142:	f04f 02f2 	mov.w	r2, #242	; 0xf2
 8025146:	f04f 0300 	mov.w	r3, #0
 802514a:	fb02 f501 	mul.w	r5, r2, r1
 802514e:	fb00 f403 	mul.w	r4, r0, r3
 8025152:	442c      	add	r4, r5
 8025154:	fba0 0102 	umull	r0, r1, r0, r2
 8025158:	1863      	adds	r3, r4, r1
 802515a:	4619      	mov	r1, r3
 802515c:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 8025160:	1814      	adds	r4, r2, r0
 8025162:	613c      	str	r4, [r7, #16]
 8025164:	414b      	adcs	r3, r1
 8025166:	617b      	str	r3, [r7, #20]
 8025168:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 802516c:	e9c7 3494 	strd	r3, r4, [r7, #592]	; 0x250
    result = (int32_t)(mult / (1ll << 31));
 8025170:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 8025174:	4610      	mov	r0, r2
 8025176:	4619      	mov	r1, r3
 8025178:	2800      	cmp	r0, #0
 802517a:	f171 0300 	sbcs.w	r3, r1, #0
 802517e:	da06      	bge.n	802518e <arm_softmax_s8+0x2df6>
 8025180:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8025184:	f04f 0300 	mov.w	r3, #0
 8025188:	1880      	adds	r0, r0, r2
 802518a:	eb43 0101 	adc.w	r1, r3, r1
 802518e:	f04f 0200 	mov.w	r2, #0
 8025192:	f04f 0300 	mov.w	r3, #0
 8025196:	0fc2      	lsrs	r2, r0, #31
 8025198:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 802519c:	17cb      	asrs	r3, r1, #31
 802519e:	4610      	mov	r0, r2
 80251a0:	4619      	mov	r1, r3
 80251a2:	f507 7216 	add.w	r2, r7, #600	; 0x258
 80251a6:	4603      	mov	r3, r0
 80251a8:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80251aa:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 80251ae:	681b      	ldr	r3, [r3, #0]
 80251b0:	2bf2      	cmp	r3, #242	; 0xf2
 80251b2:	d10a      	bne.n	80251ca <arm_softmax_s8+0x2e32>
 80251b4:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 80251b8:	681b      	ldr	r3, [r3, #0]
 80251ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80251be:	d104      	bne.n	80251ca <arm_softmax_s8+0x2e32>
        result = Q31_MAX;
 80251c0:	f507 7216 	add.w	r2, r7, #600	; 0x258
 80251c4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80251c8:	6013      	str	r3, [r2, #0]
    return result;
 80251ca:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80251ce:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(242)
 80251d0:	f507 735a 	add.w	r3, r7, #872	; 0x368
 80251d4:	681b      	ldr	r3, [r3, #0]
 80251d6:	ea02 0103 	and.w	r1, r2, r3
 80251da:	f507 735a 	add.w	r3, r7, #872	; 0x368
 80251de:	681b      	ldr	r3, [r3, #0]
 80251e0:	43da      	mvns	r2, r3
 80251e2:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 80251e6:	681b      	ldr	r3, [r3, #0]
 80251e8:	4013      	ands	r3, r2
 80251ea:	f507 7231 	add.w	r2, r7, #708	; 0x2c4
 80251ee:	404b      	eors	r3, r1
 80251f0:	6013      	str	r3, [r2, #0]
    mask = MASK_IF_ZERO(val);
 80251f2:	f507 735b 	add.w	r3, r7, #876	; 0x36c
 80251f6:	681b      	ldr	r3, [r3, #0]
 80251f8:	2b00      	cmp	r3, #0
 80251fa:	d10d      	bne.n	8025218 <arm_softmax_s8+0x2e80>
 80251fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8025200:	e00b      	b.n	802521a <arm_softmax_s8+0x2e82>
 8025202:	bf00      	nop
 8025204:	f3af 8000 	nop.w
 8025208:	02582ab7 	.word	0x02582ab7
 802520c:	000afe11 	.word	0x000afe11
 8025210:	02582ab7 	.word	0x02582ab7
 8025214:	00000000 	.word	0x00000000
 8025218:	2200      	movs	r2, #0
 802521a:	f507 735a 	add.w	r3, r7, #872	; 0x368
 802521e:	601a      	str	r2, [r3, #0]
    return SELECT_USING_MASK(mask, Q31_MAX, result);
 8025220:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8025224:	681b      	ldr	r3, [r3, #0]
 8025226:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 802522a:	f507 735a 	add.w	r3, r7, #872	; 0x368
 802522e:	681b      	ldr	r3, [r3, #0]
 8025230:	43da      	mvns	r2, r3
 8025232:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 8025236:	681b      	ldr	r3, [r3, #0]
 8025238:	4013      	ands	r3, r2
 802523a:	4059      	eors	r1, r3
 802523c:	f507 7261 	add.w	r2, r7, #900	; 0x384
 8025240:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 8025244:	6013      	str	r3, [r2, #0]
 8025246:	f507 7360 	add.w	r3, r7, #896	; 0x380
 802524a:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 802524c:	f507 725f 	add.w	r2, r7, #892	; 0x37c
 8025250:	2300      	movs	r3, #0
 8025252:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8025254:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8025258:	f04f 0300 	mov.w	r3, #0
 802525c:	e9c7 23dc 	strd	r2, r3, [r7, #880]	; 0x370
    if ((m1 < 0) ^ (m2 < 0))
 8025260:	f507 7361 	add.w	r3, r7, #900	; 0x384
 8025264:	681b      	ldr	r3, [r3, #0]
 8025266:	0fdb      	lsrs	r3, r3, #31
 8025268:	b2da      	uxtb	r2, r3
 802526a:	f507 7360 	add.w	r3, r7, #896	; 0x380
 802526e:	681b      	ldr	r3, [r3, #0]
 8025270:	0fdb      	lsrs	r3, r3, #31
 8025272:	b2db      	uxtb	r3, r3
 8025274:	4053      	eors	r3, r2
 8025276:	b2db      	uxtb	r3, r3
 8025278:	2b00      	cmp	r3, #0
 802527a:	d00e      	beq.n	802529a <arm_softmax_s8+0x2f02>
        mult = 1 - mult;
 802527c:	f04f 0001 	mov.w	r0, #1
 8025280:	f04f 0100 	mov.w	r1, #0
 8025284:	e9d7 23dc 	ldrd	r2, r3, [r7, #880]	; 0x370
 8025288:	1a84      	subs	r4, r0, r2
 802528a:	60bc      	str	r4, [r7, #8]
 802528c:	eb61 0303 	sbc.w	r3, r1, r3
 8025290:	60fb      	str	r3, [r7, #12]
 8025292:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8025296:	e9c7 34dc 	strd	r3, r4, [r7, #880]	; 0x370
    mult = mult + (q63_t)m1 * m2;
 802529a:	f507 7361 	add.w	r3, r7, #900	; 0x384
 802529e:	681b      	ldr	r3, [r3, #0]
 80252a0:	4618      	mov	r0, r3
 80252a2:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80252a6:	f507 7360 	add.w	r3, r7, #896	; 0x380
 80252aa:	681b      	ldr	r3, [r3, #0]
 80252ac:	461a      	mov	r2, r3
 80252ae:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80252b2:	fb02 f501 	mul.w	r5, r2, r1
 80252b6:	fb00 f403 	mul.w	r4, r0, r3
 80252ba:	442c      	add	r4, r5
 80252bc:	fba0 0102 	umull	r0, r1, r0, r2
 80252c0:	1863      	adds	r3, r4, r1
 80252c2:	4619      	mov	r1, r3
 80252c4:	e9d7 23dc 	ldrd	r2, r3, [r7, #880]	; 0x370
 80252c8:	1814      	adds	r4, r2, r0
 80252ca:	603c      	str	r4, [r7, #0]
 80252cc:	414b      	adcs	r3, r1
 80252ce:	607b      	str	r3, [r7, #4]
 80252d0:	e9d7 3400 	ldrd	r3, r4, [r7]
 80252d4:	e9c7 34dc 	strd	r3, r4, [r7, #880]	; 0x370
    result = (int32_t)(mult / (1ll << 31));
 80252d8:	e9d7 23dc 	ldrd	r2, r3, [r7, #880]	; 0x370
 80252dc:	4610      	mov	r0, r2
 80252de:	4619      	mov	r1, r3
 80252e0:	2800      	cmp	r0, #0
 80252e2:	f171 0300 	sbcs.w	r3, r1, #0
 80252e6:	da06      	bge.n	80252f6 <arm_softmax_s8+0x2f5e>
 80252e8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80252ec:	f04f 0300 	mov.w	r3, #0
 80252f0:	1880      	adds	r0, r0, r2
 80252f2:	eb43 0101 	adc.w	r1, r3, r1
 80252f6:	f04f 0200 	mov.w	r2, #0
 80252fa:	f04f 0300 	mov.w	r3, #0
 80252fe:	0fc2      	lsrs	r2, r0, #31
 8025300:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8025304:	17cb      	asrs	r3, r1, #31
 8025306:	4610      	mov	r0, r2
 8025308:	4619      	mov	r1, r3
 802530a:	f507 725f 	add.w	r2, r7, #892	; 0x37c
 802530e:	4603      	mov	r3, r0
 8025310:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8025312:	f507 7261 	add.w	r2, r7, #900	; 0x384
 8025316:	f507 7360 	add.w	r3, r7, #896	; 0x380
 802531a:	6812      	ldr	r2, [r2, #0]
 802531c:	681b      	ldr	r3, [r3, #0]
 802531e:	429a      	cmp	r2, r3
 8025320:	d10a      	bne.n	8025338 <arm_softmax_s8+0x2fa0>
 8025322:	f507 7361 	add.w	r3, r7, #900	; 0x384
 8025326:	681b      	ldr	r3, [r3, #0]
 8025328:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802532c:	d104      	bne.n	8025338 <arm_softmax_s8+0x2fa0>
        result = Q31_MAX;
 802532e:	f507 725f 	add.w	r2, r7, #892	; 0x37c
 8025332:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8025336:	6013      	str	r3, [r2, #0]
    return result;
 8025338:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 802533c:	681a      	ldr	r2, [r3, #0]
 802533e:	f507 7367 	add.w	r3, r7, #924	; 0x39c
 8025342:	601a      	str	r2, [r3, #0]
 8025344:	f507 7266 	add.w	r2, r7, #920	; 0x398
 8025348:	f8d7 35d8 	ldr.w	r3, [r7, #1496]	; 0x5d8
 802534c:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 802534e:	f507 7265 	add.w	r2, r7, #916	; 0x394
 8025352:	2300      	movs	r3, #0
 8025354:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8025356:	f507 7366 	add.w	r3, r7, #920	; 0x398
 802535a:	2201      	movs	r2, #1
 802535c:	681b      	ldr	r3, [r3, #0]
 802535e:	fa02 f303 	lsl.w	r3, r2, r3
 8025362:	f507 7264 	add.w	r2, r7, #912	; 0x390
 8025366:	3b01      	subs	r3, #1
 8025368:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 802536a:	f507 7163 	add.w	r1, r7, #908	; 0x38c
 802536e:	f507 7267 	add.w	r2, r7, #924	; 0x39c
 8025372:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8025376:	6812      	ldr	r2, [r2, #0]
 8025378:	681b      	ldr	r3, [r3, #0]
 802537a:	4013      	ands	r3, r2
 802537c:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 802537e:	f507 7165 	add.w	r1, r7, #916	; 0x394
 8025382:	f507 7267 	add.w	r2, r7, #924	; 0x39c
 8025386:	f507 7366 	add.w	r3, r7, #920	; 0x398
 802538a:	6812      	ldr	r2, [r2, #0]
 802538c:	681b      	ldr	r3, [r3, #0]
 802538e:	fa42 f303 	asr.w	r3, r2, r3
 8025392:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 8025394:	f507 7262 	add.w	r2, r7, #904	; 0x388
 8025398:	f507 7364 	add.w	r3, r7, #912	; 0x390
 802539c:	681b      	ldr	r3, [r3, #0]
 802539e:	105b      	asrs	r3, r3, #1
 80253a0:	6013      	str	r3, [r2, #0]
    if (result < 0)
 80253a2:	f507 7365 	add.w	r3, r7, #916	; 0x394
 80253a6:	681b      	ldr	r3, [r3, #0]
 80253a8:	2b00      	cmp	r3, #0
 80253aa:	da06      	bge.n	80253ba <arm_softmax_s8+0x3022>
        threshold++;
 80253ac:	f507 7262 	add.w	r2, r7, #904	; 0x388
 80253b0:	f507 7362 	add.w	r3, r7, #904	; 0x388
 80253b4:	681b      	ldr	r3, [r3, #0]
 80253b6:	3301      	adds	r3, #1
 80253b8:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 80253ba:	f507 7263 	add.w	r2, r7, #908	; 0x38c
 80253be:	f507 7362 	add.w	r3, r7, #904	; 0x388
 80253c2:	6812      	ldr	r2, [r2, #0]
 80253c4:	681b      	ldr	r3, [r3, #0]
 80253c6:	429a      	cmp	r2, r3
 80253c8:	dd06      	ble.n	80253d8 <arm_softmax_s8+0x3040>
        result++;
 80253ca:	f507 7265 	add.w	r2, r7, #916	; 0x394
 80253ce:	f507 7365 	add.w	r3, r7, #916	; 0x394
 80253d2:	681b      	ldr	r3, [r3, #0]
 80253d4:	3301      	adds	r3, #1
 80253d6:	6013      	str	r3, [r2, #0]
    return result;
 80253d8:	f507 7365 	add.w	r3, r7, #916	; 0x394
 80253dc:	681b      	ldr	r3, [r3, #0]
                const int32_t res =
 80253de:	3b80      	subs	r3, #128	; 0x80
 80253e0:	f8c7 35d0 	str.w	r3, [r7, #1488]	; 0x5d0
                output[col] = (int8_t)CLAMP(res, (int32_t)127, (int32_t)-128);
 80253e4:	f8d7 35d0 	ldr.w	r3, [r7, #1488]	; 0x5d0
 80253e8:	f113 0f7f 	cmn.w	r3, #127	; 0x7f
 80253ec:	db09      	blt.n	8025402 <arm_softmax_s8+0x306a>
 80253ee:	f8d7 35d0 	ldr.w	r3, [r7, #1488]	; 0x5d0
 80253f2:	2b7e      	cmp	r3, #126	; 0x7e
 80253f4:	dc03      	bgt.n	80253fe <arm_softmax_s8+0x3066>
 80253f6:	f8d7 35d0 	ldr.w	r3, [r7, #1488]	; 0x5d0
 80253fa:	b259      	sxtb	r1, r3
 80253fc:	e003      	b.n	8025406 <arm_softmax_s8+0x306e>
 80253fe:	217f      	movs	r1, #127	; 0x7f
 8025400:	e001      	b.n	8025406 <arm_softmax_s8+0x306e>
 8025402:	f06f 017f 	mvn.w	r1, #127	; 0x7f
 8025406:	f8d7 25f4 	ldr.w	r2, [r7, #1524]	; 0x5f4
 802540a:	f8d7 3620 	ldr.w	r3, [r7, #1568]	; 0x620
 802540e:	441a      	add	r2, r3
 8025410:	460b      	mov	r3, r1
 8025412:	7013      	strb	r3, [r2, #0]
 8025414:	e006      	b.n	8025424 <arm_softmax_s8+0x308c>
            }
            else
            {
                output[col] = -128;
 8025416:	f8d7 25f4 	ldr.w	r2, [r7, #1524]	; 0x5f4
 802541a:	f8d7 3620 	ldr.w	r3, [r7, #1568]	; 0x620
 802541e:	441a      	add	r2, r3
 8025420:	2380      	movs	r3, #128	; 0x80
 8025422:	7013      	strb	r3, [r2, #0]
        for (col = 0; col < row_size; ++col)
 8025424:	f8d7 35f4 	ldr.w	r3, [r7, #1524]	; 0x5f4
 8025428:	3301      	adds	r3, #1
 802542a:	f8c7 35f4 	str.w	r3, [r7, #1524]	; 0x5f4
 802542e:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 8025432:	f8d7 25f4 	ldr.w	r2, [r7, #1524]	; 0x5f4
 8025436:	681b      	ldr	r3, [r3, #0]
 8025438:	429a      	cmp	r2, r3
 802543a:	f6fe ae81 	blt.w	8024140 <arm_softmax_s8+0x1da8>
            }
        }
        input += row_size;
 802543e:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 8025442:	6819      	ldr	r1, [r3, #0]
 8025444:	f507 720d 	add.w	r2, r7, #564	; 0x234
 8025448:	f507 730d 	add.w	r3, r7, #564	; 0x234
 802544c:	681b      	ldr	r3, [r3, #0]
 802544e:	440b      	add	r3, r1
 8025450:	6013      	str	r3, [r2, #0]
        output += row_size;
 8025452:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 8025456:	681a      	ldr	r2, [r3, #0]
 8025458:	f8d7 3620 	ldr.w	r3, [r7, #1568]	; 0x620
 802545c:	4413      	add	r3, r2
 802545e:	f8c7 3620 	str.w	r3, [r7, #1568]	; 0x620
    for (row_idx = 0; row_idx < num_rows; ++row_idx)
 8025462:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 8025466:	3301      	adds	r3, #1
 8025468:	f8c7 35f0 	str.w	r3, [r7, #1520]	; 0x5f0
 802546c:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8025470:	f8d7 25f0 	ldr.w	r2, [r7, #1520]	; 0x5f0
 8025474:	681b      	ldr	r3, [r3, #0]
 8025476:	429a      	cmp	r2, r3
 8025478:	f6fc afae 	blt.w	80223d8 <arm_softmax_s8+0x40>
    }

#endif
}
 802547c:	bf00      	nop
 802547e:	bf00      	nop
 8025480:	f507 67bf 	add.w	r7, r7, #1528	; 0x5f8
 8025484:	46bd      	mov	sp, r7
 8025486:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 802548a:	4770      	bx	lr

0802548c <_ZNK6tflite12OperatorCode23deprecated_builtin_codeEv>:
  int8_t deprecated_builtin_code() const {
 802548c:	b580      	push	{r7, lr}
 802548e:	b082      	sub	sp, #8
 8025490:	af00      	add	r7, sp, #0
 8025492:	6078      	str	r0, [r7, #4]
    return GetField<int8_t>(VT_DEPRECATED_BUILTIN_CODE, 0);
 8025494:	687b      	ldr	r3, [r7, #4]
 8025496:	2200      	movs	r2, #0
 8025498:	2104      	movs	r1, #4
 802549a:	4618      	mov	r0, r3
 802549c:	f7e4 f854 	bl	8009548 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 80254a0:	4603      	mov	r3, r0
  }
 80254a2:	4618      	mov	r0, r3
 80254a4:	3708      	adds	r7, #8
 80254a6:	46bd      	mov	sp, r7
 80254a8:	bd80      	pop	{r7, pc}

080254aa <_ZNK6tflite12OperatorCode12builtin_codeEv>:
  tflite::BuiltinOperator builtin_code() const {
 80254aa:	b580      	push	{r7, lr}
 80254ac:	b082      	sub	sp, #8
 80254ae:	af00      	add	r7, sp, #0
 80254b0:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::BuiltinOperator>(GetField<int32_t>(VT_BUILTIN_CODE, 0));
 80254b2:	687b      	ldr	r3, [r7, #4]
 80254b4:	2200      	movs	r2, #0
 80254b6:	210a      	movs	r1, #10
 80254b8:	4618      	mov	r0, r3
 80254ba:	f7e4 f817 	bl	80094ec <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 80254be:	4603      	mov	r3, r0
 80254c0:	b2db      	uxtb	r3, r3
  }
 80254c2:	4618      	mov	r0, r3
 80254c4:	3708      	adds	r7, #8
 80254c6:	46bd      	mov	sp, r7
 80254c8:	bd80      	pop	{r7, pc}

080254ca <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>:
// assigned to the `deprecated_builtin_code` field. In such cases, the
// value of the `builtin_code` field should be used for the builtin operator
// code. In the case, the maximum value of the two fields will be the value of
// the `builtin_code` as the right value.

BuiltinOperator GetBuiltinCode(const OperatorCode* op_code) {
 80254ca:	b580      	push	{r7, lr}
 80254cc:	b084      	sub	sp, #16
 80254ce:	af00      	add	r7, sp, #0
 80254d0:	6078      	str	r0, [r7, #4]
  // Caller should guarantee that the given argument value is not a nullptr.
  TFLITE_DCHECK(op_code != nullptr);
 80254d2:	687b      	ldr	r3, [r7, #4]
 80254d4:	2b00      	cmp	r3, #0
 80254d6:	d101      	bne.n	80254dc <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x12>
 80254d8:	f000 fab5 	bl	8025a46 <abort>

  return std::max(
      op_code->builtin_code(),
 80254dc:	6878      	ldr	r0, [r7, #4]
 80254de:	f7ff ffe4 	bl	80254aa <_ZNK6tflite12OperatorCode12builtin_codeEv>
 80254e2:	4603      	mov	r3, r0
 80254e4:	73bb      	strb	r3, [r7, #14]
      static_cast<BuiltinOperator>(op_code->deprecated_builtin_code()));
 80254e6:	6878      	ldr	r0, [r7, #4]
 80254e8:	f7ff ffd0 	bl	802548c <_ZNK6tflite12OperatorCode23deprecated_builtin_codeEv>
 80254ec:	4603      	mov	r3, r0
 80254ee:	b2db      	uxtb	r3, r3
 80254f0:	73fb      	strb	r3, [r7, #15]
 80254f2:	f107 020f 	add.w	r2, r7, #15
 80254f6:	f107 030e 	add.w	r3, r7, #14
 80254fa:	4611      	mov	r1, r2
 80254fc:	4618      	mov	r0, r3
 80254fe:	f000 f806 	bl	802550e <_ZSt3maxIN6tflite15BuiltinOperatorEERKT_S4_S4_>
 8025502:	4603      	mov	r3, r0
 8025504:	781b      	ldrb	r3, [r3, #0]
}
 8025506:	4618      	mov	r0, r3
 8025508:	3710      	adds	r7, #16
 802550a:	46bd      	mov	sp, r7
 802550c:	bd80      	pop	{r7, pc}

0802550e <_ZSt3maxIN6tflite15BuiltinOperatorEERKT_S4_S4_>:
    max(const _Tp& __a, const _Tp& __b)
 802550e:	b480      	push	{r7}
 8025510:	b083      	sub	sp, #12
 8025512:	af00      	add	r7, sp, #0
 8025514:	6078      	str	r0, [r7, #4]
 8025516:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8025518:	687b      	ldr	r3, [r7, #4]
 802551a:	781a      	ldrb	r2, [r3, #0]
 802551c:	683b      	ldr	r3, [r7, #0]
 802551e:	781b      	ldrb	r3, [r3, #0]
 8025520:	429a      	cmp	r2, r3
 8025522:	d201      	bcs.n	8025528 <_ZSt3maxIN6tflite15BuiltinOperatorEERKT_S4_S4_+0x1a>
	return __b;
 8025524:	683b      	ldr	r3, [r7, #0]
 8025526:	e000      	b.n	802552a <_ZSt3maxIN6tflite15BuiltinOperatorEERKT_S4_S4_+0x1c>
      return __a;
 8025528:	687b      	ldr	r3, [r7, #4]
    }
 802552a:	4618      	mov	r0, r3
 802552c:	370c      	adds	r7, #12
 802552e:	46bd      	mov	sp, r7
 8025530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025534:	4770      	bx	lr

08025536 <_ZdlPv>:
 8025536:	f000 bb67 	b.w	8025c08 <free>

0802553a <_ZdlPvj>:
 802553a:	f7ff bffc 	b.w	8025536 <_ZdlPv>

0802553e <_ZdaPv>:
 802553e:	f7ff bffa 	b.w	8025536 <_ZdlPv>

08025542 <__cxa_guard_acquire>:
 8025542:	6803      	ldr	r3, [r0, #0]
 8025544:	07db      	lsls	r3, r3, #31
 8025546:	d406      	bmi.n	8025556 <__cxa_guard_acquire+0x14>
 8025548:	7843      	ldrb	r3, [r0, #1]
 802554a:	b103      	cbz	r3, 802554e <__cxa_guard_acquire+0xc>
 802554c:	deff      	udf	#255	; 0xff
 802554e:	2301      	movs	r3, #1
 8025550:	7043      	strb	r3, [r0, #1]
 8025552:	4618      	mov	r0, r3
 8025554:	4770      	bx	lr
 8025556:	2000      	movs	r0, #0
 8025558:	4770      	bx	lr

0802555a <__cxa_guard_release>:
 802555a:	2301      	movs	r3, #1
 802555c:	6003      	str	r3, [r0, #0]
 802555e:	4770      	bx	lr

08025560 <_Znwj>:
 8025560:	2801      	cmp	r0, #1
 8025562:	bf38      	it	cc
 8025564:	2001      	movcc	r0, #1
 8025566:	b510      	push	{r4, lr}
 8025568:	4604      	mov	r4, r0
 802556a:	4620      	mov	r0, r4
 802556c:	f000 fb44 	bl	8025bf8 <malloc>
 8025570:	b930      	cbnz	r0, 8025580 <_Znwj+0x20>
 8025572:	f000 f81d 	bl	80255b0 <_ZSt15get_new_handlerv>
 8025576:	b908      	cbnz	r0, 802557c <_Znwj+0x1c>
 8025578:	f000 fa65 	bl	8025a46 <abort>
 802557c:	4780      	blx	r0
 802557e:	e7f4      	b.n	802556a <_Znwj+0xa>
 8025580:	bd10      	pop	{r4, pc}

08025582 <_Znaj>:
 8025582:	f7ff bfed 	b.w	8025560 <_Znwj>

08025586 <__cxa_pure_virtual>:
 8025586:	b508      	push	{r3, lr}
 8025588:	f000 f80c 	bl	80255a4 <_ZSt9terminatev>

0802558c <_ZN10__cxxabiv111__terminateEPFvvE>:
 802558c:	b508      	push	{r3, lr}
 802558e:	4780      	blx	r0
 8025590:	f000 fa59 	bl	8025a46 <abort>

08025594 <_ZSt13get_terminatev>:
 8025594:	4b02      	ldr	r3, [pc, #8]	; (80255a0 <_ZSt13get_terminatev+0xc>)
 8025596:	6818      	ldr	r0, [r3, #0]
 8025598:	f3bf 8f5b 	dmb	ish
 802559c:	4770      	bx	lr
 802559e:	bf00      	nop
 80255a0:	20000014 	.word	0x20000014

080255a4 <_ZSt9terminatev>:
 80255a4:	b508      	push	{r3, lr}
 80255a6:	f7ff fff5 	bl	8025594 <_ZSt13get_terminatev>
 80255aa:	f7ff ffef 	bl	802558c <_ZN10__cxxabiv111__terminateEPFvvE>
	...

080255b0 <_ZSt15get_new_handlerv>:
 80255b0:	4b02      	ldr	r3, [pc, #8]	; (80255bc <_ZSt15get_new_handlerv+0xc>)
 80255b2:	6818      	ldr	r0, [r3, #0]
 80255b4:	f3bf 8f5b 	dmb	ish
 80255b8:	4770      	bx	lr
 80255ba:	bf00      	nop
 80255bc:	2004a4c8 	.word	0x2004a4c8

080255c0 <floor>:
 80255c0:	ec51 0b10 	vmov	r0, r1, d0
 80255c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80255c8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80255cc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80255d0:	2e13      	cmp	r6, #19
 80255d2:	ee10 5a10 	vmov	r5, s0
 80255d6:	ee10 8a10 	vmov	r8, s0
 80255da:	460c      	mov	r4, r1
 80255dc:	dc32      	bgt.n	8025644 <floor+0x84>
 80255de:	2e00      	cmp	r6, #0
 80255e0:	da14      	bge.n	802560c <floor+0x4c>
 80255e2:	a333      	add	r3, pc, #204	; (adr r3, 80256b0 <floor+0xf0>)
 80255e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80255e8:	f7da fe82 	bl	80002f0 <__adddf3>
 80255ec:	2200      	movs	r2, #0
 80255ee:	2300      	movs	r3, #0
 80255f0:	f7db fac4 	bl	8000b7c <__aeabi_dcmpgt>
 80255f4:	b138      	cbz	r0, 8025606 <floor+0x46>
 80255f6:	2c00      	cmp	r4, #0
 80255f8:	da57      	bge.n	80256aa <floor+0xea>
 80255fa:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80255fe:	431d      	orrs	r5, r3
 8025600:	d001      	beq.n	8025606 <floor+0x46>
 8025602:	4c2d      	ldr	r4, [pc, #180]	; (80256b8 <floor+0xf8>)
 8025604:	2500      	movs	r5, #0
 8025606:	4621      	mov	r1, r4
 8025608:	4628      	mov	r0, r5
 802560a:	e025      	b.n	8025658 <floor+0x98>
 802560c:	4f2b      	ldr	r7, [pc, #172]	; (80256bc <floor+0xfc>)
 802560e:	4137      	asrs	r7, r6
 8025610:	ea01 0307 	and.w	r3, r1, r7
 8025614:	4303      	orrs	r3, r0
 8025616:	d01f      	beq.n	8025658 <floor+0x98>
 8025618:	a325      	add	r3, pc, #148	; (adr r3, 80256b0 <floor+0xf0>)
 802561a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802561e:	f7da fe67 	bl	80002f0 <__adddf3>
 8025622:	2200      	movs	r2, #0
 8025624:	2300      	movs	r3, #0
 8025626:	f7db faa9 	bl	8000b7c <__aeabi_dcmpgt>
 802562a:	2800      	cmp	r0, #0
 802562c:	d0eb      	beq.n	8025606 <floor+0x46>
 802562e:	2c00      	cmp	r4, #0
 8025630:	bfbe      	ittt	lt
 8025632:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8025636:	fa43 f606 	asrlt.w	r6, r3, r6
 802563a:	19a4      	addlt	r4, r4, r6
 802563c:	ea24 0407 	bic.w	r4, r4, r7
 8025640:	2500      	movs	r5, #0
 8025642:	e7e0      	b.n	8025606 <floor+0x46>
 8025644:	2e33      	cmp	r6, #51	; 0x33
 8025646:	dd0b      	ble.n	8025660 <floor+0xa0>
 8025648:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 802564c:	d104      	bne.n	8025658 <floor+0x98>
 802564e:	ee10 2a10 	vmov	r2, s0
 8025652:	460b      	mov	r3, r1
 8025654:	f7da fe4c 	bl	80002f0 <__adddf3>
 8025658:	ec41 0b10 	vmov	d0, r0, r1
 802565c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025660:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8025664:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8025668:	fa23 f707 	lsr.w	r7, r3, r7
 802566c:	4207      	tst	r7, r0
 802566e:	d0f3      	beq.n	8025658 <floor+0x98>
 8025670:	a30f      	add	r3, pc, #60	; (adr r3, 80256b0 <floor+0xf0>)
 8025672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025676:	f7da fe3b 	bl	80002f0 <__adddf3>
 802567a:	2200      	movs	r2, #0
 802567c:	2300      	movs	r3, #0
 802567e:	f7db fa7d 	bl	8000b7c <__aeabi_dcmpgt>
 8025682:	2800      	cmp	r0, #0
 8025684:	d0bf      	beq.n	8025606 <floor+0x46>
 8025686:	2c00      	cmp	r4, #0
 8025688:	da02      	bge.n	8025690 <floor+0xd0>
 802568a:	2e14      	cmp	r6, #20
 802568c:	d103      	bne.n	8025696 <floor+0xd6>
 802568e:	3401      	adds	r4, #1
 8025690:	ea25 0507 	bic.w	r5, r5, r7
 8025694:	e7b7      	b.n	8025606 <floor+0x46>
 8025696:	2301      	movs	r3, #1
 8025698:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 802569c:	fa03 f606 	lsl.w	r6, r3, r6
 80256a0:	4435      	add	r5, r6
 80256a2:	4545      	cmp	r5, r8
 80256a4:	bf38      	it	cc
 80256a6:	18e4      	addcc	r4, r4, r3
 80256a8:	e7f2      	b.n	8025690 <floor+0xd0>
 80256aa:	2500      	movs	r5, #0
 80256ac:	462c      	mov	r4, r5
 80256ae:	e7aa      	b.n	8025606 <floor+0x46>
 80256b0:	8800759c 	.word	0x8800759c
 80256b4:	7e37e43c 	.word	0x7e37e43c
 80256b8:	bff00000 	.word	0xbff00000
 80256bc:	000fffff 	.word	0x000fffff

080256c0 <frexp>:
 80256c0:	b570      	push	{r4, r5, r6, lr}
 80256c2:	2100      	movs	r1, #0
 80256c4:	ec55 4b10 	vmov	r4, r5, d0
 80256c8:	6001      	str	r1, [r0, #0]
 80256ca:	4916      	ldr	r1, [pc, #88]	; (8025724 <frexp+0x64>)
 80256cc:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 80256d0:	428a      	cmp	r2, r1
 80256d2:	4606      	mov	r6, r0
 80256d4:	462b      	mov	r3, r5
 80256d6:	dc22      	bgt.n	802571e <frexp+0x5e>
 80256d8:	ee10 1a10 	vmov	r1, s0
 80256dc:	4311      	orrs	r1, r2
 80256de:	d01e      	beq.n	802571e <frexp+0x5e>
 80256e0:	4911      	ldr	r1, [pc, #68]	; (8025728 <frexp+0x68>)
 80256e2:	4029      	ands	r1, r5
 80256e4:	b969      	cbnz	r1, 8025702 <frexp+0x42>
 80256e6:	4b11      	ldr	r3, [pc, #68]	; (802572c <frexp+0x6c>)
 80256e8:	2200      	movs	r2, #0
 80256ea:	ee10 0a10 	vmov	r0, s0
 80256ee:	4629      	mov	r1, r5
 80256f0:	f7da ffb4 	bl	800065c <__aeabi_dmul>
 80256f4:	460b      	mov	r3, r1
 80256f6:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80256fa:	f06f 0135 	mvn.w	r1, #53	; 0x35
 80256fe:	4604      	mov	r4, r0
 8025700:	6031      	str	r1, [r6, #0]
 8025702:	6831      	ldr	r1, [r6, #0]
 8025704:	1512      	asrs	r2, r2, #20
 8025706:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802570a:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 802570e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8025712:	440a      	add	r2, r1
 8025714:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 8025718:	6032      	str	r2, [r6, #0]
 802571a:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 802571e:	ec45 4b10 	vmov	d0, r4, r5
 8025722:	bd70      	pop	{r4, r5, r6, pc}
 8025724:	7fefffff 	.word	0x7fefffff
 8025728:	7ff00000 	.word	0x7ff00000
 802572c:	43500000 	.word	0x43500000

08025730 <round>:
 8025730:	ec51 0b10 	vmov	r0, r1, d0
 8025734:	b570      	push	{r4, r5, r6, lr}
 8025736:	f3c1 550a 	ubfx	r5, r1, #20, #11
 802573a:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 802573e:	2c13      	cmp	r4, #19
 8025740:	ee10 2a10 	vmov	r2, s0
 8025744:	460b      	mov	r3, r1
 8025746:	dc19      	bgt.n	802577c <round+0x4c>
 8025748:	2c00      	cmp	r4, #0
 802574a:	da09      	bge.n	8025760 <round+0x30>
 802574c:	3401      	adds	r4, #1
 802574e:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8025752:	d103      	bne.n	802575c <round+0x2c>
 8025754:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8025758:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 802575c:	2100      	movs	r1, #0
 802575e:	e028      	b.n	80257b2 <round+0x82>
 8025760:	4d15      	ldr	r5, [pc, #84]	; (80257b8 <round+0x88>)
 8025762:	4125      	asrs	r5, r4
 8025764:	ea01 0605 	and.w	r6, r1, r5
 8025768:	4332      	orrs	r2, r6
 802576a:	d00e      	beq.n	802578a <round+0x5a>
 802576c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8025770:	fa42 f404 	asr.w	r4, r2, r4
 8025774:	4423      	add	r3, r4
 8025776:	ea23 0305 	bic.w	r3, r3, r5
 802577a:	e7ef      	b.n	802575c <round+0x2c>
 802577c:	2c33      	cmp	r4, #51	; 0x33
 802577e:	dd07      	ble.n	8025790 <round+0x60>
 8025780:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8025784:	d101      	bne.n	802578a <round+0x5a>
 8025786:	f7da fdb3 	bl	80002f0 <__adddf3>
 802578a:	ec41 0b10 	vmov	d0, r0, r1
 802578e:	bd70      	pop	{r4, r5, r6, pc}
 8025790:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8025794:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8025798:	40f5      	lsrs	r5, r6
 802579a:	4228      	tst	r0, r5
 802579c:	d0f5      	beq.n	802578a <round+0x5a>
 802579e:	2101      	movs	r1, #1
 80257a0:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 80257a4:	fa01 f404 	lsl.w	r4, r1, r4
 80257a8:	1912      	adds	r2, r2, r4
 80257aa:	bf28      	it	cs
 80257ac:	185b      	addcs	r3, r3, r1
 80257ae:	ea22 0105 	bic.w	r1, r2, r5
 80257b2:	4608      	mov	r0, r1
 80257b4:	4619      	mov	r1, r3
 80257b6:	e7e8      	b.n	802578a <round+0x5a>
 80257b8:	000fffff 	.word	0x000fffff

080257bc <roundf>:
 80257bc:	ee10 0a10 	vmov	r0, s0
 80257c0:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80257c4:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 80257c8:	2a16      	cmp	r2, #22
 80257ca:	dc15      	bgt.n	80257f8 <roundf+0x3c>
 80257cc:	2a00      	cmp	r2, #0
 80257ce:	da08      	bge.n	80257e2 <roundf+0x26>
 80257d0:	3201      	adds	r2, #1
 80257d2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80257d6:	d101      	bne.n	80257dc <roundf+0x20>
 80257d8:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 80257dc:	ee00 3a10 	vmov	s0, r3
 80257e0:	4770      	bx	lr
 80257e2:	4908      	ldr	r1, [pc, #32]	; (8025804 <roundf+0x48>)
 80257e4:	4111      	asrs	r1, r2
 80257e6:	4208      	tst	r0, r1
 80257e8:	d0fa      	beq.n	80257e0 <roundf+0x24>
 80257ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80257ee:	4113      	asrs	r3, r2
 80257f0:	4403      	add	r3, r0
 80257f2:	ea23 0301 	bic.w	r3, r3, r1
 80257f6:	e7f1      	b.n	80257dc <roundf+0x20>
 80257f8:	2a80      	cmp	r2, #128	; 0x80
 80257fa:	d1f1      	bne.n	80257e0 <roundf+0x24>
 80257fc:	ee30 0a00 	vadd.f32	s0, s0, s0
 8025800:	4770      	bx	lr
 8025802:	bf00      	nop
 8025804:	007fffff 	.word	0x007fffff

08025808 <expf>:
 8025808:	b508      	push	{r3, lr}
 802580a:	ed2d 8b02 	vpush	{d8}
 802580e:	eef0 8a40 	vmov.f32	s17, s0
 8025812:	f000 f837 	bl	8025884 <__ieee754_expf>
 8025816:	4b16      	ldr	r3, [pc, #88]	; (8025870 <expf+0x68>)
 8025818:	f993 3000 	ldrsb.w	r3, [r3]
 802581c:	3301      	adds	r3, #1
 802581e:	eeb0 8a40 	vmov.f32	s16, s0
 8025822:	d011      	beq.n	8025848 <expf+0x40>
 8025824:	eeb0 0a68 	vmov.f32	s0, s17
 8025828:	f000 f900 	bl	8025a2c <finitef>
 802582c:	b160      	cbz	r0, 8025848 <expf+0x40>
 802582e:	eddf 7a11 	vldr	s15, [pc, #68]	; 8025874 <expf+0x6c>
 8025832:	eef4 8ae7 	vcmpe.f32	s17, s15
 8025836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802583a:	dd0a      	ble.n	8025852 <expf+0x4a>
 802583c:	f000 f92e 	bl	8025a9c <__errno>
 8025840:	ed9f 8a0d 	vldr	s16, [pc, #52]	; 8025878 <expf+0x70>
 8025844:	2322      	movs	r3, #34	; 0x22
 8025846:	6003      	str	r3, [r0, #0]
 8025848:	eeb0 0a48 	vmov.f32	s0, s16
 802584c:	ecbd 8b02 	vpop	{d8}
 8025850:	bd08      	pop	{r3, pc}
 8025852:	eddf 7a0a 	vldr	s15, [pc, #40]	; 802587c <expf+0x74>
 8025856:	eef4 8ae7 	vcmpe.f32	s17, s15
 802585a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802585e:	d5f3      	bpl.n	8025848 <expf+0x40>
 8025860:	f000 f91c 	bl	8025a9c <__errno>
 8025864:	2322      	movs	r3, #34	; 0x22
 8025866:	ed9f 8a06 	vldr	s16, [pc, #24]	; 8025880 <expf+0x78>
 802586a:	6003      	str	r3, [r0, #0]
 802586c:	e7ec      	b.n	8025848 <expf+0x40>
 802586e:	bf00      	nop
 8025870:	20000018 	.word	0x20000018
 8025874:	42b17180 	.word	0x42b17180
 8025878:	7f800000 	.word	0x7f800000
 802587c:	c2cff1b5 	.word	0xc2cff1b5
 8025880:	00000000 	.word	0x00000000

08025884 <__ieee754_expf>:
 8025884:	ee10 2a10 	vmov	r2, s0
 8025888:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 802588c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8025890:	d902      	bls.n	8025898 <__ieee754_expf+0x14>
 8025892:	ee30 0a00 	vadd.f32	s0, s0, s0
 8025896:	4770      	bx	lr
 8025898:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 802589c:	d106      	bne.n	80258ac <__ieee754_expf+0x28>
 802589e:	eddf 7a51 	vldr	s15, [pc, #324]	; 80259e4 <__ieee754_expf+0x160>
 80258a2:	2b00      	cmp	r3, #0
 80258a4:	bf18      	it	ne
 80258a6:	eeb0 0a67 	vmovne.f32	s0, s15
 80258aa:	4770      	bx	lr
 80258ac:	484e      	ldr	r0, [pc, #312]	; (80259e8 <__ieee754_expf+0x164>)
 80258ae:	4282      	cmp	r2, r0
 80258b0:	dd04      	ble.n	80258bc <__ieee754_expf+0x38>
 80258b2:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 80259ec <__ieee754_expf+0x168>
 80258b6:	ee20 0a00 	vmul.f32	s0, s0, s0
 80258ba:	4770      	bx	lr
 80258bc:	2a00      	cmp	r2, #0
 80258be:	da03      	bge.n	80258c8 <__ieee754_expf+0x44>
 80258c0:	4a4b      	ldr	r2, [pc, #300]	; (80259f0 <__ieee754_expf+0x16c>)
 80258c2:	4291      	cmp	r1, r2
 80258c4:	f200 808a 	bhi.w	80259dc <__ieee754_expf+0x158>
 80258c8:	4a4a      	ldr	r2, [pc, #296]	; (80259f4 <__ieee754_expf+0x170>)
 80258ca:	4291      	cmp	r1, r2
 80258cc:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80258d0:	d954      	bls.n	802597c <__ieee754_expf+0xf8>
 80258d2:	4a49      	ldr	r2, [pc, #292]	; (80259f8 <__ieee754_expf+0x174>)
 80258d4:	4291      	cmp	r1, r2
 80258d6:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80258da:	d836      	bhi.n	802594a <__ieee754_expf+0xc6>
 80258dc:	4947      	ldr	r1, [pc, #284]	; (80259fc <__ieee754_expf+0x178>)
 80258de:	4411      	add	r1, r2
 80258e0:	ed91 7a00 	vldr	s14, [r1]
 80258e4:	4946      	ldr	r1, [pc, #280]	; (8025a00 <__ieee754_expf+0x17c>)
 80258e6:	440a      	add	r2, r1
 80258e8:	edd2 7a00 	vldr	s15, [r2]
 80258ec:	ee30 7a47 	vsub.f32	s14, s0, s14
 80258f0:	f1c3 0201 	rsb	r2, r3, #1
 80258f4:	1ad2      	subs	r2, r2, r3
 80258f6:	ee37 0a67 	vsub.f32	s0, s14, s15
 80258fa:	ee60 6a00 	vmul.f32	s13, s0, s0
 80258fe:	eddf 5a41 	vldr	s11, [pc, #260]	; 8025a04 <__ieee754_expf+0x180>
 8025902:	ed9f 5a41 	vldr	s10, [pc, #260]	; 8025a08 <__ieee754_expf+0x184>
 8025906:	eea6 5aa5 	vfma.f32	s10, s13, s11
 802590a:	eddf 5a40 	vldr	s11, [pc, #256]	; 8025a0c <__ieee754_expf+0x188>
 802590e:	eee5 5a26 	vfma.f32	s11, s10, s13
 8025912:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 8025a10 <__ieee754_expf+0x18c>
 8025916:	eea5 5aa6 	vfma.f32	s10, s11, s13
 802591a:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8025a14 <__ieee754_expf+0x190>
 802591e:	eee5 5a26 	vfma.f32	s11, s10, s13
 8025922:	eeb0 5a40 	vmov.f32	s10, s0
 8025926:	eea5 5ae6 	vfms.f32	s10, s11, s13
 802592a:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 802592e:	eef0 6a45 	vmov.f32	s13, s10
 8025932:	ee20 5a05 	vmul.f32	s10, s0, s10
 8025936:	bb92      	cbnz	r2, 802599e <__ieee754_expf+0x11a>
 8025938:	ee76 6ae5 	vsub.f32	s13, s13, s11
 802593c:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8025940:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8025944:	ee36 0a40 	vsub.f32	s0, s12, s0
 8025948:	4770      	bx	lr
 802594a:	4b33      	ldr	r3, [pc, #204]	; (8025a18 <__ieee754_expf+0x194>)
 802594c:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8025a1c <__ieee754_expf+0x198>
 8025950:	4413      	add	r3, r2
 8025952:	edd3 7a00 	vldr	s15, [r3]
 8025956:	eee0 7a07 	vfma.f32	s15, s0, s14
 802595a:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8025a20 <__ieee754_expf+0x19c>
 802595e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8025962:	ee17 2a90 	vmov	r2, s15
 8025966:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802596a:	eea7 0ac7 	vfms.f32	s0, s15, s14
 802596e:	eeb0 7a40 	vmov.f32	s14, s0
 8025972:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8025a24 <__ieee754_expf+0x1a0>
 8025976:	ee67 7a80 	vmul.f32	s15, s15, s0
 802597a:	e7bc      	b.n	80258f6 <__ieee754_expf+0x72>
 802597c:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 8025980:	d20b      	bcs.n	802599a <__ieee754_expf+0x116>
 8025982:	eddf 6a1a 	vldr	s13, [pc, #104]	; 80259ec <__ieee754_expf+0x168>
 8025986:	ee70 6a26 	vadd.f32	s13, s0, s13
 802598a:	eef4 6ac6 	vcmpe.f32	s13, s12
 802598e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025992:	dd02      	ble.n	802599a <__ieee754_expf+0x116>
 8025994:	ee30 0a06 	vadd.f32	s0, s0, s12
 8025998:	4770      	bx	lr
 802599a:	2200      	movs	r2, #0
 802599c:	e7ad      	b.n	80258fa <__ieee754_expf+0x76>
 802599e:	ee75 6ae6 	vsub.f32	s13, s11, s13
 80259a2:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 80259a6:	ee85 0a26 	vdiv.f32	s0, s10, s13
 80259aa:	bfb8      	it	lt
 80259ac:	3264      	addlt	r2, #100	; 0x64
 80259ae:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80259b2:	ee37 0ac7 	vsub.f32	s0, s15, s14
 80259b6:	ee76 7a40 	vsub.f32	s15, s12, s0
 80259ba:	ee17 3a90 	vmov	r3, s15
 80259be:	bfab      	itete	ge
 80259c0:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 80259c4:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 80259c8:	ee00 3a10 	vmovge	s0, r3
 80259cc:	eddf 7a16 	vldrlt	s15, [pc, #88]	; 8025a28 <__ieee754_expf+0x1a4>
 80259d0:	bfbc      	itt	lt
 80259d2:	ee00 3a10 	vmovlt	s0, r3
 80259d6:	ee20 0a27 	vmullt.f32	s0, s0, s15
 80259da:	4770      	bx	lr
 80259dc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80259e4 <__ieee754_expf+0x160>
 80259e0:	4770      	bx	lr
 80259e2:	bf00      	nop
 80259e4:	00000000 	.word	0x00000000
 80259e8:	42b17217 	.word	0x42b17217
 80259ec:	7149f2ca 	.word	0x7149f2ca
 80259f0:	42cff1b5 	.word	0x42cff1b5
 80259f4:	3eb17218 	.word	0x3eb17218
 80259f8:	3f851591 	.word	0x3f851591
 80259fc:	08076108 	.word	0x08076108
 8025a00:	08076110 	.word	0x08076110
 8025a04:	3331bb4c 	.word	0x3331bb4c
 8025a08:	b5ddea0e 	.word	0xb5ddea0e
 8025a0c:	388ab355 	.word	0x388ab355
 8025a10:	bb360b61 	.word	0xbb360b61
 8025a14:	3e2aaaab 	.word	0x3e2aaaab
 8025a18:	08076100 	.word	0x08076100
 8025a1c:	3fb8aa3b 	.word	0x3fb8aa3b
 8025a20:	3f317180 	.word	0x3f317180
 8025a24:	3717f7d1 	.word	0x3717f7d1
 8025a28:	0d800000 	.word	0x0d800000

08025a2c <finitef>:
 8025a2c:	b082      	sub	sp, #8
 8025a2e:	ed8d 0a01 	vstr	s0, [sp, #4]
 8025a32:	9801      	ldr	r0, [sp, #4]
 8025a34:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8025a38:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8025a3c:	bfac      	ite	ge
 8025a3e:	2000      	movge	r0, #0
 8025a40:	2001      	movlt	r0, #1
 8025a42:	b002      	add	sp, #8
 8025a44:	4770      	bx	lr

08025a46 <abort>:
 8025a46:	b508      	push	{r3, lr}
 8025a48:	2006      	movs	r0, #6
 8025a4a:	f000 fccb 	bl	80263e4 <raise>
 8025a4e:	2001      	movs	r0, #1
 8025a50:	f7dc ff16 	bl	8002880 <_exit>

08025a54 <__assert_func>:
 8025a54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8025a56:	4614      	mov	r4, r2
 8025a58:	461a      	mov	r2, r3
 8025a5a:	4b09      	ldr	r3, [pc, #36]	; (8025a80 <__assert_func+0x2c>)
 8025a5c:	681b      	ldr	r3, [r3, #0]
 8025a5e:	4605      	mov	r5, r0
 8025a60:	68d8      	ldr	r0, [r3, #12]
 8025a62:	b14c      	cbz	r4, 8025a78 <__assert_func+0x24>
 8025a64:	4b07      	ldr	r3, [pc, #28]	; (8025a84 <__assert_func+0x30>)
 8025a66:	9100      	str	r1, [sp, #0]
 8025a68:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8025a6c:	4906      	ldr	r1, [pc, #24]	; (8025a88 <__assert_func+0x34>)
 8025a6e:	462b      	mov	r3, r5
 8025a70:	f000 f81a 	bl	8025aa8 <fiprintf>
 8025a74:	f7ff ffe7 	bl	8025a46 <abort>
 8025a78:	4b04      	ldr	r3, [pc, #16]	; (8025a8c <__assert_func+0x38>)
 8025a7a:	461c      	mov	r4, r3
 8025a7c:	e7f3      	b.n	8025a66 <__assert_func+0x12>
 8025a7e:	bf00      	nop
 8025a80:	2000001c 	.word	0x2000001c
 8025a84:	08076118 	.word	0x08076118
 8025a88:	08076125 	.word	0x08076125
 8025a8c:	08076153 	.word	0x08076153

08025a90 <atexit>:
 8025a90:	2300      	movs	r3, #0
 8025a92:	4601      	mov	r1, r0
 8025a94:	461a      	mov	r2, r3
 8025a96:	4618      	mov	r0, r3
 8025a98:	f000 bda6 	b.w	80265e8 <__register_exitproc>

08025a9c <__errno>:
 8025a9c:	4b01      	ldr	r3, [pc, #4]	; (8025aa4 <__errno+0x8>)
 8025a9e:	6818      	ldr	r0, [r3, #0]
 8025aa0:	4770      	bx	lr
 8025aa2:	bf00      	nop
 8025aa4:	2000001c 	.word	0x2000001c

08025aa8 <fiprintf>:
 8025aa8:	b40e      	push	{r1, r2, r3}
 8025aaa:	b503      	push	{r0, r1, lr}
 8025aac:	4601      	mov	r1, r0
 8025aae:	ab03      	add	r3, sp, #12
 8025ab0:	4805      	ldr	r0, [pc, #20]	; (8025ac8 <fiprintf+0x20>)
 8025ab2:	f853 2b04 	ldr.w	r2, [r3], #4
 8025ab6:	6800      	ldr	r0, [r0, #0]
 8025ab8:	9301      	str	r3, [sp, #4]
 8025aba:	f000 f997 	bl	8025dec <_vfiprintf_r>
 8025abe:	b002      	add	sp, #8
 8025ac0:	f85d eb04 	ldr.w	lr, [sp], #4
 8025ac4:	b003      	add	sp, #12
 8025ac6:	4770      	bx	lr
 8025ac8:	2000001c 	.word	0x2000001c

08025acc <_fputs_r>:
 8025acc:	b570      	push	{r4, r5, r6, lr}
 8025ace:	460e      	mov	r6, r1
 8025ad0:	4614      	mov	r4, r2
 8025ad2:	4605      	mov	r5, r0
 8025ad4:	b118      	cbz	r0, 8025ade <_fputs_r+0x12>
 8025ad6:	6983      	ldr	r3, [r0, #24]
 8025ad8:	b90b      	cbnz	r3, 8025ade <_fputs_r+0x12>
 8025ada:	f000 ff01 	bl	80268e0 <__sinit>
 8025ade:	4b2b      	ldr	r3, [pc, #172]	; (8025b8c <_fputs_r+0xc0>)
 8025ae0:	429c      	cmp	r4, r3
 8025ae2:	d11e      	bne.n	8025b22 <_fputs_r+0x56>
 8025ae4:	686c      	ldr	r4, [r5, #4]
 8025ae6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8025ae8:	07da      	lsls	r2, r3, #31
 8025aea:	d405      	bmi.n	8025af8 <_fputs_r+0x2c>
 8025aec:	89a3      	ldrh	r3, [r4, #12]
 8025aee:	059b      	lsls	r3, r3, #22
 8025af0:	d402      	bmi.n	8025af8 <_fputs_r+0x2c>
 8025af2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8025af4:	f000 f87d 	bl	8025bf2 <__retarget_lock_acquire_recursive>
 8025af8:	89a3      	ldrh	r3, [r4, #12]
 8025afa:	0718      	lsls	r0, r3, #28
 8025afc:	d51b      	bpl.n	8025b36 <_fputs_r+0x6a>
 8025afe:	6923      	ldr	r3, [r4, #16]
 8025b00:	b1cb      	cbz	r3, 8025b36 <_fputs_r+0x6a>
 8025b02:	3e01      	subs	r6, #1
 8025b04:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8025b08:	bb39      	cbnz	r1, 8025b5a <_fputs_r+0x8e>
 8025b0a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8025b0c:	f015 0501 	ands.w	r5, r5, #1
 8025b10:	d139      	bne.n	8025b86 <_fputs_r+0xba>
 8025b12:	89a3      	ldrh	r3, [r4, #12]
 8025b14:	0599      	lsls	r1, r3, #22
 8025b16:	d402      	bmi.n	8025b1e <_fputs_r+0x52>
 8025b18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8025b1a:	f000 f86c 	bl	8025bf6 <__retarget_lock_release_recursive>
 8025b1e:	4628      	mov	r0, r5
 8025b20:	bd70      	pop	{r4, r5, r6, pc}
 8025b22:	4b1b      	ldr	r3, [pc, #108]	; (8025b90 <_fputs_r+0xc4>)
 8025b24:	429c      	cmp	r4, r3
 8025b26:	d101      	bne.n	8025b2c <_fputs_r+0x60>
 8025b28:	68ac      	ldr	r4, [r5, #8]
 8025b2a:	e7dc      	b.n	8025ae6 <_fputs_r+0x1a>
 8025b2c:	4b19      	ldr	r3, [pc, #100]	; (8025b94 <_fputs_r+0xc8>)
 8025b2e:	429c      	cmp	r4, r3
 8025b30:	bf08      	it	eq
 8025b32:	68ec      	ldreq	r4, [r5, #12]
 8025b34:	e7d7      	b.n	8025ae6 <_fputs_r+0x1a>
 8025b36:	4621      	mov	r1, r4
 8025b38:	4628      	mov	r0, r5
 8025b3a:	f000 fce7 	bl	802650c <__swsetup_r>
 8025b3e:	2800      	cmp	r0, #0
 8025b40:	d0df      	beq.n	8025b02 <_fputs_r+0x36>
 8025b42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8025b44:	07da      	lsls	r2, r3, #31
 8025b46:	d405      	bmi.n	8025b54 <_fputs_r+0x88>
 8025b48:	89a3      	ldrh	r3, [r4, #12]
 8025b4a:	059b      	lsls	r3, r3, #22
 8025b4c:	d402      	bmi.n	8025b54 <_fputs_r+0x88>
 8025b4e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8025b50:	f000 f851 	bl	8025bf6 <__retarget_lock_release_recursive>
 8025b54:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8025b58:	e7e1      	b.n	8025b1e <_fputs_r+0x52>
 8025b5a:	68a3      	ldr	r3, [r4, #8]
 8025b5c:	3b01      	subs	r3, #1
 8025b5e:	2b00      	cmp	r3, #0
 8025b60:	60a3      	str	r3, [r4, #8]
 8025b62:	da04      	bge.n	8025b6e <_fputs_r+0xa2>
 8025b64:	69a2      	ldr	r2, [r4, #24]
 8025b66:	4293      	cmp	r3, r2
 8025b68:	db06      	blt.n	8025b78 <_fputs_r+0xac>
 8025b6a:	290a      	cmp	r1, #10
 8025b6c:	d004      	beq.n	8025b78 <_fputs_r+0xac>
 8025b6e:	6823      	ldr	r3, [r4, #0]
 8025b70:	1c5a      	adds	r2, r3, #1
 8025b72:	6022      	str	r2, [r4, #0]
 8025b74:	7019      	strb	r1, [r3, #0]
 8025b76:	e7c5      	b.n	8025b04 <_fputs_r+0x38>
 8025b78:	4622      	mov	r2, r4
 8025b7a:	4628      	mov	r0, r5
 8025b7c:	f000 fc74 	bl	8026468 <__swbuf_r>
 8025b80:	3001      	adds	r0, #1
 8025b82:	d1bf      	bne.n	8025b04 <_fputs_r+0x38>
 8025b84:	e7dd      	b.n	8025b42 <_fputs_r+0x76>
 8025b86:	460d      	mov	r5, r1
 8025b88:	e7c9      	b.n	8025b1e <_fputs_r+0x52>
 8025b8a:	bf00      	nop
 8025b8c:	080761ac 	.word	0x080761ac
 8025b90:	080761cc 	.word	0x080761cc
 8025b94:	0807618c 	.word	0x0807618c

08025b98 <fputs>:
 8025b98:	4b02      	ldr	r3, [pc, #8]	; (8025ba4 <fputs+0xc>)
 8025b9a:	460a      	mov	r2, r1
 8025b9c:	4601      	mov	r1, r0
 8025b9e:	6818      	ldr	r0, [r3, #0]
 8025ba0:	f7ff bf94 	b.w	8025acc <_fputs_r>
 8025ba4:	2000001c 	.word	0x2000001c

08025ba8 <__libc_init_array>:
 8025ba8:	b570      	push	{r4, r5, r6, lr}
 8025baa:	4d0d      	ldr	r5, [pc, #52]	; (8025be0 <__libc_init_array+0x38>)
 8025bac:	4c0d      	ldr	r4, [pc, #52]	; (8025be4 <__libc_init_array+0x3c>)
 8025bae:	1b64      	subs	r4, r4, r5
 8025bb0:	10a4      	asrs	r4, r4, #2
 8025bb2:	2600      	movs	r6, #0
 8025bb4:	42a6      	cmp	r6, r4
 8025bb6:	d109      	bne.n	8025bcc <__libc_init_array+0x24>
 8025bb8:	4d0b      	ldr	r5, [pc, #44]	; (8025be8 <__libc_init_array+0x40>)
 8025bba:	4c0c      	ldr	r4, [pc, #48]	; (8025bec <__libc_init_array+0x44>)
 8025bbc:	f001 f84a 	bl	8026c54 <_init>
 8025bc0:	1b64      	subs	r4, r4, r5
 8025bc2:	10a4      	asrs	r4, r4, #2
 8025bc4:	2600      	movs	r6, #0
 8025bc6:	42a6      	cmp	r6, r4
 8025bc8:	d105      	bne.n	8025bd6 <__libc_init_array+0x2e>
 8025bca:	bd70      	pop	{r4, r5, r6, pc}
 8025bcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8025bd0:	4798      	blx	r3
 8025bd2:	3601      	adds	r6, #1
 8025bd4:	e7ee      	b.n	8025bb4 <__libc_init_array+0xc>
 8025bd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8025bda:	4798      	blx	r3
 8025bdc:	3601      	adds	r6, #1
 8025bde:	e7f2      	b.n	8025bc6 <__libc_init_array+0x1e>
 8025be0:	080761f4 	.word	0x080761f4
 8025be4:	080761f4 	.word	0x080761f4
 8025be8:	080761f4 	.word	0x080761f4
 8025bec:	080761f8 	.word	0x080761f8

08025bf0 <__retarget_lock_init_recursive>:
 8025bf0:	4770      	bx	lr

08025bf2 <__retarget_lock_acquire_recursive>:
 8025bf2:	4770      	bx	lr

08025bf4 <__retarget_lock_release>:
 8025bf4:	4770      	bx	lr

08025bf6 <__retarget_lock_release_recursive>:
 8025bf6:	4770      	bx	lr

08025bf8 <malloc>:
 8025bf8:	4b02      	ldr	r3, [pc, #8]	; (8025c04 <malloc+0xc>)
 8025bfa:	4601      	mov	r1, r0
 8025bfc:	6818      	ldr	r0, [r3, #0]
 8025bfe:	f000 b871 	b.w	8025ce4 <_malloc_r>
 8025c02:	bf00      	nop
 8025c04:	2000001c 	.word	0x2000001c

08025c08 <free>:
 8025c08:	4b02      	ldr	r3, [pc, #8]	; (8025c14 <free+0xc>)
 8025c0a:	4601      	mov	r1, r0
 8025c0c:	6818      	ldr	r0, [r3, #0]
 8025c0e:	f000 b819 	b.w	8025c44 <_free_r>
 8025c12:	bf00      	nop
 8025c14:	2000001c 	.word	0x2000001c

08025c18 <memcpy>:
 8025c18:	440a      	add	r2, r1
 8025c1a:	4291      	cmp	r1, r2
 8025c1c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8025c20:	d100      	bne.n	8025c24 <memcpy+0xc>
 8025c22:	4770      	bx	lr
 8025c24:	b510      	push	{r4, lr}
 8025c26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8025c2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8025c2e:	4291      	cmp	r1, r2
 8025c30:	d1f9      	bne.n	8025c26 <memcpy+0xe>
 8025c32:	bd10      	pop	{r4, pc}

08025c34 <memset>:
 8025c34:	4402      	add	r2, r0
 8025c36:	4603      	mov	r3, r0
 8025c38:	4293      	cmp	r3, r2
 8025c3a:	d100      	bne.n	8025c3e <memset+0xa>
 8025c3c:	4770      	bx	lr
 8025c3e:	f803 1b01 	strb.w	r1, [r3], #1
 8025c42:	e7f9      	b.n	8025c38 <memset+0x4>

08025c44 <_free_r>:
 8025c44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8025c46:	2900      	cmp	r1, #0
 8025c48:	d048      	beq.n	8025cdc <_free_r+0x98>
 8025c4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8025c4e:	9001      	str	r0, [sp, #4]
 8025c50:	2b00      	cmp	r3, #0
 8025c52:	f1a1 0404 	sub.w	r4, r1, #4
 8025c56:	bfb8      	it	lt
 8025c58:	18e4      	addlt	r4, r4, r3
 8025c5a:	f000 ff43 	bl	8026ae4 <__malloc_lock>
 8025c5e:	4a20      	ldr	r2, [pc, #128]	; (8025ce0 <_free_r+0x9c>)
 8025c60:	9801      	ldr	r0, [sp, #4]
 8025c62:	6813      	ldr	r3, [r2, #0]
 8025c64:	4615      	mov	r5, r2
 8025c66:	b933      	cbnz	r3, 8025c76 <_free_r+0x32>
 8025c68:	6063      	str	r3, [r4, #4]
 8025c6a:	6014      	str	r4, [r2, #0]
 8025c6c:	b003      	add	sp, #12
 8025c6e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8025c72:	f000 bf3d 	b.w	8026af0 <__malloc_unlock>
 8025c76:	42a3      	cmp	r3, r4
 8025c78:	d90b      	bls.n	8025c92 <_free_r+0x4e>
 8025c7a:	6821      	ldr	r1, [r4, #0]
 8025c7c:	1862      	adds	r2, r4, r1
 8025c7e:	4293      	cmp	r3, r2
 8025c80:	bf04      	itt	eq
 8025c82:	681a      	ldreq	r2, [r3, #0]
 8025c84:	685b      	ldreq	r3, [r3, #4]
 8025c86:	6063      	str	r3, [r4, #4]
 8025c88:	bf04      	itt	eq
 8025c8a:	1852      	addeq	r2, r2, r1
 8025c8c:	6022      	streq	r2, [r4, #0]
 8025c8e:	602c      	str	r4, [r5, #0]
 8025c90:	e7ec      	b.n	8025c6c <_free_r+0x28>
 8025c92:	461a      	mov	r2, r3
 8025c94:	685b      	ldr	r3, [r3, #4]
 8025c96:	b10b      	cbz	r3, 8025c9c <_free_r+0x58>
 8025c98:	42a3      	cmp	r3, r4
 8025c9a:	d9fa      	bls.n	8025c92 <_free_r+0x4e>
 8025c9c:	6811      	ldr	r1, [r2, #0]
 8025c9e:	1855      	adds	r5, r2, r1
 8025ca0:	42a5      	cmp	r5, r4
 8025ca2:	d10b      	bne.n	8025cbc <_free_r+0x78>
 8025ca4:	6824      	ldr	r4, [r4, #0]
 8025ca6:	4421      	add	r1, r4
 8025ca8:	1854      	adds	r4, r2, r1
 8025caa:	42a3      	cmp	r3, r4
 8025cac:	6011      	str	r1, [r2, #0]
 8025cae:	d1dd      	bne.n	8025c6c <_free_r+0x28>
 8025cb0:	681c      	ldr	r4, [r3, #0]
 8025cb2:	685b      	ldr	r3, [r3, #4]
 8025cb4:	6053      	str	r3, [r2, #4]
 8025cb6:	4421      	add	r1, r4
 8025cb8:	6011      	str	r1, [r2, #0]
 8025cba:	e7d7      	b.n	8025c6c <_free_r+0x28>
 8025cbc:	d902      	bls.n	8025cc4 <_free_r+0x80>
 8025cbe:	230c      	movs	r3, #12
 8025cc0:	6003      	str	r3, [r0, #0]
 8025cc2:	e7d3      	b.n	8025c6c <_free_r+0x28>
 8025cc4:	6825      	ldr	r5, [r4, #0]
 8025cc6:	1961      	adds	r1, r4, r5
 8025cc8:	428b      	cmp	r3, r1
 8025cca:	bf04      	itt	eq
 8025ccc:	6819      	ldreq	r1, [r3, #0]
 8025cce:	685b      	ldreq	r3, [r3, #4]
 8025cd0:	6063      	str	r3, [r4, #4]
 8025cd2:	bf04      	itt	eq
 8025cd4:	1949      	addeq	r1, r1, r5
 8025cd6:	6021      	streq	r1, [r4, #0]
 8025cd8:	6054      	str	r4, [r2, #4]
 8025cda:	e7c7      	b.n	8025c6c <_free_r+0x28>
 8025cdc:	b003      	add	sp, #12
 8025cde:	bd30      	pop	{r4, r5, pc}
 8025ce0:	2004a4cc 	.word	0x2004a4cc

08025ce4 <_malloc_r>:
 8025ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025ce6:	1ccd      	adds	r5, r1, #3
 8025ce8:	f025 0503 	bic.w	r5, r5, #3
 8025cec:	3508      	adds	r5, #8
 8025cee:	2d0c      	cmp	r5, #12
 8025cf0:	bf38      	it	cc
 8025cf2:	250c      	movcc	r5, #12
 8025cf4:	2d00      	cmp	r5, #0
 8025cf6:	4606      	mov	r6, r0
 8025cf8:	db01      	blt.n	8025cfe <_malloc_r+0x1a>
 8025cfa:	42a9      	cmp	r1, r5
 8025cfc:	d903      	bls.n	8025d06 <_malloc_r+0x22>
 8025cfe:	230c      	movs	r3, #12
 8025d00:	6033      	str	r3, [r6, #0]
 8025d02:	2000      	movs	r0, #0
 8025d04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025d06:	f000 feed 	bl	8026ae4 <__malloc_lock>
 8025d0a:	4921      	ldr	r1, [pc, #132]	; (8025d90 <_malloc_r+0xac>)
 8025d0c:	680a      	ldr	r2, [r1, #0]
 8025d0e:	4614      	mov	r4, r2
 8025d10:	b99c      	cbnz	r4, 8025d3a <_malloc_r+0x56>
 8025d12:	4f20      	ldr	r7, [pc, #128]	; (8025d94 <_malloc_r+0xb0>)
 8025d14:	683b      	ldr	r3, [r7, #0]
 8025d16:	b923      	cbnz	r3, 8025d22 <_malloc_r+0x3e>
 8025d18:	4621      	mov	r1, r4
 8025d1a:	4630      	mov	r0, r6
 8025d1c:	f000 fb2a 	bl	8026374 <_sbrk_r>
 8025d20:	6038      	str	r0, [r7, #0]
 8025d22:	4629      	mov	r1, r5
 8025d24:	4630      	mov	r0, r6
 8025d26:	f000 fb25 	bl	8026374 <_sbrk_r>
 8025d2a:	1c43      	adds	r3, r0, #1
 8025d2c:	d123      	bne.n	8025d76 <_malloc_r+0x92>
 8025d2e:	230c      	movs	r3, #12
 8025d30:	6033      	str	r3, [r6, #0]
 8025d32:	4630      	mov	r0, r6
 8025d34:	f000 fedc 	bl	8026af0 <__malloc_unlock>
 8025d38:	e7e3      	b.n	8025d02 <_malloc_r+0x1e>
 8025d3a:	6823      	ldr	r3, [r4, #0]
 8025d3c:	1b5b      	subs	r3, r3, r5
 8025d3e:	d417      	bmi.n	8025d70 <_malloc_r+0x8c>
 8025d40:	2b0b      	cmp	r3, #11
 8025d42:	d903      	bls.n	8025d4c <_malloc_r+0x68>
 8025d44:	6023      	str	r3, [r4, #0]
 8025d46:	441c      	add	r4, r3
 8025d48:	6025      	str	r5, [r4, #0]
 8025d4a:	e004      	b.n	8025d56 <_malloc_r+0x72>
 8025d4c:	6863      	ldr	r3, [r4, #4]
 8025d4e:	42a2      	cmp	r2, r4
 8025d50:	bf0c      	ite	eq
 8025d52:	600b      	streq	r3, [r1, #0]
 8025d54:	6053      	strne	r3, [r2, #4]
 8025d56:	4630      	mov	r0, r6
 8025d58:	f000 feca 	bl	8026af0 <__malloc_unlock>
 8025d5c:	f104 000b 	add.w	r0, r4, #11
 8025d60:	1d23      	adds	r3, r4, #4
 8025d62:	f020 0007 	bic.w	r0, r0, #7
 8025d66:	1ac2      	subs	r2, r0, r3
 8025d68:	d0cc      	beq.n	8025d04 <_malloc_r+0x20>
 8025d6a:	1a1b      	subs	r3, r3, r0
 8025d6c:	50a3      	str	r3, [r4, r2]
 8025d6e:	e7c9      	b.n	8025d04 <_malloc_r+0x20>
 8025d70:	4622      	mov	r2, r4
 8025d72:	6864      	ldr	r4, [r4, #4]
 8025d74:	e7cc      	b.n	8025d10 <_malloc_r+0x2c>
 8025d76:	1cc4      	adds	r4, r0, #3
 8025d78:	f024 0403 	bic.w	r4, r4, #3
 8025d7c:	42a0      	cmp	r0, r4
 8025d7e:	d0e3      	beq.n	8025d48 <_malloc_r+0x64>
 8025d80:	1a21      	subs	r1, r4, r0
 8025d82:	4630      	mov	r0, r6
 8025d84:	f000 faf6 	bl	8026374 <_sbrk_r>
 8025d88:	3001      	adds	r0, #1
 8025d8a:	d1dd      	bne.n	8025d48 <_malloc_r+0x64>
 8025d8c:	e7cf      	b.n	8025d2e <_malloc_r+0x4a>
 8025d8e:	bf00      	nop
 8025d90:	2004a4cc 	.word	0x2004a4cc
 8025d94:	2004a4d0 	.word	0x2004a4d0

08025d98 <__sfputc_r>:
 8025d98:	6893      	ldr	r3, [r2, #8]
 8025d9a:	3b01      	subs	r3, #1
 8025d9c:	2b00      	cmp	r3, #0
 8025d9e:	b410      	push	{r4}
 8025da0:	6093      	str	r3, [r2, #8]
 8025da2:	da08      	bge.n	8025db6 <__sfputc_r+0x1e>
 8025da4:	6994      	ldr	r4, [r2, #24]
 8025da6:	42a3      	cmp	r3, r4
 8025da8:	db01      	blt.n	8025dae <__sfputc_r+0x16>
 8025daa:	290a      	cmp	r1, #10
 8025dac:	d103      	bne.n	8025db6 <__sfputc_r+0x1e>
 8025dae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025db2:	f000 bb59 	b.w	8026468 <__swbuf_r>
 8025db6:	6813      	ldr	r3, [r2, #0]
 8025db8:	1c58      	adds	r0, r3, #1
 8025dba:	6010      	str	r0, [r2, #0]
 8025dbc:	7019      	strb	r1, [r3, #0]
 8025dbe:	4608      	mov	r0, r1
 8025dc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025dc4:	4770      	bx	lr

08025dc6 <__sfputs_r>:
 8025dc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025dc8:	4606      	mov	r6, r0
 8025dca:	460f      	mov	r7, r1
 8025dcc:	4614      	mov	r4, r2
 8025dce:	18d5      	adds	r5, r2, r3
 8025dd0:	42ac      	cmp	r4, r5
 8025dd2:	d101      	bne.n	8025dd8 <__sfputs_r+0x12>
 8025dd4:	2000      	movs	r0, #0
 8025dd6:	e007      	b.n	8025de8 <__sfputs_r+0x22>
 8025dd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025ddc:	463a      	mov	r2, r7
 8025dde:	4630      	mov	r0, r6
 8025de0:	f7ff ffda 	bl	8025d98 <__sfputc_r>
 8025de4:	1c43      	adds	r3, r0, #1
 8025de6:	d1f3      	bne.n	8025dd0 <__sfputs_r+0xa>
 8025de8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08025dec <_vfiprintf_r>:
 8025dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025df0:	460d      	mov	r5, r1
 8025df2:	b09d      	sub	sp, #116	; 0x74
 8025df4:	4614      	mov	r4, r2
 8025df6:	4698      	mov	r8, r3
 8025df8:	4606      	mov	r6, r0
 8025dfa:	b118      	cbz	r0, 8025e04 <_vfiprintf_r+0x18>
 8025dfc:	6983      	ldr	r3, [r0, #24]
 8025dfe:	b90b      	cbnz	r3, 8025e04 <_vfiprintf_r+0x18>
 8025e00:	f000 fd6e 	bl	80268e0 <__sinit>
 8025e04:	4b89      	ldr	r3, [pc, #548]	; (802602c <_vfiprintf_r+0x240>)
 8025e06:	429d      	cmp	r5, r3
 8025e08:	d11b      	bne.n	8025e42 <_vfiprintf_r+0x56>
 8025e0a:	6875      	ldr	r5, [r6, #4]
 8025e0c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8025e0e:	07d9      	lsls	r1, r3, #31
 8025e10:	d405      	bmi.n	8025e1e <_vfiprintf_r+0x32>
 8025e12:	89ab      	ldrh	r3, [r5, #12]
 8025e14:	059a      	lsls	r2, r3, #22
 8025e16:	d402      	bmi.n	8025e1e <_vfiprintf_r+0x32>
 8025e18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8025e1a:	f7ff feea 	bl	8025bf2 <__retarget_lock_acquire_recursive>
 8025e1e:	89ab      	ldrh	r3, [r5, #12]
 8025e20:	071b      	lsls	r3, r3, #28
 8025e22:	d501      	bpl.n	8025e28 <_vfiprintf_r+0x3c>
 8025e24:	692b      	ldr	r3, [r5, #16]
 8025e26:	b9eb      	cbnz	r3, 8025e64 <_vfiprintf_r+0x78>
 8025e28:	4629      	mov	r1, r5
 8025e2a:	4630      	mov	r0, r6
 8025e2c:	f000 fb6e 	bl	802650c <__swsetup_r>
 8025e30:	b1c0      	cbz	r0, 8025e64 <_vfiprintf_r+0x78>
 8025e32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8025e34:	07dc      	lsls	r4, r3, #31
 8025e36:	d50e      	bpl.n	8025e56 <_vfiprintf_r+0x6a>
 8025e38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8025e3c:	b01d      	add	sp, #116	; 0x74
 8025e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025e42:	4b7b      	ldr	r3, [pc, #492]	; (8026030 <_vfiprintf_r+0x244>)
 8025e44:	429d      	cmp	r5, r3
 8025e46:	d101      	bne.n	8025e4c <_vfiprintf_r+0x60>
 8025e48:	68b5      	ldr	r5, [r6, #8]
 8025e4a:	e7df      	b.n	8025e0c <_vfiprintf_r+0x20>
 8025e4c:	4b79      	ldr	r3, [pc, #484]	; (8026034 <_vfiprintf_r+0x248>)
 8025e4e:	429d      	cmp	r5, r3
 8025e50:	bf08      	it	eq
 8025e52:	68f5      	ldreq	r5, [r6, #12]
 8025e54:	e7da      	b.n	8025e0c <_vfiprintf_r+0x20>
 8025e56:	89ab      	ldrh	r3, [r5, #12]
 8025e58:	0598      	lsls	r0, r3, #22
 8025e5a:	d4ed      	bmi.n	8025e38 <_vfiprintf_r+0x4c>
 8025e5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8025e5e:	f7ff feca 	bl	8025bf6 <__retarget_lock_release_recursive>
 8025e62:	e7e9      	b.n	8025e38 <_vfiprintf_r+0x4c>
 8025e64:	2300      	movs	r3, #0
 8025e66:	9309      	str	r3, [sp, #36]	; 0x24
 8025e68:	2320      	movs	r3, #32
 8025e6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8025e6e:	f8cd 800c 	str.w	r8, [sp, #12]
 8025e72:	2330      	movs	r3, #48	; 0x30
 8025e74:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8026038 <_vfiprintf_r+0x24c>
 8025e78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8025e7c:	f04f 0901 	mov.w	r9, #1
 8025e80:	4623      	mov	r3, r4
 8025e82:	469a      	mov	sl, r3
 8025e84:	f813 2b01 	ldrb.w	r2, [r3], #1
 8025e88:	b10a      	cbz	r2, 8025e8e <_vfiprintf_r+0xa2>
 8025e8a:	2a25      	cmp	r2, #37	; 0x25
 8025e8c:	d1f9      	bne.n	8025e82 <_vfiprintf_r+0x96>
 8025e8e:	ebba 0b04 	subs.w	fp, sl, r4
 8025e92:	d00b      	beq.n	8025eac <_vfiprintf_r+0xc0>
 8025e94:	465b      	mov	r3, fp
 8025e96:	4622      	mov	r2, r4
 8025e98:	4629      	mov	r1, r5
 8025e9a:	4630      	mov	r0, r6
 8025e9c:	f7ff ff93 	bl	8025dc6 <__sfputs_r>
 8025ea0:	3001      	adds	r0, #1
 8025ea2:	f000 80aa 	beq.w	8025ffa <_vfiprintf_r+0x20e>
 8025ea6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8025ea8:	445a      	add	r2, fp
 8025eaa:	9209      	str	r2, [sp, #36]	; 0x24
 8025eac:	f89a 3000 	ldrb.w	r3, [sl]
 8025eb0:	2b00      	cmp	r3, #0
 8025eb2:	f000 80a2 	beq.w	8025ffa <_vfiprintf_r+0x20e>
 8025eb6:	2300      	movs	r3, #0
 8025eb8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8025ebc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8025ec0:	f10a 0a01 	add.w	sl, sl, #1
 8025ec4:	9304      	str	r3, [sp, #16]
 8025ec6:	9307      	str	r3, [sp, #28]
 8025ec8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8025ecc:	931a      	str	r3, [sp, #104]	; 0x68
 8025ece:	4654      	mov	r4, sl
 8025ed0:	2205      	movs	r2, #5
 8025ed2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025ed6:	4858      	ldr	r0, [pc, #352]	; (8026038 <_vfiprintf_r+0x24c>)
 8025ed8:	f7da f9a2 	bl	8000220 <memchr>
 8025edc:	9a04      	ldr	r2, [sp, #16]
 8025ede:	b9d8      	cbnz	r0, 8025f18 <_vfiprintf_r+0x12c>
 8025ee0:	06d1      	lsls	r1, r2, #27
 8025ee2:	bf44      	itt	mi
 8025ee4:	2320      	movmi	r3, #32
 8025ee6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8025eea:	0713      	lsls	r3, r2, #28
 8025eec:	bf44      	itt	mi
 8025eee:	232b      	movmi	r3, #43	; 0x2b
 8025ef0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8025ef4:	f89a 3000 	ldrb.w	r3, [sl]
 8025ef8:	2b2a      	cmp	r3, #42	; 0x2a
 8025efa:	d015      	beq.n	8025f28 <_vfiprintf_r+0x13c>
 8025efc:	9a07      	ldr	r2, [sp, #28]
 8025efe:	4654      	mov	r4, sl
 8025f00:	2000      	movs	r0, #0
 8025f02:	f04f 0c0a 	mov.w	ip, #10
 8025f06:	4621      	mov	r1, r4
 8025f08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8025f0c:	3b30      	subs	r3, #48	; 0x30
 8025f0e:	2b09      	cmp	r3, #9
 8025f10:	d94e      	bls.n	8025fb0 <_vfiprintf_r+0x1c4>
 8025f12:	b1b0      	cbz	r0, 8025f42 <_vfiprintf_r+0x156>
 8025f14:	9207      	str	r2, [sp, #28]
 8025f16:	e014      	b.n	8025f42 <_vfiprintf_r+0x156>
 8025f18:	eba0 0308 	sub.w	r3, r0, r8
 8025f1c:	fa09 f303 	lsl.w	r3, r9, r3
 8025f20:	4313      	orrs	r3, r2
 8025f22:	9304      	str	r3, [sp, #16]
 8025f24:	46a2      	mov	sl, r4
 8025f26:	e7d2      	b.n	8025ece <_vfiprintf_r+0xe2>
 8025f28:	9b03      	ldr	r3, [sp, #12]
 8025f2a:	1d19      	adds	r1, r3, #4
 8025f2c:	681b      	ldr	r3, [r3, #0]
 8025f2e:	9103      	str	r1, [sp, #12]
 8025f30:	2b00      	cmp	r3, #0
 8025f32:	bfbb      	ittet	lt
 8025f34:	425b      	neglt	r3, r3
 8025f36:	f042 0202 	orrlt.w	r2, r2, #2
 8025f3a:	9307      	strge	r3, [sp, #28]
 8025f3c:	9307      	strlt	r3, [sp, #28]
 8025f3e:	bfb8      	it	lt
 8025f40:	9204      	strlt	r2, [sp, #16]
 8025f42:	7823      	ldrb	r3, [r4, #0]
 8025f44:	2b2e      	cmp	r3, #46	; 0x2e
 8025f46:	d10c      	bne.n	8025f62 <_vfiprintf_r+0x176>
 8025f48:	7863      	ldrb	r3, [r4, #1]
 8025f4a:	2b2a      	cmp	r3, #42	; 0x2a
 8025f4c:	d135      	bne.n	8025fba <_vfiprintf_r+0x1ce>
 8025f4e:	9b03      	ldr	r3, [sp, #12]
 8025f50:	1d1a      	adds	r2, r3, #4
 8025f52:	681b      	ldr	r3, [r3, #0]
 8025f54:	9203      	str	r2, [sp, #12]
 8025f56:	2b00      	cmp	r3, #0
 8025f58:	bfb8      	it	lt
 8025f5a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8025f5e:	3402      	adds	r4, #2
 8025f60:	9305      	str	r3, [sp, #20]
 8025f62:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8026048 <_vfiprintf_r+0x25c>
 8025f66:	7821      	ldrb	r1, [r4, #0]
 8025f68:	2203      	movs	r2, #3
 8025f6a:	4650      	mov	r0, sl
 8025f6c:	f7da f958 	bl	8000220 <memchr>
 8025f70:	b140      	cbz	r0, 8025f84 <_vfiprintf_r+0x198>
 8025f72:	2340      	movs	r3, #64	; 0x40
 8025f74:	eba0 000a 	sub.w	r0, r0, sl
 8025f78:	fa03 f000 	lsl.w	r0, r3, r0
 8025f7c:	9b04      	ldr	r3, [sp, #16]
 8025f7e:	4303      	orrs	r3, r0
 8025f80:	3401      	adds	r4, #1
 8025f82:	9304      	str	r3, [sp, #16]
 8025f84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025f88:	482c      	ldr	r0, [pc, #176]	; (802603c <_vfiprintf_r+0x250>)
 8025f8a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8025f8e:	2206      	movs	r2, #6
 8025f90:	f7da f946 	bl	8000220 <memchr>
 8025f94:	2800      	cmp	r0, #0
 8025f96:	d03f      	beq.n	8026018 <_vfiprintf_r+0x22c>
 8025f98:	4b29      	ldr	r3, [pc, #164]	; (8026040 <_vfiprintf_r+0x254>)
 8025f9a:	bb1b      	cbnz	r3, 8025fe4 <_vfiprintf_r+0x1f8>
 8025f9c:	9b03      	ldr	r3, [sp, #12]
 8025f9e:	3307      	adds	r3, #7
 8025fa0:	f023 0307 	bic.w	r3, r3, #7
 8025fa4:	3308      	adds	r3, #8
 8025fa6:	9303      	str	r3, [sp, #12]
 8025fa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025faa:	443b      	add	r3, r7
 8025fac:	9309      	str	r3, [sp, #36]	; 0x24
 8025fae:	e767      	b.n	8025e80 <_vfiprintf_r+0x94>
 8025fb0:	fb0c 3202 	mla	r2, ip, r2, r3
 8025fb4:	460c      	mov	r4, r1
 8025fb6:	2001      	movs	r0, #1
 8025fb8:	e7a5      	b.n	8025f06 <_vfiprintf_r+0x11a>
 8025fba:	2300      	movs	r3, #0
 8025fbc:	3401      	adds	r4, #1
 8025fbe:	9305      	str	r3, [sp, #20]
 8025fc0:	4619      	mov	r1, r3
 8025fc2:	f04f 0c0a 	mov.w	ip, #10
 8025fc6:	4620      	mov	r0, r4
 8025fc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8025fcc:	3a30      	subs	r2, #48	; 0x30
 8025fce:	2a09      	cmp	r2, #9
 8025fd0:	d903      	bls.n	8025fda <_vfiprintf_r+0x1ee>
 8025fd2:	2b00      	cmp	r3, #0
 8025fd4:	d0c5      	beq.n	8025f62 <_vfiprintf_r+0x176>
 8025fd6:	9105      	str	r1, [sp, #20]
 8025fd8:	e7c3      	b.n	8025f62 <_vfiprintf_r+0x176>
 8025fda:	fb0c 2101 	mla	r1, ip, r1, r2
 8025fde:	4604      	mov	r4, r0
 8025fe0:	2301      	movs	r3, #1
 8025fe2:	e7f0      	b.n	8025fc6 <_vfiprintf_r+0x1da>
 8025fe4:	ab03      	add	r3, sp, #12
 8025fe6:	9300      	str	r3, [sp, #0]
 8025fe8:	462a      	mov	r2, r5
 8025fea:	4b16      	ldr	r3, [pc, #88]	; (8026044 <_vfiprintf_r+0x258>)
 8025fec:	a904      	add	r1, sp, #16
 8025fee:	4630      	mov	r0, r6
 8025ff0:	f3af 8000 	nop.w
 8025ff4:	4607      	mov	r7, r0
 8025ff6:	1c78      	adds	r0, r7, #1
 8025ff8:	d1d6      	bne.n	8025fa8 <_vfiprintf_r+0x1bc>
 8025ffa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8025ffc:	07d9      	lsls	r1, r3, #31
 8025ffe:	d405      	bmi.n	802600c <_vfiprintf_r+0x220>
 8026000:	89ab      	ldrh	r3, [r5, #12]
 8026002:	059a      	lsls	r2, r3, #22
 8026004:	d402      	bmi.n	802600c <_vfiprintf_r+0x220>
 8026006:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8026008:	f7ff fdf5 	bl	8025bf6 <__retarget_lock_release_recursive>
 802600c:	89ab      	ldrh	r3, [r5, #12]
 802600e:	065b      	lsls	r3, r3, #25
 8026010:	f53f af12 	bmi.w	8025e38 <_vfiprintf_r+0x4c>
 8026014:	9809      	ldr	r0, [sp, #36]	; 0x24
 8026016:	e711      	b.n	8025e3c <_vfiprintf_r+0x50>
 8026018:	ab03      	add	r3, sp, #12
 802601a:	9300      	str	r3, [sp, #0]
 802601c:	462a      	mov	r2, r5
 802601e:	4b09      	ldr	r3, [pc, #36]	; (8026044 <_vfiprintf_r+0x258>)
 8026020:	a904      	add	r1, sp, #16
 8026022:	4630      	mov	r0, r6
 8026024:	f000 f880 	bl	8026128 <_printf_i>
 8026028:	e7e4      	b.n	8025ff4 <_vfiprintf_r+0x208>
 802602a:	bf00      	nop
 802602c:	080761ac 	.word	0x080761ac
 8026030:	080761cc 	.word	0x080761cc
 8026034:	0807618c 	.word	0x0807618c
 8026038:	08076158 	.word	0x08076158
 802603c:	08076162 	.word	0x08076162
 8026040:	00000000 	.word	0x00000000
 8026044:	08025dc7 	.word	0x08025dc7
 8026048:	0807615e 	.word	0x0807615e

0802604c <_printf_common>:
 802604c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026050:	4616      	mov	r6, r2
 8026052:	4699      	mov	r9, r3
 8026054:	688a      	ldr	r2, [r1, #8]
 8026056:	690b      	ldr	r3, [r1, #16]
 8026058:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802605c:	4293      	cmp	r3, r2
 802605e:	bfb8      	it	lt
 8026060:	4613      	movlt	r3, r2
 8026062:	6033      	str	r3, [r6, #0]
 8026064:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8026068:	4607      	mov	r7, r0
 802606a:	460c      	mov	r4, r1
 802606c:	b10a      	cbz	r2, 8026072 <_printf_common+0x26>
 802606e:	3301      	adds	r3, #1
 8026070:	6033      	str	r3, [r6, #0]
 8026072:	6823      	ldr	r3, [r4, #0]
 8026074:	0699      	lsls	r1, r3, #26
 8026076:	bf42      	ittt	mi
 8026078:	6833      	ldrmi	r3, [r6, #0]
 802607a:	3302      	addmi	r3, #2
 802607c:	6033      	strmi	r3, [r6, #0]
 802607e:	6825      	ldr	r5, [r4, #0]
 8026080:	f015 0506 	ands.w	r5, r5, #6
 8026084:	d106      	bne.n	8026094 <_printf_common+0x48>
 8026086:	f104 0a19 	add.w	sl, r4, #25
 802608a:	68e3      	ldr	r3, [r4, #12]
 802608c:	6832      	ldr	r2, [r6, #0]
 802608e:	1a9b      	subs	r3, r3, r2
 8026090:	42ab      	cmp	r3, r5
 8026092:	dc26      	bgt.n	80260e2 <_printf_common+0x96>
 8026094:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8026098:	1e13      	subs	r3, r2, #0
 802609a:	6822      	ldr	r2, [r4, #0]
 802609c:	bf18      	it	ne
 802609e:	2301      	movne	r3, #1
 80260a0:	0692      	lsls	r2, r2, #26
 80260a2:	d42b      	bmi.n	80260fc <_printf_common+0xb0>
 80260a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80260a8:	4649      	mov	r1, r9
 80260aa:	4638      	mov	r0, r7
 80260ac:	47c0      	blx	r8
 80260ae:	3001      	adds	r0, #1
 80260b0:	d01e      	beq.n	80260f0 <_printf_common+0xa4>
 80260b2:	6823      	ldr	r3, [r4, #0]
 80260b4:	68e5      	ldr	r5, [r4, #12]
 80260b6:	6832      	ldr	r2, [r6, #0]
 80260b8:	f003 0306 	and.w	r3, r3, #6
 80260bc:	2b04      	cmp	r3, #4
 80260be:	bf08      	it	eq
 80260c0:	1aad      	subeq	r5, r5, r2
 80260c2:	68a3      	ldr	r3, [r4, #8]
 80260c4:	6922      	ldr	r2, [r4, #16]
 80260c6:	bf0c      	ite	eq
 80260c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80260cc:	2500      	movne	r5, #0
 80260ce:	4293      	cmp	r3, r2
 80260d0:	bfc4      	itt	gt
 80260d2:	1a9b      	subgt	r3, r3, r2
 80260d4:	18ed      	addgt	r5, r5, r3
 80260d6:	2600      	movs	r6, #0
 80260d8:	341a      	adds	r4, #26
 80260da:	42b5      	cmp	r5, r6
 80260dc:	d11a      	bne.n	8026114 <_printf_common+0xc8>
 80260de:	2000      	movs	r0, #0
 80260e0:	e008      	b.n	80260f4 <_printf_common+0xa8>
 80260e2:	2301      	movs	r3, #1
 80260e4:	4652      	mov	r2, sl
 80260e6:	4649      	mov	r1, r9
 80260e8:	4638      	mov	r0, r7
 80260ea:	47c0      	blx	r8
 80260ec:	3001      	adds	r0, #1
 80260ee:	d103      	bne.n	80260f8 <_printf_common+0xac>
 80260f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80260f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80260f8:	3501      	adds	r5, #1
 80260fa:	e7c6      	b.n	802608a <_printf_common+0x3e>
 80260fc:	18e1      	adds	r1, r4, r3
 80260fe:	1c5a      	adds	r2, r3, #1
 8026100:	2030      	movs	r0, #48	; 0x30
 8026102:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8026106:	4422      	add	r2, r4
 8026108:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802610c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8026110:	3302      	adds	r3, #2
 8026112:	e7c7      	b.n	80260a4 <_printf_common+0x58>
 8026114:	2301      	movs	r3, #1
 8026116:	4622      	mov	r2, r4
 8026118:	4649      	mov	r1, r9
 802611a:	4638      	mov	r0, r7
 802611c:	47c0      	blx	r8
 802611e:	3001      	adds	r0, #1
 8026120:	d0e6      	beq.n	80260f0 <_printf_common+0xa4>
 8026122:	3601      	adds	r6, #1
 8026124:	e7d9      	b.n	80260da <_printf_common+0x8e>
	...

08026128 <_printf_i>:
 8026128:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802612c:	460c      	mov	r4, r1
 802612e:	4691      	mov	r9, r2
 8026130:	7e27      	ldrb	r7, [r4, #24]
 8026132:	990c      	ldr	r1, [sp, #48]	; 0x30
 8026134:	2f78      	cmp	r7, #120	; 0x78
 8026136:	4680      	mov	r8, r0
 8026138:	469a      	mov	sl, r3
 802613a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802613e:	d807      	bhi.n	8026150 <_printf_i+0x28>
 8026140:	2f62      	cmp	r7, #98	; 0x62
 8026142:	d80a      	bhi.n	802615a <_printf_i+0x32>
 8026144:	2f00      	cmp	r7, #0
 8026146:	f000 80d8 	beq.w	80262fa <_printf_i+0x1d2>
 802614a:	2f58      	cmp	r7, #88	; 0x58
 802614c:	f000 80a3 	beq.w	8026296 <_printf_i+0x16e>
 8026150:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8026154:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8026158:	e03a      	b.n	80261d0 <_printf_i+0xa8>
 802615a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802615e:	2b15      	cmp	r3, #21
 8026160:	d8f6      	bhi.n	8026150 <_printf_i+0x28>
 8026162:	a001      	add	r0, pc, #4	; (adr r0, 8026168 <_printf_i+0x40>)
 8026164:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8026168:	080261c1 	.word	0x080261c1
 802616c:	080261d5 	.word	0x080261d5
 8026170:	08026151 	.word	0x08026151
 8026174:	08026151 	.word	0x08026151
 8026178:	08026151 	.word	0x08026151
 802617c:	08026151 	.word	0x08026151
 8026180:	080261d5 	.word	0x080261d5
 8026184:	08026151 	.word	0x08026151
 8026188:	08026151 	.word	0x08026151
 802618c:	08026151 	.word	0x08026151
 8026190:	08026151 	.word	0x08026151
 8026194:	080262e1 	.word	0x080262e1
 8026198:	08026205 	.word	0x08026205
 802619c:	080262c3 	.word	0x080262c3
 80261a0:	08026151 	.word	0x08026151
 80261a4:	08026151 	.word	0x08026151
 80261a8:	08026303 	.word	0x08026303
 80261ac:	08026151 	.word	0x08026151
 80261b0:	08026205 	.word	0x08026205
 80261b4:	08026151 	.word	0x08026151
 80261b8:	08026151 	.word	0x08026151
 80261bc:	080262cb 	.word	0x080262cb
 80261c0:	680b      	ldr	r3, [r1, #0]
 80261c2:	1d1a      	adds	r2, r3, #4
 80261c4:	681b      	ldr	r3, [r3, #0]
 80261c6:	600a      	str	r2, [r1, #0]
 80261c8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80261cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80261d0:	2301      	movs	r3, #1
 80261d2:	e0a3      	b.n	802631c <_printf_i+0x1f4>
 80261d4:	6825      	ldr	r5, [r4, #0]
 80261d6:	6808      	ldr	r0, [r1, #0]
 80261d8:	062e      	lsls	r6, r5, #24
 80261da:	f100 0304 	add.w	r3, r0, #4
 80261de:	d50a      	bpl.n	80261f6 <_printf_i+0xce>
 80261e0:	6805      	ldr	r5, [r0, #0]
 80261e2:	600b      	str	r3, [r1, #0]
 80261e4:	2d00      	cmp	r5, #0
 80261e6:	da03      	bge.n	80261f0 <_printf_i+0xc8>
 80261e8:	232d      	movs	r3, #45	; 0x2d
 80261ea:	426d      	negs	r5, r5
 80261ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80261f0:	485e      	ldr	r0, [pc, #376]	; (802636c <_printf_i+0x244>)
 80261f2:	230a      	movs	r3, #10
 80261f4:	e019      	b.n	802622a <_printf_i+0x102>
 80261f6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80261fa:	6805      	ldr	r5, [r0, #0]
 80261fc:	600b      	str	r3, [r1, #0]
 80261fe:	bf18      	it	ne
 8026200:	b22d      	sxthne	r5, r5
 8026202:	e7ef      	b.n	80261e4 <_printf_i+0xbc>
 8026204:	680b      	ldr	r3, [r1, #0]
 8026206:	6825      	ldr	r5, [r4, #0]
 8026208:	1d18      	adds	r0, r3, #4
 802620a:	6008      	str	r0, [r1, #0]
 802620c:	0628      	lsls	r0, r5, #24
 802620e:	d501      	bpl.n	8026214 <_printf_i+0xec>
 8026210:	681d      	ldr	r5, [r3, #0]
 8026212:	e002      	b.n	802621a <_printf_i+0xf2>
 8026214:	0669      	lsls	r1, r5, #25
 8026216:	d5fb      	bpl.n	8026210 <_printf_i+0xe8>
 8026218:	881d      	ldrh	r5, [r3, #0]
 802621a:	4854      	ldr	r0, [pc, #336]	; (802636c <_printf_i+0x244>)
 802621c:	2f6f      	cmp	r7, #111	; 0x6f
 802621e:	bf0c      	ite	eq
 8026220:	2308      	moveq	r3, #8
 8026222:	230a      	movne	r3, #10
 8026224:	2100      	movs	r1, #0
 8026226:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802622a:	6866      	ldr	r6, [r4, #4]
 802622c:	60a6      	str	r6, [r4, #8]
 802622e:	2e00      	cmp	r6, #0
 8026230:	bfa2      	ittt	ge
 8026232:	6821      	ldrge	r1, [r4, #0]
 8026234:	f021 0104 	bicge.w	r1, r1, #4
 8026238:	6021      	strge	r1, [r4, #0]
 802623a:	b90d      	cbnz	r5, 8026240 <_printf_i+0x118>
 802623c:	2e00      	cmp	r6, #0
 802623e:	d04d      	beq.n	80262dc <_printf_i+0x1b4>
 8026240:	4616      	mov	r6, r2
 8026242:	fbb5 f1f3 	udiv	r1, r5, r3
 8026246:	fb03 5711 	mls	r7, r3, r1, r5
 802624a:	5dc7      	ldrb	r7, [r0, r7]
 802624c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8026250:	462f      	mov	r7, r5
 8026252:	42bb      	cmp	r3, r7
 8026254:	460d      	mov	r5, r1
 8026256:	d9f4      	bls.n	8026242 <_printf_i+0x11a>
 8026258:	2b08      	cmp	r3, #8
 802625a:	d10b      	bne.n	8026274 <_printf_i+0x14c>
 802625c:	6823      	ldr	r3, [r4, #0]
 802625e:	07df      	lsls	r7, r3, #31
 8026260:	d508      	bpl.n	8026274 <_printf_i+0x14c>
 8026262:	6923      	ldr	r3, [r4, #16]
 8026264:	6861      	ldr	r1, [r4, #4]
 8026266:	4299      	cmp	r1, r3
 8026268:	bfde      	ittt	le
 802626a:	2330      	movle	r3, #48	; 0x30
 802626c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8026270:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8026274:	1b92      	subs	r2, r2, r6
 8026276:	6122      	str	r2, [r4, #16]
 8026278:	f8cd a000 	str.w	sl, [sp]
 802627c:	464b      	mov	r3, r9
 802627e:	aa03      	add	r2, sp, #12
 8026280:	4621      	mov	r1, r4
 8026282:	4640      	mov	r0, r8
 8026284:	f7ff fee2 	bl	802604c <_printf_common>
 8026288:	3001      	adds	r0, #1
 802628a:	d14c      	bne.n	8026326 <_printf_i+0x1fe>
 802628c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8026290:	b004      	add	sp, #16
 8026292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026296:	4835      	ldr	r0, [pc, #212]	; (802636c <_printf_i+0x244>)
 8026298:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 802629c:	6823      	ldr	r3, [r4, #0]
 802629e:	680e      	ldr	r6, [r1, #0]
 80262a0:	061f      	lsls	r7, r3, #24
 80262a2:	f856 5b04 	ldr.w	r5, [r6], #4
 80262a6:	600e      	str	r6, [r1, #0]
 80262a8:	d514      	bpl.n	80262d4 <_printf_i+0x1ac>
 80262aa:	07d9      	lsls	r1, r3, #31
 80262ac:	bf44      	itt	mi
 80262ae:	f043 0320 	orrmi.w	r3, r3, #32
 80262b2:	6023      	strmi	r3, [r4, #0]
 80262b4:	b91d      	cbnz	r5, 80262be <_printf_i+0x196>
 80262b6:	6823      	ldr	r3, [r4, #0]
 80262b8:	f023 0320 	bic.w	r3, r3, #32
 80262bc:	6023      	str	r3, [r4, #0]
 80262be:	2310      	movs	r3, #16
 80262c0:	e7b0      	b.n	8026224 <_printf_i+0xfc>
 80262c2:	6823      	ldr	r3, [r4, #0]
 80262c4:	f043 0320 	orr.w	r3, r3, #32
 80262c8:	6023      	str	r3, [r4, #0]
 80262ca:	2378      	movs	r3, #120	; 0x78
 80262cc:	4828      	ldr	r0, [pc, #160]	; (8026370 <_printf_i+0x248>)
 80262ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80262d2:	e7e3      	b.n	802629c <_printf_i+0x174>
 80262d4:	065e      	lsls	r6, r3, #25
 80262d6:	bf48      	it	mi
 80262d8:	b2ad      	uxthmi	r5, r5
 80262da:	e7e6      	b.n	80262aa <_printf_i+0x182>
 80262dc:	4616      	mov	r6, r2
 80262de:	e7bb      	b.n	8026258 <_printf_i+0x130>
 80262e0:	680b      	ldr	r3, [r1, #0]
 80262e2:	6826      	ldr	r6, [r4, #0]
 80262e4:	6960      	ldr	r0, [r4, #20]
 80262e6:	1d1d      	adds	r5, r3, #4
 80262e8:	600d      	str	r5, [r1, #0]
 80262ea:	0635      	lsls	r5, r6, #24
 80262ec:	681b      	ldr	r3, [r3, #0]
 80262ee:	d501      	bpl.n	80262f4 <_printf_i+0x1cc>
 80262f0:	6018      	str	r0, [r3, #0]
 80262f2:	e002      	b.n	80262fa <_printf_i+0x1d2>
 80262f4:	0671      	lsls	r1, r6, #25
 80262f6:	d5fb      	bpl.n	80262f0 <_printf_i+0x1c8>
 80262f8:	8018      	strh	r0, [r3, #0]
 80262fa:	2300      	movs	r3, #0
 80262fc:	6123      	str	r3, [r4, #16]
 80262fe:	4616      	mov	r6, r2
 8026300:	e7ba      	b.n	8026278 <_printf_i+0x150>
 8026302:	680b      	ldr	r3, [r1, #0]
 8026304:	1d1a      	adds	r2, r3, #4
 8026306:	600a      	str	r2, [r1, #0]
 8026308:	681e      	ldr	r6, [r3, #0]
 802630a:	6862      	ldr	r2, [r4, #4]
 802630c:	2100      	movs	r1, #0
 802630e:	4630      	mov	r0, r6
 8026310:	f7d9 ff86 	bl	8000220 <memchr>
 8026314:	b108      	cbz	r0, 802631a <_printf_i+0x1f2>
 8026316:	1b80      	subs	r0, r0, r6
 8026318:	6060      	str	r0, [r4, #4]
 802631a:	6863      	ldr	r3, [r4, #4]
 802631c:	6123      	str	r3, [r4, #16]
 802631e:	2300      	movs	r3, #0
 8026320:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8026324:	e7a8      	b.n	8026278 <_printf_i+0x150>
 8026326:	6923      	ldr	r3, [r4, #16]
 8026328:	4632      	mov	r2, r6
 802632a:	4649      	mov	r1, r9
 802632c:	4640      	mov	r0, r8
 802632e:	47d0      	blx	sl
 8026330:	3001      	adds	r0, #1
 8026332:	d0ab      	beq.n	802628c <_printf_i+0x164>
 8026334:	6823      	ldr	r3, [r4, #0]
 8026336:	079b      	lsls	r3, r3, #30
 8026338:	d413      	bmi.n	8026362 <_printf_i+0x23a>
 802633a:	68e0      	ldr	r0, [r4, #12]
 802633c:	9b03      	ldr	r3, [sp, #12]
 802633e:	4298      	cmp	r0, r3
 8026340:	bfb8      	it	lt
 8026342:	4618      	movlt	r0, r3
 8026344:	e7a4      	b.n	8026290 <_printf_i+0x168>
 8026346:	2301      	movs	r3, #1
 8026348:	4632      	mov	r2, r6
 802634a:	4649      	mov	r1, r9
 802634c:	4640      	mov	r0, r8
 802634e:	47d0      	blx	sl
 8026350:	3001      	adds	r0, #1
 8026352:	d09b      	beq.n	802628c <_printf_i+0x164>
 8026354:	3501      	adds	r5, #1
 8026356:	68e3      	ldr	r3, [r4, #12]
 8026358:	9903      	ldr	r1, [sp, #12]
 802635a:	1a5b      	subs	r3, r3, r1
 802635c:	42ab      	cmp	r3, r5
 802635e:	dcf2      	bgt.n	8026346 <_printf_i+0x21e>
 8026360:	e7eb      	b.n	802633a <_printf_i+0x212>
 8026362:	2500      	movs	r5, #0
 8026364:	f104 0619 	add.w	r6, r4, #25
 8026368:	e7f5      	b.n	8026356 <_printf_i+0x22e>
 802636a:	bf00      	nop
 802636c:	08076169 	.word	0x08076169
 8026370:	0807617a 	.word	0x0807617a

08026374 <_sbrk_r>:
 8026374:	b538      	push	{r3, r4, r5, lr}
 8026376:	4d06      	ldr	r5, [pc, #24]	; (8026390 <_sbrk_r+0x1c>)
 8026378:	2300      	movs	r3, #0
 802637a:	4604      	mov	r4, r0
 802637c:	4608      	mov	r0, r1
 802637e:	602b      	str	r3, [r5, #0]
 8026380:	f7dc faf6 	bl	8002970 <_sbrk>
 8026384:	1c43      	adds	r3, r0, #1
 8026386:	d102      	bne.n	802638e <_sbrk_r+0x1a>
 8026388:	682b      	ldr	r3, [r5, #0]
 802638a:	b103      	cbz	r3, 802638e <_sbrk_r+0x1a>
 802638c:	6023      	str	r3, [r4, #0]
 802638e:	bd38      	pop	{r3, r4, r5, pc}
 8026390:	2004ab38 	.word	0x2004ab38

08026394 <_raise_r>:
 8026394:	291f      	cmp	r1, #31
 8026396:	b538      	push	{r3, r4, r5, lr}
 8026398:	4604      	mov	r4, r0
 802639a:	460d      	mov	r5, r1
 802639c:	d904      	bls.n	80263a8 <_raise_r+0x14>
 802639e:	2316      	movs	r3, #22
 80263a0:	6003      	str	r3, [r0, #0]
 80263a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80263a6:	bd38      	pop	{r3, r4, r5, pc}
 80263a8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80263aa:	b112      	cbz	r2, 80263b2 <_raise_r+0x1e>
 80263ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80263b0:	b94b      	cbnz	r3, 80263c6 <_raise_r+0x32>
 80263b2:	4620      	mov	r0, r4
 80263b4:	f000 f830 	bl	8026418 <_getpid_r>
 80263b8:	462a      	mov	r2, r5
 80263ba:	4601      	mov	r1, r0
 80263bc:	4620      	mov	r0, r4
 80263be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80263c2:	f000 b817 	b.w	80263f4 <_kill_r>
 80263c6:	2b01      	cmp	r3, #1
 80263c8:	d00a      	beq.n	80263e0 <_raise_r+0x4c>
 80263ca:	1c59      	adds	r1, r3, #1
 80263cc:	d103      	bne.n	80263d6 <_raise_r+0x42>
 80263ce:	2316      	movs	r3, #22
 80263d0:	6003      	str	r3, [r0, #0]
 80263d2:	2001      	movs	r0, #1
 80263d4:	e7e7      	b.n	80263a6 <_raise_r+0x12>
 80263d6:	2400      	movs	r4, #0
 80263d8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80263dc:	4628      	mov	r0, r5
 80263de:	4798      	blx	r3
 80263e0:	2000      	movs	r0, #0
 80263e2:	e7e0      	b.n	80263a6 <_raise_r+0x12>

080263e4 <raise>:
 80263e4:	4b02      	ldr	r3, [pc, #8]	; (80263f0 <raise+0xc>)
 80263e6:	4601      	mov	r1, r0
 80263e8:	6818      	ldr	r0, [r3, #0]
 80263ea:	f7ff bfd3 	b.w	8026394 <_raise_r>
 80263ee:	bf00      	nop
 80263f0:	2000001c 	.word	0x2000001c

080263f4 <_kill_r>:
 80263f4:	b538      	push	{r3, r4, r5, lr}
 80263f6:	4d07      	ldr	r5, [pc, #28]	; (8026414 <_kill_r+0x20>)
 80263f8:	2300      	movs	r3, #0
 80263fa:	4604      	mov	r4, r0
 80263fc:	4608      	mov	r0, r1
 80263fe:	4611      	mov	r1, r2
 8026400:	602b      	str	r3, [r5, #0]
 8026402:	f7dc fa2d 	bl	8002860 <_kill>
 8026406:	1c43      	adds	r3, r0, #1
 8026408:	d102      	bne.n	8026410 <_kill_r+0x1c>
 802640a:	682b      	ldr	r3, [r5, #0]
 802640c:	b103      	cbz	r3, 8026410 <_kill_r+0x1c>
 802640e:	6023      	str	r3, [r4, #0]
 8026410:	bd38      	pop	{r3, r4, r5, pc}
 8026412:	bf00      	nop
 8026414:	2004ab38 	.word	0x2004ab38

08026418 <_getpid_r>:
 8026418:	f7dc ba1a 	b.w	8002850 <_getpid>

0802641c <strncmp>:
 802641c:	b510      	push	{r4, lr}
 802641e:	b16a      	cbz	r2, 802643c <strncmp+0x20>
 8026420:	3901      	subs	r1, #1
 8026422:	1884      	adds	r4, r0, r2
 8026424:	f810 3b01 	ldrb.w	r3, [r0], #1
 8026428:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 802642c:	4293      	cmp	r3, r2
 802642e:	d103      	bne.n	8026438 <strncmp+0x1c>
 8026430:	42a0      	cmp	r0, r4
 8026432:	d001      	beq.n	8026438 <strncmp+0x1c>
 8026434:	2b00      	cmp	r3, #0
 8026436:	d1f5      	bne.n	8026424 <strncmp+0x8>
 8026438:	1a98      	subs	r0, r3, r2
 802643a:	bd10      	pop	{r4, pc}
 802643c:	4610      	mov	r0, r2
 802643e:	e7fc      	b.n	802643a <strncmp+0x1e>

08026440 <strncpy>:
 8026440:	b510      	push	{r4, lr}
 8026442:	3901      	subs	r1, #1
 8026444:	4603      	mov	r3, r0
 8026446:	b132      	cbz	r2, 8026456 <strncpy+0x16>
 8026448:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 802644c:	f803 4b01 	strb.w	r4, [r3], #1
 8026450:	3a01      	subs	r2, #1
 8026452:	2c00      	cmp	r4, #0
 8026454:	d1f7      	bne.n	8026446 <strncpy+0x6>
 8026456:	441a      	add	r2, r3
 8026458:	2100      	movs	r1, #0
 802645a:	4293      	cmp	r3, r2
 802645c:	d100      	bne.n	8026460 <strncpy+0x20>
 802645e:	bd10      	pop	{r4, pc}
 8026460:	f803 1b01 	strb.w	r1, [r3], #1
 8026464:	e7f9      	b.n	802645a <strncpy+0x1a>
	...

08026468 <__swbuf_r>:
 8026468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802646a:	460e      	mov	r6, r1
 802646c:	4614      	mov	r4, r2
 802646e:	4605      	mov	r5, r0
 8026470:	b118      	cbz	r0, 802647a <__swbuf_r+0x12>
 8026472:	6983      	ldr	r3, [r0, #24]
 8026474:	b90b      	cbnz	r3, 802647a <__swbuf_r+0x12>
 8026476:	f000 fa33 	bl	80268e0 <__sinit>
 802647a:	4b21      	ldr	r3, [pc, #132]	; (8026500 <__swbuf_r+0x98>)
 802647c:	429c      	cmp	r4, r3
 802647e:	d12b      	bne.n	80264d8 <__swbuf_r+0x70>
 8026480:	686c      	ldr	r4, [r5, #4]
 8026482:	69a3      	ldr	r3, [r4, #24]
 8026484:	60a3      	str	r3, [r4, #8]
 8026486:	89a3      	ldrh	r3, [r4, #12]
 8026488:	071a      	lsls	r2, r3, #28
 802648a:	d52f      	bpl.n	80264ec <__swbuf_r+0x84>
 802648c:	6923      	ldr	r3, [r4, #16]
 802648e:	b36b      	cbz	r3, 80264ec <__swbuf_r+0x84>
 8026490:	6923      	ldr	r3, [r4, #16]
 8026492:	6820      	ldr	r0, [r4, #0]
 8026494:	1ac0      	subs	r0, r0, r3
 8026496:	6963      	ldr	r3, [r4, #20]
 8026498:	b2f6      	uxtb	r6, r6
 802649a:	4283      	cmp	r3, r0
 802649c:	4637      	mov	r7, r6
 802649e:	dc04      	bgt.n	80264aa <__swbuf_r+0x42>
 80264a0:	4621      	mov	r1, r4
 80264a2:	4628      	mov	r0, r5
 80264a4:	f000 f988 	bl	80267b8 <_fflush_r>
 80264a8:	bb30      	cbnz	r0, 80264f8 <__swbuf_r+0x90>
 80264aa:	68a3      	ldr	r3, [r4, #8]
 80264ac:	3b01      	subs	r3, #1
 80264ae:	60a3      	str	r3, [r4, #8]
 80264b0:	6823      	ldr	r3, [r4, #0]
 80264b2:	1c5a      	adds	r2, r3, #1
 80264b4:	6022      	str	r2, [r4, #0]
 80264b6:	701e      	strb	r6, [r3, #0]
 80264b8:	6963      	ldr	r3, [r4, #20]
 80264ba:	3001      	adds	r0, #1
 80264bc:	4283      	cmp	r3, r0
 80264be:	d004      	beq.n	80264ca <__swbuf_r+0x62>
 80264c0:	89a3      	ldrh	r3, [r4, #12]
 80264c2:	07db      	lsls	r3, r3, #31
 80264c4:	d506      	bpl.n	80264d4 <__swbuf_r+0x6c>
 80264c6:	2e0a      	cmp	r6, #10
 80264c8:	d104      	bne.n	80264d4 <__swbuf_r+0x6c>
 80264ca:	4621      	mov	r1, r4
 80264cc:	4628      	mov	r0, r5
 80264ce:	f000 f973 	bl	80267b8 <_fflush_r>
 80264d2:	b988      	cbnz	r0, 80264f8 <__swbuf_r+0x90>
 80264d4:	4638      	mov	r0, r7
 80264d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80264d8:	4b0a      	ldr	r3, [pc, #40]	; (8026504 <__swbuf_r+0x9c>)
 80264da:	429c      	cmp	r4, r3
 80264dc:	d101      	bne.n	80264e2 <__swbuf_r+0x7a>
 80264de:	68ac      	ldr	r4, [r5, #8]
 80264e0:	e7cf      	b.n	8026482 <__swbuf_r+0x1a>
 80264e2:	4b09      	ldr	r3, [pc, #36]	; (8026508 <__swbuf_r+0xa0>)
 80264e4:	429c      	cmp	r4, r3
 80264e6:	bf08      	it	eq
 80264e8:	68ec      	ldreq	r4, [r5, #12]
 80264ea:	e7ca      	b.n	8026482 <__swbuf_r+0x1a>
 80264ec:	4621      	mov	r1, r4
 80264ee:	4628      	mov	r0, r5
 80264f0:	f000 f80c 	bl	802650c <__swsetup_r>
 80264f4:	2800      	cmp	r0, #0
 80264f6:	d0cb      	beq.n	8026490 <__swbuf_r+0x28>
 80264f8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80264fc:	e7ea      	b.n	80264d4 <__swbuf_r+0x6c>
 80264fe:	bf00      	nop
 8026500:	080761ac 	.word	0x080761ac
 8026504:	080761cc 	.word	0x080761cc
 8026508:	0807618c 	.word	0x0807618c

0802650c <__swsetup_r>:
 802650c:	4b32      	ldr	r3, [pc, #200]	; (80265d8 <__swsetup_r+0xcc>)
 802650e:	b570      	push	{r4, r5, r6, lr}
 8026510:	681d      	ldr	r5, [r3, #0]
 8026512:	4606      	mov	r6, r0
 8026514:	460c      	mov	r4, r1
 8026516:	b125      	cbz	r5, 8026522 <__swsetup_r+0x16>
 8026518:	69ab      	ldr	r3, [r5, #24]
 802651a:	b913      	cbnz	r3, 8026522 <__swsetup_r+0x16>
 802651c:	4628      	mov	r0, r5
 802651e:	f000 f9df 	bl	80268e0 <__sinit>
 8026522:	4b2e      	ldr	r3, [pc, #184]	; (80265dc <__swsetup_r+0xd0>)
 8026524:	429c      	cmp	r4, r3
 8026526:	d10f      	bne.n	8026548 <__swsetup_r+0x3c>
 8026528:	686c      	ldr	r4, [r5, #4]
 802652a:	89a3      	ldrh	r3, [r4, #12]
 802652c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8026530:	0719      	lsls	r1, r3, #28
 8026532:	d42c      	bmi.n	802658e <__swsetup_r+0x82>
 8026534:	06dd      	lsls	r5, r3, #27
 8026536:	d411      	bmi.n	802655c <__swsetup_r+0x50>
 8026538:	2309      	movs	r3, #9
 802653a:	6033      	str	r3, [r6, #0]
 802653c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8026540:	81a3      	strh	r3, [r4, #12]
 8026542:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8026546:	e03e      	b.n	80265c6 <__swsetup_r+0xba>
 8026548:	4b25      	ldr	r3, [pc, #148]	; (80265e0 <__swsetup_r+0xd4>)
 802654a:	429c      	cmp	r4, r3
 802654c:	d101      	bne.n	8026552 <__swsetup_r+0x46>
 802654e:	68ac      	ldr	r4, [r5, #8]
 8026550:	e7eb      	b.n	802652a <__swsetup_r+0x1e>
 8026552:	4b24      	ldr	r3, [pc, #144]	; (80265e4 <__swsetup_r+0xd8>)
 8026554:	429c      	cmp	r4, r3
 8026556:	bf08      	it	eq
 8026558:	68ec      	ldreq	r4, [r5, #12]
 802655a:	e7e6      	b.n	802652a <__swsetup_r+0x1e>
 802655c:	0758      	lsls	r0, r3, #29
 802655e:	d512      	bpl.n	8026586 <__swsetup_r+0x7a>
 8026560:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8026562:	b141      	cbz	r1, 8026576 <__swsetup_r+0x6a>
 8026564:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8026568:	4299      	cmp	r1, r3
 802656a:	d002      	beq.n	8026572 <__swsetup_r+0x66>
 802656c:	4630      	mov	r0, r6
 802656e:	f7ff fb69 	bl	8025c44 <_free_r>
 8026572:	2300      	movs	r3, #0
 8026574:	6363      	str	r3, [r4, #52]	; 0x34
 8026576:	89a3      	ldrh	r3, [r4, #12]
 8026578:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802657c:	81a3      	strh	r3, [r4, #12]
 802657e:	2300      	movs	r3, #0
 8026580:	6063      	str	r3, [r4, #4]
 8026582:	6923      	ldr	r3, [r4, #16]
 8026584:	6023      	str	r3, [r4, #0]
 8026586:	89a3      	ldrh	r3, [r4, #12]
 8026588:	f043 0308 	orr.w	r3, r3, #8
 802658c:	81a3      	strh	r3, [r4, #12]
 802658e:	6923      	ldr	r3, [r4, #16]
 8026590:	b94b      	cbnz	r3, 80265a6 <__swsetup_r+0x9a>
 8026592:	89a3      	ldrh	r3, [r4, #12]
 8026594:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8026598:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802659c:	d003      	beq.n	80265a6 <__swsetup_r+0x9a>
 802659e:	4621      	mov	r1, r4
 80265a0:	4630      	mov	r0, r6
 80265a2:	f000 fa5f 	bl	8026a64 <__smakebuf_r>
 80265a6:	89a0      	ldrh	r0, [r4, #12]
 80265a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80265ac:	f010 0301 	ands.w	r3, r0, #1
 80265b0:	d00a      	beq.n	80265c8 <__swsetup_r+0xbc>
 80265b2:	2300      	movs	r3, #0
 80265b4:	60a3      	str	r3, [r4, #8]
 80265b6:	6963      	ldr	r3, [r4, #20]
 80265b8:	425b      	negs	r3, r3
 80265ba:	61a3      	str	r3, [r4, #24]
 80265bc:	6923      	ldr	r3, [r4, #16]
 80265be:	b943      	cbnz	r3, 80265d2 <__swsetup_r+0xc6>
 80265c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80265c4:	d1ba      	bne.n	802653c <__swsetup_r+0x30>
 80265c6:	bd70      	pop	{r4, r5, r6, pc}
 80265c8:	0781      	lsls	r1, r0, #30
 80265ca:	bf58      	it	pl
 80265cc:	6963      	ldrpl	r3, [r4, #20]
 80265ce:	60a3      	str	r3, [r4, #8]
 80265d0:	e7f4      	b.n	80265bc <__swsetup_r+0xb0>
 80265d2:	2000      	movs	r0, #0
 80265d4:	e7f7      	b.n	80265c6 <__swsetup_r+0xba>
 80265d6:	bf00      	nop
 80265d8:	2000001c 	.word	0x2000001c
 80265dc:	080761ac 	.word	0x080761ac
 80265e0:	080761cc 	.word	0x080761cc
 80265e4:	0807618c 	.word	0x0807618c

080265e8 <__register_exitproc>:
 80265e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80265ec:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 80266a8 <__register_exitproc+0xc0>
 80265f0:	4606      	mov	r6, r0
 80265f2:	f8d8 0000 	ldr.w	r0, [r8]
 80265f6:	461f      	mov	r7, r3
 80265f8:	460d      	mov	r5, r1
 80265fa:	4691      	mov	r9, r2
 80265fc:	f7ff faf9 	bl	8025bf2 <__retarget_lock_acquire_recursive>
 8026600:	4b25      	ldr	r3, [pc, #148]	; (8026698 <__register_exitproc+0xb0>)
 8026602:	681c      	ldr	r4, [r3, #0]
 8026604:	b934      	cbnz	r4, 8026614 <__register_exitproc+0x2c>
 8026606:	4c25      	ldr	r4, [pc, #148]	; (802669c <__register_exitproc+0xb4>)
 8026608:	601c      	str	r4, [r3, #0]
 802660a:	4b25      	ldr	r3, [pc, #148]	; (80266a0 <__register_exitproc+0xb8>)
 802660c:	b113      	cbz	r3, 8026614 <__register_exitproc+0x2c>
 802660e:	681b      	ldr	r3, [r3, #0]
 8026610:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8026614:	6863      	ldr	r3, [r4, #4]
 8026616:	2b1f      	cmp	r3, #31
 8026618:	dd07      	ble.n	802662a <__register_exitproc+0x42>
 802661a:	f8d8 0000 	ldr.w	r0, [r8]
 802661e:	f7ff faea 	bl	8025bf6 <__retarget_lock_release_recursive>
 8026622:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8026626:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802662a:	b34e      	cbz	r6, 8026680 <__register_exitproc+0x98>
 802662c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8026630:	b988      	cbnz	r0, 8026656 <__register_exitproc+0x6e>
 8026632:	4b1c      	ldr	r3, [pc, #112]	; (80266a4 <__register_exitproc+0xbc>)
 8026634:	b923      	cbnz	r3, 8026640 <__register_exitproc+0x58>
 8026636:	f8d8 0000 	ldr.w	r0, [r8]
 802663a:	f7ff fadb 	bl	8025bf4 <__retarget_lock_release>
 802663e:	e7f0      	b.n	8026622 <__register_exitproc+0x3a>
 8026640:	f44f 7084 	mov.w	r0, #264	; 0x108
 8026644:	f7ff fad8 	bl	8025bf8 <malloc>
 8026648:	2800      	cmp	r0, #0
 802664a:	d0f4      	beq.n	8026636 <__register_exitproc+0x4e>
 802664c:	2300      	movs	r3, #0
 802664e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8026652:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8026656:	6863      	ldr	r3, [r4, #4]
 8026658:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 802665c:	2201      	movs	r2, #1
 802665e:	409a      	lsls	r2, r3
 8026660:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8026664:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8026668:	4313      	orrs	r3, r2
 802666a:	2e02      	cmp	r6, #2
 802666c:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8026670:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8026674:	bf02      	ittt	eq
 8026676:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 802667a:	431a      	orreq	r2, r3
 802667c:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 8026680:	6863      	ldr	r3, [r4, #4]
 8026682:	f8d8 0000 	ldr.w	r0, [r8]
 8026686:	1c5a      	adds	r2, r3, #1
 8026688:	3302      	adds	r3, #2
 802668a:	6062      	str	r2, [r4, #4]
 802668c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8026690:	f7ff fab1 	bl	8025bf6 <__retarget_lock_release_recursive>
 8026694:	2000      	movs	r0, #0
 8026696:	e7c6      	b.n	8026626 <__register_exitproc+0x3e>
 8026698:	2004a560 	.word	0x2004a560
 802669c:	2004a4d4 	.word	0x2004a4d4
 80266a0:	00000000 	.word	0x00000000
 80266a4:	08025bf9 	.word	0x08025bf9
 80266a8:	20000080 	.word	0x20000080

080266ac <__sflush_r>:
 80266ac:	898a      	ldrh	r2, [r1, #12]
 80266ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80266b2:	4605      	mov	r5, r0
 80266b4:	0710      	lsls	r0, r2, #28
 80266b6:	460c      	mov	r4, r1
 80266b8:	d458      	bmi.n	802676c <__sflush_r+0xc0>
 80266ba:	684b      	ldr	r3, [r1, #4]
 80266bc:	2b00      	cmp	r3, #0
 80266be:	dc05      	bgt.n	80266cc <__sflush_r+0x20>
 80266c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80266c2:	2b00      	cmp	r3, #0
 80266c4:	dc02      	bgt.n	80266cc <__sflush_r+0x20>
 80266c6:	2000      	movs	r0, #0
 80266c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80266cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80266ce:	2e00      	cmp	r6, #0
 80266d0:	d0f9      	beq.n	80266c6 <__sflush_r+0x1a>
 80266d2:	2300      	movs	r3, #0
 80266d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80266d8:	682f      	ldr	r7, [r5, #0]
 80266da:	602b      	str	r3, [r5, #0]
 80266dc:	d032      	beq.n	8026744 <__sflush_r+0x98>
 80266de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80266e0:	89a3      	ldrh	r3, [r4, #12]
 80266e2:	075a      	lsls	r2, r3, #29
 80266e4:	d505      	bpl.n	80266f2 <__sflush_r+0x46>
 80266e6:	6863      	ldr	r3, [r4, #4]
 80266e8:	1ac0      	subs	r0, r0, r3
 80266ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80266ec:	b10b      	cbz	r3, 80266f2 <__sflush_r+0x46>
 80266ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80266f0:	1ac0      	subs	r0, r0, r3
 80266f2:	2300      	movs	r3, #0
 80266f4:	4602      	mov	r2, r0
 80266f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80266f8:	6a21      	ldr	r1, [r4, #32]
 80266fa:	4628      	mov	r0, r5
 80266fc:	47b0      	blx	r6
 80266fe:	1c43      	adds	r3, r0, #1
 8026700:	89a3      	ldrh	r3, [r4, #12]
 8026702:	d106      	bne.n	8026712 <__sflush_r+0x66>
 8026704:	6829      	ldr	r1, [r5, #0]
 8026706:	291d      	cmp	r1, #29
 8026708:	d82c      	bhi.n	8026764 <__sflush_r+0xb8>
 802670a:	4a2a      	ldr	r2, [pc, #168]	; (80267b4 <__sflush_r+0x108>)
 802670c:	40ca      	lsrs	r2, r1
 802670e:	07d6      	lsls	r6, r2, #31
 8026710:	d528      	bpl.n	8026764 <__sflush_r+0xb8>
 8026712:	2200      	movs	r2, #0
 8026714:	6062      	str	r2, [r4, #4]
 8026716:	04d9      	lsls	r1, r3, #19
 8026718:	6922      	ldr	r2, [r4, #16]
 802671a:	6022      	str	r2, [r4, #0]
 802671c:	d504      	bpl.n	8026728 <__sflush_r+0x7c>
 802671e:	1c42      	adds	r2, r0, #1
 8026720:	d101      	bne.n	8026726 <__sflush_r+0x7a>
 8026722:	682b      	ldr	r3, [r5, #0]
 8026724:	b903      	cbnz	r3, 8026728 <__sflush_r+0x7c>
 8026726:	6560      	str	r0, [r4, #84]	; 0x54
 8026728:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802672a:	602f      	str	r7, [r5, #0]
 802672c:	2900      	cmp	r1, #0
 802672e:	d0ca      	beq.n	80266c6 <__sflush_r+0x1a>
 8026730:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8026734:	4299      	cmp	r1, r3
 8026736:	d002      	beq.n	802673e <__sflush_r+0x92>
 8026738:	4628      	mov	r0, r5
 802673a:	f7ff fa83 	bl	8025c44 <_free_r>
 802673e:	2000      	movs	r0, #0
 8026740:	6360      	str	r0, [r4, #52]	; 0x34
 8026742:	e7c1      	b.n	80266c8 <__sflush_r+0x1c>
 8026744:	6a21      	ldr	r1, [r4, #32]
 8026746:	2301      	movs	r3, #1
 8026748:	4628      	mov	r0, r5
 802674a:	47b0      	blx	r6
 802674c:	1c41      	adds	r1, r0, #1
 802674e:	d1c7      	bne.n	80266e0 <__sflush_r+0x34>
 8026750:	682b      	ldr	r3, [r5, #0]
 8026752:	2b00      	cmp	r3, #0
 8026754:	d0c4      	beq.n	80266e0 <__sflush_r+0x34>
 8026756:	2b1d      	cmp	r3, #29
 8026758:	d001      	beq.n	802675e <__sflush_r+0xb2>
 802675a:	2b16      	cmp	r3, #22
 802675c:	d101      	bne.n	8026762 <__sflush_r+0xb6>
 802675e:	602f      	str	r7, [r5, #0]
 8026760:	e7b1      	b.n	80266c6 <__sflush_r+0x1a>
 8026762:	89a3      	ldrh	r3, [r4, #12]
 8026764:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8026768:	81a3      	strh	r3, [r4, #12]
 802676a:	e7ad      	b.n	80266c8 <__sflush_r+0x1c>
 802676c:	690f      	ldr	r7, [r1, #16]
 802676e:	2f00      	cmp	r7, #0
 8026770:	d0a9      	beq.n	80266c6 <__sflush_r+0x1a>
 8026772:	0793      	lsls	r3, r2, #30
 8026774:	680e      	ldr	r6, [r1, #0]
 8026776:	bf08      	it	eq
 8026778:	694b      	ldreq	r3, [r1, #20]
 802677a:	600f      	str	r7, [r1, #0]
 802677c:	bf18      	it	ne
 802677e:	2300      	movne	r3, #0
 8026780:	eba6 0807 	sub.w	r8, r6, r7
 8026784:	608b      	str	r3, [r1, #8]
 8026786:	f1b8 0f00 	cmp.w	r8, #0
 802678a:	dd9c      	ble.n	80266c6 <__sflush_r+0x1a>
 802678c:	6a21      	ldr	r1, [r4, #32]
 802678e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8026790:	4643      	mov	r3, r8
 8026792:	463a      	mov	r2, r7
 8026794:	4628      	mov	r0, r5
 8026796:	47b0      	blx	r6
 8026798:	2800      	cmp	r0, #0
 802679a:	dc06      	bgt.n	80267aa <__sflush_r+0xfe>
 802679c:	89a3      	ldrh	r3, [r4, #12]
 802679e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80267a2:	81a3      	strh	r3, [r4, #12]
 80267a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80267a8:	e78e      	b.n	80266c8 <__sflush_r+0x1c>
 80267aa:	4407      	add	r7, r0
 80267ac:	eba8 0800 	sub.w	r8, r8, r0
 80267b0:	e7e9      	b.n	8026786 <__sflush_r+0xda>
 80267b2:	bf00      	nop
 80267b4:	20400001 	.word	0x20400001

080267b8 <_fflush_r>:
 80267b8:	b538      	push	{r3, r4, r5, lr}
 80267ba:	690b      	ldr	r3, [r1, #16]
 80267bc:	4605      	mov	r5, r0
 80267be:	460c      	mov	r4, r1
 80267c0:	b913      	cbnz	r3, 80267c8 <_fflush_r+0x10>
 80267c2:	2500      	movs	r5, #0
 80267c4:	4628      	mov	r0, r5
 80267c6:	bd38      	pop	{r3, r4, r5, pc}
 80267c8:	b118      	cbz	r0, 80267d2 <_fflush_r+0x1a>
 80267ca:	6983      	ldr	r3, [r0, #24]
 80267cc:	b90b      	cbnz	r3, 80267d2 <_fflush_r+0x1a>
 80267ce:	f000 f887 	bl	80268e0 <__sinit>
 80267d2:	4b14      	ldr	r3, [pc, #80]	; (8026824 <_fflush_r+0x6c>)
 80267d4:	429c      	cmp	r4, r3
 80267d6:	d11b      	bne.n	8026810 <_fflush_r+0x58>
 80267d8:	686c      	ldr	r4, [r5, #4]
 80267da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80267de:	2b00      	cmp	r3, #0
 80267e0:	d0ef      	beq.n	80267c2 <_fflush_r+0xa>
 80267e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80267e4:	07d0      	lsls	r0, r2, #31
 80267e6:	d404      	bmi.n	80267f2 <_fflush_r+0x3a>
 80267e8:	0599      	lsls	r1, r3, #22
 80267ea:	d402      	bmi.n	80267f2 <_fflush_r+0x3a>
 80267ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80267ee:	f7ff fa00 	bl	8025bf2 <__retarget_lock_acquire_recursive>
 80267f2:	4628      	mov	r0, r5
 80267f4:	4621      	mov	r1, r4
 80267f6:	f7ff ff59 	bl	80266ac <__sflush_r>
 80267fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80267fc:	07da      	lsls	r2, r3, #31
 80267fe:	4605      	mov	r5, r0
 8026800:	d4e0      	bmi.n	80267c4 <_fflush_r+0xc>
 8026802:	89a3      	ldrh	r3, [r4, #12]
 8026804:	059b      	lsls	r3, r3, #22
 8026806:	d4dd      	bmi.n	80267c4 <_fflush_r+0xc>
 8026808:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802680a:	f7ff f9f4 	bl	8025bf6 <__retarget_lock_release_recursive>
 802680e:	e7d9      	b.n	80267c4 <_fflush_r+0xc>
 8026810:	4b05      	ldr	r3, [pc, #20]	; (8026828 <_fflush_r+0x70>)
 8026812:	429c      	cmp	r4, r3
 8026814:	d101      	bne.n	802681a <_fflush_r+0x62>
 8026816:	68ac      	ldr	r4, [r5, #8]
 8026818:	e7df      	b.n	80267da <_fflush_r+0x22>
 802681a:	4b04      	ldr	r3, [pc, #16]	; (802682c <_fflush_r+0x74>)
 802681c:	429c      	cmp	r4, r3
 802681e:	bf08      	it	eq
 8026820:	68ec      	ldreq	r4, [r5, #12]
 8026822:	e7da      	b.n	80267da <_fflush_r+0x22>
 8026824:	080761ac 	.word	0x080761ac
 8026828:	080761cc 	.word	0x080761cc
 802682c:	0807618c 	.word	0x0807618c

08026830 <std>:
 8026830:	2300      	movs	r3, #0
 8026832:	b510      	push	{r4, lr}
 8026834:	4604      	mov	r4, r0
 8026836:	e9c0 3300 	strd	r3, r3, [r0]
 802683a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802683e:	6083      	str	r3, [r0, #8]
 8026840:	8181      	strh	r1, [r0, #12]
 8026842:	6643      	str	r3, [r0, #100]	; 0x64
 8026844:	81c2      	strh	r2, [r0, #14]
 8026846:	6183      	str	r3, [r0, #24]
 8026848:	4619      	mov	r1, r3
 802684a:	2208      	movs	r2, #8
 802684c:	305c      	adds	r0, #92	; 0x5c
 802684e:	f7ff f9f1 	bl	8025c34 <memset>
 8026852:	4b05      	ldr	r3, [pc, #20]	; (8026868 <std+0x38>)
 8026854:	6263      	str	r3, [r4, #36]	; 0x24
 8026856:	4b05      	ldr	r3, [pc, #20]	; (802686c <std+0x3c>)
 8026858:	62a3      	str	r3, [r4, #40]	; 0x28
 802685a:	4b05      	ldr	r3, [pc, #20]	; (8026870 <std+0x40>)
 802685c:	62e3      	str	r3, [r4, #44]	; 0x2c
 802685e:	4b05      	ldr	r3, [pc, #20]	; (8026874 <std+0x44>)
 8026860:	6224      	str	r4, [r4, #32]
 8026862:	6323      	str	r3, [r4, #48]	; 0x30
 8026864:	bd10      	pop	{r4, pc}
 8026866:	bf00      	nop
 8026868:	08026afd 	.word	0x08026afd
 802686c:	08026b1f 	.word	0x08026b1f
 8026870:	08026b57 	.word	0x08026b57
 8026874:	08026b7b 	.word	0x08026b7b

08026878 <_cleanup_r>:
 8026878:	4901      	ldr	r1, [pc, #4]	; (8026880 <_cleanup_r+0x8>)
 802687a:	f000 b8af 	b.w	80269dc <_fwalk_reent>
 802687e:	bf00      	nop
 8026880:	080267b9 	.word	0x080267b9

08026884 <__sfmoreglue>:
 8026884:	b570      	push	{r4, r5, r6, lr}
 8026886:	1e4a      	subs	r2, r1, #1
 8026888:	2568      	movs	r5, #104	; 0x68
 802688a:	4355      	muls	r5, r2
 802688c:	460e      	mov	r6, r1
 802688e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8026892:	f7ff fa27 	bl	8025ce4 <_malloc_r>
 8026896:	4604      	mov	r4, r0
 8026898:	b140      	cbz	r0, 80268ac <__sfmoreglue+0x28>
 802689a:	2100      	movs	r1, #0
 802689c:	e9c0 1600 	strd	r1, r6, [r0]
 80268a0:	300c      	adds	r0, #12
 80268a2:	60a0      	str	r0, [r4, #8]
 80268a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80268a8:	f7ff f9c4 	bl	8025c34 <memset>
 80268ac:	4620      	mov	r0, r4
 80268ae:	bd70      	pop	{r4, r5, r6, pc}

080268b0 <__sfp_lock_acquire>:
 80268b0:	4801      	ldr	r0, [pc, #4]	; (80268b8 <__sfp_lock_acquire+0x8>)
 80268b2:	f7ff b99e 	b.w	8025bf2 <__retarget_lock_acquire_recursive>
 80268b6:	bf00      	nop
 80268b8:	2004ab30 	.word	0x2004ab30

080268bc <__sfp_lock_release>:
 80268bc:	4801      	ldr	r0, [pc, #4]	; (80268c4 <__sfp_lock_release+0x8>)
 80268be:	f7ff b99a 	b.w	8025bf6 <__retarget_lock_release_recursive>
 80268c2:	bf00      	nop
 80268c4:	2004ab30 	.word	0x2004ab30

080268c8 <__sinit_lock_acquire>:
 80268c8:	4801      	ldr	r0, [pc, #4]	; (80268d0 <__sinit_lock_acquire+0x8>)
 80268ca:	f7ff b992 	b.w	8025bf2 <__retarget_lock_acquire_recursive>
 80268ce:	bf00      	nop
 80268d0:	2004ab2f 	.word	0x2004ab2f

080268d4 <__sinit_lock_release>:
 80268d4:	4801      	ldr	r0, [pc, #4]	; (80268dc <__sinit_lock_release+0x8>)
 80268d6:	f7ff b98e 	b.w	8025bf6 <__retarget_lock_release_recursive>
 80268da:	bf00      	nop
 80268dc:	2004ab2f 	.word	0x2004ab2f

080268e0 <__sinit>:
 80268e0:	b510      	push	{r4, lr}
 80268e2:	4604      	mov	r4, r0
 80268e4:	f7ff fff0 	bl	80268c8 <__sinit_lock_acquire>
 80268e8:	69a3      	ldr	r3, [r4, #24]
 80268ea:	b11b      	cbz	r3, 80268f4 <__sinit+0x14>
 80268ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80268f0:	f7ff bff0 	b.w	80268d4 <__sinit_lock_release>
 80268f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80268f8:	6523      	str	r3, [r4, #80]	; 0x50
 80268fa:	4b13      	ldr	r3, [pc, #76]	; (8026948 <__sinit+0x68>)
 80268fc:	4a13      	ldr	r2, [pc, #76]	; (802694c <__sinit+0x6c>)
 80268fe:	681b      	ldr	r3, [r3, #0]
 8026900:	62a2      	str	r2, [r4, #40]	; 0x28
 8026902:	42a3      	cmp	r3, r4
 8026904:	bf04      	itt	eq
 8026906:	2301      	moveq	r3, #1
 8026908:	61a3      	streq	r3, [r4, #24]
 802690a:	4620      	mov	r0, r4
 802690c:	f000 f820 	bl	8026950 <__sfp>
 8026910:	6060      	str	r0, [r4, #4]
 8026912:	4620      	mov	r0, r4
 8026914:	f000 f81c 	bl	8026950 <__sfp>
 8026918:	60a0      	str	r0, [r4, #8]
 802691a:	4620      	mov	r0, r4
 802691c:	f000 f818 	bl	8026950 <__sfp>
 8026920:	2200      	movs	r2, #0
 8026922:	60e0      	str	r0, [r4, #12]
 8026924:	2104      	movs	r1, #4
 8026926:	6860      	ldr	r0, [r4, #4]
 8026928:	f7ff ff82 	bl	8026830 <std>
 802692c:	68a0      	ldr	r0, [r4, #8]
 802692e:	2201      	movs	r2, #1
 8026930:	2109      	movs	r1, #9
 8026932:	f7ff ff7d 	bl	8026830 <std>
 8026936:	68e0      	ldr	r0, [r4, #12]
 8026938:	2202      	movs	r2, #2
 802693a:	2112      	movs	r1, #18
 802693c:	f7ff ff78 	bl	8026830 <std>
 8026940:	2301      	movs	r3, #1
 8026942:	61a3      	str	r3, [r4, #24]
 8026944:	e7d2      	b.n	80268ec <__sinit+0xc>
 8026946:	bf00      	nop
 8026948:	08076154 	.word	0x08076154
 802694c:	08026879 	.word	0x08026879

08026950 <__sfp>:
 8026950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026952:	4607      	mov	r7, r0
 8026954:	f7ff ffac 	bl	80268b0 <__sfp_lock_acquire>
 8026958:	4b1e      	ldr	r3, [pc, #120]	; (80269d4 <__sfp+0x84>)
 802695a:	681e      	ldr	r6, [r3, #0]
 802695c:	69b3      	ldr	r3, [r6, #24]
 802695e:	b913      	cbnz	r3, 8026966 <__sfp+0x16>
 8026960:	4630      	mov	r0, r6
 8026962:	f7ff ffbd 	bl	80268e0 <__sinit>
 8026966:	3648      	adds	r6, #72	; 0x48
 8026968:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802696c:	3b01      	subs	r3, #1
 802696e:	d503      	bpl.n	8026978 <__sfp+0x28>
 8026970:	6833      	ldr	r3, [r6, #0]
 8026972:	b30b      	cbz	r3, 80269b8 <__sfp+0x68>
 8026974:	6836      	ldr	r6, [r6, #0]
 8026976:	e7f7      	b.n	8026968 <__sfp+0x18>
 8026978:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802697c:	b9d5      	cbnz	r5, 80269b4 <__sfp+0x64>
 802697e:	4b16      	ldr	r3, [pc, #88]	; (80269d8 <__sfp+0x88>)
 8026980:	60e3      	str	r3, [r4, #12]
 8026982:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8026986:	6665      	str	r5, [r4, #100]	; 0x64
 8026988:	f7ff f932 	bl	8025bf0 <__retarget_lock_init_recursive>
 802698c:	f7ff ff96 	bl	80268bc <__sfp_lock_release>
 8026990:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8026994:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8026998:	6025      	str	r5, [r4, #0]
 802699a:	61a5      	str	r5, [r4, #24]
 802699c:	2208      	movs	r2, #8
 802699e:	4629      	mov	r1, r5
 80269a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80269a4:	f7ff f946 	bl	8025c34 <memset>
 80269a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80269ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80269b0:	4620      	mov	r0, r4
 80269b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80269b4:	3468      	adds	r4, #104	; 0x68
 80269b6:	e7d9      	b.n	802696c <__sfp+0x1c>
 80269b8:	2104      	movs	r1, #4
 80269ba:	4638      	mov	r0, r7
 80269bc:	f7ff ff62 	bl	8026884 <__sfmoreglue>
 80269c0:	4604      	mov	r4, r0
 80269c2:	6030      	str	r0, [r6, #0]
 80269c4:	2800      	cmp	r0, #0
 80269c6:	d1d5      	bne.n	8026974 <__sfp+0x24>
 80269c8:	f7ff ff78 	bl	80268bc <__sfp_lock_release>
 80269cc:	230c      	movs	r3, #12
 80269ce:	603b      	str	r3, [r7, #0]
 80269d0:	e7ee      	b.n	80269b0 <__sfp+0x60>
 80269d2:	bf00      	nop
 80269d4:	08076154 	.word	0x08076154
 80269d8:	ffff0001 	.word	0xffff0001

080269dc <_fwalk_reent>:
 80269dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80269e0:	4606      	mov	r6, r0
 80269e2:	4688      	mov	r8, r1
 80269e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80269e8:	2700      	movs	r7, #0
 80269ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80269ee:	f1b9 0901 	subs.w	r9, r9, #1
 80269f2:	d505      	bpl.n	8026a00 <_fwalk_reent+0x24>
 80269f4:	6824      	ldr	r4, [r4, #0]
 80269f6:	2c00      	cmp	r4, #0
 80269f8:	d1f7      	bne.n	80269ea <_fwalk_reent+0xe>
 80269fa:	4638      	mov	r0, r7
 80269fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8026a00:	89ab      	ldrh	r3, [r5, #12]
 8026a02:	2b01      	cmp	r3, #1
 8026a04:	d907      	bls.n	8026a16 <_fwalk_reent+0x3a>
 8026a06:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8026a0a:	3301      	adds	r3, #1
 8026a0c:	d003      	beq.n	8026a16 <_fwalk_reent+0x3a>
 8026a0e:	4629      	mov	r1, r5
 8026a10:	4630      	mov	r0, r6
 8026a12:	47c0      	blx	r8
 8026a14:	4307      	orrs	r7, r0
 8026a16:	3568      	adds	r5, #104	; 0x68
 8026a18:	e7e9      	b.n	80269ee <_fwalk_reent+0x12>

08026a1a <__swhatbuf_r>:
 8026a1a:	b570      	push	{r4, r5, r6, lr}
 8026a1c:	460e      	mov	r6, r1
 8026a1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026a22:	2900      	cmp	r1, #0
 8026a24:	b096      	sub	sp, #88	; 0x58
 8026a26:	4614      	mov	r4, r2
 8026a28:	461d      	mov	r5, r3
 8026a2a:	da07      	bge.n	8026a3c <__swhatbuf_r+0x22>
 8026a2c:	2300      	movs	r3, #0
 8026a2e:	602b      	str	r3, [r5, #0]
 8026a30:	89b3      	ldrh	r3, [r6, #12]
 8026a32:	061a      	lsls	r2, r3, #24
 8026a34:	d410      	bmi.n	8026a58 <__swhatbuf_r+0x3e>
 8026a36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8026a3a:	e00e      	b.n	8026a5a <__swhatbuf_r+0x40>
 8026a3c:	466a      	mov	r2, sp
 8026a3e:	f000 f8c3 	bl	8026bc8 <_fstat_r>
 8026a42:	2800      	cmp	r0, #0
 8026a44:	dbf2      	blt.n	8026a2c <__swhatbuf_r+0x12>
 8026a46:	9a01      	ldr	r2, [sp, #4]
 8026a48:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8026a4c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8026a50:	425a      	negs	r2, r3
 8026a52:	415a      	adcs	r2, r3
 8026a54:	602a      	str	r2, [r5, #0]
 8026a56:	e7ee      	b.n	8026a36 <__swhatbuf_r+0x1c>
 8026a58:	2340      	movs	r3, #64	; 0x40
 8026a5a:	2000      	movs	r0, #0
 8026a5c:	6023      	str	r3, [r4, #0]
 8026a5e:	b016      	add	sp, #88	; 0x58
 8026a60:	bd70      	pop	{r4, r5, r6, pc}
	...

08026a64 <__smakebuf_r>:
 8026a64:	898b      	ldrh	r3, [r1, #12]
 8026a66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8026a68:	079d      	lsls	r5, r3, #30
 8026a6a:	4606      	mov	r6, r0
 8026a6c:	460c      	mov	r4, r1
 8026a6e:	d507      	bpl.n	8026a80 <__smakebuf_r+0x1c>
 8026a70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8026a74:	6023      	str	r3, [r4, #0]
 8026a76:	6123      	str	r3, [r4, #16]
 8026a78:	2301      	movs	r3, #1
 8026a7a:	6163      	str	r3, [r4, #20]
 8026a7c:	b002      	add	sp, #8
 8026a7e:	bd70      	pop	{r4, r5, r6, pc}
 8026a80:	ab01      	add	r3, sp, #4
 8026a82:	466a      	mov	r2, sp
 8026a84:	f7ff ffc9 	bl	8026a1a <__swhatbuf_r>
 8026a88:	9900      	ldr	r1, [sp, #0]
 8026a8a:	4605      	mov	r5, r0
 8026a8c:	4630      	mov	r0, r6
 8026a8e:	f7ff f929 	bl	8025ce4 <_malloc_r>
 8026a92:	b948      	cbnz	r0, 8026aa8 <__smakebuf_r+0x44>
 8026a94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8026a98:	059a      	lsls	r2, r3, #22
 8026a9a:	d4ef      	bmi.n	8026a7c <__smakebuf_r+0x18>
 8026a9c:	f023 0303 	bic.w	r3, r3, #3
 8026aa0:	f043 0302 	orr.w	r3, r3, #2
 8026aa4:	81a3      	strh	r3, [r4, #12]
 8026aa6:	e7e3      	b.n	8026a70 <__smakebuf_r+0xc>
 8026aa8:	4b0d      	ldr	r3, [pc, #52]	; (8026ae0 <__smakebuf_r+0x7c>)
 8026aaa:	62b3      	str	r3, [r6, #40]	; 0x28
 8026aac:	89a3      	ldrh	r3, [r4, #12]
 8026aae:	6020      	str	r0, [r4, #0]
 8026ab0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8026ab4:	81a3      	strh	r3, [r4, #12]
 8026ab6:	9b00      	ldr	r3, [sp, #0]
 8026ab8:	6163      	str	r3, [r4, #20]
 8026aba:	9b01      	ldr	r3, [sp, #4]
 8026abc:	6120      	str	r0, [r4, #16]
 8026abe:	b15b      	cbz	r3, 8026ad8 <__smakebuf_r+0x74>
 8026ac0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8026ac4:	4630      	mov	r0, r6
 8026ac6:	f000 f891 	bl	8026bec <_isatty_r>
 8026aca:	b128      	cbz	r0, 8026ad8 <__smakebuf_r+0x74>
 8026acc:	89a3      	ldrh	r3, [r4, #12]
 8026ace:	f023 0303 	bic.w	r3, r3, #3
 8026ad2:	f043 0301 	orr.w	r3, r3, #1
 8026ad6:	81a3      	strh	r3, [r4, #12]
 8026ad8:	89a0      	ldrh	r0, [r4, #12]
 8026ada:	4305      	orrs	r5, r0
 8026adc:	81a5      	strh	r5, [r4, #12]
 8026ade:	e7cd      	b.n	8026a7c <__smakebuf_r+0x18>
 8026ae0:	08026879 	.word	0x08026879

08026ae4 <__malloc_lock>:
 8026ae4:	4801      	ldr	r0, [pc, #4]	; (8026aec <__malloc_lock+0x8>)
 8026ae6:	f7ff b884 	b.w	8025bf2 <__retarget_lock_acquire_recursive>
 8026aea:	bf00      	nop
 8026aec:	2004ab2c 	.word	0x2004ab2c

08026af0 <__malloc_unlock>:
 8026af0:	4801      	ldr	r0, [pc, #4]	; (8026af8 <__malloc_unlock+0x8>)
 8026af2:	f7ff b880 	b.w	8025bf6 <__retarget_lock_release_recursive>
 8026af6:	bf00      	nop
 8026af8:	2004ab2c 	.word	0x2004ab2c

08026afc <__sread>:
 8026afc:	b510      	push	{r4, lr}
 8026afe:	460c      	mov	r4, r1
 8026b00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026b04:	f000 f894 	bl	8026c30 <_read_r>
 8026b08:	2800      	cmp	r0, #0
 8026b0a:	bfab      	itete	ge
 8026b0c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8026b0e:	89a3      	ldrhlt	r3, [r4, #12]
 8026b10:	181b      	addge	r3, r3, r0
 8026b12:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8026b16:	bfac      	ite	ge
 8026b18:	6563      	strge	r3, [r4, #84]	; 0x54
 8026b1a:	81a3      	strhlt	r3, [r4, #12]
 8026b1c:	bd10      	pop	{r4, pc}

08026b1e <__swrite>:
 8026b1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026b22:	461f      	mov	r7, r3
 8026b24:	898b      	ldrh	r3, [r1, #12]
 8026b26:	05db      	lsls	r3, r3, #23
 8026b28:	4605      	mov	r5, r0
 8026b2a:	460c      	mov	r4, r1
 8026b2c:	4616      	mov	r6, r2
 8026b2e:	d505      	bpl.n	8026b3c <__swrite+0x1e>
 8026b30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026b34:	2302      	movs	r3, #2
 8026b36:	2200      	movs	r2, #0
 8026b38:	f000 f868 	bl	8026c0c <_lseek_r>
 8026b3c:	89a3      	ldrh	r3, [r4, #12]
 8026b3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8026b42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8026b46:	81a3      	strh	r3, [r4, #12]
 8026b48:	4632      	mov	r2, r6
 8026b4a:	463b      	mov	r3, r7
 8026b4c:	4628      	mov	r0, r5
 8026b4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8026b52:	f000 b817 	b.w	8026b84 <_write_r>

08026b56 <__sseek>:
 8026b56:	b510      	push	{r4, lr}
 8026b58:	460c      	mov	r4, r1
 8026b5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026b5e:	f000 f855 	bl	8026c0c <_lseek_r>
 8026b62:	1c43      	adds	r3, r0, #1
 8026b64:	89a3      	ldrh	r3, [r4, #12]
 8026b66:	bf15      	itete	ne
 8026b68:	6560      	strne	r0, [r4, #84]	; 0x54
 8026b6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8026b6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8026b72:	81a3      	strheq	r3, [r4, #12]
 8026b74:	bf18      	it	ne
 8026b76:	81a3      	strhne	r3, [r4, #12]
 8026b78:	bd10      	pop	{r4, pc}

08026b7a <__sclose>:
 8026b7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026b7e:	f000 b813 	b.w	8026ba8 <_close_r>
	...

08026b84 <_write_r>:
 8026b84:	b538      	push	{r3, r4, r5, lr}
 8026b86:	4d07      	ldr	r5, [pc, #28]	; (8026ba4 <_write_r+0x20>)
 8026b88:	4604      	mov	r4, r0
 8026b8a:	4608      	mov	r0, r1
 8026b8c:	4611      	mov	r1, r2
 8026b8e:	2200      	movs	r2, #0
 8026b90:	602a      	str	r2, [r5, #0]
 8026b92:	461a      	mov	r2, r3
 8026b94:	f7db fe9b 	bl	80028ce <_write>
 8026b98:	1c43      	adds	r3, r0, #1
 8026b9a:	d102      	bne.n	8026ba2 <_write_r+0x1e>
 8026b9c:	682b      	ldr	r3, [r5, #0]
 8026b9e:	b103      	cbz	r3, 8026ba2 <_write_r+0x1e>
 8026ba0:	6023      	str	r3, [r4, #0]
 8026ba2:	bd38      	pop	{r3, r4, r5, pc}
 8026ba4:	2004ab38 	.word	0x2004ab38

08026ba8 <_close_r>:
 8026ba8:	b538      	push	{r3, r4, r5, lr}
 8026baa:	4d06      	ldr	r5, [pc, #24]	; (8026bc4 <_close_r+0x1c>)
 8026bac:	2300      	movs	r3, #0
 8026bae:	4604      	mov	r4, r0
 8026bb0:	4608      	mov	r0, r1
 8026bb2:	602b      	str	r3, [r5, #0]
 8026bb4:	f7db fea7 	bl	8002906 <_close>
 8026bb8:	1c43      	adds	r3, r0, #1
 8026bba:	d102      	bne.n	8026bc2 <_close_r+0x1a>
 8026bbc:	682b      	ldr	r3, [r5, #0]
 8026bbe:	b103      	cbz	r3, 8026bc2 <_close_r+0x1a>
 8026bc0:	6023      	str	r3, [r4, #0]
 8026bc2:	bd38      	pop	{r3, r4, r5, pc}
 8026bc4:	2004ab38 	.word	0x2004ab38

08026bc8 <_fstat_r>:
 8026bc8:	b538      	push	{r3, r4, r5, lr}
 8026bca:	4d07      	ldr	r5, [pc, #28]	; (8026be8 <_fstat_r+0x20>)
 8026bcc:	2300      	movs	r3, #0
 8026bce:	4604      	mov	r4, r0
 8026bd0:	4608      	mov	r0, r1
 8026bd2:	4611      	mov	r1, r2
 8026bd4:	602b      	str	r3, [r5, #0]
 8026bd6:	f7db fea2 	bl	800291e <_fstat>
 8026bda:	1c43      	adds	r3, r0, #1
 8026bdc:	d102      	bne.n	8026be4 <_fstat_r+0x1c>
 8026bde:	682b      	ldr	r3, [r5, #0]
 8026be0:	b103      	cbz	r3, 8026be4 <_fstat_r+0x1c>
 8026be2:	6023      	str	r3, [r4, #0]
 8026be4:	bd38      	pop	{r3, r4, r5, pc}
 8026be6:	bf00      	nop
 8026be8:	2004ab38 	.word	0x2004ab38

08026bec <_isatty_r>:
 8026bec:	b538      	push	{r3, r4, r5, lr}
 8026bee:	4d06      	ldr	r5, [pc, #24]	; (8026c08 <_isatty_r+0x1c>)
 8026bf0:	2300      	movs	r3, #0
 8026bf2:	4604      	mov	r4, r0
 8026bf4:	4608      	mov	r0, r1
 8026bf6:	602b      	str	r3, [r5, #0]
 8026bf8:	f7db fea1 	bl	800293e <_isatty>
 8026bfc:	1c43      	adds	r3, r0, #1
 8026bfe:	d102      	bne.n	8026c06 <_isatty_r+0x1a>
 8026c00:	682b      	ldr	r3, [r5, #0]
 8026c02:	b103      	cbz	r3, 8026c06 <_isatty_r+0x1a>
 8026c04:	6023      	str	r3, [r4, #0]
 8026c06:	bd38      	pop	{r3, r4, r5, pc}
 8026c08:	2004ab38 	.word	0x2004ab38

08026c0c <_lseek_r>:
 8026c0c:	b538      	push	{r3, r4, r5, lr}
 8026c0e:	4d07      	ldr	r5, [pc, #28]	; (8026c2c <_lseek_r+0x20>)
 8026c10:	4604      	mov	r4, r0
 8026c12:	4608      	mov	r0, r1
 8026c14:	4611      	mov	r1, r2
 8026c16:	2200      	movs	r2, #0
 8026c18:	602a      	str	r2, [r5, #0]
 8026c1a:	461a      	mov	r2, r3
 8026c1c:	f7db fe9a 	bl	8002954 <_lseek>
 8026c20:	1c43      	adds	r3, r0, #1
 8026c22:	d102      	bne.n	8026c2a <_lseek_r+0x1e>
 8026c24:	682b      	ldr	r3, [r5, #0]
 8026c26:	b103      	cbz	r3, 8026c2a <_lseek_r+0x1e>
 8026c28:	6023      	str	r3, [r4, #0]
 8026c2a:	bd38      	pop	{r3, r4, r5, pc}
 8026c2c:	2004ab38 	.word	0x2004ab38

08026c30 <_read_r>:
 8026c30:	b538      	push	{r3, r4, r5, lr}
 8026c32:	4d07      	ldr	r5, [pc, #28]	; (8026c50 <_read_r+0x20>)
 8026c34:	4604      	mov	r4, r0
 8026c36:	4608      	mov	r0, r1
 8026c38:	4611      	mov	r1, r2
 8026c3a:	2200      	movs	r2, #0
 8026c3c:	602a      	str	r2, [r5, #0]
 8026c3e:	461a      	mov	r2, r3
 8026c40:	f7db fe28 	bl	8002894 <_read>
 8026c44:	1c43      	adds	r3, r0, #1
 8026c46:	d102      	bne.n	8026c4e <_read_r+0x1e>
 8026c48:	682b      	ldr	r3, [r5, #0]
 8026c4a:	b103      	cbz	r3, 8026c4e <_read_r+0x1e>
 8026c4c:	6023      	str	r3, [r4, #0]
 8026c4e:	bd38      	pop	{r3, r4, r5, pc}
 8026c50:	2004ab38 	.word	0x2004ab38

08026c54 <_init>:
 8026c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026c56:	bf00      	nop
 8026c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8026c5a:	bc08      	pop	{r3}
 8026c5c:	469e      	mov	lr, r3
 8026c5e:	4770      	bx	lr

08026c60 <_fini>:
 8026c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026c62:	bf00      	nop
 8026c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8026c66:	bc08      	pop	{r3}
 8026c68:	469e      	mov	lr, r3
 8026c6a:	4770      	bx	lr
