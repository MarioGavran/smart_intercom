
smart_intercom.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009fd4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00011c18  0800a1b4  0800a1b4  0001a1b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801bdcc  0801bdcc  00030074  2**0
                  CONTENTS
  4 .ARM          00000008  0801bdcc  0801bdcc  0002bdcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801bdd4  0801bdd4  00030074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801bdd4  0801bdd4  0002bdd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801bdd8  0801bdd8  0002bdd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0801bddc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00025ef8  20000074  0801be50  00030074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20025f6c  0801be50  00035f6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021e51  00000000  00000000  000300a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004537  00000000  00000000  00051ef5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014e0  00000000  00000000  00056430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001320  00000000  00000000  00057910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b51e  00000000  00000000  00058c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e794  00000000  00000000  0008414e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e72ac  00000000  00000000  000a28e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00189b8e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060b4  00000000  00000000  00189be4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000074 	.word	0x20000074
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a19c 	.word	0x0800a19c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000078 	.word	0x20000078
 800021c:	0800a19c 	.word	0x0800a19c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002e4:	f000 b96e 	b.w	80005c4 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	4604      	mov	r4, r0
 8000308:	468c      	mov	ip, r1
 800030a:	2b00      	cmp	r3, #0
 800030c:	f040 8083 	bne.w	8000416 <__udivmoddi4+0x116>
 8000310:	428a      	cmp	r2, r1
 8000312:	4617      	mov	r7, r2
 8000314:	d947      	bls.n	80003a6 <__udivmoddi4+0xa6>
 8000316:	fab2 f282 	clz	r2, r2
 800031a:	b142      	cbz	r2, 800032e <__udivmoddi4+0x2e>
 800031c:	f1c2 0020 	rsb	r0, r2, #32
 8000320:	fa24 f000 	lsr.w	r0, r4, r0
 8000324:	4091      	lsls	r1, r2
 8000326:	4097      	lsls	r7, r2
 8000328:	ea40 0c01 	orr.w	ip, r0, r1
 800032c:	4094      	lsls	r4, r2
 800032e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000332:	0c23      	lsrs	r3, r4, #16
 8000334:	fbbc f6f8 	udiv	r6, ip, r8
 8000338:	fa1f fe87 	uxth.w	lr, r7
 800033c:	fb08 c116 	mls	r1, r8, r6, ip
 8000340:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000344:	fb06 f10e 	mul.w	r1, r6, lr
 8000348:	4299      	cmp	r1, r3
 800034a:	d909      	bls.n	8000360 <__udivmoddi4+0x60>
 800034c:	18fb      	adds	r3, r7, r3
 800034e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000352:	f080 8119 	bcs.w	8000588 <__udivmoddi4+0x288>
 8000356:	4299      	cmp	r1, r3
 8000358:	f240 8116 	bls.w	8000588 <__udivmoddi4+0x288>
 800035c:	3e02      	subs	r6, #2
 800035e:	443b      	add	r3, r7
 8000360:	1a5b      	subs	r3, r3, r1
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb3 f0f8 	udiv	r0, r3, r8
 8000368:	fb08 3310 	mls	r3, r8, r0, r3
 800036c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000370:	fb00 fe0e 	mul.w	lr, r0, lr
 8000374:	45a6      	cmp	lr, r4
 8000376:	d909      	bls.n	800038c <__udivmoddi4+0x8c>
 8000378:	193c      	adds	r4, r7, r4
 800037a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800037e:	f080 8105 	bcs.w	800058c <__udivmoddi4+0x28c>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f240 8102 	bls.w	800058c <__udivmoddi4+0x28c>
 8000388:	3802      	subs	r0, #2
 800038a:	443c      	add	r4, r7
 800038c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000390:	eba4 040e 	sub.w	r4, r4, lr
 8000394:	2600      	movs	r6, #0
 8000396:	b11d      	cbz	r5, 80003a0 <__udivmoddi4+0xa0>
 8000398:	40d4      	lsrs	r4, r2
 800039a:	2300      	movs	r3, #0
 800039c:	e9c5 4300 	strd	r4, r3, [r5]
 80003a0:	4631      	mov	r1, r6
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	b902      	cbnz	r2, 80003aa <__udivmoddi4+0xaa>
 80003a8:	deff      	udf	#255	; 0xff
 80003aa:	fab2 f282 	clz	r2, r2
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	d150      	bne.n	8000454 <__udivmoddi4+0x154>
 80003b2:	1bcb      	subs	r3, r1, r7
 80003b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b8:	fa1f f887 	uxth.w	r8, r7
 80003bc:	2601      	movs	r6, #1
 80003be:	fbb3 fcfe 	udiv	ip, r3, lr
 80003c2:	0c21      	lsrs	r1, r4, #16
 80003c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003cc:	fb08 f30c 	mul.w	r3, r8, ip
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0xe4>
 80003d4:	1879      	adds	r1, r7, r1
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0xe2>
 80003dc:	428b      	cmp	r3, r1
 80003de:	f200 80e9 	bhi.w	80005b4 <__udivmoddi4+0x2b4>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1ac9      	subs	r1, r1, r3
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x10c>
 80003fc:	193c      	adds	r4, r7, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x10a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80d9 	bhi.w	80005bc <__udivmoddi4+0x2bc>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e7bf      	b.n	8000396 <__udivmoddi4+0x96>
 8000416:	428b      	cmp	r3, r1
 8000418:	d909      	bls.n	800042e <__udivmoddi4+0x12e>
 800041a:	2d00      	cmp	r5, #0
 800041c:	f000 80b1 	beq.w	8000582 <__udivmoddi4+0x282>
 8000420:	2600      	movs	r6, #0
 8000422:	e9c5 0100 	strd	r0, r1, [r5]
 8000426:	4630      	mov	r0, r6
 8000428:	4631      	mov	r1, r6
 800042a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042e:	fab3 f683 	clz	r6, r3
 8000432:	2e00      	cmp	r6, #0
 8000434:	d14a      	bne.n	80004cc <__udivmoddi4+0x1cc>
 8000436:	428b      	cmp	r3, r1
 8000438:	d302      	bcc.n	8000440 <__udivmoddi4+0x140>
 800043a:	4282      	cmp	r2, r0
 800043c:	f200 80b8 	bhi.w	80005b0 <__udivmoddi4+0x2b0>
 8000440:	1a84      	subs	r4, r0, r2
 8000442:	eb61 0103 	sbc.w	r1, r1, r3
 8000446:	2001      	movs	r0, #1
 8000448:	468c      	mov	ip, r1
 800044a:	2d00      	cmp	r5, #0
 800044c:	d0a8      	beq.n	80003a0 <__udivmoddi4+0xa0>
 800044e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000452:	e7a5      	b.n	80003a0 <__udivmoddi4+0xa0>
 8000454:	f1c2 0320 	rsb	r3, r2, #32
 8000458:	fa20 f603 	lsr.w	r6, r0, r3
 800045c:	4097      	lsls	r7, r2
 800045e:	fa01 f002 	lsl.w	r0, r1, r2
 8000462:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000466:	40d9      	lsrs	r1, r3
 8000468:	4330      	orrs	r0, r6
 800046a:	0c03      	lsrs	r3, r0, #16
 800046c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000470:	fa1f f887 	uxth.w	r8, r7
 8000474:	fb0e 1116 	mls	r1, lr, r6, r1
 8000478:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047c:	fb06 f108 	mul.w	r1, r6, r8
 8000480:	4299      	cmp	r1, r3
 8000482:	fa04 f402 	lsl.w	r4, r4, r2
 8000486:	d909      	bls.n	800049c <__udivmoddi4+0x19c>
 8000488:	18fb      	adds	r3, r7, r3
 800048a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800048e:	f080 808d 	bcs.w	80005ac <__udivmoddi4+0x2ac>
 8000492:	4299      	cmp	r1, r3
 8000494:	f240 808a 	bls.w	80005ac <__udivmoddi4+0x2ac>
 8000498:	3e02      	subs	r6, #2
 800049a:	443b      	add	r3, r7
 800049c:	1a5b      	subs	r3, r3, r1
 800049e:	b281      	uxth	r1, r0
 80004a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ac:	fb00 f308 	mul.w	r3, r0, r8
 80004b0:	428b      	cmp	r3, r1
 80004b2:	d907      	bls.n	80004c4 <__udivmoddi4+0x1c4>
 80004b4:	1879      	adds	r1, r7, r1
 80004b6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004ba:	d273      	bcs.n	80005a4 <__udivmoddi4+0x2a4>
 80004bc:	428b      	cmp	r3, r1
 80004be:	d971      	bls.n	80005a4 <__udivmoddi4+0x2a4>
 80004c0:	3802      	subs	r0, #2
 80004c2:	4439      	add	r1, r7
 80004c4:	1acb      	subs	r3, r1, r3
 80004c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ca:	e778      	b.n	80003be <__udivmoddi4+0xbe>
 80004cc:	f1c6 0c20 	rsb	ip, r6, #32
 80004d0:	fa03 f406 	lsl.w	r4, r3, r6
 80004d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004d8:	431c      	orrs	r4, r3
 80004da:	fa20 f70c 	lsr.w	r7, r0, ip
 80004de:	fa01 f306 	lsl.w	r3, r1, r6
 80004e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ea:	431f      	orrs	r7, r3
 80004ec:	0c3b      	lsrs	r3, r7, #16
 80004ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f2:	fa1f f884 	uxth.w	r8, r4
 80004f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000502:	458a      	cmp	sl, r1
 8000504:	fa02 f206 	lsl.w	r2, r2, r6
 8000508:	fa00 f306 	lsl.w	r3, r0, r6
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x220>
 800050e:	1861      	adds	r1, r4, r1
 8000510:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000514:	d248      	bcs.n	80005a8 <__udivmoddi4+0x2a8>
 8000516:	458a      	cmp	sl, r1
 8000518:	d946      	bls.n	80005a8 <__udivmoddi4+0x2a8>
 800051a:	f1a9 0902 	sub.w	r9, r9, #2
 800051e:	4421      	add	r1, r4
 8000520:	eba1 010a 	sub.w	r1, r1, sl
 8000524:	b2bf      	uxth	r7, r7
 8000526:	fbb1 f0fe 	udiv	r0, r1, lr
 800052a:	fb0e 1110 	mls	r1, lr, r0, r1
 800052e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000532:	fb00 f808 	mul.w	r8, r0, r8
 8000536:	45b8      	cmp	r8, r7
 8000538:	d907      	bls.n	800054a <__udivmoddi4+0x24a>
 800053a:	19e7      	adds	r7, r4, r7
 800053c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000540:	d22e      	bcs.n	80005a0 <__udivmoddi4+0x2a0>
 8000542:	45b8      	cmp	r8, r7
 8000544:	d92c      	bls.n	80005a0 <__udivmoddi4+0x2a0>
 8000546:	3802      	subs	r0, #2
 8000548:	4427      	add	r7, r4
 800054a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800054e:	eba7 0708 	sub.w	r7, r7, r8
 8000552:	fba0 8902 	umull	r8, r9, r0, r2
 8000556:	454f      	cmp	r7, r9
 8000558:	46c6      	mov	lr, r8
 800055a:	4649      	mov	r1, r9
 800055c:	d31a      	bcc.n	8000594 <__udivmoddi4+0x294>
 800055e:	d017      	beq.n	8000590 <__udivmoddi4+0x290>
 8000560:	b15d      	cbz	r5, 800057a <__udivmoddi4+0x27a>
 8000562:	ebb3 020e 	subs.w	r2, r3, lr
 8000566:	eb67 0701 	sbc.w	r7, r7, r1
 800056a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800056e:	40f2      	lsrs	r2, r6
 8000570:	ea4c 0202 	orr.w	r2, ip, r2
 8000574:	40f7      	lsrs	r7, r6
 8000576:	e9c5 2700 	strd	r2, r7, [r5]
 800057a:	2600      	movs	r6, #0
 800057c:	4631      	mov	r1, r6
 800057e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e70b      	b.n	80003a0 <__udivmoddi4+0xa0>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0x60>
 800058c:	4618      	mov	r0, r3
 800058e:	e6fd      	b.n	800038c <__udivmoddi4+0x8c>
 8000590:	4543      	cmp	r3, r8
 8000592:	d2e5      	bcs.n	8000560 <__udivmoddi4+0x260>
 8000594:	ebb8 0e02 	subs.w	lr, r8, r2
 8000598:	eb69 0104 	sbc.w	r1, r9, r4
 800059c:	3801      	subs	r0, #1
 800059e:	e7df      	b.n	8000560 <__udivmoddi4+0x260>
 80005a0:	4608      	mov	r0, r1
 80005a2:	e7d2      	b.n	800054a <__udivmoddi4+0x24a>
 80005a4:	4660      	mov	r0, ip
 80005a6:	e78d      	b.n	80004c4 <__udivmoddi4+0x1c4>
 80005a8:	4681      	mov	r9, r0
 80005aa:	e7b9      	b.n	8000520 <__udivmoddi4+0x220>
 80005ac:	4666      	mov	r6, ip
 80005ae:	e775      	b.n	800049c <__udivmoddi4+0x19c>
 80005b0:	4630      	mov	r0, r6
 80005b2:	e74a      	b.n	800044a <__udivmoddi4+0x14a>
 80005b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b8:	4439      	add	r1, r7
 80005ba:	e713      	b.n	80003e4 <__udivmoddi4+0xe4>
 80005bc:	3802      	subs	r0, #2
 80005be:	443c      	add	r4, r7
 80005c0:	e724      	b.n	800040c <__udivmoddi4+0x10c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005ce:	463b      	mov	r3, r7
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]
 80005d8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005da:	4b27      	ldr	r3, [pc, #156]	; (8000678 <MX_ADC1_Init+0xb0>)
 80005dc:	4a27      	ldr	r2, [pc, #156]	; (800067c <MX_ADC1_Init+0xb4>)
 80005de:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005e0:	4b25      	ldr	r3, [pc, #148]	; (8000678 <MX_ADC1_Init+0xb0>)
 80005e2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005e6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005e8:	4b23      	ldr	r3, [pc, #140]	; (8000678 <MX_ADC1_Init+0xb0>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80005ee:	4b22      	ldr	r3, [pc, #136]	; (8000678 <MX_ADC1_Init+0xb0>)
 80005f0:	2201      	movs	r2, #1
 80005f2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005f4:	4b20      	ldr	r3, [pc, #128]	; (8000678 <MX_ADC1_Init+0xb0>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005fa:	4b1f      	ldr	r3, [pc, #124]	; (8000678 <MX_ADC1_Init+0xb0>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000602:	4b1d      	ldr	r3, [pc, #116]	; (8000678 <MX_ADC1_Init+0xb0>)
 8000604:	2200      	movs	r2, #0
 8000606:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000608:	4b1b      	ldr	r3, [pc, #108]	; (8000678 <MX_ADC1_Init+0xb0>)
 800060a:	4a1d      	ldr	r2, [pc, #116]	; (8000680 <MX_ADC1_Init+0xb8>)
 800060c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800060e:	4b1a      	ldr	r3, [pc, #104]	; (8000678 <MX_ADC1_Init+0xb0>)
 8000610:	2200      	movs	r2, #0
 8000612:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000614:	4b18      	ldr	r3, [pc, #96]	; (8000678 <MX_ADC1_Init+0xb0>)
 8000616:	2202      	movs	r2, #2
 8000618:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800061a:	4b17      	ldr	r3, [pc, #92]	; (8000678 <MX_ADC1_Init+0xb0>)
 800061c:	2200      	movs	r2, #0
 800061e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000622:	4b15      	ldr	r3, [pc, #84]	; (8000678 <MX_ADC1_Init+0xb0>)
 8000624:	2201      	movs	r2, #1
 8000626:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000628:	4813      	ldr	r0, [pc, #76]	; (8000678 <MX_ADC1_Init+0xb0>)
 800062a:	f002 fbaf 	bl	8002d8c <HAL_ADC_Init>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000634:	f001 f8ca 	bl	80017cc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000638:	2302      	movs	r3, #2
 800063a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800063c:	2301      	movs	r3, #1
 800063e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000640:	2300      	movs	r3, #0
 8000642:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000644:	463b      	mov	r3, r7
 8000646:	4619      	mov	r1, r3
 8000648:	480b      	ldr	r0, [pc, #44]	; (8000678 <MX_ADC1_Init+0xb0>)
 800064a:	f002 fd2f 	bl	80030ac <HAL_ADC_ConfigChannel>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000654:	f001 f8ba 	bl	80017cc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 2;
 8000658:	2302      	movs	r3, #2
 800065a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800065c:	463b      	mov	r3, r7
 800065e:	4619      	mov	r1, r3
 8000660:	4805      	ldr	r0, [pc, #20]	; (8000678 <MX_ADC1_Init+0xb0>)
 8000662:	f002 fd23 	bl	80030ac <HAL_ADC_ConfigChannel>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 800066c:	f001 f8ae 	bl	80017cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000670:	bf00      	nop
 8000672:	3710      	adds	r7, #16
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	20025c4c 	.word	0x20025c4c
 800067c:	40012000 	.word	0x40012000
 8000680:	0f000001 	.word	0x0f000001

08000684 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b08a      	sub	sp, #40	; 0x28
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068c:	f107 0314 	add.w	r3, r7, #20
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]
 800069a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a17      	ldr	r2, [pc, #92]	; (8000700 <HAL_ADC_MspInit+0x7c>)
 80006a2:	4293      	cmp	r3, r2
 80006a4:	d127      	bne.n	80006f6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006a6:	2300      	movs	r3, #0
 80006a8:	613b      	str	r3, [r7, #16]
 80006aa:	4b16      	ldr	r3, [pc, #88]	; (8000704 <HAL_ADC_MspInit+0x80>)
 80006ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ae:	4a15      	ldr	r2, [pc, #84]	; (8000704 <HAL_ADC_MspInit+0x80>)
 80006b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006b4:	6453      	str	r3, [r2, #68]	; 0x44
 80006b6:	4b13      	ldr	r3, [pc, #76]	; (8000704 <HAL_ADC_MspInit+0x80>)
 80006b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006be:	613b      	str	r3, [r7, #16]
 80006c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c2:	2300      	movs	r3, #0
 80006c4:	60fb      	str	r3, [r7, #12]
 80006c6:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <HAL_ADC_MspInit+0x80>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	4a0e      	ldr	r2, [pc, #56]	; (8000704 <HAL_ADC_MspInit+0x80>)
 80006cc:	f043 0301 	orr.w	r3, r3, #1
 80006d0:	6313      	str	r3, [r2, #48]	; 0x30
 80006d2:	4b0c      	ldr	r3, [pc, #48]	; (8000704 <HAL_ADC_MspInit+0x80>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	f003 0301 	and.w	r3, r3, #1
 80006da:	60fb      	str	r3, [r7, #12]
 80006dc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = TOUCH_YU_Pin;
 80006de:	2304      	movs	r3, #4
 80006e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006e2:	2303      	movs	r3, #3
 80006e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e6:	2300      	movs	r3, #0
 80006e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TOUCH_YU_GPIO_Port, &GPIO_InitStruct);
 80006ea:	f107 0314 	add.w	r3, r7, #20
 80006ee:	4619      	mov	r1, r3
 80006f0:	4805      	ldr	r0, [pc, #20]	; (8000708 <HAL_ADC_MspInit+0x84>)
 80006f2:	f003 fab7 	bl	8003c64 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006f6:	bf00      	nop
 80006f8:	3728      	adds	r7, #40	; 0x28
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40012000 	.word	0x40012000
 8000704:	40023800 	.word	0x40023800
 8000708:	40020000 	.word	0x40020000

0800070c <app_main_init>:
{
	setup();
}
//=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~
void app_main_init()
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
	unsigned int l,ll = 0;
 8000712:	2300      	movs	r3, #0
 8000714:	603b      	str	r3, [r7, #0]

	NT35510_Init();
 8000716:	f000 fbab 	bl	8000e70 <NT35510_Init>

	LCD_ClearScreen(0xFFFFU);
 800071a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800071e:	f000 fae1 	bl	8000ce4 <LCD_ClearScreen>
	LCD_SetDirection(HORIZONTAL_RIGHT);
 8000722:	2003      	movs	r0, #3
 8000724:	f000 fa86 	bl	8000c34 <LCD_SetDirection>

	//==~~==~~==~~==~~==~~==~~==~~==~~==~~==~~==~~==~~==~~==~~==~~==~~==~~==~~==~~==~~==~~==~~==~~
	// ~=~=~ FERI logo ~=~=~
	LCD_ClearScreen(0xFFFFU);
 8000728:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800072c:	f000 fada 	bl	8000ce4 <LCD_ClearScreen>
	LCD_SetWindow(240, 184, 240 + FERI_LOGO_IMG_W -1, 184 + FERI_LOGO_IMG_H -1);
 8000730:	f44f 7393 	mov.w	r3, #294	; 0x126
 8000734:	f240 222f 	movw	r2, #559	; 0x22f
 8000738:	21b8      	movs	r1, #184	; 0xb8
 800073a:	20f0      	movs	r0, #240	; 0xf0
 800073c:	f000 fa12 	bl	8000b64 <LCD_SetWindow>
	for(l = 0; l < FERI_LOGO_IMG_SIZE; l+=2)
 8000740:	2300      	movs	r3, #0
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	e013      	b.n	800076e <app_main_init+0x62>
	{
		FSMC_WR_DAT(((g_feri_logo_image[l] << 8) & 0xFF00U) | (g_feri_logo_image[l+1] & 0x00FFU));
 8000746:	4a20      	ldr	r2, [pc, #128]	; (80007c8 <app_main_init+0xbc>)
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	4413      	add	r3, r2
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	b29b      	uxth	r3, r3
 8000750:	021b      	lsls	r3, r3, #8
 8000752:	b29a      	uxth	r2, r3
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	3301      	adds	r3, #1
 8000758:	491b      	ldr	r1, [pc, #108]	; (80007c8 <app_main_init+0xbc>)
 800075a:	5ccb      	ldrb	r3, [r1, r3]
 800075c:	b29b      	uxth	r3, r3
 800075e:	4313      	orrs	r3, r2
 8000760:	b29b      	uxth	r3, r3
 8000762:	4618      	mov	r0, r3
 8000764:	f000 f9ec 	bl	8000b40 <FSMC_WR_DAT>
	for(l = 0; l < FERI_LOGO_IMG_SIZE; l+=2)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	3302      	adds	r3, #2
 800076c:	607b      	str	r3, [r7, #4]
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	4a16      	ldr	r2, [pc, #88]	; (80007cc <app_main_init+0xc0>)
 8000772:	4293      	cmp	r3, r2
 8000774:	d9e7      	bls.n	8000746 <app_main_init+0x3a>
	for(l = 0; l < FERI_LOGO_IMG_SIZE; l+=2)
	{
		FSMC_WR_DAT(((g_feri_logo_image[l] << 8) & 0xFF00U) | (g_feri_logo_image[l+1] & 0x00FFU));
	}
	HAL_Delay(1000);
*/	LCD_SetWindow(0, 0, 799, 479);
 8000776:	f240 13df 	movw	r3, #479	; 0x1df
 800077a:	f240 321f 	movw	r2, #799	; 0x31f
 800077e:	2100      	movs	r1, #0
 8000780:	2000      	movs	r0, #0
 8000782:	f000 f9ef 	bl	8000b64 <LCD_SetWindow>
	LCD_ClearScreen(0x1CFCU);
 8000786:	f641 40fc 	movw	r0, #7420	; 0x1cfc
 800078a:	f000 faab 	bl	8000ce4 <LCD_ClearScreen>
	OV7670_RST_HIGH;
	HAL_Delay(300);

	ov7670_initialization();*/

	ov7670_init1();
 800078e:	f001 f9ad 	bl	8001aec <ov7670_init1>
	HAL_Delay(300);
 8000792:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000796:	f002 fad5 	bl	8002d44 <HAL_Delay>

	TIM1->DIER |= TIM_DIER_TDE;
 800079a:	4b0d      	ldr	r3, [pc, #52]	; (80007d0 <app_main_init+0xc4>)
 800079c:	68db      	ldr	r3, [r3, #12]
 800079e:	4a0c      	ldr	r2, [pc, #48]	; (80007d0 <app_main_init+0xc4>)
 80007a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007a4:	60d3      	str	r3, [r2, #12]
	HAL_TIM_Base_Start(&htim1);
 80007a6:	480b      	ldr	r0, [pc, #44]	; (80007d4 <app_main_init+0xc8>)
 80007a8:	f006 ff30 	bl	800760c <HAL_TIM_Base_Start>

	HAL_NVIC_SetPriority(OV7670_VSYNC_EXTI_IRQn, 0, 0);
 80007ac:	2200      	movs	r2, #0
 80007ae:	2100      	movs	r1, #0
 80007b0:	2007      	movs	r0, #7
 80007b2:	f002 ffa8 	bl	8003706 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(OV7670_VSYNC_EXTI_IRQn);
 80007b6:	2007      	movs	r0, #7
 80007b8:	f002 ffc1 	bl	800373e <HAL_NVIC_EnableIRQ>

	touch_init();
 80007bc:	f001 fde6 	bl	800238c <touch_init>

}
 80007c0:	bf00      	nop
 80007c2:	3708      	adds	r7, #8
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	0800a1e0 	.word	0x0800a1e0
 80007cc:	0001157f 	.word	0x0001157f
 80007d0:	40010000 	.word	0x40010000
 80007d4:	20025d98 	.word	0x20025d98

080007d8 <app_main_loop>:



//=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~
void app_main_loop()
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b08c      	sub	sp, #48	; 0x30
 80007dc:	af02      	add	r7, sp, #8
	uint8_t buff[15] = {0};
 80007de:	2300      	movs	r3, #0
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	f107 0308 	add.w	r3, r7, #8
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	605a      	str	r2, [r3, #4]
 80007ec:	f8c3 2007 	str.w	r2, [r3, #7]
	uint32_t milis = 0;
 80007f0:	2300      	movs	r3, #0
 80007f2:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t milis2 = 0;
 80007f4:	2300      	movs	r3, #0
 80007f6:	623b      	str	r3, [r7, #32]
	int i,j,z = 0;
 80007f8:	2300      	movs	r3, #0
 80007fa:	61bb      	str	r3, [r7, #24]
	int k = -2;
 80007fc:	f06f 0301 	mvn.w	r3, #1
 8000800:	617b      	str	r3, [r7, #20]
	touch_coordinates_t touch_coordinates1 = {0};
 8000802:	2300      	movs	r3, #0
 8000804:	603b      	str	r3, [r7, #0]



	LCD_SetDirection(VERTICAL_UP);
 8000806:	2000      	movs	r0, #0
 8000808:	f000 fa14 	bl	8000c34 <LCD_SetDirection>
	LCD_SetWindow(20, 20, 340-1, 260-1); // 320 x 240
 800080c:	f240 1303 	movw	r3, #259	; 0x103
 8000810:	f240 1253 	movw	r2, #339	; 0x153
 8000814:	2114      	movs	r1, #20
 8000816:	2014      	movs	r0, #20
 8000818:	f000 f9a4 	bl	8000b64 <LCD_SetWindow>
		else
			sprintf(buff, "\n");
		sprintf(buff + strlen(buff),"%03d",abs(g_no_person_score));
		LCD_PrintStr(20, 450, 0xffff, 0x0000, buff, 5);
*/
		uart_tx_process();
 800081c:	f001 fe08 	bl	8002430 <uart_tx_process>
		uart_rx_process();
 8000820:	f001 ff32 	bl	8002688 <uart_rx_process>
		touch_process();
 8000824:	f001 fdc6 	bl	80023b4 <touch_process>

			FSMC_WR_DAT(graysc);
		}
*/		//*********************************************************************************************************************

		LCD_SetWindow(20, 20, 340-1, 260-1); // 320 x 240
 8000828:	f240 1303 	movw	r3, #259	; 0x103
 800082c:	f240 1253 	movw	r2, #339	; 0x153
 8000830:	2114      	movs	r1, #20
 8000832:	2014      	movs	r0, #20
 8000834:	f000 f996 	bl	8000b64 <LCD_SetWindow>
		for(j = 0; j <= OV7670_FRAME_SIZE_QVGA - 2; j+=2)
 8000838:	2300      	movs	r3, #0
 800083a:	61fb      	str	r3, [r7, #28]
 800083c:	e013      	b.n	8000866 <app_main_loop+0x8e>
			*/

			//int red =	(g_cam_buff[j] & 0xF8U) >> 3;
			//int green =	((g_cam_buff[j] & 0x07U) << 3) | ((g_cam_buff[j+1] & 0xC0U) >> 6);
			//int blue =	((g_cam_buff[j+1] & 0x1FU));
			FSMC_WR_DAT(((g_cam_buff[j] << 8) & 0xFF00U) | (g_cam_buff[j+1] & 0x00FFU));
 800083e:	4a2a      	ldr	r2, [pc, #168]	; (80008e8 <app_main_loop+0x110>)
 8000840:	69fb      	ldr	r3, [r7, #28]
 8000842:	4413      	add	r3, r2
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	b29b      	uxth	r3, r3
 8000848:	021b      	lsls	r3, r3, #8
 800084a:	b29a      	uxth	r2, r3
 800084c:	69fb      	ldr	r3, [r7, #28]
 800084e:	3301      	adds	r3, #1
 8000850:	4925      	ldr	r1, [pc, #148]	; (80008e8 <app_main_loop+0x110>)
 8000852:	5ccb      	ldrb	r3, [r1, r3]
 8000854:	b29b      	uxth	r3, r3
 8000856:	4313      	orrs	r3, r2
 8000858:	b29b      	uxth	r3, r3
 800085a:	4618      	mov	r0, r3
 800085c:	f000 f970 	bl	8000b40 <FSMC_WR_DAT>
		for(j = 0; j <= OV7670_FRAME_SIZE_QVGA - 2; j+=2)
 8000860:	69fb      	ldr	r3, [r7, #28]
 8000862:	3302      	adds	r3, #2
 8000864:	61fb      	str	r3, [r7, #28]
 8000866:	69fb      	ldr	r3, [r7, #28]
 8000868:	4a20      	ldr	r2, [pc, #128]	; (80008ec <app_main_loop+0x114>)
 800086a:	4293      	cmp	r3, r2
 800086c:	dde7      	ble.n	800083e <app_main_loop+0x66>
		}

		if(HAL_GetTick() > milis + 1000)
 800086e:	f002 fa5d 	bl	8002d2c <HAL_GetTick>
 8000872:	4602      	mov	r2, r0
 8000874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000876:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800087a:	429a      	cmp	r2, r3
 800087c:	d90d      	bls.n	800089a <app_main_loop+0xc2>
		{
			milis = HAL_GetTick();
 800087e:	f002 fa55 	bl	8002d2c <HAL_GetTick>
 8000882:	6278      	str	r0, [r7, #36]	; 0x24
			if(milis >= (0xFFFFFFFFU - 1000U))
 8000884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000886:	f46f 727a 	mvn.w	r2, #1000	; 0x3e8
 800088a:	4293      	cmp	r3, r2
 800088c:	d302      	bcc.n	8000894 <app_main_loop+0xbc>
			{
				milis = 0;
 800088e:	2300      	movs	r3, #0
 8000890:	627b      	str	r3, [r7, #36]	; 0x24
 8000892:	e002      	b.n	800089a <app_main_loop+0xc2>
			}


			else
			{// every second
				uart_write("hello");
 8000894:	4816      	ldr	r0, [pc, #88]	; (80008f0 <app_main_loop+0x118>)
 8000896:	f001 fe43 	bl	8002520 <uart_write>
			}
		}
		if(HAL_GetTick() > milis2 + 100)
 800089a:	f002 fa47 	bl	8002d2c <HAL_GetTick>
 800089e:	4602      	mov	r2, r0
 80008a0:	6a3b      	ldr	r3, [r7, #32]
 80008a2:	3364      	adds	r3, #100	; 0x64
 80008a4:	429a      	cmp	r2, r3
 80008a6:	d9b9      	bls.n	800081c <app_main_loop+0x44>
		{
			milis2 = HAL_GetTick();
 80008a8:	f002 fa40 	bl	8002d2c <HAL_GetTick>
 80008ac:	6238      	str	r0, [r7, #32]
			if(milis2 >= (0xFFFFFFFFU - 100U)) //?
 80008ae:	6a3b      	ldr	r3, [r7, #32]
 80008b0:	f113 0f66 	cmn.w	r3, #102	; 0x66
 80008b4:	d902      	bls.n	80008bc <app_main_loop+0xe4>
			{
				milis2 = 0;
 80008b6:	2300      	movs	r3, #0
 80008b8:	623b      	str	r3, [r7, #32]
 80008ba:	e7af      	b.n	800081c <app_main_loop+0x44>
			}
			else
			{// every 10 miliseconds

//				touch_coordinates1 = touch_process();
				sprintf(buff, "%04d, %04d", g_touch_coordinates.x, g_touch_coordinates.y);
 80008bc:	4b0d      	ldr	r3, [pc, #52]	; (80008f4 <app_main_loop+0x11c>)
 80008be:	881b      	ldrh	r3, [r3, #0]
 80008c0:	461a      	mov	r2, r3
 80008c2:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <app_main_loop+0x11c>)
 80008c4:	885b      	ldrh	r3, [r3, #2]
 80008c6:	1d38      	adds	r0, r7, #4
 80008c8:	490b      	ldr	r1, [pc, #44]	; (80008f8 <app_main_loop+0x120>)
 80008ca:	f008 fdfd 	bl	80094c8 <siprintf>
				LCD_PrintStr(20, 480, 0, 0x841FU, buff, 4);
 80008ce:	2304      	movs	r3, #4
 80008d0:	9301      	str	r3, [sp, #4]
 80008d2:	1d3b      	adds	r3, r7, #4
 80008d4:	9300      	str	r3, [sp, #0]
 80008d6:	f248 431f 	movw	r3, #33823	; 0x841f
 80008da:	2200      	movs	r2, #0
 80008dc:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80008e0:	2014      	movs	r0, #20
 80008e2:	f000 fa8f 	bl	8000e04 <LCD_PrintStr>
		uart_tx_process();
 80008e6:	e799      	b.n	800081c <app_main_loop+0x44>
 80008e8:	200000a4 	.word	0x200000a4
 80008ec:	000257fe 	.word	0x000257fe
 80008f0:	0800a1b4 	.word	0x0800a1b4
 80008f4:	20025b30 	.word	0x20025b30
 80008f8:	0800a1bc 	.word	0x0800a1bc

080008fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	607b      	str	r3, [r7, #4]
 8000906:	4b09      	ldr	r3, [pc, #36]	; (800092c <MX_DMA_Init+0x30>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	4a08      	ldr	r2, [pc, #32]	; (800092c <MX_DMA_Init+0x30>)
 800090c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000910:	6313      	str	r3, [r2, #48]	; 0x30
 8000912:	4b06      	ldr	r3, [pc, #24]	; (800092c <MX_DMA_Init+0x30>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	687b      	ldr	r3, [r7, #4]

}
 800091e:	bf00      	nop
 8000920:	370c      	adds	r7, #12
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	40023800 	.word	0x40023800

08000930 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b08e      	sub	sp, #56	; 0x38
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000936:	f107 031c 	add.w	r3, r7, #28
 800093a:	2200      	movs	r2, #0
 800093c:	601a      	str	r2, [r3, #0]
 800093e:	605a      	str	r2, [r3, #4]
 8000940:	609a      	str	r2, [r3, #8]
 8000942:	60da      	str	r2, [r3, #12]
 8000944:	611a      	str	r2, [r3, #16]
 8000946:	615a      	str	r2, [r3, #20]
 8000948:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 800094a:	463b      	mov	r3, r7
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	60da      	str	r2, [r3, #12]
 8000956:	611a      	str	r2, [r3, #16]
 8000958:	615a      	str	r2, [r3, #20]
 800095a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 800095c:	4b30      	ldr	r3, [pc, #192]	; (8000a20 <MX_FSMC_Init+0xf0>)
 800095e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000962:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000964:	4b2e      	ldr	r3, [pc, #184]	; (8000a20 <MX_FSMC_Init+0xf0>)
 8000966:	4a2f      	ldr	r2, [pc, #188]	; (8000a24 <MX_FSMC_Init+0xf4>)
 8000968:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800096a:	4b2d      	ldr	r3, [pc, #180]	; (8000a20 <MX_FSMC_Init+0xf0>)
 800096c:	2200      	movs	r2, #0
 800096e:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000970:	4b2b      	ldr	r3, [pc, #172]	; (8000a20 <MX_FSMC_Init+0xf0>)
 8000972:	2200      	movs	r2, #0
 8000974:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000976:	4b2a      	ldr	r3, [pc, #168]	; (8000a20 <MX_FSMC_Init+0xf0>)
 8000978:	2200      	movs	r2, #0
 800097a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800097c:	4b28      	ldr	r3, [pc, #160]	; (8000a20 <MX_FSMC_Init+0xf0>)
 800097e:	2210      	movs	r2, #16
 8000980:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000982:	4b27      	ldr	r3, [pc, #156]	; (8000a20 <MX_FSMC_Init+0xf0>)
 8000984:	2200      	movs	r2, #0
 8000986:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000988:	4b25      	ldr	r3, [pc, #148]	; (8000a20 <MX_FSMC_Init+0xf0>)
 800098a:	2200      	movs	r2, #0
 800098c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 800098e:	4b24      	ldr	r3, [pc, #144]	; (8000a20 <MX_FSMC_Init+0xf0>)
 8000990:	2200      	movs	r2, #0
 8000992:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000994:	4b22      	ldr	r3, [pc, #136]	; (8000a20 <MX_FSMC_Init+0xf0>)
 8000996:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800099a:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800099c:	4b20      	ldr	r3, [pc, #128]	; (8000a20 <MX_FSMC_Init+0xf0>)
 800099e:	2200      	movs	r2, #0
 80009a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 80009a2:	4b1f      	ldr	r3, [pc, #124]	; (8000a20 <MX_FSMC_Init+0xf0>)
 80009a4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009a8:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80009aa:	4b1d      	ldr	r3, [pc, #116]	; (8000a20 <MX_FSMC_Init+0xf0>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80009b0:	4b1b      	ldr	r3, [pc, #108]	; (8000a20 <MX_FSMC_Init+0xf0>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80009b6:	4b1a      	ldr	r3, [pc, #104]	; (8000a20 <MX_FSMC_Init+0xf0>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 80009bc:	4b18      	ldr	r3, [pc, #96]	; (8000a20 <MX_FSMC_Init+0xf0>)
 80009be:	2200      	movs	r2, #0
 80009c0:	641a      	str	r2, [r3, #64]	; 0x40
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80009c2:	4b17      	ldr	r3, [pc, #92]	; (8000a20 <MX_FSMC_Init+0xf0>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 9;
 80009c8:	2309      	movs	r3, #9
 80009ca:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80009cc:	230f      	movs	r3, #15
 80009ce:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 5;
 80009d0:	2305      	movs	r3, #5
 80009d2:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 1;
 80009d4:	2301      	movs	r3, #1
 80009d6:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 80009d8:	2310      	movs	r3, #16
 80009da:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 80009dc:	2311      	movs	r3, #17
 80009de:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80009e0:	2300      	movs	r3, #0
 80009e2:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 2;
 80009e4:	2302      	movs	r3, #2
 80009e6:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 80009e8:	230f      	movs	r3, #15
 80009ea:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 3;
 80009ec:	2303      	movs	r3, #3
 80009ee:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 1;
 80009f0:	2301      	movs	r3, #1
 80009f2:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 80009f4:	2310      	movs	r3, #16
 80009f6:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 80009f8:	2311      	movs	r3, #17
 80009fa:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 80009fc:	2300      	movs	r3, #0
 80009fe:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8000a00:	463a      	mov	r2, r7
 8000a02:	f107 031c 	add.w	r3, r7, #28
 8000a06:	4619      	mov	r1, r3
 8000a08:	4805      	ldr	r0, [pc, #20]	; (8000a20 <MX_FSMC_Init+0xf0>)
 8000a0a:	f006 fd6b 	bl	80074e4 <HAL_SRAM_Init>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_FSMC_Init+0xe8>
  {
    Error_Handler( );
 8000a14:	f000 feda 	bl	80017cc <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000a18:	bf00      	nop
 8000a1a:	3738      	adds	r7, #56	; 0x38
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	20025c94 	.word	0x20025c94
 8000a24:	a0000104 	.word	0xa0000104

08000a28 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b086      	sub	sp, #24
 8000a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2e:	1d3b      	adds	r3, r7, #4
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
 8000a36:	609a      	str	r2, [r3, #8]
 8000a38:	60da      	str	r2, [r3, #12]
 8000a3a:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8000a3c:	4b2c      	ldr	r3, [pc, #176]	; (8000af0 <HAL_FSMC_MspInit+0xc8>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d151      	bne.n	8000ae8 <HAL_FSMC_MspInit+0xc0>
    return;
  }
  FSMC_Initialized = 1;
 8000a44:	4b2a      	ldr	r3, [pc, #168]	; (8000af0 <HAL_FSMC_MspInit+0xc8>)
 8000a46:	2201      	movs	r2, #1
 8000a48:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	603b      	str	r3, [r7, #0]
 8000a4e:	4b29      	ldr	r3, [pc, #164]	; (8000af4 <HAL_FSMC_MspInit+0xcc>)
 8000a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a52:	4a28      	ldr	r2, [pc, #160]	; (8000af4 <HAL_FSMC_MspInit+0xcc>)
 8000a54:	f043 0301 	orr.w	r3, r3, #1
 8000a58:	6393      	str	r3, [r2, #56]	; 0x38
 8000a5a:	4b26      	ldr	r3, [pc, #152]	; (8000af4 <HAL_FSMC_MspInit+0xcc>)
 8000a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a5e:	f003 0301 	and.w	r3, r3, #1
 8000a62:	603b      	str	r3, [r7, #0]
 8000a64:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000a66:	f64f 7380 	movw	r3, #65408	; 0xff80
 8000a6a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a74:	2303      	movs	r3, #3
 8000a76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000a78:	230c      	movs	r3, #12
 8000a7a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a7c:	1d3b      	adds	r3, r7, #4
 8000a7e:	4619      	mov	r1, r3
 8000a80:	481d      	ldr	r0, [pc, #116]	; (8000af8 <HAL_FSMC_MspInit+0xd0>)
 8000a82:	f003 f8ef 	bl	8003c64 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000a86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a8a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a94:	2303      	movs	r3, #3
 8000a96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000a98:	230c      	movs	r3, #12
 8000a9a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a9c:	1d3b      	adds	r3, r7, #4
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4816      	ldr	r0, [pc, #88]	; (8000afc <HAL_FSMC_MspInit+0xd4>)
 8000aa2:	f003 f8df 	bl	8003c64 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14
 8000aa6:	f64c 63b0 	movw	r3, #52912	; 0xceb0
 8000aaa:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aac:	2302      	movs	r3, #2
 8000aae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab4:	2303      	movs	r3, #3
 8000ab6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000ab8:	230c      	movs	r3, #12
 8000aba:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000abc:	1d3b      	adds	r3, r7, #4
 8000abe:	4619      	mov	r1, r3
 8000ac0:	480f      	ldr	r0, [pc, #60]	; (8000b00 <HAL_FSMC_MspInit+0xd8>)
 8000ac2:	f003 f8cf 	bl	8003c64 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000ac6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000aca:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000acc:	2302      	movs	r3, #2
 8000ace:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad4:	2303      	movs	r3, #3
 8000ad6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ad8:	230a      	movs	r3, #10
 8000ada:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000adc:	1d3b      	adds	r3, r7, #4
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4808      	ldr	r0, [pc, #32]	; (8000b04 <HAL_FSMC_MspInit+0xdc>)
 8000ae2:	f003 f8bf 	bl	8003c64 <HAL_GPIO_Init>
 8000ae6:	e000      	b.n	8000aea <HAL_FSMC_MspInit+0xc2>
    return;
 8000ae8:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8000aea:	3718      	adds	r7, #24
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	20000090 	.word	0x20000090
 8000af4:	40023800 	.word	0x40023800
 8000af8:	40021000 	.word	0x40021000
 8000afc:	40020400 	.word	0x40020400
 8000b00:	40020c00 	.word	0x40020c00
 8000b04:	40020800 	.word	0x40020800

08000b08 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000b10:	f7ff ff8a 	bl	8000a28 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000b14:	bf00      	nop
 8000b16:	3708      	adds	r7, #8
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <FSMC_WR_REG>:
 * function   :
 * parameters :
 * retvalue   :N/A
 *******************************************************************************************************************************/
void FSMC_WR_REG(uint32_t Reg)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
	LCD_FSMC->REG = Reg;
 8000b24:	4b05      	ldr	r3, [pc, #20]	; (8000b3c <FSMC_WR_REG+0x20>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	687a      	ldr	r2, [r7, #4]
 8000b2a:	b292      	uxth	r2, r2
 8000b2c:	801a      	strh	r2, [r3, #0]
}
 8000b2e:	bf00      	nop
 8000b30:	370c      	adds	r7, #12
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	20000000 	.word	0x20000000

08000b40 <FSMC_WR_DAT>:
* function   :
* parameters :N/A
* retvalue   :N/A
*******************************************************************************************************************************/
void FSMC_WR_DAT(uint16_t Dat)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4603      	mov	r3, r0
 8000b48:	80fb      	strh	r3, [r7, #6]
	LCD_FSMC->DAT = Dat;
 8000b4a:	4b05      	ldr	r3, [pc, #20]	; (8000b60 <FSMC_WR_DAT+0x20>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	88fa      	ldrh	r2, [r7, #6]
 8000b50:	805a      	strh	r2, [r3, #2]
}
 8000b52:	bf00      	nop
 8000b54:	370c      	adds	r7, #12
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	20000000 	.word	0x20000000

08000b64 <LCD_SetWindow>:
							LCD_SetDirection function. It calls to FSMC_WR_REG(RAMWR) function at the end.
* parameters :XS(x start address), YS(y start address), XE(x end address) and YE(y end address)
* retvalue   :N/A
*******************************************************************************************************************************/
void LCD_SetWindow(uint16_t Xs, uint16_t Ys, uint16_t Xe, uint16_t Ye)
{
 8000b64:	b590      	push	{r4, r7, lr}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4604      	mov	r4, r0
 8000b6c:	4608      	mov	r0, r1
 8000b6e:	4611      	mov	r1, r2
 8000b70:	461a      	mov	r2, r3
 8000b72:	4623      	mov	r3, r4
 8000b74:	80fb      	strh	r3, [r7, #6]
 8000b76:	4603      	mov	r3, r0
 8000b78:	80bb      	strh	r3, [r7, #4]
 8000b7a:	460b      	mov	r3, r1
 8000b7c:	807b      	strh	r3, [r7, #2]
 8000b7e:	4613      	mov	r3, r2
 8000b80:	803b      	strh	r3, [r7, #0]
	FSMC_WR_REG(CASET_XS_H);		FSMC_WR_DAT(Xs >> 8);
 8000b82:	f44f 5028 	mov.w	r0, #10752	; 0x2a00
 8000b86:	f7ff ffc9 	bl	8000b1c <FSMC_WR_REG>
 8000b8a:	88fb      	ldrh	r3, [r7, #6]
 8000b8c:	0a1b      	lsrs	r3, r3, #8
 8000b8e:	b29b      	uxth	r3, r3
 8000b90:	4618      	mov	r0, r3
 8000b92:	f7ff ffd5 	bl	8000b40 <FSMC_WR_DAT>
	FSMC_WR_REG(CASET_XS_L);		FSMC_WR_DAT(Xs & 0x00FFU);
 8000b96:	f642 2001 	movw	r0, #10753	; 0x2a01
 8000b9a:	f7ff ffbf 	bl	8000b1c <FSMC_WR_REG>
 8000b9e:	88fb      	ldrh	r3, [r7, #6]
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	b29b      	uxth	r3, r3
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff ffcb 	bl	8000b40 <FSMC_WR_DAT>
	FSMC_WR_REG(CASET_XE_H);		FSMC_WR_DAT(Xe >> 8);
 8000baa:	f642 2002 	movw	r0, #10754	; 0x2a02
 8000bae:	f7ff ffb5 	bl	8000b1c <FSMC_WR_REG>
 8000bb2:	887b      	ldrh	r3, [r7, #2]
 8000bb4:	0a1b      	lsrs	r3, r3, #8
 8000bb6:	b29b      	uxth	r3, r3
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff ffc1 	bl	8000b40 <FSMC_WR_DAT>
	FSMC_WR_REG(CASET_XE_L);		FSMC_WR_DAT(Xe & 0x00FFU);
 8000bbe:	f642 2003 	movw	r0, #10755	; 0x2a03
 8000bc2:	f7ff ffab 	bl	8000b1c <FSMC_WR_REG>
 8000bc6:	887b      	ldrh	r3, [r7, #2]
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	b29b      	uxth	r3, r3
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff ffb7 	bl	8000b40 <FSMC_WR_DAT>
	FSMC_WR_REG(RASET_YS_H);		FSMC_WR_DAT(Ys >> 8);
 8000bd2:	f44f 502c 	mov.w	r0, #11008	; 0x2b00
 8000bd6:	f7ff ffa1 	bl	8000b1c <FSMC_WR_REG>
 8000bda:	88bb      	ldrh	r3, [r7, #4]
 8000bdc:	0a1b      	lsrs	r3, r3, #8
 8000bde:	b29b      	uxth	r3, r3
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff ffad 	bl	8000b40 <FSMC_WR_DAT>
	FSMC_WR_REG(RASET_YS_L);		FSMC_WR_DAT(Ys & 0x00FFU);
 8000be6:	f642 3001 	movw	r0, #11009	; 0x2b01
 8000bea:	f7ff ff97 	bl	8000b1c <FSMC_WR_REG>
 8000bee:	88bb      	ldrh	r3, [r7, #4]
 8000bf0:	b2db      	uxtb	r3, r3
 8000bf2:	b29b      	uxth	r3, r3
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f7ff ffa3 	bl	8000b40 <FSMC_WR_DAT>
	FSMC_WR_REG(RASET_YE_H);		FSMC_WR_DAT(Ye >> 8);
 8000bfa:	f642 3002 	movw	r0, #11010	; 0x2b02
 8000bfe:	f7ff ff8d 	bl	8000b1c <FSMC_WR_REG>
 8000c02:	883b      	ldrh	r3, [r7, #0]
 8000c04:	0a1b      	lsrs	r3, r3, #8
 8000c06:	b29b      	uxth	r3, r3
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f7ff ff99 	bl	8000b40 <FSMC_WR_DAT>
	FSMC_WR_REG(RASET_YE_L);		FSMC_WR_DAT(Ye & 0x00FFU);
 8000c0e:	f642 3003 	movw	r0, #11011	; 0x2b03
 8000c12:	f7ff ff83 	bl	8000b1c <FSMC_WR_REG>
 8000c16:	883b      	ldrh	r3, [r7, #0]
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	b29b      	uxth	r3, r3
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f7ff ff8f 	bl	8000b40 <FSMC_WR_DAT>

	FSMC_WR_REG(RAMWR);
 8000c22:	f44f 5030 	mov.w	r0, #11264	; 0x2c00
 8000c26:	f7ff ff79 	bl	8000b1c <FSMC_WR_REG>
}
 8000c2a:	bf00      	nop
 8000c2c:	370c      	adds	r7, #12
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd90      	pop	{r4, r7, pc}
	...

08000c34 <LCD_SetDirection>:
							the selected orientation.
* parameters :Direction(Use Orientation Direction Definitions defined in FSMC_NT35510.h)
* retvalue   :N/A
*******************************************************************************************************************************/
void LCD_SetDirection(uint8_t Direction)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	71fb      	strb	r3, [r7, #7]
	switch(Direction)
 8000c3e:	79fb      	ldrb	r3, [r7, #7]
 8000c40:	2b03      	cmp	r3, #3
 8000c42:	d84b      	bhi.n	8000cdc <LCD_SetDirection+0xa8>
 8000c44:	a201      	add	r2, pc, #4	; (adr r2, 8000c4c <LCD_SetDirection+0x18>)
 8000c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c4a:	bf00      	nop
 8000c4c:	08000c5d 	.word	0x08000c5d
 8000c50:	08000c7d 	.word	0x08000c7d
 8000c54:	08000c9d 	.word	0x08000c9d
 8000c58:	08000cbd 	.word	0x08000cbd
	{
		case 0:

			FSMC_WR_REG(MADCTL); FSMC_WR_DAT(0x0000U);
 8000c5c:	f44f 5058 	mov.w	r0, #13824	; 0x3600
 8000c60:	f7ff ff5c 	bl	8000b1c <FSMC_WR_REG>
 8000c64:	2000      	movs	r0, #0
 8000c66:	f7ff ff6b 	bl	8000b40 <FSMC_WR_DAT>
			LCD_SetWindow(0, 0, 479, 799);
 8000c6a:	f240 331f 	movw	r3, #799	; 0x31f
 8000c6e:	f240 12df 	movw	r2, #479	; 0x1df
 8000c72:	2100      	movs	r1, #0
 8000c74:	2000      	movs	r0, #0
 8000c76:	f7ff ff75 	bl	8000b64 <LCD_SetWindow>
		break;
 8000c7a:	e02f      	b.n	8000cdc <LCD_SetDirection+0xa8>
		case 1:

			FSMC_WR_REG(MADCTL); FSMC_WR_DAT(0x00C0U);
 8000c7c:	f44f 5058 	mov.w	r0, #13824	; 0x3600
 8000c80:	f7ff ff4c 	bl	8000b1c <FSMC_WR_REG>
 8000c84:	20c0      	movs	r0, #192	; 0xc0
 8000c86:	f7ff ff5b 	bl	8000b40 <FSMC_WR_DAT>
			LCD_SetWindow(0, 0, 479, 799);
 8000c8a:	f240 331f 	movw	r3, #799	; 0x31f
 8000c8e:	f240 12df 	movw	r2, #479	; 0x1df
 8000c92:	2100      	movs	r1, #0
 8000c94:	2000      	movs	r0, #0
 8000c96:	f7ff ff65 	bl	8000b64 <LCD_SetWindow>
		break;
 8000c9a:	e01f      	b.n	8000cdc <LCD_SetDirection+0xa8>
		case 2:

			FSMC_WR_REG(MADCTL); FSMC_WR_DAT(0x0060U);
 8000c9c:	f44f 5058 	mov.w	r0, #13824	; 0x3600
 8000ca0:	f7ff ff3c 	bl	8000b1c <FSMC_WR_REG>
 8000ca4:	2060      	movs	r0, #96	; 0x60
 8000ca6:	f7ff ff4b 	bl	8000b40 <FSMC_WR_DAT>
			LCD_SetWindow(0, 0, 799, 479);
 8000caa:	f240 13df 	movw	r3, #479	; 0x1df
 8000cae:	f240 321f 	movw	r2, #799	; 0x31f
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	2000      	movs	r0, #0
 8000cb6:	f7ff ff55 	bl	8000b64 <LCD_SetWindow>
		break;
 8000cba:	e00f      	b.n	8000cdc <LCD_SetDirection+0xa8>
		case 3:

			FSMC_WR_REG(MADCTL); FSMC_WR_DAT(0x00A0U);
 8000cbc:	f44f 5058 	mov.w	r0, #13824	; 0x3600
 8000cc0:	f7ff ff2c 	bl	8000b1c <FSMC_WR_REG>
 8000cc4:	20a0      	movs	r0, #160	; 0xa0
 8000cc6:	f7ff ff3b 	bl	8000b40 <FSMC_WR_DAT>
			LCD_SetWindow(0, 0, 799, 479);
 8000cca:	f240 13df 	movw	r3, #479	; 0x1df
 8000cce:	f240 321f 	movw	r2, #799	; 0x31f
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	2000      	movs	r0, #0
 8000cd6:	f7ff ff45 	bl	8000b64 <LCD_SetWindow>
		break;
 8000cda:	bf00      	nop
	}
}
 8000cdc:	bf00      	nop
 8000cde:	3708      	adds	r7, #8
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <LCD_ClearScreen>:
							orientation direction change.
* parameters :Color(Desired screen color)
* retvalue   :N/A
*******************************************************************************************************************************/
void LCD_ClearScreen(uint16_t Color)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4603      	mov	r3, r0
 8000cec:	80fb      	strh	r3, [r7, #6]
  uint32_t i;

	for(i=0; i<(480*800); i++)
 8000cee:	2300      	movs	r3, #0
 8000cf0:	60fb      	str	r3, [r7, #12]
 8000cf2:	e006      	b.n	8000d02 <LCD_ClearScreen+0x1e>
	{
		FSMC_WR_DAT(Color);
 8000cf4:	88fb      	ldrh	r3, [r7, #6]
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f7ff ff22 	bl	8000b40 <FSMC_WR_DAT>
	for(i=0; i<(480*800); i++)
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	3301      	adds	r3, #1
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	4a03      	ldr	r2, [pc, #12]	; (8000d14 <LCD_ClearScreen+0x30>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d9f4      	bls.n	8000cf4 <LCD_ClearScreen+0x10>
	}
}
 8000d0a:	bf00      	nop
 8000d0c:	bf00      	nop
 8000d0e:	3710      	adds	r7, #16
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	0005dbff 	.word	0x0005dbff

08000d18 <LCD_PrintCh>:
* parameters :X(x start address), Y(y start address), Color(character color), Bcolor(background
							color), Character(use standard ASCII values for characters) and Size(characters size)
* retvalue   :N/A
********************************************************************************************************************************/
void LCD_PrintCh(uint16_t X, uint16_t Y, uint16_t Color, uint16_t Bcolor, uint8_t Character, uint8_t Size)
{
 8000d18:	b590      	push	{r4, r7, lr}
 8000d1a:	b085      	sub	sp, #20
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4604      	mov	r4, r0
 8000d20:	4608      	mov	r0, r1
 8000d22:	4611      	mov	r1, r2
 8000d24:	461a      	mov	r2, r3
 8000d26:	4623      	mov	r3, r4
 8000d28:	80fb      	strh	r3, [r7, #6]
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	80bb      	strh	r3, [r7, #4]
 8000d2e:	460b      	mov	r3, r1
 8000d30:	807b      	strh	r3, [r7, #2]
 8000d32:	4613      	mov	r3, r2
 8000d34:	803b      	strh	r3, [r7, #0]
	uint8_t i, j, k, p=0;
 8000d36:	2300      	movs	r3, #0
 8000d38:	733b      	strb	r3, [r7, #12]
	uint16_t c=0;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	817b      	strh	r3, [r7, #10]
	LCD_SetWindow(X, Y, X+(8 * Size - 1), Y+(8  *Size - 1));									// Define area by character size.
 8000d3e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000d42:	b29b      	uxth	r3, r3
 8000d44:	00db      	lsls	r3, r3, #3
 8000d46:	b29a      	uxth	r2, r3
 8000d48:	88fb      	ldrh	r3, [r7, #6]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	b29b      	uxth	r3, r3
 8000d4e:	3b01      	subs	r3, #1
 8000d50:	b29c      	uxth	r4, r3
 8000d52:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000d56:	b29b      	uxth	r3, r3
 8000d58:	00db      	lsls	r3, r3, #3
 8000d5a:	b29a      	uxth	r2, r3
 8000d5c:	88bb      	ldrh	r3, [r7, #4]
 8000d5e:	4413      	add	r3, r2
 8000d60:	b29b      	uxth	r3, r3
 8000d62:	3b01      	subs	r3, #1
 8000d64:	b29b      	uxth	r3, r3
 8000d66:	88b9      	ldrh	r1, [r7, #4]
 8000d68:	88f8      	ldrh	r0, [r7, #6]
 8000d6a:	4622      	mov	r2, r4
 8000d6c:	f7ff fefa 	bl	8000b64 <LCD_SetWindow>

	for(i=0; i<8; i++)																							// 8 row-loops because there are 8 row-bytes per character.
 8000d70:	2300      	movs	r3, #0
 8000d72:	73fb      	strb	r3, [r7, #15]
 8000d74:	e03c      	b.n	8000df0 <LCD_PrintCh+0xd8>
	{
		for(j=0; j < Size; j++)																					// Print each row size times.
 8000d76:	2300      	movs	r3, #0
 8000d78:	73bb      	strb	r3, [r7, #14]
 8000d7a:	e031      	b.n	8000de0 <LCD_PrintCh+0xc8>
		{
			for(k=0; k < 8; k++)																					// 8 column-loops because there are 8 column-bits per row-byte
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	737b      	strb	r3, [r7, #13]
 8000d80:	e028      	b.n	8000dd4 <LCD_PrintCh+0xbc>
			{
				if((ASCIItable[Character][i]>>(7-k)) & 0x01)
 8000d82:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000d86:	7bfb      	ldrb	r3, [r7, #15]
 8000d88:	491d      	ldr	r1, [pc, #116]	; (8000e00 <LCD_PrintCh+0xe8>)
 8000d8a:	00d2      	lsls	r2, r2, #3
 8000d8c:	440a      	add	r2, r1
 8000d8e:	4413      	add	r3, r2
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	461a      	mov	r2, r3
 8000d94:	7b7b      	ldrb	r3, [r7, #13]
 8000d96:	f1c3 0307 	rsb	r3, r3, #7
 8000d9a:	fa42 f303 	asr.w	r3, r2, r3
 8000d9e:	f003 0301 	and.w	r3, r3, #1
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d002      	beq.n	8000dac <LCD_PrintCh+0x94>
					c=Color;
 8000da6:	887b      	ldrh	r3, [r7, #2]
 8000da8:	817b      	strh	r3, [r7, #10]
 8000daa:	e001      	b.n	8000db0 <LCD_PrintCh+0x98>
				else
					c=Bcolor;
 8000dac:	883b      	ldrh	r3, [r7, #0]
 8000dae:	817b      	strh	r3, [r7, #10]
				for(p = 0; p < Size; p++)																			// Print each column-bit size times.
 8000db0:	2300      	movs	r3, #0
 8000db2:	733b      	strb	r3, [r7, #12]
 8000db4:	e006      	b.n	8000dc4 <LCD_PrintCh+0xac>
				{
					FSMC_WR_DAT(c);
 8000db6:	897b      	ldrh	r3, [r7, #10]
 8000db8:	4618      	mov	r0, r3
 8000dba:	f7ff fec1 	bl	8000b40 <FSMC_WR_DAT>
				for(p = 0; p < Size; p++)																			// Print each column-bit size times.
 8000dbe:	7b3b      	ldrb	r3, [r7, #12]
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	733b      	strb	r3, [r7, #12]
 8000dc4:	7b3a      	ldrb	r2, [r7, #12]
 8000dc6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	d3f3      	bcc.n	8000db6 <LCD_PrintCh+0x9e>
			for(k=0; k < 8; k++)																					// 8 column-loops because there are 8 column-bits per row-byte
 8000dce:	7b7b      	ldrb	r3, [r7, #13]
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	737b      	strb	r3, [r7, #13]
 8000dd4:	7b7b      	ldrb	r3, [r7, #13]
 8000dd6:	2b07      	cmp	r3, #7
 8000dd8:	d9d3      	bls.n	8000d82 <LCD_PrintCh+0x6a>
		for(j=0; j < Size; j++)																					// Print each row size times.
 8000dda:	7bbb      	ldrb	r3, [r7, #14]
 8000ddc:	3301      	adds	r3, #1
 8000dde:	73bb      	strb	r3, [r7, #14]
 8000de0:	7bba      	ldrb	r2, [r7, #14]
 8000de2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000de6:	429a      	cmp	r2, r3
 8000de8:	d3c8      	bcc.n	8000d7c <LCD_PrintCh+0x64>
	for(i=0; i<8; i++)																							// 8 row-loops because there are 8 row-bytes per character.
 8000dea:	7bfb      	ldrb	r3, [r7, #15]
 8000dec:	3301      	adds	r3, #1
 8000dee:	73fb      	strb	r3, [r7, #15]
 8000df0:	7bfb      	ldrb	r3, [r7, #15]
 8000df2:	2b07      	cmp	r3, #7
 8000df4:	d9bf      	bls.n	8000d76 <LCD_PrintCh+0x5e>
				}
			}
		}
	}
}
 8000df6:	bf00      	nop
 8000df8:	bf00      	nop
 8000dfa:	3714      	adds	r7, #20
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd90      	pop	{r4, r7, pc}
 8000e00:	0801b760 	.word	0x0801b760

08000e04 <LCD_PrintStr>:
							color), string(pointer to an array of characters, standard ASCII values) and size
							(character size)
* retvalue   :N/A
********************************************************************************************************************************/
void LCD_PrintStr(uint16_t X, uint16_t Y, uint16_t Color, uint16_t Bcolor, uint8_t* String, uint8_t Size)
{
 8000e04:	b5b0      	push	{r4, r5, r7, lr}
 8000e06:	b084      	sub	sp, #16
 8000e08:	af02      	add	r7, sp, #8
 8000e0a:	4604      	mov	r4, r0
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	4611      	mov	r1, r2
 8000e10:	461a      	mov	r2, r3
 8000e12:	4623      	mov	r3, r4
 8000e14:	80fb      	strh	r3, [r7, #6]
 8000e16:	4603      	mov	r3, r0
 8000e18:	80bb      	strh	r3, [r7, #4]
 8000e1a:	460b      	mov	r3, r1
 8000e1c:	807b      	strh	r3, [r7, #2]
 8000e1e:	4613      	mov	r3, r2
 8000e20:	803b      	strh	r3, [r7, #0]
	X=X-8*Size;
 8000e22:	7f3b      	ldrb	r3, [r7, #28]
 8000e24:	b29b      	uxth	r3, r3
 8000e26:	00db      	lsls	r3, r3, #3
 8000e28:	b29b      	uxth	r3, r3
 8000e2a:	88fa      	ldrh	r2, [r7, #6]
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	80fb      	strh	r3, [r7, #6]
	while(*String)
 8000e30:	e015      	b.n	8000e5e <LCD_PrintStr+0x5a>
		LCD_PrintCh(X = X + 8 * Size, Y, Color, Bcolor, *String++, Size);
 8000e32:	7f3b      	ldrb	r3, [r7, #28]
 8000e34:	b29b      	uxth	r3, r3
 8000e36:	00db      	lsls	r3, r3, #3
 8000e38:	b29a      	uxth	r2, r3
 8000e3a:	88fb      	ldrh	r3, [r7, #6]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	80fb      	strh	r3, [r7, #6]
 8000e40:	69bb      	ldr	r3, [r7, #24]
 8000e42:	1c5a      	adds	r2, r3, #1
 8000e44:	61ba      	str	r2, [r7, #24]
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	883d      	ldrh	r5, [r7, #0]
 8000e4a:	887c      	ldrh	r4, [r7, #2]
 8000e4c:	88b9      	ldrh	r1, [r7, #4]
 8000e4e:	88f8      	ldrh	r0, [r7, #6]
 8000e50:	7f3a      	ldrb	r2, [r7, #28]
 8000e52:	9201      	str	r2, [sp, #4]
 8000e54:	9300      	str	r3, [sp, #0]
 8000e56:	462b      	mov	r3, r5
 8000e58:	4622      	mov	r2, r4
 8000e5a:	f7ff ff5d 	bl	8000d18 <LCD_PrintCh>
	while(*String)
 8000e5e:	69bb      	ldr	r3, [r7, #24]
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d1e5      	bne.n	8000e32 <LCD_PrintStr+0x2e>
}
 8000e66:	bf00      	nop
 8000e68:	bf00      	nop
 8000e6a:	3708      	adds	r7, #8
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bdb0      	pop	{r4, r5, r7, pc}

08000e70 <NT35510_Init>:
 * function   :
 * parameters :
 * retvalue   :N/A
 *******************************************************************************************************************************/
void NT35510_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
	RST_LOW;													// Reset on.
 8000e74:	2200      	movs	r2, #0
 8000e76:	2140      	movs	r1, #64	; 0x40
 8000e78:	48fd      	ldr	r0, [pc, #1012]	; (8001270 <NT35510_Init+0x400>)
 8000e7a:	f003 f887 	bl	8003f8c <HAL_GPIO_WritePin>
	HAL_Delay(300);											// Short delay needed on power up
 8000e7e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000e82:	f001 ff5f 	bl	8002d44 <HAL_Delay>
	RST_HIGH;													// Reset off.
 8000e86:	2201      	movs	r2, #1
 8000e88:	2140      	movs	r1, #64	; 0x40
 8000e8a:	48f9      	ldr	r0, [pc, #996]	; (8001270 <NT35510_Init+0x400>)
 8000e8c:	f003 f87e 	bl	8003f8c <HAL_GPIO_WritePin>
	HAL_Delay(800);											// Short delay needed on power up
 8000e90:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000e94:	f001 ff56 	bl	8002d44 <HAL_Delay>

	// Manufacture Command Set selection
	FSMC_WR_REG(MAUCCTR_0);			FSMC_WR_DAT(0x0055U);
 8000e98:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8000e9c:	f7ff fe3e 	bl	8000b1c <FSMC_WR_REG>
 8000ea0:	2055      	movs	r0, #85	; 0x55
 8000ea2:	f7ff fe4d 	bl	8000b40 <FSMC_WR_DAT>
	FSMC_WR_REG(MAUCCTR_1);			FSMC_WR_DAT(0x00AAU);
 8000ea6:	f24f 0001 	movw	r0, #61441	; 0xf001
 8000eaa:	f7ff fe37 	bl	8000b1c <FSMC_WR_REG>
 8000eae:	20aa      	movs	r0, #170	; 0xaa
 8000eb0:	f7ff fe46 	bl	8000b40 <FSMC_WR_DAT>
	FSMC_WR_REG(MAUCCTR_2);			FSMC_WR_DAT(0x0052U);
 8000eb4:	f24f 0002 	movw	r0, #61442	; 0xf002
 8000eb8:	f7ff fe30 	bl	8000b1c <FSMC_WR_REG>
 8000ebc:	2052      	movs	r0, #82	; 0x52
 8000ebe:	f7ff fe3f 	bl	8000b40 <FSMC_WR_DAT>
	FSMC_WR_REG(MAUCCTR_3);			FSMC_WR_DAT(0x0008U);		// Enable Manufacture Command Set
 8000ec2:	f24f 0003 	movw	r0, #61443	; 0xf003
 8000ec6:	f7ff fe29 	bl	8000b1c <FSMC_WR_REG>
 8000eca:	2008      	movs	r0, #8
 8000ecc:	f7ff fe38 	bl	8000b40 <FSMC_WR_DAT>
	FSMC_WR_REG(MAUCCTR_4);			FSMC_WR_DAT(0x0001U);		// Select page 1
 8000ed0:	f24f 0004 	movw	r0, #61444	; 0xf004
 8000ed4:	f7ff fe22 	bl	8000b1c <FSMC_WR_REG>
 8000ed8:	2001      	movs	r0, #1
 8000eda:	f7ff fe31 	bl	8000b40 <FSMC_WR_DAT>

	// AVDD 5.2V
	FSMC_WR_REG(SETAVDD_NORM);		FSMC_WR_DAT(0x000DU);
 8000ede:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 8000ee2:	f7ff fe1b 	bl	8000b1c <FSMC_WR_REG>
 8000ee6:	200d      	movs	r0, #13
 8000ee8:	f7ff fe2a 	bl	8000b40 <FSMC_WR_DAT>
	FSMC_WR_REG(SETAVDD_IDLE);		FSMC_WR_DAT(0x000DU);
 8000eec:	f24b 0001 	movw	r0, #45057	; 0xb001
 8000ef0:	f7ff fe14 	bl	8000b1c <FSMC_WR_REG>
 8000ef4:	200d      	movs	r0, #13
 8000ef6:	f7ff fe23 	bl	8000b40 <FSMC_WR_DAT>
	FSMC_WR_REG(SETAVDD_PART);		FSMC_WR_DAT(0x000DU);
 8000efa:	f24b 0002 	movw	r0, #45058	; 0xb002
 8000efe:	f7ff fe0d 	bl	8000b1c <FSMC_WR_REG>
 8000f02:	200d      	movs	r0, #13
 8000f04:	f7ff fe1c 	bl	8000b40 <FSMC_WR_DAT>

	// AVDD ratio
	FSMC_WR_REG(BT1CTR_NORM);		FSMC_WR_DAT(0x0034U);
 8000f08:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 8000f0c:	f7ff fe06 	bl	8000b1c <FSMC_WR_REG>
 8000f10:	2034      	movs	r0, #52	; 0x34
 8000f12:	f7ff fe15 	bl	8000b40 <FSMC_WR_DAT>
	FSMC_WR_REG(BT1CTR_IDLE);		FSMC_WR_DAT(0x0034U);
 8000f16:	f24b 6001 	movw	r0, #46593	; 0xb601
 8000f1a:	f7ff fdff 	bl	8000b1c <FSMC_WR_REG>
 8000f1e:	2034      	movs	r0, #52	; 0x34
 8000f20:	f7ff fe0e 	bl	8000b40 <FSMC_WR_DAT>
	FSMC_WR_REG(BT1CTR_PART);		FSMC_WR_DAT(0x0034U);
 8000f24:	f24b 6002 	movw	r0, #46594	; 0xb602
 8000f28:	f7ff fdf8 	bl	8000b1c <FSMC_WR_REG>
 8000f2c:	2034      	movs	r0, #52	; 0x34
 8000f2e:	f7ff fe07 	bl	8000b40 <FSMC_WR_DAT>

	// AVEE  -5.2V
	FSMC_WR_REG(SETAVEE_NORM);		FSMC_WR_DAT(0x000DU);
 8000f32:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 8000f36:	f7ff fdf1 	bl	8000b1c <FSMC_WR_REG>
 8000f3a:	200d      	movs	r0, #13
 8000f3c:	f7ff fe00 	bl	8000b40 <FSMC_WR_DAT>
	FSMC_WR_REG(SETAVEE_IDLE);		FSMC_WR_DAT(0x000DU);
 8000f40:	f24b 1001 	movw	r0, #45313	; 0xb101
 8000f44:	f7ff fdea 	bl	8000b1c <FSMC_WR_REG>
 8000f48:	200d      	movs	r0, #13
 8000f4a:	f7ff fdf9 	bl	8000b40 <FSMC_WR_DAT>
	FSMC_WR_REG(SETAVEE_PART);		FSMC_WR_DAT(0x000DU);
 8000f4e:	f24b 1002 	movw	r0, #45314	; 0xb102
 8000f52:	f7ff fde3 	bl	8000b1c <FSMC_WR_REG>
 8000f56:	200d      	movs	r0, #13
 8000f58:	f7ff fdf2 	bl	8000b40 <FSMC_WR_DAT>

	// AVEE ratio
	FSMC_WR_REG(BT2CTR_NORM);		FSMC_WR_DAT(0x0034U);
 8000f5c:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8000f60:	f7ff fddc 	bl	8000b1c <FSMC_WR_REG>
 8000f64:	2034      	movs	r0, #52	; 0x34
 8000f66:	f7ff fdeb 	bl	8000b40 <FSMC_WR_DAT>
	FSMC_WR_REG(BT2CTR_IDLE);		FSMC_WR_DAT(0x0034U);
 8000f6a:	f24b 7001 	movw	r0, #46849	; 0xb701
 8000f6e:	f7ff fdd5 	bl	8000b1c <FSMC_WR_REG>
 8000f72:	2034      	movs	r0, #52	; 0x34
 8000f74:	f7ff fde4 	bl	8000b40 <FSMC_WR_DAT>
	FSMC_WR_REG(BT2CTR_PART);		FSMC_WR_DAT(0x0034U);
 8000f78:	f24b 7002 	movw	r0, #46850	; 0xb702
 8000f7c:	f7ff fdce 	bl	8000b1c <FSMC_WR_REG>
 8000f80:	2034      	movs	r0, #52	; 0x34
 8000f82:	f7ff fddd 	bl	8000b40 <FSMC_WR_DAT>

	// VCL  -2.5V
	FSMC_WR_REG(SETVCL_NORM);		FSMC_WR_DAT(0x0000U);
 8000f86:	f44f 4032 	mov.w	r0, #45568	; 0xb200
 8000f8a:	f7ff fdc7 	bl	8000b1c <FSMC_WR_REG>
 8000f8e:	2000      	movs	r0, #0
 8000f90:	f7ff fdd6 	bl	8000b40 <FSMC_WR_DAT>
	FSMC_WR_REG(SETVCL_IDLE);		FSMC_WR_DAT(0x0000U);
 8000f94:	f24b 2001 	movw	r0, #45569	; 0xb201
 8000f98:	f7ff fdc0 	bl	8000b1c <FSMC_WR_REG>
 8000f9c:	2000      	movs	r0, #0
 8000f9e:	f7ff fdcf 	bl	8000b40 <FSMC_WR_DAT>
	FSMC_WR_REG(SETVCL_PART);		FSMC_WR_DAT(0x0000U);
 8000fa2:	f24b 2002 	movw	r0, #45570	; 0xb202
 8000fa6:	f7ff fdb9 	bl	8000b1c <FSMC_WR_REG>
 8000faa:	2000      	movs	r0, #0
 8000fac:	f7ff fdc8 	bl	8000b40 <FSMC_WR_DAT>

	// VCL ratio
	FSMC_WR_REG(BT3CTR_NORM);		FSMC_WR_DAT(0x0024U);
 8000fb0:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 8000fb4:	f7ff fdb2 	bl	8000b1c <FSMC_WR_REG>
 8000fb8:	2024      	movs	r0, #36	; 0x24
 8000fba:	f7ff fdc1 	bl	8000b40 <FSMC_WR_DAT>
	FSMC_WR_REG(BT3CTR_IDLE);		FSMC_WR_DAT(0x0024U);
 8000fbe:	f64b 0001 	movw	r0, #47105	; 0xb801
 8000fc2:	f7ff fdab 	bl	8000b1c <FSMC_WR_REG>
 8000fc6:	2024      	movs	r0, #36	; 0x24
 8000fc8:	f7ff fdba 	bl	8000b40 <FSMC_WR_DAT>
	FSMC_WR_REG(BT3CTR_PART);		FSMC_WR_DAT(0x0024U);
 8000fcc:	f64b 0002 	movw	r0, #47106	; 0xb802
 8000fd0:	f7ff fda4 	bl	8000b1c <FSMC_WR_REG>
 8000fd4:	2024      	movs	r0, #36	; 0x24
 8000fd6:	f7ff fdb3 	bl	8000b40 <FSMC_WR_DAT>

	// VGH  15V
	FSMC_WR_REG(VGHCTR);			FSMC_WR_DAT(0x01);
 8000fda:	f44f 403f 	mov.w	r0, #48896	; 0xbf00
 8000fde:	f7ff fd9d 	bl	8000b1c <FSMC_WR_REG>
 8000fe2:	2001      	movs	r0, #1
 8000fe4:	f7ff fdac 	bl	8000b40 <FSMC_WR_DAT>
	FSMC_WR_REG(SETVGH_NORM);		FSMC_WR_DAT(0x000FU);
 8000fe8:	f44f 4033 	mov.w	r0, #45824	; 0xb300
 8000fec:	f7ff fd96 	bl	8000b1c <FSMC_WR_REG>
 8000ff0:	200f      	movs	r0, #15
 8000ff2:	f7ff fda5 	bl	8000b40 <FSMC_WR_DAT>
	FSMC_WR_REG(SETVGH_IDLE);		FSMC_WR_DAT(0x000FU);
 8000ff6:	f24b 3001 	movw	r0, #45825	; 0xb301
 8000ffa:	f7ff fd8f 	bl	8000b1c <FSMC_WR_REG>
 8000ffe:	200f      	movs	r0, #15
 8001000:	f7ff fd9e 	bl	8000b40 <FSMC_WR_DAT>
	FSMC_WR_REG(SETVGH_PART);		FSMC_WR_DAT(0x000FU);
 8001004:	f24b 3002 	movw	r0, #45826	; 0xb302
 8001008:	f7ff fd88 	bl	8000b1c <FSMC_WR_REG>
 800100c:	200f      	movs	r0, #15
 800100e:	f7ff fd97 	bl	8000b40 <FSMC_WR_DAT>

	// VGH  ratio
	FSMC_WR_REG(BT4CTR_NORM);		FSMC_WR_DAT(0x0034U);
 8001012:	f44f 4039 	mov.w	r0, #47360	; 0xb900
 8001016:	f7ff fd81 	bl	8000b1c <FSMC_WR_REG>
 800101a:	2034      	movs	r0, #52	; 0x34
 800101c:	f7ff fd90 	bl	8000b40 <FSMC_WR_DAT>
	FSMC_WR_REG(BT4CTR_IDLE);		FSMC_WR_DAT(0x0034U);
 8001020:	f64b 1001 	movw	r0, #47361	; 0xb901
 8001024:	f7ff fd7a 	bl	8000b1c <FSMC_WR_REG>
 8001028:	2034      	movs	r0, #52	; 0x34
 800102a:	f7ff fd89 	bl	8000b40 <FSMC_WR_DAT>
	FSMC_WR_REG(BT4CTR_PART);		FSMC_WR_DAT(0x0034U);
 800102e:	f64b 1002 	movw	r0, #47362	; 0xb902
 8001032:	f7ff fd73 	bl	8000b1c <FSMC_WR_REG>
 8001036:	2034      	movs	r0, #52	; 0x34
 8001038:	f7ff fd82 	bl	8000b40 <FSMC_WR_DAT>

	// VGL_REG  -10V
	FSMC_WR_REG(0xB500);			FSMC_WR_DAT(0x0008U);
 800103c:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 8001040:	f7ff fd6c 	bl	8000b1c <FSMC_WR_REG>
 8001044:	2008      	movs	r0, #8
 8001046:	f7ff fd7b 	bl	8000b40 <FSMC_WR_DAT>
	FSMC_WR_REG(0xB500);			FSMC_WR_DAT(0x0008U);
 800104a:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 800104e:	f7ff fd65 	bl	8000b1c <FSMC_WR_REG>
 8001052:	2008      	movs	r0, #8
 8001054:	f7ff fd74 	bl	8000b40 <FSMC_WR_DAT>
	FSMC_WR_REG(0xB501);			FSMC_WR_DAT(0x0008U);
 8001058:	f24b 5001 	movw	r0, #46337	; 0xb501
 800105c:	f7ff fd5e 	bl	8000b1c <FSMC_WR_REG>
 8001060:	2008      	movs	r0, #8
 8001062:	f7ff fd6d 	bl	8000b40 <FSMC_WR_DAT>
	FSMC_WR_REG(0xC200);			FSMC_WR_DAT(0x0003U);
 8001066:	f44f 4042 	mov.w	r0, #49664	; 0xc200
 800106a:	f7ff fd57 	bl	8000b1c <FSMC_WR_REG>
 800106e:	2003      	movs	r0, #3
 8001070:	f7ff fd66 	bl	8000b40 <FSMC_WR_DAT>

	// VGLX  ratio
	FSMC_WR_REG(BT5CTR_NORM);		FSMC_WR_DAT(0x0024U);
 8001074:	f44f 403a 	mov.w	r0, #47616	; 0xba00
 8001078:	f7ff fd50 	bl	8000b1c <FSMC_WR_REG>
 800107c:	2024      	movs	r0, #36	; 0x24
 800107e:	f7ff fd5f 	bl	8000b40 <FSMC_WR_DAT>
	FSMC_WR_REG(BT5CTR_IDLE);		FSMC_WR_DAT(0x0024U);
 8001082:	f64b 2001 	movw	r0, #47617	; 0xba01
 8001086:	f7ff fd49 	bl	8000b1c <FSMC_WR_REG>
 800108a:	2024      	movs	r0, #36	; 0x24
 800108c:	f7ff fd58 	bl	8000b40 <FSMC_WR_DAT>
	FSMC_WR_REG(BT5CTR_PART);		FSMC_WR_DAT(0x0024U);
 8001090:	f64b 2002 	movw	r0, #47618	; 0xba02
 8001094:	f7ff fd42 	bl	8000b1c <FSMC_WR_REG>
 8001098:	2024      	movs	r0, #36	; 0x24
 800109a:	f7ff fd51 	bl	8000b40 <FSMC_WR_DAT>

	// VGMP/VGSP 4.5V/0V
	FSMC_WR_REG(SETVGP_0);			FSMC_WR_DAT(0x0000U);
 800109e:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 80010a2:	f7ff fd3b 	bl	8000b1c <FSMC_WR_REG>
 80010a6:	2000      	movs	r0, #0
 80010a8:	f7ff fd4a 	bl	8000b40 <FSMC_WR_DAT>
	FSMC_WR_REG(SETVGP_1);			FSMC_WR_DAT(0x0078U);
 80010ac:	f64b 4001 	movw	r0, #48129	; 0xbc01
 80010b0:	f7ff fd34 	bl	8000b1c <FSMC_WR_REG>
 80010b4:	2078      	movs	r0, #120	; 0x78
 80010b6:	f7ff fd43 	bl	8000b40 <FSMC_WR_DAT>
	FSMC_WR_REG(SETVGP_2);			FSMC_WR_DAT(0x0000U);
 80010ba:	f64b 4002 	movw	r0, #48130	; 0xbc02
 80010be:	f7ff fd2d 	bl	8000b1c <FSMC_WR_REG>
 80010c2:	2000      	movs	r0, #0
 80010c4:	f7ff fd3c 	bl	8000b40 <FSMC_WR_DAT>

	// VGMN/VGSN -4.5V/0V
	FSMC_WR_REG(SETVGN_0);			FSMC_WR_DAT(0x0000U);
 80010c8:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
 80010cc:	f7ff fd26 	bl	8000b1c <FSMC_WR_REG>
 80010d0:	2000      	movs	r0, #0
 80010d2:	f7ff fd35 	bl	8000b40 <FSMC_WR_DAT>
	FSMC_WR_REG(SETVGN_1);			FSMC_WR_DAT(0x0078U);
 80010d6:	f64b 5001 	movw	r0, #48385	; 0xbd01
 80010da:	f7ff fd1f 	bl	8000b1c <FSMC_WR_REG>
 80010de:	2078      	movs	r0, #120	; 0x78
 80010e0:	f7ff fd2e 	bl	8000b40 <FSMC_WR_DAT>
	FSMC_WR_REG(SETVGN_2);			FSMC_WR_DAT(0x0000U);
 80010e4:	f64b 5002 	movw	r0, #48386	; 0xbd02
 80010e8:	f7ff fd18 	bl	8000b1c <FSMC_WR_REG>
 80010ec:	2000      	movs	r0, #0
 80010ee:	f7ff fd27 	bl	8000b40 <FSMC_WR_DAT>

	// VCOM  -1.325V
	FSMC_WR_REG(SETVCMOFF_0);		FSMC_WR_DAT(0x0000);
 80010f2:	f44f 403e 	mov.w	r0, #48640	; 0xbe00
 80010f6:	f7ff fd11 	bl	8000b1c <FSMC_WR_REG>
 80010fa:	2000      	movs	r0, #0
 80010fc:	f7ff fd20 	bl	8000b40 <FSMC_WR_DAT>
	FSMC_WR_REG(SETVCMOFF_1);		FSMC_WR_DAT(0x0089);
 8001100:	f64b 6001 	movw	r0, #48641	; 0xbe01
 8001104:	f7ff fd0a 	bl	8000b1c <FSMC_WR_REG>
 8001108:	2089      	movs	r0, #137	; 0x89
 800110a:	f7ff fd19 	bl	8000b40 <FSMC_WR_DAT>
	FSMC_WR_REG(GMBCTR2_BASE | 0x0033U);    FSMC_WR_DAT(0x007FU);
*/
	//**************************************************************************************************************************//

	// Select Page 0
	FSMC_WR_REG(MAUCCTR_0);			FSMC_WR_DAT(0x0055U);
 800110e:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8001112:	f7ff fd03 	bl	8000b1c <FSMC_WR_REG>
 8001116:	2055      	movs	r0, #85	; 0x55
 8001118:	f7ff fd12 	bl	8000b40 <FSMC_WR_DAT>
	FSMC_WR_REG(MAUCCTR_1);			FSMC_WR_DAT(0x00AAU);
 800111c:	f24f 0001 	movw	r0, #61441	; 0xf001
 8001120:	f7ff fcfc 	bl	8000b1c <FSMC_WR_REG>
 8001124:	20aa      	movs	r0, #170	; 0xaa
 8001126:	f7ff fd0b 	bl	8000b40 <FSMC_WR_DAT>
	FSMC_WR_REG(MAUCCTR_2);			FSMC_WR_DAT(0x0052U);
 800112a:	f24f 0002 	movw	r0, #61442	; 0xf002
 800112e:	f7ff fcf5 	bl	8000b1c <FSMC_WR_REG>
 8001132:	2052      	movs	r0, #82	; 0x52
 8001134:	f7ff fd04 	bl	8000b40 <FSMC_WR_DAT>
	FSMC_WR_REG(MAUCCTR_3);			FSMC_WR_DAT(0x0008U);		// Enable Manufacture Command Set
 8001138:	f24f 0003 	movw	r0, #61443	; 0xf003
 800113c:	f7ff fcee 	bl	8000b1c <FSMC_WR_REG>
 8001140:	2008      	movs	r0, #8
 8001142:	f7ff fcfd 	bl	8000b40 <FSMC_WR_DAT>
	FSMC_WR_REG(MAUCCTR_4);			FSMC_WR_DAT(0x0000U);		// Select page 0
 8001146:	f24f 0004 	movw	r0, #61444	; 0xf004
 800114a:	f7ff fce7 	bl	8000b1c <FSMC_WR_REG>
 800114e:	2000      	movs	r0, #0
 8001150:	f7ff fcf6 	bl	8000b40 <FSMC_WR_DAT>

	// DISPLAY CONTROL
	FSMC_WR_REG(DOPCTR_0);			FSMC_WR_DAT(0x00CCU);
 8001154:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 8001158:	f7ff fce0 	bl	8000b1c <FSMC_WR_REG>
 800115c:	20cc      	movs	r0, #204	; 0xcc
 800115e:	f7ff fcef 	bl	8000b40 <FSMC_WR_DAT>
	FSMC_WR_REG(DOPCTR_1);			FSMC_WR_DAT(0x0000U);
 8001162:	f24b 1001 	movw	r0, #45313	; 0xb101
 8001166:	f7ff fcd9 	bl	8000b1c <FSMC_WR_REG>
 800116a:	2000      	movs	r0, #0
 800116c:	f7ff fce8 	bl	8000b40 <FSMC_WR_DAT>

	FSMC_WR_REG(DPRSLCTR);			FSMC_WR_DAT(0x0050U);			// Display Resolution 480RGB x 800
 8001170:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 8001174:	f7ff fcd2 	bl	8000b1c <FSMC_WR_REG>
 8001178:	2050      	movs	r0, #80	; 0x50
 800117a:	f7ff fce1 	bl	8000b40 <FSMC_WR_DAT>

	// SOURCE HOLD TIME
	FSMC_WR_REG(SDHDTCTR);			FSMC_WR_DAT(0x0005U);
 800117e:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 8001182:	f7ff fccb 	bl	8000b1c <FSMC_WR_REG>
 8001186:	2005      	movs	r0, #5
 8001188:	f7ff fcda 	bl	8000b40 <FSMC_WR_DAT>

	// Set Gate EQ
	FSMC_WR_REG(GSEQCTR_ST);		FSMC_WR_DAT(0x0070U);
 800118c:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8001190:	f7ff fcc4 	bl	8000b1c <FSMC_WR_REG>
 8001194:	2070      	movs	r0, #112	; 0x70
 8001196:	f7ff fcd3 	bl	8000b40 <FSMC_WR_DAT>
	FSMC_WR_REG(GSEQCTR_CK);		FSMC_WR_DAT(0x0070U);
 800119a:	f24b 7001 	movw	r0, #46849	; 0xb701
 800119e:	f7ff fcbd 	bl	8000b1c <FSMC_WR_REG>
 80011a2:	2070      	movs	r0, #112	; 0x70
 80011a4:	f7ff fccc 	bl	8000b40 <FSMC_WR_DAT>

	// Source EQ control (Mode 2)
	FSMC_WR_REG(SDEQCTR_MOD );	FSMC_WR_DAT(0x0001U);
 80011a8:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 80011ac:	f7ff fcb6 	bl	8000b1c <FSMC_WR_REG>
 80011b0:	2001      	movs	r0, #1
 80011b2:	f7ff fcc5 	bl	8000b40 <FSMC_WR_DAT>
	FSMC_WR_REG(SDEQCTR_EQS1);	FSMC_WR_DAT(0x0003U);
 80011b6:	f64b 0001 	movw	r0, #47105	; 0xb801
 80011ba:	f7ff fcaf 	bl	8000b1c <FSMC_WR_REG>
 80011be:	2003      	movs	r0, #3
 80011c0:	f7ff fcbe 	bl	8000b40 <FSMC_WR_DAT>
	FSMC_WR_REG(SDEQCTR_EQS2);	FSMC_WR_DAT(0x0003U);
 80011c4:	f64b 0002 	movw	r0, #47106	; 0xb802
 80011c8:	f7ff fca8 	bl	8000b1c <FSMC_WR_REG>
 80011cc:	2003      	movs	r0, #3
 80011ce:	f7ff fcb7 	bl	8000b40 <FSMC_WR_DAT>
	FSMC_WR_REG(SDEQCTR_EQS3);	FSMC_WR_DAT(0x0003U);
 80011d2:	f64b 0003 	movw	r0, #47107	; 0xb803
 80011d6:	f7ff fca1 	bl	8000b1c <FSMC_WR_REG>
 80011da:	2003      	movs	r0, #3
 80011dc:	f7ff fcb0 	bl	8000b40 <FSMC_WR_DAT>

	// INVERSION MODE
	FSMC_WR_REG(INVCTR_NORM);		FSMC_WR_DAT(0x0002U);
 80011e0:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 80011e4:	f7ff fc9a 	bl	8000b1c <FSMC_WR_REG>
 80011e8:	2002      	movs	r0, #2
 80011ea:	f7ff fca9 	bl	8000b40 <FSMC_WR_DAT>
	FSMC_WR_REG(INVCTR_IDLE);		FSMC_WR_DAT(0x0000U);
 80011ee:	f64b 4001 	movw	r0, #48129	; 0xbc01
 80011f2:	f7ff fc93 	bl	8000b1c <FSMC_WR_REG>
 80011f6:	2000      	movs	r0, #0
 80011f8:	f7ff fca2 	bl	8000b40 <FSMC_WR_DAT>
	FSMC_WR_REG(INVCTR_PART);		FSMC_WR_DAT(0x0000U);
 80011fc:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8001200:	f7ff fc8c 	bl	8000b1c <FSMC_WR_REG>
 8001204:	2000      	movs	r0, #0
 8001206:	f7ff fc9b 	bl	8000b40 <FSMC_WR_DAT>

	// Timing control
	FSMC_WR_REG(0xC900);				FSMC_WR_DAT(0x00D0U);
 800120a:	f44f 4049 	mov.w	r0, #51456	; 0xc900
 800120e:	f7ff fc85 	bl	8000b1c <FSMC_WR_REG>
 8001212:	20d0      	movs	r0, #208	; 0xd0
 8001214:	f7ff fc94 	bl	8000b40 <FSMC_WR_DAT>
	FSMC_WR_REG(0xC901);				FSMC_WR_DAT(0x0002U);
 8001218:	f64c 1001 	movw	r0, #51457	; 0xc901
 800121c:	f7ff fc7e 	bl	8000b1c <FSMC_WR_REG>
 8001220:	2002      	movs	r0, #2
 8001222:	f7ff fc8d 	bl	8000b40 <FSMC_WR_DAT>
	FSMC_WR_REG(0xC902);				FSMC_WR_DAT(0x0050U);
 8001226:	f64c 1002 	movw	r0, #51458	; 0xc902
 800122a:	f7ff fc77 	bl	8000b1c <FSMC_WR_REG>
 800122e:	2050      	movs	r0, #80	; 0x50
 8001230:	f7ff fc86 	bl	8000b40 <FSMC_WR_DAT>
	FSMC_WR_REG(0xC903);				FSMC_WR_DAT(0x0050U);
 8001234:	f64c 1003 	movw	r0, #51459	; 0xc903
 8001238:	f7ff fc70 	bl	8000b1c <FSMC_WR_REG>
 800123c:	2050      	movs	r0, #80	; 0x50
 800123e:	f7ff fc7f 	bl	8000b40 <FSMC_WR_DAT>
	FSMC_WR_REG(0xC904);				FSMC_WR_DAT(0x0050U);
 8001242:	f64c 1004 	movw	r0, #51460	; 0xc904
 8001246:	f7ff fc69 	bl	8000b1c <FSMC_WR_REG>
 800124a:	2050      	movs	r0, #80	; 0x50
 800124c:	f7ff fc78 	bl	8000b40 <FSMC_WR_DAT>

	//**************************************************************************************************************************//
	// User Command Set
	FSMC_WR_REG(TEON);   				FSMC_WR_DAT(0x0000U);			// V-Blanking information only
 8001250:	f44f 5054 	mov.w	r0, #13568	; 0x3500
 8001254:	f7ff fc62 	bl	8000b1c <FSMC_WR_REG>
 8001258:	2000      	movs	r0, #0
 800125a:	f7ff fc71 	bl	8000b40 <FSMC_WR_DAT>


	FSMC_WR_REG(COLMOD);   			FSMC_WR_DAT(0x0055U);		// RGB and MCU Interface Data format 16-Bits
 800125e:	f44f 5068 	mov.w	r0, #14848	; 0x3a00
 8001262:	f7ff fc5b 	bl	8000b1c <FSMC_WR_REG>
 8001266:	2055      	movs	r0, #85	; 0x55
 8001268:	f7ff fc6a 	bl	8000b40 <FSMC_WR_DAT>
 800126c:	e002      	b.n	8001274 <NT35510_Init+0x404>
 800126e:	bf00      	nop
 8001270:	40020800 	.word	0x40020800
	FSMC_WR_REG(MADCTL);   			FSMC_WR_DAT(0x0000U);		// MADCTL: MY MX MV RGB MH RSMX RSMY
 8001274:	f44f 5058 	mov.w	r0, #13824	; 0x3600
 8001278:	f7ff fc50 	bl	8000b1c <FSMC_WR_REG>
 800127c:	2000      	movs	r0, #0
 800127e:	f7ff fc5f 	bl	8000b40 <FSMC_WR_DAT>


	FSMC_WR_REG(SLPOUT);   						// Sleep Out
 8001282:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 8001286:	f7ff fc49 	bl	8000b1c <FSMC_WR_REG>

	HAL_Delay(120);
 800128a:	2078      	movs	r0, #120	; 0x78
 800128c:	f001 fd5a 	bl	8002d44 <HAL_Delay>

	FSMC_WR_REG(DISPON);   						// Display On
 8001290:	f44f 5024 	mov.w	r0, #10496	; 0x2900
 8001294:	f7ff fc42 	bl	8000b1c <FSMC_WR_REG>

	HAL_Delay(200);
 8001298:	20c8      	movs	r0, #200	; 0xc8
 800129a:	f001 fd53 	bl	8002d44 <HAL_Delay>

	LCD_SetDirection(VERTICAL_UP);		// Vertical-up display orientation as default
 800129e:	2000      	movs	r0, #0
 80012a0:	f7ff fcc8 	bl	8000c34 <LCD_SetDirection>
}
 80012a4:	bf00      	nop
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <MX_GPIO_Init>:

/** Configure pins
     PC9   ------> RCC_MCO_2
*/
void MX_GPIO_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08c      	sub	sp, #48	; 0x30
 80012ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ae:	f107 031c 	add.w	r3, r7, #28
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	605a      	str	r2, [r3, #4]
 80012b8:	609a      	str	r2, [r3, #8]
 80012ba:	60da      	str	r2, [r3, #12]
 80012bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	61bb      	str	r3, [r7, #24]
 80012c2:	4b79      	ldr	r3, [pc, #484]	; (80014a8 <MX_GPIO_Init+0x200>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	4a78      	ldr	r2, [pc, #480]	; (80014a8 <MX_GPIO_Init+0x200>)
 80012c8:	f043 0320 	orr.w	r3, r3, #32
 80012cc:	6313      	str	r3, [r2, #48]	; 0x30
 80012ce:	4b76      	ldr	r3, [pc, #472]	; (80014a8 <MX_GPIO_Init+0x200>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	f003 0320 	and.w	r3, r3, #32
 80012d6:	61bb      	str	r3, [r7, #24]
 80012d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	617b      	str	r3, [r7, #20]
 80012de:	4b72      	ldr	r3, [pc, #456]	; (80014a8 <MX_GPIO_Init+0x200>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	4a71      	ldr	r2, [pc, #452]	; (80014a8 <MX_GPIO_Init+0x200>)
 80012e4:	f043 0301 	orr.w	r3, r3, #1
 80012e8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ea:	4b6f      	ldr	r3, [pc, #444]	; (80014a8 <MX_GPIO_Init+0x200>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	617b      	str	r3, [r7, #20]
 80012f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	613b      	str	r3, [r7, #16]
 80012fa:	4b6b      	ldr	r3, [pc, #428]	; (80014a8 <MX_GPIO_Init+0x200>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	4a6a      	ldr	r2, [pc, #424]	; (80014a8 <MX_GPIO_Init+0x200>)
 8001300:	f043 0302 	orr.w	r3, r3, #2
 8001304:	6313      	str	r3, [r2, #48]	; 0x30
 8001306:	4b68      	ldr	r3, [pc, #416]	; (80014a8 <MX_GPIO_Init+0x200>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	f003 0302 	and.w	r3, r3, #2
 800130e:	613b      	str	r3, [r7, #16]
 8001310:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	60fb      	str	r3, [r7, #12]
 8001316:	4b64      	ldr	r3, [pc, #400]	; (80014a8 <MX_GPIO_Init+0x200>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	4a63      	ldr	r2, [pc, #396]	; (80014a8 <MX_GPIO_Init+0x200>)
 800131c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001320:	6313      	str	r3, [r2, #48]	; 0x30
 8001322:	4b61      	ldr	r3, [pc, #388]	; (80014a8 <MX_GPIO_Init+0x200>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	60bb      	str	r3, [r7, #8]
 8001332:	4b5d      	ldr	r3, [pc, #372]	; (80014a8 <MX_GPIO_Init+0x200>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	4a5c      	ldr	r2, [pc, #368]	; (80014a8 <MX_GPIO_Init+0x200>)
 8001338:	f043 0310 	orr.w	r3, r3, #16
 800133c:	6313      	str	r3, [r2, #48]	; 0x30
 800133e:	4b5a      	ldr	r3, [pc, #360]	; (80014a8 <MX_GPIO_Init+0x200>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	f003 0310 	and.w	r3, r3, #16
 8001346:	60bb      	str	r3, [r7, #8]
 8001348:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	607b      	str	r3, [r7, #4]
 800134e:	4b56      	ldr	r3, [pc, #344]	; (80014a8 <MX_GPIO_Init+0x200>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	4a55      	ldr	r2, [pc, #340]	; (80014a8 <MX_GPIO_Init+0x200>)
 8001354:	f043 0308 	orr.w	r3, r3, #8
 8001358:	6313      	str	r3, [r2, #48]	; 0x30
 800135a:	4b53      	ldr	r3, [pc, #332]	; (80014a8 <MX_GPIO_Init+0x200>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	f003 0308 	and.w	r3, r3, #8
 8001362:	607b      	str	r3, [r7, #4]
 8001364:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	603b      	str	r3, [r7, #0]
 800136a:	4b4f      	ldr	r3, [pc, #316]	; (80014a8 <MX_GPIO_Init+0x200>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	4a4e      	ldr	r2, [pc, #312]	; (80014a8 <MX_GPIO_Init+0x200>)
 8001370:	f043 0304 	orr.w	r3, r3, #4
 8001374:	6313      	str	r3, [r2, #48]	; 0x30
 8001376:	4b4c      	ldr	r3, [pc, #304]	; (80014a8 <MX_GPIO_Init+0x200>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	f003 0304 	and.w	r3, r3, #4
 800137e:	603b      	str	r3, [r7, #0]
 8001380:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OV7670_RST_GPIO_Port, OV7670_RST_Pin, GPIO_PIN_RESET);
 8001382:	2200      	movs	r2, #0
 8001384:	2104      	movs	r1, #4
 8001386:	4849      	ldr	r0, [pc, #292]	; (80014ac <MX_GPIO_Init+0x204>)
 8001388:	f002 fe00 	bl	8003f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TOUCH_XL_Pin|TOUCH_YD_Pin, GPIO_PIN_RESET);
 800138c:	2200      	movs	r2, #0
 800138e:	2130      	movs	r1, #48	; 0x30
 8001390:	4847      	ldr	r0, [pc, #284]	; (80014b0 <MX_GPIO_Init+0x208>)
 8001392:	f002 fdfb 	bl	8003f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8001396:	2200      	movs	r2, #0
 8001398:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800139c:	4845      	ldr	r0, [pc, #276]	; (80014b4 <MX_GPIO_Init+0x20c>)
 800139e:	f002 fdf5 	bl	8003f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RST_GPIO_Port, FSMC_RST_Pin, GPIO_PIN_RESET);
 80013a2:	2200      	movs	r2, #0
 80013a4:	2140      	movs	r1, #64	; 0x40
 80013a6:	4844      	ldr	r0, [pc, #272]	; (80014b8 <MX_GPIO_Init+0x210>)
 80013a8:	f002 fdf0 	bl	8003f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OV7670_RST_Pin;
 80013ac:	2304      	movs	r3, #4
 80013ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b0:	2301      	movs	r3, #1
 80013b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b4:	2300      	movs	r3, #0
 80013b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b8:	2300      	movs	r3, #0
 80013ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OV7670_RST_GPIO_Port, &GPIO_InitStruct);
 80013bc:	f107 031c 	add.w	r3, r7, #28
 80013c0:	4619      	mov	r1, r3
 80013c2:	483a      	ldr	r0, [pc, #232]	; (80014ac <MX_GPIO_Init+0x204>)
 80013c4:	f002 fc4e 	bl	8003c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80013c8:	2308      	movs	r3, #8
 80013ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013cc:	4b3b      	ldr	r3, [pc, #236]	; (80014bc <MX_GPIO_Init+0x214>)
 80013ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013d0:	2301      	movs	r3, #1
 80013d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d4:	f107 031c 	add.w	r3, r7, #28
 80013d8:	4619      	mov	r1, r3
 80013da:	4835      	ldr	r0, [pc, #212]	; (80014b0 <MX_GPIO_Init+0x208>)
 80013dc:	f002 fc42 	bl	8003c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = TOUCH_XL_Pin|TOUCH_YD_Pin;
 80013e0:	2330      	movs	r3, #48	; 0x30
 80013e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e4:	2301      	movs	r3, #1
 80013e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ec:	2300      	movs	r3, #0
 80013ee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f0:	f107 031c 	add.w	r3, r7, #28
 80013f4:	4619      	mov	r1, r3
 80013f6:	482e      	ldr	r0, [pc, #184]	; (80014b0 <MX_GPIO_Init+0x208>)
 80013f8:	f002 fc34 	bl	8003c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = OV7670_D0_Pin|OV7670_D1_Pin|OV7670_D2_Pin|OV7670_D3_Pin
 80013fc:	23ff      	movs	r3, #255	; 0xff
 80013fe:	61fb      	str	r3, [r7, #28]
                          |OV7670_D4_Pin|OV7670_D5_Pin|OV7670_D6_Pin|OV7670_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001400:	2300      	movs	r3, #0
 8001402:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001404:	2300      	movs	r3, #0
 8001406:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001408:	f107 031c 	add.w	r3, r7, #28
 800140c:	4619      	mov	r1, r3
 800140e:	4829      	ldr	r0, [pc, #164]	; (80014b4 <MX_GPIO_Init+0x20c>)
 8001410:	f002 fc28 	bl	8003c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OV7670_HREF_Pin;
 8001414:	2301      	movs	r3, #1
 8001416:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001418:	4b28      	ldr	r3, [pc, #160]	; (80014bc <MX_GPIO_Init+0x214>)
 800141a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141c:	2300      	movs	r3, #0
 800141e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OV7670_HREF_GPIO_Port, &GPIO_InitStruct);
 8001420:	f107 031c 	add.w	r3, r7, #28
 8001424:	4619      	mov	r1, r3
 8001426:	4826      	ldr	r0, [pc, #152]	; (80014c0 <MX_GPIO_Init+0x218>)
 8001428:	f002 fc1c 	bl	8003c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OV7670_VSYNC_Pin;
 800142c:	2302      	movs	r3, #2
 800142e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001430:	4b24      	ldr	r3, [pc, #144]	; (80014c4 <MX_GPIO_Init+0x21c>)
 8001432:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001434:	2300      	movs	r3, #0
 8001436:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OV7670_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001438:	f107 031c 	add.w	r3, r7, #28
 800143c:	4619      	mov	r1, r3
 800143e:	4820      	ldr	r0, [pc, #128]	; (80014c0 <MX_GPIO_Init+0x218>)
 8001440:	f002 fc10 	bl	8003c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001444:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001448:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800144a:	2301      	movs	r3, #1
 800144c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144e:	2300      	movs	r3, #0
 8001450:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001452:	2303      	movs	r3, #3
 8001454:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001456:	f107 031c 	add.w	r3, r7, #28
 800145a:	4619      	mov	r1, r3
 800145c:	4815      	ldr	r0, [pc, #84]	; (80014b4 <MX_GPIO_Init+0x20c>)
 800145e:	f002 fc01 	bl	8003c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RST_Pin;
 8001462:	2340      	movs	r3, #64	; 0x40
 8001464:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001466:	2301      	movs	r3, #1
 8001468:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146a:	2300      	movs	r3, #0
 800146c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146e:	2300      	movs	r3, #0
 8001470:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_RST_GPIO_Port, &GPIO_InitStruct);
 8001472:	f107 031c 	add.w	r3, r7, #28
 8001476:	4619      	mov	r1, r3
 8001478:	480f      	ldr	r0, [pc, #60]	; (80014b8 <MX_GPIO_Init+0x210>)
 800147a:	f002 fbf3 	bl	8003c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800147e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001482:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001484:	2302      	movs	r3, #2
 8001486:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001488:	2300      	movs	r3, #0
 800148a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800148c:	2303      	movs	r3, #3
 800148e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001490:	2300      	movs	r3, #0
 8001492:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001494:	f107 031c 	add.w	r3, r7, #28
 8001498:	4619      	mov	r1, r3
 800149a:	4807      	ldr	r0, [pc, #28]	; (80014b8 <MX_GPIO_Init+0x210>)
 800149c:	f002 fbe2 	bl	8003c64 <HAL_GPIO_Init>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);*/

}
 80014a0:	bf00      	nop
 80014a2:	3730      	adds	r7, #48	; 0x30
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	40023800 	.word	0x40023800
 80014ac:	40021400 	.word	0x40021400
 80014b0:	40020000 	.word	0x40020000
 80014b4:	40020400 	.word	0x40020400
 80014b8:	40020800 	.word	0x40020800
 80014bc:	10210000 	.word	0x10210000
 80014c0:	40021800 	.word	0x40021800
 80014c4:	10310000 	.word	0x10310000

080014c8 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80014cc:	4b12      	ldr	r3, [pc, #72]	; (8001518 <MX_I2C2_Init+0x50>)
 80014ce:	4a13      	ldr	r2, [pc, #76]	; (800151c <MX_I2C2_Init+0x54>)
 80014d0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80014d2:	4b11      	ldr	r3, [pc, #68]	; (8001518 <MX_I2C2_Init+0x50>)
 80014d4:	4a12      	ldr	r2, [pc, #72]	; (8001520 <MX_I2C2_Init+0x58>)
 80014d6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014d8:	4b0f      	ldr	r3, [pc, #60]	; (8001518 <MX_I2C2_Init+0x50>)
 80014da:	2200      	movs	r2, #0
 80014dc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 66;
 80014de:	4b0e      	ldr	r3, [pc, #56]	; (8001518 <MX_I2C2_Init+0x50>)
 80014e0:	2242      	movs	r2, #66	; 0x42
 80014e2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014e4:	4b0c      	ldr	r3, [pc, #48]	; (8001518 <MX_I2C2_Init+0x50>)
 80014e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014ea:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014ec:	4b0a      	ldr	r3, [pc, #40]	; (8001518 <MX_I2C2_Init+0x50>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80014f2:	4b09      	ldr	r3, [pc, #36]	; (8001518 <MX_I2C2_Init+0x50>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014f8:	4b07      	ldr	r3, [pc, #28]	; (8001518 <MX_I2C2_Init+0x50>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 80014fe:	4b06      	ldr	r3, [pc, #24]	; (8001518 <MX_I2C2_Init+0x50>)
 8001500:	2280      	movs	r2, #128	; 0x80
 8001502:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001504:	4804      	ldr	r0, [pc, #16]	; (8001518 <MX_I2C2_Init+0x50>)
 8001506:	f002 fd73 	bl	8003ff0 <HAL_I2C_Init>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001510:	f000 f95c 	bl	80017cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001514:	bf00      	nop
 8001516:	bd80      	pop	{r7, pc}
 8001518:	20025ce4 	.word	0x20025ce4
 800151c:	40005800 	.word	0x40005800
 8001520:	00061a80 	.word	0x00061a80

08001524 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b08a      	sub	sp, #40	; 0x28
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800152c:	f107 0314 	add.w	r3, r7, #20
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	605a      	str	r2, [r3, #4]
 8001536:	609a      	str	r2, [r3, #8]
 8001538:	60da      	str	r2, [r3, #12]
 800153a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a1d      	ldr	r2, [pc, #116]	; (80015b8 <HAL_I2C_MspInit+0x94>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d133      	bne.n	80015ae <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	613b      	str	r3, [r7, #16]
 800154a:	4b1c      	ldr	r3, [pc, #112]	; (80015bc <HAL_I2C_MspInit+0x98>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	4a1b      	ldr	r2, [pc, #108]	; (80015bc <HAL_I2C_MspInit+0x98>)
 8001550:	f043 0320 	orr.w	r3, r3, #32
 8001554:	6313      	str	r3, [r2, #48]	; 0x30
 8001556:	4b19      	ldr	r3, [pc, #100]	; (80015bc <HAL_I2C_MspInit+0x98>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	f003 0320 	and.w	r3, r3, #32
 800155e:	613b      	str	r3, [r7, #16]
 8001560:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001562:	2303      	movs	r3, #3
 8001564:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001566:	2312      	movs	r3, #18
 8001568:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800156a:	2301      	movs	r3, #1
 800156c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800156e:	2303      	movs	r3, #3
 8001570:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001572:	2304      	movs	r3, #4
 8001574:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001576:	f107 0314 	add.w	r3, r7, #20
 800157a:	4619      	mov	r1, r3
 800157c:	4810      	ldr	r0, [pc, #64]	; (80015c0 <HAL_I2C_MspInit+0x9c>)
 800157e:	f002 fb71 	bl	8003c64 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001582:	2300      	movs	r3, #0
 8001584:	60fb      	str	r3, [r7, #12]
 8001586:	4b0d      	ldr	r3, [pc, #52]	; (80015bc <HAL_I2C_MspInit+0x98>)
 8001588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158a:	4a0c      	ldr	r2, [pc, #48]	; (80015bc <HAL_I2C_MspInit+0x98>)
 800158c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001590:	6413      	str	r3, [r2, #64]	; 0x40
 8001592:	4b0a      	ldr	r3, [pc, #40]	; (80015bc <HAL_I2C_MspInit+0x98>)
 8001594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001596:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800159a:	60fb      	str	r3, [r7, #12]
 800159c:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 800159e:	2200      	movs	r2, #0
 80015a0:	2100      	movs	r1, #0
 80015a2:	2021      	movs	r0, #33	; 0x21
 80015a4:	f002 f8af 	bl	8003706 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80015a8:	2021      	movs	r0, #33	; 0x21
 80015aa:	f002 f8c8 	bl	800373e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80015ae:	bf00      	nop
 80015b0:	3728      	adds	r7, #40	; 0x28
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	40005800 	.word	0x40005800
 80015bc:	40023800 	.word	0x40023800
 80015c0:	40021400 	.word	0x40021400

080015c4 <i2c_read_reg>:
extern I2C_HandleTypeDef hi2c2;


//=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~
uint8_t i2c_read_reg(uint8_t address, uint8_t reg)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af02      	add	r7, sp, #8
 80015ca:	4603      	mov	r3, r0
 80015cc:	460a      	mov	r2, r1
 80015ce:	71fb      	strb	r3, [r7, #7]
 80015d0:	4613      	mov	r3, r2
 80015d2:	71bb      	strb	r3, [r7, #6]
	tx_data[0] = reg;
 80015d4:	4a0d      	ldr	r2, [pc, #52]	; (800160c <i2c_read_reg+0x48>)
 80015d6:	79bb      	ldrb	r3, [r7, #6]
 80015d8:	7013      	strb	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&hi2c2, 0x42U, tx_data, 1, 10);
 80015da:	230a      	movs	r3, #10
 80015dc:	9300      	str	r3, [sp, #0]
 80015de:	2301      	movs	r3, #1
 80015e0:	4a0a      	ldr	r2, [pc, #40]	; (800160c <i2c_read_reg+0x48>)
 80015e2:	2142      	movs	r1, #66	; 0x42
 80015e4:	480a      	ldr	r0, [pc, #40]	; (8001610 <i2c_read_reg+0x4c>)
 80015e6:	f002 fe47 	bl	8004278 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, 0x42U, rx_data, 1, 10);
 80015ea:	230a      	movs	r3, #10
 80015ec:	9300      	str	r3, [sp, #0]
 80015ee:	2301      	movs	r3, #1
 80015f0:	4a08      	ldr	r2, [pc, #32]	; (8001614 <i2c_read_reg+0x50>)
 80015f2:	2142      	movs	r1, #66	; 0x42
 80015f4:	4806      	ldr	r0, [pc, #24]	; (8001610 <i2c_read_reg+0x4c>)
 80015f6:	f002 ff3d 	bl	8004474 <HAL_I2C_Master_Receive>
	HAL_Delay(1);
 80015fa:	2001      	movs	r0, #1
 80015fc:	f001 fba2 	bl	8002d44 <HAL_Delay>
	return rx_data[0];
 8001600:	4b04      	ldr	r3, [pc, #16]	; (8001614 <i2c_read_reg+0x50>)
 8001602:	781b      	ldrb	r3, [r3, #0]
}
 8001604:	4618      	mov	r0, r3
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	20000094 	.word	0x20000094
 8001610:	20025ce4 	.word	0x20025ce4
 8001614:	2000009c 	.word	0x2000009c

08001618 <i2c_write_reg>:



//=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~
void i2c_write_reg(uint8_t address, uint8_t reg, uint8_t data)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af02      	add	r7, sp, #8
 800161e:	4603      	mov	r3, r0
 8001620:	71fb      	strb	r3, [r7, #7]
 8001622:	460b      	mov	r3, r1
 8001624:	71bb      	strb	r3, [r7, #6]
 8001626:	4613      	mov	r3, r2
 8001628:	717b      	strb	r3, [r7, #5]
	tx_data[0] = reg;
 800162a:	4a0a      	ldr	r2, [pc, #40]	; (8001654 <i2c_write_reg+0x3c>)
 800162c:	79bb      	ldrb	r3, [r7, #6]
 800162e:	7013      	strb	r3, [r2, #0]
	tx_data[1] = data;
 8001630:	4a08      	ldr	r2, [pc, #32]	; (8001654 <i2c_write_reg+0x3c>)
 8001632:	797b      	ldrb	r3, [r7, #5]
 8001634:	7053      	strb	r3, [r2, #1]
	HAL_I2C_Master_Transmit(&hi2c2, 0x42U, tx_data, 2, 10);
 8001636:	230a      	movs	r3, #10
 8001638:	9300      	str	r3, [sp, #0]
 800163a:	2302      	movs	r3, #2
 800163c:	4a05      	ldr	r2, [pc, #20]	; (8001654 <i2c_write_reg+0x3c>)
 800163e:	2142      	movs	r1, #66	; 0x42
 8001640:	4805      	ldr	r0, [pc, #20]	; (8001658 <i2c_write_reg+0x40>)
 8001642:	f002 fe19 	bl	8004278 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8001646:	2001      	movs	r0, #1
 8001648:	f001 fb7c 	bl	8002d44 <HAL_Delay>
}
 800164c:	bf00      	nop
 800164e:	3708      	adds	r7, #8
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	20000094 	.word	0x20000094
 8001658:	20025ce4 	.word	0x20025ce4

0800165c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001660:	f001 fafe 	bl	8002c60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001664:	f000 f814 	bl	8001690 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001668:	f7ff fe1e 	bl	80012a8 <MX_GPIO_Init>
  MX_DMA_Init();
 800166c:	f7ff f946 	bl	80008fc <MX_DMA_Init>
  MX_TIM1_Init();
 8001670:	f000 fc52 	bl	8001f18 <MX_TIM1_Init>
  MX_FSMC_Init();
 8001674:	f7ff f95c 	bl	8000930 <MX_FSMC_Init>
  MX_I2C2_Init();
 8001678:	f7ff ff26 	bl	80014c8 <MX_I2C2_Init>
  MX_USART6_UART_Init();
 800167c:	f001 fa4a 	bl	8002b14 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8001680:	f7fe ffa2 	bl	80005c8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  app_main_init();
 8001684:	f7ff f842 	bl	800070c <app_main_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  app_main_loop();
 8001688:	f7ff f8a6 	bl	80007d8 <app_main_loop>
 800168c:	e7fc      	b.n	8001688 <main+0x2c>
	...

08001690 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b0aa      	sub	sp, #168	; 0xa8
 8001694:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001696:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800169a:	2234      	movs	r2, #52	; 0x34
 800169c:	2100      	movs	r1, #0
 800169e:	4618      	mov	r0, r3
 80016a0:	f007 f994 	bl	80089cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016a4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	605a      	str	r2, [r3, #4]
 80016ae:	609a      	str	r2, [r3, #8]
 80016b0:	60da      	str	r2, [r3, #12]
 80016b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016b4:	f107 0308 	add.w	r3, r7, #8
 80016b8:	2258      	movs	r2, #88	; 0x58
 80016ba:	2100      	movs	r1, #0
 80016bc:	4618      	mov	r0, r3
 80016be:	f007 f985 	bl	80089cc <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	607b      	str	r3, [r7, #4]
 80016c6:	4b3f      	ldr	r3, [pc, #252]	; (80017c4 <_Z18SystemClock_Configv+0x134>)
 80016c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ca:	4a3e      	ldr	r2, [pc, #248]	; (80017c4 <_Z18SystemClock_Configv+0x134>)
 80016cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016d0:	6413      	str	r3, [r2, #64]	; 0x40
 80016d2:	4b3c      	ldr	r3, [pc, #240]	; (80017c4 <_Z18SystemClock_Configv+0x134>)
 80016d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016da:	607b      	str	r3, [r7, #4]
 80016dc:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016de:	2300      	movs	r3, #0
 80016e0:	603b      	str	r3, [r7, #0]
 80016e2:	4b39      	ldr	r3, [pc, #228]	; (80017c8 <_Z18SystemClock_Configv+0x138>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a38      	ldr	r2, [pc, #224]	; (80017c8 <_Z18SystemClock_Configv+0x138>)
 80016e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016ec:	6013      	str	r3, [r2, #0]
 80016ee:	4b36      	ldr	r3, [pc, #216]	; (80017c8 <_Z18SystemClock_Configv+0x138>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80016f6:	603b      	str	r3, [r7, #0]
 80016f8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016fa:	2302      	movs	r3, #2
 80016fc:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016fe:	2301      	movs	r3, #1
 8001700:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001704:	2310      	movs	r3, #16
 8001706:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800170a:	2302      	movs	r3, #2
 800170c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001710:	2300      	movs	r3, #0
 8001712:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001716:	2308      	movs	r3, #8
 8001718:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLN = 100;
 800171c:	2364      	movs	r3, #100	; 0x64
 800171e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001722:	2302      	movs	r3, #2
 8001724:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001728:	2302      	movs	r3, #2
 800172a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLR = 2;
 800172e:	2302      	movs	r3, #2
 8001730:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001734:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001738:	4618      	mov	r0, r3
 800173a:	f005 fc4f 	bl	8006fdc <HAL_RCC_OscConfig>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	bf14      	ite	ne
 8001744:	2301      	movne	r3, #1
 8001746:	2300      	moveq	r3, #0
 8001748:	b2db      	uxtb	r3, r3
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <_Z18SystemClock_Configv+0xc2>
  {
    Error_Handler();
 800174e:	f000 f83d 	bl	80017cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001752:	230f      	movs	r3, #15
 8001754:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001756:	2302      	movs	r3, #2
 8001758:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800175a:	2300      	movs	r3, #0
 800175c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800175e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001762:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001764:	2300      	movs	r3, #0
 8001766:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001768:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800176c:	2103      	movs	r1, #3
 800176e:	4618      	mov	r0, r3
 8001770:	f004 ff70 	bl	8006654 <HAL_RCC_ClockConfig>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	bf14      	ite	ne
 800177a:	2301      	movne	r3, #1
 800177c:	2300      	moveq	r3, #0
 800177e:	b2db      	uxtb	r3, r3
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <_Z18SystemClock_Configv+0xf8>
  {
    Error_Handler();
 8001784:	f000 f822 	bl	80017cc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_TIM;
 8001788:	2304      	movs	r3, #4
 800178a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 800178c:	2301      	movs	r3, #1
 800178e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001792:	f107 0308 	add.w	r3, r7, #8
 8001796:	4618      	mov	r0, r3
 8001798:	f005 f994 	bl	8006ac4 <HAL_RCCEx_PeriphCLKConfig>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	bf14      	ite	ne
 80017a2:	2301      	movne	r3, #1
 80017a4:	2300      	moveq	r3, #0
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <_Z18SystemClock_Configv+0x120>
  {
    Error_Handler();
 80017ac:	f000 f80e 	bl	80017cc <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_SYSCLK, RCC_MCODIV_5);
 80017b0:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 80017b4:	2100      	movs	r1, #0
 80017b6:	2001      	movs	r0, #1
 80017b8:	f005 f832 	bl	8006820 <HAL_RCC_MCOConfig>
}
 80017bc:	bf00      	nop
 80017be:	37a8      	adds	r7, #168	; 0xa8
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	40023800 	.word	0x40023800
 80017c8:	40007000 	.word	0x40007000

080017cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017d0:	b672      	cpsid	i
}
 80017d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017d4:	e7fe      	b.n	80017d4 <Error_Handler+0x8>

080017d6 <comp>:

/****************************************************************
 * Compare function used for qsort()
 ****************************************************************/
int comp (const void * elem1, const void * elem2)
{
 80017d6:	b480      	push	{r7}
 80017d8:	b085      	sub	sp, #20
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
 80017de:	6039      	str	r1, [r7, #0]
    int f = *((int*)elem1);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	60fb      	str	r3, [r7, #12]
    int s = *((int*)elem2);
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	60bb      	str	r3, [r7, #8]
    if (f > s) return  1;
 80017ec:	68fa      	ldr	r2, [r7, #12]
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	dd01      	ble.n	80017f8 <comp+0x22>
 80017f4:	2301      	movs	r3, #1
 80017f6:	e007      	b.n	8001808 <comp+0x32>
    if (f < s) return -1;
 80017f8:	68fa      	ldr	r2, [r7, #12]
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	da02      	bge.n	8001806 <comp+0x30>
 8001800:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001804:	e000      	b.n	8001808 <comp+0x32>
    return 0;
 8001806:	2300      	movs	r3, #0
}
 8001808:	4618      	mov	r0, r3
 800180a:	3714      	adds	r7, #20
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <ov7670_saturation>:



//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void ov7670_saturation(int8_t s)  //-2 to 2
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	4603      	mov	r3, r0
 800181c:	71fb      	strb	r3, [r7, #7]
	ov7670_write_register(OV7670_MTX1,	0x80 + 0x20 * s);
 800181e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001822:	3304      	adds	r3, #4
 8001824:	b2db      	uxtb	r3, r3
 8001826:	015b      	lsls	r3, r3, #5
 8001828:	b2db      	uxtb	r3, r3
 800182a:	4619      	mov	r1, r3
 800182c:	204f      	movs	r0, #79	; 0x4f
 800182e:	f000 f8ad 	bl	800198c <ov7670_write_register>
	ov7670_write_register(OV7670_MTX2, 	0x80 + 0x20 * s);
 8001832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001836:	3304      	adds	r3, #4
 8001838:	b2db      	uxtb	r3, r3
 800183a:	015b      	lsls	r3, r3, #5
 800183c:	b2db      	uxtb	r3, r3
 800183e:	4619      	mov	r1, r3
 8001840:	2050      	movs	r0, #80	; 0x50
 8001842:	f000 f8a3 	bl	800198c <ov7670_write_register>
	ov7670_write_register(OV7670_MTX3, 	0x00);
 8001846:	2100      	movs	r1, #0
 8001848:	2051      	movs	r0, #81	; 0x51
 800184a:	f000 f89f 	bl	800198c <ov7670_write_register>
	ov7670_write_register(OV7670_MTX4, 	0x22 + (0x11 * s) / 2);
 800184e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8001852:	4613      	mov	r3, r2
 8001854:	011b      	lsls	r3, r3, #4
 8001856:	4413      	add	r3, r2
 8001858:	0fda      	lsrs	r2, r3, #31
 800185a:	4413      	add	r3, r2
 800185c:	105b      	asrs	r3, r3, #1
 800185e:	b2db      	uxtb	r3, r3
 8001860:	3322      	adds	r3, #34	; 0x22
 8001862:	b2db      	uxtb	r3, r3
 8001864:	4619      	mov	r1, r3
 8001866:	2052      	movs	r0, #82	; 0x52
 8001868:	f000 f890 	bl	800198c <ov7670_write_register>
	ov7670_write_register(OV7670_MTX5, 	0x5e + (0x2f * s) / 2);
 800186c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8001870:	4613      	mov	r3, r2
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	4413      	add	r3, r2
 8001876:	011b      	lsls	r3, r3, #4
 8001878:	1a9b      	subs	r3, r3, r2
 800187a:	0fda      	lsrs	r2, r3, #31
 800187c:	4413      	add	r3, r2
 800187e:	105b      	asrs	r3, r3, #1
 8001880:	b2db      	uxtb	r3, r3
 8001882:	335e      	adds	r3, #94	; 0x5e
 8001884:	b2db      	uxtb	r3, r3
 8001886:	4619      	mov	r1, r3
 8001888:	2053      	movs	r0, #83	; 0x53
 800188a:	f000 f87f 	bl	800198c <ov7670_write_register>
	ov7670_write_register(OV7670_MTX6, 	0x80 + 0x20 * s);
 800188e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001892:	3304      	adds	r3, #4
 8001894:	b2db      	uxtb	r3, r3
 8001896:	015b      	lsls	r3, r3, #5
 8001898:	b2db      	uxtb	r3, r3
 800189a:	4619      	mov	r1, r3
 800189c:	2054      	movs	r0, #84	; 0x54
 800189e:	f000 f875 	bl	800198c <ov7670_write_register>
	ov7670_write_register(OV7670_MTXS, 	0x9e);
 80018a2:	219e      	movs	r1, #158	; 0x9e
 80018a4:	2058      	movs	r0, #88	; 0x58
 80018a6:	f000 f871 	bl	800198c <ov7670_write_register>
}
 80018aa:	bf00      	nop
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
	...

080018b4 <ov7670_frame_control>:



//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void ov7670_frame_control(int16_t hStart,  int16_t vStart) // 154 14
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	460a      	mov	r2, r1
 80018be:	80fb      	strh	r3, [r7, #6]
 80018c0:	4613      	mov	r3, r2
 80018c2:	80bb      	strh	r3, [r7, #4]
	int hStop = (hStart + 640) % 784; // 10
 80018c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018c8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80018cc:	4a18      	ldr	r2, [pc, #96]	; (8001930 <ov7670_frame_control+0x7c>)
 80018ce:	fb82 1203 	smull	r1, r2, r2, r3
 80018d2:	1211      	asrs	r1, r2, #8
 80018d4:	17da      	asrs	r2, r3, #31
 80018d6:	1a8a      	subs	r2, r1, r2
 80018d8:	f44f 7144 	mov.w	r1, #784	; 0x310
 80018dc:	fb01 f202 	mul.w	r2, r1, r2
 80018e0:	1a9b      	subs	r3, r3, r2
 80018e2:	60fb      	str	r3, [r7, #12]
	ov7670_write_register(OV7670_HSTART,	0x15);//hStart >> 3);
 80018e4:	2115      	movs	r1, #21
 80018e6:	2017      	movs	r0, #23
 80018e8:	f000 f850 	bl	800198c <ov7670_write_register>
	ov7670_write_register(OV7670_HSTOP,		0x03);//hStop >> 3);
 80018ec:	2103      	movs	r1, #3
 80018ee:	2018      	movs	r0, #24
 80018f0:	f000 f84c 	bl	800198c <ov7670_write_register>
	ov7670_write_register(OV7670_HREF, 		0x80);//((hStop & 0b111) << 3) | (hStart & 0b111));
 80018f4:	2180      	movs	r1, #128	; 0x80
 80018f6:	2032      	movs	r0, #50	; 0x32
 80018f8:	f000 f848 	bl	800198c <ov7670_write_register>

	int vStop = (vStart + 480); // 494
 80018fc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001900:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8001904:	60bb      	str	r3, [r7, #8]
	ov7670_write_register(OV7670_VSTRT, 	0x03);//vStart >> 2);
 8001906:	2103      	movs	r1, #3
 8001908:	2019      	movs	r0, #25
 800190a:	f000 f83f 	bl	800198c <ov7670_write_register>
	ov7670_write_register(OV7670_VSTOP, 	0x7b);//vStop >> 2);
 800190e:	217b      	movs	r1, #123	; 0x7b
 8001910:	201a      	movs	r0, #26
 8001912:	f000 f83b 	bl	800198c <ov7670_write_register>
	ov7670_write_register(OV7670_VREF, 		0x00);//((vStop & 0b11) << 2) | (vStart & 0b11));
 8001916:	2100      	movs	r1, #0
 8001918:	2003      	movs	r0, #3
 800191a:	f000 f837 	bl	800198c <ov7670_write_register>
	ov7670_write_register(OV7670_COM10, 	0x20U);
 800191e:	2120      	movs	r1, #32
 8001920:	2015      	movs	r0, #21
 8001922:	f000 f833 	bl	800198c <ov7670_write_register>
}
 8001926:	bf00      	nop
 8001928:	3710      	adds	r7, #16
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	5397829d 	.word	0x5397829d

08001934 <ov7670_subsampling_control>:



//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~= 19 11 f1
void ov7670_subsampling_control(int8_t com14, int8_t downSample, int8_t pclk_div)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	4603      	mov	r3, r0
 800193c:	71fb      	strb	r3, [r7, #7]
 800193e:	460b      	mov	r3, r1
 8001940:	71bb      	strb	r3, [r7, #6]
 8001942:	4613      	mov	r3, r2
 8001944:	717b      	strb	r3, [r7, #5]
	ov7670_write_register(OV7670_COM3, 			0x04);		//DCW enable
 8001946:	2104      	movs	r1, #4
 8001948:	200c      	movs	r0, #12
 800194a:	f000 f81f 	bl	800198c <ov7670_write_register>

	ov7670_write_register(OV7670_COM14, 		com14);		//pixel clock divided by 4, manual scaling enable, DCW and PCLK controlled by register
 800194e:	79fb      	ldrb	r3, [r7, #7]
 8001950:	4619      	mov	r1, r3
 8001952:	203e      	movs	r0, #62	; 0x3e
 8001954:	f000 f81a 	bl	800198c <ov7670_write_register>
	ov7670_write_register(OV7670_SCL_XSC, 		0x3a);
 8001958:	213a      	movs	r1, #58	; 0x3a
 800195a:	2070      	movs	r0, #112	; 0x70
 800195c:	f000 f816 	bl	800198c <ov7670_write_register>
	ov7670_write_register(OV7670_SCL_YSC, 		0x35);
 8001960:	2135      	movs	r1, #53	; 0x35
 8001962:	2071      	movs	r0, #113	; 0x71
 8001964:	f000 f812 	bl	800198c <ov7670_write_register>

	ov7670_write_register(OV7670_SCL_DCWCTR, 	downSample);
 8001968:	79bb      	ldrb	r3, [r7, #6]
 800196a:	4619      	mov	r1, r3
 800196c:	2072      	movs	r0, #114	; 0x72
 800196e:	f000 f80d 	bl	800198c <ov7670_write_register>
	ov7670_write_register(OV7670_SCL_PCLK_DIV, 	pclk_div);	//pixel clock divided by 4
 8001972:	797b      	ldrb	r3, [r7, #5]
 8001974:	4619      	mov	r1, r3
 8001976:	2073      	movs	r0, #115	; 0x73
 8001978:	f000 f808 	bl	800198c <ov7670_write_register>
	ov7670_write_register(OV7670_SCL_PCLK_DLY, 	0x02);
 800197c:	2102      	movs	r1, #2
 800197e:	20a2      	movs	r0, #162	; 0xa2
 8001980:	f000 f804 	bl	800198c <ov7670_write_register>
}
 8001984:	bf00      	nop
 8001986:	3708      	adds	r7, #8
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}

0800198c <ov7670_write_register>:



//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void ov7670_write_register(unsigned char reg, unsigned char val)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	4603      	mov	r3, r0
 8001994:	460a      	mov	r2, r1
 8001996:	71fb      	strb	r3, [r7, #7]
 8001998:	4613      	mov	r3, r2
 800199a:	71bb      	strb	r3, [r7, #6]
	i2c_write_reg(0x42U, reg, val);
 800199c:	79ba      	ldrb	r2, [r7, #6]
 800199e:	79fb      	ldrb	r3, [r7, #7]
 80019a0:	4619      	mov	r1, r3
 80019a2:	2042      	movs	r0, #66	; 0x42
 80019a4:	f7ff fe38 	bl	8001618 <i2c_write_reg>
}
 80019a8:	bf00      	nop
 80019aa:	3708      	adds	r7, #8
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <ov7670_read_register>:



//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
uint8_t ov7670_read_register(unsigned char reg)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	4603      	mov	r3, r0
 80019b8:	71fb      	strb	r3, [r7, #7]
	return i2c_read_reg(0x42U, reg);
 80019ba:	79fb      	ldrb	r3, [r7, #7]
 80019bc:	4619      	mov	r1, r3
 80019be:	2042      	movs	r0, #66	; 0x42
 80019c0:	f7ff fe00 	bl	80015c4 <i2c_read_reg>
 80019c4:	4603      	mov	r3, r0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <ov7670_set_mode>:



//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void ov7670_set_mode(ov7670_res_fmt_t resolution, uint16_t exposure)
{
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b084      	sub	sp, #16
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	4603      	mov	r3, r0
 80019d6:	460a      	mov	r2, r1
 80019d8:	71fb      	strb	r3, [r7, #7]
 80019da:	4613      	mov	r3, r2
 80019dc:	80bb      	strh	r3, [r7, #4]
	if (resolution < 0)
		resolution = 0;
	else if(resolution > 2)
 80019de:	79fb      	ldrb	r3, [r7, #7]
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d901      	bls.n	80019e8 <ov7670_set_mode+0x1a>
		resolution = 2;
 80019e4:	2302      	movs	r3, #2
 80019e6:	71fb      	strb	r3, [r7, #7]

	ov7670_write_register(OV7670_COM7,	0x80U);			// all registers default
 80019e8:	2180      	movs	r1, #128	; 0x80
 80019ea:	2012      	movs	r0, #18
 80019ec:	f7ff ffce 	bl	800198c <ov7670_write_register>
	HAL_Delay(3);
 80019f0:	2003      	movs	r0, #3
 80019f2:	f001 f9a7 	bl	8002d44 <HAL_Delay>
	ov7670_write_register(OV7670_CLKRC,	0x80U);
 80019f6:	2180      	movs	r1, #128	; 0x80
 80019f8:	2011      	movs	r0, #17
 80019fa:	f7ff ffc7 	bl	800198c <ov7670_write_register>
	ov7670_write_register(OV7670_COM11,	0x08U | 0x02U);	// enable auto 50/60Hz detect + exposure timing can be less
 80019fe:	210a      	movs	r1, #10
 8001a00:	203b      	movs	r0, #59	; 0x3b
 8001a02:	f7ff ffc3 	bl	800198c <ov7670_write_register>
	ov7670_write_register(OV7670_COM7,	0x04U);			// RGB
 8001a06:	2104      	movs	r1, #4
 8001a08:	2012      	movs	r0, #18
 8001a0a:	f7ff ffbf 	bl	800198c <ov7670_write_register>
	ov7670_write_register(OV7670_COM15,	0xC0U | 0x10U);	// RGB565
 8001a0e:	21d0      	movs	r1, #208	; 0xd0
 8001a10:	2040      	movs	r0, #64	; 0x40
 8001a12:	f7ff ffbb 	bl	800198c <ov7670_write_register>

	switch (resolution) {
 8001a16:	79fb      	ldrb	r3, [r7, #7]
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d01c      	beq.n	8001a56 <ov7670_set_mode+0x88>
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	dc25      	bgt.n	8001a6c <ov7670_set_mode+0x9e>
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d002      	beq.n	8001a2a <ov7670_set_mode+0x5c>
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d00b      	beq.n	8001a40 <ov7670_set_mode+0x72>
 8001a28:	e020      	b.n	8001a6c <ov7670_set_mode+0x9e>
	case QQQVGA_RGB565:
		ov7670_subsampling_control(0x1B, 0x33, 0xF3);
 8001a2a:	f06f 020c 	mvn.w	r2, #12
 8001a2e:	2133      	movs	r1, #51	; 0x33
 8001a30:	201b      	movs	r0, #27
 8001a32:	f7ff ff7f 	bl	8001934 <ov7670_subsampling_control>
		ov7670_frame_control(196, 14);
 8001a36:	210e      	movs	r1, #14
 8001a38:	20c4      	movs	r0, #196	; 0xc4
 8001a3a:	f7ff ff3b 	bl	80018b4 <ov7670_frame_control>
		break;
 8001a3e:	e015      	b.n	8001a6c <ov7670_set_mode+0x9e>
	case QQVGA_RGB565:
		ov7670_subsampling_control(0x1A, 0x22, 0xF2);
 8001a40:	f06f 020d 	mvn.w	r2, #13
 8001a44:	2122      	movs	r1, #34	; 0x22
 8001a46:	201a      	movs	r0, #26
 8001a48:	f7ff ff74 	bl	8001934 <ov7670_subsampling_control>
		ov7670_frame_control(174, 14);
 8001a4c:	210e      	movs	r1, #14
 8001a4e:	20ae      	movs	r0, #174	; 0xae
 8001a50:	f7ff ff30 	bl	80018b4 <ov7670_frame_control>
		break;
 8001a54:	e00a      	b.n	8001a6c <ov7670_set_mode+0x9e>
	case QVGA_RGB565:
		ov7670_subsampling_control(0x19, 0x11, 0xF1);
 8001a56:	f06f 020e 	mvn.w	r2, #14
 8001a5a:	2111      	movs	r1, #17
 8001a5c:	2019      	movs	r0, #25
 8001a5e:	f7ff ff69 	bl	8001934 <ov7670_subsampling_control>
		ov7670_frame_control(154, 14);
 8001a62:	210e      	movs	r1, #14
 8001a64:	209a      	movs	r0, #154	; 0x9a
 8001a66:	f7ff ff25 	bl	80018b4 <ov7670_frame_control>
		break;
 8001a6a:	bf00      	nop
	}

	ov7670_write_register(0xB0U, 			0x84U);
 8001a6c:	2184      	movs	r1, #132	; 0x84
 8001a6e:	20b0      	movs	r0, #176	; 0xb0
 8001a70:	f7ff ff8c 	bl	800198c <ov7670_write_register>
	ov7670_saturation(0);
 8001a74:	2000      	movs	r0, #0
 8001a76:	f7ff fecd 	bl	8001814 <ov7670_saturation>
	ov7670_write_register(OV7670_COM8,		0xE7U); // AGC AWB AEC on
 8001a7a:	21e7      	movs	r1, #231	; 0xe7
 8001a7c:	2013      	movs	r0, #19
 8001a7e:	f7ff ff85 	bl	800198c <ov7670_write_register>
	ov7670_write_register(OV7670_AWBCTR0,	0x9FU); // AWB
 8001a82:	219f      	movs	r1, #159	; 0x9f
 8001a84:	206f      	movs	r0, #111	; 0x6f
 8001a86:	f7ff ff81 	bl	800198c <ov7670_write_register>
	ov7670_write_register(OV7670_CLKRC, 	0x80U);
 8001a8a:	2180      	movs	r1, #128	; 0x80
 8001a8c:	2011      	movs	r0, #17
 8001a8e:	f7ff ff7d 	bl	800198c <ov7670_write_register>

	HAL_Delay(50);
 8001a92:	2032      	movs	r0, #50	; 0x32
 8001a94:	f001 f956 	bl	8002d44 <HAL_Delay>

	uint8_t com1 = exposure & 0x03U;				// AEC[1:0]
 8001a98:	88bb      	ldrh	r3, [r7, #4]
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	f003 0303 	and.w	r3, r3, #3
 8001aa0:	73fb      	strb	r3, [r7, #15]
	uint8_t aech = (exposure >> 2) & 0xFFU;			// AEC[9:2]
 8001aa2:	88bb      	ldrh	r3, [r7, #4]
 8001aa4:	089b      	lsrs	r3, r3, #2
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	73bb      	strb	r3, [r7, #14]
	uint8_t aechh = (exposure >> 10) & 0xFFU;		// AEC[15:10]
 8001aaa:	88bb      	ldrh	r3, [r7, #4]
 8001aac:	0a9b      	lsrs	r3, r3, #10
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	737b      	strb	r3, [r7, #13]

	ov7670_write_register(OV7670_COM1, 		(ov7670_read_register(OV7670_COM1) & ~0x03U) | com1);
 8001ab2:	2004      	movs	r0, #4
 8001ab4:	f7ff ff7c 	bl	80019b0 <ov7670_read_register>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	f023 0303 	bic.w	r3, r3, #3
 8001abe:	b2da      	uxtb	r2, r3
 8001ac0:	7bfb      	ldrb	r3, [r7, #15]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	2004      	movs	r0, #4
 8001aca:	f7ff ff5f 	bl	800198c <ov7670_write_register>
	ov7670_write_register(OV7670_AECH, 		aech);
 8001ace:	7bbb      	ldrb	r3, [r7, #14]
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	2010      	movs	r0, #16
 8001ad4:	f7ff ff5a 	bl	800198c <ov7670_write_register>
	ov7670_write_register(OV7670_AECHH, 	aechh);
 8001ad8:	7b7b      	ldrb	r3, [r7, #13]
 8001ada:	4619      	mov	r1, r3
 8001adc:	2007      	movs	r0, #7
 8001ade:	f7ff ff55 	bl	800198c <ov7670_write_register>
}
 8001ae2:	bf00      	nop
 8001ae4:	3710      	adds	r7, #16
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
	...

08001aec <ov7670_init1>:



//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void ov7670_init1()
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
	OV7670_RST_LOW;
 8001af0:	2200      	movs	r2, #0
 8001af2:	2104      	movs	r1, #4
 8001af4:	4815      	ldr	r0, [pc, #84]	; (8001b4c <ov7670_init1+0x60>)
 8001af6:	f002 fa49 	bl	8003f8c <HAL_GPIO_WritePin>
	HAL_Delay(300);
 8001afa:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001afe:	f001 f921 	bl	8002d44 <HAL_Delay>
	OV7670_RST_HIGH;
 8001b02:	2201      	movs	r2, #1
 8001b04:	2104      	movs	r1, #4
 8001b06:	4811      	ldr	r0, [pc, #68]	; (8001b4c <ov7670_init1+0x60>)
 8001b08:	f002 fa40 	bl	8003f8c <HAL_GPIO_WritePin>
	HAL_Delay(300);
 8001b0c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001b10:	f001 f918 	bl	8002d44 <HAL_Delay>

	ov7670_set_mode(QVGA_RGB565, 300);
 8001b14:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001b18:	2002      	movs	r0, #2
 8001b1a:	f7ff ff58 	bl	80019ce <ov7670_set_mode>
	HAL_Delay(300);
 8001b1e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001b22:	f001 f90f 	bl	8002d44 <HAL_Delay>

	TIM1->DIER |= TIM_DIER_TDE;
 8001b26:	4b0a      	ldr	r3, [pc, #40]	; (8001b50 <ov7670_init1+0x64>)
 8001b28:	68db      	ldr	r3, [r3, #12]
 8001b2a:	4a09      	ldr	r2, [pc, #36]	; (8001b50 <ov7670_init1+0x64>)
 8001b2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b30:	60d3      	str	r3, [r2, #12]
	HAL_TIM_Base_Start(&htim1);
 8001b32:	4808      	ldr	r0, [pc, #32]	; (8001b54 <ov7670_init1+0x68>)
 8001b34:	f005 fd6a 	bl	800760c <HAL_TIM_Base_Start>

	HAL_NVIC_SetPriority(OV7670_VSYNC_EXTI_IRQn, 0, 0);
 8001b38:	2200      	movs	r2, #0
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	2007      	movs	r0, #7
 8001b3e:	f001 fde2 	bl	8003706 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(OV7670_VSYNC_EXTI_IRQn);
 8001b42:	2007      	movs	r0, #7
 8001b44:	f001 fdfb 	bl	800373e <HAL_NVIC_EnableIRQ>
}
 8001b48:	bf00      	nop
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	40021400 	.word	0x40021400
 8001b50:	40010000 	.word	0x40010000
 8001b54:	20025d98 	.word	0x20025d98

08001b58 <HAL_GPIO_EXTI_Callback>:



//=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	4603      	mov	r3, r0
 8001b60:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == OV7670_VSYNC_Pin)
 8001b62:	88fb      	ldrh	r3, [r7, #6]
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d102      	bne.n	8001b6e <HAL_GPIO_EXTI_Callback+0x16>
		EXTI1_VSYNC_Callback();
 8001b68:	f000 f83e 	bl	8001be8 <EXTI1_VSYNC_Callback>
	else if(GPIO_Pin == OV7670_HREF_Pin)
		EXTI0_HREF_Callback();
	else if(GPIO_Pin == TOUCH_XR_Pin)
		EXTI3_TOUCH_Callback();
}
 8001b6c:	e00a      	b.n	8001b84 <HAL_GPIO_EXTI_Callback+0x2c>
	else if(GPIO_Pin == OV7670_HREF_Pin)
 8001b6e:	88fb      	ldrh	r3, [r7, #6]
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d102      	bne.n	8001b7a <HAL_GPIO_EXTI_Callback+0x22>
		EXTI0_HREF_Callback();
 8001b74:	f000 f80a 	bl	8001b8c <EXTI0_HREF_Callback>
}
 8001b78:	e004      	b.n	8001b84 <HAL_GPIO_EXTI_Callback+0x2c>
	else if(GPIO_Pin == TOUCH_XR_Pin)
 8001b7a:	88fb      	ldrh	r3, [r7, #6]
 8001b7c:	2b08      	cmp	r3, #8
 8001b7e:	d101      	bne.n	8001b84 <HAL_GPIO_EXTI_Callback+0x2c>
		EXTI3_TOUCH_Callback();
 8001b80:	f000 fbf8 	bl	8002374 <EXTI3_TOUCH_Callback>
}
 8001b84:	bf00      	nop
 8001b86:	3708      	adds	r7, #8
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <EXTI0_HREF_Callback>:



//=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~
void EXTI0_HREF_Callback()
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
	// Falling edge
	HAL_DMA_Abort(&hdma_tim1_trig);
 8001b90:	4810      	ldr	r0, [pc, #64]	; (8001bd4 <EXTI0_HREF_Callback+0x48>)
 8001b92:	f001 fee6 	bl	8003962 <HAL_DMA_Abort>
	HAL_DMA_Start(&hdma_tim1_trig, (uint32_t) &(GPIOB->IDR), (uint32_t)(g_cam_buff + g_offset), 640);
 8001b96:	4b10      	ldr	r3, [pc, #64]	; (8001bd8 <EXTI0_HREF_Callback+0x4c>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a10      	ldr	r2, [pc, #64]	; (8001bdc <EXTI0_HREF_Callback+0x50>)
 8001b9c:	4413      	add	r3, r2
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001ba4:	490e      	ldr	r1, [pc, #56]	; (8001be0 <EXTI0_HREF_Callback+0x54>)
 8001ba6:	480b      	ldr	r0, [pc, #44]	; (8001bd4 <EXTI0_HREF_Callback+0x48>)
 8001ba8:	f001 fea0 	bl	80038ec <HAL_DMA_Start>
	if(g_cam_buff + g_offset >= g_cam_buff + OV7670_FRAME_SIZE_QVGA - 640)//38080=38400-320
 8001bac:	4b0a      	ldr	r3, [pc, #40]	; (8001bd8 <EXTI0_HREF_Callback+0x4c>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a0a      	ldr	r2, [pc, #40]	; (8001bdc <EXTI0_HREF_Callback+0x50>)
 8001bb2:	4413      	add	r3, r2
 8001bb4:	4a0b      	ldr	r2, [pc, #44]	; (8001be4 <EXTI0_HREF_Callback+0x58>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d303      	bcc.n	8001bc2 <EXTI0_HREF_Callback+0x36>
		g_offset = 0;
 8001bba:	4b07      	ldr	r3, [pc, #28]	; (8001bd8 <EXTI0_HREF_Callback+0x4c>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
	else
		g_offset += 640;
}
 8001bc0:	e005      	b.n	8001bce <EXTI0_HREF_Callback+0x42>
		g_offset += 640;
 8001bc2:	4b05      	ldr	r3, [pc, #20]	; (8001bd8 <EXTI0_HREF_Callback+0x4c>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001bca:	4a03      	ldr	r2, [pc, #12]	; (8001bd8 <EXTI0_HREF_Callback+0x4c>)
 8001bcc:	6013      	str	r3, [r2, #0]
}
 8001bce:	bf00      	nop
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	20025d38 	.word	0x20025d38
 8001bd8:	20025b24 	.word	0x20025b24
 8001bdc:	200000a4 	.word	0x200000a4
 8001be0:	40020410 	.word	0x40020410
 8001be4:	20025624 	.word	0x20025624

08001be8 <EXTI1_VSYNC_Callback>:



//=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~
void EXTI1_VSYNC_Callback()
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
	// Rising edge
	if(OV7670_VSYNC_GPIO_Port->IDR & OV7670_VSYNC_Pin)
 8001bec:	4b13      	ldr	r3, [pc, #76]	; (8001c3c <EXTI1_VSYNC_Callback+0x54>)
 8001bee:	691b      	ldr	r3, [r3, #16]
 8001bf0:	f003 0302 	and.w	r3, r3, #2
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d006      	beq.n	8001c06 <EXTI1_VSYNC_Callback+0x1e>
	{
		HAL_DMA_Abort(&hdma_tim1_trig);
 8001bf8:	4811      	ldr	r0, [pc, #68]	; (8001c40 <EXTI1_VSYNC_Callback+0x58>)
 8001bfa:	f001 feb2 	bl	8003962 <HAL_DMA_Abort>
		HAL_NVIC_DisableIRQ(OV7670_HREF_EXTI_IRQn);
 8001bfe:	2006      	movs	r0, #6
 8001c00:	f001 fdab 	bl	800375a <HAL_NVIC_DisableIRQ>
		HAL_NVIC_EnableIRQ(OV7670_HREF_EXTI_IRQn);
		HAL_DMA_Abort(&hdma_tim1_trig);
		HAL_DMA_Start(&hdma_tim1_trig, (uint32_t) &(GPIOB->IDR), (uint32_t)g_cam_buff, 640); // first line
		g_offset += 640;
	}
}
 8001c04:	e017      	b.n	8001c36 <EXTI1_VSYNC_Callback+0x4e>
		HAL_NVIC_SetPriority(OV7670_HREF_EXTI_IRQn, 0, 0);
 8001c06:	2200      	movs	r2, #0
 8001c08:	2100      	movs	r1, #0
 8001c0a:	2006      	movs	r0, #6
 8001c0c:	f001 fd7b 	bl	8003706 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(OV7670_HREF_EXTI_IRQn);
 8001c10:	2006      	movs	r0, #6
 8001c12:	f001 fd94 	bl	800373e <HAL_NVIC_EnableIRQ>
		HAL_DMA_Abort(&hdma_tim1_trig);
 8001c16:	480a      	ldr	r0, [pc, #40]	; (8001c40 <EXTI1_VSYNC_Callback+0x58>)
 8001c18:	f001 fea3 	bl	8003962 <HAL_DMA_Abort>
		HAL_DMA_Start(&hdma_tim1_trig, (uint32_t) &(GPIOB->IDR), (uint32_t)g_cam_buff, 640); // first line
 8001c1c:	4a09      	ldr	r2, [pc, #36]	; (8001c44 <EXTI1_VSYNC_Callback+0x5c>)
 8001c1e:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001c22:	4909      	ldr	r1, [pc, #36]	; (8001c48 <EXTI1_VSYNC_Callback+0x60>)
 8001c24:	4806      	ldr	r0, [pc, #24]	; (8001c40 <EXTI1_VSYNC_Callback+0x58>)
 8001c26:	f001 fe61 	bl	80038ec <HAL_DMA_Start>
		g_offset += 640;
 8001c2a:	4b08      	ldr	r3, [pc, #32]	; (8001c4c <EXTI1_VSYNC_Callback+0x64>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001c32:	4a06      	ldr	r2, [pc, #24]	; (8001c4c <EXTI1_VSYNC_Callback+0x64>)
 8001c34:	6013      	str	r3, [r2, #0]
}
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	40021800 	.word	0x40021800
 8001c40:	20025d38 	.word	0x20025d38
 8001c44:	200000a4 	.word	0x200000a4
 8001c48:	40020410 	.word	0x40020410
 8001c4c:	20025b24 	.word	0x20025b24

08001c50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c56:	2300      	movs	r3, #0
 8001c58:	607b      	str	r3, [r7, #4]
 8001c5a:	4b10      	ldr	r3, [pc, #64]	; (8001c9c <HAL_MspInit+0x4c>)
 8001c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c5e:	4a0f      	ldr	r2, [pc, #60]	; (8001c9c <HAL_MspInit+0x4c>)
 8001c60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c64:	6453      	str	r3, [r2, #68]	; 0x44
 8001c66:	4b0d      	ldr	r3, [pc, #52]	; (8001c9c <HAL_MspInit+0x4c>)
 8001c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c6e:	607b      	str	r3, [r7, #4]
 8001c70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c72:	2300      	movs	r3, #0
 8001c74:	603b      	str	r3, [r7, #0]
 8001c76:	4b09      	ldr	r3, [pc, #36]	; (8001c9c <HAL_MspInit+0x4c>)
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	4a08      	ldr	r2, [pc, #32]	; (8001c9c <HAL_MspInit+0x4c>)
 8001c7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c80:	6413      	str	r3, [r2, #64]	; 0x40
 8001c82:	4b06      	ldr	r3, [pc, #24]	; (8001c9c <HAL_MspInit+0x4c>)
 8001c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c8a:	603b      	str	r3, [r7, #0]
 8001c8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c8e:	bf00      	nop
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	40023800 	.word	0x40023800

08001ca0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ca4:	e7fe      	b.n	8001ca4 <NMI_Handler+0x4>

08001ca6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001caa:	e7fe      	b.n	8001caa <HardFault_Handler+0x4>

08001cac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cb0:	e7fe      	b.n	8001cb0 <MemManage_Handler+0x4>

08001cb2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cb6:	e7fe      	b.n	8001cb6 <BusFault_Handler+0x4>

08001cb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cbc:	e7fe      	b.n	8001cbc <UsageFault_Handler+0x4>

08001cbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cc2:	bf00      	nop
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cd0:	bf00      	nop
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr

08001cda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cde:	bf00      	nop
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cec:	f001 f80a 	bl	8002d04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cf0:	bf00      	nop
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001cf8:	2001      	movs	r0, #1
 8001cfa:	f002 f961 	bl	8003fc0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001cfe:	bf00      	nop
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001d06:	2002      	movs	r0, #2
 8001d08:	f002 f95a 	bl	8003fc0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001d0c:	bf00      	nop
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001d14:	2008      	movs	r0, #8
 8001d16:	f002 f953 	bl	8003fc0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001d1a:	bf00      	nop
 8001d1c:	bd80      	pop	{r7, pc}
	...

08001d20 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001d24:	4802      	ldr	r0, [pc, #8]	; (8001d30 <I2C2_EV_IRQHandler+0x10>)
 8001d26:	f002 fdcb 	bl	80048c0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001d2a:	bf00      	nop
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	20025ce4 	.word	0x20025ce4

08001d34 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	if((USART6->SR & USART_SR_RXNE) && (USART6->CR1 & USART_CR1_RXNEIE))
 8001d38:	4b09      	ldr	r3, [pc, #36]	; (8001d60 <USART6_IRQHandler+0x2c>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0320 	and.w	r3, r3, #32
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d007      	beq.n	8001d54 <USART6_IRQHandler+0x20>
 8001d44:	4b06      	ldr	r3, [pc, #24]	; (8001d60 <USART6_IRQHandler+0x2c>)
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	f003 0320 	and.w	r3, r3, #32
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <USART6_IRQHandler+0x20>
		uart_rx_callback();
 8001d50:	f000 fd42 	bl	80027d8 <uart_rx_callback>
  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001d54:	4803      	ldr	r0, [pc, #12]	; (8001d64 <USART6_IRQHandler+0x30>)
 8001d56:	f005 ffbf 	bl	8007cd8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001d5a:	bf00      	nop
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	40011400 	.word	0x40011400
 8001d64:	20025f14 	.word	0x20025f14

08001d68 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
	return 1;
 8001d6c:	2301      	movs	r3, #1
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <_kill>:

int _kill(int pid, int sig)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001d82:	f006 fdb7 	bl	80088f4 <__errno>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2216      	movs	r2, #22
 8001d8a:	601a      	str	r2, [r3, #0]
	return -1;
 8001d8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3708      	adds	r7, #8
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <_exit>:

void _exit (int status)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001da0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f7ff ffe7 	bl	8001d78 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001daa:	e7fe      	b.n	8001daa <_exit+0x12>

08001dac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b086      	sub	sp, #24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	60b9      	str	r1, [r7, #8]
 8001db6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001db8:	2300      	movs	r3, #0
 8001dba:	617b      	str	r3, [r7, #20]
 8001dbc:	e00a      	b.n	8001dd4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001dbe:	f3af 8000 	nop.w
 8001dc2:	4601      	mov	r1, r0
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	1c5a      	adds	r2, r3, #1
 8001dc8:	60ba      	str	r2, [r7, #8]
 8001dca:	b2ca      	uxtb	r2, r1
 8001dcc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	617b      	str	r3, [r7, #20]
 8001dd4:	697a      	ldr	r2, [r7, #20]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	dbf0      	blt.n	8001dbe <_read+0x12>
	}

return len;
 8001ddc:	687b      	ldr	r3, [r7, #4]
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3718      	adds	r7, #24
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b086      	sub	sp, #24
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	60f8      	str	r0, [r7, #12]
 8001dee:	60b9      	str	r1, [r7, #8]
 8001df0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001df2:	2300      	movs	r3, #0
 8001df4:	617b      	str	r3, [r7, #20]
 8001df6:	e009      	b.n	8001e0c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	1c5a      	adds	r2, r3, #1
 8001dfc:	60ba      	str	r2, [r7, #8]
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	617b      	str	r3, [r7, #20]
 8001e0c:	697a      	ldr	r2, [r7, #20]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	dbf1      	blt.n	8001df8 <_write+0x12>
	}
	return len;
 8001e14:	687b      	ldr	r3, [r7, #4]
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3718      	adds	r7, #24
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <_close>:

int _close(int file)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	b083      	sub	sp, #12
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
	return -1;
 8001e26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr

08001e36 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e36:	b480      	push	{r7}
 8001e38:	b083      	sub	sp, #12
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
 8001e3e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e46:	605a      	str	r2, [r3, #4]
	return 0;
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr

08001e56 <_isatty>:

int _isatty(int file)
{
 8001e56:	b480      	push	{r7}
 8001e58:	b083      	sub	sp, #12
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
	return 1;
 8001e5e:	2301      	movs	r3, #1
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	60b9      	str	r1, [r7, #8]
 8001e76:	607a      	str	r2, [r7, #4]
	return 0;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3714      	adds	r7, #20
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
	...

08001e88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b086      	sub	sp, #24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e90:	4a14      	ldr	r2, [pc, #80]	; (8001ee4 <_sbrk+0x5c>)
 8001e92:	4b15      	ldr	r3, [pc, #84]	; (8001ee8 <_sbrk+0x60>)
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e9c:	4b13      	ldr	r3, [pc, #76]	; (8001eec <_sbrk+0x64>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d102      	bne.n	8001eaa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ea4:	4b11      	ldr	r3, [pc, #68]	; (8001eec <_sbrk+0x64>)
 8001ea6:	4a12      	ldr	r2, [pc, #72]	; (8001ef0 <_sbrk+0x68>)
 8001ea8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001eaa:	4b10      	ldr	r3, [pc, #64]	; (8001eec <_sbrk+0x64>)
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d207      	bcs.n	8001ec8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001eb8:	f006 fd1c 	bl	80088f4 <__errno>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	220c      	movs	r2, #12
 8001ec0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ec2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ec6:	e009      	b.n	8001edc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ec8:	4b08      	ldr	r3, [pc, #32]	; (8001eec <_sbrk+0x64>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ece:	4b07      	ldr	r3, [pc, #28]	; (8001eec <_sbrk+0x64>)
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	4a05      	ldr	r2, [pc, #20]	; (8001eec <_sbrk+0x64>)
 8001ed8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001eda:	68fb      	ldr	r3, [r7, #12]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3718      	adds	r7, #24
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	20050000 	.word	0x20050000
 8001ee8:	00000400 	.word	0x00000400
 8001eec:	20025b28 	.word	0x20025b28
 8001ef0:	20025f70 	.word	0x20025f70

08001ef4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ef8:	4b06      	ldr	r3, [pc, #24]	; (8001f14 <SystemInit+0x20>)
 8001efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001efe:	4a05      	ldr	r2, [pc, #20]	; (8001f14 <SystemInit+0x20>)
 8001f00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f08:	bf00      	nop
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	e000ed00 	.word	0xe000ed00

08001f18 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
DMA_HandleTypeDef hdma_tim1_trig;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b088      	sub	sp, #32
 8001f1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001f1e:	f107 030c 	add.w	r3, r7, #12
 8001f22:	2200      	movs	r2, #0
 8001f24:	601a      	str	r2, [r3, #0]
 8001f26:	605a      	str	r2, [r3, #4]
 8001f28:	609a      	str	r2, [r3, #8]
 8001f2a:	60da      	str	r2, [r3, #12]
 8001f2c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f2e:	1d3b      	adds	r3, r7, #4
 8001f30:	2200      	movs	r2, #0
 8001f32:	601a      	str	r2, [r3, #0]
 8001f34:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f36:	4b21      	ldr	r3, [pc, #132]	; (8001fbc <MX_TIM1_Init+0xa4>)
 8001f38:	4a21      	ldr	r2, [pc, #132]	; (8001fc0 <MX_TIM1_Init+0xa8>)
 8001f3a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001f3c:	4b1f      	ldr	r3, [pc, #124]	; (8001fbc <MX_TIM1_Init+0xa4>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f42:	4b1e      	ldr	r3, [pc, #120]	; (8001fbc <MX_TIM1_Init+0xa4>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001f48:	4b1c      	ldr	r3, [pc, #112]	; (8001fbc <MX_TIM1_Init+0xa4>)
 8001f4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f4e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f50:	4b1a      	ldr	r3, [pc, #104]	; (8001fbc <MX_TIM1_Init+0xa4>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f56:	4b19      	ldr	r3, [pc, #100]	; (8001fbc <MX_TIM1_Init+0xa4>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f5c:	4b17      	ldr	r3, [pc, #92]	; (8001fbc <MX_TIM1_Init+0xa4>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001f62:	4816      	ldr	r0, [pc, #88]	; (8001fbc <MX_TIM1_Init+0xa4>)
 8001f64:	f005 fb02 	bl	800756c <HAL_TIM_Base_Init>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001f6e:	f7ff fc2d 	bl	80017cc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8001f72:	2307      	movs	r3, #7
 8001f74:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8001f76:	2360      	movs	r3, #96	; 0x60
 8001f78:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 0;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001f82:	f107 030c 	add.w	r3, r7, #12
 8001f86:	4619      	mov	r1, r3
 8001f88:	480c      	ldr	r0, [pc, #48]	; (8001fbc <MX_TIM1_Init+0xa4>)
 8001f8a:	f005 fba7 	bl	80076dc <HAL_TIM_SlaveConfigSynchro>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 8001f94:	f7ff fc1a 	bl	80017cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001fa0:	1d3b      	adds	r3, r7, #4
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	4805      	ldr	r0, [pc, #20]	; (8001fbc <MX_TIM1_Init+0xa4>)
 8001fa6:	f005 fd89 	bl	8007abc <HAL_TIMEx_MasterConfigSynchronization>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8001fb0:	f7ff fc0c 	bl	80017cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001fb4:	bf00      	nop
 8001fb6:	3720      	adds	r7, #32
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	20025d98 	.word	0x20025d98
 8001fc0:	40010000 	.word	0x40010000

08001fc4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b08a      	sub	sp, #40	; 0x28
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fcc:	f107 0314 	add.w	r3, r7, #20
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	605a      	str	r2, [r3, #4]
 8001fd6:	609a      	str	r2, [r3, #8]
 8001fd8:	60da      	str	r2, [r3, #12]
 8001fda:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a31      	ldr	r2, [pc, #196]	; (80020a8 <HAL_TIM_Base_MspInit+0xe4>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d15b      	bne.n	800209e <HAL_TIM_Base_MspInit+0xda>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	613b      	str	r3, [r7, #16]
 8001fea:	4b30      	ldr	r3, [pc, #192]	; (80020ac <HAL_TIM_Base_MspInit+0xe8>)
 8001fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fee:	4a2f      	ldr	r2, [pc, #188]	; (80020ac <HAL_TIM_Base_MspInit+0xe8>)
 8001ff0:	f043 0301 	orr.w	r3, r3, #1
 8001ff4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ff6:	4b2d      	ldr	r3, [pc, #180]	; (80020ac <HAL_TIM_Base_MspInit+0xe8>)
 8001ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	613b      	str	r3, [r7, #16]
 8002000:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002002:	2300      	movs	r3, #0
 8002004:	60fb      	str	r3, [r7, #12]
 8002006:	4b29      	ldr	r3, [pc, #164]	; (80020ac <HAL_TIM_Base_MspInit+0xe8>)
 8002008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200a:	4a28      	ldr	r2, [pc, #160]	; (80020ac <HAL_TIM_Base_MspInit+0xe8>)
 800200c:	f043 0301 	orr.w	r3, r3, #1
 8002010:	6313      	str	r3, [r2, #48]	; 0x30
 8002012:	4b26      	ldr	r3, [pc, #152]	; (80020ac <HAL_TIM_Base_MspInit+0xe8>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	60fb      	str	r3, [r7, #12]
 800201c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800201e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002022:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002024:	2302      	movs	r3, #2
 8002026:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002028:	2300      	movs	r3, #0
 800202a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800202c:	2300      	movs	r3, #0
 800202e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002030:	2301      	movs	r3, #1
 8002032:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002034:	f107 0314 	add.w	r3, r7, #20
 8002038:	4619      	mov	r1, r3
 800203a:	481d      	ldr	r0, [pc, #116]	; (80020b0 <HAL_TIM_Base_MspInit+0xec>)
 800203c:	f001 fe12 	bl	8003c64 <HAL_GPIO_Init>

    /* TIM1 DMA Init */
    /* TIM1_TRIG Init */
    hdma_tim1_trig.Instance = DMA2_Stream0;
 8002040:	4b1c      	ldr	r3, [pc, #112]	; (80020b4 <HAL_TIM_Base_MspInit+0xf0>)
 8002042:	4a1d      	ldr	r2, [pc, #116]	; (80020b8 <HAL_TIM_Base_MspInit+0xf4>)
 8002044:	601a      	str	r2, [r3, #0]
    hdma_tim1_trig.Init.Channel = DMA_CHANNEL_6;
 8002046:	4b1b      	ldr	r3, [pc, #108]	; (80020b4 <HAL_TIM_Base_MspInit+0xf0>)
 8002048:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800204c:	605a      	str	r2, [r3, #4]
    hdma_tim1_trig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800204e:	4b19      	ldr	r3, [pc, #100]	; (80020b4 <HAL_TIM_Base_MspInit+0xf0>)
 8002050:	2200      	movs	r2, #0
 8002052:	609a      	str	r2, [r3, #8]
    hdma_tim1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8002054:	4b17      	ldr	r3, [pc, #92]	; (80020b4 <HAL_TIM_Base_MspInit+0xf0>)
 8002056:	2200      	movs	r2, #0
 8002058:	60da      	str	r2, [r3, #12]
    hdma_tim1_trig.Init.MemInc = DMA_MINC_ENABLE;
 800205a:	4b16      	ldr	r3, [pc, #88]	; (80020b4 <HAL_TIM_Base_MspInit+0xf0>)
 800205c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002060:	611a      	str	r2, [r3, #16]
    hdma_tim1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002062:	4b14      	ldr	r3, [pc, #80]	; (80020b4 <HAL_TIM_Base_MspInit+0xf0>)
 8002064:	2200      	movs	r2, #0
 8002066:	615a      	str	r2, [r3, #20]
    hdma_tim1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002068:	4b12      	ldr	r3, [pc, #72]	; (80020b4 <HAL_TIM_Base_MspInit+0xf0>)
 800206a:	2200      	movs	r2, #0
 800206c:	619a      	str	r2, [r3, #24]
    hdma_tim1_trig.Init.Mode = DMA_NORMAL;
 800206e:	4b11      	ldr	r3, [pc, #68]	; (80020b4 <HAL_TIM_Base_MspInit+0xf0>)
 8002070:	2200      	movs	r2, #0
 8002072:	61da      	str	r2, [r3, #28]
    hdma_tim1_trig.Init.Priority = DMA_PRIORITY_HIGH;
 8002074:	4b0f      	ldr	r3, [pc, #60]	; (80020b4 <HAL_TIM_Base_MspInit+0xf0>)
 8002076:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800207a:	621a      	str	r2, [r3, #32]
    hdma_tim1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800207c:	4b0d      	ldr	r3, [pc, #52]	; (80020b4 <HAL_TIM_Base_MspInit+0xf0>)
 800207e:	2200      	movs	r2, #0
 8002080:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_trig) != HAL_OK)
 8002082:	480c      	ldr	r0, [pc, #48]	; (80020b4 <HAL_TIM_Base_MspInit+0xf0>)
 8002084:	f001 fb84 	bl	8003790 <HAL_DMA_Init>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <HAL_TIM_Base_MspInit+0xce>
    {
      Error_Handler();
 800208e:	f7ff fb9d 	bl	80017cc <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim1_trig);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a07      	ldr	r2, [pc, #28]	; (80020b4 <HAL_TIM_Base_MspInit+0xf0>)
 8002096:	639a      	str	r2, [r3, #56]	; 0x38
 8002098:	4a06      	ldr	r2, [pc, #24]	; (80020b4 <HAL_TIM_Base_MspInit+0xf0>)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800209e:	bf00      	nop
 80020a0:	3728      	adds	r7, #40	; 0x28
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	40010000 	.word	0x40010000
 80020ac:	40023800 	.word	0x40023800
 80020b0:	40020000 	.word	0x40020000
 80020b4:	20025d38 	.word	0x20025d38
 80020b8:	40026410 	.word	0x40026410

080020bc <adc_select_x>:

/******************************************************
 *
******************************************************/
void adc_select_x(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80020c2:	463b      	mov	r3, r7
 80020c4:	2200      	movs	r2, #0
 80020c6:	601a      	str	r2, [r3, #0]
 80020c8:	605a      	str	r2, [r3, #4]
 80020ca:	609a      	str	r2, [r3, #8]
 80020cc:	60da      	str	r2, [r3, #12]

	sConfig.Channel = ADC_CHANNEL_3;
 80020ce:	2303      	movs	r3, #3
 80020d0:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 80020d2:	2301      	movs	r3, #1
 80020d4:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80020d6:	2300      	movs	r3, #0
 80020d8:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020da:	463b      	mov	r3, r7
 80020dc:	4619      	mov	r1, r3
 80020de:	4806      	ldr	r0, [pc, #24]	; (80020f8 <adc_select_x+0x3c>)
 80020e0:	f000 ffe4 	bl	80030ac <HAL_ADC_ConfigChannel>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <adc_select_x+0x32>
	{
		Error_Handler();
 80020ea:	f7ff fb6f 	bl	80017cc <Error_Handler>
	}
}
 80020ee:	bf00      	nop
 80020f0:	3710      	adds	r7, #16
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	20025c4c 	.word	0x20025c4c

080020fc <adc_select_y>:

/******************************************************
 *
******************************************************/
void adc_select_y(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8002102:	463b      	mov	r3, r7
 8002104:	2200      	movs	r2, #0
 8002106:	601a      	str	r2, [r3, #0]
 8002108:	605a      	str	r2, [r3, #4]
 800210a:	609a      	str	r2, [r3, #8]
 800210c:	60da      	str	r2, [r3, #12]

	sConfig.Channel = ADC_CHANNEL_2;
 800210e:	2302      	movs	r3, #2
 8002110:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8002112:	2301      	movs	r3, #1
 8002114:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002116:	463b      	mov	r3, r7
 8002118:	4619      	mov	r1, r3
 800211a:	4806      	ldr	r0, [pc, #24]	; (8002134 <adc_select_y+0x38>)
 800211c:	f000 ffc6 	bl	80030ac <HAL_ADC_ConfigChannel>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <adc_select_y+0x2e>
	{
		Error_Handler();
 8002126:	f7ff fb51 	bl	80017cc <Error_Handler>
	}
}
 800212a:	bf00      	nop
 800212c:	3710      	adds	r7, #16
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	20025c4c 	.word	0x20025c4c

08002138 <touch_read_coordinates>:
******************************************************/



touch_coordinates_t touch_read_coordinates()
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b086      	sub	sp, #24
 800213c:	af00      	add	r7, sp, #0
	touch_coordinates_t ret = {0};
 800213e:	2300      	movs	r3, #0
 8002140:	60fb      	str	r3, [r7, #12]
	uint8_t adc_cnt = 0;
 8002142:	2300      	movs	r3, #0
 8002144:	75fb      	strb	r3, [r7, #23]
	uint16_t adc_values[5] = {0};
 8002146:	463b      	mov	r3, r7
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]
 800214c:	605a      	str	r2, [r3, #4]
 800214e:	811a      	strh	r2, [r3, #8]

	// TOUCH_YU output-high
	GPIOA->MODER &= ~GPIO_MODER_MODER2_Msk;
 8002150:	4b60      	ldr	r3, [pc, #384]	; (80022d4 <touch_read_coordinates+0x19c>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a5f      	ldr	r2, [pc, #380]	; (80022d4 <touch_read_coordinates+0x19c>)
 8002156:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800215a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODER2_0;
 800215c:	4b5d      	ldr	r3, [pc, #372]	; (80022d4 <touch_read_coordinates+0x19c>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a5c      	ldr	r2, [pc, #368]	; (80022d4 <touch_read_coordinates+0x19c>)
 8002162:	f043 0310 	orr.w	r3, r3, #16
 8002166:	6013      	str	r3, [r2, #0]
	GPIOA->ODR |= GPIO_ODR_OD2;
 8002168:	4b5a      	ldr	r3, [pc, #360]	; (80022d4 <touch_read_coordinates+0x19c>)
 800216a:	695b      	ldr	r3, [r3, #20]
 800216c:	4a59      	ldr	r2, [pc, #356]	; (80022d4 <touch_read_coordinates+0x19c>)
 800216e:	f043 0304 	orr.w	r3, r3, #4
 8002172:	6153      	str	r3, [r2, #20]
	HAL_Delay(5);
 8002174:	2005      	movs	r0, #5
 8002176:	f000 fde5 	bl	8002d44 <HAL_Delay>
	// TOUCH_YD output-low
	GPIOA->MODER &= ~GPIO_MODER_MODER5_Msk;
 800217a:	4b56      	ldr	r3, [pc, #344]	; (80022d4 <touch_read_coordinates+0x19c>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a55      	ldr	r2, [pc, #340]	; (80022d4 <touch_read_coordinates+0x19c>)
 8002180:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002184:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODER5_0;
 8002186:	4b53      	ldr	r3, [pc, #332]	; (80022d4 <touch_read_coordinates+0x19c>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a52      	ldr	r2, [pc, #328]	; (80022d4 <touch_read_coordinates+0x19c>)
 800218c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002190:	6013      	str	r3, [r2, #0]
	GPIOA->ODR &= ~TOUCH_YD_Pin;
 8002192:	4b50      	ldr	r3, [pc, #320]	; (80022d4 <touch_read_coordinates+0x19c>)
 8002194:	695b      	ldr	r3, [r3, #20]
 8002196:	4a4f      	ldr	r2, [pc, #316]	; (80022d4 <touch_read_coordinates+0x19c>)
 8002198:	f023 0320 	bic.w	r3, r3, #32
 800219c:	6153      	str	r3, [r2, #20]
	// TOUCH_XL inout-open
	GPIOA->MODER &= ~GPIO_MODER_MODER4_Msk;
 800219e:	4b4d      	ldr	r3, [pc, #308]	; (80022d4 <touch_read_coordinates+0x19c>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a4c      	ldr	r2, [pc, #304]	; (80022d4 <touch_read_coordinates+0x19c>)
 80021a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021a8:	6013      	str	r3, [r2, #0]
	// TOUCH_XR as ADC
	for(adc_cnt = 0; adc_cnt < 5; adc_cnt++)
 80021aa:	2300      	movs	r3, #0
 80021ac:	75fb      	strb	r3, [r7, #23]
 80021ae:	e018      	b.n	80021e2 <touch_read_coordinates+0xaa>
	{
		adc_select_x();
 80021b0:	f7ff ff84 	bl	80020bc <adc_select_x>
		HAL_ADC_Start(&hadc1);
 80021b4:	4848      	ldr	r0, [pc, #288]	; (80022d8 <touch_read_coordinates+0x1a0>)
 80021b6:	f000 fe2d 	bl	8002e14 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 500);
 80021ba:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80021be:	4846      	ldr	r0, [pc, #280]	; (80022d8 <touch_read_coordinates+0x1a0>)
 80021c0:	f000 fedc 	bl	8002f7c <HAL_ADC_PollForConversion>
		adc_values[adc_cnt] = HAL_ADC_GetValue(&hadc1);
 80021c4:	4844      	ldr	r0, [pc, #272]	; (80022d8 <touch_read_coordinates+0x1a0>)
 80021c6:	f000 ff64 	bl	8003092 <HAL_ADC_GetValue>
 80021ca:	4602      	mov	r2, r0
 80021cc:	7dfb      	ldrb	r3, [r7, #23]
 80021ce:	b292      	uxth	r2, r2
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	f107 0118 	add.w	r1, r7, #24
 80021d6:	440b      	add	r3, r1
 80021d8:	f823 2c18 	strh.w	r2, [r3, #-24]
	for(adc_cnt = 0; adc_cnt < 5; adc_cnt++)
 80021dc:	7dfb      	ldrb	r3, [r7, #23]
 80021de:	3301      	adds	r3, #1
 80021e0:	75fb      	strb	r3, [r7, #23]
 80021e2:	7dfb      	ldrb	r3, [r7, #23]
 80021e4:	2b04      	cmp	r3, #4
 80021e6:	d9e3      	bls.n	80021b0 <touch_read_coordinates+0x78>
	}
	qsort(adc_values, sizeof(adc_values)/sizeof(*adc_values), sizeof(*adc_values), comp);
 80021e8:	4638      	mov	r0, r7
 80021ea:	4b3c      	ldr	r3, [pc, #240]	; (80022dc <touch_read_coordinates+0x1a4>)
 80021ec:	2202      	movs	r2, #2
 80021ee:	2105      	movs	r1, #5
 80021f0:	f006 ffc5 	bl	800917e <qsort>
	GPIOA->MODER |= GPIO_MODER_MODER2_Msk;
 80021f4:	4b37      	ldr	r3, [pc, #220]	; (80022d4 <touch_read_coordinates+0x19c>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a36      	ldr	r2, [pc, #216]	; (80022d4 <touch_read_coordinates+0x19c>)
 80021fa:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80021fe:	6013      	str	r3, [r2, #0]
	ret.x = adc_values[2];
 8002200:	88bb      	ldrh	r3, [r7, #4]
 8002202:	81bb      	strh	r3, [r7, #12]

	// TOUCH_XR output-high
	GPIOA->MODER &= ~GPIO_MODER_MODER3_Msk;
 8002204:	4b33      	ldr	r3, [pc, #204]	; (80022d4 <touch_read_coordinates+0x19c>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a32      	ldr	r2, [pc, #200]	; (80022d4 <touch_read_coordinates+0x19c>)
 800220a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800220e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODER3_0;
 8002210:	4b30      	ldr	r3, [pc, #192]	; (80022d4 <touch_read_coordinates+0x19c>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a2f      	ldr	r2, [pc, #188]	; (80022d4 <touch_read_coordinates+0x19c>)
 8002216:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800221a:	6013      	str	r3, [r2, #0]
	GPIOA->ODR |= GPIO_ODR_OD3;
 800221c:	4b2d      	ldr	r3, [pc, #180]	; (80022d4 <touch_read_coordinates+0x19c>)
 800221e:	695b      	ldr	r3, [r3, #20]
 8002220:	4a2c      	ldr	r2, [pc, #176]	; (80022d4 <touch_read_coordinates+0x19c>)
 8002222:	f043 0308 	orr.w	r3, r3, #8
 8002226:	6153      	str	r3, [r2, #20]
	HAL_Delay(5);
 8002228:	2005      	movs	r0, #5
 800222a:	f000 fd8b 	bl	8002d44 <HAL_Delay>
	// TOUCH_XL output-low
	GPIOA->MODER &= ~GPIO_MODER_MODER4_Msk;
 800222e:	4b29      	ldr	r3, [pc, #164]	; (80022d4 <touch_read_coordinates+0x19c>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a28      	ldr	r2, [pc, #160]	; (80022d4 <touch_read_coordinates+0x19c>)
 8002234:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002238:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODER4_0;
 800223a:	4b26      	ldr	r3, [pc, #152]	; (80022d4 <touch_read_coordinates+0x19c>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a25      	ldr	r2, [pc, #148]	; (80022d4 <touch_read_coordinates+0x19c>)
 8002240:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002244:	6013      	str	r3, [r2, #0]
	GPIOA->ODR &= ~TOUCH_XL_Pin;
 8002246:	4b23      	ldr	r3, [pc, #140]	; (80022d4 <touch_read_coordinates+0x19c>)
 8002248:	695b      	ldr	r3, [r3, #20]
 800224a:	4a22      	ldr	r2, [pc, #136]	; (80022d4 <touch_read_coordinates+0x19c>)
 800224c:	f023 0310 	bic.w	r3, r3, #16
 8002250:	6153      	str	r3, [r2, #20]
	// TOUCH_YD input-open
	GPIOA->MODER &= ~GPIO_MODER_MODER5_Msk;
 8002252:	4b20      	ldr	r3, [pc, #128]	; (80022d4 <touch_read_coordinates+0x19c>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a1f      	ldr	r2, [pc, #124]	; (80022d4 <touch_read_coordinates+0x19c>)
 8002258:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800225c:	6013      	str	r3, [r2, #0]
	// TOUCH_YU as ADC
	for(adc_cnt = 0; adc_cnt < 5; adc_cnt++)
 800225e:	2300      	movs	r3, #0
 8002260:	75fb      	strb	r3, [r7, #23]
 8002262:	e018      	b.n	8002296 <touch_read_coordinates+0x15e>
	{
		adc_select_y();
 8002264:	f7ff ff4a 	bl	80020fc <adc_select_y>
		HAL_ADC_Start(&hadc1);
 8002268:	481b      	ldr	r0, [pc, #108]	; (80022d8 <touch_read_coordinates+0x1a0>)
 800226a:	f000 fdd3 	bl	8002e14 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 500);
 800226e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002272:	4819      	ldr	r0, [pc, #100]	; (80022d8 <touch_read_coordinates+0x1a0>)
 8002274:	f000 fe82 	bl	8002f7c <HAL_ADC_PollForConversion>
		adc_values[adc_cnt] = HAL_ADC_GetValue(&hadc1);
 8002278:	4817      	ldr	r0, [pc, #92]	; (80022d8 <touch_read_coordinates+0x1a0>)
 800227a:	f000 ff0a 	bl	8003092 <HAL_ADC_GetValue>
 800227e:	4602      	mov	r2, r0
 8002280:	7dfb      	ldrb	r3, [r7, #23]
 8002282:	b292      	uxth	r2, r2
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	f107 0118 	add.w	r1, r7, #24
 800228a:	440b      	add	r3, r1
 800228c:	f823 2c18 	strh.w	r2, [r3, #-24]
	for(adc_cnt = 0; adc_cnt < 5; adc_cnt++)
 8002290:	7dfb      	ldrb	r3, [r7, #23]
 8002292:	3301      	adds	r3, #1
 8002294:	75fb      	strb	r3, [r7, #23]
 8002296:	7dfb      	ldrb	r3, [r7, #23]
 8002298:	2b04      	cmp	r3, #4
 800229a:	d9e3      	bls.n	8002264 <touch_read_coordinates+0x12c>
	}
	qsort(adc_values, sizeof(adc_values)/sizeof(*adc_values), sizeof(*adc_values), comp);
 800229c:	4638      	mov	r0, r7
 800229e:	4b0f      	ldr	r3, [pc, #60]	; (80022dc <touch_read_coordinates+0x1a4>)
 80022a0:	2202      	movs	r2, #2
 80022a2:	2105      	movs	r1, #5
 80022a4:	f006 ff6b 	bl	800917e <qsort>
	GPIOA->MODER |= GPIO_MODER_MODER3_Msk;
 80022a8:	4b0a      	ldr	r3, [pc, #40]	; (80022d4 <touch_read_coordinates+0x19c>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a09      	ldr	r2, [pc, #36]	; (80022d4 <touch_read_coordinates+0x19c>)
 80022ae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80022b2:	6013      	str	r3, [r2, #0]
	ret.y = adc_values[2];
 80022b4:	88bb      	ldrh	r3, [r7, #4]
 80022b6:	81fb      	strh	r3, [r7, #14]

	return ret;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	613b      	str	r3, [r7, #16]
 80022bc:	2300      	movs	r3, #0
 80022be:	8a3a      	ldrh	r2, [r7, #16]
 80022c0:	f362 030f 	bfi	r3, r2, #0, #16
 80022c4:	8a7a      	ldrh	r2, [r7, #18]
 80022c6:	f362 431f 	bfi	r3, r2, #16, #16
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3718      	adds	r7, #24
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	40020000 	.word	0x40020000
 80022d8:	20025c4c 	.word	0x20025c4c
 80022dc:	080017d7 	.word	0x080017d7

080022e0 <init_TOUCH_XR_as_adc>:



void init_TOUCH_XR_as_adc(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b086      	sub	sp, #24
 80022e4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e6:	1d3b      	adds	r3, r7, #4
 80022e8:	2200      	movs	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]
 80022ec:	605a      	str	r2, [r3, #4]
 80022ee:	609a      	str	r2, [r3, #8]
 80022f0:	60da      	str	r2, [r3, #12]
 80022f2:	611a      	str	r2, [r3, #16]

	// Disable interrupt on TOUCH_XR pin
	HAL_NVIC_DisableIRQ(EXTI3_IRQn);
 80022f4:	2009      	movs	r0, #9
 80022f6:	f001 fa30 	bl	800375a <HAL_NVIC_DisableIRQ>

	// Init analog mode on TOUCH_XR pin
    GPIO_InitStruct.Pin = TOUCH_XR_Pin;
 80022fa:	2308      	movs	r3, #8
 80022fc:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022fe:	2303      	movs	r3, #3
 8002300:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002302:	2300      	movs	r3, #0
 8002304:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(TOUCH_XR_GPIO_Port, &GPIO_InitStruct);
 8002306:	1d3b      	adds	r3, r7, #4
 8002308:	4619      	mov	r1, r3
 800230a:	4803      	ldr	r0, [pc, #12]	; (8002318 <init_TOUCH_XR_as_adc+0x38>)
 800230c:	f001 fcaa 	bl	8003c64 <HAL_GPIO_Init>
}
 8002310:	bf00      	nop
 8002312:	3718      	adds	r7, #24
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	40020000 	.word	0x40020000

0800231c <init_TOUCH_XR_as_interrupt>:



void init_TOUCH_XR_as_interrupt(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b086      	sub	sp, #24
 8002320:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002322:	1d3b      	adds	r3, r7, #4
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]
 8002328:	605a      	str	r2, [r3, #4]
 800232a:	609a      	str	r2, [r3, #8]
 800232c:	60da      	str	r2, [r3, #12]
 800232e:	611a      	str	r2, [r3, #16]

	// TOUCH_XL as input-open
	GPIOA->MODER &= ~GPIO_MODER_MODER4_Msk;
 8002330:	4b0e      	ldr	r3, [pc, #56]	; (800236c <init_TOUCH_XR_as_interrupt+0x50>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a0d      	ldr	r2, [pc, #52]	; (800236c <init_TOUCH_XR_as_interrupt+0x50>)
 8002336:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800233a:	6013      	str	r3, [r2, #0]

	// TOUCH_XR as interrupt input
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 800233c:	2308      	movs	r3, #8
 800233e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002340:	4b0b      	ldr	r3, [pc, #44]	; (8002370 <init_TOUCH_XR_as_interrupt+0x54>)
 8002342:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002344:	2301      	movs	r3, #1
 8002346:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002348:	1d3b      	adds	r3, r7, #4
 800234a:	4619      	mov	r1, r3
 800234c:	4807      	ldr	r0, [pc, #28]	; (800236c <init_TOUCH_XR_as_interrupt+0x50>)
 800234e:	f001 fc89 	bl	8003c64 <HAL_GPIO_Init>


	HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002352:	2200      	movs	r2, #0
 8002354:	2100      	movs	r1, #0
 8002356:	2009      	movs	r0, #9
 8002358:	f001 f9d5 	bl	8003706 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800235c:	2009      	movs	r0, #9
 800235e:	f001 f9ee 	bl	800373e <HAL_NVIC_EnableIRQ>
}
 8002362:	bf00      	nop
 8002364:	3718      	adds	r7, #24
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	40020000 	.word	0x40020000
 8002370:	10210000 	.word	0x10210000

08002374 <EXTI3_TOUCH_Callback>:



void EXTI3_TOUCH_Callback()
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
	init_TOUCH_XR_as_adc();
 8002378:	f7ff ffb2 	bl	80022e0 <init_TOUCH_XR_as_adc>
	g_touch_state = TOUCH_TOUCHED;
 800237c:	4b02      	ldr	r3, [pc, #8]	; (8002388 <EXTI3_TOUCH_Callback+0x14>)
 800237e:	2201      	movs	r2, #1
 8002380:	701a      	strb	r2, [r3, #0]
}
 8002382:	bf00      	nop
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	20025b2c 	.word	0x20025b2c

0800238c <touch_init>:



void touch_init()
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
	// TOUCH_XL as input-open
	GPIOA->MODER &= ~GPIO_MODER_MODER4_Msk;
 8002390:	4b07      	ldr	r3, [pc, #28]	; (80023b0 <touch_init+0x24>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a06      	ldr	r2, [pc, #24]	; (80023b0 <touch_init+0x24>)
 8002396:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800239a:	6013      	str	r3, [r2, #0]

	// Enable interrupt
	HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800239c:	2200      	movs	r2, #0
 800239e:	2100      	movs	r1, #0
 80023a0:	2009      	movs	r0, #9
 80023a2:	f001 f9b0 	bl	8003706 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80023a6:	2009      	movs	r0, #9
 80023a8:	f001 f9c9 	bl	800373e <HAL_NVIC_EnableIRQ>
}
 80023ac:	bf00      	nop
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	40020000 	.word	0x40020000

080023b4 <touch_process>:



void touch_process()
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
	switch(g_touch_state)
 80023b8:	4b12      	ldr	r3, [pc, #72]	; (8002404 <touch_process+0x50>)
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d019      	beq.n	80023f4 <touch_process+0x40>
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	dc1d      	bgt.n	8002400 <touch_process+0x4c>
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d002      	beq.n	80023ce <touch_process+0x1a>
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d00a      	beq.n	80023e2 <touch_process+0x2e>
	case TOUCH_RELEASED:
		init_TOUCH_XR_as_interrupt();
		g_touch_state = TOUCH_IDLE;
		break;
	}
}
 80023cc:	e018      	b.n	8002400 <touch_process+0x4c>
		g_touch_coordinates.x = 0;
 80023ce:	4b0e      	ldr	r3, [pc, #56]	; (8002408 <touch_process+0x54>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	801a      	strh	r2, [r3, #0]
		g_touch_coordinates.y = 0;
 80023d4:	4b0c      	ldr	r3, [pc, #48]	; (8002408 <touch_process+0x54>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	805a      	strh	r2, [r3, #2]
		g_touch_state = TOUCH_IDLE;
 80023da:	4b0a      	ldr	r3, [pc, #40]	; (8002404 <touch_process+0x50>)
 80023dc:	2200      	movs	r2, #0
 80023de:	701a      	strb	r2, [r3, #0]
		break;
 80023e0:	e00e      	b.n	8002400 <touch_process+0x4c>
		g_touch_coordinates = touch_read_coordinates();
 80023e2:	f7ff fea9 	bl	8002138 <touch_read_coordinates>
 80023e6:	4603      	mov	r3, r0
 80023e8:	4a07      	ldr	r2, [pc, #28]	; (8002408 <touch_process+0x54>)
 80023ea:	6013      	str	r3, [r2, #0]
		g_touch_state = TOUCH_RELEASED;
 80023ec:	4b05      	ldr	r3, [pc, #20]	; (8002404 <touch_process+0x50>)
 80023ee:	2202      	movs	r2, #2
 80023f0:	701a      	strb	r2, [r3, #0]
		break;
 80023f2:	e005      	b.n	8002400 <touch_process+0x4c>
		init_TOUCH_XR_as_interrupt();
 80023f4:	f7ff ff92 	bl	800231c <init_TOUCH_XR_as_interrupt>
		g_touch_state = TOUCH_IDLE;
 80023f8:	4b02      	ldr	r3, [pc, #8]	; (8002404 <touch_process+0x50>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	701a      	strb	r2, [r3, #0]
		break;
 80023fe:	bf00      	nop
}
 8002400:	bf00      	nop
 8002402:	bd80      	pop	{r7, pc}
 8002404:	20025b2c 	.word	0x20025b2c
 8002408:	20025b30 	.word	0x20025b30

0800240c <uart_init>:



//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void uart_init()
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
	__HAL_UART_ENABLE_IT(&huart6, UART_IT_RXNE);
 8002410:	4b06      	ldr	r3, [pc, #24]	; (800242c <uart_init+0x20>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	68da      	ldr	r2, [r3, #12]
 8002416:	4b05      	ldr	r3, [pc, #20]	; (800242c <uart_init+0x20>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f042 0220 	orr.w	r2, r2, #32
 800241e:	60da      	str	r2, [r3, #12]
}
 8002420:	bf00      	nop
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	20025f14 	.word	0x20025f14

08002430 <uart_tx_process>:



//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void uart_tx_process()
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
	static uint8_t last_nose = 0;
	uint8_t string_size;

	switch(g_uart_tx_state)
 8002436:	4b34      	ldr	r3, [pc, #208]	; (8002508 <uart_tx_process+0xd8>)
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	2b02      	cmp	r3, #2
 800243c:	d030      	beq.n	80024a0 <uart_tx_process+0x70>
 800243e:	2b02      	cmp	r3, #2
 8002440:	dc5e      	bgt.n	8002500 <uart_tx_process+0xd0>
 8002442:	2b00      	cmp	r3, #0
 8002444:	d002      	beq.n	800244c <uart_tx_process+0x1c>
 8002446:	2b01      	cmp	r3, #1
 8002448:	d00a      	beq.n	8002460 <uart_tx_process+0x30>
			g_uart_tx_state = UART_TX_TRANSMIT;
		else if((last_nose != g_uart_tx_nose) && (g_uart_tx_tail == g_uart_tx_nose))
			g_uart_tx_state = UART_TX_IDLE;
		break;
	}
}
 800244a:	e059      	b.n	8002500 <uart_tx_process+0xd0>
		if(g_uart_tx_nose != g_uart_tx_tail)
 800244c:	4b2f      	ldr	r3, [pc, #188]	; (800250c <uart_tx_process+0xdc>)
 800244e:	881a      	ldrh	r2, [r3, #0]
 8002450:	4b2f      	ldr	r3, [pc, #188]	; (8002510 <uart_tx_process+0xe0>)
 8002452:	881b      	ldrh	r3, [r3, #0]
 8002454:	429a      	cmp	r2, r3
 8002456:	d050      	beq.n	80024fa <uart_tx_process+0xca>
			g_uart_tx_state = UART_TX_TRANSMIT;
 8002458:	4b2b      	ldr	r3, [pc, #172]	; (8002508 <uart_tx_process+0xd8>)
 800245a:	2201      	movs	r2, #1
 800245c:	701a      	strb	r2, [r3, #0]
		break;
 800245e:	e04c      	b.n	80024fa <uart_tx_process+0xca>
		string_size = strlen(g_uart_tx_buffer + (g_uart_tx_nose)) + 1;
 8002460:	4b2a      	ldr	r3, [pc, #168]	; (800250c <uart_tx_process+0xdc>)
 8002462:	881b      	ldrh	r3, [r3, #0]
 8002464:	461a      	mov	r2, r3
 8002466:	4b2b      	ldr	r3, [pc, #172]	; (8002514 <uart_tx_process+0xe4>)
 8002468:	4413      	add	r3, r2
 800246a:	4618      	mov	r0, r3
 800246c:	f7fd ff28 	bl	80002c0 <strlen>
 8002470:	4603      	mov	r3, r0
 8002472:	b2db      	uxtb	r3, r3
 8002474:	3301      	adds	r3, #1
 8002476:	71fb      	strb	r3, [r7, #7]
		HAL_UART_Transmit_IT(
 8002478:	4b24      	ldr	r3, [pc, #144]	; (800250c <uart_tx_process+0xdc>)
 800247a:	881b      	ldrh	r3, [r3, #0]
 800247c:	461a      	mov	r2, r3
 800247e:	4b25      	ldr	r3, [pc, #148]	; (8002514 <uart_tx_process+0xe4>)
 8002480:	4413      	add	r3, r2
 8002482:	79fa      	ldrb	r2, [r7, #7]
 8002484:	b292      	uxth	r2, r2
 8002486:	4619      	mov	r1, r3
 8002488:	4823      	ldr	r0, [pc, #140]	; (8002518 <uart_tx_process+0xe8>)
 800248a:	f005 fbe0 	bl	8007c4e <HAL_UART_Transmit_IT>
		last_nose = g_uart_tx_nose;
 800248e:	4b1f      	ldr	r3, [pc, #124]	; (800250c <uart_tx_process+0xdc>)
 8002490:	881b      	ldrh	r3, [r3, #0]
 8002492:	b2da      	uxtb	r2, r3
 8002494:	4b21      	ldr	r3, [pc, #132]	; (800251c <uart_tx_process+0xec>)
 8002496:	701a      	strb	r2, [r3, #0]
		g_uart_tx_state = UART_TX_TRANSMITING;
 8002498:	4b1b      	ldr	r3, [pc, #108]	; (8002508 <uart_tx_process+0xd8>)
 800249a:	2202      	movs	r2, #2
 800249c:	701a      	strb	r2, [r3, #0]
		break;
 800249e:	e02f      	b.n	8002500 <uart_tx_process+0xd0>
		if((last_nose == g_uart_tx_nose))
 80024a0:	4b1e      	ldr	r3, [pc, #120]	; (800251c <uart_tx_process+0xec>)
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	b29a      	uxth	r2, r3
 80024a6:	4b19      	ldr	r3, [pc, #100]	; (800250c <uart_tx_process+0xdc>)
 80024a8:	881b      	ldrh	r3, [r3, #0]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d103      	bne.n	80024b6 <uart_tx_process+0x86>
			g_uart_tx_state = UART_TX_TRANSMITING;
 80024ae:	4b16      	ldr	r3, [pc, #88]	; (8002508 <uart_tx_process+0xd8>)
 80024b0:	2202      	movs	r2, #2
 80024b2:	701a      	strb	r2, [r3, #0]
		break;
 80024b4:	e023      	b.n	80024fe <uart_tx_process+0xce>
		else if((last_nose != g_uart_tx_nose) && (g_uart_tx_tail != g_uart_tx_nose))
 80024b6:	4b19      	ldr	r3, [pc, #100]	; (800251c <uart_tx_process+0xec>)
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	b29a      	uxth	r2, r3
 80024bc:	4b13      	ldr	r3, [pc, #76]	; (800250c <uart_tx_process+0xdc>)
 80024be:	881b      	ldrh	r3, [r3, #0]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d009      	beq.n	80024d8 <uart_tx_process+0xa8>
 80024c4:	4b12      	ldr	r3, [pc, #72]	; (8002510 <uart_tx_process+0xe0>)
 80024c6:	881a      	ldrh	r2, [r3, #0]
 80024c8:	4b10      	ldr	r3, [pc, #64]	; (800250c <uart_tx_process+0xdc>)
 80024ca:	881b      	ldrh	r3, [r3, #0]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d003      	beq.n	80024d8 <uart_tx_process+0xa8>
			g_uart_tx_state = UART_TX_TRANSMIT;
 80024d0:	4b0d      	ldr	r3, [pc, #52]	; (8002508 <uart_tx_process+0xd8>)
 80024d2:	2201      	movs	r2, #1
 80024d4:	701a      	strb	r2, [r3, #0]
		break;
 80024d6:	e012      	b.n	80024fe <uart_tx_process+0xce>
		else if((last_nose != g_uart_tx_nose) && (g_uart_tx_tail == g_uart_tx_nose))
 80024d8:	4b10      	ldr	r3, [pc, #64]	; (800251c <uart_tx_process+0xec>)
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	b29a      	uxth	r2, r3
 80024de:	4b0b      	ldr	r3, [pc, #44]	; (800250c <uart_tx_process+0xdc>)
 80024e0:	881b      	ldrh	r3, [r3, #0]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d00b      	beq.n	80024fe <uart_tx_process+0xce>
 80024e6:	4b0a      	ldr	r3, [pc, #40]	; (8002510 <uart_tx_process+0xe0>)
 80024e8:	881a      	ldrh	r2, [r3, #0]
 80024ea:	4b08      	ldr	r3, [pc, #32]	; (800250c <uart_tx_process+0xdc>)
 80024ec:	881b      	ldrh	r3, [r3, #0]
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d105      	bne.n	80024fe <uart_tx_process+0xce>
			g_uart_tx_state = UART_TX_IDLE;
 80024f2:	4b05      	ldr	r3, [pc, #20]	; (8002508 <uart_tx_process+0xd8>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	701a      	strb	r2, [r3, #0]
		break;
 80024f8:	e001      	b.n	80024fe <uart_tx_process+0xce>
		break;
 80024fa:	bf00      	nop
 80024fc:	e000      	b.n	8002500 <uart_tx_process+0xd0>
		break;
 80024fe:	bf00      	nop
}
 8002500:	bf00      	nop
 8002502:	3708      	adds	r7, #8
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	20025b34 	.word	0x20025b34
 800250c:	20025c38 	.word	0x20025c38
 8002510:	20025c3a 	.word	0x20025c3a
 8002514:	20025b38 	.word	0x20025b38
 8002518:	20025f14 	.word	0x20025f14
 800251c:	20025c42 	.word	0x20025c42

08002520 <uart_write>:



//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void uart_write(uint8_t* buff)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
	uint8_t string_size = strlen(buff) + 1;
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f7fd fec9 	bl	80002c0 <strlen>
 800252e:	4603      	mov	r3, r0
 8002530:	b2db      	uxtb	r3, r3
 8002532:	3301      	adds	r3, #1
 8002534:	73fb      	strb	r3, [r7, #15]

	if(
			((g_uart_tx_tail - g_uart_tx_nose >= 0) && (string_size < UART_TX_BUFFER_MAX - (g_uart_tx_tail - g_uart_tx_nose))) ||
 8002536:	4b3e      	ldr	r3, [pc, #248]	; (8002630 <uart_write+0x110>)
 8002538:	881b      	ldrh	r3, [r3, #0]
 800253a:	461a      	mov	r2, r3
 800253c:	4b3d      	ldr	r3, [pc, #244]	; (8002634 <uart_write+0x114>)
 800253e:	881b      	ldrh	r3, [r3, #0]
 8002540:	1ad3      	subs	r3, r2, r3
	if(
 8002542:	2b00      	cmp	r3, #0
 8002544:	db0a      	blt.n	800255c <uart_write+0x3c>
			((g_uart_tx_tail - g_uart_tx_nose >= 0) && (string_size < UART_TX_BUFFER_MAX - (g_uart_tx_tail - g_uart_tx_nose))) ||
 8002546:	7bfa      	ldrb	r2, [r7, #15]
 8002548:	4b39      	ldr	r3, [pc, #228]	; (8002630 <uart_write+0x110>)
 800254a:	881b      	ldrh	r3, [r3, #0]
 800254c:	4619      	mov	r1, r3
 800254e:	4b39      	ldr	r3, [pc, #228]	; (8002634 <uart_write+0x114>)
 8002550:	881b      	ldrh	r3, [r3, #0]
 8002552:	1acb      	subs	r3, r1, r3
 8002554:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8002558:	429a      	cmp	r2, r3
 800255a:	db10      	blt.n	800257e <uart_write+0x5e>
			((g_uart_tx_tail - g_uart_tx_nose <= 0) && (string_size < g_uart_tx_nose - g_uart_tx_tail)))
 800255c:	4b34      	ldr	r3, [pc, #208]	; (8002630 <uart_write+0x110>)
 800255e:	881b      	ldrh	r3, [r3, #0]
 8002560:	461a      	mov	r2, r3
 8002562:	4b34      	ldr	r3, [pc, #208]	; (8002634 <uart_write+0x114>)
 8002564:	881b      	ldrh	r3, [r3, #0]
 8002566:	1ad3      	subs	r3, r2, r3
			((g_uart_tx_tail - g_uart_tx_nose >= 0) && (string_size < UART_TX_BUFFER_MAX - (g_uart_tx_tail - g_uart_tx_nose))) ||
 8002568:	2b00      	cmp	r3, #0
 800256a:	dc5c      	bgt.n	8002626 <uart_write+0x106>
			((g_uart_tx_tail - g_uart_tx_nose <= 0) && (string_size < g_uart_tx_nose - g_uart_tx_tail)))
 800256c:	7bfa      	ldrb	r2, [r7, #15]
 800256e:	4b31      	ldr	r3, [pc, #196]	; (8002634 <uart_write+0x114>)
 8002570:	881b      	ldrh	r3, [r3, #0]
 8002572:	4619      	mov	r1, r3
 8002574:	4b2e      	ldr	r3, [pc, #184]	; (8002630 <uart_write+0x110>)
 8002576:	881b      	ldrh	r3, [r3, #0]
 8002578:	1acb      	subs	r3, r1, r3
 800257a:	429a      	cmp	r2, r3
 800257c:	da53      	bge.n	8002626 <uart_write+0x106>
	{
		if(((g_uart_tx_tail - g_uart_tx_nose >= 0)) && (string_size > (UART_TX_BUFFER_MAX - g_uart_tx_tail)))
 800257e:	4b2c      	ldr	r3, [pc, #176]	; (8002630 <uart_write+0x110>)
 8002580:	881b      	ldrh	r3, [r3, #0]
 8002582:	461a      	mov	r2, r3
 8002584:	4b2b      	ldr	r3, [pc, #172]	; (8002634 <uart_write+0x114>)
 8002586:	881b      	ldrh	r3, [r3, #0]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b00      	cmp	r3, #0
 800258c:	db2f      	blt.n	80025ee <uart_write+0xce>
 800258e:	7bfa      	ldrb	r2, [r7, #15]
 8002590:	4b27      	ldr	r3, [pc, #156]	; (8002630 <uart_write+0x110>)
 8002592:	881b      	ldrh	r3, [r3, #0]
 8002594:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8002598:	429a      	cmp	r2, r3
 800259a:	dd28      	ble.n	80025ee <uart_write+0xce>
		{
			strncpy(g_uart_tx_buffer + g_uart_tx_tail, buff, UART_TX_BUFFER_MAX - g_uart_tx_tail);
 800259c:	4b24      	ldr	r3, [pc, #144]	; (8002630 <uart_write+0x110>)
 800259e:	881b      	ldrh	r3, [r3, #0]
 80025a0:	461a      	mov	r2, r3
 80025a2:	4b25      	ldr	r3, [pc, #148]	; (8002638 <uart_write+0x118>)
 80025a4:	4413      	add	r3, r2
 80025a6:	4a22      	ldr	r2, [pc, #136]	; (8002630 <uart_write+0x110>)
 80025a8:	8812      	ldrh	r2, [r2, #0]
 80025aa:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 80025ae:	6879      	ldr	r1, [r7, #4]
 80025b0:	4618      	mov	r0, r3
 80025b2:	f006 ffc3 	bl	800953c <strncpy>
			string_size -= (UART_TX_BUFFER_MAX - g_uart_tx_tail);
 80025b6:	4b1e      	ldr	r3, [pc, #120]	; (8002630 <uart_write+0x110>)
 80025b8:	881b      	ldrh	r3, [r3, #0]
 80025ba:	b2da      	uxtb	r2, r3
 80025bc:	7bfb      	ldrb	r3, [r7, #15]
 80025be:	4413      	add	r3, r2
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	3301      	adds	r3, #1
 80025c4:	73fb      	strb	r3, [r7, #15]
			strncpy(g_uart_tx_buffer + 0, buff + (UART_TX_BUFFER_MAX - g_uart_tx_tail), string_size);
 80025c6:	4b1a      	ldr	r3, [pc, #104]	; (8002630 <uart_write+0x110>)
 80025c8:	881b      	ldrh	r3, [r3, #0]
 80025ca:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80025ce:	461a      	mov	r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	4413      	add	r3, r2
 80025d4:	7bfa      	ldrb	r2, [r7, #15]
 80025d6:	4619      	mov	r1, r3
 80025d8:	4817      	ldr	r0, [pc, #92]	; (8002638 <uart_write+0x118>)
 80025da:	f006 ffaf 	bl	800953c <strncpy>
			g_uart_tx_tail = 0;
 80025de:	4b14      	ldr	r3, [pc, #80]	; (8002630 <uart_write+0x110>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	801a      	strh	r2, [r3, #0]
			g_uart_tx_tail = string_size;
 80025e4:	7bfb      	ldrb	r3, [r7, #15]
 80025e6:	b29a      	uxth	r2, r3
 80025e8:	4b11      	ldr	r3, [pc, #68]	; (8002630 <uart_write+0x110>)
 80025ea:	801a      	strh	r2, [r3, #0]
				g_uart_tx_tail += string_size;
			else
				g_uart_tx_tail = 0;
		}
	}
}
 80025ec:	e01b      	b.n	8002626 <uart_write+0x106>
			strcpy(g_uart_tx_buffer + g_uart_tx_tail, buff);
 80025ee:	4b10      	ldr	r3, [pc, #64]	; (8002630 <uart_write+0x110>)
 80025f0:	881b      	ldrh	r3, [r3, #0]
 80025f2:	461a      	mov	r2, r3
 80025f4:	4b10      	ldr	r3, [pc, #64]	; (8002638 <uart_write+0x118>)
 80025f6:	4413      	add	r3, r2
 80025f8:	6879      	ldr	r1, [r7, #4]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f006 ff84 	bl	8009508 <strcpy>
			if(g_uart_tx_tail + string_size < UART_TX_BUFFER_MAX)
 8002600:	4b0b      	ldr	r3, [pc, #44]	; (8002630 <uart_write+0x110>)
 8002602:	881b      	ldrh	r3, [r3, #0]
 8002604:	461a      	mov	r2, r3
 8002606:	7bfb      	ldrb	r3, [r7, #15]
 8002608:	4413      	add	r3, r2
 800260a:	2bfe      	cmp	r3, #254	; 0xfe
 800260c:	dc08      	bgt.n	8002620 <uart_write+0x100>
				g_uart_tx_tail += string_size;
 800260e:	7bfb      	ldrb	r3, [r7, #15]
 8002610:	b29a      	uxth	r2, r3
 8002612:	4b07      	ldr	r3, [pc, #28]	; (8002630 <uart_write+0x110>)
 8002614:	881b      	ldrh	r3, [r3, #0]
 8002616:	4413      	add	r3, r2
 8002618:	b29a      	uxth	r2, r3
 800261a:	4b05      	ldr	r3, [pc, #20]	; (8002630 <uart_write+0x110>)
 800261c:	801a      	strh	r2, [r3, #0]
}
 800261e:	e002      	b.n	8002626 <uart_write+0x106>
				g_uart_tx_tail = 0;
 8002620:	4b03      	ldr	r3, [pc, #12]	; (8002630 <uart_write+0x110>)
 8002622:	2200      	movs	r2, #0
 8002624:	801a      	strh	r2, [r3, #0]
}
 8002626:	bf00      	nop
 8002628:	3710      	adds	r7, #16
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	20025c3a 	.word	0x20025c3a
 8002634:	20025c38 	.word	0x20025c38
 8002638:	20025b38 	.word	0x20025b38

0800263c <HAL_UART_TxCpltCallback>:



//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
	g_uart_tx_nose += strlen(g_uart_tx_buffer + g_uart_tx_nose) + 1;
 8002644:	4b0e      	ldr	r3, [pc, #56]	; (8002680 <HAL_UART_TxCpltCallback+0x44>)
 8002646:	881b      	ldrh	r3, [r3, #0]
 8002648:	461a      	mov	r2, r3
 800264a:	4b0e      	ldr	r3, [pc, #56]	; (8002684 <HAL_UART_TxCpltCallback+0x48>)
 800264c:	4413      	add	r3, r2
 800264e:	4618      	mov	r0, r3
 8002650:	f7fd fe36 	bl	80002c0 <strlen>
 8002654:	4603      	mov	r3, r0
 8002656:	b29a      	uxth	r2, r3
 8002658:	4b09      	ldr	r3, [pc, #36]	; (8002680 <HAL_UART_TxCpltCallback+0x44>)
 800265a:	881b      	ldrh	r3, [r3, #0]
 800265c:	4413      	add	r3, r2
 800265e:	b29b      	uxth	r3, r3
 8002660:	3301      	adds	r3, #1
 8002662:	b29a      	uxth	r2, r3
 8002664:	4b06      	ldr	r3, [pc, #24]	; (8002680 <HAL_UART_TxCpltCallback+0x44>)
 8002666:	801a      	strh	r2, [r3, #0]

	if(g_uart_tx_nose >= UART_TX_BUFFER_MAX)
 8002668:	4b05      	ldr	r3, [pc, #20]	; (8002680 <HAL_UART_TxCpltCallback+0x44>)
 800266a:	881b      	ldrh	r3, [r3, #0]
 800266c:	2bfe      	cmp	r3, #254	; 0xfe
 800266e:	d902      	bls.n	8002676 <HAL_UART_TxCpltCallback+0x3a>
		g_uart_tx_nose = 0;
 8002670:	4b03      	ldr	r3, [pc, #12]	; (8002680 <HAL_UART_TxCpltCallback+0x44>)
 8002672:	2200      	movs	r2, #0
 8002674:	801a      	strh	r2, [r3, #0]

}
 8002676:	bf00      	nop
 8002678:	3708      	adds	r7, #8
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	20025c38 	.word	0x20025c38
 8002684:	20025b38 	.word	0x20025b38

08002688 <uart_rx_process>:



//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void uart_rx_process()
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
	uint8_t string_size = strlen(g_uart_rx_buffer + g_uart_rx_nose + 1) + 1;
 800268e:	4b4b      	ldr	r3, [pc, #300]	; (80027bc <uart_rx_process+0x134>)
 8002690:	881b      	ldrh	r3, [r3, #0]
 8002692:	3301      	adds	r3, #1
 8002694:	4a4a      	ldr	r2, [pc, #296]	; (80027c0 <uart_rx_process+0x138>)
 8002696:	4413      	add	r3, r2
 8002698:	4618      	mov	r0, r3
 800269a:	f7fd fe11 	bl	80002c0 <strlen>
 800269e:	4603      	mov	r3, r0
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	3301      	adds	r3, #1
 80026a4:	71fb      	strb	r3, [r7, #7]

	switch(g_uart_rx_state)
 80026a6:	4b47      	ldr	r3, [pc, #284]	; (80027c4 <uart_rx_process+0x13c>)
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d002      	beq.n	80026b4 <uart_rx_process+0x2c>
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d008      	beq.n	80026c4 <uart_rx_process+0x3c>
			g_uart_rx_state = UART_RX_IDLE;
		break;


	}
}
 80026b2:	e07e      	b.n	80027b2 <uart_rx_process+0x12a>
		if(g_uart_rx_cnt)
 80026b4:	4b44      	ldr	r3, [pc, #272]	; (80027c8 <uart_rx_process+0x140>)
 80026b6:	881b      	ldrh	r3, [r3, #0]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d077      	beq.n	80027ac <uart_rx_process+0x124>
			g_uart_rx_state = UART_RX_RECEIVE;
 80026bc:	4b41      	ldr	r3, [pc, #260]	; (80027c4 <uart_rx_process+0x13c>)
 80026be:	2201      	movs	r2, #1
 80026c0:	701a      	strb	r2, [r3, #0]
		break;
 80026c2:	e073      	b.n	80027ac <uart_rx_process+0x124>
		if(g_uart_rx_nose < g_uart_rx_tail &&
 80026c4:	4b3d      	ldr	r3, [pc, #244]	; (80027bc <uart_rx_process+0x134>)
 80026c6:	881a      	ldrh	r2, [r3, #0]
 80026c8:	4b40      	ldr	r3, [pc, #256]	; (80027cc <uart_rx_process+0x144>)
 80026ca:	881b      	ldrh	r3, [r3, #0]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d21c      	bcs.n	800270a <uart_rx_process+0x82>
				(g_uart_rx_buffer[g_uart_rx_nose + string_size - 2] == '\r') &&
 80026d0:	4b3a      	ldr	r3, [pc, #232]	; (80027bc <uart_rx_process+0x134>)
 80026d2:	881b      	ldrh	r3, [r3, #0]
 80026d4:	461a      	mov	r2, r3
 80026d6:	79fb      	ldrb	r3, [r7, #7]
 80026d8:	4413      	add	r3, r2
 80026da:	3b02      	subs	r3, #2
 80026dc:	4a38      	ldr	r2, [pc, #224]	; (80027c0 <uart_rx_process+0x138>)
 80026de:	5cd3      	ldrb	r3, [r2, r3]
		if(g_uart_rx_nose < g_uart_rx_tail &&
 80026e0:	2b0d      	cmp	r3, #13
 80026e2:	d112      	bne.n	800270a <uart_rx_process+0x82>
				(g_uart_rx_buffer[g_uart_rx_nose + string_size - 1] == '\n'))
 80026e4:	4b35      	ldr	r3, [pc, #212]	; (80027bc <uart_rx_process+0x134>)
 80026e6:	881b      	ldrh	r3, [r3, #0]
 80026e8:	461a      	mov	r2, r3
 80026ea:	79fb      	ldrb	r3, [r7, #7]
 80026ec:	4413      	add	r3, r2
 80026ee:	3b01      	subs	r3, #1
 80026f0:	4a33      	ldr	r2, [pc, #204]	; (80027c0 <uart_rx_process+0x138>)
 80026f2:	5cd3      	ldrb	r3, [r2, r3]
				(g_uart_rx_buffer[g_uart_rx_nose + string_size - 2] == '\r') &&
 80026f4:	2b0a      	cmp	r3, #10
 80026f6:	d108      	bne.n	800270a <uart_rx_process+0x82>
			serial_protocol(g_uart_rx_buffer + g_uart_rx_nose + 1);
 80026f8:	4b30      	ldr	r3, [pc, #192]	; (80027bc <uart_rx_process+0x134>)
 80026fa:	881b      	ldrh	r3, [r3, #0]
 80026fc:	3301      	adds	r3, #1
 80026fe:	4a30      	ldr	r2, [pc, #192]	; (80027c0 <uart_rx_process+0x138>)
 8002700:	4413      	add	r3, r2
 8002702:	4618      	mov	r0, r3
 8002704:	f000 f92c 	bl	8002960 <serial_protocol>
 8002708:	e02e      	b.n	8002768 <uart_rx_process+0xe0>
		else if((g_uart_rx_nose > g_uart_rx_tail) &&
 800270a:	4b2c      	ldr	r3, [pc, #176]	; (80027bc <uart_rx_process+0x134>)
 800270c:	881a      	ldrh	r2, [r3, #0]
 800270e:	4b2f      	ldr	r3, [pc, #188]	; (80027cc <uart_rx_process+0x144>)
 8002710:	881b      	ldrh	r3, [r3, #0]
 8002712:	429a      	cmp	r2, r3
 8002714:	d928      	bls.n	8002768 <uart_rx_process+0xe0>
							(g_uart_rx_buffer[strlen(g_uart_rx_buffer) - 1] == '\n'))
 8002716:	482a      	ldr	r0, [pc, #168]	; (80027c0 <uart_rx_process+0x138>)
 8002718:	f7fd fdd2 	bl	80002c0 <strlen>
 800271c:	4603      	mov	r3, r0
 800271e:	3b01      	subs	r3, #1
 8002720:	4a27      	ldr	r2, [pc, #156]	; (80027c0 <uart_rx_process+0x138>)
 8002722:	5cd3      	ldrb	r3, [r2, r3]
		else if((g_uart_rx_nose > g_uart_rx_tail) &&
 8002724:	2b0a      	cmp	r3, #10
 8002726:	d11f      	bne.n	8002768 <uart_rx_process+0xe0>
			strncpy(g_uart_rx_tmp_buf, g_uart_rx_buffer + g_uart_rx_nose + 1, string_size);
 8002728:	4b24      	ldr	r3, [pc, #144]	; (80027bc <uart_rx_process+0x134>)
 800272a:	881b      	ldrh	r3, [r3, #0]
 800272c:	3301      	adds	r3, #1
 800272e:	4a24      	ldr	r2, [pc, #144]	; (80027c0 <uart_rx_process+0x138>)
 8002730:	4413      	add	r3, r2
 8002732:	79fa      	ldrb	r2, [r7, #7]
 8002734:	4619      	mov	r1, r3
 8002736:	4826      	ldr	r0, [pc, #152]	; (80027d0 <uart_rx_process+0x148>)
 8002738:	f006 ff00 	bl	800953c <strncpy>
			string_size = strlen(g_uart_rx_buffer + 1) + 1;
 800273c:	4b25      	ldr	r3, [pc, #148]	; (80027d4 <uart_rx_process+0x14c>)
 800273e:	4618      	mov	r0, r3
 8002740:	f7fd fdbe 	bl	80002c0 <strlen>
 8002744:	4603      	mov	r3, r0
 8002746:	b2db      	uxtb	r3, r3
 8002748:	3301      	adds	r3, #1
 800274a:	71fb      	strb	r3, [r7, #7]
			strncpy(g_uart_rx_tmp_buf + strlen(g_uart_rx_tmp_buf), g_uart_rx_buffer , string_size);
 800274c:	4820      	ldr	r0, [pc, #128]	; (80027d0 <uart_rx_process+0x148>)
 800274e:	f7fd fdb7 	bl	80002c0 <strlen>
 8002752:	4603      	mov	r3, r0
 8002754:	4a1e      	ldr	r2, [pc, #120]	; (80027d0 <uart_rx_process+0x148>)
 8002756:	4413      	add	r3, r2
 8002758:	79fa      	ldrb	r2, [r7, #7]
 800275a:	4919      	ldr	r1, [pc, #100]	; (80027c0 <uart_rx_process+0x138>)
 800275c:	4618      	mov	r0, r3
 800275e:	f006 feed 	bl	800953c <strncpy>
			serial_protocol(g_uart_rx_tmp_buf);
 8002762:	481b      	ldr	r0, [pc, #108]	; (80027d0 <uart_rx_process+0x148>)
 8002764:	f000 f8fc 	bl	8002960 <serial_protocol>
		g_uart_rx_cnt--;
 8002768:	4b17      	ldr	r3, [pc, #92]	; (80027c8 <uart_rx_process+0x140>)
 800276a:	881b      	ldrh	r3, [r3, #0]
 800276c:	3b01      	subs	r3, #1
 800276e:	b29a      	uxth	r2, r3
 8002770:	4b15      	ldr	r3, [pc, #84]	; (80027c8 <uart_rx_process+0x140>)
 8002772:	801a      	strh	r2, [r3, #0]
		if(g_uart_rx_nose + string_size < UART_RX_BUFFER_MAX)
 8002774:	4b11      	ldr	r3, [pc, #68]	; (80027bc <uart_rx_process+0x134>)
 8002776:	881b      	ldrh	r3, [r3, #0]
 8002778:	461a      	mov	r2, r3
 800277a:	79fb      	ldrb	r3, [r7, #7]
 800277c:	4413      	add	r3, r2
 800277e:	2bfe      	cmp	r3, #254	; 0xfe
 8002780:	dc08      	bgt.n	8002794 <uart_rx_process+0x10c>
			g_uart_rx_nose += string_size;
 8002782:	79fb      	ldrb	r3, [r7, #7]
 8002784:	b29a      	uxth	r2, r3
 8002786:	4b0d      	ldr	r3, [pc, #52]	; (80027bc <uart_rx_process+0x134>)
 8002788:	881b      	ldrh	r3, [r3, #0]
 800278a:	4413      	add	r3, r2
 800278c:	b29a      	uxth	r2, r3
 800278e:	4b0b      	ldr	r3, [pc, #44]	; (80027bc <uart_rx_process+0x134>)
 8002790:	801a      	strh	r2, [r3, #0]
 8002792:	e003      	b.n	800279c <uart_rx_process+0x114>
			g_uart_rx_nose = string_size;
 8002794:	79fb      	ldrb	r3, [r7, #7]
 8002796:	b29a      	uxth	r2, r3
 8002798:	4b08      	ldr	r3, [pc, #32]	; (80027bc <uart_rx_process+0x134>)
 800279a:	801a      	strh	r2, [r3, #0]
		if(!g_uart_rx_cnt)
 800279c:	4b0a      	ldr	r3, [pc, #40]	; (80027c8 <uart_rx_process+0x140>)
 800279e:	881b      	ldrh	r3, [r3, #0]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d105      	bne.n	80027b0 <uart_rx_process+0x128>
			g_uart_rx_state = UART_RX_IDLE;
 80027a4:	4b07      	ldr	r3, [pc, #28]	; (80027c4 <uart_rx_process+0x13c>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	701a      	strb	r2, [r3, #0]
		break;
 80027aa:	e001      	b.n	80027b0 <uart_rx_process+0x128>
		break;
 80027ac:	bf00      	nop
 80027ae:	e000      	b.n	80027b2 <uart_rx_process+0x12a>
		break;
 80027b0:	bf00      	nop
}
 80027b2:	bf00      	nop
 80027b4:	3708      	adds	r7, #8
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	20025c3c 	.word	0x20025c3c
 80027c0:	20025e14 	.word	0x20025e14
 80027c4:	20025b35 	.word	0x20025b35
 80027c8:	20025c40 	.word	0x20025c40
 80027cc:	20025c3e 	.word	0x20025c3e
 80027d0:	20025de0 	.word	0x20025de0
 80027d4:	20025e15 	.word	0x20025e15

080027d8 <uart_rx_callback>:



//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void uart_rx_callback()
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
	g_uart_rx_tail++;
 80027dc:	4b5b      	ldr	r3, [pc, #364]	; (800294c <uart_rx_callback+0x174>)
 80027de:	881b      	ldrh	r3, [r3, #0]
 80027e0:	3301      	adds	r3, #1
 80027e2:	b29a      	uxth	r2, r3
 80027e4:	4b59      	ldr	r3, [pc, #356]	; (800294c <uart_rx_callback+0x174>)
 80027e6:	801a      	strh	r2, [r3, #0]

	if((g_uart_rx_tail < (UART_RX_BUFFER_MAX - 1)) && ((g_uart_rx_nose < g_uart_rx_tail) || (g_uart_rx_nose - g_uart_rx_tail > 2/*1*/)))
 80027e8:	4b58      	ldr	r3, [pc, #352]	; (800294c <uart_rx_callback+0x174>)
 80027ea:	881b      	ldrh	r3, [r3, #0]
 80027ec:	2bfd      	cmp	r3, #253	; 0xfd
 80027ee:	d847      	bhi.n	8002880 <uart_rx_callback+0xa8>
 80027f0:	4b57      	ldr	r3, [pc, #348]	; (8002950 <uart_rx_callback+0x178>)
 80027f2:	881a      	ldrh	r2, [r3, #0]
 80027f4:	4b55      	ldr	r3, [pc, #340]	; (800294c <uart_rx_callback+0x174>)
 80027f6:	881b      	ldrh	r3, [r3, #0]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d307      	bcc.n	800280c <uart_rx_callback+0x34>
 80027fc:	4b54      	ldr	r3, [pc, #336]	; (8002950 <uart_rx_callback+0x178>)
 80027fe:	881b      	ldrh	r3, [r3, #0]
 8002800:	461a      	mov	r2, r3
 8002802:	4b52      	ldr	r3, [pc, #328]	; (800294c <uart_rx_callback+0x174>)
 8002804:	881b      	ldrh	r3, [r3, #0]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	2b02      	cmp	r3, #2
 800280a:	dd39      	ble.n	8002880 <uart_rx_callback+0xa8>
	{
		g_uart_rx_buffer[g_uart_rx_tail] = (0x00FFU & USART6->DR);//253
 800280c:	4b51      	ldr	r3, [pc, #324]	; (8002954 <uart_rx_callback+0x17c>)
 800280e:	6859      	ldr	r1, [r3, #4]
 8002810:	4b4e      	ldr	r3, [pc, #312]	; (800294c <uart_rx_callback+0x174>)
 8002812:	881b      	ldrh	r3, [r3, #0]
 8002814:	461a      	mov	r2, r3
 8002816:	b2c9      	uxtb	r1, r1
 8002818:	4b4f      	ldr	r3, [pc, #316]	; (8002958 <uart_rx_callback+0x180>)
 800281a:	5499      	strb	r1, [r3, r2]
		if((g_uart_rx_buffer[g_uart_rx_tail] == '\r') /*&& ((g_uart_rx_nose < g_uart_rx_tail) || (g_uart_rx_nose - g_uart_rx_tail > 2))*/)
 800281c:	4b4b      	ldr	r3, [pc, #300]	; (800294c <uart_rx_callback+0x174>)
 800281e:	881b      	ldrh	r3, [r3, #0]
 8002820:	461a      	mov	r2, r3
 8002822:	4b4d      	ldr	r3, [pc, #308]	; (8002958 <uart_rx_callback+0x180>)
 8002824:	5c9b      	ldrb	r3, [r3, r2]
 8002826:	2b0d      	cmp	r3, #13
 8002828:	f040 8087 	bne.w	800293a <uart_rx_callback+0x162>
		{
			g_uart_rx_buffer[++g_uart_rx_tail] = '\n';//254
 800282c:	4b47      	ldr	r3, [pc, #284]	; (800294c <uart_rx_callback+0x174>)
 800282e:	881b      	ldrh	r3, [r3, #0]
 8002830:	3301      	adds	r3, #1
 8002832:	b29a      	uxth	r2, r3
 8002834:	4b45      	ldr	r3, [pc, #276]	; (800294c <uart_rx_callback+0x174>)
 8002836:	801a      	strh	r2, [r3, #0]
 8002838:	4b44      	ldr	r3, [pc, #272]	; (800294c <uart_rx_callback+0x174>)
 800283a:	881b      	ldrh	r3, [r3, #0]
 800283c:	461a      	mov	r2, r3
 800283e:	4b46      	ldr	r3, [pc, #280]	; (8002958 <uart_rx_callback+0x180>)
 8002840:	210a      	movs	r1, #10
 8002842:	5499      	strb	r1, [r3, r2]
			g_uart_rx_cnt++;
 8002844:	4b45      	ldr	r3, [pc, #276]	; (800295c <uart_rx_callback+0x184>)
 8002846:	881b      	ldrh	r3, [r3, #0]
 8002848:	3301      	adds	r3, #1
 800284a:	b29a      	uxth	r2, r3
 800284c:	4b43      	ldr	r3, [pc, #268]	; (800295c <uart_rx_callback+0x184>)
 800284e:	801a      	strh	r2, [r3, #0]
			g_uart_rx_buffer[++g_uart_rx_tail] = '\0';//255
 8002850:	4b3e      	ldr	r3, [pc, #248]	; (800294c <uart_rx_callback+0x174>)
 8002852:	881b      	ldrh	r3, [r3, #0]
 8002854:	3301      	adds	r3, #1
 8002856:	b29a      	uxth	r2, r3
 8002858:	4b3c      	ldr	r3, [pc, #240]	; (800294c <uart_rx_callback+0x174>)
 800285a:	801a      	strh	r2, [r3, #0]
 800285c:	4b3b      	ldr	r3, [pc, #236]	; (800294c <uart_rx_callback+0x174>)
 800285e:	881b      	ldrh	r3, [r3, #0]
 8002860:	461a      	mov	r2, r3
 8002862:	4b3d      	ldr	r3, [pc, #244]	; (8002958 <uart_rx_callback+0x180>)
 8002864:	2100      	movs	r1, #0
 8002866:	5499      	strb	r1, [r3, r2]
			if((g_uart_rx_tail == UART_RX_BUFFER_MAX) && (g_uart_rx_nose > 0))
 8002868:	4b38      	ldr	r3, [pc, #224]	; (800294c <uart_rx_callback+0x174>)
 800286a:	881b      	ldrh	r3, [r3, #0]
 800286c:	2bff      	cmp	r3, #255	; 0xff
 800286e:	d164      	bne.n	800293a <uart_rx_callback+0x162>
 8002870:	4b37      	ldr	r3, [pc, #220]	; (8002950 <uart_rx_callback+0x178>)
 8002872:	881b      	ldrh	r3, [r3, #0]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d060      	beq.n	800293a <uart_rx_callback+0x162>
			{
				g_uart_rx_tail = 0;
 8002878:	4b34      	ldr	r3, [pc, #208]	; (800294c <uart_rx_callback+0x174>)
 800287a:	2200      	movs	r2, #0
 800287c:	801a      	strh	r2, [r3, #0]
		if((g_uart_rx_buffer[g_uart_rx_tail] == '\r') /*&& ((g_uart_rx_nose < g_uart_rx_tail) || (g_uart_rx_nose - g_uart_rx_tail > 2))*/)
 800287e:	e05c      	b.n	800293a <uart_rx_callback+0x162>
			}
		}
	}
	else if((g_uart_rx_tail == (UART_RX_BUFFER_MAX - 1)) && (g_uart_rx_nose > 1)/*(g_uart_rx_nose < g_uart_rx_tail)*/)
 8002880:	4b32      	ldr	r3, [pc, #200]	; (800294c <uart_rx_callback+0x174>)
 8002882:	881b      	ldrh	r3, [r3, #0]
 8002884:	2bfe      	cmp	r3, #254	; 0xfe
 8002886:	d13e      	bne.n	8002906 <uart_rx_callback+0x12e>
 8002888:	4b31      	ldr	r3, [pc, #196]	; (8002950 <uart_rx_callback+0x178>)
 800288a:	881b      	ldrh	r3, [r3, #0]
 800288c:	2b01      	cmp	r3, #1
 800288e:	d93a      	bls.n	8002906 <uart_rx_callback+0x12e>
	{
		g_uart_rx_buffer[g_uart_rx_tail] = (0x00FFU & USART6->DR);//254
 8002890:	4b30      	ldr	r3, [pc, #192]	; (8002954 <uart_rx_callback+0x17c>)
 8002892:	6859      	ldr	r1, [r3, #4]
 8002894:	4b2d      	ldr	r3, [pc, #180]	; (800294c <uart_rx_callback+0x174>)
 8002896:	881b      	ldrh	r3, [r3, #0]
 8002898:	461a      	mov	r2, r3
 800289a:	b2c9      	uxtb	r1, r1
 800289c:	4b2e      	ldr	r3, [pc, #184]	; (8002958 <uart_rx_callback+0x180>)
 800289e:	5499      	strb	r1, [r3, r2]
		g_uart_rx_buffer[++g_uart_rx_tail] = '\0';//255
 80028a0:	4b2a      	ldr	r3, [pc, #168]	; (800294c <uart_rx_callback+0x174>)
 80028a2:	881b      	ldrh	r3, [r3, #0]
 80028a4:	3301      	adds	r3, #1
 80028a6:	b29a      	uxth	r2, r3
 80028a8:	4b28      	ldr	r3, [pc, #160]	; (800294c <uart_rx_callback+0x174>)
 80028aa:	801a      	strh	r2, [r3, #0]
 80028ac:	4b27      	ldr	r3, [pc, #156]	; (800294c <uart_rx_callback+0x174>)
 80028ae:	881b      	ldrh	r3, [r3, #0]
 80028b0:	461a      	mov	r2, r3
 80028b2:	4b29      	ldr	r3, [pc, #164]	; (8002958 <uart_rx_callback+0x180>)
 80028b4:	2100      	movs	r1, #0
 80028b6:	5499      	strb	r1, [r3, r2]
		if(g_uart_rx_buffer[g_uart_rx_tail - 1] == '\r')
 80028b8:	4b24      	ldr	r3, [pc, #144]	; (800294c <uart_rx_callback+0x174>)
 80028ba:	881b      	ldrh	r3, [r3, #0]
 80028bc:	3b01      	subs	r3, #1
 80028be:	4a26      	ldr	r2, [pc, #152]	; (8002958 <uart_rx_callback+0x180>)
 80028c0:	5cd3      	ldrb	r3, [r2, r3]
 80028c2:	2b0d      	cmp	r3, #13
 80028c4:	d13b      	bne.n	800293e <uart_rx_callback+0x166>
		{
			g_uart_rx_cnt++;
 80028c6:	4b25      	ldr	r3, [pc, #148]	; (800295c <uart_rx_callback+0x184>)
 80028c8:	881b      	ldrh	r3, [r3, #0]
 80028ca:	3301      	adds	r3, #1
 80028cc:	b29a      	uxth	r2, r3
 80028ce:	4b23      	ldr	r3, [pc, #140]	; (800295c <uart_rx_callback+0x184>)
 80028d0:	801a      	strh	r2, [r3, #0]
			if(g_uart_rx_nose > 1)
 80028d2:	4b1f      	ldr	r3, [pc, #124]	; (8002950 <uart_rx_callback+0x178>)
 80028d4:	881b      	ldrh	r3, [r3, #0]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d931      	bls.n	800293e <uart_rx_callback+0x166>
			{
				g_uart_rx_tail = 0;
 80028da:	4b1c      	ldr	r3, [pc, #112]	; (800294c <uart_rx_callback+0x174>)
 80028dc:	2200      	movs	r2, #0
 80028de:	801a      	strh	r2, [r3, #0]
				g_uart_rx_buffer[g_uart_rx_tail] = '\n';//0
 80028e0:	4b1a      	ldr	r3, [pc, #104]	; (800294c <uart_rx_callback+0x174>)
 80028e2:	881b      	ldrh	r3, [r3, #0]
 80028e4:	461a      	mov	r2, r3
 80028e6:	4b1c      	ldr	r3, [pc, #112]	; (8002958 <uart_rx_callback+0x180>)
 80028e8:	210a      	movs	r1, #10
 80028ea:	5499      	strb	r1, [r3, r2]
				g_uart_rx_buffer[++g_uart_rx_tail] = '\0';//1
 80028ec:	4b17      	ldr	r3, [pc, #92]	; (800294c <uart_rx_callback+0x174>)
 80028ee:	881b      	ldrh	r3, [r3, #0]
 80028f0:	3301      	adds	r3, #1
 80028f2:	b29a      	uxth	r2, r3
 80028f4:	4b15      	ldr	r3, [pc, #84]	; (800294c <uart_rx_callback+0x174>)
 80028f6:	801a      	strh	r2, [r3, #0]
 80028f8:	4b14      	ldr	r3, [pc, #80]	; (800294c <uart_rx_callback+0x174>)
 80028fa:	881b      	ldrh	r3, [r3, #0]
 80028fc:	461a      	mov	r2, r3
 80028fe:	4b16      	ldr	r3, [pc, #88]	; (8002958 <uart_rx_callback+0x180>)
 8002900:	2100      	movs	r1, #0
 8002902:	5499      	strb	r1, [r3, r2]
		if(g_uart_rx_buffer[g_uart_rx_tail - 1] == '\r')
 8002904:	e01b      	b.n	800293e <uart_rx_callback+0x166>
			{
				//error - full
			}
		}
	}
	else if((g_uart_rx_tail == UART_RX_BUFFER_MAX) && (g_uart_rx_nose > 1))
 8002906:	4b11      	ldr	r3, [pc, #68]	; (800294c <uart_rx_callback+0x174>)
 8002908:	881b      	ldrh	r3, [r3, #0]
 800290a:	2bff      	cmp	r3, #255	; 0xff
 800290c:	d118      	bne.n	8002940 <uart_rx_callback+0x168>
 800290e:	4b10      	ldr	r3, [pc, #64]	; (8002950 <uart_rx_callback+0x178>)
 8002910:	881b      	ldrh	r3, [r3, #0]
 8002912:	2b01      	cmp	r3, #1
 8002914:	d914      	bls.n	8002940 <uart_rx_callback+0x168>
	{
		g_uart_rx_buffer[g_uart_rx_tail] = '\0';
 8002916:	4b0d      	ldr	r3, [pc, #52]	; (800294c <uart_rx_callback+0x174>)
 8002918:	881b      	ldrh	r3, [r3, #0]
 800291a:	461a      	mov	r2, r3
 800291c:	4b0e      	ldr	r3, [pc, #56]	; (8002958 <uart_rx_callback+0x180>)
 800291e:	2100      	movs	r1, #0
 8002920:	5499      	strb	r1, [r3, r2]
		g_uart_rx_tail = 1;
 8002922:	4b0a      	ldr	r3, [pc, #40]	; (800294c <uart_rx_callback+0x174>)
 8002924:	2201      	movs	r2, #1
 8002926:	801a      	strh	r2, [r3, #0]
		g_uart_rx_buffer[g_uart_rx_tail] = (0x00FFU & USART6->DR);
 8002928:	4b0a      	ldr	r3, [pc, #40]	; (8002954 <uart_rx_callback+0x17c>)
 800292a:	6859      	ldr	r1, [r3, #4]
 800292c:	4b07      	ldr	r3, [pc, #28]	; (800294c <uart_rx_callback+0x174>)
 800292e:	881b      	ldrh	r3, [r3, #0]
 8002930:	461a      	mov	r2, r3
 8002932:	b2c9      	uxtb	r1, r1
 8002934:	4b08      	ldr	r3, [pc, #32]	; (8002958 <uart_rx_callback+0x180>)
 8002936:	5499      	strb	r1, [r3, r2]

	}

}
 8002938:	e002      	b.n	8002940 <uart_rx_callback+0x168>
		if((g_uart_rx_buffer[g_uart_rx_tail] == '\r') /*&& ((g_uart_rx_nose < g_uart_rx_tail) || (g_uart_rx_nose - g_uart_rx_tail > 2))*/)
 800293a:	bf00      	nop
 800293c:	e000      	b.n	8002940 <uart_rx_callback+0x168>
		if(g_uart_rx_buffer[g_uart_rx_tail - 1] == '\r')
 800293e:	bf00      	nop
}
 8002940:	bf00      	nop
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop
 800294c:	20025c3e 	.word	0x20025c3e
 8002950:	20025c3c 	.word	0x20025c3c
 8002954:	40011400 	.word	0x40011400
 8002958:	20025e14 	.word	0x20025e14
 800295c:	20025c40 	.word	0x20025c40

08002960 <serial_protocol>:


#include <stdlib.h>
//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
void serial_protocol(uint8_t* buff)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b088      	sub	sp, #32
 8002964:	af02      	add	r7, sp, #8
 8002966:	6078      	str	r0, [r7, #4]
	char *token;
	char temp_buff[3] = {0};
 8002968:	4b65      	ldr	r3, [pc, #404]	; (8002b00 <serial_protocol+0x1a0>)
 800296a:	881b      	ldrh	r3, [r3, #0]
 800296c:	813b      	strh	r3, [r7, #8]
 800296e:	2300      	movs	r3, #0
 8002970:	72bb      	strb	r3, [r7, #10]
	unsigned short address, value = 0xFF;
 8002972:	23ff      	movs	r3, #255	; 0xff
 8002974:	82fb      	strh	r3, [r7, #22]

	if (strncmp(buff, "OVW", 3) == 0)
 8002976:	2203      	movs	r2, #3
 8002978:	4962      	ldr	r1, [pc, #392]	; (8002b04 <serial_protocol+0x1a4>)
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f006 fdcc 	bl	8009518 <strncmp>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d165      	bne.n	8002a52 <serial_protocol+0xf2>
	{
		token = strtok(buff, ",");
 8002986:	4960      	ldr	r1, [pc, #384]	; (8002b08 <serial_protocol+0x1a8>)
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f006 fdeb 	bl	8009564 <strtok>
 800298e:	6138      	str	r0, [r7, #16]

		token = strtok(NULL, ",");
 8002990:	495d      	ldr	r1, [pc, #372]	; (8002b08 <serial_protocol+0x1a8>)
 8002992:	2000      	movs	r0, #0
 8002994:	f006 fde6 	bl	8009564 <strtok>
 8002998:	6138      	str	r0, [r7, #16]
		strncpy(temp_buff, token, 2);
 800299a:	f107 0308 	add.w	r3, r7, #8
 800299e:	2202      	movs	r2, #2
 80029a0:	6939      	ldr	r1, [r7, #16]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f006 fdca 	bl	800953c <strncpy>
		address = strtoll(temp_buff, NULL, 16);
 80029a8:	f107 0308 	add.w	r3, r7, #8
 80029ac:	2210      	movs	r2, #16
 80029ae:	2100      	movs	r1, #0
 80029b0:	4618      	mov	r0, r3
 80029b2:	f006 fec9 	bl	8009748 <strtoll>
 80029b6:	4602      	mov	r2, r0
 80029b8:	460b      	mov	r3, r1
 80029ba:	4613      	mov	r3, r2
 80029bc:	81fb      	strh	r3, [r7, #14]

		token = strtok(NULL, ",");
 80029be:	4952      	ldr	r1, [pc, #328]	; (8002b08 <serial_protocol+0x1a8>)
 80029c0:	2000      	movs	r0, #0
 80029c2:	f006 fdcf 	bl	8009564 <strtok>
 80029c6:	6138      	str	r0, [r7, #16]
		strncpy(temp_buff, token, 2);
 80029c8:	f107 0308 	add.w	r3, r7, #8
 80029cc:	2202      	movs	r2, #2
 80029ce:	6939      	ldr	r1, [r7, #16]
 80029d0:	4618      	mov	r0, r3
 80029d2:	f006 fdb3 	bl	800953c <strncpy>
		value = strtoll(temp_buff, NULL, 16);
 80029d6:	f107 0308 	add.w	r3, r7, #8
 80029da:	2210      	movs	r2, #16
 80029dc:	2100      	movs	r1, #0
 80029de:	4618      	mov	r0, r3
 80029e0:	f006 feb2 	bl	8009748 <strtoll>
 80029e4:	4602      	mov	r2, r0
 80029e6:	460b      	mov	r3, r1
 80029e8:	4613      	mov	r3, r2
 80029ea:	82fb      	strh	r3, [r7, #22]

		ov7670_write_register(address, value);
 80029ec:	89fb      	ldrh	r3, [r7, #14]
 80029ee:	8afa      	ldrh	r2, [r7, #22]
 80029f0:	4611      	mov	r1, r2
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7fe ffca 	bl	800198c <ov7670_write_register>
		sprintf(temp_buff, "%02X\0", address);
 80029f8:	89fa      	ldrh	r2, [r7, #14]
 80029fa:	f107 0308 	add.w	r3, r7, #8
 80029fe:	4943      	ldr	r1, [pc, #268]	; (8002b0c <serial_protocol+0x1ac>)
 8002a00:	4618      	mov	r0, r3
 8002a02:	f006 fd61 	bl	80094c8 <siprintf>
		LCD_PrintStr(20, 400, 0, 0x841FU, temp_buff, 5);
 8002a06:	2305      	movs	r3, #5
 8002a08:	9301      	str	r3, [sp, #4]
 8002a0a:	f107 0308 	add.w	r3, r7, #8
 8002a0e:	9300      	str	r3, [sp, #0]
 8002a10:	f248 431f 	movw	r3, #33823	; 0x841f
 8002a14:	2200      	movs	r2, #0
 8002a16:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002a1a:	2014      	movs	r0, #20
 8002a1c:	f7fe f9f2 	bl	8000e04 <LCD_PrintStr>
		sprintf(temp_buff, "%02X\0", ov7670_read_register(address));
 8002a20:	89fb      	ldrh	r3, [r7, #14]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7fe ffc4 	bl	80019b0 <ov7670_read_register>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	f107 0308 	add.w	r3, r7, #8
 8002a2e:	4937      	ldr	r1, [pc, #220]	; (8002b0c <serial_protocol+0x1ac>)
 8002a30:	4618      	mov	r0, r3
 8002a32:	f006 fd49 	bl	80094c8 <siprintf>
		LCD_PrintStr(20, 440, 0, 0x841FU, temp_buff, 5);
 8002a36:	2305      	movs	r3, #5
 8002a38:	9301      	str	r3, [sp, #4]
 8002a3a:	f107 0308 	add.w	r3, r7, #8
 8002a3e:	9300      	str	r3, [sp, #0]
 8002a40:	f248 431f 	movw	r3, #33823	; 0x841f
 8002a44:	2200      	movs	r2, #0
 8002a46:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8002a4a:	2014      	movs	r0, #20
 8002a4c:	f7fe f9da 	bl	8000e04 <LCD_PrintStr>
		LCD_PrintStr(20, 400, 0, 0x841FU, temp_buff, 5);
		sprintf(temp_buff, "%02X\0", value);
		LCD_PrintStr(20, 440, 0, 0x841FU, temp_buff, 5);
	}
		//LCD_PrintStr(20, 400, 0, 0x841FU, buff, 5);
}
 8002a50:	e051      	b.n	8002af6 <serial_protocol+0x196>
	else if (strncmp(buff, "OVR", 3) == 0)
 8002a52:	2203      	movs	r2, #3
 8002a54:	492e      	ldr	r1, [pc, #184]	; (8002b10 <serial_protocol+0x1b0>)
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f006 fd5e 	bl	8009518 <strncmp>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d149      	bne.n	8002af6 <serial_protocol+0x196>
		token = strtok(buff, ",");
 8002a62:	4929      	ldr	r1, [pc, #164]	; (8002b08 <serial_protocol+0x1a8>)
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f006 fd7d 	bl	8009564 <strtok>
 8002a6a:	6138      	str	r0, [r7, #16]
		token = strtok(NULL, ",");
 8002a6c:	4926      	ldr	r1, [pc, #152]	; (8002b08 <serial_protocol+0x1a8>)
 8002a6e:	2000      	movs	r0, #0
 8002a70:	f006 fd78 	bl	8009564 <strtok>
 8002a74:	6138      	str	r0, [r7, #16]
		strncpy(temp_buff, token, 2);
 8002a76:	f107 0308 	add.w	r3, r7, #8
 8002a7a:	2202      	movs	r2, #2
 8002a7c:	6939      	ldr	r1, [r7, #16]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f006 fd5c 	bl	800953c <strncpy>
		address = strtoll(temp_buff, NULL, 16);
 8002a84:	f107 0308 	add.w	r3, r7, #8
 8002a88:	2210      	movs	r2, #16
 8002a8a:	2100      	movs	r1, #0
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f006 fe5b 	bl	8009748 <strtoll>
 8002a92:	4602      	mov	r2, r0
 8002a94:	460b      	mov	r3, r1
 8002a96:	4613      	mov	r3, r2
 8002a98:	81fb      	strh	r3, [r7, #14]
		value = ov7670_read_register(address);
 8002a9a:	89fb      	ldrh	r3, [r7, #14]
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7fe ff87 	bl	80019b0 <ov7670_read_register>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	82fb      	strh	r3, [r7, #22]
		sprintf(temp_buff, "%02X\0", address);
 8002aa6:	89fa      	ldrh	r2, [r7, #14]
 8002aa8:	f107 0308 	add.w	r3, r7, #8
 8002aac:	4917      	ldr	r1, [pc, #92]	; (8002b0c <serial_protocol+0x1ac>)
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f006 fd0a 	bl	80094c8 <siprintf>
		LCD_PrintStr(20, 400, 0, 0x841FU, temp_buff, 5);
 8002ab4:	2305      	movs	r3, #5
 8002ab6:	9301      	str	r3, [sp, #4]
 8002ab8:	f107 0308 	add.w	r3, r7, #8
 8002abc:	9300      	str	r3, [sp, #0]
 8002abe:	f248 431f 	movw	r3, #33823	; 0x841f
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002ac8:	2014      	movs	r0, #20
 8002aca:	f7fe f99b 	bl	8000e04 <LCD_PrintStr>
		sprintf(temp_buff, "%02X\0", value);
 8002ace:	8afa      	ldrh	r2, [r7, #22]
 8002ad0:	f107 0308 	add.w	r3, r7, #8
 8002ad4:	490d      	ldr	r1, [pc, #52]	; (8002b0c <serial_protocol+0x1ac>)
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f006 fcf6 	bl	80094c8 <siprintf>
		LCD_PrintStr(20, 440, 0, 0x841FU, temp_buff, 5);
 8002adc:	2305      	movs	r3, #5
 8002ade:	9301      	str	r3, [sp, #4]
 8002ae0:	f107 0308 	add.w	r3, r7, #8
 8002ae4:	9300      	str	r3, [sp, #0]
 8002ae6:	f248 431f 	movw	r3, #33823	; 0x841f
 8002aea:	2200      	movs	r2, #0
 8002aec:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8002af0:	2014      	movs	r0, #20
 8002af2:	f7fe f987 	bl	8000e04 <LCD_PrintStr>
}
 8002af6:	bf00      	nop
 8002af8:	3718      	adds	r7, #24
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	0800a1dc 	.word	0x0800a1dc
 8002b04:	0800a1c8 	.word	0x0800a1c8
 8002b08:	0800a1cc 	.word	0x0800a1cc
 8002b0c:	0800a1d0 	.word	0x0800a1d0
 8002b10:	0800a1d8 	.word	0x0800a1d8

08002b14 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002b18:	4b11      	ldr	r3, [pc, #68]	; (8002b60 <MX_USART6_UART_Init+0x4c>)
 8002b1a:	4a12      	ldr	r2, [pc, #72]	; (8002b64 <MX_USART6_UART_Init+0x50>)
 8002b1c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002b1e:	4b10      	ldr	r3, [pc, #64]	; (8002b60 <MX_USART6_UART_Init+0x4c>)
 8002b20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b24:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002b26:	4b0e      	ldr	r3, [pc, #56]	; (8002b60 <MX_USART6_UART_Init+0x4c>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002b2c:	4b0c      	ldr	r3, [pc, #48]	; (8002b60 <MX_USART6_UART_Init+0x4c>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002b32:	4b0b      	ldr	r3, [pc, #44]	; (8002b60 <MX_USART6_UART_Init+0x4c>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002b38:	4b09      	ldr	r3, [pc, #36]	; (8002b60 <MX_USART6_UART_Init+0x4c>)
 8002b3a:	220c      	movs	r2, #12
 8002b3c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b3e:	4b08      	ldr	r3, [pc, #32]	; (8002b60 <MX_USART6_UART_Init+0x4c>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b44:	4b06      	ldr	r3, [pc, #24]	; (8002b60 <MX_USART6_UART_Init+0x4c>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002b4a:	4805      	ldr	r0, [pc, #20]	; (8002b60 <MX_USART6_UART_Init+0x4c>)
 8002b4c:	f005 f832 	bl	8007bb4 <HAL_UART_Init>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d001      	beq.n	8002b5a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002b56:	f7fe fe39 	bl	80017cc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002b5a:	bf00      	nop
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	20025f14 	.word	0x20025f14
 8002b64:	40011400 	.word	0x40011400

08002b68 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b08a      	sub	sp, #40	; 0x28
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b70:	f107 0314 	add.w	r3, r7, #20
 8002b74:	2200      	movs	r2, #0
 8002b76:	601a      	str	r2, [r3, #0]
 8002b78:	605a      	str	r2, [r3, #4]
 8002b7a:	609a      	str	r2, [r3, #8]
 8002b7c:	60da      	str	r2, [r3, #12]
 8002b7e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a1e      	ldr	r2, [pc, #120]	; (8002c00 <HAL_UART_MspInit+0x98>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d136      	bne.n	8002bf8 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	613b      	str	r3, [r7, #16]
 8002b8e:	4b1d      	ldr	r3, [pc, #116]	; (8002c04 <HAL_UART_MspInit+0x9c>)
 8002b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b92:	4a1c      	ldr	r2, [pc, #112]	; (8002c04 <HAL_UART_MspInit+0x9c>)
 8002b94:	f043 0320 	orr.w	r3, r3, #32
 8002b98:	6453      	str	r3, [r2, #68]	; 0x44
 8002b9a:	4b1a      	ldr	r3, [pc, #104]	; (8002c04 <HAL_UART_MspInit+0x9c>)
 8002b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b9e:	f003 0320 	and.w	r3, r3, #32
 8002ba2:	613b      	str	r3, [r7, #16]
 8002ba4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	60fb      	str	r3, [r7, #12]
 8002baa:	4b16      	ldr	r3, [pc, #88]	; (8002c04 <HAL_UART_MspInit+0x9c>)
 8002bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bae:	4a15      	ldr	r2, [pc, #84]	; (8002c04 <HAL_UART_MspInit+0x9c>)
 8002bb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8002bb6:	4b13      	ldr	r3, [pc, #76]	; (8002c04 <HAL_UART_MspInit+0x9c>)
 8002bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bbe:	60fb      	str	r3, [r7, #12]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PG9     ------> USART6_RX
    PG14     ------> USART6_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 8002bc2:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8002bc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc8:	2302      	movs	r3, #2
 8002bca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002bd4:	2308      	movs	r3, #8
 8002bd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002bd8:	f107 0314 	add.w	r3, r7, #20
 8002bdc:	4619      	mov	r1, r3
 8002bde:	480a      	ldr	r0, [pc, #40]	; (8002c08 <HAL_UART_MspInit+0xa0>)
 8002be0:	f001 f840 	bl	8003c64 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002be4:	2200      	movs	r2, #0
 8002be6:	2100      	movs	r1, #0
 8002be8:	2047      	movs	r0, #71	; 0x47
 8002bea:	f000 fd8c 	bl	8003706 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002bee:	2047      	movs	r0, #71	; 0x47
 8002bf0:	f000 fda5 	bl	800373e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */
    uart_init();
 8002bf4:	f7ff fc0a 	bl	800240c <uart_init>
  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002bf8:	bf00      	nop
 8002bfa:	3728      	adds	r7, #40	; 0x28
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	40011400 	.word	0x40011400
 8002c04:	40023800 	.word	0x40023800
 8002c08:	40021800 	.word	0x40021800

08002c0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8002c0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c44 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c10:	480d      	ldr	r0, [pc, #52]	; (8002c48 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002c12:	490e      	ldr	r1, [pc, #56]	; (8002c4c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002c14:	4a0e      	ldr	r2, [pc, #56]	; (8002c50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002c16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c18:	e002      	b.n	8002c20 <LoopCopyDataInit>

08002c1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c1e:	3304      	adds	r3, #4

08002c20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c24:	d3f9      	bcc.n	8002c1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c26:	4a0b      	ldr	r2, [pc, #44]	; (8002c54 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002c28:	4c0b      	ldr	r4, [pc, #44]	; (8002c58 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002c2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c2c:	e001      	b.n	8002c32 <LoopFillZerobss>

08002c2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c30:	3204      	adds	r2, #4

08002c32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c34:	d3fb      	bcc.n	8002c2e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002c36:	f7ff f95d 	bl	8001ef4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c3a:	f005 fe73 	bl	8008924 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c3e:	f7fe fd0d 	bl	800165c <main>
  bx  lr    
 8002c42:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002c44:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002c48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c4c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002c50:	0801bddc 	.word	0x0801bddc
  ldr r2, =_sbss
 8002c54:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002c58:	20025f6c 	.word	0x20025f6c

08002c5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c5c:	e7fe      	b.n	8002c5c <ADC_IRQHandler>
	...

08002c60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c64:	4b0e      	ldr	r3, [pc, #56]	; (8002ca0 <HAL_Init+0x40>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a0d      	ldr	r2, [pc, #52]	; (8002ca0 <HAL_Init+0x40>)
 8002c6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c70:	4b0b      	ldr	r3, [pc, #44]	; (8002ca0 <HAL_Init+0x40>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a0a      	ldr	r2, [pc, #40]	; (8002ca0 <HAL_Init+0x40>)
 8002c76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c7c:	4b08      	ldr	r3, [pc, #32]	; (8002ca0 <HAL_Init+0x40>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a07      	ldr	r2, [pc, #28]	; (8002ca0 <HAL_Init+0x40>)
 8002c82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c88:	2003      	movs	r0, #3
 8002c8a:	f000 fd31 	bl	80036f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c8e:	2000      	movs	r0, #0
 8002c90:	f000 f808 	bl	8002ca4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c94:	f7fe ffdc 	bl	8001c50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	40023c00 	.word	0x40023c00

08002ca4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002cac:	4b12      	ldr	r3, [pc, #72]	; (8002cf8 <HAL_InitTick+0x54>)
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	4b12      	ldr	r3, [pc, #72]	; (8002cfc <HAL_InitTick+0x58>)
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cba:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f000 fd57 	bl	8003776 <HAL_SYSTICK_Config>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d001      	beq.n	8002cd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e00e      	b.n	8002cf0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2b0f      	cmp	r3, #15
 8002cd6:	d80a      	bhi.n	8002cee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cd8:	2200      	movs	r2, #0
 8002cda:	6879      	ldr	r1, [r7, #4]
 8002cdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ce0:	f000 fd11 	bl	8003706 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ce4:	4a06      	ldr	r2, [pc, #24]	; (8002d00 <HAL_InitTick+0x5c>)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002cea:	2300      	movs	r3, #0
 8002cec:	e000      	b.n	8002cf0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3708      	adds	r7, #8
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	20000004 	.word	0x20000004
 8002cfc:	2000000c 	.word	0x2000000c
 8002d00:	20000008 	.word	0x20000008

08002d04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d08:	4b06      	ldr	r3, [pc, #24]	; (8002d24 <HAL_IncTick+0x20>)
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	4b06      	ldr	r3, [pc, #24]	; (8002d28 <HAL_IncTick+0x24>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4413      	add	r3, r2
 8002d14:	4a04      	ldr	r2, [pc, #16]	; (8002d28 <HAL_IncTick+0x24>)
 8002d16:	6013      	str	r3, [r2, #0]
}
 8002d18:	bf00      	nop
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	2000000c 	.word	0x2000000c
 8002d28:	20025f58 	.word	0x20025f58

08002d2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0
  return uwTick;
 8002d30:	4b03      	ldr	r3, [pc, #12]	; (8002d40 <HAL_GetTick+0x14>)
 8002d32:	681b      	ldr	r3, [r3, #0]
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	20025f58 	.word	0x20025f58

08002d44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d4c:	f7ff ffee 	bl	8002d2c <HAL_GetTick>
 8002d50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d5c:	d005      	beq.n	8002d6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d5e:	4b0a      	ldr	r3, [pc, #40]	; (8002d88 <HAL_Delay+0x44>)
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	461a      	mov	r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	4413      	add	r3, r2
 8002d68:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d6a:	bf00      	nop
 8002d6c:	f7ff ffde 	bl	8002d2c <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	68fa      	ldr	r2, [r7, #12]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d8f7      	bhi.n	8002d6c <HAL_Delay+0x28>
  {
  }
}
 8002d7c:	bf00      	nop
 8002d7e:	bf00      	nop
 8002d80:	3710      	adds	r7, #16
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	2000000c 	.word	0x2000000c

08002d8c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d94:	2300      	movs	r3, #0
 8002d96:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d101      	bne.n	8002da2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e033      	b.n	8002e0a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d109      	bne.n	8002dbe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f7fd fc6a 	bl	8000684 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc2:	f003 0310 	and.w	r3, r3, #16
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d118      	bne.n	8002dfc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dce:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002dd2:	f023 0302 	bic.w	r3, r3, #2
 8002dd6:	f043 0202 	orr.w	r2, r3, #2
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f000 fa96 	bl	8003310 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dee:	f023 0303 	bic.w	r3, r3, #3
 8002df2:	f043 0201 	orr.w	r2, r3, #1
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	641a      	str	r2, [r3, #64]	; 0x40
 8002dfa:	e001      	b.n	8002e00 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3710      	adds	r7, #16
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
	...

08002e14 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b085      	sub	sp, #20
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d101      	bne.n	8002e2e <HAL_ADC_Start+0x1a>
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	e097      	b.n	8002f5e <HAL_ADC_Start+0x14a>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2201      	movs	r2, #1
 8002e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	f003 0301 	and.w	r3, r3, #1
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d018      	beq.n	8002e76 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	689a      	ldr	r2, [r3, #8]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f042 0201 	orr.w	r2, r2, #1
 8002e52:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002e54:	4b45      	ldr	r3, [pc, #276]	; (8002f6c <HAL_ADC_Start+0x158>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a45      	ldr	r2, [pc, #276]	; (8002f70 <HAL_ADC_Start+0x15c>)
 8002e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e5e:	0c9a      	lsrs	r2, r3, #18
 8002e60:	4613      	mov	r3, r2
 8002e62:	005b      	lsls	r3, r3, #1
 8002e64:	4413      	add	r3, r2
 8002e66:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002e68:	e002      	b.n	8002e70 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	3b01      	subs	r3, #1
 8002e6e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d1f9      	bne.n	8002e6a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	f003 0301 	and.w	r3, r3, #1
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d15f      	bne.n	8002f44 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e88:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002e8c:	f023 0301 	bic.w	r3, r3, #1
 8002e90:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d007      	beq.n	8002eb6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eaa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002eae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ebe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ec2:	d106      	bne.n	8002ed2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec8:	f023 0206 	bic.w	r2, r3, #6
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	645a      	str	r2, [r3, #68]	; 0x44
 8002ed0:	e002      	b.n	8002ed8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ee0:	4b24      	ldr	r3, [pc, #144]	; (8002f74 <HAL_ADC_Start+0x160>)
 8002ee2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002eec:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	f003 031f 	and.w	r3, r3, #31
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d10f      	bne.n	8002f1a <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d129      	bne.n	8002f5c <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	689a      	ldr	r2, [r3, #8]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002f16:	609a      	str	r2, [r3, #8]
 8002f18:	e020      	b.n	8002f5c <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a16      	ldr	r2, [pc, #88]	; (8002f78 <HAL_ADC_Start+0x164>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d11b      	bne.n	8002f5c <HAL_ADC_Start+0x148>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d114      	bne.n	8002f5c <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	689a      	ldr	r2, [r3, #8]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002f40:	609a      	str	r2, [r3, #8]
 8002f42:	e00b      	b.n	8002f5c <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f48:	f043 0210 	orr.w	r2, r3, #16
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f54:	f043 0201 	orr.w	r2, r3, #1
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3714      	adds	r7, #20
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	20000004 	.word	0x20000004
 8002f70:	431bde83 	.word	0x431bde83
 8002f74:	40012300 	.word	0x40012300
 8002f78:	40012000 	.word	0x40012000

08002f7c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002f86:	2300      	movs	r3, #0
 8002f88:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f98:	d113      	bne.n	8002fc2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002fa4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fa8:	d10b      	bne.n	8002fc2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fae:	f043 0220 	orr.w	r2, r3, #32
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e063      	b.n	800308a <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002fc2:	f7ff feb3 	bl	8002d2c <HAL_GetTick>
 8002fc6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002fc8:	e021      	b.n	800300e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fd0:	d01d      	beq.n	800300e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d007      	beq.n	8002fe8 <HAL_ADC_PollForConversion+0x6c>
 8002fd8:	f7ff fea8 	bl	8002d2c <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	683a      	ldr	r2, [r7, #0]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d212      	bcs.n	800300e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d00b      	beq.n	800300e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffa:	f043 0204 	orr.w	r2, r3, #4
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e03d      	b.n	800308a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0302 	and.w	r3, r3, #2
 8003018:	2b02      	cmp	r3, #2
 800301a:	d1d6      	bne.n	8002fca <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f06f 0212 	mvn.w	r2, #18
 8003024:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d123      	bne.n	8003088 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003044:	2b00      	cmp	r3, #0
 8003046:	d11f      	bne.n	8003088 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800304e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003052:	2b00      	cmp	r3, #0
 8003054:	d006      	beq.n	8003064 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003060:	2b00      	cmp	r3, #0
 8003062:	d111      	bne.n	8003088 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003068:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003074:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d105      	bne.n	8003088 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003080:	f043 0201 	orr.w	r2, r3, #1
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003088:	2300      	movs	r3, #0
}
 800308a:	4618      	mov	r0, r3
 800308c:	3710      	adds	r7, #16
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}

08003092 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003092:	b480      	push	{r7}
 8003094:	b083      	sub	sp, #12
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	370c      	adds	r7, #12
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr

080030ac <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b085      	sub	sp, #20
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80030b6:	2300      	movs	r3, #0
 80030b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d101      	bne.n	80030c8 <HAL_ADC_ConfigChannel+0x1c>
 80030c4:	2302      	movs	r3, #2
 80030c6:	e113      	b.n	80032f0 <HAL_ADC_ConfigChannel+0x244>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2b09      	cmp	r3, #9
 80030d6:	d925      	bls.n	8003124 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	68d9      	ldr	r1, [r3, #12]
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	461a      	mov	r2, r3
 80030e6:	4613      	mov	r3, r2
 80030e8:	005b      	lsls	r3, r3, #1
 80030ea:	4413      	add	r3, r2
 80030ec:	3b1e      	subs	r3, #30
 80030ee:	2207      	movs	r2, #7
 80030f0:	fa02 f303 	lsl.w	r3, r2, r3
 80030f4:	43da      	mvns	r2, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	400a      	ands	r2, r1
 80030fc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	68d9      	ldr	r1, [r3, #12]
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	689a      	ldr	r2, [r3, #8]
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	b29b      	uxth	r3, r3
 800310e:	4618      	mov	r0, r3
 8003110:	4603      	mov	r3, r0
 8003112:	005b      	lsls	r3, r3, #1
 8003114:	4403      	add	r3, r0
 8003116:	3b1e      	subs	r3, #30
 8003118:	409a      	lsls	r2, r3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	430a      	orrs	r2, r1
 8003120:	60da      	str	r2, [r3, #12]
 8003122:	e022      	b.n	800316a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	6919      	ldr	r1, [r3, #16]
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	b29b      	uxth	r3, r3
 8003130:	461a      	mov	r2, r3
 8003132:	4613      	mov	r3, r2
 8003134:	005b      	lsls	r3, r3, #1
 8003136:	4413      	add	r3, r2
 8003138:	2207      	movs	r2, #7
 800313a:	fa02 f303 	lsl.w	r3, r2, r3
 800313e:	43da      	mvns	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	400a      	ands	r2, r1
 8003146:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	6919      	ldr	r1, [r3, #16]
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	689a      	ldr	r2, [r3, #8]
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	b29b      	uxth	r3, r3
 8003158:	4618      	mov	r0, r3
 800315a:	4603      	mov	r3, r0
 800315c:	005b      	lsls	r3, r3, #1
 800315e:	4403      	add	r3, r0
 8003160:	409a      	lsls	r2, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	430a      	orrs	r2, r1
 8003168:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	2b06      	cmp	r3, #6
 8003170:	d824      	bhi.n	80031bc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	685a      	ldr	r2, [r3, #4]
 800317c:	4613      	mov	r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	4413      	add	r3, r2
 8003182:	3b05      	subs	r3, #5
 8003184:	221f      	movs	r2, #31
 8003186:	fa02 f303 	lsl.w	r3, r2, r3
 800318a:	43da      	mvns	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	400a      	ands	r2, r1
 8003192:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	b29b      	uxth	r3, r3
 80031a0:	4618      	mov	r0, r3
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	685a      	ldr	r2, [r3, #4]
 80031a6:	4613      	mov	r3, r2
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	4413      	add	r3, r2
 80031ac:	3b05      	subs	r3, #5
 80031ae:	fa00 f203 	lsl.w	r2, r0, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	430a      	orrs	r2, r1
 80031b8:	635a      	str	r2, [r3, #52]	; 0x34
 80031ba:	e04c      	b.n	8003256 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	2b0c      	cmp	r3, #12
 80031c2:	d824      	bhi.n	800320e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	685a      	ldr	r2, [r3, #4]
 80031ce:	4613      	mov	r3, r2
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	4413      	add	r3, r2
 80031d4:	3b23      	subs	r3, #35	; 0x23
 80031d6:	221f      	movs	r2, #31
 80031d8:	fa02 f303 	lsl.w	r3, r2, r3
 80031dc:	43da      	mvns	r2, r3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	400a      	ands	r2, r1
 80031e4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	4618      	mov	r0, r3
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	685a      	ldr	r2, [r3, #4]
 80031f8:	4613      	mov	r3, r2
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	4413      	add	r3, r2
 80031fe:	3b23      	subs	r3, #35	; 0x23
 8003200:	fa00 f203 	lsl.w	r2, r0, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	430a      	orrs	r2, r1
 800320a:	631a      	str	r2, [r3, #48]	; 0x30
 800320c:	e023      	b.n	8003256 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	685a      	ldr	r2, [r3, #4]
 8003218:	4613      	mov	r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	4413      	add	r3, r2
 800321e:	3b41      	subs	r3, #65	; 0x41
 8003220:	221f      	movs	r2, #31
 8003222:	fa02 f303 	lsl.w	r3, r2, r3
 8003226:	43da      	mvns	r2, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	400a      	ands	r2, r1
 800322e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	b29b      	uxth	r3, r3
 800323c:	4618      	mov	r0, r3
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	685a      	ldr	r2, [r3, #4]
 8003242:	4613      	mov	r3, r2
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	4413      	add	r3, r2
 8003248:	3b41      	subs	r3, #65	; 0x41
 800324a:	fa00 f203 	lsl.w	r2, r0, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	430a      	orrs	r2, r1
 8003254:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003256:	4b29      	ldr	r3, [pc, #164]	; (80032fc <HAL_ADC_ConfigChannel+0x250>)
 8003258:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a28      	ldr	r2, [pc, #160]	; (8003300 <HAL_ADC_ConfigChannel+0x254>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d10f      	bne.n	8003284 <HAL_ADC_ConfigChannel+0x1d8>
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2b12      	cmp	r3, #18
 800326a:	d10b      	bne.n	8003284 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a1d      	ldr	r2, [pc, #116]	; (8003300 <HAL_ADC_ConfigChannel+0x254>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d12b      	bne.n	80032e6 <HAL_ADC_ConfigChannel+0x23a>
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a1c      	ldr	r2, [pc, #112]	; (8003304 <HAL_ADC_ConfigChannel+0x258>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d003      	beq.n	80032a0 <HAL_ADC_ConfigChannel+0x1f4>
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2b11      	cmp	r3, #17
 800329e:	d122      	bne.n	80032e6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a11      	ldr	r2, [pc, #68]	; (8003304 <HAL_ADC_ConfigChannel+0x258>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d111      	bne.n	80032e6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80032c2:	4b11      	ldr	r3, [pc, #68]	; (8003308 <HAL_ADC_ConfigChannel+0x25c>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a11      	ldr	r2, [pc, #68]	; (800330c <HAL_ADC_ConfigChannel+0x260>)
 80032c8:	fba2 2303 	umull	r2, r3, r2, r3
 80032cc:	0c9a      	lsrs	r2, r3, #18
 80032ce:	4613      	mov	r3, r2
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	4413      	add	r3, r2
 80032d4:	005b      	lsls	r3, r3, #1
 80032d6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80032d8:	e002      	b.n	80032e0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	3b01      	subs	r3, #1
 80032de:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d1f9      	bne.n	80032da <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80032ee:	2300      	movs	r3, #0
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3714      	adds	r7, #20
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr
 80032fc:	40012300 	.word	0x40012300
 8003300:	40012000 	.word	0x40012000
 8003304:	10000012 	.word	0x10000012
 8003308:	20000004 	.word	0x20000004
 800330c:	431bde83 	.word	0x431bde83

08003310 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003310:	b480      	push	{r7}
 8003312:	b085      	sub	sp, #20
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003318:	4b79      	ldr	r3, [pc, #484]	; (8003500 <ADC_Init+0x1f0>)
 800331a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	685a      	ldr	r2, [r3, #4]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	431a      	orrs	r2, r3
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	685a      	ldr	r2, [r3, #4]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003344:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	6859      	ldr	r1, [r3, #4]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	691b      	ldr	r3, [r3, #16]
 8003350:	021a      	lsls	r2, r3, #8
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	430a      	orrs	r2, r1
 8003358:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	685a      	ldr	r2, [r3, #4]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003368:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	6859      	ldr	r1, [r3, #4]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	689a      	ldr	r2, [r3, #8]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	430a      	orrs	r2, r1
 800337a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	689a      	ldr	r2, [r3, #8]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800338a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	6899      	ldr	r1, [r3, #8]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	68da      	ldr	r2, [r3, #12]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	430a      	orrs	r2, r1
 800339c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a2:	4a58      	ldr	r2, [pc, #352]	; (8003504 <ADC_Init+0x1f4>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d022      	beq.n	80033ee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	689a      	ldr	r2, [r3, #8]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80033b6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	6899      	ldr	r1, [r3, #8]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	430a      	orrs	r2, r1
 80033c8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	689a      	ldr	r2, [r3, #8]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80033d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	6899      	ldr	r1, [r3, #8]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	430a      	orrs	r2, r1
 80033ea:	609a      	str	r2, [r3, #8]
 80033ec:	e00f      	b.n	800340e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	689a      	ldr	r2, [r3, #8]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80033fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	689a      	ldr	r2, [r3, #8]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800340c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	689a      	ldr	r2, [r3, #8]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f022 0202 	bic.w	r2, r2, #2
 800341c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	6899      	ldr	r1, [r3, #8]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	7e1b      	ldrb	r3, [r3, #24]
 8003428:	005a      	lsls	r2, r3, #1
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	430a      	orrs	r2, r1
 8003430:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d01b      	beq.n	8003474 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	685a      	ldr	r2, [r3, #4]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800344a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	685a      	ldr	r2, [r3, #4]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800345a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	6859      	ldr	r1, [r3, #4]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003466:	3b01      	subs	r3, #1
 8003468:	035a      	lsls	r2, r3, #13
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	430a      	orrs	r2, r1
 8003470:	605a      	str	r2, [r3, #4]
 8003472:	e007      	b.n	8003484 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	685a      	ldr	r2, [r3, #4]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003482:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003492:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	69db      	ldr	r3, [r3, #28]
 800349e:	3b01      	subs	r3, #1
 80034a0:	051a      	lsls	r2, r3, #20
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	430a      	orrs	r2, r1
 80034a8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	689a      	ldr	r2, [r3, #8]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80034b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	6899      	ldr	r1, [r3, #8]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80034c6:	025a      	lsls	r2, r3, #9
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	430a      	orrs	r2, r1
 80034ce:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	689a      	ldr	r2, [r3, #8]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	6899      	ldr	r1, [r3, #8]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	695b      	ldr	r3, [r3, #20]
 80034ea:	029a      	lsls	r2, r3, #10
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	430a      	orrs	r2, r1
 80034f2:	609a      	str	r2, [r3, #8]
}
 80034f4:	bf00      	nop
 80034f6:	3714      	adds	r7, #20
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr
 8003500:	40012300 	.word	0x40012300
 8003504:	0f000001 	.word	0x0f000001

08003508 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003508:	b480      	push	{r7}
 800350a:	b085      	sub	sp, #20
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f003 0307 	and.w	r3, r3, #7
 8003516:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003518:	4b0c      	ldr	r3, [pc, #48]	; (800354c <__NVIC_SetPriorityGrouping+0x44>)
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800351e:	68ba      	ldr	r2, [r7, #8]
 8003520:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003524:	4013      	ands	r3, r2
 8003526:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003530:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003534:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003538:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800353a:	4a04      	ldr	r2, [pc, #16]	; (800354c <__NVIC_SetPriorityGrouping+0x44>)
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	60d3      	str	r3, [r2, #12]
}
 8003540:	bf00      	nop
 8003542:	3714      	adds	r7, #20
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr
 800354c:	e000ed00 	.word	0xe000ed00

08003550 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003550:	b480      	push	{r7}
 8003552:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003554:	4b04      	ldr	r3, [pc, #16]	; (8003568 <__NVIC_GetPriorityGrouping+0x18>)
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	0a1b      	lsrs	r3, r3, #8
 800355a:	f003 0307 	and.w	r3, r3, #7
}
 800355e:	4618      	mov	r0, r3
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr
 8003568:	e000ed00 	.word	0xe000ed00

0800356c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	4603      	mov	r3, r0
 8003574:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800357a:	2b00      	cmp	r3, #0
 800357c:	db0b      	blt.n	8003596 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800357e:	79fb      	ldrb	r3, [r7, #7]
 8003580:	f003 021f 	and.w	r2, r3, #31
 8003584:	4907      	ldr	r1, [pc, #28]	; (80035a4 <__NVIC_EnableIRQ+0x38>)
 8003586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800358a:	095b      	lsrs	r3, r3, #5
 800358c:	2001      	movs	r0, #1
 800358e:	fa00 f202 	lsl.w	r2, r0, r2
 8003592:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003596:	bf00      	nop
 8003598:	370c      	adds	r7, #12
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop
 80035a4:	e000e100 	.word	0xe000e100

080035a8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	4603      	mov	r3, r0
 80035b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	db12      	blt.n	80035e0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035ba:	79fb      	ldrb	r3, [r7, #7]
 80035bc:	f003 021f 	and.w	r2, r3, #31
 80035c0:	490a      	ldr	r1, [pc, #40]	; (80035ec <__NVIC_DisableIRQ+0x44>)
 80035c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035c6:	095b      	lsrs	r3, r3, #5
 80035c8:	2001      	movs	r0, #1
 80035ca:	fa00 f202 	lsl.w	r2, r0, r2
 80035ce:	3320      	adds	r3, #32
 80035d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80035d4:	f3bf 8f4f 	dsb	sy
}
 80035d8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80035da:	f3bf 8f6f 	isb	sy
}
 80035de:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80035e0:	bf00      	nop
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr
 80035ec:	e000e100 	.word	0xe000e100

080035f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	4603      	mov	r3, r0
 80035f8:	6039      	str	r1, [r7, #0]
 80035fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003600:	2b00      	cmp	r3, #0
 8003602:	db0a      	blt.n	800361a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	b2da      	uxtb	r2, r3
 8003608:	490c      	ldr	r1, [pc, #48]	; (800363c <__NVIC_SetPriority+0x4c>)
 800360a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800360e:	0112      	lsls	r2, r2, #4
 8003610:	b2d2      	uxtb	r2, r2
 8003612:	440b      	add	r3, r1
 8003614:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003618:	e00a      	b.n	8003630 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	b2da      	uxtb	r2, r3
 800361e:	4908      	ldr	r1, [pc, #32]	; (8003640 <__NVIC_SetPriority+0x50>)
 8003620:	79fb      	ldrb	r3, [r7, #7]
 8003622:	f003 030f 	and.w	r3, r3, #15
 8003626:	3b04      	subs	r3, #4
 8003628:	0112      	lsls	r2, r2, #4
 800362a:	b2d2      	uxtb	r2, r2
 800362c:	440b      	add	r3, r1
 800362e:	761a      	strb	r2, [r3, #24]
}
 8003630:	bf00      	nop
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr
 800363c:	e000e100 	.word	0xe000e100
 8003640:	e000ed00 	.word	0xe000ed00

08003644 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003644:	b480      	push	{r7}
 8003646:	b089      	sub	sp, #36	; 0x24
 8003648:	af00      	add	r7, sp, #0
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f003 0307 	and.w	r3, r3, #7
 8003656:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	f1c3 0307 	rsb	r3, r3, #7
 800365e:	2b04      	cmp	r3, #4
 8003660:	bf28      	it	cs
 8003662:	2304      	movcs	r3, #4
 8003664:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	3304      	adds	r3, #4
 800366a:	2b06      	cmp	r3, #6
 800366c:	d902      	bls.n	8003674 <NVIC_EncodePriority+0x30>
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	3b03      	subs	r3, #3
 8003672:	e000      	b.n	8003676 <NVIC_EncodePriority+0x32>
 8003674:	2300      	movs	r3, #0
 8003676:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003678:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	fa02 f303 	lsl.w	r3, r2, r3
 8003682:	43da      	mvns	r2, r3
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	401a      	ands	r2, r3
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800368c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	fa01 f303 	lsl.w	r3, r1, r3
 8003696:	43d9      	mvns	r1, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800369c:	4313      	orrs	r3, r2
         );
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3724      	adds	r7, #36	; 0x24
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr
	...

080036ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	3b01      	subs	r3, #1
 80036b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036bc:	d301      	bcc.n	80036c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036be:	2301      	movs	r3, #1
 80036c0:	e00f      	b.n	80036e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036c2:	4a0a      	ldr	r2, [pc, #40]	; (80036ec <SysTick_Config+0x40>)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	3b01      	subs	r3, #1
 80036c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036ca:	210f      	movs	r1, #15
 80036cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80036d0:	f7ff ff8e 	bl	80035f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036d4:	4b05      	ldr	r3, [pc, #20]	; (80036ec <SysTick_Config+0x40>)
 80036d6:	2200      	movs	r2, #0
 80036d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036da:	4b04      	ldr	r3, [pc, #16]	; (80036ec <SysTick_Config+0x40>)
 80036dc:	2207      	movs	r2, #7
 80036de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036e0:	2300      	movs	r3, #0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3708      	adds	r7, #8
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	e000e010 	.word	0xe000e010

080036f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f7ff ff05 	bl	8003508 <__NVIC_SetPriorityGrouping>
}
 80036fe:	bf00      	nop
 8003700:	3708      	adds	r7, #8
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}

08003706 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003706:	b580      	push	{r7, lr}
 8003708:	b086      	sub	sp, #24
 800370a:	af00      	add	r7, sp, #0
 800370c:	4603      	mov	r3, r0
 800370e:	60b9      	str	r1, [r7, #8]
 8003710:	607a      	str	r2, [r7, #4]
 8003712:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003714:	2300      	movs	r3, #0
 8003716:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003718:	f7ff ff1a 	bl	8003550 <__NVIC_GetPriorityGrouping>
 800371c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	68b9      	ldr	r1, [r7, #8]
 8003722:	6978      	ldr	r0, [r7, #20]
 8003724:	f7ff ff8e 	bl	8003644 <NVIC_EncodePriority>
 8003728:	4602      	mov	r2, r0
 800372a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800372e:	4611      	mov	r1, r2
 8003730:	4618      	mov	r0, r3
 8003732:	f7ff ff5d 	bl	80035f0 <__NVIC_SetPriority>
}
 8003736:	bf00      	nop
 8003738:	3718      	adds	r7, #24
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}

0800373e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800373e:	b580      	push	{r7, lr}
 8003740:	b082      	sub	sp, #8
 8003742:	af00      	add	r7, sp, #0
 8003744:	4603      	mov	r3, r0
 8003746:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003748:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800374c:	4618      	mov	r0, r3
 800374e:	f7ff ff0d 	bl	800356c <__NVIC_EnableIRQ>
}
 8003752:	bf00      	nop
 8003754:	3708      	adds	r7, #8
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}

0800375a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800375a:	b580      	push	{r7, lr}
 800375c:	b082      	sub	sp, #8
 800375e:	af00      	add	r7, sp, #0
 8003760:	4603      	mov	r3, r0
 8003762:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003764:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003768:	4618      	mov	r0, r3
 800376a:	f7ff ff1d 	bl	80035a8 <__NVIC_DisableIRQ>
}
 800376e:	bf00      	nop
 8003770:	3708      	adds	r7, #8
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}

08003776 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003776:	b580      	push	{r7, lr}
 8003778:	b082      	sub	sp, #8
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f7ff ff94 	bl	80036ac <SysTick_Config>
 8003784:	4603      	mov	r3, r0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3708      	adds	r7, #8
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
	...

08003790 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b086      	sub	sp, #24
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003798:	2300      	movs	r3, #0
 800379a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800379c:	f7ff fac6 	bl	8002d2c <HAL_GetTick>
 80037a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d101      	bne.n	80037ac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e099      	b.n	80038e0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2202      	movs	r2, #2
 80037b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f022 0201 	bic.w	r2, r2, #1
 80037ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037cc:	e00f      	b.n	80037ee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80037ce:	f7ff faad 	bl	8002d2c <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	2b05      	cmp	r3, #5
 80037da:	d908      	bls.n	80037ee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2220      	movs	r2, #32
 80037e0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2203      	movs	r2, #3
 80037e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e078      	b.n	80038e0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0301 	and.w	r3, r3, #1
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d1e8      	bne.n	80037ce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003804:	697a      	ldr	r2, [r7, #20]
 8003806:	4b38      	ldr	r3, [pc, #224]	; (80038e8 <HAL_DMA_Init+0x158>)
 8003808:	4013      	ands	r3, r2
 800380a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	685a      	ldr	r2, [r3, #4]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800381a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	691b      	ldr	r3, [r3, #16]
 8003820:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003826:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	699b      	ldr	r3, [r3, #24]
 800382c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003832:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6a1b      	ldr	r3, [r3, #32]
 8003838:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800383a:	697a      	ldr	r2, [r7, #20]
 800383c:	4313      	orrs	r3, r2
 800383e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003844:	2b04      	cmp	r3, #4
 8003846:	d107      	bne.n	8003858 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003850:	4313      	orrs	r3, r2
 8003852:	697a      	ldr	r2, [r7, #20]
 8003854:	4313      	orrs	r3, r2
 8003856:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	697a      	ldr	r2, [r7, #20]
 800385e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	695b      	ldr	r3, [r3, #20]
 8003866:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	f023 0307 	bic.w	r3, r3, #7
 800386e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003874:	697a      	ldr	r2, [r7, #20]
 8003876:	4313      	orrs	r3, r2
 8003878:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387e:	2b04      	cmp	r3, #4
 8003880:	d117      	bne.n	80038b2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003886:	697a      	ldr	r2, [r7, #20]
 8003888:	4313      	orrs	r3, r2
 800388a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003890:	2b00      	cmp	r3, #0
 8003892:	d00e      	beq.n	80038b2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f000 f969 	bl	8003b6c <DMA_CheckFifoParam>
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d008      	beq.n	80038b2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2240      	movs	r2, #64	; 0x40
 80038a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2201      	movs	r2, #1
 80038aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80038ae:	2301      	movs	r3, #1
 80038b0:	e016      	b.n	80038e0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	697a      	ldr	r2, [r7, #20]
 80038b8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 f920 	bl	8003b00 <DMA_CalcBaseAndBitshift>
 80038c0:	4603      	mov	r3, r0
 80038c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038c8:	223f      	movs	r2, #63	; 0x3f
 80038ca:	409a      	lsls	r2, r3
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2201      	movs	r2, #1
 80038da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80038de:	2300      	movs	r3, #0
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3718      	adds	r7, #24
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	e010803f 	.word	0xe010803f

080038ec <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b086      	sub	sp, #24
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	607a      	str	r2, [r7, #4]
 80038f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038fa:	2300      	movs	r3, #0
 80038fc:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003904:	2b01      	cmp	r3, #1
 8003906:	d101      	bne.n	800390c <HAL_DMA_Start+0x20>
 8003908:	2302      	movs	r3, #2
 800390a:	e026      	b.n	800395a <HAL_DMA_Start+0x6e>
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800391a:	b2db      	uxtb	r3, r3
 800391c:	2b01      	cmp	r3, #1
 800391e:	d115      	bne.n	800394c <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2202      	movs	r2, #2
 8003924:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2200      	movs	r2, #0
 800392c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	68b9      	ldr	r1, [r7, #8]
 8003934:	68f8      	ldr	r0, [r7, #12]
 8003936:	f000 f8b4 	bl	8003aa2 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f042 0201 	orr.w	r2, r2, #1
 8003948:	601a      	str	r2, [r3, #0]
 800394a:	e005      	b.n	8003958 <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2200      	movs	r2, #0
 8003950:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003954:	2302      	movs	r3, #2
 8003956:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 8003958:	7dfb      	ldrb	r3, [r7, #23]
}
 800395a:	4618      	mov	r0, r3
 800395c:	3718      	adds	r7, #24
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}

08003962 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003962:	b580      	push	{r7, lr}
 8003964:	b084      	sub	sp, #16
 8003966:	af00      	add	r7, sp, #0
 8003968:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800396e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003970:	f7ff f9dc 	bl	8002d2c <HAL_GetTick>
 8003974:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800397c:	b2db      	uxtb	r3, r3
 800397e:	2b02      	cmp	r3, #2
 8003980:	d008      	beq.n	8003994 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2280      	movs	r2, #128	; 0x80
 8003986:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2200      	movs	r2, #0
 800398c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e052      	b.n	8003a3a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f022 0216 	bic.w	r2, r2, #22
 80039a2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	695a      	ldr	r2, [r3, #20]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039b2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d103      	bne.n	80039c4 <HAL_DMA_Abort+0x62>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d007      	beq.n	80039d4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f022 0208 	bic.w	r2, r2, #8
 80039d2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f022 0201 	bic.w	r2, r2, #1
 80039e2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039e4:	e013      	b.n	8003a0e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80039e6:	f7ff f9a1 	bl	8002d2c <HAL_GetTick>
 80039ea:	4602      	mov	r2, r0
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	2b05      	cmp	r3, #5
 80039f2:	d90c      	bls.n	8003a0e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2220      	movs	r2, #32
 80039f8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2203      	movs	r2, #3
 8003a06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e015      	b.n	8003a3a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0301 	and.w	r3, r3, #1
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d1e4      	bne.n	80039e6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a20:	223f      	movs	r2, #63	; 0x3f
 8003a22:	409a      	lsls	r2, r3
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3710      	adds	r7, #16
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}

08003a42 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a42:	b480      	push	{r7}
 8003a44:	b083      	sub	sp, #12
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d004      	beq.n	8003a60 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2280      	movs	r2, #128	; 0x80
 8003a5a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e00c      	b.n	8003a7a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2205      	movs	r2, #5
 8003a64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f022 0201 	bic.w	r2, r2, #1
 8003a76:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003a78:	2300      	movs	r3, #0
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	370c      	adds	r7, #12
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr

08003a86 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003a86:	b480      	push	{r7}
 8003a88:	b083      	sub	sp, #12
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a94:	b2db      	uxtb	r3, r3
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	370c      	adds	r7, #12
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr

08003aa2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003aa2:	b480      	push	{r7}
 8003aa4:	b085      	sub	sp, #20
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	60f8      	str	r0, [r7, #12]
 8003aaa:	60b9      	str	r1, [r7, #8]
 8003aac:	607a      	str	r2, [r7, #4]
 8003aae:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003abe:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	683a      	ldr	r2, [r7, #0]
 8003ac6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	2b40      	cmp	r3, #64	; 0x40
 8003ace:	d108      	bne.n	8003ae2 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	68ba      	ldr	r2, [r7, #8]
 8003ade:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003ae0:	e007      	b.n	8003af2 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68ba      	ldr	r2, [r7, #8]
 8003ae8:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	60da      	str	r2, [r3, #12]
}
 8003af2:	bf00      	nop
 8003af4:	3714      	adds	r7, #20
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr
	...

08003b00 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b085      	sub	sp, #20
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	3b10      	subs	r3, #16
 8003b10:	4a14      	ldr	r2, [pc, #80]	; (8003b64 <DMA_CalcBaseAndBitshift+0x64>)
 8003b12:	fba2 2303 	umull	r2, r3, r2, r3
 8003b16:	091b      	lsrs	r3, r3, #4
 8003b18:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003b1a:	4a13      	ldr	r2, [pc, #76]	; (8003b68 <DMA_CalcBaseAndBitshift+0x68>)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	4413      	add	r3, r2
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	461a      	mov	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2b03      	cmp	r3, #3
 8003b2c:	d909      	bls.n	8003b42 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003b36:	f023 0303 	bic.w	r3, r3, #3
 8003b3a:	1d1a      	adds	r2, r3, #4
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	659a      	str	r2, [r3, #88]	; 0x58
 8003b40:	e007      	b.n	8003b52 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003b4a:	f023 0303 	bic.w	r3, r3, #3
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3714      	adds	r7, #20
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	aaaaaaab 	.word	0xaaaaaaab
 8003b68:	0801bb78 	.word	0x0801bb78

08003b6c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b085      	sub	sp, #20
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b74:	2300      	movs	r3, #0
 8003b76:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b7c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	699b      	ldr	r3, [r3, #24]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d11f      	bne.n	8003bc6 <DMA_CheckFifoParam+0x5a>
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	2b03      	cmp	r3, #3
 8003b8a:	d856      	bhi.n	8003c3a <DMA_CheckFifoParam+0xce>
 8003b8c:	a201      	add	r2, pc, #4	; (adr r2, 8003b94 <DMA_CheckFifoParam+0x28>)
 8003b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b92:	bf00      	nop
 8003b94:	08003ba5 	.word	0x08003ba5
 8003b98:	08003bb7 	.word	0x08003bb7
 8003b9c:	08003ba5 	.word	0x08003ba5
 8003ba0:	08003c3b 	.word	0x08003c3b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d046      	beq.n	8003c3e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bb4:	e043      	b.n	8003c3e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003bbe:	d140      	bne.n	8003c42 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bc4:	e03d      	b.n	8003c42 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	699b      	ldr	r3, [r3, #24]
 8003bca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bce:	d121      	bne.n	8003c14 <DMA_CheckFifoParam+0xa8>
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	2b03      	cmp	r3, #3
 8003bd4:	d837      	bhi.n	8003c46 <DMA_CheckFifoParam+0xda>
 8003bd6:	a201      	add	r2, pc, #4	; (adr r2, 8003bdc <DMA_CheckFifoParam+0x70>)
 8003bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bdc:	08003bed 	.word	0x08003bed
 8003be0:	08003bf3 	.word	0x08003bf3
 8003be4:	08003bed 	.word	0x08003bed
 8003be8:	08003c05 	.word	0x08003c05
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	73fb      	strb	r3, [r7, #15]
      break;
 8003bf0:	e030      	b.n	8003c54 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d025      	beq.n	8003c4a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c02:	e022      	b.n	8003c4a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c08:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c0c:	d11f      	bne.n	8003c4e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003c12:	e01c      	b.n	8003c4e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d903      	bls.n	8003c22 <DMA_CheckFifoParam+0xb6>
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	2b03      	cmp	r3, #3
 8003c1e:	d003      	beq.n	8003c28 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003c20:	e018      	b.n	8003c54 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	73fb      	strb	r3, [r7, #15]
      break;
 8003c26:	e015      	b.n	8003c54 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d00e      	beq.n	8003c52 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	73fb      	strb	r3, [r7, #15]
      break;
 8003c38:	e00b      	b.n	8003c52 <DMA_CheckFifoParam+0xe6>
      break;
 8003c3a:	bf00      	nop
 8003c3c:	e00a      	b.n	8003c54 <DMA_CheckFifoParam+0xe8>
      break;
 8003c3e:	bf00      	nop
 8003c40:	e008      	b.n	8003c54 <DMA_CheckFifoParam+0xe8>
      break;
 8003c42:	bf00      	nop
 8003c44:	e006      	b.n	8003c54 <DMA_CheckFifoParam+0xe8>
      break;
 8003c46:	bf00      	nop
 8003c48:	e004      	b.n	8003c54 <DMA_CheckFifoParam+0xe8>
      break;
 8003c4a:	bf00      	nop
 8003c4c:	e002      	b.n	8003c54 <DMA_CheckFifoParam+0xe8>
      break;   
 8003c4e:	bf00      	nop
 8003c50:	e000      	b.n	8003c54 <DMA_CheckFifoParam+0xe8>
      break;
 8003c52:	bf00      	nop
    }
  } 
  
  return status; 
 8003c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3714      	adds	r7, #20
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr
 8003c62:	bf00      	nop

08003c64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b089      	sub	sp, #36	; 0x24
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003c72:	2300      	movs	r3, #0
 8003c74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003c76:	2300      	movs	r3, #0
 8003c78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	61fb      	str	r3, [r7, #28]
 8003c7e:	e165      	b.n	8003f4c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003c80:	2201      	movs	r2, #1
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	fa02 f303 	lsl.w	r3, r2, r3
 8003c88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	697a      	ldr	r2, [r7, #20]
 8003c90:	4013      	ands	r3, r2
 8003c92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c94:	693a      	ldr	r2, [r7, #16]
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	f040 8154 	bne.w	8003f46 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	f003 0303 	and.w	r3, r3, #3
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d005      	beq.n	8003cb6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d130      	bne.n	8003d18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	005b      	lsls	r3, r3, #1
 8003cc0:	2203      	movs	r2, #3
 8003cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc6:	43db      	mvns	r3, r3
 8003cc8:	69ba      	ldr	r2, [r7, #24]
 8003cca:	4013      	ands	r3, r2
 8003ccc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	68da      	ldr	r2, [r3, #12]
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	005b      	lsls	r3, r3, #1
 8003cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cda:	69ba      	ldr	r2, [r7, #24]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	69ba      	ldr	r2, [r7, #24]
 8003ce4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003cec:	2201      	movs	r2, #1
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf4:	43db      	mvns	r3, r3
 8003cf6:	69ba      	ldr	r2, [r7, #24]
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	091b      	lsrs	r3, r3, #4
 8003d02:	f003 0201 	and.w	r2, r3, #1
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0c:	69ba      	ldr	r2, [r7, #24]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	69ba      	ldr	r2, [r7, #24]
 8003d16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f003 0303 	and.w	r3, r3, #3
 8003d20:	2b03      	cmp	r3, #3
 8003d22:	d017      	beq.n	8003d54 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	005b      	lsls	r3, r3, #1
 8003d2e:	2203      	movs	r2, #3
 8003d30:	fa02 f303 	lsl.w	r3, r2, r3
 8003d34:	43db      	mvns	r3, r3
 8003d36:	69ba      	ldr	r2, [r7, #24]
 8003d38:	4013      	ands	r3, r2
 8003d3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	689a      	ldr	r2, [r3, #8]
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	005b      	lsls	r3, r3, #1
 8003d44:	fa02 f303 	lsl.w	r3, r2, r3
 8003d48:	69ba      	ldr	r2, [r7, #24]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	69ba      	ldr	r2, [r7, #24]
 8003d52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	f003 0303 	and.w	r3, r3, #3
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d123      	bne.n	8003da8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	08da      	lsrs	r2, r3, #3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	3208      	adds	r2, #8
 8003d68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	f003 0307 	and.w	r3, r3, #7
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	220f      	movs	r2, #15
 8003d78:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7c:	43db      	mvns	r3, r3
 8003d7e:	69ba      	ldr	r2, [r7, #24]
 8003d80:	4013      	ands	r3, r2
 8003d82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	691a      	ldr	r2, [r3, #16]
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	f003 0307 	and.w	r3, r3, #7
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	fa02 f303 	lsl.w	r3, r2, r3
 8003d94:	69ba      	ldr	r2, [r7, #24]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	08da      	lsrs	r2, r3, #3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	3208      	adds	r2, #8
 8003da2:	69b9      	ldr	r1, [r7, #24]
 8003da4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	005b      	lsls	r3, r3, #1
 8003db2:	2203      	movs	r2, #3
 8003db4:	fa02 f303 	lsl.w	r3, r2, r3
 8003db8:	43db      	mvns	r3, r3
 8003dba:	69ba      	ldr	r2, [r7, #24]
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f003 0203 	and.w	r2, r3, #3
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	005b      	lsls	r3, r3, #1
 8003dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd0:	69ba      	ldr	r2, [r7, #24]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	69ba      	ldr	r2, [r7, #24]
 8003dda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	f000 80ae 	beq.w	8003f46 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dea:	2300      	movs	r3, #0
 8003dec:	60fb      	str	r3, [r7, #12]
 8003dee:	4b5d      	ldr	r3, [pc, #372]	; (8003f64 <HAL_GPIO_Init+0x300>)
 8003df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df2:	4a5c      	ldr	r2, [pc, #368]	; (8003f64 <HAL_GPIO_Init+0x300>)
 8003df4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003df8:	6453      	str	r3, [r2, #68]	; 0x44
 8003dfa:	4b5a      	ldr	r3, [pc, #360]	; (8003f64 <HAL_GPIO_Init+0x300>)
 8003dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e02:	60fb      	str	r3, [r7, #12]
 8003e04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e06:	4a58      	ldr	r2, [pc, #352]	; (8003f68 <HAL_GPIO_Init+0x304>)
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	089b      	lsrs	r3, r3, #2
 8003e0c:	3302      	adds	r3, #2
 8003e0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	f003 0303 	and.w	r3, r3, #3
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	220f      	movs	r2, #15
 8003e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e22:	43db      	mvns	r3, r3
 8003e24:	69ba      	ldr	r2, [r7, #24]
 8003e26:	4013      	ands	r3, r2
 8003e28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a4f      	ldr	r2, [pc, #316]	; (8003f6c <HAL_GPIO_Init+0x308>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d025      	beq.n	8003e7e <HAL_GPIO_Init+0x21a>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a4e      	ldr	r2, [pc, #312]	; (8003f70 <HAL_GPIO_Init+0x30c>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d01f      	beq.n	8003e7a <HAL_GPIO_Init+0x216>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a4d      	ldr	r2, [pc, #308]	; (8003f74 <HAL_GPIO_Init+0x310>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d019      	beq.n	8003e76 <HAL_GPIO_Init+0x212>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a4c      	ldr	r2, [pc, #304]	; (8003f78 <HAL_GPIO_Init+0x314>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d013      	beq.n	8003e72 <HAL_GPIO_Init+0x20e>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a4b      	ldr	r2, [pc, #300]	; (8003f7c <HAL_GPIO_Init+0x318>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d00d      	beq.n	8003e6e <HAL_GPIO_Init+0x20a>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a4a      	ldr	r2, [pc, #296]	; (8003f80 <HAL_GPIO_Init+0x31c>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d007      	beq.n	8003e6a <HAL_GPIO_Init+0x206>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a49      	ldr	r2, [pc, #292]	; (8003f84 <HAL_GPIO_Init+0x320>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d101      	bne.n	8003e66 <HAL_GPIO_Init+0x202>
 8003e62:	2306      	movs	r3, #6
 8003e64:	e00c      	b.n	8003e80 <HAL_GPIO_Init+0x21c>
 8003e66:	2307      	movs	r3, #7
 8003e68:	e00a      	b.n	8003e80 <HAL_GPIO_Init+0x21c>
 8003e6a:	2305      	movs	r3, #5
 8003e6c:	e008      	b.n	8003e80 <HAL_GPIO_Init+0x21c>
 8003e6e:	2304      	movs	r3, #4
 8003e70:	e006      	b.n	8003e80 <HAL_GPIO_Init+0x21c>
 8003e72:	2303      	movs	r3, #3
 8003e74:	e004      	b.n	8003e80 <HAL_GPIO_Init+0x21c>
 8003e76:	2302      	movs	r3, #2
 8003e78:	e002      	b.n	8003e80 <HAL_GPIO_Init+0x21c>
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e000      	b.n	8003e80 <HAL_GPIO_Init+0x21c>
 8003e7e:	2300      	movs	r3, #0
 8003e80:	69fa      	ldr	r2, [r7, #28]
 8003e82:	f002 0203 	and.w	r2, r2, #3
 8003e86:	0092      	lsls	r2, r2, #2
 8003e88:	4093      	lsls	r3, r2
 8003e8a:	69ba      	ldr	r2, [r7, #24]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e90:	4935      	ldr	r1, [pc, #212]	; (8003f68 <HAL_GPIO_Init+0x304>)
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	089b      	lsrs	r3, r3, #2
 8003e96:	3302      	adds	r3, #2
 8003e98:	69ba      	ldr	r2, [r7, #24]
 8003e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e9e:	4b3a      	ldr	r3, [pc, #232]	; (8003f88 <HAL_GPIO_Init+0x324>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	43db      	mvns	r3, r3
 8003ea8:	69ba      	ldr	r2, [r7, #24]
 8003eaa:	4013      	ands	r3, r2
 8003eac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d003      	beq.n	8003ec2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003eba:	69ba      	ldr	r2, [r7, #24]
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ec2:	4a31      	ldr	r2, [pc, #196]	; (8003f88 <HAL_GPIO_Init+0x324>)
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003ec8:	4b2f      	ldr	r3, [pc, #188]	; (8003f88 <HAL_GPIO_Init+0x324>)
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	43db      	mvns	r3, r3
 8003ed2:	69ba      	ldr	r2, [r7, #24]
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d003      	beq.n	8003eec <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003ee4:	69ba      	ldr	r2, [r7, #24]
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003eec:	4a26      	ldr	r2, [pc, #152]	; (8003f88 <HAL_GPIO_Init+0x324>)
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ef2:	4b25      	ldr	r3, [pc, #148]	; (8003f88 <HAL_GPIO_Init+0x324>)
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	43db      	mvns	r3, r3
 8003efc:	69ba      	ldr	r2, [r7, #24]
 8003efe:	4013      	ands	r3, r2
 8003f00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d003      	beq.n	8003f16 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003f0e:	69ba      	ldr	r2, [r7, #24]
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f16:	4a1c      	ldr	r2, [pc, #112]	; (8003f88 <HAL_GPIO_Init+0x324>)
 8003f18:	69bb      	ldr	r3, [r7, #24]
 8003f1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f1c:	4b1a      	ldr	r3, [pc, #104]	; (8003f88 <HAL_GPIO_Init+0x324>)
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	43db      	mvns	r3, r3
 8003f26:	69ba      	ldr	r2, [r7, #24]
 8003f28:	4013      	ands	r3, r2
 8003f2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d003      	beq.n	8003f40 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003f38:	69ba      	ldr	r2, [r7, #24]
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f40:	4a11      	ldr	r2, [pc, #68]	; (8003f88 <HAL_GPIO_Init+0x324>)
 8003f42:	69bb      	ldr	r3, [r7, #24]
 8003f44:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	3301      	adds	r3, #1
 8003f4a:	61fb      	str	r3, [r7, #28]
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	2b0f      	cmp	r3, #15
 8003f50:	f67f ae96 	bls.w	8003c80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003f54:	bf00      	nop
 8003f56:	bf00      	nop
 8003f58:	3724      	adds	r7, #36	; 0x24
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	40023800 	.word	0x40023800
 8003f68:	40013800 	.word	0x40013800
 8003f6c:	40020000 	.word	0x40020000
 8003f70:	40020400 	.word	0x40020400
 8003f74:	40020800 	.word	0x40020800
 8003f78:	40020c00 	.word	0x40020c00
 8003f7c:	40021000 	.word	0x40021000
 8003f80:	40021400 	.word	0x40021400
 8003f84:	40021800 	.word	0x40021800
 8003f88:	40013c00 	.word	0x40013c00

08003f8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	460b      	mov	r3, r1
 8003f96:	807b      	strh	r3, [r7, #2]
 8003f98:	4613      	mov	r3, r2
 8003f9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f9c:	787b      	ldrb	r3, [r7, #1]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d003      	beq.n	8003faa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003fa2:	887a      	ldrh	r2, [r7, #2]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003fa8:	e003      	b.n	8003fb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003faa:	887b      	ldrh	r3, [r7, #2]
 8003fac:	041a      	lsls	r2, r3, #16
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	619a      	str	r2, [r3, #24]
}
 8003fb2:	bf00      	nop
 8003fb4:	370c      	adds	r7, #12
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr
	...

08003fc0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b082      	sub	sp, #8
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003fca:	4b08      	ldr	r3, [pc, #32]	; (8003fec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003fcc:	695a      	ldr	r2, [r3, #20]
 8003fce:	88fb      	ldrh	r3, [r7, #6]
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d006      	beq.n	8003fe4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003fd6:	4a05      	ldr	r2, [pc, #20]	; (8003fec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003fd8:	88fb      	ldrh	r3, [r7, #6]
 8003fda:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003fdc:	88fb      	ldrh	r3, [r7, #6]
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f7fd fdba 	bl	8001b58 <HAL_GPIO_EXTI_Callback>
  }
}
 8003fe4:	bf00      	nop
 8003fe6:	3708      	adds	r7, #8
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	40013c00 	.word	0x40013c00

08003ff0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d101      	bne.n	8004002 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e12b      	b.n	800425a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004008:	b2db      	uxtb	r3, r3
 800400a:	2b00      	cmp	r3, #0
 800400c:	d106      	bne.n	800401c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f7fd fa84 	bl	8001524 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2224      	movs	r2, #36	; 0x24
 8004020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f022 0201 	bic.w	r2, r2, #1
 8004032:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004042:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004052:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004054:	f002 fd0e 	bl	8006a74 <HAL_RCC_GetPCLK1Freq>
 8004058:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	4a81      	ldr	r2, [pc, #516]	; (8004264 <HAL_I2C_Init+0x274>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d807      	bhi.n	8004074 <HAL_I2C_Init+0x84>
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	4a80      	ldr	r2, [pc, #512]	; (8004268 <HAL_I2C_Init+0x278>)
 8004068:	4293      	cmp	r3, r2
 800406a:	bf94      	ite	ls
 800406c:	2301      	movls	r3, #1
 800406e:	2300      	movhi	r3, #0
 8004070:	b2db      	uxtb	r3, r3
 8004072:	e006      	b.n	8004082 <HAL_I2C_Init+0x92>
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	4a7d      	ldr	r2, [pc, #500]	; (800426c <HAL_I2C_Init+0x27c>)
 8004078:	4293      	cmp	r3, r2
 800407a:	bf94      	ite	ls
 800407c:	2301      	movls	r3, #1
 800407e:	2300      	movhi	r3, #0
 8004080:	b2db      	uxtb	r3, r3
 8004082:	2b00      	cmp	r3, #0
 8004084:	d001      	beq.n	800408a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e0e7      	b.n	800425a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	4a78      	ldr	r2, [pc, #480]	; (8004270 <HAL_I2C_Init+0x280>)
 800408e:	fba2 2303 	umull	r2, r3, r2, r3
 8004092:	0c9b      	lsrs	r3, r3, #18
 8004094:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	68ba      	ldr	r2, [r7, #8]
 80040a6:	430a      	orrs	r2, r1
 80040a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	6a1b      	ldr	r3, [r3, #32]
 80040b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	4a6a      	ldr	r2, [pc, #424]	; (8004264 <HAL_I2C_Init+0x274>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d802      	bhi.n	80040c4 <HAL_I2C_Init+0xd4>
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	3301      	adds	r3, #1
 80040c2:	e009      	b.n	80040d8 <HAL_I2C_Init+0xe8>
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80040ca:	fb02 f303 	mul.w	r3, r2, r3
 80040ce:	4a69      	ldr	r2, [pc, #420]	; (8004274 <HAL_I2C_Init+0x284>)
 80040d0:	fba2 2303 	umull	r2, r3, r2, r3
 80040d4:	099b      	lsrs	r3, r3, #6
 80040d6:	3301      	adds	r3, #1
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	6812      	ldr	r2, [r2, #0]
 80040dc:	430b      	orrs	r3, r1
 80040de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	69db      	ldr	r3, [r3, #28]
 80040e6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80040ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	495c      	ldr	r1, [pc, #368]	; (8004264 <HAL_I2C_Init+0x274>)
 80040f4:	428b      	cmp	r3, r1
 80040f6:	d819      	bhi.n	800412c <HAL_I2C_Init+0x13c>
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	1e59      	subs	r1, r3, #1
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	005b      	lsls	r3, r3, #1
 8004102:	fbb1 f3f3 	udiv	r3, r1, r3
 8004106:	1c59      	adds	r1, r3, #1
 8004108:	f640 73fc 	movw	r3, #4092	; 0xffc
 800410c:	400b      	ands	r3, r1
 800410e:	2b00      	cmp	r3, #0
 8004110:	d00a      	beq.n	8004128 <HAL_I2C_Init+0x138>
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	1e59      	subs	r1, r3, #1
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	005b      	lsls	r3, r3, #1
 800411c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004120:	3301      	adds	r3, #1
 8004122:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004126:	e051      	b.n	80041cc <HAL_I2C_Init+0x1dc>
 8004128:	2304      	movs	r3, #4
 800412a:	e04f      	b.n	80041cc <HAL_I2C_Init+0x1dc>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d111      	bne.n	8004158 <HAL_I2C_Init+0x168>
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	1e58      	subs	r0, r3, #1
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6859      	ldr	r1, [r3, #4]
 800413c:	460b      	mov	r3, r1
 800413e:	005b      	lsls	r3, r3, #1
 8004140:	440b      	add	r3, r1
 8004142:	fbb0 f3f3 	udiv	r3, r0, r3
 8004146:	3301      	adds	r3, #1
 8004148:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800414c:	2b00      	cmp	r3, #0
 800414e:	bf0c      	ite	eq
 8004150:	2301      	moveq	r3, #1
 8004152:	2300      	movne	r3, #0
 8004154:	b2db      	uxtb	r3, r3
 8004156:	e012      	b.n	800417e <HAL_I2C_Init+0x18e>
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	1e58      	subs	r0, r3, #1
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6859      	ldr	r1, [r3, #4]
 8004160:	460b      	mov	r3, r1
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	440b      	add	r3, r1
 8004166:	0099      	lsls	r1, r3, #2
 8004168:	440b      	add	r3, r1
 800416a:	fbb0 f3f3 	udiv	r3, r0, r3
 800416e:	3301      	adds	r3, #1
 8004170:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004174:	2b00      	cmp	r3, #0
 8004176:	bf0c      	ite	eq
 8004178:	2301      	moveq	r3, #1
 800417a:	2300      	movne	r3, #0
 800417c:	b2db      	uxtb	r3, r3
 800417e:	2b00      	cmp	r3, #0
 8004180:	d001      	beq.n	8004186 <HAL_I2C_Init+0x196>
 8004182:	2301      	movs	r3, #1
 8004184:	e022      	b.n	80041cc <HAL_I2C_Init+0x1dc>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d10e      	bne.n	80041ac <HAL_I2C_Init+0x1bc>
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	1e58      	subs	r0, r3, #1
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6859      	ldr	r1, [r3, #4]
 8004196:	460b      	mov	r3, r1
 8004198:	005b      	lsls	r3, r3, #1
 800419a:	440b      	add	r3, r1
 800419c:	fbb0 f3f3 	udiv	r3, r0, r3
 80041a0:	3301      	adds	r3, #1
 80041a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041aa:	e00f      	b.n	80041cc <HAL_I2C_Init+0x1dc>
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	1e58      	subs	r0, r3, #1
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6859      	ldr	r1, [r3, #4]
 80041b4:	460b      	mov	r3, r1
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	440b      	add	r3, r1
 80041ba:	0099      	lsls	r1, r3, #2
 80041bc:	440b      	add	r3, r1
 80041be:	fbb0 f3f3 	udiv	r3, r0, r3
 80041c2:	3301      	adds	r3, #1
 80041c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80041cc:	6879      	ldr	r1, [r7, #4]
 80041ce:	6809      	ldr	r1, [r1, #0]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	69da      	ldr	r2, [r3, #28]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a1b      	ldr	r3, [r3, #32]
 80041e6:	431a      	orrs	r2, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	430a      	orrs	r2, r1
 80041ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80041fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	6911      	ldr	r1, [r2, #16]
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	68d2      	ldr	r2, [r2, #12]
 8004206:	4311      	orrs	r1, r2
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	6812      	ldr	r2, [r2, #0]
 800420c:	430b      	orrs	r3, r1
 800420e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	695a      	ldr	r2, [r3, #20]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	699b      	ldr	r3, [r3, #24]
 8004222:	431a      	orrs	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	430a      	orrs	r2, r1
 800422a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f042 0201 	orr.w	r2, r2, #1
 800423a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2220      	movs	r2, #32
 8004246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	3710      	adds	r7, #16
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	000186a0 	.word	0x000186a0
 8004268:	001e847f 	.word	0x001e847f
 800426c:	003d08ff 	.word	0x003d08ff
 8004270:	431bde83 	.word	0x431bde83
 8004274:	10624dd3 	.word	0x10624dd3

08004278 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b088      	sub	sp, #32
 800427c:	af02      	add	r7, sp, #8
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	607a      	str	r2, [r7, #4]
 8004282:	461a      	mov	r2, r3
 8004284:	460b      	mov	r3, r1
 8004286:	817b      	strh	r3, [r7, #10]
 8004288:	4613      	mov	r3, r2
 800428a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800428c:	f7fe fd4e 	bl	8002d2c <HAL_GetTick>
 8004290:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004298:	b2db      	uxtb	r3, r3
 800429a:	2b20      	cmp	r3, #32
 800429c:	f040 80e0 	bne.w	8004460 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	9300      	str	r3, [sp, #0]
 80042a4:	2319      	movs	r3, #25
 80042a6:	2201      	movs	r2, #1
 80042a8:	4970      	ldr	r1, [pc, #448]	; (800446c <HAL_I2C_Master_Transmit+0x1f4>)
 80042aa:	68f8      	ldr	r0, [r7, #12]
 80042ac:	f001 ffa8 	bl	8006200 <I2C_WaitOnFlagUntilTimeout>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d001      	beq.n	80042ba <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80042b6:	2302      	movs	r3, #2
 80042b8:	e0d3      	b.n	8004462 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d101      	bne.n	80042c8 <HAL_I2C_Master_Transmit+0x50>
 80042c4:	2302      	movs	r3, #2
 80042c6:	e0cc      	b.n	8004462 <HAL_I2C_Master_Transmit+0x1ea>
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0301 	and.w	r3, r3, #1
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d007      	beq.n	80042ee <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f042 0201 	orr.w	r2, r2, #1
 80042ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042fc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2221      	movs	r2, #33	; 0x21
 8004302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2210      	movs	r2, #16
 800430a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2200      	movs	r2, #0
 8004312:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	893a      	ldrh	r2, [r7, #8]
 800431e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004324:	b29a      	uxth	r2, r3
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	4a50      	ldr	r2, [pc, #320]	; (8004470 <HAL_I2C_Master_Transmit+0x1f8>)
 800432e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004330:	8979      	ldrh	r1, [r7, #10]
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	6a3a      	ldr	r2, [r7, #32]
 8004336:	68f8      	ldr	r0, [r7, #12]
 8004338:	f001 fd6a 	bl	8005e10 <I2C_MasterRequestWrite>
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d001      	beq.n	8004346 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e08d      	b.n	8004462 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004346:	2300      	movs	r3, #0
 8004348:	613b      	str	r3, [r7, #16]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	695b      	ldr	r3, [r3, #20]
 8004350:	613b      	str	r3, [r7, #16]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	699b      	ldr	r3, [r3, #24]
 8004358:	613b      	str	r3, [r7, #16]
 800435a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800435c:	e066      	b.n	800442c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800435e:	697a      	ldr	r2, [r7, #20]
 8004360:	6a39      	ldr	r1, [r7, #32]
 8004362:	68f8      	ldr	r0, [r7, #12]
 8004364:	f002 f822 	bl	80063ac <I2C_WaitOnTXEFlagUntilTimeout>
 8004368:	4603      	mov	r3, r0
 800436a:	2b00      	cmp	r3, #0
 800436c:	d00d      	beq.n	800438a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004372:	2b04      	cmp	r3, #4
 8004374:	d107      	bne.n	8004386 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004384:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e06b      	b.n	8004462 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438e:	781a      	ldrb	r2, [r3, #0]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439a:	1c5a      	adds	r2, r3, #1
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	3b01      	subs	r3, #1
 80043a8:	b29a      	uxth	r2, r3
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043b2:	3b01      	subs	r3, #1
 80043b4:	b29a      	uxth	r2, r3
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	695b      	ldr	r3, [r3, #20]
 80043c0:	f003 0304 	and.w	r3, r3, #4
 80043c4:	2b04      	cmp	r3, #4
 80043c6:	d11b      	bne.n	8004400 <HAL_I2C_Master_Transmit+0x188>
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d017      	beq.n	8004400 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d4:	781a      	ldrb	r2, [r3, #0]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e0:	1c5a      	adds	r2, r3, #1
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	3b01      	subs	r3, #1
 80043ee:	b29a      	uxth	r2, r3
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043f8:	3b01      	subs	r3, #1
 80043fa:	b29a      	uxth	r2, r3
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004400:	697a      	ldr	r2, [r7, #20]
 8004402:	6a39      	ldr	r1, [r7, #32]
 8004404:	68f8      	ldr	r0, [r7, #12]
 8004406:	f002 f812 	bl	800642e <I2C_WaitOnBTFFlagUntilTimeout>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d00d      	beq.n	800442c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004414:	2b04      	cmp	r3, #4
 8004416:	d107      	bne.n	8004428 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004426:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e01a      	b.n	8004462 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004430:	2b00      	cmp	r3, #0
 8004432:	d194      	bne.n	800435e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004442:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2220      	movs	r2, #32
 8004448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2200      	movs	r2, #0
 8004450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800445c:	2300      	movs	r3, #0
 800445e:	e000      	b.n	8004462 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004460:	2302      	movs	r3, #2
  }
}
 8004462:	4618      	mov	r0, r3
 8004464:	3718      	adds	r7, #24
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	00100002 	.word	0x00100002
 8004470:	ffff0000 	.word	0xffff0000

08004474 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b08c      	sub	sp, #48	; 0x30
 8004478:	af02      	add	r7, sp, #8
 800447a:	60f8      	str	r0, [r7, #12]
 800447c:	607a      	str	r2, [r7, #4]
 800447e:	461a      	mov	r2, r3
 8004480:	460b      	mov	r3, r1
 8004482:	817b      	strh	r3, [r7, #10]
 8004484:	4613      	mov	r3, r2
 8004486:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004488:	f7fe fc50 	bl	8002d2c <HAL_GetTick>
 800448c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004494:	b2db      	uxtb	r3, r3
 8004496:	2b20      	cmp	r3, #32
 8004498:	f040 820b 	bne.w	80048b2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800449c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449e:	9300      	str	r3, [sp, #0]
 80044a0:	2319      	movs	r3, #25
 80044a2:	2201      	movs	r2, #1
 80044a4:	497c      	ldr	r1, [pc, #496]	; (8004698 <HAL_I2C_Master_Receive+0x224>)
 80044a6:	68f8      	ldr	r0, [r7, #12]
 80044a8:	f001 feaa 	bl	8006200 <I2C_WaitOnFlagUntilTimeout>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d001      	beq.n	80044b6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80044b2:	2302      	movs	r3, #2
 80044b4:	e1fe      	b.n	80048b4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d101      	bne.n	80044c4 <HAL_I2C_Master_Receive+0x50>
 80044c0:	2302      	movs	r3, #2
 80044c2:	e1f7      	b.n	80048b4 <HAL_I2C_Master_Receive+0x440>
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 0301 	and.w	r3, r3, #1
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d007      	beq.n	80044ea <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f042 0201 	orr.w	r2, r2, #1
 80044e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044f8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2222      	movs	r2, #34	; 0x22
 80044fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2210      	movs	r2, #16
 8004506:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2200      	movs	r2, #0
 800450e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	893a      	ldrh	r2, [r7, #8]
 800451a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004520:	b29a      	uxth	r2, r3
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	4a5c      	ldr	r2, [pc, #368]	; (800469c <HAL_I2C_Master_Receive+0x228>)
 800452a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800452c:	8979      	ldrh	r1, [r7, #10]
 800452e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004530:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004532:	68f8      	ldr	r0, [r7, #12]
 8004534:	f001 fcee 	bl	8005f14 <I2C_MasterRequestRead>
 8004538:	4603      	mov	r3, r0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d001      	beq.n	8004542 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e1b8      	b.n	80048b4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004546:	2b00      	cmp	r3, #0
 8004548:	d113      	bne.n	8004572 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800454a:	2300      	movs	r3, #0
 800454c:	623b      	str	r3, [r7, #32]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	695b      	ldr	r3, [r3, #20]
 8004554:	623b      	str	r3, [r7, #32]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	699b      	ldr	r3, [r3, #24]
 800455c:	623b      	str	r3, [r7, #32]
 800455e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800456e:	601a      	str	r2, [r3, #0]
 8004570:	e18c      	b.n	800488c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004576:	2b01      	cmp	r3, #1
 8004578:	d11b      	bne.n	80045b2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004588:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800458a:	2300      	movs	r3, #0
 800458c:	61fb      	str	r3, [r7, #28]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	695b      	ldr	r3, [r3, #20]
 8004594:	61fb      	str	r3, [r7, #28]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	699b      	ldr	r3, [r3, #24]
 800459c:	61fb      	str	r3, [r7, #28]
 800459e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045ae:	601a      	str	r2, [r3, #0]
 80045b0:	e16c      	b.n	800488c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	d11b      	bne.n	80045f2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045c8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045da:	2300      	movs	r3, #0
 80045dc:	61bb      	str	r3, [r7, #24]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	695b      	ldr	r3, [r3, #20]
 80045e4:	61bb      	str	r3, [r7, #24]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	699b      	ldr	r3, [r3, #24]
 80045ec:	61bb      	str	r3, [r7, #24]
 80045ee:	69bb      	ldr	r3, [r7, #24]
 80045f0:	e14c      	b.n	800488c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004600:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004602:	2300      	movs	r3, #0
 8004604:	617b      	str	r3, [r7, #20]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	695b      	ldr	r3, [r3, #20]
 800460c:	617b      	str	r3, [r7, #20]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	699b      	ldr	r3, [r3, #24]
 8004614:	617b      	str	r3, [r7, #20]
 8004616:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004618:	e138      	b.n	800488c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800461e:	2b03      	cmp	r3, #3
 8004620:	f200 80f1 	bhi.w	8004806 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004628:	2b01      	cmp	r3, #1
 800462a:	d123      	bne.n	8004674 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800462c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800462e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004630:	68f8      	ldr	r0, [r7, #12]
 8004632:	f001 ff6f 	bl	8006514 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004636:	4603      	mov	r3, r0
 8004638:	2b00      	cmp	r3, #0
 800463a:	d001      	beq.n	8004640 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	e139      	b.n	80048b4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	691a      	ldr	r2, [r3, #16]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464a:	b2d2      	uxtb	r2, r2
 800464c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004652:	1c5a      	adds	r2, r3, #1
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800465c:	3b01      	subs	r3, #1
 800465e:	b29a      	uxth	r2, r3
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004668:	b29b      	uxth	r3, r3
 800466a:	3b01      	subs	r3, #1
 800466c:	b29a      	uxth	r2, r3
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004672:	e10b      	b.n	800488c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004678:	2b02      	cmp	r3, #2
 800467a:	d14e      	bne.n	800471a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800467c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467e:	9300      	str	r3, [sp, #0]
 8004680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004682:	2200      	movs	r2, #0
 8004684:	4906      	ldr	r1, [pc, #24]	; (80046a0 <HAL_I2C_Master_Receive+0x22c>)
 8004686:	68f8      	ldr	r0, [r7, #12]
 8004688:	f001 fdba 	bl	8006200 <I2C_WaitOnFlagUntilTimeout>
 800468c:	4603      	mov	r3, r0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d008      	beq.n	80046a4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e10e      	b.n	80048b4 <HAL_I2C_Master_Receive+0x440>
 8004696:	bf00      	nop
 8004698:	00100002 	.word	0x00100002
 800469c:	ffff0000 	.word	0xffff0000
 80046a0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	691a      	ldr	r2, [r3, #16]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046be:	b2d2      	uxtb	r2, r2
 80046c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c6:	1c5a      	adds	r2, r3, #1
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046d0:	3b01      	subs	r3, #1
 80046d2:	b29a      	uxth	r2, r3
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046dc:	b29b      	uxth	r3, r3
 80046de:	3b01      	subs	r3, #1
 80046e0:	b29a      	uxth	r2, r3
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	691a      	ldr	r2, [r3, #16]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f0:	b2d2      	uxtb	r2, r2
 80046f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f8:	1c5a      	adds	r2, r3, #1
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004702:	3b01      	subs	r3, #1
 8004704:	b29a      	uxth	r2, r3
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800470e:	b29b      	uxth	r3, r3
 8004710:	3b01      	subs	r3, #1
 8004712:	b29a      	uxth	r2, r3
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004718:	e0b8      	b.n	800488c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800471a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471c:	9300      	str	r3, [sp, #0]
 800471e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004720:	2200      	movs	r2, #0
 8004722:	4966      	ldr	r1, [pc, #408]	; (80048bc <HAL_I2C_Master_Receive+0x448>)
 8004724:	68f8      	ldr	r0, [r7, #12]
 8004726:	f001 fd6b 	bl	8006200 <I2C_WaitOnFlagUntilTimeout>
 800472a:	4603      	mov	r3, r0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d001      	beq.n	8004734 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e0bf      	b.n	80048b4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004742:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	691a      	ldr	r2, [r3, #16]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474e:	b2d2      	uxtb	r2, r2
 8004750:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004756:	1c5a      	adds	r2, r3, #1
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004760:	3b01      	subs	r3, #1
 8004762:	b29a      	uxth	r2, r3
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800476c:	b29b      	uxth	r3, r3
 800476e:	3b01      	subs	r3, #1
 8004770:	b29a      	uxth	r2, r3
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004778:	9300      	str	r3, [sp, #0]
 800477a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800477c:	2200      	movs	r2, #0
 800477e:	494f      	ldr	r1, [pc, #316]	; (80048bc <HAL_I2C_Master_Receive+0x448>)
 8004780:	68f8      	ldr	r0, [r7, #12]
 8004782:	f001 fd3d 	bl	8006200 <I2C_WaitOnFlagUntilTimeout>
 8004786:	4603      	mov	r3, r0
 8004788:	2b00      	cmp	r3, #0
 800478a:	d001      	beq.n	8004790 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e091      	b.n	80048b4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800479e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	691a      	ldr	r2, [r3, #16]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047aa:	b2d2      	uxtb	r2, r2
 80047ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b2:	1c5a      	adds	r2, r3, #1
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047bc:	3b01      	subs	r3, #1
 80047be:	b29a      	uxth	r2, r3
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	3b01      	subs	r3, #1
 80047cc:	b29a      	uxth	r2, r3
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	691a      	ldr	r2, [r3, #16]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047dc:	b2d2      	uxtb	r2, r2
 80047de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e4:	1c5a      	adds	r2, r3, #1
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047ee:	3b01      	subs	r3, #1
 80047f0:	b29a      	uxth	r2, r3
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	3b01      	subs	r3, #1
 80047fe:	b29a      	uxth	r2, r3
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004804:	e042      	b.n	800488c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004806:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004808:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800480a:	68f8      	ldr	r0, [r7, #12]
 800480c:	f001 fe82 	bl	8006514 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004810:	4603      	mov	r3, r0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d001      	beq.n	800481a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e04c      	b.n	80048b4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	691a      	ldr	r2, [r3, #16]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004824:	b2d2      	uxtb	r2, r2
 8004826:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482c:	1c5a      	adds	r2, r3, #1
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004836:	3b01      	subs	r3, #1
 8004838:	b29a      	uxth	r2, r3
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004842:	b29b      	uxth	r3, r3
 8004844:	3b01      	subs	r3, #1
 8004846:	b29a      	uxth	r2, r3
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	695b      	ldr	r3, [r3, #20]
 8004852:	f003 0304 	and.w	r3, r3, #4
 8004856:	2b04      	cmp	r3, #4
 8004858:	d118      	bne.n	800488c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	691a      	ldr	r2, [r3, #16]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004864:	b2d2      	uxtb	r2, r2
 8004866:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486c:	1c5a      	adds	r2, r3, #1
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004876:	3b01      	subs	r3, #1
 8004878:	b29a      	uxth	r2, r3
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004882:	b29b      	uxth	r3, r3
 8004884:	3b01      	subs	r3, #1
 8004886:	b29a      	uxth	r2, r3
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004890:	2b00      	cmp	r3, #0
 8004892:	f47f aec2 	bne.w	800461a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2220      	movs	r2, #32
 800489a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2200      	movs	r2, #0
 80048a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80048ae:	2300      	movs	r3, #0
 80048b0:	e000      	b.n	80048b4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80048b2:	2302      	movs	r3, #2
  }
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3728      	adds	r7, #40	; 0x28
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	00010004 	.word	0x00010004

080048c0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b088      	sub	sp, #32
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80048c8:	2300      	movs	r3, #0
 80048ca:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048e0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048e8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80048ea:	7bfb      	ldrb	r3, [r7, #15]
 80048ec:	2b10      	cmp	r3, #16
 80048ee:	d003      	beq.n	80048f8 <HAL_I2C_EV_IRQHandler+0x38>
 80048f0:	7bfb      	ldrb	r3, [r7, #15]
 80048f2:	2b40      	cmp	r3, #64	; 0x40
 80048f4:	f040 80bd 	bne.w	8004a72 <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	699b      	ldr	r3, [r3, #24]
 80048fe:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	695b      	ldr	r3, [r3, #20]
 8004906:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	f003 0301 	and.w	r3, r3, #1
 800490e:	2b00      	cmp	r3, #0
 8004910:	d10d      	bne.n	800492e <HAL_I2C_EV_IRQHandler+0x6e>
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004918:	d003      	beq.n	8004922 <HAL_I2C_EV_IRQHandler+0x62>
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004920:	d101      	bne.n	8004926 <HAL_I2C_EV_IRQHandler+0x66>
 8004922:	2301      	movs	r3, #1
 8004924:	e000      	b.n	8004928 <HAL_I2C_EV_IRQHandler+0x68>
 8004926:	2300      	movs	r3, #0
 8004928:	2b01      	cmp	r3, #1
 800492a:	f000 812e 	beq.w	8004b8a <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800492e:	69fb      	ldr	r3, [r7, #28]
 8004930:	f003 0301 	and.w	r3, r3, #1
 8004934:	2b00      	cmp	r3, #0
 8004936:	d00c      	beq.n	8004952 <HAL_I2C_EV_IRQHandler+0x92>
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	0a5b      	lsrs	r3, r3, #9
 800493c:	f003 0301 	and.w	r3, r3, #1
 8004940:	2b00      	cmp	r3, #0
 8004942:	d006      	beq.n	8004952 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f001 fe6a 	bl	800661e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 fcbb 	bl	80052c6 <I2C_Master_SB>
 8004950:	e08e      	b.n	8004a70 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004952:	69fb      	ldr	r3, [r7, #28]
 8004954:	08db      	lsrs	r3, r3, #3
 8004956:	f003 0301 	and.w	r3, r3, #1
 800495a:	2b00      	cmp	r3, #0
 800495c:	d009      	beq.n	8004972 <HAL_I2C_EV_IRQHandler+0xb2>
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	0a5b      	lsrs	r3, r3, #9
 8004962:	f003 0301 	and.w	r3, r3, #1
 8004966:	2b00      	cmp	r3, #0
 8004968:	d003      	beq.n	8004972 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f000 fd31 	bl	80053d2 <I2C_Master_ADD10>
 8004970:	e07e      	b.n	8004a70 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004972:	69fb      	ldr	r3, [r7, #28]
 8004974:	085b      	lsrs	r3, r3, #1
 8004976:	f003 0301 	and.w	r3, r3, #1
 800497a:	2b00      	cmp	r3, #0
 800497c:	d009      	beq.n	8004992 <HAL_I2C_EV_IRQHandler+0xd2>
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	0a5b      	lsrs	r3, r3, #9
 8004982:	f003 0301 	and.w	r3, r3, #1
 8004986:	2b00      	cmp	r3, #0
 8004988:	d003      	beq.n	8004992 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f000 fd4b 	bl	8005426 <I2C_Master_ADDR>
 8004990:	e06e      	b.n	8004a70 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	089b      	lsrs	r3, r3, #2
 8004996:	f003 0301 	and.w	r3, r3, #1
 800499a:	2b00      	cmp	r3, #0
 800499c:	d037      	beq.n	8004a0e <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049ac:	f000 80ef 	beq.w	8004b8e <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80049b0:	69fb      	ldr	r3, [r7, #28]
 80049b2:	09db      	lsrs	r3, r3, #7
 80049b4:	f003 0301 	and.w	r3, r3, #1
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d00f      	beq.n	80049dc <HAL_I2C_EV_IRQHandler+0x11c>
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	0a9b      	lsrs	r3, r3, #10
 80049c0:	f003 0301 	and.w	r3, r3, #1
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d009      	beq.n	80049dc <HAL_I2C_EV_IRQHandler+0x11c>
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	089b      	lsrs	r3, r3, #2
 80049cc:	f003 0301 	and.w	r3, r3, #1
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d103      	bne.n	80049dc <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f000 f948 	bl	8004c6a <I2C_MasterTransmit_TXE>
 80049da:	e049      	b.n	8004a70 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	089b      	lsrs	r3, r3, #2
 80049e0:	f003 0301 	and.w	r3, r3, #1
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	f000 80d2 	beq.w	8004b8e <HAL_I2C_EV_IRQHandler+0x2ce>
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	0a5b      	lsrs	r3, r3, #9
 80049ee:	f003 0301 	and.w	r3, r3, #1
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	f000 80cb 	beq.w	8004b8e <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 80049f8:	7bfb      	ldrb	r3, [r7, #15]
 80049fa:	2b10      	cmp	r3, #16
 80049fc:	d103      	bne.n	8004a06 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 f9cf 	bl	8004da2 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a04:	e0c3      	b.n	8004b8e <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 fa33 	bl	8004e72 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a0c:	e0bf      	b.n	8004b8e <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a1c:	f000 80b7 	beq.w	8004b8e <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	099b      	lsrs	r3, r3, #6
 8004a24:	f003 0301 	and.w	r3, r3, #1
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d00f      	beq.n	8004a4c <HAL_I2C_EV_IRQHandler+0x18c>
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	0a9b      	lsrs	r3, r3, #10
 8004a30:	f003 0301 	and.w	r3, r3, #1
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d009      	beq.n	8004a4c <HAL_I2C_EV_IRQHandler+0x18c>
 8004a38:	69fb      	ldr	r3, [r7, #28]
 8004a3a:	089b      	lsrs	r3, r3, #2
 8004a3c:	f003 0301 	and.w	r3, r3, #1
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d103      	bne.n	8004a4c <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f000 faa3 	bl	8004f90 <I2C_MasterReceive_RXNE>
 8004a4a:	e011      	b.n	8004a70 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	089b      	lsrs	r3, r3, #2
 8004a50:	f003 0301 	and.w	r3, r3, #1
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	f000 809a 	beq.w	8004b8e <HAL_I2C_EV_IRQHandler+0x2ce>
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	0a5b      	lsrs	r3, r3, #9
 8004a5e:	f003 0301 	and.w	r3, r3, #1
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	f000 8093 	beq.w	8004b8e <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f000 fb42 	bl	80050f2 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a6e:	e08e      	b.n	8004b8e <HAL_I2C_EV_IRQHandler+0x2ce>
 8004a70:	e08d      	b.n	8004b8e <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d004      	beq.n	8004a84 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	695b      	ldr	r3, [r3, #20]
 8004a80:	61fb      	str	r3, [r7, #28]
 8004a82:	e007      	b.n	8004a94 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	699b      	ldr	r3, [r3, #24]
 8004a8a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	695b      	ldr	r3, [r3, #20]
 8004a92:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	085b      	lsrs	r3, r3, #1
 8004a98:	f003 0301 	and.w	r3, r3, #1
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d012      	beq.n	8004ac6 <HAL_I2C_EV_IRQHandler+0x206>
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	0a5b      	lsrs	r3, r3, #9
 8004aa4:	f003 0301 	and.w	r3, r3, #1
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d00c      	beq.n	8004ac6 <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d003      	beq.n	8004abc <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	699b      	ldr	r3, [r3, #24]
 8004aba:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004abc:	69b9      	ldr	r1, [r7, #24]
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f000 ff00 	bl	80058c4 <I2C_Slave_ADDR>
 8004ac4:	e066      	b.n	8004b94 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ac6:	69fb      	ldr	r3, [r7, #28]
 8004ac8:	091b      	lsrs	r3, r3, #4
 8004aca:	f003 0301 	and.w	r3, r3, #1
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d009      	beq.n	8004ae6 <HAL_I2C_EV_IRQHandler+0x226>
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	0a5b      	lsrs	r3, r3, #9
 8004ad6:	f003 0301 	and.w	r3, r3, #1
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d003      	beq.n	8004ae6 <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f000 ff34 	bl	800594c <I2C_Slave_STOPF>
 8004ae4:	e056      	b.n	8004b94 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004ae6:	7bbb      	ldrb	r3, [r7, #14]
 8004ae8:	2b21      	cmp	r3, #33	; 0x21
 8004aea:	d002      	beq.n	8004af2 <HAL_I2C_EV_IRQHandler+0x232>
 8004aec:	7bbb      	ldrb	r3, [r7, #14]
 8004aee:	2b29      	cmp	r3, #41	; 0x29
 8004af0:	d125      	bne.n	8004b3e <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004af2:	69fb      	ldr	r3, [r7, #28]
 8004af4:	09db      	lsrs	r3, r3, #7
 8004af6:	f003 0301 	and.w	r3, r3, #1
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d00f      	beq.n	8004b1e <HAL_I2C_EV_IRQHandler+0x25e>
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	0a9b      	lsrs	r3, r3, #10
 8004b02:	f003 0301 	and.w	r3, r3, #1
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d009      	beq.n	8004b1e <HAL_I2C_EV_IRQHandler+0x25e>
 8004b0a:	69fb      	ldr	r3, [r7, #28]
 8004b0c:	089b      	lsrs	r3, r3, #2
 8004b0e:	f003 0301 	and.w	r3, r3, #1
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d103      	bne.n	8004b1e <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f000 fe16 	bl	8005748 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004b1c:	e039      	b.n	8004b92 <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b1e:	69fb      	ldr	r3, [r7, #28]
 8004b20:	089b      	lsrs	r3, r3, #2
 8004b22:	f003 0301 	and.w	r3, r3, #1
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d033      	beq.n	8004b92 <HAL_I2C_EV_IRQHandler+0x2d2>
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	0a5b      	lsrs	r3, r3, #9
 8004b2e:	f003 0301 	and.w	r3, r3, #1
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d02d      	beq.n	8004b92 <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 fe43 	bl	80057c2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004b3c:	e029      	b.n	8004b92 <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004b3e:	69fb      	ldr	r3, [r7, #28]
 8004b40:	099b      	lsrs	r3, r3, #6
 8004b42:	f003 0301 	and.w	r3, r3, #1
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d00f      	beq.n	8004b6a <HAL_I2C_EV_IRQHandler+0x2aa>
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	0a9b      	lsrs	r3, r3, #10
 8004b4e:	f003 0301 	and.w	r3, r3, #1
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d009      	beq.n	8004b6a <HAL_I2C_EV_IRQHandler+0x2aa>
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	089b      	lsrs	r3, r3, #2
 8004b5a:	f003 0301 	and.w	r3, r3, #1
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d103      	bne.n	8004b6a <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 fe4e 	bl	8005804 <I2C_SlaveReceive_RXNE>
 8004b68:	e014      	b.n	8004b94 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b6a:	69fb      	ldr	r3, [r7, #28]
 8004b6c:	089b      	lsrs	r3, r3, #2
 8004b6e:	f003 0301 	and.w	r3, r3, #1
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d00e      	beq.n	8004b94 <HAL_I2C_EV_IRQHandler+0x2d4>
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	0a5b      	lsrs	r3, r3, #9
 8004b7a:	f003 0301 	and.w	r3, r3, #1
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d008      	beq.n	8004b94 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 fe7c 	bl	8005880 <I2C_SlaveReceive_BTF>
 8004b88:	e004      	b.n	8004b94 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 8004b8a:	bf00      	nop
 8004b8c:	e002      	b.n	8004b94 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b8e:	bf00      	nop
 8004b90:	e000      	b.n	8004b94 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004b92:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004b94:	3720      	adds	r7, #32
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}

08004b9a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b9a:	b480      	push	{r7}
 8004b9c:	b083      	sub	sp, #12
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004ba2:	bf00      	nop
 8004ba4:	370c      	adds	r7, #12
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr

08004bae <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004bae:	b480      	push	{r7}
 8004bb0:	b083      	sub	sp, #12
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004bb6:	bf00      	nop
 8004bb8:	370c      	adds	r7, #12
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr

08004bc2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004bc2:	b480      	push	{r7}
 8004bc4:	b083      	sub	sp, #12
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004bca:	bf00      	nop
 8004bcc:	370c      	adds	r7, #12
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr

08004bd6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004bd6:	b480      	push	{r7}
 8004bd8:	b083      	sub	sp, #12
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004bde:	bf00      	nop
 8004be0:	370c      	adds	r7, #12
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr

08004bea <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004bea:	b480      	push	{r7}
 8004bec:	b083      	sub	sp, #12
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	6078      	str	r0, [r7, #4]
 8004bf2:	460b      	mov	r3, r1
 8004bf4:	70fb      	strb	r3, [r7, #3]
 8004bf6:	4613      	mov	r3, r2
 8004bf8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004bfa:	bf00      	nop
 8004bfc:	370c      	adds	r7, #12
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr

08004c06 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c06:	b480      	push	{r7}
 8004c08:	b083      	sub	sp, #12
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004c0e:	bf00      	nop
 8004c10:	370c      	adds	r7, #12
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr

08004c1a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c1a:	b480      	push	{r7}
 8004c1c:	b083      	sub	sp, #12
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004c22:	bf00      	nop
 8004c24:	370c      	adds	r7, #12
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr

08004c2e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c2e:	b480      	push	{r7}
 8004c30:	b083      	sub	sp, #12
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004c36:	bf00      	nop
 8004c38:	370c      	adds	r7, #12
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr

08004c42 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004c42:	b480      	push	{r7}
 8004c44:	b083      	sub	sp, #12
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004c4a:	bf00      	nop
 8004c4c:	370c      	adds	r7, #12
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr

08004c56 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c56:	b480      	push	{r7}
 8004c58:	b083      	sub	sp, #12
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004c5e:	bf00      	nop
 8004c60:	370c      	adds	r7, #12
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr

08004c6a <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004c6a:	b580      	push	{r7, lr}
 8004c6c:	b084      	sub	sp, #16
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c78:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c80:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c86:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d150      	bne.n	8004d32 <I2C_MasterTransmit_TXE+0xc8>
 8004c90:	7bfb      	ldrb	r3, [r7, #15]
 8004c92:	2b21      	cmp	r3, #33	; 0x21
 8004c94:	d14d      	bne.n	8004d32 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	2b08      	cmp	r3, #8
 8004c9a:	d01d      	beq.n	8004cd8 <I2C_MasterTransmit_TXE+0x6e>
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	2b20      	cmp	r3, #32
 8004ca0:	d01a      	beq.n	8004cd8 <I2C_MasterTransmit_TXE+0x6e>
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004ca8:	d016      	beq.n	8004cd8 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	685a      	ldr	r2, [r3, #4]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004cb8:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2211      	movs	r2, #17
 8004cbe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2220      	movs	r2, #32
 8004ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f7ff ff62 	bl	8004b9a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004cd6:	e060      	b.n	8004d9a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	685a      	ldr	r2, [r3, #4]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004ce6:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cf6:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2220      	movs	r2, #32
 8004d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	2b40      	cmp	r3, #64	; 0x40
 8004d10:	d107      	bne.n	8004d22 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f7ff ff7d 	bl	8004c1a <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004d20:	e03b      	b.n	8004d9a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2200      	movs	r2, #0
 8004d26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f7ff ff35 	bl	8004b9a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004d30:	e033      	b.n	8004d9a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004d32:	7bfb      	ldrb	r3, [r7, #15]
 8004d34:	2b21      	cmp	r3, #33	; 0x21
 8004d36:	d005      	beq.n	8004d44 <I2C_MasterTransmit_TXE+0xda>
 8004d38:	7bbb      	ldrb	r3, [r7, #14]
 8004d3a:	2b40      	cmp	r3, #64	; 0x40
 8004d3c:	d12d      	bne.n	8004d9a <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004d3e:	7bfb      	ldrb	r3, [r7, #15]
 8004d40:	2b22      	cmp	r3, #34	; 0x22
 8004d42:	d12a      	bne.n	8004d9a <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d108      	bne.n	8004d60 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	685a      	ldr	r2, [r3, #4]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d5c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004d5e:	e01c      	b.n	8004d9a <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	2b40      	cmp	r3, #64	; 0x40
 8004d6a:	d103      	bne.n	8004d74 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f000 f880 	bl	8004e72 <I2C_MemoryTransmit_TXE_BTF>
}
 8004d72:	e012      	b.n	8004d9a <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d78:	781a      	ldrb	r2, [r3, #0]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d84:	1c5a      	adds	r2, r3, #1
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	3b01      	subs	r3, #1
 8004d92:	b29a      	uxth	r2, r3
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004d98:	e7ff      	b.n	8004d9a <I2C_MasterTransmit_TXE+0x130>
 8004d9a:	bf00      	nop
 8004d9c:	3710      	adds	r7, #16
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}

08004da2 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004da2:	b580      	push	{r7, lr}
 8004da4:	b084      	sub	sp, #16
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dae:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	2b21      	cmp	r3, #33	; 0x21
 8004dba:	d156      	bne.n	8004e6a <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d012      	beq.n	8004dec <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dca:	781a      	ldrb	r2, [r3, #0]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd6:	1c5a      	adds	r2, r3, #1
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	3b01      	subs	r3, #1
 8004de4:	b29a      	uxth	r2, r3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004dea:	e03e      	b.n	8004e6a <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2b08      	cmp	r3, #8
 8004df0:	d01d      	beq.n	8004e2e <I2C_MasterTransmit_BTF+0x8c>
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2b20      	cmp	r3, #32
 8004df6:	d01a      	beq.n	8004e2e <I2C_MasterTransmit_BTF+0x8c>
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004dfe:	d016      	beq.n	8004e2e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	685a      	ldr	r2, [r3, #4]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004e0e:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2211      	movs	r2, #17
 8004e14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2220      	movs	r2, #32
 8004e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f7ff feb7 	bl	8004b9a <HAL_I2C_MasterTxCpltCallback>
}
 8004e2c:	e01d      	b.n	8004e6a <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	685a      	ldr	r2, [r3, #4]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004e3c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e4c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2220      	movs	r2, #32
 8004e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f7ff fe98 	bl	8004b9a <HAL_I2C_MasterTxCpltCallback>
}
 8004e6a:	bf00      	nop
 8004e6c:	3710      	adds	r7, #16
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}

08004e72 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004e72:	b580      	push	{r7, lr}
 8004e74:	b084      	sub	sp, #16
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e80:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d11d      	bne.n	8004ec6 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d10b      	bne.n	8004eaa <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e96:	b2da      	uxtb	r2, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ea2:	1c9a      	adds	r2, r3, #2
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004ea8:	e06e      	b.n	8004f88 <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	121b      	asrs	r3, r3, #8
 8004eb2:	b2da      	uxtb	r2, r3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ebe:	1c5a      	adds	r2, r3, #1
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004ec4:	e060      	b.n	8004f88 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d10b      	bne.n	8004ee6 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ed2:	b2da      	uxtb	r2, r3
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ede:	1c5a      	adds	r2, r3, #1
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004ee4:	e050      	b.n	8004f88 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eea:	2b02      	cmp	r3, #2
 8004eec:	d14c      	bne.n	8004f88 <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004eee:	7bfb      	ldrb	r3, [r7, #15]
 8004ef0:	2b22      	cmp	r3, #34	; 0x22
 8004ef2:	d108      	bne.n	8004f06 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f02:	601a      	str	r2, [r3, #0]
}
 8004f04:	e040      	b.n	8004f88 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d015      	beq.n	8004f3c <I2C_MemoryTransmit_TXE_BTF+0xca>
 8004f10:	7bfb      	ldrb	r3, [r7, #15]
 8004f12:	2b21      	cmp	r3, #33	; 0x21
 8004f14:	d112      	bne.n	8004f3c <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1a:	781a      	ldrb	r2, [r3, #0]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f26:	1c5a      	adds	r2, r3, #1
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	3b01      	subs	r3, #1
 8004f34:	b29a      	uxth	r2, r3
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004f3a:	e025      	b.n	8004f88 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d120      	bne.n	8004f88 <I2C_MemoryTransmit_TXE_BTF+0x116>
 8004f46:	7bfb      	ldrb	r3, [r7, #15]
 8004f48:	2b21      	cmp	r3, #33	; 0x21
 8004f4a:	d11d      	bne.n	8004f88 <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	685a      	ldr	r2, [r3, #4]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004f5a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f6a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2220      	movs	r2, #32
 8004f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f7ff fe49 	bl	8004c1a <HAL_I2C_MemTxCpltCallback>
}
 8004f88:	bf00      	nop
 8004f8a:	3710      	adds	r7, #16
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}

08004f90 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b084      	sub	sp, #16
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	2b22      	cmp	r3, #34	; 0x22
 8004fa2:	f040 80a2 	bne.w	80050ea <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2b03      	cmp	r3, #3
 8004fb2:	d921      	bls.n	8004ff8 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	691a      	ldr	r2, [r3, #16]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fbe:	b2d2      	uxtb	r2, r2
 8004fc0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc6:	1c5a      	adds	r2, r3, #1
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	3b01      	subs	r3, #1
 8004fd4:	b29a      	uxth	r2, r3
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	2b03      	cmp	r3, #3
 8004fe2:	f040 8082 	bne.w	80050ea <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	685a      	ldr	r2, [r3, #4]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ff4:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8004ff6:	e078      	b.n	80050ea <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ffc:	2b02      	cmp	r3, #2
 8004ffe:	d074      	beq.n	80050ea <I2C_MasterReceive_RXNE+0x15a>
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2b01      	cmp	r3, #1
 8005004:	d002      	beq.n	800500c <I2C_MasterReceive_RXNE+0x7c>
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d16e      	bne.n	80050ea <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f001 fa4f 	bl	80064b0 <I2C_WaitOnSTOPRequestThroughIT>
 8005012:	4603      	mov	r3, r0
 8005014:	2b00      	cmp	r3, #0
 8005016:	d142      	bne.n	800509e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005026:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	685a      	ldr	r2, [r3, #4]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005036:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	691a      	ldr	r2, [r3, #16]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005042:	b2d2      	uxtb	r2, r2
 8005044:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504a:	1c5a      	adds	r2, r3, #1
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005054:	b29b      	uxth	r3, r3
 8005056:	3b01      	subs	r3, #1
 8005058:	b29a      	uxth	r2, r3
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2220      	movs	r2, #32
 8005062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800506c:	b2db      	uxtb	r3, r3
 800506e:	2b40      	cmp	r3, #64	; 0x40
 8005070:	d10a      	bne.n	8005088 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f7ff fdd4 	bl	8004c2e <HAL_I2C_MemRxCpltCallback>
}
 8005086:	e030      	b.n	80050ea <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2212      	movs	r2, #18
 8005094:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f7ff fd89 	bl	8004bae <HAL_I2C_MasterRxCpltCallback>
}
 800509c:	e025      	b.n	80050ea <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	685a      	ldr	r2, [r3, #4]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80050ac:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	691a      	ldr	r2, [r3, #16]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b8:	b2d2      	uxtb	r2, r2
 80050ba:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c0:	1c5a      	adds	r2, r3, #1
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	3b01      	subs	r3, #1
 80050ce:	b29a      	uxth	r2, r3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2220      	movs	r2, #32
 80050d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2200      	movs	r2, #0
 80050e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f7ff fdac 	bl	8004c42 <HAL_I2C_ErrorCallback>
}
 80050ea:	bf00      	nop
 80050ec:	3710      	adds	r7, #16
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}

080050f2 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80050f2:	b580      	push	{r7, lr}
 80050f4:	b084      	sub	sp, #16
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050fe:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005104:	b29b      	uxth	r3, r3
 8005106:	2b04      	cmp	r3, #4
 8005108:	d11b      	bne.n	8005142 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	685a      	ldr	r2, [r3, #4]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005118:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	691a      	ldr	r2, [r3, #16]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005124:	b2d2      	uxtb	r2, r2
 8005126:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512c:	1c5a      	adds	r2, r3, #1
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005136:	b29b      	uxth	r3, r3
 8005138:	3b01      	subs	r3, #1
 800513a:	b29a      	uxth	r2, r3
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005140:	e0bd      	b.n	80052be <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005146:	b29b      	uxth	r3, r3
 8005148:	2b03      	cmp	r3, #3
 800514a:	d129      	bne.n	80051a0 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	685a      	ldr	r2, [r3, #4]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800515a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2b04      	cmp	r3, #4
 8005160:	d00a      	beq.n	8005178 <I2C_MasterReceive_BTF+0x86>
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2b02      	cmp	r3, #2
 8005166:	d007      	beq.n	8005178 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005176:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	691a      	ldr	r2, [r3, #16]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005182:	b2d2      	uxtb	r2, r2
 8005184:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518a:	1c5a      	adds	r2, r3, #1
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005194:	b29b      	uxth	r3, r3
 8005196:	3b01      	subs	r3, #1
 8005198:	b29a      	uxth	r2, r3
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800519e:	e08e      	b.n	80052be <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	2b02      	cmp	r3, #2
 80051a8:	d176      	bne.n	8005298 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d002      	beq.n	80051b6 <I2C_MasterReceive_BTF+0xc4>
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2b10      	cmp	r3, #16
 80051b4:	d108      	bne.n	80051c8 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051c4:	601a      	str	r2, [r3, #0]
 80051c6:	e019      	b.n	80051fc <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2b04      	cmp	r3, #4
 80051cc:	d002      	beq.n	80051d4 <I2C_MasterReceive_BTF+0xe2>
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2b02      	cmp	r3, #2
 80051d2:	d108      	bne.n	80051e6 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80051e2:	601a      	str	r2, [r3, #0]
 80051e4:	e00a      	b.n	80051fc <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2b10      	cmp	r3, #16
 80051ea:	d007      	beq.n	80051fc <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051fa:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	691a      	ldr	r2, [r3, #16]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005206:	b2d2      	uxtb	r2, r2
 8005208:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520e:	1c5a      	adds	r2, r3, #1
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005218:	b29b      	uxth	r3, r3
 800521a:	3b01      	subs	r3, #1
 800521c:	b29a      	uxth	r2, r3
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	691a      	ldr	r2, [r3, #16]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522c:	b2d2      	uxtb	r2, r2
 800522e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005234:	1c5a      	adds	r2, r3, #1
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800523e:	b29b      	uxth	r3, r3
 8005240:	3b01      	subs	r3, #1
 8005242:	b29a      	uxth	r2, r3
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	685a      	ldr	r2, [r3, #4]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005256:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2220      	movs	r2, #32
 800525c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005266:	b2db      	uxtb	r3, r3
 8005268:	2b40      	cmp	r3, #64	; 0x40
 800526a:	d10a      	bne.n	8005282 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f7ff fcd7 	bl	8004c2e <HAL_I2C_MemRxCpltCallback>
}
 8005280:	e01d      	b.n	80052be <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2212      	movs	r2, #18
 800528e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f7ff fc8c 	bl	8004bae <HAL_I2C_MasterRxCpltCallback>
}
 8005296:	e012      	b.n	80052be <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	691a      	ldr	r2, [r3, #16]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a2:	b2d2      	uxtb	r2, r2
 80052a4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052aa:	1c5a      	adds	r2, r3, #1
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	3b01      	subs	r3, #1
 80052b8:	b29a      	uxth	r2, r3
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80052be:	bf00      	nop
 80052c0:	3710      	adds	r7, #16
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}

080052c6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80052c6:	b480      	push	{r7}
 80052c8:	b083      	sub	sp, #12
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	2b40      	cmp	r3, #64	; 0x40
 80052d8:	d117      	bne.n	800530a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d109      	bne.n	80052f6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	461a      	mov	r2, r3
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80052f2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80052f4:	e067      	b.n	80053c6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	f043 0301 	orr.w	r3, r3, #1
 8005300:	b2da      	uxtb	r2, r3
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	611a      	str	r2, [r3, #16]
}
 8005308:	e05d      	b.n	80053c6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	691b      	ldr	r3, [r3, #16]
 800530e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005312:	d133      	bne.n	800537c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800531a:	b2db      	uxtb	r3, r3
 800531c:	2b21      	cmp	r3, #33	; 0x21
 800531e:	d109      	bne.n	8005334 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005324:	b2db      	uxtb	r3, r3
 8005326:	461a      	mov	r2, r3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005330:	611a      	str	r2, [r3, #16]
 8005332:	e008      	b.n	8005346 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005338:	b2db      	uxtb	r3, r3
 800533a:	f043 0301 	orr.w	r3, r3, #1
 800533e:	b2da      	uxtb	r2, r3
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800534a:	2b00      	cmp	r3, #0
 800534c:	d004      	beq.n	8005358 <I2C_Master_SB+0x92>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005354:	2b00      	cmp	r3, #0
 8005356:	d108      	bne.n	800536a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800535c:	2b00      	cmp	r3, #0
 800535e:	d032      	beq.n	80053c6 <I2C_Master_SB+0x100>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005366:	2b00      	cmp	r3, #0
 8005368:	d02d      	beq.n	80053c6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	685a      	ldr	r2, [r3, #4]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005378:	605a      	str	r2, [r3, #4]
}
 800537a:	e024      	b.n	80053c6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005380:	2b00      	cmp	r3, #0
 8005382:	d10e      	bne.n	80053a2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005388:	b29b      	uxth	r3, r3
 800538a:	11db      	asrs	r3, r3, #7
 800538c:	b2db      	uxtb	r3, r3
 800538e:	f003 0306 	and.w	r3, r3, #6
 8005392:	b2db      	uxtb	r3, r3
 8005394:	f063 030f 	orn	r3, r3, #15
 8005398:	b2da      	uxtb	r2, r3
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	611a      	str	r2, [r3, #16]
}
 80053a0:	e011      	b.n	80053c6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d10d      	bne.n	80053c6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	11db      	asrs	r3, r3, #7
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	f003 0306 	and.w	r3, r3, #6
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	f063 030e 	orn	r3, r3, #14
 80053be:	b2da      	uxtb	r2, r3
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	611a      	str	r2, [r3, #16]
}
 80053c6:	bf00      	nop
 80053c8:	370c      	adds	r7, #12
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr

080053d2 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80053d2:	b480      	push	{r7}
 80053d4:	b083      	sub	sp, #12
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053de:	b2da      	uxtb	r2, r3
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d004      	beq.n	80053f8 <I2C_Master_ADD10+0x26>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d108      	bne.n	800540a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d00c      	beq.n	800541a <I2C_Master_ADD10+0x48>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005406:	2b00      	cmp	r3, #0
 8005408:	d007      	beq.n	800541a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	685a      	ldr	r2, [r3, #4]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005418:	605a      	str	r2, [r3, #4]
  }
}
 800541a:	bf00      	nop
 800541c:	370c      	adds	r7, #12
 800541e:	46bd      	mov	sp, r7
 8005420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005424:	4770      	bx	lr

08005426 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005426:	b480      	push	{r7}
 8005428:	b091      	sub	sp, #68	; 0x44
 800542a:	af00      	add	r7, sp, #0
 800542c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005434:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800543c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005442:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800544a:	b2db      	uxtb	r3, r3
 800544c:	2b22      	cmp	r3, #34	; 0x22
 800544e:	f040 8169 	bne.w	8005724 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005456:	2b00      	cmp	r3, #0
 8005458:	d10f      	bne.n	800547a <I2C_Master_ADDR+0x54>
 800545a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800545e:	2b40      	cmp	r3, #64	; 0x40
 8005460:	d10b      	bne.n	800547a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005462:	2300      	movs	r3, #0
 8005464:	633b      	str	r3, [r7, #48]	; 0x30
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	695b      	ldr	r3, [r3, #20]
 800546c:	633b      	str	r3, [r7, #48]	; 0x30
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	699b      	ldr	r3, [r3, #24]
 8005474:	633b      	str	r3, [r7, #48]	; 0x30
 8005476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005478:	e160      	b.n	800573c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800547e:	2b00      	cmp	r3, #0
 8005480:	d11d      	bne.n	80054be <I2C_Master_ADDR+0x98>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	691b      	ldr	r3, [r3, #16]
 8005486:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800548a:	d118      	bne.n	80054be <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800548c:	2300      	movs	r3, #0
 800548e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	695b      	ldr	r3, [r3, #20]
 8005496:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	699b      	ldr	r3, [r3, #24]
 800549e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054b0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054b6:	1c5a      	adds	r2, r3, #1
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	651a      	str	r2, [r3, #80]	; 0x50
 80054bc:	e13e      	b.n	800573c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d113      	bne.n	80054f0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054c8:	2300      	movs	r3, #0
 80054ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	695b      	ldr	r3, [r3, #20]
 80054d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	699b      	ldr	r3, [r3, #24]
 80054da:	62bb      	str	r3, [r7, #40]	; 0x28
 80054dc:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054ec:	601a      	str	r2, [r3, #0]
 80054ee:	e115      	b.n	800571c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	f040 808a 	bne.w	8005610 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80054fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054fe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005502:	d137      	bne.n	8005574 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005512:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800551e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005522:	d113      	bne.n	800554c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005532:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005534:	2300      	movs	r3, #0
 8005536:	627b      	str	r3, [r7, #36]	; 0x24
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	695b      	ldr	r3, [r3, #20]
 800553e:	627b      	str	r3, [r7, #36]	; 0x24
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	699b      	ldr	r3, [r3, #24]
 8005546:	627b      	str	r3, [r7, #36]	; 0x24
 8005548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554a:	e0e7      	b.n	800571c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800554c:	2300      	movs	r3, #0
 800554e:	623b      	str	r3, [r7, #32]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	695b      	ldr	r3, [r3, #20]
 8005556:	623b      	str	r3, [r7, #32]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	699b      	ldr	r3, [r3, #24]
 800555e:	623b      	str	r3, [r7, #32]
 8005560:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005570:	601a      	str	r2, [r3, #0]
 8005572:	e0d3      	b.n	800571c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005576:	2b08      	cmp	r3, #8
 8005578:	d02e      	beq.n	80055d8 <I2C_Master_ADDR+0x1b2>
 800557a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800557c:	2b20      	cmp	r3, #32
 800557e:	d02b      	beq.n	80055d8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005582:	2b12      	cmp	r3, #18
 8005584:	d102      	bne.n	800558c <I2C_Master_ADDR+0x166>
 8005586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005588:	2b01      	cmp	r3, #1
 800558a:	d125      	bne.n	80055d8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800558c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800558e:	2b04      	cmp	r3, #4
 8005590:	d00e      	beq.n	80055b0 <I2C_Master_ADDR+0x18a>
 8005592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005594:	2b02      	cmp	r3, #2
 8005596:	d00b      	beq.n	80055b0 <I2C_Master_ADDR+0x18a>
 8005598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800559a:	2b10      	cmp	r3, #16
 800559c:	d008      	beq.n	80055b0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055ac:	601a      	str	r2, [r3, #0]
 80055ae:	e007      	b.n	80055c0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80055be:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055c0:	2300      	movs	r3, #0
 80055c2:	61fb      	str	r3, [r7, #28]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	695b      	ldr	r3, [r3, #20]
 80055ca:	61fb      	str	r3, [r7, #28]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	699b      	ldr	r3, [r3, #24]
 80055d2:	61fb      	str	r3, [r7, #28]
 80055d4:	69fb      	ldr	r3, [r7, #28]
 80055d6:	e0a1      	b.n	800571c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055e6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055e8:	2300      	movs	r3, #0
 80055ea:	61bb      	str	r3, [r7, #24]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	695b      	ldr	r3, [r3, #20]
 80055f2:	61bb      	str	r3, [r7, #24]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	699b      	ldr	r3, [r3, #24]
 80055fa:	61bb      	str	r3, [r7, #24]
 80055fc:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800560c:	601a      	str	r2, [r3, #0]
 800560e:	e085      	b.n	800571c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005614:	b29b      	uxth	r3, r3
 8005616:	2b02      	cmp	r3, #2
 8005618:	d14d      	bne.n	80056b6 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800561a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800561c:	2b04      	cmp	r3, #4
 800561e:	d016      	beq.n	800564e <I2C_Master_ADDR+0x228>
 8005620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005622:	2b02      	cmp	r3, #2
 8005624:	d013      	beq.n	800564e <I2C_Master_ADDR+0x228>
 8005626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005628:	2b10      	cmp	r3, #16
 800562a:	d010      	beq.n	800564e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800563a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800564a:	601a      	str	r2, [r3, #0]
 800564c:	e007      	b.n	800565e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800565c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005668:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800566c:	d117      	bne.n	800569e <I2C_Master_ADDR+0x278>
 800566e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005670:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005674:	d00b      	beq.n	800568e <I2C_Master_ADDR+0x268>
 8005676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005678:	2b01      	cmp	r3, #1
 800567a:	d008      	beq.n	800568e <I2C_Master_ADDR+0x268>
 800567c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800567e:	2b08      	cmp	r3, #8
 8005680:	d005      	beq.n	800568e <I2C_Master_ADDR+0x268>
 8005682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005684:	2b10      	cmp	r3, #16
 8005686:	d002      	beq.n	800568e <I2C_Master_ADDR+0x268>
 8005688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800568a:	2b20      	cmp	r3, #32
 800568c:	d107      	bne.n	800569e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	685a      	ldr	r2, [r3, #4]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800569c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800569e:	2300      	movs	r3, #0
 80056a0:	617b      	str	r3, [r7, #20]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	695b      	ldr	r3, [r3, #20]
 80056a8:	617b      	str	r3, [r7, #20]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	699b      	ldr	r3, [r3, #24]
 80056b0:	617b      	str	r3, [r7, #20]
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	e032      	b.n	800571c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80056c4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056d4:	d117      	bne.n	8005706 <I2C_Master_ADDR+0x2e0>
 80056d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80056dc:	d00b      	beq.n	80056f6 <I2C_Master_ADDR+0x2d0>
 80056de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d008      	beq.n	80056f6 <I2C_Master_ADDR+0x2d0>
 80056e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056e6:	2b08      	cmp	r3, #8
 80056e8:	d005      	beq.n	80056f6 <I2C_Master_ADDR+0x2d0>
 80056ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ec:	2b10      	cmp	r3, #16
 80056ee:	d002      	beq.n	80056f6 <I2C_Master_ADDR+0x2d0>
 80056f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f2:	2b20      	cmp	r3, #32
 80056f4:	d107      	bne.n	8005706 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	685a      	ldr	r2, [r3, #4]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005704:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005706:	2300      	movs	r3, #0
 8005708:	613b      	str	r3, [r7, #16]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	695b      	ldr	r3, [r3, #20]
 8005710:	613b      	str	r3, [r7, #16]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	699b      	ldr	r3, [r3, #24]
 8005718:	613b      	str	r3, [r7, #16]
 800571a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005722:	e00b      	b.n	800573c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005724:	2300      	movs	r3, #0
 8005726:	60fb      	str	r3, [r7, #12]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	695b      	ldr	r3, [r3, #20]
 800572e:	60fb      	str	r3, [r7, #12]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	699b      	ldr	r3, [r3, #24]
 8005736:	60fb      	str	r3, [r7, #12]
 8005738:	68fb      	ldr	r3, [r7, #12]
}
 800573a:	e7ff      	b.n	800573c <I2C_Master_ADDR+0x316>
 800573c:	bf00      	nop
 800573e:	3744      	adds	r7, #68	; 0x44
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr

08005748 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b084      	sub	sp, #16
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005756:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800575c:	b29b      	uxth	r3, r3
 800575e:	2b00      	cmp	r3, #0
 8005760:	d02b      	beq.n	80057ba <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005766:	781a      	ldrb	r2, [r3, #0]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005772:	1c5a      	adds	r2, r3, #1
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800577c:	b29b      	uxth	r3, r3
 800577e:	3b01      	subs	r3, #1
 8005780:	b29a      	uxth	r2, r3
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800578a:	b29b      	uxth	r3, r3
 800578c:	2b00      	cmp	r3, #0
 800578e:	d114      	bne.n	80057ba <I2C_SlaveTransmit_TXE+0x72>
 8005790:	7bfb      	ldrb	r3, [r7, #15]
 8005792:	2b29      	cmp	r3, #41	; 0x29
 8005794:	d111      	bne.n	80057ba <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	685a      	ldr	r2, [r3, #4]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057a4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2221      	movs	r2, #33	; 0x21
 80057aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2228      	movs	r2, #40	; 0x28
 80057b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f7ff fa04 	bl	8004bc2 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80057ba:	bf00      	nop
 80057bc:	3710      	adds	r7, #16
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}

080057c2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80057c2:	b480      	push	{r7}
 80057c4:	b083      	sub	sp, #12
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d011      	beq.n	80057f8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d8:	781a      	ldrb	r2, [r3, #0]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e4:	1c5a      	adds	r2, r3, #1
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	3b01      	subs	r3, #1
 80057f2:	b29a      	uxth	r2, r3
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80057f8:	bf00      	nop
 80057fa:	370c      	adds	r7, #12
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr

08005804 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b084      	sub	sp, #16
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005812:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005818:	b29b      	uxth	r3, r3
 800581a:	2b00      	cmp	r3, #0
 800581c:	d02c      	beq.n	8005878 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	691a      	ldr	r2, [r3, #16]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005828:	b2d2      	uxtb	r2, r2
 800582a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005830:	1c5a      	adds	r2, r3, #1
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800583a:	b29b      	uxth	r3, r3
 800583c:	3b01      	subs	r3, #1
 800583e:	b29a      	uxth	r2, r3
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005848:	b29b      	uxth	r3, r3
 800584a:	2b00      	cmp	r3, #0
 800584c:	d114      	bne.n	8005878 <I2C_SlaveReceive_RXNE+0x74>
 800584e:	7bfb      	ldrb	r3, [r7, #15]
 8005850:	2b2a      	cmp	r3, #42	; 0x2a
 8005852:	d111      	bne.n	8005878 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	685a      	ldr	r2, [r3, #4]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005862:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2222      	movs	r2, #34	; 0x22
 8005868:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2228      	movs	r2, #40	; 0x28
 800586e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f7ff f9af 	bl	8004bd6 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005878:	bf00      	nop
 800587a:	3710      	adds	r7, #16
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}

08005880 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005880:	b480      	push	{r7}
 8005882:	b083      	sub	sp, #12
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800588c:	b29b      	uxth	r3, r3
 800588e:	2b00      	cmp	r3, #0
 8005890:	d012      	beq.n	80058b8 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	691a      	ldr	r2, [r3, #16]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589c:	b2d2      	uxtb	r2, r2
 800589e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a4:	1c5a      	adds	r2, r3, #1
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	3b01      	subs	r3, #1
 80058b2:	b29a      	uxth	r2, r3
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80058b8:	bf00      	nop
 80058ba:	370c      	adds	r7, #12
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr

080058c4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b084      	sub	sp, #16
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
 80058cc:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80058ce:	2300      	movs	r3, #0
 80058d0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058d8:	b2db      	uxtb	r3, r3
 80058da:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80058de:	2b28      	cmp	r3, #40	; 0x28
 80058e0:	d127      	bne.n	8005932 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	685a      	ldr	r2, [r3, #4]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058f0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	089b      	lsrs	r3, r3, #2
 80058f6:	f003 0301 	and.w	r3, r3, #1
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d101      	bne.n	8005902 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80058fe:	2301      	movs	r3, #1
 8005900:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	09db      	lsrs	r3, r3, #7
 8005906:	f003 0301 	and.w	r3, r3, #1
 800590a:	2b00      	cmp	r3, #0
 800590c:	d103      	bne.n	8005916 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	68db      	ldr	r3, [r3, #12]
 8005912:	81bb      	strh	r3, [r7, #12]
 8005914:	e002      	b.n	800591c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	699b      	ldr	r3, [r3, #24]
 800591a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005924:	89ba      	ldrh	r2, [r7, #12]
 8005926:	7bfb      	ldrb	r3, [r7, #15]
 8005928:	4619      	mov	r1, r3
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f7ff f95d 	bl	8004bea <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005930:	e008      	b.n	8005944 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f06f 0202 	mvn.w	r2, #2
 800593a:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005944:	bf00      	nop
 8005946:	3710      	adds	r7, #16
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}

0800594c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b084      	sub	sp, #16
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800595a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	685a      	ldr	r2, [r3, #4]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800596a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800596c:	2300      	movs	r3, #0
 800596e:	60bb      	str	r3, [r7, #8]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	695b      	ldr	r3, [r3, #20]
 8005976:	60bb      	str	r3, [r7, #8]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f042 0201 	orr.w	r2, r2, #1
 8005986:	601a      	str	r2, [r3, #0]
 8005988:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005998:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059a8:	d172      	bne.n	8005a90 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80059aa:	7bfb      	ldrb	r3, [r7, #15]
 80059ac:	2b22      	cmp	r3, #34	; 0x22
 80059ae:	d002      	beq.n	80059b6 <I2C_Slave_STOPF+0x6a>
 80059b0:	7bfb      	ldrb	r3, [r7, #15]
 80059b2:	2b2a      	cmp	r3, #42	; 0x2a
 80059b4:	d135      	bne.n	8005a22 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	b29a      	uxth	r2, r3
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d005      	beq.n	80059da <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d2:	f043 0204 	orr.w	r2, r3, #4
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	685a      	ldr	r2, [r3, #4]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059e8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ee:	4618      	mov	r0, r3
 80059f0:	f7fe f849 	bl	8003a86 <HAL_DMA_GetState>
 80059f4:	4603      	mov	r3, r0
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d049      	beq.n	8005a8e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059fe:	4a69      	ldr	r2, [pc, #420]	; (8005ba4 <I2C_Slave_STOPF+0x258>)
 8005a00:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a06:	4618      	mov	r0, r3
 8005a08:	f7fe f81b 	bl	8003a42 <HAL_DMA_Abort_IT>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d03d      	beq.n	8005a8e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a18:	687a      	ldr	r2, [r7, #4]
 8005a1a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005a1c:	4610      	mov	r0, r2
 8005a1e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005a20:	e035      	b.n	8005a8e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	b29a      	uxth	r2, r3
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d005      	beq.n	8005a46 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a3e:	f043 0204 	orr.w	r2, r3, #4
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	685a      	ldr	r2, [r3, #4]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a54:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f7fe f813 	bl	8003a86 <HAL_DMA_GetState>
 8005a60:	4603      	mov	r3, r0
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d014      	beq.n	8005a90 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a6a:	4a4e      	ldr	r2, [pc, #312]	; (8005ba4 <I2C_Slave_STOPF+0x258>)
 8005a6c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a72:	4618      	mov	r0, r3
 8005a74:	f7fd ffe5 	bl	8003a42 <HAL_DMA_Abort_IT>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d008      	beq.n	8005a90 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a84:	687a      	ldr	r2, [r7, #4]
 8005a86:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005a88:	4610      	mov	r0, r2
 8005a8a:	4798      	blx	r3
 8005a8c:	e000      	b.n	8005a90 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005a8e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d03e      	beq.n	8005b18 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	695b      	ldr	r3, [r3, #20]
 8005aa0:	f003 0304 	and.w	r3, r3, #4
 8005aa4:	2b04      	cmp	r3, #4
 8005aa6:	d112      	bne.n	8005ace <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	691a      	ldr	r2, [r3, #16]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab2:	b2d2      	uxtb	r2, r2
 8005ab4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aba:	1c5a      	adds	r2, r3, #1
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	3b01      	subs	r3, #1
 8005ac8:	b29a      	uxth	r2, r3
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	695b      	ldr	r3, [r3, #20]
 8005ad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ad8:	2b40      	cmp	r3, #64	; 0x40
 8005ada:	d112      	bne.n	8005b02 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	691a      	ldr	r2, [r3, #16]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae6:	b2d2      	uxtb	r2, r2
 8005ae8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aee:	1c5a      	adds	r2, r3, #1
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	3b01      	subs	r3, #1
 8005afc:	b29a      	uxth	r2, r3
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d005      	beq.n	8005b18 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b10:	f043 0204 	orr.w	r2, r3, #4
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d003      	beq.n	8005b28 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f000 f843 	bl	8005bac <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005b26:	e039      	b.n	8005b9c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005b28:	7bfb      	ldrb	r3, [r7, #15]
 8005b2a:	2b2a      	cmp	r3, #42	; 0x2a
 8005b2c:	d109      	bne.n	8005b42 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2228      	movs	r2, #40	; 0x28
 8005b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f7ff f84a 	bl	8004bd6 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	2b28      	cmp	r3, #40	; 0x28
 8005b4c:	d111      	bne.n	8005b72 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	4a15      	ldr	r2, [pc, #84]	; (8005ba8 <I2C_Slave_STOPF+0x25c>)
 8005b52:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2220      	movs	r2, #32
 8005b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2200      	movs	r2, #0
 8005b66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f7ff f84b 	bl	8004c06 <HAL_I2C_ListenCpltCallback>
}
 8005b70:	e014      	b.n	8005b9c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b76:	2b22      	cmp	r3, #34	; 0x22
 8005b78:	d002      	beq.n	8005b80 <I2C_Slave_STOPF+0x234>
 8005b7a:	7bfb      	ldrb	r3, [r7, #15]
 8005b7c:	2b22      	cmp	r3, #34	; 0x22
 8005b7e:	d10d      	bne.n	8005b9c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2200      	movs	r2, #0
 8005b84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2220      	movs	r2, #32
 8005b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f7ff f81d 	bl	8004bd6 <HAL_I2C_SlaveRxCpltCallback>
}
 8005b9c:	bf00      	nop
 8005b9e:	3710      	adds	r7, #16
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}
 8005ba4:	080060b1 	.word	0x080060b1
 8005ba8:	ffff0000 	.word	0xffff0000

08005bac <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b084      	sub	sp, #16
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bba:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005bc2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005bc4:	7bbb      	ldrb	r3, [r7, #14]
 8005bc6:	2b10      	cmp	r3, #16
 8005bc8:	d002      	beq.n	8005bd0 <I2C_ITError+0x24>
 8005bca:	7bbb      	ldrb	r3, [r7, #14]
 8005bcc:	2b40      	cmp	r3, #64	; 0x40
 8005bce:	d10a      	bne.n	8005be6 <I2C_ITError+0x3a>
 8005bd0:	7bfb      	ldrb	r3, [r7, #15]
 8005bd2:	2b22      	cmp	r3, #34	; 0x22
 8005bd4:	d107      	bne.n	8005be6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005be4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005be6:	7bfb      	ldrb	r3, [r7, #15]
 8005be8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005bec:	2b28      	cmp	r3, #40	; 0x28
 8005bee:	d107      	bne.n	8005c00 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2228      	movs	r2, #40	; 0x28
 8005bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005bfe:	e015      	b.n	8005c2c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c0e:	d00a      	beq.n	8005c26 <I2C_ITError+0x7a>
 8005c10:	7bfb      	ldrb	r3, [r7, #15]
 8005c12:	2b60      	cmp	r3, #96	; 0x60
 8005c14:	d007      	beq.n	8005c26 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2220      	movs	r2, #32
 8005c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2200      	movs	r2, #0
 8005c22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c3a:	d162      	bne.n	8005d02 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	685a      	ldr	r2, [r3, #4]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c4a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	d020      	beq.n	8005c9c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c5e:	4a6a      	ldr	r2, [pc, #424]	; (8005e08 <I2C_ITError+0x25c>)
 8005c60:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c66:	4618      	mov	r0, r3
 8005c68:	f7fd feeb 	bl	8003a42 <HAL_DMA_Abort_IT>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	f000 8089 	beq.w	8005d86 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f022 0201 	bic.w	r2, r2, #1
 8005c82:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2220      	movs	r2, #32
 8005c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c92:	687a      	ldr	r2, [r7, #4]
 8005c94:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005c96:	4610      	mov	r0, r2
 8005c98:	4798      	blx	r3
 8005c9a:	e074      	b.n	8005d86 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca0:	4a59      	ldr	r2, [pc, #356]	; (8005e08 <I2C_ITError+0x25c>)
 8005ca2:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f7fd feca 	bl	8003a42 <HAL_DMA_Abort_IT>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d068      	beq.n	8005d86 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	695b      	ldr	r3, [r3, #20]
 8005cba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cbe:	2b40      	cmp	r3, #64	; 0x40
 8005cc0:	d10b      	bne.n	8005cda <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	691a      	ldr	r2, [r3, #16]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ccc:	b2d2      	uxtb	r2, r2
 8005cce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd4:	1c5a      	adds	r2, r3, #1
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f022 0201 	bic.w	r2, r2, #1
 8005ce8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2220      	movs	r2, #32
 8005cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cf8:	687a      	ldr	r2, [r7, #4]
 8005cfa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005cfc:	4610      	mov	r0, r2
 8005cfe:	4798      	blx	r3
 8005d00:	e041      	b.n	8005d86 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	2b60      	cmp	r3, #96	; 0x60
 8005d0c:	d125      	bne.n	8005d5a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2220      	movs	r2, #32
 8005d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	695b      	ldr	r3, [r3, #20]
 8005d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d26:	2b40      	cmp	r3, #64	; 0x40
 8005d28:	d10b      	bne.n	8005d42 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	691a      	ldr	r2, [r3, #16]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d34:	b2d2      	uxtb	r2, r2
 8005d36:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d3c:	1c5a      	adds	r2, r3, #1
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f022 0201 	bic.w	r2, r2, #1
 8005d50:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f7fe ff7f 	bl	8004c56 <HAL_I2C_AbortCpltCallback>
 8005d58:	e015      	b.n	8005d86 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	695b      	ldr	r3, [r3, #20]
 8005d60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d64:	2b40      	cmp	r3, #64	; 0x40
 8005d66:	d10b      	bne.n	8005d80 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	691a      	ldr	r2, [r3, #16]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d72:	b2d2      	uxtb	r2, r2
 8005d74:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7a:	1c5a      	adds	r2, r3, #1
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f7fe ff5e 	bl	8004c42 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d8a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	f003 0301 	and.w	r3, r3, #1
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d10e      	bne.n	8005db4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d109      	bne.n	8005db4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d104      	bne.n	8005db4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d007      	beq.n	8005dc4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	685a      	ldr	r2, [r3, #4]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005dc2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dca:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd0:	f003 0304 	and.w	r3, r3, #4
 8005dd4:	2b04      	cmp	r3, #4
 8005dd6:	d113      	bne.n	8005e00 <I2C_ITError+0x254>
 8005dd8:	7bfb      	ldrb	r3, [r7, #15]
 8005dda:	2b28      	cmp	r3, #40	; 0x28
 8005ddc:	d110      	bne.n	8005e00 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	4a0a      	ldr	r2, [pc, #40]	; (8005e0c <I2C_ITError+0x260>)
 8005de2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2220      	movs	r2, #32
 8005dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2200      	movs	r2, #0
 8005df6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f7fe ff03 	bl	8004c06 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005e00:	bf00      	nop
 8005e02:	3710      	adds	r7, #16
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}
 8005e08:	080060b1 	.word	0x080060b1
 8005e0c:	ffff0000 	.word	0xffff0000

08005e10 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b088      	sub	sp, #32
 8005e14:	af02      	add	r7, sp, #8
 8005e16:	60f8      	str	r0, [r7, #12]
 8005e18:	607a      	str	r2, [r7, #4]
 8005e1a:	603b      	str	r3, [r7, #0]
 8005e1c:	460b      	mov	r3, r1
 8005e1e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e24:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	2b08      	cmp	r3, #8
 8005e2a:	d006      	beq.n	8005e3a <I2C_MasterRequestWrite+0x2a>
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d003      	beq.n	8005e3a <I2C_MasterRequestWrite+0x2a>
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005e38:	d108      	bne.n	8005e4c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e48:	601a      	str	r2, [r3, #0]
 8005e4a:	e00b      	b.n	8005e64 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e50:	2b12      	cmp	r3, #18
 8005e52:	d107      	bne.n	8005e64 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e62:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	9300      	str	r3, [sp, #0]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005e70:	68f8      	ldr	r0, [r7, #12]
 8005e72:	f000 f9c5 	bl	8006200 <I2C_WaitOnFlagUntilTimeout>
 8005e76:	4603      	mov	r3, r0
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d00d      	beq.n	8005e98 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e8a:	d103      	bne.n	8005e94 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e92:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005e94:	2303      	movs	r3, #3
 8005e96:	e035      	b.n	8005f04 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	691b      	ldr	r3, [r3, #16]
 8005e9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ea0:	d108      	bne.n	8005eb4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005ea2:	897b      	ldrh	r3, [r7, #10]
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	461a      	mov	r2, r3
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005eb0:	611a      	str	r2, [r3, #16]
 8005eb2:	e01b      	b.n	8005eec <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005eb4:	897b      	ldrh	r3, [r7, #10]
 8005eb6:	11db      	asrs	r3, r3, #7
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	f003 0306 	and.w	r3, r3, #6
 8005ebe:	b2db      	uxtb	r3, r3
 8005ec0:	f063 030f 	orn	r3, r3, #15
 8005ec4:	b2da      	uxtb	r2, r3
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	687a      	ldr	r2, [r7, #4]
 8005ed0:	490e      	ldr	r1, [pc, #56]	; (8005f0c <I2C_MasterRequestWrite+0xfc>)
 8005ed2:	68f8      	ldr	r0, [r7, #12]
 8005ed4:	f000 f9eb 	bl	80062ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d001      	beq.n	8005ee2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e010      	b.n	8005f04 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005ee2:	897b      	ldrh	r3, [r7, #10]
 8005ee4:	b2da      	uxtb	r2, r3
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	687a      	ldr	r2, [r7, #4]
 8005ef0:	4907      	ldr	r1, [pc, #28]	; (8005f10 <I2C_MasterRequestWrite+0x100>)
 8005ef2:	68f8      	ldr	r0, [r7, #12]
 8005ef4:	f000 f9db 	bl	80062ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d001      	beq.n	8005f02 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	e000      	b.n	8005f04 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005f02:	2300      	movs	r3, #0
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3718      	adds	r7, #24
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}
 8005f0c:	00010008 	.word	0x00010008
 8005f10:	00010002 	.word	0x00010002

08005f14 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b088      	sub	sp, #32
 8005f18:	af02      	add	r7, sp, #8
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	607a      	str	r2, [r7, #4]
 8005f1e:	603b      	str	r3, [r7, #0]
 8005f20:	460b      	mov	r3, r1
 8005f22:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f28:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005f38:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	2b08      	cmp	r3, #8
 8005f3e:	d006      	beq.n	8005f4e <I2C_MasterRequestRead+0x3a>
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d003      	beq.n	8005f4e <I2C_MasterRequestRead+0x3a>
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005f4c:	d108      	bne.n	8005f60 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	681a      	ldr	r2, [r3, #0]
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f5c:	601a      	str	r2, [r3, #0]
 8005f5e:	e00b      	b.n	8005f78 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f64:	2b11      	cmp	r3, #17
 8005f66:	d107      	bne.n	8005f78 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f76:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	9300      	str	r3, [sp, #0]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005f84:	68f8      	ldr	r0, [r7, #12]
 8005f86:	f000 f93b 	bl	8006200 <I2C_WaitOnFlagUntilTimeout>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d00d      	beq.n	8005fac <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f9e:	d103      	bne.n	8005fa8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fa6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005fa8:	2303      	movs	r3, #3
 8005faa:	e079      	b.n	80060a0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	691b      	ldr	r3, [r3, #16]
 8005fb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005fb4:	d108      	bne.n	8005fc8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005fb6:	897b      	ldrh	r3, [r7, #10]
 8005fb8:	b2db      	uxtb	r3, r3
 8005fba:	f043 0301 	orr.w	r3, r3, #1
 8005fbe:	b2da      	uxtb	r2, r3
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	611a      	str	r2, [r3, #16]
 8005fc6:	e05f      	b.n	8006088 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005fc8:	897b      	ldrh	r3, [r7, #10]
 8005fca:	11db      	asrs	r3, r3, #7
 8005fcc:	b2db      	uxtb	r3, r3
 8005fce:	f003 0306 	and.w	r3, r3, #6
 8005fd2:	b2db      	uxtb	r3, r3
 8005fd4:	f063 030f 	orn	r3, r3, #15
 8005fd8:	b2da      	uxtb	r2, r3
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	4930      	ldr	r1, [pc, #192]	; (80060a8 <I2C_MasterRequestRead+0x194>)
 8005fe6:	68f8      	ldr	r0, [r7, #12]
 8005fe8:	f000 f961 	bl	80062ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005fec:	4603      	mov	r3, r0
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d001      	beq.n	8005ff6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e054      	b.n	80060a0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005ff6:	897b      	ldrh	r3, [r7, #10]
 8005ff8:	b2da      	uxtb	r2, r3
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	687a      	ldr	r2, [r7, #4]
 8006004:	4929      	ldr	r1, [pc, #164]	; (80060ac <I2C_MasterRequestRead+0x198>)
 8006006:	68f8      	ldr	r0, [r7, #12]
 8006008:	f000 f951 	bl	80062ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800600c:	4603      	mov	r3, r0
 800600e:	2b00      	cmp	r3, #0
 8006010:	d001      	beq.n	8006016 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	e044      	b.n	80060a0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006016:	2300      	movs	r3, #0
 8006018:	613b      	str	r3, [r7, #16]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	695b      	ldr	r3, [r3, #20]
 8006020:	613b      	str	r3, [r7, #16]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	699b      	ldr	r3, [r3, #24]
 8006028:	613b      	str	r3, [r7, #16]
 800602a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800603a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	9300      	str	r3, [sp, #0]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2200      	movs	r2, #0
 8006044:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006048:	68f8      	ldr	r0, [r7, #12]
 800604a:	f000 f8d9 	bl	8006200 <I2C_WaitOnFlagUntilTimeout>
 800604e:	4603      	mov	r3, r0
 8006050:	2b00      	cmp	r3, #0
 8006052:	d00d      	beq.n	8006070 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800605e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006062:	d103      	bne.n	800606c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f44f 7200 	mov.w	r2, #512	; 0x200
 800606a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800606c:	2303      	movs	r3, #3
 800606e:	e017      	b.n	80060a0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006070:	897b      	ldrh	r3, [r7, #10]
 8006072:	11db      	asrs	r3, r3, #7
 8006074:	b2db      	uxtb	r3, r3
 8006076:	f003 0306 	and.w	r3, r3, #6
 800607a:	b2db      	uxtb	r3, r3
 800607c:	f063 030e 	orn	r3, r3, #14
 8006080:	b2da      	uxtb	r2, r3
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	687a      	ldr	r2, [r7, #4]
 800608c:	4907      	ldr	r1, [pc, #28]	; (80060ac <I2C_MasterRequestRead+0x198>)
 800608e:	68f8      	ldr	r0, [r7, #12]
 8006090:	f000 f90d 	bl	80062ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006094:	4603      	mov	r3, r0
 8006096:	2b00      	cmp	r3, #0
 8006098:	d001      	beq.n	800609e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	e000      	b.n	80060a0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800609e:	2300      	movs	r3, #0
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3718      	adds	r7, #24
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}
 80060a8:	00010008 	.word	0x00010008
 80060ac:	00010002 	.word	0x00010002

080060b0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b086      	sub	sp, #24
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80060b8:	2300      	movs	r3, #0
 80060ba:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060c8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80060ca:	4b4b      	ldr	r3, [pc, #300]	; (80061f8 <I2C_DMAAbort+0x148>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	08db      	lsrs	r3, r3, #3
 80060d0:	4a4a      	ldr	r2, [pc, #296]	; (80061fc <I2C_DMAAbort+0x14c>)
 80060d2:	fba2 2303 	umull	r2, r3, r2, r3
 80060d6:	0a1a      	lsrs	r2, r3, #8
 80060d8:	4613      	mov	r3, r2
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	4413      	add	r3, r2
 80060de:	00da      	lsls	r2, r3, #3
 80060e0:	1ad3      	subs	r3, r2, r3
 80060e2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d106      	bne.n	80060f8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ee:	f043 0220 	orr.w	r2, r3, #32
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80060f6:	e00a      	b.n	800610e <I2C_DMAAbort+0x5e>
    }
    count--;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	3b01      	subs	r3, #1
 80060fc:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006108:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800610c:	d0ea      	beq.n	80060e4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006112:	2b00      	cmp	r3, #0
 8006114:	d003      	beq.n	800611e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800611a:	2200      	movs	r2, #0
 800611c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006122:	2b00      	cmp	r3, #0
 8006124:	d003      	beq.n	800612e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800612a:	2200      	movs	r2, #0
 800612c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800613c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	2200      	movs	r2, #0
 8006142:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006148:	2b00      	cmp	r3, #0
 800614a:	d003      	beq.n	8006154 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006150:	2200      	movs	r2, #0
 8006152:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006158:	2b00      	cmp	r3, #0
 800615a:	d003      	beq.n	8006164 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006160:	2200      	movs	r2, #0
 8006162:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	681a      	ldr	r2, [r3, #0]
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f022 0201 	bic.w	r2, r2, #1
 8006172:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800617a:	b2db      	uxtb	r3, r3
 800617c:	2b60      	cmp	r3, #96	; 0x60
 800617e:	d10e      	bne.n	800619e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	2220      	movs	r2, #32
 8006184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	2200      	movs	r2, #0
 800618c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	2200      	movs	r2, #0
 8006194:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006196:	6978      	ldr	r0, [r7, #20]
 8006198:	f7fe fd5d 	bl	8004c56 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800619c:	e027      	b.n	80061ee <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800619e:	7cfb      	ldrb	r3, [r7, #19]
 80061a0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80061a4:	2b28      	cmp	r3, #40	; 0x28
 80061a6:	d117      	bne.n	80061d8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	681a      	ldr	r2, [r3, #0]
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f042 0201 	orr.w	r2, r2, #1
 80061b6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80061c6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	2200      	movs	r2, #0
 80061cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	2228      	movs	r2, #40	; 0x28
 80061d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80061d6:	e007      	b.n	80061e8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	2220      	movs	r2, #32
 80061dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	2200      	movs	r2, #0
 80061e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80061e8:	6978      	ldr	r0, [r7, #20]
 80061ea:	f7fe fd2a 	bl	8004c42 <HAL_I2C_ErrorCallback>
}
 80061ee:	bf00      	nop
 80061f0:	3718      	adds	r7, #24
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	bf00      	nop
 80061f8:	20000004 	.word	0x20000004
 80061fc:	14f8b589 	.word	0x14f8b589

08006200 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b084      	sub	sp, #16
 8006204:	af00      	add	r7, sp, #0
 8006206:	60f8      	str	r0, [r7, #12]
 8006208:	60b9      	str	r1, [r7, #8]
 800620a:	603b      	str	r3, [r7, #0]
 800620c:	4613      	mov	r3, r2
 800620e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006210:	e025      	b.n	800625e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006218:	d021      	beq.n	800625e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800621a:	f7fc fd87 	bl	8002d2c <HAL_GetTick>
 800621e:	4602      	mov	r2, r0
 8006220:	69bb      	ldr	r3, [r7, #24]
 8006222:	1ad3      	subs	r3, r2, r3
 8006224:	683a      	ldr	r2, [r7, #0]
 8006226:	429a      	cmp	r2, r3
 8006228:	d302      	bcc.n	8006230 <I2C_WaitOnFlagUntilTimeout+0x30>
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d116      	bne.n	800625e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2200      	movs	r2, #0
 8006234:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2220      	movs	r2, #32
 800623a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2200      	movs	r2, #0
 8006242:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800624a:	f043 0220 	orr.w	r2, r3, #32
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2200      	movs	r2, #0
 8006256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	e023      	b.n	80062a6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	0c1b      	lsrs	r3, r3, #16
 8006262:	b2db      	uxtb	r3, r3
 8006264:	2b01      	cmp	r3, #1
 8006266:	d10d      	bne.n	8006284 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	695b      	ldr	r3, [r3, #20]
 800626e:	43da      	mvns	r2, r3
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	4013      	ands	r3, r2
 8006274:	b29b      	uxth	r3, r3
 8006276:	2b00      	cmp	r3, #0
 8006278:	bf0c      	ite	eq
 800627a:	2301      	moveq	r3, #1
 800627c:	2300      	movne	r3, #0
 800627e:	b2db      	uxtb	r3, r3
 8006280:	461a      	mov	r2, r3
 8006282:	e00c      	b.n	800629e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	699b      	ldr	r3, [r3, #24]
 800628a:	43da      	mvns	r2, r3
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	4013      	ands	r3, r2
 8006290:	b29b      	uxth	r3, r3
 8006292:	2b00      	cmp	r3, #0
 8006294:	bf0c      	ite	eq
 8006296:	2301      	moveq	r3, #1
 8006298:	2300      	movne	r3, #0
 800629a:	b2db      	uxtb	r3, r3
 800629c:	461a      	mov	r2, r3
 800629e:	79fb      	ldrb	r3, [r7, #7]
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d0b6      	beq.n	8006212 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80062a4:	2300      	movs	r3, #0
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3710      	adds	r7, #16
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}

080062ae <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80062ae:	b580      	push	{r7, lr}
 80062b0:	b084      	sub	sp, #16
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	60f8      	str	r0, [r7, #12]
 80062b6:	60b9      	str	r1, [r7, #8]
 80062b8:	607a      	str	r2, [r7, #4]
 80062ba:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80062bc:	e051      	b.n	8006362 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	695b      	ldr	r3, [r3, #20]
 80062c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062cc:	d123      	bne.n	8006316 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062dc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80062e6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2200      	movs	r2, #0
 80062ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2220      	movs	r2, #32
 80062f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2200      	movs	r2, #0
 80062fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006302:	f043 0204 	orr.w	r2, r3, #4
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2200      	movs	r2, #0
 800630e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	e046      	b.n	80063a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800631c:	d021      	beq.n	8006362 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800631e:	f7fc fd05 	bl	8002d2c <HAL_GetTick>
 8006322:	4602      	mov	r2, r0
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	1ad3      	subs	r3, r2, r3
 8006328:	687a      	ldr	r2, [r7, #4]
 800632a:	429a      	cmp	r2, r3
 800632c:	d302      	bcc.n	8006334 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d116      	bne.n	8006362 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2200      	movs	r2, #0
 8006338:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2220      	movs	r2, #32
 800633e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2200      	movs	r2, #0
 8006346:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800634e:	f043 0220 	orr.w	r2, r3, #32
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2200      	movs	r2, #0
 800635a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	e020      	b.n	80063a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	0c1b      	lsrs	r3, r3, #16
 8006366:	b2db      	uxtb	r3, r3
 8006368:	2b01      	cmp	r3, #1
 800636a:	d10c      	bne.n	8006386 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	695b      	ldr	r3, [r3, #20]
 8006372:	43da      	mvns	r2, r3
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	4013      	ands	r3, r2
 8006378:	b29b      	uxth	r3, r3
 800637a:	2b00      	cmp	r3, #0
 800637c:	bf14      	ite	ne
 800637e:	2301      	movne	r3, #1
 8006380:	2300      	moveq	r3, #0
 8006382:	b2db      	uxtb	r3, r3
 8006384:	e00b      	b.n	800639e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	699b      	ldr	r3, [r3, #24]
 800638c:	43da      	mvns	r2, r3
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	4013      	ands	r3, r2
 8006392:	b29b      	uxth	r3, r3
 8006394:	2b00      	cmp	r3, #0
 8006396:	bf14      	ite	ne
 8006398:	2301      	movne	r3, #1
 800639a:	2300      	moveq	r3, #0
 800639c:	b2db      	uxtb	r3, r3
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d18d      	bne.n	80062be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80063a2:	2300      	movs	r3, #0
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3710      	adds	r7, #16
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}

080063ac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b084      	sub	sp, #16
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	60b9      	str	r1, [r7, #8]
 80063b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80063b8:	e02d      	b.n	8006416 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80063ba:	68f8      	ldr	r0, [r7, #12]
 80063bc:	f000 f900 	bl	80065c0 <I2C_IsAcknowledgeFailed>
 80063c0:	4603      	mov	r3, r0
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d001      	beq.n	80063ca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	e02d      	b.n	8006426 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063d0:	d021      	beq.n	8006416 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063d2:	f7fc fcab 	bl	8002d2c <HAL_GetTick>
 80063d6:	4602      	mov	r2, r0
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	1ad3      	subs	r3, r2, r3
 80063dc:	68ba      	ldr	r2, [r7, #8]
 80063de:	429a      	cmp	r2, r3
 80063e0:	d302      	bcc.n	80063e8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d116      	bne.n	8006416 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2200      	movs	r2, #0
 80063ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2220      	movs	r2, #32
 80063f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2200      	movs	r2, #0
 80063fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006402:	f043 0220 	orr.w	r2, r3, #32
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2200      	movs	r2, #0
 800640e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	e007      	b.n	8006426 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	695b      	ldr	r3, [r3, #20]
 800641c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006420:	2b80      	cmp	r3, #128	; 0x80
 8006422:	d1ca      	bne.n	80063ba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006424:	2300      	movs	r3, #0
}
 8006426:	4618      	mov	r0, r3
 8006428:	3710      	adds	r7, #16
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}

0800642e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800642e:	b580      	push	{r7, lr}
 8006430:	b084      	sub	sp, #16
 8006432:	af00      	add	r7, sp, #0
 8006434:	60f8      	str	r0, [r7, #12]
 8006436:	60b9      	str	r1, [r7, #8]
 8006438:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800643a:	e02d      	b.n	8006498 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800643c:	68f8      	ldr	r0, [r7, #12]
 800643e:	f000 f8bf 	bl	80065c0 <I2C_IsAcknowledgeFailed>
 8006442:	4603      	mov	r3, r0
 8006444:	2b00      	cmp	r3, #0
 8006446:	d001      	beq.n	800644c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006448:	2301      	movs	r3, #1
 800644a:	e02d      	b.n	80064a8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006452:	d021      	beq.n	8006498 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006454:	f7fc fc6a 	bl	8002d2c <HAL_GetTick>
 8006458:	4602      	mov	r2, r0
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	1ad3      	subs	r3, r2, r3
 800645e:	68ba      	ldr	r2, [r7, #8]
 8006460:	429a      	cmp	r2, r3
 8006462:	d302      	bcc.n	800646a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d116      	bne.n	8006498 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2200      	movs	r2, #0
 800646e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2220      	movs	r2, #32
 8006474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2200      	movs	r2, #0
 800647c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006484:	f043 0220 	orr.w	r2, r3, #32
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2200      	movs	r2, #0
 8006490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006494:	2301      	movs	r3, #1
 8006496:	e007      	b.n	80064a8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	695b      	ldr	r3, [r3, #20]
 800649e:	f003 0304 	and.w	r3, r3, #4
 80064a2:	2b04      	cmp	r3, #4
 80064a4:	d1ca      	bne.n	800643c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80064a6:	2300      	movs	r3, #0
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3710      	adds	r7, #16
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}

080064b0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b085      	sub	sp, #20
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80064b8:	2300      	movs	r3, #0
 80064ba:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80064bc:	4b13      	ldr	r3, [pc, #76]	; (800650c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	08db      	lsrs	r3, r3, #3
 80064c2:	4a13      	ldr	r2, [pc, #76]	; (8006510 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80064c4:	fba2 2303 	umull	r2, r3, r2, r3
 80064c8:	0a1a      	lsrs	r2, r3, #8
 80064ca:	4613      	mov	r3, r2
 80064cc:	009b      	lsls	r3, r3, #2
 80064ce:	4413      	add	r3, r2
 80064d0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	3b01      	subs	r3, #1
 80064d6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d107      	bne.n	80064ee <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e2:	f043 0220 	orr.w	r2, r3, #32
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80064ea:	2301      	movs	r3, #1
 80064ec:	e008      	b.n	8006500 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80064f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064fc:	d0e9      	beq.n	80064d2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80064fe:	2300      	movs	r3, #0
}
 8006500:	4618      	mov	r0, r3
 8006502:	3714      	adds	r7, #20
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr
 800650c:	20000004 	.word	0x20000004
 8006510:	14f8b589 	.word	0x14f8b589

08006514 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b084      	sub	sp, #16
 8006518:	af00      	add	r7, sp, #0
 800651a:	60f8      	str	r0, [r7, #12]
 800651c:	60b9      	str	r1, [r7, #8]
 800651e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006520:	e042      	b.n	80065a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	695b      	ldr	r3, [r3, #20]
 8006528:	f003 0310 	and.w	r3, r3, #16
 800652c:	2b10      	cmp	r3, #16
 800652e:	d119      	bne.n	8006564 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f06f 0210 	mvn.w	r2, #16
 8006538:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2200      	movs	r2, #0
 800653e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2220      	movs	r2, #32
 8006544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2200      	movs	r2, #0
 800654c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2200      	movs	r2, #0
 800655c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006560:	2301      	movs	r3, #1
 8006562:	e029      	b.n	80065b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006564:	f7fc fbe2 	bl	8002d2c <HAL_GetTick>
 8006568:	4602      	mov	r2, r0
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	1ad3      	subs	r3, r2, r3
 800656e:	68ba      	ldr	r2, [r7, #8]
 8006570:	429a      	cmp	r2, r3
 8006572:	d302      	bcc.n	800657a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d116      	bne.n	80065a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2200      	movs	r2, #0
 800657e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2220      	movs	r2, #32
 8006584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2200      	movs	r2, #0
 800658c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006594:	f043 0220 	orr.w	r2, r3, #32
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2200      	movs	r2, #0
 80065a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80065a4:	2301      	movs	r3, #1
 80065a6:	e007      	b.n	80065b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	695b      	ldr	r3, [r3, #20]
 80065ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065b2:	2b40      	cmp	r3, #64	; 0x40
 80065b4:	d1b5      	bne.n	8006522 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80065b6:	2300      	movs	r3, #0
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3710      	adds	r7, #16
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}

080065c0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b083      	sub	sp, #12
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	695b      	ldr	r3, [r3, #20]
 80065ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065d6:	d11b      	bne.n	8006610 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80065e0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2200      	movs	r2, #0
 80065e6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2220      	movs	r2, #32
 80065ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2200      	movs	r2, #0
 80065f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065fc:	f043 0204 	orr.w	r2, r3, #4
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2200      	movs	r2, #0
 8006608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	e000      	b.n	8006612 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006610:	2300      	movs	r3, #0
}
 8006612:	4618      	mov	r0, r3
 8006614:	370c      	adds	r7, #12
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr

0800661e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800661e:	b480      	push	{r7}
 8006620:	b083      	sub	sp, #12
 8006622:	af00      	add	r7, sp, #0
 8006624:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800662a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800662e:	d103      	bne.n	8006638 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2201      	movs	r2, #1
 8006634:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006636:	e007      	b.n	8006648 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800663c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006640:	d102      	bne.n	8006648 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2208      	movs	r2, #8
 8006646:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006648:	bf00      	nop
 800664a:	370c      	adds	r7, #12
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr

08006654 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b084      	sub	sp, #16
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d101      	bne.n	8006668 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006664:	2301      	movs	r3, #1
 8006666:	e0cc      	b.n	8006802 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006668:	4b68      	ldr	r3, [pc, #416]	; (800680c <HAL_RCC_ClockConfig+0x1b8>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f003 0307 	and.w	r3, r3, #7
 8006670:	683a      	ldr	r2, [r7, #0]
 8006672:	429a      	cmp	r2, r3
 8006674:	d90c      	bls.n	8006690 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006676:	4b65      	ldr	r3, [pc, #404]	; (800680c <HAL_RCC_ClockConfig+0x1b8>)
 8006678:	683a      	ldr	r2, [r7, #0]
 800667a:	b2d2      	uxtb	r2, r2
 800667c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800667e:	4b63      	ldr	r3, [pc, #396]	; (800680c <HAL_RCC_ClockConfig+0x1b8>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f003 0307 	and.w	r3, r3, #7
 8006686:	683a      	ldr	r2, [r7, #0]
 8006688:	429a      	cmp	r2, r3
 800668a:	d001      	beq.n	8006690 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800668c:	2301      	movs	r3, #1
 800668e:	e0b8      	b.n	8006802 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f003 0302 	and.w	r3, r3, #2
 8006698:	2b00      	cmp	r3, #0
 800669a:	d020      	beq.n	80066de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f003 0304 	and.w	r3, r3, #4
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d005      	beq.n	80066b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80066a8:	4b59      	ldr	r3, [pc, #356]	; (8006810 <HAL_RCC_ClockConfig+0x1bc>)
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	4a58      	ldr	r2, [pc, #352]	; (8006810 <HAL_RCC_ClockConfig+0x1bc>)
 80066ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80066b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f003 0308 	and.w	r3, r3, #8
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d005      	beq.n	80066cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80066c0:	4b53      	ldr	r3, [pc, #332]	; (8006810 <HAL_RCC_ClockConfig+0x1bc>)
 80066c2:	689b      	ldr	r3, [r3, #8]
 80066c4:	4a52      	ldr	r2, [pc, #328]	; (8006810 <HAL_RCC_ClockConfig+0x1bc>)
 80066c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80066ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80066cc:	4b50      	ldr	r3, [pc, #320]	; (8006810 <HAL_RCC_ClockConfig+0x1bc>)
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	494d      	ldr	r1, [pc, #308]	; (8006810 <HAL_RCC_ClockConfig+0x1bc>)
 80066da:	4313      	orrs	r3, r2
 80066dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f003 0301 	and.w	r3, r3, #1
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d044      	beq.n	8006774 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d107      	bne.n	8006702 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066f2:	4b47      	ldr	r3, [pc, #284]	; (8006810 <HAL_RCC_ClockConfig+0x1bc>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d119      	bne.n	8006732 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	e07f      	b.n	8006802 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	2b02      	cmp	r3, #2
 8006708:	d003      	beq.n	8006712 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800670e:	2b03      	cmp	r3, #3
 8006710:	d107      	bne.n	8006722 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006712:	4b3f      	ldr	r3, [pc, #252]	; (8006810 <HAL_RCC_ClockConfig+0x1bc>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800671a:	2b00      	cmp	r3, #0
 800671c:	d109      	bne.n	8006732 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800671e:	2301      	movs	r3, #1
 8006720:	e06f      	b.n	8006802 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006722:	4b3b      	ldr	r3, [pc, #236]	; (8006810 <HAL_RCC_ClockConfig+0x1bc>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f003 0302 	and.w	r3, r3, #2
 800672a:	2b00      	cmp	r3, #0
 800672c:	d101      	bne.n	8006732 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800672e:	2301      	movs	r3, #1
 8006730:	e067      	b.n	8006802 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006732:	4b37      	ldr	r3, [pc, #220]	; (8006810 <HAL_RCC_ClockConfig+0x1bc>)
 8006734:	689b      	ldr	r3, [r3, #8]
 8006736:	f023 0203 	bic.w	r2, r3, #3
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	4934      	ldr	r1, [pc, #208]	; (8006810 <HAL_RCC_ClockConfig+0x1bc>)
 8006740:	4313      	orrs	r3, r2
 8006742:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006744:	f7fc faf2 	bl	8002d2c <HAL_GetTick>
 8006748:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800674a:	e00a      	b.n	8006762 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800674c:	f7fc faee 	bl	8002d2c <HAL_GetTick>
 8006750:	4602      	mov	r2, r0
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	1ad3      	subs	r3, r2, r3
 8006756:	f241 3288 	movw	r2, #5000	; 0x1388
 800675a:	4293      	cmp	r3, r2
 800675c:	d901      	bls.n	8006762 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800675e:	2303      	movs	r3, #3
 8006760:	e04f      	b.n	8006802 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006762:	4b2b      	ldr	r3, [pc, #172]	; (8006810 <HAL_RCC_ClockConfig+0x1bc>)
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	f003 020c 	and.w	r2, r3, #12
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	009b      	lsls	r3, r3, #2
 8006770:	429a      	cmp	r2, r3
 8006772:	d1eb      	bne.n	800674c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006774:	4b25      	ldr	r3, [pc, #148]	; (800680c <HAL_RCC_ClockConfig+0x1b8>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f003 0307 	and.w	r3, r3, #7
 800677c:	683a      	ldr	r2, [r7, #0]
 800677e:	429a      	cmp	r2, r3
 8006780:	d20c      	bcs.n	800679c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006782:	4b22      	ldr	r3, [pc, #136]	; (800680c <HAL_RCC_ClockConfig+0x1b8>)
 8006784:	683a      	ldr	r2, [r7, #0]
 8006786:	b2d2      	uxtb	r2, r2
 8006788:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800678a:	4b20      	ldr	r3, [pc, #128]	; (800680c <HAL_RCC_ClockConfig+0x1b8>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f003 0307 	and.w	r3, r3, #7
 8006792:	683a      	ldr	r2, [r7, #0]
 8006794:	429a      	cmp	r2, r3
 8006796:	d001      	beq.n	800679c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006798:	2301      	movs	r3, #1
 800679a:	e032      	b.n	8006802 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f003 0304 	and.w	r3, r3, #4
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d008      	beq.n	80067ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80067a8:	4b19      	ldr	r3, [pc, #100]	; (8006810 <HAL_RCC_ClockConfig+0x1bc>)
 80067aa:	689b      	ldr	r3, [r3, #8]
 80067ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	68db      	ldr	r3, [r3, #12]
 80067b4:	4916      	ldr	r1, [pc, #88]	; (8006810 <HAL_RCC_ClockConfig+0x1bc>)
 80067b6:	4313      	orrs	r3, r2
 80067b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f003 0308 	and.w	r3, r3, #8
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d009      	beq.n	80067da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80067c6:	4b12      	ldr	r3, [pc, #72]	; (8006810 <HAL_RCC_ClockConfig+0x1bc>)
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	691b      	ldr	r3, [r3, #16]
 80067d2:	00db      	lsls	r3, r3, #3
 80067d4:	490e      	ldr	r1, [pc, #56]	; (8006810 <HAL_RCC_ClockConfig+0x1bc>)
 80067d6:	4313      	orrs	r3, r2
 80067d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80067da:	f000 f889 	bl	80068f0 <HAL_RCC_GetSysClockFreq>
 80067de:	4602      	mov	r2, r0
 80067e0:	4b0b      	ldr	r3, [pc, #44]	; (8006810 <HAL_RCC_ClockConfig+0x1bc>)
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	091b      	lsrs	r3, r3, #4
 80067e6:	f003 030f 	and.w	r3, r3, #15
 80067ea:	490a      	ldr	r1, [pc, #40]	; (8006814 <HAL_RCC_ClockConfig+0x1c0>)
 80067ec:	5ccb      	ldrb	r3, [r1, r3]
 80067ee:	fa22 f303 	lsr.w	r3, r2, r3
 80067f2:	4a09      	ldr	r2, [pc, #36]	; (8006818 <HAL_RCC_ClockConfig+0x1c4>)
 80067f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80067f6:	4b09      	ldr	r3, [pc, #36]	; (800681c <HAL_RCC_ClockConfig+0x1c8>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4618      	mov	r0, r3
 80067fc:	f7fc fa52 	bl	8002ca4 <HAL_InitTick>

  return HAL_OK;
 8006800:	2300      	movs	r3, #0
}
 8006802:	4618      	mov	r0, r3
 8006804:	3710      	adds	r7, #16
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}
 800680a:	bf00      	nop
 800680c:	40023c00 	.word	0x40023c00
 8006810:	40023800 	.word	0x40023800
 8006814:	0801bb60 	.word	0x0801bb60
 8006818:	20000004 	.word	0x20000004
 800681c:	20000008 	.word	0x20000008

08006820 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b08c      	sub	sp, #48	; 0x30
 8006824:	af00      	add	r7, sp, #0
 8006826:	60f8      	str	r0, [r7, #12]
 8006828:	60b9      	str	r1, [r7, #8]
 800682a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d129      	bne.n	8006886 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8006832:	2300      	movs	r3, #0
 8006834:	61bb      	str	r3, [r7, #24]
 8006836:	4b2b      	ldr	r3, [pc, #172]	; (80068e4 <HAL_RCC_MCOConfig+0xc4>)
 8006838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800683a:	4a2a      	ldr	r2, [pc, #168]	; (80068e4 <HAL_RCC_MCOConfig+0xc4>)
 800683c:	f043 0301 	orr.w	r3, r3, #1
 8006840:	6313      	str	r3, [r2, #48]	; 0x30
 8006842:	4b28      	ldr	r3, [pc, #160]	; (80068e4 <HAL_RCC_MCOConfig+0xc4>)
 8006844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006846:	f003 0301 	and.w	r3, r3, #1
 800684a:	61bb      	str	r3, [r7, #24]
 800684c:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800684e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006852:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006854:	2302      	movs	r3, #2
 8006856:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006858:	2303      	movs	r3, #3
 800685a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800685c:	2300      	movs	r3, #0
 800685e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8006860:	2300      	movs	r3, #0
 8006862:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8006864:	f107 031c 	add.w	r3, r7, #28
 8006868:	4619      	mov	r1, r3
 800686a:	481f      	ldr	r0, [pc, #124]	; (80068e8 <HAL_RCC_MCOConfig+0xc8>)
 800686c:	f7fd f9fa 	bl	8003c64 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8006870:	4b1c      	ldr	r3, [pc, #112]	; (80068e4 <HAL_RCC_MCOConfig+0xc4>)
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8006878:	68b9      	ldr	r1, [r7, #8]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	430b      	orrs	r3, r1
 800687e:	4919      	ldr	r1, [pc, #100]	; (80068e4 <HAL_RCC_MCOConfig+0xc4>)
 8006880:	4313      	orrs	r3, r2
 8006882:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8006884:	e029      	b.n	80068da <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8006886:	2300      	movs	r3, #0
 8006888:	617b      	str	r3, [r7, #20]
 800688a:	4b16      	ldr	r3, [pc, #88]	; (80068e4 <HAL_RCC_MCOConfig+0xc4>)
 800688c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800688e:	4a15      	ldr	r2, [pc, #84]	; (80068e4 <HAL_RCC_MCOConfig+0xc4>)
 8006890:	f043 0304 	orr.w	r3, r3, #4
 8006894:	6313      	str	r3, [r2, #48]	; 0x30
 8006896:	4b13      	ldr	r3, [pc, #76]	; (80068e4 <HAL_RCC_MCOConfig+0xc4>)
 8006898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800689a:	f003 0304 	and.w	r3, r3, #4
 800689e:	617b      	str	r3, [r7, #20]
 80068a0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80068a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80068a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068a8:	2302      	movs	r3, #2
 80068aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80068ac:	2303      	movs	r3, #3
 80068ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068b0:	2300      	movs	r3, #0
 80068b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80068b4:	2300      	movs	r3, #0
 80068b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80068b8:	f107 031c 	add.w	r3, r7, #28
 80068bc:	4619      	mov	r1, r3
 80068be:	480b      	ldr	r0, [pc, #44]	; (80068ec <HAL_RCC_MCOConfig+0xcc>)
 80068c0:	f7fd f9d0 	bl	8003c64 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 80068c4:	4b07      	ldr	r3, [pc, #28]	; (80068e4 <HAL_RCC_MCOConfig+0xc4>)
 80068c6:	689b      	ldr	r3, [r3, #8]
 80068c8:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	00d9      	lsls	r1, r3, #3
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	430b      	orrs	r3, r1
 80068d4:	4903      	ldr	r1, [pc, #12]	; (80068e4 <HAL_RCC_MCOConfig+0xc4>)
 80068d6:	4313      	orrs	r3, r2
 80068d8:	608b      	str	r3, [r1, #8]
}
 80068da:	bf00      	nop
 80068dc:	3730      	adds	r7, #48	; 0x30
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}
 80068e2:	bf00      	nop
 80068e4:	40023800 	.word	0x40023800
 80068e8:	40020000 	.word	0x40020000
 80068ec:	40020800 	.word	0x40020800

080068f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80068f0:	b5b0      	push	{r4, r5, r7, lr}
 80068f2:	b084      	sub	sp, #16
 80068f4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80068f6:	2100      	movs	r1, #0
 80068f8:	6079      	str	r1, [r7, #4]
 80068fa:	2100      	movs	r1, #0
 80068fc:	60f9      	str	r1, [r7, #12]
 80068fe:	2100      	movs	r1, #0
 8006900:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006902:	2100      	movs	r1, #0
 8006904:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006906:	4952      	ldr	r1, [pc, #328]	; (8006a50 <HAL_RCC_GetSysClockFreq+0x160>)
 8006908:	6889      	ldr	r1, [r1, #8]
 800690a:	f001 010c 	and.w	r1, r1, #12
 800690e:	2908      	cmp	r1, #8
 8006910:	d00d      	beq.n	800692e <HAL_RCC_GetSysClockFreq+0x3e>
 8006912:	2908      	cmp	r1, #8
 8006914:	f200 8094 	bhi.w	8006a40 <HAL_RCC_GetSysClockFreq+0x150>
 8006918:	2900      	cmp	r1, #0
 800691a:	d002      	beq.n	8006922 <HAL_RCC_GetSysClockFreq+0x32>
 800691c:	2904      	cmp	r1, #4
 800691e:	d003      	beq.n	8006928 <HAL_RCC_GetSysClockFreq+0x38>
 8006920:	e08e      	b.n	8006a40 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006922:	4b4c      	ldr	r3, [pc, #304]	; (8006a54 <HAL_RCC_GetSysClockFreq+0x164>)
 8006924:	60bb      	str	r3, [r7, #8]
       break;
 8006926:	e08e      	b.n	8006a46 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006928:	4b4b      	ldr	r3, [pc, #300]	; (8006a58 <HAL_RCC_GetSysClockFreq+0x168>)
 800692a:	60bb      	str	r3, [r7, #8]
      break;
 800692c:	e08b      	b.n	8006a46 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800692e:	4948      	ldr	r1, [pc, #288]	; (8006a50 <HAL_RCC_GetSysClockFreq+0x160>)
 8006930:	6849      	ldr	r1, [r1, #4]
 8006932:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8006936:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006938:	4945      	ldr	r1, [pc, #276]	; (8006a50 <HAL_RCC_GetSysClockFreq+0x160>)
 800693a:	6849      	ldr	r1, [r1, #4]
 800693c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8006940:	2900      	cmp	r1, #0
 8006942:	d024      	beq.n	800698e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006944:	4942      	ldr	r1, [pc, #264]	; (8006a50 <HAL_RCC_GetSysClockFreq+0x160>)
 8006946:	6849      	ldr	r1, [r1, #4]
 8006948:	0989      	lsrs	r1, r1, #6
 800694a:	4608      	mov	r0, r1
 800694c:	f04f 0100 	mov.w	r1, #0
 8006950:	f240 14ff 	movw	r4, #511	; 0x1ff
 8006954:	f04f 0500 	mov.w	r5, #0
 8006958:	ea00 0204 	and.w	r2, r0, r4
 800695c:	ea01 0305 	and.w	r3, r1, r5
 8006960:	493d      	ldr	r1, [pc, #244]	; (8006a58 <HAL_RCC_GetSysClockFreq+0x168>)
 8006962:	fb01 f003 	mul.w	r0, r1, r3
 8006966:	2100      	movs	r1, #0
 8006968:	fb01 f102 	mul.w	r1, r1, r2
 800696c:	1844      	adds	r4, r0, r1
 800696e:	493a      	ldr	r1, [pc, #232]	; (8006a58 <HAL_RCC_GetSysClockFreq+0x168>)
 8006970:	fba2 0101 	umull	r0, r1, r2, r1
 8006974:	1863      	adds	r3, r4, r1
 8006976:	4619      	mov	r1, r3
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	461a      	mov	r2, r3
 800697c:	f04f 0300 	mov.w	r3, #0
 8006980:	f7f9 fca6 	bl	80002d0 <__aeabi_uldivmod>
 8006984:	4602      	mov	r2, r0
 8006986:	460b      	mov	r3, r1
 8006988:	4613      	mov	r3, r2
 800698a:	60fb      	str	r3, [r7, #12]
 800698c:	e04a      	b.n	8006a24 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800698e:	4b30      	ldr	r3, [pc, #192]	; (8006a50 <HAL_RCC_GetSysClockFreq+0x160>)
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	099b      	lsrs	r3, r3, #6
 8006994:	461a      	mov	r2, r3
 8006996:	f04f 0300 	mov.w	r3, #0
 800699a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800699e:	f04f 0100 	mov.w	r1, #0
 80069a2:	ea02 0400 	and.w	r4, r2, r0
 80069a6:	ea03 0501 	and.w	r5, r3, r1
 80069aa:	4620      	mov	r0, r4
 80069ac:	4629      	mov	r1, r5
 80069ae:	f04f 0200 	mov.w	r2, #0
 80069b2:	f04f 0300 	mov.w	r3, #0
 80069b6:	014b      	lsls	r3, r1, #5
 80069b8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80069bc:	0142      	lsls	r2, r0, #5
 80069be:	4610      	mov	r0, r2
 80069c0:	4619      	mov	r1, r3
 80069c2:	1b00      	subs	r0, r0, r4
 80069c4:	eb61 0105 	sbc.w	r1, r1, r5
 80069c8:	f04f 0200 	mov.w	r2, #0
 80069cc:	f04f 0300 	mov.w	r3, #0
 80069d0:	018b      	lsls	r3, r1, #6
 80069d2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80069d6:	0182      	lsls	r2, r0, #6
 80069d8:	1a12      	subs	r2, r2, r0
 80069da:	eb63 0301 	sbc.w	r3, r3, r1
 80069de:	f04f 0000 	mov.w	r0, #0
 80069e2:	f04f 0100 	mov.w	r1, #0
 80069e6:	00d9      	lsls	r1, r3, #3
 80069e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80069ec:	00d0      	lsls	r0, r2, #3
 80069ee:	4602      	mov	r2, r0
 80069f0:	460b      	mov	r3, r1
 80069f2:	1912      	adds	r2, r2, r4
 80069f4:	eb45 0303 	adc.w	r3, r5, r3
 80069f8:	f04f 0000 	mov.w	r0, #0
 80069fc:	f04f 0100 	mov.w	r1, #0
 8006a00:	0299      	lsls	r1, r3, #10
 8006a02:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006a06:	0290      	lsls	r0, r2, #10
 8006a08:	4602      	mov	r2, r0
 8006a0a:	460b      	mov	r3, r1
 8006a0c:	4610      	mov	r0, r2
 8006a0e:	4619      	mov	r1, r3
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	461a      	mov	r2, r3
 8006a14:	f04f 0300 	mov.w	r3, #0
 8006a18:	f7f9 fc5a 	bl	80002d0 <__aeabi_uldivmod>
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	460b      	mov	r3, r1
 8006a20:	4613      	mov	r3, r2
 8006a22:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006a24:	4b0a      	ldr	r3, [pc, #40]	; (8006a50 <HAL_RCC_GetSysClockFreq+0x160>)
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	0c1b      	lsrs	r3, r3, #16
 8006a2a:	f003 0303 	and.w	r3, r3, #3
 8006a2e:	3301      	adds	r3, #1
 8006a30:	005b      	lsls	r3, r3, #1
 8006a32:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006a34:	68fa      	ldr	r2, [r7, #12]
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a3c:	60bb      	str	r3, [r7, #8]
      break;
 8006a3e:	e002      	b.n	8006a46 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006a40:	4b04      	ldr	r3, [pc, #16]	; (8006a54 <HAL_RCC_GetSysClockFreq+0x164>)
 8006a42:	60bb      	str	r3, [r7, #8]
      break;
 8006a44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006a46:	68bb      	ldr	r3, [r7, #8]
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	3710      	adds	r7, #16
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bdb0      	pop	{r4, r5, r7, pc}
 8006a50:	40023800 	.word	0x40023800
 8006a54:	00f42400 	.word	0x00f42400
 8006a58:	017d7840 	.word	0x017d7840

08006a5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a60:	4b03      	ldr	r3, [pc, #12]	; (8006a70 <HAL_RCC_GetHCLKFreq+0x14>)
 8006a62:	681b      	ldr	r3, [r3, #0]
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	46bd      	mov	sp, r7
 8006a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6c:	4770      	bx	lr
 8006a6e:	bf00      	nop
 8006a70:	20000004 	.word	0x20000004

08006a74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006a78:	f7ff fff0 	bl	8006a5c <HAL_RCC_GetHCLKFreq>
 8006a7c:	4602      	mov	r2, r0
 8006a7e:	4b05      	ldr	r3, [pc, #20]	; (8006a94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	0a9b      	lsrs	r3, r3, #10
 8006a84:	f003 0307 	and.w	r3, r3, #7
 8006a88:	4903      	ldr	r1, [pc, #12]	; (8006a98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a8a:	5ccb      	ldrb	r3, [r1, r3]
 8006a8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	bd80      	pop	{r7, pc}
 8006a94:	40023800 	.word	0x40023800
 8006a98:	0801bb70 	.word	0x0801bb70

08006a9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006aa0:	f7ff ffdc 	bl	8006a5c <HAL_RCC_GetHCLKFreq>
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	4b05      	ldr	r3, [pc, #20]	; (8006abc <HAL_RCC_GetPCLK2Freq+0x20>)
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	0b5b      	lsrs	r3, r3, #13
 8006aac:	f003 0307 	and.w	r3, r3, #7
 8006ab0:	4903      	ldr	r1, [pc, #12]	; (8006ac0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006ab2:	5ccb      	ldrb	r3, [r1, r3]
 8006ab4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	bd80      	pop	{r7, pc}
 8006abc:	40023800 	.word	0x40023800
 8006ac0:	0801bb70 	.word	0x0801bb70

08006ac4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b088      	sub	sp, #32
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006acc:	2300      	movs	r3, #0
 8006ace:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f003 0301 	and.w	r3, r3, #1
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d010      	beq.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8006ae8:	4b7a      	ldr	r3, [pc, #488]	; (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006aea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006aee:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	69db      	ldr	r3, [r3, #28]
 8006af6:	4977      	ldr	r1, [pc, #476]	; (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006af8:	4313      	orrs	r3, r2
 8006afa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	69db      	ldr	r3, [r3, #28]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d101      	bne.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 8006b06:	2301      	movs	r3, #1
 8006b08:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f003 0302 	and.w	r3, r3, #2
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d010      	beq.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8006b16:	4b6f      	ldr	r3, [pc, #444]	; (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006b18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b1c:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6a1b      	ldr	r3, [r3, #32]
 8006b24:	496b      	ldr	r1, [pc, #428]	; (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006b26:	4313      	orrs	r3, r2
 8006b28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6a1b      	ldr	r3, [r3, #32]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d101      	bne.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 8006b34:	2301      	movs	r3, #1
 8006b36:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d022      	beq.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 8006b44:	4b63      	ldr	r3, [pc, #396]	; (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006b46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b4a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b52:	4960      	ldr	r1, [pc, #384]	; (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006b54:	4313      	orrs	r3, r2
 8006b56:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d101      	bne.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 8006b62:	2301      	movs	r3, #1
 8006b64:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b6a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b6e:	d10c      	bne.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8006b70:	4b58      	ldr	r3, [pc, #352]	; (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006b72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b76:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	695b      	ldr	r3, [r3, #20]
 8006b7e:	3b01      	subs	r3, #1
 8006b80:	021b      	lsls	r3, r3, #8
 8006b82:	4954      	ldr	r1, [pc, #336]	; (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006b84:	4313      	orrs	r3, r2
 8006b86:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d022      	beq.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 8006b96:	4b4f      	ldr	r3, [pc, #316]	; (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006b98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b9c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ba4:	494b      	ldr	r1, [pc, #300]	; (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d101      	bne.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bbc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006bc0:	d10c      	bne.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8006bc2:	4b44      	ldr	r3, [pc, #272]	; (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006bc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bc8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	695b      	ldr	r3, [r3, #20]
 8006bd0:	3b01      	subs	r3, #1
 8006bd2:	021b      	lsls	r3, r3, #8
 8006bd4:	493f      	ldr	r1, [pc, #252]	; (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f003 0308 	and.w	r3, r3, #8
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	f000 808a 	beq.w	8006cfe <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006bea:	2300      	movs	r3, #0
 8006bec:	60fb      	str	r3, [r7, #12]
 8006bee:	4b39      	ldr	r3, [pc, #228]	; (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf2:	4a38      	ldr	r2, [pc, #224]	; (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006bf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bf8:	6413      	str	r3, [r2, #64]	; 0x40
 8006bfa:	4b36      	ldr	r3, [pc, #216]	; (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c02:	60fb      	str	r3, [r7, #12]
 8006c04:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006c06:	4b34      	ldr	r3, [pc, #208]	; (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a33      	ldr	r2, [pc, #204]	; (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8006c0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c10:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006c12:	f7fc f88b 	bl	8002d2c <HAL_GetTick>
 8006c16:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006c18:	e008      	b.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006c1a:	f7fc f887 	bl	8002d2c <HAL_GetTick>
 8006c1e:	4602      	mov	r2, r0
 8006c20:	69bb      	ldr	r3, [r7, #24]
 8006c22:	1ad3      	subs	r3, r2, r3
 8006c24:	2b02      	cmp	r3, #2
 8006c26:	d901      	bls.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 8006c28:	2303      	movs	r3, #3
 8006c2a:	e1d1      	b.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006c2c:	4b2a      	ldr	r3, [pc, #168]	; (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d0f0      	beq.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006c38:	4b26      	ldr	r3, [pc, #152]	; (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c40:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d02f      	beq.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c50:	697a      	ldr	r2, [r7, #20]
 8006c52:	429a      	cmp	r2, r3
 8006c54:	d028      	beq.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006c56:	4b1f      	ldr	r3, [pc, #124]	; (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c5e:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006c60:	4b1e      	ldr	r3, [pc, #120]	; (8006cdc <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8006c62:	2201      	movs	r2, #1
 8006c64:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006c66:	4b1d      	ldr	r3, [pc, #116]	; (8006cdc <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8006c68:	2200      	movs	r2, #0
 8006c6a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006c6c:	4a19      	ldr	r2, [pc, #100]	; (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006c72:	4b18      	ldr	r3, [pc, #96]	; (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c76:	f003 0301 	and.w	r3, r3, #1
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	d114      	bne.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006c7e:	f7fc f855 	bl	8002d2c <HAL_GetTick>
 8006c82:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c84:	e00a      	b.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c86:	f7fc f851 	bl	8002d2c <HAL_GetTick>
 8006c8a:	4602      	mov	r2, r0
 8006c8c:	69bb      	ldr	r3, [r7, #24]
 8006c8e:	1ad3      	subs	r3, r2, r3
 8006c90:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d901      	bls.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 8006c98:	2303      	movs	r3, #3
 8006c9a:	e199      	b.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c9c:	4b0d      	ldr	r3, [pc, #52]	; (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ca0:	f003 0302 	and.w	r3, r3, #2
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d0ee      	beq.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cb0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006cb4:	d114      	bne.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8006cb6:	4b07      	ldr	r3, [pc, #28]	; (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006cb8:	689b      	ldr	r3, [r3, #8]
 8006cba:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006cc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cca:	4902      	ldr	r1, [pc, #8]	; (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	608b      	str	r3, [r1, #8]
 8006cd0:	e00c      	b.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x228>
 8006cd2:	bf00      	nop
 8006cd4:	40023800 	.word	0x40023800
 8006cd8:	40007000 	.word	0x40007000
 8006cdc:	42470e40 	.word	0x42470e40
 8006ce0:	4b89      	ldr	r3, [pc, #548]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006ce2:	689b      	ldr	r3, [r3, #8]
 8006ce4:	4a88      	ldr	r2, [pc, #544]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006ce6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006cea:	6093      	str	r3, [r2, #8]
 8006cec:	4b86      	ldr	r3, [pc, #536]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006cee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006cf8:	4983      	ldr	r1, [pc, #524]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f003 0304 	and.w	r3, r3, #4
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d004      	beq.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8006d10:	4b7e      	ldr	r3, [pc, #504]	; (8006f0c <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8006d12:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f003 0310 	and.w	r3, r3, #16
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d00a      	beq.n	8006d36 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8006d20:	4b79      	ldr	r3, [pc, #484]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006d22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d26:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d2e:	4976      	ldr	r1, [pc, #472]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006d30:	4313      	orrs	r3, r2
 8006d32:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f003 0320 	and.w	r3, r3, #32
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d011      	beq.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006d42:	4b71      	ldr	r3, [pc, #452]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006d44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d48:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d50:	496d      	ldr	r1, [pc, #436]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006d52:	4313      	orrs	r3, r2
 8006d54:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d60:	d101      	bne.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 8006d62:	2301      	movs	r3, #1
 8006d64:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d00a      	beq.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8006d72:	4b65      	ldr	r3, [pc, #404]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006d74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d78:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d80:	4961      	ldr	r1, [pc, #388]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006d82:	4313      	orrs	r3, r2
 8006d84:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8006d88:	69fb      	ldr	r3, [r7, #28]
 8006d8a:	2b01      	cmp	r3, #1
 8006d8c:	d004      	beq.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	2b80      	cmp	r3, #128	; 0x80
 8006d94:	f040 80c6 	bne.w	8006f24 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006d98:	4b5d      	ldr	r3, [pc, #372]	; (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006d9e:	f7fb ffc5 	bl	8002d2c <HAL_GetTick>
 8006da2:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006da4:	e008      	b.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006da6:	f7fb ffc1 	bl	8002d2c <HAL_GetTick>
 8006daa:	4602      	mov	r2, r0
 8006dac:	69bb      	ldr	r3, [r7, #24]
 8006dae:	1ad3      	subs	r3, r2, r3
 8006db0:	2b02      	cmp	r3, #2
 8006db2:	d901      	bls.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006db4:	2303      	movs	r3, #3
 8006db6:	e10b      	b.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006db8:	4b53      	ldr	r3, [pc, #332]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d1f0      	bne.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8006dc4:	4a53      	ldr	r2, [pc, #332]	; (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dca:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f003 0301 	and.w	r3, r3, #1
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d003      	beq.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	69db      	ldr	r3, [r3, #28]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d023      	beq.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d003      	beq.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6a1b      	ldr	r3, [r3, #32]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d019      	beq.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d004      	beq.n	8006e0a <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006e08:	d00e      	beq.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d019      	beq.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d115      	bne.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0x386>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006e26:	d110      	bne.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	685a      	ldr	r2, [r3, #4]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	689b      	ldr	r3, [r3, #8]
 8006e30:	019b      	lsls	r3, r3, #6
 8006e32:	431a      	orrs	r2, r3
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	68db      	ldr	r3, [r3, #12]
 8006e38:	061b      	lsls	r3, r3, #24
 8006e3a:	431a      	orrs	r2, r3
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	691b      	ldr	r3, [r3, #16]
 8006e40:	071b      	lsls	r3, r3, #28
 8006e42:	4931      	ldr	r1, [pc, #196]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006e44:	4313      	orrs	r3, r2
 8006e46:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d003      	beq.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d009      	beq.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d026      	beq.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d122      	bne.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006e72:	4b25      	ldr	r3, [pc, #148]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006e74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e78:	0e1b      	lsrs	r3, r3, #24
 8006e7a:	f003 030f 	and.w	r3, r3, #15
 8006e7e:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	685a      	ldr	r2, [r3, #4]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	689b      	ldr	r3, [r3, #8]
 8006e88:	019b      	lsls	r3, r3, #6
 8006e8a:	431a      	orrs	r2, r3
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	061b      	lsls	r3, r3, #24
 8006e90:	431a      	orrs	r2, r3
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	691b      	ldr	r3, [r3, #16]
 8006e96:	071b      	lsls	r3, r3, #28
 8006e98:	491b      	ldr	r1, [pc, #108]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 8006ea0:	4b19      	ldr	r3, [pc, #100]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006ea2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ea6:	f023 021f 	bic.w	r2, r3, #31
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	699b      	ldr	r3, [r3, #24]
 8006eae:	3b01      	subs	r3, #1
 8006eb0:	4915      	ldr	r1, [pc, #84]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d010      	beq.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	685a      	ldr	r2, [r3, #4]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	019b      	lsls	r3, r3, #6
 8006ece:	431a      	orrs	r2, r3
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	68db      	ldr	r3, [r3, #12]
 8006ed4:	061b      	lsls	r3, r3, #24
 8006ed6:	431a      	orrs	r2, r3
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	691b      	ldr	r3, [r3, #16]
 8006edc:	071b      	lsls	r3, r3, #28
 8006ede:	490a      	ldr	r1, [pc, #40]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006ee6:	4b0a      	ldr	r3, [pc, #40]	; (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8006ee8:	2201      	movs	r2, #1
 8006eea:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006eec:	f7fb ff1e 	bl	8002d2c <HAL_GetTick>
 8006ef0:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006ef2:	e011      	b.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006ef4:	f7fb ff1a 	bl	8002d2c <HAL_GetTick>
 8006ef8:	4602      	mov	r2, r0
 8006efa:	69bb      	ldr	r3, [r7, #24]
 8006efc:	1ad3      	subs	r3, r2, r3
 8006efe:	2b02      	cmp	r3, #2
 8006f00:	d90a      	bls.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006f02:	2303      	movs	r3, #3
 8006f04:	e064      	b.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8006f06:	bf00      	nop
 8006f08:	40023800 	.word	0x40023800
 8006f0c:	424711e0 	.word	0x424711e0
 8006f10:	42470068 	.word	0x42470068
 8006f14:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006f18:	4b2f      	ldr	r3, [pc, #188]	; (8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d0e7      	beq.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d00a      	beq.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006f30:	4b29      	ldr	r3, [pc, #164]	; (8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006f32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f36:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f3e:	4926      	ldr	r1, [pc, #152]	; (8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006f40:	4313      	orrs	r3, r2
 8006f42:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d00a      	beq.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006f52:	4b21      	ldr	r3, [pc, #132]	; (8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006f54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f58:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f60:	491d      	ldr	r1, [pc, #116]	; (8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006f62:	4313      	orrs	r3, r2
 8006f64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d00a      	beq.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8006f74:	4b18      	ldr	r3, [pc, #96]	; (8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006f76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f7a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f82:	4915      	ldr	r1, [pc, #84]	; (8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006f84:	4313      	orrs	r3, r2
 8006f86:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d00a      	beq.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 8006f96:	4b10      	ldr	r3, [pc, #64]	; (8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006f98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f9c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa4:	490c      	ldr	r1, [pc, #48]	; (8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d00a      	beq.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006fb8:	4b07      	ldr	r3, [pc, #28]	; (8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006fba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006fbe:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fc6:	4904      	ldr	r1, [pc, #16]	; (8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8006fce:	2300      	movs	r3, #0
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3720      	adds	r7, #32
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}
 8006fd8:	40023800 	.word	0x40023800

08006fdc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b086      	sub	sp, #24
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d101      	bne.n	8006fee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006fea:	2301      	movs	r3, #1
 8006fec:	e270      	b.n	80074d0 <HAL_RCC_OscConfig+0x4f4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f003 0301 	and.w	r3, r3, #1
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d075      	beq.n	80070e6 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006ffa:	4ba3      	ldr	r3, [pc, #652]	; (8007288 <HAL_RCC_OscConfig+0x2ac>)
 8006ffc:	689b      	ldr	r3, [r3, #8]
 8006ffe:	f003 030c 	and.w	r3, r3, #12
 8007002:	2b04      	cmp	r3, #4
 8007004:	d00c      	beq.n	8007020 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007006:	4ba0      	ldr	r3, [pc, #640]	; (8007288 <HAL_RCC_OscConfig+0x2ac>)
 8007008:	689b      	ldr	r3, [r3, #8]
 800700a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800700e:	2b08      	cmp	r3, #8
 8007010:	d112      	bne.n	8007038 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007012:	4b9d      	ldr	r3, [pc, #628]	; (8007288 <HAL_RCC_OscConfig+0x2ac>)
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800701a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800701e:	d10b      	bne.n	8007038 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007020:	4b99      	ldr	r3, [pc, #612]	; (8007288 <HAL_RCC_OscConfig+0x2ac>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007028:	2b00      	cmp	r3, #0
 800702a:	d05b      	beq.n	80070e4 <HAL_RCC_OscConfig+0x108>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d157      	bne.n	80070e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007034:	2301      	movs	r3, #1
 8007036:	e24b      	b.n	80074d0 <HAL_RCC_OscConfig+0x4f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007040:	d106      	bne.n	8007050 <HAL_RCC_OscConfig+0x74>
 8007042:	4b91      	ldr	r3, [pc, #580]	; (8007288 <HAL_RCC_OscConfig+0x2ac>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a90      	ldr	r2, [pc, #576]	; (8007288 <HAL_RCC_OscConfig+0x2ac>)
 8007048:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800704c:	6013      	str	r3, [r2, #0]
 800704e:	e01d      	b.n	800708c <HAL_RCC_OscConfig+0xb0>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007058:	d10c      	bne.n	8007074 <HAL_RCC_OscConfig+0x98>
 800705a:	4b8b      	ldr	r3, [pc, #556]	; (8007288 <HAL_RCC_OscConfig+0x2ac>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a8a      	ldr	r2, [pc, #552]	; (8007288 <HAL_RCC_OscConfig+0x2ac>)
 8007060:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007064:	6013      	str	r3, [r2, #0]
 8007066:	4b88      	ldr	r3, [pc, #544]	; (8007288 <HAL_RCC_OscConfig+0x2ac>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a87      	ldr	r2, [pc, #540]	; (8007288 <HAL_RCC_OscConfig+0x2ac>)
 800706c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007070:	6013      	str	r3, [r2, #0]
 8007072:	e00b      	b.n	800708c <HAL_RCC_OscConfig+0xb0>
 8007074:	4b84      	ldr	r3, [pc, #528]	; (8007288 <HAL_RCC_OscConfig+0x2ac>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a83      	ldr	r2, [pc, #524]	; (8007288 <HAL_RCC_OscConfig+0x2ac>)
 800707a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800707e:	6013      	str	r3, [r2, #0]
 8007080:	4b81      	ldr	r3, [pc, #516]	; (8007288 <HAL_RCC_OscConfig+0x2ac>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a80      	ldr	r2, [pc, #512]	; (8007288 <HAL_RCC_OscConfig+0x2ac>)
 8007086:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800708a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d013      	beq.n	80070bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007094:	f7fb fe4a 	bl	8002d2c <HAL_GetTick>
 8007098:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800709a:	e008      	b.n	80070ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800709c:	f7fb fe46 	bl	8002d2c <HAL_GetTick>
 80070a0:	4602      	mov	r2, r0
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	1ad3      	subs	r3, r2, r3
 80070a6:	2b64      	cmp	r3, #100	; 0x64
 80070a8:	d901      	bls.n	80070ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80070aa:	2303      	movs	r3, #3
 80070ac:	e210      	b.n	80074d0 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070ae:	4b76      	ldr	r3, [pc, #472]	; (8007288 <HAL_RCC_OscConfig+0x2ac>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d0f0      	beq.n	800709c <HAL_RCC_OscConfig+0xc0>
 80070ba:	e014      	b.n	80070e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070bc:	f7fb fe36 	bl	8002d2c <HAL_GetTick>
 80070c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80070c2:	e008      	b.n	80070d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80070c4:	f7fb fe32 	bl	8002d2c <HAL_GetTick>
 80070c8:	4602      	mov	r2, r0
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	1ad3      	subs	r3, r2, r3
 80070ce:	2b64      	cmp	r3, #100	; 0x64
 80070d0:	d901      	bls.n	80070d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80070d2:	2303      	movs	r3, #3
 80070d4:	e1fc      	b.n	80074d0 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80070d6:	4b6c      	ldr	r3, [pc, #432]	; (8007288 <HAL_RCC_OscConfig+0x2ac>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d1f0      	bne.n	80070c4 <HAL_RCC_OscConfig+0xe8>
 80070e2:	e000      	b.n	80070e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f003 0302 	and.w	r3, r3, #2
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d063      	beq.n	80071ba <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80070f2:	4b65      	ldr	r3, [pc, #404]	; (8007288 <HAL_RCC_OscConfig+0x2ac>)
 80070f4:	689b      	ldr	r3, [r3, #8]
 80070f6:	f003 030c 	and.w	r3, r3, #12
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d00b      	beq.n	8007116 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80070fe:	4b62      	ldr	r3, [pc, #392]	; (8007288 <HAL_RCC_OscConfig+0x2ac>)
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007106:	2b08      	cmp	r3, #8
 8007108:	d11c      	bne.n	8007144 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800710a:	4b5f      	ldr	r3, [pc, #380]	; (8007288 <HAL_RCC_OscConfig+0x2ac>)
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007112:	2b00      	cmp	r3, #0
 8007114:	d116      	bne.n	8007144 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007116:	4b5c      	ldr	r3, [pc, #368]	; (8007288 <HAL_RCC_OscConfig+0x2ac>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f003 0302 	and.w	r3, r3, #2
 800711e:	2b00      	cmp	r3, #0
 8007120:	d005      	beq.n	800712e <HAL_RCC_OscConfig+0x152>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	68db      	ldr	r3, [r3, #12]
 8007126:	2b01      	cmp	r3, #1
 8007128:	d001      	beq.n	800712e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800712a:	2301      	movs	r3, #1
 800712c:	e1d0      	b.n	80074d0 <HAL_RCC_OscConfig+0x4f4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800712e:	4b56      	ldr	r3, [pc, #344]	; (8007288 <HAL_RCC_OscConfig+0x2ac>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	691b      	ldr	r3, [r3, #16]
 800713a:	00db      	lsls	r3, r3, #3
 800713c:	4952      	ldr	r1, [pc, #328]	; (8007288 <HAL_RCC_OscConfig+0x2ac>)
 800713e:	4313      	orrs	r3, r2
 8007140:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007142:	e03a      	b.n	80071ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	68db      	ldr	r3, [r3, #12]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d020      	beq.n	800718e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800714c:	4b4f      	ldr	r3, [pc, #316]	; (800728c <HAL_RCC_OscConfig+0x2b0>)
 800714e:	2201      	movs	r2, #1
 8007150:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007152:	f7fb fdeb 	bl	8002d2c <HAL_GetTick>
 8007156:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007158:	e008      	b.n	800716c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800715a:	f7fb fde7 	bl	8002d2c <HAL_GetTick>
 800715e:	4602      	mov	r2, r0
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	1ad3      	subs	r3, r2, r3
 8007164:	2b02      	cmp	r3, #2
 8007166:	d901      	bls.n	800716c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007168:	2303      	movs	r3, #3
 800716a:	e1b1      	b.n	80074d0 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800716c:	4b46      	ldr	r3, [pc, #280]	; (8007288 <HAL_RCC_OscConfig+0x2ac>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f003 0302 	and.w	r3, r3, #2
 8007174:	2b00      	cmp	r3, #0
 8007176:	d0f0      	beq.n	800715a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007178:	4b43      	ldr	r3, [pc, #268]	; (8007288 <HAL_RCC_OscConfig+0x2ac>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	691b      	ldr	r3, [r3, #16]
 8007184:	00db      	lsls	r3, r3, #3
 8007186:	4940      	ldr	r1, [pc, #256]	; (8007288 <HAL_RCC_OscConfig+0x2ac>)
 8007188:	4313      	orrs	r3, r2
 800718a:	600b      	str	r3, [r1, #0]
 800718c:	e015      	b.n	80071ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800718e:	4b3f      	ldr	r3, [pc, #252]	; (800728c <HAL_RCC_OscConfig+0x2b0>)
 8007190:	2200      	movs	r2, #0
 8007192:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007194:	f7fb fdca 	bl	8002d2c <HAL_GetTick>
 8007198:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800719a:	e008      	b.n	80071ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800719c:	f7fb fdc6 	bl	8002d2c <HAL_GetTick>
 80071a0:	4602      	mov	r2, r0
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	1ad3      	subs	r3, r2, r3
 80071a6:	2b02      	cmp	r3, #2
 80071a8:	d901      	bls.n	80071ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80071aa:	2303      	movs	r3, #3
 80071ac:	e190      	b.n	80074d0 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80071ae:	4b36      	ldr	r3, [pc, #216]	; (8007288 <HAL_RCC_OscConfig+0x2ac>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f003 0302 	and.w	r3, r3, #2
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d1f0      	bne.n	800719c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f003 0308 	and.w	r3, r3, #8
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d030      	beq.n	8007228 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	695b      	ldr	r3, [r3, #20]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d016      	beq.n	80071fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80071ce:	4b30      	ldr	r3, [pc, #192]	; (8007290 <HAL_RCC_OscConfig+0x2b4>)
 80071d0:	2201      	movs	r2, #1
 80071d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071d4:	f7fb fdaa 	bl	8002d2c <HAL_GetTick>
 80071d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80071da:	e008      	b.n	80071ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80071dc:	f7fb fda6 	bl	8002d2c <HAL_GetTick>
 80071e0:	4602      	mov	r2, r0
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	1ad3      	subs	r3, r2, r3
 80071e6:	2b02      	cmp	r3, #2
 80071e8:	d901      	bls.n	80071ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80071ea:	2303      	movs	r3, #3
 80071ec:	e170      	b.n	80074d0 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80071ee:	4b26      	ldr	r3, [pc, #152]	; (8007288 <HAL_RCC_OscConfig+0x2ac>)
 80071f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071f2:	f003 0302 	and.w	r3, r3, #2
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d0f0      	beq.n	80071dc <HAL_RCC_OscConfig+0x200>
 80071fa:	e015      	b.n	8007228 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80071fc:	4b24      	ldr	r3, [pc, #144]	; (8007290 <HAL_RCC_OscConfig+0x2b4>)
 80071fe:	2200      	movs	r2, #0
 8007200:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007202:	f7fb fd93 	bl	8002d2c <HAL_GetTick>
 8007206:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007208:	e008      	b.n	800721c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800720a:	f7fb fd8f 	bl	8002d2c <HAL_GetTick>
 800720e:	4602      	mov	r2, r0
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	1ad3      	subs	r3, r2, r3
 8007214:	2b02      	cmp	r3, #2
 8007216:	d901      	bls.n	800721c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007218:	2303      	movs	r3, #3
 800721a:	e159      	b.n	80074d0 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800721c:	4b1a      	ldr	r3, [pc, #104]	; (8007288 <HAL_RCC_OscConfig+0x2ac>)
 800721e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007220:	f003 0302 	and.w	r3, r3, #2
 8007224:	2b00      	cmp	r3, #0
 8007226:	d1f0      	bne.n	800720a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f003 0304 	and.w	r3, r3, #4
 8007230:	2b00      	cmp	r3, #0
 8007232:	f000 80a0 	beq.w	8007376 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007236:	2300      	movs	r3, #0
 8007238:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800723a:	4b13      	ldr	r3, [pc, #76]	; (8007288 <HAL_RCC_OscConfig+0x2ac>)
 800723c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800723e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007242:	2b00      	cmp	r3, #0
 8007244:	d10f      	bne.n	8007266 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007246:	2300      	movs	r3, #0
 8007248:	60bb      	str	r3, [r7, #8]
 800724a:	4b0f      	ldr	r3, [pc, #60]	; (8007288 <HAL_RCC_OscConfig+0x2ac>)
 800724c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800724e:	4a0e      	ldr	r2, [pc, #56]	; (8007288 <HAL_RCC_OscConfig+0x2ac>)
 8007250:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007254:	6413      	str	r3, [r2, #64]	; 0x40
 8007256:	4b0c      	ldr	r3, [pc, #48]	; (8007288 <HAL_RCC_OscConfig+0x2ac>)
 8007258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800725a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800725e:	60bb      	str	r3, [r7, #8]
 8007260:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007262:	2301      	movs	r3, #1
 8007264:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007266:	4b0b      	ldr	r3, [pc, #44]	; (8007294 <HAL_RCC_OscConfig+0x2b8>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800726e:	2b00      	cmp	r3, #0
 8007270:	d121      	bne.n	80072b6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007272:	4b08      	ldr	r3, [pc, #32]	; (8007294 <HAL_RCC_OscConfig+0x2b8>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a07      	ldr	r2, [pc, #28]	; (8007294 <HAL_RCC_OscConfig+0x2b8>)
 8007278:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800727c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800727e:	f7fb fd55 	bl	8002d2c <HAL_GetTick>
 8007282:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007284:	e011      	b.n	80072aa <HAL_RCC_OscConfig+0x2ce>
 8007286:	bf00      	nop
 8007288:	40023800 	.word	0x40023800
 800728c:	42470000 	.word	0x42470000
 8007290:	42470e80 	.word	0x42470e80
 8007294:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007298:	f7fb fd48 	bl	8002d2c <HAL_GetTick>
 800729c:	4602      	mov	r2, r0
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	1ad3      	subs	r3, r2, r3
 80072a2:	2b02      	cmp	r3, #2
 80072a4:	d901      	bls.n	80072aa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80072a6:	2303      	movs	r3, #3
 80072a8:	e112      	b.n	80074d0 <HAL_RCC_OscConfig+0x4f4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072aa:	4b8b      	ldr	r3, [pc, #556]	; (80074d8 <HAL_RCC_OscConfig+0x4fc>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d0f0      	beq.n	8007298 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	689b      	ldr	r3, [r3, #8]
 80072ba:	2b01      	cmp	r3, #1
 80072bc:	d106      	bne.n	80072cc <HAL_RCC_OscConfig+0x2f0>
 80072be:	4b87      	ldr	r3, [pc, #540]	; (80074dc <HAL_RCC_OscConfig+0x500>)
 80072c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072c2:	4a86      	ldr	r2, [pc, #536]	; (80074dc <HAL_RCC_OscConfig+0x500>)
 80072c4:	f043 0301 	orr.w	r3, r3, #1
 80072c8:	6713      	str	r3, [r2, #112]	; 0x70
 80072ca:	e01c      	b.n	8007306 <HAL_RCC_OscConfig+0x32a>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	689b      	ldr	r3, [r3, #8]
 80072d0:	2b05      	cmp	r3, #5
 80072d2:	d10c      	bne.n	80072ee <HAL_RCC_OscConfig+0x312>
 80072d4:	4b81      	ldr	r3, [pc, #516]	; (80074dc <HAL_RCC_OscConfig+0x500>)
 80072d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072d8:	4a80      	ldr	r2, [pc, #512]	; (80074dc <HAL_RCC_OscConfig+0x500>)
 80072da:	f043 0304 	orr.w	r3, r3, #4
 80072de:	6713      	str	r3, [r2, #112]	; 0x70
 80072e0:	4b7e      	ldr	r3, [pc, #504]	; (80074dc <HAL_RCC_OscConfig+0x500>)
 80072e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072e4:	4a7d      	ldr	r2, [pc, #500]	; (80074dc <HAL_RCC_OscConfig+0x500>)
 80072e6:	f043 0301 	orr.w	r3, r3, #1
 80072ea:	6713      	str	r3, [r2, #112]	; 0x70
 80072ec:	e00b      	b.n	8007306 <HAL_RCC_OscConfig+0x32a>
 80072ee:	4b7b      	ldr	r3, [pc, #492]	; (80074dc <HAL_RCC_OscConfig+0x500>)
 80072f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072f2:	4a7a      	ldr	r2, [pc, #488]	; (80074dc <HAL_RCC_OscConfig+0x500>)
 80072f4:	f023 0301 	bic.w	r3, r3, #1
 80072f8:	6713      	str	r3, [r2, #112]	; 0x70
 80072fa:	4b78      	ldr	r3, [pc, #480]	; (80074dc <HAL_RCC_OscConfig+0x500>)
 80072fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072fe:	4a77      	ldr	r2, [pc, #476]	; (80074dc <HAL_RCC_OscConfig+0x500>)
 8007300:	f023 0304 	bic.w	r3, r3, #4
 8007304:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	689b      	ldr	r3, [r3, #8]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d015      	beq.n	800733a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800730e:	f7fb fd0d 	bl	8002d2c <HAL_GetTick>
 8007312:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007314:	e00a      	b.n	800732c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007316:	f7fb fd09 	bl	8002d2c <HAL_GetTick>
 800731a:	4602      	mov	r2, r0
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	1ad3      	subs	r3, r2, r3
 8007320:	f241 3288 	movw	r2, #5000	; 0x1388
 8007324:	4293      	cmp	r3, r2
 8007326:	d901      	bls.n	800732c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007328:	2303      	movs	r3, #3
 800732a:	e0d1      	b.n	80074d0 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800732c:	4b6b      	ldr	r3, [pc, #428]	; (80074dc <HAL_RCC_OscConfig+0x500>)
 800732e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007330:	f003 0302 	and.w	r3, r3, #2
 8007334:	2b00      	cmp	r3, #0
 8007336:	d0ee      	beq.n	8007316 <HAL_RCC_OscConfig+0x33a>
 8007338:	e014      	b.n	8007364 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800733a:	f7fb fcf7 	bl	8002d2c <HAL_GetTick>
 800733e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007340:	e00a      	b.n	8007358 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007342:	f7fb fcf3 	bl	8002d2c <HAL_GetTick>
 8007346:	4602      	mov	r2, r0
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	1ad3      	subs	r3, r2, r3
 800734c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007350:	4293      	cmp	r3, r2
 8007352:	d901      	bls.n	8007358 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007354:	2303      	movs	r3, #3
 8007356:	e0bb      	b.n	80074d0 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007358:	4b60      	ldr	r3, [pc, #384]	; (80074dc <HAL_RCC_OscConfig+0x500>)
 800735a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800735c:	f003 0302 	and.w	r3, r3, #2
 8007360:	2b00      	cmp	r3, #0
 8007362:	d1ee      	bne.n	8007342 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007364:	7dfb      	ldrb	r3, [r7, #23]
 8007366:	2b01      	cmp	r3, #1
 8007368:	d105      	bne.n	8007376 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800736a:	4b5c      	ldr	r3, [pc, #368]	; (80074dc <HAL_RCC_OscConfig+0x500>)
 800736c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800736e:	4a5b      	ldr	r2, [pc, #364]	; (80074dc <HAL_RCC_OscConfig+0x500>)
 8007370:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007374:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	699b      	ldr	r3, [r3, #24]
 800737a:	2b00      	cmp	r3, #0
 800737c:	f000 80a7 	beq.w	80074ce <HAL_RCC_OscConfig+0x4f2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007380:	4b56      	ldr	r3, [pc, #344]	; (80074dc <HAL_RCC_OscConfig+0x500>)
 8007382:	689b      	ldr	r3, [r3, #8]
 8007384:	f003 030c 	and.w	r3, r3, #12
 8007388:	2b08      	cmp	r3, #8
 800738a:	d060      	beq.n	800744e <HAL_RCC_OscConfig+0x472>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	699b      	ldr	r3, [r3, #24]
 8007390:	2b02      	cmp	r3, #2
 8007392:	d145      	bne.n	8007420 <HAL_RCC_OscConfig+0x444>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007394:	4b52      	ldr	r3, [pc, #328]	; (80074e0 <HAL_RCC_OscConfig+0x504>)
 8007396:	2200      	movs	r2, #0
 8007398:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800739a:	f7fb fcc7 	bl	8002d2c <HAL_GetTick>
 800739e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073a0:	e008      	b.n	80073b4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80073a2:	f7fb fcc3 	bl	8002d2c <HAL_GetTick>
 80073a6:	4602      	mov	r2, r0
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	1ad3      	subs	r3, r2, r3
 80073ac:	2b02      	cmp	r3, #2
 80073ae:	d901      	bls.n	80073b4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80073b0:	2303      	movs	r3, #3
 80073b2:	e08d      	b.n	80074d0 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073b4:	4b49      	ldr	r3, [pc, #292]	; (80074dc <HAL_RCC_OscConfig+0x500>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d1f0      	bne.n	80073a2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	69da      	ldr	r2, [r3, #28]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6a1b      	ldr	r3, [r3, #32]
 80073c8:	431a      	orrs	r2, r3
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ce:	019b      	lsls	r3, r3, #6
 80073d0:	431a      	orrs	r2, r3
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073d6:	085b      	lsrs	r3, r3, #1
 80073d8:	3b01      	subs	r3, #1
 80073da:	041b      	lsls	r3, r3, #16
 80073dc:	431a      	orrs	r2, r3
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073e2:	061b      	lsls	r3, r3, #24
 80073e4:	431a      	orrs	r2, r3
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ea:	071b      	lsls	r3, r3, #28
 80073ec:	493b      	ldr	r1, [pc, #236]	; (80074dc <HAL_RCC_OscConfig+0x500>)
 80073ee:	4313      	orrs	r3, r2
 80073f0:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80073f2:	4b3b      	ldr	r3, [pc, #236]	; (80074e0 <HAL_RCC_OscConfig+0x504>)
 80073f4:	2201      	movs	r2, #1
 80073f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073f8:	f7fb fc98 	bl	8002d2c <HAL_GetTick>
 80073fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80073fe:	e008      	b.n	8007412 <HAL_RCC_OscConfig+0x436>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007400:	f7fb fc94 	bl	8002d2c <HAL_GetTick>
 8007404:	4602      	mov	r2, r0
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	1ad3      	subs	r3, r2, r3
 800740a:	2b02      	cmp	r3, #2
 800740c:	d901      	bls.n	8007412 <HAL_RCC_OscConfig+0x436>
          {
            return HAL_TIMEOUT;
 800740e:	2303      	movs	r3, #3
 8007410:	e05e      	b.n	80074d0 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007412:	4b32      	ldr	r3, [pc, #200]	; (80074dc <HAL_RCC_OscConfig+0x500>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800741a:	2b00      	cmp	r3, #0
 800741c:	d0f0      	beq.n	8007400 <HAL_RCC_OscConfig+0x424>
 800741e:	e056      	b.n	80074ce <HAL_RCC_OscConfig+0x4f2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007420:	4b2f      	ldr	r3, [pc, #188]	; (80074e0 <HAL_RCC_OscConfig+0x504>)
 8007422:	2200      	movs	r2, #0
 8007424:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007426:	f7fb fc81 	bl	8002d2c <HAL_GetTick>
 800742a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800742c:	e008      	b.n	8007440 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800742e:	f7fb fc7d 	bl	8002d2c <HAL_GetTick>
 8007432:	4602      	mov	r2, r0
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	1ad3      	subs	r3, r2, r3
 8007438:	2b02      	cmp	r3, #2
 800743a:	d901      	bls.n	8007440 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800743c:	2303      	movs	r3, #3
 800743e:	e047      	b.n	80074d0 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007440:	4b26      	ldr	r3, [pc, #152]	; (80074dc <HAL_RCC_OscConfig+0x500>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007448:	2b00      	cmp	r3, #0
 800744a:	d1f0      	bne.n	800742e <HAL_RCC_OscConfig+0x452>
 800744c:	e03f      	b.n	80074ce <HAL_RCC_OscConfig+0x4f2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	699b      	ldr	r3, [r3, #24]
 8007452:	2b01      	cmp	r3, #1
 8007454:	d101      	bne.n	800745a <HAL_RCC_OscConfig+0x47e>
      {
        return HAL_ERROR;
 8007456:	2301      	movs	r3, #1
 8007458:	e03a      	b.n	80074d0 <HAL_RCC_OscConfig+0x4f4>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800745a:	4b20      	ldr	r3, [pc, #128]	; (80074dc <HAL_RCC_OscConfig+0x500>)
 800745c:	685b      	ldr	r3, [r3, #4]
 800745e:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	699b      	ldr	r3, [r3, #24]
 8007464:	2b01      	cmp	r3, #1
 8007466:	d030      	beq.n	80074ca <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007472:	429a      	cmp	r2, r3
 8007474:	d129      	bne.n	80074ca <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007480:	429a      	cmp	r2, r3
 8007482:	d122      	bne.n	80074ca <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007484:	68fa      	ldr	r2, [r7, #12]
 8007486:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800748a:	4013      	ands	r3, r2
 800748c:	687a      	ldr	r2, [r7, #4]
 800748e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007490:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007492:	4293      	cmp	r3, r2
 8007494:	d119      	bne.n	80074ca <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074a0:	085b      	lsrs	r3, r3, #1
 80074a2:	3b01      	subs	r3, #1
 80074a4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80074a6:	429a      	cmp	r2, r3
 80074a8:	d10f      	bne.n	80074ca <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074b4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d107      	bne.n	80074ca <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074c4:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80074c6:	429a      	cmp	r2, r3
 80074c8:	d001      	beq.n	80074ce <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80074ca:	2301      	movs	r3, #1
 80074cc:	e000      	b.n	80074d0 <HAL_RCC_OscConfig+0x4f4>
        }
      }
    }
  }
  return HAL_OK;
 80074ce:	2300      	movs	r3, #0
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3718      	adds	r7, #24
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}
 80074d8:	40007000 	.word	0x40007000
 80074dc:	40023800 	.word	0x40023800
 80074e0:	42470060 	.word	0x42470060

080074e4 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b084      	sub	sp, #16
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	60f8      	str	r0, [r7, #12]
 80074ec:	60b9      	str	r1, [r7, #8]
 80074ee:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d101      	bne.n	80074fa <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 80074f6:	2301      	movs	r3, #1
 80074f8:	e034      	b.n	8007564 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8007500:	b2db      	uxtb	r3, r3
 8007502:	2b00      	cmp	r3, #0
 8007504:	d106      	bne.n	8007514 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2200      	movs	r2, #0
 800750a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800750e:	68f8      	ldr	r0, [r7, #12]
 8007510:	f7f9 fafa 	bl	8000b08 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681a      	ldr	r2, [r3, #0]
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	3308      	adds	r3, #8
 800751c:	4619      	mov	r1, r3
 800751e:	4610      	mov	r0, r2
 8007520:	f001 f8be 	bl	80086a0 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	6818      	ldr	r0, [r3, #0]
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	689b      	ldr	r3, [r3, #8]
 800752c:	461a      	mov	r2, r3
 800752e:	68b9      	ldr	r1, [r7, #8]
 8007530:	f001 f926 	bl	8008780 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	6858      	ldr	r0, [r3, #4]
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	689a      	ldr	r2, [r3, #8]
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007540:	6879      	ldr	r1, [r7, #4]
 8007542:	f001 f971 	bl	8008828 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	68fa      	ldr	r2, [r7, #12]
 800754c:	6892      	ldr	r2, [r2, #8]
 800754e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	68fa      	ldr	r2, [r7, #12]
 8007558:	6892      	ldr	r2, [r2, #8]
 800755a:	f041 0101 	orr.w	r1, r1, #1
 800755e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8007562:	2300      	movs	r3, #0
}
 8007564:	4618      	mov	r0, r3
 8007566:	3710      	adds	r7, #16
 8007568:	46bd      	mov	sp, r7
 800756a:	bd80      	pop	{r7, pc}

0800756c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b082      	sub	sp, #8
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d101      	bne.n	800757e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800757a:	2301      	movs	r3, #1
 800757c:	e041      	b.n	8007602 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007584:	b2db      	uxtb	r3, r3
 8007586:	2b00      	cmp	r3, #0
 8007588:	d106      	bne.n	8007598 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2200      	movs	r2, #0
 800758e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f7fa fd16 	bl	8001fc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2202      	movs	r2, #2
 800759c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681a      	ldr	r2, [r3, #0]
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	3304      	adds	r3, #4
 80075a8:	4619      	mov	r1, r3
 80075aa:	4610      	mov	r0, r2
 80075ac:	f000 f8d8 	bl	8007760 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2201      	movs	r2, #1
 80075b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2201      	movs	r2, #1
 80075bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2201      	movs	r2, #1
 80075c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2201      	movs	r2, #1
 80075cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2201      	movs	r2, #1
 80075d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2201      	movs	r2, #1
 80075dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2201      	movs	r2, #1
 80075e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2201      	movs	r2, #1
 80075ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2201      	movs	r2, #1
 80075f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2201      	movs	r2, #1
 80075fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007600:	2300      	movs	r3, #0
}
 8007602:	4618      	mov	r0, r3
 8007604:	3708      	adds	r7, #8
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}
	...

0800760c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800760c:	b480      	push	{r7}
 800760e:	b085      	sub	sp, #20
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800761a:	b2db      	uxtb	r3, r3
 800761c:	2b01      	cmp	r3, #1
 800761e:	d001      	beq.n	8007624 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007620:	2301      	movs	r3, #1
 8007622:	e046      	b.n	80076b2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2202      	movs	r2, #2
 8007628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a23      	ldr	r2, [pc, #140]	; (80076c0 <HAL_TIM_Base_Start+0xb4>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d022      	beq.n	800767c <HAL_TIM_Base_Start+0x70>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800763e:	d01d      	beq.n	800767c <HAL_TIM_Base_Start+0x70>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a1f      	ldr	r2, [pc, #124]	; (80076c4 <HAL_TIM_Base_Start+0xb8>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d018      	beq.n	800767c <HAL_TIM_Base_Start+0x70>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a1e      	ldr	r2, [pc, #120]	; (80076c8 <HAL_TIM_Base_Start+0xbc>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d013      	beq.n	800767c <HAL_TIM_Base_Start+0x70>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a1c      	ldr	r2, [pc, #112]	; (80076cc <HAL_TIM_Base_Start+0xc0>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d00e      	beq.n	800767c <HAL_TIM_Base_Start+0x70>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4a1b      	ldr	r2, [pc, #108]	; (80076d0 <HAL_TIM_Base_Start+0xc4>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d009      	beq.n	800767c <HAL_TIM_Base_Start+0x70>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4a19      	ldr	r2, [pc, #100]	; (80076d4 <HAL_TIM_Base_Start+0xc8>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d004      	beq.n	800767c <HAL_TIM_Base_Start+0x70>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4a18      	ldr	r2, [pc, #96]	; (80076d8 <HAL_TIM_Base_Start+0xcc>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d111      	bne.n	80076a0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	689b      	ldr	r3, [r3, #8]
 8007682:	f003 0307 	and.w	r3, r3, #7
 8007686:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2b06      	cmp	r3, #6
 800768c:	d010      	beq.n	80076b0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	681a      	ldr	r2, [r3, #0]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f042 0201 	orr.w	r2, r2, #1
 800769c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800769e:	e007      	b.n	80076b0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	681a      	ldr	r2, [r3, #0]
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f042 0201 	orr.w	r2, r2, #1
 80076ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80076b0:	2300      	movs	r3, #0
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3714      	adds	r7, #20
 80076b6:	46bd      	mov	sp, r7
 80076b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076bc:	4770      	bx	lr
 80076be:	bf00      	nop
 80076c0:	40010000 	.word	0x40010000
 80076c4:	40000400 	.word	0x40000400
 80076c8:	40000800 	.word	0x40000800
 80076cc:	40000c00 	.word	0x40000c00
 80076d0:	40010400 	.word	0x40010400
 80076d4:	40014000 	.word	0x40014000
 80076d8:	40001800 	.word	0x40001800

080076dc <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b082      	sub	sp, #8
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
 80076e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076ec:	2b01      	cmp	r3, #1
 80076ee:	d101      	bne.n	80076f4 <HAL_TIM_SlaveConfigSynchro+0x18>
 80076f0:	2302      	movs	r3, #2
 80076f2:	e031      	b.n	8007758 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2201      	movs	r2, #1
 80076f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2202      	movs	r2, #2
 8007700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8007704:	6839      	ldr	r1, [r7, #0]
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f000 f8ca 	bl	80078a0 <TIM_SlaveTimer_SetConfig>
 800770c:	4603      	mov	r3, r0
 800770e:	2b00      	cmp	r3, #0
 8007710:	d009      	beq.n	8007726 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2201      	movs	r2, #1
 8007716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2200      	movs	r2, #0
 800771e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8007722:	2301      	movs	r3, #1
 8007724:	e018      	b.n	8007758 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	68da      	ldr	r2, [r3, #12]
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007734:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	68da      	ldr	r2, [r3, #12]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007744:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2201      	movs	r2, #1
 800774a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2200      	movs	r2, #0
 8007752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007756:	2300      	movs	r3, #0
}
 8007758:	4618      	mov	r0, r3
 800775a:	3708      	adds	r7, #8
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}

08007760 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007760:	b480      	push	{r7}
 8007762:	b085      	sub	sp, #20
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	4a40      	ldr	r2, [pc, #256]	; (8007874 <TIM_Base_SetConfig+0x114>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d013      	beq.n	80077a0 <TIM_Base_SetConfig+0x40>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800777e:	d00f      	beq.n	80077a0 <TIM_Base_SetConfig+0x40>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	4a3d      	ldr	r2, [pc, #244]	; (8007878 <TIM_Base_SetConfig+0x118>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d00b      	beq.n	80077a0 <TIM_Base_SetConfig+0x40>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	4a3c      	ldr	r2, [pc, #240]	; (800787c <TIM_Base_SetConfig+0x11c>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d007      	beq.n	80077a0 <TIM_Base_SetConfig+0x40>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	4a3b      	ldr	r2, [pc, #236]	; (8007880 <TIM_Base_SetConfig+0x120>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d003      	beq.n	80077a0 <TIM_Base_SetConfig+0x40>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	4a3a      	ldr	r2, [pc, #232]	; (8007884 <TIM_Base_SetConfig+0x124>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d108      	bne.n	80077b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	68fa      	ldr	r2, [r7, #12]
 80077ae:	4313      	orrs	r3, r2
 80077b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	4a2f      	ldr	r2, [pc, #188]	; (8007874 <TIM_Base_SetConfig+0x114>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d02b      	beq.n	8007812 <TIM_Base_SetConfig+0xb2>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077c0:	d027      	beq.n	8007812 <TIM_Base_SetConfig+0xb2>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	4a2c      	ldr	r2, [pc, #176]	; (8007878 <TIM_Base_SetConfig+0x118>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d023      	beq.n	8007812 <TIM_Base_SetConfig+0xb2>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	4a2b      	ldr	r2, [pc, #172]	; (800787c <TIM_Base_SetConfig+0x11c>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d01f      	beq.n	8007812 <TIM_Base_SetConfig+0xb2>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	4a2a      	ldr	r2, [pc, #168]	; (8007880 <TIM_Base_SetConfig+0x120>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d01b      	beq.n	8007812 <TIM_Base_SetConfig+0xb2>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	4a29      	ldr	r2, [pc, #164]	; (8007884 <TIM_Base_SetConfig+0x124>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d017      	beq.n	8007812 <TIM_Base_SetConfig+0xb2>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	4a28      	ldr	r2, [pc, #160]	; (8007888 <TIM_Base_SetConfig+0x128>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d013      	beq.n	8007812 <TIM_Base_SetConfig+0xb2>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	4a27      	ldr	r2, [pc, #156]	; (800788c <TIM_Base_SetConfig+0x12c>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d00f      	beq.n	8007812 <TIM_Base_SetConfig+0xb2>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	4a26      	ldr	r2, [pc, #152]	; (8007890 <TIM_Base_SetConfig+0x130>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d00b      	beq.n	8007812 <TIM_Base_SetConfig+0xb2>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	4a25      	ldr	r2, [pc, #148]	; (8007894 <TIM_Base_SetConfig+0x134>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d007      	beq.n	8007812 <TIM_Base_SetConfig+0xb2>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	4a24      	ldr	r2, [pc, #144]	; (8007898 <TIM_Base_SetConfig+0x138>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d003      	beq.n	8007812 <TIM_Base_SetConfig+0xb2>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	4a23      	ldr	r2, [pc, #140]	; (800789c <TIM_Base_SetConfig+0x13c>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d108      	bne.n	8007824 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007818:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	68db      	ldr	r3, [r3, #12]
 800781e:	68fa      	ldr	r2, [r7, #12]
 8007820:	4313      	orrs	r3, r2
 8007822:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	695b      	ldr	r3, [r3, #20]
 800782e:	4313      	orrs	r3, r2
 8007830:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	68fa      	ldr	r2, [r7, #12]
 8007836:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	689a      	ldr	r2, [r3, #8]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	681a      	ldr	r2, [r3, #0]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	4a0a      	ldr	r2, [pc, #40]	; (8007874 <TIM_Base_SetConfig+0x114>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d003      	beq.n	8007858 <TIM_Base_SetConfig+0xf8>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	4a0c      	ldr	r2, [pc, #48]	; (8007884 <TIM_Base_SetConfig+0x124>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d103      	bne.n	8007860 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	691a      	ldr	r2, [r3, #16]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2201      	movs	r2, #1
 8007864:	615a      	str	r2, [r3, #20]
}
 8007866:	bf00      	nop
 8007868:	3714      	adds	r7, #20
 800786a:	46bd      	mov	sp, r7
 800786c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007870:	4770      	bx	lr
 8007872:	bf00      	nop
 8007874:	40010000 	.word	0x40010000
 8007878:	40000400 	.word	0x40000400
 800787c:	40000800 	.word	0x40000800
 8007880:	40000c00 	.word	0x40000c00
 8007884:	40010400 	.word	0x40010400
 8007888:	40014000 	.word	0x40014000
 800788c:	40014400 	.word	0x40014400
 8007890:	40014800 	.word	0x40014800
 8007894:	40001800 	.word	0x40001800
 8007898:	40001c00 	.word	0x40001c00
 800789c:	40002000 	.word	0x40002000

080078a0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b086      	sub	sp, #24
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
 80078a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	689b      	ldr	r3, [r3, #8]
 80078b0:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078b8:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	685b      	ldr	r3, [r3, #4]
 80078be:	697a      	ldr	r2, [r7, #20]
 80078c0:	4313      	orrs	r3, r2
 80078c2:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	f023 0307 	bic.w	r3, r3, #7
 80078ca:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	697a      	ldr	r2, [r7, #20]
 80078d2:	4313      	orrs	r3, r2
 80078d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	697a      	ldr	r2, [r7, #20]
 80078dc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	685b      	ldr	r3, [r3, #4]
 80078e2:	2b70      	cmp	r3, #112	; 0x70
 80078e4:	d01a      	beq.n	800791c <TIM_SlaveTimer_SetConfig+0x7c>
 80078e6:	2b70      	cmp	r3, #112	; 0x70
 80078e8:	d860      	bhi.n	80079ac <TIM_SlaveTimer_SetConfig+0x10c>
 80078ea:	2b60      	cmp	r3, #96	; 0x60
 80078ec:	d054      	beq.n	8007998 <TIM_SlaveTimer_SetConfig+0xf8>
 80078ee:	2b60      	cmp	r3, #96	; 0x60
 80078f0:	d85c      	bhi.n	80079ac <TIM_SlaveTimer_SetConfig+0x10c>
 80078f2:	2b50      	cmp	r3, #80	; 0x50
 80078f4:	d046      	beq.n	8007984 <TIM_SlaveTimer_SetConfig+0xe4>
 80078f6:	2b50      	cmp	r3, #80	; 0x50
 80078f8:	d858      	bhi.n	80079ac <TIM_SlaveTimer_SetConfig+0x10c>
 80078fa:	2b40      	cmp	r3, #64	; 0x40
 80078fc:	d019      	beq.n	8007932 <TIM_SlaveTimer_SetConfig+0x92>
 80078fe:	2b40      	cmp	r3, #64	; 0x40
 8007900:	d854      	bhi.n	80079ac <TIM_SlaveTimer_SetConfig+0x10c>
 8007902:	2b30      	cmp	r3, #48	; 0x30
 8007904:	d054      	beq.n	80079b0 <TIM_SlaveTimer_SetConfig+0x110>
 8007906:	2b30      	cmp	r3, #48	; 0x30
 8007908:	d850      	bhi.n	80079ac <TIM_SlaveTimer_SetConfig+0x10c>
 800790a:	2b20      	cmp	r3, #32
 800790c:	d050      	beq.n	80079b0 <TIM_SlaveTimer_SetConfig+0x110>
 800790e:	2b20      	cmp	r3, #32
 8007910:	d84c      	bhi.n	80079ac <TIM_SlaveTimer_SetConfig+0x10c>
 8007912:	2b00      	cmp	r3, #0
 8007914:	d04c      	beq.n	80079b0 <TIM_SlaveTimer_SetConfig+0x110>
 8007916:	2b10      	cmp	r3, #16
 8007918:	d04a      	beq.n	80079b0 <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 800791a:	e047      	b.n	80079ac <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6818      	ldr	r0, [r3, #0]
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	68d9      	ldr	r1, [r3, #12]
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	689a      	ldr	r2, [r3, #8]
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	691b      	ldr	r3, [r3, #16]
 800792c:	f000 f8a5 	bl	8007a7a <TIM_ETR_SetConfig>
      break;
 8007930:	e03f      	b.n	80079b2 <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	2b05      	cmp	r3, #5
 8007938:	d101      	bne.n	800793e <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 800793a:	2301      	movs	r3, #1
 800793c:	e03a      	b.n	80079b4 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	6a1b      	ldr	r3, [r3, #32]
 8007944:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	6a1a      	ldr	r2, [r3, #32]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f022 0201 	bic.w	r2, r2, #1
 8007954:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	699b      	ldr	r3, [r3, #24]
 800795c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007964:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	691b      	ldr	r3, [r3, #16]
 800796a:	011b      	lsls	r3, r3, #4
 800796c:	68fa      	ldr	r2, [r7, #12]
 800796e:	4313      	orrs	r3, r2
 8007970:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	68fa      	ldr	r2, [r7, #12]
 8007978:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	693a      	ldr	r2, [r7, #16]
 8007980:	621a      	str	r2, [r3, #32]
      break;
 8007982:	e016      	b.n	80079b2 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6818      	ldr	r0, [r3, #0]
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	6899      	ldr	r1, [r3, #8]
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	691b      	ldr	r3, [r3, #16]
 8007990:	461a      	mov	r2, r3
 8007992:	f000 f813 	bl	80079bc <TIM_TI1_ConfigInputStage>
      break;
 8007996:	e00c      	b.n	80079b2 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6818      	ldr	r0, [r3, #0]
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	6899      	ldr	r1, [r3, #8]
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	691b      	ldr	r3, [r3, #16]
 80079a4:	461a      	mov	r2, r3
 80079a6:	f000 f838 	bl	8007a1a <TIM_TI2_ConfigInputStage>
      break;
 80079aa:	e002      	b.n	80079b2 <TIM_SlaveTimer_SetConfig+0x112>
      break;
 80079ac:	bf00      	nop
 80079ae:	e000      	b.n	80079b2 <TIM_SlaveTimer_SetConfig+0x112>
        break;
 80079b0:	bf00      	nop
  }
  return HAL_OK;
 80079b2:	2300      	movs	r3, #0
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	3718      	adds	r7, #24
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}

080079bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80079bc:	b480      	push	{r7}
 80079be:	b087      	sub	sp, #28
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	60f8      	str	r0, [r7, #12]
 80079c4:	60b9      	str	r1, [r7, #8]
 80079c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	6a1b      	ldr	r3, [r3, #32]
 80079cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	6a1b      	ldr	r3, [r3, #32]
 80079d2:	f023 0201 	bic.w	r2, r3, #1
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	699b      	ldr	r3, [r3, #24]
 80079de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80079e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	011b      	lsls	r3, r3, #4
 80079ec:	693a      	ldr	r2, [r7, #16]
 80079ee:	4313      	orrs	r3, r2
 80079f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	f023 030a 	bic.w	r3, r3, #10
 80079f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80079fa:	697a      	ldr	r2, [r7, #20]
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	4313      	orrs	r3, r2
 8007a00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	693a      	ldr	r2, [r7, #16]
 8007a06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	697a      	ldr	r2, [r7, #20]
 8007a0c:	621a      	str	r2, [r3, #32]
}
 8007a0e:	bf00      	nop
 8007a10:	371c      	adds	r7, #28
 8007a12:	46bd      	mov	sp, r7
 8007a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a18:	4770      	bx	lr

08007a1a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a1a:	b480      	push	{r7}
 8007a1c:	b087      	sub	sp, #28
 8007a1e:	af00      	add	r7, sp, #0
 8007a20:	60f8      	str	r0, [r7, #12]
 8007a22:	60b9      	str	r1, [r7, #8]
 8007a24:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	6a1b      	ldr	r3, [r3, #32]
 8007a2a:	f023 0210 	bic.w	r2, r3, #16
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	699b      	ldr	r3, [r3, #24]
 8007a36:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	6a1b      	ldr	r3, [r3, #32]
 8007a3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007a44:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	031b      	lsls	r3, r3, #12
 8007a4a:	697a      	ldr	r2, [r7, #20]
 8007a4c:	4313      	orrs	r3, r2
 8007a4e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007a56:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	011b      	lsls	r3, r3, #4
 8007a5c:	693a      	ldr	r2, [r7, #16]
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	697a      	ldr	r2, [r7, #20]
 8007a66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	693a      	ldr	r2, [r7, #16]
 8007a6c:	621a      	str	r2, [r3, #32]
}
 8007a6e:	bf00      	nop
 8007a70:	371c      	adds	r7, #28
 8007a72:	46bd      	mov	sp, r7
 8007a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a78:	4770      	bx	lr

08007a7a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007a7a:	b480      	push	{r7}
 8007a7c:	b087      	sub	sp, #28
 8007a7e:	af00      	add	r7, sp, #0
 8007a80:	60f8      	str	r0, [r7, #12]
 8007a82:	60b9      	str	r1, [r7, #8]
 8007a84:	607a      	str	r2, [r7, #4]
 8007a86:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	689b      	ldr	r3, [r3, #8]
 8007a8c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007a94:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	021a      	lsls	r2, r3, #8
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	431a      	orrs	r2, r3
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	697a      	ldr	r2, [r7, #20]
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	697a      	ldr	r2, [r7, #20]
 8007aac:	609a      	str	r2, [r3, #8]
}
 8007aae:	bf00      	nop
 8007ab0:	371c      	adds	r7, #28
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab8:	4770      	bx	lr
	...

08007abc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007abc:	b480      	push	{r7}
 8007abe:	b085      	sub	sp, #20
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
 8007ac4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	d101      	bne.n	8007ad4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007ad0:	2302      	movs	r3, #2
 8007ad2:	e05a      	b.n	8007b8a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2202      	movs	r2, #2
 8007ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	685b      	ldr	r3, [r3, #4]
 8007aea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	689b      	ldr	r3, [r3, #8]
 8007af2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007afa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	68fa      	ldr	r2, [r7, #12]
 8007b02:	4313      	orrs	r3, r2
 8007b04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	68fa      	ldr	r2, [r7, #12]
 8007b0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4a21      	ldr	r2, [pc, #132]	; (8007b98 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d022      	beq.n	8007b5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b20:	d01d      	beq.n	8007b5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a1d      	ldr	r2, [pc, #116]	; (8007b9c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d018      	beq.n	8007b5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4a1b      	ldr	r2, [pc, #108]	; (8007ba0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d013      	beq.n	8007b5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4a1a      	ldr	r2, [pc, #104]	; (8007ba4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d00e      	beq.n	8007b5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4a18      	ldr	r2, [pc, #96]	; (8007ba8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d009      	beq.n	8007b5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4a17      	ldr	r2, [pc, #92]	; (8007bac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d004      	beq.n	8007b5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4a15      	ldr	r2, [pc, #84]	; (8007bb0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d10c      	bne.n	8007b78 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	685b      	ldr	r3, [r3, #4]
 8007b6a:	68ba      	ldr	r2, [r7, #8]
 8007b6c:	4313      	orrs	r3, r2
 8007b6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	68ba      	ldr	r2, [r7, #8]
 8007b76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2200      	movs	r2, #0
 8007b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b88:	2300      	movs	r3, #0
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3714      	adds	r7, #20
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b94:	4770      	bx	lr
 8007b96:	bf00      	nop
 8007b98:	40010000 	.word	0x40010000
 8007b9c:	40000400 	.word	0x40000400
 8007ba0:	40000800 	.word	0x40000800
 8007ba4:	40000c00 	.word	0x40000c00
 8007ba8:	40010400 	.word	0x40010400
 8007bac:	40014000 	.word	0x40014000
 8007bb0:	40001800 	.word	0x40001800

08007bb4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b082      	sub	sp, #8
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d101      	bne.n	8007bc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	e03f      	b.n	8007c46 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bcc:	b2db      	uxtb	r3, r3
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d106      	bne.n	8007be0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f7fa ffc4 	bl	8002b68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2224      	movs	r2, #36	; 0x24
 8007be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	68da      	ldr	r2, [r3, #12]
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007bf6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f000 fb79 	bl	80082f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	691a      	ldr	r2, [r3, #16]
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007c0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	695a      	ldr	r2, [r3, #20]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007c1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	68da      	ldr	r2, [r3, #12]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007c2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2200      	movs	r2, #0
 8007c32:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2220      	movs	r2, #32
 8007c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2220      	movs	r2, #32
 8007c40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007c44:	2300      	movs	r3, #0
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	3708      	adds	r7, #8
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}

08007c4e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007c4e:	b480      	push	{r7}
 8007c50:	b085      	sub	sp, #20
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	60f8      	str	r0, [r7, #12]
 8007c56:	60b9      	str	r1, [r7, #8]
 8007c58:	4613      	mov	r3, r2
 8007c5a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c62:	b2db      	uxtb	r3, r3
 8007c64:	2b20      	cmp	r3, #32
 8007c66:	d130      	bne.n	8007cca <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d002      	beq.n	8007c74 <HAL_UART_Transmit_IT+0x26>
 8007c6e:	88fb      	ldrh	r3, [r7, #6]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d101      	bne.n	8007c78 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8007c74:	2301      	movs	r3, #1
 8007c76:	e029      	b.n	8007ccc <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c7e:	2b01      	cmp	r3, #1
 8007c80:	d101      	bne.n	8007c86 <HAL_UART_Transmit_IT+0x38>
 8007c82:	2302      	movs	r3, #2
 8007c84:	e022      	b.n	8007ccc <HAL_UART_Transmit_IT+0x7e>
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	2201      	movs	r2, #1
 8007c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	68ba      	ldr	r2, [r7, #8]
 8007c92:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	88fa      	ldrh	r2, [r7, #6]
 8007c98:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	88fa      	ldrh	r2, [r7, #6]
 8007c9e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2221      	movs	r2, #33	; 0x21
 8007caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	68da      	ldr	r2, [r3, #12]
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007cc4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	e000      	b.n	8007ccc <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8007cca:	2302      	movs	r3, #2
  }
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	3714      	adds	r7, #20
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd6:	4770      	bx	lr

08007cd8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b08a      	sub	sp, #40	; 0x28
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	68db      	ldr	r3, [r3, #12]
 8007cee:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	695b      	ldr	r3, [r3, #20]
 8007cf6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d02:	f003 030f 	and.w	r3, r3, #15
 8007d06:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8007d08:	69bb      	ldr	r3, [r7, #24]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d10d      	bne.n	8007d2a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d10:	f003 0320 	and.w	r3, r3, #32
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d008      	beq.n	8007d2a <HAL_UART_IRQHandler+0x52>
 8007d18:	6a3b      	ldr	r3, [r7, #32]
 8007d1a:	f003 0320 	and.w	r3, r3, #32
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d003      	beq.n	8007d2a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 fa4d 	bl	80081c2 <UART_Receive_IT>
      return;
 8007d28:	e17c      	b.n	8008024 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007d2a:	69bb      	ldr	r3, [r7, #24]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	f000 80b1 	beq.w	8007e94 <HAL_UART_IRQHandler+0x1bc>
 8007d32:	69fb      	ldr	r3, [r7, #28]
 8007d34:	f003 0301 	and.w	r3, r3, #1
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d105      	bne.n	8007d48 <HAL_UART_IRQHandler+0x70>
 8007d3c:	6a3b      	ldr	r3, [r7, #32]
 8007d3e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	f000 80a6 	beq.w	8007e94 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d4a:	f003 0301 	and.w	r3, r3, #1
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d00a      	beq.n	8007d68 <HAL_UART_IRQHandler+0x90>
 8007d52:	6a3b      	ldr	r3, [r7, #32]
 8007d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d005      	beq.n	8007d68 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d60:	f043 0201 	orr.w	r2, r3, #1
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d6a:	f003 0304 	and.w	r3, r3, #4
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d00a      	beq.n	8007d88 <HAL_UART_IRQHandler+0xb0>
 8007d72:	69fb      	ldr	r3, [r7, #28]
 8007d74:	f003 0301 	and.w	r3, r3, #1
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d005      	beq.n	8007d88 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d80:	f043 0202 	orr.w	r2, r3, #2
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d8a:	f003 0302 	and.w	r3, r3, #2
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d00a      	beq.n	8007da8 <HAL_UART_IRQHandler+0xd0>
 8007d92:	69fb      	ldr	r3, [r7, #28]
 8007d94:	f003 0301 	and.w	r3, r3, #1
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d005      	beq.n	8007da8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007da0:	f043 0204 	orr.w	r2, r3, #4
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007daa:	f003 0308 	and.w	r3, r3, #8
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d00f      	beq.n	8007dd2 <HAL_UART_IRQHandler+0xfa>
 8007db2:	6a3b      	ldr	r3, [r7, #32]
 8007db4:	f003 0320 	and.w	r3, r3, #32
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d104      	bne.n	8007dc6 <HAL_UART_IRQHandler+0xee>
 8007dbc:	69fb      	ldr	r3, [r7, #28]
 8007dbe:	f003 0301 	and.w	r3, r3, #1
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d005      	beq.n	8007dd2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dca:	f043 0208 	orr.w	r2, r3, #8
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	f000 811f 	beq.w	800801a <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dde:	f003 0320 	and.w	r3, r3, #32
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d007      	beq.n	8007df6 <HAL_UART_IRQHandler+0x11e>
 8007de6:	6a3b      	ldr	r3, [r7, #32]
 8007de8:	f003 0320 	and.w	r3, r3, #32
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d002      	beq.n	8007df6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f000 f9e6 	bl	80081c2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	695b      	ldr	r3, [r3, #20]
 8007dfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e00:	2b40      	cmp	r3, #64	; 0x40
 8007e02:	bf0c      	ite	eq
 8007e04:	2301      	moveq	r3, #1
 8007e06:	2300      	movne	r3, #0
 8007e08:	b2db      	uxtb	r3, r3
 8007e0a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e10:	f003 0308 	and.w	r3, r3, #8
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d102      	bne.n	8007e1e <HAL_UART_IRQHandler+0x146>
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d031      	beq.n	8007e82 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f000 f926 	bl	8008070 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	695b      	ldr	r3, [r3, #20]
 8007e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e2e:	2b40      	cmp	r3, #64	; 0x40
 8007e30:	d123      	bne.n	8007e7a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	695a      	ldr	r2, [r3, #20]
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e40:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d013      	beq.n	8007e72 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e4e:	4a77      	ldr	r2, [pc, #476]	; (800802c <HAL_UART_IRQHandler+0x354>)
 8007e50:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e56:	4618      	mov	r0, r3
 8007e58:	f7fb fdf3 	bl	8003a42 <HAL_DMA_Abort_IT>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d016      	beq.n	8007e90 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e68:	687a      	ldr	r2, [r7, #4]
 8007e6a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007e6c:	4610      	mov	r0, r2
 8007e6e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e70:	e00e      	b.n	8007e90 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f000 f8e6 	bl	8008044 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e78:	e00a      	b.n	8007e90 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f000 f8e2 	bl	8008044 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e80:	e006      	b.n	8007e90 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f000 f8de 	bl	8008044 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007e8e:	e0c4      	b.n	800801a <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e90:	bf00      	nop
    return;
 8007e92:	e0c2      	b.n	800801a <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e98:	2b01      	cmp	r3, #1
 8007e9a:	f040 80a2 	bne.w	8007fe2 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8007e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea0:	f003 0310 	and.w	r3, r3, #16
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	f000 809c 	beq.w	8007fe2 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8007eaa:	6a3b      	ldr	r3, [r7, #32]
 8007eac:	f003 0310 	and.w	r3, r3, #16
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	f000 8096 	beq.w	8007fe2 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	60fb      	str	r3, [r7, #12]
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	60fb      	str	r3, [r7, #12]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	685b      	ldr	r3, [r3, #4]
 8007ec8:	60fb      	str	r3, [r7, #12]
 8007eca:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	695b      	ldr	r3, [r3, #20]
 8007ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ed6:	2b40      	cmp	r3, #64	; 0x40
 8007ed8:	d14f      	bne.n	8007f7a <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	685b      	ldr	r3, [r3, #4]
 8007ee2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8007ee4:	8a3b      	ldrh	r3, [r7, #16]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	f000 8099 	beq.w	800801e <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007ef0:	8a3a      	ldrh	r2, [r7, #16]
 8007ef2:	429a      	cmp	r2, r3
 8007ef4:	f080 8093 	bcs.w	800801e <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	8a3a      	ldrh	r2, [r7, #16]
 8007efc:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f02:	69db      	ldr	r3, [r3, #28]
 8007f04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f08:	d02b      	beq.n	8007f62 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	68da      	ldr	r2, [r3, #12]
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007f18:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	695a      	ldr	r2, [r3, #20]
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f022 0201 	bic.w	r2, r2, #1
 8007f28:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	695a      	ldr	r2, [r3, #20]
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f38:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2220      	movs	r2, #32
 8007f3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2200      	movs	r2, #0
 8007f46:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	68da      	ldr	r2, [r3, #12]
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f022 0210 	bic.w	r2, r2, #16
 8007f56:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	f7fb fd00 	bl	8003962 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007f6a:	b29b      	uxth	r3, r3
 8007f6c:	1ad3      	subs	r3, r2, r3
 8007f6e:	b29b      	uxth	r3, r3
 8007f70:	4619      	mov	r1, r3
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f000 f870 	bl	8008058 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007f78:	e051      	b.n	800801e <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007f82:	b29b      	uxth	r3, r3
 8007f84:	1ad3      	subs	r3, r2, r3
 8007f86:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007f8c:	b29b      	uxth	r3, r3
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d047      	beq.n	8008022 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8007f92:	8a7b      	ldrh	r3, [r7, #18]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d044      	beq.n	8008022 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	68da      	ldr	r2, [r3, #12]
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007fa6:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	695a      	ldr	r2, [r3, #20]
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f022 0201 	bic.w	r2, r2, #1
 8007fb6:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2220      	movs	r2, #32
 8007fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	68da      	ldr	r2, [r3, #12]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f022 0210 	bic.w	r2, r2, #16
 8007fd4:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007fd6:	8a7b      	ldrh	r3, [r7, #18]
 8007fd8:	4619      	mov	r1, r3
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f000 f83c 	bl	8008058 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007fe0:	e01f      	b.n	8008022 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d008      	beq.n	8007ffe <HAL_UART_IRQHandler+0x326>
 8007fec:	6a3b      	ldr	r3, [r7, #32]
 8007fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d003      	beq.n	8007ffe <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f000 f87b 	bl	80080f2 <UART_Transmit_IT>
    return;
 8007ffc:	e012      	b.n	8008024 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008004:	2b00      	cmp	r3, #0
 8008006:	d00d      	beq.n	8008024 <HAL_UART_IRQHandler+0x34c>
 8008008:	6a3b      	ldr	r3, [r7, #32]
 800800a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800800e:	2b00      	cmp	r3, #0
 8008010:	d008      	beq.n	8008024 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f000 f8bd 	bl	8008192 <UART_EndTransmit_IT>
    return;
 8008018:	e004      	b.n	8008024 <HAL_UART_IRQHandler+0x34c>
    return;
 800801a:	bf00      	nop
 800801c:	e002      	b.n	8008024 <HAL_UART_IRQHandler+0x34c>
      return;
 800801e:	bf00      	nop
 8008020:	e000      	b.n	8008024 <HAL_UART_IRQHandler+0x34c>
      return;
 8008022:	bf00      	nop
  }
}
 8008024:	3728      	adds	r7, #40	; 0x28
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}
 800802a:	bf00      	nop
 800802c:	080080cb 	.word	0x080080cb

08008030 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008030:	b480      	push	{r7}
 8008032:	b083      	sub	sp, #12
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008038:	bf00      	nop
 800803a:	370c      	adds	r7, #12
 800803c:	46bd      	mov	sp, r7
 800803e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008042:	4770      	bx	lr

08008044 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008044:	b480      	push	{r7}
 8008046:	b083      	sub	sp, #12
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800804c:	bf00      	nop
 800804e:	370c      	adds	r7, #12
 8008050:	46bd      	mov	sp, r7
 8008052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008056:	4770      	bx	lr

08008058 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008058:	b480      	push	{r7}
 800805a:	b083      	sub	sp, #12
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
 8008060:	460b      	mov	r3, r1
 8008062:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008064:	bf00      	nop
 8008066:	370c      	adds	r7, #12
 8008068:	46bd      	mov	sp, r7
 800806a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806e:	4770      	bx	lr

08008070 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008070:	b480      	push	{r7}
 8008072:	b083      	sub	sp, #12
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	68da      	ldr	r2, [r3, #12]
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008086:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	695a      	ldr	r2, [r3, #20]
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f022 0201 	bic.w	r2, r2, #1
 8008096:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800809c:	2b01      	cmp	r3, #1
 800809e:	d107      	bne.n	80080b0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	68da      	ldr	r2, [r3, #12]
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f022 0210 	bic.w	r2, r2, #16
 80080ae:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2220      	movs	r2, #32
 80080b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2200      	movs	r2, #0
 80080bc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80080be:	bf00      	nop
 80080c0:	370c      	adds	r7, #12
 80080c2:	46bd      	mov	sp, r7
 80080c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c8:	4770      	bx	lr

080080ca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80080ca:	b580      	push	{r7, lr}
 80080cc:	b084      	sub	sp, #16
 80080ce:	af00      	add	r7, sp, #0
 80080d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	2200      	movs	r2, #0
 80080dc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	2200      	movs	r2, #0
 80080e2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80080e4:	68f8      	ldr	r0, [r7, #12]
 80080e6:	f7ff ffad 	bl	8008044 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80080ea:	bf00      	nop
 80080ec:	3710      	adds	r7, #16
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}

080080f2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80080f2:	b480      	push	{r7}
 80080f4:	b085      	sub	sp, #20
 80080f6:	af00      	add	r7, sp, #0
 80080f8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008100:	b2db      	uxtb	r3, r3
 8008102:	2b21      	cmp	r3, #33	; 0x21
 8008104:	d13e      	bne.n	8008184 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	689b      	ldr	r3, [r3, #8]
 800810a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800810e:	d114      	bne.n	800813a <UART_Transmit_IT+0x48>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	691b      	ldr	r3, [r3, #16]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d110      	bne.n	800813a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6a1b      	ldr	r3, [r3, #32]
 800811c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	881b      	ldrh	r3, [r3, #0]
 8008122:	461a      	mov	r2, r3
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800812c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6a1b      	ldr	r3, [r3, #32]
 8008132:	1c9a      	adds	r2, r3, #2
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	621a      	str	r2, [r3, #32]
 8008138:	e008      	b.n	800814c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6a1b      	ldr	r3, [r3, #32]
 800813e:	1c59      	adds	r1, r3, #1
 8008140:	687a      	ldr	r2, [r7, #4]
 8008142:	6211      	str	r1, [r2, #32]
 8008144:	781a      	ldrb	r2, [r3, #0]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008150:	b29b      	uxth	r3, r3
 8008152:	3b01      	subs	r3, #1
 8008154:	b29b      	uxth	r3, r3
 8008156:	687a      	ldr	r2, [r7, #4]
 8008158:	4619      	mov	r1, r3
 800815a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800815c:	2b00      	cmp	r3, #0
 800815e:	d10f      	bne.n	8008180 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	68da      	ldr	r2, [r3, #12]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800816e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	68da      	ldr	r2, [r3, #12]
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800817e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008180:	2300      	movs	r3, #0
 8008182:	e000      	b.n	8008186 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008184:	2302      	movs	r3, #2
  }
}
 8008186:	4618      	mov	r0, r3
 8008188:	3714      	adds	r7, #20
 800818a:	46bd      	mov	sp, r7
 800818c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008190:	4770      	bx	lr

08008192 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008192:	b580      	push	{r7, lr}
 8008194:	b082      	sub	sp, #8
 8008196:	af00      	add	r7, sp, #0
 8008198:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	68da      	ldr	r2, [r3, #12]
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80081a8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2220      	movs	r2, #32
 80081ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f7fa fa42 	bl	800263c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80081b8:	2300      	movs	r3, #0
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3708      	adds	r7, #8
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}

080081c2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80081c2:	b580      	push	{r7, lr}
 80081c4:	b084      	sub	sp, #16
 80081c6:	af00      	add	r7, sp, #0
 80081c8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80081d0:	b2db      	uxtb	r3, r3
 80081d2:	2b22      	cmp	r3, #34	; 0x22
 80081d4:	f040 8087 	bne.w	80082e6 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	689b      	ldr	r3, [r3, #8]
 80081dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081e0:	d117      	bne.n	8008212 <UART_Receive_IT+0x50>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	691b      	ldr	r3, [r3, #16]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d113      	bne.n	8008212 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80081ea:	2300      	movs	r3, #0
 80081ec:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081f2:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	685b      	ldr	r3, [r3, #4]
 80081fa:	b29b      	uxth	r3, r3
 80081fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008200:	b29a      	uxth	r2, r3
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800820a:	1c9a      	adds	r2, r3, #2
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	629a      	str	r2, [r3, #40]	; 0x28
 8008210:	e026      	b.n	8008260 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008216:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8008218:	2300      	movs	r3, #0
 800821a:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	689b      	ldr	r3, [r3, #8]
 8008220:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008224:	d007      	beq.n	8008236 <UART_Receive_IT+0x74>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	689b      	ldr	r3, [r3, #8]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d10a      	bne.n	8008244 <UART_Receive_IT+0x82>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	691b      	ldr	r3, [r3, #16]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d106      	bne.n	8008244 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	685b      	ldr	r3, [r3, #4]
 800823c:	b2da      	uxtb	r2, r3
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	701a      	strb	r2, [r3, #0]
 8008242:	e008      	b.n	8008256 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	685b      	ldr	r3, [r3, #4]
 800824a:	b2db      	uxtb	r3, r3
 800824c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008250:	b2da      	uxtb	r2, r3
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800825a:	1c5a      	adds	r2, r3, #1
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008264:	b29b      	uxth	r3, r3
 8008266:	3b01      	subs	r3, #1
 8008268:	b29b      	uxth	r3, r3
 800826a:	687a      	ldr	r2, [r7, #4]
 800826c:	4619      	mov	r1, r3
 800826e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008270:	2b00      	cmp	r3, #0
 8008272:	d136      	bne.n	80082e2 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	68da      	ldr	r2, [r3, #12]
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f022 0220 	bic.w	r2, r2, #32
 8008282:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	68da      	ldr	r2, [r3, #12]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008292:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	695a      	ldr	r2, [r3, #20]
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f022 0201 	bic.w	r2, r2, #1
 80082a2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2220      	movs	r2, #32
 80082a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082b0:	2b01      	cmp	r3, #1
 80082b2:	d10e      	bne.n	80082d2 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	68da      	ldr	r2, [r3, #12]
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f022 0210 	bic.w	r2, r2, #16
 80082c2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80082c8:	4619      	mov	r1, r3
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f7ff fec4 	bl	8008058 <HAL_UARTEx_RxEventCallback>
 80082d0:	e002      	b.n	80082d8 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f7ff feac 	bl	8008030 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2200      	movs	r2, #0
 80082dc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 80082de:	2300      	movs	r3, #0
 80082e0:	e002      	b.n	80082e8 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 80082e2:	2300      	movs	r3, #0
 80082e4:	e000      	b.n	80082e8 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 80082e6:	2302      	movs	r3, #2
  }
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3710      	adds	r7, #16
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}

080082f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80082f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082f4:	b09f      	sub	sp, #124	; 0x7c
 80082f6:	af00      	add	r7, sp, #0
 80082f8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80082fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	691b      	ldr	r3, [r3, #16]
 8008300:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008304:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008306:	68d9      	ldr	r1, [r3, #12]
 8008308:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800830a:	681a      	ldr	r2, [r3, #0]
 800830c:	ea40 0301 	orr.w	r3, r0, r1
 8008310:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008312:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008314:	689a      	ldr	r2, [r3, #8]
 8008316:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008318:	691b      	ldr	r3, [r3, #16]
 800831a:	431a      	orrs	r2, r3
 800831c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800831e:	695b      	ldr	r3, [r3, #20]
 8008320:	431a      	orrs	r2, r3
 8008322:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008324:	69db      	ldr	r3, [r3, #28]
 8008326:	4313      	orrs	r3, r2
 8008328:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800832a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	68db      	ldr	r3, [r3, #12]
 8008330:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008334:	f021 010c 	bic.w	r1, r1, #12
 8008338:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800833a:	681a      	ldr	r2, [r3, #0]
 800833c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800833e:	430b      	orrs	r3, r1
 8008340:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008342:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	695b      	ldr	r3, [r3, #20]
 8008348:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800834c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800834e:	6999      	ldr	r1, [r3, #24]
 8008350:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008352:	681a      	ldr	r2, [r3, #0]
 8008354:	ea40 0301 	orr.w	r3, r0, r1
 8008358:	6153      	str	r3, [r2, #20]


#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 800835a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800835c:	681a      	ldr	r2, [r3, #0]
 800835e:	4b6a      	ldr	r3, [pc, #424]	; (8008508 <UART_SetConfig+0x218>)
 8008360:	429a      	cmp	r2, r3
 8008362:	d00e      	beq.n	8008382 <UART_SetConfig+0x92>
 8008364:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008366:	681a      	ldr	r2, [r3, #0]
 8008368:	4b68      	ldr	r3, [pc, #416]	; (800850c <UART_SetConfig+0x21c>)
 800836a:	429a      	cmp	r2, r3
 800836c:	d009      	beq.n	8008382 <UART_SetConfig+0x92>
 800836e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008370:	681a      	ldr	r2, [r3, #0]
 8008372:	4b67      	ldr	r3, [pc, #412]	; (8008510 <UART_SetConfig+0x220>)
 8008374:	429a      	cmp	r2, r3
 8008376:	d004      	beq.n	8008382 <UART_SetConfig+0x92>
 8008378:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800837a:	681a      	ldr	r2, [r3, #0]
 800837c:	4b65      	ldr	r3, [pc, #404]	; (8008514 <UART_SetConfig+0x224>)
 800837e:	429a      	cmp	r2, r3
 8008380:	d103      	bne.n	800838a <UART_SetConfig+0x9a>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008382:	f7fe fb8b 	bl	8006a9c <HAL_RCC_GetPCLK2Freq>
 8008386:	6778      	str	r0, [r7, #116]	; 0x74
 8008388:	e002      	b.n	8008390 <UART_SetConfig+0xa0>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800838a:	f7fe fb73 	bl	8006a74 <HAL_RCC_GetPCLK1Freq>
 800838e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008390:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008392:	69db      	ldr	r3, [r3, #28]
 8008394:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008398:	f040 80c0 	bne.w	800851c <UART_SetConfig+0x22c>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800839c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800839e:	461c      	mov	r4, r3
 80083a0:	f04f 0500 	mov.w	r5, #0
 80083a4:	4622      	mov	r2, r4
 80083a6:	462b      	mov	r3, r5
 80083a8:	1891      	adds	r1, r2, r2
 80083aa:	6439      	str	r1, [r7, #64]	; 0x40
 80083ac:	415b      	adcs	r3, r3
 80083ae:	647b      	str	r3, [r7, #68]	; 0x44
 80083b0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80083b4:	1912      	adds	r2, r2, r4
 80083b6:	eb45 0303 	adc.w	r3, r5, r3
 80083ba:	f04f 0000 	mov.w	r0, #0
 80083be:	f04f 0100 	mov.w	r1, #0
 80083c2:	00d9      	lsls	r1, r3, #3
 80083c4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80083c8:	00d0      	lsls	r0, r2, #3
 80083ca:	4602      	mov	r2, r0
 80083cc:	460b      	mov	r3, r1
 80083ce:	1911      	adds	r1, r2, r4
 80083d0:	6639      	str	r1, [r7, #96]	; 0x60
 80083d2:	416b      	adcs	r3, r5
 80083d4:	667b      	str	r3, [r7, #100]	; 0x64
 80083d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083d8:	685b      	ldr	r3, [r3, #4]
 80083da:	461a      	mov	r2, r3
 80083dc:	f04f 0300 	mov.w	r3, #0
 80083e0:	1891      	adds	r1, r2, r2
 80083e2:	63b9      	str	r1, [r7, #56]	; 0x38
 80083e4:	415b      	adcs	r3, r3
 80083e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80083e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80083ec:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80083f0:	f7f7 ff6e 	bl	80002d0 <__aeabi_uldivmod>
 80083f4:	4602      	mov	r2, r0
 80083f6:	460b      	mov	r3, r1
 80083f8:	4b47      	ldr	r3, [pc, #284]	; (8008518 <UART_SetConfig+0x228>)
 80083fa:	fba3 2302 	umull	r2, r3, r3, r2
 80083fe:	095b      	lsrs	r3, r3, #5
 8008400:	011e      	lsls	r6, r3, #4
 8008402:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008404:	461c      	mov	r4, r3
 8008406:	f04f 0500 	mov.w	r5, #0
 800840a:	4622      	mov	r2, r4
 800840c:	462b      	mov	r3, r5
 800840e:	1891      	adds	r1, r2, r2
 8008410:	6339      	str	r1, [r7, #48]	; 0x30
 8008412:	415b      	adcs	r3, r3
 8008414:	637b      	str	r3, [r7, #52]	; 0x34
 8008416:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800841a:	1912      	adds	r2, r2, r4
 800841c:	eb45 0303 	adc.w	r3, r5, r3
 8008420:	f04f 0000 	mov.w	r0, #0
 8008424:	f04f 0100 	mov.w	r1, #0
 8008428:	00d9      	lsls	r1, r3, #3
 800842a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800842e:	00d0      	lsls	r0, r2, #3
 8008430:	4602      	mov	r2, r0
 8008432:	460b      	mov	r3, r1
 8008434:	1911      	adds	r1, r2, r4
 8008436:	65b9      	str	r1, [r7, #88]	; 0x58
 8008438:	416b      	adcs	r3, r5
 800843a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800843c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800843e:	685b      	ldr	r3, [r3, #4]
 8008440:	461a      	mov	r2, r3
 8008442:	f04f 0300 	mov.w	r3, #0
 8008446:	1891      	adds	r1, r2, r2
 8008448:	62b9      	str	r1, [r7, #40]	; 0x28
 800844a:	415b      	adcs	r3, r3
 800844c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800844e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008452:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008456:	f7f7 ff3b 	bl	80002d0 <__aeabi_uldivmod>
 800845a:	4602      	mov	r2, r0
 800845c:	460b      	mov	r3, r1
 800845e:	4b2e      	ldr	r3, [pc, #184]	; (8008518 <UART_SetConfig+0x228>)
 8008460:	fba3 1302 	umull	r1, r3, r3, r2
 8008464:	095b      	lsrs	r3, r3, #5
 8008466:	2164      	movs	r1, #100	; 0x64
 8008468:	fb01 f303 	mul.w	r3, r1, r3
 800846c:	1ad3      	subs	r3, r2, r3
 800846e:	00db      	lsls	r3, r3, #3
 8008470:	3332      	adds	r3, #50	; 0x32
 8008472:	4a29      	ldr	r2, [pc, #164]	; (8008518 <UART_SetConfig+0x228>)
 8008474:	fba2 2303 	umull	r2, r3, r2, r3
 8008478:	095b      	lsrs	r3, r3, #5
 800847a:	005b      	lsls	r3, r3, #1
 800847c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008480:	441e      	add	r6, r3
 8008482:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008484:	4618      	mov	r0, r3
 8008486:	f04f 0100 	mov.w	r1, #0
 800848a:	4602      	mov	r2, r0
 800848c:	460b      	mov	r3, r1
 800848e:	1894      	adds	r4, r2, r2
 8008490:	623c      	str	r4, [r7, #32]
 8008492:	415b      	adcs	r3, r3
 8008494:	627b      	str	r3, [r7, #36]	; 0x24
 8008496:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800849a:	1812      	adds	r2, r2, r0
 800849c:	eb41 0303 	adc.w	r3, r1, r3
 80084a0:	f04f 0400 	mov.w	r4, #0
 80084a4:	f04f 0500 	mov.w	r5, #0
 80084a8:	00dd      	lsls	r5, r3, #3
 80084aa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80084ae:	00d4      	lsls	r4, r2, #3
 80084b0:	4622      	mov	r2, r4
 80084b2:	462b      	mov	r3, r5
 80084b4:	1814      	adds	r4, r2, r0
 80084b6:	653c      	str	r4, [r7, #80]	; 0x50
 80084b8:	414b      	adcs	r3, r1
 80084ba:	657b      	str	r3, [r7, #84]	; 0x54
 80084bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084be:	685b      	ldr	r3, [r3, #4]
 80084c0:	461a      	mov	r2, r3
 80084c2:	f04f 0300 	mov.w	r3, #0
 80084c6:	1891      	adds	r1, r2, r2
 80084c8:	61b9      	str	r1, [r7, #24]
 80084ca:	415b      	adcs	r3, r3
 80084cc:	61fb      	str	r3, [r7, #28]
 80084ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80084d2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80084d6:	f7f7 fefb 	bl	80002d0 <__aeabi_uldivmod>
 80084da:	4602      	mov	r2, r0
 80084dc:	460b      	mov	r3, r1
 80084de:	4b0e      	ldr	r3, [pc, #56]	; (8008518 <UART_SetConfig+0x228>)
 80084e0:	fba3 1302 	umull	r1, r3, r3, r2
 80084e4:	095b      	lsrs	r3, r3, #5
 80084e6:	2164      	movs	r1, #100	; 0x64
 80084e8:	fb01 f303 	mul.w	r3, r1, r3
 80084ec:	1ad3      	subs	r3, r2, r3
 80084ee:	00db      	lsls	r3, r3, #3
 80084f0:	3332      	adds	r3, #50	; 0x32
 80084f2:	4a09      	ldr	r2, [pc, #36]	; (8008518 <UART_SetConfig+0x228>)
 80084f4:	fba2 2303 	umull	r2, r3, r2, r3
 80084f8:	095b      	lsrs	r3, r3, #5
 80084fa:	f003 0207 	and.w	r2, r3, #7
 80084fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	4432      	add	r2, r6
 8008504:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008506:	e0c3      	b.n	8008690 <UART_SetConfig+0x3a0>
 8008508:	40011000 	.word	0x40011000
 800850c:	40011400 	.word	0x40011400
 8008510:	40011800 	.word	0x40011800
 8008514:	40011c00 	.word	0x40011c00
 8008518:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800851c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800851e:	461c      	mov	r4, r3
 8008520:	f04f 0500 	mov.w	r5, #0
 8008524:	4622      	mov	r2, r4
 8008526:	462b      	mov	r3, r5
 8008528:	1891      	adds	r1, r2, r2
 800852a:	6139      	str	r1, [r7, #16]
 800852c:	415b      	adcs	r3, r3
 800852e:	617b      	str	r3, [r7, #20]
 8008530:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008534:	1912      	adds	r2, r2, r4
 8008536:	eb45 0303 	adc.w	r3, r5, r3
 800853a:	f04f 0000 	mov.w	r0, #0
 800853e:	f04f 0100 	mov.w	r1, #0
 8008542:	00d9      	lsls	r1, r3, #3
 8008544:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008548:	00d0      	lsls	r0, r2, #3
 800854a:	4602      	mov	r2, r0
 800854c:	460b      	mov	r3, r1
 800854e:	eb12 0804 	adds.w	r8, r2, r4
 8008552:	eb43 0905 	adc.w	r9, r3, r5
 8008556:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008558:	685b      	ldr	r3, [r3, #4]
 800855a:	4618      	mov	r0, r3
 800855c:	f04f 0100 	mov.w	r1, #0
 8008560:	f04f 0200 	mov.w	r2, #0
 8008564:	f04f 0300 	mov.w	r3, #0
 8008568:	008b      	lsls	r3, r1, #2
 800856a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800856e:	0082      	lsls	r2, r0, #2
 8008570:	4640      	mov	r0, r8
 8008572:	4649      	mov	r1, r9
 8008574:	f7f7 feac 	bl	80002d0 <__aeabi_uldivmod>
 8008578:	4602      	mov	r2, r0
 800857a:	460b      	mov	r3, r1
 800857c:	4b47      	ldr	r3, [pc, #284]	; (800869c <UART_SetConfig+0x3ac>)
 800857e:	fba3 2302 	umull	r2, r3, r3, r2
 8008582:	095b      	lsrs	r3, r3, #5
 8008584:	011e      	lsls	r6, r3, #4
 8008586:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008588:	4618      	mov	r0, r3
 800858a:	f04f 0100 	mov.w	r1, #0
 800858e:	4602      	mov	r2, r0
 8008590:	460b      	mov	r3, r1
 8008592:	1894      	adds	r4, r2, r2
 8008594:	60bc      	str	r4, [r7, #8]
 8008596:	415b      	adcs	r3, r3
 8008598:	60fb      	str	r3, [r7, #12]
 800859a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800859e:	1812      	adds	r2, r2, r0
 80085a0:	eb41 0303 	adc.w	r3, r1, r3
 80085a4:	f04f 0400 	mov.w	r4, #0
 80085a8:	f04f 0500 	mov.w	r5, #0
 80085ac:	00dd      	lsls	r5, r3, #3
 80085ae:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80085b2:	00d4      	lsls	r4, r2, #3
 80085b4:	4622      	mov	r2, r4
 80085b6:	462b      	mov	r3, r5
 80085b8:	1814      	adds	r4, r2, r0
 80085ba:	64bc      	str	r4, [r7, #72]	; 0x48
 80085bc:	414b      	adcs	r3, r1
 80085be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80085c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085c2:	685b      	ldr	r3, [r3, #4]
 80085c4:	4618      	mov	r0, r3
 80085c6:	f04f 0100 	mov.w	r1, #0
 80085ca:	f04f 0200 	mov.w	r2, #0
 80085ce:	f04f 0300 	mov.w	r3, #0
 80085d2:	008b      	lsls	r3, r1, #2
 80085d4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80085d8:	0082      	lsls	r2, r0, #2
 80085da:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80085de:	f7f7 fe77 	bl	80002d0 <__aeabi_uldivmod>
 80085e2:	4602      	mov	r2, r0
 80085e4:	460b      	mov	r3, r1
 80085e6:	4b2d      	ldr	r3, [pc, #180]	; (800869c <UART_SetConfig+0x3ac>)
 80085e8:	fba3 1302 	umull	r1, r3, r3, r2
 80085ec:	095b      	lsrs	r3, r3, #5
 80085ee:	2164      	movs	r1, #100	; 0x64
 80085f0:	fb01 f303 	mul.w	r3, r1, r3
 80085f4:	1ad3      	subs	r3, r2, r3
 80085f6:	011b      	lsls	r3, r3, #4
 80085f8:	3332      	adds	r3, #50	; 0x32
 80085fa:	4a28      	ldr	r2, [pc, #160]	; (800869c <UART_SetConfig+0x3ac>)
 80085fc:	fba2 2303 	umull	r2, r3, r2, r3
 8008600:	095b      	lsrs	r3, r3, #5
 8008602:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008606:	441e      	add	r6, r3
 8008608:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800860a:	4618      	mov	r0, r3
 800860c:	f04f 0100 	mov.w	r1, #0
 8008610:	4602      	mov	r2, r0
 8008612:	460b      	mov	r3, r1
 8008614:	1894      	adds	r4, r2, r2
 8008616:	603c      	str	r4, [r7, #0]
 8008618:	415b      	adcs	r3, r3
 800861a:	607b      	str	r3, [r7, #4]
 800861c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008620:	1812      	adds	r2, r2, r0
 8008622:	eb41 0303 	adc.w	r3, r1, r3
 8008626:	f04f 0400 	mov.w	r4, #0
 800862a:	f04f 0500 	mov.w	r5, #0
 800862e:	00dd      	lsls	r5, r3, #3
 8008630:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008634:	00d4      	lsls	r4, r2, #3
 8008636:	4622      	mov	r2, r4
 8008638:	462b      	mov	r3, r5
 800863a:	eb12 0a00 	adds.w	sl, r2, r0
 800863e:	eb43 0b01 	adc.w	fp, r3, r1
 8008642:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008644:	685b      	ldr	r3, [r3, #4]
 8008646:	4618      	mov	r0, r3
 8008648:	f04f 0100 	mov.w	r1, #0
 800864c:	f04f 0200 	mov.w	r2, #0
 8008650:	f04f 0300 	mov.w	r3, #0
 8008654:	008b      	lsls	r3, r1, #2
 8008656:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800865a:	0082      	lsls	r2, r0, #2
 800865c:	4650      	mov	r0, sl
 800865e:	4659      	mov	r1, fp
 8008660:	f7f7 fe36 	bl	80002d0 <__aeabi_uldivmod>
 8008664:	4602      	mov	r2, r0
 8008666:	460b      	mov	r3, r1
 8008668:	4b0c      	ldr	r3, [pc, #48]	; (800869c <UART_SetConfig+0x3ac>)
 800866a:	fba3 1302 	umull	r1, r3, r3, r2
 800866e:	095b      	lsrs	r3, r3, #5
 8008670:	2164      	movs	r1, #100	; 0x64
 8008672:	fb01 f303 	mul.w	r3, r1, r3
 8008676:	1ad3      	subs	r3, r2, r3
 8008678:	011b      	lsls	r3, r3, #4
 800867a:	3332      	adds	r3, #50	; 0x32
 800867c:	4a07      	ldr	r2, [pc, #28]	; (800869c <UART_SetConfig+0x3ac>)
 800867e:	fba2 2303 	umull	r2, r3, r2, r3
 8008682:	095b      	lsrs	r3, r3, #5
 8008684:	f003 020f 	and.w	r2, r3, #15
 8008688:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4432      	add	r2, r6
 800868e:	609a      	str	r2, [r3, #8]
}
 8008690:	bf00      	nop
 8008692:	377c      	adds	r7, #124	; 0x7c
 8008694:	46bd      	mov	sp, r7
 8008696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800869a:	bf00      	nop
 800869c:	51eb851f 	.word	0x51eb851f

080086a0 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 80086a0:	b480      	push	{r7}
 80086a2:	b085      	sub	sp, #20
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
 80086a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 80086aa:	2300      	movs	r3, #0
 80086ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	681a      	ldr	r2, [r3, #0]
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086b8:	60fb      	str	r3, [r7, #12]
                     Init->WriteBurst
                     );
#else /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT,CPSIZE,  CBURSTRW, CCLKEN and WFDIS bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP      | \
 80086ba:	68fa      	ldr	r2, [r7, #12]
 80086bc:	4b2f      	ldr	r3, [pc, #188]	; (800877c <FSMC_NORSRAM_Init+0xdc>)
 80086be:	4013      	ands	r3, r2
 80086c0:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WAITCFG  | FSMC_BCR1_WREN      | \
                       FSMC_BCR1_WAITEN    | FSMC_BCR1_EXTMOD   | FSMC_BCR1_ASYNCWAIT | \
                       FSMC_BCR1_CPSIZE    | FSMC_BCR1_CBURSTRW | FSMC_BCR1_CCLKEN    | \
                       FSMC_BCR1_WFDIS));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80086ca:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 80086d0:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 80086d6:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 80086dc:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	69db      	ldr	r3, [r3, #28]
                     Init->WaitSignalPolarity   |\
 80086e2:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 80086e8:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 80086ee:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 80086f4:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 80086fa:	431a      	orrs	r2, r3
                     Init->WriteBurst           |\
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->AsynchronousWait     |\
 8008700:	431a      	orrs	r2, r3
                     Init->ContinuousClock      |\
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                     Init->WriteBurst           |\
 8008706:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->ContinuousClock      |\
 800870c:	431a      	orrs	r2, r3
                     Init->WriteFifo);
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                     Init->PageSize             |\
 8008712:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8008714:	68fa      	ldr	r2, [r7, #12]
 8008716:	4313      	orrs	r3, r2
 8008718:	60fb      	str	r3, [r7, #12]
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	689b      	ldr	r3, [r3, #8]
 800871e:	2b08      	cmp	r3, #8
 8008720:	d103      	bne.n	800872a <FSMC_NORSRAM_Init+0x8a>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008728:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	681a      	ldr	r2, [r3, #0]
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	68f9      	ldr	r1, [r7, #12]
 8008732:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if((Init->ContinuousClock == FSMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FSMC_NORSRAM_BANK1))
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800873a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800873e:	d10a      	bne.n	8008756 <FSMC_NORSRAM_Init+0xb6>
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d006      	beq.n	8008756 <FSMC_NORSRAM_Init+0xb6>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->ContinuousClock);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681a      	ldr	r2, [r3, #0]
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008750:	431a      	orrs	r2, r3
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	601a      	str	r2, [r3, #0]
  }

  if(Init->NSBank != FSMC_NORSRAM_BANK1)
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d006      	beq.n	800876c <FSMC_NORSRAM_Init+0xcc>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681a      	ldr	r2, [r3, #0]
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008766:	431a      	orrs	r2, r3
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800876c:	2300      	movs	r3, #0
}
 800876e:	4618      	mov	r0, r3
 8008770:	3714      	adds	r7, #20
 8008772:	46bd      	mov	sp, r7
 8008774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008778:	4770      	bx	lr
 800877a:	bf00      	nop
 800877c:	ffc00480 	.word	0xffc00480

08008780 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008780:	b480      	push	{r7}
 8008782:	b087      	sub	sp, #28
 8008784:	af00      	add	r7, sp, #0
 8008786:	60f8      	str	r0, [r7, #12]
 8008788:	60b9      	str	r1, [r7, #8]
 800878a:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 800878c:	2300      	movs	r3, #0
 800878e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	1c5a      	adds	r2, r3, #1
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800879a:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80087a2:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	685b      	ldr	r3, [r3, #4]
 80087ac:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80087ae:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	689b      	ldr	r3, [r3, #8]
 80087b4:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 80087b6:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	68db      	ldr	r3, [r3, #12]
 80087bc:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 80087be:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	691b      	ldr	r3, [r3, #16]
 80087c4:	3b01      	subs	r3, #1
 80087c6:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80087c8:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	695b      	ldr	r3, [r3, #20]
 80087ce:	3b02      	subs	r3, #2
 80087d0:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80087d2:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80087d8:	4313      	orrs	r3, r2
 80087da:	697a      	ldr	r2, [r7, #20]
 80087dc:	4313      	orrs	r3, r2
 80087de:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	1c5a      	adds	r2, r3, #1
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	6979      	ldr	r1, [r7, #20]
 80087e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if(HAL_IS_BIT_SET(Device->BTCR[FSMC_NORSRAM_BANK1], FSMC_BCR1_CCLKEN))
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80087f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80087f8:	d10e      	bne.n	8008818 <FSMC_NORSRAM_Timing_Init+0x98>
  {
    tmpr = (uint32_t)(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] & ~(0x0FU << 20U)); 
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	685b      	ldr	r3, [r3, #4]
 80087fe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008802:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	691b      	ldr	r3, [r3, #16]
 8008808:	3b01      	subs	r3, #1
 800880a:	051b      	lsls	r3, r3, #20
 800880c:	697a      	ldr	r2, [r7, #20]
 800880e:	4313      	orrs	r3, r2
 8008810:	617b      	str	r3, [r7, #20]
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	697a      	ldr	r2, [r7, #20]
 8008816:	605a      	str	r2, [r3, #4]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8008818:	2300      	movs	r3, #0
}
 800881a:	4618      	mov	r0, r3
 800881c:	371c      	adds	r7, #28
 800881e:	46bd      	mov	sp, r7
 8008820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008824:	4770      	bx	lr
	...

08008828 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8008828:	b480      	push	{r7}
 800882a:	b087      	sub	sp, #28
 800882c:	af00      	add	r7, sp, #0
 800882e:	60f8      	str	r0, [r7, #12]
 8008830:	60b9      	str	r1, [r7, #8]
 8008832:	607a      	str	r2, [r7, #4]
 8008834:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8008836:	2300      	movs	r3, #0
 8008838:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008840:	d122      	bne.n	8008888 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	687a      	ldr	r2, [r7, #4]
 8008846:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800884a:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 800884c:	697a      	ldr	r2, [r7, #20]
 800884e:	4b15      	ldr	r3, [pc, #84]	; (80088a4 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8008850:	4013      	ands	r3, r2
 8008852:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	685b      	ldr	r3, [r3, #4]
 800885c:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800885e:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	689b      	ldr	r3, [r3, #8]
 8008864:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8008866:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	68db      	ldr	r3, [r3, #12]
 800886c:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800886e:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008874:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008876:	697a      	ldr	r2, [r7, #20]
 8008878:	4313      	orrs	r3, r2
 800887a:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	687a      	ldr	r2, [r7, #4]
 8008880:	6979      	ldr	r1, [r7, #20]
 8008882:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008886:	e005      	b.n	8008894 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	687a      	ldr	r2, [r7, #4]
 800888c:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8008890:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8008894:	2300      	movs	r3, #0
}
 8008896:	4618      	mov	r0, r3
 8008898:	371c      	adds	r7, #28
 800889a:	46bd      	mov	sp, r7
 800889c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a0:	4770      	bx	lr
 80088a2:	bf00      	nop
 80088a4:	cff00000 	.word	0xcff00000

080088a8 <abort>:
 80088a8:	b508      	push	{r3, lr}
 80088aa:	2006      	movs	r0, #6
 80088ac:	f000 fdf0 	bl	8009490 <raise>
 80088b0:	2001      	movs	r0, #1
 80088b2:	f7f9 fa71 	bl	8001d98 <_exit>
	...

080088b8 <__assert_func>:
 80088b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80088ba:	4614      	mov	r4, r2
 80088bc:	461a      	mov	r2, r3
 80088be:	4b09      	ldr	r3, [pc, #36]	; (80088e4 <__assert_func+0x2c>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	4605      	mov	r5, r0
 80088c4:	68d8      	ldr	r0, [r3, #12]
 80088c6:	b14c      	cbz	r4, 80088dc <__assert_func+0x24>
 80088c8:	4b07      	ldr	r3, [pc, #28]	; (80088e8 <__assert_func+0x30>)
 80088ca:	9100      	str	r1, [sp, #0]
 80088cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80088d0:	4906      	ldr	r1, [pc, #24]	; (80088ec <__assert_func+0x34>)
 80088d2:	462b      	mov	r3, r5
 80088d4:	f000 f814 	bl	8008900 <fiprintf>
 80088d8:	f7ff ffe6 	bl	80088a8 <abort>
 80088dc:	4b04      	ldr	r3, [pc, #16]	; (80088f0 <__assert_func+0x38>)
 80088de:	461c      	mov	r4, r3
 80088e0:	e7f3      	b.n	80088ca <__assert_func+0x12>
 80088e2:	bf00      	nop
 80088e4:	20000010 	.word	0x20000010
 80088e8:	0801bb80 	.word	0x0801bb80
 80088ec:	0801bb8d 	.word	0x0801bb8d
 80088f0:	0801bbbb 	.word	0x0801bbbb

080088f4 <__errno>:
 80088f4:	4b01      	ldr	r3, [pc, #4]	; (80088fc <__errno+0x8>)
 80088f6:	6818      	ldr	r0, [r3, #0]
 80088f8:	4770      	bx	lr
 80088fa:	bf00      	nop
 80088fc:	20000010 	.word	0x20000010

08008900 <fiprintf>:
 8008900:	b40e      	push	{r1, r2, r3}
 8008902:	b503      	push	{r0, r1, lr}
 8008904:	4601      	mov	r1, r0
 8008906:	ab03      	add	r3, sp, #12
 8008908:	4805      	ldr	r0, [pc, #20]	; (8008920 <fiprintf+0x20>)
 800890a:	f853 2b04 	ldr.w	r2, [r3], #4
 800890e:	6800      	ldr	r0, [r0, #0]
 8008910:	9301      	str	r3, [sp, #4]
 8008912:	f000 f937 	bl	8008b84 <_vfiprintf_r>
 8008916:	b002      	add	sp, #8
 8008918:	f85d eb04 	ldr.w	lr, [sp], #4
 800891c:	b003      	add	sp, #12
 800891e:	4770      	bx	lr
 8008920:	20000010 	.word	0x20000010

08008924 <__libc_init_array>:
 8008924:	b570      	push	{r4, r5, r6, lr}
 8008926:	4d0d      	ldr	r5, [pc, #52]	; (800895c <__libc_init_array+0x38>)
 8008928:	4c0d      	ldr	r4, [pc, #52]	; (8008960 <__libc_init_array+0x3c>)
 800892a:	1b64      	subs	r4, r4, r5
 800892c:	10a4      	asrs	r4, r4, #2
 800892e:	2600      	movs	r6, #0
 8008930:	42a6      	cmp	r6, r4
 8008932:	d109      	bne.n	8008948 <__libc_init_array+0x24>
 8008934:	4d0b      	ldr	r5, [pc, #44]	; (8008964 <__libc_init_array+0x40>)
 8008936:	4c0c      	ldr	r4, [pc, #48]	; (8008968 <__libc_init_array+0x44>)
 8008938:	f001 fc30 	bl	800a19c <_init>
 800893c:	1b64      	subs	r4, r4, r5
 800893e:	10a4      	asrs	r4, r4, #2
 8008940:	2600      	movs	r6, #0
 8008942:	42a6      	cmp	r6, r4
 8008944:	d105      	bne.n	8008952 <__libc_init_array+0x2e>
 8008946:	bd70      	pop	{r4, r5, r6, pc}
 8008948:	f855 3b04 	ldr.w	r3, [r5], #4
 800894c:	4798      	blx	r3
 800894e:	3601      	adds	r6, #1
 8008950:	e7ee      	b.n	8008930 <__libc_init_array+0xc>
 8008952:	f855 3b04 	ldr.w	r3, [r5], #4
 8008956:	4798      	blx	r3
 8008958:	3601      	adds	r6, #1
 800895a:	e7f2      	b.n	8008942 <__libc_init_array+0x1e>
 800895c:	0801bdd4 	.word	0x0801bdd4
 8008960:	0801bdd4 	.word	0x0801bdd4
 8008964:	0801bdd4 	.word	0x0801bdd4
 8008968:	0801bdd8 	.word	0x0801bdd8

0800896c <malloc>:
 800896c:	4b02      	ldr	r3, [pc, #8]	; (8008978 <malloc+0xc>)
 800896e:	4601      	mov	r1, r0
 8008970:	6818      	ldr	r0, [r3, #0]
 8008972:	f000 b883 	b.w	8008a7c <_malloc_r>
 8008976:	bf00      	nop
 8008978:	20000010 	.word	0x20000010

0800897c <memcpy>:
 800897c:	440a      	add	r2, r1
 800897e:	4291      	cmp	r1, r2
 8008980:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008984:	d100      	bne.n	8008988 <memcpy+0xc>
 8008986:	4770      	bx	lr
 8008988:	b510      	push	{r4, lr}
 800898a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800898e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008992:	4291      	cmp	r1, r2
 8008994:	d1f9      	bne.n	800898a <memcpy+0xe>
 8008996:	bd10      	pop	{r4, pc}

08008998 <memmove>:
 8008998:	4288      	cmp	r0, r1
 800899a:	b510      	push	{r4, lr}
 800899c:	eb01 0402 	add.w	r4, r1, r2
 80089a0:	d902      	bls.n	80089a8 <memmove+0x10>
 80089a2:	4284      	cmp	r4, r0
 80089a4:	4623      	mov	r3, r4
 80089a6:	d807      	bhi.n	80089b8 <memmove+0x20>
 80089a8:	1e43      	subs	r3, r0, #1
 80089aa:	42a1      	cmp	r1, r4
 80089ac:	d008      	beq.n	80089c0 <memmove+0x28>
 80089ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80089b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80089b6:	e7f8      	b.n	80089aa <memmove+0x12>
 80089b8:	4402      	add	r2, r0
 80089ba:	4601      	mov	r1, r0
 80089bc:	428a      	cmp	r2, r1
 80089be:	d100      	bne.n	80089c2 <memmove+0x2a>
 80089c0:	bd10      	pop	{r4, pc}
 80089c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80089c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80089ca:	e7f7      	b.n	80089bc <memmove+0x24>

080089cc <memset>:
 80089cc:	4402      	add	r2, r0
 80089ce:	4603      	mov	r3, r0
 80089d0:	4293      	cmp	r3, r2
 80089d2:	d100      	bne.n	80089d6 <memset+0xa>
 80089d4:	4770      	bx	lr
 80089d6:	f803 1b01 	strb.w	r1, [r3], #1
 80089da:	e7f9      	b.n	80089d0 <memset+0x4>

080089dc <_free_r>:
 80089dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80089de:	2900      	cmp	r1, #0
 80089e0:	d048      	beq.n	8008a74 <_free_r+0x98>
 80089e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089e6:	9001      	str	r0, [sp, #4]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	f1a1 0404 	sub.w	r4, r1, #4
 80089ee:	bfb8      	it	lt
 80089f0:	18e4      	addlt	r4, r4, r3
 80089f2:	f001 f991 	bl	8009d18 <__malloc_lock>
 80089f6:	4a20      	ldr	r2, [pc, #128]	; (8008a78 <_free_r+0x9c>)
 80089f8:	9801      	ldr	r0, [sp, #4]
 80089fa:	6813      	ldr	r3, [r2, #0]
 80089fc:	4615      	mov	r5, r2
 80089fe:	b933      	cbnz	r3, 8008a0e <_free_r+0x32>
 8008a00:	6063      	str	r3, [r4, #4]
 8008a02:	6014      	str	r4, [r2, #0]
 8008a04:	b003      	add	sp, #12
 8008a06:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008a0a:	f001 b98b 	b.w	8009d24 <__malloc_unlock>
 8008a0e:	42a3      	cmp	r3, r4
 8008a10:	d90b      	bls.n	8008a2a <_free_r+0x4e>
 8008a12:	6821      	ldr	r1, [r4, #0]
 8008a14:	1862      	adds	r2, r4, r1
 8008a16:	4293      	cmp	r3, r2
 8008a18:	bf04      	itt	eq
 8008a1a:	681a      	ldreq	r2, [r3, #0]
 8008a1c:	685b      	ldreq	r3, [r3, #4]
 8008a1e:	6063      	str	r3, [r4, #4]
 8008a20:	bf04      	itt	eq
 8008a22:	1852      	addeq	r2, r2, r1
 8008a24:	6022      	streq	r2, [r4, #0]
 8008a26:	602c      	str	r4, [r5, #0]
 8008a28:	e7ec      	b.n	8008a04 <_free_r+0x28>
 8008a2a:	461a      	mov	r2, r3
 8008a2c:	685b      	ldr	r3, [r3, #4]
 8008a2e:	b10b      	cbz	r3, 8008a34 <_free_r+0x58>
 8008a30:	42a3      	cmp	r3, r4
 8008a32:	d9fa      	bls.n	8008a2a <_free_r+0x4e>
 8008a34:	6811      	ldr	r1, [r2, #0]
 8008a36:	1855      	adds	r5, r2, r1
 8008a38:	42a5      	cmp	r5, r4
 8008a3a:	d10b      	bne.n	8008a54 <_free_r+0x78>
 8008a3c:	6824      	ldr	r4, [r4, #0]
 8008a3e:	4421      	add	r1, r4
 8008a40:	1854      	adds	r4, r2, r1
 8008a42:	42a3      	cmp	r3, r4
 8008a44:	6011      	str	r1, [r2, #0]
 8008a46:	d1dd      	bne.n	8008a04 <_free_r+0x28>
 8008a48:	681c      	ldr	r4, [r3, #0]
 8008a4a:	685b      	ldr	r3, [r3, #4]
 8008a4c:	6053      	str	r3, [r2, #4]
 8008a4e:	4421      	add	r1, r4
 8008a50:	6011      	str	r1, [r2, #0]
 8008a52:	e7d7      	b.n	8008a04 <_free_r+0x28>
 8008a54:	d902      	bls.n	8008a5c <_free_r+0x80>
 8008a56:	230c      	movs	r3, #12
 8008a58:	6003      	str	r3, [r0, #0]
 8008a5a:	e7d3      	b.n	8008a04 <_free_r+0x28>
 8008a5c:	6825      	ldr	r5, [r4, #0]
 8008a5e:	1961      	adds	r1, r4, r5
 8008a60:	428b      	cmp	r3, r1
 8008a62:	bf04      	itt	eq
 8008a64:	6819      	ldreq	r1, [r3, #0]
 8008a66:	685b      	ldreq	r3, [r3, #4]
 8008a68:	6063      	str	r3, [r4, #4]
 8008a6a:	bf04      	itt	eq
 8008a6c:	1949      	addeq	r1, r1, r5
 8008a6e:	6021      	streq	r1, [r4, #0]
 8008a70:	6054      	str	r4, [r2, #4]
 8008a72:	e7c7      	b.n	8008a04 <_free_r+0x28>
 8008a74:	b003      	add	sp, #12
 8008a76:	bd30      	pop	{r4, r5, pc}
 8008a78:	20025c44 	.word	0x20025c44

08008a7c <_malloc_r>:
 8008a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a7e:	1ccd      	adds	r5, r1, #3
 8008a80:	f025 0503 	bic.w	r5, r5, #3
 8008a84:	3508      	adds	r5, #8
 8008a86:	2d0c      	cmp	r5, #12
 8008a88:	bf38      	it	cc
 8008a8a:	250c      	movcc	r5, #12
 8008a8c:	2d00      	cmp	r5, #0
 8008a8e:	4606      	mov	r6, r0
 8008a90:	db01      	blt.n	8008a96 <_malloc_r+0x1a>
 8008a92:	42a9      	cmp	r1, r5
 8008a94:	d903      	bls.n	8008a9e <_malloc_r+0x22>
 8008a96:	230c      	movs	r3, #12
 8008a98:	6033      	str	r3, [r6, #0]
 8008a9a:	2000      	movs	r0, #0
 8008a9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a9e:	f001 f93b 	bl	8009d18 <__malloc_lock>
 8008aa2:	4921      	ldr	r1, [pc, #132]	; (8008b28 <_malloc_r+0xac>)
 8008aa4:	680a      	ldr	r2, [r1, #0]
 8008aa6:	4614      	mov	r4, r2
 8008aa8:	b99c      	cbnz	r4, 8008ad2 <_malloc_r+0x56>
 8008aaa:	4f20      	ldr	r7, [pc, #128]	; (8008b2c <_malloc_r+0xb0>)
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	b923      	cbnz	r3, 8008aba <_malloc_r+0x3e>
 8008ab0:	4621      	mov	r1, r4
 8008ab2:	4630      	mov	r0, r6
 8008ab4:	f000 fcb4 	bl	8009420 <_sbrk_r>
 8008ab8:	6038      	str	r0, [r7, #0]
 8008aba:	4629      	mov	r1, r5
 8008abc:	4630      	mov	r0, r6
 8008abe:	f000 fcaf 	bl	8009420 <_sbrk_r>
 8008ac2:	1c43      	adds	r3, r0, #1
 8008ac4:	d123      	bne.n	8008b0e <_malloc_r+0x92>
 8008ac6:	230c      	movs	r3, #12
 8008ac8:	6033      	str	r3, [r6, #0]
 8008aca:	4630      	mov	r0, r6
 8008acc:	f001 f92a 	bl	8009d24 <__malloc_unlock>
 8008ad0:	e7e3      	b.n	8008a9a <_malloc_r+0x1e>
 8008ad2:	6823      	ldr	r3, [r4, #0]
 8008ad4:	1b5b      	subs	r3, r3, r5
 8008ad6:	d417      	bmi.n	8008b08 <_malloc_r+0x8c>
 8008ad8:	2b0b      	cmp	r3, #11
 8008ada:	d903      	bls.n	8008ae4 <_malloc_r+0x68>
 8008adc:	6023      	str	r3, [r4, #0]
 8008ade:	441c      	add	r4, r3
 8008ae0:	6025      	str	r5, [r4, #0]
 8008ae2:	e004      	b.n	8008aee <_malloc_r+0x72>
 8008ae4:	6863      	ldr	r3, [r4, #4]
 8008ae6:	42a2      	cmp	r2, r4
 8008ae8:	bf0c      	ite	eq
 8008aea:	600b      	streq	r3, [r1, #0]
 8008aec:	6053      	strne	r3, [r2, #4]
 8008aee:	4630      	mov	r0, r6
 8008af0:	f001 f918 	bl	8009d24 <__malloc_unlock>
 8008af4:	f104 000b 	add.w	r0, r4, #11
 8008af8:	1d23      	adds	r3, r4, #4
 8008afa:	f020 0007 	bic.w	r0, r0, #7
 8008afe:	1ac2      	subs	r2, r0, r3
 8008b00:	d0cc      	beq.n	8008a9c <_malloc_r+0x20>
 8008b02:	1a1b      	subs	r3, r3, r0
 8008b04:	50a3      	str	r3, [r4, r2]
 8008b06:	e7c9      	b.n	8008a9c <_malloc_r+0x20>
 8008b08:	4622      	mov	r2, r4
 8008b0a:	6864      	ldr	r4, [r4, #4]
 8008b0c:	e7cc      	b.n	8008aa8 <_malloc_r+0x2c>
 8008b0e:	1cc4      	adds	r4, r0, #3
 8008b10:	f024 0403 	bic.w	r4, r4, #3
 8008b14:	42a0      	cmp	r0, r4
 8008b16:	d0e3      	beq.n	8008ae0 <_malloc_r+0x64>
 8008b18:	1a21      	subs	r1, r4, r0
 8008b1a:	4630      	mov	r0, r6
 8008b1c:	f000 fc80 	bl	8009420 <_sbrk_r>
 8008b20:	3001      	adds	r0, #1
 8008b22:	d1dd      	bne.n	8008ae0 <_malloc_r+0x64>
 8008b24:	e7cf      	b.n	8008ac6 <_malloc_r+0x4a>
 8008b26:	bf00      	nop
 8008b28:	20025c44 	.word	0x20025c44
 8008b2c:	20025c48 	.word	0x20025c48

08008b30 <__sfputc_r>:
 8008b30:	6893      	ldr	r3, [r2, #8]
 8008b32:	3b01      	subs	r3, #1
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	b410      	push	{r4}
 8008b38:	6093      	str	r3, [r2, #8]
 8008b3a:	da08      	bge.n	8008b4e <__sfputc_r+0x1e>
 8008b3c:	6994      	ldr	r4, [r2, #24]
 8008b3e:	42a3      	cmp	r3, r4
 8008b40:	db01      	blt.n	8008b46 <__sfputc_r+0x16>
 8008b42:	290a      	cmp	r1, #10
 8008b44:	d103      	bne.n	8008b4e <__sfputc_r+0x1e>
 8008b46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b4a:	f000 be07 	b.w	800975c <__swbuf_r>
 8008b4e:	6813      	ldr	r3, [r2, #0]
 8008b50:	1c58      	adds	r0, r3, #1
 8008b52:	6010      	str	r0, [r2, #0]
 8008b54:	7019      	strb	r1, [r3, #0]
 8008b56:	4608      	mov	r0, r1
 8008b58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b5c:	4770      	bx	lr

08008b5e <__sfputs_r>:
 8008b5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b60:	4606      	mov	r6, r0
 8008b62:	460f      	mov	r7, r1
 8008b64:	4614      	mov	r4, r2
 8008b66:	18d5      	adds	r5, r2, r3
 8008b68:	42ac      	cmp	r4, r5
 8008b6a:	d101      	bne.n	8008b70 <__sfputs_r+0x12>
 8008b6c:	2000      	movs	r0, #0
 8008b6e:	e007      	b.n	8008b80 <__sfputs_r+0x22>
 8008b70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b74:	463a      	mov	r2, r7
 8008b76:	4630      	mov	r0, r6
 8008b78:	f7ff ffda 	bl	8008b30 <__sfputc_r>
 8008b7c:	1c43      	adds	r3, r0, #1
 8008b7e:	d1f3      	bne.n	8008b68 <__sfputs_r+0xa>
 8008b80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008b84 <_vfiprintf_r>:
 8008b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b88:	460d      	mov	r5, r1
 8008b8a:	b09d      	sub	sp, #116	; 0x74
 8008b8c:	4614      	mov	r4, r2
 8008b8e:	4698      	mov	r8, r3
 8008b90:	4606      	mov	r6, r0
 8008b92:	b118      	cbz	r0, 8008b9c <_vfiprintf_r+0x18>
 8008b94:	6983      	ldr	r3, [r0, #24]
 8008b96:	b90b      	cbnz	r3, 8008b9c <_vfiprintf_r+0x18>
 8008b98:	f000 ffba 	bl	8009b10 <__sinit>
 8008b9c:	4b89      	ldr	r3, [pc, #548]	; (8008dc4 <_vfiprintf_r+0x240>)
 8008b9e:	429d      	cmp	r5, r3
 8008ba0:	d11b      	bne.n	8008bda <_vfiprintf_r+0x56>
 8008ba2:	6875      	ldr	r5, [r6, #4]
 8008ba4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ba6:	07d9      	lsls	r1, r3, #31
 8008ba8:	d405      	bmi.n	8008bb6 <_vfiprintf_r+0x32>
 8008baa:	89ab      	ldrh	r3, [r5, #12]
 8008bac:	059a      	lsls	r2, r3, #22
 8008bae:	d402      	bmi.n	8008bb6 <_vfiprintf_r+0x32>
 8008bb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008bb2:	f001 f84b 	bl	8009c4c <__retarget_lock_acquire_recursive>
 8008bb6:	89ab      	ldrh	r3, [r5, #12]
 8008bb8:	071b      	lsls	r3, r3, #28
 8008bba:	d501      	bpl.n	8008bc0 <_vfiprintf_r+0x3c>
 8008bbc:	692b      	ldr	r3, [r5, #16]
 8008bbe:	b9eb      	cbnz	r3, 8008bfc <_vfiprintf_r+0x78>
 8008bc0:	4629      	mov	r1, r5
 8008bc2:	4630      	mov	r0, r6
 8008bc4:	f000 fe1c 	bl	8009800 <__swsetup_r>
 8008bc8:	b1c0      	cbz	r0, 8008bfc <_vfiprintf_r+0x78>
 8008bca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008bcc:	07dc      	lsls	r4, r3, #31
 8008bce:	d50e      	bpl.n	8008bee <_vfiprintf_r+0x6a>
 8008bd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008bd4:	b01d      	add	sp, #116	; 0x74
 8008bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bda:	4b7b      	ldr	r3, [pc, #492]	; (8008dc8 <_vfiprintf_r+0x244>)
 8008bdc:	429d      	cmp	r5, r3
 8008bde:	d101      	bne.n	8008be4 <_vfiprintf_r+0x60>
 8008be0:	68b5      	ldr	r5, [r6, #8]
 8008be2:	e7df      	b.n	8008ba4 <_vfiprintf_r+0x20>
 8008be4:	4b79      	ldr	r3, [pc, #484]	; (8008dcc <_vfiprintf_r+0x248>)
 8008be6:	429d      	cmp	r5, r3
 8008be8:	bf08      	it	eq
 8008bea:	68f5      	ldreq	r5, [r6, #12]
 8008bec:	e7da      	b.n	8008ba4 <_vfiprintf_r+0x20>
 8008bee:	89ab      	ldrh	r3, [r5, #12]
 8008bf0:	0598      	lsls	r0, r3, #22
 8008bf2:	d4ed      	bmi.n	8008bd0 <_vfiprintf_r+0x4c>
 8008bf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008bf6:	f001 f82a 	bl	8009c4e <__retarget_lock_release_recursive>
 8008bfa:	e7e9      	b.n	8008bd0 <_vfiprintf_r+0x4c>
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	9309      	str	r3, [sp, #36]	; 0x24
 8008c00:	2320      	movs	r3, #32
 8008c02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008c06:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c0a:	2330      	movs	r3, #48	; 0x30
 8008c0c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008dd0 <_vfiprintf_r+0x24c>
 8008c10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008c14:	f04f 0901 	mov.w	r9, #1
 8008c18:	4623      	mov	r3, r4
 8008c1a:	469a      	mov	sl, r3
 8008c1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c20:	b10a      	cbz	r2, 8008c26 <_vfiprintf_r+0xa2>
 8008c22:	2a25      	cmp	r2, #37	; 0x25
 8008c24:	d1f9      	bne.n	8008c1a <_vfiprintf_r+0x96>
 8008c26:	ebba 0b04 	subs.w	fp, sl, r4
 8008c2a:	d00b      	beq.n	8008c44 <_vfiprintf_r+0xc0>
 8008c2c:	465b      	mov	r3, fp
 8008c2e:	4622      	mov	r2, r4
 8008c30:	4629      	mov	r1, r5
 8008c32:	4630      	mov	r0, r6
 8008c34:	f7ff ff93 	bl	8008b5e <__sfputs_r>
 8008c38:	3001      	adds	r0, #1
 8008c3a:	f000 80aa 	beq.w	8008d92 <_vfiprintf_r+0x20e>
 8008c3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c40:	445a      	add	r2, fp
 8008c42:	9209      	str	r2, [sp, #36]	; 0x24
 8008c44:	f89a 3000 	ldrb.w	r3, [sl]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	f000 80a2 	beq.w	8008d92 <_vfiprintf_r+0x20e>
 8008c4e:	2300      	movs	r3, #0
 8008c50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008c54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c58:	f10a 0a01 	add.w	sl, sl, #1
 8008c5c:	9304      	str	r3, [sp, #16]
 8008c5e:	9307      	str	r3, [sp, #28]
 8008c60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c64:	931a      	str	r3, [sp, #104]	; 0x68
 8008c66:	4654      	mov	r4, sl
 8008c68:	2205      	movs	r2, #5
 8008c6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c6e:	4858      	ldr	r0, [pc, #352]	; (8008dd0 <_vfiprintf_r+0x24c>)
 8008c70:	f7f7 fad6 	bl	8000220 <memchr>
 8008c74:	9a04      	ldr	r2, [sp, #16]
 8008c76:	b9d8      	cbnz	r0, 8008cb0 <_vfiprintf_r+0x12c>
 8008c78:	06d1      	lsls	r1, r2, #27
 8008c7a:	bf44      	itt	mi
 8008c7c:	2320      	movmi	r3, #32
 8008c7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c82:	0713      	lsls	r3, r2, #28
 8008c84:	bf44      	itt	mi
 8008c86:	232b      	movmi	r3, #43	; 0x2b
 8008c88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c8c:	f89a 3000 	ldrb.w	r3, [sl]
 8008c90:	2b2a      	cmp	r3, #42	; 0x2a
 8008c92:	d015      	beq.n	8008cc0 <_vfiprintf_r+0x13c>
 8008c94:	9a07      	ldr	r2, [sp, #28]
 8008c96:	4654      	mov	r4, sl
 8008c98:	2000      	movs	r0, #0
 8008c9a:	f04f 0c0a 	mov.w	ip, #10
 8008c9e:	4621      	mov	r1, r4
 8008ca0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ca4:	3b30      	subs	r3, #48	; 0x30
 8008ca6:	2b09      	cmp	r3, #9
 8008ca8:	d94e      	bls.n	8008d48 <_vfiprintf_r+0x1c4>
 8008caa:	b1b0      	cbz	r0, 8008cda <_vfiprintf_r+0x156>
 8008cac:	9207      	str	r2, [sp, #28]
 8008cae:	e014      	b.n	8008cda <_vfiprintf_r+0x156>
 8008cb0:	eba0 0308 	sub.w	r3, r0, r8
 8008cb4:	fa09 f303 	lsl.w	r3, r9, r3
 8008cb8:	4313      	orrs	r3, r2
 8008cba:	9304      	str	r3, [sp, #16]
 8008cbc:	46a2      	mov	sl, r4
 8008cbe:	e7d2      	b.n	8008c66 <_vfiprintf_r+0xe2>
 8008cc0:	9b03      	ldr	r3, [sp, #12]
 8008cc2:	1d19      	adds	r1, r3, #4
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	9103      	str	r1, [sp, #12]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	bfbb      	ittet	lt
 8008ccc:	425b      	neglt	r3, r3
 8008cce:	f042 0202 	orrlt.w	r2, r2, #2
 8008cd2:	9307      	strge	r3, [sp, #28]
 8008cd4:	9307      	strlt	r3, [sp, #28]
 8008cd6:	bfb8      	it	lt
 8008cd8:	9204      	strlt	r2, [sp, #16]
 8008cda:	7823      	ldrb	r3, [r4, #0]
 8008cdc:	2b2e      	cmp	r3, #46	; 0x2e
 8008cde:	d10c      	bne.n	8008cfa <_vfiprintf_r+0x176>
 8008ce0:	7863      	ldrb	r3, [r4, #1]
 8008ce2:	2b2a      	cmp	r3, #42	; 0x2a
 8008ce4:	d135      	bne.n	8008d52 <_vfiprintf_r+0x1ce>
 8008ce6:	9b03      	ldr	r3, [sp, #12]
 8008ce8:	1d1a      	adds	r2, r3, #4
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	9203      	str	r2, [sp, #12]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	bfb8      	it	lt
 8008cf2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008cf6:	3402      	adds	r4, #2
 8008cf8:	9305      	str	r3, [sp, #20]
 8008cfa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008de0 <_vfiprintf_r+0x25c>
 8008cfe:	7821      	ldrb	r1, [r4, #0]
 8008d00:	2203      	movs	r2, #3
 8008d02:	4650      	mov	r0, sl
 8008d04:	f7f7 fa8c 	bl	8000220 <memchr>
 8008d08:	b140      	cbz	r0, 8008d1c <_vfiprintf_r+0x198>
 8008d0a:	2340      	movs	r3, #64	; 0x40
 8008d0c:	eba0 000a 	sub.w	r0, r0, sl
 8008d10:	fa03 f000 	lsl.w	r0, r3, r0
 8008d14:	9b04      	ldr	r3, [sp, #16]
 8008d16:	4303      	orrs	r3, r0
 8008d18:	3401      	adds	r4, #1
 8008d1a:	9304      	str	r3, [sp, #16]
 8008d1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d20:	482c      	ldr	r0, [pc, #176]	; (8008dd4 <_vfiprintf_r+0x250>)
 8008d22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008d26:	2206      	movs	r2, #6
 8008d28:	f7f7 fa7a 	bl	8000220 <memchr>
 8008d2c:	2800      	cmp	r0, #0
 8008d2e:	d03f      	beq.n	8008db0 <_vfiprintf_r+0x22c>
 8008d30:	4b29      	ldr	r3, [pc, #164]	; (8008dd8 <_vfiprintf_r+0x254>)
 8008d32:	bb1b      	cbnz	r3, 8008d7c <_vfiprintf_r+0x1f8>
 8008d34:	9b03      	ldr	r3, [sp, #12]
 8008d36:	3307      	adds	r3, #7
 8008d38:	f023 0307 	bic.w	r3, r3, #7
 8008d3c:	3308      	adds	r3, #8
 8008d3e:	9303      	str	r3, [sp, #12]
 8008d40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d42:	443b      	add	r3, r7
 8008d44:	9309      	str	r3, [sp, #36]	; 0x24
 8008d46:	e767      	b.n	8008c18 <_vfiprintf_r+0x94>
 8008d48:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d4c:	460c      	mov	r4, r1
 8008d4e:	2001      	movs	r0, #1
 8008d50:	e7a5      	b.n	8008c9e <_vfiprintf_r+0x11a>
 8008d52:	2300      	movs	r3, #0
 8008d54:	3401      	adds	r4, #1
 8008d56:	9305      	str	r3, [sp, #20]
 8008d58:	4619      	mov	r1, r3
 8008d5a:	f04f 0c0a 	mov.w	ip, #10
 8008d5e:	4620      	mov	r0, r4
 8008d60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d64:	3a30      	subs	r2, #48	; 0x30
 8008d66:	2a09      	cmp	r2, #9
 8008d68:	d903      	bls.n	8008d72 <_vfiprintf_r+0x1ee>
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d0c5      	beq.n	8008cfa <_vfiprintf_r+0x176>
 8008d6e:	9105      	str	r1, [sp, #20]
 8008d70:	e7c3      	b.n	8008cfa <_vfiprintf_r+0x176>
 8008d72:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d76:	4604      	mov	r4, r0
 8008d78:	2301      	movs	r3, #1
 8008d7a:	e7f0      	b.n	8008d5e <_vfiprintf_r+0x1da>
 8008d7c:	ab03      	add	r3, sp, #12
 8008d7e:	9300      	str	r3, [sp, #0]
 8008d80:	462a      	mov	r2, r5
 8008d82:	4b16      	ldr	r3, [pc, #88]	; (8008ddc <_vfiprintf_r+0x258>)
 8008d84:	a904      	add	r1, sp, #16
 8008d86:	4630      	mov	r0, r6
 8008d88:	f3af 8000 	nop.w
 8008d8c:	4607      	mov	r7, r0
 8008d8e:	1c78      	adds	r0, r7, #1
 8008d90:	d1d6      	bne.n	8008d40 <_vfiprintf_r+0x1bc>
 8008d92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d94:	07d9      	lsls	r1, r3, #31
 8008d96:	d405      	bmi.n	8008da4 <_vfiprintf_r+0x220>
 8008d98:	89ab      	ldrh	r3, [r5, #12]
 8008d9a:	059a      	lsls	r2, r3, #22
 8008d9c:	d402      	bmi.n	8008da4 <_vfiprintf_r+0x220>
 8008d9e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008da0:	f000 ff55 	bl	8009c4e <__retarget_lock_release_recursive>
 8008da4:	89ab      	ldrh	r3, [r5, #12]
 8008da6:	065b      	lsls	r3, r3, #25
 8008da8:	f53f af12 	bmi.w	8008bd0 <_vfiprintf_r+0x4c>
 8008dac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008dae:	e711      	b.n	8008bd4 <_vfiprintf_r+0x50>
 8008db0:	ab03      	add	r3, sp, #12
 8008db2:	9300      	str	r3, [sp, #0]
 8008db4:	462a      	mov	r2, r5
 8008db6:	4b09      	ldr	r3, [pc, #36]	; (8008ddc <_vfiprintf_r+0x258>)
 8008db8:	a904      	add	r1, sp, #16
 8008dba:	4630      	mov	r0, r6
 8008dbc:	f000 f880 	bl	8008ec0 <_printf_i>
 8008dc0:	e7e4      	b.n	8008d8c <_vfiprintf_r+0x208>
 8008dc2:	bf00      	nop
 8008dc4:	0801bd8c 	.word	0x0801bd8c
 8008dc8:	0801bdac 	.word	0x0801bdac
 8008dcc:	0801bd6c 	.word	0x0801bd6c
 8008dd0:	0801bbc0 	.word	0x0801bbc0
 8008dd4:	0801bbca 	.word	0x0801bbca
 8008dd8:	00000000 	.word	0x00000000
 8008ddc:	08008b5f 	.word	0x08008b5f
 8008de0:	0801bbc6 	.word	0x0801bbc6

08008de4 <_printf_common>:
 8008de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008de8:	4616      	mov	r6, r2
 8008dea:	4699      	mov	r9, r3
 8008dec:	688a      	ldr	r2, [r1, #8]
 8008dee:	690b      	ldr	r3, [r1, #16]
 8008df0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008df4:	4293      	cmp	r3, r2
 8008df6:	bfb8      	it	lt
 8008df8:	4613      	movlt	r3, r2
 8008dfa:	6033      	str	r3, [r6, #0]
 8008dfc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008e00:	4607      	mov	r7, r0
 8008e02:	460c      	mov	r4, r1
 8008e04:	b10a      	cbz	r2, 8008e0a <_printf_common+0x26>
 8008e06:	3301      	adds	r3, #1
 8008e08:	6033      	str	r3, [r6, #0]
 8008e0a:	6823      	ldr	r3, [r4, #0]
 8008e0c:	0699      	lsls	r1, r3, #26
 8008e0e:	bf42      	ittt	mi
 8008e10:	6833      	ldrmi	r3, [r6, #0]
 8008e12:	3302      	addmi	r3, #2
 8008e14:	6033      	strmi	r3, [r6, #0]
 8008e16:	6825      	ldr	r5, [r4, #0]
 8008e18:	f015 0506 	ands.w	r5, r5, #6
 8008e1c:	d106      	bne.n	8008e2c <_printf_common+0x48>
 8008e1e:	f104 0a19 	add.w	sl, r4, #25
 8008e22:	68e3      	ldr	r3, [r4, #12]
 8008e24:	6832      	ldr	r2, [r6, #0]
 8008e26:	1a9b      	subs	r3, r3, r2
 8008e28:	42ab      	cmp	r3, r5
 8008e2a:	dc26      	bgt.n	8008e7a <_printf_common+0x96>
 8008e2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008e30:	1e13      	subs	r3, r2, #0
 8008e32:	6822      	ldr	r2, [r4, #0]
 8008e34:	bf18      	it	ne
 8008e36:	2301      	movne	r3, #1
 8008e38:	0692      	lsls	r2, r2, #26
 8008e3a:	d42b      	bmi.n	8008e94 <_printf_common+0xb0>
 8008e3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008e40:	4649      	mov	r1, r9
 8008e42:	4638      	mov	r0, r7
 8008e44:	47c0      	blx	r8
 8008e46:	3001      	adds	r0, #1
 8008e48:	d01e      	beq.n	8008e88 <_printf_common+0xa4>
 8008e4a:	6823      	ldr	r3, [r4, #0]
 8008e4c:	68e5      	ldr	r5, [r4, #12]
 8008e4e:	6832      	ldr	r2, [r6, #0]
 8008e50:	f003 0306 	and.w	r3, r3, #6
 8008e54:	2b04      	cmp	r3, #4
 8008e56:	bf08      	it	eq
 8008e58:	1aad      	subeq	r5, r5, r2
 8008e5a:	68a3      	ldr	r3, [r4, #8]
 8008e5c:	6922      	ldr	r2, [r4, #16]
 8008e5e:	bf0c      	ite	eq
 8008e60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008e64:	2500      	movne	r5, #0
 8008e66:	4293      	cmp	r3, r2
 8008e68:	bfc4      	itt	gt
 8008e6a:	1a9b      	subgt	r3, r3, r2
 8008e6c:	18ed      	addgt	r5, r5, r3
 8008e6e:	2600      	movs	r6, #0
 8008e70:	341a      	adds	r4, #26
 8008e72:	42b5      	cmp	r5, r6
 8008e74:	d11a      	bne.n	8008eac <_printf_common+0xc8>
 8008e76:	2000      	movs	r0, #0
 8008e78:	e008      	b.n	8008e8c <_printf_common+0xa8>
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	4652      	mov	r2, sl
 8008e7e:	4649      	mov	r1, r9
 8008e80:	4638      	mov	r0, r7
 8008e82:	47c0      	blx	r8
 8008e84:	3001      	adds	r0, #1
 8008e86:	d103      	bne.n	8008e90 <_printf_common+0xac>
 8008e88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e90:	3501      	adds	r5, #1
 8008e92:	e7c6      	b.n	8008e22 <_printf_common+0x3e>
 8008e94:	18e1      	adds	r1, r4, r3
 8008e96:	1c5a      	adds	r2, r3, #1
 8008e98:	2030      	movs	r0, #48	; 0x30
 8008e9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008e9e:	4422      	add	r2, r4
 8008ea0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008ea4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008ea8:	3302      	adds	r3, #2
 8008eaa:	e7c7      	b.n	8008e3c <_printf_common+0x58>
 8008eac:	2301      	movs	r3, #1
 8008eae:	4622      	mov	r2, r4
 8008eb0:	4649      	mov	r1, r9
 8008eb2:	4638      	mov	r0, r7
 8008eb4:	47c0      	blx	r8
 8008eb6:	3001      	adds	r0, #1
 8008eb8:	d0e6      	beq.n	8008e88 <_printf_common+0xa4>
 8008eba:	3601      	adds	r6, #1
 8008ebc:	e7d9      	b.n	8008e72 <_printf_common+0x8e>
	...

08008ec0 <_printf_i>:
 8008ec0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ec4:	460c      	mov	r4, r1
 8008ec6:	4691      	mov	r9, r2
 8008ec8:	7e27      	ldrb	r7, [r4, #24]
 8008eca:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008ecc:	2f78      	cmp	r7, #120	; 0x78
 8008ece:	4680      	mov	r8, r0
 8008ed0:	469a      	mov	sl, r3
 8008ed2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008ed6:	d807      	bhi.n	8008ee8 <_printf_i+0x28>
 8008ed8:	2f62      	cmp	r7, #98	; 0x62
 8008eda:	d80a      	bhi.n	8008ef2 <_printf_i+0x32>
 8008edc:	2f00      	cmp	r7, #0
 8008ede:	f000 80d8 	beq.w	8009092 <_printf_i+0x1d2>
 8008ee2:	2f58      	cmp	r7, #88	; 0x58
 8008ee4:	f000 80a3 	beq.w	800902e <_printf_i+0x16e>
 8008ee8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008eec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008ef0:	e03a      	b.n	8008f68 <_printf_i+0xa8>
 8008ef2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008ef6:	2b15      	cmp	r3, #21
 8008ef8:	d8f6      	bhi.n	8008ee8 <_printf_i+0x28>
 8008efa:	a001      	add	r0, pc, #4	; (adr r0, 8008f00 <_printf_i+0x40>)
 8008efc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008f00:	08008f59 	.word	0x08008f59
 8008f04:	08008f6d 	.word	0x08008f6d
 8008f08:	08008ee9 	.word	0x08008ee9
 8008f0c:	08008ee9 	.word	0x08008ee9
 8008f10:	08008ee9 	.word	0x08008ee9
 8008f14:	08008ee9 	.word	0x08008ee9
 8008f18:	08008f6d 	.word	0x08008f6d
 8008f1c:	08008ee9 	.word	0x08008ee9
 8008f20:	08008ee9 	.word	0x08008ee9
 8008f24:	08008ee9 	.word	0x08008ee9
 8008f28:	08008ee9 	.word	0x08008ee9
 8008f2c:	08009079 	.word	0x08009079
 8008f30:	08008f9d 	.word	0x08008f9d
 8008f34:	0800905b 	.word	0x0800905b
 8008f38:	08008ee9 	.word	0x08008ee9
 8008f3c:	08008ee9 	.word	0x08008ee9
 8008f40:	0800909b 	.word	0x0800909b
 8008f44:	08008ee9 	.word	0x08008ee9
 8008f48:	08008f9d 	.word	0x08008f9d
 8008f4c:	08008ee9 	.word	0x08008ee9
 8008f50:	08008ee9 	.word	0x08008ee9
 8008f54:	08009063 	.word	0x08009063
 8008f58:	680b      	ldr	r3, [r1, #0]
 8008f5a:	1d1a      	adds	r2, r3, #4
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	600a      	str	r2, [r1, #0]
 8008f60:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008f64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008f68:	2301      	movs	r3, #1
 8008f6a:	e0a3      	b.n	80090b4 <_printf_i+0x1f4>
 8008f6c:	6825      	ldr	r5, [r4, #0]
 8008f6e:	6808      	ldr	r0, [r1, #0]
 8008f70:	062e      	lsls	r6, r5, #24
 8008f72:	f100 0304 	add.w	r3, r0, #4
 8008f76:	d50a      	bpl.n	8008f8e <_printf_i+0xce>
 8008f78:	6805      	ldr	r5, [r0, #0]
 8008f7a:	600b      	str	r3, [r1, #0]
 8008f7c:	2d00      	cmp	r5, #0
 8008f7e:	da03      	bge.n	8008f88 <_printf_i+0xc8>
 8008f80:	232d      	movs	r3, #45	; 0x2d
 8008f82:	426d      	negs	r5, r5
 8008f84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f88:	485e      	ldr	r0, [pc, #376]	; (8009104 <_printf_i+0x244>)
 8008f8a:	230a      	movs	r3, #10
 8008f8c:	e019      	b.n	8008fc2 <_printf_i+0x102>
 8008f8e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008f92:	6805      	ldr	r5, [r0, #0]
 8008f94:	600b      	str	r3, [r1, #0]
 8008f96:	bf18      	it	ne
 8008f98:	b22d      	sxthne	r5, r5
 8008f9a:	e7ef      	b.n	8008f7c <_printf_i+0xbc>
 8008f9c:	680b      	ldr	r3, [r1, #0]
 8008f9e:	6825      	ldr	r5, [r4, #0]
 8008fa0:	1d18      	adds	r0, r3, #4
 8008fa2:	6008      	str	r0, [r1, #0]
 8008fa4:	0628      	lsls	r0, r5, #24
 8008fa6:	d501      	bpl.n	8008fac <_printf_i+0xec>
 8008fa8:	681d      	ldr	r5, [r3, #0]
 8008faa:	e002      	b.n	8008fb2 <_printf_i+0xf2>
 8008fac:	0669      	lsls	r1, r5, #25
 8008fae:	d5fb      	bpl.n	8008fa8 <_printf_i+0xe8>
 8008fb0:	881d      	ldrh	r5, [r3, #0]
 8008fb2:	4854      	ldr	r0, [pc, #336]	; (8009104 <_printf_i+0x244>)
 8008fb4:	2f6f      	cmp	r7, #111	; 0x6f
 8008fb6:	bf0c      	ite	eq
 8008fb8:	2308      	moveq	r3, #8
 8008fba:	230a      	movne	r3, #10
 8008fbc:	2100      	movs	r1, #0
 8008fbe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008fc2:	6866      	ldr	r6, [r4, #4]
 8008fc4:	60a6      	str	r6, [r4, #8]
 8008fc6:	2e00      	cmp	r6, #0
 8008fc8:	bfa2      	ittt	ge
 8008fca:	6821      	ldrge	r1, [r4, #0]
 8008fcc:	f021 0104 	bicge.w	r1, r1, #4
 8008fd0:	6021      	strge	r1, [r4, #0]
 8008fd2:	b90d      	cbnz	r5, 8008fd8 <_printf_i+0x118>
 8008fd4:	2e00      	cmp	r6, #0
 8008fd6:	d04d      	beq.n	8009074 <_printf_i+0x1b4>
 8008fd8:	4616      	mov	r6, r2
 8008fda:	fbb5 f1f3 	udiv	r1, r5, r3
 8008fde:	fb03 5711 	mls	r7, r3, r1, r5
 8008fe2:	5dc7      	ldrb	r7, [r0, r7]
 8008fe4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008fe8:	462f      	mov	r7, r5
 8008fea:	42bb      	cmp	r3, r7
 8008fec:	460d      	mov	r5, r1
 8008fee:	d9f4      	bls.n	8008fda <_printf_i+0x11a>
 8008ff0:	2b08      	cmp	r3, #8
 8008ff2:	d10b      	bne.n	800900c <_printf_i+0x14c>
 8008ff4:	6823      	ldr	r3, [r4, #0]
 8008ff6:	07df      	lsls	r7, r3, #31
 8008ff8:	d508      	bpl.n	800900c <_printf_i+0x14c>
 8008ffa:	6923      	ldr	r3, [r4, #16]
 8008ffc:	6861      	ldr	r1, [r4, #4]
 8008ffe:	4299      	cmp	r1, r3
 8009000:	bfde      	ittt	le
 8009002:	2330      	movle	r3, #48	; 0x30
 8009004:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009008:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800900c:	1b92      	subs	r2, r2, r6
 800900e:	6122      	str	r2, [r4, #16]
 8009010:	f8cd a000 	str.w	sl, [sp]
 8009014:	464b      	mov	r3, r9
 8009016:	aa03      	add	r2, sp, #12
 8009018:	4621      	mov	r1, r4
 800901a:	4640      	mov	r0, r8
 800901c:	f7ff fee2 	bl	8008de4 <_printf_common>
 8009020:	3001      	adds	r0, #1
 8009022:	d14c      	bne.n	80090be <_printf_i+0x1fe>
 8009024:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009028:	b004      	add	sp, #16
 800902a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800902e:	4835      	ldr	r0, [pc, #212]	; (8009104 <_printf_i+0x244>)
 8009030:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009034:	6823      	ldr	r3, [r4, #0]
 8009036:	680e      	ldr	r6, [r1, #0]
 8009038:	061f      	lsls	r7, r3, #24
 800903a:	f856 5b04 	ldr.w	r5, [r6], #4
 800903e:	600e      	str	r6, [r1, #0]
 8009040:	d514      	bpl.n	800906c <_printf_i+0x1ac>
 8009042:	07d9      	lsls	r1, r3, #31
 8009044:	bf44      	itt	mi
 8009046:	f043 0320 	orrmi.w	r3, r3, #32
 800904a:	6023      	strmi	r3, [r4, #0]
 800904c:	b91d      	cbnz	r5, 8009056 <_printf_i+0x196>
 800904e:	6823      	ldr	r3, [r4, #0]
 8009050:	f023 0320 	bic.w	r3, r3, #32
 8009054:	6023      	str	r3, [r4, #0]
 8009056:	2310      	movs	r3, #16
 8009058:	e7b0      	b.n	8008fbc <_printf_i+0xfc>
 800905a:	6823      	ldr	r3, [r4, #0]
 800905c:	f043 0320 	orr.w	r3, r3, #32
 8009060:	6023      	str	r3, [r4, #0]
 8009062:	2378      	movs	r3, #120	; 0x78
 8009064:	4828      	ldr	r0, [pc, #160]	; (8009108 <_printf_i+0x248>)
 8009066:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800906a:	e7e3      	b.n	8009034 <_printf_i+0x174>
 800906c:	065e      	lsls	r6, r3, #25
 800906e:	bf48      	it	mi
 8009070:	b2ad      	uxthmi	r5, r5
 8009072:	e7e6      	b.n	8009042 <_printf_i+0x182>
 8009074:	4616      	mov	r6, r2
 8009076:	e7bb      	b.n	8008ff0 <_printf_i+0x130>
 8009078:	680b      	ldr	r3, [r1, #0]
 800907a:	6826      	ldr	r6, [r4, #0]
 800907c:	6960      	ldr	r0, [r4, #20]
 800907e:	1d1d      	adds	r5, r3, #4
 8009080:	600d      	str	r5, [r1, #0]
 8009082:	0635      	lsls	r5, r6, #24
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	d501      	bpl.n	800908c <_printf_i+0x1cc>
 8009088:	6018      	str	r0, [r3, #0]
 800908a:	e002      	b.n	8009092 <_printf_i+0x1d2>
 800908c:	0671      	lsls	r1, r6, #25
 800908e:	d5fb      	bpl.n	8009088 <_printf_i+0x1c8>
 8009090:	8018      	strh	r0, [r3, #0]
 8009092:	2300      	movs	r3, #0
 8009094:	6123      	str	r3, [r4, #16]
 8009096:	4616      	mov	r6, r2
 8009098:	e7ba      	b.n	8009010 <_printf_i+0x150>
 800909a:	680b      	ldr	r3, [r1, #0]
 800909c:	1d1a      	adds	r2, r3, #4
 800909e:	600a      	str	r2, [r1, #0]
 80090a0:	681e      	ldr	r6, [r3, #0]
 80090a2:	6862      	ldr	r2, [r4, #4]
 80090a4:	2100      	movs	r1, #0
 80090a6:	4630      	mov	r0, r6
 80090a8:	f7f7 f8ba 	bl	8000220 <memchr>
 80090ac:	b108      	cbz	r0, 80090b2 <_printf_i+0x1f2>
 80090ae:	1b80      	subs	r0, r0, r6
 80090b0:	6060      	str	r0, [r4, #4]
 80090b2:	6863      	ldr	r3, [r4, #4]
 80090b4:	6123      	str	r3, [r4, #16]
 80090b6:	2300      	movs	r3, #0
 80090b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80090bc:	e7a8      	b.n	8009010 <_printf_i+0x150>
 80090be:	6923      	ldr	r3, [r4, #16]
 80090c0:	4632      	mov	r2, r6
 80090c2:	4649      	mov	r1, r9
 80090c4:	4640      	mov	r0, r8
 80090c6:	47d0      	blx	sl
 80090c8:	3001      	adds	r0, #1
 80090ca:	d0ab      	beq.n	8009024 <_printf_i+0x164>
 80090cc:	6823      	ldr	r3, [r4, #0]
 80090ce:	079b      	lsls	r3, r3, #30
 80090d0:	d413      	bmi.n	80090fa <_printf_i+0x23a>
 80090d2:	68e0      	ldr	r0, [r4, #12]
 80090d4:	9b03      	ldr	r3, [sp, #12]
 80090d6:	4298      	cmp	r0, r3
 80090d8:	bfb8      	it	lt
 80090da:	4618      	movlt	r0, r3
 80090dc:	e7a4      	b.n	8009028 <_printf_i+0x168>
 80090de:	2301      	movs	r3, #1
 80090e0:	4632      	mov	r2, r6
 80090e2:	4649      	mov	r1, r9
 80090e4:	4640      	mov	r0, r8
 80090e6:	47d0      	blx	sl
 80090e8:	3001      	adds	r0, #1
 80090ea:	d09b      	beq.n	8009024 <_printf_i+0x164>
 80090ec:	3501      	adds	r5, #1
 80090ee:	68e3      	ldr	r3, [r4, #12]
 80090f0:	9903      	ldr	r1, [sp, #12]
 80090f2:	1a5b      	subs	r3, r3, r1
 80090f4:	42ab      	cmp	r3, r5
 80090f6:	dcf2      	bgt.n	80090de <_printf_i+0x21e>
 80090f8:	e7eb      	b.n	80090d2 <_printf_i+0x212>
 80090fa:	2500      	movs	r5, #0
 80090fc:	f104 0619 	add.w	r6, r4, #25
 8009100:	e7f5      	b.n	80090ee <_printf_i+0x22e>
 8009102:	bf00      	nop
 8009104:	0801bbd1 	.word	0x0801bbd1
 8009108:	0801bbe2 	.word	0x0801bbe2

0800910c <swapfunc>:
 800910c:	2b02      	cmp	r3, #2
 800910e:	b510      	push	{r4, lr}
 8009110:	d00a      	beq.n	8009128 <swapfunc+0x1c>
 8009112:	0892      	lsrs	r2, r2, #2
 8009114:	3a01      	subs	r2, #1
 8009116:	6803      	ldr	r3, [r0, #0]
 8009118:	680c      	ldr	r4, [r1, #0]
 800911a:	f840 4b04 	str.w	r4, [r0], #4
 800911e:	2a00      	cmp	r2, #0
 8009120:	f841 3b04 	str.w	r3, [r1], #4
 8009124:	dcf6      	bgt.n	8009114 <swapfunc+0x8>
 8009126:	bd10      	pop	{r4, pc}
 8009128:	4402      	add	r2, r0
 800912a:	780c      	ldrb	r4, [r1, #0]
 800912c:	7803      	ldrb	r3, [r0, #0]
 800912e:	f800 4b01 	strb.w	r4, [r0], #1
 8009132:	f801 3b01 	strb.w	r3, [r1], #1
 8009136:	1a13      	subs	r3, r2, r0
 8009138:	2b00      	cmp	r3, #0
 800913a:	dcf6      	bgt.n	800912a <swapfunc+0x1e>
 800913c:	e7f3      	b.n	8009126 <swapfunc+0x1a>

0800913e <med3.isra.0>:
 800913e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009140:	460f      	mov	r7, r1
 8009142:	4614      	mov	r4, r2
 8009144:	4606      	mov	r6, r0
 8009146:	461d      	mov	r5, r3
 8009148:	4798      	blx	r3
 800914a:	2800      	cmp	r0, #0
 800914c:	4621      	mov	r1, r4
 800914e:	4638      	mov	r0, r7
 8009150:	da0c      	bge.n	800916c <med3.isra.0+0x2e>
 8009152:	47a8      	blx	r5
 8009154:	2800      	cmp	r0, #0
 8009156:	da02      	bge.n	800915e <med3.isra.0+0x20>
 8009158:	463c      	mov	r4, r7
 800915a:	4620      	mov	r0, r4
 800915c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800915e:	4621      	mov	r1, r4
 8009160:	4630      	mov	r0, r6
 8009162:	47a8      	blx	r5
 8009164:	2800      	cmp	r0, #0
 8009166:	dbf8      	blt.n	800915a <med3.isra.0+0x1c>
 8009168:	4634      	mov	r4, r6
 800916a:	e7f6      	b.n	800915a <med3.isra.0+0x1c>
 800916c:	47a8      	blx	r5
 800916e:	2800      	cmp	r0, #0
 8009170:	dcf2      	bgt.n	8009158 <med3.isra.0+0x1a>
 8009172:	4621      	mov	r1, r4
 8009174:	4630      	mov	r0, r6
 8009176:	47a8      	blx	r5
 8009178:	2800      	cmp	r0, #0
 800917a:	daee      	bge.n	800915a <med3.isra.0+0x1c>
 800917c:	e7f4      	b.n	8009168 <med3.isra.0+0x2a>

0800917e <qsort>:
 800917e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009182:	469a      	mov	sl, r3
 8009184:	ea40 0302 	orr.w	r3, r0, r2
 8009188:	079b      	lsls	r3, r3, #30
 800918a:	b097      	sub	sp, #92	; 0x5c
 800918c:	4606      	mov	r6, r0
 800918e:	4614      	mov	r4, r2
 8009190:	d11a      	bne.n	80091c8 <qsort+0x4a>
 8009192:	f1b2 0804 	subs.w	r8, r2, #4
 8009196:	bf18      	it	ne
 8009198:	f04f 0801 	movne.w	r8, #1
 800919c:	2300      	movs	r3, #0
 800919e:	9302      	str	r3, [sp, #8]
 80091a0:	1933      	adds	r3, r6, r4
 80091a2:	fb04 f701 	mul.w	r7, r4, r1
 80091a6:	9301      	str	r3, [sp, #4]
 80091a8:	2906      	cmp	r1, #6
 80091aa:	eb06 0307 	add.w	r3, r6, r7
 80091ae:	9303      	str	r3, [sp, #12]
 80091b0:	d82a      	bhi.n	8009208 <qsort+0x8a>
 80091b2:	9b01      	ldr	r3, [sp, #4]
 80091b4:	9a03      	ldr	r2, [sp, #12]
 80091b6:	4293      	cmp	r3, r2
 80091b8:	d310      	bcc.n	80091dc <qsort+0x5e>
 80091ba:	9b02      	ldr	r3, [sp, #8]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	f040 811f 	bne.w	8009400 <qsort+0x282>
 80091c2:	b017      	add	sp, #92	; 0x5c
 80091c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091c8:	f04f 0802 	mov.w	r8, #2
 80091cc:	e7e6      	b.n	800919c <qsort+0x1e>
 80091ce:	4643      	mov	r3, r8
 80091d0:	4622      	mov	r2, r4
 80091d2:	4639      	mov	r1, r7
 80091d4:	4628      	mov	r0, r5
 80091d6:	f7ff ff99 	bl	800910c <swapfunc>
 80091da:	e00e      	b.n	80091fa <qsort+0x7c>
 80091dc:	9d01      	ldr	r5, [sp, #4]
 80091de:	e00d      	b.n	80091fc <qsort+0x7e>
 80091e0:	1b2f      	subs	r7, r5, r4
 80091e2:	4629      	mov	r1, r5
 80091e4:	4638      	mov	r0, r7
 80091e6:	47d0      	blx	sl
 80091e8:	2800      	cmp	r0, #0
 80091ea:	dd09      	ble.n	8009200 <qsort+0x82>
 80091ec:	f1b8 0f00 	cmp.w	r8, #0
 80091f0:	d1ed      	bne.n	80091ce <qsort+0x50>
 80091f2:	682b      	ldr	r3, [r5, #0]
 80091f4:	683a      	ldr	r2, [r7, #0]
 80091f6:	602a      	str	r2, [r5, #0]
 80091f8:	603b      	str	r3, [r7, #0]
 80091fa:	463d      	mov	r5, r7
 80091fc:	42ae      	cmp	r6, r5
 80091fe:	d3ef      	bcc.n	80091e0 <qsort+0x62>
 8009200:	9b01      	ldr	r3, [sp, #4]
 8009202:	4423      	add	r3, r4
 8009204:	9301      	str	r3, [sp, #4]
 8009206:	e7d4      	b.n	80091b2 <qsort+0x34>
 8009208:	ea4f 0951 	mov.w	r9, r1, lsr #1
 800920c:	1b3f      	subs	r7, r7, r4
 800920e:	2907      	cmp	r1, #7
 8009210:	fb04 6909 	mla	r9, r4, r9, r6
 8009214:	4437      	add	r7, r6
 8009216:	d022      	beq.n	800925e <qsort+0xe0>
 8009218:	2928      	cmp	r1, #40	; 0x28
 800921a:	d945      	bls.n	80092a8 <qsort+0x12a>
 800921c:	08c9      	lsrs	r1, r1, #3
 800921e:	fb04 f501 	mul.w	r5, r4, r1
 8009222:	4653      	mov	r3, sl
 8009224:	eb06 0245 	add.w	r2, r6, r5, lsl #1
 8009228:	1971      	adds	r1, r6, r5
 800922a:	4630      	mov	r0, r6
 800922c:	f7ff ff87 	bl	800913e <med3.isra.0>
 8009230:	4649      	mov	r1, r9
 8009232:	eb09 0205 	add.w	r2, r9, r5
 8009236:	4653      	mov	r3, sl
 8009238:	4683      	mov	fp, r0
 800923a:	1b48      	subs	r0, r1, r5
 800923c:	f7ff ff7f 	bl	800913e <med3.isra.0>
 8009240:	463a      	mov	r2, r7
 8009242:	4681      	mov	r9, r0
 8009244:	4653      	mov	r3, sl
 8009246:	1b79      	subs	r1, r7, r5
 8009248:	eba7 0045 	sub.w	r0, r7, r5, lsl #1
 800924c:	f7ff ff77 	bl	800913e <med3.isra.0>
 8009250:	4602      	mov	r2, r0
 8009252:	4649      	mov	r1, r9
 8009254:	4653      	mov	r3, sl
 8009256:	4658      	mov	r0, fp
 8009258:	f7ff ff71 	bl	800913e <med3.isra.0>
 800925c:	4681      	mov	r9, r0
 800925e:	f1b8 0f00 	cmp.w	r8, #0
 8009262:	d124      	bne.n	80092ae <qsort+0x130>
 8009264:	6833      	ldr	r3, [r6, #0]
 8009266:	f8d9 2000 	ldr.w	r2, [r9]
 800926a:	6032      	str	r2, [r6, #0]
 800926c:	f8c9 3000 	str.w	r3, [r9]
 8009270:	eb06 0b04 	add.w	fp, r6, r4
 8009274:	46b9      	mov	r9, r7
 8009276:	465d      	mov	r5, fp
 8009278:	2300      	movs	r3, #0
 800927a:	45bb      	cmp	fp, r7
 800927c:	d835      	bhi.n	80092ea <qsort+0x16c>
 800927e:	4631      	mov	r1, r6
 8009280:	4658      	mov	r0, fp
 8009282:	9304      	str	r3, [sp, #16]
 8009284:	47d0      	blx	sl
 8009286:	2800      	cmp	r0, #0
 8009288:	9b04      	ldr	r3, [sp, #16]
 800928a:	dc3e      	bgt.n	800930a <qsort+0x18c>
 800928c:	d10a      	bne.n	80092a4 <qsort+0x126>
 800928e:	f1b8 0f00 	cmp.w	r8, #0
 8009292:	d113      	bne.n	80092bc <qsort+0x13e>
 8009294:	682b      	ldr	r3, [r5, #0]
 8009296:	f8db 2000 	ldr.w	r2, [fp]
 800929a:	602a      	str	r2, [r5, #0]
 800929c:	f8cb 3000 	str.w	r3, [fp]
 80092a0:	4425      	add	r5, r4
 80092a2:	2301      	movs	r3, #1
 80092a4:	44a3      	add	fp, r4
 80092a6:	e7e8      	b.n	800927a <qsort+0xfc>
 80092a8:	463a      	mov	r2, r7
 80092aa:	46b3      	mov	fp, r6
 80092ac:	e7d1      	b.n	8009252 <qsort+0xd4>
 80092ae:	4643      	mov	r3, r8
 80092b0:	4622      	mov	r2, r4
 80092b2:	4649      	mov	r1, r9
 80092b4:	4630      	mov	r0, r6
 80092b6:	f7ff ff29 	bl	800910c <swapfunc>
 80092ba:	e7d9      	b.n	8009270 <qsort+0xf2>
 80092bc:	4643      	mov	r3, r8
 80092be:	4622      	mov	r2, r4
 80092c0:	4659      	mov	r1, fp
 80092c2:	4628      	mov	r0, r5
 80092c4:	f7ff ff22 	bl	800910c <swapfunc>
 80092c8:	e7ea      	b.n	80092a0 <qsort+0x122>
 80092ca:	d10b      	bne.n	80092e4 <qsort+0x166>
 80092cc:	f1b8 0f00 	cmp.w	r8, #0
 80092d0:	d114      	bne.n	80092fc <qsort+0x17e>
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	f8d9 2000 	ldr.w	r2, [r9]
 80092d8:	603a      	str	r2, [r7, #0]
 80092da:	f8c9 3000 	str.w	r3, [r9]
 80092de:	eba9 0904 	sub.w	r9, r9, r4
 80092e2:	2301      	movs	r3, #1
 80092e4:	9f04      	ldr	r7, [sp, #16]
 80092e6:	45bb      	cmp	fp, r7
 80092e8:	d90f      	bls.n	800930a <qsort+0x18c>
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d143      	bne.n	8009376 <qsort+0x1f8>
 80092ee:	9b01      	ldr	r3, [sp, #4]
 80092f0:	9a03      	ldr	r2, [sp, #12]
 80092f2:	4293      	cmp	r3, r2
 80092f4:	f4bf af61 	bcs.w	80091ba <qsort+0x3c>
 80092f8:	9d01      	ldr	r5, [sp, #4]
 80092fa:	e036      	b.n	800936a <qsort+0x1ec>
 80092fc:	4643      	mov	r3, r8
 80092fe:	4622      	mov	r2, r4
 8009300:	4649      	mov	r1, r9
 8009302:	4638      	mov	r0, r7
 8009304:	f7ff ff02 	bl	800910c <swapfunc>
 8009308:	e7e9      	b.n	80092de <qsort+0x160>
 800930a:	4631      	mov	r1, r6
 800930c:	4638      	mov	r0, r7
 800930e:	9305      	str	r3, [sp, #20]
 8009310:	47d0      	blx	sl
 8009312:	1b3b      	subs	r3, r7, r4
 8009314:	2800      	cmp	r0, #0
 8009316:	9304      	str	r3, [sp, #16]
 8009318:	9b05      	ldr	r3, [sp, #20]
 800931a:	dad6      	bge.n	80092ca <qsort+0x14c>
 800931c:	f1b8 0f00 	cmp.w	r8, #0
 8009320:	d006      	beq.n	8009330 <qsort+0x1b2>
 8009322:	4643      	mov	r3, r8
 8009324:	4622      	mov	r2, r4
 8009326:	4639      	mov	r1, r7
 8009328:	4658      	mov	r0, fp
 800932a:	f7ff feef 	bl	800910c <swapfunc>
 800932e:	e005      	b.n	800933c <qsort+0x1be>
 8009330:	f8db 3000 	ldr.w	r3, [fp]
 8009334:	683a      	ldr	r2, [r7, #0]
 8009336:	f8cb 2000 	str.w	r2, [fp]
 800933a:	603b      	str	r3, [r7, #0]
 800933c:	9f04      	ldr	r7, [sp, #16]
 800933e:	e7b0      	b.n	80092a2 <qsort+0x124>
 8009340:	4643      	mov	r3, r8
 8009342:	4622      	mov	r2, r4
 8009344:	4639      	mov	r1, r7
 8009346:	4628      	mov	r0, r5
 8009348:	f7ff fee0 	bl	800910c <swapfunc>
 800934c:	e00c      	b.n	8009368 <qsort+0x1ea>
 800934e:	1b2f      	subs	r7, r5, r4
 8009350:	4629      	mov	r1, r5
 8009352:	4638      	mov	r0, r7
 8009354:	47d0      	blx	sl
 8009356:	2800      	cmp	r0, #0
 8009358:	dd09      	ble.n	800936e <qsort+0x1f0>
 800935a:	f1b8 0f00 	cmp.w	r8, #0
 800935e:	d1ef      	bne.n	8009340 <qsort+0x1c2>
 8009360:	682b      	ldr	r3, [r5, #0]
 8009362:	683a      	ldr	r2, [r7, #0]
 8009364:	602a      	str	r2, [r5, #0]
 8009366:	603b      	str	r3, [r7, #0]
 8009368:	463d      	mov	r5, r7
 800936a:	42ae      	cmp	r6, r5
 800936c:	d3ef      	bcc.n	800934e <qsort+0x1d0>
 800936e:	9b01      	ldr	r3, [sp, #4]
 8009370:	4423      	add	r3, r4
 8009372:	9301      	str	r3, [sp, #4]
 8009374:	e7bb      	b.n	80092ee <qsort+0x170>
 8009376:	ebab 0305 	sub.w	r3, fp, r5
 800937a:	1baa      	subs	r2, r5, r6
 800937c:	429a      	cmp	r2, r3
 800937e:	bfa8      	it	ge
 8009380:	461a      	movge	r2, r3
 8009382:	9301      	str	r3, [sp, #4]
 8009384:	b12a      	cbz	r2, 8009392 <qsort+0x214>
 8009386:	4643      	mov	r3, r8
 8009388:	ebab 0102 	sub.w	r1, fp, r2
 800938c:	4630      	mov	r0, r6
 800938e:	f7ff febd 	bl	800910c <swapfunc>
 8009392:	9b03      	ldr	r3, [sp, #12]
 8009394:	eba3 0209 	sub.w	r2, r3, r9
 8009398:	eba9 0707 	sub.w	r7, r9, r7
 800939c:	1b12      	subs	r2, r2, r4
 800939e:	42ba      	cmp	r2, r7
 80093a0:	bf28      	it	cs
 80093a2:	463a      	movcs	r2, r7
 80093a4:	b12a      	cbz	r2, 80093b2 <qsort+0x234>
 80093a6:	9903      	ldr	r1, [sp, #12]
 80093a8:	4643      	mov	r3, r8
 80093aa:	1a89      	subs	r1, r1, r2
 80093ac:	4658      	mov	r0, fp
 80093ae:	f7ff fead 	bl	800910c <swapfunc>
 80093b2:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80093b6:	9b03      	ldr	r3, [sp, #12]
 80093b8:	454f      	cmp	r7, r9
 80093ba:	eba3 0007 	sub.w	r0, r3, r7
 80093be:	d904      	bls.n	80093ca <qsort+0x24c>
 80093c0:	4633      	mov	r3, r6
 80093c2:	46b9      	mov	r9, r7
 80093c4:	9f01      	ldr	r7, [sp, #4]
 80093c6:	4606      	mov	r6, r0
 80093c8:	4618      	mov	r0, r3
 80093ca:	42a7      	cmp	r7, r4
 80093cc:	d921      	bls.n	8009412 <qsort+0x294>
 80093ce:	fbb7 f1f4 	udiv	r1, r7, r4
 80093d2:	9b02      	ldr	r3, [sp, #8]
 80093d4:	2b07      	cmp	r3, #7
 80093d6:	d80d      	bhi.n	80093f4 <qsort+0x276>
 80093d8:	fbb9 f7f4 	udiv	r7, r9, r4
 80093dc:	aa16      	add	r2, sp, #88	; 0x58
 80093de:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80093e2:	f843 6c40 	str.w	r6, [r3, #-64]
 80093e6:	f843 7c3c 	str.w	r7, [r3, #-60]
 80093ea:	9b02      	ldr	r3, [sp, #8]
 80093ec:	3301      	adds	r3, #1
 80093ee:	9302      	str	r3, [sp, #8]
 80093f0:	4606      	mov	r6, r0
 80093f2:	e6d5      	b.n	80091a0 <qsort+0x22>
 80093f4:	4653      	mov	r3, sl
 80093f6:	4622      	mov	r2, r4
 80093f8:	f7ff fec1 	bl	800917e <qsort>
 80093fc:	45a1      	cmp	r9, r4
 80093fe:	d80b      	bhi.n	8009418 <qsort+0x29a>
 8009400:	9b02      	ldr	r3, [sp, #8]
 8009402:	aa16      	add	r2, sp, #88	; 0x58
 8009404:	3b01      	subs	r3, #1
 8009406:	9302      	str	r3, [sp, #8]
 8009408:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800940c:	e953 0110 	ldrd	r0, r1, [r3, #-64]	; 0x40
 8009410:	e7ee      	b.n	80093f0 <qsort+0x272>
 8009412:	45a1      	cmp	r9, r4
 8009414:	f67f aed1 	bls.w	80091ba <qsort+0x3c>
 8009418:	fbb9 f1f4 	udiv	r1, r9, r4
 800941c:	4630      	mov	r0, r6
 800941e:	e7e7      	b.n	80093f0 <qsort+0x272>

08009420 <_sbrk_r>:
 8009420:	b538      	push	{r3, r4, r5, lr}
 8009422:	4d06      	ldr	r5, [pc, #24]	; (800943c <_sbrk_r+0x1c>)
 8009424:	2300      	movs	r3, #0
 8009426:	4604      	mov	r4, r0
 8009428:	4608      	mov	r0, r1
 800942a:	602b      	str	r3, [r5, #0]
 800942c:	f7f8 fd2c 	bl	8001e88 <_sbrk>
 8009430:	1c43      	adds	r3, r0, #1
 8009432:	d102      	bne.n	800943a <_sbrk_r+0x1a>
 8009434:	682b      	ldr	r3, [r5, #0]
 8009436:	b103      	cbz	r3, 800943a <_sbrk_r+0x1a>
 8009438:	6023      	str	r3, [r4, #0]
 800943a:	bd38      	pop	{r3, r4, r5, pc}
 800943c:	20025f68 	.word	0x20025f68

08009440 <_raise_r>:
 8009440:	291f      	cmp	r1, #31
 8009442:	b538      	push	{r3, r4, r5, lr}
 8009444:	4604      	mov	r4, r0
 8009446:	460d      	mov	r5, r1
 8009448:	d904      	bls.n	8009454 <_raise_r+0x14>
 800944a:	2316      	movs	r3, #22
 800944c:	6003      	str	r3, [r0, #0]
 800944e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009452:	bd38      	pop	{r3, r4, r5, pc}
 8009454:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009456:	b112      	cbz	r2, 800945e <_raise_r+0x1e>
 8009458:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800945c:	b94b      	cbnz	r3, 8009472 <_raise_r+0x32>
 800945e:	4620      	mov	r0, r4
 8009460:	f000 f830 	bl	80094c4 <_getpid_r>
 8009464:	462a      	mov	r2, r5
 8009466:	4601      	mov	r1, r0
 8009468:	4620      	mov	r0, r4
 800946a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800946e:	f000 b817 	b.w	80094a0 <_kill_r>
 8009472:	2b01      	cmp	r3, #1
 8009474:	d00a      	beq.n	800948c <_raise_r+0x4c>
 8009476:	1c59      	adds	r1, r3, #1
 8009478:	d103      	bne.n	8009482 <_raise_r+0x42>
 800947a:	2316      	movs	r3, #22
 800947c:	6003      	str	r3, [r0, #0]
 800947e:	2001      	movs	r0, #1
 8009480:	e7e7      	b.n	8009452 <_raise_r+0x12>
 8009482:	2400      	movs	r4, #0
 8009484:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009488:	4628      	mov	r0, r5
 800948a:	4798      	blx	r3
 800948c:	2000      	movs	r0, #0
 800948e:	e7e0      	b.n	8009452 <_raise_r+0x12>

08009490 <raise>:
 8009490:	4b02      	ldr	r3, [pc, #8]	; (800949c <raise+0xc>)
 8009492:	4601      	mov	r1, r0
 8009494:	6818      	ldr	r0, [r3, #0]
 8009496:	f7ff bfd3 	b.w	8009440 <_raise_r>
 800949a:	bf00      	nop
 800949c:	20000010 	.word	0x20000010

080094a0 <_kill_r>:
 80094a0:	b538      	push	{r3, r4, r5, lr}
 80094a2:	4d07      	ldr	r5, [pc, #28]	; (80094c0 <_kill_r+0x20>)
 80094a4:	2300      	movs	r3, #0
 80094a6:	4604      	mov	r4, r0
 80094a8:	4608      	mov	r0, r1
 80094aa:	4611      	mov	r1, r2
 80094ac:	602b      	str	r3, [r5, #0]
 80094ae:	f7f8 fc63 	bl	8001d78 <_kill>
 80094b2:	1c43      	adds	r3, r0, #1
 80094b4:	d102      	bne.n	80094bc <_kill_r+0x1c>
 80094b6:	682b      	ldr	r3, [r5, #0]
 80094b8:	b103      	cbz	r3, 80094bc <_kill_r+0x1c>
 80094ba:	6023      	str	r3, [r4, #0]
 80094bc:	bd38      	pop	{r3, r4, r5, pc}
 80094be:	bf00      	nop
 80094c0:	20025f68 	.word	0x20025f68

080094c4 <_getpid_r>:
 80094c4:	f7f8 bc50 	b.w	8001d68 <_getpid>

080094c8 <siprintf>:
 80094c8:	b40e      	push	{r1, r2, r3}
 80094ca:	b500      	push	{lr}
 80094cc:	b09c      	sub	sp, #112	; 0x70
 80094ce:	ab1d      	add	r3, sp, #116	; 0x74
 80094d0:	9002      	str	r0, [sp, #8]
 80094d2:	9006      	str	r0, [sp, #24]
 80094d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80094d8:	4809      	ldr	r0, [pc, #36]	; (8009500 <siprintf+0x38>)
 80094da:	9107      	str	r1, [sp, #28]
 80094dc:	9104      	str	r1, [sp, #16]
 80094de:	4909      	ldr	r1, [pc, #36]	; (8009504 <siprintf+0x3c>)
 80094e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80094e4:	9105      	str	r1, [sp, #20]
 80094e6:	6800      	ldr	r0, [r0, #0]
 80094e8:	9301      	str	r3, [sp, #4]
 80094ea:	a902      	add	r1, sp, #8
 80094ec:	f000 fca2 	bl	8009e34 <_svfiprintf_r>
 80094f0:	9b02      	ldr	r3, [sp, #8]
 80094f2:	2200      	movs	r2, #0
 80094f4:	701a      	strb	r2, [r3, #0]
 80094f6:	b01c      	add	sp, #112	; 0x70
 80094f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80094fc:	b003      	add	sp, #12
 80094fe:	4770      	bx	lr
 8009500:	20000010 	.word	0x20000010
 8009504:	ffff0208 	.word	0xffff0208

08009508 <strcpy>:
 8009508:	4603      	mov	r3, r0
 800950a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800950e:	f803 2b01 	strb.w	r2, [r3], #1
 8009512:	2a00      	cmp	r2, #0
 8009514:	d1f9      	bne.n	800950a <strcpy+0x2>
 8009516:	4770      	bx	lr

08009518 <strncmp>:
 8009518:	b510      	push	{r4, lr}
 800951a:	b16a      	cbz	r2, 8009538 <strncmp+0x20>
 800951c:	3901      	subs	r1, #1
 800951e:	1884      	adds	r4, r0, r2
 8009520:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009524:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009528:	4293      	cmp	r3, r2
 800952a:	d103      	bne.n	8009534 <strncmp+0x1c>
 800952c:	42a0      	cmp	r0, r4
 800952e:	d001      	beq.n	8009534 <strncmp+0x1c>
 8009530:	2b00      	cmp	r3, #0
 8009532:	d1f5      	bne.n	8009520 <strncmp+0x8>
 8009534:	1a98      	subs	r0, r3, r2
 8009536:	bd10      	pop	{r4, pc}
 8009538:	4610      	mov	r0, r2
 800953a:	e7fc      	b.n	8009536 <strncmp+0x1e>

0800953c <strncpy>:
 800953c:	b510      	push	{r4, lr}
 800953e:	3901      	subs	r1, #1
 8009540:	4603      	mov	r3, r0
 8009542:	b132      	cbz	r2, 8009552 <strncpy+0x16>
 8009544:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009548:	f803 4b01 	strb.w	r4, [r3], #1
 800954c:	3a01      	subs	r2, #1
 800954e:	2c00      	cmp	r4, #0
 8009550:	d1f7      	bne.n	8009542 <strncpy+0x6>
 8009552:	441a      	add	r2, r3
 8009554:	2100      	movs	r1, #0
 8009556:	4293      	cmp	r3, r2
 8009558:	d100      	bne.n	800955c <strncpy+0x20>
 800955a:	bd10      	pop	{r4, pc}
 800955c:	f803 1b01 	strb.w	r1, [r3], #1
 8009560:	e7f9      	b.n	8009556 <strncpy+0x1a>
	...

08009564 <strtok>:
 8009564:	4b16      	ldr	r3, [pc, #88]	; (80095c0 <strtok+0x5c>)
 8009566:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009568:	681e      	ldr	r6, [r3, #0]
 800956a:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800956c:	4605      	mov	r5, r0
 800956e:	b9fc      	cbnz	r4, 80095b0 <strtok+0x4c>
 8009570:	2050      	movs	r0, #80	; 0x50
 8009572:	9101      	str	r1, [sp, #4]
 8009574:	f7ff f9fa 	bl	800896c <malloc>
 8009578:	9901      	ldr	r1, [sp, #4]
 800957a:	65b0      	str	r0, [r6, #88]	; 0x58
 800957c:	4602      	mov	r2, r0
 800957e:	b920      	cbnz	r0, 800958a <strtok+0x26>
 8009580:	4b10      	ldr	r3, [pc, #64]	; (80095c4 <strtok+0x60>)
 8009582:	4811      	ldr	r0, [pc, #68]	; (80095c8 <strtok+0x64>)
 8009584:	2157      	movs	r1, #87	; 0x57
 8009586:	f7ff f997 	bl	80088b8 <__assert_func>
 800958a:	e9c0 4400 	strd	r4, r4, [r0]
 800958e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8009592:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8009596:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800959a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800959e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80095a2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80095a6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80095aa:	6184      	str	r4, [r0, #24]
 80095ac:	7704      	strb	r4, [r0, #28]
 80095ae:	6244      	str	r4, [r0, #36]	; 0x24
 80095b0:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80095b2:	2301      	movs	r3, #1
 80095b4:	4628      	mov	r0, r5
 80095b6:	b002      	add	sp, #8
 80095b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80095bc:	f000 b806 	b.w	80095cc <__strtok_r>
 80095c0:	20000010 	.word	0x20000010
 80095c4:	0801bbf3 	.word	0x0801bbf3
 80095c8:	0801bc0a 	.word	0x0801bc0a

080095cc <__strtok_r>:
 80095cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095ce:	b908      	cbnz	r0, 80095d4 <__strtok_r+0x8>
 80095d0:	6810      	ldr	r0, [r2, #0]
 80095d2:	b188      	cbz	r0, 80095f8 <__strtok_r+0x2c>
 80095d4:	4604      	mov	r4, r0
 80095d6:	4620      	mov	r0, r4
 80095d8:	f814 5b01 	ldrb.w	r5, [r4], #1
 80095dc:	460f      	mov	r7, r1
 80095de:	f817 6b01 	ldrb.w	r6, [r7], #1
 80095e2:	b91e      	cbnz	r6, 80095ec <__strtok_r+0x20>
 80095e4:	b965      	cbnz	r5, 8009600 <__strtok_r+0x34>
 80095e6:	6015      	str	r5, [r2, #0]
 80095e8:	4628      	mov	r0, r5
 80095ea:	e005      	b.n	80095f8 <__strtok_r+0x2c>
 80095ec:	42b5      	cmp	r5, r6
 80095ee:	d1f6      	bne.n	80095de <__strtok_r+0x12>
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d1f0      	bne.n	80095d6 <__strtok_r+0xa>
 80095f4:	6014      	str	r4, [r2, #0]
 80095f6:	7003      	strb	r3, [r0, #0]
 80095f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095fa:	461c      	mov	r4, r3
 80095fc:	e00c      	b.n	8009618 <__strtok_r+0x4c>
 80095fe:	b915      	cbnz	r5, 8009606 <__strtok_r+0x3a>
 8009600:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009604:	460e      	mov	r6, r1
 8009606:	f816 5b01 	ldrb.w	r5, [r6], #1
 800960a:	42ab      	cmp	r3, r5
 800960c:	d1f7      	bne.n	80095fe <__strtok_r+0x32>
 800960e:	2b00      	cmp	r3, #0
 8009610:	d0f3      	beq.n	80095fa <__strtok_r+0x2e>
 8009612:	2300      	movs	r3, #0
 8009614:	f804 3c01 	strb.w	r3, [r4, #-1]
 8009618:	6014      	str	r4, [r2, #0]
 800961a:	e7ed      	b.n	80095f8 <__strtok_r+0x2c>

0800961c <_strtoll_l.isra.0>:
 800961c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009620:	b087      	sub	sp, #28
 8009622:	4691      	mov	r9, r2
 8009624:	4a47      	ldr	r2, [pc, #284]	; (8009744 <_strtoll_l.isra.0+0x128>)
 8009626:	9005      	str	r0, [sp, #20]
 8009628:	4688      	mov	r8, r1
 800962a:	461f      	mov	r7, r3
 800962c:	460d      	mov	r5, r1
 800962e:	462b      	mov	r3, r5
 8009630:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009634:	5ca6      	ldrb	r6, [r4, r2]
 8009636:	f016 0608 	ands.w	r6, r6, #8
 800963a:	d1f8      	bne.n	800962e <_strtoll_l.isra.0+0x12>
 800963c:	2c2d      	cmp	r4, #45	; 0x2d
 800963e:	d147      	bne.n	80096d0 <_strtoll_l.isra.0+0xb4>
 8009640:	782c      	ldrb	r4, [r5, #0]
 8009642:	2601      	movs	r6, #1
 8009644:	1c9d      	adds	r5, r3, #2
 8009646:	2f00      	cmp	r7, #0
 8009648:	d077      	beq.n	800973a <_strtoll_l.isra.0+0x11e>
 800964a:	2f10      	cmp	r7, #16
 800964c:	d109      	bne.n	8009662 <_strtoll_l.isra.0+0x46>
 800964e:	2c30      	cmp	r4, #48	; 0x30
 8009650:	d107      	bne.n	8009662 <_strtoll_l.isra.0+0x46>
 8009652:	782b      	ldrb	r3, [r5, #0]
 8009654:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009658:	2b58      	cmp	r3, #88	; 0x58
 800965a:	d169      	bne.n	8009730 <_strtoll_l.isra.0+0x114>
 800965c:	786c      	ldrb	r4, [r5, #1]
 800965e:	2710      	movs	r7, #16
 8009660:	3502      	adds	r5, #2
 8009662:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009666:	1990      	adds	r0, r2, r6
 8009668:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800966c:	ea4f 7be7 	mov.w	fp, r7, asr #31
 8009670:	eb43 71e6 	adc.w	r1, r3, r6, asr #31
 8009674:	463a      	mov	r2, r7
 8009676:	465b      	mov	r3, fp
 8009678:	e9cd 0100 	strd	r0, r1, [sp]
 800967c:	f7f6 fe28 	bl	80002d0 <__aeabi_uldivmod>
 8009680:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009684:	46ba      	mov	sl, r7
 8009686:	4696      	mov	lr, r2
 8009688:	2300      	movs	r3, #0
 800968a:	2000      	movs	r0, #0
 800968c:	2100      	movs	r1, #0
 800968e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009692:	f1bc 0f09 	cmp.w	ip, #9
 8009696:	d820      	bhi.n	80096da <_strtoll_l.isra.0+0xbe>
 8009698:	4664      	mov	r4, ip
 800969a:	42a7      	cmp	r7, r4
 800969c:	dd2e      	ble.n	80096fc <_strtoll_l.isra.0+0xe0>
 800969e:	1c5a      	adds	r2, r3, #1
 80096a0:	d013      	beq.n	80096ca <_strtoll_l.isra.0+0xae>
 80096a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80096a6:	428b      	cmp	r3, r1
 80096a8:	bf08      	it	eq
 80096aa:	4282      	cmpeq	r2, r0
 80096ac:	d323      	bcc.n	80096f6 <_strtoll_l.isra.0+0xda>
 80096ae:	d101      	bne.n	80096b4 <_strtoll_l.isra.0+0x98>
 80096b0:	45a6      	cmp	lr, r4
 80096b2:	db20      	blt.n	80096f6 <_strtoll_l.isra.0+0xda>
 80096b4:	fb0a f301 	mul.w	r3, sl, r1
 80096b8:	fb00 330b 	mla	r3, r0, fp, r3
 80096bc:	fbaa 0100 	umull	r0, r1, sl, r0
 80096c0:	4419      	add	r1, r3
 80096c2:	1900      	adds	r0, r0, r4
 80096c4:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 80096c8:	2301      	movs	r3, #1
 80096ca:	f815 4b01 	ldrb.w	r4, [r5], #1
 80096ce:	e7de      	b.n	800968e <_strtoll_l.isra.0+0x72>
 80096d0:	2c2b      	cmp	r4, #43	; 0x2b
 80096d2:	bf04      	itt	eq
 80096d4:	782c      	ldrbeq	r4, [r5, #0]
 80096d6:	1c9d      	addeq	r5, r3, #2
 80096d8:	e7b5      	b.n	8009646 <_strtoll_l.isra.0+0x2a>
 80096da:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80096de:	f1bc 0f19 	cmp.w	ip, #25
 80096e2:	d801      	bhi.n	80096e8 <_strtoll_l.isra.0+0xcc>
 80096e4:	3c37      	subs	r4, #55	; 0x37
 80096e6:	e7d8      	b.n	800969a <_strtoll_l.isra.0+0x7e>
 80096e8:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80096ec:	f1bc 0f19 	cmp.w	ip, #25
 80096f0:	d804      	bhi.n	80096fc <_strtoll_l.isra.0+0xe0>
 80096f2:	3c57      	subs	r4, #87	; 0x57
 80096f4:	e7d1      	b.n	800969a <_strtoll_l.isra.0+0x7e>
 80096f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80096fa:	e7e6      	b.n	80096ca <_strtoll_l.isra.0+0xae>
 80096fc:	1c5a      	adds	r2, r3, #1
 80096fe:	d10a      	bne.n	8009716 <_strtoll_l.isra.0+0xfa>
 8009700:	9a05      	ldr	r2, [sp, #20]
 8009702:	2322      	movs	r3, #34	; 0x22
 8009704:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009708:	6013      	str	r3, [r2, #0]
 800970a:	f1b9 0f00 	cmp.w	r9, #0
 800970e:	d10a      	bne.n	8009726 <_strtoll_l.isra.0+0x10a>
 8009710:	b007      	add	sp, #28
 8009712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009716:	b116      	cbz	r6, 800971e <_strtoll_l.isra.0+0x102>
 8009718:	4240      	negs	r0, r0
 800971a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800971e:	f1b9 0f00 	cmp.w	r9, #0
 8009722:	d0f5      	beq.n	8009710 <_strtoll_l.isra.0+0xf4>
 8009724:	b10b      	cbz	r3, 800972a <_strtoll_l.isra.0+0x10e>
 8009726:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800972a:	f8c9 8000 	str.w	r8, [r9]
 800972e:	e7ef      	b.n	8009710 <_strtoll_l.isra.0+0xf4>
 8009730:	2430      	movs	r4, #48	; 0x30
 8009732:	2f00      	cmp	r7, #0
 8009734:	d195      	bne.n	8009662 <_strtoll_l.isra.0+0x46>
 8009736:	2708      	movs	r7, #8
 8009738:	e793      	b.n	8009662 <_strtoll_l.isra.0+0x46>
 800973a:	2c30      	cmp	r4, #48	; 0x30
 800973c:	d089      	beq.n	8009652 <_strtoll_l.isra.0+0x36>
 800973e:	270a      	movs	r7, #10
 8009740:	e78f      	b.n	8009662 <_strtoll_l.isra.0+0x46>
 8009742:	bf00      	nop
 8009744:	0801bc6c 	.word	0x0801bc6c

08009748 <strtoll>:
 8009748:	4613      	mov	r3, r2
 800974a:	460a      	mov	r2, r1
 800974c:	4601      	mov	r1, r0
 800974e:	4802      	ldr	r0, [pc, #8]	; (8009758 <strtoll+0x10>)
 8009750:	6800      	ldr	r0, [r0, #0]
 8009752:	f7ff bf63 	b.w	800961c <_strtoll_l.isra.0>
 8009756:	bf00      	nop
 8009758:	20000010 	.word	0x20000010

0800975c <__swbuf_r>:
 800975c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800975e:	460e      	mov	r6, r1
 8009760:	4614      	mov	r4, r2
 8009762:	4605      	mov	r5, r0
 8009764:	b118      	cbz	r0, 800976e <__swbuf_r+0x12>
 8009766:	6983      	ldr	r3, [r0, #24]
 8009768:	b90b      	cbnz	r3, 800976e <__swbuf_r+0x12>
 800976a:	f000 f9d1 	bl	8009b10 <__sinit>
 800976e:	4b21      	ldr	r3, [pc, #132]	; (80097f4 <__swbuf_r+0x98>)
 8009770:	429c      	cmp	r4, r3
 8009772:	d12b      	bne.n	80097cc <__swbuf_r+0x70>
 8009774:	686c      	ldr	r4, [r5, #4]
 8009776:	69a3      	ldr	r3, [r4, #24]
 8009778:	60a3      	str	r3, [r4, #8]
 800977a:	89a3      	ldrh	r3, [r4, #12]
 800977c:	071a      	lsls	r2, r3, #28
 800977e:	d52f      	bpl.n	80097e0 <__swbuf_r+0x84>
 8009780:	6923      	ldr	r3, [r4, #16]
 8009782:	b36b      	cbz	r3, 80097e0 <__swbuf_r+0x84>
 8009784:	6923      	ldr	r3, [r4, #16]
 8009786:	6820      	ldr	r0, [r4, #0]
 8009788:	1ac0      	subs	r0, r0, r3
 800978a:	6963      	ldr	r3, [r4, #20]
 800978c:	b2f6      	uxtb	r6, r6
 800978e:	4283      	cmp	r3, r0
 8009790:	4637      	mov	r7, r6
 8009792:	dc04      	bgt.n	800979e <__swbuf_r+0x42>
 8009794:	4621      	mov	r1, r4
 8009796:	4628      	mov	r0, r5
 8009798:	f000 f926 	bl	80099e8 <_fflush_r>
 800979c:	bb30      	cbnz	r0, 80097ec <__swbuf_r+0x90>
 800979e:	68a3      	ldr	r3, [r4, #8]
 80097a0:	3b01      	subs	r3, #1
 80097a2:	60a3      	str	r3, [r4, #8]
 80097a4:	6823      	ldr	r3, [r4, #0]
 80097a6:	1c5a      	adds	r2, r3, #1
 80097a8:	6022      	str	r2, [r4, #0]
 80097aa:	701e      	strb	r6, [r3, #0]
 80097ac:	6963      	ldr	r3, [r4, #20]
 80097ae:	3001      	adds	r0, #1
 80097b0:	4283      	cmp	r3, r0
 80097b2:	d004      	beq.n	80097be <__swbuf_r+0x62>
 80097b4:	89a3      	ldrh	r3, [r4, #12]
 80097b6:	07db      	lsls	r3, r3, #31
 80097b8:	d506      	bpl.n	80097c8 <__swbuf_r+0x6c>
 80097ba:	2e0a      	cmp	r6, #10
 80097bc:	d104      	bne.n	80097c8 <__swbuf_r+0x6c>
 80097be:	4621      	mov	r1, r4
 80097c0:	4628      	mov	r0, r5
 80097c2:	f000 f911 	bl	80099e8 <_fflush_r>
 80097c6:	b988      	cbnz	r0, 80097ec <__swbuf_r+0x90>
 80097c8:	4638      	mov	r0, r7
 80097ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097cc:	4b0a      	ldr	r3, [pc, #40]	; (80097f8 <__swbuf_r+0x9c>)
 80097ce:	429c      	cmp	r4, r3
 80097d0:	d101      	bne.n	80097d6 <__swbuf_r+0x7a>
 80097d2:	68ac      	ldr	r4, [r5, #8]
 80097d4:	e7cf      	b.n	8009776 <__swbuf_r+0x1a>
 80097d6:	4b09      	ldr	r3, [pc, #36]	; (80097fc <__swbuf_r+0xa0>)
 80097d8:	429c      	cmp	r4, r3
 80097da:	bf08      	it	eq
 80097dc:	68ec      	ldreq	r4, [r5, #12]
 80097de:	e7ca      	b.n	8009776 <__swbuf_r+0x1a>
 80097e0:	4621      	mov	r1, r4
 80097e2:	4628      	mov	r0, r5
 80097e4:	f000 f80c 	bl	8009800 <__swsetup_r>
 80097e8:	2800      	cmp	r0, #0
 80097ea:	d0cb      	beq.n	8009784 <__swbuf_r+0x28>
 80097ec:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80097f0:	e7ea      	b.n	80097c8 <__swbuf_r+0x6c>
 80097f2:	bf00      	nop
 80097f4:	0801bd8c 	.word	0x0801bd8c
 80097f8:	0801bdac 	.word	0x0801bdac
 80097fc:	0801bd6c 	.word	0x0801bd6c

08009800 <__swsetup_r>:
 8009800:	4b32      	ldr	r3, [pc, #200]	; (80098cc <__swsetup_r+0xcc>)
 8009802:	b570      	push	{r4, r5, r6, lr}
 8009804:	681d      	ldr	r5, [r3, #0]
 8009806:	4606      	mov	r6, r0
 8009808:	460c      	mov	r4, r1
 800980a:	b125      	cbz	r5, 8009816 <__swsetup_r+0x16>
 800980c:	69ab      	ldr	r3, [r5, #24]
 800980e:	b913      	cbnz	r3, 8009816 <__swsetup_r+0x16>
 8009810:	4628      	mov	r0, r5
 8009812:	f000 f97d 	bl	8009b10 <__sinit>
 8009816:	4b2e      	ldr	r3, [pc, #184]	; (80098d0 <__swsetup_r+0xd0>)
 8009818:	429c      	cmp	r4, r3
 800981a:	d10f      	bne.n	800983c <__swsetup_r+0x3c>
 800981c:	686c      	ldr	r4, [r5, #4]
 800981e:	89a3      	ldrh	r3, [r4, #12]
 8009820:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009824:	0719      	lsls	r1, r3, #28
 8009826:	d42c      	bmi.n	8009882 <__swsetup_r+0x82>
 8009828:	06dd      	lsls	r5, r3, #27
 800982a:	d411      	bmi.n	8009850 <__swsetup_r+0x50>
 800982c:	2309      	movs	r3, #9
 800982e:	6033      	str	r3, [r6, #0]
 8009830:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009834:	81a3      	strh	r3, [r4, #12]
 8009836:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800983a:	e03e      	b.n	80098ba <__swsetup_r+0xba>
 800983c:	4b25      	ldr	r3, [pc, #148]	; (80098d4 <__swsetup_r+0xd4>)
 800983e:	429c      	cmp	r4, r3
 8009840:	d101      	bne.n	8009846 <__swsetup_r+0x46>
 8009842:	68ac      	ldr	r4, [r5, #8]
 8009844:	e7eb      	b.n	800981e <__swsetup_r+0x1e>
 8009846:	4b24      	ldr	r3, [pc, #144]	; (80098d8 <__swsetup_r+0xd8>)
 8009848:	429c      	cmp	r4, r3
 800984a:	bf08      	it	eq
 800984c:	68ec      	ldreq	r4, [r5, #12]
 800984e:	e7e6      	b.n	800981e <__swsetup_r+0x1e>
 8009850:	0758      	lsls	r0, r3, #29
 8009852:	d512      	bpl.n	800987a <__swsetup_r+0x7a>
 8009854:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009856:	b141      	cbz	r1, 800986a <__swsetup_r+0x6a>
 8009858:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800985c:	4299      	cmp	r1, r3
 800985e:	d002      	beq.n	8009866 <__swsetup_r+0x66>
 8009860:	4630      	mov	r0, r6
 8009862:	f7ff f8bb 	bl	80089dc <_free_r>
 8009866:	2300      	movs	r3, #0
 8009868:	6363      	str	r3, [r4, #52]	; 0x34
 800986a:	89a3      	ldrh	r3, [r4, #12]
 800986c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009870:	81a3      	strh	r3, [r4, #12]
 8009872:	2300      	movs	r3, #0
 8009874:	6063      	str	r3, [r4, #4]
 8009876:	6923      	ldr	r3, [r4, #16]
 8009878:	6023      	str	r3, [r4, #0]
 800987a:	89a3      	ldrh	r3, [r4, #12]
 800987c:	f043 0308 	orr.w	r3, r3, #8
 8009880:	81a3      	strh	r3, [r4, #12]
 8009882:	6923      	ldr	r3, [r4, #16]
 8009884:	b94b      	cbnz	r3, 800989a <__swsetup_r+0x9a>
 8009886:	89a3      	ldrh	r3, [r4, #12]
 8009888:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800988c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009890:	d003      	beq.n	800989a <__swsetup_r+0x9a>
 8009892:	4621      	mov	r1, r4
 8009894:	4630      	mov	r0, r6
 8009896:	f000 f9ff 	bl	8009c98 <__smakebuf_r>
 800989a:	89a0      	ldrh	r0, [r4, #12]
 800989c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80098a0:	f010 0301 	ands.w	r3, r0, #1
 80098a4:	d00a      	beq.n	80098bc <__swsetup_r+0xbc>
 80098a6:	2300      	movs	r3, #0
 80098a8:	60a3      	str	r3, [r4, #8]
 80098aa:	6963      	ldr	r3, [r4, #20]
 80098ac:	425b      	negs	r3, r3
 80098ae:	61a3      	str	r3, [r4, #24]
 80098b0:	6923      	ldr	r3, [r4, #16]
 80098b2:	b943      	cbnz	r3, 80098c6 <__swsetup_r+0xc6>
 80098b4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80098b8:	d1ba      	bne.n	8009830 <__swsetup_r+0x30>
 80098ba:	bd70      	pop	{r4, r5, r6, pc}
 80098bc:	0781      	lsls	r1, r0, #30
 80098be:	bf58      	it	pl
 80098c0:	6963      	ldrpl	r3, [r4, #20]
 80098c2:	60a3      	str	r3, [r4, #8]
 80098c4:	e7f4      	b.n	80098b0 <__swsetup_r+0xb0>
 80098c6:	2000      	movs	r0, #0
 80098c8:	e7f7      	b.n	80098ba <__swsetup_r+0xba>
 80098ca:	bf00      	nop
 80098cc:	20000010 	.word	0x20000010
 80098d0:	0801bd8c 	.word	0x0801bd8c
 80098d4:	0801bdac 	.word	0x0801bdac
 80098d8:	0801bd6c 	.word	0x0801bd6c

080098dc <__sflush_r>:
 80098dc:	898a      	ldrh	r2, [r1, #12]
 80098de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098e2:	4605      	mov	r5, r0
 80098e4:	0710      	lsls	r0, r2, #28
 80098e6:	460c      	mov	r4, r1
 80098e8:	d458      	bmi.n	800999c <__sflush_r+0xc0>
 80098ea:	684b      	ldr	r3, [r1, #4]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	dc05      	bgt.n	80098fc <__sflush_r+0x20>
 80098f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	dc02      	bgt.n	80098fc <__sflush_r+0x20>
 80098f6:	2000      	movs	r0, #0
 80098f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80098fe:	2e00      	cmp	r6, #0
 8009900:	d0f9      	beq.n	80098f6 <__sflush_r+0x1a>
 8009902:	2300      	movs	r3, #0
 8009904:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009908:	682f      	ldr	r7, [r5, #0]
 800990a:	602b      	str	r3, [r5, #0]
 800990c:	d032      	beq.n	8009974 <__sflush_r+0x98>
 800990e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009910:	89a3      	ldrh	r3, [r4, #12]
 8009912:	075a      	lsls	r2, r3, #29
 8009914:	d505      	bpl.n	8009922 <__sflush_r+0x46>
 8009916:	6863      	ldr	r3, [r4, #4]
 8009918:	1ac0      	subs	r0, r0, r3
 800991a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800991c:	b10b      	cbz	r3, 8009922 <__sflush_r+0x46>
 800991e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009920:	1ac0      	subs	r0, r0, r3
 8009922:	2300      	movs	r3, #0
 8009924:	4602      	mov	r2, r0
 8009926:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009928:	6a21      	ldr	r1, [r4, #32]
 800992a:	4628      	mov	r0, r5
 800992c:	47b0      	blx	r6
 800992e:	1c43      	adds	r3, r0, #1
 8009930:	89a3      	ldrh	r3, [r4, #12]
 8009932:	d106      	bne.n	8009942 <__sflush_r+0x66>
 8009934:	6829      	ldr	r1, [r5, #0]
 8009936:	291d      	cmp	r1, #29
 8009938:	d82c      	bhi.n	8009994 <__sflush_r+0xb8>
 800993a:	4a2a      	ldr	r2, [pc, #168]	; (80099e4 <__sflush_r+0x108>)
 800993c:	40ca      	lsrs	r2, r1
 800993e:	07d6      	lsls	r6, r2, #31
 8009940:	d528      	bpl.n	8009994 <__sflush_r+0xb8>
 8009942:	2200      	movs	r2, #0
 8009944:	6062      	str	r2, [r4, #4]
 8009946:	04d9      	lsls	r1, r3, #19
 8009948:	6922      	ldr	r2, [r4, #16]
 800994a:	6022      	str	r2, [r4, #0]
 800994c:	d504      	bpl.n	8009958 <__sflush_r+0x7c>
 800994e:	1c42      	adds	r2, r0, #1
 8009950:	d101      	bne.n	8009956 <__sflush_r+0x7a>
 8009952:	682b      	ldr	r3, [r5, #0]
 8009954:	b903      	cbnz	r3, 8009958 <__sflush_r+0x7c>
 8009956:	6560      	str	r0, [r4, #84]	; 0x54
 8009958:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800995a:	602f      	str	r7, [r5, #0]
 800995c:	2900      	cmp	r1, #0
 800995e:	d0ca      	beq.n	80098f6 <__sflush_r+0x1a>
 8009960:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009964:	4299      	cmp	r1, r3
 8009966:	d002      	beq.n	800996e <__sflush_r+0x92>
 8009968:	4628      	mov	r0, r5
 800996a:	f7ff f837 	bl	80089dc <_free_r>
 800996e:	2000      	movs	r0, #0
 8009970:	6360      	str	r0, [r4, #52]	; 0x34
 8009972:	e7c1      	b.n	80098f8 <__sflush_r+0x1c>
 8009974:	6a21      	ldr	r1, [r4, #32]
 8009976:	2301      	movs	r3, #1
 8009978:	4628      	mov	r0, r5
 800997a:	47b0      	blx	r6
 800997c:	1c41      	adds	r1, r0, #1
 800997e:	d1c7      	bne.n	8009910 <__sflush_r+0x34>
 8009980:	682b      	ldr	r3, [r5, #0]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d0c4      	beq.n	8009910 <__sflush_r+0x34>
 8009986:	2b1d      	cmp	r3, #29
 8009988:	d001      	beq.n	800998e <__sflush_r+0xb2>
 800998a:	2b16      	cmp	r3, #22
 800998c:	d101      	bne.n	8009992 <__sflush_r+0xb6>
 800998e:	602f      	str	r7, [r5, #0]
 8009990:	e7b1      	b.n	80098f6 <__sflush_r+0x1a>
 8009992:	89a3      	ldrh	r3, [r4, #12]
 8009994:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009998:	81a3      	strh	r3, [r4, #12]
 800999a:	e7ad      	b.n	80098f8 <__sflush_r+0x1c>
 800999c:	690f      	ldr	r7, [r1, #16]
 800999e:	2f00      	cmp	r7, #0
 80099a0:	d0a9      	beq.n	80098f6 <__sflush_r+0x1a>
 80099a2:	0793      	lsls	r3, r2, #30
 80099a4:	680e      	ldr	r6, [r1, #0]
 80099a6:	bf08      	it	eq
 80099a8:	694b      	ldreq	r3, [r1, #20]
 80099aa:	600f      	str	r7, [r1, #0]
 80099ac:	bf18      	it	ne
 80099ae:	2300      	movne	r3, #0
 80099b0:	eba6 0807 	sub.w	r8, r6, r7
 80099b4:	608b      	str	r3, [r1, #8]
 80099b6:	f1b8 0f00 	cmp.w	r8, #0
 80099ba:	dd9c      	ble.n	80098f6 <__sflush_r+0x1a>
 80099bc:	6a21      	ldr	r1, [r4, #32]
 80099be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80099c0:	4643      	mov	r3, r8
 80099c2:	463a      	mov	r2, r7
 80099c4:	4628      	mov	r0, r5
 80099c6:	47b0      	blx	r6
 80099c8:	2800      	cmp	r0, #0
 80099ca:	dc06      	bgt.n	80099da <__sflush_r+0xfe>
 80099cc:	89a3      	ldrh	r3, [r4, #12]
 80099ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099d2:	81a3      	strh	r3, [r4, #12]
 80099d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80099d8:	e78e      	b.n	80098f8 <__sflush_r+0x1c>
 80099da:	4407      	add	r7, r0
 80099dc:	eba8 0800 	sub.w	r8, r8, r0
 80099e0:	e7e9      	b.n	80099b6 <__sflush_r+0xda>
 80099e2:	bf00      	nop
 80099e4:	20400001 	.word	0x20400001

080099e8 <_fflush_r>:
 80099e8:	b538      	push	{r3, r4, r5, lr}
 80099ea:	690b      	ldr	r3, [r1, #16]
 80099ec:	4605      	mov	r5, r0
 80099ee:	460c      	mov	r4, r1
 80099f0:	b913      	cbnz	r3, 80099f8 <_fflush_r+0x10>
 80099f2:	2500      	movs	r5, #0
 80099f4:	4628      	mov	r0, r5
 80099f6:	bd38      	pop	{r3, r4, r5, pc}
 80099f8:	b118      	cbz	r0, 8009a02 <_fflush_r+0x1a>
 80099fa:	6983      	ldr	r3, [r0, #24]
 80099fc:	b90b      	cbnz	r3, 8009a02 <_fflush_r+0x1a>
 80099fe:	f000 f887 	bl	8009b10 <__sinit>
 8009a02:	4b14      	ldr	r3, [pc, #80]	; (8009a54 <_fflush_r+0x6c>)
 8009a04:	429c      	cmp	r4, r3
 8009a06:	d11b      	bne.n	8009a40 <_fflush_r+0x58>
 8009a08:	686c      	ldr	r4, [r5, #4]
 8009a0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d0ef      	beq.n	80099f2 <_fflush_r+0xa>
 8009a12:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009a14:	07d0      	lsls	r0, r2, #31
 8009a16:	d404      	bmi.n	8009a22 <_fflush_r+0x3a>
 8009a18:	0599      	lsls	r1, r3, #22
 8009a1a:	d402      	bmi.n	8009a22 <_fflush_r+0x3a>
 8009a1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a1e:	f000 f915 	bl	8009c4c <__retarget_lock_acquire_recursive>
 8009a22:	4628      	mov	r0, r5
 8009a24:	4621      	mov	r1, r4
 8009a26:	f7ff ff59 	bl	80098dc <__sflush_r>
 8009a2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a2c:	07da      	lsls	r2, r3, #31
 8009a2e:	4605      	mov	r5, r0
 8009a30:	d4e0      	bmi.n	80099f4 <_fflush_r+0xc>
 8009a32:	89a3      	ldrh	r3, [r4, #12]
 8009a34:	059b      	lsls	r3, r3, #22
 8009a36:	d4dd      	bmi.n	80099f4 <_fflush_r+0xc>
 8009a38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a3a:	f000 f908 	bl	8009c4e <__retarget_lock_release_recursive>
 8009a3e:	e7d9      	b.n	80099f4 <_fflush_r+0xc>
 8009a40:	4b05      	ldr	r3, [pc, #20]	; (8009a58 <_fflush_r+0x70>)
 8009a42:	429c      	cmp	r4, r3
 8009a44:	d101      	bne.n	8009a4a <_fflush_r+0x62>
 8009a46:	68ac      	ldr	r4, [r5, #8]
 8009a48:	e7df      	b.n	8009a0a <_fflush_r+0x22>
 8009a4a:	4b04      	ldr	r3, [pc, #16]	; (8009a5c <_fflush_r+0x74>)
 8009a4c:	429c      	cmp	r4, r3
 8009a4e:	bf08      	it	eq
 8009a50:	68ec      	ldreq	r4, [r5, #12]
 8009a52:	e7da      	b.n	8009a0a <_fflush_r+0x22>
 8009a54:	0801bd8c 	.word	0x0801bd8c
 8009a58:	0801bdac 	.word	0x0801bdac
 8009a5c:	0801bd6c 	.word	0x0801bd6c

08009a60 <std>:
 8009a60:	2300      	movs	r3, #0
 8009a62:	b510      	push	{r4, lr}
 8009a64:	4604      	mov	r4, r0
 8009a66:	e9c0 3300 	strd	r3, r3, [r0]
 8009a6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009a6e:	6083      	str	r3, [r0, #8]
 8009a70:	8181      	strh	r1, [r0, #12]
 8009a72:	6643      	str	r3, [r0, #100]	; 0x64
 8009a74:	81c2      	strh	r2, [r0, #14]
 8009a76:	6183      	str	r3, [r0, #24]
 8009a78:	4619      	mov	r1, r3
 8009a7a:	2208      	movs	r2, #8
 8009a7c:	305c      	adds	r0, #92	; 0x5c
 8009a7e:	f7fe ffa5 	bl	80089cc <memset>
 8009a82:	4b05      	ldr	r3, [pc, #20]	; (8009a98 <std+0x38>)
 8009a84:	6263      	str	r3, [r4, #36]	; 0x24
 8009a86:	4b05      	ldr	r3, [pc, #20]	; (8009a9c <std+0x3c>)
 8009a88:	62a3      	str	r3, [r4, #40]	; 0x28
 8009a8a:	4b05      	ldr	r3, [pc, #20]	; (8009aa0 <std+0x40>)
 8009a8c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009a8e:	4b05      	ldr	r3, [pc, #20]	; (8009aa4 <std+0x44>)
 8009a90:	6224      	str	r4, [r4, #32]
 8009a92:	6323      	str	r3, [r4, #48]	; 0x30
 8009a94:	bd10      	pop	{r4, pc}
 8009a96:	bf00      	nop
 8009a98:	0800a035 	.word	0x0800a035
 8009a9c:	0800a057 	.word	0x0800a057
 8009aa0:	0800a08f 	.word	0x0800a08f
 8009aa4:	0800a0b3 	.word	0x0800a0b3

08009aa8 <_cleanup_r>:
 8009aa8:	4901      	ldr	r1, [pc, #4]	; (8009ab0 <_cleanup_r+0x8>)
 8009aaa:	f000 b8af 	b.w	8009c0c <_fwalk_reent>
 8009aae:	bf00      	nop
 8009ab0:	080099e9 	.word	0x080099e9

08009ab4 <__sfmoreglue>:
 8009ab4:	b570      	push	{r4, r5, r6, lr}
 8009ab6:	1e4a      	subs	r2, r1, #1
 8009ab8:	2568      	movs	r5, #104	; 0x68
 8009aba:	4355      	muls	r5, r2
 8009abc:	460e      	mov	r6, r1
 8009abe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009ac2:	f7fe ffdb 	bl	8008a7c <_malloc_r>
 8009ac6:	4604      	mov	r4, r0
 8009ac8:	b140      	cbz	r0, 8009adc <__sfmoreglue+0x28>
 8009aca:	2100      	movs	r1, #0
 8009acc:	e9c0 1600 	strd	r1, r6, [r0]
 8009ad0:	300c      	adds	r0, #12
 8009ad2:	60a0      	str	r0, [r4, #8]
 8009ad4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009ad8:	f7fe ff78 	bl	80089cc <memset>
 8009adc:	4620      	mov	r0, r4
 8009ade:	bd70      	pop	{r4, r5, r6, pc}

08009ae0 <__sfp_lock_acquire>:
 8009ae0:	4801      	ldr	r0, [pc, #4]	; (8009ae8 <__sfp_lock_acquire+0x8>)
 8009ae2:	f000 b8b3 	b.w	8009c4c <__retarget_lock_acquire_recursive>
 8009ae6:	bf00      	nop
 8009ae8:	20025f60 	.word	0x20025f60

08009aec <__sfp_lock_release>:
 8009aec:	4801      	ldr	r0, [pc, #4]	; (8009af4 <__sfp_lock_release+0x8>)
 8009aee:	f000 b8ae 	b.w	8009c4e <__retarget_lock_release_recursive>
 8009af2:	bf00      	nop
 8009af4:	20025f60 	.word	0x20025f60

08009af8 <__sinit_lock_acquire>:
 8009af8:	4801      	ldr	r0, [pc, #4]	; (8009b00 <__sinit_lock_acquire+0x8>)
 8009afa:	f000 b8a7 	b.w	8009c4c <__retarget_lock_acquire_recursive>
 8009afe:	bf00      	nop
 8009b00:	20025f5f 	.word	0x20025f5f

08009b04 <__sinit_lock_release>:
 8009b04:	4801      	ldr	r0, [pc, #4]	; (8009b0c <__sinit_lock_release+0x8>)
 8009b06:	f000 b8a2 	b.w	8009c4e <__retarget_lock_release_recursive>
 8009b0a:	bf00      	nop
 8009b0c:	20025f5f 	.word	0x20025f5f

08009b10 <__sinit>:
 8009b10:	b510      	push	{r4, lr}
 8009b12:	4604      	mov	r4, r0
 8009b14:	f7ff fff0 	bl	8009af8 <__sinit_lock_acquire>
 8009b18:	69a3      	ldr	r3, [r4, #24]
 8009b1a:	b11b      	cbz	r3, 8009b24 <__sinit+0x14>
 8009b1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b20:	f7ff bff0 	b.w	8009b04 <__sinit_lock_release>
 8009b24:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009b28:	6523      	str	r3, [r4, #80]	; 0x50
 8009b2a:	4b13      	ldr	r3, [pc, #76]	; (8009b78 <__sinit+0x68>)
 8009b2c:	4a13      	ldr	r2, [pc, #76]	; (8009b7c <__sinit+0x6c>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	62a2      	str	r2, [r4, #40]	; 0x28
 8009b32:	42a3      	cmp	r3, r4
 8009b34:	bf04      	itt	eq
 8009b36:	2301      	moveq	r3, #1
 8009b38:	61a3      	streq	r3, [r4, #24]
 8009b3a:	4620      	mov	r0, r4
 8009b3c:	f000 f820 	bl	8009b80 <__sfp>
 8009b40:	6060      	str	r0, [r4, #4]
 8009b42:	4620      	mov	r0, r4
 8009b44:	f000 f81c 	bl	8009b80 <__sfp>
 8009b48:	60a0      	str	r0, [r4, #8]
 8009b4a:	4620      	mov	r0, r4
 8009b4c:	f000 f818 	bl	8009b80 <__sfp>
 8009b50:	2200      	movs	r2, #0
 8009b52:	60e0      	str	r0, [r4, #12]
 8009b54:	2104      	movs	r1, #4
 8009b56:	6860      	ldr	r0, [r4, #4]
 8009b58:	f7ff ff82 	bl	8009a60 <std>
 8009b5c:	68a0      	ldr	r0, [r4, #8]
 8009b5e:	2201      	movs	r2, #1
 8009b60:	2109      	movs	r1, #9
 8009b62:	f7ff ff7d 	bl	8009a60 <std>
 8009b66:	68e0      	ldr	r0, [r4, #12]
 8009b68:	2202      	movs	r2, #2
 8009b6a:	2112      	movs	r1, #18
 8009b6c:	f7ff ff78 	bl	8009a60 <std>
 8009b70:	2301      	movs	r3, #1
 8009b72:	61a3      	str	r3, [r4, #24]
 8009b74:	e7d2      	b.n	8009b1c <__sinit+0xc>
 8009b76:	bf00      	nop
 8009b78:	0801bbbc 	.word	0x0801bbbc
 8009b7c:	08009aa9 	.word	0x08009aa9

08009b80 <__sfp>:
 8009b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b82:	4607      	mov	r7, r0
 8009b84:	f7ff ffac 	bl	8009ae0 <__sfp_lock_acquire>
 8009b88:	4b1e      	ldr	r3, [pc, #120]	; (8009c04 <__sfp+0x84>)
 8009b8a:	681e      	ldr	r6, [r3, #0]
 8009b8c:	69b3      	ldr	r3, [r6, #24]
 8009b8e:	b913      	cbnz	r3, 8009b96 <__sfp+0x16>
 8009b90:	4630      	mov	r0, r6
 8009b92:	f7ff ffbd 	bl	8009b10 <__sinit>
 8009b96:	3648      	adds	r6, #72	; 0x48
 8009b98:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009b9c:	3b01      	subs	r3, #1
 8009b9e:	d503      	bpl.n	8009ba8 <__sfp+0x28>
 8009ba0:	6833      	ldr	r3, [r6, #0]
 8009ba2:	b30b      	cbz	r3, 8009be8 <__sfp+0x68>
 8009ba4:	6836      	ldr	r6, [r6, #0]
 8009ba6:	e7f7      	b.n	8009b98 <__sfp+0x18>
 8009ba8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009bac:	b9d5      	cbnz	r5, 8009be4 <__sfp+0x64>
 8009bae:	4b16      	ldr	r3, [pc, #88]	; (8009c08 <__sfp+0x88>)
 8009bb0:	60e3      	str	r3, [r4, #12]
 8009bb2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009bb6:	6665      	str	r5, [r4, #100]	; 0x64
 8009bb8:	f000 f847 	bl	8009c4a <__retarget_lock_init_recursive>
 8009bbc:	f7ff ff96 	bl	8009aec <__sfp_lock_release>
 8009bc0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009bc4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009bc8:	6025      	str	r5, [r4, #0]
 8009bca:	61a5      	str	r5, [r4, #24]
 8009bcc:	2208      	movs	r2, #8
 8009bce:	4629      	mov	r1, r5
 8009bd0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009bd4:	f7fe fefa 	bl	80089cc <memset>
 8009bd8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009bdc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009be0:	4620      	mov	r0, r4
 8009be2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009be4:	3468      	adds	r4, #104	; 0x68
 8009be6:	e7d9      	b.n	8009b9c <__sfp+0x1c>
 8009be8:	2104      	movs	r1, #4
 8009bea:	4638      	mov	r0, r7
 8009bec:	f7ff ff62 	bl	8009ab4 <__sfmoreglue>
 8009bf0:	4604      	mov	r4, r0
 8009bf2:	6030      	str	r0, [r6, #0]
 8009bf4:	2800      	cmp	r0, #0
 8009bf6:	d1d5      	bne.n	8009ba4 <__sfp+0x24>
 8009bf8:	f7ff ff78 	bl	8009aec <__sfp_lock_release>
 8009bfc:	230c      	movs	r3, #12
 8009bfe:	603b      	str	r3, [r7, #0]
 8009c00:	e7ee      	b.n	8009be0 <__sfp+0x60>
 8009c02:	bf00      	nop
 8009c04:	0801bbbc 	.word	0x0801bbbc
 8009c08:	ffff0001 	.word	0xffff0001

08009c0c <_fwalk_reent>:
 8009c0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c10:	4606      	mov	r6, r0
 8009c12:	4688      	mov	r8, r1
 8009c14:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009c18:	2700      	movs	r7, #0
 8009c1a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009c1e:	f1b9 0901 	subs.w	r9, r9, #1
 8009c22:	d505      	bpl.n	8009c30 <_fwalk_reent+0x24>
 8009c24:	6824      	ldr	r4, [r4, #0]
 8009c26:	2c00      	cmp	r4, #0
 8009c28:	d1f7      	bne.n	8009c1a <_fwalk_reent+0xe>
 8009c2a:	4638      	mov	r0, r7
 8009c2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c30:	89ab      	ldrh	r3, [r5, #12]
 8009c32:	2b01      	cmp	r3, #1
 8009c34:	d907      	bls.n	8009c46 <_fwalk_reent+0x3a>
 8009c36:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009c3a:	3301      	adds	r3, #1
 8009c3c:	d003      	beq.n	8009c46 <_fwalk_reent+0x3a>
 8009c3e:	4629      	mov	r1, r5
 8009c40:	4630      	mov	r0, r6
 8009c42:	47c0      	blx	r8
 8009c44:	4307      	orrs	r7, r0
 8009c46:	3568      	adds	r5, #104	; 0x68
 8009c48:	e7e9      	b.n	8009c1e <_fwalk_reent+0x12>

08009c4a <__retarget_lock_init_recursive>:
 8009c4a:	4770      	bx	lr

08009c4c <__retarget_lock_acquire_recursive>:
 8009c4c:	4770      	bx	lr

08009c4e <__retarget_lock_release_recursive>:
 8009c4e:	4770      	bx	lr

08009c50 <__swhatbuf_r>:
 8009c50:	b570      	push	{r4, r5, r6, lr}
 8009c52:	460e      	mov	r6, r1
 8009c54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c58:	2900      	cmp	r1, #0
 8009c5a:	b096      	sub	sp, #88	; 0x58
 8009c5c:	4614      	mov	r4, r2
 8009c5e:	461d      	mov	r5, r3
 8009c60:	da07      	bge.n	8009c72 <__swhatbuf_r+0x22>
 8009c62:	2300      	movs	r3, #0
 8009c64:	602b      	str	r3, [r5, #0]
 8009c66:	89b3      	ldrh	r3, [r6, #12]
 8009c68:	061a      	lsls	r2, r3, #24
 8009c6a:	d410      	bmi.n	8009c8e <__swhatbuf_r+0x3e>
 8009c6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c70:	e00e      	b.n	8009c90 <__swhatbuf_r+0x40>
 8009c72:	466a      	mov	r2, sp
 8009c74:	f000 fa44 	bl	800a100 <_fstat_r>
 8009c78:	2800      	cmp	r0, #0
 8009c7a:	dbf2      	blt.n	8009c62 <__swhatbuf_r+0x12>
 8009c7c:	9a01      	ldr	r2, [sp, #4]
 8009c7e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009c82:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009c86:	425a      	negs	r2, r3
 8009c88:	415a      	adcs	r2, r3
 8009c8a:	602a      	str	r2, [r5, #0]
 8009c8c:	e7ee      	b.n	8009c6c <__swhatbuf_r+0x1c>
 8009c8e:	2340      	movs	r3, #64	; 0x40
 8009c90:	2000      	movs	r0, #0
 8009c92:	6023      	str	r3, [r4, #0]
 8009c94:	b016      	add	sp, #88	; 0x58
 8009c96:	bd70      	pop	{r4, r5, r6, pc}

08009c98 <__smakebuf_r>:
 8009c98:	898b      	ldrh	r3, [r1, #12]
 8009c9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009c9c:	079d      	lsls	r5, r3, #30
 8009c9e:	4606      	mov	r6, r0
 8009ca0:	460c      	mov	r4, r1
 8009ca2:	d507      	bpl.n	8009cb4 <__smakebuf_r+0x1c>
 8009ca4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009ca8:	6023      	str	r3, [r4, #0]
 8009caa:	6123      	str	r3, [r4, #16]
 8009cac:	2301      	movs	r3, #1
 8009cae:	6163      	str	r3, [r4, #20]
 8009cb0:	b002      	add	sp, #8
 8009cb2:	bd70      	pop	{r4, r5, r6, pc}
 8009cb4:	ab01      	add	r3, sp, #4
 8009cb6:	466a      	mov	r2, sp
 8009cb8:	f7ff ffca 	bl	8009c50 <__swhatbuf_r>
 8009cbc:	9900      	ldr	r1, [sp, #0]
 8009cbe:	4605      	mov	r5, r0
 8009cc0:	4630      	mov	r0, r6
 8009cc2:	f7fe fedb 	bl	8008a7c <_malloc_r>
 8009cc6:	b948      	cbnz	r0, 8009cdc <__smakebuf_r+0x44>
 8009cc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ccc:	059a      	lsls	r2, r3, #22
 8009cce:	d4ef      	bmi.n	8009cb0 <__smakebuf_r+0x18>
 8009cd0:	f023 0303 	bic.w	r3, r3, #3
 8009cd4:	f043 0302 	orr.w	r3, r3, #2
 8009cd8:	81a3      	strh	r3, [r4, #12]
 8009cda:	e7e3      	b.n	8009ca4 <__smakebuf_r+0xc>
 8009cdc:	4b0d      	ldr	r3, [pc, #52]	; (8009d14 <__smakebuf_r+0x7c>)
 8009cde:	62b3      	str	r3, [r6, #40]	; 0x28
 8009ce0:	89a3      	ldrh	r3, [r4, #12]
 8009ce2:	6020      	str	r0, [r4, #0]
 8009ce4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ce8:	81a3      	strh	r3, [r4, #12]
 8009cea:	9b00      	ldr	r3, [sp, #0]
 8009cec:	6163      	str	r3, [r4, #20]
 8009cee:	9b01      	ldr	r3, [sp, #4]
 8009cf0:	6120      	str	r0, [r4, #16]
 8009cf2:	b15b      	cbz	r3, 8009d0c <__smakebuf_r+0x74>
 8009cf4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009cf8:	4630      	mov	r0, r6
 8009cfa:	f000 fa13 	bl	800a124 <_isatty_r>
 8009cfe:	b128      	cbz	r0, 8009d0c <__smakebuf_r+0x74>
 8009d00:	89a3      	ldrh	r3, [r4, #12]
 8009d02:	f023 0303 	bic.w	r3, r3, #3
 8009d06:	f043 0301 	orr.w	r3, r3, #1
 8009d0a:	81a3      	strh	r3, [r4, #12]
 8009d0c:	89a0      	ldrh	r0, [r4, #12]
 8009d0e:	4305      	orrs	r5, r0
 8009d10:	81a5      	strh	r5, [r4, #12]
 8009d12:	e7cd      	b.n	8009cb0 <__smakebuf_r+0x18>
 8009d14:	08009aa9 	.word	0x08009aa9

08009d18 <__malloc_lock>:
 8009d18:	4801      	ldr	r0, [pc, #4]	; (8009d20 <__malloc_lock+0x8>)
 8009d1a:	f7ff bf97 	b.w	8009c4c <__retarget_lock_acquire_recursive>
 8009d1e:	bf00      	nop
 8009d20:	20025f5c 	.word	0x20025f5c

08009d24 <__malloc_unlock>:
 8009d24:	4801      	ldr	r0, [pc, #4]	; (8009d2c <__malloc_unlock+0x8>)
 8009d26:	f7ff bf92 	b.w	8009c4e <__retarget_lock_release_recursive>
 8009d2a:	bf00      	nop
 8009d2c:	20025f5c 	.word	0x20025f5c

08009d30 <_realloc_r>:
 8009d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d32:	4607      	mov	r7, r0
 8009d34:	4614      	mov	r4, r2
 8009d36:	460e      	mov	r6, r1
 8009d38:	b921      	cbnz	r1, 8009d44 <_realloc_r+0x14>
 8009d3a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009d3e:	4611      	mov	r1, r2
 8009d40:	f7fe be9c 	b.w	8008a7c <_malloc_r>
 8009d44:	b922      	cbnz	r2, 8009d50 <_realloc_r+0x20>
 8009d46:	f7fe fe49 	bl	80089dc <_free_r>
 8009d4a:	4625      	mov	r5, r4
 8009d4c:	4628      	mov	r0, r5
 8009d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d50:	f000 fa0a 	bl	800a168 <_malloc_usable_size_r>
 8009d54:	42a0      	cmp	r0, r4
 8009d56:	d20f      	bcs.n	8009d78 <_realloc_r+0x48>
 8009d58:	4621      	mov	r1, r4
 8009d5a:	4638      	mov	r0, r7
 8009d5c:	f7fe fe8e 	bl	8008a7c <_malloc_r>
 8009d60:	4605      	mov	r5, r0
 8009d62:	2800      	cmp	r0, #0
 8009d64:	d0f2      	beq.n	8009d4c <_realloc_r+0x1c>
 8009d66:	4631      	mov	r1, r6
 8009d68:	4622      	mov	r2, r4
 8009d6a:	f7fe fe07 	bl	800897c <memcpy>
 8009d6e:	4631      	mov	r1, r6
 8009d70:	4638      	mov	r0, r7
 8009d72:	f7fe fe33 	bl	80089dc <_free_r>
 8009d76:	e7e9      	b.n	8009d4c <_realloc_r+0x1c>
 8009d78:	4635      	mov	r5, r6
 8009d7a:	e7e7      	b.n	8009d4c <_realloc_r+0x1c>

08009d7c <__ssputs_r>:
 8009d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d80:	688e      	ldr	r6, [r1, #8]
 8009d82:	429e      	cmp	r6, r3
 8009d84:	4682      	mov	sl, r0
 8009d86:	460c      	mov	r4, r1
 8009d88:	4690      	mov	r8, r2
 8009d8a:	461f      	mov	r7, r3
 8009d8c:	d838      	bhi.n	8009e00 <__ssputs_r+0x84>
 8009d8e:	898a      	ldrh	r2, [r1, #12]
 8009d90:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009d94:	d032      	beq.n	8009dfc <__ssputs_r+0x80>
 8009d96:	6825      	ldr	r5, [r4, #0]
 8009d98:	6909      	ldr	r1, [r1, #16]
 8009d9a:	eba5 0901 	sub.w	r9, r5, r1
 8009d9e:	6965      	ldr	r5, [r4, #20]
 8009da0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009da4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009da8:	3301      	adds	r3, #1
 8009daa:	444b      	add	r3, r9
 8009dac:	106d      	asrs	r5, r5, #1
 8009dae:	429d      	cmp	r5, r3
 8009db0:	bf38      	it	cc
 8009db2:	461d      	movcc	r5, r3
 8009db4:	0553      	lsls	r3, r2, #21
 8009db6:	d531      	bpl.n	8009e1c <__ssputs_r+0xa0>
 8009db8:	4629      	mov	r1, r5
 8009dba:	f7fe fe5f 	bl	8008a7c <_malloc_r>
 8009dbe:	4606      	mov	r6, r0
 8009dc0:	b950      	cbnz	r0, 8009dd8 <__ssputs_r+0x5c>
 8009dc2:	230c      	movs	r3, #12
 8009dc4:	f8ca 3000 	str.w	r3, [sl]
 8009dc8:	89a3      	ldrh	r3, [r4, #12]
 8009dca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009dce:	81a3      	strh	r3, [r4, #12]
 8009dd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009dd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dd8:	6921      	ldr	r1, [r4, #16]
 8009dda:	464a      	mov	r2, r9
 8009ddc:	f7fe fdce 	bl	800897c <memcpy>
 8009de0:	89a3      	ldrh	r3, [r4, #12]
 8009de2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009de6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009dea:	81a3      	strh	r3, [r4, #12]
 8009dec:	6126      	str	r6, [r4, #16]
 8009dee:	6165      	str	r5, [r4, #20]
 8009df0:	444e      	add	r6, r9
 8009df2:	eba5 0509 	sub.w	r5, r5, r9
 8009df6:	6026      	str	r6, [r4, #0]
 8009df8:	60a5      	str	r5, [r4, #8]
 8009dfa:	463e      	mov	r6, r7
 8009dfc:	42be      	cmp	r6, r7
 8009dfe:	d900      	bls.n	8009e02 <__ssputs_r+0x86>
 8009e00:	463e      	mov	r6, r7
 8009e02:	4632      	mov	r2, r6
 8009e04:	6820      	ldr	r0, [r4, #0]
 8009e06:	4641      	mov	r1, r8
 8009e08:	f7fe fdc6 	bl	8008998 <memmove>
 8009e0c:	68a3      	ldr	r3, [r4, #8]
 8009e0e:	6822      	ldr	r2, [r4, #0]
 8009e10:	1b9b      	subs	r3, r3, r6
 8009e12:	4432      	add	r2, r6
 8009e14:	60a3      	str	r3, [r4, #8]
 8009e16:	6022      	str	r2, [r4, #0]
 8009e18:	2000      	movs	r0, #0
 8009e1a:	e7db      	b.n	8009dd4 <__ssputs_r+0x58>
 8009e1c:	462a      	mov	r2, r5
 8009e1e:	f7ff ff87 	bl	8009d30 <_realloc_r>
 8009e22:	4606      	mov	r6, r0
 8009e24:	2800      	cmp	r0, #0
 8009e26:	d1e1      	bne.n	8009dec <__ssputs_r+0x70>
 8009e28:	6921      	ldr	r1, [r4, #16]
 8009e2a:	4650      	mov	r0, sl
 8009e2c:	f7fe fdd6 	bl	80089dc <_free_r>
 8009e30:	e7c7      	b.n	8009dc2 <__ssputs_r+0x46>
	...

08009e34 <_svfiprintf_r>:
 8009e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e38:	4698      	mov	r8, r3
 8009e3a:	898b      	ldrh	r3, [r1, #12]
 8009e3c:	061b      	lsls	r3, r3, #24
 8009e3e:	b09d      	sub	sp, #116	; 0x74
 8009e40:	4607      	mov	r7, r0
 8009e42:	460d      	mov	r5, r1
 8009e44:	4614      	mov	r4, r2
 8009e46:	d50e      	bpl.n	8009e66 <_svfiprintf_r+0x32>
 8009e48:	690b      	ldr	r3, [r1, #16]
 8009e4a:	b963      	cbnz	r3, 8009e66 <_svfiprintf_r+0x32>
 8009e4c:	2140      	movs	r1, #64	; 0x40
 8009e4e:	f7fe fe15 	bl	8008a7c <_malloc_r>
 8009e52:	6028      	str	r0, [r5, #0]
 8009e54:	6128      	str	r0, [r5, #16]
 8009e56:	b920      	cbnz	r0, 8009e62 <_svfiprintf_r+0x2e>
 8009e58:	230c      	movs	r3, #12
 8009e5a:	603b      	str	r3, [r7, #0]
 8009e5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009e60:	e0d1      	b.n	800a006 <_svfiprintf_r+0x1d2>
 8009e62:	2340      	movs	r3, #64	; 0x40
 8009e64:	616b      	str	r3, [r5, #20]
 8009e66:	2300      	movs	r3, #0
 8009e68:	9309      	str	r3, [sp, #36]	; 0x24
 8009e6a:	2320      	movs	r3, #32
 8009e6c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009e70:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e74:	2330      	movs	r3, #48	; 0x30
 8009e76:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a020 <_svfiprintf_r+0x1ec>
 8009e7a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009e7e:	f04f 0901 	mov.w	r9, #1
 8009e82:	4623      	mov	r3, r4
 8009e84:	469a      	mov	sl, r3
 8009e86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e8a:	b10a      	cbz	r2, 8009e90 <_svfiprintf_r+0x5c>
 8009e8c:	2a25      	cmp	r2, #37	; 0x25
 8009e8e:	d1f9      	bne.n	8009e84 <_svfiprintf_r+0x50>
 8009e90:	ebba 0b04 	subs.w	fp, sl, r4
 8009e94:	d00b      	beq.n	8009eae <_svfiprintf_r+0x7a>
 8009e96:	465b      	mov	r3, fp
 8009e98:	4622      	mov	r2, r4
 8009e9a:	4629      	mov	r1, r5
 8009e9c:	4638      	mov	r0, r7
 8009e9e:	f7ff ff6d 	bl	8009d7c <__ssputs_r>
 8009ea2:	3001      	adds	r0, #1
 8009ea4:	f000 80aa 	beq.w	8009ffc <_svfiprintf_r+0x1c8>
 8009ea8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009eaa:	445a      	add	r2, fp
 8009eac:	9209      	str	r2, [sp, #36]	; 0x24
 8009eae:	f89a 3000 	ldrb.w	r3, [sl]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	f000 80a2 	beq.w	8009ffc <_svfiprintf_r+0x1c8>
 8009eb8:	2300      	movs	r3, #0
 8009eba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009ebe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ec2:	f10a 0a01 	add.w	sl, sl, #1
 8009ec6:	9304      	str	r3, [sp, #16]
 8009ec8:	9307      	str	r3, [sp, #28]
 8009eca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009ece:	931a      	str	r3, [sp, #104]	; 0x68
 8009ed0:	4654      	mov	r4, sl
 8009ed2:	2205      	movs	r2, #5
 8009ed4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ed8:	4851      	ldr	r0, [pc, #324]	; (800a020 <_svfiprintf_r+0x1ec>)
 8009eda:	f7f6 f9a1 	bl	8000220 <memchr>
 8009ede:	9a04      	ldr	r2, [sp, #16]
 8009ee0:	b9d8      	cbnz	r0, 8009f1a <_svfiprintf_r+0xe6>
 8009ee2:	06d0      	lsls	r0, r2, #27
 8009ee4:	bf44      	itt	mi
 8009ee6:	2320      	movmi	r3, #32
 8009ee8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009eec:	0711      	lsls	r1, r2, #28
 8009eee:	bf44      	itt	mi
 8009ef0:	232b      	movmi	r3, #43	; 0x2b
 8009ef2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ef6:	f89a 3000 	ldrb.w	r3, [sl]
 8009efa:	2b2a      	cmp	r3, #42	; 0x2a
 8009efc:	d015      	beq.n	8009f2a <_svfiprintf_r+0xf6>
 8009efe:	9a07      	ldr	r2, [sp, #28]
 8009f00:	4654      	mov	r4, sl
 8009f02:	2000      	movs	r0, #0
 8009f04:	f04f 0c0a 	mov.w	ip, #10
 8009f08:	4621      	mov	r1, r4
 8009f0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f0e:	3b30      	subs	r3, #48	; 0x30
 8009f10:	2b09      	cmp	r3, #9
 8009f12:	d94e      	bls.n	8009fb2 <_svfiprintf_r+0x17e>
 8009f14:	b1b0      	cbz	r0, 8009f44 <_svfiprintf_r+0x110>
 8009f16:	9207      	str	r2, [sp, #28]
 8009f18:	e014      	b.n	8009f44 <_svfiprintf_r+0x110>
 8009f1a:	eba0 0308 	sub.w	r3, r0, r8
 8009f1e:	fa09 f303 	lsl.w	r3, r9, r3
 8009f22:	4313      	orrs	r3, r2
 8009f24:	9304      	str	r3, [sp, #16]
 8009f26:	46a2      	mov	sl, r4
 8009f28:	e7d2      	b.n	8009ed0 <_svfiprintf_r+0x9c>
 8009f2a:	9b03      	ldr	r3, [sp, #12]
 8009f2c:	1d19      	adds	r1, r3, #4
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	9103      	str	r1, [sp, #12]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	bfbb      	ittet	lt
 8009f36:	425b      	neglt	r3, r3
 8009f38:	f042 0202 	orrlt.w	r2, r2, #2
 8009f3c:	9307      	strge	r3, [sp, #28]
 8009f3e:	9307      	strlt	r3, [sp, #28]
 8009f40:	bfb8      	it	lt
 8009f42:	9204      	strlt	r2, [sp, #16]
 8009f44:	7823      	ldrb	r3, [r4, #0]
 8009f46:	2b2e      	cmp	r3, #46	; 0x2e
 8009f48:	d10c      	bne.n	8009f64 <_svfiprintf_r+0x130>
 8009f4a:	7863      	ldrb	r3, [r4, #1]
 8009f4c:	2b2a      	cmp	r3, #42	; 0x2a
 8009f4e:	d135      	bne.n	8009fbc <_svfiprintf_r+0x188>
 8009f50:	9b03      	ldr	r3, [sp, #12]
 8009f52:	1d1a      	adds	r2, r3, #4
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	9203      	str	r2, [sp, #12]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	bfb8      	it	lt
 8009f5c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009f60:	3402      	adds	r4, #2
 8009f62:	9305      	str	r3, [sp, #20]
 8009f64:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a030 <_svfiprintf_r+0x1fc>
 8009f68:	7821      	ldrb	r1, [r4, #0]
 8009f6a:	2203      	movs	r2, #3
 8009f6c:	4650      	mov	r0, sl
 8009f6e:	f7f6 f957 	bl	8000220 <memchr>
 8009f72:	b140      	cbz	r0, 8009f86 <_svfiprintf_r+0x152>
 8009f74:	2340      	movs	r3, #64	; 0x40
 8009f76:	eba0 000a 	sub.w	r0, r0, sl
 8009f7a:	fa03 f000 	lsl.w	r0, r3, r0
 8009f7e:	9b04      	ldr	r3, [sp, #16]
 8009f80:	4303      	orrs	r3, r0
 8009f82:	3401      	adds	r4, #1
 8009f84:	9304      	str	r3, [sp, #16]
 8009f86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f8a:	4826      	ldr	r0, [pc, #152]	; (800a024 <_svfiprintf_r+0x1f0>)
 8009f8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009f90:	2206      	movs	r2, #6
 8009f92:	f7f6 f945 	bl	8000220 <memchr>
 8009f96:	2800      	cmp	r0, #0
 8009f98:	d038      	beq.n	800a00c <_svfiprintf_r+0x1d8>
 8009f9a:	4b23      	ldr	r3, [pc, #140]	; (800a028 <_svfiprintf_r+0x1f4>)
 8009f9c:	bb1b      	cbnz	r3, 8009fe6 <_svfiprintf_r+0x1b2>
 8009f9e:	9b03      	ldr	r3, [sp, #12]
 8009fa0:	3307      	adds	r3, #7
 8009fa2:	f023 0307 	bic.w	r3, r3, #7
 8009fa6:	3308      	adds	r3, #8
 8009fa8:	9303      	str	r3, [sp, #12]
 8009faa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fac:	4433      	add	r3, r6
 8009fae:	9309      	str	r3, [sp, #36]	; 0x24
 8009fb0:	e767      	b.n	8009e82 <_svfiprintf_r+0x4e>
 8009fb2:	fb0c 3202 	mla	r2, ip, r2, r3
 8009fb6:	460c      	mov	r4, r1
 8009fb8:	2001      	movs	r0, #1
 8009fba:	e7a5      	b.n	8009f08 <_svfiprintf_r+0xd4>
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	3401      	adds	r4, #1
 8009fc0:	9305      	str	r3, [sp, #20]
 8009fc2:	4619      	mov	r1, r3
 8009fc4:	f04f 0c0a 	mov.w	ip, #10
 8009fc8:	4620      	mov	r0, r4
 8009fca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009fce:	3a30      	subs	r2, #48	; 0x30
 8009fd0:	2a09      	cmp	r2, #9
 8009fd2:	d903      	bls.n	8009fdc <_svfiprintf_r+0x1a8>
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d0c5      	beq.n	8009f64 <_svfiprintf_r+0x130>
 8009fd8:	9105      	str	r1, [sp, #20]
 8009fda:	e7c3      	b.n	8009f64 <_svfiprintf_r+0x130>
 8009fdc:	fb0c 2101 	mla	r1, ip, r1, r2
 8009fe0:	4604      	mov	r4, r0
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	e7f0      	b.n	8009fc8 <_svfiprintf_r+0x194>
 8009fe6:	ab03      	add	r3, sp, #12
 8009fe8:	9300      	str	r3, [sp, #0]
 8009fea:	462a      	mov	r2, r5
 8009fec:	4b0f      	ldr	r3, [pc, #60]	; (800a02c <_svfiprintf_r+0x1f8>)
 8009fee:	a904      	add	r1, sp, #16
 8009ff0:	4638      	mov	r0, r7
 8009ff2:	f3af 8000 	nop.w
 8009ff6:	1c42      	adds	r2, r0, #1
 8009ff8:	4606      	mov	r6, r0
 8009ffa:	d1d6      	bne.n	8009faa <_svfiprintf_r+0x176>
 8009ffc:	89ab      	ldrh	r3, [r5, #12]
 8009ffe:	065b      	lsls	r3, r3, #25
 800a000:	f53f af2c 	bmi.w	8009e5c <_svfiprintf_r+0x28>
 800a004:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a006:	b01d      	add	sp, #116	; 0x74
 800a008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a00c:	ab03      	add	r3, sp, #12
 800a00e:	9300      	str	r3, [sp, #0]
 800a010:	462a      	mov	r2, r5
 800a012:	4b06      	ldr	r3, [pc, #24]	; (800a02c <_svfiprintf_r+0x1f8>)
 800a014:	a904      	add	r1, sp, #16
 800a016:	4638      	mov	r0, r7
 800a018:	f7fe ff52 	bl	8008ec0 <_printf_i>
 800a01c:	e7eb      	b.n	8009ff6 <_svfiprintf_r+0x1c2>
 800a01e:	bf00      	nop
 800a020:	0801bbc0 	.word	0x0801bbc0
 800a024:	0801bbca 	.word	0x0801bbca
 800a028:	00000000 	.word	0x00000000
 800a02c:	08009d7d 	.word	0x08009d7d
 800a030:	0801bbc6 	.word	0x0801bbc6

0800a034 <__sread>:
 800a034:	b510      	push	{r4, lr}
 800a036:	460c      	mov	r4, r1
 800a038:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a03c:	f000 f89c 	bl	800a178 <_read_r>
 800a040:	2800      	cmp	r0, #0
 800a042:	bfab      	itete	ge
 800a044:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a046:	89a3      	ldrhlt	r3, [r4, #12]
 800a048:	181b      	addge	r3, r3, r0
 800a04a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a04e:	bfac      	ite	ge
 800a050:	6563      	strge	r3, [r4, #84]	; 0x54
 800a052:	81a3      	strhlt	r3, [r4, #12]
 800a054:	bd10      	pop	{r4, pc}

0800a056 <__swrite>:
 800a056:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a05a:	461f      	mov	r7, r3
 800a05c:	898b      	ldrh	r3, [r1, #12]
 800a05e:	05db      	lsls	r3, r3, #23
 800a060:	4605      	mov	r5, r0
 800a062:	460c      	mov	r4, r1
 800a064:	4616      	mov	r6, r2
 800a066:	d505      	bpl.n	800a074 <__swrite+0x1e>
 800a068:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a06c:	2302      	movs	r3, #2
 800a06e:	2200      	movs	r2, #0
 800a070:	f000 f868 	bl	800a144 <_lseek_r>
 800a074:	89a3      	ldrh	r3, [r4, #12]
 800a076:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a07a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a07e:	81a3      	strh	r3, [r4, #12]
 800a080:	4632      	mov	r2, r6
 800a082:	463b      	mov	r3, r7
 800a084:	4628      	mov	r0, r5
 800a086:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a08a:	f000 b817 	b.w	800a0bc <_write_r>

0800a08e <__sseek>:
 800a08e:	b510      	push	{r4, lr}
 800a090:	460c      	mov	r4, r1
 800a092:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a096:	f000 f855 	bl	800a144 <_lseek_r>
 800a09a:	1c43      	adds	r3, r0, #1
 800a09c:	89a3      	ldrh	r3, [r4, #12]
 800a09e:	bf15      	itete	ne
 800a0a0:	6560      	strne	r0, [r4, #84]	; 0x54
 800a0a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a0a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a0aa:	81a3      	strheq	r3, [r4, #12]
 800a0ac:	bf18      	it	ne
 800a0ae:	81a3      	strhne	r3, [r4, #12]
 800a0b0:	bd10      	pop	{r4, pc}

0800a0b2 <__sclose>:
 800a0b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0b6:	f000 b813 	b.w	800a0e0 <_close_r>
	...

0800a0bc <_write_r>:
 800a0bc:	b538      	push	{r3, r4, r5, lr}
 800a0be:	4d07      	ldr	r5, [pc, #28]	; (800a0dc <_write_r+0x20>)
 800a0c0:	4604      	mov	r4, r0
 800a0c2:	4608      	mov	r0, r1
 800a0c4:	4611      	mov	r1, r2
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	602a      	str	r2, [r5, #0]
 800a0ca:	461a      	mov	r2, r3
 800a0cc:	f7f7 fe8b 	bl	8001de6 <_write>
 800a0d0:	1c43      	adds	r3, r0, #1
 800a0d2:	d102      	bne.n	800a0da <_write_r+0x1e>
 800a0d4:	682b      	ldr	r3, [r5, #0]
 800a0d6:	b103      	cbz	r3, 800a0da <_write_r+0x1e>
 800a0d8:	6023      	str	r3, [r4, #0]
 800a0da:	bd38      	pop	{r3, r4, r5, pc}
 800a0dc:	20025f68 	.word	0x20025f68

0800a0e0 <_close_r>:
 800a0e0:	b538      	push	{r3, r4, r5, lr}
 800a0e2:	4d06      	ldr	r5, [pc, #24]	; (800a0fc <_close_r+0x1c>)
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	4604      	mov	r4, r0
 800a0e8:	4608      	mov	r0, r1
 800a0ea:	602b      	str	r3, [r5, #0]
 800a0ec:	f7f7 fe97 	bl	8001e1e <_close>
 800a0f0:	1c43      	adds	r3, r0, #1
 800a0f2:	d102      	bne.n	800a0fa <_close_r+0x1a>
 800a0f4:	682b      	ldr	r3, [r5, #0]
 800a0f6:	b103      	cbz	r3, 800a0fa <_close_r+0x1a>
 800a0f8:	6023      	str	r3, [r4, #0]
 800a0fa:	bd38      	pop	{r3, r4, r5, pc}
 800a0fc:	20025f68 	.word	0x20025f68

0800a100 <_fstat_r>:
 800a100:	b538      	push	{r3, r4, r5, lr}
 800a102:	4d07      	ldr	r5, [pc, #28]	; (800a120 <_fstat_r+0x20>)
 800a104:	2300      	movs	r3, #0
 800a106:	4604      	mov	r4, r0
 800a108:	4608      	mov	r0, r1
 800a10a:	4611      	mov	r1, r2
 800a10c:	602b      	str	r3, [r5, #0]
 800a10e:	f7f7 fe92 	bl	8001e36 <_fstat>
 800a112:	1c43      	adds	r3, r0, #1
 800a114:	d102      	bne.n	800a11c <_fstat_r+0x1c>
 800a116:	682b      	ldr	r3, [r5, #0]
 800a118:	b103      	cbz	r3, 800a11c <_fstat_r+0x1c>
 800a11a:	6023      	str	r3, [r4, #0]
 800a11c:	bd38      	pop	{r3, r4, r5, pc}
 800a11e:	bf00      	nop
 800a120:	20025f68 	.word	0x20025f68

0800a124 <_isatty_r>:
 800a124:	b538      	push	{r3, r4, r5, lr}
 800a126:	4d06      	ldr	r5, [pc, #24]	; (800a140 <_isatty_r+0x1c>)
 800a128:	2300      	movs	r3, #0
 800a12a:	4604      	mov	r4, r0
 800a12c:	4608      	mov	r0, r1
 800a12e:	602b      	str	r3, [r5, #0]
 800a130:	f7f7 fe91 	bl	8001e56 <_isatty>
 800a134:	1c43      	adds	r3, r0, #1
 800a136:	d102      	bne.n	800a13e <_isatty_r+0x1a>
 800a138:	682b      	ldr	r3, [r5, #0]
 800a13a:	b103      	cbz	r3, 800a13e <_isatty_r+0x1a>
 800a13c:	6023      	str	r3, [r4, #0]
 800a13e:	bd38      	pop	{r3, r4, r5, pc}
 800a140:	20025f68 	.word	0x20025f68

0800a144 <_lseek_r>:
 800a144:	b538      	push	{r3, r4, r5, lr}
 800a146:	4d07      	ldr	r5, [pc, #28]	; (800a164 <_lseek_r+0x20>)
 800a148:	4604      	mov	r4, r0
 800a14a:	4608      	mov	r0, r1
 800a14c:	4611      	mov	r1, r2
 800a14e:	2200      	movs	r2, #0
 800a150:	602a      	str	r2, [r5, #0]
 800a152:	461a      	mov	r2, r3
 800a154:	f7f7 fe8a 	bl	8001e6c <_lseek>
 800a158:	1c43      	adds	r3, r0, #1
 800a15a:	d102      	bne.n	800a162 <_lseek_r+0x1e>
 800a15c:	682b      	ldr	r3, [r5, #0]
 800a15e:	b103      	cbz	r3, 800a162 <_lseek_r+0x1e>
 800a160:	6023      	str	r3, [r4, #0]
 800a162:	bd38      	pop	{r3, r4, r5, pc}
 800a164:	20025f68 	.word	0x20025f68

0800a168 <_malloc_usable_size_r>:
 800a168:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a16c:	1f18      	subs	r0, r3, #4
 800a16e:	2b00      	cmp	r3, #0
 800a170:	bfbc      	itt	lt
 800a172:	580b      	ldrlt	r3, [r1, r0]
 800a174:	18c0      	addlt	r0, r0, r3
 800a176:	4770      	bx	lr

0800a178 <_read_r>:
 800a178:	b538      	push	{r3, r4, r5, lr}
 800a17a:	4d07      	ldr	r5, [pc, #28]	; (800a198 <_read_r+0x20>)
 800a17c:	4604      	mov	r4, r0
 800a17e:	4608      	mov	r0, r1
 800a180:	4611      	mov	r1, r2
 800a182:	2200      	movs	r2, #0
 800a184:	602a      	str	r2, [r5, #0]
 800a186:	461a      	mov	r2, r3
 800a188:	f7f7 fe10 	bl	8001dac <_read>
 800a18c:	1c43      	adds	r3, r0, #1
 800a18e:	d102      	bne.n	800a196 <_read_r+0x1e>
 800a190:	682b      	ldr	r3, [r5, #0]
 800a192:	b103      	cbz	r3, 800a196 <_read_r+0x1e>
 800a194:	6023      	str	r3, [r4, #0]
 800a196:	bd38      	pop	{r3, r4, r5, pc}
 800a198:	20025f68 	.word	0x20025f68

0800a19c <_init>:
 800a19c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a19e:	bf00      	nop
 800a1a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1a2:	bc08      	pop	{r3}
 800a1a4:	469e      	mov	lr, r3
 800a1a6:	4770      	bx	lr

0800a1a8 <_fini>:
 800a1a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1aa:	bf00      	nop
 800a1ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1ae:	bc08      	pop	{r3}
 800a1b0:	469e      	mov	lr, r3
 800a1b2:	4770      	bx	lr
